{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -470,1 +469,1 @@\n-    record NestedTypes(List<Type.Declared> nestedTypes) {\n+    record NestedDeclarations(List<Scoped> nestedDeclarations) {\n@@ -472,2 +471,2 @@\n-        public static void with(Declaration declaration, List<Type.Declared> nestedTypes) {\n-            declaration.addAttribute(new NestedTypes(nestedTypes));\n+        public static void with(Declaration declaration, List<Scoped> nestedDeclarations) {\n+            declaration.addAttribute(new NestedDeclarations(nestedDeclarations));\n@@ -476,3 +475,3 @@\n-        public static Optional<List<Type.Declared>> get(Declaration declaration) {\n-            return declaration.getAttribute(NestedTypes.class)\n-                    .stream().map(NestedTypes::nestedTypes).findFirst();\n+        public static Optional<List<Scoped>> get(Declaration declaration) {\n+            return declaration.getAttribute(NestedDeclarations.class)\n+                    .stream().map(NestedDeclarations::nestedDeclarations).findFirst();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.NestedTypes;\n+import org.openjdk.jextract.impl.DeclarationImpl.NestedDeclarations;\n@@ -457,1 +457,1 @@\n-        List<Type.Declared> nestedTypes = nestedDefinitions.stream()\n+        List<Scoped> nestedDecls = nestedDefinitions.stream()\n@@ -459,1 +459,1 @@\n-                .map(s -> Type.declared((Scoped)s))\n+                .map(Scoped.class::cast)\n@@ -461,2 +461,2 @@\n-        if (!nestedTypes.isEmpty()) {\n-            NestedTypes.with(d, nestedTypes);\n+        if (!nestedDecls.isEmpty()) {\n+            NestedDeclarations.with(d, nestedDecls);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import org.openjdk.jextract.Declaration.Typedef;\n-import org.openjdk.jextract.Declaration.Variable;\n@@ -39,1 +37,1 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.NestedTypes;\n+import org.openjdk.jextract.impl.DeclarationImpl.NestedDeclarations;\n@@ -116,2 +114,2 @@\n-        NestedTypes.get(declaration).ifPresent(decls ->\n-            decls.stream().map(Type.Declared::tree).forEach(nestedDeclAction));\n+        NestedDeclarations.get(declaration).ifPresent(decls ->\n+            decls.forEach(nestedDeclAction));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-struct Bar {\n-    int x;\n-};\n-\n","filename":"test\/jtreg\/generator\/outOfOrder\/out_of_order_struct.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}