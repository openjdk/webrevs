{"files":[{"patch":"@@ -51,2 +51,6 @@\n-        checkMissingDep(funcTree, funcTree.type().returnType());\n-        funcTree.type().argumentTypes().forEach(p -> checkMissingDep(funcTree, p));\n+        Declaration posDecl = posDecl(funcTree, parent);\n+        funcTree.parameters().forEach(p -> p.accept(this, posDecl));\n+\n+        Utils.forEachNested(funcTree, s -> s.accept(this, posDecl));\n+\n+        checkMissingDep(posDecl, funcTree.type());\n@@ -59,2 +63,2 @@\n-\n-        d.members().forEach(fieldTree -> fieldTree.accept(this, d));\n+        Declaration posDecl = posDecl(d, parent);\n+        d.members().forEach(fieldTree -> fieldTree.accept(this, posDecl));\n@@ -68,1 +72,8 @@\n-        checkMissingDep(tree, tree.type());\n+        Declaration posDecl = posDecl(tree, parent);\n+        Utils.forEachNested(tree, s -> s.accept(this, posDecl));\n+\n+        checkMissingDep(posDecl, tree.type());\n+        Type.Function func = Utils.getAsFunctionPointer(tree.type());\n+        if (func != null) {\n+            checkMissingDep(posDecl, func);\n+        }\n@@ -76,4 +87,7 @@\n-        if (parent != null && !Skip.isPresent(parent))  {\n-            checkMissingDep(parent, tree.type());\n-        } else {\n-            checkMissingDep(tree, tree.type());\n+        Declaration posDecl = posDecl(tree, parent);\n+        Utils.forEachNested(tree, s -> s.accept(this, posDecl));\n+\n+        checkMissingDep(posDecl, tree.type());\n+        Type.Function func = Utils.getAsFunctionPointer(tree.type());\n+        if (func != null) {\n+            checkMissingDep(posDecl, func);\n@@ -89,0 +103,9 @@\n+    Declaration posDecl(Declaration decl, Declaration parent) {\n+        return parent != null ? parent : decl;\n+    }\n+\n+    void checkMissingDep(Declaration decl, Type.Function function) {\n+        checkMissingDep(decl, function.returnType());\n+        function.argumentTypes().forEach(p -> checkMissingDep(decl, p));\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MissingDepChecker.java","additions":32,"deletions":9,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider.includeDeps;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class TestNestedBadIncludes extends JextractToolRunner {\n+\n+    JextractResult result;\n+\n+    @BeforeClass\n+    public void before() {\n+        Path output = getOutputFilePath(\"TestNestedBadIncludes-nestedBadIncludes.h\");\n+        Path outputH = getInputFilePath(\"nested_bad_includes.h\");\n+        List<String> options = new ArrayList<>();\n+        Stream.of(cases()).flatMap(\n+                arr -> Stream.of((String)arr[0], (String)arr[1])\n+        ).collect(Collectors.toCollection(() -> options));\n+        options.add(outputH.toString());\n+        result = run(output, options.toArray(new String[0]));\n+        result.checkFailure(FAILURE);\n+    }\n+\n+    @Test(dataProvider = \"cases\")\n+    public void testBadIncludes(String includeOption, String badDeclName, String missingDepName) {\n+        result.checkContainsOutput(\"ERROR: \" + badDeclName + \" depends on \" + missingDepName);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] cases() {\n+        return new Object[][]{\n+            {\"--include-typedef\",        \"t_str\",          \"A\" },\n+            {\"--include-function\",       \"f_str_arg\",      \"A\" },\n+            {\"--include-function\",       \"f_str_ret\",      \"A\" },\n+            {\"--include-var\",            \"v_str\",          \"A\" },\n+            {\"--include-typedef\",        \"t_fp_arg\",       \"A\" },\n+            {\"--include-typedef\",        \"t_fp_ret\",       \"A\" },\n+            {\"--include-function\",       \"f_fp_arg\",       \"A\" },\n+            {\"--include-function\",       \"f_fp_ret\",       \"A\" },\n+            {\"--include-var\",            \"v_fp_arg\",       \"A\" },\n+            {\"--include-var\",            \"v_fp_ret\",       \"A\" },\n+        };\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/includeDeps\/TestNestedBadIncludes.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+struct A { };\n+\n+\/\/ nested\n+\n+typedef struct { struct A a; } t_str;\n+\n+void f_str_arg(struct { struct A a; });\n+\n+struct { struct A a; } f_str_ret();\n+\n+struct { struct A a; } v_str;\n+\n+\/\/ function pointers\n+\n+typedef void (*t_fp_arg)(struct A);\n+\n+typedef struct A (*t_fp_ret)(int);\n+\n+void f_fp_arg(void (*p)(struct A));\n+\n+void f_fp_ret(struct A (*p)(int));\n+\n+void (*v_fp_arg)(struct A);\n+\n+struct A (*v_fp_ret)(int);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/includeDeps\/nested_bad_includes.h","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}