{"files":[{"patch":"@@ -5,1 +5,1 @@\n-:bulb: For instruction on how to use the jextract tool, please refer to the guide [here](doc\/GUIDE.md)\n+:bulb: For instruction on how to use the jextract tool, please refer to the guide [here](doc\/GUIDE.md).\n","filename":"README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,7 +9,8 @@\n-archive of native functions and global variables. The user then has to look up the functions\n-they want to call using a `SymbolLookup`, and finally _link_ the functions by using the\n-`Linker::downcallHandle` method. Additionally, a client may need to create function pointers for\n-Java functions using `Linker::upcallStub`, access global variables through the addresses\n-returned by a lookup, and construct `MemoryLayout` instances for the structs they want to access.\n-The jextract tool aims to automate many of these steps, so that a client can instead\n-immediately start using the native libraries they are interested in.\n+archive of native functions and global variables. The user then has to look up the\n+functions they want to call using a [`SymbolLookup`], and finally _link_ the functions by\n+using the [`Linker::downcallHandle`] method. Additionally, a client may need to create\n+function pointers for Java functions using [`Linker::upcallStub`], access global variables\n+through the addresses returned by a lookup, and construct [`MemoryLayout`] instances for\n+the structs they want to access. The jextract tool aims to automate many of these steps,\n+so that a client can instead immediately start using the native libraries they are\n+interested in.\n@@ -20,2 +21,2 @@\n-Note that at this time, jextract only supports C header files. If you have a library written\n-in another language, see the section on [other languages](#other-languages).\n+Note that at this time, jextract (and FFM) only supports C header files. If you have a\n+library written in another language, see the section on [other languages](#other-languages).\n@@ -55,1 +56,2 @@\n-  called `mylib`. (The section on [library loading](#library-loading) discusses how is done)\n+  called `mylib`. (The section on [library loading](#library-loading) discusses how this\n+  is done)\n@@ -59,1 +61,1 @@\n-should be included. This is also the header files that should be passed to jextract. If\n+should be included. This is also the header file that should be passed to jextract. If\n@@ -183,5 +185,4 @@\n-2. the function's address, represented as a\n-  [`MemorySegment`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/MemorySegment.html)\n-3. the [function descriptor](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/FunctionDescriptor.html)\n-4. the [method handle](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/invoke\/MethodHandle.html)\n-  returned by the FFM linker, which is used to implement the static wrapper method (1).\n+2. the function's address, represented as a [`MemorySegment`]\n+3. the [`FunctionDescriptor`]\n+4. the [`MethodHandle`] returned by the FFM linker, which is used to implement the static\n+  wrapper method (1).\n@@ -189,4 +190,3 @@\n-The parameter types and return type of this method depend on the\n-[carrier types](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/FunctionDescriptor.html#toMethodType())\n-of the layouts that make up the function descriptor of the function, which is itself derived\n-from the parsed header files.\n+The parameter types and return type of this method depend on the [carrier types] of the\n+layouts that make up the function descriptor of the function, which is itself derived from\n+the parsed header files.\n@@ -236,2 +236,2 @@\n-Jextract will generate a set of simple getter methods to access the constant values of the\n-macro and the enum constants:\n+Jextract will generate simple getter methods to access the constant values of the macro\n+and the enum constants:\n@@ -257,4 +257,1 @@\n-not supported by jextract. For function-like macros, alternatives include re-writing the\n-code inside the macro in Java, using the FFM API, or writing a small C library which wraps\n-the function-like macro in a proper exported C function that can then be linked against\n-through the FFM API.\n+not supported by jextract. (See the section on [unsupported features](#unsupported-features))\n@@ -264,1 +261,2 @@\n-using `-D` on the command line, no accessor will be generated.\n+using `-D` on the command line, no accessor will be generated. (See the section on\n+[pre-processor definitions](#preprocessor-definitions))\n@@ -268,1 +266,1 @@\n-Things get a little more complicated for structs and unions. For a struct delcaration like\n+Things get a little more complicated for structs and unions. For a struct declaration like\n@@ -376,4 +374,3 @@\n-The pointer that is returned by the corresponding method that jextract generates\n-for this function does not have the correct bounds or lifetime associated with it.\n-These things are not possible to figure out automatically (for instance, a pointer\n-could point at a single `Point` struct, or an array of multiple `Point` structs).\n+The pointer that is returned by `new_point` does not have the correct bounds or lifetime\n+associated with it. These properties can not be inferred: for instance, a pointer could\n+point at a single `Point` struct, or an array of multiple `Point` structs.\n@@ -399,0 +396,3 @@\n+The class that jextract generates for unions is identical to the class generated for\n+structs.\n+\n@@ -420,3 +420,3 @@\n-    public static FunctionDescriptor descriptor() { ... }\n-    public static MemorySegment allocate(callback_t.Function fi, Arena arena) { ... }\n-    public static int invoke(MemorySegment funcPtr,int x, int y) { ... }\n+    public static FunctionDescriptor descriptor() { ... } \/\/ 1\n+    public static MemorySegment allocate(callback_t.Function fi, Arena arena) { ... } \/\/ 2\n+    public static int invoke(MemorySegment funcPtr,int x, int y) { ... } \/\/ 3\n@@ -426,5 +426,7 @@\n-We again have a meta-data accessor for the function descriptor (`descriptor()`). There's\n-an `allocate` method that can be used to allocate a new instance of this function pointer,\n-whose implementation is defined by the `fi` functional interface instance. And finally,\n-there's an `invoke` method which can be used to invoke an instance of `callback_t` that\n-we received from native code.\n+In the generated class we have:\n+\n+1. a meta-data accessor for the function descriptor (`descriptor()`).\n+2. an `allocate` method that can be used to allocate a new instance of this function\n+  pointer, whose implementation is defined by the `fi` functional interface instance.\n+3. an `invoke` method which can be used to invoke an instance of `callback_t` that\n+  we received from native code.\n@@ -458,4 +460,3 @@\n-returned by the [`java.lang.foreign.Linker::upcallStub`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...))\n-method. The `arena` argument denotes the lifetime of the upcall stub, meaning that the\n-upcall stub will be freed when the arena is closed (after which the callback instance\n-can no longer be called).\n+returned by the [`Linker::upcallStub`] method. The `arena` argument denotes the lifetime\n+of the upcall stub, meaning that the upcall stub will be freed when the arena is closed\n+(after which the callback instance can no longer be called).\n@@ -517,1 +518,1 @@\n-`java.lang.foreign.Linker` class](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#variadic-funcs).\n+`java.lang.foreign.Linker` class][`Linker`].\n@@ -682,1 +683,5 @@\n-- Function-like macros (as mentioned in the [section on constants](#constants-macros--enums))\n+\n+- Function-like macros. Alternatives include re-writing the code inside the macro in Java,\n+  using the FFM API, or writing a small C library which wraps the function-like macro in a\n+  proper exported C function that can then be linked against through the FFM API.\n+\n@@ -702,0 +707,9 @@\n+- Linker options. It is currently not possible to tell jextract to use linker options to\n+  link a particular function. Code will have to be edited manually to add them. (for instance,\n+  if the function sets `errno`, the `Linker.Option.captureCallState` option has to be added\n+  manually).\n+\n+- It is not possible to specify the byte order of a struct field on the command line.\n+  Attributes that control the byte order, such as GCC's `scalar_storage_order` are currently\n+  ignored. Again, manual editing of the generated code is required to work around this.\n+\n@@ -706,3 +720,3 @@\n-C header files are processed by a pre-processor by a compiler before they are inspected\n-further. It is possible for a header file to contain so-called 'compiler switches', which\n-can be used to conditionally generate code based on the value of a macro, for instance:\n+C header files are processed by a pre-processor before they are inspected further. It is\n+possible for a header file to contain so-called 'compiler switches', which can be used to\n+conditionally generate code based on the value of a macro, for instance:\n@@ -735,1 +749,1 @@\n-When using the `--library <libspec>` option, the generated code internally uses [`SymbolLookup::libraryLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#libraryLookup(java.nio.file.Path,java.lang.foreign.Arena))\n+When using the `--library <libspec>` option, the generated code internally uses [`SymbolLookup::libraryLookup`]\n@@ -737,1 +751,1 @@\n-name is then mapped to a platform dependent name using [`System::mapLibraryName`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#mapLibraryName(java.lang.String)).\n+name is then mapped to a platform dependent name using [`System::mapLibraryName`].\n@@ -757,5 +771,5 @@\n-`--library` through [`System::loadLibrary`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#loadLibrary(java.lang.String)).\n-The library search path for `System::loadLibrary` is specified through the [`java.library.path`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#java.library.path)\n-system property instead of the OS-specific environment variable. Though, please note\n-that if the loaded library has any dependencies, those dependencies will again be loaded\n-through the OS-specific library loading mechanism (this is outside of the JVM's control).\n+`--library` through [`System::loadLibrary`]. The library search path for\n+`System::loadLibrary` is specified through the [`java.library.path`] system property\n+instead of the OS-specific environment variable. Though, please note that if the loaded\n+library has any dependencies, those dependencies will again be loaded through the\n+OS-specific library loading mechanism (this is outside of the JVM's control).\n@@ -765,4 +779,3 @@\n-[`SymbolLookup::loaderLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#loaderLookup()),\n-with [`Linker::defaultLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#defaultLookup())\n-as a fallback. When `--library` is specified when generating the bindings, these 2 lookup\n-modes will be used as a fallback.\n+[`SymbolLookup::loaderLookup`], with [`Linker::defaultLookup`] as a fallback. When\n+`--library` is specified when generating the bindings, these 2 lookup modes will be used\n+as a fallback.\n@@ -896,1 +909,1 @@\n-can also specify additional clang compiler options, by creating a file named\n+can also specify additional clang compiler options by creating a file named\n@@ -911,0 +924,16 @@\n+\n+[`SymbolLookup`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html\n+[`SymbolLookup::libraryLookup`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#libraryLookup(java.nio.file.Path,java.lang.foreign.Arena)\n+[`SymbolLookup::loaderLookup`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#loaderLookup()\n+[`Linker`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#variadic-funcs\n+[`Linker::downcallHandle`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)\n+[`Linker::upcallStub`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)\n+[`Linker::defaultLookup`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#defaultLookup()\n+[`MemoryLayout`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/MemoryLayout.html\n+[`MemorySegment`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/MemorySegment.html\n+[`FunctionDescriptor`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/FunctionDescriptor.html\n+[`MethodHandle`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/invoke\/MethodHandle.html\n+[carrier types]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/FunctionDescriptor.html#toMethodType()\n+[`System::mapLibraryName`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#mapLibraryName(java.lang.String)\n+[`System::loadLibrary`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#loadLibrary(java.lang.String)\n+[`java.library.path`]: https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#java.library.path\n","filename":"doc\/GUIDE.md","additions":90,"deletions":61,"binary":false,"changes":151,"status":"modified"}]}