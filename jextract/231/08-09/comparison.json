{"files":[{"patch":"@@ -57,0 +57,13 @@\n+Note that specifying the wrong header file to jextract may result in errors during parsing.\n+Please consult the documentation of the library in question about which header file\n+should be included. This is also the header files that should be passed to jextract. If\n+a library has multiple main header files, they can be passed to jextract by creating a new\n+header file which `#include`s these header files, and then this new header file can be\n+passed to jextract.\n+\n+The library name specified to `--library` will be mapped to a platform specific library\n+file name, and should be findable through the OS's library search mechanism, typically by\n+specifying the library's containing directory on `LD_LIBRARY_PATH` (Linux),\n+`DYLD_LIBRARY_PATH` (Mac), or `PATH` (Windows). See the section on\n+[library loading](#library-loading) for more information.\n+\n@@ -79,69 +92,0 @@\n-### Preprocessor Definitions\n-\n-C header files are processed by a pre-processor by a compiler before they are inspected\n-further. It is possible for a header file to contain so-called 'compiler switches', which\n-can be used to conditionally generate code based on the value of a macro, for instance:\n-\n-```c\n-#ifdef MY_MACRO\n-int x = 42;\n-#else\n-int x = 0;\n-#endif\n-```\n-\n-The value of these macros also affects the behavior of jextract. Therefore, jextract\n-supports setting macro values on the command line using the `-D` or\n-`--define-macro <macro>=<value>` option. For instance, we can use `-D MY_MACRO` to set\n-the value of `MY_MACRO` in the above snippet to `1`, and trigger the first _branch_ of the\n-compiler switch, thereby defining `int x = 42`.\n-\n-Please note that other header files included by jextract may also define macro values using\n-the `#define` pre-processor directive. It is therefore important to notice the order in\n-which header files are processed by a compiler, as feeding header files to jextract in the\n-wrong order may result in weird errors due to missing macro definitions. A well-known\n-example of this are Windows SDK headers. Almost always, the main `Windows.h` header file\n-should be passed to jextract for things to work correctly. Please consult the\n-documentation of the library that you're trying to use to find out which header file should\n-be included\/passed to jextract.\n-\n-### Library Loading\n-\n-When using the `--library <libspec>` option, the generated code internally uses [`SymbolLookup::libraryLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#libraryLookup(java.nio.file.Path,java.lang.foreign.Arena))\n-to load libraries specified by `<libspec>`. If `<libspec>` denotes a library name, the\n-name is then mapped to a platform dependent name using [`System::mapLibraryName`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#mapLibraryName(java.lang.String)).\n-This means, for instance, that on Linux, when specifying `--library mylib`, the bindings will\n-try to load `libmylib.so` using the OS-specific library loading mechanism on Linux, which\n-is [`dlopen`](https:\/\/man7.org\/linux\/man-pages\/man3\/dlopen.3.html). This way of loading\n-libraries also relies on OS-specific search mechanisms to find the library file. On Linux\n-the search path can be amended using the `LD_LIBRARY_PATH` environment variable (see the\n-documentation of `dlopen`). On Mac the relevant environment variable is `DYLD_LIBRARY_PATH`,\n-and on Windows the variable is `PATH`. Though, for the latter the overall library search\n-mechanism is entirely different (described [here](https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/dlls\/dynamic-link-library-search-order)).\n-When using the HotSpot JVM, the `-Xlog:library` option can also be used to log where the JVM\n-is trying to load a library from, which can be useful to debug a failure to load a library.\n-\n-The `<libspec>` argument of the `--library` option can either be a library name, or a path\n-to a library file (either relative or absolute) if `<libspec>` is prefixed with the `:`\n-character, such as `:mylib.dll`.\n-\n-It is important to understand how libraries are loaded on the platform that is being used,\n-as the library search mechanisms differ between them. Alternatively, JNI's library loading\n-and search mechanism can be used as well. When the `--use-system-load-library` option is\n-specified to jextract, the generated bindings will try to load libraries specified using\n-`--library` through [`System::loadLibrary`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#loadLibrary(java.lang.String)).\n-The library search path for `System::loadLibrary` is specified through the [`java.library.path`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#java.library.path)\n-system property instead of the OS-specific environment variable. Though, please note\n-that if the loaded library has any dependencies, those dependencies will again be loaded\n-through the OS-specific library loading mechanism (this is outside of the JVM's control).\n-\n-When no `--library` option is specified, the generated bindings will try to load function\n-from libraries loaded through `System::loadLibrary` and `System::load`, using\n-[`SymbolLookup::loaderLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#loaderLookup()),\n-with [`Linker::defaultLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#defaultLookup())\n-as a fallback. When `--library` is specified when generating the bindings, these 2 lookup\n-modes will be used as a fallback.\n-\n-In both cases, the library is unloaded when the class loader that loads the binding\n-classes is garbage collected.\n-\n@@ -733,1 +677,72 @@\n-## Filtering\n+## Advanced\n+\n+### Preprocessor Definitions\n+\n+C header files are processed by a pre-processor by a compiler before they are inspected\n+further. It is possible for a header file to contain so-called 'compiler switches', which\n+can be used to conditionally generate code based on the value of a macro, for instance:\n+\n+```c\n+#ifdef MY_MACRO\n+int x = 42;\n+#else\n+int x = 0;\n+#endif\n+```\n+\n+The value of these macros also affects the behavior of jextract. Therefore, jextract\n+supports setting macro values on the command line using the `-D` or\n+`--define-macro <macro>=<value>` option. For instance, we can use `-D MY_MACRO` to set\n+the value of `MY_MACRO` in the above snippet to `1`, and trigger the first _branch_ of the\n+compiler switch, thereby defining `int x = 42`.\n+\n+Please note that other header files included by jextract may also define macro values using\n+the `#define` pre-processor directive. It is therefore important to notice the order in\n+which header files are processed by a compiler, as feeding header files to jextract in the\n+wrong order may result in weird errors due to missing macro definitions. A well-known\n+example of this are Windows SDK headers. Almost always, the main `Windows.h` header file\n+should be passed to jextract for things to work correctly. Please consult the\n+documentation of the library that you're trying to use to find out which header file should\n+be included\/passed to jextract.\n+\n+### Library Loading\n+\n+When using the `--library <libspec>` option, the generated code internally uses [`SymbolLookup::libraryLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#libraryLookup(java.nio.file.Path,java.lang.foreign.Arena))\n+to load libraries specified by `<libspec>`. If `<libspec>` denotes a library name, the\n+name is then mapped to a platform dependent name using [`System::mapLibraryName`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#mapLibraryName(java.lang.String)).\n+This means, for instance, that on Linux, when specifying `--library mylib`, the bindings will\n+try to load `libmylib.so` using the OS-specific library loading mechanism on Linux, which\n+is [`dlopen`](https:\/\/man7.org\/linux\/man-pages\/man3\/dlopen.3.html). This way of loading\n+libraries also relies on OS-specific search mechanisms to find the library file. On Linux\n+the search path can be amended using the `LD_LIBRARY_PATH` environment variable (see the\n+documentation of `dlopen`). On Mac the relevant environment variable is `DYLD_LIBRARY_PATH`,\n+and on Windows the variable is `PATH`. Though, for the latter the overall library search\n+mechanism is entirely different (described [here](https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/dlls\/dynamic-link-library-search-order)).\n+When using the HotSpot JVM, the `-Xlog:library` option can also be used to log where the JVM\n+is trying to load a library from, which can be useful to debug a failure to load a library.\n+\n+The `<libspec>` argument of the `--library` option can either be a library name, or a path\n+to a library file (either relative or absolute) if `<libspec>` is prefixed with the `:`\n+character, such as `:mylib.dll`.\n+\n+It is important to understand how libraries are loaded on the platform that is being used,\n+as the library search mechanisms differ between them. Alternatively, JNI's library loading\n+and search mechanism can be used as well. When the `--use-system-load-library` option is\n+specified to jextract, the generated bindings will try to load libraries specified using\n+`--library` through [`System::loadLibrary`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#loadLibrary(java.lang.String)).\n+The library search path for `System::loadLibrary` is specified through the [`java.library.path`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/System.html#java.library.path)\n+system property instead of the OS-specific environment variable. Though, please note\n+that if the loaded library has any dependencies, those dependencies will again be loaded\n+through the OS-specific library loading mechanism (this is outside of the JVM's control).\n+\n+When no `--library` option is specified, the generated bindings will try to load function\n+from libraries loaded through `System::loadLibrary` and `System::load`, using\n+[`SymbolLookup::loaderLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/SymbolLookup.html#loaderLookup()),\n+with [`Linker::defaultLookup`](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/api\/java.base\/java\/lang\/foreign\/Linker.html#defaultLookup())\n+as a fallback. When `--library` is specified when generating the bindings, these 2 lookup\n+modes will be used as a fallback.\n+\n+In both cases, the library is unloaded when the class loader that loads the binding\n+classes is garbage collected.\n+\n+### Filtering\n@@ -799,1 +814,1 @@\n-## Tracing\n+### Tracing\n@@ -836,1 +851,1 @@\n-## Command Line Option Reference\n+### Command Line Option Reference\n@@ -853,1 +868,1 @@\n-### Additional clang options\n+#### Additional clang options\n@@ -860,1 +875,1 @@\n-## Unsupported Features\n+### Unsupported Features\n@@ -883,1 +898,1 @@\n-## Other Languages\n+### Other Languages\n","filename":"doc\/GUIDE.md","additions":90,"deletions":75,"binary":false,"changes":165,"status":"modified"}]}