{"files":[{"patch":"@@ -89,17 +89,10 @@\n-    private static Path generateTmpSource(List<String> headers) {\n-        try {\n-            Path tmpFile = Files.createTempFile(\"jextract\", \".h\");\n-            tmpFile.toFile().deleteOnExit();\n-            Files.write(tmpFile, headers.stream().\n-                    map(src -> {\n-                        if (isSpecialHeaderName(src)) {\n-                            return \"#include \" + src + \"\\n\";\n-                        } else {\n-                            return \"#include \\\"\" + src + \"\\\"\\n\";\n-                        }\n-                    }).\n-                    collect(Collectors.toList()));\n-            return tmpFile;\n-        } catch (IOException ioExp) {\n-            throw new UncheckedIOException(ioExp);\n-        }\n+    private static String generateTmpSource(List<String> headers) {\n+        return headers.stream().\n+               map(src -> {\n+                    if (isSpecialHeaderName(src)) {\n+                        return \"#include \" + src;\n+                    } else {\n+                        return \"#include \\\"\" + src + \"\\\"\";\n+                    }\n+               }).\n+               collect(Collectors.joining(\"\\n\"));\n@@ -118,1 +111,1 @@\n-        Path source = generateTmpSource(headers);\n+        String source = generateTmpSource(headers);\n@@ -120,1 +113,1 @@\n-                .parse(source, Stream.of(parserOptions).collect(Collectors.toList()));\n+                .parse(\"jextract$tmp.h\", source, Stream.of(parserOptions).collect(Collectors.toList()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.jextract.clang.libclang.CXUnsavedFile;\n@@ -48,2 +49,2 @@\n-        private UnsavedFile(Path path, String contents) {\n-            this.file = path.toAbsolutePath().toString();\n+        private UnsavedFile(String file, String contents) {\n+            this.file = file;\n@@ -53,2 +54,2 @@\n-        public static UnsavedFile of(Path path, String contents) {\n-            return new UnsavedFile(path, contents);\n+        public static UnsavedFile of(String file, String contents) {\n+            return new UnsavedFile(file, contents);\n@@ -64,2 +65,6 @@\n-            super(\"Failed to parse \" + srcFile.toAbsolutePath().toString() + \": \" + code);\n-            this.srcFile = srcFile.toAbsolutePath().toString();\n+            this(srcFile.toAbsolutePath().toString(), code);\n+        }\n+\n+        public ParsingFailedException(String srcFile, ErrorCode code) {\n+            super(\"Failed to parse \" + srcFile + \": \" + code);\n+            this.srcFile = srcFile;\n@@ -70,2 +75,3 @@\n-    public TranslationUnit parseTU(String file, Consumer<Diagnostic> dh, int options, String... args)\n-            throws ParsingFailedException {\n+    private TranslationUnit parseTU(String file, String content,\n+                Consumer<Diagnostic> dh, int options, String... args)\n+                throws ParsingFailedException {\n@@ -73,1 +79,2 @@\n-            MemorySegment src = arena.allocateFrom(file);\n+            MemorySegment fileSeg = arena.allocateFrom(file);\n+            MemorySegment contentSeg = arena.allocateFrom(content);\n@@ -78,0 +85,6 @@\n+\n+            MemorySegment unsavedFile = CXUnsavedFile.allocate(arena);\n+            CXUnsavedFile.Filename(unsavedFile, fileSeg);\n+            CXUnsavedFile.Contents(unsavedFile, contentSeg);\n+            CXUnsavedFile.Length(unsavedFile, content.length());\n+\n@@ -81,1 +94,1 @@\n-                    src,\n+                    fileSeg,\n@@ -83,2 +96,3 @@\n-                    args.length, MemorySegment.NULL,\n-                    0,\n+                    args.length,\n+                    unsavedFile,\n+                    1,\n@@ -110,3 +124,3 @@\n-    public TranslationUnit parse(String file, Consumer<Diagnostic> dh, boolean detailedPreprocessorRecord, String... args)\n-    throws ParsingFailedException {\n-        return parseTU(file, dh, defaultOptions(detailedPreprocessorRecord), args);\n+    public TranslationUnit parse(String filename, String content, Consumer<Diagnostic> dh,\n+            boolean detailedPreprocessorRecord, String... args) throws ParsingFailedException {\n+        return parseTU(filename, content, dh, defaultOptions(detailedPreprocessorRecord), args);\n@@ -115,3 +129,3 @@\n-    public TranslationUnit parse(String file, boolean detailedPreprocessorRecord, String... args)\n-    throws ParsingFailedException {\n-        return parse(file, dh -> {}, detailedPreprocessorRecord, args);\n+    public TranslationUnit parse(String filename, String content, boolean detailedPreprocessorRecord, String... args)\n+            throws ParsingFailedException {\n+        return parse(filename, content, dh -> {}, detailedPreprocessorRecord, args);\n@@ -119,1 +133,0 @@\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":32,"deletions":19,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+    CXCursorVisitor() {\n+        \/\/ Should not be called directly\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,8 +61,0 @@\n-    static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {\n-        MemoryLayout[] result = new MemoryLayout[varargs.length];\n-        for (int i = 0; i < varargs.length; i++) {\n-            result[i] = variadicLayout(varargs[i].getClass());\n-        }\n-        return result;\n-    }\n-\n@@ -77,24 +69,12 @@\n-    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {\n-        FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);\n-        Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());\n-        return SYMBOL_LOOKUP.find(name)\n-                .map(addr -> Linker.nativeLinker().downcallHandle(addr, variadicDesc, fva)\n-                        .asSpreader(Object[].class, variadicLayouts.length))\n-                .orElse(null);\n-    }\n-\n-    \/\/ Internals only below this point\n-\n-    private static MemoryLayout variadicLayout(Class<?> c) {\n-        \/\/ apply default argument promotions per C spec\n-        \/\/ note that all primitives are boxed, since they are passed through an Object[]\n-        if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {\n-            return JAVA_INT;\n-        } else if (c == Long.class) {\n-            return JAVA_LONG;\n-        } else if (c == Float.class || c == Double.class) {\n-            return JAVA_DOUBLE;\n-        } else if (MemorySegment.class.isAssignableFrom(c)) {\n-            return ADDRESS;\n-        }\n-        throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n+    static MemoryLayout align(MemoryLayout layout, long align) {\n+        return switch (layout) {\n+            case PaddingLayout p -> p;\n+            case ValueLayout v -> v.withByteAlignment(align);\n+            case GroupLayout g -> {\n+                MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n+                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n+                yield g instanceof StructLayout ?\n+                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n+            }\n+            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n+        };\n@@ -103,0 +83,1 @@\n+\n@@ -167,1 +148,1 @@\n-    private static class clang_getCString$constants {\n+    private static class clang_getCString {\n@@ -173,3 +154,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCString\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCString\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -185,1 +166,1 @@\n-        return clang_getCString$constants.DESC;\n+        return clang_getCString.DESC;\n@@ -195,1 +176,11 @@\n-        return clang_getCString$constants.HANDLE;\n+        return clang_getCString.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCString$address() {\n+        return clang_getCString.ADDR;\n@@ -197,0 +188,1 @@\n+\n@@ -203,1 +195,1 @@\n-        var mh$ = clang_getCString$constants.HANDLE;\n+        var mh$ = clang_getCString.HANDLE;\n@@ -214,1 +206,1 @@\n-    private static class clang_disposeString$constants {\n+    private static class clang_disposeString {\n@@ -219,3 +211,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeString\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeString\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -231,1 +223,1 @@\n-        return clang_disposeString$constants.DESC;\n+        return clang_disposeString.DESC;\n@@ -241,1 +233,1 @@\n-        return clang_disposeString$constants.HANDLE;\n+        return clang_disposeString.HANDLE;\n@@ -243,0 +235,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeString$address() {\n+        return clang_disposeString.ADDR;\n+    }\n+\n@@ -249,1 +252,1 @@\n-        var mh$ = clang_disposeString$constants.HANDLE;\n+        var mh$ = clang_disposeString.HANDLE;\n@@ -362,1 +365,1 @@\n-    private static class clang_createIndex$constants {\n+    private static class clang_createIndex {\n@@ -369,3 +372,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_createIndex\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_createIndex\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -381,1 +384,1 @@\n-        return clang_createIndex$constants.DESC;\n+        return clang_createIndex.DESC;\n@@ -391,1 +394,11 @@\n-        return clang_createIndex$constants.HANDLE;\n+        return clang_createIndex.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n+     * }\n+     *\/\n+    public static MemorySegment clang_createIndex$address() {\n+        return clang_createIndex.ADDR;\n@@ -393,0 +406,1 @@\n+\n@@ -399,1 +413,1 @@\n-        var mh$ = clang_createIndex$constants.HANDLE;\n+        var mh$ = clang_createIndex.HANDLE;\n@@ -410,1 +424,1 @@\n-    private static class clang_disposeIndex$constants {\n+    private static class clang_disposeIndex {\n@@ -415,3 +429,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeIndex\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeIndex\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -427,1 +441,1 @@\n-        return clang_disposeIndex$constants.DESC;\n+        return clang_disposeIndex.DESC;\n@@ -437,1 +451,11 @@\n-        return clang_disposeIndex$constants.HANDLE;\n+        return clang_disposeIndex.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeIndex$address() {\n+        return clang_disposeIndex.ADDR;\n@@ -439,0 +463,1 @@\n+\n@@ -445,1 +470,1 @@\n-        var mh$ = clang_disposeIndex$constants.HANDLE;\n+        var mh$ = clang_disposeIndex.HANDLE;\n@@ -456,1 +481,1 @@\n-    private static class clang_getFileName$constants {\n+    private static class clang_getFileName {\n@@ -462,3 +487,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFileName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFileName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -474,1 +499,1 @@\n-        return clang_getFileName$constants.DESC;\n+        return clang_getFileName.DESC;\n@@ -484,1 +509,11 @@\n-        return clang_getFileName$constants.HANDLE;\n+        return clang_getFileName.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFileName$address() {\n+        return clang_getFileName.ADDR;\n@@ -486,0 +521,1 @@\n+\n@@ -492,1 +528,1 @@\n-        var mh$ = clang_getFileName$constants.HANDLE;\n+        var mh$ = clang_getFileName.HANDLE;\n@@ -503,1 +539,1 @@\n-    private static class clang_getNullLocation$constants {\n+    private static class clang_getNullLocation {\n@@ -507,3 +543,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNullLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNullLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -519,1 +555,1 @@\n-        return clang_getNullLocation$constants.DESC;\n+        return clang_getNullLocation.DESC;\n@@ -529,1 +565,11 @@\n-        return clang_getNullLocation$constants.HANDLE;\n+        return clang_getNullLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNullLocation$address() {\n+        return clang_getNullLocation.ADDR;\n@@ -531,0 +577,1 @@\n+\n@@ -537,1 +584,1 @@\n-        var mh$ = clang_getNullLocation$constants.HANDLE;\n+        var mh$ = clang_getNullLocation.HANDLE;\n@@ -548,1 +595,1 @@\n-    private static class clang_equalLocations$constants {\n+    private static class clang_equalLocations {\n@@ -555,3 +602,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalLocations\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalLocations\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -567,1 +614,1 @@\n-        return clang_equalLocations$constants.DESC;\n+        return clang_equalLocations.DESC;\n@@ -577,1 +624,11 @@\n-        return clang_equalLocations$constants.HANDLE;\n+        return clang_equalLocations.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalLocations$address() {\n+        return clang_equalLocations.ADDR;\n@@ -579,0 +636,1 @@\n+\n@@ -585,1 +643,1 @@\n-        var mh$ = clang_equalLocations$constants.HANDLE;\n+        var mh$ = clang_equalLocations.HANDLE;\n@@ -596,1 +654,1 @@\n-    private static class clang_getLocation$constants {\n+    private static class clang_getLocation {\n@@ -605,3 +663,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -617,1 +675,1 @@\n-        return clang_getLocation$constants.DESC;\n+        return clang_getLocation.DESC;\n@@ -627,1 +685,11 @@\n-        return clang_getLocation$constants.HANDLE;\n+        return clang_getLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getLocation$address() {\n+        return clang_getLocation.ADDR;\n@@ -629,0 +697,1 @@\n+\n@@ -635,1 +704,1 @@\n-        var mh$ = clang_getLocation$constants.HANDLE;\n+        var mh$ = clang_getLocation.HANDLE;\n@@ -646,1 +715,1 @@\n-    private static class clang_getLocationForOffset$constants {\n+    private static class clang_getLocationForOffset {\n@@ -654,3 +723,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getLocationForOffset\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getLocationForOffset\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -666,1 +735,1 @@\n-        return clang_getLocationForOffset$constants.DESC;\n+        return clang_getLocationForOffset.DESC;\n@@ -676,1 +745,11 @@\n-        return clang_getLocationForOffset$constants.HANDLE;\n+        return clang_getLocationForOffset.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getLocationForOffset$address() {\n+        return clang_getLocationForOffset.ADDR;\n@@ -678,0 +757,1 @@\n+\n@@ -684,1 +764,1 @@\n-        var mh$ = clang_getLocationForOffset$constants.HANDLE;\n+        var mh$ = clang_getLocationForOffset.HANDLE;\n@@ -695,1 +775,1 @@\n-    private static class clang_Location_isInSystemHeader$constants {\n+    private static class clang_Location_isInSystemHeader {\n@@ -701,3 +781,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Location_isInSystemHeader\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Location_isInSystemHeader\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -713,1 +793,1 @@\n-        return clang_Location_isInSystemHeader$constants.DESC;\n+        return clang_Location_isInSystemHeader.DESC;\n@@ -723,1 +803,1 @@\n-        return clang_Location_isInSystemHeader$constants.HANDLE;\n+        return clang_Location_isInSystemHeader.HANDLE;\n@@ -725,0 +805,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Location_isInSystemHeader$address() {\n+        return clang_Location_isInSystemHeader.ADDR;\n+    }\n+\n@@ -731,1 +822,1 @@\n-        var mh$ = clang_Location_isInSystemHeader$constants.HANDLE;\n+        var mh$ = clang_Location_isInSystemHeader.HANDLE;\n@@ -742,1 +833,1 @@\n-    private static class clang_Location_isFromMainFile$constants {\n+    private static class clang_Location_isFromMainFile {\n@@ -748,3 +839,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Location_isFromMainFile\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Location_isFromMainFile\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -760,1 +851,1 @@\n-        return clang_Location_isFromMainFile$constants.DESC;\n+        return clang_Location_isFromMainFile.DESC;\n@@ -770,1 +861,11 @@\n-        return clang_Location_isFromMainFile$constants.HANDLE;\n+        return clang_Location_isFromMainFile.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Location_isFromMainFile$address() {\n+        return clang_Location_isFromMainFile.ADDR;\n@@ -772,0 +873,1 @@\n+\n@@ -778,1 +880,1 @@\n-        var mh$ = clang_Location_isFromMainFile$constants.HANDLE;\n+        var mh$ = clang_Location_isFromMainFile.HANDLE;\n@@ -789,1 +891,1 @@\n-    private static class clang_Range_isNull$constants {\n+    private static class clang_Range_isNull {\n@@ -795,3 +897,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Range_isNull\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Range_isNull\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -807,1 +909,1 @@\n-        return clang_Range_isNull$constants.DESC;\n+        return clang_Range_isNull.DESC;\n@@ -817,1 +919,11 @@\n-        return clang_Range_isNull$constants.HANDLE;\n+        return clang_Range_isNull.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Range_isNull$address() {\n+        return clang_Range_isNull.ADDR;\n@@ -819,0 +931,1 @@\n+\n@@ -825,1 +938,1 @@\n-        var mh$ = clang_Range_isNull$constants.HANDLE;\n+        var mh$ = clang_Range_isNull.HANDLE;\n@@ -836,1 +949,1 @@\n-    private static class clang_getExpansionLocation$constants {\n+    private static class clang_getExpansionLocation {\n@@ -845,3 +958,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getExpansionLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getExpansionLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -857,1 +970,1 @@\n-        return clang_getExpansionLocation$constants.DESC;\n+        return clang_getExpansionLocation.DESC;\n@@ -867,1 +980,11 @@\n-        return clang_getExpansionLocation$constants.HANDLE;\n+        return clang_getExpansionLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getExpansionLocation$address() {\n+        return clang_getExpansionLocation.ADDR;\n@@ -869,0 +992,1 @@\n+\n@@ -875,1 +999,1 @@\n-        var mh$ = clang_getExpansionLocation$constants.HANDLE;\n+        var mh$ = clang_getExpansionLocation.HANDLE;\n@@ -886,1 +1010,1 @@\n-    private static class clang_getSpellingLocation$constants {\n+    private static class clang_getSpellingLocation {\n@@ -895,3 +1019,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getSpellingLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getSpellingLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -907,1 +1031,1 @@\n-        return clang_getSpellingLocation$constants.DESC;\n+        return clang_getSpellingLocation.DESC;\n@@ -917,1 +1041,11 @@\n-        return clang_getSpellingLocation$constants.HANDLE;\n+        return clang_getSpellingLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getSpellingLocation$address() {\n+        return clang_getSpellingLocation.ADDR;\n@@ -919,0 +1053,1 @@\n+\n@@ -925,1 +1060,1 @@\n-        var mh$ = clang_getSpellingLocation$constants.HANDLE;\n+        var mh$ = clang_getSpellingLocation.HANDLE;\n@@ -936,1 +1071,1 @@\n-    private static class clang_getFileLocation$constants {\n+    private static class clang_getFileLocation {\n@@ -945,3 +1080,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFileLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFileLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -957,1 +1092,1 @@\n-        return clang_getFileLocation$constants.DESC;\n+        return clang_getFileLocation.DESC;\n@@ -967,1 +1102,11 @@\n-        return clang_getFileLocation$constants.HANDLE;\n+        return clang_getFileLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFileLocation$address() {\n+        return clang_getFileLocation.ADDR;\n@@ -969,0 +1114,1 @@\n+\n@@ -975,1 +1121,1 @@\n-        var mh$ = clang_getFileLocation$constants.HANDLE;\n+        var mh$ = clang_getFileLocation.HANDLE;\n@@ -986,1 +1132,1 @@\n-    private static class clang_getRangeStart$constants {\n+    private static class clang_getRangeStart {\n@@ -992,3 +1138,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getRangeStart\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getRangeStart\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1004,1 +1150,1 @@\n-        return clang_getRangeStart$constants.DESC;\n+        return clang_getRangeStart.DESC;\n@@ -1014,1 +1160,11 @@\n-        return clang_getRangeStart$constants.HANDLE;\n+        return clang_getRangeStart.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getRangeStart$address() {\n+        return clang_getRangeStart.ADDR;\n@@ -1016,0 +1172,1 @@\n+\n@@ -1022,1 +1179,1 @@\n-        var mh$ = clang_getRangeStart$constants.HANDLE;\n+        var mh$ = clang_getRangeStart.HANDLE;\n@@ -1033,1 +1190,1 @@\n-    private static class clang_getRangeEnd$constants {\n+    private static class clang_getRangeEnd {\n@@ -1039,3 +1196,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getRangeEnd\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getRangeEnd\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1051,1 +1208,1 @@\n-        return clang_getRangeEnd$constants.DESC;\n+        return clang_getRangeEnd.DESC;\n@@ -1061,1 +1218,11 @@\n-        return clang_getRangeEnd$constants.HANDLE;\n+        return clang_getRangeEnd.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getRangeEnd$address() {\n+        return clang_getRangeEnd.ADDR;\n@@ -1063,0 +1230,1 @@\n+\n@@ -1069,1 +1237,1 @@\n-        var mh$ = clang_getRangeEnd$constants.HANDLE;\n+        var mh$ = clang_getRangeEnd.HANDLE;\n@@ -1125,1 +1293,1 @@\n-    private static class clang_getChildDiagnostics$constants {\n+    private static class clang_getChildDiagnostics {\n@@ -1131,3 +1299,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getChildDiagnostics\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getChildDiagnostics\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1143,1 +1311,1 @@\n-        return clang_getChildDiagnostics$constants.DESC;\n+        return clang_getChildDiagnostics.DESC;\n@@ -1153,1 +1321,1 @@\n-        return clang_getChildDiagnostics$constants.HANDLE;\n+        return clang_getChildDiagnostics.HANDLE;\n@@ -1155,0 +1323,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getChildDiagnostics$address() {\n+        return clang_getChildDiagnostics.ADDR;\n+    }\n+\n@@ -1161,1 +1340,1 @@\n-        var mh$ = clang_getChildDiagnostics$constants.HANDLE;\n+        var mh$ = clang_getChildDiagnostics.HANDLE;\n@@ -1172,1 +1351,1 @@\n-    private static class clang_getNumDiagnostics$constants {\n+    private static class clang_getNumDiagnostics {\n@@ -1178,3 +1357,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumDiagnostics\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumDiagnostics\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1190,1 +1369,1 @@\n-        return clang_getNumDiagnostics$constants.DESC;\n+        return clang_getNumDiagnostics.DESC;\n@@ -1200,1 +1379,11 @@\n-        return clang_getNumDiagnostics$constants.HANDLE;\n+        return clang_getNumDiagnostics.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumDiagnostics$address() {\n+        return clang_getNumDiagnostics.ADDR;\n@@ -1202,0 +1391,1 @@\n+\n@@ -1208,1 +1398,1 @@\n-        var mh$ = clang_getNumDiagnostics$constants.HANDLE;\n+        var mh$ = clang_getNumDiagnostics.HANDLE;\n@@ -1219,1 +1409,1 @@\n-    private static class clang_getDiagnostic$constants {\n+    private static class clang_getDiagnostic {\n@@ -1226,3 +1416,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1238,1 +1428,1 @@\n-        return clang_getDiagnostic$constants.DESC;\n+        return clang_getDiagnostic.DESC;\n@@ -1248,1 +1438,11 @@\n-        return clang_getDiagnostic$constants.HANDLE;\n+        return clang_getDiagnostic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnostic$address() {\n+        return clang_getDiagnostic.ADDR;\n@@ -1250,0 +1450,1 @@\n+\n@@ -1256,1 +1457,1 @@\n-        var mh$ = clang_getDiagnostic$constants.HANDLE;\n+        var mh$ = clang_getDiagnostic.HANDLE;\n@@ -1267,1 +1468,1 @@\n-    private static class clang_disposeDiagnostic$constants {\n+    private static class clang_disposeDiagnostic {\n@@ -1272,3 +1473,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1284,1 +1485,1 @@\n-        return clang_disposeDiagnostic$constants.DESC;\n+        return clang_disposeDiagnostic.DESC;\n@@ -1294,1 +1495,11 @@\n-        return clang_disposeDiagnostic$constants.HANDLE;\n+        return clang_disposeDiagnostic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeDiagnostic$address() {\n+        return clang_disposeDiagnostic.ADDR;\n@@ -1296,0 +1507,1 @@\n+\n@@ -1302,1 +1514,1 @@\n-        var mh$ = clang_disposeDiagnostic$constants.HANDLE;\n+        var mh$ = clang_disposeDiagnostic.HANDLE;\n@@ -1367,1 +1579,1 @@\n-    private static class clang_formatDiagnostic$constants {\n+    private static class clang_formatDiagnostic {\n@@ -1374,3 +1586,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_formatDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_formatDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1386,1 +1598,1 @@\n-        return clang_formatDiagnostic$constants.DESC;\n+        return clang_formatDiagnostic.DESC;\n@@ -1396,1 +1608,11 @@\n-        return clang_formatDiagnostic$constants.HANDLE;\n+        return clang_formatDiagnostic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_formatDiagnostic$address() {\n+        return clang_formatDiagnostic.ADDR;\n@@ -1398,0 +1620,1 @@\n+\n@@ -1404,1 +1627,1 @@\n-        var mh$ = clang_formatDiagnostic$constants.HANDLE;\n+        var mh$ = clang_formatDiagnostic.HANDLE;\n@@ -1415,1 +1638,1 @@\n-    private static class clang_defaultDiagnosticDisplayOptions$constants {\n+    private static class clang_defaultDiagnosticDisplayOptions {\n@@ -1419,3 +1642,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_defaultDiagnosticDisplayOptions\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_defaultDiagnosticDisplayOptions\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1431,1 +1654,1 @@\n-        return clang_defaultDiagnosticDisplayOptions$constants.DESC;\n+        return clang_defaultDiagnosticDisplayOptions.DESC;\n@@ -1441,1 +1664,11 @@\n-        return clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+        return clang_defaultDiagnosticDisplayOptions.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n+     * }\n+     *\/\n+    public static MemorySegment clang_defaultDiagnosticDisplayOptions$address() {\n+        return clang_defaultDiagnosticDisplayOptions.ADDR;\n@@ -1443,0 +1676,1 @@\n+\n@@ -1449,1 +1683,1 @@\n-        var mh$ = clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+        var mh$ = clang_defaultDiagnosticDisplayOptions.HANDLE;\n@@ -1460,1 +1694,1 @@\n-    private static class clang_getDiagnosticSeverity$constants {\n+    private static class clang_getDiagnosticSeverity {\n@@ -1466,3 +1700,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticSeverity\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticSeverity\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1478,1 +1712,1 @@\n-        return clang_getDiagnosticSeverity$constants.DESC;\n+        return clang_getDiagnosticSeverity.DESC;\n@@ -1488,1 +1722,11 @@\n-        return clang_getDiagnosticSeverity$constants.HANDLE;\n+        return clang_getDiagnosticSeverity.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticSeverity$address() {\n+        return clang_getDiagnosticSeverity.ADDR;\n@@ -1490,0 +1734,1 @@\n+\n@@ -1496,1 +1741,1 @@\n-        var mh$ = clang_getDiagnosticSeverity$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticSeverity.HANDLE;\n@@ -1507,1 +1752,1 @@\n-    private static class clang_getDiagnosticLocation$constants {\n+    private static class clang_getDiagnosticLocation {\n@@ -1513,3 +1758,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1525,1 +1770,1 @@\n-        return clang_getDiagnosticLocation$constants.DESC;\n+        return clang_getDiagnosticLocation.DESC;\n@@ -1535,1 +1780,11 @@\n-        return clang_getDiagnosticLocation$constants.HANDLE;\n+        return clang_getDiagnosticLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticLocation$address() {\n+        return clang_getDiagnosticLocation.ADDR;\n@@ -1537,0 +1792,1 @@\n+\n@@ -1543,1 +1799,1 @@\n-        var mh$ = clang_getDiagnosticLocation$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticLocation.HANDLE;\n@@ -1554,1 +1810,1 @@\n-    private static class clang_getDiagnosticSpelling$constants {\n+    private static class clang_getDiagnosticSpelling {\n@@ -1560,3 +1816,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1572,1 +1828,1 @@\n-        return clang_getDiagnosticSpelling$constants.DESC;\n+        return clang_getDiagnosticSpelling.DESC;\n@@ -1582,1 +1838,1 @@\n-        return clang_getDiagnosticSpelling$constants.HANDLE;\n+        return clang_getDiagnosticSpelling.HANDLE;\n@@ -1584,0 +1840,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticSpelling$address() {\n+        return clang_getDiagnosticSpelling.ADDR;\n+    }\n+\n@@ -1590,1 +1857,1 @@\n-        var mh$ = clang_getDiagnosticSpelling$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticSpelling.HANDLE;\n@@ -1754,1 +2021,1 @@\n-    private static class clang_parseTranslationUnit$constants {\n+    private static class clang_parseTranslationUnit {\n@@ -1766,3 +2033,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_parseTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_parseTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1778,1 +2045,1 @@\n-        return clang_parseTranslationUnit$constants.DESC;\n+        return clang_parseTranslationUnit.DESC;\n@@ -1788,1 +2055,11 @@\n-        return clang_parseTranslationUnit$constants.HANDLE;\n+        return clang_parseTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_parseTranslationUnit$address() {\n+        return clang_parseTranslationUnit.ADDR;\n@@ -1790,0 +2067,1 @@\n+\n@@ -1796,1 +2074,1 @@\n-        var mh$ = clang_parseTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_parseTranslationUnit.HANDLE;\n@@ -1807,1 +2085,1 @@\n-    private static class clang_parseTranslationUnit2$constants {\n+    private static class clang_parseTranslationUnit2 {\n@@ -1820,3 +2098,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_parseTranslationUnit2\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_parseTranslationUnit2\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1832,1 +2110,1 @@\n-        return clang_parseTranslationUnit2$constants.DESC;\n+        return clang_parseTranslationUnit2.DESC;\n@@ -1842,1 +2120,1 @@\n-        return clang_parseTranslationUnit2$constants.HANDLE;\n+        return clang_parseTranslationUnit2.HANDLE;\n@@ -1844,0 +2122,1 @@\n+\n@@ -1845,0 +2124,1 @@\n+     * Address for:\n@@ -1849,6 +2129,15 @@\n-    public static int clang_parseTranslationUnit2(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options, MemorySegment out_TU) {\n-        var mh$ = clang_parseTranslationUnit2$constants.HANDLE;\n-        try {\n-            if (TRACE_DOWNCALLS) {\n-                traceDowncall(\"clang_parseTranslationUnit2\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n-            }\n+    public static MemorySegment clang_parseTranslationUnit2$address() {\n+        return clang_parseTranslationUnit2.ADDR;\n+    }\n+\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n+     * }\n+     *\/\n+    public static int clang_parseTranslationUnit2(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options, MemorySegment out_TU) {\n+        var mh$ = clang_parseTranslationUnit2.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_parseTranslationUnit2\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n+            }\n@@ -1906,1 +2195,1 @@\n-    private static class clang_saveTranslationUnit$constants {\n+    private static class clang_saveTranslationUnit {\n@@ -1914,3 +2203,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_saveTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_saveTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1926,1 +2215,1 @@\n-        return clang_saveTranslationUnit$constants.DESC;\n+        return clang_saveTranslationUnit.DESC;\n@@ -1936,1 +2225,11 @@\n-        return clang_saveTranslationUnit$constants.HANDLE;\n+        return clang_saveTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_saveTranslationUnit$address() {\n+        return clang_saveTranslationUnit.ADDR;\n@@ -1938,0 +2237,1 @@\n+\n@@ -1944,1 +2244,1 @@\n-        var mh$ = clang_saveTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_saveTranslationUnit.HANDLE;\n@@ -1955,1 +2255,1 @@\n-    private static class clang_disposeTranslationUnit$constants {\n+    private static class clang_disposeTranslationUnit {\n@@ -1960,3 +2260,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1972,1 +2272,1 @@\n-        return clang_disposeTranslationUnit$constants.DESC;\n+        return clang_disposeTranslationUnit.DESC;\n@@ -1982,1 +2282,11 @@\n-        return clang_disposeTranslationUnit$constants.HANDLE;\n+        return clang_disposeTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeTranslationUnit$address() {\n+        return clang_disposeTranslationUnit.ADDR;\n@@ -1984,0 +2294,1 @@\n+\n@@ -1990,1 +2301,1 @@\n-        var mh$ = clang_disposeTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_disposeTranslationUnit.HANDLE;\n@@ -2010,1 +2321,1 @@\n-    private static class clang_defaultReparseOptions$constants {\n+    private static class clang_defaultReparseOptions {\n@@ -2016,3 +2327,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_defaultReparseOptions\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_defaultReparseOptions\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -2028,1 +2339,1 @@\n-        return clang_defaultReparseOptions$constants.DESC;\n+        return clang_defaultReparseOptions.DESC;\n@@ -2038,1 +2349,11 @@\n-        return clang_defaultReparseOptions$constants.HANDLE;\n+        return clang_defaultReparseOptions.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n+     * }\n+     *\/\n+    public static MemorySegment clang_defaultReparseOptions$address() {\n+        return clang_defaultReparseOptions.ADDR;\n@@ -2040,0 +2361,1 @@\n+\n@@ -2046,1 +2368,1 @@\n-        var mh$ = clang_defaultReparseOptions$constants.HANDLE;\n+        var mh$ = clang_defaultReparseOptions.HANDLE;\n@@ -2057,1 +2379,1 @@\n-    private static class clang_reparseTranslationUnit$constants {\n+    private static class clang_reparseTranslationUnit {\n@@ -2066,3 +2388,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_reparseTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_reparseTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -2078,1 +2400,1 @@\n-        return clang_reparseTranslationUnit$constants.DESC;\n+        return clang_reparseTranslationUnit.DESC;\n@@ -2088,1 +2410,1 @@\n-        return clang_reparseTranslationUnit$constants.HANDLE;\n+        return clang_reparseTranslationUnit.HANDLE;\n@@ -2090,0 +2412,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_reparseTranslationUnit$address() {\n+        return clang_reparseTranslationUnit.ADDR;\n+    }\n+\n@@ -2096,1 +2429,1 @@\n-        var mh$ = clang_reparseTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_reparseTranslationUnit.HANDLE;\n@@ -4438,1 +4771,1 @@\n-    private static class clang_getNullCursor$constants {\n+    private static class clang_getNullCursor {\n@@ -4442,3 +4775,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNullCursor\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNullCursor\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4454,1 +4787,1 @@\n-        return clang_getNullCursor$constants.DESC;\n+        return clang_getNullCursor.DESC;\n@@ -4464,1 +4797,11 @@\n-        return clang_getNullCursor$constants.HANDLE;\n+        return clang_getNullCursor.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNullCursor$address() {\n+        return clang_getNullCursor.ADDR;\n@@ -4466,0 +4809,1 @@\n+\n@@ -4472,1 +4816,1 @@\n-        var mh$ = clang_getNullCursor$constants.HANDLE;\n+        var mh$ = clang_getNullCursor.HANDLE;\n@@ -4483,1 +4827,1 @@\n-    private static class clang_getTranslationUnitCursor$constants {\n+    private static class clang_getTranslationUnitCursor {\n@@ -4489,3 +4833,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTranslationUnitCursor\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTranslationUnitCursor\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4501,1 +4845,1 @@\n-        return clang_getTranslationUnitCursor$constants.DESC;\n+        return clang_getTranslationUnitCursor.DESC;\n@@ -4511,1 +4855,11 @@\n-        return clang_getTranslationUnitCursor$constants.HANDLE;\n+        return clang_getTranslationUnitCursor.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTranslationUnitCursor$address() {\n+        return clang_getTranslationUnitCursor.ADDR;\n@@ -4513,0 +4867,1 @@\n+\n@@ -4519,1 +4874,1 @@\n-        var mh$ = clang_getTranslationUnitCursor$constants.HANDLE;\n+        var mh$ = clang_getTranslationUnitCursor.HANDLE;\n@@ -4530,1 +4885,1 @@\n-    private static class clang_equalCursors$constants {\n+    private static class clang_equalCursors {\n@@ -4537,3 +4892,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalCursors\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalCursors\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4549,1 +4904,1 @@\n-        return clang_equalCursors$constants.DESC;\n+        return clang_equalCursors.DESC;\n@@ -4559,1 +4914,11 @@\n-        return clang_equalCursors$constants.HANDLE;\n+        return clang_equalCursors.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalCursors$address() {\n+        return clang_equalCursors.ADDR;\n@@ -4561,0 +4926,1 @@\n+\n@@ -4567,1 +4933,1 @@\n-        var mh$ = clang_equalCursors$constants.HANDLE;\n+        var mh$ = clang_equalCursors.HANDLE;\n@@ -4578,1 +4944,1 @@\n-    private static class clang_Cursor_isNull$constants {\n+    private static class clang_Cursor_isNull {\n@@ -4584,3 +4950,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isNull\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isNull\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4596,1 +4962,1 @@\n-        return clang_Cursor_isNull$constants.DESC;\n+        return clang_Cursor_isNull.DESC;\n@@ -4606,1 +4972,11 @@\n-        return clang_Cursor_isNull$constants.HANDLE;\n+        return clang_Cursor_isNull.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isNull$address() {\n+        return clang_Cursor_isNull.ADDR;\n@@ -4608,0 +4984,1 @@\n+\n@@ -4614,1 +4991,1 @@\n-        var mh$ = clang_Cursor_isNull$constants.HANDLE;\n+        var mh$ = clang_Cursor_isNull.HANDLE;\n@@ -4625,1 +5002,1 @@\n-    private static class clang_getCursorKind$constants {\n+    private static class clang_getCursorKind {\n@@ -4631,3 +5008,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4643,1 +5020,1 @@\n-        return clang_getCursorKind$constants.DESC;\n+        return clang_getCursorKind.DESC;\n@@ -4653,1 +5030,11 @@\n-        return clang_getCursorKind$constants.HANDLE;\n+        return clang_getCursorKind.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorKind$address() {\n+        return clang_getCursorKind.ADDR;\n@@ -4655,0 +5042,1 @@\n+\n@@ -4661,1 +5049,1 @@\n-        var mh$ = clang_getCursorKind$constants.HANDLE;\n+        var mh$ = clang_getCursorKind.HANDLE;\n@@ -4672,1 +5060,1 @@\n-    private static class clang_isDeclaration$constants {\n+    private static class clang_isDeclaration {\n@@ -4678,3 +5066,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isDeclaration\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isDeclaration\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4690,1 +5078,1 @@\n-        return clang_isDeclaration$constants.DESC;\n+        return clang_isDeclaration.DESC;\n@@ -4700,1 +5088,11 @@\n-        return clang_isDeclaration$constants.HANDLE;\n+        return clang_isDeclaration.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isDeclaration$address() {\n+        return clang_isDeclaration.ADDR;\n@@ -4702,0 +5100,1 @@\n+\n@@ -4708,1 +5107,1 @@\n-        var mh$ = clang_isDeclaration$constants.HANDLE;\n+        var mh$ = clang_isDeclaration.HANDLE;\n@@ -4719,1 +5118,1 @@\n-    private static class clang_isAttribute$constants {\n+    private static class clang_isAttribute {\n@@ -4725,3 +5124,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isAttribute\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isAttribute\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4737,1 +5136,1 @@\n-        return clang_isAttribute$constants.DESC;\n+        return clang_isAttribute.DESC;\n@@ -4747,1 +5146,11 @@\n-        return clang_isAttribute$constants.HANDLE;\n+        return clang_isAttribute.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isAttribute$address() {\n+        return clang_isAttribute.ADDR;\n@@ -4749,0 +5158,1 @@\n+\n@@ -4755,1 +5165,1 @@\n-        var mh$ = clang_isAttribute$constants.HANDLE;\n+        var mh$ = clang_isAttribute.HANDLE;\n@@ -4766,1 +5176,1 @@\n-    private static class clang_isInvalid$constants {\n+    private static class clang_isInvalid {\n@@ -4772,3 +5182,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isInvalid\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isInvalid\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4784,1 +5194,1 @@\n-        return clang_isInvalid$constants.DESC;\n+        return clang_isInvalid.DESC;\n@@ -4794,1 +5204,1 @@\n-        return clang_isInvalid$constants.HANDLE;\n+        return clang_isInvalid.HANDLE;\n@@ -4796,0 +5206,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isInvalid$address() {\n+        return clang_isInvalid.ADDR;\n+    }\n+\n@@ -4802,1 +5223,1 @@\n-        var mh$ = clang_isInvalid$constants.HANDLE;\n+        var mh$ = clang_isInvalid.HANDLE;\n@@ -4813,1 +5234,1 @@\n-    private static class clang_isPreprocessing$constants {\n+    private static class clang_isPreprocessing {\n@@ -4819,3 +5240,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isPreprocessing\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isPreprocessing\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4831,1 +5252,1 @@\n-        return clang_isPreprocessing$constants.DESC;\n+        return clang_isPreprocessing.DESC;\n@@ -4841,1 +5262,11 @@\n-        return clang_isPreprocessing$constants.HANDLE;\n+        return clang_isPreprocessing.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isPreprocessing$address() {\n+        return clang_isPreprocessing.ADDR;\n@@ -4843,0 +5274,1 @@\n+\n@@ -4849,1 +5281,1 @@\n-        var mh$ = clang_isPreprocessing$constants.HANDLE;\n+        var mh$ = clang_isPreprocessing.HANDLE;\n@@ -4905,1 +5337,1 @@\n-    private static class clang_getCursorLinkage$constants {\n+    private static class clang_getCursorLinkage {\n@@ -4911,3 +5343,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLinkage\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLinkage\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4923,1 +5355,1 @@\n-        return clang_getCursorLinkage$constants.DESC;\n+        return clang_getCursorLinkage.DESC;\n@@ -4933,1 +5365,11 @@\n-        return clang_getCursorLinkage$constants.HANDLE;\n+        return clang_getCursorLinkage.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLinkage$address() {\n+        return clang_getCursorLinkage.ADDR;\n@@ -4935,0 +5377,1 @@\n+\n@@ -4941,1 +5384,1 @@\n-        var mh$ = clang_getCursorLinkage$constants.HANDLE;\n+        var mh$ = clang_getCursorLinkage.HANDLE;\n@@ -4988,1 +5431,1 @@\n-    private static class clang_getCursorLanguage$constants {\n+    private static class clang_getCursorLanguage {\n@@ -4994,3 +5437,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLanguage\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLanguage\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5006,1 +5449,1 @@\n-        return clang_getCursorLanguage$constants.DESC;\n+        return clang_getCursorLanguage.DESC;\n@@ -5016,1 +5459,11 @@\n-        return clang_getCursorLanguage$constants.HANDLE;\n+        return clang_getCursorLanguage.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLanguage$address() {\n+        return clang_getCursorLanguage.ADDR;\n@@ -5018,0 +5471,1 @@\n+\n@@ -5024,1 +5478,1 @@\n-        var mh$ = clang_getCursorLanguage$constants.HANDLE;\n+        var mh$ = clang_getCursorLanguage.HANDLE;\n@@ -5035,1 +5489,1 @@\n-    private static class clang_Cursor_getTranslationUnit$constants {\n+    private static class clang_Cursor_getTranslationUnit {\n@@ -5041,3 +5495,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5053,1 +5507,1 @@\n-        return clang_Cursor_getTranslationUnit$constants.DESC;\n+        return clang_Cursor_getTranslationUnit.DESC;\n@@ -5063,1 +5517,11 @@\n-        return clang_Cursor_getTranslationUnit$constants.HANDLE;\n+        return clang_Cursor_getTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getTranslationUnit$address() {\n+        return clang_Cursor_getTranslationUnit.ADDR;\n@@ -5065,0 +5529,1 @@\n+\n@@ -5071,1 +5536,1 @@\n-        var mh$ = clang_Cursor_getTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_Cursor_getTranslationUnit.HANDLE;\n@@ -5082,1 +5547,1 @@\n-    private static class clang_getCursorLocation$constants {\n+    private static class clang_getCursorLocation {\n@@ -5088,3 +5553,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5100,1 +5565,1 @@\n-        return clang_getCursorLocation$constants.DESC;\n+        return clang_getCursorLocation.DESC;\n@@ -5110,1 +5575,11 @@\n-        return clang_getCursorLocation$constants.HANDLE;\n+        return clang_getCursorLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLocation$address() {\n+        return clang_getCursorLocation.ADDR;\n@@ -5112,0 +5587,1 @@\n+\n@@ -5118,1 +5594,1 @@\n-        var mh$ = clang_getCursorLocation$constants.HANDLE;\n+        var mh$ = clang_getCursorLocation.HANDLE;\n@@ -5129,1 +5605,1 @@\n-    private static class clang_getCursorExtent$constants {\n+    private static class clang_getCursorExtent {\n@@ -5135,3 +5611,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorExtent\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorExtent\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5147,1 +5623,1 @@\n-        return clang_getCursorExtent$constants.DESC;\n+        return clang_getCursorExtent.DESC;\n@@ -5157,1 +5633,11 @@\n-        return clang_getCursorExtent$constants.HANDLE;\n+        return clang_getCursorExtent.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorExtent$address() {\n+        return clang_getCursorExtent.ADDR;\n@@ -5159,0 +5645,1 @@\n+\n@@ -5165,1 +5652,1 @@\n-        var mh$ = clang_getCursorExtent$constants.HANDLE;\n+        var mh$ = clang_getCursorExtent.HANDLE;\n@@ -6418,1 +6905,1 @@\n-    private static class clang_getCursorType$constants {\n+    private static class clang_getCursorType {\n@@ -6424,3 +6911,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6436,1 +6923,1 @@\n-        return clang_getCursorType$constants.DESC;\n+        return clang_getCursorType.DESC;\n@@ -6446,1 +6933,11 @@\n-        return clang_getCursorType$constants.HANDLE;\n+        return clang_getCursorType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorType$address() {\n+        return clang_getCursorType.ADDR;\n@@ -6448,0 +6945,1 @@\n+\n@@ -6454,1 +6952,1 @@\n-        var mh$ = clang_getCursorType$constants.HANDLE;\n+        var mh$ = clang_getCursorType.HANDLE;\n@@ -6465,1 +6963,1 @@\n-    private static class clang_getTypeSpelling$constants {\n+    private static class clang_getTypeSpelling {\n@@ -6471,3 +6969,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6483,1 +6981,1 @@\n-        return clang_getTypeSpelling$constants.DESC;\n+        return clang_getTypeSpelling.DESC;\n@@ -6493,1 +6991,1 @@\n-        return clang_getTypeSpelling$constants.HANDLE;\n+        return clang_getTypeSpelling.HANDLE;\n@@ -6495,0 +6993,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeSpelling$address() {\n+        return clang_getTypeSpelling.ADDR;\n+    }\n+\n@@ -6501,1 +7010,1 @@\n-        var mh$ = clang_getTypeSpelling$constants.HANDLE;\n+        var mh$ = clang_getTypeSpelling.HANDLE;\n@@ -6512,1 +7021,1 @@\n-    private static class clang_getTypedefDeclUnderlyingType$constants {\n+    private static class clang_getTypedefDeclUnderlyingType {\n@@ -6518,3 +7027,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypedefDeclUnderlyingType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypedefDeclUnderlyingType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6530,1 +7039,1 @@\n-        return clang_getTypedefDeclUnderlyingType$constants.DESC;\n+        return clang_getTypedefDeclUnderlyingType.DESC;\n@@ -6540,1 +7049,11 @@\n-        return clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+        return clang_getTypedefDeclUnderlyingType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType$address() {\n+        return clang_getTypedefDeclUnderlyingType.ADDR;\n@@ -6542,0 +7061,1 @@\n+\n@@ -6548,1 +7068,1 @@\n-        var mh$ = clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+        var mh$ = clang_getTypedefDeclUnderlyingType.HANDLE;\n@@ -6559,1 +7079,1 @@\n-    private static class clang_getEnumDeclIntegerType$constants {\n+    private static class clang_getEnumDeclIntegerType {\n@@ -6565,3 +7085,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumDeclIntegerType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumDeclIntegerType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6577,1 +7097,1 @@\n-        return clang_getEnumDeclIntegerType$constants.DESC;\n+        return clang_getEnumDeclIntegerType.DESC;\n@@ -6587,1 +7107,11 @@\n-        return clang_getEnumDeclIntegerType$constants.HANDLE;\n+        return clang_getEnumDeclIntegerType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumDeclIntegerType$address() {\n+        return clang_getEnumDeclIntegerType.ADDR;\n@@ -6589,0 +7119,1 @@\n+\n@@ -6595,1 +7126,1 @@\n-        var mh$ = clang_getEnumDeclIntegerType$constants.HANDLE;\n+        var mh$ = clang_getEnumDeclIntegerType.HANDLE;\n@@ -6606,1 +7137,1 @@\n-    private static class clang_getEnumConstantDeclValue$constants {\n+    private static class clang_getEnumConstantDeclValue {\n@@ -6612,3 +7143,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumConstantDeclValue\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumConstantDeclValue\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6624,1 +7155,1 @@\n-        return clang_getEnumConstantDeclValue$constants.DESC;\n+        return clang_getEnumConstantDeclValue.DESC;\n@@ -6634,1 +7165,11 @@\n-        return clang_getEnumConstantDeclValue$constants.HANDLE;\n+        return clang_getEnumConstantDeclValue.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumConstantDeclValue$address() {\n+        return clang_getEnumConstantDeclValue.ADDR;\n@@ -6636,0 +7177,1 @@\n+\n@@ -6642,1 +7184,1 @@\n-        var mh$ = clang_getEnumConstantDeclValue$constants.HANDLE;\n+        var mh$ = clang_getEnumConstantDeclValue.HANDLE;\n@@ -6653,1 +7195,1 @@\n-    private static class clang_getEnumConstantDeclUnsignedValue$constants {\n+    private static class clang_getEnumConstantDeclUnsignedValue {\n@@ -6659,3 +7201,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumConstantDeclUnsignedValue\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumConstantDeclUnsignedValue\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6671,1 +7213,1 @@\n-        return clang_getEnumConstantDeclUnsignedValue$constants.DESC;\n+        return clang_getEnumConstantDeclUnsignedValue.DESC;\n@@ -6681,1 +7223,11 @@\n-        return clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+        return clang_getEnumConstantDeclUnsignedValue.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumConstantDeclUnsignedValue$address() {\n+        return clang_getEnumConstantDeclUnsignedValue.ADDR;\n@@ -6683,0 +7235,1 @@\n+\n@@ -6689,1 +7242,1 @@\n-        var mh$ = clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+        var mh$ = clang_getEnumConstantDeclUnsignedValue.HANDLE;\n@@ -6700,1 +7253,1 @@\n-    private static class clang_getFieldDeclBitWidth$constants {\n+    private static class clang_getFieldDeclBitWidth {\n@@ -6706,3 +7259,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFieldDeclBitWidth\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFieldDeclBitWidth\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6718,1 +7271,1 @@\n-        return clang_getFieldDeclBitWidth$constants.DESC;\n+        return clang_getFieldDeclBitWidth.DESC;\n@@ -6728,1 +7281,11 @@\n-        return clang_getFieldDeclBitWidth$constants.HANDLE;\n+        return clang_getFieldDeclBitWidth.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFieldDeclBitWidth$address() {\n+        return clang_getFieldDeclBitWidth.ADDR;\n@@ -6730,0 +7293,1 @@\n+\n@@ -6736,1 +7300,1 @@\n-        var mh$ = clang_getFieldDeclBitWidth$constants.HANDLE;\n+        var mh$ = clang_getFieldDeclBitWidth.HANDLE;\n@@ -6747,1 +7311,1 @@\n-    private static class clang_Cursor_getNumArguments$constants {\n+    private static class clang_Cursor_getNumArguments {\n@@ -6753,3 +7317,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getNumArguments\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getNumArguments\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6765,1 +7329,1 @@\n-        return clang_Cursor_getNumArguments$constants.DESC;\n+        return clang_Cursor_getNumArguments.DESC;\n@@ -6775,1 +7339,11 @@\n-        return clang_Cursor_getNumArguments$constants.HANDLE;\n+        return clang_Cursor_getNumArguments.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getNumArguments$address() {\n+        return clang_Cursor_getNumArguments.ADDR;\n@@ -6777,0 +7351,1 @@\n+\n@@ -6783,1 +7358,1 @@\n-        var mh$ = clang_Cursor_getNumArguments$constants.HANDLE;\n+        var mh$ = clang_Cursor_getNumArguments.HANDLE;\n@@ -6794,1 +7369,1 @@\n-    private static class clang_Cursor_getArgument$constants {\n+    private static class clang_Cursor_getArgument {\n@@ -6801,3 +7376,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getArgument\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getArgument\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6813,1 +7388,1 @@\n-        return clang_Cursor_getArgument$constants.DESC;\n+        return clang_Cursor_getArgument.DESC;\n@@ -6823,1 +7398,11 @@\n-        return clang_Cursor_getArgument$constants.HANDLE;\n+        return clang_Cursor_getArgument.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getArgument$address() {\n+        return clang_Cursor_getArgument.ADDR;\n@@ -6825,0 +7410,1 @@\n+\n@@ -6831,1 +7417,1 @@\n-        var mh$ = clang_Cursor_getArgument$constants.HANDLE;\n+        var mh$ = clang_Cursor_getArgument.HANDLE;\n@@ -6842,1 +7428,1 @@\n-    private static class clang_equalTypes$constants {\n+    private static class clang_equalTypes {\n@@ -6849,3 +7435,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalTypes\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalTypes\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6861,1 +7447,1 @@\n-        return clang_equalTypes$constants.DESC;\n+        return clang_equalTypes.DESC;\n@@ -6871,1 +7457,1 @@\n-        return clang_equalTypes$constants.HANDLE;\n+        return clang_equalTypes.HANDLE;\n@@ -6873,0 +7459,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalTypes$address() {\n+        return clang_equalTypes.ADDR;\n+    }\n+\n@@ -6879,1 +7476,1 @@\n-        var mh$ = clang_equalTypes$constants.HANDLE;\n+        var mh$ = clang_equalTypes.HANDLE;\n@@ -6890,1 +7487,1 @@\n-    private static class clang_getCanonicalType$constants {\n+    private static class clang_getCanonicalType {\n@@ -6896,3 +7493,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCanonicalType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCanonicalType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6908,1 +7505,1 @@\n-        return clang_getCanonicalType$constants.DESC;\n+        return clang_getCanonicalType.DESC;\n@@ -6918,1 +7515,11 @@\n-        return clang_getCanonicalType$constants.HANDLE;\n+        return clang_getCanonicalType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCanonicalType$address() {\n+        return clang_getCanonicalType.ADDR;\n@@ -6920,0 +7527,1 @@\n+\n@@ -6926,1 +7534,1 @@\n-        var mh$ = clang_getCanonicalType$constants.HANDLE;\n+        var mh$ = clang_getCanonicalType.HANDLE;\n@@ -6937,1 +7545,1 @@\n-    private static class clang_isConstQualifiedType$constants {\n+    private static class clang_isConstQualifiedType {\n@@ -6943,3 +7551,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isConstQualifiedType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isConstQualifiedType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6955,1 +7563,1 @@\n-        return clang_isConstQualifiedType$constants.DESC;\n+        return clang_isConstQualifiedType.DESC;\n@@ -6965,1 +7573,11 @@\n-        return clang_isConstQualifiedType$constants.HANDLE;\n+        return clang_isConstQualifiedType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isConstQualifiedType$address() {\n+        return clang_isConstQualifiedType.ADDR;\n@@ -6967,0 +7585,1 @@\n+\n@@ -6973,1 +7592,1 @@\n-        var mh$ = clang_isConstQualifiedType$constants.HANDLE;\n+        var mh$ = clang_isConstQualifiedType.HANDLE;\n@@ -6984,1 +7603,1 @@\n-    private static class clang_Cursor_isMacroFunctionLike$constants {\n+    private static class clang_Cursor_isMacroFunctionLike {\n@@ -6990,3 +7609,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isMacroFunctionLike\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isMacroFunctionLike\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7002,1 +7621,1 @@\n-        return clang_Cursor_isMacroFunctionLike$constants.DESC;\n+        return clang_Cursor_isMacroFunctionLike.DESC;\n@@ -7012,1 +7631,11 @@\n-        return clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+        return clang_Cursor_isMacroFunctionLike.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isMacroFunctionLike$address() {\n+        return clang_Cursor_isMacroFunctionLike.ADDR;\n@@ -7014,0 +7643,1 @@\n+\n@@ -7020,1 +7650,1 @@\n-        var mh$ = clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+        var mh$ = clang_Cursor_isMacroFunctionLike.HANDLE;\n@@ -7031,1 +7661,1 @@\n-    private static class clang_Cursor_isFunctionInlined$constants {\n+    private static class clang_Cursor_isFunctionInlined {\n@@ -7037,3 +7667,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isFunctionInlined\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isFunctionInlined\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7049,1 +7679,1 @@\n-        return clang_Cursor_isFunctionInlined$constants.DESC;\n+        return clang_Cursor_isFunctionInlined.DESC;\n@@ -7059,1 +7689,11 @@\n-        return clang_Cursor_isFunctionInlined$constants.HANDLE;\n+        return clang_Cursor_isFunctionInlined.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isFunctionInlined$address() {\n+        return clang_Cursor_isFunctionInlined.ADDR;\n@@ -7061,0 +7701,1 @@\n+\n@@ -7067,1 +7708,1 @@\n-        var mh$ = clang_Cursor_isFunctionInlined$constants.HANDLE;\n+        var mh$ = clang_Cursor_isFunctionInlined.HANDLE;\n@@ -7078,1 +7719,1 @@\n-    private static class clang_isVolatileQualifiedType$constants {\n+    private static class clang_isVolatileQualifiedType {\n@@ -7084,3 +7725,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isVolatileQualifiedType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isVolatileQualifiedType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7096,1 +7737,1 @@\n-        return clang_isVolatileQualifiedType$constants.DESC;\n+        return clang_isVolatileQualifiedType.DESC;\n@@ -7106,1 +7747,11 @@\n-        return clang_isVolatileQualifiedType$constants.HANDLE;\n+        return clang_isVolatileQualifiedType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isVolatileQualifiedType$address() {\n+        return clang_isVolatileQualifiedType.ADDR;\n@@ -7108,0 +7759,1 @@\n+\n@@ -7114,1 +7766,1 @@\n-        var mh$ = clang_isVolatileQualifiedType$constants.HANDLE;\n+        var mh$ = clang_isVolatileQualifiedType.HANDLE;\n@@ -7125,1 +7777,1 @@\n-    private static class clang_getTypedefName$constants {\n+    private static class clang_getTypedefName {\n@@ -7131,3 +7783,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypedefName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypedefName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7143,1 +7795,1 @@\n-        return clang_getTypedefName$constants.DESC;\n+        return clang_getTypedefName.DESC;\n@@ -7153,1 +7805,11 @@\n-        return clang_getTypedefName$constants.HANDLE;\n+        return clang_getTypedefName.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefName$address() {\n+        return clang_getTypedefName.ADDR;\n@@ -7155,0 +7817,1 @@\n+\n@@ -7161,1 +7824,1 @@\n-        var mh$ = clang_getTypedefName$constants.HANDLE;\n+        var mh$ = clang_getTypedefName.HANDLE;\n@@ -7172,1 +7835,1 @@\n-    private static class clang_getPointeeType$constants {\n+    private static class clang_getPointeeType {\n@@ -7178,3 +7841,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getPointeeType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getPointeeType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7190,1 +7853,1 @@\n-        return clang_getPointeeType$constants.DESC;\n+        return clang_getPointeeType.DESC;\n@@ -7200,1 +7863,11 @@\n-        return clang_getPointeeType$constants.HANDLE;\n+        return clang_getPointeeType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getPointeeType$address() {\n+        return clang_getPointeeType.ADDR;\n@@ -7202,0 +7875,1 @@\n+\n@@ -7208,1 +7882,1 @@\n-        var mh$ = clang_getPointeeType$constants.HANDLE;\n+        var mh$ = clang_getPointeeType.HANDLE;\n@@ -7219,1 +7893,1 @@\n-    private static class clang_getTypeDeclaration$constants {\n+    private static class clang_getTypeDeclaration {\n@@ -7225,3 +7899,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeDeclaration\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeDeclaration\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7237,1 +7911,1 @@\n-        return clang_getTypeDeclaration$constants.DESC;\n+        return clang_getTypeDeclaration.DESC;\n@@ -7247,1 +7921,1 @@\n-        return clang_getTypeDeclaration$constants.HANDLE;\n+        return clang_getTypeDeclaration.HANDLE;\n@@ -7249,0 +7923,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeDeclaration$address() {\n+        return clang_getTypeDeclaration.ADDR;\n+    }\n+\n@@ -7255,1 +7940,1 @@\n-        var mh$ = clang_getTypeDeclaration$constants.HANDLE;\n+        var mh$ = clang_getTypeDeclaration.HANDLE;\n@@ -7266,1 +7951,1 @@\n-    private static class clang_getTypeKindSpelling$constants {\n+    private static class clang_getTypeKindSpelling {\n@@ -7272,3 +7957,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeKindSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeKindSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7284,1 +7969,1 @@\n-        return clang_getTypeKindSpelling$constants.DESC;\n+        return clang_getTypeKindSpelling.DESC;\n@@ -7294,1 +7979,11 @@\n-        return clang_getTypeKindSpelling$constants.HANDLE;\n+        return clang_getTypeKindSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeKindSpelling$address() {\n+        return clang_getTypeKindSpelling.ADDR;\n@@ -7296,0 +7991,1 @@\n+\n@@ -7302,1 +7998,1 @@\n-        var mh$ = clang_getTypeKindSpelling$constants.HANDLE;\n+        var mh$ = clang_getTypeKindSpelling.HANDLE;\n@@ -7313,1 +8009,1 @@\n-    private static class clang_getFunctionTypeCallingConv$constants {\n+    private static class clang_getFunctionTypeCallingConv {\n@@ -7319,3 +8015,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFunctionTypeCallingConv\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFunctionTypeCallingConv\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7331,1 +8027,1 @@\n-        return clang_getFunctionTypeCallingConv$constants.DESC;\n+        return clang_getFunctionTypeCallingConv.DESC;\n@@ -7341,1 +8037,11 @@\n-        return clang_getFunctionTypeCallingConv$constants.HANDLE;\n+        return clang_getFunctionTypeCallingConv.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFunctionTypeCallingConv$address() {\n+        return clang_getFunctionTypeCallingConv.ADDR;\n@@ -7343,0 +8049,1 @@\n+\n@@ -7349,1 +8056,1 @@\n-        var mh$ = clang_getFunctionTypeCallingConv$constants.HANDLE;\n+        var mh$ = clang_getFunctionTypeCallingConv.HANDLE;\n@@ -7360,1 +8067,1 @@\n-    private static class clang_getResultType$constants {\n+    private static class clang_getResultType {\n@@ -7366,3 +8073,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getResultType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getResultType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7378,1 +8085,1 @@\n-        return clang_getResultType$constants.DESC;\n+        return clang_getResultType.DESC;\n@@ -7388,1 +8095,11 @@\n-        return clang_getResultType$constants.HANDLE;\n+        return clang_getResultType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getResultType$address() {\n+        return clang_getResultType.ADDR;\n@@ -7390,0 +8107,1 @@\n+\n@@ -7396,1 +8114,1 @@\n-        var mh$ = clang_getResultType$constants.HANDLE;\n+        var mh$ = clang_getResultType.HANDLE;\n@@ -7407,1 +8125,1 @@\n-    private static class clang_getNumArgTypes$constants {\n+    private static class clang_getNumArgTypes {\n@@ -7413,3 +8131,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumArgTypes\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumArgTypes\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7425,1 +8143,1 @@\n-        return clang_getNumArgTypes$constants.DESC;\n+        return clang_getNumArgTypes.DESC;\n@@ -7435,1 +8153,11 @@\n-        return clang_getNumArgTypes$constants.HANDLE;\n+        return clang_getNumArgTypes.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumArgTypes$address() {\n+        return clang_getNumArgTypes.ADDR;\n@@ -7437,0 +8165,1 @@\n+\n@@ -7443,1 +8172,1 @@\n-        var mh$ = clang_getNumArgTypes$constants.HANDLE;\n+        var mh$ = clang_getNumArgTypes.HANDLE;\n@@ -7454,1 +8183,1 @@\n-    private static class clang_getArgType$constants {\n+    private static class clang_getArgType {\n@@ -7461,3 +8190,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArgType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArgType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7473,1 +8202,1 @@\n-        return clang_getArgType$constants.DESC;\n+        return clang_getArgType.DESC;\n@@ -7483,1 +8212,11 @@\n-        return clang_getArgType$constants.HANDLE;\n+        return clang_getArgType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArgType$address() {\n+        return clang_getArgType.ADDR;\n@@ -7485,0 +8224,1 @@\n+\n@@ -7491,1 +8231,1 @@\n-        var mh$ = clang_getArgType$constants.HANDLE;\n+        var mh$ = clang_getArgType.HANDLE;\n@@ -7502,1 +8242,1 @@\n-    private static class clang_isFunctionTypeVariadic$constants {\n+    private static class clang_isFunctionTypeVariadic {\n@@ -7508,3 +8248,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isFunctionTypeVariadic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isFunctionTypeVariadic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7520,1 +8260,1 @@\n-        return clang_isFunctionTypeVariadic$constants.DESC;\n+        return clang_isFunctionTypeVariadic.DESC;\n@@ -7530,1 +8270,11 @@\n-        return clang_isFunctionTypeVariadic$constants.HANDLE;\n+        return clang_isFunctionTypeVariadic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isFunctionTypeVariadic$address() {\n+        return clang_isFunctionTypeVariadic.ADDR;\n@@ -7532,0 +8282,1 @@\n+\n@@ -7538,1 +8289,1 @@\n-        var mh$ = clang_isFunctionTypeVariadic$constants.HANDLE;\n+        var mh$ = clang_isFunctionTypeVariadic.HANDLE;\n@@ -7549,1 +8300,1 @@\n-    private static class clang_getCursorResultType$constants {\n+    private static class clang_getCursorResultType {\n@@ -7555,3 +8306,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorResultType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorResultType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7567,1 +8318,1 @@\n-        return clang_getCursorResultType$constants.DESC;\n+        return clang_getCursorResultType.DESC;\n@@ -7577,1 +8328,11 @@\n-        return clang_getCursorResultType$constants.HANDLE;\n+        return clang_getCursorResultType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorResultType$address() {\n+        return clang_getCursorResultType.ADDR;\n@@ -7579,0 +8340,1 @@\n+\n@@ -7585,1 +8347,1 @@\n-        var mh$ = clang_getCursorResultType$constants.HANDLE;\n+        var mh$ = clang_getCursorResultType.HANDLE;\n@@ -7596,1 +8358,1 @@\n-    private static class clang_getElementType$constants {\n+    private static class clang_getElementType {\n@@ -7602,3 +8364,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getElementType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getElementType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7614,1 +8376,1 @@\n-        return clang_getElementType$constants.DESC;\n+        return clang_getElementType.DESC;\n@@ -7624,1 +8386,11 @@\n-        return clang_getElementType$constants.HANDLE;\n+        return clang_getElementType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getElementType$address() {\n+        return clang_getElementType.ADDR;\n@@ -7633,1 +8405,1 @@\n-        var mh$ = clang_getElementType$constants.HANDLE;\n+        var mh$ = clang_getElementType.HANDLE;\n@@ -7644,1 +8416,1 @@\n-    private static class clang_getNumElements$constants {\n+    private static class clang_getNumElements {\n@@ -7650,3 +8422,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumElements\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumElements\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7662,1 +8434,1 @@\n-        return clang_getNumElements$constants.DESC;\n+        return clang_getNumElements.DESC;\n@@ -7672,1 +8444,1 @@\n-        return clang_getNumElements$constants.HANDLE;\n+        return clang_getNumElements.HANDLE;\n@@ -7674,0 +8446,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumElements$address() {\n+        return clang_getNumElements.ADDR;\n+    }\n+\n@@ -7680,1 +8463,1 @@\n-        var mh$ = clang_getNumElements$constants.HANDLE;\n+        var mh$ = clang_getNumElements.HANDLE;\n@@ -7691,1 +8474,1 @@\n-    private static class clang_getArrayElementType$constants {\n+    private static class clang_getArrayElementType {\n@@ -7697,3 +8480,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArrayElementType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArrayElementType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7709,1 +8492,1 @@\n-        return clang_getArrayElementType$constants.DESC;\n+        return clang_getArrayElementType.DESC;\n@@ -7719,1 +8502,11 @@\n-        return clang_getArrayElementType$constants.HANDLE;\n+        return clang_getArrayElementType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArrayElementType$address() {\n+        return clang_getArrayElementType.ADDR;\n@@ -7721,0 +8514,1 @@\n+\n@@ -7727,1 +8521,1 @@\n-        var mh$ = clang_getArrayElementType$constants.HANDLE;\n+        var mh$ = clang_getArrayElementType.HANDLE;\n@@ -7738,1 +8532,1 @@\n-    private static class clang_getArraySize$constants {\n+    private static class clang_getArraySize {\n@@ -7744,3 +8538,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArraySize\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArraySize\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7756,1 +8550,1 @@\n-        return clang_getArraySize$constants.DESC;\n+        return clang_getArraySize.DESC;\n@@ -7766,1 +8560,11 @@\n-        return clang_getArraySize$constants.HANDLE;\n+        return clang_getArraySize.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArraySize$address() {\n+        return clang_getArraySize.ADDR;\n@@ -7768,0 +8572,1 @@\n+\n@@ -7774,1 +8579,1 @@\n-        var mh$ = clang_getArraySize$constants.HANDLE;\n+        var mh$ = clang_getArraySize.HANDLE;\n@@ -7875,1 +8680,1 @@\n-    private static class clang_Type_getAlignOf$constants {\n+    private static class clang_Type_getAlignOf {\n@@ -7881,3 +8686,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getAlignOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getAlignOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7893,1 +8698,1 @@\n-        return clang_Type_getAlignOf$constants.DESC;\n+        return clang_Type_getAlignOf.DESC;\n@@ -7903,1 +8708,11 @@\n-        return clang_Type_getAlignOf$constants.HANDLE;\n+        return clang_Type_getAlignOf.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getAlignOf$address() {\n+        return clang_Type_getAlignOf.ADDR;\n@@ -7905,0 +8720,1 @@\n+\n@@ -7911,1 +8727,1 @@\n-        var mh$ = clang_Type_getAlignOf$constants.HANDLE;\n+        var mh$ = clang_Type_getAlignOf.HANDLE;\n@@ -7922,1 +8738,1 @@\n-    private static class clang_Type_getSizeOf$constants {\n+    private static class clang_Type_getSizeOf {\n@@ -7928,3 +8744,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getSizeOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getSizeOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7940,1 +8756,1 @@\n-        return clang_Type_getSizeOf$constants.DESC;\n+        return clang_Type_getSizeOf.DESC;\n@@ -7950,1 +8766,11 @@\n-        return clang_Type_getSizeOf$constants.HANDLE;\n+        return clang_Type_getSizeOf.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getSizeOf$address() {\n+        return clang_Type_getSizeOf.ADDR;\n@@ -7952,0 +8778,1 @@\n+\n@@ -7958,1 +8785,1 @@\n-        var mh$ = clang_Type_getSizeOf$constants.HANDLE;\n+        var mh$ = clang_Type_getSizeOf.HANDLE;\n@@ -7969,1 +8796,1 @@\n-    private static class clang_Type_getOffsetOf$constants {\n+    private static class clang_Type_getOffsetOf {\n@@ -7976,3 +8803,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getOffsetOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getOffsetOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7988,1 +8815,1 @@\n-        return clang_Type_getOffsetOf$constants.DESC;\n+        return clang_Type_getOffsetOf.DESC;\n@@ -7998,1 +8825,11 @@\n-        return clang_Type_getOffsetOf$constants.HANDLE;\n+        return clang_Type_getOffsetOf.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getOffsetOf$address() {\n+        return clang_Type_getOffsetOf.ADDR;\n@@ -8000,0 +8837,1 @@\n+\n@@ -8006,1 +8844,1 @@\n-        var mh$ = clang_Type_getOffsetOf$constants.HANDLE;\n+        var mh$ = clang_Type_getOffsetOf.HANDLE;\n@@ -8017,1 +8855,1 @@\n-    private static class clang_Type_getValueType$constants {\n+    private static class clang_Type_getValueType {\n@@ -8023,3 +8861,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getValueType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getValueType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8035,1 +8873,1 @@\n-        return clang_Type_getValueType$constants.DESC;\n+        return clang_Type_getValueType.DESC;\n@@ -8045,1 +8883,11 @@\n-        return clang_Type_getValueType$constants.HANDLE;\n+        return clang_Type_getValueType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getValueType$address() {\n+        return clang_Type_getValueType.ADDR;\n@@ -8047,0 +8895,1 @@\n+\n@@ -8053,1 +8902,1 @@\n-        var mh$ = clang_Type_getValueType$constants.HANDLE;\n+        var mh$ = clang_Type_getValueType.HANDLE;\n@@ -8064,1 +8913,1 @@\n-    private static class clang_Cursor_isAnonymous$constants {\n+    private static class clang_Cursor_isAnonymous {\n@@ -8070,3 +8919,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isAnonymous\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isAnonymous\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8082,1 +8931,1 @@\n-        return clang_Cursor_isAnonymous$constants.DESC;\n+        return clang_Cursor_isAnonymous.DESC;\n@@ -8092,1 +8941,11 @@\n-        return clang_Cursor_isAnonymous$constants.HANDLE;\n+        return clang_Cursor_isAnonymous.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isAnonymous$address() {\n+        return clang_Cursor_isAnonymous.ADDR;\n@@ -8094,0 +8953,1 @@\n+\n@@ -8100,1 +8960,1 @@\n-        var mh$ = clang_Cursor_isAnonymous$constants.HANDLE;\n+        var mh$ = clang_Cursor_isAnonymous.HANDLE;\n@@ -8111,1 +8971,1 @@\n-    private static class clang_Cursor_isAnonymousRecordDecl$constants {\n+    private static class clang_Cursor_isAnonymousRecordDecl {\n@@ -8117,3 +8977,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isAnonymousRecordDecl\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isAnonymousRecordDecl\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8129,1 +8989,1 @@\n-        return clang_Cursor_isAnonymousRecordDecl$constants.DESC;\n+        return clang_Cursor_isAnonymousRecordDecl.DESC;\n@@ -8139,1 +8999,1 @@\n-        return clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+        return clang_Cursor_isAnonymousRecordDecl.HANDLE;\n@@ -8141,0 +9001,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isAnonymousRecordDecl$address() {\n+        return clang_Cursor_isAnonymousRecordDecl.ADDR;\n+    }\n+\n@@ -8147,1 +9018,1 @@\n-        var mh$ = clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+        var mh$ = clang_Cursor_isAnonymousRecordDecl.HANDLE;\n@@ -8158,1 +9029,1 @@\n-    private static class clang_Cursor_isBitField$constants {\n+    private static class clang_Cursor_isBitField {\n@@ -8164,3 +9035,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isBitField\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isBitField\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8176,1 +9047,1 @@\n-        return clang_Cursor_isBitField$constants.DESC;\n+        return clang_Cursor_isBitField.DESC;\n@@ -8186,1 +9057,11 @@\n-        return clang_Cursor_isBitField$constants.HANDLE;\n+        return clang_Cursor_isBitField.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isBitField$address() {\n+        return clang_Cursor_isBitField.ADDR;\n@@ -8188,0 +9069,1 @@\n+\n@@ -8194,1 +9076,1 @@\n-        var mh$ = clang_Cursor_isBitField$constants.HANDLE;\n+        var mh$ = clang_Cursor_isBitField.HANDLE;\n@@ -8232,1 +9114,1 @@\n-    private static class clang_visitChildren$constants {\n+    private static class clang_visitChildren {\n@@ -8240,3 +9122,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_visitChildren\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_visitChildren\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8252,1 +9134,1 @@\n-        return clang_visitChildren$constants.DESC;\n+        return clang_visitChildren.DESC;\n@@ -8262,1 +9144,11 @@\n-        return clang_visitChildren$constants.HANDLE;\n+        return clang_visitChildren.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static MemorySegment clang_visitChildren$address() {\n+        return clang_visitChildren.ADDR;\n@@ -8264,0 +9156,1 @@\n+\n@@ -8270,1 +9163,1 @@\n-        var mh$ = clang_visitChildren$constants.HANDLE;\n+        var mh$ = clang_visitChildren.HANDLE;\n@@ -8281,1 +9174,1 @@\n-    private static class clang_getCursorUSR$constants {\n+    private static class clang_getCursorUSR {\n@@ -8287,3 +9180,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorUSR\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorUSR\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8299,1 +9192,1 @@\n-        return clang_getCursorUSR$constants.DESC;\n+        return clang_getCursorUSR.DESC;\n@@ -8309,1 +9202,1 @@\n-        return clang_getCursorUSR$constants.HANDLE;\n+        return clang_getCursorUSR.HANDLE;\n@@ -8311,0 +9204,1 @@\n+\n@@ -8312,0 +9206,1 @@\n+     * Address for:\n@@ -8316,5 +9211,14 @@\n-    public static MemorySegment clang_getCursorUSR(SegmentAllocator allocator, MemorySegment x0) {\n-        var mh$ = clang_getCursorUSR$constants.HANDLE;\n-        try {\n-            if (TRACE_DOWNCALLS) {\n-                traceDowncall(\"clang_getCursorUSR\", allocator, x0);\n+    public static MemorySegment clang_getCursorUSR$address() {\n+        return clang_getCursorUSR.ADDR;\n+    }\n+\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorUSR(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorUSR.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorUSR\", allocator, x0);\n@@ -8328,1 +9232,1 @@\n-    private static class clang_getCursorSpelling$constants {\n+    private static class clang_getCursorSpelling {\n@@ -8334,3 +9238,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8346,1 +9250,1 @@\n-        return clang_getCursorSpelling$constants.DESC;\n+        return clang_getCursorSpelling.DESC;\n@@ -8356,1 +9260,11 @@\n-        return clang_getCursorSpelling$constants.HANDLE;\n+        return clang_getCursorSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorSpelling$address() {\n+        return clang_getCursorSpelling.ADDR;\n@@ -8358,0 +9272,1 @@\n+\n@@ -8364,1 +9279,1 @@\n-        var mh$ = clang_getCursorSpelling$constants.HANDLE;\n+        var mh$ = clang_getCursorSpelling.HANDLE;\n@@ -8618,1 +9533,1 @@\n-    private static class clang_PrintingPolicy_getProperty$constants {\n+    private static class clang_PrintingPolicy_getProperty {\n@@ -8625,3 +9540,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_getProperty\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_getProperty\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8637,1 +9552,1 @@\n-        return clang_PrintingPolicy_getProperty$constants.DESC;\n+        return clang_PrintingPolicy_getProperty.DESC;\n@@ -8647,1 +9562,11 @@\n-        return clang_PrintingPolicy_getProperty$constants.HANDLE;\n+        return clang_PrintingPolicy_getProperty.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_getProperty$address() {\n+        return clang_PrintingPolicy_getProperty.ADDR;\n@@ -8649,0 +9574,1 @@\n+\n@@ -8655,1 +9581,1 @@\n-        var mh$ = clang_PrintingPolicy_getProperty$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_getProperty.HANDLE;\n@@ -8666,1 +9592,1 @@\n-    private static class clang_PrintingPolicy_setProperty$constants {\n+    private static class clang_PrintingPolicy_setProperty {\n@@ -8673,3 +9599,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_setProperty\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_setProperty\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8685,1 +9611,1 @@\n-        return clang_PrintingPolicy_setProperty$constants.DESC;\n+        return clang_PrintingPolicy_setProperty.DESC;\n@@ -8695,1 +9621,1 @@\n-        return clang_PrintingPolicy_setProperty$constants.HANDLE;\n+        return clang_PrintingPolicy_setProperty.HANDLE;\n@@ -8697,0 +9623,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_setProperty$address() {\n+        return clang_PrintingPolicy_setProperty.ADDR;\n+    }\n+\n@@ -8703,1 +9640,1 @@\n-        var mh$ = clang_PrintingPolicy_setProperty$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_setProperty.HANDLE;\n@@ -8714,1 +9651,1 @@\n-    private static class clang_getCursorPrintingPolicy$constants {\n+    private static class clang_getCursorPrintingPolicy {\n@@ -8720,3 +9657,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorPrintingPolicy\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorPrintingPolicy\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8732,1 +9669,1 @@\n-        return clang_getCursorPrintingPolicy$constants.DESC;\n+        return clang_getCursorPrintingPolicy.DESC;\n@@ -8742,1 +9679,11 @@\n-        return clang_getCursorPrintingPolicy$constants.HANDLE;\n+        return clang_getCursorPrintingPolicy.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorPrintingPolicy$address() {\n+        return clang_getCursorPrintingPolicy.ADDR;\n@@ -8744,0 +9691,1 @@\n+\n@@ -8750,1 +9698,1 @@\n-        var mh$ = clang_getCursorPrintingPolicy$constants.HANDLE;\n+        var mh$ = clang_getCursorPrintingPolicy.HANDLE;\n@@ -8761,1 +9709,1 @@\n-    private static class clang_PrintingPolicy_dispose$constants {\n+    private static class clang_PrintingPolicy_dispose {\n@@ -8766,3 +9714,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_dispose\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_dispose\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8778,1 +9726,1 @@\n-        return clang_PrintingPolicy_dispose$constants.DESC;\n+        return clang_PrintingPolicy_dispose.DESC;\n@@ -8788,1 +9736,1 @@\n-        return clang_PrintingPolicy_dispose$constants.HANDLE;\n+        return clang_PrintingPolicy_dispose.HANDLE;\n@@ -8790,0 +9738,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_dispose$address() {\n+        return clang_PrintingPolicy_dispose.ADDR;\n+    }\n+\n@@ -8796,1 +9755,1 @@\n-        var mh$ = clang_PrintingPolicy_dispose$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_dispose.HANDLE;\n@@ -8807,1 +9766,1 @@\n-    private static class clang_getCursorPrettyPrinted$constants {\n+    private static class clang_getCursorPrettyPrinted {\n@@ -8814,3 +9773,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorPrettyPrinted\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorPrettyPrinted\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8826,1 +9785,1 @@\n-        return clang_getCursorPrettyPrinted$constants.DESC;\n+        return clang_getCursorPrettyPrinted.DESC;\n@@ -8836,1 +9795,1 @@\n-        return clang_getCursorPrettyPrinted$constants.HANDLE;\n+        return clang_getCursorPrettyPrinted.HANDLE;\n@@ -8838,0 +9797,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorPrettyPrinted$address() {\n+        return clang_getCursorPrettyPrinted.ADDR;\n+    }\n+\n@@ -8844,1 +9814,1 @@\n-        var mh$ = clang_getCursorPrettyPrinted$constants.HANDLE;\n+        var mh$ = clang_getCursorPrettyPrinted.HANDLE;\n@@ -8855,1 +9825,1 @@\n-    private static class clang_getCursorDisplayName$constants {\n+    private static class clang_getCursorDisplayName {\n@@ -8861,3 +9831,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorDisplayName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorDisplayName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8873,1 +9843,1 @@\n-        return clang_getCursorDisplayName$constants.DESC;\n+        return clang_getCursorDisplayName.DESC;\n@@ -8883,1 +9853,1 @@\n-        return clang_getCursorDisplayName$constants.HANDLE;\n+        return clang_getCursorDisplayName.HANDLE;\n@@ -8885,0 +9855,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorDisplayName$address() {\n+        return clang_getCursorDisplayName.ADDR;\n+    }\n+\n@@ -8891,1 +9872,1 @@\n-        var mh$ = clang_getCursorDisplayName$constants.HANDLE;\n+        var mh$ = clang_getCursorDisplayName.HANDLE;\n@@ -8902,1 +9883,1 @@\n-    private static class clang_getCursorReferenced$constants {\n+    private static class clang_getCursorReferenced {\n@@ -8908,3 +9889,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorReferenced\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorReferenced\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8920,1 +9901,1 @@\n-        return clang_getCursorReferenced$constants.DESC;\n+        return clang_getCursorReferenced.DESC;\n@@ -8930,1 +9911,11 @@\n-        return clang_getCursorReferenced$constants.HANDLE;\n+        return clang_getCursorReferenced.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorReferenced$address() {\n+        return clang_getCursorReferenced.ADDR;\n@@ -8932,0 +9923,1 @@\n+\n@@ -8938,1 +9930,1 @@\n-        var mh$ = clang_getCursorReferenced$constants.HANDLE;\n+        var mh$ = clang_getCursorReferenced.HANDLE;\n@@ -8949,1 +9941,1 @@\n-    private static class clang_getCursorDefinition$constants {\n+    private static class clang_getCursorDefinition {\n@@ -8955,3 +9947,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorDefinition\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorDefinition\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8967,1 +9959,1 @@\n-        return clang_getCursorDefinition$constants.DESC;\n+        return clang_getCursorDefinition.DESC;\n@@ -8977,1 +9969,1 @@\n-        return clang_getCursorDefinition$constants.HANDLE;\n+        return clang_getCursorDefinition.HANDLE;\n@@ -8979,0 +9971,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorDefinition$address() {\n+        return clang_getCursorDefinition.ADDR;\n+    }\n+\n@@ -8985,1 +9988,1 @@\n-        var mh$ = clang_getCursorDefinition$constants.HANDLE;\n+        var mh$ = clang_getCursorDefinition.HANDLE;\n@@ -8996,1 +9999,1 @@\n-    private static class clang_isCursorDefinition$constants {\n+    private static class clang_isCursorDefinition {\n@@ -9002,3 +10005,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isCursorDefinition\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isCursorDefinition\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9014,1 +10017,1 @@\n-        return clang_isCursorDefinition$constants.DESC;\n+        return clang_isCursorDefinition.DESC;\n@@ -9024,1 +10027,1 @@\n-        return clang_isCursorDefinition$constants.HANDLE;\n+        return clang_isCursorDefinition.HANDLE;\n@@ -9026,0 +10029,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isCursorDefinition$address() {\n+        return clang_isCursorDefinition.ADDR;\n+    }\n+\n@@ -9032,1 +10046,1 @@\n-        var mh$ = clang_isCursorDefinition$constants.HANDLE;\n+        var mh$ = clang_isCursorDefinition.HANDLE;\n@@ -9043,1 +10057,1 @@\n-    private static class clang_Cursor_isVariadic$constants {\n+    private static class clang_Cursor_isVariadic {\n@@ -9049,3 +10063,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isVariadic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isVariadic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9061,1 +10075,1 @@\n-        return clang_Cursor_isVariadic$constants.DESC;\n+        return clang_Cursor_isVariadic.DESC;\n@@ -9071,1 +10085,11 @@\n-        return clang_Cursor_isVariadic$constants.HANDLE;\n+        return clang_Cursor_isVariadic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isVariadic$address() {\n+        return clang_Cursor_isVariadic.ADDR;\n@@ -9073,0 +10097,1 @@\n+\n@@ -9079,1 +10104,1 @@\n-        var mh$ = clang_Cursor_isVariadic$constants.HANDLE;\n+        var mh$ = clang_Cursor_isVariadic.HANDLE;\n@@ -9090,1 +10115,1 @@\n-    private static class clang_Cursor_getMangling$constants {\n+    private static class clang_Cursor_getMangling {\n@@ -9096,3 +10121,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getMangling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getMangling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9108,1 +10133,1 @@\n-        return clang_Cursor_getMangling$constants.DESC;\n+        return clang_Cursor_getMangling.DESC;\n@@ -9118,1 +10143,11 @@\n-        return clang_Cursor_getMangling$constants.HANDLE;\n+        return clang_Cursor_getMangling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getMangling$address() {\n+        return clang_Cursor_getMangling.ADDR;\n@@ -9120,0 +10155,1 @@\n+\n@@ -9126,1 +10162,1 @@\n-        var mh$ = clang_Cursor_getMangling$constants.HANDLE;\n+        var mh$ = clang_Cursor_getMangling.HANDLE;\n@@ -9182,1 +10218,1 @@\n-    private static class clang_getTokenKind$constants {\n+    private static class clang_getTokenKind {\n@@ -9188,3 +10224,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9200,1 +10236,1 @@\n-        return clang_getTokenKind$constants.DESC;\n+        return clang_getTokenKind.DESC;\n@@ -9210,1 +10246,1 @@\n-        return clang_getTokenKind$constants.HANDLE;\n+        return clang_getTokenKind.HANDLE;\n@@ -9212,0 +10248,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenKind$address() {\n+        return clang_getTokenKind.ADDR;\n+    }\n+\n@@ -9218,1 +10265,1 @@\n-        var mh$ = clang_getTokenKind$constants.HANDLE;\n+        var mh$ = clang_getTokenKind.HANDLE;\n@@ -9229,1 +10276,1 @@\n-    private static class clang_getTokenSpelling$constants {\n+    private static class clang_getTokenSpelling {\n@@ -9236,3 +10283,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9248,1 +10295,1 @@\n-        return clang_getTokenSpelling$constants.DESC;\n+        return clang_getTokenSpelling.DESC;\n@@ -9258,1 +10305,1 @@\n-        return clang_getTokenSpelling$constants.HANDLE;\n+        return clang_getTokenSpelling.HANDLE;\n@@ -9260,0 +10307,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenSpelling$address() {\n+        return clang_getTokenSpelling.ADDR;\n+    }\n+\n@@ -9266,1 +10324,1 @@\n-        var mh$ = clang_getTokenSpelling$constants.HANDLE;\n+        var mh$ = clang_getTokenSpelling.HANDLE;\n@@ -9277,1 +10335,1 @@\n-    private static class clang_getTokenLocation$constants {\n+    private static class clang_getTokenLocation {\n@@ -9284,3 +10342,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9296,1 +10354,1 @@\n-        return clang_getTokenLocation$constants.DESC;\n+        return clang_getTokenLocation.DESC;\n@@ -9306,1 +10364,1 @@\n-        return clang_getTokenLocation$constants.HANDLE;\n+        return clang_getTokenLocation.HANDLE;\n@@ -9308,0 +10366,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenLocation$address() {\n+        return clang_getTokenLocation.ADDR;\n+    }\n+\n@@ -9314,1 +10383,1 @@\n-        var mh$ = clang_getTokenLocation$constants.HANDLE;\n+        var mh$ = clang_getTokenLocation.HANDLE;\n@@ -9325,1 +10394,1 @@\n-    private static class clang_getTokenExtent$constants {\n+    private static class clang_getTokenExtent {\n@@ -9332,3 +10401,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenExtent\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenExtent\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9344,1 +10413,1 @@\n-        return clang_getTokenExtent$constants.DESC;\n+        return clang_getTokenExtent.DESC;\n@@ -9354,1 +10423,11 @@\n-        return clang_getTokenExtent$constants.HANDLE;\n+        return clang_getTokenExtent.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenExtent$address() {\n+        return clang_getTokenExtent.ADDR;\n@@ -9356,0 +10435,1 @@\n+\n@@ -9362,1 +10442,1 @@\n-        var mh$ = clang_getTokenExtent$constants.HANDLE;\n+        var mh$ = clang_getTokenExtent.HANDLE;\n@@ -9373,1 +10453,1 @@\n-    private static class clang_tokenize$constants {\n+    private static class clang_tokenize {\n@@ -9381,3 +10461,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_tokenize\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_tokenize\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9393,1 +10473,1 @@\n-        return clang_tokenize$constants.DESC;\n+        return clang_tokenize.DESC;\n@@ -9403,1 +10483,1 @@\n-        return clang_tokenize$constants.HANDLE;\n+        return clang_tokenize.HANDLE;\n@@ -9405,0 +10485,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n+    public static MemorySegment clang_tokenize$address() {\n+        return clang_tokenize.ADDR;\n+    }\n+\n@@ -9411,1 +10502,1 @@\n-        var mh$ = clang_tokenize$constants.HANDLE;\n+        var mh$ = clang_tokenize.HANDLE;\n@@ -9422,1 +10513,1 @@\n-    private static class clang_disposeTokens$constants {\n+    private static class clang_disposeTokens {\n@@ -9429,3 +10520,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeTokens\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeTokens\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9441,1 +10532,1 @@\n-        return clang_disposeTokens$constants.DESC;\n+        return clang_disposeTokens.DESC;\n@@ -9451,1 +10542,1 @@\n-        return clang_disposeTokens$constants.HANDLE;\n+        return clang_disposeTokens.HANDLE;\n@@ -9453,0 +10544,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeTokens$address() {\n+        return clang_disposeTokens.ADDR;\n+    }\n+\n@@ -9459,1 +10561,1 @@\n-        var mh$ = clang_disposeTokens$constants.HANDLE;\n+        var mh$ = clang_disposeTokens.HANDLE;\n@@ -9470,1 +10572,1 @@\n-    private static class clang_getCursorKindSpelling$constants {\n+    private static class clang_getCursorKindSpelling {\n@@ -9476,3 +10578,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorKindSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorKindSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9488,1 +10590,1 @@\n-        return clang_getCursorKindSpelling$constants.DESC;\n+        return clang_getCursorKindSpelling.DESC;\n@@ -9498,1 +10600,11 @@\n-        return clang_getCursorKindSpelling$constants.HANDLE;\n+        return clang_getCursorKindSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorKindSpelling$address() {\n+        return clang_getCursorKindSpelling.ADDR;\n@@ -9500,0 +10612,1 @@\n+\n@@ -9506,1 +10619,1 @@\n-        var mh$ = clang_getCursorKindSpelling$constants.HANDLE;\n+        var mh$ = clang_getCursorKindSpelling.HANDLE;\n@@ -9517,1 +10630,1 @@\n-    private static class clang_getClangVersion$constants {\n+    private static class clang_getClangVersion {\n@@ -9521,3 +10634,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getClangVersion\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getClangVersion\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9533,1 +10646,1 @@\n-        return clang_getClangVersion$constants.DESC;\n+        return clang_getClangVersion.DESC;\n@@ -9543,1 +10656,11 @@\n-        return clang_getClangVersion$constants.HANDLE;\n+        return clang_getClangVersion.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getClangVersion$address() {\n+        return clang_getClangVersion.ADDR;\n@@ -9545,0 +10668,1 @@\n+\n@@ -9551,1 +10675,1 @@\n-        var mh$ = clang_getClangVersion$constants.HANDLE;\n+        var mh$ = clang_getClangVersion.HANDLE;\n@@ -9562,1 +10686,1 @@\n-    private static class clang_toggleCrashRecovery$constants {\n+    private static class clang_toggleCrashRecovery {\n@@ -9567,3 +10691,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_toggleCrashRecovery\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_toggleCrashRecovery\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9579,1 +10703,1 @@\n-        return clang_toggleCrashRecovery$constants.DESC;\n+        return clang_toggleCrashRecovery.DESC;\n@@ -9589,1 +10713,1 @@\n-        return clang_toggleCrashRecovery$constants.HANDLE;\n+        return clang_toggleCrashRecovery.HANDLE;\n@@ -9591,0 +10715,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n+     * }\n+     *\/\n+    public static MemorySegment clang_toggleCrashRecovery$address() {\n+        return clang_toggleCrashRecovery.ADDR;\n+    }\n+\n@@ -9597,1 +10732,1 @@\n-        var mh$ = clang_toggleCrashRecovery$constants.HANDLE;\n+        var mh$ = clang_toggleCrashRecovery.HANDLE;\n@@ -9608,1 +10743,1 @@\n-    private static class clang_Cursor_Evaluate$constants {\n+    private static class clang_Cursor_Evaluate {\n@@ -9614,3 +10749,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_Evaluate\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_Evaluate\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9626,1 +10761,1 @@\n-        return clang_Cursor_Evaluate$constants.DESC;\n+        return clang_Cursor_Evaluate.DESC;\n@@ -9636,1 +10771,1 @@\n-        return clang_Cursor_Evaluate$constants.HANDLE;\n+        return clang_Cursor_Evaluate.HANDLE;\n@@ -9638,0 +10773,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_Evaluate$address() {\n+        return clang_Cursor_Evaluate.ADDR;\n+    }\n+\n@@ -9644,1 +10790,1 @@\n-        var mh$ = clang_Cursor_Evaluate$constants.HANDLE;\n+        var mh$ = clang_Cursor_Evaluate.HANDLE;\n@@ -9655,1 +10801,1 @@\n-    private static class clang_EvalResult_getKind$constants {\n+    private static class clang_EvalResult_getKind {\n@@ -9661,3 +10807,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9673,1 +10819,1 @@\n-        return clang_EvalResult_getKind$constants.DESC;\n+        return clang_EvalResult_getKind.DESC;\n@@ -9683,1 +10829,11 @@\n-        return clang_EvalResult_getKind$constants.HANDLE;\n+        return clang_EvalResult_getKind.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getKind$address() {\n+        return clang_EvalResult_getKind.ADDR;\n@@ -9685,0 +10841,1 @@\n+\n@@ -9691,1 +10848,1 @@\n-        var mh$ = clang_EvalResult_getKind$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getKind.HANDLE;\n@@ -9702,1 +10859,1 @@\n-    private static class clang_EvalResult_getAsInt$constants {\n+    private static class clang_EvalResult_getAsInt {\n@@ -9708,3 +10865,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsInt\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsInt\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9720,1 +10877,1 @@\n-        return clang_EvalResult_getAsInt$constants.DESC;\n+        return clang_EvalResult_getAsInt.DESC;\n@@ -9730,1 +10887,11 @@\n-        return clang_EvalResult_getAsInt$constants.HANDLE;\n+        return clang_EvalResult_getAsInt.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsInt$address() {\n+        return clang_EvalResult_getAsInt.ADDR;\n@@ -9732,0 +10899,1 @@\n+\n@@ -9738,1 +10906,1 @@\n-        var mh$ = clang_EvalResult_getAsInt$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsInt.HANDLE;\n@@ -9749,1 +10917,1 @@\n-    private static class clang_EvalResult_getAsLongLong$constants {\n+    private static class clang_EvalResult_getAsLongLong {\n@@ -9755,3 +10923,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsLongLong\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsLongLong\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9767,1 +10935,1 @@\n-        return clang_EvalResult_getAsLongLong$constants.DESC;\n+        return clang_EvalResult_getAsLongLong.DESC;\n@@ -9777,1 +10945,1 @@\n-        return clang_EvalResult_getAsLongLong$constants.HANDLE;\n+        return clang_EvalResult_getAsLongLong.HANDLE;\n@@ -9779,0 +10947,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsLongLong$address() {\n+        return clang_EvalResult_getAsLongLong.ADDR;\n+    }\n+\n@@ -9785,1 +10964,1 @@\n-        var mh$ = clang_EvalResult_getAsLongLong$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsLongLong.HANDLE;\n@@ -9796,1 +10975,1 @@\n-    private static class clang_EvalResult_isUnsignedInt$constants {\n+    private static class clang_EvalResult_isUnsignedInt {\n@@ -9802,3 +10981,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_isUnsignedInt\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_isUnsignedInt\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9814,1 +10993,1 @@\n-        return clang_EvalResult_isUnsignedInt$constants.DESC;\n+        return clang_EvalResult_isUnsignedInt.DESC;\n@@ -9824,1 +11003,1 @@\n-        return clang_EvalResult_isUnsignedInt$constants.HANDLE;\n+        return clang_EvalResult_isUnsignedInt.HANDLE;\n@@ -9826,0 +11005,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_isUnsignedInt$address() {\n+        return clang_EvalResult_isUnsignedInt.ADDR;\n+    }\n+\n@@ -9832,1 +11022,1 @@\n-        var mh$ = clang_EvalResult_isUnsignedInt$constants.HANDLE;\n+        var mh$ = clang_EvalResult_isUnsignedInt.HANDLE;\n@@ -9843,1 +11033,1 @@\n-    private static class clang_EvalResult_getAsUnsigned$constants {\n+    private static class clang_EvalResult_getAsUnsigned {\n@@ -9849,3 +11039,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsUnsigned\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsUnsigned\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9861,1 +11051,1 @@\n-        return clang_EvalResult_getAsUnsigned$constants.DESC;\n+        return clang_EvalResult_getAsUnsigned.DESC;\n@@ -9871,1 +11061,1 @@\n-        return clang_EvalResult_getAsUnsigned$constants.HANDLE;\n+        return clang_EvalResult_getAsUnsigned.HANDLE;\n@@ -9873,0 +11063,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsUnsigned$address() {\n+        return clang_EvalResult_getAsUnsigned.ADDR;\n+    }\n+\n@@ -9879,1 +11080,1 @@\n-        var mh$ = clang_EvalResult_getAsUnsigned$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsUnsigned.HANDLE;\n@@ -9890,1 +11091,1 @@\n-    private static class clang_EvalResult_getAsDouble$constants {\n+    private static class clang_EvalResult_getAsDouble {\n@@ -9896,3 +11097,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsDouble\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsDouble\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9908,1 +11109,1 @@\n-        return clang_EvalResult_getAsDouble$constants.DESC;\n+        return clang_EvalResult_getAsDouble.DESC;\n@@ -9918,1 +11119,1 @@\n-        return clang_EvalResult_getAsDouble$constants.HANDLE;\n+        return clang_EvalResult_getAsDouble.HANDLE;\n@@ -9920,0 +11121,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsDouble$address() {\n+        return clang_EvalResult_getAsDouble.ADDR;\n+    }\n+\n@@ -9926,1 +11138,1 @@\n-        var mh$ = clang_EvalResult_getAsDouble$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsDouble.HANDLE;\n@@ -9937,1 +11149,1 @@\n-    private static class clang_EvalResult_getAsStr$constants {\n+    private static class clang_EvalResult_getAsStr {\n@@ -9943,3 +11155,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsStr\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsStr\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9955,1 +11167,1 @@\n-        return clang_EvalResult_getAsStr$constants.DESC;\n+        return clang_EvalResult_getAsStr.DESC;\n@@ -9965,1 +11177,1 @@\n-        return clang_EvalResult_getAsStr$constants.HANDLE;\n+        return clang_EvalResult_getAsStr.HANDLE;\n@@ -9967,0 +11179,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsStr$address() {\n+        return clang_EvalResult_getAsStr.ADDR;\n+    }\n+\n@@ -9973,1 +11196,1 @@\n-        var mh$ = clang_EvalResult_getAsStr$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsStr.HANDLE;\n@@ -9984,1 +11207,1 @@\n-    private static class clang_EvalResult_dispose$constants {\n+    private static class clang_EvalResult_dispose {\n@@ -9989,3 +11212,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_dispose\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_dispose\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -10001,1 +11224,1 @@\n-        return clang_EvalResult_dispose$constants.DESC;\n+        return clang_EvalResult_dispose.DESC;\n@@ -10011,1 +11234,1 @@\n-        return clang_EvalResult_dispose$constants.HANDLE;\n+        return clang_EvalResult_dispose.HANDLE;\n@@ -10013,0 +11236,11 @@\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_dispose$address() {\n+        return clang_EvalResult_dispose.ADDR;\n+    }\n+\n@@ -10019,1 +11253,1 @@\n-        var mh$ = clang_EvalResult_dispose$constants.HANDLE;\n+        var mh$ = clang_EvalResult_dispose.HANDLE;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":2073,"deletions":839,"binary":false,"changes":2912,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-            %1$s\n+            %1$s\\\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-        final Path macro;\n+        private static final String MACRO = \"jextract$macro.h\";\n@@ -122,2 +122,0 @@\n-            this.macro = Files.createTempFile(\"jextract$\", \".h\");\n-            this.macro.toFile().deleteOnExit();\n@@ -132,1 +130,1 @@\n-            this.macroUnit = macroIndex.parse(macro.toAbsolutePath().toString(),\n+            this.macroUnit = macroIndex.parse(MACRO, \"\",\n@@ -146,1 +144,1 @@\n-                    Index.UnsavedFile.of(macro, snippet));\n+                    Index.UnsavedFile.of(MACRO, snippet));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MacroParserImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,45 @@\n-    public Declaration.Scoped parse(Path path, Collection<String> args) {\n+    private Declaration.Scoped collectDeclarations(TranslationUnit tu, MacroParserImpl macroParser) {\n+        List<Declaration> decls = new ArrayList<>();\n+        Cursor tuCursor = tu.getCursor();\n+        tuCursor.forEach(c -> {\n+            SourceLocation loc = c.getSourceLocation();\n+            if (loc == null) {\n+                return;\n+            }\n+\n+            SourceLocation.Location src = loc.getFileLocation();\n+            if (src == null) {\n+                return;\n+            }\n+\n+            if (c.isDeclaration()) {\n+                if (c.kind() == CursorKind.UnexposedDecl ||\n+                        c.kind() == CursorKind.Namespace) {\n+                    c.forEach(t -> {\n+                        Declaration declaration = treeMaker.createTree(t);\n+                        if (declaration != null) {\n+                            decls.add(declaration);\n+                        }\n+                    });\n+                } else {\n+                    Declaration decl = treeMaker.createTree(c);\n+                    if (decl != null) {\n+                        decls.add(decl);\n+                    }\n+                }\n+            } else if (isMacro(c) && src.path() != null) {\n+                SourceRange range = c.getExtent();\n+                String[] tokens = c.getTranslationUnit().tokens(range);\n+                Optional<Declaration.Constant> constant = macroParser.parseConstant(c, c.spelling(), tokens);\n+                if (constant.isPresent()) {\n+                    decls.add(constant.get());\n+                }\n+            }\n+        });\n+\n+        decls.addAll(macroParser.macroTable.reparseConstants());\n+        Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);\n+        return rv;\n+    }\n+\n+    public Declaration.Scoped parse(String name, String content, Collection<String> args) {\n@@ -55,1 +99,1 @@\n-             TranslationUnit tu = index.parse(path.toString(),\n+             TranslationUnit tu = index.parse(name, content,\n@@ -63,43 +107,1 @@\n-\n-            List<Declaration> decls = new ArrayList<>();\n-            Cursor tuCursor = tu.getCursor();\n-            tuCursor.forEach(c -> {\n-                SourceLocation loc = c.getSourceLocation();\n-                if (loc == null) {\n-                    return;\n-                }\n-\n-                SourceLocation.Location src = loc.getFileLocation();\n-                if (src == null) {\n-                    return;\n-                }\n-\n-\n-                if (c.isDeclaration()) {\n-                    if (c.kind() == CursorKind.UnexposedDecl ||\n-                            c.kind() == CursorKind.Namespace) {\n-                        c.forEach(t -> {\n-                            Declaration declaration = treeMaker.createTree(t);\n-                            if (declaration != null) {\n-                                decls.add(declaration);\n-                            }\n-                        });\n-                    } else {\n-                        Declaration decl = treeMaker.createTree(c);\n-                        if (decl != null) {\n-                            decls.add(decl);\n-                        }\n-                    }\n-                } else if (isMacro(c) && src.path() != null) {\n-                    SourceRange range = c.getExtent();\n-                    String[] tokens = c.getTranslationUnit().tokens(range);\n-                    Optional<Declaration.Constant> constant = macroParser.parseConstant(c, c.spelling(), tokens);\n-                    if (constant.isPresent()) {\n-                        decls.add(constant.get());\n-                    }\n-                }\n-            });\n-\n-            decls.addAll(macroParser.macroTable.reparseConstants());\n-            Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);\n-            return rv;\n+            return collectDeclarations(tu, macroParser);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Parser.java","additions":47,"deletions":45,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -319,0 +319,1 @@\n+\n@@ -331,1 +332,1 @@\n-             * Allocate a segment of size {@code layout().byteSize()} using {@code %1$s}}\n+             * Allocate a segment of size {@code layout().byteSize()} using {@code %1$s}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}