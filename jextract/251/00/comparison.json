{"files":[{"patch":"@@ -89,17 +89,10 @@\n-    private static Path generateTmpSource(List<String> headers) {\n-        try {\n-            Path tmpFile = Files.createTempFile(\"jextract\", \".h\");\n-            tmpFile.toFile().deleteOnExit();\n-            Files.write(tmpFile, headers.stream().\n-                    map(src -> {\n-                        if (isSpecialHeaderName(src)) {\n-                            return \"#include \" + src + \"\\n\";\n-                        } else {\n-                            return \"#include \\\"\" + src + \"\\\"\\n\";\n-                        }\n-                    }).\n-                    collect(Collectors.toList()));\n-            return tmpFile;\n-        } catch (IOException ioExp) {\n-            throw new UncheckedIOException(ioExp);\n-        }\n+    private static String generateTmpSource(List<String> headers) {\n+        return headers.stream().\n+               map(src -> {\n+                    if (isSpecialHeaderName(src)) {\n+                        return \"#include \" + src;\n+                    } else {\n+                        return \"#include \\\"\" + src + \"\\\"\";\n+                    }\n+               }).\n+               collect(Collectors.joining(\"\\n\"));\n@@ -118,1 +111,1 @@\n-        Path source = generateTmpSource(headers);\n+        String source = generateTmpSource(headers);\n@@ -120,1 +113,1 @@\n-                .parse(source, Stream.of(parserOptions).collect(Collectors.toList()));\n+                .parse(\"jextract$tmp.h\", source, Stream.of(parserOptions).collect(Collectors.toList()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.jextract.clang.libclang.CXUnsavedFile;\n@@ -101,0 +102,30 @@\n+    public TranslationUnit parseTU(String filename, String content, Consumer<Diagnostic> dh, int options, String... args)\n+            throws ParsingFailedException {\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment filenameSeg = arena.allocateFrom(filename);\n+            MemorySegment contentSeg = arena.allocateFrom(content);\n+            MemorySegment cargs = args.length == 0 ? null : arena.allocate(C_POINTER, args.length);\n+            for (int i = 0 ; i < args.length ; i++) {\n+                cargs.set(C_POINTER, i * C_POINTER.byteSize(), arena.allocateFrom(args[i]));\n+            }\n+\n+            MemorySegment unsavedFile = CXUnsavedFile.allocate(arena);\n+            CXUnsavedFile.Filename(unsavedFile, filenameSeg);\n+            CXUnsavedFile.Contents(unsavedFile, contentSeg);\n+            CXUnsavedFile.Length(unsavedFile, content.length());\n+\n+            MemorySegment tu = Index_h.clang_createTranslationUnitFromSourceFile(\n+                    ptr,\n+                    filenameSeg,\n+                    args.length,\n+                    cargs == null ? MemorySegment.NULL : cargs,\n+                    1,\n+                    unsavedFile);\n+            TranslationUnit rv = new TranslationUnit(tu);\n+            \/\/ even if we failed to parse, we might still have diagnostics\n+            rv.processDiagnostics(dh);\n+\n+            return rv;\n+        }\n+    }\n+\n@@ -111,1 +142,1 @@\n-    throws ParsingFailedException {\n+            throws ParsingFailedException {\n@@ -116,1 +147,1 @@\n-    throws ParsingFailedException {\n+            throws ParsingFailedException {\n@@ -120,0 +151,9 @@\n+    public TranslationUnit parse(String filename, String content, Consumer<Diagnostic> dh,\n+            boolean detailedPreprocessorRecord, String... args) throws ParsingFailedException {\n+        return parseTU(filename, content, dh, defaultOptions(detailedPreprocessorRecord), args);\n+    }\n+\n+    public TranslationUnit parse(String filename, String content, boolean detailedPreprocessorRecord, String... args)\n+            throws ParsingFailedException {\n+        return parse(filename, content, dh -> {}, detailedPreprocessorRecord, args);\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -72,0 +73,1 @@\n+\n@@ -84,0 +86,1 @@\n+\n@@ -94,0 +97,1 @@\n+\n@@ -104,0 +108,1 @@\n+\n@@ -116,0 +121,1 @@\n+\n@@ -128,0 +134,1 @@\n+\n@@ -138,0 +145,1 @@\n+\n@@ -148,0 +156,1 @@\n+\n@@ -160,0 +169,1 @@\n+\n@@ -172,0 +182,1 @@\n+\n@@ -182,0 +193,1 @@\n+\n@@ -192,0 +204,1 @@\n+\n@@ -204,0 +217,1 @@\n+\n@@ -215,0 +229,1 @@\n+\n@@ -225,0 +240,1 @@\n+\n@@ -240,1 +256,0 @@\n-\n@@ -247,1 +262,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursor.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -51,0 +52,4 @@\n+    CXCursorVisitor() {\n+        \/\/ Should not be called directly\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -71,0 +72,1 @@\n+\n@@ -83,0 +85,1 @@\n+\n@@ -93,0 +96,1 @@\n+\n@@ -103,0 +107,1 @@\n+\n@@ -115,0 +120,1 @@\n+\n@@ -126,0 +132,1 @@\n+\n@@ -136,0 +143,1 @@\n+\n@@ -148,0 +156,1 @@\n+\n@@ -160,0 +169,1 @@\n+\n@@ -170,0 +180,1 @@\n+\n@@ -180,0 +191,1 @@\n+\n@@ -195,1 +207,0 @@\n-\n@@ -202,1 +213,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceLocation.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -72,0 +73,1 @@\n+\n@@ -84,0 +86,1 @@\n+\n@@ -94,0 +97,1 @@\n+\n@@ -104,0 +108,1 @@\n+\n@@ -116,0 +121,1 @@\n+\n@@ -127,0 +133,1 @@\n+\n@@ -137,0 +144,1 @@\n+\n@@ -149,0 +157,1 @@\n+\n@@ -161,0 +170,1 @@\n+\n@@ -171,0 +181,1 @@\n+\n@@ -181,0 +192,1 @@\n+\n@@ -193,0 +205,1 @@\n+\n@@ -205,0 +218,1 @@\n+\n@@ -215,0 +229,1 @@\n+\n@@ -225,0 +240,1 @@\n+\n@@ -240,1 +256,0 @@\n-\n@@ -247,1 +262,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceRange.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -71,0 +72,1 @@\n+\n@@ -83,0 +85,1 @@\n+\n@@ -93,0 +96,1 @@\n+\n@@ -103,0 +107,1 @@\n+\n@@ -115,0 +120,1 @@\n+\n@@ -127,0 +133,1 @@\n+\n@@ -137,0 +144,1 @@\n+\n@@ -147,0 +155,1 @@\n+\n@@ -162,1 +171,0 @@\n-\n@@ -169,1 +177,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -70,0 +71,1 @@\n+\n@@ -82,0 +84,1 @@\n+\n@@ -92,0 +95,1 @@\n+\n@@ -102,0 +106,1 @@\n+\n@@ -114,0 +119,1 @@\n+\n@@ -125,0 +131,1 @@\n+\n@@ -135,0 +142,1 @@\n+\n@@ -147,0 +155,1 @@\n+\n@@ -159,0 +168,1 @@\n+\n@@ -169,0 +179,1 @@\n+\n@@ -179,0 +190,1 @@\n+\n@@ -194,1 +206,0 @@\n-\n@@ -201,1 +212,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -71,0 +72,1 @@\n+\n@@ -83,0 +85,1 @@\n+\n@@ -93,0 +96,1 @@\n+\n@@ -103,0 +107,1 @@\n+\n@@ -115,0 +120,1 @@\n+\n@@ -127,0 +133,1 @@\n+\n@@ -137,0 +144,1 @@\n+\n@@ -147,0 +155,1 @@\n+\n@@ -159,0 +168,1 @@\n+\n@@ -170,0 +180,1 @@\n+\n@@ -180,0 +191,1 @@\n+\n@@ -195,1 +207,0 @@\n-\n@@ -202,1 +213,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -72,0 +73,1 @@\n+\n@@ -84,0 +86,1 @@\n+\n@@ -94,0 +97,1 @@\n+\n@@ -104,0 +108,1 @@\n+\n@@ -116,0 +121,1 @@\n+\n@@ -128,0 +134,1 @@\n+\n@@ -138,0 +145,1 @@\n+\n@@ -148,0 +156,1 @@\n+\n@@ -160,0 +169,1 @@\n+\n@@ -172,0 +182,1 @@\n+\n@@ -182,0 +193,1 @@\n+\n@@ -192,0 +204,1 @@\n+\n@@ -207,1 +220,0 @@\n-\n@@ -214,1 +226,1 @@\n-     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,8 +61,0 @@\n-    static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {\n-        MemoryLayout[] result = new MemoryLayout[varargs.length];\n-        for (int i = 0; i < varargs.length; i++) {\n-            result[i] = variadicLayout(varargs[i].getClass());\n-        }\n-        return result;\n-    }\n-\n@@ -77,24 +69,12 @@\n-    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {\n-        FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);\n-        Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());\n-        return SYMBOL_LOOKUP.find(name)\n-                .map(addr -> Linker.nativeLinker().downcallHandle(addr, variadicDesc, fva)\n-                        .asSpreader(Object[].class, variadicLayouts.length))\n-                .orElse(null);\n-    }\n-\n-    \/\/ Internals only below this point\n-\n-    private static MemoryLayout variadicLayout(Class<?> c) {\n-        \/\/ apply default argument promotions per C spec\n-        \/\/ note that all primitives are boxed, since they are passed through an Object[]\n-        if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {\n-            return JAVA_INT;\n-        } else if (c == Long.class) {\n-            return JAVA_LONG;\n-        } else if (c == Float.class || c == Double.class) {\n-            return JAVA_DOUBLE;\n-        } else if (MemorySegment.class.isAssignableFrom(c)) {\n-            return ADDRESS;\n-        }\n-        throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n+    static MemoryLayout align(MemoryLayout layout, long align) {\n+        return switch (layout) {\n+            case PaddingLayout p -> p;\n+            case ValueLayout v -> v.withByteAlignment(align);\n+            case GroupLayout g -> {\n+                MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n+                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n+                yield g instanceof StructLayout ?\n+                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n+            }\n+            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n+        };\n@@ -103,0 +83,1 @@\n+\n@@ -104,2 +85,1 @@\n-        String libName = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"libclang\" : \"clang\";\n-        System.loadLibrary(libName);\n+        System.loadLibrary(\"clang\");\n@@ -123,0 +103,1 @@\n+\n@@ -132,0 +113,1 @@\n+\n@@ -141,0 +123,1 @@\n+\n@@ -150,0 +133,1 @@\n+\n@@ -159,0 +143,1 @@\n+\n@@ -167,1 +152,1 @@\n-    private static class clang_getCString$constants {\n+    private static class clang_getCString {\n@@ -173,3 +158,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCString\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCString\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -180,0 +165,1 @@\n+\n@@ -185,1 +171,1 @@\n-        return clang_getCString$constants.DESC;\n+        return clang_getCString.DESC;\n@@ -190,0 +176,1 @@\n+\n@@ -195,1 +182,12 @@\n-        return clang_getCString$constants.HANDLE;\n+        return clang_getCString.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCString$address() {\n+        return clang_getCString.ADDR;\n@@ -197,0 +195,1 @@\n+\n@@ -198,0 +197,1 @@\n+\n@@ -203,1 +203,1 @@\n-        var mh$ = clang_getCString$constants.HANDLE;\n+        var mh$ = clang_getCString.HANDLE;\n@@ -214,1 +214,1 @@\n-    private static class clang_disposeString$constants {\n+    private static class clang_disposeString {\n@@ -219,3 +219,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeString\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeString\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -226,0 +226,1 @@\n+\n@@ -231,1 +232,1 @@\n-        return clang_disposeString$constants.DESC;\n+        return clang_disposeString.DESC;\n@@ -236,0 +237,1 @@\n+\n@@ -241,1 +243,12 @@\n-        return clang_disposeString$constants.HANDLE;\n+        return clang_disposeString.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeString$address() {\n+        return clang_disposeString.ADDR;\n@@ -243,0 +256,1 @@\n+\n@@ -244,0 +258,1 @@\n+\n@@ -249,1 +264,1 @@\n-        var mh$ = clang_disposeString$constants.HANDLE;\n+        var mh$ = clang_disposeString.HANDLE;\n@@ -260,0 +275,1 @@\n+\n@@ -266,0 +282,1 @@\n+\n@@ -273,0 +290,1 @@\n+\n@@ -282,0 +300,1 @@\n+\n@@ -291,0 +310,1 @@\n+\n@@ -300,0 +320,1 @@\n+\n@@ -309,0 +330,1 @@\n+\n@@ -318,0 +340,1 @@\n+\n@@ -327,0 +350,1 @@\n+\n@@ -336,0 +360,1 @@\n+\n@@ -345,0 +370,1 @@\n+\n@@ -354,0 +380,1 @@\n+\n@@ -362,1 +389,1 @@\n-    private static class clang_createIndex$constants {\n+    private static class clang_createIndex {\n@@ -369,3 +396,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_createIndex\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_createIndex\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -376,0 +403,1 @@\n+\n@@ -381,1 +409,1 @@\n-        return clang_createIndex$constants.DESC;\n+        return clang_createIndex.DESC;\n@@ -386,0 +414,1 @@\n+\n@@ -391,1 +420,12 @@\n-        return clang_createIndex$constants.HANDLE;\n+        return clang_createIndex.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n+     * }\n+     *\/\n+    public static MemorySegment clang_createIndex$address() {\n+        return clang_createIndex.ADDR;\n@@ -393,0 +433,1 @@\n+\n@@ -394,0 +435,1 @@\n+\n@@ -399,1 +441,1 @@\n-        var mh$ = clang_createIndex$constants.HANDLE;\n+        var mh$ = clang_createIndex.HANDLE;\n@@ -410,1 +452,1 @@\n-    private static class clang_disposeIndex$constants {\n+    private static class clang_disposeIndex {\n@@ -415,3 +457,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeIndex\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeIndex\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -422,0 +464,1 @@\n+\n@@ -427,1 +470,1 @@\n-        return clang_disposeIndex$constants.DESC;\n+        return clang_disposeIndex.DESC;\n@@ -432,0 +475,1 @@\n+\n@@ -437,1 +481,12 @@\n-        return clang_disposeIndex$constants.HANDLE;\n+        return clang_disposeIndex.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeIndex$address() {\n+        return clang_disposeIndex.ADDR;\n@@ -439,0 +494,1 @@\n+\n@@ -440,0 +496,1 @@\n+\n@@ -445,1 +502,1 @@\n-        var mh$ = clang_disposeIndex$constants.HANDLE;\n+        var mh$ = clang_disposeIndex.HANDLE;\n@@ -456,1 +513,1 @@\n-    private static class clang_getFileName$constants {\n+    private static class clang_getFileName {\n@@ -462,3 +519,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFileName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFileName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -469,0 +526,1 @@\n+\n@@ -474,1 +532,1 @@\n-        return clang_getFileName$constants.DESC;\n+        return clang_getFileName.DESC;\n@@ -479,0 +537,1 @@\n+\n@@ -484,1 +543,12 @@\n-        return clang_getFileName$constants.HANDLE;\n+        return clang_getFileName.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFileName$address() {\n+        return clang_getFileName.ADDR;\n@@ -486,0 +556,1 @@\n+\n@@ -487,0 +558,1 @@\n+\n@@ -492,1 +564,1 @@\n-        var mh$ = clang_getFileName$constants.HANDLE;\n+        var mh$ = clang_getFileName.HANDLE;\n@@ -503,1 +575,1 @@\n-    private static class clang_getNullLocation$constants {\n+    private static class clang_getNullLocation {\n@@ -507,3 +579,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNullLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNullLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -514,0 +586,1 @@\n+\n@@ -519,1 +592,1 @@\n-        return clang_getNullLocation$constants.DESC;\n+        return clang_getNullLocation.DESC;\n@@ -524,0 +597,1 @@\n+\n@@ -529,1 +603,12 @@\n-        return clang_getNullLocation$constants.HANDLE;\n+        return clang_getNullLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNullLocation$address() {\n+        return clang_getNullLocation.ADDR;\n@@ -531,0 +616,1 @@\n+\n@@ -532,0 +618,1 @@\n+\n@@ -537,1 +624,1 @@\n-        var mh$ = clang_getNullLocation$constants.HANDLE;\n+        var mh$ = clang_getNullLocation.HANDLE;\n@@ -548,1 +635,1 @@\n-    private static class clang_equalLocations$constants {\n+    private static class clang_equalLocations {\n@@ -555,3 +642,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalLocations\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalLocations\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -562,0 +649,1 @@\n+\n@@ -567,1 +655,1 @@\n-        return clang_equalLocations$constants.DESC;\n+        return clang_equalLocations.DESC;\n@@ -572,0 +660,1 @@\n+\n@@ -577,1 +666,12 @@\n-        return clang_equalLocations$constants.HANDLE;\n+        return clang_equalLocations.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalLocations$address() {\n+        return clang_equalLocations.ADDR;\n@@ -579,0 +679,1 @@\n+\n@@ -580,0 +681,1 @@\n+\n@@ -585,1 +687,1 @@\n-        var mh$ = clang_equalLocations$constants.HANDLE;\n+        var mh$ = clang_equalLocations.HANDLE;\n@@ -596,1 +698,1 @@\n-    private static class clang_getLocation$constants {\n+    private static class clang_getLocation {\n@@ -605,3 +707,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -612,0 +714,1 @@\n+\n@@ -617,1 +720,1 @@\n-        return clang_getLocation$constants.DESC;\n+        return clang_getLocation.DESC;\n@@ -622,0 +725,1 @@\n+\n@@ -627,1 +731,12 @@\n-        return clang_getLocation$constants.HANDLE;\n+        return clang_getLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getLocation$address() {\n+        return clang_getLocation.ADDR;\n@@ -629,0 +744,1 @@\n+\n@@ -630,0 +746,1 @@\n+\n@@ -635,1 +752,1 @@\n-        var mh$ = clang_getLocation$constants.HANDLE;\n+        var mh$ = clang_getLocation.HANDLE;\n@@ -646,1 +763,1 @@\n-    private static class clang_getLocationForOffset$constants {\n+    private static class clang_getLocationForOffset {\n@@ -654,3 +771,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getLocationForOffset\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getLocationForOffset\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -661,0 +778,1 @@\n+\n@@ -666,1 +784,1 @@\n-        return clang_getLocationForOffset$constants.DESC;\n+        return clang_getLocationForOffset.DESC;\n@@ -671,0 +789,1 @@\n+\n@@ -676,1 +795,12 @@\n-        return clang_getLocationForOffset$constants.HANDLE;\n+        return clang_getLocationForOffset.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getLocationForOffset$address() {\n+        return clang_getLocationForOffset.ADDR;\n@@ -678,0 +808,1 @@\n+\n@@ -679,0 +810,1 @@\n+\n@@ -684,1 +816,1 @@\n-        var mh$ = clang_getLocationForOffset$constants.HANDLE;\n+        var mh$ = clang_getLocationForOffset.HANDLE;\n@@ -695,1 +827,1 @@\n-    private static class clang_Location_isInSystemHeader$constants {\n+    private static class clang_Location_isInSystemHeader {\n@@ -701,3 +833,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Location_isInSystemHeader\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Location_isInSystemHeader\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -708,0 +840,1 @@\n+\n@@ -713,1 +846,1 @@\n-        return clang_Location_isInSystemHeader$constants.DESC;\n+        return clang_Location_isInSystemHeader.DESC;\n@@ -718,0 +851,1 @@\n+\n@@ -723,1 +857,12 @@\n-        return clang_Location_isInSystemHeader$constants.HANDLE;\n+        return clang_Location_isInSystemHeader.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Location_isInSystemHeader$address() {\n+        return clang_Location_isInSystemHeader.ADDR;\n@@ -725,0 +870,1 @@\n+\n@@ -726,0 +872,1 @@\n+\n@@ -731,1 +878,1 @@\n-        var mh$ = clang_Location_isInSystemHeader$constants.HANDLE;\n+        var mh$ = clang_Location_isInSystemHeader.HANDLE;\n@@ -742,1 +889,1 @@\n-    private static class clang_Location_isFromMainFile$constants {\n+    private static class clang_Location_isFromMainFile {\n@@ -748,3 +895,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Location_isFromMainFile\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Location_isFromMainFile\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -755,0 +902,1 @@\n+\n@@ -760,1 +908,1 @@\n-        return clang_Location_isFromMainFile$constants.DESC;\n+        return clang_Location_isFromMainFile.DESC;\n@@ -765,0 +913,1 @@\n+\n@@ -770,1 +919,12 @@\n-        return clang_Location_isFromMainFile$constants.HANDLE;\n+        return clang_Location_isFromMainFile.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Location_isFromMainFile$address() {\n+        return clang_Location_isFromMainFile.ADDR;\n@@ -772,0 +932,1 @@\n+\n@@ -773,0 +934,1 @@\n+\n@@ -778,1 +940,1 @@\n-        var mh$ = clang_Location_isFromMainFile$constants.HANDLE;\n+        var mh$ = clang_Location_isFromMainFile.HANDLE;\n@@ -789,1 +951,1 @@\n-    private static class clang_Range_isNull$constants {\n+    private static class clang_Range_isNull {\n@@ -795,3 +957,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Range_isNull\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Range_isNull\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -802,0 +964,1 @@\n+\n@@ -807,1 +970,1 @@\n-        return clang_Range_isNull$constants.DESC;\n+        return clang_Range_isNull.DESC;\n@@ -812,0 +975,1 @@\n+\n@@ -817,1 +981,12 @@\n-        return clang_Range_isNull$constants.HANDLE;\n+        return clang_Range_isNull.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Range_isNull$address() {\n+        return clang_Range_isNull.ADDR;\n@@ -819,0 +994,1 @@\n+\n@@ -820,0 +996,1 @@\n+\n@@ -825,1 +1002,1 @@\n-        var mh$ = clang_Range_isNull$constants.HANDLE;\n+        var mh$ = clang_Range_isNull.HANDLE;\n@@ -836,1 +1013,1 @@\n-    private static class clang_getExpansionLocation$constants {\n+    private static class clang_getExpansionLocation {\n@@ -845,3 +1022,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getExpansionLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getExpansionLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -852,0 +1029,1 @@\n+\n@@ -857,1 +1035,1 @@\n-        return clang_getExpansionLocation$constants.DESC;\n+        return clang_getExpansionLocation.DESC;\n@@ -862,0 +1040,1 @@\n+\n@@ -867,1 +1046,12 @@\n-        return clang_getExpansionLocation$constants.HANDLE;\n+        return clang_getExpansionLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getExpansionLocation$address() {\n+        return clang_getExpansionLocation.ADDR;\n@@ -869,0 +1059,1 @@\n+\n@@ -870,0 +1061,1 @@\n+\n@@ -875,1 +1067,1 @@\n-        var mh$ = clang_getExpansionLocation$constants.HANDLE;\n+        var mh$ = clang_getExpansionLocation.HANDLE;\n@@ -886,1 +1078,1 @@\n-    private static class clang_getSpellingLocation$constants {\n+    private static class clang_getSpellingLocation {\n@@ -895,3 +1087,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getSpellingLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getSpellingLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -902,0 +1094,1 @@\n+\n@@ -907,1 +1100,1 @@\n-        return clang_getSpellingLocation$constants.DESC;\n+        return clang_getSpellingLocation.DESC;\n@@ -912,0 +1105,1 @@\n+\n@@ -917,1 +1111,12 @@\n-        return clang_getSpellingLocation$constants.HANDLE;\n+        return clang_getSpellingLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getSpellingLocation$address() {\n+        return clang_getSpellingLocation.ADDR;\n@@ -919,0 +1124,1 @@\n+\n@@ -920,0 +1126,1 @@\n+\n@@ -925,1 +1132,1 @@\n-        var mh$ = clang_getSpellingLocation$constants.HANDLE;\n+        var mh$ = clang_getSpellingLocation.HANDLE;\n@@ -936,1 +1143,1 @@\n-    private static class clang_getFileLocation$constants {\n+    private static class clang_getFileLocation {\n@@ -945,3 +1152,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFileLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFileLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -952,0 +1159,1 @@\n+\n@@ -957,1 +1165,1 @@\n-        return clang_getFileLocation$constants.DESC;\n+        return clang_getFileLocation.DESC;\n@@ -962,0 +1170,1 @@\n+\n@@ -967,1 +1176,1 @@\n-        return clang_getFileLocation$constants.HANDLE;\n+        return clang_getFileLocation.HANDLE;\n@@ -969,0 +1178,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFileLocation$address() {\n+        return clang_getFileLocation.ADDR;\n+    }\n+\n@@ -970,0 +1191,1 @@\n+\n@@ -975,1 +1197,1 @@\n-        var mh$ = clang_getFileLocation$constants.HANDLE;\n+        var mh$ = clang_getFileLocation.HANDLE;\n@@ -986,1 +1208,1 @@\n-    private static class clang_getRangeStart$constants {\n+    private static class clang_getRangeStart {\n@@ -992,3 +1214,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getRangeStart\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getRangeStart\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -999,0 +1221,1 @@\n+\n@@ -1004,1 +1227,1 @@\n-        return clang_getRangeStart$constants.DESC;\n+        return clang_getRangeStart.DESC;\n@@ -1009,0 +1232,1 @@\n+\n@@ -1014,1 +1238,12 @@\n-        return clang_getRangeStart$constants.HANDLE;\n+        return clang_getRangeStart.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getRangeStart$address() {\n+        return clang_getRangeStart.ADDR;\n@@ -1016,0 +1251,1 @@\n+\n@@ -1017,0 +1253,1 @@\n+\n@@ -1022,1 +1259,1 @@\n-        var mh$ = clang_getRangeStart$constants.HANDLE;\n+        var mh$ = clang_getRangeStart.HANDLE;\n@@ -1033,1 +1270,1 @@\n-    private static class clang_getRangeEnd$constants {\n+    private static class clang_getRangeEnd {\n@@ -1039,3 +1276,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getRangeEnd\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getRangeEnd\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1046,0 +1283,1 @@\n+\n@@ -1051,1 +1289,1 @@\n-        return clang_getRangeEnd$constants.DESC;\n+        return clang_getRangeEnd.DESC;\n@@ -1056,0 +1294,1 @@\n+\n@@ -1061,1 +1300,12 @@\n-        return clang_getRangeEnd$constants.HANDLE;\n+        return clang_getRangeEnd.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getRangeEnd$address() {\n+        return clang_getRangeEnd.ADDR;\n@@ -1063,0 +1313,1 @@\n+\n@@ -1064,0 +1315,1 @@\n+\n@@ -1069,1 +1321,1 @@\n-        var mh$ = clang_getRangeEnd$constants.HANDLE;\n+        var mh$ = clang_getRangeEnd.HANDLE;\n@@ -1081,0 +1333,1 @@\n+\n@@ -1090,0 +1343,1 @@\n+\n@@ -1099,0 +1353,1 @@\n+\n@@ -1108,0 +1363,1 @@\n+\n@@ -1117,0 +1373,1 @@\n+\n@@ -1125,1 +1382,1 @@\n-    private static class clang_getChildDiagnostics$constants {\n+    private static class clang_getChildDiagnostics {\n@@ -1131,3 +1388,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getChildDiagnostics\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getChildDiagnostics\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1138,0 +1395,1 @@\n+\n@@ -1143,1 +1401,1 @@\n-        return clang_getChildDiagnostics$constants.DESC;\n+        return clang_getChildDiagnostics.DESC;\n@@ -1148,0 +1406,1 @@\n+\n@@ -1153,1 +1412,1 @@\n-        return clang_getChildDiagnostics$constants.HANDLE;\n+        return clang_getChildDiagnostics.HANDLE;\n@@ -1155,0 +1414,1 @@\n+\n@@ -1156,0 +1416,2 @@\n+     * Address for:\n+\n@@ -1160,3 +1422,13 @@\n-    public static MemorySegment clang_getChildDiagnostics(MemorySegment D) {\n-        var mh$ = clang_getChildDiagnostics$constants.HANDLE;\n-        try {\n+    public static MemorySegment clang_getChildDiagnostics$address() {\n+        return clang_getChildDiagnostics.ADDR;\n+    }\n+\n+    \/**\n+\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getChildDiagnostics(MemorySegment D) {\n+        var mh$ = clang_getChildDiagnostics.HANDLE;\n+        try {\n@@ -1172,1 +1444,1 @@\n-    private static class clang_getNumDiagnostics$constants {\n+    private static class clang_getNumDiagnostics {\n@@ -1178,3 +1450,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumDiagnostics\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumDiagnostics\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1185,0 +1457,1 @@\n+\n@@ -1190,1 +1463,1 @@\n-        return clang_getNumDiagnostics$constants.DESC;\n+        return clang_getNumDiagnostics.DESC;\n@@ -1195,0 +1468,1 @@\n+\n@@ -1200,1 +1474,1 @@\n-        return clang_getNumDiagnostics$constants.HANDLE;\n+        return clang_getNumDiagnostics.HANDLE;\n@@ -1202,0 +1476,1 @@\n+\n@@ -1203,0 +1478,12 @@\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumDiagnostics$address() {\n+        return clang_getNumDiagnostics.ADDR;\n+    }\n+\n+    \/**\n+\n@@ -1208,1 +1495,1 @@\n-        var mh$ = clang_getNumDiagnostics$constants.HANDLE;\n+        var mh$ = clang_getNumDiagnostics.HANDLE;\n@@ -1219,1 +1506,1 @@\n-    private static class clang_getDiagnostic$constants {\n+    private static class clang_getDiagnostic {\n@@ -1226,3 +1513,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1233,0 +1520,1 @@\n+\n@@ -1238,1 +1526,1 @@\n-        return clang_getDiagnostic$constants.DESC;\n+        return clang_getDiagnostic.DESC;\n@@ -1243,0 +1531,1 @@\n+\n@@ -1248,1 +1537,1 @@\n-        return clang_getDiagnostic$constants.HANDLE;\n+        return clang_getDiagnostic.HANDLE;\n@@ -1250,0 +1539,1 @@\n+\n@@ -1251,0 +1541,12 @@\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnostic$address() {\n+        return clang_getDiagnostic.ADDR;\n+    }\n+\n+    \/**\n+\n@@ -1256,1 +1558,1 @@\n-        var mh$ = clang_getDiagnostic$constants.HANDLE;\n+        var mh$ = clang_getDiagnostic.HANDLE;\n@@ -1267,1 +1569,1 @@\n-    private static class clang_disposeDiagnostic$constants {\n+    private static class clang_disposeDiagnostic {\n@@ -1272,3 +1574,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1279,0 +1581,1 @@\n+\n@@ -1284,1 +1587,1 @@\n-        return clang_disposeDiagnostic$constants.DESC;\n+        return clang_disposeDiagnostic.DESC;\n@@ -1289,0 +1592,1 @@\n+\n@@ -1294,1 +1598,12 @@\n-        return clang_disposeDiagnostic$constants.HANDLE;\n+        return clang_disposeDiagnostic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeDiagnostic$address() {\n+        return clang_disposeDiagnostic.ADDR;\n@@ -1296,0 +1611,1 @@\n+\n@@ -1297,0 +1613,1 @@\n+\n@@ -1302,1 +1619,1 @@\n-        var mh$ = clang_disposeDiagnostic$constants.HANDLE;\n+        var mh$ = clang_disposeDiagnostic.HANDLE;\n@@ -1314,0 +1631,1 @@\n+\n@@ -1323,0 +1641,1 @@\n+\n@@ -1332,0 +1651,1 @@\n+\n@@ -1341,0 +1661,1 @@\n+\n@@ -1350,0 +1671,1 @@\n+\n@@ -1359,0 +1681,1 @@\n+\n@@ -1367,1 +1690,1 @@\n-    private static class clang_formatDiagnostic$constants {\n+    private static class clang_formatDiagnostic {\n@@ -1374,3 +1697,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_formatDiagnostic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_formatDiagnostic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1381,0 +1704,1 @@\n+\n@@ -1386,1 +1710,1 @@\n-        return clang_formatDiagnostic$constants.DESC;\n+        return clang_formatDiagnostic.DESC;\n@@ -1391,0 +1715,1 @@\n+\n@@ -1396,1 +1721,1 @@\n-        return clang_formatDiagnostic$constants.HANDLE;\n+        return clang_formatDiagnostic.HANDLE;\n@@ -1398,0 +1723,1 @@\n+\n@@ -1399,0 +1725,12 @@\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_formatDiagnostic$address() {\n+        return clang_formatDiagnostic.ADDR;\n+    }\n+\n+    \/**\n+\n@@ -1404,1 +1742,1 @@\n-        var mh$ = clang_formatDiagnostic$constants.HANDLE;\n+        var mh$ = clang_formatDiagnostic.HANDLE;\n@@ -1415,1 +1753,1 @@\n-    private static class clang_defaultDiagnosticDisplayOptions$constants {\n+    private static class clang_defaultDiagnosticDisplayOptions {\n@@ -1419,3 +1757,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_defaultDiagnosticDisplayOptions\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_defaultDiagnosticDisplayOptions\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1426,0 +1764,1 @@\n+\n@@ -1431,1 +1770,1 @@\n-        return clang_defaultDiagnosticDisplayOptions$constants.DESC;\n+        return clang_defaultDiagnosticDisplayOptions.DESC;\n@@ -1436,0 +1775,1 @@\n+\n@@ -1441,1 +1781,12 @@\n-        return clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+        return clang_defaultDiagnosticDisplayOptions.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n+     * }\n+     *\/\n+    public static MemorySegment clang_defaultDiagnosticDisplayOptions$address() {\n+        return clang_defaultDiagnosticDisplayOptions.ADDR;\n@@ -1443,0 +1794,1 @@\n+\n@@ -1444,0 +1796,1 @@\n+\n@@ -1449,1 +1802,1 @@\n-        var mh$ = clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+        var mh$ = clang_defaultDiagnosticDisplayOptions.HANDLE;\n@@ -1460,1 +1813,1 @@\n-    private static class clang_getDiagnosticSeverity$constants {\n+    private static class clang_getDiagnosticSeverity {\n@@ -1466,3 +1819,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticSeverity\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticSeverity\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1473,0 +1826,1 @@\n+\n@@ -1478,1 +1832,1 @@\n-        return clang_getDiagnosticSeverity$constants.DESC;\n+        return clang_getDiagnosticSeverity.DESC;\n@@ -1483,0 +1837,1 @@\n+\n@@ -1488,1 +1843,12 @@\n-        return clang_getDiagnosticSeverity$constants.HANDLE;\n+        return clang_getDiagnosticSeverity.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticSeverity$address() {\n+        return clang_getDiagnosticSeverity.ADDR;\n@@ -1490,0 +1856,1 @@\n+\n@@ -1491,0 +1858,1 @@\n+\n@@ -1496,1 +1864,1 @@\n-        var mh$ = clang_getDiagnosticSeverity$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticSeverity.HANDLE;\n@@ -1507,1 +1875,1 @@\n-    private static class clang_getDiagnosticLocation$constants {\n+    private static class clang_getDiagnosticLocation {\n@@ -1513,3 +1881,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1520,0 +1888,1 @@\n+\n@@ -1525,1 +1894,1 @@\n-        return clang_getDiagnosticLocation$constants.DESC;\n+        return clang_getDiagnosticLocation.DESC;\n@@ -1530,0 +1899,1 @@\n+\n@@ -1535,1 +1905,1 @@\n-        return clang_getDiagnosticLocation$constants.HANDLE;\n+        return clang_getDiagnosticLocation.HANDLE;\n@@ -1537,0 +1907,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticLocation$address() {\n+        return clang_getDiagnosticLocation.ADDR;\n+    }\n+\n@@ -1538,0 +1920,1 @@\n+\n@@ -1543,1 +1926,1 @@\n-        var mh$ = clang_getDiagnosticLocation$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticLocation.HANDLE;\n@@ -1554,1 +1937,1 @@\n-    private static class clang_getDiagnosticSpelling$constants {\n+    private static class clang_getDiagnosticSpelling {\n@@ -1560,3 +1943,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getDiagnosticSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getDiagnosticSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1567,0 +1950,1 @@\n+\n@@ -1572,1 +1956,1 @@\n-        return clang_getDiagnosticSpelling$constants.DESC;\n+        return clang_getDiagnosticSpelling.DESC;\n@@ -1577,0 +1961,1 @@\n+\n@@ -1582,1 +1967,12 @@\n-        return clang_getDiagnosticSpelling$constants.HANDLE;\n+        return clang_getDiagnosticSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getDiagnosticSpelling$address() {\n+        return clang_getDiagnosticSpelling.ADDR;\n@@ -1584,0 +1980,1 @@\n+\n@@ -1585,0 +1982,1 @@\n+\n@@ -1590,1 +1988,1 @@\n-        var mh$ = clang_getDiagnosticSpelling$constants.HANDLE;\n+        var mh$ = clang_getDiagnosticSpelling.HANDLE;\n@@ -1600,0 +1998,67 @@\n+\n+    private static class clang_createTranslationUnitFromSourceFile {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_createTranslationUnitFromSourceFile\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_createTranslationUnitFromSourceFile$descriptor() {\n+        return clang_createTranslationUnitFromSourceFile.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n+     * }\n+     *\/\n+    public static MethodHandle clang_createTranslationUnitFromSourceFile$handle() {\n+        return clang_createTranslationUnitFromSourceFile.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n+     * }\n+     *\/\n+    public static MemorySegment clang_createTranslationUnitFromSourceFile$address() {\n+        return clang_createTranslationUnitFromSourceFile.ADDR;\n+    }\n+\n+    \/**\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n+     * }\n+     *\/\n+    public static MemorySegment clang_createTranslationUnitFromSourceFile(MemorySegment CIdx, MemorySegment source_filename, int num_clang_command_line_args, MemorySegment clang_command_line_args, int num_unsaved_files, MemorySegment unsaved_files) {\n+        var mh$ = clang_createTranslationUnitFromSourceFile.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_createTranslationUnitFromSourceFile\", CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);\n+            }\n+            return (MemorySegment)mh$.invokeExact(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -1602,0 +2067,1 @@\n+\n@@ -1611,0 +2077,1 @@\n+\n@@ -1620,0 +2087,1 @@\n+\n@@ -1629,0 +2097,1 @@\n+\n@@ -1638,0 +2107,1 @@\n+\n@@ -1647,0 +2117,1 @@\n+\n@@ -1656,0 +2127,1 @@\n+\n@@ -1665,0 +2137,1 @@\n+\n@@ -1674,0 +2147,1 @@\n+\n@@ -1683,0 +2157,1 @@\n+\n@@ -1692,0 +2167,1 @@\n+\n@@ -1701,0 +2177,1 @@\n+\n@@ -1710,0 +2187,1 @@\n+\n@@ -1719,0 +2197,1 @@\n+\n@@ -1728,0 +2207,1 @@\n+\n@@ -1737,0 +2217,1 @@\n+\n@@ -1746,0 +2227,1 @@\n+\n@@ -1754,1 +2236,1 @@\n-    private static class clang_parseTranslationUnit$constants {\n+    private static class clang_parseTranslationUnit {\n@@ -1766,3 +2248,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_parseTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_parseTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1773,0 +2255,1 @@\n+\n@@ -1778,1 +2261,1 @@\n-        return clang_parseTranslationUnit$constants.DESC;\n+        return clang_parseTranslationUnit.DESC;\n@@ -1783,0 +2266,1 @@\n+\n@@ -1788,1 +2272,12 @@\n-        return clang_parseTranslationUnit$constants.HANDLE;\n+        return clang_parseTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_parseTranslationUnit$address() {\n+        return clang_parseTranslationUnit.ADDR;\n@@ -1790,0 +2285,1 @@\n+\n@@ -1791,0 +2287,1 @@\n+\n@@ -1796,1 +2293,1 @@\n-        var mh$ = clang_parseTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_parseTranslationUnit.HANDLE;\n@@ -1807,1 +2304,1 @@\n-    private static class clang_parseTranslationUnit2$constants {\n+    private static class clang_parseTranslationUnit2 {\n@@ -1820,3 +2317,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_parseTranslationUnit2\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_parseTranslationUnit2\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1827,0 +2324,1 @@\n+\n@@ -1832,1 +2330,1 @@\n-        return clang_parseTranslationUnit2$constants.DESC;\n+        return clang_parseTranslationUnit2.DESC;\n@@ -1837,0 +2335,1 @@\n+\n@@ -1842,1 +2341,12 @@\n-        return clang_parseTranslationUnit2$constants.HANDLE;\n+        return clang_parseTranslationUnit2.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n+     * }\n+     *\/\n+    public static MemorySegment clang_parseTranslationUnit2$address() {\n+        return clang_parseTranslationUnit2.ADDR;\n@@ -1844,0 +2354,1 @@\n+\n@@ -1845,0 +2356,1 @@\n+\n@@ -1850,1 +2362,1 @@\n-        var mh$ = clang_parseTranslationUnit2$constants.HANDLE;\n+        var mh$ = clang_parseTranslationUnit2.HANDLE;\n@@ -1862,0 +2374,1 @@\n+\n@@ -1871,0 +2384,1 @@\n+\n@@ -1880,0 +2394,1 @@\n+\n@@ -1889,0 +2404,1 @@\n+\n@@ -1898,0 +2414,1 @@\n+\n@@ -1906,1 +2423,1 @@\n-    private static class clang_saveTranslationUnit$constants {\n+    private static class clang_saveTranslationUnit {\n@@ -1914,3 +2431,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_saveTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_saveTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1921,0 +2438,1 @@\n+\n@@ -1926,1 +2444,1 @@\n-        return clang_saveTranslationUnit$constants.DESC;\n+        return clang_saveTranslationUnit.DESC;\n@@ -1931,0 +2449,1 @@\n+\n@@ -1936,1 +2455,12 @@\n-        return clang_saveTranslationUnit$constants.HANDLE;\n+        return clang_saveTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_saveTranslationUnit$address() {\n+        return clang_saveTranslationUnit.ADDR;\n@@ -1938,0 +2468,1 @@\n+\n@@ -1939,0 +2470,1 @@\n+\n@@ -1944,1 +2476,1 @@\n-        var mh$ = clang_saveTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_saveTranslationUnit.HANDLE;\n@@ -1955,1 +2487,1 @@\n-    private static class clang_disposeTranslationUnit$constants {\n+    private static class clang_disposeTranslationUnit {\n@@ -1960,3 +2492,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -1967,0 +2499,1 @@\n+\n@@ -1972,1 +2505,1 @@\n-        return clang_disposeTranslationUnit$constants.DESC;\n+        return clang_disposeTranslationUnit.DESC;\n@@ -1977,0 +2510,1 @@\n+\n@@ -1982,1 +2516,12 @@\n-        return clang_disposeTranslationUnit$constants.HANDLE;\n+        return clang_disposeTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeTranslationUnit$address() {\n+        return clang_disposeTranslationUnit.ADDR;\n@@ -1984,0 +2529,1 @@\n+\n@@ -1985,0 +2531,1 @@\n+\n@@ -1990,1 +2537,1 @@\n-        var mh$ = clang_disposeTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_disposeTranslationUnit.HANDLE;\n@@ -2002,0 +2549,1 @@\n+\n@@ -2010,1 +2558,1 @@\n-    private static class clang_defaultReparseOptions$constants {\n+    private static class clang_defaultReparseOptions {\n@@ -2016,3 +2564,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_defaultReparseOptions\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_defaultReparseOptions\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -2023,0 +2571,1 @@\n+\n@@ -2028,1 +2577,1 @@\n-        return clang_defaultReparseOptions$constants.DESC;\n+        return clang_defaultReparseOptions.DESC;\n@@ -2033,0 +2582,1 @@\n+\n@@ -2038,1 +2588,12 @@\n-        return clang_defaultReparseOptions$constants.HANDLE;\n+        return clang_defaultReparseOptions.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n+     * }\n+     *\/\n+    public static MemorySegment clang_defaultReparseOptions$address() {\n+        return clang_defaultReparseOptions.ADDR;\n@@ -2040,0 +2601,1 @@\n+\n@@ -2041,0 +2603,1 @@\n+\n@@ -2046,1 +2609,1 @@\n-        var mh$ = clang_defaultReparseOptions$constants.HANDLE;\n+        var mh$ = clang_defaultReparseOptions.HANDLE;\n@@ -2057,1 +2620,1 @@\n-    private static class clang_reparseTranslationUnit$constants {\n+    private static class clang_reparseTranslationUnit {\n@@ -2066,3 +2629,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_reparseTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_reparseTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -2073,0 +2636,1 @@\n+\n@@ -2078,1 +2642,1 @@\n-        return clang_reparseTranslationUnit$constants.DESC;\n+        return clang_reparseTranslationUnit.DESC;\n@@ -2083,0 +2647,1 @@\n+\n@@ -2088,1 +2653,12 @@\n-        return clang_reparseTranslationUnit$constants.HANDLE;\n+        return clang_reparseTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MemorySegment clang_reparseTranslationUnit$address() {\n+        return clang_reparseTranslationUnit.ADDR;\n@@ -2090,0 +2666,1 @@\n+\n@@ -2091,0 +2668,1 @@\n+\n@@ -2096,1 +2674,1 @@\n-        var mh$ = clang_reparseTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_reparseTranslationUnit.HANDLE;\n@@ -2108,0 +2686,1 @@\n+\n@@ -2117,0 +2696,1 @@\n+\n@@ -2126,0 +2706,1 @@\n+\n@@ -2135,0 +2716,1 @@\n+\n@@ -2144,0 +2726,1 @@\n+\n@@ -2153,0 +2736,1 @@\n+\n@@ -2162,0 +2746,1 @@\n+\n@@ -2171,0 +2756,1 @@\n+\n@@ -2180,0 +2766,1 @@\n+\n@@ -2189,0 +2776,1 @@\n+\n@@ -2198,0 +2786,1 @@\n+\n@@ -2207,0 +2796,1 @@\n+\n@@ -2216,0 +2806,1 @@\n+\n@@ -2225,0 +2816,1 @@\n+\n@@ -2234,0 +2826,1 @@\n+\n@@ -2243,0 +2836,1 @@\n+\n@@ -2252,0 +2846,1 @@\n+\n@@ -2261,0 +2856,1 @@\n+\n@@ -2270,0 +2866,1 @@\n+\n@@ -2279,0 +2876,1 @@\n+\n@@ -2288,0 +2886,1 @@\n+\n@@ -2297,0 +2896,1 @@\n+\n@@ -2306,0 +2906,1 @@\n+\n@@ -2315,0 +2916,1 @@\n+\n@@ -2324,0 +2926,1 @@\n+\n@@ -2333,0 +2936,1 @@\n+\n@@ -2342,0 +2946,1 @@\n+\n@@ -2351,0 +2956,1 @@\n+\n@@ -2360,0 +2966,1 @@\n+\n@@ -2369,0 +2976,1 @@\n+\n@@ -2378,0 +2986,1 @@\n+\n@@ -2387,0 +2996,1 @@\n+\n@@ -2396,0 +3006,1 @@\n+\n@@ -2405,0 +3016,1 @@\n+\n@@ -2414,0 +3026,1 @@\n+\n@@ -2423,0 +3036,1 @@\n+\n@@ -2432,0 +3046,1 @@\n+\n@@ -2441,0 +3056,1 @@\n+\n@@ -2450,0 +3066,1 @@\n+\n@@ -2459,0 +3076,1 @@\n+\n@@ -2468,0 +3086,1 @@\n+\n@@ -2477,0 +3096,1 @@\n+\n@@ -2486,0 +3106,1 @@\n+\n@@ -2495,0 +3116,1 @@\n+\n@@ -2504,0 +3126,1 @@\n+\n@@ -2513,0 +3136,1 @@\n+\n@@ -2522,0 +3146,1 @@\n+\n@@ -2531,0 +3156,1 @@\n+\n@@ -2540,0 +3166,1 @@\n+\n@@ -2549,0 +3176,1 @@\n+\n@@ -2558,0 +3186,1 @@\n+\n@@ -2567,0 +3196,1 @@\n+\n@@ -2576,0 +3206,1 @@\n+\n@@ -2585,0 +3216,1 @@\n+\n@@ -2594,0 +3226,1 @@\n+\n@@ -2603,0 +3236,1 @@\n+\n@@ -2612,0 +3246,1 @@\n+\n@@ -2621,0 +3256,1 @@\n+\n@@ -2630,0 +3266,1 @@\n+\n@@ -2639,0 +3276,1 @@\n+\n@@ -2648,0 +3286,1 @@\n+\n@@ -2657,0 +3296,1 @@\n+\n@@ -2666,0 +3306,1 @@\n+\n@@ -2675,0 +3316,1 @@\n+\n@@ -2684,0 +3326,1 @@\n+\n@@ -2693,0 +3336,1 @@\n+\n@@ -2702,0 +3346,1 @@\n+\n@@ -2711,0 +3356,1 @@\n+\n@@ -2720,0 +3366,1 @@\n+\n@@ -2729,0 +3376,1 @@\n+\n@@ -2738,0 +3386,1 @@\n+\n@@ -2747,0 +3396,1 @@\n+\n@@ -2756,0 +3406,1 @@\n+\n@@ -2765,0 +3416,1 @@\n+\n@@ -2774,0 +3426,1 @@\n+\n@@ -2783,0 +3436,1 @@\n+\n@@ -2792,0 +3446,1 @@\n+\n@@ -2801,0 +3456,1 @@\n+\n@@ -2810,0 +3466,1 @@\n+\n@@ -2819,0 +3476,1 @@\n+\n@@ -2828,0 +3486,1 @@\n+\n@@ -2837,0 +3496,1 @@\n+\n@@ -2846,0 +3506,1 @@\n+\n@@ -2855,0 +3516,1 @@\n+\n@@ -2864,0 +3526,1 @@\n+\n@@ -2873,0 +3536,1 @@\n+\n@@ -2882,0 +3546,1 @@\n+\n@@ -2891,0 +3556,1 @@\n+\n@@ -2900,0 +3566,1 @@\n+\n@@ -2909,0 +3576,1 @@\n+\n@@ -2918,0 +3586,1 @@\n+\n@@ -2927,0 +3596,1 @@\n+\n@@ -2936,0 +3606,1 @@\n+\n@@ -2945,0 +3616,1 @@\n+\n@@ -2954,0 +3626,1 @@\n+\n@@ -2963,0 +3636,1 @@\n+\n@@ -2972,0 +3646,1 @@\n+\n@@ -2981,0 +3656,1 @@\n+\n@@ -2990,0 +3666,1 @@\n+\n@@ -2999,0 +3676,1 @@\n+\n@@ -3008,0 +3686,1 @@\n+\n@@ -3017,0 +3696,1 @@\n+\n@@ -3026,0 +3706,1 @@\n+\n@@ -3035,0 +3716,1 @@\n+\n@@ -3044,0 +3726,1 @@\n+\n@@ -3053,0 +3736,1 @@\n+\n@@ -3062,0 +3746,1 @@\n+\n@@ -3071,0 +3756,1 @@\n+\n@@ -3080,0 +3766,1 @@\n+\n@@ -3089,0 +3776,1 @@\n+\n@@ -3098,0 +3786,1 @@\n+\n@@ -3107,0 +3796,1 @@\n+\n@@ -3116,0 +3806,1 @@\n+\n@@ -3125,0 +3816,1 @@\n+\n@@ -3134,0 +3826,1 @@\n+\n@@ -3143,0 +3836,1 @@\n+\n@@ -3152,0 +3846,1 @@\n+\n@@ -3161,0 +3856,1 @@\n+\n@@ -3170,0 +3866,1 @@\n+\n@@ -3179,0 +3876,1 @@\n+\n@@ -3188,0 +3886,1 @@\n+\n@@ -3197,0 +3896,1 @@\n+\n@@ -3206,0 +3906,1 @@\n+\n@@ -3215,0 +3916,1 @@\n+\n@@ -3224,0 +3926,1 @@\n+\n@@ -3233,0 +3936,1 @@\n+\n@@ -3242,0 +3946,1 @@\n+\n@@ -3251,0 +3956,1 @@\n+\n@@ -3260,0 +3966,1 @@\n+\n@@ -3269,0 +3976,1 @@\n+\n@@ -3278,0 +3986,1 @@\n+\n@@ -3287,0 +3996,1 @@\n+\n@@ -3296,0 +4006,1 @@\n+\n@@ -3305,0 +4016,1 @@\n+\n@@ -3314,0 +4026,1 @@\n+\n@@ -3323,0 +4036,1 @@\n+\n@@ -3332,0 +4046,1 @@\n+\n@@ -3341,0 +4056,1 @@\n+\n@@ -3350,0 +4066,1 @@\n+\n@@ -3359,0 +4076,1 @@\n+\n@@ -3368,0 +4086,1 @@\n+\n@@ -3377,0 +4096,1 @@\n+\n@@ -3386,0 +4106,1 @@\n+\n@@ -3395,0 +4116,1 @@\n+\n@@ -3404,0 +4126,1 @@\n+\n@@ -3413,0 +4136,1 @@\n+\n@@ -3422,0 +4146,1 @@\n+\n@@ -3431,0 +4156,1 @@\n+\n@@ -3440,0 +4166,1 @@\n+\n@@ -3449,0 +4176,1 @@\n+\n@@ -3458,0 +4186,1 @@\n+\n@@ -3467,0 +4196,1 @@\n+\n@@ -3476,0 +4206,1 @@\n+\n@@ -3485,0 +4216,1 @@\n+\n@@ -3494,0 +4226,1 @@\n+\n@@ -3503,0 +4236,1 @@\n+\n@@ -3512,0 +4246,1 @@\n+\n@@ -3521,0 +4256,1 @@\n+\n@@ -3530,0 +4266,1 @@\n+\n@@ -3539,0 +4276,1 @@\n+\n@@ -3548,0 +4286,1 @@\n+\n@@ -3557,0 +4296,1 @@\n+\n@@ -3566,0 +4306,1 @@\n+\n@@ -3575,0 +4316,1 @@\n+\n@@ -3584,0 +4326,1 @@\n+\n@@ -3593,0 +4336,1 @@\n+\n@@ -3602,0 +4346,1 @@\n+\n@@ -3611,0 +4356,1 @@\n+\n@@ -3620,0 +4366,1 @@\n+\n@@ -3629,0 +4376,1 @@\n+\n@@ -3638,0 +4386,1 @@\n+\n@@ -3647,0 +4396,1 @@\n+\n@@ -3656,0 +4406,1 @@\n+\n@@ -3665,0 +4416,1 @@\n+\n@@ -3674,0 +4426,1 @@\n+\n@@ -3683,0 +4436,1 @@\n+\n@@ -3692,0 +4446,1 @@\n+\n@@ -3701,0 +4456,1 @@\n+\n@@ -3710,0 +4466,1 @@\n+\n@@ -3719,0 +4476,1 @@\n+\n@@ -3728,0 +4486,1 @@\n+\n@@ -3737,0 +4496,1 @@\n+\n@@ -3746,0 +4506,1 @@\n+\n@@ -3755,0 +4516,1 @@\n+\n@@ -3764,0 +4526,1 @@\n+\n@@ -3773,0 +4536,1 @@\n+\n@@ -3782,0 +4546,1 @@\n+\n@@ -3791,0 +4556,1 @@\n+\n@@ -3800,0 +4566,1 @@\n+\n@@ -3809,0 +4576,1 @@\n+\n@@ -3818,0 +4586,1 @@\n+\n@@ -3827,0 +4596,1 @@\n+\n@@ -3836,0 +4606,1 @@\n+\n@@ -3845,0 +4616,1 @@\n+\n@@ -3854,0 +4626,1 @@\n+\n@@ -3863,0 +4636,1 @@\n+\n@@ -3872,0 +4646,1 @@\n+\n@@ -3881,0 +4656,1 @@\n+\n@@ -3890,0 +4666,1 @@\n+\n@@ -3899,0 +4676,1 @@\n+\n@@ -3908,0 +4686,1 @@\n+\n@@ -3917,0 +4696,1 @@\n+\n@@ -3926,0 +4706,1 @@\n+\n@@ -3935,0 +4716,1 @@\n+\n@@ -3944,0 +4726,1 @@\n+\n@@ -3953,0 +4736,1 @@\n+\n@@ -3962,0 +4746,1 @@\n+\n@@ -3971,0 +4756,1 @@\n+\n@@ -3980,0 +4766,1 @@\n+\n@@ -3989,0 +4776,1 @@\n+\n@@ -3998,0 +4786,1 @@\n+\n@@ -4007,0 +4796,1 @@\n+\n@@ -4016,0 +4806,1 @@\n+\n@@ -4025,0 +4816,1 @@\n+\n@@ -4034,0 +4826,1 @@\n+\n@@ -4043,0 +4836,1 @@\n+\n@@ -4052,0 +4846,1 @@\n+\n@@ -4061,0 +4856,1 @@\n+\n@@ -4070,0 +4866,1 @@\n+\n@@ -4079,0 +4876,1 @@\n+\n@@ -4088,0 +4886,1 @@\n+\n@@ -4097,0 +4896,1 @@\n+\n@@ -4106,0 +4906,1 @@\n+\n@@ -4115,0 +4916,1 @@\n+\n@@ -4124,0 +4926,1 @@\n+\n@@ -4133,0 +4936,1 @@\n+\n@@ -4142,0 +4946,1 @@\n+\n@@ -4151,0 +4956,1 @@\n+\n@@ -4160,0 +4966,1 @@\n+\n@@ -4169,0 +4976,1 @@\n+\n@@ -4178,0 +4986,1 @@\n+\n@@ -4187,0 +4996,1 @@\n+\n@@ -4196,0 +5006,1 @@\n+\n@@ -4205,0 +5016,1 @@\n+\n@@ -4214,0 +5026,1 @@\n+\n@@ -4223,0 +5036,1 @@\n+\n@@ -4232,0 +5046,1 @@\n+\n@@ -4241,0 +5056,1 @@\n+\n@@ -4250,0 +5066,1 @@\n+\n@@ -4259,0 +5076,1 @@\n+\n@@ -4268,0 +5086,1 @@\n+\n@@ -4277,0 +5096,1 @@\n+\n@@ -4286,0 +5106,1 @@\n+\n@@ -4295,0 +5116,1 @@\n+\n@@ -4304,0 +5126,1 @@\n+\n@@ -4313,0 +5136,1 @@\n+\n@@ -4322,0 +5146,1 @@\n+\n@@ -4331,0 +5156,1 @@\n+\n@@ -4340,0 +5166,1 @@\n+\n@@ -4349,0 +5176,1 @@\n+\n@@ -4358,0 +5186,1 @@\n+\n@@ -4367,0 +5196,1 @@\n+\n@@ -4376,0 +5206,1 @@\n+\n@@ -4385,0 +5216,1 @@\n+\n@@ -4394,0 +5226,1 @@\n+\n@@ -4403,0 +5236,1 @@\n+\n@@ -4412,0 +5246,1 @@\n+\n@@ -4421,0 +5256,1 @@\n+\n@@ -4430,0 +5266,1 @@\n+\n@@ -4438,1 +5275,1 @@\n-    private static class clang_getNullCursor$constants {\n+    private static class clang_getNullCursor {\n@@ -4442,3 +5279,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNullCursor\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNullCursor\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4449,0 +5286,1 @@\n+\n@@ -4454,1 +5292,1 @@\n-        return clang_getNullCursor$constants.DESC;\n+        return clang_getNullCursor.DESC;\n@@ -4459,0 +5297,1 @@\n+\n@@ -4464,1 +5303,12 @@\n-        return clang_getNullCursor$constants.HANDLE;\n+        return clang_getNullCursor.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNullCursor$address() {\n+        return clang_getNullCursor.ADDR;\n@@ -4466,0 +5316,1 @@\n+\n@@ -4467,0 +5318,1 @@\n+\n@@ -4472,1 +5324,1 @@\n-        var mh$ = clang_getNullCursor$constants.HANDLE;\n+        var mh$ = clang_getNullCursor.HANDLE;\n@@ -4483,1 +5335,1 @@\n-    private static class clang_getTranslationUnitCursor$constants {\n+    private static class clang_getTranslationUnitCursor {\n@@ -4489,3 +5341,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTranslationUnitCursor\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTranslationUnitCursor\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4496,0 +5348,1 @@\n+\n@@ -4501,1 +5354,1 @@\n-        return clang_getTranslationUnitCursor$constants.DESC;\n+        return clang_getTranslationUnitCursor.DESC;\n@@ -4506,0 +5359,1 @@\n+\n@@ -4511,1 +5365,1 @@\n-        return clang_getTranslationUnitCursor$constants.HANDLE;\n+        return clang_getTranslationUnitCursor.HANDLE;\n@@ -4513,0 +5367,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTranslationUnitCursor$address() {\n+        return clang_getTranslationUnitCursor.ADDR;\n+    }\n+\n@@ -4514,0 +5380,1 @@\n+\n@@ -4519,1 +5386,1 @@\n-        var mh$ = clang_getTranslationUnitCursor$constants.HANDLE;\n+        var mh$ = clang_getTranslationUnitCursor.HANDLE;\n@@ -4530,1 +5397,1 @@\n-    private static class clang_equalCursors$constants {\n+    private static class clang_equalCursors {\n@@ -4537,3 +5404,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalCursors\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalCursors\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4544,0 +5411,1 @@\n+\n@@ -4549,1 +5417,1 @@\n-        return clang_equalCursors$constants.DESC;\n+        return clang_equalCursors.DESC;\n@@ -4554,0 +5422,1 @@\n+\n@@ -4559,1 +5428,12 @@\n-        return clang_equalCursors$constants.HANDLE;\n+        return clang_equalCursors.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalCursors$address() {\n+        return clang_equalCursors.ADDR;\n@@ -4561,0 +5441,1 @@\n+\n@@ -4562,0 +5443,1 @@\n+\n@@ -4567,1 +5449,1 @@\n-        var mh$ = clang_equalCursors$constants.HANDLE;\n+        var mh$ = clang_equalCursors.HANDLE;\n@@ -4578,1 +5460,1 @@\n-    private static class clang_Cursor_isNull$constants {\n+    private static class clang_Cursor_isNull {\n@@ -4584,3 +5466,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isNull\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isNull\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4591,0 +5473,1 @@\n+\n@@ -4596,1 +5479,1 @@\n-        return clang_Cursor_isNull$constants.DESC;\n+        return clang_Cursor_isNull.DESC;\n@@ -4601,0 +5484,1 @@\n+\n@@ -4606,1 +5490,12 @@\n-        return clang_Cursor_isNull$constants.HANDLE;\n+        return clang_Cursor_isNull.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isNull$address() {\n+        return clang_Cursor_isNull.ADDR;\n@@ -4608,0 +5503,1 @@\n+\n@@ -4609,0 +5505,1 @@\n+\n@@ -4614,1 +5511,1 @@\n-        var mh$ = clang_Cursor_isNull$constants.HANDLE;\n+        var mh$ = clang_Cursor_isNull.HANDLE;\n@@ -4625,1 +5522,1 @@\n-    private static class clang_getCursorKind$constants {\n+    private static class clang_getCursorKind {\n@@ -4631,3 +5528,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4638,0 +5535,1 @@\n+\n@@ -4643,1 +5541,1 @@\n-        return clang_getCursorKind$constants.DESC;\n+        return clang_getCursorKind.DESC;\n@@ -4648,0 +5546,1 @@\n+\n@@ -4653,1 +5552,12 @@\n-        return clang_getCursorKind$constants.HANDLE;\n+        return clang_getCursorKind.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorKind$address() {\n+        return clang_getCursorKind.ADDR;\n@@ -4655,0 +5565,1 @@\n+\n@@ -4656,0 +5567,1 @@\n+\n@@ -4661,1 +5573,1 @@\n-        var mh$ = clang_getCursorKind$constants.HANDLE;\n+        var mh$ = clang_getCursorKind.HANDLE;\n@@ -4672,1 +5584,1 @@\n-    private static class clang_isDeclaration$constants {\n+    private static class clang_isDeclaration {\n@@ -4678,3 +5590,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isDeclaration\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isDeclaration\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4685,0 +5597,1 @@\n+\n@@ -4690,1 +5603,1 @@\n-        return clang_isDeclaration$constants.DESC;\n+        return clang_isDeclaration.DESC;\n@@ -4695,0 +5608,1 @@\n+\n@@ -4700,1 +5614,12 @@\n-        return clang_isDeclaration$constants.HANDLE;\n+        return clang_isDeclaration.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isDeclaration$address() {\n+        return clang_isDeclaration.ADDR;\n@@ -4702,0 +5627,1 @@\n+\n@@ -4703,0 +5629,1 @@\n+\n@@ -4708,1 +5635,1 @@\n-        var mh$ = clang_isDeclaration$constants.HANDLE;\n+        var mh$ = clang_isDeclaration.HANDLE;\n@@ -4719,1 +5646,1 @@\n-    private static class clang_isAttribute$constants {\n+    private static class clang_isAttribute {\n@@ -4725,3 +5652,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isAttribute\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isAttribute\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4732,0 +5659,1 @@\n+\n@@ -4737,1 +5665,1 @@\n-        return clang_isAttribute$constants.DESC;\n+        return clang_isAttribute.DESC;\n@@ -4742,0 +5670,1 @@\n+\n@@ -4747,1 +5676,12 @@\n-        return clang_isAttribute$constants.HANDLE;\n+        return clang_isAttribute.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isAttribute$address() {\n+        return clang_isAttribute.ADDR;\n@@ -4749,0 +5689,1 @@\n+\n@@ -4750,0 +5691,1 @@\n+\n@@ -4755,1 +5697,1 @@\n-        var mh$ = clang_isAttribute$constants.HANDLE;\n+        var mh$ = clang_isAttribute.HANDLE;\n@@ -4766,1 +5708,1 @@\n-    private static class clang_isInvalid$constants {\n+    private static class clang_isInvalid {\n@@ -4772,3 +5714,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isInvalid\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isInvalid\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4779,0 +5721,1 @@\n+\n@@ -4784,1 +5727,1 @@\n-        return clang_isInvalid$constants.DESC;\n+        return clang_isInvalid.DESC;\n@@ -4789,0 +5732,1 @@\n+\n@@ -4794,1 +5738,12 @@\n-        return clang_isInvalid$constants.HANDLE;\n+        return clang_isInvalid.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isInvalid$address() {\n+        return clang_isInvalid.ADDR;\n@@ -4796,0 +5751,1 @@\n+\n@@ -4797,0 +5753,1 @@\n+\n@@ -4802,1 +5759,1 @@\n-        var mh$ = clang_isInvalid$constants.HANDLE;\n+        var mh$ = clang_isInvalid.HANDLE;\n@@ -4813,1 +5770,1 @@\n-    private static class clang_isPreprocessing$constants {\n+    private static class clang_isPreprocessing {\n@@ -4819,3 +5776,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isPreprocessing\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isPreprocessing\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4826,0 +5783,1 @@\n+\n@@ -4831,1 +5789,1 @@\n-        return clang_isPreprocessing$constants.DESC;\n+        return clang_isPreprocessing.DESC;\n@@ -4836,0 +5794,1 @@\n+\n@@ -4841,1 +5800,12 @@\n-        return clang_isPreprocessing$constants.HANDLE;\n+        return clang_isPreprocessing.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isPreprocessing$address() {\n+        return clang_isPreprocessing.ADDR;\n@@ -4843,0 +5813,1 @@\n+\n@@ -4844,0 +5815,1 @@\n+\n@@ -4849,1 +5821,1 @@\n-        var mh$ = clang_isPreprocessing$constants.HANDLE;\n+        var mh$ = clang_isPreprocessing.HANDLE;\n@@ -4861,0 +5833,1 @@\n+\n@@ -4870,0 +5843,1 @@\n+\n@@ -4879,0 +5853,1 @@\n+\n@@ -4888,0 +5863,1 @@\n+\n@@ -4897,0 +5873,1 @@\n+\n@@ -4905,1 +5882,1 @@\n-    private static class clang_getCursorLinkage$constants {\n+    private static class clang_getCursorLinkage {\n@@ -4911,3 +5888,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLinkage\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLinkage\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -4918,0 +5895,1 @@\n+\n@@ -4923,1 +5901,1 @@\n-        return clang_getCursorLinkage$constants.DESC;\n+        return clang_getCursorLinkage.DESC;\n@@ -4928,0 +5906,1 @@\n+\n@@ -4933,1 +5912,12 @@\n-        return clang_getCursorLinkage$constants.HANDLE;\n+        return clang_getCursorLinkage.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLinkage$address() {\n+        return clang_getCursorLinkage.ADDR;\n@@ -4935,0 +5925,1 @@\n+\n@@ -4936,0 +5927,1 @@\n+\n@@ -4941,1 +5933,1 @@\n-        var mh$ = clang_getCursorLinkage$constants.HANDLE;\n+        var mh$ = clang_getCursorLinkage.HANDLE;\n@@ -4953,0 +5945,1 @@\n+\n@@ -4962,0 +5955,1 @@\n+\n@@ -4971,0 +5965,1 @@\n+\n@@ -4980,0 +5975,1 @@\n+\n@@ -4988,1 +5984,1 @@\n-    private static class clang_getCursorLanguage$constants {\n+    private static class clang_getCursorLanguage {\n@@ -4994,3 +5990,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLanguage\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLanguage\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5001,0 +5997,1 @@\n+\n@@ -5006,1 +6003,1 @@\n-        return clang_getCursorLanguage$constants.DESC;\n+        return clang_getCursorLanguage.DESC;\n@@ -5011,0 +6008,1 @@\n+\n@@ -5016,1 +6014,12 @@\n-        return clang_getCursorLanguage$constants.HANDLE;\n+        return clang_getCursorLanguage.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLanguage$address() {\n+        return clang_getCursorLanguage.ADDR;\n@@ -5018,0 +6027,1 @@\n+\n@@ -5019,0 +6029,1 @@\n+\n@@ -5024,1 +6035,1 @@\n-        var mh$ = clang_getCursorLanguage$constants.HANDLE;\n+        var mh$ = clang_getCursorLanguage.HANDLE;\n@@ -5035,1 +6046,1 @@\n-    private static class clang_Cursor_getTranslationUnit$constants {\n+    private static class clang_Cursor_getTranslationUnit {\n@@ -5041,3 +6052,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getTranslationUnit\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getTranslationUnit\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5048,0 +6059,1 @@\n+\n@@ -5053,1 +6065,1 @@\n-        return clang_Cursor_getTranslationUnit$constants.DESC;\n+        return clang_Cursor_getTranslationUnit.DESC;\n@@ -5058,0 +6070,1 @@\n+\n@@ -5063,1 +6076,12 @@\n-        return clang_Cursor_getTranslationUnit$constants.HANDLE;\n+        return clang_Cursor_getTranslationUnit.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getTranslationUnit$address() {\n+        return clang_Cursor_getTranslationUnit.ADDR;\n@@ -5065,0 +6089,1 @@\n+\n@@ -5066,0 +6091,1 @@\n+\n@@ -5071,1 +6097,1 @@\n-        var mh$ = clang_Cursor_getTranslationUnit$constants.HANDLE;\n+        var mh$ = clang_Cursor_getTranslationUnit.HANDLE;\n@@ -5082,1 +6108,1 @@\n-    private static class clang_getCursorLocation$constants {\n+    private static class clang_getCursorLocation {\n@@ -5088,3 +6114,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5095,0 +6121,1 @@\n+\n@@ -5100,1 +6127,1 @@\n-        return clang_getCursorLocation$constants.DESC;\n+        return clang_getCursorLocation.DESC;\n@@ -5105,0 +6132,1 @@\n+\n@@ -5110,1 +6138,12 @@\n-        return clang_getCursorLocation$constants.HANDLE;\n+        return clang_getCursorLocation.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorLocation$address() {\n+        return clang_getCursorLocation.ADDR;\n@@ -5112,0 +6151,1 @@\n+\n@@ -5113,0 +6153,1 @@\n+\n@@ -5118,1 +6159,1 @@\n-        var mh$ = clang_getCursorLocation$constants.HANDLE;\n+        var mh$ = clang_getCursorLocation.HANDLE;\n@@ -5129,1 +6170,1 @@\n-    private static class clang_getCursorExtent$constants {\n+    private static class clang_getCursorExtent {\n@@ -5135,3 +6176,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorExtent\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorExtent\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -5142,0 +6183,1 @@\n+\n@@ -5147,1 +6189,1 @@\n-        return clang_getCursorExtent$constants.DESC;\n+        return clang_getCursorExtent.DESC;\n@@ -5152,0 +6194,1 @@\n+\n@@ -5157,1 +6200,12 @@\n-        return clang_getCursorExtent$constants.HANDLE;\n+        return clang_getCursorExtent.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorExtent$address() {\n+        return clang_getCursorExtent.ADDR;\n@@ -5159,0 +6213,1 @@\n+\n@@ -5160,0 +6215,1 @@\n+\n@@ -5165,1 +6221,1 @@\n-        var mh$ = clang_getCursorExtent$constants.HANDLE;\n+        var mh$ = clang_getCursorExtent.HANDLE;\n@@ -5177,0 +6233,1 @@\n+\n@@ -5186,0 +6243,1 @@\n+\n@@ -5195,0 +6253,1 @@\n+\n@@ -5204,0 +6263,1 @@\n+\n@@ -5213,0 +6273,1 @@\n+\n@@ -5222,0 +6283,1 @@\n+\n@@ -5231,0 +6293,1 @@\n+\n@@ -5240,0 +6303,1 @@\n+\n@@ -5249,0 +6313,1 @@\n+\n@@ -5258,0 +6323,1 @@\n+\n@@ -5267,0 +6333,1 @@\n+\n@@ -5276,0 +6343,1 @@\n+\n@@ -5285,0 +6353,1 @@\n+\n@@ -5294,0 +6363,1 @@\n+\n@@ -5303,0 +6373,1 @@\n+\n@@ -5312,0 +6383,1 @@\n+\n@@ -5321,0 +6393,1 @@\n+\n@@ -5330,0 +6403,1 @@\n+\n@@ -5339,0 +6413,1 @@\n+\n@@ -5348,0 +6423,1 @@\n+\n@@ -5357,0 +6433,1 @@\n+\n@@ -5366,0 +6443,1 @@\n+\n@@ -5375,0 +6453,1 @@\n+\n@@ -5384,0 +6463,1 @@\n+\n@@ -5393,0 +6473,1 @@\n+\n@@ -5402,0 +6483,1 @@\n+\n@@ -5411,0 +6493,1 @@\n+\n@@ -5420,0 +6503,1 @@\n+\n@@ -5429,0 +6513,1 @@\n+\n@@ -5438,0 +6523,1 @@\n+\n@@ -5447,0 +6533,1 @@\n+\n@@ -5456,0 +6543,1 @@\n+\n@@ -5465,0 +6553,1 @@\n+\n@@ -5474,0 +6563,1 @@\n+\n@@ -5483,0 +6573,1 @@\n+\n@@ -5492,0 +6583,1 @@\n+\n@@ -5501,0 +6593,1 @@\n+\n@@ -5510,0 +6603,1 @@\n+\n@@ -5519,0 +6613,1 @@\n+\n@@ -5528,0 +6623,1 @@\n+\n@@ -5537,0 +6633,1 @@\n+\n@@ -5546,0 +6643,1 @@\n+\n@@ -5555,0 +6653,1 @@\n+\n@@ -5564,0 +6663,1 @@\n+\n@@ -5573,0 +6673,1 @@\n+\n@@ -5582,0 +6683,1 @@\n+\n@@ -5591,0 +6693,1 @@\n+\n@@ -5600,0 +6703,1 @@\n+\n@@ -5609,0 +6713,1 @@\n+\n@@ -5618,0 +6723,1 @@\n+\n@@ -5627,0 +6733,1 @@\n+\n@@ -5636,0 +6743,1 @@\n+\n@@ -5645,0 +6753,1 @@\n+\n@@ -5654,0 +6763,1 @@\n+\n@@ -5663,0 +6773,1 @@\n+\n@@ -5672,0 +6783,1 @@\n+\n@@ -5681,0 +6793,1 @@\n+\n@@ -5690,0 +6803,1 @@\n+\n@@ -5699,0 +6813,1 @@\n+\n@@ -5708,0 +6823,1 @@\n+\n@@ -5717,0 +6833,1 @@\n+\n@@ -5726,0 +6843,1 @@\n+\n@@ -5735,0 +6853,1 @@\n+\n@@ -5744,0 +6863,1 @@\n+\n@@ -5753,0 +6873,1 @@\n+\n@@ -5762,0 +6883,1 @@\n+\n@@ -5771,0 +6893,1 @@\n+\n@@ -5780,0 +6903,1 @@\n+\n@@ -5789,0 +6913,1 @@\n+\n@@ -5798,0 +6923,1 @@\n+\n@@ -5807,0 +6933,1 @@\n+\n@@ -5816,0 +6943,1 @@\n+\n@@ -5825,0 +6953,1 @@\n+\n@@ -5834,0 +6963,1 @@\n+\n@@ -5843,0 +6973,1 @@\n+\n@@ -5852,0 +6983,1 @@\n+\n@@ -5861,0 +6993,1 @@\n+\n@@ -5870,0 +7003,1 @@\n+\n@@ -5879,0 +7013,1 @@\n+\n@@ -5888,0 +7023,1 @@\n+\n@@ -5897,0 +7033,1 @@\n+\n@@ -5906,0 +7043,1 @@\n+\n@@ -5915,0 +7053,1 @@\n+\n@@ -5924,0 +7063,1 @@\n+\n@@ -5933,0 +7073,1 @@\n+\n@@ -5942,0 +7083,1 @@\n+\n@@ -5951,0 +7093,1 @@\n+\n@@ -5960,0 +7103,1 @@\n+\n@@ -5969,0 +7113,1 @@\n+\n@@ -5978,0 +7123,1 @@\n+\n@@ -5987,0 +7133,1 @@\n+\n@@ -5996,0 +7143,1 @@\n+\n@@ -6005,0 +7153,1 @@\n+\n@@ -6014,0 +7163,1 @@\n+\n@@ -6023,0 +7173,1 @@\n+\n@@ -6032,0 +7183,1 @@\n+\n@@ -6041,0 +7193,1 @@\n+\n@@ -6050,0 +7203,1 @@\n+\n@@ -6059,0 +7213,1 @@\n+\n@@ -6068,0 +7223,1 @@\n+\n@@ -6077,0 +7233,1 @@\n+\n@@ -6086,0 +7243,1 @@\n+\n@@ -6095,0 +7253,1 @@\n+\n@@ -6104,0 +7263,1 @@\n+\n@@ -6113,0 +7273,1 @@\n+\n@@ -6122,0 +7283,1 @@\n+\n@@ -6131,0 +7293,1 @@\n+\n@@ -6140,0 +7303,1 @@\n+\n@@ -6149,0 +7313,1 @@\n+\n@@ -6158,0 +7323,1 @@\n+\n@@ -6167,0 +7333,1 @@\n+\n@@ -6176,0 +7343,1 @@\n+\n@@ -6185,0 +7353,1 @@\n+\n@@ -6194,0 +7363,1 @@\n+\n@@ -6203,0 +7373,1 @@\n+\n@@ -6212,0 +7383,1 @@\n+\n@@ -6221,0 +7393,1 @@\n+\n@@ -6230,0 +7403,1 @@\n+\n@@ -6239,0 +7413,1 @@\n+\n@@ -6248,0 +7423,1 @@\n+\n@@ -6257,0 +7433,1 @@\n+\n@@ -6266,0 +7443,1 @@\n+\n@@ -6275,0 +7453,1 @@\n+\n@@ -6284,0 +7463,1 @@\n+\n@@ -6293,0 +7473,1 @@\n+\n@@ -6302,0 +7483,1 @@\n+\n@@ -6311,0 +7493,1 @@\n+\n@@ -6320,0 +7503,1 @@\n+\n@@ -6329,0 +7513,1 @@\n+\n@@ -6338,0 +7523,1 @@\n+\n@@ -6347,0 +7533,1 @@\n+\n@@ -6356,0 +7543,1 @@\n+\n@@ -6365,0 +7553,1 @@\n+\n@@ -6374,0 +7563,1 @@\n+\n@@ -6383,0 +7573,1 @@\n+\n@@ -6392,0 +7583,1 @@\n+\n@@ -6401,0 +7593,1 @@\n+\n@@ -6410,0 +7603,1 @@\n+\n@@ -6418,1 +7612,1 @@\n-    private static class clang_getCursorType$constants {\n+    private static class clang_getCursorType {\n@@ -6424,3 +7618,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6431,0 +7625,1 @@\n+\n@@ -6436,1 +7631,1 @@\n-        return clang_getCursorType$constants.DESC;\n+        return clang_getCursorType.DESC;\n@@ -6441,0 +7636,1 @@\n+\n@@ -6446,1 +7642,12 @@\n-        return clang_getCursorType$constants.HANDLE;\n+        return clang_getCursorType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorType$address() {\n+        return clang_getCursorType.ADDR;\n@@ -6448,0 +7655,1 @@\n+\n@@ -6449,0 +7657,1 @@\n+\n@@ -6454,1 +7663,1 @@\n-        var mh$ = clang_getCursorType$constants.HANDLE;\n+        var mh$ = clang_getCursorType.HANDLE;\n@@ -6465,1 +7674,1 @@\n-    private static class clang_getTypeSpelling$constants {\n+    private static class clang_getTypeSpelling {\n@@ -6471,3 +7680,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6478,0 +7687,1 @@\n+\n@@ -6483,1 +7693,1 @@\n-        return clang_getTypeSpelling$constants.DESC;\n+        return clang_getTypeSpelling.DESC;\n@@ -6488,0 +7698,1 @@\n+\n@@ -6493,1 +7704,12 @@\n-        return clang_getTypeSpelling$constants.HANDLE;\n+        return clang_getTypeSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeSpelling$address() {\n+        return clang_getTypeSpelling.ADDR;\n@@ -6495,0 +7717,1 @@\n+\n@@ -6496,0 +7719,1 @@\n+\n@@ -6501,1 +7725,1 @@\n-        var mh$ = clang_getTypeSpelling$constants.HANDLE;\n+        var mh$ = clang_getTypeSpelling.HANDLE;\n@@ -6512,1 +7736,1 @@\n-    private static class clang_getTypedefDeclUnderlyingType$constants {\n+    private static class clang_getTypedefDeclUnderlyingType {\n@@ -6518,3 +7742,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypedefDeclUnderlyingType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypedefDeclUnderlyingType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6525,0 +7749,1 @@\n+\n@@ -6530,1 +7755,1 @@\n-        return clang_getTypedefDeclUnderlyingType$constants.DESC;\n+        return clang_getTypedefDeclUnderlyingType.DESC;\n@@ -6535,0 +7760,1 @@\n+\n@@ -6540,1 +7766,12 @@\n-        return clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+        return clang_getTypedefDeclUnderlyingType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType$address() {\n+        return clang_getTypedefDeclUnderlyingType.ADDR;\n@@ -6542,0 +7779,1 @@\n+\n@@ -6543,0 +7781,1 @@\n+\n@@ -6548,1 +7787,1 @@\n-        var mh$ = clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+        var mh$ = clang_getTypedefDeclUnderlyingType.HANDLE;\n@@ -6559,1 +7798,1 @@\n-    private static class clang_getEnumDeclIntegerType$constants {\n+    private static class clang_getEnumDeclIntegerType {\n@@ -6565,3 +7804,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumDeclIntegerType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumDeclIntegerType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6572,0 +7811,1 @@\n+\n@@ -6577,1 +7817,1 @@\n-        return clang_getEnumDeclIntegerType$constants.DESC;\n+        return clang_getEnumDeclIntegerType.DESC;\n@@ -6582,0 +7822,1 @@\n+\n@@ -6587,1 +7828,12 @@\n-        return clang_getEnumDeclIntegerType$constants.HANDLE;\n+        return clang_getEnumDeclIntegerType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumDeclIntegerType$address() {\n+        return clang_getEnumDeclIntegerType.ADDR;\n@@ -6589,0 +7841,1 @@\n+\n@@ -6590,0 +7843,1 @@\n+\n@@ -6595,1 +7849,1 @@\n-        var mh$ = clang_getEnumDeclIntegerType$constants.HANDLE;\n+        var mh$ = clang_getEnumDeclIntegerType.HANDLE;\n@@ -6606,1 +7860,1 @@\n-    private static class clang_getEnumConstantDeclValue$constants {\n+    private static class clang_getEnumConstantDeclValue {\n@@ -6612,3 +7866,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumConstantDeclValue\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumConstantDeclValue\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6619,0 +7873,1 @@\n+\n@@ -6624,1 +7879,1 @@\n-        return clang_getEnumConstantDeclValue$constants.DESC;\n+        return clang_getEnumConstantDeclValue.DESC;\n@@ -6629,0 +7884,1 @@\n+\n@@ -6634,1 +7890,1 @@\n-        return clang_getEnumConstantDeclValue$constants.HANDLE;\n+        return clang_getEnumConstantDeclValue.HANDLE;\n@@ -6636,0 +7892,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumConstantDeclValue$address() {\n+        return clang_getEnumConstantDeclValue.ADDR;\n+    }\n+\n@@ -6637,0 +7905,1 @@\n+\n@@ -6642,1 +7911,1 @@\n-        var mh$ = clang_getEnumConstantDeclValue$constants.HANDLE;\n+        var mh$ = clang_getEnumConstantDeclValue.HANDLE;\n@@ -6653,1 +7922,1 @@\n-    private static class clang_getEnumConstantDeclUnsignedValue$constants {\n+    private static class clang_getEnumConstantDeclUnsignedValue {\n@@ -6659,3 +7928,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getEnumConstantDeclUnsignedValue\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getEnumConstantDeclUnsignedValue\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6666,0 +7935,1 @@\n+\n@@ -6671,1 +7941,1 @@\n-        return clang_getEnumConstantDeclUnsignedValue$constants.DESC;\n+        return clang_getEnumConstantDeclUnsignedValue.DESC;\n@@ -6676,0 +7946,1 @@\n+\n@@ -6681,1 +7952,12 @@\n-        return clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+        return clang_getEnumConstantDeclUnsignedValue.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumConstantDeclUnsignedValue$address() {\n+        return clang_getEnumConstantDeclUnsignedValue.ADDR;\n@@ -6683,0 +7965,1 @@\n+\n@@ -6684,0 +7967,1 @@\n+\n@@ -6689,1 +7973,1 @@\n-        var mh$ = clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+        var mh$ = clang_getEnumConstantDeclUnsignedValue.HANDLE;\n@@ -6700,1 +7984,1 @@\n-    private static class clang_getFieldDeclBitWidth$constants {\n+    private static class clang_getFieldDeclBitWidth {\n@@ -6706,3 +7990,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFieldDeclBitWidth\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFieldDeclBitWidth\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6713,0 +7997,1 @@\n+\n@@ -6718,1 +8003,1 @@\n-        return clang_getFieldDeclBitWidth$constants.DESC;\n+        return clang_getFieldDeclBitWidth.DESC;\n@@ -6723,0 +8008,1 @@\n+\n@@ -6728,1 +8014,12 @@\n-        return clang_getFieldDeclBitWidth$constants.HANDLE;\n+        return clang_getFieldDeclBitWidth.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFieldDeclBitWidth$address() {\n+        return clang_getFieldDeclBitWidth.ADDR;\n@@ -6730,0 +8027,1 @@\n+\n@@ -6731,0 +8029,1 @@\n+\n@@ -6736,1 +8035,1 @@\n-        var mh$ = clang_getFieldDeclBitWidth$constants.HANDLE;\n+        var mh$ = clang_getFieldDeclBitWidth.HANDLE;\n@@ -6747,1 +8046,1 @@\n-    private static class clang_Cursor_getNumArguments$constants {\n+    private static class clang_Cursor_getNumArguments {\n@@ -6753,3 +8052,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getNumArguments\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getNumArguments\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6760,0 +8059,1 @@\n+\n@@ -6765,1 +8065,1 @@\n-        return clang_Cursor_getNumArguments$constants.DESC;\n+        return clang_Cursor_getNumArguments.DESC;\n@@ -6770,0 +8070,1 @@\n+\n@@ -6775,1 +8076,12 @@\n-        return clang_Cursor_getNumArguments$constants.HANDLE;\n+        return clang_Cursor_getNumArguments.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getNumArguments$address() {\n+        return clang_Cursor_getNumArguments.ADDR;\n@@ -6777,0 +8089,1 @@\n+\n@@ -6778,0 +8091,1 @@\n+\n@@ -6783,1 +8097,1 @@\n-        var mh$ = clang_Cursor_getNumArguments$constants.HANDLE;\n+        var mh$ = clang_Cursor_getNumArguments.HANDLE;\n@@ -6794,1 +8108,1 @@\n-    private static class clang_Cursor_getArgument$constants {\n+    private static class clang_Cursor_getArgument {\n@@ -6801,3 +8115,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getArgument\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getArgument\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6808,0 +8122,1 @@\n+\n@@ -6813,1 +8128,1 @@\n-        return clang_Cursor_getArgument$constants.DESC;\n+        return clang_Cursor_getArgument.DESC;\n@@ -6818,0 +8133,1 @@\n+\n@@ -6823,1 +8139,12 @@\n-        return clang_Cursor_getArgument$constants.HANDLE;\n+        return clang_Cursor_getArgument.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getArgument$address() {\n+        return clang_Cursor_getArgument.ADDR;\n@@ -6825,0 +8152,1 @@\n+\n@@ -6826,0 +8154,1 @@\n+\n@@ -6831,1 +8160,1 @@\n-        var mh$ = clang_Cursor_getArgument$constants.HANDLE;\n+        var mh$ = clang_Cursor_getArgument.HANDLE;\n@@ -6842,1 +8171,1 @@\n-    private static class clang_equalTypes$constants {\n+    private static class clang_equalTypes {\n@@ -6849,3 +8178,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_equalTypes\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_equalTypes\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6856,0 +8185,1 @@\n+\n@@ -6861,1 +8191,1 @@\n-        return clang_equalTypes$constants.DESC;\n+        return clang_equalTypes.DESC;\n@@ -6866,0 +8196,1 @@\n+\n@@ -6871,1 +8202,12 @@\n-        return clang_equalTypes$constants.HANDLE;\n+        return clang_equalTypes.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static MemorySegment clang_equalTypes$address() {\n+        return clang_equalTypes.ADDR;\n@@ -6873,0 +8215,1 @@\n+\n@@ -6874,0 +8217,1 @@\n+\n@@ -6879,1 +8223,1 @@\n-        var mh$ = clang_equalTypes$constants.HANDLE;\n+        var mh$ = clang_equalTypes.HANDLE;\n@@ -6890,1 +8234,1 @@\n-    private static class clang_getCanonicalType$constants {\n+    private static class clang_getCanonicalType {\n@@ -6896,3 +8240,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCanonicalType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCanonicalType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6903,0 +8247,1 @@\n+\n@@ -6908,1 +8253,1 @@\n-        return clang_getCanonicalType$constants.DESC;\n+        return clang_getCanonicalType.DESC;\n@@ -6913,0 +8258,1 @@\n+\n@@ -6918,1 +8264,12 @@\n-        return clang_getCanonicalType$constants.HANDLE;\n+        return clang_getCanonicalType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCanonicalType$address() {\n+        return clang_getCanonicalType.ADDR;\n@@ -6920,0 +8277,1 @@\n+\n@@ -6921,0 +8279,1 @@\n+\n@@ -6926,1 +8285,1 @@\n-        var mh$ = clang_getCanonicalType$constants.HANDLE;\n+        var mh$ = clang_getCanonicalType.HANDLE;\n@@ -6937,1 +8296,1 @@\n-    private static class clang_isConstQualifiedType$constants {\n+    private static class clang_isConstQualifiedType {\n@@ -6943,3 +8302,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isConstQualifiedType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isConstQualifiedType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6950,0 +8309,1 @@\n+\n@@ -6955,1 +8315,1 @@\n-        return clang_isConstQualifiedType$constants.DESC;\n+        return clang_isConstQualifiedType.DESC;\n@@ -6960,0 +8320,1 @@\n+\n@@ -6965,1 +8326,12 @@\n-        return clang_isConstQualifiedType$constants.HANDLE;\n+        return clang_isConstQualifiedType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isConstQualifiedType$address() {\n+        return clang_isConstQualifiedType.ADDR;\n@@ -6967,0 +8339,1 @@\n+\n@@ -6968,0 +8341,1 @@\n+\n@@ -6973,1 +8347,1 @@\n-        var mh$ = clang_isConstQualifiedType$constants.HANDLE;\n+        var mh$ = clang_isConstQualifiedType.HANDLE;\n@@ -6984,1 +8358,1 @@\n-    private static class clang_Cursor_isMacroFunctionLike$constants {\n+    private static class clang_Cursor_isMacroFunctionLike {\n@@ -6990,3 +8364,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isMacroFunctionLike\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isMacroFunctionLike\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -6997,0 +8371,1 @@\n+\n@@ -7002,1 +8377,1 @@\n-        return clang_Cursor_isMacroFunctionLike$constants.DESC;\n+        return clang_Cursor_isMacroFunctionLike.DESC;\n@@ -7007,0 +8382,1 @@\n+\n@@ -7012,1 +8388,12 @@\n-        return clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+        return clang_Cursor_isMacroFunctionLike.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isMacroFunctionLike$address() {\n+        return clang_Cursor_isMacroFunctionLike.ADDR;\n@@ -7014,0 +8401,1 @@\n+\n@@ -7015,0 +8403,1 @@\n+\n@@ -7020,1 +8409,1 @@\n-        var mh$ = clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+        var mh$ = clang_Cursor_isMacroFunctionLike.HANDLE;\n@@ -7031,1 +8420,1 @@\n-    private static class clang_Cursor_isFunctionInlined$constants {\n+    private static class clang_Cursor_isFunctionInlined {\n@@ -7037,3 +8426,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isFunctionInlined\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isFunctionInlined\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7044,0 +8433,1 @@\n+\n@@ -7049,1 +8439,1 @@\n-        return clang_Cursor_isFunctionInlined$constants.DESC;\n+        return clang_Cursor_isFunctionInlined.DESC;\n@@ -7054,0 +8444,1 @@\n+\n@@ -7059,1 +8450,12 @@\n-        return clang_Cursor_isFunctionInlined$constants.HANDLE;\n+        return clang_Cursor_isFunctionInlined.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isFunctionInlined$address() {\n+        return clang_Cursor_isFunctionInlined.ADDR;\n@@ -7061,0 +8463,1 @@\n+\n@@ -7062,0 +8465,1 @@\n+\n@@ -7067,1 +8471,1 @@\n-        var mh$ = clang_Cursor_isFunctionInlined$constants.HANDLE;\n+        var mh$ = clang_Cursor_isFunctionInlined.HANDLE;\n@@ -7078,1 +8482,1 @@\n-    private static class clang_isVolatileQualifiedType$constants {\n+    private static class clang_isVolatileQualifiedType {\n@@ -7084,3 +8488,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isVolatileQualifiedType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isVolatileQualifiedType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7091,0 +8495,1 @@\n+\n@@ -7096,1 +8501,1 @@\n-        return clang_isVolatileQualifiedType$constants.DESC;\n+        return clang_isVolatileQualifiedType.DESC;\n@@ -7101,0 +8506,1 @@\n+\n@@ -7106,1 +8512,12 @@\n-        return clang_isVolatileQualifiedType$constants.HANDLE;\n+        return clang_isVolatileQualifiedType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isVolatileQualifiedType$address() {\n+        return clang_isVolatileQualifiedType.ADDR;\n@@ -7108,0 +8525,1 @@\n+\n@@ -7109,0 +8527,1 @@\n+\n@@ -7114,1 +8533,1 @@\n-        var mh$ = clang_isVolatileQualifiedType$constants.HANDLE;\n+        var mh$ = clang_isVolatileQualifiedType.HANDLE;\n@@ -7125,1 +8544,1 @@\n-    private static class clang_getTypedefName$constants {\n+    private static class clang_getTypedefName {\n@@ -7131,3 +8550,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypedefName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypedefName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7138,0 +8557,1 @@\n+\n@@ -7143,1 +8563,1 @@\n-        return clang_getTypedefName$constants.DESC;\n+        return clang_getTypedefName.DESC;\n@@ -7148,0 +8568,1 @@\n+\n@@ -7153,1 +8574,12 @@\n-        return clang_getTypedefName$constants.HANDLE;\n+        return clang_getTypedefName.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefName$address() {\n+        return clang_getTypedefName.ADDR;\n@@ -7155,0 +8587,1 @@\n+\n@@ -7156,0 +8589,1 @@\n+\n@@ -7161,1 +8595,1 @@\n-        var mh$ = clang_getTypedefName$constants.HANDLE;\n+        var mh$ = clang_getTypedefName.HANDLE;\n@@ -7172,1 +8606,1 @@\n-    private static class clang_getPointeeType$constants {\n+    private static class clang_getPointeeType {\n@@ -7178,3 +8612,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getPointeeType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getPointeeType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7185,0 +8619,1 @@\n+\n@@ -7190,1 +8625,1 @@\n-        return clang_getPointeeType$constants.DESC;\n+        return clang_getPointeeType.DESC;\n@@ -7195,0 +8630,1 @@\n+\n@@ -7200,1 +8636,12 @@\n-        return clang_getPointeeType$constants.HANDLE;\n+        return clang_getPointeeType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getPointeeType$address() {\n+        return clang_getPointeeType.ADDR;\n@@ -7202,0 +8649,1 @@\n+\n@@ -7203,0 +8651,1 @@\n+\n@@ -7208,1 +8657,1 @@\n-        var mh$ = clang_getPointeeType$constants.HANDLE;\n+        var mh$ = clang_getPointeeType.HANDLE;\n@@ -7219,1 +8668,1 @@\n-    private static class clang_getTypeDeclaration$constants {\n+    private static class clang_getTypeDeclaration {\n@@ -7225,3 +8674,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeDeclaration\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeDeclaration\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7232,0 +8681,1 @@\n+\n@@ -7237,1 +8687,1 @@\n-        return clang_getTypeDeclaration$constants.DESC;\n+        return clang_getTypeDeclaration.DESC;\n@@ -7242,0 +8692,1 @@\n+\n@@ -7247,1 +8698,12 @@\n-        return clang_getTypeDeclaration$constants.HANDLE;\n+        return clang_getTypeDeclaration.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeDeclaration$address() {\n+        return clang_getTypeDeclaration.ADDR;\n@@ -7249,0 +8711,1 @@\n+\n@@ -7250,0 +8713,1 @@\n+\n@@ -7255,1 +8719,1 @@\n-        var mh$ = clang_getTypeDeclaration$constants.HANDLE;\n+        var mh$ = clang_getTypeDeclaration.HANDLE;\n@@ -7266,1 +8730,1 @@\n-    private static class clang_getTypeKindSpelling$constants {\n+    private static class clang_getTypeKindSpelling {\n@@ -7272,3 +8736,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTypeKindSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTypeKindSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7279,0 +8743,1 @@\n+\n@@ -7284,1 +8749,1 @@\n-        return clang_getTypeKindSpelling$constants.DESC;\n+        return clang_getTypeKindSpelling.DESC;\n@@ -7289,0 +8754,1 @@\n+\n@@ -7294,1 +8760,12 @@\n-        return clang_getTypeKindSpelling$constants.HANDLE;\n+        return clang_getTypeKindSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeKindSpelling$address() {\n+        return clang_getTypeKindSpelling.ADDR;\n@@ -7296,0 +8773,1 @@\n+\n@@ -7297,0 +8775,1 @@\n+\n@@ -7302,1 +8781,1 @@\n-        var mh$ = clang_getTypeKindSpelling$constants.HANDLE;\n+        var mh$ = clang_getTypeKindSpelling.HANDLE;\n@@ -7313,1 +8792,1 @@\n-    private static class clang_getFunctionTypeCallingConv$constants {\n+    private static class clang_getFunctionTypeCallingConv {\n@@ -7319,3 +8798,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getFunctionTypeCallingConv\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getFunctionTypeCallingConv\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7326,0 +8805,1 @@\n+\n@@ -7331,1 +8811,1 @@\n-        return clang_getFunctionTypeCallingConv$constants.DESC;\n+        return clang_getFunctionTypeCallingConv.DESC;\n@@ -7336,0 +8816,1 @@\n+\n@@ -7341,1 +8822,12 @@\n-        return clang_getFunctionTypeCallingConv$constants.HANDLE;\n+        return clang_getFunctionTypeCallingConv.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getFunctionTypeCallingConv$address() {\n+        return clang_getFunctionTypeCallingConv.ADDR;\n@@ -7343,0 +8835,1 @@\n+\n@@ -7344,0 +8837,1 @@\n+\n@@ -7349,1 +8843,1 @@\n-        var mh$ = clang_getFunctionTypeCallingConv$constants.HANDLE;\n+        var mh$ = clang_getFunctionTypeCallingConv.HANDLE;\n@@ -7360,1 +8854,1 @@\n-    private static class clang_getResultType$constants {\n+    private static class clang_getResultType {\n@@ -7366,3 +8860,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getResultType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getResultType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7373,0 +8867,1 @@\n+\n@@ -7378,1 +8873,1 @@\n-        return clang_getResultType$constants.DESC;\n+        return clang_getResultType.DESC;\n@@ -7383,0 +8878,1 @@\n+\n@@ -7388,1 +8884,1 @@\n-        return clang_getResultType$constants.HANDLE;\n+        return clang_getResultType.HANDLE;\n@@ -7390,0 +8886,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getResultType$address() {\n+        return clang_getResultType.ADDR;\n+    }\n+\n@@ -7391,0 +8899,1 @@\n+\n@@ -7396,1 +8905,1 @@\n-        var mh$ = clang_getResultType$constants.HANDLE;\n+        var mh$ = clang_getResultType.HANDLE;\n@@ -7407,1 +8916,1 @@\n-    private static class clang_getNumArgTypes$constants {\n+    private static class clang_getNumArgTypes {\n@@ -7413,3 +8922,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumArgTypes\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumArgTypes\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7420,0 +8929,1 @@\n+\n@@ -7425,1 +8935,1 @@\n-        return clang_getNumArgTypes$constants.DESC;\n+        return clang_getNumArgTypes.DESC;\n@@ -7430,0 +8940,1 @@\n+\n@@ -7435,1 +8946,12 @@\n-        return clang_getNumArgTypes$constants.HANDLE;\n+        return clang_getNumArgTypes.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumArgTypes$address() {\n+        return clang_getNumArgTypes.ADDR;\n@@ -7437,0 +8959,1 @@\n+\n@@ -7438,0 +8961,1 @@\n+\n@@ -7443,1 +8967,1 @@\n-        var mh$ = clang_getNumArgTypes$constants.HANDLE;\n+        var mh$ = clang_getNumArgTypes.HANDLE;\n@@ -7454,1 +8978,1 @@\n-    private static class clang_getArgType$constants {\n+    private static class clang_getArgType {\n@@ -7461,3 +8985,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArgType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArgType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7468,0 +8992,1 @@\n+\n@@ -7473,1 +8998,1 @@\n-        return clang_getArgType$constants.DESC;\n+        return clang_getArgType.DESC;\n@@ -7478,0 +9003,1 @@\n+\n@@ -7483,1 +9009,12 @@\n-        return clang_getArgType$constants.HANDLE;\n+        return clang_getArgType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArgType$address() {\n+        return clang_getArgType.ADDR;\n@@ -7485,0 +9022,1 @@\n+\n@@ -7486,0 +9024,1 @@\n+\n@@ -7491,1 +9030,1 @@\n-        var mh$ = clang_getArgType$constants.HANDLE;\n+        var mh$ = clang_getArgType.HANDLE;\n@@ -7502,1 +9041,1 @@\n-    private static class clang_isFunctionTypeVariadic$constants {\n+    private static class clang_isFunctionTypeVariadic {\n@@ -7508,3 +9047,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isFunctionTypeVariadic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isFunctionTypeVariadic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7515,0 +9054,1 @@\n+\n@@ -7520,1 +9060,1 @@\n-        return clang_isFunctionTypeVariadic$constants.DESC;\n+        return clang_isFunctionTypeVariadic.DESC;\n@@ -7525,0 +9065,1 @@\n+\n@@ -7530,1 +9071,12 @@\n-        return clang_isFunctionTypeVariadic$constants.HANDLE;\n+        return clang_isFunctionTypeVariadic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isFunctionTypeVariadic$address() {\n+        return clang_isFunctionTypeVariadic.ADDR;\n@@ -7532,0 +9084,1 @@\n+\n@@ -7533,0 +9086,1 @@\n+\n@@ -7538,1 +9092,1 @@\n-        var mh$ = clang_isFunctionTypeVariadic$constants.HANDLE;\n+        var mh$ = clang_isFunctionTypeVariadic.HANDLE;\n@@ -7549,1 +9103,1 @@\n-    private static class clang_getCursorResultType$constants {\n+    private static class clang_getCursorResultType {\n@@ -7555,3 +9109,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorResultType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorResultType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7562,0 +9116,1 @@\n+\n@@ -7567,1 +9122,1 @@\n-        return clang_getCursorResultType$constants.DESC;\n+        return clang_getCursorResultType.DESC;\n@@ -7572,0 +9127,1 @@\n+\n@@ -7577,1 +9133,12 @@\n-        return clang_getCursorResultType$constants.HANDLE;\n+        return clang_getCursorResultType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorResultType$address() {\n+        return clang_getCursorResultType.ADDR;\n@@ -7579,0 +9146,1 @@\n+\n@@ -7580,0 +9148,1 @@\n+\n@@ -7585,1 +9154,1 @@\n-        var mh$ = clang_getCursorResultType$constants.HANDLE;\n+        var mh$ = clang_getCursorResultType.HANDLE;\n@@ -7596,1 +9165,1 @@\n-    private static class clang_getElementType$constants {\n+    private static class clang_getElementType {\n@@ -7602,3 +9171,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getElementType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getElementType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7609,0 +9178,1 @@\n+\n@@ -7614,1 +9184,1 @@\n-        return clang_getElementType$constants.DESC;\n+        return clang_getElementType.DESC;\n@@ -7619,0 +9189,1 @@\n+\n@@ -7624,1 +9195,12 @@\n-        return clang_getElementType$constants.HANDLE;\n+        return clang_getElementType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getElementType$address() {\n+        return clang_getElementType.ADDR;\n@@ -7628,0 +9210,1 @@\n+\n@@ -7633,1 +9216,1 @@\n-        var mh$ = clang_getElementType$constants.HANDLE;\n+        var mh$ = clang_getElementType.HANDLE;\n@@ -7644,1 +9227,1 @@\n-    private static class clang_getNumElements$constants {\n+    private static class clang_getNumElements {\n@@ -7650,3 +9233,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getNumElements\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getNumElements\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7657,0 +9240,1 @@\n+\n@@ -7662,1 +9246,1 @@\n-        return clang_getNumElements$constants.DESC;\n+        return clang_getNumElements.DESC;\n@@ -7667,0 +9251,1 @@\n+\n@@ -7672,1 +9257,12 @@\n-        return clang_getNumElements$constants.HANDLE;\n+        return clang_getNumElements.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getNumElements$address() {\n+        return clang_getNumElements.ADDR;\n@@ -7674,0 +9270,1 @@\n+\n@@ -7675,0 +9272,1 @@\n+\n@@ -7680,1 +9278,1 @@\n-        var mh$ = clang_getNumElements$constants.HANDLE;\n+        var mh$ = clang_getNumElements.HANDLE;\n@@ -7691,1 +9289,1 @@\n-    private static class clang_getArrayElementType$constants {\n+    private static class clang_getArrayElementType {\n@@ -7697,3 +9295,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArrayElementType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArrayElementType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7704,0 +9302,1 @@\n+\n@@ -7709,1 +9308,1 @@\n-        return clang_getArrayElementType$constants.DESC;\n+        return clang_getArrayElementType.DESC;\n@@ -7714,0 +9313,1 @@\n+\n@@ -7719,1 +9319,12 @@\n-        return clang_getArrayElementType$constants.HANDLE;\n+        return clang_getArrayElementType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArrayElementType$address() {\n+        return clang_getArrayElementType.ADDR;\n@@ -7721,0 +9332,1 @@\n+\n@@ -7722,0 +9334,1 @@\n+\n@@ -7727,1 +9340,1 @@\n-        var mh$ = clang_getArrayElementType$constants.HANDLE;\n+        var mh$ = clang_getArrayElementType.HANDLE;\n@@ -7738,1 +9351,1 @@\n-    private static class clang_getArraySize$constants {\n+    private static class clang_getArraySize {\n@@ -7744,3 +9357,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getArraySize\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getArraySize\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7751,0 +9364,1 @@\n+\n@@ -7756,1 +9370,1 @@\n-        return clang_getArraySize$constants.DESC;\n+        return clang_getArraySize.DESC;\n@@ -7761,0 +9375,1 @@\n+\n@@ -7766,1 +9381,12 @@\n-        return clang_getArraySize$constants.HANDLE;\n+        return clang_getArraySize.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArraySize$address() {\n+        return clang_getArraySize.ADDR;\n@@ -7768,0 +9394,1 @@\n+\n@@ -7769,0 +9396,1 @@\n+\n@@ -7774,1 +9402,1 @@\n-        var mh$ = clang_getArraySize$constants.HANDLE;\n+        var mh$ = clang_getArraySize.HANDLE;\n@@ -7786,0 +9414,1 @@\n+\n@@ -7795,0 +9424,1 @@\n+\n@@ -7804,0 +9434,1 @@\n+\n@@ -7813,0 +9444,1 @@\n+\n@@ -7822,0 +9454,1 @@\n+\n@@ -7831,0 +9464,1 @@\n+\n@@ -7840,0 +9474,1 @@\n+\n@@ -7849,0 +9484,1 @@\n+\n@@ -7858,0 +9494,1 @@\n+\n@@ -7867,0 +9504,1 @@\n+\n@@ -7875,1 +9513,1 @@\n-    private static class clang_Type_getAlignOf$constants {\n+    private static class clang_Type_getAlignOf {\n@@ -7881,3 +9519,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getAlignOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getAlignOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7888,0 +9526,1 @@\n+\n@@ -7893,1 +9532,1 @@\n-        return clang_Type_getAlignOf$constants.DESC;\n+        return clang_Type_getAlignOf.DESC;\n@@ -7898,0 +9537,1 @@\n+\n@@ -7903,1 +9543,12 @@\n-        return clang_Type_getAlignOf$constants.HANDLE;\n+        return clang_Type_getAlignOf.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getAlignOf$address() {\n+        return clang_Type_getAlignOf.ADDR;\n@@ -7905,0 +9556,1 @@\n+\n@@ -7906,0 +9558,1 @@\n+\n@@ -7911,1 +9564,1 @@\n-        var mh$ = clang_Type_getAlignOf$constants.HANDLE;\n+        var mh$ = clang_Type_getAlignOf.HANDLE;\n@@ -7922,1 +9575,1 @@\n-    private static class clang_Type_getSizeOf$constants {\n+    private static class clang_Type_getSizeOf {\n@@ -7928,3 +9581,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getSizeOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getSizeOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7935,0 +9588,1 @@\n+\n@@ -7940,1 +9594,1 @@\n-        return clang_Type_getSizeOf$constants.DESC;\n+        return clang_Type_getSizeOf.DESC;\n@@ -7945,0 +9599,1 @@\n+\n@@ -7950,1 +9605,12 @@\n-        return clang_Type_getSizeOf$constants.HANDLE;\n+        return clang_Type_getSizeOf.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getSizeOf$address() {\n+        return clang_Type_getSizeOf.ADDR;\n@@ -7952,0 +9618,1 @@\n+\n@@ -7953,0 +9620,1 @@\n+\n@@ -7958,1 +9626,1 @@\n-        var mh$ = clang_Type_getSizeOf$constants.HANDLE;\n+        var mh$ = clang_Type_getSizeOf.HANDLE;\n@@ -7969,1 +9637,1 @@\n-    private static class clang_Type_getOffsetOf$constants {\n+    private static class clang_Type_getOffsetOf {\n@@ -7976,3 +9644,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getOffsetOf\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getOffsetOf\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -7983,0 +9651,1 @@\n+\n@@ -7988,1 +9657,12 @@\n-        return clang_Type_getOffsetOf$constants.DESC;\n+        return clang_Type_getOffsetOf.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getOffsetOf$handle() {\n+        return clang_Type_getOffsetOf.HANDLE;\n@@ -7992,1 +9672,2 @@\n-     * Downcall method handle for:\n+     * Address for:\n+\n@@ -7997,2 +9678,2 @@\n-    public static MethodHandle clang_Type_getOffsetOf$handle() {\n-        return clang_Type_getOffsetOf$constants.HANDLE;\n+    public static MemorySegment clang_Type_getOffsetOf$address() {\n+        return clang_Type_getOffsetOf.ADDR;\n@@ -8000,0 +9681,1 @@\n+\n@@ -8001,0 +9683,1 @@\n+\n@@ -8006,1 +9689,1 @@\n-        var mh$ = clang_Type_getOffsetOf$constants.HANDLE;\n+        var mh$ = clang_Type_getOffsetOf.HANDLE;\n@@ -8017,1 +9700,1 @@\n-    private static class clang_Type_getValueType$constants {\n+    private static class clang_Type_getValueType {\n@@ -8023,3 +9706,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Type_getValueType\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Type_getValueType\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8030,0 +9713,1 @@\n+\n@@ -8035,1 +9719,1 @@\n-        return clang_Type_getValueType$constants.DESC;\n+        return clang_Type_getValueType.DESC;\n@@ -8040,0 +9724,1 @@\n+\n@@ -8045,1 +9730,12 @@\n-        return clang_Type_getValueType$constants.HANDLE;\n+        return clang_Type_getValueType.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getValueType$address() {\n+        return clang_Type_getValueType.ADDR;\n@@ -8047,0 +9743,1 @@\n+\n@@ -8048,0 +9745,1 @@\n+\n@@ -8053,1 +9751,1 @@\n-        var mh$ = clang_Type_getValueType$constants.HANDLE;\n+        var mh$ = clang_Type_getValueType.HANDLE;\n@@ -8064,1 +9762,1 @@\n-    private static class clang_Cursor_isAnonymous$constants {\n+    private static class clang_Cursor_isAnonymous {\n@@ -8070,3 +9768,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isAnonymous\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isAnonymous\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8077,0 +9775,1 @@\n+\n@@ -8082,1 +9781,1 @@\n-        return clang_Cursor_isAnonymous$constants.DESC;\n+        return clang_Cursor_isAnonymous.DESC;\n@@ -8087,0 +9786,1 @@\n+\n@@ -8092,1 +9792,12 @@\n-        return clang_Cursor_isAnonymous$constants.HANDLE;\n+        return clang_Cursor_isAnonymous.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isAnonymous$address() {\n+        return clang_Cursor_isAnonymous.ADDR;\n@@ -8094,0 +9805,1 @@\n+\n@@ -8095,0 +9807,1 @@\n+\n@@ -8100,1 +9813,1 @@\n-        var mh$ = clang_Cursor_isAnonymous$constants.HANDLE;\n+        var mh$ = clang_Cursor_isAnonymous.HANDLE;\n@@ -8111,1 +9824,1 @@\n-    private static class clang_Cursor_isAnonymousRecordDecl$constants {\n+    private static class clang_Cursor_isAnonymousRecordDecl {\n@@ -8117,3 +9830,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isAnonymousRecordDecl\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isAnonymousRecordDecl\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8124,0 +9837,1 @@\n+\n@@ -8129,1 +9843,1 @@\n-        return clang_Cursor_isAnonymousRecordDecl$constants.DESC;\n+        return clang_Cursor_isAnonymousRecordDecl.DESC;\n@@ -8134,0 +9848,1 @@\n+\n@@ -8139,1 +9854,12 @@\n-        return clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+        return clang_Cursor_isAnonymousRecordDecl.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isAnonymousRecordDecl$address() {\n+        return clang_Cursor_isAnonymousRecordDecl.ADDR;\n@@ -8141,0 +9867,1 @@\n+\n@@ -8142,0 +9869,1 @@\n+\n@@ -8147,1 +9875,1 @@\n-        var mh$ = clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+        var mh$ = clang_Cursor_isAnonymousRecordDecl.HANDLE;\n@@ -8158,1 +9886,1 @@\n-    private static class clang_Cursor_isBitField$constants {\n+    private static class clang_Cursor_isBitField {\n@@ -8164,3 +9892,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isBitField\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isBitField\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8171,0 +9899,1 @@\n+\n@@ -8176,1 +9905,1 @@\n-        return clang_Cursor_isBitField$constants.DESC;\n+        return clang_Cursor_isBitField.DESC;\n@@ -8181,0 +9910,1 @@\n+\n@@ -8186,1 +9916,1 @@\n-        return clang_Cursor_isBitField$constants.HANDLE;\n+        return clang_Cursor_isBitField.HANDLE;\n@@ -8188,0 +9918,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isBitField$address() {\n+        return clang_Cursor_isBitField.ADDR;\n+    }\n+\n@@ -8189,0 +9931,1 @@\n+\n@@ -8194,1 +9937,1 @@\n-        var mh$ = clang_Cursor_isBitField$constants.HANDLE;\n+        var mh$ = clang_Cursor_isBitField.HANDLE;\n@@ -8206,0 +9949,1 @@\n+\n@@ -8215,0 +9959,1 @@\n+\n@@ -8224,0 +9969,1 @@\n+\n@@ -8232,1 +9978,1 @@\n-    private static class clang_visitChildren$constants {\n+    private static class clang_visitChildren {\n@@ -8240,3 +9986,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_visitChildren\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_visitChildren\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8247,0 +9993,1 @@\n+\n@@ -8252,1 +9999,1 @@\n-        return clang_visitChildren$constants.DESC;\n+        return clang_visitChildren.DESC;\n@@ -8257,0 +10004,1 @@\n+\n@@ -8262,1 +10010,1 @@\n-        return clang_visitChildren$constants.HANDLE;\n+        return clang_visitChildren.HANDLE;\n@@ -8264,0 +10012,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static MemorySegment clang_visitChildren$address() {\n+        return clang_visitChildren.ADDR;\n+    }\n+\n@@ -8265,0 +10025,1 @@\n+\n@@ -8270,1 +10031,1 @@\n-        var mh$ = clang_visitChildren$constants.HANDLE;\n+        var mh$ = clang_visitChildren.HANDLE;\n@@ -8281,1 +10042,1 @@\n-    private static class clang_getCursorUSR$constants {\n+    private static class clang_getCursorUSR {\n@@ -8287,3 +10048,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorUSR\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorUSR\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8294,0 +10055,1 @@\n+\n@@ -8299,1 +10061,1 @@\n-        return clang_getCursorUSR$constants.DESC;\n+        return clang_getCursorUSR.DESC;\n@@ -8304,0 +10066,1 @@\n+\n@@ -8309,1 +10072,12 @@\n-        return clang_getCursorUSR$constants.HANDLE;\n+        return clang_getCursorUSR.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorUSR$address() {\n+        return clang_getCursorUSR.ADDR;\n@@ -8311,0 +10085,1 @@\n+\n@@ -8312,0 +10087,1 @@\n+\n@@ -8317,1 +10093,1 @@\n-        var mh$ = clang_getCursorUSR$constants.HANDLE;\n+        var mh$ = clang_getCursorUSR.HANDLE;\n@@ -8328,1 +10104,1 @@\n-    private static class clang_getCursorSpelling$constants {\n+    private static class clang_getCursorSpelling {\n@@ -8334,3 +10110,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8341,0 +10117,1 @@\n+\n@@ -8346,1 +10123,1 @@\n-        return clang_getCursorSpelling$constants.DESC;\n+        return clang_getCursorSpelling.DESC;\n@@ -8351,0 +10128,1 @@\n+\n@@ -8356,1 +10134,12 @@\n-        return clang_getCursorSpelling$constants.HANDLE;\n+        return clang_getCursorSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorSpelling$address() {\n+        return clang_getCursorSpelling.ADDR;\n@@ -8358,0 +10147,1 @@\n+\n@@ -8359,0 +10149,1 @@\n+\n@@ -8364,1 +10155,1 @@\n-        var mh$ = clang_getCursorSpelling$constants.HANDLE;\n+        var mh$ = clang_getCursorSpelling.HANDLE;\n@@ -8376,0 +10167,1 @@\n+\n@@ -8385,0 +10177,1 @@\n+\n@@ -8394,0 +10187,1 @@\n+\n@@ -8403,0 +10197,1 @@\n+\n@@ -8412,0 +10207,1 @@\n+\n@@ -8421,0 +10217,1 @@\n+\n@@ -8430,0 +10227,1 @@\n+\n@@ -8439,0 +10237,1 @@\n+\n@@ -8448,0 +10247,1 @@\n+\n@@ -8457,0 +10257,1 @@\n+\n@@ -8466,0 +10267,1 @@\n+\n@@ -8475,0 +10277,1 @@\n+\n@@ -8484,0 +10287,1 @@\n+\n@@ -8493,0 +10297,1 @@\n+\n@@ -8502,0 +10307,1 @@\n+\n@@ -8511,0 +10317,1 @@\n+\n@@ -8520,0 +10327,1 @@\n+\n@@ -8529,0 +10337,1 @@\n+\n@@ -8538,0 +10347,1 @@\n+\n@@ -8547,0 +10357,1 @@\n+\n@@ -8556,0 +10367,1 @@\n+\n@@ -8565,0 +10377,1 @@\n+\n@@ -8574,0 +10387,1 @@\n+\n@@ -8583,0 +10397,1 @@\n+\n@@ -8592,0 +10407,1 @@\n+\n@@ -8601,0 +10417,1 @@\n+\n@@ -8610,0 +10427,1 @@\n+\n@@ -8618,1 +10436,1 @@\n-    private static class clang_PrintingPolicy_getProperty$constants {\n+    private static class clang_PrintingPolicy_getProperty {\n@@ -8625,3 +10443,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_getProperty\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_getProperty\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8632,0 +10450,1 @@\n+\n@@ -8637,1 +10456,1 @@\n-        return clang_PrintingPolicy_getProperty$constants.DESC;\n+        return clang_PrintingPolicy_getProperty.DESC;\n@@ -8642,0 +10461,1 @@\n+\n@@ -8647,1 +10467,12 @@\n-        return clang_PrintingPolicy_getProperty$constants.HANDLE;\n+        return clang_PrintingPolicy_getProperty.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_getProperty$address() {\n+        return clang_PrintingPolicy_getProperty.ADDR;\n@@ -8649,0 +10480,1 @@\n+\n@@ -8650,0 +10482,1 @@\n+\n@@ -8655,1 +10488,1 @@\n-        var mh$ = clang_PrintingPolicy_getProperty$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_getProperty.HANDLE;\n@@ -8666,1 +10499,1 @@\n-    private static class clang_PrintingPolicy_setProperty$constants {\n+    private static class clang_PrintingPolicy_setProperty {\n@@ -8673,3 +10506,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_setProperty\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_setProperty\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8680,0 +10513,1 @@\n+\n@@ -8685,1 +10519,1 @@\n-        return clang_PrintingPolicy_setProperty$constants.DESC;\n+        return clang_PrintingPolicy_setProperty.DESC;\n@@ -8690,0 +10524,1 @@\n+\n@@ -8695,1 +10530,12 @@\n-        return clang_PrintingPolicy_setProperty$constants.HANDLE;\n+        return clang_PrintingPolicy_setProperty.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_setProperty$address() {\n+        return clang_PrintingPolicy_setProperty.ADDR;\n@@ -8697,0 +10543,1 @@\n+\n@@ -8698,0 +10545,1 @@\n+\n@@ -8703,1 +10551,1 @@\n-        var mh$ = clang_PrintingPolicy_setProperty$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_setProperty.HANDLE;\n@@ -8714,1 +10562,1 @@\n-    private static class clang_getCursorPrintingPolicy$constants {\n+    private static class clang_getCursorPrintingPolicy {\n@@ -8720,3 +10568,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorPrintingPolicy\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorPrintingPolicy\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8727,0 +10575,1 @@\n+\n@@ -8732,1 +10581,1 @@\n-        return clang_getCursorPrintingPolicy$constants.DESC;\n+        return clang_getCursorPrintingPolicy.DESC;\n@@ -8737,0 +10586,1 @@\n+\n@@ -8742,1 +10592,12 @@\n-        return clang_getCursorPrintingPolicy$constants.HANDLE;\n+        return clang_getCursorPrintingPolicy.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorPrintingPolicy$address() {\n+        return clang_getCursorPrintingPolicy.ADDR;\n@@ -8744,0 +10605,1 @@\n+\n@@ -8745,0 +10607,1 @@\n+\n@@ -8750,1 +10613,1 @@\n-        var mh$ = clang_getCursorPrintingPolicy$constants.HANDLE;\n+        var mh$ = clang_getCursorPrintingPolicy.HANDLE;\n@@ -8761,1 +10624,1 @@\n-    private static class clang_PrintingPolicy_dispose$constants {\n+    private static class clang_PrintingPolicy_dispose {\n@@ -8766,3 +10629,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_PrintingPolicy_dispose\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_PrintingPolicy_dispose\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8773,0 +10636,1 @@\n+\n@@ -8778,1 +10642,1 @@\n-        return clang_PrintingPolicy_dispose$constants.DESC;\n+        return clang_PrintingPolicy_dispose.DESC;\n@@ -8783,0 +10647,1 @@\n+\n@@ -8788,1 +10653,12 @@\n-        return clang_PrintingPolicy_dispose$constants.HANDLE;\n+        return clang_PrintingPolicy_dispose.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MemorySegment clang_PrintingPolicy_dispose$address() {\n+        return clang_PrintingPolicy_dispose.ADDR;\n@@ -8790,0 +10666,1 @@\n+\n@@ -8791,0 +10668,1 @@\n+\n@@ -8796,1 +10674,1 @@\n-        var mh$ = clang_PrintingPolicy_dispose$constants.HANDLE;\n+        var mh$ = clang_PrintingPolicy_dispose.HANDLE;\n@@ -8807,1 +10685,1 @@\n-    private static class clang_getCursorPrettyPrinted$constants {\n+    private static class clang_getCursorPrettyPrinted {\n@@ -8814,3 +10692,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorPrettyPrinted\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorPrettyPrinted\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8821,0 +10699,1 @@\n+\n@@ -8826,1 +10705,1 @@\n-        return clang_getCursorPrettyPrinted$constants.DESC;\n+        return clang_getCursorPrettyPrinted.DESC;\n@@ -8831,0 +10710,1 @@\n+\n@@ -8836,1 +10716,12 @@\n-        return clang_getCursorPrettyPrinted$constants.HANDLE;\n+        return clang_getCursorPrettyPrinted.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorPrettyPrinted$address() {\n+        return clang_getCursorPrettyPrinted.ADDR;\n@@ -8838,0 +10729,1 @@\n+\n@@ -8839,0 +10731,1 @@\n+\n@@ -8844,1 +10737,1 @@\n-        var mh$ = clang_getCursorPrettyPrinted$constants.HANDLE;\n+        var mh$ = clang_getCursorPrettyPrinted.HANDLE;\n@@ -8855,1 +10748,1 @@\n-    private static class clang_getCursorDisplayName$constants {\n+    private static class clang_getCursorDisplayName {\n@@ -8861,3 +10754,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorDisplayName\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorDisplayName\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8868,0 +10761,1 @@\n+\n@@ -8873,1 +10767,1 @@\n-        return clang_getCursorDisplayName$constants.DESC;\n+        return clang_getCursorDisplayName.DESC;\n@@ -8878,0 +10772,1 @@\n+\n@@ -8883,1 +10778,12 @@\n-        return clang_getCursorDisplayName$constants.HANDLE;\n+        return clang_getCursorDisplayName.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorDisplayName$address() {\n+        return clang_getCursorDisplayName.ADDR;\n@@ -8885,0 +10791,1 @@\n+\n@@ -8886,0 +10793,1 @@\n+\n@@ -8891,1 +10799,1 @@\n-        var mh$ = clang_getCursorDisplayName$constants.HANDLE;\n+        var mh$ = clang_getCursorDisplayName.HANDLE;\n@@ -8902,1 +10810,1 @@\n-    private static class clang_getCursorReferenced$constants {\n+    private static class clang_getCursorReferenced {\n@@ -8908,3 +10816,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorReferenced\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorReferenced\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8915,0 +10823,1 @@\n+\n@@ -8920,1 +10829,1 @@\n-        return clang_getCursorReferenced$constants.DESC;\n+        return clang_getCursorReferenced.DESC;\n@@ -8925,0 +10834,1 @@\n+\n@@ -8930,1 +10840,1 @@\n-        return clang_getCursorReferenced$constants.HANDLE;\n+        return clang_getCursorReferenced.HANDLE;\n@@ -8932,0 +10842,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorReferenced$address() {\n+        return clang_getCursorReferenced.ADDR;\n+    }\n+\n@@ -8933,0 +10855,1 @@\n+\n@@ -8938,1 +10861,1 @@\n-        var mh$ = clang_getCursorReferenced$constants.HANDLE;\n+        var mh$ = clang_getCursorReferenced.HANDLE;\n@@ -8949,1 +10872,1 @@\n-    private static class clang_getCursorDefinition$constants {\n+    private static class clang_getCursorDefinition {\n@@ -8955,3 +10878,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorDefinition\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorDefinition\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -8962,0 +10885,1 @@\n+\n@@ -8967,1 +10891,1 @@\n-        return clang_getCursorDefinition$constants.DESC;\n+        return clang_getCursorDefinition.DESC;\n@@ -8972,0 +10896,1 @@\n+\n@@ -8977,1 +10902,12 @@\n-        return clang_getCursorDefinition$constants.HANDLE;\n+        return clang_getCursorDefinition.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorDefinition$address() {\n+        return clang_getCursorDefinition.ADDR;\n@@ -8979,0 +10915,1 @@\n+\n@@ -8980,0 +10917,1 @@\n+\n@@ -8985,1 +10923,1 @@\n-        var mh$ = clang_getCursorDefinition$constants.HANDLE;\n+        var mh$ = clang_getCursorDefinition.HANDLE;\n@@ -8996,1 +10934,1 @@\n-    private static class clang_isCursorDefinition$constants {\n+    private static class clang_isCursorDefinition {\n@@ -9002,3 +10940,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_isCursorDefinition\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_isCursorDefinition\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9009,0 +10947,1 @@\n+\n@@ -9014,1 +10953,1 @@\n-        return clang_isCursorDefinition$constants.DESC;\n+        return clang_isCursorDefinition.DESC;\n@@ -9019,0 +10958,1 @@\n+\n@@ -9024,1 +10964,12 @@\n-        return clang_isCursorDefinition$constants.HANDLE;\n+        return clang_isCursorDefinition.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_isCursorDefinition$address() {\n+        return clang_isCursorDefinition.ADDR;\n@@ -9026,0 +10977,1 @@\n+\n@@ -9027,0 +10979,1 @@\n+\n@@ -9032,1 +10985,1 @@\n-        var mh$ = clang_isCursorDefinition$constants.HANDLE;\n+        var mh$ = clang_isCursorDefinition.HANDLE;\n@@ -9043,1 +10996,1 @@\n-    private static class clang_Cursor_isVariadic$constants {\n+    private static class clang_Cursor_isVariadic {\n@@ -9049,3 +11002,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_isVariadic\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_isVariadic\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9056,0 +11009,1 @@\n+\n@@ -9061,1 +11015,1 @@\n-        return clang_Cursor_isVariadic$constants.DESC;\n+        return clang_Cursor_isVariadic.DESC;\n@@ -9066,0 +11020,1 @@\n+\n@@ -9071,1 +11026,12 @@\n-        return clang_Cursor_isVariadic$constants.HANDLE;\n+        return clang_Cursor_isVariadic.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_isVariadic$address() {\n+        return clang_Cursor_isVariadic.ADDR;\n@@ -9073,0 +11039,1 @@\n+\n@@ -9074,0 +11041,1 @@\n+\n@@ -9079,1 +11047,1 @@\n-        var mh$ = clang_Cursor_isVariadic$constants.HANDLE;\n+        var mh$ = clang_Cursor_isVariadic.HANDLE;\n@@ -9090,1 +11058,1 @@\n-    private static class clang_Cursor_getMangling$constants {\n+    private static class clang_Cursor_getMangling {\n@@ -9096,3 +11064,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_getMangling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_getMangling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9103,0 +11071,1 @@\n+\n@@ -9108,1 +11077,1 @@\n-        return clang_Cursor_getMangling$constants.DESC;\n+        return clang_Cursor_getMangling.DESC;\n@@ -9113,0 +11082,1 @@\n+\n@@ -9118,1 +11088,12 @@\n-        return clang_Cursor_getMangling$constants.HANDLE;\n+        return clang_Cursor_getMangling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getMangling$address() {\n+        return clang_Cursor_getMangling.ADDR;\n@@ -9120,0 +11101,1 @@\n+\n@@ -9121,0 +11103,1 @@\n+\n@@ -9126,1 +11109,1 @@\n-        var mh$ = clang_Cursor_getMangling$constants.HANDLE;\n+        var mh$ = clang_Cursor_getMangling.HANDLE;\n@@ -9138,0 +11121,1 @@\n+\n@@ -9147,0 +11131,1 @@\n+\n@@ -9156,0 +11141,1 @@\n+\n@@ -9165,0 +11151,1 @@\n+\n@@ -9174,0 +11161,1 @@\n+\n@@ -9182,1 +11170,1 @@\n-    private static class clang_getTokenKind$constants {\n+    private static class clang_getTokenKind {\n@@ -9188,3 +11176,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9195,0 +11183,1 @@\n+\n@@ -9200,1 +11189,1 @@\n-        return clang_getTokenKind$constants.DESC;\n+        return clang_getTokenKind.DESC;\n@@ -9205,0 +11194,1 @@\n+\n@@ -9210,1 +11200,12 @@\n-        return clang_getTokenKind$constants.HANDLE;\n+        return clang_getTokenKind.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenKind$address() {\n+        return clang_getTokenKind.ADDR;\n@@ -9212,0 +11213,1 @@\n+\n@@ -9213,0 +11215,1 @@\n+\n@@ -9218,1 +11221,1 @@\n-        var mh$ = clang_getTokenKind$constants.HANDLE;\n+        var mh$ = clang_getTokenKind.HANDLE;\n@@ -9229,1 +11232,1 @@\n-    private static class clang_getTokenSpelling$constants {\n+    private static class clang_getTokenSpelling {\n@@ -9236,3 +11239,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9243,0 +11246,1 @@\n+\n@@ -9248,1 +11252,1 @@\n-        return clang_getTokenSpelling$constants.DESC;\n+        return clang_getTokenSpelling.DESC;\n@@ -9253,0 +11257,1 @@\n+\n@@ -9258,1 +11263,12 @@\n-        return clang_getTokenSpelling$constants.HANDLE;\n+        return clang_getTokenSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenSpelling$address() {\n+        return clang_getTokenSpelling.ADDR;\n@@ -9260,0 +11276,1 @@\n+\n@@ -9261,0 +11278,1 @@\n+\n@@ -9266,1 +11284,1 @@\n-        var mh$ = clang_getTokenSpelling$constants.HANDLE;\n+        var mh$ = clang_getTokenSpelling.HANDLE;\n@@ -9277,1 +11295,1 @@\n-    private static class clang_getTokenLocation$constants {\n+    private static class clang_getTokenLocation {\n@@ -9284,3 +11302,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenLocation\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenLocation\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9291,0 +11309,1 @@\n+\n@@ -9296,1 +11315,1 @@\n-        return clang_getTokenLocation$constants.DESC;\n+        return clang_getTokenLocation.DESC;\n@@ -9301,0 +11320,1 @@\n+\n@@ -9306,1 +11326,1 @@\n-        return clang_getTokenLocation$constants.HANDLE;\n+        return clang_getTokenLocation.HANDLE;\n@@ -9308,0 +11328,12 @@\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenLocation$address() {\n+        return clang_getTokenLocation.ADDR;\n+    }\n+\n@@ -9309,0 +11341,1 @@\n+\n@@ -9314,1 +11347,1 @@\n-        var mh$ = clang_getTokenLocation$constants.HANDLE;\n+        var mh$ = clang_getTokenLocation.HANDLE;\n@@ -9325,1 +11358,1 @@\n-    private static class clang_getTokenExtent$constants {\n+    private static class clang_getTokenExtent {\n@@ -9332,3 +11365,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getTokenExtent\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getTokenExtent\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9339,0 +11372,1 @@\n+\n@@ -9344,1 +11378,1 @@\n-        return clang_getTokenExtent$constants.DESC;\n+        return clang_getTokenExtent.DESC;\n@@ -9349,0 +11383,1 @@\n+\n@@ -9354,1 +11389,12 @@\n-        return clang_getTokenExtent$constants.HANDLE;\n+        return clang_getTokenExtent.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTokenExtent$address() {\n+        return clang_getTokenExtent.ADDR;\n@@ -9356,0 +11402,1 @@\n+\n@@ -9357,0 +11404,1 @@\n+\n@@ -9362,1 +11410,1 @@\n-        var mh$ = clang_getTokenExtent$constants.HANDLE;\n+        var mh$ = clang_getTokenExtent.HANDLE;\n@@ -9373,1 +11421,1 @@\n-    private static class clang_tokenize$constants {\n+    private static class clang_tokenize {\n@@ -9381,3 +11429,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_tokenize\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_tokenize\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9388,0 +11436,1 @@\n+\n@@ -9393,1 +11442,1 @@\n-        return clang_tokenize$constants.DESC;\n+        return clang_tokenize.DESC;\n@@ -9398,0 +11447,1 @@\n+\n@@ -9403,1 +11453,12 @@\n-        return clang_tokenize$constants.HANDLE;\n+        return clang_tokenize.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n+    public static MemorySegment clang_tokenize$address() {\n+        return clang_tokenize.ADDR;\n@@ -9405,0 +11466,1 @@\n+\n@@ -9406,0 +11468,1 @@\n+\n@@ -9411,1 +11474,1 @@\n-        var mh$ = clang_tokenize$constants.HANDLE;\n+        var mh$ = clang_tokenize.HANDLE;\n@@ -9422,1 +11485,1 @@\n-    private static class clang_disposeTokens$constants {\n+    private static class clang_disposeTokens {\n@@ -9429,3 +11492,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_disposeTokens\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_disposeTokens\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9436,0 +11499,1 @@\n+\n@@ -9441,1 +11505,1 @@\n-        return clang_disposeTokens$constants.DESC;\n+        return clang_disposeTokens.DESC;\n@@ -9446,0 +11510,1 @@\n+\n@@ -9451,1 +11516,12 @@\n-        return clang_disposeTokens$constants.HANDLE;\n+        return clang_disposeTokens.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n+    public static MemorySegment clang_disposeTokens$address() {\n+        return clang_disposeTokens.ADDR;\n@@ -9453,0 +11529,1 @@\n+\n@@ -9454,0 +11531,1 @@\n+\n@@ -9459,1 +11537,1 @@\n-        var mh$ = clang_disposeTokens$constants.HANDLE;\n+        var mh$ = clang_disposeTokens.HANDLE;\n@@ -9470,1 +11548,1 @@\n-    private static class clang_getCursorKindSpelling$constants {\n+    private static class clang_getCursorKindSpelling {\n@@ -9476,3 +11554,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getCursorKindSpelling\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getCursorKindSpelling\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9483,0 +11561,1 @@\n+\n@@ -9488,1 +11567,1 @@\n-        return clang_getCursorKindSpelling$constants.DESC;\n+        return clang_getCursorKindSpelling.DESC;\n@@ -9493,0 +11572,1 @@\n+\n@@ -9498,1 +11578,12 @@\n-        return clang_getCursorKindSpelling$constants.HANDLE;\n+        return clang_getCursorKindSpelling.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorKindSpelling$address() {\n+        return clang_getCursorKindSpelling.ADDR;\n@@ -9500,0 +11591,1 @@\n+\n@@ -9501,0 +11593,1 @@\n+\n@@ -9506,1 +11599,1 @@\n-        var mh$ = clang_getCursorKindSpelling$constants.HANDLE;\n+        var mh$ = clang_getCursorKindSpelling.HANDLE;\n@@ -9517,1 +11610,1 @@\n-    private static class clang_getClangVersion$constants {\n+    private static class clang_getClangVersion {\n@@ -9521,3 +11614,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_getClangVersion\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_getClangVersion\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9528,0 +11621,1 @@\n+\n@@ -9533,1 +11627,1 @@\n-        return clang_getClangVersion$constants.DESC;\n+        return clang_getClangVersion.DESC;\n@@ -9538,0 +11632,1 @@\n+\n@@ -9543,1 +11638,12 @@\n-        return clang_getClangVersion$constants.HANDLE;\n+        return clang_getClangVersion.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n+     * }\n+     *\/\n+    public static MemorySegment clang_getClangVersion$address() {\n+        return clang_getClangVersion.ADDR;\n@@ -9545,0 +11651,1 @@\n+\n@@ -9546,0 +11653,1 @@\n+\n@@ -9551,1 +11659,1 @@\n-        var mh$ = clang_getClangVersion$constants.HANDLE;\n+        var mh$ = clang_getClangVersion.HANDLE;\n@@ -9562,1 +11670,1 @@\n-    private static class clang_toggleCrashRecovery$constants {\n+    private static class clang_toggleCrashRecovery {\n@@ -9567,3 +11675,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_toggleCrashRecovery\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_toggleCrashRecovery\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9574,0 +11682,1 @@\n+\n@@ -9579,1 +11688,1 @@\n-        return clang_toggleCrashRecovery$constants.DESC;\n+        return clang_toggleCrashRecovery.DESC;\n@@ -9584,0 +11693,1 @@\n+\n@@ -9589,1 +11699,12 @@\n-        return clang_toggleCrashRecovery$constants.HANDLE;\n+        return clang_toggleCrashRecovery.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n+     * }\n+     *\/\n+    public static MemorySegment clang_toggleCrashRecovery$address() {\n+        return clang_toggleCrashRecovery.ADDR;\n@@ -9591,0 +11712,1 @@\n+\n@@ -9592,0 +11714,1 @@\n+\n@@ -9597,1 +11720,1 @@\n-        var mh$ = clang_toggleCrashRecovery$constants.HANDLE;\n+        var mh$ = clang_toggleCrashRecovery.HANDLE;\n@@ -9608,1 +11731,1 @@\n-    private static class clang_Cursor_Evaluate$constants {\n+    private static class clang_Cursor_Evaluate {\n@@ -9614,3 +11737,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_Cursor_Evaluate\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_Cursor_Evaluate\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9621,0 +11744,1 @@\n+\n@@ -9626,1 +11750,1 @@\n-        return clang_Cursor_Evaluate$constants.DESC;\n+        return clang_Cursor_Evaluate.DESC;\n@@ -9631,0 +11755,1 @@\n+\n@@ -9636,1 +11761,12 @@\n-        return clang_Cursor_Evaluate$constants.HANDLE;\n+        return clang_Cursor_Evaluate.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_Evaluate$address() {\n+        return clang_Cursor_Evaluate.ADDR;\n@@ -9638,0 +11774,1 @@\n+\n@@ -9639,0 +11776,1 @@\n+\n@@ -9644,1 +11782,1 @@\n-        var mh$ = clang_Cursor_Evaluate$constants.HANDLE;\n+        var mh$ = clang_Cursor_Evaluate.HANDLE;\n@@ -9655,1 +11793,1 @@\n-    private static class clang_EvalResult_getKind$constants {\n+    private static class clang_EvalResult_getKind {\n@@ -9661,3 +11799,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getKind\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getKind\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9668,0 +11806,1 @@\n+\n@@ -9673,1 +11812,1 @@\n-        return clang_EvalResult_getKind$constants.DESC;\n+        return clang_EvalResult_getKind.DESC;\n@@ -9678,0 +11817,1 @@\n+\n@@ -9683,1 +11823,12 @@\n-        return clang_EvalResult_getKind$constants.HANDLE;\n+        return clang_EvalResult_getKind.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getKind$address() {\n+        return clang_EvalResult_getKind.ADDR;\n@@ -9685,0 +11836,1 @@\n+\n@@ -9686,0 +11838,1 @@\n+\n@@ -9691,1 +11844,1 @@\n-        var mh$ = clang_EvalResult_getKind$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getKind.HANDLE;\n@@ -9702,1 +11855,1 @@\n-    private static class clang_EvalResult_getAsInt$constants {\n+    private static class clang_EvalResult_getAsInt {\n@@ -9708,3 +11861,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsInt\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsInt\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9715,0 +11868,1 @@\n+\n@@ -9720,1 +11874,1 @@\n-        return clang_EvalResult_getAsInt$constants.DESC;\n+        return clang_EvalResult_getAsInt.DESC;\n@@ -9725,0 +11879,1 @@\n+\n@@ -9730,1 +11885,12 @@\n-        return clang_EvalResult_getAsInt$constants.HANDLE;\n+        return clang_EvalResult_getAsInt.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsInt$address() {\n+        return clang_EvalResult_getAsInt.ADDR;\n@@ -9732,0 +11898,1 @@\n+\n@@ -9733,0 +11900,1 @@\n+\n@@ -9738,1 +11906,1 @@\n-        var mh$ = clang_EvalResult_getAsInt$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsInt.HANDLE;\n@@ -9749,1 +11917,1 @@\n-    private static class clang_EvalResult_getAsLongLong$constants {\n+    private static class clang_EvalResult_getAsLongLong {\n@@ -9755,3 +11923,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsLongLong\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsLongLong\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9762,0 +11930,1 @@\n+\n@@ -9767,1 +11936,1 @@\n-        return clang_EvalResult_getAsLongLong$constants.DESC;\n+        return clang_EvalResult_getAsLongLong.DESC;\n@@ -9772,0 +11941,1 @@\n+\n@@ -9777,1 +11947,12 @@\n-        return clang_EvalResult_getAsLongLong$constants.HANDLE;\n+        return clang_EvalResult_getAsLongLong.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsLongLong$address() {\n+        return clang_EvalResult_getAsLongLong.ADDR;\n@@ -9779,0 +11960,1 @@\n+\n@@ -9780,0 +11962,1 @@\n+\n@@ -9785,1 +11968,1 @@\n-        var mh$ = clang_EvalResult_getAsLongLong$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsLongLong.HANDLE;\n@@ -9796,1 +11979,1 @@\n-    private static class clang_EvalResult_isUnsignedInt$constants {\n+    private static class clang_EvalResult_isUnsignedInt {\n@@ -9802,3 +11985,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_isUnsignedInt\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_isUnsignedInt\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9809,0 +11992,1 @@\n+\n@@ -9814,1 +11998,1 @@\n-        return clang_EvalResult_isUnsignedInt$constants.DESC;\n+        return clang_EvalResult_isUnsignedInt.DESC;\n@@ -9819,0 +12003,1 @@\n+\n@@ -9824,1 +12009,12 @@\n-        return clang_EvalResult_isUnsignedInt$constants.HANDLE;\n+        return clang_EvalResult_isUnsignedInt.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_isUnsignedInt$address() {\n+        return clang_EvalResult_isUnsignedInt.ADDR;\n@@ -9826,0 +12022,1 @@\n+\n@@ -9827,0 +12024,1 @@\n+\n@@ -9832,1 +12030,1 @@\n-        var mh$ = clang_EvalResult_isUnsignedInt$constants.HANDLE;\n+        var mh$ = clang_EvalResult_isUnsignedInt.HANDLE;\n@@ -9843,1 +12041,1 @@\n-    private static class clang_EvalResult_getAsUnsigned$constants {\n+    private static class clang_EvalResult_getAsUnsigned {\n@@ -9849,3 +12047,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsUnsigned\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsUnsigned\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9856,0 +12054,1 @@\n+\n@@ -9861,1 +12060,1 @@\n-        return clang_EvalResult_getAsUnsigned$constants.DESC;\n+        return clang_EvalResult_getAsUnsigned.DESC;\n@@ -9866,0 +12065,1 @@\n+\n@@ -9871,1 +12071,12 @@\n-        return clang_EvalResult_getAsUnsigned$constants.HANDLE;\n+        return clang_EvalResult_getAsUnsigned.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsUnsigned$address() {\n+        return clang_EvalResult_getAsUnsigned.ADDR;\n@@ -9873,0 +12084,1 @@\n+\n@@ -9874,0 +12086,1 @@\n+\n@@ -9879,1 +12092,1 @@\n-        var mh$ = clang_EvalResult_getAsUnsigned$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsUnsigned.HANDLE;\n@@ -9890,1 +12103,1 @@\n-    private static class clang_EvalResult_getAsDouble$constants {\n+    private static class clang_EvalResult_getAsDouble {\n@@ -9896,3 +12109,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsDouble\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsDouble\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9903,0 +12116,1 @@\n+\n@@ -9908,1 +12122,1 @@\n-        return clang_EvalResult_getAsDouble$constants.DESC;\n+        return clang_EvalResult_getAsDouble.DESC;\n@@ -9913,0 +12127,1 @@\n+\n@@ -9918,1 +12133,12 @@\n-        return clang_EvalResult_getAsDouble$constants.HANDLE;\n+        return clang_EvalResult_getAsDouble.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsDouble$address() {\n+        return clang_EvalResult_getAsDouble.ADDR;\n@@ -9920,0 +12146,1 @@\n+\n@@ -9921,0 +12148,1 @@\n+\n@@ -9926,1 +12154,1 @@\n-        var mh$ = clang_EvalResult_getAsDouble$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsDouble.HANDLE;\n@@ -9937,1 +12165,1 @@\n-    private static class clang_EvalResult_getAsStr$constants {\n+    private static class clang_EvalResult_getAsStr {\n@@ -9943,3 +12171,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_getAsStr\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_getAsStr\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9950,0 +12178,1 @@\n+\n@@ -9955,1 +12184,1 @@\n-        return clang_EvalResult_getAsStr$constants.DESC;\n+        return clang_EvalResult_getAsStr.DESC;\n@@ -9960,0 +12189,1 @@\n+\n@@ -9965,1 +12195,12 @@\n-        return clang_EvalResult_getAsStr$constants.HANDLE;\n+        return clang_EvalResult_getAsStr.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_getAsStr$address() {\n+        return clang_EvalResult_getAsStr.ADDR;\n@@ -9967,0 +12208,1 @@\n+\n@@ -9968,0 +12210,1 @@\n+\n@@ -9973,1 +12216,1 @@\n-        var mh$ = clang_EvalResult_getAsStr$constants.HANDLE;\n+        var mh$ = clang_EvalResult_getAsStr.HANDLE;\n@@ -9984,1 +12227,1 @@\n-    private static class clang_EvalResult_dispose$constants {\n+    private static class clang_EvalResult_dispose {\n@@ -9989,3 +12232,3 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                    Index_h.findOrThrow(\"clang_EvalResult_dispose\"),\n-                    DESC);\n+        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_EvalResult_dispose\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -9996,0 +12239,1 @@\n+\n@@ -10001,1 +12245,1 @@\n-        return clang_EvalResult_dispose$constants.DESC;\n+        return clang_EvalResult_dispose.DESC;\n@@ -10006,0 +12250,1 @@\n+\n@@ -10011,1 +12256,12 @@\n-        return clang_EvalResult_dispose$constants.HANDLE;\n+        return clang_EvalResult_dispose.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MemorySegment clang_EvalResult_dispose$address() {\n+        return clang_EvalResult_dispose.ADDR;\n@@ -10013,0 +12269,1 @@\n+\n@@ -10014,0 +12271,1 @@\n+\n@@ -10019,1 +12277,1 @@\n-        var mh$ = clang_EvalResult_dispose$constants.HANDLE;\n+        var mh$ = clang_EvalResult_dispose.HANDLE;\n@@ -10031,0 +12289,1 @@\n+\n@@ -10040,0 +12299,1 @@\n+\n@@ -10049,0 +12309,1 @@\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":3097,"deletions":836,"binary":false,"changes":3933,"status":"modified"},{"patch":"@@ -53,0 +53,44 @@\n+    private Declaration.Scoped collectDeclarations(TranslationUnit tu, MacroParserImpl macroParser) {\n+        List<Declaration> decls = new ArrayList<>();\n+        Cursor tuCursor = tu.getCursor();\n+        tuCursor.forEach(c -> {\n+            SourceLocation loc = c.getSourceLocation();\n+            if (loc == null) {\n+                return;\n+            }\n+\n+            SourceLocation.Location src = loc.getFileLocation();\n+            if (src == null) {\n+                return;\n+            }\n+\n+            if (c.isDeclaration()) {\n+                if (c.kind() == CursorKind.UnexposedDecl ||\n+                        c.kind() == CursorKind.Namespace) {\n+                    c.forEach(t -> {\n+                        Declaration declaration = treeMaker.createTree(t);\n+                        if (declaration != null) {\n+                            decls.add(declaration);\n+                        }\n+                    });\n+                } else {\n+                    Declaration decl = treeMaker.createTree(c);\n+                    if (decl != null) {\n+                        decls.add(decl);\n+                    }\n+                }\n+            } else if (isMacro(c) && src.path() != null) {\n+                SourceRange range = c.getExtent();\n+                String[] tokens = c.getTranslationUnit().tokens(range);\n+                Optional<Declaration.Constant> constant = macroParser.parseConstant(c, c.spelling(), tokens);\n+                if (constant.isPresent()) {\n+                    decls.add(constant.get());\n+                }\n+            }\n+        });\n+\n+        decls.addAll(macroParser.macroTable.reparseConstants());\n+        Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);\n+        return rv;\n+    }\n+\n@@ -63,0 +107,3 @@\n+            return collectDeclarations(tu, macroParser);\n+        }\n+    }\n@@ -64,35 +111,6 @@\n-            List<Declaration> decls = new ArrayList<>();\n-            Cursor tuCursor = tu.getCursor();\n-            tuCursor.forEach(c -> {\n-                SourceLocation loc = c.getSourceLocation();\n-                if (loc == null) {\n-                    return;\n-                }\n-\n-                SourceLocation.Location src = loc.getFileLocation();\n-                if (src == null) {\n-                    return;\n-                }\n-\n-\n-                if (c.isDeclaration()) {\n-                    if (c.kind() == CursorKind.UnexposedDecl ||\n-                            c.kind() == CursorKind.Namespace) {\n-                        c.forEach(t -> {\n-                            Declaration declaration = treeMaker.createTree(t);\n-                            if (declaration != null) {\n-                                decls.add(declaration);\n-                            }\n-                        });\n-                    } else {\n-                        Declaration decl = treeMaker.createTree(c);\n-                        if (decl != null) {\n-                            decls.add(decl);\n-                        }\n-                    }\n-                } else if (isMacro(c) && src.path() != null) {\n-                    SourceRange range = c.getExtent();\n-                    String[] tokens = c.getTranslationUnit().tokens(range);\n-                    Optional<Declaration.Constant> constant = macroParser.parseConstant(c, c.spelling(), tokens);\n-                    if (constant.isPresent()) {\n-                        decls.add(constant.get());\n+    public Declaration.Scoped parse(String name, String content, Collection<String> args) {\n+        try (Index index = LibClang.createIndex(false) ;\n+             TranslationUnit tu = index.parse(name, content,\n+                d -> {\n+                    if (d.severity() > Diagnostic.CXDiagnostic_Warning) {\n+                        throw new ClangException(d.toString());\n@@ -100,6 +118,4 @@\n-                }\n-            });\n-\n-            decls.addAll(macroParser.macroTable.reparseConstants());\n-            Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);\n-            return rv;\n+                },\n+            true, args.toArray(new String[0])) ;\n+            MacroParserImpl macroParser = MacroParserImpl.make(treeMaker, logger, tu, args)) {\n+            return collectDeclarations(tu, macroParser);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Parser.java","additions":57,"deletions":41,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -555,0 +555,1 @@\n+--include-function clang_createTranslationUnitFromSourceFile\n@@ -634,0 +635,1 @@\n+--include-function clang_createTranslationUnitFromSourceFile\n","filename":"updateclang\/clang.symbols","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}