{"files":[{"patch":"@@ -65,2 +65,6 @@\n-            super(\"Failed to parse \" + srcFile.toAbsolutePath().toString() + \": \" + code);\n-            this.srcFile = srcFile.toAbsolutePath().toString();\n+            this(srcFile.toAbsolutePath().toString(), code);\n+        }\n+\n+        public ParsingFailedException(String srcFile, ErrorCode code) {\n+            super(\"Failed to parse \" + srcFile + \": \" + code);\n+            this.srcFile = srcFile;\n@@ -71,2 +75,3 @@\n-    public TranslationUnit parseTU(String file, Consumer<Diagnostic> dh, int options, String... args)\n-            throws ParsingFailedException {\n+    private TranslationUnit parseTUImpl(String file, String content,\n+                Consumer<Diagnostic> dh, int options, String... args)\n+                throws ParsingFailedException {\n@@ -74,1 +79,2 @@\n-            MemorySegment src = arena.allocateFrom(file);\n+            MemorySegment fileSeg = arena.allocateFrom(file);\n+            MemorySegment contentSeg = content == null ? null : arena.allocateFrom(content);\n@@ -79,0 +85,9 @@\n+\n+            MemorySegment unsavedFile = contentSeg == null ?\n+                null : CXUnsavedFile.allocate(arena);\n+            if (unsavedFile != null) {\n+                CXUnsavedFile.Filename(unsavedFile, fileSeg);\n+                CXUnsavedFile.Contents(unsavedFile, contentSeg);\n+                CXUnsavedFile.Length(unsavedFile, content.length());\n+            }\n+\n@@ -82,1 +97,1 @@\n-                    src,\n+                    fileSeg,\n@@ -84,2 +99,3 @@\n-                    args.length, MemorySegment.NULL,\n-                    0,\n+                    args.length,\n+                    unsavedFile == null ? MemorySegment.NULL : unsavedFile,\n+                    unsavedFile == null ? 0 : 1,\n@@ -102,9 +118,0 @@\n-    public TranslationUnit parseTU(String filename, String content, Consumer<Diagnostic> dh, int options, String... args)\n-            throws ParsingFailedException {\n-        try (Arena arena = Arena.ofConfined()) {\n-            MemorySegment filenameSeg = arena.allocateFrom(filename);\n-            MemorySegment contentSeg = arena.allocateFrom(content);\n-            MemorySegment cargs = args.length == 0 ? null : arena.allocate(C_POINTER, args.length);\n-            for (int i = 0 ; i < args.length ; i++) {\n-                cargs.set(C_POINTER, i * C_POINTER.byteSize(), arena.allocateFrom(args[i]));\n-            }\n@@ -112,15 +119,4 @@\n-            MemorySegment unsavedFile = CXUnsavedFile.allocate(arena);\n-            CXUnsavedFile.Filename(unsavedFile, filenameSeg);\n-            CXUnsavedFile.Contents(unsavedFile, contentSeg);\n-            CXUnsavedFile.Length(unsavedFile, content.length());\n-\n-            MemorySegment tu = Index_h.clang_createTranslationUnitFromSourceFile(\n-                    ptr,\n-                    filenameSeg,\n-                    args.length,\n-                    cargs == null ? MemorySegment.NULL : cargs,\n-                    1,\n-                    unsavedFile);\n-            TranslationUnit rv = new TranslationUnit(tu);\n-            \/\/ even if we failed to parse, we might still have diagnostics\n-            rv.processDiagnostics(dh);\n+    public TranslationUnit parseTU(String file, Consumer<Diagnostic> dh, int options, String... args)\n+            throws ParsingFailedException {\n+        return parseTUImpl(file, null, dh, options, args);\n+    }\n@@ -128,2 +124,3 @@\n-            return rv;\n-        }\n+    public TranslationUnit parseTU(String filename, String content, Consumer<Diagnostic> dh, int options, String... args)\n+            throws ParsingFailedException {\n+        return parseTUImpl(filename, content, dh, options, args);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":31,"deletions":34,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1867,63 +1867,0 @@\n-\n-    private static class clang_createTranslationUnitFromSourceFile {\n-        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-            Index_h.C_POINTER,\n-            Index_h.C_POINTER,\n-            Index_h.C_POINTER,\n-            Index_h.C_INT,\n-            Index_h.C_POINTER,\n-            Index_h.C_INT,\n-            Index_h.C_POINTER\n-        );\n-\n-        public static final MemorySegment ADDR = Index_h.findOrThrow(\"clang_createTranslationUnitFromSourceFile\");\n-\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n-    }\n-\n-    \/**\n-     * Function descriptor for:\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n-     * }\n-     *\/\n-    public static FunctionDescriptor clang_createTranslationUnitFromSourceFile$descriptor() {\n-        return clang_createTranslationUnitFromSourceFile.DESC;\n-    }\n-\n-    \/**\n-     * Downcall method handle for:\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n-     * }\n-     *\/\n-    public static MethodHandle clang_createTranslationUnitFromSourceFile$handle() {\n-        return clang_createTranslationUnitFromSourceFile.HANDLE;\n-    }\n-\n-    \/**\n-     * Address for:\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n-     * }\n-     *\/\n-    public static MemorySegment clang_createTranslationUnitFromSourceFile$address() {\n-        return clang_createTranslationUnitFromSourceFile.ADDR;\n-    }\n-\n-    \/**\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_createTranslationUnitFromSourceFile(CXIndex CIdx, const char *source_filename, int num_clang_command_line_args, const char *const *clang_command_line_args, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files)\n-     * }\n-     *\/\n-    public static MemorySegment clang_createTranslationUnitFromSourceFile(MemorySegment CIdx, MemorySegment source_filename, int num_clang_command_line_args, MemorySegment clang_command_line_args, int num_unsaved_files, MemorySegment unsaved_files) {\n-        var mh$ = clang_createTranslationUnitFromSourceFile.HANDLE;\n-        try {\n-            if (TRACE_DOWNCALLS) {\n-                traceDowncall(\"clang_createTranslationUnitFromSourceFile\", CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);\n-            }\n-            return (MemorySegment)mh$.invokeExact(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);\n-        } catch (Throwable ex$) {\n-           throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -555,1 +555,0 @@\n---include-function clang_createTranslationUnitFromSourceFile\n@@ -635,1 +634,0 @@\n---include-function clang_createTranslationUnitFromSourceFile\n","filename":"updateclang\/clang.symbols","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}