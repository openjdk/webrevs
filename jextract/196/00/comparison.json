{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.NestedDeclarations;\n@@ -147,3 +148,8 @@\n-        if (structOrUnionDecl != null && !structOrUnionDecl.name().isEmpty()) {\n-            \/\/ do not generate a typedef class if this is a typedef of an anonymous struct (see NameMangler)\n-            toplevelBuilder.addTypedef(tree, JavaName.getFullNameOrThrow(structOrUnionDecl));\n+        if (structOrUnionDecl != null) {\n+            if (!structOrUnionDecl.name().isEmpty() ||\n+                    !NestedDeclarations.get(tree).orElse(List.of()).contains(structOrUnionDecl)) {\n+                \/\/ Only generate a typedef class if (a) struct\/union name is non-empty,\n+                \/\/ or if (b) the declaration of the struct\/union is not nested inside this typedef,\n+                \/\/ which indicates a typedef of some other typedef.\n+                toplevelBuilder.addTypedef(tree, JavaName.getFullNameOrThrow(structOrUnionDecl));\n+            }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-            case Type.Delegated delegated -> getAsFunctionPointer(delegated.type());\n+            case Type.Delegated delegated when delegated.kind() == Kind.POINTER -> getAsFunctionPointer(delegated.type());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider.typedefs;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.nio.file.Path;\n+\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n+\n+public class TestRedundantTypedefs extends JextractToolRunner {\n+\n+    Loader loader;\n+\n+    @BeforeClass\n+    public void beforeClass() {\n+        Path output = getOutputFilePath(\"TestRedundantTypedefs-typedefs.h\");\n+        Path input = getInputFilePath(\"typedefs.h\");\n+        runAndCompile(output, input.toString());\n+        loader = classLoader(output);\n+    }\n+\n+    @AfterClass\n+    public void afterClass() {\n+        loader.close();\n+    }\n+\n+    @Test\n+    public void testStructTypedefs() {\n+        assertNotNull(loader.loadClass(\"P\"));\n+        assertNotNull(loader.loadClass(\"Q\"));\n+        assertNull(loader.loadClass(\"P$0\"));\n+        assertNull(loader.loadClass(\"Q$0\"));\n+    }\n+\n+    @Test\n+    public void testFunctionTypedefs() {\n+        assertNotNull(loader.loadClass(\"f\"));\n+        assertNotNull(loader.loadClass(\"g\"));\n+        assertNull(loader.loadClass(\"foo_f$ptr_f\"));\n+        assertNull(loader.loadClass(\"foo_f$return\"));\n+        assertNull(loader.loadClass(\"foo_g$ptr_f\"));\n+        assertNull(loader.loadClass(\"foo_g$return\"));\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/typedefs\/TestRedundantTypedefs.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+typedef struct { int x; int y; } P;\n+typedef P Q;\n+\n+typedef void (*f)(int, double);\n+typedef f g;\n+\n+\/\/ add some uses\n+\n+P foo_P(P p);\n+Q foo_P(Q q);\n+\n+f foo_f(f ptr_f);\n+g foo_g(g ptr_g);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/typedefs\/typedefs.h","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}