{"files":[{"patch":"@@ -28,4 +28,0 @@\n-import org.openjdk.jextract.Declaration.Scoped;\n-import org.openjdk.jextract.Declaration.Visitor;\n-import org.openjdk.jextract.Type.Declared;\n-import org.openjdk.jextract.impl.DeclarationImpl.AnonymousStruct;\n@@ -34,0 +30,1 @@\n+import java.util.ArrayList;\n@@ -35,0 +32,1 @@\n+import java.util.List;\n@@ -40,1 +38,1 @@\n-final class DuplicateFilter implements Declaration.Visitor<Void, Declaration> {\n+final class DuplicateFilter implements Declaration.Visitor<Void, Void> {\n@@ -46,1 +44,0 @@\n-    private final Set<Declaration.Scoped> records = new HashSet<>();\n@@ -68,5 +65,0 @@\n-    \/\/ have we seen this record earlier?\n-    private boolean recordSeen(Declaration.Scoped tree) {\n-        return !AnonymousStruct.isPresent(tree) && !records.add(tree);\n-    }\n-\n@@ -85,1 +77,1 @@\n-    public Void visitConstant(Declaration.Constant constant, Declaration parent) {\n+    public Void visitConstant(Declaration.Constant constant, Void ignored) {\n@@ -94,1 +86,1 @@\n-    public Void visitFunction(Declaration.Function funcTree, Declaration parent) {\n+    public Void visitFunction(Declaration.Function funcTree, Void ignored) {\n@@ -103,1 +95,1 @@\n-    public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {\n+    public Void visitTypedef(Declaration.Typedef tree, Void ignored) {\n@@ -112,11 +104,2 @@\n-    public Void visitVariable(Declaration.Variable tree, Declaration parent) {\n-        if (parent == null && variableSeen(tree)) {\n-            \/\/skip global\n-            Skip.with(tree);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Void visitScoped(Scoped scoped, Declaration parent) {\n-        if (recordSeen(scoped)) {\n+    public Void visitVariable(Declaration.Variable tree, Void ignored) {\n+        if (variableSeen(tree)) {\n@@ -124,1 +107,1 @@\n-            Skip.with(scoped);\n+            Skip.with(tree);\n@@ -126,4 +109,0 @@\n-        \/\/ propagate\n-        scoped.members().forEach(member -> {\n-            member.accept(this, scoped);\n-        });\n@@ -134,1 +113,1 @@\n-    public Void visitDeclaration(Declaration decl, Declaration ignored) {\n+    public Void visitDeclaration(Declaration decl, Void ignored) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DuplicateFilter.java","additions":10,"deletions":31,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -159,2 +159,1 @@\n-    private boolean generateFunctionalInterface(String name, Type.Function func) {\n-        if (Skip.isPresent(func)) return false;\n+    private void generateFunctionalInterface(String name, Type.Function func) {\n@@ -163,1 +162,0 @@\n-        return true;\n@@ -176,3 +174,1 @@\n-                if (! generateFunctionalInterface(JavaFunctionalInterfaceName.getOrThrow(param), f)) {\n-                    return null;\n-                }\n+                generateFunctionalInterface(JavaFunctionalInterfaceName.getOrThrow(param), f);\n@@ -185,3 +181,1 @@\n-             if (! generateFunctionalInterface(JavaFunctionalInterfaceName.getOrThrow(funcTree), returnFunc)) {\n-                 return null;\n-             }\n+             generateFunctionalInterface(JavaFunctionalInterfaceName.getOrThrow(funcTree), returnFunc);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return type.accept(unsupportedVisitor, null);\n+        return type.accept(UNSUPPORTED_VISITOR, null);\n@@ -80,2 +80,2 @@\n-            if (f != null) {\n-                checkFunctionType(param, f);\n+            if (f != null && !checkFunctionTypeSupported(param, f)) {\n+                Skip.with(funcTree);\n@@ -86,2 +86,2 @@\n-        if (returnFunc != null) {\n-            checkFunctionType(funcTree, returnFunc);\n+        if (returnFunc != null && !checkFunctionTypeSupported(funcTree, returnFunc)) {\n+            Skip.with(funcTree);\n@@ -118,1 +118,1 @@\n-            checkFunctionType(varTree, func);\n+            checkFunctionTypeSupported(varTree, func);\n@@ -139,2 +139,2 @@\n-        if (func != null) {\n-            checkFunctionType(typedefTree, func);\n+        if (func != null && !checkFunctionTypeSupported(typedefTree, func)) {\n+            Skip.with(typedefTree);\n@@ -159,1 +159,1 @@\n-    private void checkFunctionType(Declaration decl, Type.Function func) {\n+    private boolean checkFunctionTypeSupported(Declaration decl, Type.Function func) {\n@@ -164,1 +164,1 @@\n-            Skip.with(func);\n+            return false;\n@@ -168,1 +168,1 @@\n-                Skip.with(func);\n+                return false;\n@@ -174,1 +174,1 @@\n-                Skip.with(func);\n+                return false;\n@@ -177,0 +177,1 @@\n+        return true;\n@@ -179,1 +180,1 @@\n-    static Type.Visitor<String, Void> unsupportedVisitor = new Type.Visitor<>() {\n+    private static final Type.Visitor<String, Void> UNSUPPORTED_VISITOR = new Type.Visitor<>() {\n@@ -240,1 +241,1 @@\n-    static void warn(String msg) {\n+    private static void warn(String msg) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnsupportedFilter.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"}]}