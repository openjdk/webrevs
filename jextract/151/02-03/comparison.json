{"files":[{"patch":"@@ -70,5 +70,6 @@\n-        } else {\n-            FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);\n-            if (descriptor == null) {\n-                Skip.with(funcTree);\n-            }\n+            return null;\n+        }\n+        FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);\n+        if (descriptor == null) {\n+            Skip.with(funcTree);\n+            return null;\n@@ -82,0 +83,1 @@\n+                return null;\n@@ -88,0 +90,1 @@\n+            return null;\n@@ -101,6 +104,8 @@\n-        } else {\n-            MemoryLayout layout = Type.layoutFor(varTree.type()).orElse(null);\n-            if (layout == null) {\n-                \/\/no layout - skip\n-                Skip.with(varTree);\n-            }\n+            return null;\n+        }\n+        MemoryLayout layout = Type.layoutFor(varTree.type()).orElse(null);\n+        if (layout == null) {\n+            \/\/no layout - skip\n+            Skip.with(varTree);\n+            return null;\n+        }\n@@ -108,5 +113,5 @@\n-            if (varTree.kind() == Declaration.Variable.Kind.BITFIELD ||\n-                    (layout instanceof ValueLayout && layout.byteSize() > 8)) {\n-                \/\/skip\n-                Skip.with(varTree);\n-            }\n+        if (varTree.kind() == Declaration.Variable.Kind.BITFIELD ||\n+                (layout instanceof ValueLayout && layout.byteSize() > 8)) {\n+            \/\/skip\n+            Skip.with(varTree);\n+            return null;\n@@ -117,2 +122,2 @@\n-        if (func != null) {\n-            checkFunctionTypeSupported(varTree, func);\n+        if (func != null && !checkFunctionTypeSupported(varTree, func)) {\n+            return null;\n@@ -165,11 +170,9 @@\n-        } else {\n-            FunctionDescriptor descriptor = Type.descriptorFor(func).orElse(null);\n-            if (descriptor == null) {\n-                return false;\n-            }\n-\n-            \/\/generate functional interface\n-            if (func.varargs() && !func.argumentTypes().isEmpty()) {\n-                warn(\"varargs in callbacks is not supported: \" + CDeclarationPrinter.declaration(func, JavaName.getOrThrow(decl)));\n-                return false;\n-            }\n+        }\n+        FunctionDescriptor descriptor = Type.descriptorFor(func).orElse(null);\n+        if (descriptor == null) {\n+            return false;\n+        }\n+        \/\/generate functional interface\n+        if (func.varargs() && !func.argumentTypes().isEmpty()) {\n+            warn(\"varargs in callbacks is not supported: \" + CDeclarationPrinter.declaration(func, JavaName.getOrThrow(decl)));\n+            return false;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnsupportedFilter.java","additions":32,"deletions":29,"binary":false,"changes":61,"status":"modified"}]}