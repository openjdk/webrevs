{"files":[{"patch":"@@ -11,2 +11,4 @@\n-  CLANG_LLVM_BASE_URL: \"https:\/\/github.com\/llvm\/llvm-project\/releases\/download\/llvmorg-13.0.0\/clang+llvm-13.0.0-x86_64\"\n-  ARCHIVE_EXT: \"tar.xz\"\n+  TOOLCHAIN_VERSION: 22\n+  CLANG_LLVM_VERSION: 13.0.0\n+  CLANG_LLVM_BASE_URL: \"https:\/\/github.com\/llvm\/llvm-project\/releases\/download\/llvmorg-13.0.0\/\"\n+  JTREG_VERSION: 7.3.1+1\n@@ -15,0 +17,26 @@\n+  build-jtreg:\n+    runs-on: ubuntu-latest\n+    steps:\n+    - name: 'Check cache for JTReg'\n+      id: get-cached-jtreg\n+      uses: actions\/cache@v4\n+      with:\n+        path: .\/deps\/jtreg\/build\/images\/jtreg\n+        key: jtreg-${{ env.JTREG_VERSION }}\n+\n+    - name: 'Check out JTReg'\n+      if: ${{ steps.get-cached-jtreg.outputs.cache-hit != 'true' }}\n+      uses: actions\/checkout@v4.1.1\n+      with:\n+        repository: 'openjdk\/jtreg'\n+        ref: 'jtreg-${{ env.JTREG_VERSION }}'\n+        fetch-depth: 1\n+        path: .\/deps\/jtreg\n+\n+    - name: 'Build JTReg'\n+      if: ${{ steps.get-cached-jtreg.outputs.cache-hit != 'true' }}\n+      shell: bash\n+      working-directory: .\/deps\/jtreg\n+      run: |\n+        bash .\/make\/build.sh --jdk ${JAVA_HOME_11_X64}\n+        ls build\/images\/jtreg\n@@ -18,0 +46,1 @@\n+    needs: [build-jtreg]\n@@ -20,1 +49,1 @@\n-        os: [macos-latest, ubuntu-20.04]\n+        os: [macos-latest, ubuntu-20.04, windows-latest]\n@@ -23,1 +52,4 @@\n-            TARGET: linux-gnu-ubuntu-20.04\n+            TARGET: clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-20.04\n+            ARCHIVE_EXT: \"tar.xz\"\n+            LIB_DIR: lib\n+            DEPS_ROOT: \/tmp\/deps\n@@ -26,1 +58,4 @@\n-            TARGET: apple-darwin\n+            TARGET: clang+llvm-13.0.0-x86_64-apple-darwin\n+            ARCHIVE_EXT: \"tar.xz\"\n+            LIB_DIR: lib\n+            DEPS_ROOT: \/tmp\/deps\n@@ -28,0 +63,6 @@\n+          - os: windows-latest\n+            TARGET: LLVM-13.0.0-win64\n+            ARCHIVE_EXT: \"exe\"\n+            LIB_DIR: bin\n+            DEPS_ROOT: C:\/tmp\/deps\n+            TOOLCHAIN_JAVA_HOME: C:\/tmp\/deps\/jdk-toolchain\/jdk-22\n@@ -38,2 +79,8 @@\n-        mkdir -p deps\/jtreg\n-        mkdir -p \/tmp\/deps\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\n+\n+    - name: 'Check cache for toolchain JDK'\n+      id: get-cached-toolchain\n+      uses: actions\/cache@v4\n+      with:\n+        path: ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\n+        key: jdk-toolchain-${{ env.TOOLCHAIN_VERSION }}-${{ matrix.os }}\n@@ -42,2 +89,3 @@\n-      id: download_toolchain_jdk\n-      uses: oracle-actions\/setup-java@v1.3.2\n+      id: download-toolchain-jdk\n+      uses: oracle-actions\/setup-java@v1.3.4\n+      if: ${{ steps.get-cached-toolchain.outputs.cache-hit != 'true' }}\n@@ -46,1 +94,1 @@\n-        release: 22\n+        release: ${{ env.TOOLCHAIN_VERSION }}\n@@ -49,1 +97,2 @@\n-    - name: 'Extract Toolchain JDK'\n+    - name: 'Extract Toolchain JDK (Non Windows)'\n+      if: ${{ matrix.os != 'windows-latest' && steps.get-cached-toolchain.outputs.cache-hit != 'true' }}\n@@ -52,3 +101,4 @@\n-        mkdir -p \/tmp\/deps\/jdk-toolchain\n-        tar --strip-components=1 -xvf ${{ steps.download_toolchain_jdk.outputs.archive }} -C \/tmp\/deps\/jdk-toolchain\n-        ls -lah \/tmp\/deps\/jdk-toolchain\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\n+        tar --strip-components=1 -xvf ${{ steps.download-toolchain-jdk.outputs.archive }} -C ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\n+        ls -lah ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\n+        ${{ matrix.TOOLCHAIN_JAVA_HOME }}\/bin\/java --version\n@@ -56,2 +106,3 @@\n-    - name: 'Check toolchain Java version'\n-      shell: sh\n+    - name: 'Extract Toolchain JDK (Windows)'\n+      if: ${{ matrix.os == 'windows-latest' && steps.get-cached-toolchain.outputs.cache-hit != 'true' }}\n+      shell: pwsh\n@@ -59,0 +110,3 @@\n+        New-Item -ItemType Directory ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\n+        7z x ${{ steps.download-toolchain-jdk.outputs.archive }} -o${{ matrix.DEPS_ROOT }}\/jdk-toolchain\/\n+        ls ${{ matrix.DEPS_ROOT }}\/jdk-toolchain\/jdk-22\n@@ -62,1 +116,1 @@\n-      uses: oracle-actions\/setup-java@v1.3.2\n+      uses: oracle-actions\/setup-java@v1.3.4\n@@ -72,2 +126,10 @@\n-    - name: 'Setup LLVM'\n-      shell: sh\n+    - name: 'Check cache for LLVM'\n+      id: get-cached-llvm\n+      uses: actions\/cache@v4\n+      with:\n+        path: ${{ matrix.DEPS_ROOT }}\/llvm\/image\n+        key: llvm-${{ env.CLANG_LLVM_VERSION }}-${{ matrix.os }}\n+\n+    - name: 'Download and extract LLVM'\n+      if: ${{ steps.get-cached-llvm.outputs.cache-hit != 'true' }}\n+      shell: bash\n@@ -75,4 +137,20 @@\n-        mkdir -p \/tmp\/deps\/clang_llvm\n-        wget -O \/tmp\/deps\/LLVM.tar.gz ${{ env.CLANG_LLVM_BASE_URL }}-${{ matrix.TARGET }}.${{ env.ARCHIVE_EXT }}\n-        tar --strip-components=1 -xvf \/tmp\/deps\/LLVM.tar.gz -C \/tmp\/deps\/clang_llvm\n-        ls -lah \/tmp\/deps\/clang_llvm\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\n+        curl -L ${{ env.CLANG_LLVM_BASE_URL }}${{ matrix.TARGET }}.${{ matrix.ARCHIVE_EXT }} -o ${{ matrix.DEPS_ROOT }}\/llvm\/LLVM.${{ matrix.ARCHIVE_EXT }}\n+        if [ \"${{ matrix.ARCHIVE_EXT }}\" = \"exe\" ]; then\n+          7z x ${{ matrix.DEPS_ROOT }}\/llvm\/LLVM.${{ matrix.ARCHIVE_EXT }} -o${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\n+        else\n+          tar --strip-components=1 -xvf ${{ matrix.DEPS_ROOT }}\/llvm\/LLVM.${{ matrix.ARCHIVE_EXT }} -C ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\n+        fi\n+        ls -lah ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\n+\n+    - name: 'Create trimmed-down libclang image (for faster caching)'\n+      if: ${{ steps.get-cached-llvm.outputs.cache-hit != 'true' }}\n+      shell: bash\n+      run: |\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\/llvm\/image\/${{ matrix.LIB_DIR }}\/\n+        cp -a ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\/${{ matrix.LIB_DIR }}\/libclang.* ${{ matrix.DEPS_ROOT }}\/llvm\/image\/${{ matrix.LIB_DIR }}\/\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\/llvm\/image\/include\/clang-c\n+        cp -a ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\/include\/clang-c\/. ${{ matrix.DEPS_ROOT }}\/llvm\/image\/include\/clang-c\/\n+        mkdir -p ${{ matrix.DEPS_ROOT }}\/llvm\/image\/lib\/clang\/$CLANG_LLVM_VERSION\/include\/\n+        cp -a ${{ matrix.DEPS_ROOT }}\/llvm\/unpacked\/lib\/clang\/$CLANG_LLVM_VERSION\/include\/. ${{ matrix.DEPS_ROOT }}\/llvm\/image\/lib\/clang\/$CLANG_LLVM_VERSION\/include\/\n+        ls -lah ${{ matrix.DEPS_ROOT }}\/llvm\/image\n@@ -83,1 +161,1 @@\n-        sh .\/gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=\/tmp\/deps\/clang_llvm clean verify        \n+        sh .\/gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=${{ matrix.DEPS_ROOT }}\/llvm\/image clean verify        \n@@ -85,2 +163,2 @@\n-    - name: 'Check out JTReg'\n-      uses: actions\/checkout@v4.1.1\n+    - name: 'Get cached JTReg'\n+      uses: actions\/cache@v4\n@@ -88,11 +166,4 @@\n-        repository: 'openjdk\/jtreg'\n-        ref: 'jtreg-7.3.1+1'\n-        fetch-depth: 1\n-        path: deps\/jtreg\n-\n-    - name: 'Build JTReg'\n-      shell: bash\n-      working-directory: .\/deps\/jtreg\n-      run: |\n-        bash .\/make\/build.sh --jdk ${JAVA_HOME_11_X64}\n-        ls build\/images\/jtreg\n+        path: .\/deps\/jtreg\/build\/images\/jtreg\n+        enableCrossOsArchive: true\n+        fail-on-cache-miss: true\n+        key: jtreg-${{ env.JTREG_VERSION }}\n@@ -103,1 +174,1 @@\n-        sh .\/gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=\/tmp\/deps\/clang_llvm -Pjtreg_home=.\/deps\/jtreg\/build\/images\/jtreg jtreg\n+        sh .\/gradlew -Pjdk22_home=${{ matrix.TOOLCHAIN_JAVA_HOME }} -Pllvm_home=${{ matrix.DEPS_ROOT }}\/llvm\/image -Pjtreg_home=.\/deps\/jtreg\/build\/images\/jtreg jtreg\n","filename":".github\/workflows\/test.yml","additions":109,"deletions":38,"binary":false,"changes":147,"status":"modified"}]}