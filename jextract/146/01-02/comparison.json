{"files":[{"patch":"@@ -55,1 +55,2 @@\n-     * Adds a new attribute to this entity.\n+     * Adds a new attribute to this entity. This method is idempotent, that is, it allows adding an attribute\n+     * that is identical to the one already stored.\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/Attributed.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-        if (attributes.containsKey(attribute.getClass())) {\n+        Record attr = attributes.get(attribute.getClass());\n+        if (attr != null && !attr.equals(attribute)) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/AttributedImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -348,0 +348,3 @@\n+    \/**\n+     * An attribute to mark anonymous struct declarations.\n+     *\/\n@@ -350,1 +353,4 @@\n-    record EnumConstant(Scoped enumParent) { }\n+    \/**\n+     * An attribute to mark enum constants, with a link to the name of their parent enum.\n+     *\/\n+    record EnumConstant(String enumName) { }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-    private static final String ENUM_NAME = \"enum-name\";\n@@ -46,1 +45,1 @@\n-        return constant.getAttribute(EnumConstant.class).map(ec -> ec.enumParent().name());\n+        return constant.getAttribute(EnumConstant.class).map(EnumConstant::enumName);\n@@ -90,1 +89,1 @@\n-                fieldTree.addAttribute(new EnumConstant(scoped));\n+                fieldTree.addAttribute(new EnumConstant(scoped.name()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/EnumConstantLifter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}