{"files":[{"patch":"@@ -466,2 +466,16 @@\n-        if (decl instanceof Declaration.Constant) return decl; \/\/ do nothing for enum constants\n-        DeclarationString.with(decl, declarationString(cursor));\n+        String declString = switch (decl) {\n+            case Declaration.Constant _ -> null; \/\/ do nothing for enum constants\n+            case Typedef _ -> declarationString(cursor, true); \/\/ always expand typedefs\n+            default -> {\n+                \/\/ heuristic, try w\/o expanding first, and check if there are <anonymous> strings\n+                String cursorString = declarationString(cursor, false);\n+                if (cursorString.contains(\"\\\\(unnamed (struct|union|enum) at\")) {\n+                    \/\/ the output contains anonymous definitions, fallback and expand them\n+                    cursorString = declarationString(cursor, true);\n+                }\n+                yield cursorString;\n+            }\n+        };\n+        if (declString != null) {\n+            DeclarationString.with(decl, declString);\n+        }\n@@ -471,1 +485,1 @@\n-    String declarationString(Cursor cursor) {\n+    String declarationString(Cursor cursor, boolean expandNestedDecls) {\n@@ -473,1 +487,3 @@\n-        pp.setProperty(PrintingPolicyProperty.IncludeTagDefinition, true);\n+        if (expandNestedDecls) {\n+            pp.setProperty(PrintingPolicyProperty.IncludeTagDefinition, true);\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-            \"double distance(struct Point { int x; int y; } p)\",\n+            \"double distance(struct Point p)\",\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}