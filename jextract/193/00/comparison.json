{"files":[{"patch":"@@ -147,2 +147,1 @@\n-                \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-                \/\/ but allows generated subclasses in same package.\n+                \/\/ Should not be called directly\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        fib.emitFunctionalFactories();\n+        fib.emitFunctionalFactory();\n@@ -68,0 +68,3 @@\n+            \/**\n+             * The function pointer signature, expressed as a functional interface\n+             *\/\n@@ -74,1 +77,1 @@\n-    private void emitFunctionalFactories() {\n+    private void emitFunctionalFactory() {\n@@ -79,2 +82,6 @@\n-            public static MemorySegment allocate(\\{className()}.Function fi, Arena scope) {\n-                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, scope);\n+            \/**\n+             * Allocates a new upcall segment, whose implementation is defined by {@code fi}.\n+             * The lifetime of the returned segment is managed by {@code arena}\n+             *\/\n+            public static MemorySegment allocate(\\{className()}.Function fi, Arena arena) {\n+                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);\n@@ -94,0 +101,3 @@\n+            \/**\n+             * Invoke the upcall segment {@code funcPtr}, with given parameters\n+             *\/\n@@ -148,0 +158,3 @@\n+            \/**\n+             * The descriptor of this function pointer\n+             *\/\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-            appendBlankLine();\n@@ -230,0 +229,4 @@\n+            \/**\n+             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize}\n+             *\/\n@@ -237,1 +240,5 @@\n-        appendIndentedLines(\"\"\"\n+        appendIndentedLines(STR.\"\"\"\n+\n+            \/**\n+             * The size (in bytes) of this \\{kindName()}\n+             *\/\n@@ -246,0 +253,3 @@\n+            \/**\n+             * Allocate a segment of size {@code layout().byteSize()} using {@code \\{allocatorParam}}\n+             *\/\n@@ -257,0 +267,4 @@\n+            \/**\n+             * Allocate an array of size {@code \\{elementCountParam}} using {@code \\{allocatorParam}}.\n+             * The returned segment has size {@code \\{elementCountParam} * layout().byteSize()}.\n+             *\/\n@@ -266,0 +280,4 @@\n+            \/**\n+             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+             * The returned segment has size {@code layout().byteSize()}\n+             *\/\n@@ -270,0 +288,4 @@\n+            \/**\n+             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+             * The returned segment has size {@code elementCount * layout().byteSize()}\n+             *\/\n@@ -281,0 +303,3 @@\n+            \/**\n+             * The layout of this \\{kindName()}\n+             *\/\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import static org.testng.Assert.fail;\n@@ -106,1 +107,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -114,1 +115,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -122,1 +123,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -130,1 +131,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -151,1 +152,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -162,1 +163,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -175,1 +176,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -231,0 +232,8 @@\n+\n+    static void assertContains(List<String> found, List<String> expected) {\n+        for (String e : expected) {\n+            if (!found.contains(e)) {\n+                fail(String.format(\"\\\"%s\\\" not found in: \", e, found));\n+            }\n+        }\n+    }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/docComments\/TestDocComments.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}