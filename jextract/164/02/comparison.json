{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jextract.Declaration.Scoped;\n@@ -38,1 +37,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n@@ -140,4 +138,6 @@\n-    final void emitPrivateDefaultConstructor() {\n-        appendLines(STR.\"\"\"\n-            \/\/ Suppresses default constructor, ensuring non-instantiability.\n-            private \\{className}() {}\n+    final void emitDefaultConstructor() {\n+        appendIndentedLines(STR.\"\"\"\n+            \\{className}() {\n+                \/\/ Suppresses public default constructor, ensuring non-instantiability,\n+                \/\/ but allows generated subclasses in same package.\n+            }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.util.OptionalLong;\n@@ -115,1 +114,1 @@\n-            StructBuilder builder = new StructBuilder(sourceFileBuilder(), \"public static final\",\n+            StructBuilder builder = new StructBuilder(sourceFileBuilder(), \"public static\",\n@@ -118,1 +117,1 @@\n-            builder.emitPrivateDefaultConstructor();\n+            builder.emitDefaultConstructor();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-import org.openjdk.jextract.Type;\n-\n-import java.util.List;\n@@ -43,1 +40,1 @@\n-        tdb.emitPrivateDefaultConstructor();\n+        tdb.emitDefaultConstructor();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypedefBuilder.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+import test.jextract.nested.typedef.*;\n+\n+import java.lang.foreign.GroupLayout;\n+\n+\/*\n+ * @test id=classes\n+ * @library \/lib\n+ * @run main\/othervm JtregJextract -t test.jextract.nested.typedef nestedStructTypedef.h\n+ * @build TestNestedStructTypedef\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedStructTypedef\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @library \/lib\n+ * @run main\/othervm JtregJextractSources -t test.jextract.nested.typedef nestedStructTypedef.h\n+ * @build TestNestedStructTypedef\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedStructTypedef\n+ *\/\n+public class TestNestedStructTypedef {\n+\n+    @Test\n+    public void testMacroFields() {\n+        checkLayout(T.$LAYOUT());\n+    }\n+\n+    void checkLayout(GroupLayout layout) {\n+        assertEquals(layout.memberLayouts().get(0), nestedStructTypedef_h.C_INT.withName(\"x\"));\n+    }\n+}\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/TestNestedStructTypedef.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -24,6 +24,2 @@\n-#define FIELDS \\\n-int x; \\\n-int y;\n-\n-struct PointA {\n-   FIELDS\n+struct Outer {\n+    struct Inner { int x; } a;\n@@ -32,3 +28,1 @@\n-struct PointB {\n-   FIELDS\n-};\n+typedef struct Inner T;\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/nestedStructTypedef.h","additions":3,"deletions":9,"binary":false,"changes":12,"previous_filename":"test\/jtreg\/generator\/dedup\/macro_fields.h","status":"copied"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm JtregJextract -l Func -t test.jextract.packedstructs packedstructs.h\n+ * @run main\/othervm JtregJextract -t test.jextract.packedstructs packedstructs.h\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}