{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.EnumConstant;\n@@ -145,1 +146,1 @@\n-        Optional<String> enumName = EnumConstantLifter.enumName(d);\n+        Optional<String> enumName = EnumConstant.get(d);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CDeclarationPrinter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -344,0 +344,2 @@\n+    \/\/ attributes\n+\n@@ -347,1 +349,11 @@\n-    record AnonymousStruct() { }\n+    record AnonymousStruct() {\n+        private static final AnonymousStruct INSTANCE = new AnonymousStruct();\n+\n+        public static void with(Scoped scoped) {\n+            scoped.addAttribute(INSTANCE);\n+        }\n+\n+        public static boolean is(Scoped scoped) {\n+            return scoped.getAttribute(AnonymousStruct.class).isPresent();\n+        }\n+    }\n@@ -352,1 +364,10 @@\n-    record EnumConstant(String enumName) { }\n+    record EnumConstant(String get) {\n+        public static void with(Constant constant, String enumName) {\n+            constant.addAttribute(new EnumConstant(enumName));\n+        }\n+\n+        public static Optional<String> get(Constant constant) {\n+            return constant.getAttribute(EnumConstant.class)\n+                    .map(EnumConstant::get);\n+        }\n+    }\n@@ -357,1 +378,53 @@\n-    record Skip() { }\n+    record Skip() {\n+        private static final Skip INSTANCE = new Skip();\n+\n+        public static void with(Declaration declaration) {\n+            declaration.addAttribute(INSTANCE);\n+        }\n+\n+        public static boolean is(Declaration declaration) {\n+            return declaration.getAttribute(Skip.class).isPresent();\n+        }\n+    }\n+\n+    \/**\n+     * An attribute to attach a Java name to a C declaration.\n+     *\/\n+    record JavaName(String name) {\n+        public static void with(Declaration declaration, String javaName) {\n+            declaration.addAttribute(new JavaName(javaName));\n+        }\n+\n+        public static String getOrThrow(Declaration declaration) {\n+            return declaration.getAttribute(JavaName.class)\n+                    .map(JavaName::name).get();\n+        }\n+    }\n+\n+    \/**\n+     * An attribute to attach a list of Java parameter names to a C function type.\n+     *\/\n+    record JavaParameterNames(List<String> parameterNames) {\n+        public static void with(Type.Function function, List<String> parameterNames) {\n+            function.addAttribute(new JavaParameterNames(parameterNames));\n+        }\n+\n+        public static Optional<List<String>> get(Type.Function function) {\n+            return function.getAttribute(JavaParameterNames.class)\n+                    .map(JavaParameterNames::parameterNames);\n+        }\n+    }\n+\n+    \/**\n+     * An attribute to attach a Java functional interface name to a C declaration.\n+     *\/\n+    record JavaFunctionalInterfaceName(String fiName) {\n+        public static void with(Declaration declaration, String fiName) {\n+            declaration.addAttribute(new JavaFunctionalInterfaceName(fiName));\n+        }\n+\n+        public static String getOrThrow(Declaration declaration) {\n+            return declaration.getAttribute(JavaFunctionalInterfaceName.class)\n+                    .map(JavaFunctionalInterfaceName::fiName).get();\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":76,"deletions":3,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-            constant.addAttribute(new Skip());\n+            Skip.with(constant);\n@@ -92,1 +92,1 @@\n-            funcTree.addAttribute(new Skip());\n+            Skip.with(funcTree);\n@@ -103,1 +103,1 @@\n-            tree.addAttribute(new Skip());\n+            Skip.with(tree);\n@@ -114,1 +114,1 @@\n-            tree.addAttribute(new Skip());\n+            Skip.with(tree);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DuplicateFilter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.Declaration.Constant;\n@@ -33,2 +34,0 @@\n-import java.util.Optional;\n-\n@@ -40,4 +39,0 @@\n-    static Optional<String> enumName(Declaration.Constant constant) {\n-        return constant.getAttribute(EnumConstant.class).map(EnumConstant::enumName);\n-    }\n-\n@@ -58,1 +53,1 @@\n-                fieldTree.addAttribute(new EnumConstant(scoped.name()));\n+                EnumConstant.with((Constant)fieldTree, scoped.name());\n@@ -72,1 +67,1 @@\n-                tree.addAttribute(new Skip());\n+                Skip.with(tree);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/EnumConstantLifter.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            constant.addAttribute(new Skip());\n+            Skip.with(constant);\n@@ -61,1 +61,1 @@\n-            funcTree.addAttribute(new Skip());\n+            Skip.with(funcTree);\n@@ -73,1 +73,1 @@\n-                d.addAttribute(new Skip());\n+                Skip.with(d);\n@@ -85,1 +85,1 @@\n-            tree.addAttribute(new Skip());\n+            Skip.with(tree);\n@@ -94,1 +94,1 @@\n-            tree.addAttribute(new Skip());\n+            Skip.with(tree);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeFilter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaParameterNames;\n+\n@@ -30,3 +34,0 @@\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n@@ -95,28 +96,0 @@\n-    \/\/ package private name lookup API\n-    static String getJavaName(Declaration decl) {\n-        return decl.getAttribute(JavaName.class).get().name;\n-    }\n-\n-    static Optional<List<String>> getParameterNames(Type.Function func) {\n-        return func.getAttribute(JavaParameterNames.class).map(JavaParameterNames::names);\n-    }\n-\n-    static String getFiName(Declaration decl) {\n-        Objects.requireNonNull(decl);\n-        return decl.getAttribute(JavaFunctionalInterfaceName.class).get().name;\n-    }\n-\n-    \/\/ Internals below this point\n-\n-    private void putJavaName(Declaration decl, String javaName) {\n-        Objects.requireNonNull(decl);\n-        Objects.requireNonNull(javaName);\n-        decl.addAttribute(new JavaName(javaName));\n-    }\n-\n-    private void putFiName(Declaration decl, String javaName) {\n-        Objects.requireNonNull(decl);\n-        Objects.requireNonNull(javaName);\n-        decl.addAttribute(new JavaFunctionalInterfaceName(javaName));\n-    }\n-\n@@ -127,1 +100,1 @@\n-        putJavaName(header, javaName);\n+        JavaName.with(header, javaName);\n@@ -135,1 +108,1 @@\n-        putJavaName(constant, makeJavaName(constant));\n+        JavaName.with(constant, makeJavaName(constant));\n@@ -141,1 +114,1 @@\n-        putJavaName(func, makeJavaName(func));\n+        JavaName.with(func, makeJavaName(func));\n@@ -147,1 +120,1 @@\n-                putFiName(param, declFiName);\n+                JavaFunctionalInterfaceName.with(param, declFiName);\n@@ -150,1 +123,1 @@\n-            putJavaName(param, makeJavaName(param));\n+            JavaName.with(param, makeJavaName(param));\n@@ -154,1 +127,1 @@\n-            putFiName(func, func.name() + \"$return\");\n+            JavaFunctionalInterfaceName.with(func, func.name() + \"$return\");\n@@ -176,1 +149,1 @@\n-            putJavaName(scoped, curScope.className());\n+            JavaName.with(scoped, curScope.className());\n@@ -202,1 +175,1 @@\n-        putJavaName(typedef, javaName);\n+        JavaName.with(typedef, javaName);\n@@ -207,1 +180,1 @@\n-               func.addAttribute(new JavaParameterNames(\n+               JavaParameterNames.with(func,\n@@ -213,1 +186,1 @@\n-               ));\n+               );\n@@ -215,1 +188,1 @@\n-           putFiName(typedef, javaName);\n+           JavaFunctionalInterfaceName.with(typedef, javaName);\n@@ -222,1 +195,1 @@\n-        putJavaName(variable, makeJavaName(variable));\n+        JavaName.with(variable, makeJavaName(variable));\n@@ -231,1 +204,1 @@\n-            putFiName(variable, fiName);\n+            JavaFunctionalInterfaceName.with(variable, fiName);\n@@ -299,6 +272,0 @@\n-\n-    record JavaName(String name) { }\n-\n-    record JavaParameterNames(List<String> names) { }\n-\n-    record JavaFunctionalInterfaceName(String name) { }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":17,"deletions":50,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaParameterNames;\n@@ -89,1 +92,1 @@\n-        String clsName = NameMangler.getJavaName(decl);\n+        String clsName = JavaName.getOrThrow(decl);\n@@ -107,1 +110,1 @@\n-            toplevelBuilder.addTypedef(td, NameMangler.getJavaName(td), structDefinitionName(structDef));\n+            toplevelBuilder.addTypedef(td, JavaName.getOrThrow(td), structDefinitionName(structDef));\n@@ -164,1 +167,1 @@\n-        toplevelBuilder.addConstant(constant, NameMangler.getJavaName(constant), clazz);\n+        toplevelBuilder.addConstant(constant, JavaName.getOrThrow(constant), clazz);\n@@ -189,1 +192,1 @@\n-                isNestedAnonStruct? null : NameMangler.getJavaName(d),\n+                isNestedAnonStruct? null : JavaName.getOrThrow(d),\n@@ -229,1 +232,1 @@\n-            NameMangler.getParameterNames(func));\n+            JavaParameterNames.get(func));\n@@ -256,1 +259,1 @@\n-                String fiName = NameMangler.getFiName(param);\n+                String fiName = JavaFunctionalInterfaceName.getOrThrow(param);\n@@ -267,1 +270,1 @@\n-             if (! generateFunctionalInterface(returnFunc, NameMangler.getFiName(funcTree))) {\n+             if (! generateFunctionalInterface(returnFunc, JavaFunctionalInterfaceName.getOrThrow(funcTree))) {\n@@ -272,1 +275,1 @@\n-        toplevelBuilder.addFunction(funcTree, descriptor, NameMangler.getJavaName(funcTree),\n+        toplevelBuilder.addFunction(funcTree, descriptor, JavaName.getOrThrow(funcTree),\n@@ -275,1 +278,1 @@\n-                map(NameMangler::getJavaName).\n+                map(JavaName::getOrThrow).\n@@ -317,1 +320,1 @@\n-                                String javaName = NameMangler.getJavaName(tree);\n+                                String javaName = JavaName.getOrThrow(tree);\n@@ -332,1 +335,1 @@\n-            toplevelBuilder.addTypedef(tree, NameMangler.getJavaName(tree), null);\n+            toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null);\n@@ -336,1 +339,1 @@\n-                String fiName = NameMangler.getFiName(tree);\n+                String fiName = JavaFunctionalInterfaceName.getOrThrow(tree);\n@@ -342,1 +345,1 @@\n-                toplevelBuilder.addTypedef(tree, NameMangler.getJavaName(tree), null);\n+                toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null);\n@@ -346,1 +349,1 @@\n-                    toplevelBuilder.addTypedef(tree, NameMangler.getJavaName(tree), null, primitive);\n+                    toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null, primitive);\n@@ -401,1 +404,1 @@\n-            fiName = NameMangler.getFiName(tree);\n+            fiName = JavaFunctionalInterfaceName.getOrThrow(tree);\n@@ -412,1 +415,1 @@\n-        currentBuilder.addVar(tree, NameMangler.getJavaName(tree), layout, Optional.ofNullable(fiName));\n+        currentBuilder.addVar(tree, JavaName.getOrThrow(tree), layout, Optional.ofNullable(fiName));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-            declaration.addAttribute(new AnonymousStruct());\n+            AnonymousStruct.with(declaration);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/RecordLayoutComputer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import org.openjdk.jextract.Declaration.Scoped;\n@@ -264,1 +265,1 @@\n-        return declaration.getAttribute(AnonymousStruct.class).isPresent();\n+        return declaration instanceof Scoped scoped && AnonymousStruct.is(scoped);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}