{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaName;\n@@ -60,2 +61,1 @@\n-    public void addVar(Declaration.Variable varTree, String javaName,\n-        MemoryLayout layout, Optional<String> fiName) {\n+    public void addVar(Declaration.Variable varTree, MemoryLayout layout, Optional<String> fiName) {\n@@ -63,0 +63,1 @@\n+        String javaName = JavaName.getOrThrow(varTree);\n@@ -80,2 +81,1 @@\n-    public void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor,\n-            String javaName, List<String> parameterNames) {\n+    public void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor) {\n@@ -86,1 +86,5 @@\n-        emitFunctionWrapper(javaName, nativeName, descriptor, needsAllocator, isVarargs, parameterNames, funcTree);\n+        List<String> parameterNames = funcTree.parameters().\n+                stream().\n+                map(JavaName::getOrThrow).\n+                toList();\n+        emitFunctionWrapper(JavaName.getOrThrow(funcTree), nativeName, descriptor, needsAllocator, isVarargs, parameterNames, funcTree);\n@@ -89,1 +93,1 @@\n-    public void addConstant(Declaration.Constant constantTree, String javaName, Class<?> javaType) {\n+    public void addConstant(Declaration.Constant constantTree, Class<?> javaType) {\n@@ -91,1 +95,1 @@\n-        emitConstant(javaType, javaName, value, constantTree);\n+        emitConstant(javaType, JavaName.getOrThrow(constantTree), value, constantTree);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.JavaParameterNames;\n@@ -78,2 +77,2 @@\n-    private void addFunctionTypedef(Type.Delegated typedef, String name) {\n-        functionTypeDefNames.put(typedef, name);\n+    private void addFunctionTypedef(Declaration declaration, Type.Delegated typedef) {\n+        functionTypeDefNames.put(typedef, JavaFunctionalInterfaceName.getOrThrow(declaration));\n@@ -110,1 +109,1 @@\n-            toplevelBuilder.addTypedef(td, JavaName.getOrThrow(td), structDefinitionName(structDef));\n+            toplevelBuilder.addTypedef(td, structDefinitionName(structDef));\n@@ -167,1 +166,1 @@\n-        toplevelBuilder.addConstant(constant, JavaName.getOrThrow(constant), clazz);\n+        toplevelBuilder.addConstant(constant, clazz);\n@@ -186,2 +185,0 @@\n-            boolean isNestedAnonStruct = d.name().isEmpty() &&\n-                (parent instanceof Declaration.Scoped);\n@@ -191,2 +188,0 @@\n-                isNestedAnonStruct,\n-                isNestedAnonStruct? null : JavaName.getOrThrow(d),\n@@ -212,1 +207,1 @@\n-    private boolean generateFunctionalInterface(Type.Function func, String javaName) {\n+    private boolean generateFunctionalInterface(Declaration decl, Type.Function func) {\n@@ -215,1 +210,1 @@\n-            warn(\"skipping \" + javaName + \" because of unsupported type usage: \" +\n+            warn(\"skipping \" + JavaName.getOrThrow(decl) + \" because of unsupported type usage: \" +\n@@ -227,1 +222,1 @@\n-            warn(\"varargs in callbacks is not supported: \" + CDeclarationPrinter.declaration(func, javaName));\n+            warn(\"varargs in callbacks is not supported: \" + CDeclarationPrinter.declaration(func, JavaName.getOrThrow(decl)));\n@@ -231,2 +226,1 @@\n-        currentBuilder.addFunctionalInterface(func, javaName, descriptor,\n-            JavaParameterNames.get(func));\n+        currentBuilder.addFunctionalInterface(decl, func, descriptor);\n@@ -259,2 +253,1 @@\n-                String fiName = JavaFunctionalInterfaceName.getOrThrow(param);\n-                if (! generateFunctionalInterface(f, fiName)) {\n+                if (! generateFunctionalInterface(param, f)) {\n@@ -270,1 +263,1 @@\n-             if (! generateFunctionalInterface(returnFunc, JavaFunctionalInterfaceName.getOrThrow(funcTree))) {\n+             if (! generateFunctionalInterface(funcTree, returnFunc)) {\n@@ -275,6 +268,1 @@\n-        toplevelBuilder.addFunction(funcTree, descriptor, JavaName.getOrThrow(funcTree),\n-            funcTree.parameters().\n-                stream().\n-                map(JavaName::getOrThrow).\n-                toList());\n-\n+        toplevelBuilder.addFunction(funcTree, descriptor);\n@@ -320,2 +308,1 @@\n-                                String javaName = JavaName.getOrThrow(tree);\n-                                toplevelBuilder.addTypedef(tree, javaName, structDefinitionName(s));\n+                                toplevelBuilder.addTypedef(tree, structDefinitionName(s));\n@@ -335,1 +322,1 @@\n-            toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null);\n+            toplevelBuilder.addTypedef(tree, null);\n@@ -339,2 +326,1 @@\n-                String fiName = JavaFunctionalInterfaceName.getOrThrow(tree);\n-                boolean funcIntfGen = generateFunctionalInterface(func, fiName);\n+                boolean funcIntfGen = generateFunctionalInterface(tree, func);\n@@ -342,1 +328,1 @@\n-                    addFunctionTypedef(Type.typedef(tree.name(), tree.type()), fiName);\n+                    addFunctionTypedef(tree, Type.typedef(tree.name(), tree.type()));\n@@ -345,1 +331,1 @@\n-                toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null);\n+                toplevelBuilder.addTypedef(tree, null);\n@@ -349,1 +335,1 @@\n-                    toplevelBuilder.addTypedef(tree, JavaName.getOrThrow(tree), null, primitive);\n+                    toplevelBuilder.addTypedef(tree, null, primitive);\n@@ -405,1 +391,1 @@\n-            if (! generateFunctionalInterface(func, fiName)) {\n+            if (! generateFunctionalInterface(tree, func)) {\n@@ -415,1 +401,1 @@\n-        currentBuilder.addVar(tree, JavaName.getOrThrow(tree), layout, Optional.ofNullable(fiName));\n+        currentBuilder.addVar(tree, layout, Optional.ofNullable(fiName));\n@@ -449,2 +435,1 @@\n-        default void addVar(Declaration.Variable varTree, String javaName,\n-                            MemoryLayout layout, Optional<String> fiName) {\n+        default void addVar(Declaration.Variable varTree, MemoryLayout layout, Optional<String> fiName) {\n@@ -454,2 +439,1 @@\n-        default void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor,\n-                                 String javaName, List<String> parameterNames) {\n+        default void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor) {\n@@ -459,1 +443,1 @@\n-        default void addConstant(Declaration.Constant constantTree, String javaName, Class<?> javaType) {\n+        default void addConstant(Declaration.Constant constantTree, Class<?> javaType) {\n@@ -463,2 +447,2 @@\n-        default void addTypedef(Declaration.Typedef typedefTree, String javaName, String superClass) {\n-            addTypedef(typedefTree, javaName, superClass, typedefTree.type());\n+        default void addTypedef(Declaration.Typedef typedefTree, String superClass) {\n+            addTypedef(typedefTree, superClass, typedefTree.type());\n@@ -467,2 +451,1 @@\n-        default void addTypedef(Declaration.Typedef typedefTree, String javaName,\n-                                String superClass, Type type) {\n+        default void addTypedef(Declaration.Typedef typedefTree, String superClass, Type type) {\n@@ -472,2 +455,1 @@\n-        default StructBuilder addStruct(Declaration.Scoped structTree, boolean isNestedAnonStruct,\n-                                        String javaName, GroupLayout layout) {\n+        default StructBuilder addStruct(Declaration.Scoped structTree, GroupLayout layout) {\n@@ -477,2 +459,1 @@\n-        default void addFunctionalInterface(Type.Function funcType, String javaName,\n-                                    FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n+        default void addFunctionalInterface(Declaration declaration, Type.Function funcType, FunctionDescriptor descriptor) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":27,"deletions":46,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -34,0 +34,4 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.AnonymousStruct;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaParameterNames;\n@@ -116,3 +120,2 @@\n-    public StructBuilder addStruct(Declaration.Scoped tree, boolean isNestedAnonStruct,\n-                                   String name, GroupLayout layout) {\n-        if (isNestedAnonStruct) {\n+    public StructBuilder addStruct(Declaration.Scoped tree, GroupLayout layout) {\n+        if (AnonymousStruct.isPresent(tree)) {\n@@ -124,1 +127,2 @@\n-            StructBuilder builder = new StructBuilder(sourceFileBuilder(), \"public static final\", name, this, tree, layout);\n+            StructBuilder builder = new StructBuilder(sourceFileBuilder(), \"public static final\",\n+                    JavaName.getOrThrow(tree), this, tree, layout);\n@@ -132,2 +136,1 @@\n-    public void addFunctionalInterface(Type.Function funcType, String javaName,\n-                                       FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n+    public void addFunctionalInterface(Declaration declaration, Type.Function funcType, FunctionDescriptor descriptor) {\n@@ -135,1 +138,2 @@\n-        FunctionalInterfaceBuilder.generate(sourceFileBuilder(), javaName, this, funcType, descriptor, parameterNames);\n+        FunctionalInterfaceBuilder.generate(sourceFileBuilder(), JavaFunctionalInterfaceName.getOrThrow(declaration),\n+                this, funcType, descriptor, JavaParameterNames.get(funcType));\n@@ -140,2 +144,1 @@\n-    public void addVar(Declaration.Variable varTree, String javaName,\n-        MemoryLayout layout, Optional<String> fiName) {\n+    public void addVar(Declaration.Variable varTree, MemoryLayout layout, Optional<String> fiName) {\n@@ -143,0 +146,1 @@\n+        String javaName = JavaName.getOrThrow(varTree);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaName;\n+import org.openjdk.jextract.impl.DeclarationImpl.JavaParameterNames;\n@@ -92,3 +95,2 @@\n-    public void addVar(Declaration.Variable varTree, String javaName,\n-        MemoryLayout layout, Optional<String> fiName) {\n-        nextHeader().addVar(varTree, javaName, layout, fiName);\n+    public void addVar(Declaration.Variable varTree, MemoryLayout layout, Optional<String> fiName) {\n+        nextHeader().addVar(varTree, layout, fiName);\n@@ -98,3 +100,2 @@\n-    public void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor,\n-            String javaName, List<String> parameterNames) {\n-        nextHeader().addFunction(funcTree, descriptor, javaName, parameterNames);\n+    public void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor) {\n+        nextHeader().addFunction(funcTree, descriptor);\n@@ -104,2 +105,2 @@\n-    public void addConstant(Declaration.Constant constantTree, String javaName, Class<?> javaType) {\n-        nextHeader().addConstant(constantTree, javaName, javaType);\n+    public void addConstant(Declaration.Constant constantTree, Class<?> javaType) {\n+        nextHeader().addConstant(constantTree, javaType);\n@@ -109,2 +110,2 @@\n-    public void addTypedef(Declaration.Typedef typedefTree, String javaName,\n-        String superClass, Type type) {\n+    public void addTypedef(Declaration.Typedef typedefTree, String superClass, Type type) {\n+        String javaName = JavaName.getOrThrow(typedefTree);\n@@ -125,3 +126,2 @@\n-    public StructBuilder addStruct(Declaration.Scoped tree, boolean isNestedAnonStruct,\n-        String javaName, GroupLayout layout) {\n-        SourceFileBuilder sfb = SourceFileBuilder.newSourceFile(packageName(), javaName);\n+    public StructBuilder addStruct(Declaration.Scoped tree, GroupLayout layout) {\n+        SourceFileBuilder sfb = SourceFileBuilder.newSourceFile(packageName(), JavaName.getOrThrow(tree));\n@@ -135,3 +135,2 @@\n-    public void addFunctionalInterface(Type.Function funcType, String javaName,\n-        FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n-        SourceFileBuilder sfb = SourceFileBuilder.newSourceFile(packageName(), javaName);\n+    public void addFunctionalInterface(Declaration declaration, Type.Function funcType, FunctionDescriptor descriptor) {\n+        SourceFileBuilder sfb = SourceFileBuilder.newSourceFile(packageName(), JavaFunctionalInterfaceName.getOrThrow(declaration));\n@@ -139,1 +138,1 @@\n-        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, funcType, descriptor, parameterNames);\n+        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, funcType, descriptor, JavaParameterNames.get(funcType));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"}]}