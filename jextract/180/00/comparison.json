{"files":[{"patch":"@@ -61,1 +61,1 @@\n-        fib.emitFunctionalFactoryForPointer();\n+        fib.emitInvoke();\n@@ -68,1 +68,1 @@\n-            \\{methodType.returnType().getSimpleName()} apply(\\{paramExprs(\"\")});\n+            \\{methodType.returnType().getSimpleName()} apply(\\{paramExprs()});\n@@ -83,1 +83,1 @@\n-    private void emitFunctionalFactoryForPointer() {\n+    private void emitInvoke() {\n@@ -85,1 +85,3 @@\n-        String allocArg = needsAllocator ? \", (SegmentAllocator)arena\" : \"\";\n+        String allocParam = needsAllocator ? \", SegmentAllocator alloc\" : \"\";\n+        String allocArg = needsAllocator ? \", alloc\" : \"\";\n+        String paramStr = methodType.parameterCount() != 0 ? STR.\",\\{paramExprs()}\" : \"\";\n@@ -90,9 +92,6 @@\n-            static \\{className()} ofAddress(MemorySegment addr, Arena arena) {\n-                MemorySegment symbol = addr.reinterpret(arena, null);\n-                return (\\{paramExprs(\"_\")}) -> {\n-                    try {\n-                        \\{retExpr()} DOWN$MH.invokeExact(symbol\\{allocArg}\\{otherArgExprs()});\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n+            static \\{methodType.returnType().getSimpleName()} invoke(MemorySegment funcPtr\\{allocParam}\\{paramStr}) {\n+                try {\n+                    \\{retExpr()} DOWN$MH.invokeExact(funcPtr\\{allocArg}\\{otherArgExprs()});\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n@@ -112,1 +111,1 @@\n-    private String paramExprs(String paramNamePrefix) {\n+    private String paramExprs() {\n@@ -118,1 +117,1 @@\n-            result.append(paramNamePrefix).append(parameterName(i));\n+            result.append(parameterName(i));\n@@ -136,1 +135,1 @@\n-                    .mapToObj(i -> \"_\" + parameterName(i))\n+                    .mapToObj(this::parameterName)\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-            var barA = Foo.a.ofAddress(Foo.a(foo), arena).apply();\n-            var barB = Foo.b.ofAddress(Foo.b(foo), arena).apply(100);\n+            var barA = Foo.a.invoke(Foo.a(foo), arena);\n+            var barB = Foo.b.invoke(Foo.b(foo), arena, 100);\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            Foo.ofAddress(Bar.foo(bar), arena).apply(42);\n+            Foo.invoke(Bar.foo(bar), 42);\n@@ -67,1 +67,1 @@\n-            Foo.ofAddress(f(), arena).apply(42);\n+            Foo.invoke(f(), 42);\n@@ -78,1 +78,1 @@\n-            Baz.fp.ofAddress(Baz.fp(baz), arena).apply(42);\n+            Baz.fp.invoke(Baz.fp(baz), 42);\n@@ -88,1 +88,1 @@\n-            fp.ofAddress(fp(), arena).apply(42);\n+            fp.invoke(fp(), 42);\n@@ -97,1 +97,1 @@\n-            assertEquals(fp_addr.ofAddress(fp_addr(), arena).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n+            assertEquals(fp_addr.invoke(fp_addr(), MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-            var sumIface = Foo.sum.ofAddress(funcPtr, arena);\n-            assertEquals(sumIface.apply(15,20), 35);\n+            assertEquals(Foo.sum.invoke(funcPtr, 15, 20), 35);\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}