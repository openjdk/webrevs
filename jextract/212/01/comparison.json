{"files":[{"patch":"@@ -44,2 +44,2 @@\n-                                       String runtimeHelperName, Type.Function funcType) {\n-        super(builder, \"public\", Kind.CLASS, className, null, enclosing, runtimeHelperName);\n+                                       String runtimeHelperName, Type.Function funcType, boolean isNested) {\n+        super(builder, isNested ? \"public static\" : \"public\", Kind.CLASS, className, null, enclosing, runtimeHelperName);\n@@ -52,1 +52,1 @@\n-                                Declaration parentDecl, Type.Function funcType) {\n+                                Declaration parentDecl, Type.Function funcType, boolean isNested) {\n@@ -54,1 +54,1 @@\n-                enclosing, runtimeHelperName, funcType);\n+                enclosing, runtimeHelperName, funcType, isNested);\n@@ -58,0 +58,1 @@\n+        fib.emitDefaultConstructor();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-                this, runtimeHelperName(), parentDecl, funcType);\n+                this, runtimeHelperName(), parentDecl, funcType, true);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, mainHeaderClassName(), parentDecl, funcType);\n+        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, mainHeaderClassName(), parentDecl, funcType, false);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.reflect.Constructor;\n@@ -39,0 +40,1 @@\n+import java.lang.reflect.Modifier;\n@@ -46,0 +48,2 @@\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n@@ -170,0 +174,1 @@\n+        checkDefaultConstructor(cls);\n@@ -189,1 +194,3 @@\n-        Class<?> fiClass = loader.loadClass(\"com.acme.\" + name + \"$Function\");\n+        Class<?> fpClass = loader.loadClass(\"com.acme.\" + name);\n+        checkDefaultConstructor(fpClass);\n+        Class<?> fiClass = findNestedClass(fpClass, \"Function\");\n@@ -216,0 +223,8 @@\n+    private void checkDefaultConstructor(Class<?> cls) {\n+        try {\n+            Constructor<?> c = cls.getDeclaredConstructor();\n+            assertEquals(c.getModifiers(), 0, \"Unexpected constructor modifiers\");\n+        } catch (ReflectiveOperationException ex) {\n+            fail(\"Default constructor not found!\");\n+        }\n+    }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.toolprovider.nestedDecls;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.UnionLayout;\n+import java.lang.reflect.Modifier;\n+import java.nio.file.Path;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestNestedDecls extends JextractToolRunner {\n+\n+    Loader loader;\n+\n+    @BeforeClass\n+    public void beforeClass() {\n+        Path output = getOutputFilePath(\"TestNestedDecls-nestedDecls.h\");\n+        Path outputH = getInputFilePath(\"nested_decls.h\");\n+        runAndCompile(output, outputH.toString());\n+\n+        loader = classLoader(output);\n+    }\n+\n+    @AfterClass\n+    public void afterClass() {\n+        loader.close();\n+    }\n+\n+    @Test\n+    public void testNestedDeclarations() {\n+        Class<?> outerClass = loader.loadClass(\"Outer\");\n+        assertNotNull(outerClass);\n+        Class<?> fpClass = findNestedClass(outerClass, \"F\");\n+        checkStatic(fpClass);\n+        Class<?> innerClass = findNestedClass(outerClass, \"Inner\");\n+        assertNotNull(innerClass);\n+        checkStatic(innerClass);\n+    }\n+\n+    private void checkStatic(Class<?> cls) {\n+        assertEquals(cls.getModifiers() & Modifier.STATIC, Modifier.STATIC);\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedDecls\/TestNestedDecls.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -24,3 +24,6 @@\n-#include \"globalStructAccess.h\"\n-\n-struct Point p = { 1, 2 };\n+struct Outer {\n+    void (*F)(int a, int b);\n+    struct Inner {\n+        int x;\n+    } inner;\n+};\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedDecls\/nested_decls.h","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"test\/jtreg\/generator\/structAccessors\/libStructGlobal.c","status":"copied"}]}