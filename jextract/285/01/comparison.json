{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *   - Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *   - Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and\/or other materials provided with the distribution.\n+ *\n+ *   - Neither the name of Oracle nor the names of its\n+ *     contributors may be used to endorse or promote products derived\n+ *     from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+ * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.util.function.Consumer;\n+\n+import static oracle.code.onnx.foreign.ort_genai_c_h$shared.*;\n+import static oracle.code.onnx.foreign.ort_genai_c_h.*;\n+import oracle.code.onnx.foreign.ort_genai_c_h;\n+\n+public class OnnxGenerator implements AutoCloseable {\n+\n+\n+    static final String PROMPT_TEMPLATE = \"\"\"\n+    <|system|>\n+You are a helpful assistant.<|end|>\n+<|user|>\n+%s<|end|>\n+<|assistant|>\"\"\";\n+\n+\n+    private final Arena arena;\n+    private final MemorySegment ret, model, tokenizer, tokenizerStream, generatorParams, generator, count;\n+    private final Consumer<String> out;\n+\n+    public OnnxGenerator(String modelPath, Consumer<String> out) {\n+        arena = Arena.ofConfined();\n+        ret = arena.allocate(C_POINTER);\n+        this.out = out;\n+\n+        model = call(OgaCreateModel(arena.allocateFrom(modelPath), ret))\n+                .reinterpret(arena, ort_genai_c_h::OgaDestroyModel);\n+        tokenizer = call(OgaCreateTokenizer(model, ret))\n+                .reinterpret(arena, ort_genai_c_h::OgaDestroyTokenizer);\n+        tokenizerStream = call(OgaCreateTokenizerStream(tokenizer, ret))\n+                .reinterpret(arena, ort_genai_c_h::OgaDestroyTokenizerStream);\n+        generatorParams = call(OgaCreateGeneratorParams(model, ret))\n+                .reinterpret(arena, ort_genai_c_h::OgaDestroyGeneratorParams);\n+        call(OgaGeneratorParamsSetSearchNumber(generatorParams, arena.allocateFrom(\"max_length\"), 1024)); \/\/ this is necessary to run with GPU model\n+        generator = call(OgaCreateGenerator(model, generatorParams, ret))\n+                .reinterpret(arena, ort_genai_c_h::OgaDestroyGenerator);\n+        count = arena.allocate(C_LONG);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        System.loadLibrary(\"onnxruntime-genai\");\n+        Reader inreader = new InputStreamReader(System.in);\n+        try (var gen = new OnnxGenerator(args[0], System.out::print)) {\n+            BufferedReader in = new BufferedReader(inreader);\n+            String str;\n+            System.out.print(\"> \");\n+            while ((str = in.readLine()) != null) {\n+                gen.prompt(str);\n+                System.out.print(\"> \");\n+            }\n+            in.close();\n+        }\n+    }\n+\n+    private MemorySegment call(MemorySegment status) {\n+        try {\n+            if (!status.equals(MemorySegment.NULL)) {\n+                status = status.reinterpret(C_INT.byteSize());\n+                if (status.get(C_INT, 0) != 0) {\n+                    String errString = OgaResultGetError(status)\n+                            .reinterpret(Long.MAX_VALUE)\n+                            .getString(0L);\n+                    throw new RuntimeException(errString);\n+                }\n+            }\n+            return ret.get(C_POINTER, 0);\n+        } finally {\n+            OgaDestroyResult(status);\n+        }\n+    }\n+\n+    public int prompt(String userPrompt) {\n+        var inputTokens = call(OgaCreateSequences(ret));\n+        int ntokens = 0;\n+        try {\n+            call(OgaTokenizerEncode(tokenizer, arena.allocateFrom(PROMPT_TEMPLATE.formatted(userPrompt)), inputTokens));\n+            call(OgaGenerator_AppendTokenSequences(generator, inputTokens));\n+            while (!OgaGenerator_IsDone(generator)) {\n+                ntokens++;\n+                call(OgaGenerator_GenerateNextToken(generator));\n+                int nextToken = call(OgaGenerator_GetNextTokens(generator, ret, count)).get(C_INT, 0);\n+                String response = call(OgaTokenizerStreamDecode(tokenizerStream, nextToken, ret)).getString(0);\n+                out.accept(response);\n+            }\n+            out.accept(\"\\n\");\n+            return ntokens;\n+        } finally {\n+            OgaDestroySequences(inputTokens);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        arena.close();\n+    }\n+}\n","filename":"samples\/onnx\/OnnxGenerator.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+1. Clone `onnxruntime-genai` and build Java bindings:\n+\n+    ```bash\n+    git clone https:\/\/github.com\/microsoft\/onnxruntime-genai.git\n+    cd onnxruntime-genai\n+    .\/build.sh --build_java --config Release\n+   ````\n+    or\n+   ```bash\n+    .\/build.sh\n+    ```\n+\n+2. Set `ONNX_LIB_PATH` to the directory containing the built native library\n+   (e.g. where `libonnxruntime-genai.so` or `.dylib` lives):\n+\n+    ```bash\n+    export ONNX_LIB_PATH=\/...\/onnxruntime-genai\/build\/macOS\/RelWithDebInfo\/\n+    ```\n+\n+3. Set `ORT_GENAI_DIR` to your clone of `onnxruntime-genai` before running `compile.sh`:\n+\n+    ```bash\n+    export ORT_GENAI_DIR=\/path\/...\/onnxruntime-genai\/\n+    ```\n+\n+4. Download or prepare a valid ONNX model:\n+\n+   ```bash\n+    git clone https:\/\/huggingface.co\/microsoft\/Phi-3-mini-4k-instruct-onnx\n+    cd Phi-3-mini-4k-instruct-onnx\n+    export MODEL_PATH=\/path\/...\/Phi-3-mini-4k-instruct-onnx\/cpu_and_mobile\/cpu-int4-rtn-block-32-acc-level-4\/\n+    ```\n+\n+5. Run `compile.sh`:\n+\n+    ```bash\n+    .\/compile.sh\n+    ```\n+\n+6. Run the example:\n+\n+    ```bash\n+    sh .\/run.sh\n+    ```\n","filename":"samples\/onnx\/README.md","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+jextract \\\n+  --target-package oracle.code.onnx.foreign \\\n+  --output src \\\n+  \"$ORT_GENAI_DIR\/src\/ort_genai_c.h\"\n+\n+javac --release 24 -d . src\/oracle\/code\/onnx\/foreign\/*.java OnnxGenerator.java\n","filename":"samples\/onnx\/compile.sh","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+java \\\n+  --enable-native-access=ALL-UNNAMED \\\n+  -Djava.library.path=\"$ONNX_LIB_PATH\" \\\n+  OnnxGenerator \\\n+  \"$MODEL_PATH\"\n","filename":"samples\/onnx\/run.sh","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"}]}