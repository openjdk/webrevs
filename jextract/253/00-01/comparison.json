{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.reflect.Modifier;\n@@ -44,0 +45,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -321,0 +323,10 @@\n+\n+    \/\/ well known java type names that are potentially used\n+    \/\/ as unqualified name in the jextract generated code.\n+    private static final Set<String> WELL_KNOWN_JAVA_TYPES = ConcurrentHashMap.newKeySet();\n+    static {\n+        WELL_KNOWN_JAVA_TYPES.add(\"ByteOrder\");\n+        WELL_KNOWN_JAVA_TYPES.add(\"MethodHandle\");\n+        WELL_KNOWN_JAVA_TYPES.add(\"VarHandle\");\n+    }\n+\n@@ -328,16 +340,20 @@\n-        return switch (name) {\n-            case \"String\", \"Struct\", \"MethodHandle\",\n-                \"VarHandle\", \"ByteOrder\",\n-                \"FunctionDescriptor\", \"LibraryLookup\",\n-                \"MemoryLayout\",\n-                \"Arena\", \"NativeArena\", \"MemorySegment\", \"ValueLayout\"\n-                    -> true;\n-            default -> {\n-                try {\n-                    \/\/ java.lang package is auto-imported. Check if we've clash\n-                    \/\/ of the given identifier with any of the java.lang.* types.\n-                    Class.forName(\"java.lang.\" + name);\n-                    yield true;\n-                } catch (Exception ignored) {\n-                }\n-                yield false;\n+        if (WELL_KNOWN_JAVA_TYPES.contains(name)) {\n+            return true;\n+        }\n+\n+        \/\/ may be it is not cached as well-known java type yet.\n+        if (checkTypeInPackage(\"java.lang\", name)) {\n+            return true;\n+        } else if (checkTypeInPackage(\"java.lang.foreign\", name)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private static boolean checkTypeInPackage(String pkgName, String typeName) {\n+        try {\n+            int mods = Class.forName(pkgName + \".\" + typeName).getModifiers();\n+            if (Modifier.isPublic(mods)) {\n+                WELL_KNOWN_JAVA_TYPES.add(typeName);\n+                return true;\n@@ -345,1 +361,3 @@\n-        };\n+        } catch (Exception ignored) {\n+        }\n+        return false;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"}]}