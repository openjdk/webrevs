{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.reflect.Modifier;\n@@ -44,0 +45,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -321,0 +323,10 @@\n+\n+    \/\/ well known java type names that are potentially used\n+    \/\/ as unqualified name in the jextract generated code.\n+    private static final Set<String> WELL_KNOWN_JAVA_TYPES = ConcurrentHashMap.newKeySet();\n+    static {\n+        WELL_KNOWN_JAVA_TYPES.add(\"ByteOrder\");\n+        WELL_KNOWN_JAVA_TYPES.add(\"MethodHandle\");\n+        WELL_KNOWN_JAVA_TYPES.add(\"VarHandle\");\n+    }\n+\n@@ -322,0 +334,5 @@\n+        \/\/ rule out common case of lower-case starting identifier.\n+        if (name.length() == 0 || Character.isLowerCase(name.charAt(0))) {\n+            return false;\n+        }\n+\n@@ -323,9 +340,24 @@\n-        return switch (name) {\n-            case \"String\", \"Struct\", \"MethodHandle\",\n-                \"VarHandle\", \"ByteOrder\",\n-                \"FunctionDescriptor\", \"LibraryLookup\",\n-                \"MemoryLayout\",\n-                \"Arena\", \"NativeArena\", \"MemorySegment\", \"ValueLayout\"\n-                    -> true;\n-            default -> false;\n-        };\n+        if (WELL_KNOWN_JAVA_TYPES.contains(name)) {\n+            return true;\n+        }\n+\n+        \/\/ may be it is not cached as well-known java type yet.\n+        if (checkTypeInPackage(\"java.lang\", name)) {\n+            return true;\n+        } else if (checkTypeInPackage(\"java.lang.foreign\", name)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private static boolean checkTypeInPackage(String pkgName, String typeName) {\n+        try {\n+            int mods = Class.forName(pkgName + \".\" + typeName).getModifiers();\n+            if (Modifier.isPublic(mods)) {\n+                WELL_KNOWN_JAVA_TYPES.add(typeName);\n+                return true;\n+            }\n+        } catch (Exception ignored) {\n+        }\n+        return false;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":41,"deletions":9,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import java.nio.file.Path;\n+\n+import testlib.TestUtils;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import static org.testng.Assert.assertNotNull;\n+\n+\/\/ 7903776: jextract generates uncompilable code when C identifier with the name\n+\/\/ from \"java.lang\" classes is used\n+\n+public class TestJavaLangNames extends JextractToolRunner {\n+    @Test\n+    public void testJavaLangNames() {\n+        Path javaLangNamesOutput = getOutputFilePath(\"javaLangNamesgen\");\n+        Path javaLangNamesH = getInputFilePath(\"java_lang_names.h\");\n+        runAndCompile(javaLangNamesOutput, javaLangNamesH.toString());\n+        try(TestUtils.Loader loader = TestUtils.classLoader(javaLangNamesOutput)) {\n+            Class<?> headerCls = loader.loadClass(\"java_lang_names_h\");\n+            assertNotNull(findMethod(headerCls, \"Boolean_\"));\n+            assertNotNull(findMethod(headerCls, \"Integer_\"));\n+            assertNotNull(findMethod(headerCls, \"Object_\"));\n+        } finally {\n+            TestUtils.deleteDir(javaLangNamesOutput);\n+        }\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestJavaLangNames.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+typedef enum {\n+   Boolean,\n+   Integer,\n+   Object\n+} MyTypes;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/java_lang_names.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"}]}