{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jextract.impl.ClangException;\n@@ -505,4 +504,3 @@\n-        } catch (ClangException ce) {\n-            logger.print(ce);\n-            if (JextractTool.DEBUG) {\n-                logger.printStackTrace(ce);\n+\n+            if (logger.hasClangErrors()) {\n+                return CLANG_ERROR;\n@@ -510,1 +508,0 @@\n-            return CLANG_ERROR;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-package org.openjdk.jextract.impl;\n-\n-import org.openjdk.jextract.Position;\n-import org.openjdk.jextract.clang.Diagnostic;\n-\n-public class ClangException extends RuntimeException {\n-    private static final long serialVersionUID = 0L;\n-\n-    private final Position position;\n-    private final int severity;\n-    private final String spelling;\n-\n-    public ClangException(Position pos, int severity, String spelling) {\n-        super(spelling);\n-        this.position = pos;\n-        this.severity = severity;\n-        this.spelling = spelling;\n-    }\n-\n-    public Position position() {\n-        return position;\n-    }\n-\n-    public int severity() {\n-        return severity;\n-    }\n-\n-    public String spelling() {\n-        return spelling;\n-    }\n-\n-    public boolean isError() {\n-        return severity == Diagnostic.CXDiagnostic_Error;\n-    }\n-\n-    public boolean isFatal() {\n-        return severity == Diagnostic.CXDiagnostic_Fatal;\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClangException.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -48,0 +48,2 @@\n+    private int nClangWarnings;\n+    private int nClangErrors;\n@@ -54,8 +56,0 @@\n-    public void print(ClangException exp) {\n-        errWriter.println(String.format(\"%1$s: %2$s: %3$s\",\n-            position(exp.position()),\n-            exp.isFatal()? \"fatal\" : \"error\",\n-            exp.spelling()));\n-        nErrors++;\n-    }\n-\n@@ -96,0 +90,27 @@\n+    public void clangErr(Position pos, String msg) {\n+        errWriter.println(\n+            Position.NO_POSITION.equals(pos) ?\n+                String.format(\"error: %1$s\", msg) :\n+                String.format(\"%1$s: error: %2$s\", position(pos), msg)\n+        );\n+        nClangErrors++;\n+    }\n+\n+    public void clangWarn(Position pos, String msg) {\n+        errWriter.println(\n+            Position.NO_POSITION.equals(pos) ?\n+                String.format(\"warning: %1$s\", msg) :\n+                String.format(\"%1$s: warning: %2$s\", position(pos), msg)\n+        );\n+        nClangWarnings++;\n+    }\n+\n+\n+    public void clangInfo(Position pos, String msg) {\n+        if (Position.NO_POSITION.equals(pos)) {\n+            errWriter.println(msg);\n+        } else {\n+            errWriter.println(position(pos) + \": \" + msg);\n+        }\n+    }\n+\n@@ -123,0 +144,8 @@\n+    public boolean hasClangErrors() {\n+        return nClangErrors > 0;\n+    }\n+\n+    public boolean hasClangWarnings() {\n+        return nClangWarnings > 0;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Logger.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+                    Position pos = asPosition(d.location().getSpellingLocation());\n@@ -103,4 +104,5 @@\n-                        throw new ClangException(\n-                            asPosition(d.location().getSpellingLocation()),\n-                            d.severity(),\n-                            d.spelling());\n+                        logger.clangErr(pos, d.spelling());\n+                    } else if (d.severity() == Diagnostic.CXDiagnostic_Warning) {\n+                        logger.clangWarn(pos, d.spelling());\n+                    } else if (d.severity() == Diagnostic.CXDiagnostic_Note) {\n+                        logger.clangInfo(pos, d.spelling());\n@@ -118,1 +120,2 @@\n-        return new PositionRecord(loc.path(), loc.line(), loc.column());\n+        return loc.path() == null ? Position.NO_POSITION :\n+               new PositionRecord(loc.path(), loc.line(), loc.column());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Parser.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}