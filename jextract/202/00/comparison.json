{"files":[{"patch":"@@ -68,1 +68,0 @@\n-    private static final long kind$OFFSET = 0;\n@@ -71,0 +70,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind kind\n+     * }\n+     *\/\n+    public static final OfInt kind$layout() {\n+        return kind$LAYOUT;\n+    }\n+\n+    private static final long kind$OFFSET = 0;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind kind\n+     * }\n+     *\/\n+    public static final long kind$offset() {\n+        return kind$OFFSET;\n+    }\n+\n@@ -91,1 +112,0 @@\n-    private static final long xdata$OFFSET = 4;\n@@ -94,0 +114,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * int xdata\n+     * }\n+     *\/\n+    public static final OfInt xdata$layout() {\n+        return xdata$LAYOUT;\n+    }\n+\n+    private static final long xdata$OFFSET = 4;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * int xdata\n+     * }\n+     *\/\n+    public static final long xdata$offset() {\n+        return xdata$OFFSET;\n+    }\n+\n@@ -114,0 +156,12 @@\n+    private static final SequenceLayout data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement(\"data\"));\n+\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static final SequenceLayout data$layout() {\n+        return data$LAYOUT;\n+    }\n+\n@@ -115,1 +169,10 @@\n-    private static final long data$SIZE = 24;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static final long data$offset() {\n+        return data$OFFSET;\n+    }\n@@ -124,1 +187,1 @@\n-        return struct.asSlice(data$OFFSET, data$SIZE);\n+        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());\n@@ -134,1 +197,34 @@\n-        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$SIZE);\n+        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());\n+    }\n+\n+    private static long[] data$DIMS = { 3 };\n+\n+    \/**\n+     * Dimensions for array field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static long[] data$dimensions() {\n+        return data$DIMS;\n+    }\n+    private static final VarHandle data$ELEM_HANDLE = data$LAYOUT.varHandle(sequenceElement());\n+\n+    \/**\n+     * Indexed getter for field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static MemorySegment data(MemorySegment struct, long index0) {\n+        return (MemorySegment)data$ELEM_HANDLE.get(struct, 0L, index0);\n+    }\n+\n+    \/**\n+     * Indexed setter for field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static void data(MemorySegment struct, long index0, MemorySegment fieldValue) {\n+        data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursor.java","additions":101,"deletions":5,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -67,0 +67,12 @@\n+    private static final SequenceLayout ptr_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement(\"ptr_data\"));\n+\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static final SequenceLayout ptr_data$layout() {\n+        return ptr_data$LAYOUT;\n+    }\n+\n@@ -68,1 +80,10 @@\n-    private static final long ptr_data$SIZE = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static final long ptr_data$offset() {\n+        return ptr_data$OFFSET;\n+    }\n@@ -77,1 +98,1 @@\n-        return struct.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+        return struct.asSlice(ptr_data$OFFSET, ptr_data$LAYOUT.byteSize());\n@@ -87,1 +108,34 @@\n-        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$SIZE);\n+        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$LAYOUT.byteSize());\n+    }\n+\n+    private static long[] ptr_data$DIMS = { 2 };\n+\n+    \/**\n+     * Dimensions for array field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static long[] ptr_data$dimensions() {\n+        return ptr_data$DIMS;\n+    }\n+    private static final VarHandle ptr_data$ELEM_HANDLE = ptr_data$LAYOUT.varHandle(sequenceElement());\n+\n+    \/**\n+     * Indexed getter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static MemorySegment ptr_data(MemorySegment struct, long index0) {\n+        return (MemorySegment)ptr_data$ELEM_HANDLE.get(struct, 0L, index0);\n+    }\n+\n+    \/**\n+     * Indexed setter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static void ptr_data(MemorySegment struct, long index0, MemorySegment fieldValue) {\n+        ptr_data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);\n@@ -90,1 +144,0 @@\n-    private static final long int_data$OFFSET = 16;\n@@ -93,0 +146,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data\n+     * }\n+     *\/\n+    public static final OfInt int_data$layout() {\n+        return int_data$LAYOUT;\n+    }\n+\n+    private static final long int_data$OFFSET = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data\n+     * }\n+     *\/\n+    public static final long int_data$offset() {\n+        return int_data$OFFSET;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceLocation.java","additions":79,"deletions":4,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -68,0 +68,12 @@\n+    private static final SequenceLayout ptr_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement(\"ptr_data\"));\n+\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static final SequenceLayout ptr_data$layout() {\n+        return ptr_data$LAYOUT;\n+    }\n+\n@@ -69,1 +81,10 @@\n-    private static final long ptr_data$SIZE = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static final long ptr_data$offset() {\n+        return ptr_data$OFFSET;\n+    }\n@@ -78,1 +99,1 @@\n-        return struct.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+        return struct.asSlice(ptr_data$OFFSET, ptr_data$LAYOUT.byteSize());\n@@ -88,1 +109,34 @@\n-        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$SIZE);\n+        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$LAYOUT.byteSize());\n+    }\n+\n+    private static long[] ptr_data$DIMS = { 2 };\n+\n+    \/**\n+     * Dimensions for array field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static long[] ptr_data$dimensions() {\n+        return ptr_data$DIMS;\n+    }\n+    private static final VarHandle ptr_data$ELEM_HANDLE = ptr_data$LAYOUT.varHandle(sequenceElement());\n+\n+    \/**\n+     * Indexed getter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static MemorySegment ptr_data(MemorySegment struct, long index0) {\n+        return (MemorySegment)ptr_data$ELEM_HANDLE.get(struct, 0L, index0);\n+    }\n+\n+    \/**\n+     * Indexed setter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static void ptr_data(MemorySegment struct, long index0, MemorySegment fieldValue) {\n+        ptr_data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);\n@@ -91,1 +145,0 @@\n-    private static final long begin_int_data$OFFSET = 16;\n@@ -94,0 +147,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned int begin_int_data\n+     * }\n+     *\/\n+    public static final OfInt begin_int_data$layout() {\n+        return begin_int_data$LAYOUT;\n+    }\n+\n+    private static final long begin_int_data$OFFSET = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned int begin_int_data\n+     * }\n+     *\/\n+    public static final long begin_int_data$offset() {\n+        return begin_int_data$OFFSET;\n+    }\n+\n@@ -114,1 +189,0 @@\n-    private static final long end_int_data$OFFSET = 20;\n@@ -117,0 +191,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned int end_int_data\n+     * }\n+     *\/\n+    public static final OfInt end_int_data$layout() {\n+        return end_int_data$LAYOUT;\n+    }\n+\n+    private static final long end_int_data$OFFSET = 20;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned int end_int_data\n+     * }\n+     *\/\n+    public static final long end_int_data$offset() {\n+        return end_int_data$OFFSET;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceRange.java","additions":101,"deletions":5,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-    private static final long data$OFFSET = 0;\n@@ -70,0 +69,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const void *data\n+     * }\n+     *\/\n+    public static final AddressLayout data$layout() {\n+        return data$LAYOUT;\n+    }\n+\n+    private static final long data$OFFSET = 0;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const void *data\n+     * }\n+     *\/\n+    public static final long data$offset() {\n+        return data$OFFSET;\n+    }\n+\n@@ -90,1 +111,0 @@\n-    private static final long private_flags$OFFSET = 8;\n@@ -93,0 +113,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned int private_flags\n+     * }\n+     *\/\n+    public static final OfInt private_flags$layout() {\n+        return private_flags$LAYOUT;\n+    }\n+\n+    private static final long private_flags$OFFSET = 8;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned int private_flags\n+     * }\n+     *\/\n+    public static final long private_flags$offset() {\n+        return private_flags$OFFSET;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -66,0 +66,12 @@\n+    private static final SequenceLayout int_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement(\"int_data\"));\n+\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static final SequenceLayout int_data$layout() {\n+        return int_data$LAYOUT;\n+    }\n+\n@@ -67,1 +79,10 @@\n-    private static final long int_data$SIZE = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static final long int_data$offset() {\n+        return int_data$OFFSET;\n+    }\n@@ -76,1 +97,1 @@\n-        return struct.asSlice(int_data$OFFSET, int_data$SIZE);\n+        return struct.asSlice(int_data$OFFSET, int_data$LAYOUT.byteSize());\n@@ -86,1 +107,34 @@\n-        MemorySegment.copy(fieldValue, 0L, struct, int_data$OFFSET, int_data$SIZE);\n+        MemorySegment.copy(fieldValue, 0L, struct, int_data$OFFSET, int_data$LAYOUT.byteSize());\n+    }\n+\n+    private static long[] int_data$DIMS = { 4 };\n+\n+    \/**\n+     * Dimensions for array field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static long[] int_data$dimensions() {\n+        return int_data$DIMS;\n+    }\n+    private static final VarHandle int_data$ELEM_HANDLE = int_data$LAYOUT.varHandle(sequenceElement());\n+\n+    \/**\n+     * Indexed getter for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static int int_data(MemorySegment struct, long index0) {\n+        return (int)int_data$ELEM_HANDLE.get(struct, 0L, index0);\n+    }\n+\n+    \/**\n+     * Indexed setter for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static void int_data(MemorySegment struct, long index0, int fieldValue) {\n+        int_data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);\n@@ -89,1 +143,0 @@\n-    private static final long ptr_data$OFFSET = 16;\n@@ -92,0 +145,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * void *ptr_data\n+     * }\n+     *\/\n+    public static final AddressLayout ptr_data$layout() {\n+        return ptr_data$LAYOUT;\n+    }\n+\n+    private static final long ptr_data$OFFSET = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * void *ptr_data\n+     * }\n+     *\/\n+    public static final long ptr_data$offset() {\n+        return ptr_data$OFFSET;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":79,"deletions":4,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-    private static final long kind$OFFSET = 0;\n@@ -70,0 +69,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * enum CXTypeKind kind\n+     * }\n+     *\/\n+    public static final OfInt kind$layout() {\n+        return kind$LAYOUT;\n+    }\n+\n+    private static final long kind$OFFSET = 0;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * enum CXTypeKind kind\n+     * }\n+     *\/\n+    public static final long kind$offset() {\n+        return kind$OFFSET;\n+    }\n+\n@@ -90,0 +111,12 @@\n+    private static final SequenceLayout data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement(\"data\"));\n+\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static final SequenceLayout data$layout() {\n+        return data$LAYOUT;\n+    }\n+\n@@ -91,1 +124,10 @@\n-    private static final long data$SIZE = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static final long data$offset() {\n+        return data$OFFSET;\n+    }\n@@ -100,1 +142,1 @@\n-        return struct.asSlice(data$OFFSET, data$SIZE);\n+        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());\n@@ -110,1 +152,34 @@\n-        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$SIZE);\n+        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());\n+    }\n+\n+    private static long[] data$DIMS = { 2 };\n+\n+    \/**\n+     * Dimensions for array field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static long[] data$dimensions() {\n+        return data$DIMS;\n+    }\n+    private static final VarHandle data$ELEM_HANDLE = data$LAYOUT.varHandle(sequenceElement());\n+\n+    \/**\n+     * Indexed getter for field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static MemorySegment data(MemorySegment struct, long index0) {\n+        return (MemorySegment)data$ELEM_HANDLE.get(struct, 0L, index0);\n+    }\n+\n+    \/**\n+     * Indexed setter for field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static void data(MemorySegment struct, long index0, MemorySegment fieldValue) {\n+        data$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":79,"deletions":4,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-    private static final long Filename$OFFSET = 0;\n@@ -71,0 +70,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const char *Filename\n+     * }\n+     *\/\n+    public static final AddressLayout Filename$layout() {\n+        return Filename$LAYOUT;\n+    }\n+\n+    private static final long Filename$OFFSET = 0;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const char *Filename\n+     * }\n+     *\/\n+    public static final long Filename$offset() {\n+        return Filename$OFFSET;\n+    }\n+\n@@ -91,1 +112,0 @@\n-    private static final long Contents$OFFSET = 8;\n@@ -94,0 +114,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * const char *Contents\n+     * }\n+     *\/\n+    public static final AddressLayout Contents$layout() {\n+        return Contents$LAYOUT;\n+    }\n+\n+    private static final long Contents$OFFSET = 8;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * const char *Contents\n+     * }\n+     *\/\n+    public static final long Contents$offset() {\n+        return Contents$OFFSET;\n+    }\n+\n@@ -114,1 +156,0 @@\n-    private static final long Length$OFFSET = 16;\n@@ -117,0 +158,22 @@\n+    \/**\n+     * Layout for field:\n+     * {@snippet lang=c :\n+     * unsigned long Length\n+     * }\n+     *\/\n+    public static final OfLong Length$layout() {\n+        return Length$LAYOUT;\n+    }\n+\n+    private static final long Length$OFFSET = 16;\n+\n+    \/**\n+     * Offset for field:\n+     * {@snippet lang=c :\n+     * unsigned long Length\n+     * }\n+     *\/\n+    public static final long Length$offset() {\n+        return Length$OFFSET;\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":66,"deletions":3,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -42,8 +42,0 @@\n-    static final SymbolLookup SYMBOL_LOOKUP\n-            = SymbolLookup.loaderLookup().or(Linker.nativeLinker().defaultLookup());\n-\n-    static {\n-        String libName = System.getProperty(\"os.name\").startsWith(\"Windows\")? \"libclang\" : \"clang\";\n-        System.loadLibrary(libName);\n-    }\n-\n@@ -54,11 +46,0 @@\n-    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n-    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n-    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n-    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n-    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n-    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n-            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));\n-    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n-\n@@ -121,0 +102,19 @@\n+\n+    static {\n+        String libName = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"libclang\" : \"clang\";\n+        System.loadLibrary(libName);\n+    }\n+\n+    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()\n+            .or(Linker.nativeLinker().defaultLookup());\n+\n+    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n+            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));\n+    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n@@ -167,6 +167,5 @@\n-    private static MethodHandle clang_getCString$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                CXString.layout()\n-            );\n+    private static class clang_getCString$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXString.layout()\n+        );\n@@ -174,1 +173,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -177,2 +176,0 @@\n-        }\n-        return Holder.MH;\n@@ -181,0 +178,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCString$descriptor() {\n+        return clang_getCString$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCString$handle() {\n+        return clang_getCString$constants.HANDLE;\n+    }\n@@ -187,1 +203,1 @@\n-        var mh$ = clang_getCString$MH();\n+        var mh$ = clang_getCString$constants.HANDLE;\n@@ -198,5 +214,4 @@\n-    private static MethodHandle clang_disposeString$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                CXString.layout()\n-            );\n+    private static class clang_disposeString$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXString.layout()\n+        );\n@@ -204,1 +219,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -207,2 +222,0 @@\n-        }\n-        return Holder.MH;\n@@ -211,0 +224,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeString$descriptor() {\n+        return clang_disposeString$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeString$handle() {\n+        return clang_disposeString$constants.HANDLE;\n+    }\n@@ -217,1 +249,1 @@\n-        var mh$ = clang_disposeString$MH();\n+        var mh$ = clang_disposeString$constants.HANDLE;\n@@ -330,7 +362,6 @@\n-    private static MethodHandle clang_createIndex$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_createIndex$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -338,1 +369,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -341,2 +372,0 @@\n-        }\n-        return Holder.MH;\n@@ -345,0 +374,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_createIndex$descriptor() {\n+        return clang_createIndex$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n+     * }\n+     *\/\n+    public static MethodHandle clang_createIndex$handle() {\n+        return clang_createIndex$constants.HANDLE;\n+    }\n@@ -351,1 +399,1 @@\n-        var mh$ = clang_createIndex$MH();\n+        var mh$ = clang_createIndex$constants.HANDLE;\n@@ -362,5 +410,4 @@\n-    private static MethodHandle clang_disposeIndex$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_disposeIndex$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n@@ -368,1 +415,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -371,2 +418,0 @@\n-        }\n-        return Holder.MH;\n@@ -375,0 +420,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeIndex$descriptor() {\n+        return clang_disposeIndex$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeIndex$handle() {\n+        return clang_disposeIndex$constants.HANDLE;\n+    }\n@@ -381,1 +445,1 @@\n-        var mh$ = clang_disposeIndex$MH();\n+        var mh$ = clang_disposeIndex$constants.HANDLE;\n@@ -392,6 +456,5 @@\n-    private static MethodHandle clang_getFileName$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getFileName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -399,1 +462,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -402,2 +465,0 @@\n-        }\n-        return Holder.MH;\n@@ -406,0 +467,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getFileName$descriptor() {\n+        return clang_getFileName$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFileName$handle() {\n+        return clang_getFileName$constants.HANDLE;\n+    }\n@@ -412,1 +492,1 @@\n-        var mh$ = clang_getFileName$MH();\n+        var mh$ = clang_getFileName$constants.HANDLE;\n@@ -423,4 +503,3 @@\n-    private static MethodHandle clang_getNullLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout()        );\n+    private static class clang_getNullLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout()    );\n@@ -428,1 +507,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -431,2 +510,0 @@\n-        }\n-        return Holder.MH;\n@@ -435,0 +512,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNullLocation$descriptor() {\n+        return clang_getNullLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNullLocation$handle() {\n+        return clang_getNullLocation$constants.HANDLE;\n+    }\n@@ -441,1 +537,1 @@\n-        var mh$ = clang_getNullLocation$MH();\n+        var mh$ = clang_getNullLocation$constants.HANDLE;\n@@ -452,7 +548,6 @@\n-    private static MethodHandle clang_equalLocations$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXSourceLocation.layout(),\n-                CXSourceLocation.layout()\n-            );\n+    private static class clang_equalLocations$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout(),\n+            CXSourceLocation.layout()\n+        );\n@@ -460,1 +555,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -463,2 +558,0 @@\n-        }\n-        return Holder.MH;\n@@ -467,0 +560,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_equalLocations$descriptor() {\n+        return clang_equalLocations$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n+    public static MethodHandle clang_equalLocations$handle() {\n+        return clang_equalLocations$constants.HANDLE;\n+    }\n@@ -473,1 +585,1 @@\n-        var mh$ = clang_equalLocations$MH();\n+        var mh$ = clang_equalLocations$constants.HANDLE;\n@@ -484,9 +596,8 @@\n-    private static MethodHandle clang_getLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_getLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -494,1 +605,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -497,2 +608,0 @@\n-        }\n-        return Holder.MH;\n@@ -501,0 +610,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getLocation$descriptor() {\n+        return clang_getLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getLocation$handle() {\n+        return clang_getLocation$constants.HANDLE;\n+    }\n@@ -507,1 +635,1 @@\n-        var mh$ = clang_getLocation$MH();\n+        var mh$ = clang_getLocation$constants.HANDLE;\n@@ -518,8 +646,7 @@\n-    private static MethodHandle clang_getLocationForOffset$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_getLocationForOffset$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -527,1 +654,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -530,2 +657,0 @@\n-        }\n-        return Holder.MH;\n@@ -534,0 +659,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getLocationForOffset$descriptor() {\n+        return clang_getLocationForOffset$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getLocationForOffset$handle() {\n+        return clang_getLocationForOffset$constants.HANDLE;\n+    }\n@@ -540,1 +684,1 @@\n-        var mh$ = clang_getLocationForOffset$MH();\n+        var mh$ = clang_getLocationForOffset$constants.HANDLE;\n@@ -551,6 +695,5 @@\n-    private static MethodHandle clang_Location_isInSystemHeader$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXSourceLocation.layout()\n-            );\n+    private static class clang_Location_isInSystemHeader$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout()\n+        );\n@@ -558,1 +701,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -561,2 +704,0 @@\n-        }\n-        return Holder.MH;\n@@ -565,0 +706,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Location_isInSystemHeader$descriptor() {\n+        return clang_Location_isInSystemHeader$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Location_isInSystemHeader$handle() {\n+        return clang_Location_isInSystemHeader$constants.HANDLE;\n+    }\n@@ -571,1 +731,1 @@\n-        var mh$ = clang_Location_isInSystemHeader$MH();\n+        var mh$ = clang_Location_isInSystemHeader$constants.HANDLE;\n@@ -582,6 +742,5 @@\n-    private static MethodHandle clang_Location_isFromMainFile$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXSourceLocation.layout()\n-            );\n+    private static class clang_Location_isFromMainFile$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout()\n+        );\n@@ -589,1 +748,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -592,2 +751,0 @@\n-        }\n-        return Holder.MH;\n@@ -596,0 +753,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Location_isFromMainFile$descriptor() {\n+        return clang_Location_isFromMainFile$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Location_isFromMainFile$handle() {\n+        return clang_Location_isFromMainFile$constants.HANDLE;\n+    }\n@@ -602,1 +778,1 @@\n-        var mh$ = clang_Location_isFromMainFile$MH();\n+        var mh$ = clang_Location_isFromMainFile$constants.HANDLE;\n@@ -613,6 +789,5 @@\n-    private static MethodHandle clang_Range_isNull$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXSourceRange.layout()\n-            );\n+    private static class clang_Range_isNull$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceRange.layout()\n+        );\n@@ -620,1 +795,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -623,2 +798,0 @@\n-        }\n-        return Holder.MH;\n@@ -627,0 +800,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Range_isNull$descriptor() {\n+        return clang_Range_isNull$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Range_isNull$handle() {\n+        return clang_Range_isNull$constants.HANDLE;\n+    }\n@@ -633,1 +825,1 @@\n-        var mh$ = clang_Range_isNull$MH();\n+        var mh$ = clang_Range_isNull$constants.HANDLE;\n@@ -644,9 +836,8 @@\n-    private static MethodHandle clang_getExpansionLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getExpansionLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -654,1 +845,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -657,2 +848,0 @@\n-        }\n-        return Holder.MH;\n@@ -661,0 +850,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getExpansionLocation$descriptor() {\n+        return clang_getExpansionLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getExpansionLocation$handle() {\n+        return clang_getExpansionLocation$constants.HANDLE;\n+    }\n@@ -667,1 +875,1 @@\n-        var mh$ = clang_getExpansionLocation$MH();\n+        var mh$ = clang_getExpansionLocation$constants.HANDLE;\n@@ -678,9 +886,8 @@\n-    private static MethodHandle clang_getSpellingLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getSpellingLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -688,1 +895,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -691,2 +898,0 @@\n-        }\n-        return Holder.MH;\n@@ -695,0 +900,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getSpellingLocation$descriptor() {\n+        return clang_getSpellingLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getSpellingLocation$handle() {\n+        return clang_getSpellingLocation$constants.HANDLE;\n+    }\n@@ -701,1 +925,1 @@\n-        var mh$ = clang_getSpellingLocation$MH();\n+        var mh$ = clang_getSpellingLocation$constants.HANDLE;\n@@ -712,9 +936,8 @@\n-    private static MethodHandle clang_getFileLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getFileLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -722,1 +945,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -725,2 +948,0 @@\n-        }\n-        return Holder.MH;\n@@ -729,0 +950,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getFileLocation$descriptor() {\n+        return clang_getFileLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFileLocation$handle() {\n+        return clang_getFileLocation$constants.HANDLE;\n+    }\n@@ -735,1 +975,1 @@\n-        var mh$ = clang_getFileLocation$MH();\n+        var mh$ = clang_getFileLocation$constants.HANDLE;\n@@ -746,6 +986,5 @@\n-    private static MethodHandle clang_getRangeStart$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                CXSourceRange.layout()\n-            );\n+    private static class clang_getRangeStart$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXSourceRange.layout()\n+        );\n@@ -753,1 +992,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -756,2 +995,0 @@\n-        }\n-        return Holder.MH;\n@@ -760,0 +997,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getRangeStart$descriptor() {\n+        return clang_getRangeStart$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getRangeStart$handle() {\n+        return clang_getRangeStart$constants.HANDLE;\n+    }\n@@ -766,1 +1022,1 @@\n-        var mh$ = clang_getRangeStart$MH();\n+        var mh$ = clang_getRangeStart$constants.HANDLE;\n@@ -777,6 +1033,5 @@\n-    private static MethodHandle clang_getRangeEnd$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                CXSourceRange.layout()\n-            );\n+    private static class clang_getRangeEnd$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXSourceRange.layout()\n+        );\n@@ -784,1 +1039,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -787,2 +1042,0 @@\n-        }\n-        return Holder.MH;\n@@ -791,0 +1044,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getRangeEnd$descriptor() {\n+        return clang_getRangeEnd$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getRangeEnd$handle() {\n+        return clang_getRangeEnd$constants.HANDLE;\n+    }\n@@ -797,1 +1069,1 @@\n-        var mh$ = clang_getRangeEnd$MH();\n+        var mh$ = clang_getRangeEnd$constants.HANDLE;\n@@ -853,6 +1125,5 @@\n-    private static MethodHandle clang_getChildDiagnostics$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getChildDiagnostics$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -860,1 +1131,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -863,2 +1134,0 @@\n-        }\n-        return Holder.MH;\n@@ -867,0 +1136,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getChildDiagnostics$descriptor() {\n+        return clang_getChildDiagnostics$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getChildDiagnostics$handle() {\n+        return clang_getChildDiagnostics$constants.HANDLE;\n+    }\n@@ -873,1 +1161,1 @@\n-        var mh$ = clang_getChildDiagnostics$MH();\n+        var mh$ = clang_getChildDiagnostics$constants.HANDLE;\n@@ -884,6 +1172,5 @@\n-    private static MethodHandle clang_getNumDiagnostics$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getNumDiagnostics$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -891,1 +1178,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -894,2 +1181,0 @@\n-        }\n-        return Holder.MH;\n@@ -898,0 +1183,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNumDiagnostics$descriptor() {\n+        return clang_getNumDiagnostics$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNumDiagnostics$handle() {\n+        return clang_getNumDiagnostics$constants.HANDLE;\n+    }\n@@ -904,1 +1208,1 @@\n-        var mh$ = clang_getNumDiagnostics$MH();\n+        var mh$ = clang_getNumDiagnostics$constants.HANDLE;\n@@ -915,7 +1219,6 @@\n-    private static MethodHandle clang_getDiagnostic$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_getDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -923,1 +1226,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -926,2 +1229,0 @@\n-        }\n-        return Holder.MH;\n@@ -930,0 +1231,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getDiagnostic$descriptor() {\n+        return clang_getDiagnostic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getDiagnostic$handle() {\n+        return clang_getDiagnostic$constants.HANDLE;\n+    }\n@@ -936,1 +1256,1 @@\n-        var mh$ = clang_getDiagnostic$MH();\n+        var mh$ = clang_getDiagnostic$constants.HANDLE;\n@@ -947,5 +1267,4 @@\n-    private static MethodHandle clang_disposeDiagnostic$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_disposeDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n@@ -953,1 +1272,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -956,2 +1275,0 @@\n-        }\n-        return Holder.MH;\n@@ -960,0 +1277,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeDiagnostic$descriptor() {\n+        return clang_disposeDiagnostic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeDiagnostic$handle() {\n+        return clang_disposeDiagnostic$constants.HANDLE;\n+    }\n@@ -966,1 +1302,1 @@\n-        var mh$ = clang_disposeDiagnostic$MH();\n+        var mh$ = clang_disposeDiagnostic$constants.HANDLE;\n@@ -1031,7 +1367,6 @@\n-    private static MethodHandle clang_formatDiagnostic$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_formatDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -1039,1 +1374,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1042,2 +1377,0 @@\n-        }\n-        return Holder.MH;\n@@ -1046,0 +1379,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_formatDiagnostic$descriptor() {\n+        return clang_formatDiagnostic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n+     * }\n+     *\/\n+    public static MethodHandle clang_formatDiagnostic$handle() {\n+        return clang_formatDiagnostic$constants.HANDLE;\n+    }\n@@ -1052,1 +1404,1 @@\n-        var mh$ = clang_formatDiagnostic$MH();\n+        var mh$ = clang_formatDiagnostic$constants.HANDLE;\n@@ -1063,4 +1415,3 @@\n-    private static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT        );\n+    private static class clang_defaultDiagnosticDisplayOptions$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT    );\n@@ -1068,1 +1419,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1071,2 +1422,0 @@\n-        }\n-        return Holder.MH;\n@@ -1075,0 +1424,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_defaultDiagnosticDisplayOptions$descriptor() {\n+        return clang_defaultDiagnosticDisplayOptions$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n+     * }\n+     *\/\n+    public static MethodHandle clang_defaultDiagnosticDisplayOptions$handle() {\n+        return clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+    }\n@@ -1081,1 +1449,1 @@\n-        var mh$ = clang_defaultDiagnosticDisplayOptions$MH();\n+        var mh$ = clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n@@ -1092,6 +1460,5 @@\n-    private static MethodHandle clang_getDiagnosticSeverity$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getDiagnosticSeverity$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -1099,1 +1466,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1102,2 +1469,0 @@\n-        }\n-        return Holder.MH;\n@@ -1106,0 +1471,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getDiagnosticSeverity$descriptor() {\n+        return clang_getDiagnosticSeverity$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getDiagnosticSeverity$handle() {\n+        return clang_getDiagnosticSeverity$constants.HANDLE;\n+    }\n@@ -1112,1 +1496,1 @@\n-        var mh$ = clang_getDiagnosticSeverity$MH();\n+        var mh$ = clang_getDiagnosticSeverity$constants.HANDLE;\n@@ -1123,6 +1507,5 @@\n-    private static MethodHandle clang_getDiagnosticLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getDiagnosticLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -1130,1 +1513,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1133,2 +1516,0 @@\n-        }\n-        return Holder.MH;\n@@ -1137,0 +1518,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getDiagnosticLocation$descriptor() {\n+        return clang_getDiagnosticLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getDiagnosticLocation$handle() {\n+        return clang_getDiagnosticLocation$constants.HANDLE;\n+    }\n@@ -1143,1 +1543,1 @@\n-        var mh$ = clang_getDiagnosticLocation$MH();\n+        var mh$ = clang_getDiagnosticLocation$constants.HANDLE;\n@@ -1154,6 +1554,5 @@\n-    private static MethodHandle clang_getDiagnosticSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getDiagnosticSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -1161,1 +1560,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1164,2 +1563,0 @@\n-        }\n-        return Holder.MH;\n@@ -1168,0 +1565,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getDiagnosticSpelling$descriptor() {\n+        return clang_getDiagnosticSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getDiagnosticSpelling$handle() {\n+        return clang_getDiagnosticSpelling$constants.HANDLE;\n+    }\n@@ -1174,1 +1590,1 @@\n-        var mh$ = clang_getDiagnosticSpelling$MH();\n+        var mh$ = clang_getDiagnosticSpelling$constants.HANDLE;\n@@ -1338,14 +1754,13 @@\n-    private static MethodHandle clang_parseTranslationUnit$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n-\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+    private static class clang_parseTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1354,2 +1769,0 @@\n-        }\n-        return Holder.MH;\n@@ -1358,0 +1771,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_parseTranslationUnit$descriptor() {\n+        return clang_parseTranslationUnit$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MethodHandle clang_parseTranslationUnit$handle() {\n+        return clang_parseTranslationUnit$constants.HANDLE;\n+    }\n@@ -1364,1 +1796,1 @@\n-        var mh$ = clang_parseTranslationUnit$MH();\n+        var mh$ = clang_parseTranslationUnit$constants.HANDLE;\n@@ -1375,15 +1807,14 @@\n-    private static MethodHandle clang_parseTranslationUnit2$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n-\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+    private static class clang_parseTranslationUnit2$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1392,2 +1823,0 @@\n-        }\n-        return Holder.MH;\n@@ -1396,0 +1825,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_parseTranslationUnit2$descriptor() {\n+        return clang_parseTranslationUnit2$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n+     * }\n+     *\/\n+    public static MethodHandle clang_parseTranslationUnit2$handle() {\n+        return clang_parseTranslationUnit2$constants.HANDLE;\n+    }\n@@ -1402,1 +1850,1 @@\n-        var mh$ = clang_parseTranslationUnit2$MH();\n+        var mh$ = clang_parseTranslationUnit2$constants.HANDLE;\n@@ -1458,8 +1906,7 @@\n-    private static MethodHandle clang_saveTranslationUnit$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_saveTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -1467,1 +1914,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1470,2 +1917,0 @@\n-        }\n-        return Holder.MH;\n@@ -1474,0 +1919,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_saveTranslationUnit$descriptor() {\n+        return clang_saveTranslationUnit$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n+     * }\n+     *\/\n+    public static MethodHandle clang_saveTranslationUnit$handle() {\n+        return clang_saveTranslationUnit$constants.HANDLE;\n+    }\n@@ -1480,1 +1944,1 @@\n-        var mh$ = clang_saveTranslationUnit$MH();\n+        var mh$ = clang_saveTranslationUnit$constants.HANDLE;\n@@ -1491,5 +1955,4 @@\n-    private static MethodHandle clang_disposeTranslationUnit$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_disposeTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n@@ -1497,1 +1960,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1500,2 +1963,0 @@\n-        }\n-        return Holder.MH;\n@@ -1504,0 +1965,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeTranslationUnit$descriptor() {\n+        return clang_disposeTranslationUnit$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeTranslationUnit$handle() {\n+        return clang_disposeTranslationUnit$constants.HANDLE;\n+    }\n@@ -1510,1 +1990,1 @@\n-        var mh$ = clang_disposeTranslationUnit$MH();\n+        var mh$ = clang_disposeTranslationUnit$constants.HANDLE;\n@@ -1530,6 +2010,5 @@\n-    private static MethodHandle clang_defaultReparseOptions$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_defaultReparseOptions$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -1537,1 +2016,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1540,2 +2019,0 @@\n-        }\n-        return Holder.MH;\n@@ -1544,0 +2021,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_defaultReparseOptions$descriptor() {\n+        return clang_defaultReparseOptions$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n+     * }\n+     *\/\n+    public static MethodHandle clang_defaultReparseOptions$handle() {\n+        return clang_defaultReparseOptions$constants.HANDLE;\n+    }\n@@ -1550,1 +2046,1 @@\n-        var mh$ = clang_defaultReparseOptions$MH();\n+        var mh$ = clang_defaultReparseOptions$constants.HANDLE;\n@@ -1561,9 +2057,8 @@\n-    private static MethodHandle clang_reparseTranslationUnit$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_reparseTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -1571,1 +2066,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -1574,2 +2069,0 @@\n-        }\n-        return Holder.MH;\n@@ -1578,0 +2071,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_reparseTranslationUnit$descriptor() {\n+        return clang_reparseTranslationUnit$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n+     * }\n+     *\/\n+    public static MethodHandle clang_reparseTranslationUnit$handle() {\n+        return clang_reparseTranslationUnit$constants.HANDLE;\n+    }\n@@ -1584,1 +2096,1 @@\n-        var mh$ = clang_reparseTranslationUnit$MH();\n+        var mh$ = clang_reparseTranslationUnit$constants.HANDLE;\n@@ -3926,4 +4438,3 @@\n-    private static MethodHandle clang_getNullCursor$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout()        );\n+    private static class clang_getNullCursor$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout()    );\n@@ -3931,1 +4442,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -3934,2 +4445,0 @@\n-        }\n-        return Holder.MH;\n@@ -3938,0 +4447,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNullCursor$descriptor() {\n+        return clang_getNullCursor$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNullCursor$handle() {\n+        return clang_getNullCursor$constants.HANDLE;\n+    }\n@@ -3944,1 +4472,1 @@\n-        var mh$ = clang_getNullCursor$MH();\n+        var mh$ = clang_getNullCursor$constants.HANDLE;\n@@ -3955,6 +4483,5 @@\n-    private static MethodHandle clang_getTranslationUnitCursor$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getTranslationUnitCursor$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -3962,1 +4489,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -3965,2 +4492,0 @@\n-        }\n-        return Holder.MH;\n@@ -3969,0 +4494,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTranslationUnitCursor$descriptor() {\n+        return clang_getTranslationUnitCursor$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTranslationUnitCursor$handle() {\n+        return clang_getTranslationUnitCursor$constants.HANDLE;\n+    }\n@@ -3975,1 +4519,1 @@\n-        var mh$ = clang_getTranslationUnitCursor$MH();\n+        var mh$ = clang_getTranslationUnitCursor$constants.HANDLE;\n@@ -3986,7 +4530,6 @@\n-    private static MethodHandle clang_equalCursors$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_equalCursors$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n@@ -3994,1 +4537,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -3997,2 +4540,0 @@\n-        }\n-        return Holder.MH;\n@@ -4002,0 +4543,1 @@\n+     * Function descriptor for:\n@@ -4006,2 +4548,20 @@\n-    public static int clang_equalCursors(MemorySegment x0, MemorySegment x1) {\n-        var mh$ = clang_equalCursors$MH();\n+    public static FunctionDescriptor clang_equalCursors$descriptor() {\n+        return clang_equalCursors$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_equalCursors$handle() {\n+        return clang_equalCursors$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n+     * }\n+     *\/\n+    public static int clang_equalCursors(MemorySegment x0, MemorySegment x1) {\n+        var mh$ = clang_equalCursors$constants.HANDLE;\n@@ -4018,6 +4578,5 @@\n-    private static MethodHandle clang_Cursor_isNull$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isNull$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -4025,1 +4584,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4028,2 +4587,0 @@\n-        }\n-        return Holder.MH;\n@@ -4032,0 +4589,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isNull$descriptor() {\n+        return clang_Cursor_isNull$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isNull$handle() {\n+        return clang_Cursor_isNull$constants.HANDLE;\n+    }\n@@ -4038,1 +4614,1 @@\n-        var mh$ = clang_Cursor_isNull$MH();\n+        var mh$ = clang_Cursor_isNull$constants.HANDLE;\n@@ -4049,6 +4625,5 @@\n-    private static MethodHandle clang_getCursorKind$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -4056,1 +4631,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4059,2 +4634,0 @@\n-        }\n-        return Holder.MH;\n@@ -4063,0 +4636,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorKind$descriptor() {\n+        return clang_getCursorKind$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorKind$handle() {\n+        return clang_getCursorKind$constants.HANDLE;\n+    }\n@@ -4069,1 +4661,1 @@\n-        var mh$ = clang_getCursorKind$MH();\n+        var mh$ = clang_getCursorKind$constants.HANDLE;\n@@ -4080,6 +4672,5 @@\n-    private static MethodHandle clang_isDeclaration$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_isDeclaration$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -4087,1 +4678,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4090,2 +4681,0 @@\n-        }\n-        return Holder.MH;\n@@ -4094,0 +4683,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isDeclaration$descriptor() {\n+        return clang_isDeclaration$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isDeclaration$handle() {\n+        return clang_isDeclaration$constants.HANDLE;\n+    }\n@@ -4100,1 +4708,1 @@\n-        var mh$ = clang_isDeclaration$MH();\n+        var mh$ = clang_isDeclaration$constants.HANDLE;\n@@ -4111,6 +4719,5 @@\n-    private static MethodHandle clang_isAttribute$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_isAttribute$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -4118,1 +4725,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4121,2 +4728,0 @@\n-        }\n-        return Holder.MH;\n@@ -4125,0 +4730,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isAttribute$descriptor() {\n+        return clang_isAttribute$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isAttribute$handle() {\n+        return clang_isAttribute$constants.HANDLE;\n+    }\n@@ -4131,1 +4755,1 @@\n-        var mh$ = clang_isAttribute$MH();\n+        var mh$ = clang_isAttribute$constants.HANDLE;\n@@ -4142,6 +4766,5 @@\n-    private static MethodHandle clang_isInvalid$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_isInvalid$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -4149,1 +4772,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4152,2 +4775,0 @@\n-        }\n-        return Holder.MH;\n@@ -4156,0 +4777,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isInvalid$descriptor() {\n+        return clang_isInvalid$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isInvalid$handle() {\n+        return clang_isInvalid$constants.HANDLE;\n+    }\n@@ -4162,1 +4802,1 @@\n-        var mh$ = clang_isInvalid$MH();\n+        var mh$ = clang_isInvalid$constants.HANDLE;\n@@ -4173,6 +4813,5 @@\n-    private static MethodHandle clang_isPreprocessing$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_isPreprocessing$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -4180,1 +4819,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4183,2 +4822,0 @@\n-        }\n-        return Holder.MH;\n@@ -4187,0 +4824,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isPreprocessing$descriptor() {\n+        return clang_isPreprocessing$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isPreprocessing$handle() {\n+        return clang_isPreprocessing$constants.HANDLE;\n+    }\n@@ -4193,1 +4849,1 @@\n-        var mh$ = clang_isPreprocessing$MH();\n+        var mh$ = clang_isPreprocessing$constants.HANDLE;\n@@ -4249,6 +4905,5 @@\n-    private static MethodHandle clang_getCursorLinkage$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorLinkage$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -4256,1 +4911,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4259,2 +4914,0 @@\n-        }\n-        return Holder.MH;\n@@ -4263,0 +4916,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorLinkage$descriptor() {\n+        return clang_getCursorLinkage$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorLinkage$handle() {\n+        return clang_getCursorLinkage$constants.HANDLE;\n+    }\n@@ -4269,1 +4941,1 @@\n-        var mh$ = clang_getCursorLinkage$MH();\n+        var mh$ = clang_getCursorLinkage$constants.HANDLE;\n@@ -4316,6 +4988,5 @@\n-    private static MethodHandle clang_getCursorLanguage$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorLanguage$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -4323,1 +4994,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4326,2 +4997,0 @@\n-        }\n-        return Holder.MH;\n@@ -4330,0 +4999,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorLanguage$descriptor() {\n+        return clang_getCursorLanguage$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorLanguage$handle() {\n+        return clang_getCursorLanguage$constants.HANDLE;\n+    }\n@@ -4336,1 +5024,1 @@\n-        var mh$ = clang_getCursorLanguage$MH();\n+        var mh$ = clang_getCursorLanguage$constants.HANDLE;\n@@ -4347,6 +5035,5 @@\n-    private static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_getTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n@@ -4354,1 +5041,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4357,2 +5044,0 @@\n-        }\n-        return Holder.MH;\n@@ -4361,0 +5046,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getTranslationUnit$descriptor() {\n+        return clang_Cursor_getTranslationUnit$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getTranslationUnit$handle() {\n+        return clang_Cursor_getTranslationUnit$constants.HANDLE;\n+    }\n@@ -4367,1 +5071,1 @@\n-        var mh$ = clang_Cursor_getTranslationUnit$MH();\n+        var mh$ = clang_Cursor_getTranslationUnit$constants.HANDLE;\n@@ -4378,6 +5082,5 @@\n-    private static MethodHandle clang_getCursorLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXCursor.layout()\n+        );\n@@ -4385,1 +5088,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4388,2 +5091,0 @@\n-        }\n-        return Holder.MH;\n@@ -4392,0 +5093,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorLocation$descriptor() {\n+        return clang_getCursorLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorLocation$handle() {\n+        return clang_getCursorLocation$constants.HANDLE;\n+    }\n@@ -4398,1 +5118,1 @@\n-        var mh$ = clang_getCursorLocation$MH();\n+        var mh$ = clang_getCursorLocation$constants.HANDLE;\n@@ -4409,6 +5129,5 @@\n-    private static MethodHandle clang_getCursorExtent$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceRange.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorExtent$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceRange.layout(),\n+            CXCursor.layout()\n+        );\n@@ -4416,1 +5135,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -4419,2 +5138,0 @@\n-        }\n-        return Holder.MH;\n@@ -4423,0 +5140,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorExtent$descriptor() {\n+        return clang_getCursorExtent$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorExtent$handle() {\n+        return clang_getCursorExtent$constants.HANDLE;\n+    }\n@@ -4429,1 +5165,1 @@\n-        var mh$ = clang_getCursorExtent$MH();\n+        var mh$ = clang_getCursorExtent$constants.HANDLE;\n@@ -5682,6 +6418,5 @@\n-    private static MethodHandle clang_getCursorType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n@@ -5689,1 +6424,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5692,2 +6427,0 @@\n-        }\n-        return Holder.MH;\n@@ -5696,0 +6429,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorType$descriptor() {\n+        return clang_getCursorType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorType$handle() {\n+        return clang_getCursorType$constants.HANDLE;\n+    }\n@@ -5702,1 +6454,1 @@\n-        var mh$ = clang_getCursorType$MH();\n+        var mh$ = clang_getCursorType$constants.HANDLE;\n@@ -5713,6 +6465,5 @@\n-    private static MethodHandle clang_getTypeSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getTypeSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXType.layout()\n+        );\n@@ -5720,1 +6471,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5723,2 +6474,0 @@\n-        }\n-        return Holder.MH;\n@@ -5727,0 +6476,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeSpelling$descriptor() {\n+        return clang_getTypeSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeSpelling$handle() {\n+        return clang_getTypeSpelling$constants.HANDLE;\n+    }\n@@ -5733,1 +6501,1 @@\n-        var mh$ = clang_getTypeSpelling$MH();\n+        var mh$ = clang_getTypeSpelling$constants.HANDLE;\n@@ -5744,6 +6512,5 @@\n-    private static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getTypedefDeclUnderlyingType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n@@ -5751,1 +6518,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5754,2 +6521,0 @@\n-        }\n-        return Holder.MH;\n@@ -5758,0 +6523,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypedefDeclUnderlyingType$descriptor() {\n+        return clang_getTypedefDeclUnderlyingType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypedefDeclUnderlyingType$handle() {\n+        return clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+    }\n@@ -5764,1 +6548,1 @@\n-        var mh$ = clang_getTypedefDeclUnderlyingType$MH();\n+        var mh$ = clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n@@ -5775,6 +6559,5 @@\n-    private static MethodHandle clang_getEnumDeclIntegerType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getEnumDeclIntegerType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n@@ -5782,1 +6565,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5785,2 +6568,0 @@\n-        }\n-        return Holder.MH;\n@@ -5789,0 +6570,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumDeclIntegerType$descriptor() {\n+        return clang_getEnumDeclIntegerType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumDeclIntegerType$handle() {\n+        return clang_getEnumDeclIntegerType$constants.HANDLE;\n+    }\n@@ -5795,1 +6595,1 @@\n-        var mh$ = clang_getEnumDeclIntegerType$MH();\n+        var mh$ = clang_getEnumDeclIntegerType$constants.HANDLE;\n@@ -5806,6 +6606,5 @@\n-    private static MethodHandle clang_getEnumConstantDeclValue$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getEnumConstantDeclValue$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXCursor.layout()\n+        );\n@@ -5813,1 +6612,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5816,2 +6615,0 @@\n-        }\n-        return Holder.MH;\n@@ -5820,0 +6617,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumConstantDeclValue$descriptor() {\n+        return clang_getEnumConstantDeclValue$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumConstantDeclValue$handle() {\n+        return clang_getEnumConstantDeclValue$constants.HANDLE;\n+    }\n@@ -5826,1 +6642,1 @@\n-        var mh$ = clang_getEnumConstantDeclValue$MH();\n+        var mh$ = clang_getEnumConstantDeclValue$constants.HANDLE;\n@@ -5837,6 +6653,5 @@\n-    private static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getEnumConstantDeclUnsignedValue$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXCursor.layout()\n+        );\n@@ -5844,1 +6659,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5847,2 +6662,0 @@\n-        }\n-        return Holder.MH;\n@@ -5851,0 +6664,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$descriptor() {\n+        return clang_getEnumConstantDeclUnsignedValue$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$handle() {\n+        return clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+    }\n@@ -5857,1 +6689,1 @@\n-        var mh$ = clang_getEnumConstantDeclUnsignedValue$MH();\n+        var mh$ = clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n@@ -5868,6 +6700,5 @@\n-    private static MethodHandle clang_getFieldDeclBitWidth$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getFieldDeclBitWidth$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -5875,1 +6706,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5878,2 +6709,0 @@\n-        }\n-        return Holder.MH;\n@@ -5883,0 +6712,1 @@\n+     * Function descriptor for:\n@@ -5887,4 +6717,22 @@\n-    public static int clang_getFieldDeclBitWidth(MemorySegment C) {\n-        var mh$ = clang_getFieldDeclBitWidth$MH();\n-        try {\n-            if (TRACE_DOWNCALLS) {\n+    public static FunctionDescriptor clang_getFieldDeclBitWidth$descriptor() {\n+        return clang_getFieldDeclBitWidth$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFieldDeclBitWidth$handle() {\n+        return clang_getFieldDeclBitWidth$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_getFieldDeclBitWidth(MemorySegment C) {\n+        var mh$ = clang_getFieldDeclBitWidth$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n@@ -5899,6 +6747,5 @@\n-    private static MethodHandle clang_Cursor_getNumArguments$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_getNumArguments$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -5906,1 +6753,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5909,2 +6756,0 @@\n-        }\n-        return Holder.MH;\n@@ -5913,0 +6758,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getNumArguments$descriptor() {\n+        return clang_Cursor_getNumArguments$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getNumArguments$handle() {\n+        return clang_Cursor_getNumArguments$constants.HANDLE;\n+    }\n@@ -5919,1 +6783,1 @@\n-        var mh$ = clang_Cursor_getNumArguments$MH();\n+        var mh$ = clang_Cursor_getNumArguments$constants.HANDLE;\n@@ -5930,7 +6794,6 @@\n-    private static MethodHandle clang_Cursor_getArgument$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout(),\n-                CXCursor.layout(),\n-                Index_h.C_INT\n-            );\n+    private static class clang_Cursor_getArgument$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout(),\n+            Index_h.C_INT\n+        );\n@@ -5938,1 +6801,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5941,2 +6804,0 @@\n-        }\n-        return Holder.MH;\n@@ -5945,0 +6806,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getArgument$descriptor() {\n+        return clang_Cursor_getArgument$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getArgument$handle() {\n+        return clang_Cursor_getArgument$constants.HANDLE;\n+    }\n@@ -5951,1 +6831,1 @@\n-        var mh$ = clang_Cursor_getArgument$MH();\n+        var mh$ = clang_Cursor_getArgument$constants.HANDLE;\n@@ -5962,7 +6842,6 @@\n-    private static MethodHandle clang_equalTypes$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_equalTypes$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -5970,1 +6849,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -5973,2 +6852,0 @@\n-        }\n-        return Holder.MH;\n@@ -5977,0 +6854,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_equalTypes$descriptor() {\n+        return clang_equalTypes$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static MethodHandle clang_equalTypes$handle() {\n+        return clang_equalTypes$constants.HANDLE;\n+    }\n@@ -5983,1 +6879,1 @@\n-        var mh$ = clang_equalTypes$MH();\n+        var mh$ = clang_equalTypes$constants.HANDLE;\n@@ -5994,6 +6890,5 @@\n-    private static MethodHandle clang_getCanonicalType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getCanonicalType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6001,1 +6896,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6004,2 +6899,0 @@\n-        }\n-        return Holder.MH;\n@@ -6008,0 +6901,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCanonicalType$descriptor() {\n+        return clang_getCanonicalType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCanonicalType$handle() {\n+        return clang_getCanonicalType$constants.HANDLE;\n+    }\n@@ -6014,1 +6926,1 @@\n-        var mh$ = clang_getCanonicalType$MH();\n+        var mh$ = clang_getCanonicalType$constants.HANDLE;\n@@ -6025,6 +6937,5 @@\n-    private static MethodHandle clang_isConstQualifiedType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout()\n-            );\n+    private static class clang_isConstQualifiedType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n@@ -6032,1 +6943,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6035,2 +6946,0 @@\n-        }\n-        return Holder.MH;\n@@ -6039,0 +6948,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isConstQualifiedType$descriptor() {\n+        return clang_isConstQualifiedType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isConstQualifiedType$handle() {\n+        return clang_isConstQualifiedType$constants.HANDLE;\n+    }\n@@ -6045,1 +6973,1 @@\n-        var mh$ = clang_isConstQualifiedType$MH();\n+        var mh$ = clang_isConstQualifiedType$constants.HANDLE;\n@@ -6056,6 +6984,5 @@\n-    private static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isMacroFunctionLike$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -6063,1 +6990,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6066,2 +6993,0 @@\n-        }\n-        return Holder.MH;\n@@ -6070,0 +6995,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isMacroFunctionLike$descriptor() {\n+        return clang_Cursor_isMacroFunctionLike$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isMacroFunctionLike$handle() {\n+        return clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+    }\n@@ -6076,1 +7020,1 @@\n-        var mh$ = clang_Cursor_isMacroFunctionLike$MH();\n+        var mh$ = clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n@@ -6087,6 +7031,5 @@\n-    private static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isFunctionInlined$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -6094,1 +7037,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6097,2 +7040,0 @@\n-        }\n-        return Holder.MH;\n@@ -6101,0 +7042,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isFunctionInlined$descriptor() {\n+        return clang_Cursor_isFunctionInlined$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isFunctionInlined$handle() {\n+        return clang_Cursor_isFunctionInlined$constants.HANDLE;\n+    }\n@@ -6107,1 +7067,1 @@\n-        var mh$ = clang_Cursor_isFunctionInlined$MH();\n+        var mh$ = clang_Cursor_isFunctionInlined$constants.HANDLE;\n@@ -6118,6 +7078,5 @@\n-    private static MethodHandle clang_isVolatileQualifiedType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout()\n-            );\n+    private static class clang_isVolatileQualifiedType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n@@ -6125,1 +7084,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6128,2 +7087,0 @@\n-        }\n-        return Holder.MH;\n@@ -6132,0 +7089,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isVolatileQualifiedType$descriptor() {\n+        return clang_isVolatileQualifiedType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isVolatileQualifiedType$handle() {\n+        return clang_isVolatileQualifiedType$constants.HANDLE;\n+    }\n@@ -6138,1 +7114,1 @@\n-        var mh$ = clang_isVolatileQualifiedType$MH();\n+        var mh$ = clang_isVolatileQualifiedType$constants.HANDLE;\n@@ -6149,6 +7125,5 @@\n-    private static MethodHandle clang_getTypedefName$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getTypedefName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXType.layout()\n+        );\n@@ -6156,1 +7131,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6159,2 +7134,0 @@\n-        }\n-        return Holder.MH;\n@@ -6163,0 +7136,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypedefName$descriptor() {\n+        return clang_getTypedefName$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypedefName$handle() {\n+        return clang_getTypedefName$constants.HANDLE;\n+    }\n@@ -6169,1 +7161,1 @@\n-        var mh$ = clang_getTypedefName$MH();\n+        var mh$ = clang_getTypedefName$constants.HANDLE;\n@@ -6180,6 +7172,5 @@\n-    private static MethodHandle clang_getPointeeType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getPointeeType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6187,1 +7178,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6190,2 +7181,0 @@\n-        }\n-        return Holder.MH;\n@@ -6194,0 +7183,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getPointeeType$descriptor() {\n+        return clang_getPointeeType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getPointeeType$handle() {\n+        return clang_getPointeeType$constants.HANDLE;\n+    }\n@@ -6200,1 +7208,1 @@\n-        var mh$ = clang_getPointeeType$MH();\n+        var mh$ = clang_getPointeeType$constants.HANDLE;\n@@ -6211,6 +7219,5 @@\n-    private static MethodHandle clang_getTypeDeclaration$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getTypeDeclaration$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXType.layout()\n+        );\n@@ -6218,1 +7225,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6221,2 +7228,0 @@\n-        }\n-        return Holder.MH;\n@@ -6225,0 +7230,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeDeclaration$descriptor() {\n+        return clang_getTypeDeclaration$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeDeclaration$handle() {\n+        return clang_getTypeDeclaration$constants.HANDLE;\n+    }\n@@ -6231,1 +7255,1 @@\n-        var mh$ = clang_getTypeDeclaration$MH();\n+        var mh$ = clang_getTypeDeclaration$constants.HANDLE;\n@@ -6242,6 +7266,5 @@\n-    private static MethodHandle clang_getTypeKindSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_INT\n-            );\n+    private static class clang_getTypeKindSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_INT\n+        );\n@@ -6249,1 +7272,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6252,2 +7275,0 @@\n-        }\n-        return Holder.MH;\n@@ -6256,0 +7277,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeKindSpelling$descriptor() {\n+        return clang_getTypeKindSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeKindSpelling$handle() {\n+        return clang_getTypeKindSpelling$constants.HANDLE;\n+    }\n@@ -6262,1 +7302,1 @@\n-        var mh$ = clang_getTypeKindSpelling$MH();\n+        var mh$ = clang_getTypeKindSpelling$constants.HANDLE;\n@@ -6273,6 +7313,5 @@\n-    private static MethodHandle clang_getFunctionTypeCallingConv$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout()\n-            );\n+    private static class clang_getFunctionTypeCallingConv$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n@@ -6280,1 +7319,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6283,2 +7322,0 @@\n-        }\n-        return Holder.MH;\n@@ -6287,0 +7324,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getFunctionTypeCallingConv$descriptor() {\n+        return clang_getFunctionTypeCallingConv$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFunctionTypeCallingConv$handle() {\n+        return clang_getFunctionTypeCallingConv$constants.HANDLE;\n+    }\n@@ -6293,1 +7349,1 @@\n-        var mh$ = clang_getFunctionTypeCallingConv$MH();\n+        var mh$ = clang_getFunctionTypeCallingConv$constants.HANDLE;\n@@ -6304,6 +7360,5 @@\n-    private static MethodHandle clang_getResultType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getResultType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6311,1 +7366,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6314,2 +7369,0 @@\n-        }\n-        return Holder.MH;\n@@ -6318,0 +7371,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getResultType$descriptor() {\n+        return clang_getResultType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getResultType$handle() {\n+        return clang_getResultType$constants.HANDLE;\n+    }\n@@ -6324,1 +7396,1 @@\n-        var mh$ = clang_getResultType$MH();\n+        var mh$ = clang_getResultType$constants.HANDLE;\n@@ -6335,6 +7407,5 @@\n-    private static MethodHandle clang_getNumArgTypes$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout()\n-            );\n+    private static class clang_getNumArgTypes$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n@@ -6342,1 +7413,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6345,2 +7416,0 @@\n-        }\n-        return Holder.MH;\n@@ -6349,0 +7418,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNumArgTypes$descriptor() {\n+        return clang_getNumArgTypes$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNumArgTypes$handle() {\n+        return clang_getNumArgTypes$constants.HANDLE;\n+    }\n@@ -6355,1 +7443,1 @@\n-        var mh$ = clang_getNumArgTypes$MH();\n+        var mh$ = clang_getNumArgTypes$constants.HANDLE;\n@@ -6366,7 +7454,6 @@\n-    private static MethodHandle clang_getArgType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout(),\n-                Index_h.C_INT\n-            );\n+    private static class clang_getArgType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout(),\n+            Index_h.C_INT\n+        );\n@@ -6374,1 +7461,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6377,2 +7464,0 @@\n-        }\n-        return Holder.MH;\n@@ -6381,0 +7466,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArgType$descriptor() {\n+        return clang_getArgType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArgType$handle() {\n+        return clang_getArgType$constants.HANDLE;\n+    }\n@@ -6387,1 +7491,1 @@\n-        var mh$ = clang_getArgType$MH();\n+        var mh$ = clang_getArgType$constants.HANDLE;\n@@ -6398,6 +7502,5 @@\n-    private static MethodHandle clang_isFunctionTypeVariadic$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXType.layout()\n-            );\n+    private static class clang_isFunctionTypeVariadic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n@@ -6405,1 +7508,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6408,2 +7511,0 @@\n-        }\n-        return Holder.MH;\n@@ -6412,0 +7513,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isFunctionTypeVariadic$descriptor() {\n+        return clang_isFunctionTypeVariadic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isFunctionTypeVariadic$handle() {\n+        return clang_isFunctionTypeVariadic$constants.HANDLE;\n+    }\n@@ -6418,1 +7538,1 @@\n-        var mh$ = clang_isFunctionTypeVariadic$MH();\n+        var mh$ = clang_isFunctionTypeVariadic$constants.HANDLE;\n@@ -6429,6 +7549,5 @@\n-    private static MethodHandle clang_getCursorResultType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorResultType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n@@ -6436,1 +7555,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6439,2 +7558,0 @@\n-        }\n-        return Holder.MH;\n@@ -6443,0 +7560,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorResultType$descriptor() {\n+        return clang_getCursorResultType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorResultType$handle() {\n+        return clang_getCursorResultType$constants.HANDLE;\n+    }\n@@ -6449,1 +7585,1 @@\n-        var mh$ = clang_getCursorResultType$MH();\n+        var mh$ = clang_getCursorResultType$constants.HANDLE;\n@@ -6460,6 +7596,5 @@\n-    private static MethodHandle clang_getElementType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getElementType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6467,1 +7602,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6470,2 +7605,0 @@\n-        }\n-        return Holder.MH;\n@@ -6474,0 +7607,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getElementType$descriptor() {\n+        return clang_getElementType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getElementType$handle() {\n+        return clang_getElementType$constants.HANDLE;\n+    }\n@@ -6480,1 +7632,1 @@\n-        var mh$ = clang_getElementType$MH();\n+        var mh$ = clang_getElementType$constants.HANDLE;\n@@ -6491,6 +7643,5 @@\n-    private static MethodHandle clang_getNumElements$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXType.layout()\n-            );\n+    private static class clang_getNumElements$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n@@ -6498,1 +7649,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6501,2 +7652,0 @@\n-        }\n-        return Holder.MH;\n@@ -6505,0 +7654,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNumElements$descriptor() {\n+        return clang_getNumElements$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNumElements$handle() {\n+        return clang_getNumElements$constants.HANDLE;\n+    }\n@@ -6511,1 +7679,1 @@\n-        var mh$ = clang_getNumElements$MH();\n+        var mh$ = clang_getNumElements$constants.HANDLE;\n@@ -6522,6 +7690,5 @@\n-    private static MethodHandle clang_getArrayElementType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_getArrayElementType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6529,1 +7696,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6532,2 +7699,0 @@\n-        }\n-        return Holder.MH;\n@@ -6536,0 +7701,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArrayElementType$descriptor() {\n+        return clang_getArrayElementType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArrayElementType$handle() {\n+        return clang_getArrayElementType$constants.HANDLE;\n+    }\n@@ -6542,1 +7726,1 @@\n-        var mh$ = clang_getArrayElementType$MH();\n+        var mh$ = clang_getArrayElementType$constants.HANDLE;\n@@ -6553,6 +7737,5 @@\n-    private static MethodHandle clang_getArraySize$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXType.layout()\n-            );\n+    private static class clang_getArraySize$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n@@ -6560,1 +7743,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6563,2 +7746,0 @@\n-        }\n-        return Holder.MH;\n@@ -6567,0 +7748,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArraySize$descriptor() {\n+        return clang_getArraySize$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArraySize$handle() {\n+        return clang_getArraySize$constants.HANDLE;\n+    }\n@@ -6573,1 +7773,1 @@\n-        var mh$ = clang_getArraySize$MH();\n+        var mh$ = clang_getArraySize$constants.HANDLE;\n@@ -6674,6 +7874,5 @@\n-    private static MethodHandle clang_Type_getAlignOf$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXType.layout()\n-            );\n+    private static class clang_Type_getAlignOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n@@ -6681,1 +7880,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6684,2 +7883,0 @@\n-        }\n-        return Holder.MH;\n@@ -6688,0 +7885,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getAlignOf$descriptor() {\n+        return clang_Type_getAlignOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getAlignOf$handle() {\n+        return clang_Type_getAlignOf$constants.HANDLE;\n+    }\n@@ -6694,1 +7910,1 @@\n-        var mh$ = clang_Type_getAlignOf$MH();\n+        var mh$ = clang_Type_getAlignOf$constants.HANDLE;\n@@ -6705,6 +7921,5 @@\n-    private static MethodHandle clang_Type_getSizeOf$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXType.layout()\n-            );\n+    private static class clang_Type_getSizeOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n@@ -6712,1 +7927,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6715,2 +7930,0 @@\n-        }\n-        return Holder.MH;\n@@ -6719,0 +7932,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getSizeOf$descriptor() {\n+        return clang_Type_getSizeOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getSizeOf$handle() {\n+        return clang_Type_getSizeOf$constants.HANDLE;\n+    }\n@@ -6725,1 +7957,1 @@\n-        var mh$ = clang_Type_getSizeOf$MH();\n+        var mh$ = clang_Type_getSizeOf$constants.HANDLE;\n@@ -6736,7 +7968,6 @@\n-    private static MethodHandle clang_Type_getOffsetOf$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                CXType.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_Type_getOffsetOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -6744,1 +7975,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6747,2 +7978,0 @@\n-        }\n-        return Holder.MH;\n@@ -6751,0 +7980,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getOffsetOf$descriptor() {\n+        return clang_Type_getOffsetOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getOffsetOf$handle() {\n+        return clang_Type_getOffsetOf$constants.HANDLE;\n+    }\n@@ -6757,1 +8005,1 @@\n-        var mh$ = clang_Type_getOffsetOf$MH();\n+        var mh$ = clang_Type_getOffsetOf$constants.HANDLE;\n@@ -6768,6 +8016,5 @@\n-    private static MethodHandle clang_Type_getValueType$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXType.layout(),\n-                CXType.layout()\n-            );\n+    private static class clang_Type_getValueType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n@@ -6775,1 +8022,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6778,2 +8025,0 @@\n-        }\n-        return Holder.MH;\n@@ -6782,0 +8027,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getValueType$descriptor() {\n+        return clang_Type_getValueType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getValueType$handle() {\n+        return clang_Type_getValueType$constants.HANDLE;\n+    }\n@@ -6788,1 +8052,1 @@\n-        var mh$ = clang_Type_getValueType$MH();\n+        var mh$ = clang_Type_getValueType$constants.HANDLE;\n@@ -6799,6 +8063,5 @@\n-    private static MethodHandle clang_Cursor_isAnonymous$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isAnonymous$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -6806,1 +8069,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6809,2 +8072,0 @@\n-        }\n-        return Holder.MH;\n@@ -6813,0 +8074,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isAnonymous$descriptor() {\n+        return clang_Cursor_isAnonymous$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isAnonymous$handle() {\n+        return clang_Cursor_isAnonymous$constants.HANDLE;\n+    }\n@@ -6819,1 +8099,1 @@\n-        var mh$ = clang_Cursor_isAnonymous$MH();\n+        var mh$ = clang_Cursor_isAnonymous$constants.HANDLE;\n@@ -6830,6 +8110,5 @@\n-    private static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isAnonymousRecordDecl$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -6837,1 +8116,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6840,2 +8119,0 @@\n-        }\n-        return Holder.MH;\n@@ -6844,0 +8121,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$descriptor() {\n+        return clang_Cursor_isAnonymousRecordDecl$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$handle() {\n+        return clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+    }\n@@ -6850,1 +8146,1 @@\n-        var mh$ = clang_Cursor_isAnonymousRecordDecl$MH();\n+        var mh$ = clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n@@ -6861,6 +8157,5 @@\n-    private static MethodHandle clang_Cursor_isBitField$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isBitField$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -6868,1 +8163,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6871,2 +8166,0 @@\n-        }\n-        return Holder.MH;\n@@ -6875,0 +8168,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isBitField$descriptor() {\n+        return clang_Cursor_isBitField$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isBitField$handle() {\n+        return clang_Cursor_isBitField$constants.HANDLE;\n+    }\n@@ -6881,1 +8193,1 @@\n-        var mh$ = clang_Cursor_isBitField$MH();\n+        var mh$ = clang_Cursor_isBitField$constants.HANDLE;\n@@ -6919,8 +8231,7 @@\n-    private static MethodHandle clang_visitChildren$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_visitChildren$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -6928,1 +8239,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6931,2 +8242,0 @@\n-        }\n-        return Holder.MH;\n@@ -6935,0 +8244,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_visitChildren$descriptor() {\n+        return clang_visitChildren$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static MethodHandle clang_visitChildren$handle() {\n+        return clang_visitChildren$constants.HANDLE;\n+    }\n@@ -6941,1 +8269,1 @@\n-        var mh$ = clang_visitChildren$MH();\n+        var mh$ = clang_visitChildren$constants.HANDLE;\n@@ -6952,6 +8280,5 @@\n-    private static MethodHandle clang_getCursorUSR$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorUSR$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n@@ -6959,1 +8286,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6962,2 +8289,0 @@\n-        }\n-        return Holder.MH;\n@@ -6966,0 +8291,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorUSR$descriptor() {\n+        return clang_getCursorUSR$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorUSR$handle() {\n+        return clang_getCursorUSR$constants.HANDLE;\n+    }\n@@ -6972,1 +8316,1 @@\n-        var mh$ = clang_getCursorUSR$MH();\n+        var mh$ = clang_getCursorUSR$constants.HANDLE;\n@@ -6983,6 +8327,5 @@\n-    private static MethodHandle clang_getCursorSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n@@ -6990,1 +8333,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -6993,2 +8336,0 @@\n-        }\n-        return Holder.MH;\n@@ -6997,0 +8338,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorSpelling$descriptor() {\n+        return clang_getCursorSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorSpelling$handle() {\n+        return clang_getCursorSpelling$constants.HANDLE;\n+    }\n@@ -7003,1 +8363,1 @@\n-        var mh$ = clang_getCursorSpelling$MH();\n+        var mh$ = clang_getCursorSpelling$constants.HANDLE;\n@@ -7257,7 +8617,6 @@\n-    private static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_PrintingPolicy_getProperty$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -7265,1 +8624,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7268,2 +8627,0 @@\n-        }\n-        return Holder.MH;\n@@ -7272,0 +8629,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_PrintingPolicy_getProperty$descriptor() {\n+        return clang_PrintingPolicy_getProperty$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n+    public static MethodHandle clang_PrintingPolicy_getProperty$handle() {\n+        return clang_PrintingPolicy_getProperty$constants.HANDLE;\n+    }\n@@ -7278,1 +8654,1 @@\n-        var mh$ = clang_PrintingPolicy_getProperty$MH();\n+        var mh$ = clang_PrintingPolicy_getProperty$constants.HANDLE;\n@@ -7289,7 +8665,6 @@\n-    private static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER,\n-                Index_h.C_INT,\n-                Index_h.C_INT\n-            );\n+    private static class clang_PrintingPolicy_setProperty$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n@@ -7297,1 +8672,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7300,2 +8675,0 @@\n-        }\n-        return Holder.MH;\n@@ -7304,0 +8677,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_PrintingPolicy_setProperty$descriptor() {\n+        return clang_PrintingPolicy_setProperty$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n+    public static MethodHandle clang_PrintingPolicy_setProperty$handle() {\n+        return clang_PrintingPolicy_setProperty$constants.HANDLE;\n+    }\n@@ -7310,1 +8702,1 @@\n-        var mh$ = clang_PrintingPolicy_setProperty$MH();\n+        var mh$ = clang_PrintingPolicy_setProperty$constants.HANDLE;\n@@ -7321,6 +8713,5 @@\n-    private static MethodHandle clang_getCursorPrintingPolicy$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorPrintingPolicy$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n@@ -7328,1 +8719,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7331,2 +8722,0 @@\n-        }\n-        return Holder.MH;\n@@ -7335,0 +8724,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorPrintingPolicy$descriptor() {\n+        return clang_getCursorPrintingPolicy$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorPrintingPolicy$handle() {\n+        return clang_getCursorPrintingPolicy$constants.HANDLE;\n+    }\n@@ -7341,1 +8749,1 @@\n-        var mh$ = clang_getCursorPrintingPolicy$MH();\n+        var mh$ = clang_getCursorPrintingPolicy$constants.HANDLE;\n@@ -7352,5 +8760,4 @@\n-    private static MethodHandle clang_PrintingPolicy_dispose$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_PrintingPolicy_dispose$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n@@ -7358,1 +8765,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7361,2 +8768,0 @@\n-        }\n-        return Holder.MH;\n@@ -7365,0 +8770,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_PrintingPolicy_dispose$descriptor() {\n+        return clang_PrintingPolicy_dispose$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MethodHandle clang_PrintingPolicy_dispose$handle() {\n+        return clang_PrintingPolicy_dispose$constants.HANDLE;\n+    }\n@@ -7371,1 +8795,1 @@\n-        var mh$ = clang_PrintingPolicy_dispose$MH();\n+        var mh$ = clang_PrintingPolicy_dispose$constants.HANDLE;\n@@ -7382,7 +8806,6 @@\n-    private static MethodHandle clang_getCursorPrettyPrinted$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXCursor.layout(),\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_getCursorPrettyPrinted$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout(),\n+            Index_h.C_POINTER\n+        );\n@@ -7390,1 +8813,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7393,2 +8816,0 @@\n-        }\n-        return Holder.MH;\n@@ -7397,0 +8818,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorPrettyPrinted$descriptor() {\n+        return clang_getCursorPrettyPrinted$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorPrettyPrinted$handle() {\n+        return clang_getCursorPrettyPrinted$constants.HANDLE;\n+    }\n@@ -7403,1 +8843,1 @@\n-        var mh$ = clang_getCursorPrettyPrinted$MH();\n+        var mh$ = clang_getCursorPrettyPrinted$constants.HANDLE;\n@@ -7414,6 +8854,5 @@\n-    private static MethodHandle clang_getCursorDisplayName$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorDisplayName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n@@ -7421,1 +8860,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7424,2 +8863,0 @@\n-        }\n-        return Holder.MH;\n@@ -7428,0 +8865,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorDisplayName$descriptor() {\n+        return clang_getCursorDisplayName$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorDisplayName$handle() {\n+        return clang_getCursorDisplayName$constants.HANDLE;\n+    }\n@@ -7434,1 +8890,1 @@\n-        var mh$ = clang_getCursorDisplayName$MH();\n+        var mh$ = clang_getCursorDisplayName$constants.HANDLE;\n@@ -7445,6 +8901,5 @@\n-    private static MethodHandle clang_getCursorReferenced$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorReferenced$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n@@ -7452,1 +8907,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7455,2 +8910,0 @@\n-        }\n-        return Holder.MH;\n@@ -7459,0 +8912,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorReferenced$descriptor() {\n+        return clang_getCursorReferenced$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorReferenced$handle() {\n+        return clang_getCursorReferenced$constants.HANDLE;\n+    }\n@@ -7465,1 +8937,1 @@\n-        var mh$ = clang_getCursorReferenced$MH();\n+        var mh$ = clang_getCursorReferenced$constants.HANDLE;\n@@ -7476,6 +8948,5 @@\n-    private static MethodHandle clang_getCursorDefinition$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXCursor.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_getCursorDefinition$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n@@ -7483,1 +8954,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7486,2 +8957,0 @@\n-        }\n-        return Holder.MH;\n@@ -7490,0 +8959,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorDefinition$descriptor() {\n+        return clang_getCursorDefinition$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorDefinition$handle() {\n+        return clang_getCursorDefinition$constants.HANDLE;\n+    }\n@@ -7496,1 +8984,1 @@\n-        var mh$ = clang_getCursorDefinition$MH();\n+        var mh$ = clang_getCursorDefinition$constants.HANDLE;\n@@ -7507,6 +8995,5 @@\n-    private static MethodHandle clang_isCursorDefinition$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_isCursorDefinition$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -7514,1 +9001,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7517,2 +9004,0 @@\n-        }\n-        return Holder.MH;\n@@ -7521,0 +9006,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isCursorDefinition$descriptor() {\n+        return clang_isCursorDefinition$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isCursorDefinition$handle() {\n+        return clang_isCursorDefinition$constants.HANDLE;\n+    }\n@@ -7527,1 +9031,1 @@\n-        var mh$ = clang_isCursorDefinition$MH();\n+        var mh$ = clang_isCursorDefinition$constants.HANDLE;\n@@ -7538,6 +9042,5 @@\n-    private static MethodHandle clang_Cursor_isVariadic$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_isVariadic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n@@ -7545,1 +9048,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7548,2 +9051,0 @@\n-        }\n-        return Holder.MH;\n@@ -7552,0 +9053,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isVariadic$descriptor() {\n+        return clang_Cursor_isVariadic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isVariadic$handle() {\n+        return clang_Cursor_isVariadic$constants.HANDLE;\n+    }\n@@ -7558,1 +9078,1 @@\n-        var mh$ = clang_Cursor_isVariadic$MH();\n+        var mh$ = clang_Cursor_isVariadic$constants.HANDLE;\n@@ -7569,6 +9089,5 @@\n-    private static MethodHandle clang_Cursor_getMangling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_getMangling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n@@ -7576,1 +9095,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7579,2 +9098,0 @@\n-        }\n-        return Holder.MH;\n@@ -7582,1 +9099,20 @@\n-\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getMangling$descriptor() {\n+        return clang_Cursor_getMangling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getMangling$handle() {\n+        return clang_Cursor_getMangling$constants.HANDLE;\n+    }\n@@ -7589,1 +9125,1 @@\n-        var mh$ = clang_Cursor_getMangling$MH();\n+        var mh$ = clang_Cursor_getMangling$constants.HANDLE;\n@@ -7645,6 +9181,5 @@\n-    private static MethodHandle clang_getTokenKind$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                CXToken.layout()\n-            );\n+    private static class clang_getTokenKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXToken.layout()\n+        );\n@@ -7652,1 +9187,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7655,2 +9190,0 @@\n-        }\n-        return Holder.MH;\n@@ -7659,0 +9192,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTokenKind$descriptor() {\n+        return clang_getTokenKind$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenKind$handle() {\n+        return clang_getTokenKind$constants.HANDLE;\n+    }\n@@ -7665,1 +9217,1 @@\n-        var mh$ = clang_getTokenKind$MH();\n+        var mh$ = clang_getTokenKind$constants.HANDLE;\n@@ -7676,7 +9228,6 @@\n-    private static MethodHandle clang_getTokenSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_POINTER,\n-                CXToken.layout()\n-            );\n+    private static class clang_getTokenSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n@@ -7684,1 +9235,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7687,2 +9238,0 @@\n-        }\n-        return Holder.MH;\n@@ -7691,0 +9240,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTokenSpelling$descriptor() {\n+        return clang_getTokenSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenSpelling$handle() {\n+        return clang_getTokenSpelling$constants.HANDLE;\n+    }\n@@ -7697,1 +9265,1 @@\n-        var mh$ = clang_getTokenSpelling$MH();\n+        var mh$ = clang_getTokenSpelling$constants.HANDLE;\n@@ -7708,7 +9276,6 @@\n-    private static MethodHandle clang_getTokenLocation$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceLocation.layout(),\n-                Index_h.C_POINTER,\n-                CXToken.layout()\n-            );\n+    private static class clang_getTokenLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n@@ -7716,1 +9283,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7719,2 +9286,0 @@\n-        }\n-        return Holder.MH;\n@@ -7723,0 +9288,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTokenLocation$descriptor() {\n+        return clang_getTokenLocation$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenLocation$handle() {\n+        return clang_getTokenLocation$constants.HANDLE;\n+    }\n@@ -7729,1 +9313,1 @@\n-        var mh$ = clang_getTokenLocation$MH();\n+        var mh$ = clang_getTokenLocation$constants.HANDLE;\n@@ -7740,7 +9324,6 @@\n-    private static MethodHandle clang_getTokenExtent$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXSourceRange.layout(),\n-                Index_h.C_POINTER,\n-                CXToken.layout()\n-            );\n+    private static class clang_getTokenExtent$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceRange.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n@@ -7748,1 +9331,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7751,2 +9334,0 @@\n-        }\n-        return Holder.MH;\n@@ -7755,0 +9336,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTokenExtent$descriptor() {\n+        return clang_getTokenExtent$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenExtent$handle() {\n+        return clang_getTokenExtent$constants.HANDLE;\n+    }\n@@ -7761,1 +9361,1 @@\n-        var mh$ = clang_getTokenExtent$MH();\n+        var mh$ = clang_getTokenExtent$constants.HANDLE;\n@@ -7772,8 +9372,7 @@\n-    private static MethodHandle clang_tokenize$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER,\n-                CXSourceRange.layout(),\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_tokenize$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            CXSourceRange.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -7781,1 +9380,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7784,2 +9383,0 @@\n-        }\n-        return Holder.MH;\n@@ -7788,0 +9385,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_tokenize$descriptor() {\n+        return clang_tokenize$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n+    public static MethodHandle clang_tokenize$handle() {\n+        return clang_tokenize$constants.HANDLE;\n+    }\n@@ -7794,1 +9410,1 @@\n-        var mh$ = clang_tokenize$MH();\n+        var mh$ = clang_tokenize$constants.HANDLE;\n@@ -7805,7 +9421,6 @@\n-    private static MethodHandle clang_disposeTokens$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER,\n-                Index_h.C_INT\n-            );\n+    private static class clang_disposeTokens$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n@@ -7813,1 +9428,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7816,2 +9431,0 @@\n-        }\n-        return Holder.MH;\n@@ -7820,0 +9433,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeTokens$descriptor() {\n+        return clang_disposeTokens$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeTokens$handle() {\n+        return clang_disposeTokens$constants.HANDLE;\n+    }\n@@ -7826,1 +9458,1 @@\n-        var mh$ = clang_disposeTokens$MH();\n+        var mh$ = clang_disposeTokens$constants.HANDLE;\n@@ -7837,6 +9469,5 @@\n-    private static MethodHandle clang_getCursorKindSpelling$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout(),\n-                Index_h.C_INT\n-            );\n+    private static class clang_getCursorKindSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_INT\n+        );\n@@ -7844,1 +9475,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7847,2 +9478,0 @@\n-        }\n-        return Holder.MH;\n@@ -7851,0 +9480,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorKindSpelling$descriptor() {\n+        return clang_getCursorKindSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorKindSpelling$handle() {\n+        return clang_getCursorKindSpelling$constants.HANDLE;\n+    }\n@@ -7857,1 +9505,1 @@\n-        var mh$ = clang_getCursorKindSpelling$MH();\n+        var mh$ = clang_getCursorKindSpelling$constants.HANDLE;\n@@ -7868,4 +9516,3 @@\n-    private static MethodHandle clang_getClangVersion$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                CXString.layout()        );\n+    private static class clang_getClangVersion$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout()    );\n@@ -7873,1 +9520,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7876,2 +9523,0 @@\n-        }\n-        return Holder.MH;\n@@ -7880,0 +9525,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getClangVersion$descriptor() {\n+        return clang_getClangVersion$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n+     * }\n+     *\/\n+    public static MethodHandle clang_getClangVersion$handle() {\n+        return clang_getClangVersion$constants.HANDLE;\n+    }\n@@ -7886,1 +9550,1 @@\n-        var mh$ = clang_getClangVersion$MH();\n+        var mh$ = clang_getClangVersion$constants.HANDLE;\n@@ -7897,5 +9561,4 @@\n-    private static MethodHandle clang_toggleCrashRecovery$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_INT\n-            );\n+    private static class clang_toggleCrashRecovery$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_INT\n+        );\n@@ -7903,1 +9566,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7906,2 +9569,0 @@\n-        }\n-        return Holder.MH;\n@@ -7910,0 +9571,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_toggleCrashRecovery$descriptor() {\n+        return clang_toggleCrashRecovery$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n+     * }\n+     *\/\n+    public static MethodHandle clang_toggleCrashRecovery$handle() {\n+        return clang_toggleCrashRecovery$constants.HANDLE;\n+    }\n@@ -7916,1 +9596,1 @@\n-        var mh$ = clang_toggleCrashRecovery$MH();\n+        var mh$ = clang_toggleCrashRecovery$constants.HANDLE;\n@@ -7927,6 +9607,5 @@\n-    private static MethodHandle clang_Cursor_Evaluate$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                CXCursor.layout()\n-            );\n+    private static class clang_Cursor_Evaluate$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n@@ -7934,1 +9613,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7937,2 +9616,0 @@\n-        }\n-        return Holder.MH;\n@@ -7941,0 +9618,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_Evaluate$descriptor() {\n+        return clang_Cursor_Evaluate$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_Evaluate$handle() {\n+        return clang_Cursor_Evaluate$constants.HANDLE;\n+    }\n@@ -7947,1 +9643,1 @@\n-        var mh$ = clang_Cursor_Evaluate$MH();\n+        var mh$ = clang_Cursor_Evaluate$constants.HANDLE;\n@@ -7958,6 +9654,5 @@\n-    private static MethodHandle clang_EvalResult_getKind$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -7965,1 +9660,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7968,2 +9663,0 @@\n-        }\n-        return Holder.MH;\n@@ -7972,0 +9665,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getKind$descriptor() {\n+        return clang_EvalResult_getKind$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getKind$handle() {\n+        return clang_EvalResult_getKind$constants.HANDLE;\n+    }\n@@ -7978,1 +9690,1 @@\n-        var mh$ = clang_EvalResult_getKind$MH();\n+        var mh$ = clang_EvalResult_getKind$constants.HANDLE;\n@@ -7989,6 +9701,5 @@\n-    private static MethodHandle clang_EvalResult_getAsInt$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getAsInt$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -7996,1 +9707,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -7999,2 +9710,0 @@\n-        }\n-        return Holder.MH;\n@@ -8003,0 +9712,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsInt$descriptor() {\n+        return clang_EvalResult_getAsInt$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsInt$handle() {\n+        return clang_EvalResult_getAsInt$constants.HANDLE;\n+    }\n@@ -8009,1 +9737,1 @@\n-        var mh$ = clang_EvalResult_getAsInt$MH();\n+        var mh$ = clang_EvalResult_getAsInt$constants.HANDLE;\n@@ -8020,6 +9748,5 @@\n-    private static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getAsLongLong$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            Index_h.C_POINTER\n+        );\n@@ -8027,1 +9754,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8030,2 +9757,0 @@\n-        }\n-        return Holder.MH;\n@@ -8034,0 +9759,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsLongLong$descriptor() {\n+        return clang_EvalResult_getAsLongLong$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsLongLong$handle() {\n+        return clang_EvalResult_getAsLongLong$constants.HANDLE;\n+    }\n@@ -8040,1 +9784,1 @@\n-        var mh$ = clang_EvalResult_getAsLongLong$MH();\n+        var mh$ = clang_EvalResult_getAsLongLong$constants.HANDLE;\n@@ -8051,6 +9795,5 @@\n-    private static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_INT,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_isUnsignedInt$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n@@ -8058,1 +9801,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8061,2 +9804,0 @@\n-        }\n-        return Holder.MH;\n@@ -8065,0 +9806,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_isUnsignedInt$descriptor() {\n+        return clang_EvalResult_isUnsignedInt$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_isUnsignedInt$handle() {\n+        return clang_EvalResult_isUnsignedInt$constants.HANDLE;\n+    }\n@@ -8071,1 +9831,1 @@\n-        var mh$ = clang_EvalResult_isUnsignedInt$MH();\n+        var mh$ = clang_EvalResult_isUnsignedInt$constants.HANDLE;\n@@ -8082,6 +9842,5 @@\n-    private static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_LONG_LONG,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getAsUnsigned$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            Index_h.C_POINTER\n+        );\n@@ -8089,1 +9848,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8092,2 +9851,0 @@\n-        }\n-        return Holder.MH;\n@@ -8096,0 +9853,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsUnsigned$descriptor() {\n+        return clang_EvalResult_getAsUnsigned$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsUnsigned$handle() {\n+        return clang_EvalResult_getAsUnsigned$constants.HANDLE;\n+    }\n@@ -8102,1 +9878,1 @@\n-        var mh$ = clang_EvalResult_getAsUnsigned$MH();\n+        var mh$ = clang_EvalResult_getAsUnsigned$constants.HANDLE;\n@@ -8113,6 +9889,5 @@\n-    private static MethodHandle clang_EvalResult_getAsDouble$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_DOUBLE,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getAsDouble$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_DOUBLE,\n+            Index_h.C_POINTER\n+        );\n@@ -8120,1 +9895,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8123,2 +9898,0 @@\n-        }\n-        return Holder.MH;\n@@ -8127,0 +9900,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsDouble$descriptor() {\n+        return clang_EvalResult_getAsDouble$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsDouble$handle() {\n+        return clang_EvalResult_getAsDouble$constants.HANDLE;\n+    }\n@@ -8133,1 +9925,1 @@\n-        var mh$ = clang_EvalResult_getAsDouble$MH();\n+        var mh$ = clang_EvalResult_getAsDouble$constants.HANDLE;\n@@ -8144,6 +9936,5 @@\n-    private static MethodHandle clang_EvalResult_getAsStr$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.of(\n-                Index_h.C_POINTER,\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_getAsStr$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n@@ -8151,1 +9942,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8154,2 +9945,0 @@\n-        }\n-        return Holder.MH;\n@@ -8158,0 +9947,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsStr$descriptor() {\n+        return clang_EvalResult_getAsStr$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsStr$handle() {\n+        return clang_EvalResult_getAsStr$constants.HANDLE;\n+    }\n@@ -8164,1 +9972,1 @@\n-        var mh$ = clang_EvalResult_getAsStr$MH();\n+        var mh$ = clang_EvalResult_getAsStr$constants.HANDLE;\n@@ -8175,5 +9983,4 @@\n-    private static MethodHandle clang_EvalResult_dispose$MH() {\n-        class Holder {\n-            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n-                Index_h.C_POINTER\n-            );\n+    private static class clang_EvalResult_dispose$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n@@ -8181,1 +9988,1 @@\n-            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -8184,2 +9991,0 @@\n-        }\n-        return Holder.MH;\n@@ -8188,0 +9993,19 @@\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_dispose$descriptor() {\n+        return clang_EvalResult_dispose$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_dispose$handle() {\n+        return clang_EvalResult_dispose$constants.HANDLE;\n+    }\n@@ -8194,1 +10018,1 @@\n-        var mh$ = clang_EvalResult_dispose$MH();\n+        var mh$ = clang_EvalResult_dispose$constants.HANDLE;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":3027,"deletions":1203,"binary":false,"changes":4230,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+  --use-system-load-library \\\n","filename":"updateclang\/extract.sh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}