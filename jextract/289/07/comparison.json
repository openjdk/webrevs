{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import static org.openjdk.jextract.clang.libclang.Index_h.C_LONG;\n@@ -76,4 +77,0 @@\n-    static long FILENAME_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Filename\"));\n-    static long CONTENTS_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Contents\"));\n-    static long LENGTH_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Length\"));\n-\n@@ -87,3 +84,3 @@\n-                start.set(C_POINTER, FILENAME_OFFSET, arena.allocateFrom(inMemoryFiles[i].file));\n-                start.set(C_POINTER, CONTENTS_OFFSET, arena.allocateFrom(inMemoryFiles[i].contents));\n-                start.set(C_INT, LENGTH_OFFSET, inMemoryFiles[i].contents.length());\n+                CXUnsavedFile.Filename(start, arena.allocateFrom(inMemoryFiles[i].file));\n+                CXUnsavedFile.Contents(start, arena.allocateFrom(inMemoryFiles[i].contents));\n+                CXUnsavedFile.Length(start, inMemoryFiles[i].contents.length());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,5 +55,14 @@\n-    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(\n-        Index_h.C_POINTER.withName(\"Filename\"),\n-        Index_h.C_POINTER.withName(\"Contents\"),\n-        Index_h.C_LONG.withName(\"Length\")\n-    ).withName(\"CXUnsavedFile\");\n+    private static final GroupLayout $LAYOUT = (switch (Index_h.C_LONG) {\n+        case OfInt _ -> MemoryLayout.structLayout(\n+             Index_h.C_POINTER.withName(\"Filename\"),\n+             Index_h.C_POINTER.withName(\"Contents\"),\n+             Index_h.C_LONG.withName(\"Length\"),\n+             MemoryLayout.paddingLayout(4)\n+        );\n+        case OfLong _ -> MemoryLayout.structLayout(\n+             Index_h.C_POINTER.withName(\"Filename\"),\n+             Index_h.C_POINTER.withName(\"Contents\"),\n+             Index_h.C_LONG.withName(\"Length\")\n+        );\n+        default -> throw new IllegalStateException(\"Unhandled layout: \" + Index_h.C_LONG);\n+    }).withName(\"CXUnsavedFile\");\n@@ -156,1 +165,1 @@\n-    private static final OfLong Length$LAYOUT = (OfLong)$LAYOUT.select(groupElement(\"Length\"));\n+    private static final ValueLayout Length$LAYOUT = (ValueLayout) $LAYOUT.select(groupElement(\"Length\"));\n@@ -164,1 +173,1 @@\n-    public static final OfLong Length$layout() {\n+    public static final ValueLayout Length$layout() {\n@@ -187,1 +196,5 @@\n-        return struct.get(Length$LAYOUT, Length$OFFSET);\n+        return switch (Length$LAYOUT) {\n+            case OfInt l -> struct.get(l, Length$OFFSET);\n+            case OfLong l -> struct.get(l, Length$OFFSET);\n+            default -> throw new IllegalStateException(\"Unhandled layout: \" + Length$LAYOUT);\n+        };\n@@ -197,1 +210,5 @@\n-        struct.set(Length$LAYOUT, Length$OFFSET, fieldValue);\n+        switch (Length$LAYOUT) {\n+            case OfInt l -> struct.set(l, Length$OFFSET, Math.toIntExact(fieldValue));\n+            case OfLong l -> struct.set(l, Length$OFFSET, fieldValue);\n+            default -> throw new IllegalStateException(\"Unhandled layout: \" + Length$LAYOUT);\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,2 @@\n-    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+    public static final ValueLayout C_LONG = (ValueLayout) Linker.nativeLinker().canonicalLayouts().get(\"long\");\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -23,0 +23,81 @@\n+\n+File: CXUnsavedFile.java\n+\n+```\n+\/\/ Manual change the layout of CXUnsavedFile to correctly handle the platform specific size of C_LONG\n+\n+diff --git a\/src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java b\/src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java\n+index 12d25de..a0ebb98 100644\n+--- a\/src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java\n++++ b\/src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java\n+@@ -52,11 +52,20 @@ public class CXUnsavedFile {\n+         \/\/ Should not be called directly\n+     }\n+\n+-    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(\n+-        Index_h.C_POINTER.withName(\"Filename\"),\n+-        Index_h.C_POINTER.withName(\"Contents\"),\n+-        Index_h.C_LONG.withName(\"Length\")\n+-    ).withName(\"CXUnsavedFile\");\n++    private static final GroupLayout $LAYOUT = (switch (Index_h.C_LONG) {\n++        case OfInt _ -> MemoryLayout.structLayout(\n++            Index_h.C_POINTER.withName(\"Filename\"),\n++                Index_h.C_POINTER.withName(\"Contents\"),\n++                Index_h.C_LONG.withName(\"Length\"),\n++                MemoryLayout.paddingLayout(4)\n++        );\n++        case OfLong _ -> MemoryLayout.structLayout(\n++            Index_h.C_POINTER.withName(\"Filename\"),\n++                Index_h.C_POINTER.withName(\"Contents\"),\n++                Index_h.C_LONG.withName(\"Length\")\n++        );\n++        default -> throw new IllegalStateException(\"Unhandled layout: \" + Index_h.C_LONG);\n++    }).withName(\"CXUnsavedFile\");\n+\n+     \/**\n+      * The layout of this struct\n+@@ -153,7 +162,7 @@ public class CXUnsavedFile {\n+         struct.set(Contents$LAYOUT, Contents$OFFSET, fieldValue);\n+     }\n+\n+-    private static final OfLong Length$LAYOUT = (OfLong)$LAYOUT.select(groupElement(\"Length\"));\n++    private static final ValueLayout Length$LAYOUT = (ValueLayout) $LAYOUT.select(groupElement(\"Length\"));\n+\n+     \/**\n+      * Layout for field:\n+@@ -161,7 +170,7 @@ public class CXUnsavedFile {\n+      * unsigned long Length\n+      * }\n+      *\/\n+-    public static final OfLong Length$layout() {\n++    public static final ValueLayout Length$layout() {\n+         return Length$LAYOUT;\n+     }\n+\n+@@ -184,7 +193,11 @@ public class CXUnsavedFile {\n+      * }\n+      *\/\n+     public static long Length(MemorySegment struct) {\n+-        return struct.get(Length$LAYOUT, Length$OFFSET);\n++        return switch (Length$LAYOUT) {\n++            case OfInt l -> struct.get(l, Length$OFFSET);\n++            case OfLong l -> struct.get(l, Length$OFFSET);\n++            default -> throw new IllegalStateException(\"Unhandled layout: \" + Length$LAYOUT);\n++        };\n+     }\n+\n+     \/**\n+@@ -194,7 +207,11 @@ public class CXUnsavedFile {\n+      * }\n+      *\/\n+     public static void Length(MemorySegment struct, long fieldValue) {\n+-        struct.set(Length$LAYOUT, Length$OFFSET, fieldValue);\n++        switch (Length$LAYOUT) {\n++            case OfInt l -> struct.set(l, Length$OFFSET, Math.toIntExact(fieldValue));\n++            case OfLong l -> struct.set(l, Length$OFFSET, fieldValue);\n++            default -> throw new IllegalStateException(\"Unhandled layout: \" + Length$LAYOUT);\n++        }\n+     }\n+\n+     \/**\n+```\n","filename":"updateclang\/README.md","additions":81,"deletions":0,"binary":false,"changes":81,"status":"modified"}]}