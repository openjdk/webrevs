{"files":[{"patch":"@@ -79,0 +79,3 @@\n+else ifeq ($(UNAME_M),aarch64)\n+  DEVKIT_VS_CPU_VAR_NAME := aarch64\n+  PLATFORM_CPU := aarch64\n","filename":"make\/Common.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# This build script builds a libclang bundle to be used for jextract.\n+# Both cmake and ninja (ninja-build) are required to be installed for\n+# this script to run.\n+\n+# Exit on error\n+set -e\n+\n+LLVM_VERSION=13.0.0\n+\n+BUNDLE_NAME=libclang-$LLVM_VERSION.tar.gz\n+\n+SCRIPT_DIR=\"$(cd \"$(dirname $0)\" > \/dev\/null && pwd)\"\n+SCRIPT_FILE=\"$(basename $0)\"\n+OUTPUT_DIR=\"${SCRIPT_DIR}\/..\/..\/build\/libclang\"\n+SRC_DIR=\"$OUTPUT_DIR\/src\"\n+BUILD_DIR=\"$OUTPUT_DIR\/build\"\n+DOWNLOAD_DIR=\"$OUTPUT_DIR\/download\"\n+INSTALL_DIR=\"$OUTPUT_DIR\/install\"\n+IMAGE_DIR=\"$OUTPUT_DIR\/image\"\n+\n+OS_NAME=$(uname -s)\n+OS_ARCH=$(arch)\n+NUM_CORES=$(nproc --all)\n+\n+USAGE=\"$0 <devkit dir>\"\n+\n+if [ \"$1\" = \"\" ]; then\n+    echo $USAGE\n+    exit 1\n+fi\n+DEVKIT_DIR=\"$1\"\n+\n+# OS specific build flags\n+case $OS_NAME in\n+  Linux)\n+    LIB_SUFFIX=.so\n+    CMAKE_C_COMPILER=\"$DEVKIT_DIR\/bin\/gcc\"\n+    CMAKE_CXX_COMPILER=\"$DEVKIT_DIR\/bin\/g++\"\n+    CMAKE_C_FLAGS=\"-static-libgcc\"\n+    CMAKE_CXX_FLAGS=\"-static-libgcc -static-libstdc++\"\n+    ;;\n+  Darwin)\n+    LIB_SUFFIX=.dylib\n+    CMAKE_C_COMPILER=\"$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/gcc\"\n+    CMAKE_CXX_COMPILER=\"$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/g++\"\n+    ;;\n+  *)\n+    echo \" Unsupported OS: $OS_NAME\"\n+    exit 1\n+    ;;\n+esac\n+\n+# Figure out target arch to pass to LLVM build\n+case $OS_ARCH in\n+  aarch64)\n+    TARGET_ARCH=AArch64\n+    ;;\n+  x86_64)\n+    TARGET_ARCH=X86_64\n+    ;;\n+  *)\n+    echo \" Unsupported arch: $OS_ARCH\"\n+    exit 1\n+    ;;\n+esac\n+\n+# Also supported: Debug, RelWithDebInfo\n+CMAKE_BUILD_TYPE=Release\n+\n+# Download source\n+LLVM_FILE=llvmorg-$LLVM_VERSION.tar.gz\n+DOWNLOADED_FILE=\"$DOWNLOAD_DIR\/$LLVM_FILE\"\n+mkdir -p \"$DOWNLOAD_DIR\"\n+if [ ! -f \"$DOWNLOADED_FILE\" ]; then\n+  wget -O \"$DOWNLOADED_FILE\" https:\/\/github.com\/llvm\/llvm-project\/archive\/refs\/tags\/$LLVM_FILE \n+fi\n+\n+# Unpack\n+if [ ! -e \"$SRC_DIR\" ]; then\n+  tar -xvf \"$DOWNLOADED_FILE\" --one-top-level=\"$SRC_DIR\" --strip-components=1\n+fi\n+\n+# Configure LLVM\n+cmake \\\n+  -B \"$BUILD_DIR\/llvm\" \\\n+  -S \"$SRC_DIR\/llvm\" \\\n+  -G Ninja \\\n+  -DCMAKE_INSTALL_PREFIX=\"$INSTALL_DIR\/llvm\" \\\n+  -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \\\n+  -DLLVM_ENABLE_TERMINFO=no \\\n+  -DLLVM_TARGETS_TO_BUILD=$TARGET_ARCH \\\n+  -DCMAKE_C_COMPILER=\"$CMAKE_C_COMPILER\" \\\n+  -DCMAKE_CXX_COMPILER=\"$CMAKE_CXX_COMPILER\" \\\n+  -DCMAKE_C_FLAGS=\"$CMAKE_C_FLAGS\" \\\n+  -DCMAKE_CXX_FLAGS=\"$CMAKE_CXX_FLAGS\"\n+\n+# Build LLVM\n+cmake --build \"$BUILD_DIR\/llvm\" --config $CMAKE_BUILD_TYPE --target install --parallel $NUM_CORES\n+\n+# Configure Clang\n+cmake \\\n+  -B \"$BUILD_DIR\/clang\" \\\n+  -S \"$SRC_DIR\/clang\" \\\n+  -G Ninja \\\n+  -DCMAKE_INSTALL_PREFIX=\"$INSTALL_DIR\/clang\" \\\n+  -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \\\n+  -DCMAKE_PREFIX_PATH=\"$INSTALL_DIR\/llvm\/lib\/cmake\" \\\n+  -DLLVM_INCLUDE_TESTS=OFF \\\n+  -DLLVM_ENABLE_TERMINFO=no \\\n+  -DLLVM_TARGETS_TO_BUILD=$TARGET_ARCH \\\n+  -DCMAKE_C_COMPILER=\"$CMAKE_C_COMPILER\" \\\n+  -DCMAKE_CXX_COMPILER=\"$CMAKE_CXX_COMPILER\" \\\n+  -DCMAKE_C_FLAGS=\"$CMAKE_C_FLAGS\" \\\n+  -DCMAKE_CXX_FLAGS=\"$CMAKE_CXX_FLAGS\"\n+\n+# Build Clang\n+cmake --build \"$BUILD_DIR\/clang\" --config $CMAKE_BUILD_TYPE --target install --parallel $NUM_CORES\n+\n+\n+mkdir -p $IMAGE_DIR\n+# Extract what we need into an image\n+echo \"Copying libclang$LIB_SUFFIX to image\"\n+mkdir -p \"$IMAGE_DIR\/lib\"\n+cp -a $INSTALL_DIR\/clang\/lib\/libclang.* $IMAGE_DIR\/lib\/\n+\n+echo \"Copying include to image\"\n+mkdir -p $IMAGE_DIR\/include\n+cp -a $INSTALL_DIR\/clang\/include\/. $IMAGE_DIR\/include\/\n+\n+echo \"Copying lib\/clang\/*\/include to image\"\n+mkdir -p $IMAGE_DIR\/lib\/clang\/$LLVM_VERSION\/include\n+cp -a $INSTALL_DIR\/clang\/lib\/clang\/$LLVM_VERSION\/include\/. \\\n+    $IMAGE_DIR\/lib\/clang\/$LLVM_VERSION\/include\/\n+\n+# Copy this script to image\n+echo \"Copying this script to image\"\n+cp -a $0 $IMAGE_DIR\n+\n+\n+# Create bundle\n+echo \"Creating $OUTPUT_DIR\/$BUNDLE_NAME\"\n+cd $IMAGE_DIR\n+tar zcf $OUTPUT_DIR\/$BUNDLE_NAME *\n","filename":"make\/devkit\/createLibclangBundle.sh","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -57,0 +57,2 @@\n+    public static final boolean IS_LINUX = System.getProperty(\"os.name\").equals(\"Linux\");\n+    public static final boolean IS_AARCH64 = System.getProperty(\"os.arch\").equals(\"aarch64\");\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-file(GLOB_RECURSE TEST_LIBS ${TEST_SOURCE_ROOT}\/..\/*lib*.c)\n+file(GLOB_RECURSE TEST_LIBS ${TEST_SOURCE_ROOT}\/*lib*.c)\n","filename":"test\/test-support\/CMakeLists.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,2 +93,3 @@\n-        \/\/ Note here: only on Windows, the bitfield needs to be aligned and requires more padding\n-        assertEquals(layout.memberLayouts().get(1), MemoryLayout.paddingLayout(IS_WINDOWS ? 11 : 8));\n+        \/\/ Note here: on some platforms, the bitfield needs to be aligned and requires more padding\n+        int paddingBytes = (IS_WINDOWS || (IS_LINUX && IS_AARCH64)) ? 11 : 8;\n+        assertEquals(layout.memberLayouts().get(1), MemoryLayout.paddingLayout(paddingBytes));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedAnonOffset\/TestNestedAnonOffset.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}