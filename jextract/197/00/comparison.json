{"files":[{"patch":"@@ -314,1 +314,1 @@\n-            payload = MemorySegment.ofArray(new byte[(int)CXCursor.$LAYOUT().byteSize()]);\n+            payload = MemorySegment.ofArray(new byte[(int)CXCursor.sizeof()]);\n@@ -335,1 +335,1 @@\n-                                          C_CHAR, 0, CXCursor.$LAYOUT().byteSize());\n+                                          C_CHAR, 0, CXCursor.sizeof());\n@@ -338,1 +338,1 @@\n-        private static final MemorySegment COMPARISON_SEGMENT = Arena.ofAuto().allocate(CXCursor.$LAYOUT(), 2);\n+        private static final MemorySegment COMPARISON_SEGMENT = Arena.ofAuto().allocate(CXCursor.layout(), 2);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,3 +77,3 @@\n-    static long FILENAME_OFFSET = CXUnsavedFile.$LAYOUT().byteOffset(MemoryLayout.PathElement.groupElement(\"Filename\"));\n-    static long CONTENTS_OFFSET = CXUnsavedFile.$LAYOUT().byteOffset(MemoryLayout.PathElement.groupElement(\"Contents\"));\n-    static long LENGTH_OFFSET = CXUnsavedFile.$LAYOUT().byteOffset(MemoryLayout.PathElement.groupElement(\"Length\"));\n+    static long FILENAME_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Filename\"));\n+    static long CONTENTS_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Contents\"));\n+    static long LENGTH_OFFSET = CXUnsavedFile.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"Length\"));\n@@ -85,1 +85,1 @@\n-                    arena.allocate(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n+                    arena.allocate(CXUnsavedFile.layout(), inMemoryFiles.length);\n@@ -87,1 +87,1 @@\n-                MemorySegment start = files.asSlice(i * CXUnsavedFile.$LAYOUT().byteSize());\n+                MemorySegment start = files.asSlice(i * CXUnsavedFile.sizeof());\n@@ -137,1 +137,1 @@\n-            super(addr, size * CXToken.$LAYOUT().byteSize(),\n+            super(addr, size * CXToken.sizeof(),\n@@ -147,1 +147,1 @@\n-            return ptr.asSlice(idx * CXToken.$LAYOUT().byteSize());\n+            return ptr.asSlice(idx * CXToken.sizeof());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        return CXType.kind$get(segment);\n+        return CXType.kind(segment);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -42,2 +45,2 @@\n- *     void* data[3];\n- * };\n+ *     const void *data[3];\n+ * }\n@@ -49,2 +52,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -59,1 +61,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -64,0 +69,1 @@\n+    private static final OfInt kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"kind\"));\n@@ -68,1 +74,1 @@\n-     * enum CXCursorKind kind;\n+     * enum CXCursorKind kind\n@@ -71,6 +77,2 @@\n-    public static int kind$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, kind$OFFSET);\n-    }\n-\n-    public static int kind$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, kind$OFFSET + (index * sizeof()));\n+    public static int kind(MemorySegment struct) {\n+        return struct.get(kind$LAYOUT, kind$OFFSET);\n@@ -82,1 +84,1 @@\n-     * enum CXCursorKind kind;\n+     * enum CXCursorKind kind\n@@ -85,6 +87,2 @@\n-    public static void kind$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, kind$OFFSET, x);\n-    }\n-\n-    public static void kind$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, kind$OFFSET + (index * sizeof()), x);\n+    public static void kind(MemorySegment struct, int fieldValue) {\n+        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);\n@@ -94,0 +92,1 @@\n+    private static final OfInt xdata$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"xdata\"));\n@@ -98,1 +97,1 @@\n-     * int xdata;\n+     * int xdata\n@@ -101,2 +100,2 @@\n-    public static int xdata$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, xdata$OFFSET);\n+    public static int xdata(MemorySegment struct) {\n+        return struct.get(xdata$LAYOUT, xdata$OFFSET);\n@@ -105,2 +104,21 @@\n-    public static int xdata$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, xdata$OFFSET + (index * sizeof()));\n+    \/**\n+     * Setter for field:\n+     * {@snippet lang=c :\n+     * int xdata\n+     * }\n+     *\/\n+    public static void xdata(MemorySegment struct, int fieldValue) {\n+        struct.set(xdata$LAYOUT, xdata$OFFSET, fieldValue);\n+    }\n+\n+    private static final long data$OFFSET = 8;\n+    private static final long data$SIZE = 24;\n+\n+    \/**\n+     * Getter for field:\n+     * {@snippet lang=c :\n+     * const void *data[3]\n+     * }\n+     *\/\n+    public static MemorySegment data(MemorySegment struct) {\n+        return struct.asSlice(data$OFFSET, data$SIZE);\n@@ -112,1 +130,1 @@\n-     * int xdata;\n+     * const void *data[3]\n@@ -115,2 +133,2 @@\n-    public static void xdata$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, xdata$OFFSET, x);\n+    public static void data(MemorySegment struct, MemorySegment fieldValue) {\n+        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$SIZE);\n@@ -119,2 +137,6 @@\n-    public static void xdata$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, xdata$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n@@ -123,2 +145,4 @@\n-    private static final long data$OFFSET = 8;\n-    private static final long data$SIZE = 24;\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n@@ -126,2 +150,5 @@\n-    public static MemorySegment data$slice(MemorySegment seg) {\n-        return seg.asSlice(data$OFFSET, data$SIZE);\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -130,2 +157,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -133,2 +165,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -137,2 +173,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursor.java","additions":83,"deletions":43,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -39,1 +42,5 @@\n- * enum CXChildVisitResult (*CXCursorVisitor)(struct  cursor,struct  parent,void* client_data);\n+ * typedef enum CXChildVisitResult {\n+ *     CXChildVisit_Break,\n+ *     CXChildVisit_Continue,\n+ *     CXChildVisit_Recurse\n+ * } (*CXCursorVisitor)(CXCursor, CXCursor, CXClientData)\n@@ -42,1 +49,1 @@\n-public interface CXCursorVisitor {\n+public class CXCursorVisitor {\n@@ -44,1 +51,6 @@\n-    int apply(MemorySegment cursor, MemorySegment parent, MemorySegment client_data);\n+    \/**\n+     * The function pointer signature, expressed as a functional interface\n+     *\/\n+    public interface Function {\n+        int apply(MemorySegment cursor, MemorySegment parent, MemorySegment client_data);\n+    }\n@@ -46,1 +58,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -48,2 +60,2 @@\n-        CXCursor.$LAYOUT(),\n-        CXCursor.$LAYOUT(),\n+        CXCursor.layout(),\n+        CXCursor.layout(),\n@@ -53,1 +65,8 @@\n-    MethodHandle UP$MH = Index_h.upcallHandle(CXCursorVisitor.class, \"apply\", $DESC);\n+    \/**\n+     * The descriptor of this function pointer\n+     *\/\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = Index_h.upcallHandle(CXCursorVisitor.Function.class, \"apply\", $DESC);\n@@ -55,2 +74,6 @@\n-    static MemorySegment allocate(CXCursorVisitor fi, Arena scope) {\n-        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, scope);\n+    \/**\n+     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.\n+     * The lifetime of the returned segment is managed by {@code arena}\n+     *\/\n+    public static MemorySegment allocate(CXCursorVisitor.Function fi, Arena arena) {\n+        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);\n@@ -59,1 +82,1 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n@@ -61,9 +84,9 @@\n-    static CXCursorVisitor ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _cursor, MemorySegment _parent, MemorySegment _client_data) -> {\n-            try {\n-                return (int) DOWN$MH.invokeExact(symbol, _cursor, _parent, _client_data);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    \/**\n+     * Invoke the upcall stub {@code funcPtr}, with given parameters\n+     *\/\n+    public static int invoke(MemorySegment funcPtr,MemorySegment cursor, MemorySegment parent, MemorySegment client_data) {\n+        try {\n+            return (int) DOWN$MH.invokeExact(funcPtr, cursor, parent, client_data);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":46,"deletions":23,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -40,1 +43,1 @@\n- *     void* ptr_data[2];\n+ *     const void *ptr_data[2];\n@@ -42,1 +45,1 @@\n- * };\n+ * }\n@@ -48,2 +51,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -58,1 +60,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -65,2 +70,18 @@\n-    public static MemorySegment ptr_data$slice(MemorySegment seg) {\n-        return seg.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+    \/**\n+     * Getter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static MemorySegment ptr_data(MemorySegment struct) {\n+        return struct.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+    }\n+\n+    \/**\n+     * Setter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static void ptr_data(MemorySegment struct, MemorySegment fieldValue) {\n+        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$SIZE);\n@@ -70,0 +91,1 @@\n+    private static final OfInt int_data$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"int_data\"));\n@@ -74,1 +96,1 @@\n-     * unsigned int int_data;\n+     * unsigned int int_data\n@@ -77,6 +99,2 @@\n-    public static int int_data$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, int_data$OFFSET);\n-    }\n-\n-    public static int int_data$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, int_data$OFFSET + (index * sizeof()));\n+    public static int int_data(MemorySegment struct) {\n+        return struct.get(int_data$LAYOUT, int_data$OFFSET);\n@@ -88,1 +106,1 @@\n-     * unsigned int int_data;\n+     * unsigned int int_data\n@@ -91,2 +109,2 @@\n-    public static void int_data$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, int_data$OFFSET, x);\n+    public static void int_data(MemorySegment struct, int fieldValue) {\n+        struct.set(int_data$LAYOUT, int_data$OFFSET, fieldValue);\n@@ -95,2 +113,18 @@\n-    public static void int_data$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, int_data$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n+    }\n+\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n+\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -99,2 +133,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -102,2 +141,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -106,2 +149,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceLocation.java","additions":76,"deletions":29,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -40,1 +43,1 @@\n- *     void* ptr_data[2];\n+ *     const void *ptr_data[2];\n@@ -43,1 +46,1 @@\n- * };\n+ * }\n@@ -49,2 +52,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -59,1 +61,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -66,2 +71,18 @@\n-    public static MemorySegment ptr_data$slice(MemorySegment seg) {\n-        return seg.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+    \/**\n+     * Getter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static MemorySegment ptr_data(MemorySegment struct) {\n+        return struct.asSlice(ptr_data$OFFSET, ptr_data$SIZE);\n+    }\n+\n+    \/**\n+     * Setter for field:\n+     * {@snippet lang=c :\n+     * const void *ptr_data[2]\n+     * }\n+     *\/\n+    public static void ptr_data(MemorySegment struct, MemorySegment fieldValue) {\n+        MemorySegment.copy(fieldValue, 0L, struct, ptr_data$OFFSET, ptr_data$SIZE);\n@@ -71,0 +92,1 @@\n+    private static final OfInt begin_int_data$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"begin_int_data\"));\n@@ -75,1 +97,1 @@\n-     * unsigned int begin_int_data;\n+     * unsigned int begin_int_data\n@@ -78,6 +100,2 @@\n-    public static int begin_int_data$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, begin_int_data$OFFSET);\n-    }\n-\n-    public static int begin_int_data$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, begin_int_data$OFFSET + (index * sizeof()));\n+    public static int begin_int_data(MemorySegment struct) {\n+        return struct.get(begin_int_data$LAYOUT, begin_int_data$OFFSET);\n@@ -89,1 +107,1 @@\n-     * unsigned int begin_int_data;\n+     * unsigned int begin_int_data\n@@ -92,6 +110,2 @@\n-    public static void begin_int_data$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, begin_int_data$OFFSET, x);\n-    }\n-\n-    public static void begin_int_data$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, begin_int_data$OFFSET + (index * sizeof()), x);\n+    public static void begin_int_data(MemorySegment struct, int fieldValue) {\n+        struct.set(begin_int_data$LAYOUT, begin_int_data$OFFSET, fieldValue);\n@@ -101,0 +115,1 @@\n+    private static final OfInt end_int_data$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"end_int_data\"));\n@@ -105,1 +120,1 @@\n-     * unsigned int end_int_data;\n+     * unsigned int end_int_data\n@@ -108,6 +123,2 @@\n-    public static int end_int_data$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, end_int_data$OFFSET);\n-    }\n-\n-    public static int end_int_data$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, end_int_data$OFFSET + (index * sizeof()));\n+    public static int end_int_data(MemorySegment struct) {\n+        return struct.get(end_int_data$LAYOUT, end_int_data$OFFSET);\n@@ -119,1 +130,1 @@\n-     * unsigned int end_int_data;\n+     * unsigned int end_int_data\n@@ -122,2 +133,10 @@\n-    public static void end_int_data$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, end_int_data$OFFSET, x);\n+    public static void end_int_data(MemorySegment struct, int fieldValue) {\n+        struct.set(end_int_data$LAYOUT, end_int_data$OFFSET, fieldValue);\n+    }\n+\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n@@ -126,2 +145,10 @@\n-    public static void end_int_data$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, end_int_data$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n+\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -130,2 +157,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -133,2 +165,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -137,2 +173,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXSourceRange.java","additions":83,"deletions":43,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -40,1 +43,1 @@\n- *     void* data;\n+ *     const void *data;\n@@ -42,1 +45,1 @@\n- * };\n+ * }\n@@ -48,2 +51,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -58,1 +60,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -63,0 +68,1 @@\n+    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement(\"data\"));\n@@ -67,1 +73,1 @@\n-     * void* data;\n+     * const void *data\n@@ -70,6 +76,2 @@\n-    public static MemorySegment data$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_POINTER, data$OFFSET);\n-    }\n-\n-    public static MemorySegment data$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_POINTER, data$OFFSET + (index * sizeof()));\n+    public static MemorySegment data(MemorySegment struct) {\n+        return struct.get(data$LAYOUT, data$OFFSET);\n@@ -81,1 +83,1 @@\n-     * void* data;\n+     * const void *data\n@@ -84,6 +86,2 @@\n-    public static void data$set(MemorySegment seg, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, data$OFFSET, x);\n-    }\n-\n-    public static void data$set(MemorySegment seg, long index, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, data$OFFSET + (index * sizeof()), x);\n+    public static void data(MemorySegment struct, MemorySegment fieldValue) {\n+        struct.set(data$LAYOUT, data$OFFSET, fieldValue);\n@@ -93,0 +91,1 @@\n+    private static final OfInt private_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"private_flags\"));\n@@ -97,1 +96,1 @@\n-     * unsigned int private_flags;\n+     * unsigned int private_flags\n@@ -100,6 +99,2 @@\n-    public static int private_flags$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, private_flags$OFFSET);\n-    }\n-\n-    public static int private_flags$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, private_flags$OFFSET + (index * sizeof()));\n+    public static int private_flags(MemorySegment struct) {\n+        return struct.get(private_flags$LAYOUT, private_flags$OFFSET);\n@@ -111,1 +106,1 @@\n-     * unsigned int private_flags;\n+     * unsigned int private_flags\n@@ -114,2 +109,10 @@\n-    public static void private_flags$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, private_flags$OFFSET, x);\n+    public static void private_flags(MemorySegment struct, int fieldValue) {\n+        struct.set(private_flags$LAYOUT, private_flags$OFFSET, fieldValue);\n+    }\n+\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n@@ -118,2 +121,10 @@\n-    public static void private_flags$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, private_flags$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n+\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -122,2 +133,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -125,2 +141,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -129,2 +149,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":65,"deletions":41,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -41,2 +44,2 @@\n- *     void* ptr_data;\n- * };\n+ *     void *ptr_data;\n+ * }\n@@ -48,2 +51,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -57,1 +59,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -64,2 +69,18 @@\n-    public static MemorySegment int_data$slice(MemorySegment seg) {\n-        return seg.asSlice(int_data$OFFSET, int_data$SIZE);\n+    \/**\n+     * Getter for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static MemorySegment int_data(MemorySegment struct) {\n+        return struct.asSlice(int_data$OFFSET, int_data$SIZE);\n+    }\n+\n+    \/**\n+     * Setter for field:\n+     * {@snippet lang=c :\n+     * unsigned int int_data[4]\n+     * }\n+     *\/\n+    public static void int_data(MemorySegment struct, MemorySegment fieldValue) {\n+        MemorySegment.copy(fieldValue, 0L, struct, int_data$OFFSET, int_data$SIZE);\n@@ -69,0 +90,1 @@\n+    private static final AddressLayout ptr_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement(\"ptr_data\"));\n@@ -73,1 +95,1 @@\n-     * void* ptr_data;\n+     * void *ptr_data\n@@ -76,6 +98,2 @@\n-    public static MemorySegment ptr_data$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_POINTER, ptr_data$OFFSET);\n-    }\n-\n-    public static MemorySegment ptr_data$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_POINTER, ptr_data$OFFSET + (index * sizeof()));\n+    public static MemorySegment ptr_data(MemorySegment struct) {\n+        return struct.get(ptr_data$LAYOUT, ptr_data$OFFSET);\n@@ -87,1 +105,1 @@\n-     * void* ptr_data;\n+     * void *ptr_data\n@@ -90,2 +108,2 @@\n-    public static void ptr_data$set(MemorySegment seg, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, ptr_data$OFFSET, x);\n+    public static void ptr_data(MemorySegment struct, MemorySegment fieldValue) {\n+        struct.set(ptr_data$LAYOUT, ptr_data$OFFSET, fieldValue);\n@@ -94,2 +112,18 @@\n-    public static void ptr_data$set(MemorySegment seg, long index, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, ptr_data$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n+    }\n+\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n+\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -98,2 +132,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -101,2 +140,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -105,2 +148,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":76,"deletions":29,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -41,2 +44,2 @@\n- *     void* data[2];\n- * };\n+ *     void *data[2];\n+ * }\n@@ -48,2 +51,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -58,1 +60,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -63,0 +68,1 @@\n+    private static final OfInt kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement(\"kind\"));\n@@ -67,1 +73,11 @@\n-     * enum CXTypeKind kind;\n+     * enum CXTypeKind kind\n+     * }\n+     *\/\n+    public static int kind(MemorySegment struct) {\n+        return struct.get(kind$LAYOUT, kind$OFFSET);\n+    }\n+\n+    \/**\n+     * Setter for field:\n+     * {@snippet lang=c :\n+     * enum CXTypeKind kind\n@@ -70,2 +86,2 @@\n-    public static int kind$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_INT, kind$OFFSET);\n+    public static void kind(MemorySegment struct, int fieldValue) {\n+        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);\n@@ -74,2 +90,11 @@\n-    public static int kind$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_INT, kind$OFFSET + (index * sizeof()));\n+    private static final long data$OFFSET = 8;\n+    private static final long data$SIZE = 16;\n+\n+    \/**\n+     * Getter for field:\n+     * {@snippet lang=c :\n+     * void *data[2]\n+     * }\n+     *\/\n+    public static MemorySegment data(MemorySegment struct) {\n+        return struct.asSlice(data$OFFSET, data$SIZE);\n@@ -81,1 +106,1 @@\n-     * enum CXTypeKind kind;\n+     * void *data[2]\n@@ -84,2 +109,2 @@\n-    public static void kind$set(MemorySegment seg, int x) {\n-        seg.set(Index_h.C_INT, kind$OFFSET, x);\n+    public static void data(MemorySegment struct, MemorySegment fieldValue) {\n+        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$SIZE);\n@@ -88,2 +113,6 @@\n-    public static void kind$set(MemorySegment seg, long index, int x) {\n-        seg.set(Index_h.C_INT, kind$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n@@ -92,2 +121,4 @@\n-    private static final long data$OFFSET = 8;\n-    private static final long data$SIZE = 16;\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n@@ -95,2 +126,5 @@\n-    public static MemorySegment data$slice(MemorySegment seg) {\n-        return seg.asSlice(data$OFFSET, data$SIZE);\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -99,2 +133,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -102,2 +141,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -106,2 +149,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":76,"deletions":29,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -40,2 +43,2 @@\n- *     char* Filename;\n- *     char* Contents;\n+ *     const char *Filename;\n+ *     const char *Contents;\n@@ -43,1 +46,1 @@\n- * };\n+ * }\n@@ -49,2 +52,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -59,1 +61,4 @@\n-    public static final GroupLayout $LAYOUT() {\n+    \/**\n+     * The layout of this struct\n+     *\/\n+    public static final GroupLayout layout() {\n@@ -64,0 +69,1 @@\n+    private static final AddressLayout Filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement(\"Filename\"));\n@@ -68,1 +74,1 @@\n-     * char* Filename;\n+     * const char *Filename\n@@ -71,6 +77,2 @@\n-    public static MemorySegment Filename$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_POINTER, Filename$OFFSET);\n-    }\n-\n-    public static MemorySegment Filename$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_POINTER, Filename$OFFSET + (index * sizeof()));\n+    public static MemorySegment Filename(MemorySegment struct) {\n+        return struct.get(Filename$LAYOUT, Filename$OFFSET);\n@@ -82,1 +84,1 @@\n-     * char* Filename;\n+     * const char *Filename\n@@ -85,6 +87,2 @@\n-    public static void Filename$set(MemorySegment seg, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, Filename$OFFSET, x);\n-    }\n-\n-    public static void Filename$set(MemorySegment seg, long index, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, Filename$OFFSET + (index * sizeof()), x);\n+    public static void Filename(MemorySegment struct, MemorySegment fieldValue) {\n+        struct.set(Filename$LAYOUT, Filename$OFFSET, fieldValue);\n@@ -94,0 +92,1 @@\n+    private static final AddressLayout Contents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement(\"Contents\"));\n@@ -98,1 +97,1 @@\n-     * char* Contents;\n+     * const char *Contents\n@@ -101,6 +100,2 @@\n-    public static MemorySegment Contents$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_POINTER, Contents$OFFSET);\n-    }\n-\n-    public static MemorySegment Contents$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_POINTER, Contents$OFFSET + (index * sizeof()));\n+    public static MemorySegment Contents(MemorySegment struct) {\n+        return struct.get(Contents$LAYOUT, Contents$OFFSET);\n@@ -112,1 +107,1 @@\n-     * char* Contents;\n+     * const char *Contents\n@@ -115,6 +110,2 @@\n-    public static void Contents$set(MemorySegment seg, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, Contents$OFFSET, x);\n-    }\n-\n-    public static void Contents$set(MemorySegment seg, long index, MemorySegment x) {\n-        seg.set(Index_h.C_POINTER, Contents$OFFSET + (index * sizeof()), x);\n+    public static void Contents(MemorySegment struct, MemorySegment fieldValue) {\n+        struct.set(Contents$LAYOUT, Contents$OFFSET, fieldValue);\n@@ -124,0 +115,1 @@\n+    private static final OfLong Length$LAYOUT = (OfLong)$LAYOUT.select(groupElement(\"Length\"));\n@@ -128,1 +120,1 @@\n-     * unsigned long Length;\n+     * unsigned long Length\n@@ -131,6 +123,2 @@\n-    public static long Length$get(MemorySegment seg) {\n-        return seg.get(Index_h.C_LONG, Length$OFFSET);\n-    }\n-\n-    public static long Length$get(MemorySegment seg, long index) {\n-        return seg.get(Index_h.C_LONG, Length$OFFSET + (index * sizeof()));\n+    public static long Length(MemorySegment struct) {\n+        return struct.get(Length$LAYOUT, Length$OFFSET);\n@@ -142,1 +130,1 @@\n-     * unsigned long Length;\n+     * unsigned long Length\n@@ -145,2 +133,2 @@\n-    public static void Length$set(MemorySegment seg, long x) {\n-        seg.set(Index_h.C_LONG, Length$OFFSET, x);\n+    public static void Length(MemorySegment struct, long fieldValue) {\n+        struct.set(Length$LAYOUT, Length$OFFSET, fieldValue);\n@@ -149,2 +137,18 @@\n-    public static void Length$set(MemorySegment seg, long index, long x) {\n-        seg.set(Index_h.C_LONG, Length$OFFSET + (index * sizeof()), x);\n+    \/**\n+     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n+     *\/\n+    public static MemorySegment asSlice(MemorySegment array, long index) {\n+        return array.asSlice(layout().byteSize() * index);\n+    }\n+\n+    \/**\n+     * The size (in bytes) of this struct\n+     *\/\n+    public static long sizeof() { return layout().byteSize(); }\n+\n+    \/**\n+     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}\n+     *\/\n+    public static MemorySegment allocate(SegmentAllocator allocator) {\n+        return allocator.allocate(layout());\n@@ -153,2 +157,7 @@\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    \/**\n+     * Allocate an array of size {@code elementCount} using {@code allocator}.\n+     * The returned segment has size {@code elementCount * layout().byteSize()}.\n+     *\/\n+    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));\n+    }\n@@ -156,2 +165,6 @@\n-    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return reinterpret(addr, 1, arena, cleanup);\n@@ -160,2 +173,6 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n-        return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n+    \/**\n+     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).\n+     * The returned segment has size {@code elementCount * layout().byteSize()}\n+     *\/\n+    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {\n+        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":73,"deletions":56,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -35,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -36,0 +38,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -48,2 +51,1 @@\n-        \/\/ Suppresses public default constructor, ensuring non-instantiability,\n-        \/\/ but allows generated subclasses in same package.\n+        \/\/ Should not be called directly\n@@ -63,0 +65,10 @@\n+    static final Arena LIBRARY_ARENA = Arena.ofAuto();\n+    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean(\"jextract.trace.downcalls\");\n+\n+    static void traceDowncall(String name, Object... args) {\n+         String traceArgs = Arrays.stream(args)\n+                       .map(Object::toString)\n+                       .collect(Collectors.joining(\", \"));\n+         System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n+    }\n+\n@@ -110,1 +122,0 @@\n-\n@@ -113,1 +124,1 @@\n-     * enum CXErrorCode.CXError_Success = 0;\n+     * enum CXErrorCode.CXError_Success = 0\n@@ -120,1 +131,0 @@\n-\n@@ -123,1 +133,1 @@\n-     * enum CXErrorCode.CXError_Failure = 1;\n+     * enum CXErrorCode.CXError_Failure = 1\n@@ -130,1 +140,0 @@\n-\n@@ -133,1 +142,1 @@\n-     * enum CXErrorCode.CXError_Crashed = 2;\n+     * enum CXErrorCode.CXError_Crashed = 2\n@@ -140,1 +149,0 @@\n-\n@@ -143,1 +151,1 @@\n-     * enum CXErrorCode.CXError_InvalidArguments = 3;\n+     * enum CXErrorCode.CXError_InvalidArguments = 3\n@@ -150,1 +158,0 @@\n-\n@@ -153,1 +160,1 @@\n-     * enum CXErrorCode.CXError_ASTReadError = 4;\n+     * enum CXErrorCode.CXError_ASTReadError = 4\n@@ -159,6 +166,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * char* clang_getCString(CXString string);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCString$MH() {\n+\n+    private static MethodHandle clang_getCString$MH() {\n@@ -168,1 +171,1 @@\n-                CXString.$LAYOUT()\n+                CXString.layout()\n@@ -178,0 +181,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n@@ -181,1 +189,4 @@\n-            return (MemorySegment) mh$.invokeExact(string);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCString\", string);\n+            }\n+            return (MemorySegment)mh$.invokeExact(string);\n@@ -186,6 +197,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_disposeString(CXString string);\n-     * }\n-     *\/\n-    public static MethodHandle clang_disposeString$MH() {\n+\n+    private static MethodHandle clang_disposeString$MH() {\n@@ -194,1 +201,1 @@\n-                CXString.$LAYOUT()\n+                CXString.layout()\n@@ -204,0 +211,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n@@ -207,0 +219,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeString\", string);\n+            }\n@@ -214,1 +229,1 @@\n-     * typedef void* CXIndex;\n+     * typedef void *CXIndex\n@@ -220,1 +235,1 @@\n-     * typedef struct CXTranslationUnitImpl* CXTranslationUnit;\n+     * typedef struct CXTranslationUnitImpl *CXTranslationUnit\n@@ -225,1 +240,0 @@\n-\n@@ -228,1 +242,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_None = 0;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_None = 0\n@@ -235,1 +249,0 @@\n-\n@@ -238,1 +251,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_DynamicNone = 1;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_DynamicNone = 1\n@@ -245,1 +258,0 @@\n-\n@@ -248,1 +260,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Dynamic = 2;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Dynamic = 2\n@@ -255,1 +267,0 @@\n-\n@@ -258,1 +269,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_MSAny = 3;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_MSAny = 3\n@@ -265,1 +276,0 @@\n-\n@@ -268,1 +278,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4\n@@ -275,1 +285,0 @@\n-\n@@ -278,1 +287,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5\n@@ -285,1 +294,0 @@\n-\n@@ -288,1 +296,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unevaluated = 6;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unevaluated = 6\n@@ -295,1 +303,0 @@\n-\n@@ -298,1 +305,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Uninstantiated = 7;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Uninstantiated = 7\n@@ -305,1 +312,0 @@\n-\n@@ -308,1 +314,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unparsed = 8;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unparsed = 8\n@@ -315,1 +321,0 @@\n-\n@@ -318,1 +323,1 @@\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_NoThrow = 9;\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_NoThrow = 9\n@@ -324,6 +329,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics);\n-     * }\n-     *\/\n-    public static MethodHandle clang_createIndex$MH() {\n+\n+    private static MethodHandle clang_createIndex$MH() {\n@@ -344,0 +345,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n+     * }\n+     *\/\n@@ -347,1 +353,4 @@\n-            return (MemorySegment) mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_createIndex\", excludeDeclarationsFromPCH, displayDiagnostics);\n+            }\n+            return (MemorySegment)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n@@ -352,6 +361,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_disposeIndex(CXIndex index);\n-     * }\n-     *\/\n-    public static MethodHandle clang_disposeIndex$MH() {\n+\n+    private static MethodHandle clang_disposeIndex$MH() {\n@@ -370,0 +375,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n+     * }\n+     *\/\n@@ -373,0 +383,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeIndex\", index);\n+            }\n@@ -378,6 +391,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getFileName(CXFile SFile);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getFileName$MH() {\n+\n+    private static MethodHandle clang_getFileName$MH() {\n@@ -386,1 +395,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -397,0 +406,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n+     * }\n+     *\/\n@@ -400,1 +414,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, SFile);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFileName\", allocator, SFile);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, SFile);\n@@ -405,6 +422,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getNullLocation();\n-     * }\n-     *\/\n-    public static MethodHandle clang_getNullLocation$MH() {\n+\n+    private static MethodHandle clang_getNullLocation$MH() {\n@@ -413,1 +426,1 @@\n-                CXSourceLocation.$LAYOUT()        );\n+                CXSourceLocation.layout()        );\n@@ -422,0 +435,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n@@ -425,1 +443,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNullLocation\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n@@ -430,6 +451,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2);\n-     * }\n-     *\/\n-    public static MethodHandle clang_equalLocations$MH() {\n+\n+    private static MethodHandle clang_equalLocations$MH() {\n@@ -439,2 +456,2 @@\n-                CXSourceLocation.$LAYOUT(),\n-                CXSourceLocation.$LAYOUT()\n+                CXSourceLocation.layout(),\n+                CXSourceLocation.layout()\n@@ -450,0 +467,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n@@ -453,1 +475,4 @@\n-            return (int) mh$.invokeExact(loc1, loc2);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalLocations\", loc1, loc2);\n+            }\n+            return (int)mh$.invokeExact(loc1, loc2);\n@@ -458,6 +483,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getLocation$MH() {\n+\n+    private static MethodHandle clang_getLocation$MH() {\n@@ -466,1 +487,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -480,0 +501,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n@@ -483,1 +509,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, tu, file, line, column);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getLocation\", allocator, tu, file, line, column);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, tu, file, line, column);\n@@ -488,6 +517,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getLocationForOffset$MH() {\n+\n+    private static MethodHandle clang_getLocationForOffset$MH() {\n@@ -496,1 +521,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -509,0 +534,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n+     * }\n+     *\/\n@@ -512,1 +542,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, tu, file, offset);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getLocationForOffset\", allocator, tu, file, offset);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, tu, file, offset);\n@@ -517,6 +550,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_Location_isInSystemHeader(CXSourceLocation location);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Location_isInSystemHeader$MH() {\n+\n+    private static MethodHandle clang_Location_isInSystemHeader$MH() {\n@@ -526,1 +555,1 @@\n-                CXSourceLocation.$LAYOUT()\n+                CXSourceLocation.layout()\n@@ -536,0 +565,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n+     * }\n+     *\/\n@@ -539,1 +573,4 @@\n-            return (int) mh$.invokeExact(location);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Location_isInSystemHeader\", location);\n+            }\n+            return (int)mh$.invokeExact(location);\n@@ -544,6 +581,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_Location_isFromMainFile(CXSourceLocation location);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Location_isFromMainFile$MH() {\n+\n+    private static MethodHandle clang_Location_isFromMainFile$MH() {\n@@ -553,1 +586,1 @@\n-                CXSourceLocation.$LAYOUT()\n+                CXSourceLocation.layout()\n@@ -563,0 +596,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n+     * }\n+     *\/\n@@ -566,1 +604,4 @@\n-            return (int) mh$.invokeExact(location);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Location_isFromMainFile\", location);\n+            }\n+            return (int)mh$.invokeExact(location);\n@@ -571,6 +612,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_Range_isNull(CXSourceRange range);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Range_isNull$MH() {\n+\n+    private static MethodHandle clang_Range_isNull$MH() {\n@@ -580,1 +617,1 @@\n-                CXSourceRange.$LAYOUT()\n+                CXSourceRange.layout()\n@@ -590,0 +627,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n+     * }\n+     *\/\n@@ -593,1 +635,4 @@\n-            return (int) mh$.invokeExact(range);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Range_isNull\", range);\n+            }\n+            return (int)mh$.invokeExact(range);\n@@ -598,6 +643,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_getExpansionLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getExpansionLocation$MH() {\n+\n+    private static MethodHandle clang_getExpansionLocation$MH() {\n@@ -606,1 +647,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -620,0 +661,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n@@ -623,0 +669,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getExpansionLocation\", location, file, line, column, offset);\n+            }\n@@ -628,6 +677,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_getSpellingLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getSpellingLocation$MH() {\n+\n+    private static MethodHandle clang_getSpellingLocation$MH() {\n@@ -636,1 +681,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -650,0 +695,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n@@ -653,0 +703,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getSpellingLocation\", location, file, line, column, offset);\n+            }\n@@ -658,6 +711,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_getFileLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getFileLocation$MH() {\n+\n+    private static MethodHandle clang_getFileLocation$MH() {\n@@ -666,1 +715,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -680,0 +729,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n@@ -683,0 +737,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFileLocation\", location, file, line, column, offset);\n+            }\n@@ -688,6 +745,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getRangeStart(CXSourceRange range);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getRangeStart$MH() {\n+\n+    private static MethodHandle clang_getRangeStart$MH() {\n@@ -696,2 +749,2 @@\n-                CXSourceLocation.$LAYOUT(),\n-                CXSourceRange.$LAYOUT()\n+                CXSourceLocation.layout(),\n+                CXSourceRange.layout()\n@@ -707,0 +760,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n+     * }\n+     *\/\n@@ -710,1 +768,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, range);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getRangeStart\", allocator, range);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, range);\n@@ -715,6 +776,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getRangeEnd(CXSourceRange range);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getRangeEnd$MH() {\n+\n+    private static MethodHandle clang_getRangeEnd$MH() {\n@@ -723,2 +780,2 @@\n-                CXSourceLocation.$LAYOUT(),\n-                CXSourceRange.$LAYOUT()\n+                CXSourceLocation.layout(),\n+                CXSourceRange.layout()\n@@ -734,0 +791,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n+     * }\n+     *\/\n@@ -737,1 +799,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, range);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getRangeEnd\", allocator, range);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, range);\n@@ -743,1 +808,0 @@\n-\n@@ -746,1 +810,1 @@\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Ignored = 0;\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Ignored = 0\n@@ -753,1 +817,0 @@\n-\n@@ -756,1 +819,1 @@\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Note = 1;\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Note = 1\n@@ -763,1 +826,0 @@\n-\n@@ -766,1 +828,1 @@\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Warning = 2;\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Warning = 2\n@@ -773,1 +835,0 @@\n-\n@@ -776,1 +837,1 @@\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Error = 3;\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Error = 3\n@@ -783,1 +844,0 @@\n-\n@@ -786,1 +846,1 @@\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Fatal = 4;\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Fatal = 4\n@@ -792,6 +852,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getChildDiagnostics$MH() {\n+\n+    private static MethodHandle clang_getChildDiagnostics$MH() {\n@@ -811,0 +867,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n+     * }\n+     *\/\n@@ -814,1 +875,4 @@\n-            return (MemorySegment) mh$.invokeExact(D);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getChildDiagnostics\", D);\n+            }\n+            return (MemorySegment)mh$.invokeExact(D);\n@@ -819,6 +883,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getNumDiagnostics$MH() {\n+\n+    private static MethodHandle clang_getNumDiagnostics$MH() {\n@@ -838,0 +898,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n+     * }\n+     *\/\n@@ -841,1 +906,4 @@\n-            return (int) mh$.invokeExact(Unit);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumDiagnostics\", Unit);\n+            }\n+            return (int)mh$.invokeExact(Unit);\n@@ -846,6 +914,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getDiagnostic$MH() {\n+\n+    private static MethodHandle clang_getDiagnostic$MH() {\n@@ -866,0 +930,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n+     * }\n+     *\/\n@@ -869,1 +938,4 @@\n-            return (MemorySegment) mh$.invokeExact(Unit, Index);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnostic\", Unit, Index);\n+            }\n+            return (MemorySegment)mh$.invokeExact(Unit, Index);\n@@ -874,6 +946,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic);\n-     * }\n-     *\/\n-    public static MethodHandle clang_disposeDiagnostic$MH() {\n+\n+    private static MethodHandle clang_disposeDiagnostic$MH() {\n@@ -892,0 +960,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n+     * }\n+     *\/\n@@ -895,0 +968,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeDiagnostic\", Diagnostic);\n+            }\n@@ -901,1 +977,0 @@\n-\n@@ -904,1 +979,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation = 1;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation = 1\n@@ -911,1 +986,0 @@\n-\n@@ -914,1 +988,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayColumn = 2;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayColumn = 2\n@@ -921,1 +995,0 @@\n-\n@@ -924,1 +997,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges = 4;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges = 4\n@@ -931,1 +1004,0 @@\n-\n@@ -934,1 +1006,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayOption = 8;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayOption = 8\n@@ -941,1 +1013,0 @@\n-\n@@ -944,1 +1015,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryId = 16;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryId = 16\n@@ -951,1 +1022,0 @@\n-\n@@ -954,1 +1024,1 @@\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryName = 32;\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryName = 32\n@@ -960,6 +1030,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options);\n-     * }\n-     *\/\n-    public static MethodHandle clang_formatDiagnostic$MH() {\n+\n+    private static MethodHandle clang_formatDiagnostic$MH() {\n@@ -968,1 +1034,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -980,0 +1046,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n+     * }\n+     *\/\n@@ -983,1 +1054,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, Diagnostic, Options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_formatDiagnostic\", allocator, Diagnostic, Options);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Diagnostic, Options);\n@@ -988,6 +1062,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_defaultDiagnosticDisplayOptions();\n-     * }\n-     *\/\n-    public static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n+\n+    private static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n@@ -1005,0 +1075,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n+     * }\n+     *\/\n@@ -1008,1 +1083,4 @@\n-            return (int) mh$.invokeExact();\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_defaultDiagnosticDisplayOptions\");\n+            }\n+            return (int)mh$.invokeExact();\n@@ -1013,6 +1091,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getDiagnosticSeverity$MH() {\n+\n+    private static MethodHandle clang_getDiagnosticSeverity$MH() {\n@@ -1032,0 +1106,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n+     * }\n+     *\/\n@@ -1035,1 +1114,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticSeverity\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -1040,6 +1122,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getDiagnosticLocation$MH() {\n+\n+    private static MethodHandle clang_getDiagnosticLocation$MH() {\n@@ -1048,1 +1126,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -1059,8 +1137,0 @@\n-    public static MemorySegment clang_getDiagnosticLocation(SegmentAllocator allocator, MemorySegment x0) {\n-        var mh$ = clang_getDiagnosticLocation$MH();\n-        try {\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n-        } catch (Throwable ex$) {\n-           throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -1069,1 +1139,1 @@\n-     * CXString clang_getDiagnosticSpelling(CXDiagnostic);\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n@@ -1072,1 +1142,13 @@\n-    public static MethodHandle clang_getDiagnosticSpelling$MH() {\n+    public static MemorySegment clang_getDiagnosticLocation(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getDiagnosticLocation$MH();\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticLocation\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static MethodHandle clang_getDiagnosticSpelling$MH() {\n@@ -1075,1 +1157,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -1086,0 +1168,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n+     * }\n+     *\/\n@@ -1089,1 +1176,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticSpelling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -1095,1 +1185,0 @@\n-\n@@ -1098,1 +1187,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_None = 0;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_None = 0\n@@ -1105,1 +1194,0 @@\n-\n@@ -1108,1 +1196,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord = 1;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord = 1\n@@ -1115,1 +1203,0 @@\n-\n@@ -1118,1 +1205,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_Incomplete = 2;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_Incomplete = 2\n@@ -1125,1 +1212,0 @@\n-\n@@ -1128,1 +1214,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_PrecompiledPreamble = 4;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_PrecompiledPreamble = 4\n@@ -1135,1 +1221,0 @@\n-\n@@ -1138,1 +1223,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CacheCompletionResults = 8;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CacheCompletionResults = 8\n@@ -1145,1 +1230,0 @@\n-\n@@ -1148,1 +1232,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_ForSerialization = 16;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_ForSerialization = 16\n@@ -1155,1 +1239,0 @@\n-\n@@ -1158,1 +1241,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CXXChainedPCH = 32;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CXXChainedPCH = 32\n@@ -1165,1 +1248,0 @@\n-\n@@ -1168,1 +1250,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies = 64;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies = 64\n@@ -1175,1 +1257,0 @@\n-\n@@ -1178,1 +1259,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128\n@@ -1185,1 +1266,0 @@\n-\n@@ -1188,1 +1268,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CreatePreambleOnFirstParse = 256;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CreatePreambleOnFirstParse = 256\n@@ -1195,1 +1275,0 @@\n-\n@@ -1198,1 +1277,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_KeepGoing = 512;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_KeepGoing = 512\n@@ -1205,1 +1284,0 @@\n-\n@@ -1208,1 +1286,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse = 1024;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse = 1024\n@@ -1215,1 +1293,0 @@\n-\n@@ -1218,1 +1295,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048\n@@ -1225,1 +1302,0 @@\n-\n@@ -1228,1 +1304,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeAttributedTypes = 4096;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeAttributedTypes = 4096\n@@ -1235,1 +1311,0 @@\n-\n@@ -1238,1 +1313,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_VisitImplicitAttributes = 8192;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_VisitImplicitAttributes = 8192\n@@ -1245,1 +1320,0 @@\n-\n@@ -1248,1 +1322,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384\n@@ -1255,1 +1329,0 @@\n-\n@@ -1258,1 +1331,1 @@\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_RetainExcludedConditionalBlocks = 32768;\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_RetainExcludedConditionalBlocks = 32768\n@@ -1264,6 +1337,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, char* source_filename, char** command_line_args, int num_command_line_args, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files, unsigned int options);\n-     * }\n-     *\/\n-    public static MethodHandle clang_parseTranslationUnit$MH() {\n+\n+    private static MethodHandle clang_parseTranslationUnit$MH() {\n@@ -1289,0 +1358,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n+     * }\n+     *\/\n@@ -1292,1 +1366,4 @@\n-            return (MemorySegment) mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_parseTranslationUnit\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+            }\n+            return (MemorySegment)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n@@ -1297,6 +1374,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, char* source_filename, char** command_line_args, int num_command_line_args, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit* out_TU);\n-     * }\n-     *\/\n-    public static MethodHandle clang_parseTranslationUnit2$MH() {\n+\n+    private static MethodHandle clang_parseTranslationUnit2$MH() {\n@@ -1323,0 +1396,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n+     * }\n+     *\/\n@@ -1326,1 +1404,4 @@\n-            return (int) mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_parseTranslationUnit2\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n+            }\n+            return (int)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n@@ -1332,1 +1413,0 @@\n-\n@@ -1335,1 +1415,1 @@\n-     * enum CXSaveTranslationUnit_Flags.CXSaveTranslationUnit_None = 0;\n+     * enum CXSaveTranslationUnit_Flags.CXSaveTranslationUnit_None = 0\n@@ -1342,1 +1422,0 @@\n-\n@@ -1345,1 +1424,1 @@\n-     * enum CXSaveError.CXSaveError_None = 0;\n+     * enum CXSaveError.CXSaveError_None = 0\n@@ -1352,1 +1431,0 @@\n-\n@@ -1355,1 +1433,1 @@\n-     * enum CXSaveError.CXSaveError_Unknown = 1;\n+     * enum CXSaveError.CXSaveError_Unknown = 1\n@@ -1362,1 +1440,0 @@\n-\n@@ -1365,1 +1442,1 @@\n-     * enum CXSaveError.CXSaveError_TranslationErrors = 2;\n+     * enum CXSaveError.CXSaveError_TranslationErrors = 2\n@@ -1372,1 +1449,0 @@\n-\n@@ -1375,1 +1451,1 @@\n-     * enum CXSaveError.CXSaveError_InvalidTU = 3;\n+     * enum CXSaveError.CXSaveError_InvalidTU = 3\n@@ -1381,6 +1457,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_saveTranslationUnit(CXTranslationUnit TU, char* FileName, unsigned int options);\n-     * }\n-     *\/\n-    public static MethodHandle clang_saveTranslationUnit$MH() {\n+\n+    private static MethodHandle clang_saveTranslationUnit$MH() {\n@@ -1402,0 +1474,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n+     * }\n+     *\/\n@@ -1405,1 +1482,4 @@\n-            return (int) mh$.invokeExact(TU, FileName, options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_saveTranslationUnit\", TU, FileName, options);\n+            }\n+            return (int)mh$.invokeExact(TU, FileName, options);\n@@ -1410,6 +1490,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_disposeTranslationUnit(CXTranslationUnit);\n-     * }\n-     *\/\n-    public static MethodHandle clang_disposeTranslationUnit$MH() {\n+\n+    private static MethodHandle clang_disposeTranslationUnit$MH() {\n@@ -1428,0 +1504,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n+     * }\n+     *\/\n@@ -1431,0 +1512,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeTranslationUnit\", x0);\n+            }\n@@ -1437,1 +1521,0 @@\n-\n@@ -1440,1 +1523,1 @@\n-     * enum CXReparse_Flags.CXReparse_None = 0;\n+     * enum CXReparse_Flags.CXReparse_None = 0\n@@ -1446,6 +1529,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU);\n-     * }\n-     *\/\n-    public static MethodHandle clang_defaultReparseOptions$MH() {\n+\n+    private static MethodHandle clang_defaultReparseOptions$MH() {\n@@ -1465,0 +1544,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n+     * }\n+     *\/\n@@ -1468,1 +1552,4 @@\n-            return (int) mh$.invokeExact(TU);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_defaultReparseOptions\", TU);\n+            }\n+            return (int)mh$.invokeExact(TU);\n@@ -1473,6 +1560,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile* unsaved_files, unsigned int options);\n-     * }\n-     *\/\n-    public static MethodHandle clang_reparseTranslationUnit$MH() {\n+\n+    private static MethodHandle clang_reparseTranslationUnit$MH() {\n@@ -1495,0 +1578,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n+     * }\n+     *\/\n@@ -1498,1 +1586,4 @@\n-            return (int) mh$.invokeExact(TU, num_unsaved_files, unsaved_files, options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_reparseTranslationUnit\", TU, num_unsaved_files, unsaved_files, options);\n+            }\n+            return (int)mh$.invokeExact(TU, num_unsaved_files, unsaved_files, options);\n@@ -1504,1 +1595,0 @@\n-\n@@ -1507,1 +1597,1 @@\n-     * enum CXCursorKind.CXCursor_UnexposedDecl = 1;\n+     * enum CXCursorKind.CXCursor_UnexposedDecl = 1\n@@ -1514,1 +1604,0 @@\n-\n@@ -1517,1 +1606,1 @@\n-     * enum CXCursorKind.CXCursor_StructDecl = 2;\n+     * enum CXCursorKind.CXCursor_StructDecl = 2\n@@ -1524,1 +1613,0 @@\n-\n@@ -1527,1 +1615,1 @@\n-     * enum CXCursorKind.CXCursor_UnionDecl = 3;\n+     * enum CXCursorKind.CXCursor_UnionDecl = 3\n@@ -1534,1 +1622,0 @@\n-\n@@ -1537,1 +1624,1 @@\n-     * enum CXCursorKind.CXCursor_ClassDecl = 4;\n+     * enum CXCursorKind.CXCursor_ClassDecl = 4\n@@ -1544,1 +1631,0 @@\n-\n@@ -1547,1 +1633,1 @@\n-     * enum CXCursorKind.CXCursor_EnumDecl = 5;\n+     * enum CXCursorKind.CXCursor_EnumDecl = 5\n@@ -1554,1 +1640,0 @@\n-\n@@ -1557,1 +1642,1 @@\n-     * enum CXCursorKind.CXCursor_FieldDecl = 6;\n+     * enum CXCursorKind.CXCursor_FieldDecl = 6\n@@ -1564,1 +1649,0 @@\n-\n@@ -1567,1 +1651,1 @@\n-     * enum CXCursorKind.CXCursor_EnumConstantDecl = 7;\n+     * enum CXCursorKind.CXCursor_EnumConstantDecl = 7\n@@ -1574,1 +1658,0 @@\n-\n@@ -1577,1 +1660,1 @@\n-     * enum CXCursorKind.CXCursor_FunctionDecl = 8;\n+     * enum CXCursorKind.CXCursor_FunctionDecl = 8\n@@ -1584,1 +1667,0 @@\n-\n@@ -1587,1 +1669,1 @@\n-     * enum CXCursorKind.CXCursor_VarDecl = 9;\n+     * enum CXCursorKind.CXCursor_VarDecl = 9\n@@ -1594,1 +1676,0 @@\n-\n@@ -1597,1 +1678,1 @@\n-     * enum CXCursorKind.CXCursor_ParmDecl = 10;\n+     * enum CXCursorKind.CXCursor_ParmDecl = 10\n@@ -1604,1 +1685,0 @@\n-\n@@ -1607,1 +1687,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCInterfaceDecl = 11;\n+     * enum CXCursorKind.CXCursor_ObjCInterfaceDecl = 11\n@@ -1614,1 +1694,0 @@\n-\n@@ -1617,1 +1696,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCCategoryDecl = 12;\n+     * enum CXCursorKind.CXCursor_ObjCCategoryDecl = 12\n@@ -1624,1 +1703,0 @@\n-\n@@ -1627,1 +1705,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCProtocolDecl = 13;\n+     * enum CXCursorKind.CXCursor_ObjCProtocolDecl = 13\n@@ -1634,1 +1712,0 @@\n-\n@@ -1637,1 +1714,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCPropertyDecl = 14;\n+     * enum CXCursorKind.CXCursor_ObjCPropertyDecl = 14\n@@ -1644,1 +1721,0 @@\n-\n@@ -1647,1 +1723,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCIvarDecl = 15;\n+     * enum CXCursorKind.CXCursor_ObjCIvarDecl = 15\n@@ -1654,1 +1730,0 @@\n-\n@@ -1657,1 +1732,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCInstanceMethodDecl = 16;\n+     * enum CXCursorKind.CXCursor_ObjCInstanceMethodDecl = 16\n@@ -1664,1 +1739,0 @@\n-\n@@ -1667,1 +1741,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCClassMethodDecl = 17;\n+     * enum CXCursorKind.CXCursor_ObjCClassMethodDecl = 17\n@@ -1674,1 +1748,0 @@\n-\n@@ -1677,1 +1750,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCImplementationDecl = 18;\n+     * enum CXCursorKind.CXCursor_ObjCImplementationDecl = 18\n@@ -1684,1 +1757,0 @@\n-\n@@ -1687,1 +1759,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCCategoryImplDecl = 19;\n+     * enum CXCursorKind.CXCursor_ObjCCategoryImplDecl = 19\n@@ -1694,1 +1766,0 @@\n-\n@@ -1697,1 +1768,1 @@\n-     * enum CXCursorKind.CXCursor_TypedefDecl = 20;\n+     * enum CXCursorKind.CXCursor_TypedefDecl = 20\n@@ -1704,1 +1775,0 @@\n-\n@@ -1707,1 +1777,1 @@\n-     * enum CXCursorKind.CXCursor_CXXMethod = 21;\n+     * enum CXCursorKind.CXCursor_CXXMethod = 21\n@@ -1714,1 +1784,0 @@\n-\n@@ -1717,1 +1786,1 @@\n-     * enum CXCursorKind.CXCursor_Namespace = 22;\n+     * enum CXCursorKind.CXCursor_Namespace = 22\n@@ -1724,1 +1793,0 @@\n-\n@@ -1727,1 +1795,1 @@\n-     * enum CXCursorKind.CXCursor_LinkageSpec = 23;\n+     * enum CXCursorKind.CXCursor_LinkageSpec = 23\n@@ -1734,1 +1802,0 @@\n-\n@@ -1737,1 +1804,1 @@\n-     * enum CXCursorKind.CXCursor_Constructor = 24;\n+     * enum CXCursorKind.CXCursor_Constructor = 24\n@@ -1744,1 +1811,0 @@\n-\n@@ -1747,1 +1813,1 @@\n-     * enum CXCursorKind.CXCursor_Destructor = 25;\n+     * enum CXCursorKind.CXCursor_Destructor = 25\n@@ -1754,1 +1820,0 @@\n-\n@@ -1757,1 +1822,1 @@\n-     * enum CXCursorKind.CXCursor_ConversionFunction = 26;\n+     * enum CXCursorKind.CXCursor_ConversionFunction = 26\n@@ -1764,1 +1829,0 @@\n-\n@@ -1767,1 +1831,1 @@\n-     * enum CXCursorKind.CXCursor_TemplateTypeParameter = 27;\n+     * enum CXCursorKind.CXCursor_TemplateTypeParameter = 27\n@@ -1774,1 +1838,0 @@\n-\n@@ -1777,1 +1840,1 @@\n-     * enum CXCursorKind.CXCursor_NonTypeTemplateParameter = 28;\n+     * enum CXCursorKind.CXCursor_NonTypeTemplateParameter = 28\n@@ -1784,1 +1847,0 @@\n-\n@@ -1787,1 +1849,1 @@\n-     * enum CXCursorKind.CXCursor_TemplateTemplateParameter = 29;\n+     * enum CXCursorKind.CXCursor_TemplateTemplateParameter = 29\n@@ -1794,1 +1856,0 @@\n-\n@@ -1797,1 +1858,1 @@\n-     * enum CXCursorKind.CXCursor_FunctionTemplate = 30;\n+     * enum CXCursorKind.CXCursor_FunctionTemplate = 30\n@@ -1804,1 +1865,0 @@\n-\n@@ -1807,1 +1867,1 @@\n-     * enum CXCursorKind.CXCursor_ClassTemplate = 31;\n+     * enum CXCursorKind.CXCursor_ClassTemplate = 31\n@@ -1814,1 +1874,0 @@\n-\n@@ -1817,1 +1876,1 @@\n-     * enum CXCursorKind.CXCursor_ClassTemplatePartialSpecialization = 32;\n+     * enum CXCursorKind.CXCursor_ClassTemplatePartialSpecialization = 32\n@@ -1824,1 +1883,0 @@\n-\n@@ -1827,1 +1885,1 @@\n-     * enum CXCursorKind.CXCursor_NamespaceAlias = 33;\n+     * enum CXCursorKind.CXCursor_NamespaceAlias = 33\n@@ -1834,1 +1892,0 @@\n-\n@@ -1837,1 +1894,1 @@\n-     * enum CXCursorKind.CXCursor_UsingDirective = 34;\n+     * enum CXCursorKind.CXCursor_UsingDirective = 34\n@@ -1844,1 +1901,0 @@\n-\n@@ -1847,1 +1903,1 @@\n-     * enum CXCursorKind.CXCursor_UsingDeclaration = 35;\n+     * enum CXCursorKind.CXCursor_UsingDeclaration = 35\n@@ -1854,1 +1910,0 @@\n-\n@@ -1857,1 +1912,1 @@\n-     * enum CXCursorKind.CXCursor_TypeAliasDecl = 36;\n+     * enum CXCursorKind.CXCursor_TypeAliasDecl = 36\n@@ -1864,1 +1919,0 @@\n-\n@@ -1867,1 +1921,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCSynthesizeDecl = 37;\n+     * enum CXCursorKind.CXCursor_ObjCSynthesizeDecl = 37\n@@ -1874,1 +1928,0 @@\n-\n@@ -1877,1 +1930,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCDynamicDecl = 38;\n+     * enum CXCursorKind.CXCursor_ObjCDynamicDecl = 38\n@@ -1884,1 +1937,0 @@\n-\n@@ -1887,1 +1939,1 @@\n-     * enum CXCursorKind.CXCursor_CXXAccessSpecifier = 39;\n+     * enum CXCursorKind.CXCursor_CXXAccessSpecifier = 39\n@@ -1894,1 +1946,0 @@\n-\n@@ -1897,1 +1948,1 @@\n-     * enum CXCursorKind.CXCursor_FirstDecl = 1;\n+     * enum CXCursorKind.CXCursor_FirstDecl = 1\n@@ -1904,1 +1955,0 @@\n-\n@@ -1907,1 +1957,1 @@\n-     * enum CXCursorKind.CXCursor_LastDecl = 39;\n+     * enum CXCursorKind.CXCursor_LastDecl = 39\n@@ -1914,1 +1964,0 @@\n-\n@@ -1917,1 +1966,1 @@\n-     * enum CXCursorKind.CXCursor_FirstRef = 40;\n+     * enum CXCursorKind.CXCursor_FirstRef = 40\n@@ -1924,1 +1973,0 @@\n-\n@@ -1927,1 +1975,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCSuperClassRef = 40;\n+     * enum CXCursorKind.CXCursor_ObjCSuperClassRef = 40\n@@ -1934,1 +1982,0 @@\n-\n@@ -1937,1 +1984,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCProtocolRef = 41;\n+     * enum CXCursorKind.CXCursor_ObjCProtocolRef = 41\n@@ -1944,1 +1991,0 @@\n-\n@@ -1947,1 +1993,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCClassRef = 42;\n+     * enum CXCursorKind.CXCursor_ObjCClassRef = 42\n@@ -1954,1 +2000,0 @@\n-\n@@ -1957,1 +2002,1 @@\n-     * enum CXCursorKind.CXCursor_TypeRef = 43;\n+     * enum CXCursorKind.CXCursor_TypeRef = 43\n@@ -1964,1 +2009,0 @@\n-\n@@ -1967,1 +2011,1 @@\n-     * enum CXCursorKind.CXCursor_CXXBaseSpecifier = 44;\n+     * enum CXCursorKind.CXCursor_CXXBaseSpecifier = 44\n@@ -1974,1 +2018,0 @@\n-\n@@ -1977,1 +2020,1 @@\n-     * enum CXCursorKind.CXCursor_TemplateRef = 45;\n+     * enum CXCursorKind.CXCursor_TemplateRef = 45\n@@ -1984,1 +2027,0 @@\n-\n@@ -1987,1 +2029,1 @@\n-     * enum CXCursorKind.CXCursor_NamespaceRef = 46;\n+     * enum CXCursorKind.CXCursor_NamespaceRef = 46\n@@ -1994,1 +2036,0 @@\n-\n@@ -1997,1 +2038,1 @@\n-     * enum CXCursorKind.CXCursor_MemberRef = 47;\n+     * enum CXCursorKind.CXCursor_MemberRef = 47\n@@ -2004,1 +2045,0 @@\n-\n@@ -2007,1 +2047,1 @@\n-     * enum CXCursorKind.CXCursor_LabelRef = 48;\n+     * enum CXCursorKind.CXCursor_LabelRef = 48\n@@ -2014,1 +2054,0 @@\n-\n@@ -2017,1 +2056,1 @@\n-     * enum CXCursorKind.CXCursor_OverloadedDeclRef = 49;\n+     * enum CXCursorKind.CXCursor_OverloadedDeclRef = 49\n@@ -2024,1 +2063,0 @@\n-\n@@ -2027,1 +2065,1 @@\n-     * enum CXCursorKind.CXCursor_VariableRef = 50;\n+     * enum CXCursorKind.CXCursor_VariableRef = 50\n@@ -2034,1 +2072,0 @@\n-\n@@ -2037,1 +2074,1 @@\n-     * enum CXCursorKind.CXCursor_LastRef = 50;\n+     * enum CXCursorKind.CXCursor_LastRef = 50\n@@ -2044,1 +2081,0 @@\n-\n@@ -2047,1 +2083,1 @@\n-     * enum CXCursorKind.CXCursor_FirstInvalid = 70;\n+     * enum CXCursorKind.CXCursor_FirstInvalid = 70\n@@ -2054,1 +2090,0 @@\n-\n@@ -2057,1 +2092,1 @@\n-     * enum CXCursorKind.CXCursor_InvalidFile = 70;\n+     * enum CXCursorKind.CXCursor_InvalidFile = 70\n@@ -2064,1 +2099,0 @@\n-\n@@ -2067,1 +2101,1 @@\n-     * enum CXCursorKind.CXCursor_NoDeclFound = 71;\n+     * enum CXCursorKind.CXCursor_NoDeclFound = 71\n@@ -2074,1 +2108,0 @@\n-\n@@ -2077,1 +2110,1 @@\n-     * enum CXCursorKind.CXCursor_NotImplemented = 72;\n+     * enum CXCursorKind.CXCursor_NotImplemented = 72\n@@ -2084,1 +2117,0 @@\n-\n@@ -2087,1 +2119,1 @@\n-     * enum CXCursorKind.CXCursor_InvalidCode = 73;\n+     * enum CXCursorKind.CXCursor_InvalidCode = 73\n@@ -2094,1 +2126,0 @@\n-\n@@ -2097,1 +2128,1 @@\n-     * enum CXCursorKind.CXCursor_LastInvalid = 73;\n+     * enum CXCursorKind.CXCursor_LastInvalid = 73\n@@ -2104,1 +2135,0 @@\n-\n@@ -2107,1 +2137,1 @@\n-     * enum CXCursorKind.CXCursor_FirstExpr = 100;\n+     * enum CXCursorKind.CXCursor_FirstExpr = 100\n@@ -2114,1 +2144,0 @@\n-\n@@ -2117,1 +2146,1 @@\n-     * enum CXCursorKind.CXCursor_UnexposedExpr = 100;\n+     * enum CXCursorKind.CXCursor_UnexposedExpr = 100\n@@ -2124,1 +2153,0 @@\n-\n@@ -2127,1 +2155,1 @@\n-     * enum CXCursorKind.CXCursor_DeclRefExpr = 101;\n+     * enum CXCursorKind.CXCursor_DeclRefExpr = 101\n@@ -2134,1 +2162,0 @@\n-\n@@ -2137,1 +2164,1 @@\n-     * enum CXCursorKind.CXCursor_MemberRefExpr = 102;\n+     * enum CXCursorKind.CXCursor_MemberRefExpr = 102\n@@ -2144,1 +2171,0 @@\n-\n@@ -2147,1 +2173,1 @@\n-     * enum CXCursorKind.CXCursor_CallExpr = 103;\n+     * enum CXCursorKind.CXCursor_CallExpr = 103\n@@ -2154,1 +2180,0 @@\n-\n@@ -2157,1 +2182,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCMessageExpr = 104;\n+     * enum CXCursorKind.CXCursor_ObjCMessageExpr = 104\n@@ -2164,1 +2189,0 @@\n-\n@@ -2167,1 +2191,1 @@\n-     * enum CXCursorKind.CXCursor_BlockExpr = 105;\n+     * enum CXCursorKind.CXCursor_BlockExpr = 105\n@@ -2174,1 +2198,0 @@\n-\n@@ -2177,1 +2200,1 @@\n-     * enum CXCursorKind.CXCursor_IntegerLiteral = 106;\n+     * enum CXCursorKind.CXCursor_IntegerLiteral = 106\n@@ -2184,1 +2207,0 @@\n-\n@@ -2187,1 +2209,1 @@\n-     * enum CXCursorKind.CXCursor_FloatingLiteral = 107;\n+     * enum CXCursorKind.CXCursor_FloatingLiteral = 107\n@@ -2194,1 +2216,0 @@\n-\n@@ -2197,1 +2218,1 @@\n-     * enum CXCursorKind.CXCursor_ImaginaryLiteral = 108;\n+     * enum CXCursorKind.CXCursor_ImaginaryLiteral = 108\n@@ -2204,1 +2225,0 @@\n-\n@@ -2207,1 +2227,1 @@\n-     * enum CXCursorKind.CXCursor_StringLiteral = 109;\n+     * enum CXCursorKind.CXCursor_StringLiteral = 109\n@@ -2214,1 +2234,0 @@\n-\n@@ -2217,1 +2236,1 @@\n-     * enum CXCursorKind.CXCursor_CharacterLiteral = 110;\n+     * enum CXCursorKind.CXCursor_CharacterLiteral = 110\n@@ -2224,1 +2243,0 @@\n-\n@@ -2227,1 +2245,1 @@\n-     * enum CXCursorKind.CXCursor_ParenExpr = 111;\n+     * enum CXCursorKind.CXCursor_ParenExpr = 111\n@@ -2234,1 +2252,0 @@\n-\n@@ -2237,1 +2254,1 @@\n-     * enum CXCursorKind.CXCursor_UnaryOperator = 112;\n+     * enum CXCursorKind.CXCursor_UnaryOperator = 112\n@@ -2244,1 +2261,0 @@\n-\n@@ -2247,1 +2263,1 @@\n-     * enum CXCursorKind.CXCursor_ArraySubscriptExpr = 113;\n+     * enum CXCursorKind.CXCursor_ArraySubscriptExpr = 113\n@@ -2254,1 +2270,0 @@\n-\n@@ -2257,1 +2272,1 @@\n-     * enum CXCursorKind.CXCursor_BinaryOperator = 114;\n+     * enum CXCursorKind.CXCursor_BinaryOperator = 114\n@@ -2264,1 +2279,0 @@\n-\n@@ -2267,1 +2281,1 @@\n-     * enum CXCursorKind.CXCursor_CompoundAssignOperator = 115;\n+     * enum CXCursorKind.CXCursor_CompoundAssignOperator = 115\n@@ -2274,1 +2288,0 @@\n-\n@@ -2277,1 +2290,1 @@\n-     * enum CXCursorKind.CXCursor_ConditionalOperator = 116;\n+     * enum CXCursorKind.CXCursor_ConditionalOperator = 116\n@@ -2284,1 +2297,0 @@\n-\n@@ -2287,1 +2299,1 @@\n-     * enum CXCursorKind.CXCursor_CStyleCastExpr = 117;\n+     * enum CXCursorKind.CXCursor_CStyleCastExpr = 117\n@@ -2294,1 +2306,0 @@\n-\n@@ -2297,1 +2308,1 @@\n-     * enum CXCursorKind.CXCursor_CompoundLiteralExpr = 118;\n+     * enum CXCursorKind.CXCursor_CompoundLiteralExpr = 118\n@@ -2304,1 +2315,0 @@\n-\n@@ -2307,1 +2317,1 @@\n-     * enum CXCursorKind.CXCursor_InitListExpr = 119;\n+     * enum CXCursorKind.CXCursor_InitListExpr = 119\n@@ -2314,1 +2324,0 @@\n-\n@@ -2317,1 +2326,1 @@\n-     * enum CXCursorKind.CXCursor_AddrLabelExpr = 120;\n+     * enum CXCursorKind.CXCursor_AddrLabelExpr = 120\n@@ -2324,1 +2333,0 @@\n-\n@@ -2327,1 +2335,1 @@\n-     * enum CXCursorKind.CXCursor_StmtExpr = 121;\n+     * enum CXCursorKind.CXCursor_StmtExpr = 121\n@@ -2334,1 +2342,0 @@\n-\n@@ -2337,1 +2344,1 @@\n-     * enum CXCursorKind.CXCursor_GenericSelectionExpr = 122;\n+     * enum CXCursorKind.CXCursor_GenericSelectionExpr = 122\n@@ -2344,1 +2351,0 @@\n-\n@@ -2347,1 +2353,1 @@\n-     * enum CXCursorKind.CXCursor_GNUNullExpr = 123;\n+     * enum CXCursorKind.CXCursor_GNUNullExpr = 123\n@@ -2354,1 +2360,0 @@\n-\n@@ -2357,1 +2362,1 @@\n-     * enum CXCursorKind.CXCursor_CXXStaticCastExpr = 124;\n+     * enum CXCursorKind.CXCursor_CXXStaticCastExpr = 124\n@@ -2364,1 +2369,0 @@\n-\n@@ -2367,1 +2371,1 @@\n-     * enum CXCursorKind.CXCursor_CXXDynamicCastExpr = 125;\n+     * enum CXCursorKind.CXCursor_CXXDynamicCastExpr = 125\n@@ -2374,1 +2378,0 @@\n-\n@@ -2377,1 +2380,1 @@\n-     * enum CXCursorKind.CXCursor_CXXReinterpretCastExpr = 126;\n+     * enum CXCursorKind.CXCursor_CXXReinterpretCastExpr = 126\n@@ -2384,1 +2387,0 @@\n-\n@@ -2387,1 +2389,1 @@\n-     * enum CXCursorKind.CXCursor_CXXConstCastExpr = 127;\n+     * enum CXCursorKind.CXCursor_CXXConstCastExpr = 127\n@@ -2394,1 +2396,0 @@\n-\n@@ -2397,1 +2398,1 @@\n-     * enum CXCursorKind.CXCursor_CXXFunctionalCastExpr = 128;\n+     * enum CXCursorKind.CXCursor_CXXFunctionalCastExpr = 128\n@@ -2404,1 +2405,0 @@\n-\n@@ -2407,1 +2407,1 @@\n-     * enum CXCursorKind.CXCursor_CXXTypeidExpr = 129;\n+     * enum CXCursorKind.CXCursor_CXXTypeidExpr = 129\n@@ -2414,1 +2414,0 @@\n-\n@@ -2417,1 +2416,1 @@\n-     * enum CXCursorKind.CXCursor_CXXBoolLiteralExpr = 130;\n+     * enum CXCursorKind.CXCursor_CXXBoolLiteralExpr = 130\n@@ -2424,1 +2423,0 @@\n-\n@@ -2427,1 +2425,1 @@\n-     * enum CXCursorKind.CXCursor_CXXNullPtrLiteralExpr = 131;\n+     * enum CXCursorKind.CXCursor_CXXNullPtrLiteralExpr = 131\n@@ -2434,1 +2432,0 @@\n-\n@@ -2437,1 +2434,1 @@\n-     * enum CXCursorKind.CXCursor_CXXThisExpr = 132;\n+     * enum CXCursorKind.CXCursor_CXXThisExpr = 132\n@@ -2444,1 +2441,0 @@\n-\n@@ -2447,1 +2443,1 @@\n-     * enum CXCursorKind.CXCursor_CXXThrowExpr = 133;\n+     * enum CXCursorKind.CXCursor_CXXThrowExpr = 133\n@@ -2454,1 +2450,0 @@\n-\n@@ -2457,1 +2452,1 @@\n-     * enum CXCursorKind.CXCursor_CXXNewExpr = 134;\n+     * enum CXCursorKind.CXCursor_CXXNewExpr = 134\n@@ -2464,1 +2459,0 @@\n-\n@@ -2467,1 +2461,1 @@\n-     * enum CXCursorKind.CXCursor_CXXDeleteExpr = 135;\n+     * enum CXCursorKind.CXCursor_CXXDeleteExpr = 135\n@@ -2474,1 +2468,0 @@\n-\n@@ -2477,1 +2470,1 @@\n-     * enum CXCursorKind.CXCursor_UnaryExpr = 136;\n+     * enum CXCursorKind.CXCursor_UnaryExpr = 136\n@@ -2484,1 +2477,0 @@\n-\n@@ -2487,1 +2479,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCStringLiteral = 137;\n+     * enum CXCursorKind.CXCursor_ObjCStringLiteral = 137\n@@ -2494,1 +2486,0 @@\n-\n@@ -2497,1 +2488,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCEncodeExpr = 138;\n+     * enum CXCursorKind.CXCursor_ObjCEncodeExpr = 138\n@@ -2504,1 +2495,0 @@\n-\n@@ -2507,1 +2497,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCSelectorExpr = 139;\n+     * enum CXCursorKind.CXCursor_ObjCSelectorExpr = 139\n@@ -2514,1 +2504,0 @@\n-\n@@ -2517,1 +2506,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCProtocolExpr = 140;\n+     * enum CXCursorKind.CXCursor_ObjCProtocolExpr = 140\n@@ -2524,1 +2513,0 @@\n-\n@@ -2527,1 +2515,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCBridgedCastExpr = 141;\n+     * enum CXCursorKind.CXCursor_ObjCBridgedCastExpr = 141\n@@ -2534,1 +2522,0 @@\n-\n@@ -2537,1 +2524,1 @@\n-     * enum CXCursorKind.CXCursor_PackExpansionExpr = 142;\n+     * enum CXCursorKind.CXCursor_PackExpansionExpr = 142\n@@ -2544,1 +2531,0 @@\n-\n@@ -2547,1 +2533,1 @@\n-     * enum CXCursorKind.CXCursor_SizeOfPackExpr = 143;\n+     * enum CXCursorKind.CXCursor_SizeOfPackExpr = 143\n@@ -2554,1 +2540,0 @@\n-\n@@ -2557,1 +2542,1 @@\n-     * enum CXCursorKind.CXCursor_LambdaExpr = 144;\n+     * enum CXCursorKind.CXCursor_LambdaExpr = 144\n@@ -2564,1 +2549,0 @@\n-\n@@ -2567,1 +2551,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCBoolLiteralExpr = 145;\n+     * enum CXCursorKind.CXCursor_ObjCBoolLiteralExpr = 145\n@@ -2574,1 +2558,0 @@\n-\n@@ -2577,1 +2560,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCSelfExpr = 146;\n+     * enum CXCursorKind.CXCursor_ObjCSelfExpr = 146\n@@ -2584,1 +2567,0 @@\n-\n@@ -2587,1 +2569,1 @@\n-     * enum CXCursorKind.CXCursor_OMPArraySectionExpr = 147;\n+     * enum CXCursorKind.CXCursor_OMPArraySectionExpr = 147\n@@ -2594,1 +2576,0 @@\n-\n@@ -2597,1 +2578,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAvailabilityCheckExpr = 148;\n+     * enum CXCursorKind.CXCursor_ObjCAvailabilityCheckExpr = 148\n@@ -2604,1 +2585,0 @@\n-\n@@ -2607,1 +2587,1 @@\n-     * enum CXCursorKind.CXCursor_FixedPointLiteral = 149;\n+     * enum CXCursorKind.CXCursor_FixedPointLiteral = 149\n@@ -2614,1 +2594,0 @@\n-\n@@ -2617,1 +2596,1 @@\n-     * enum CXCursorKind.CXCursor_LastExpr = 152;\n+     * enum CXCursorKind.CXCursor_LastExpr = 152\n@@ -2624,1 +2603,0 @@\n-\n@@ -2627,1 +2605,1 @@\n-     * enum CXCursorKind.CXCursor_FirstStmt = 200;\n+     * enum CXCursorKind.CXCursor_FirstStmt = 200\n@@ -2634,1 +2612,0 @@\n-\n@@ -2637,1 +2614,1 @@\n-     * enum CXCursorKind.CXCursor_UnexposedStmt = 200;\n+     * enum CXCursorKind.CXCursor_UnexposedStmt = 200\n@@ -2644,1 +2621,0 @@\n-\n@@ -2647,1 +2623,1 @@\n-     * enum CXCursorKind.CXCursor_LabelStmt = 201;\n+     * enum CXCursorKind.CXCursor_LabelStmt = 201\n@@ -2654,1 +2630,0 @@\n-\n@@ -2657,1 +2632,1 @@\n-     * enum CXCursorKind.CXCursor_CompoundStmt = 202;\n+     * enum CXCursorKind.CXCursor_CompoundStmt = 202\n@@ -2664,1 +2639,0 @@\n-\n@@ -2667,1 +2641,1 @@\n-     * enum CXCursorKind.CXCursor_CaseStmt = 203;\n+     * enum CXCursorKind.CXCursor_CaseStmt = 203\n@@ -2674,1 +2648,0 @@\n-\n@@ -2677,1 +2650,1 @@\n-     * enum CXCursorKind.CXCursor_DefaultStmt = 204;\n+     * enum CXCursorKind.CXCursor_DefaultStmt = 204\n@@ -2684,1 +2657,0 @@\n-\n@@ -2687,1 +2659,1 @@\n-     * enum CXCursorKind.CXCursor_IfStmt = 205;\n+     * enum CXCursorKind.CXCursor_IfStmt = 205\n@@ -2694,1 +2666,0 @@\n-\n@@ -2697,1 +2668,1 @@\n-     * enum CXCursorKind.CXCursor_SwitchStmt = 206;\n+     * enum CXCursorKind.CXCursor_SwitchStmt = 206\n@@ -2704,1 +2675,0 @@\n-\n@@ -2707,1 +2677,1 @@\n-     * enum CXCursorKind.CXCursor_WhileStmt = 207;\n+     * enum CXCursorKind.CXCursor_WhileStmt = 207\n@@ -2714,1 +2684,0 @@\n-\n@@ -2717,1 +2686,1 @@\n-     * enum CXCursorKind.CXCursor_DoStmt = 208;\n+     * enum CXCursorKind.CXCursor_DoStmt = 208\n@@ -2724,1 +2693,0 @@\n-\n@@ -2727,1 +2695,1 @@\n-     * enum CXCursorKind.CXCursor_ForStmt = 209;\n+     * enum CXCursorKind.CXCursor_ForStmt = 209\n@@ -2734,1 +2702,0 @@\n-\n@@ -2737,1 +2704,1 @@\n-     * enum CXCursorKind.CXCursor_GotoStmt = 210;\n+     * enum CXCursorKind.CXCursor_GotoStmt = 210\n@@ -2744,1 +2711,0 @@\n-\n@@ -2747,1 +2713,1 @@\n-     * enum CXCursorKind.CXCursor_IndirectGotoStmt = 211;\n+     * enum CXCursorKind.CXCursor_IndirectGotoStmt = 211\n@@ -2754,1 +2720,0 @@\n-\n@@ -2757,1 +2722,1 @@\n-     * enum CXCursorKind.CXCursor_ContinueStmt = 212;\n+     * enum CXCursorKind.CXCursor_ContinueStmt = 212\n@@ -2764,1 +2729,0 @@\n-\n@@ -2767,1 +2731,1 @@\n-     * enum CXCursorKind.CXCursor_BreakStmt = 213;\n+     * enum CXCursorKind.CXCursor_BreakStmt = 213\n@@ -2774,1 +2738,0 @@\n-\n@@ -2777,1 +2740,1 @@\n-     * enum CXCursorKind.CXCursor_ReturnStmt = 214;\n+     * enum CXCursorKind.CXCursor_ReturnStmt = 214\n@@ -2784,1 +2747,0 @@\n-\n@@ -2787,1 +2749,1 @@\n-     * enum CXCursorKind.CXCursor_GCCAsmStmt = 215;\n+     * enum CXCursorKind.CXCursor_GCCAsmStmt = 215\n@@ -2794,1 +2756,0 @@\n-\n@@ -2797,1 +2758,1 @@\n-     * enum CXCursorKind.CXCursor_AsmStmt = 215;\n+     * enum CXCursorKind.CXCursor_AsmStmt = 215\n@@ -2804,1 +2765,0 @@\n-\n@@ -2807,1 +2767,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAtTryStmt = 216;\n+     * enum CXCursorKind.CXCursor_ObjCAtTryStmt = 216\n@@ -2814,1 +2774,0 @@\n-\n@@ -2817,1 +2776,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAtCatchStmt = 217;\n+     * enum CXCursorKind.CXCursor_ObjCAtCatchStmt = 217\n@@ -2824,1 +2783,0 @@\n-\n@@ -2827,1 +2785,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAtFinallyStmt = 218;\n+     * enum CXCursorKind.CXCursor_ObjCAtFinallyStmt = 218\n@@ -2834,1 +2792,0 @@\n-\n@@ -2837,1 +2794,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAtThrowStmt = 219;\n+     * enum CXCursorKind.CXCursor_ObjCAtThrowStmt = 219\n@@ -2844,1 +2801,0 @@\n-\n@@ -2847,1 +2803,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAtSynchronizedStmt = 220;\n+     * enum CXCursorKind.CXCursor_ObjCAtSynchronizedStmt = 220\n@@ -2854,1 +2810,0 @@\n-\n@@ -2857,1 +2812,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCAutoreleasePoolStmt = 221;\n+     * enum CXCursorKind.CXCursor_ObjCAutoreleasePoolStmt = 221\n@@ -2864,1 +2819,0 @@\n-\n@@ -2867,1 +2821,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCForCollectionStmt = 222;\n+     * enum CXCursorKind.CXCursor_ObjCForCollectionStmt = 222\n@@ -2874,1 +2828,0 @@\n-\n@@ -2877,1 +2830,1 @@\n-     * enum CXCursorKind.CXCursor_CXXCatchStmt = 223;\n+     * enum CXCursorKind.CXCursor_CXXCatchStmt = 223\n@@ -2884,1 +2837,0 @@\n-\n@@ -2887,1 +2839,1 @@\n-     * enum CXCursorKind.CXCursor_CXXTryStmt = 224;\n+     * enum CXCursorKind.CXCursor_CXXTryStmt = 224\n@@ -2894,1 +2846,0 @@\n-\n@@ -2897,1 +2848,1 @@\n-     * enum CXCursorKind.CXCursor_CXXForRangeStmt = 225;\n+     * enum CXCursorKind.CXCursor_CXXForRangeStmt = 225\n@@ -2904,1 +2855,0 @@\n-\n@@ -2907,1 +2857,1 @@\n-     * enum CXCursorKind.CXCursor_SEHTryStmt = 226;\n+     * enum CXCursorKind.CXCursor_SEHTryStmt = 226\n@@ -2914,1 +2864,0 @@\n-\n@@ -2917,1 +2866,1 @@\n-     * enum CXCursorKind.CXCursor_SEHExceptStmt = 227;\n+     * enum CXCursorKind.CXCursor_SEHExceptStmt = 227\n@@ -2924,1 +2873,0 @@\n-\n@@ -2927,1 +2875,1 @@\n-     * enum CXCursorKind.CXCursor_SEHFinallyStmt = 228;\n+     * enum CXCursorKind.CXCursor_SEHFinallyStmt = 228\n@@ -2934,1 +2882,0 @@\n-\n@@ -2937,1 +2884,1 @@\n-     * enum CXCursorKind.CXCursor_MSAsmStmt = 229;\n+     * enum CXCursorKind.CXCursor_MSAsmStmt = 229\n@@ -2944,1 +2891,0 @@\n-\n@@ -2947,1 +2893,1 @@\n-     * enum CXCursorKind.CXCursor_NullStmt = 230;\n+     * enum CXCursorKind.CXCursor_NullStmt = 230\n@@ -2954,1 +2900,0 @@\n-\n@@ -2957,1 +2902,1 @@\n-     * enum CXCursorKind.CXCursor_DeclStmt = 231;\n+     * enum CXCursorKind.CXCursor_DeclStmt = 231\n@@ -2964,1 +2909,0 @@\n-\n@@ -2967,1 +2911,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelDirective = 232;\n+     * enum CXCursorKind.CXCursor_OMPParallelDirective = 232\n@@ -2974,1 +2918,0 @@\n-\n@@ -2977,1 +2920,1 @@\n-     * enum CXCursorKind.CXCursor_OMPSimdDirective = 233;\n+     * enum CXCursorKind.CXCursor_OMPSimdDirective = 233\n@@ -2984,1 +2927,0 @@\n-\n@@ -2987,1 +2929,1 @@\n-     * enum CXCursorKind.CXCursor_OMPForDirective = 234;\n+     * enum CXCursorKind.CXCursor_OMPForDirective = 234\n@@ -2994,1 +2936,0 @@\n-\n@@ -2997,1 +2938,1 @@\n-     * enum CXCursorKind.CXCursor_OMPSectionsDirective = 235;\n+     * enum CXCursorKind.CXCursor_OMPSectionsDirective = 235\n@@ -3004,1 +2945,0 @@\n-\n@@ -3007,1 +2947,1 @@\n-     * enum CXCursorKind.CXCursor_OMPSectionDirective = 236;\n+     * enum CXCursorKind.CXCursor_OMPSectionDirective = 236\n@@ -3014,1 +2954,0 @@\n-\n@@ -3017,1 +2956,1 @@\n-     * enum CXCursorKind.CXCursor_OMPSingleDirective = 237;\n+     * enum CXCursorKind.CXCursor_OMPSingleDirective = 237\n@@ -3024,1 +2963,0 @@\n-\n@@ -3027,1 +2965,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelForDirective = 238;\n+     * enum CXCursorKind.CXCursor_OMPParallelForDirective = 238\n@@ -3034,1 +2972,0 @@\n-\n@@ -3037,1 +2974,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelSectionsDirective = 239;\n+     * enum CXCursorKind.CXCursor_OMPParallelSectionsDirective = 239\n@@ -3044,1 +2981,0 @@\n-\n@@ -3047,1 +2983,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskDirective = 240;\n+     * enum CXCursorKind.CXCursor_OMPTaskDirective = 240\n@@ -3054,1 +2990,0 @@\n-\n@@ -3057,1 +2992,1 @@\n-     * enum CXCursorKind.CXCursor_OMPMasterDirective = 241;\n+     * enum CXCursorKind.CXCursor_OMPMasterDirective = 241\n@@ -3064,1 +2999,0 @@\n-\n@@ -3067,1 +3001,1 @@\n-     * enum CXCursorKind.CXCursor_OMPCriticalDirective = 242;\n+     * enum CXCursorKind.CXCursor_OMPCriticalDirective = 242\n@@ -3074,1 +3008,0 @@\n-\n@@ -3077,1 +3010,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskyieldDirective = 243;\n+     * enum CXCursorKind.CXCursor_OMPTaskyieldDirective = 243\n@@ -3084,1 +3017,0 @@\n-\n@@ -3087,1 +3019,1 @@\n-     * enum CXCursorKind.CXCursor_OMPBarrierDirective = 244;\n+     * enum CXCursorKind.CXCursor_OMPBarrierDirective = 244\n@@ -3094,1 +3026,0 @@\n-\n@@ -3097,1 +3028,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskwaitDirective = 245;\n+     * enum CXCursorKind.CXCursor_OMPTaskwaitDirective = 245\n@@ -3104,1 +3035,0 @@\n-\n@@ -3107,1 +3037,1 @@\n-     * enum CXCursorKind.CXCursor_OMPFlushDirective = 246;\n+     * enum CXCursorKind.CXCursor_OMPFlushDirective = 246\n@@ -3114,1 +3044,0 @@\n-\n@@ -3117,1 +3046,1 @@\n-     * enum CXCursorKind.CXCursor_SEHLeaveStmt = 247;\n+     * enum CXCursorKind.CXCursor_SEHLeaveStmt = 247\n@@ -3124,1 +3053,0 @@\n-\n@@ -3127,1 +3055,1 @@\n-     * enum CXCursorKind.CXCursor_OMPOrderedDirective = 248;\n+     * enum CXCursorKind.CXCursor_OMPOrderedDirective = 248\n@@ -3134,1 +3062,0 @@\n-\n@@ -3137,1 +3064,1 @@\n-     * enum CXCursorKind.CXCursor_OMPAtomicDirective = 249;\n+     * enum CXCursorKind.CXCursor_OMPAtomicDirective = 249\n@@ -3144,1 +3071,0 @@\n-\n@@ -3147,1 +3073,1 @@\n-     * enum CXCursorKind.CXCursor_OMPForSimdDirective = 250;\n+     * enum CXCursorKind.CXCursor_OMPForSimdDirective = 250\n@@ -3154,1 +3080,0 @@\n-\n@@ -3157,1 +3082,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelForSimdDirective = 251;\n+     * enum CXCursorKind.CXCursor_OMPParallelForSimdDirective = 251\n@@ -3164,1 +3089,0 @@\n-\n@@ -3167,1 +3091,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetDirective = 252;\n+     * enum CXCursorKind.CXCursor_OMPTargetDirective = 252\n@@ -3174,1 +3098,0 @@\n-\n@@ -3177,1 +3100,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTeamsDirective = 253;\n+     * enum CXCursorKind.CXCursor_OMPTeamsDirective = 253\n@@ -3184,1 +3107,0 @@\n-\n@@ -3187,1 +3109,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskgroupDirective = 254;\n+     * enum CXCursorKind.CXCursor_OMPTaskgroupDirective = 254\n@@ -3194,1 +3116,0 @@\n-\n@@ -3197,1 +3118,1 @@\n-     * enum CXCursorKind.CXCursor_OMPCancellationPointDirective = 255;\n+     * enum CXCursorKind.CXCursor_OMPCancellationPointDirective = 255\n@@ -3204,1 +3125,0 @@\n-\n@@ -3207,1 +3127,1 @@\n-     * enum CXCursorKind.CXCursor_OMPCancelDirective = 256;\n+     * enum CXCursorKind.CXCursor_OMPCancelDirective = 256\n@@ -3214,1 +3134,0 @@\n-\n@@ -3217,1 +3136,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetDataDirective = 257;\n+     * enum CXCursorKind.CXCursor_OMPTargetDataDirective = 257\n@@ -3224,1 +3143,0 @@\n-\n@@ -3227,1 +3145,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskLoopDirective = 258;\n+     * enum CXCursorKind.CXCursor_OMPTaskLoopDirective = 258\n@@ -3234,1 +3152,0 @@\n-\n@@ -3237,1 +3154,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTaskLoopSimdDirective = 259;\n+     * enum CXCursorKind.CXCursor_OMPTaskLoopSimdDirective = 259\n@@ -3244,1 +3161,0 @@\n-\n@@ -3247,1 +3163,1 @@\n-     * enum CXCursorKind.CXCursor_OMPDistributeDirective = 260;\n+     * enum CXCursorKind.CXCursor_OMPDistributeDirective = 260\n@@ -3254,1 +3170,0 @@\n-\n@@ -3257,1 +3172,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetEnterDataDirective = 261;\n+     * enum CXCursorKind.CXCursor_OMPTargetEnterDataDirective = 261\n@@ -3264,1 +3179,0 @@\n-\n@@ -3267,1 +3181,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetExitDataDirective = 262;\n+     * enum CXCursorKind.CXCursor_OMPTargetExitDataDirective = 262\n@@ -3274,1 +3188,0 @@\n-\n@@ -3277,1 +3190,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelDirective = 263;\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelDirective = 263\n@@ -3284,1 +3197,0 @@\n-\n@@ -3287,1 +3199,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelForDirective = 264;\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelForDirective = 264\n@@ -3294,1 +3206,0 @@\n-\n@@ -3297,1 +3208,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetUpdateDirective = 265;\n+     * enum CXCursorKind.CXCursor_OMPTargetUpdateDirective = 265\n@@ -3304,1 +3215,0 @@\n-\n@@ -3307,1 +3217,1 @@\n-     * enum CXCursorKind.CXCursor_OMPDistributeParallelForDirective = 266;\n+     * enum CXCursorKind.CXCursor_OMPDistributeParallelForDirective = 266\n@@ -3314,1 +3224,0 @@\n-\n@@ -3317,1 +3226,1 @@\n-     * enum CXCursorKind.CXCursor_OMPDistributeParallelForSimdDirective = 267;\n+     * enum CXCursorKind.CXCursor_OMPDistributeParallelForSimdDirective = 267\n@@ -3324,1 +3233,0 @@\n-\n@@ -3327,1 +3235,1 @@\n-     * enum CXCursorKind.CXCursor_OMPDistributeSimdDirective = 268;\n+     * enum CXCursorKind.CXCursor_OMPDistributeSimdDirective = 268\n@@ -3334,1 +3242,0 @@\n-\n@@ -3337,1 +3244,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelForSimdDirective = 269;\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelForSimdDirective = 269\n@@ -3344,1 +3251,0 @@\n-\n@@ -3347,1 +3253,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetSimdDirective = 270;\n+     * enum CXCursorKind.CXCursor_OMPTargetSimdDirective = 270\n@@ -3354,1 +3260,0 @@\n-\n@@ -3357,1 +3262,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeDirective = 271;\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeDirective = 271\n@@ -3364,1 +3269,0 @@\n-\n@@ -3367,1 +3271,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeSimdDirective = 272;\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeSimdDirective = 272\n@@ -3374,1 +3278,0 @@\n-\n@@ -3377,1 +3280,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273;\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273\n@@ -3384,1 +3287,0 @@\n-\n@@ -3387,1 +3289,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForDirective = 274;\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForDirective = 274\n@@ -3394,1 +3296,0 @@\n-\n@@ -3397,1 +3298,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDirective = 275;\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDirective = 275\n@@ -3404,1 +3305,0 @@\n-\n@@ -3407,1 +3307,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeDirective = 276;\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeDirective = 276\n@@ -3414,1 +3314,0 @@\n-\n@@ -3417,1 +3316,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277;\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277\n@@ -3424,1 +3323,0 @@\n-\n@@ -3427,1 +3325,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278;\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278\n@@ -3434,1 +3332,0 @@\n-\n@@ -3437,1 +3334,1 @@\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeSimdDirective = 279;\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeSimdDirective = 279\n@@ -3444,1 +3341,0 @@\n-\n@@ -3447,1 +3343,1 @@\n-     * enum CXCursorKind.CXCursor_BuiltinBitCastExpr = 280;\n+     * enum CXCursorKind.CXCursor_BuiltinBitCastExpr = 280\n@@ -3454,1 +3350,0 @@\n-\n@@ -3457,1 +3352,1 @@\n-     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopDirective = 281;\n+     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopDirective = 281\n@@ -3464,1 +3359,0 @@\n-\n@@ -3467,1 +3361,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopDirective = 282;\n+     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopDirective = 282\n@@ -3474,1 +3368,0 @@\n-\n@@ -3477,1 +3370,1 @@\n-     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopSimdDirective = 283;\n+     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopSimdDirective = 283\n@@ -3484,1 +3377,0 @@\n-\n@@ -3487,1 +3379,1 @@\n-     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284;\n+     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284\n@@ -3494,1 +3386,0 @@\n-\n@@ -3497,1 +3388,1 @@\n-     * enum CXCursorKind.CXCursor_LastStmt = 293;\n+     * enum CXCursorKind.CXCursor_LastStmt = 293\n@@ -3504,1 +3395,0 @@\n-\n@@ -3507,1 +3397,1 @@\n-     * enum CXCursorKind.CXCursor_TranslationUnit = 300;\n+     * enum CXCursorKind.CXCursor_TranslationUnit = 300\n@@ -3514,1 +3404,0 @@\n-\n@@ -3517,1 +3406,1 @@\n-     * enum CXCursorKind.CXCursor_FirstAttr = 400;\n+     * enum CXCursorKind.CXCursor_FirstAttr = 400\n@@ -3524,1 +3413,0 @@\n-\n@@ -3527,1 +3415,1 @@\n-     * enum CXCursorKind.CXCursor_UnexposedAttr = 400;\n+     * enum CXCursorKind.CXCursor_UnexposedAttr = 400\n@@ -3534,1 +3422,0 @@\n-\n@@ -3537,1 +3424,1 @@\n-     * enum CXCursorKind.CXCursor_IBActionAttr = 401;\n+     * enum CXCursorKind.CXCursor_IBActionAttr = 401\n@@ -3544,1 +3431,0 @@\n-\n@@ -3547,1 +3433,1 @@\n-     * enum CXCursorKind.CXCursor_IBOutletAttr = 402;\n+     * enum CXCursorKind.CXCursor_IBOutletAttr = 402\n@@ -3554,1 +3440,0 @@\n-\n@@ -3557,1 +3442,1 @@\n-     * enum CXCursorKind.CXCursor_IBOutletCollectionAttr = 403;\n+     * enum CXCursorKind.CXCursor_IBOutletCollectionAttr = 403\n@@ -3564,1 +3449,0 @@\n-\n@@ -3567,1 +3451,1 @@\n-     * enum CXCursorKind.CXCursor_CXXFinalAttr = 404;\n+     * enum CXCursorKind.CXCursor_CXXFinalAttr = 404\n@@ -3574,1 +3458,0 @@\n-\n@@ -3577,1 +3460,1 @@\n-     * enum CXCursorKind.CXCursor_CXXOverrideAttr = 405;\n+     * enum CXCursorKind.CXCursor_CXXOverrideAttr = 405\n@@ -3584,1 +3467,0 @@\n-\n@@ -3587,1 +3469,1 @@\n-     * enum CXCursorKind.CXCursor_AnnotateAttr = 406;\n+     * enum CXCursorKind.CXCursor_AnnotateAttr = 406\n@@ -3594,1 +3476,0 @@\n-\n@@ -3597,1 +3478,1 @@\n-     * enum CXCursorKind.CXCursor_AsmLabelAttr = 407;\n+     * enum CXCursorKind.CXCursor_AsmLabelAttr = 407\n@@ -3604,1 +3485,0 @@\n-\n@@ -3607,1 +3487,1 @@\n-     * enum CXCursorKind.CXCursor_PackedAttr = 408;\n+     * enum CXCursorKind.CXCursor_PackedAttr = 408\n@@ -3614,1 +3494,0 @@\n-\n@@ -3617,1 +3496,1 @@\n-     * enum CXCursorKind.CXCursor_PureAttr = 409;\n+     * enum CXCursorKind.CXCursor_PureAttr = 409\n@@ -3624,1 +3503,0 @@\n-\n@@ -3627,1 +3505,1 @@\n-     * enum CXCursorKind.CXCursor_ConstAttr = 410;\n+     * enum CXCursorKind.CXCursor_ConstAttr = 410\n@@ -3634,1 +3512,0 @@\n-\n@@ -3637,1 +3514,1 @@\n-     * enum CXCursorKind.CXCursor_NoDuplicateAttr = 411;\n+     * enum CXCursorKind.CXCursor_NoDuplicateAttr = 411\n@@ -3644,1 +3521,0 @@\n-\n@@ -3647,1 +3523,1 @@\n-     * enum CXCursorKind.CXCursor_CUDAConstantAttr = 412;\n+     * enum CXCursorKind.CXCursor_CUDAConstantAttr = 412\n@@ -3654,1 +3530,0 @@\n-\n@@ -3657,1 +3532,1 @@\n-     * enum CXCursorKind.CXCursor_CUDADeviceAttr = 413;\n+     * enum CXCursorKind.CXCursor_CUDADeviceAttr = 413\n@@ -3664,1 +3539,0 @@\n-\n@@ -3667,1 +3541,1 @@\n-     * enum CXCursorKind.CXCursor_CUDAGlobalAttr = 414;\n+     * enum CXCursorKind.CXCursor_CUDAGlobalAttr = 414\n@@ -3674,1 +3548,0 @@\n-\n@@ -3677,1 +3550,1 @@\n-     * enum CXCursorKind.CXCursor_CUDAHostAttr = 415;\n+     * enum CXCursorKind.CXCursor_CUDAHostAttr = 415\n@@ -3684,1 +3557,0 @@\n-\n@@ -3687,1 +3559,1 @@\n-     * enum CXCursorKind.CXCursor_CUDASharedAttr = 416;\n+     * enum CXCursorKind.CXCursor_CUDASharedAttr = 416\n@@ -3694,1 +3566,0 @@\n-\n@@ -3697,1 +3568,1 @@\n-     * enum CXCursorKind.CXCursor_VisibilityAttr = 417;\n+     * enum CXCursorKind.CXCursor_VisibilityAttr = 417\n@@ -3704,1 +3575,0 @@\n-\n@@ -3707,1 +3577,1 @@\n-     * enum CXCursorKind.CXCursor_DLLExport = 418;\n+     * enum CXCursorKind.CXCursor_DLLExport = 418\n@@ -3714,1 +3584,0 @@\n-\n@@ -3717,1 +3586,1 @@\n-     * enum CXCursorKind.CXCursor_DLLImport = 419;\n+     * enum CXCursorKind.CXCursor_DLLImport = 419\n@@ -3724,1 +3593,0 @@\n-\n@@ -3727,1 +3595,1 @@\n-     * enum CXCursorKind.CXCursor_NSReturnsRetained = 420;\n+     * enum CXCursorKind.CXCursor_NSReturnsRetained = 420\n@@ -3734,1 +3602,0 @@\n-\n@@ -3737,1 +3604,1 @@\n-     * enum CXCursorKind.CXCursor_NSReturnsNotRetained = 421;\n+     * enum CXCursorKind.CXCursor_NSReturnsNotRetained = 421\n@@ -3744,1 +3611,0 @@\n-\n@@ -3747,1 +3613,1 @@\n-     * enum CXCursorKind.CXCursor_NSReturnsAutoreleased = 422;\n+     * enum CXCursorKind.CXCursor_NSReturnsAutoreleased = 422\n@@ -3754,1 +3620,0 @@\n-\n@@ -3757,1 +3622,1 @@\n-     * enum CXCursorKind.CXCursor_NSConsumesSelf = 423;\n+     * enum CXCursorKind.CXCursor_NSConsumesSelf = 423\n@@ -3764,1 +3629,0 @@\n-\n@@ -3767,1 +3631,1 @@\n-     * enum CXCursorKind.CXCursor_NSConsumed = 424;\n+     * enum CXCursorKind.CXCursor_NSConsumed = 424\n@@ -3774,1 +3638,0 @@\n-\n@@ -3777,1 +3640,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCException = 425;\n+     * enum CXCursorKind.CXCursor_ObjCException = 425\n@@ -3784,1 +3647,0 @@\n-\n@@ -3787,1 +3649,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCNSObject = 426;\n+     * enum CXCursorKind.CXCursor_ObjCNSObject = 426\n@@ -3794,1 +3656,0 @@\n-\n@@ -3797,1 +3658,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCIndependentClass = 427;\n+     * enum CXCursorKind.CXCursor_ObjCIndependentClass = 427\n@@ -3804,1 +3665,0 @@\n-\n@@ -3807,1 +3667,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCPreciseLifetime = 428;\n+     * enum CXCursorKind.CXCursor_ObjCPreciseLifetime = 428\n@@ -3814,1 +3674,0 @@\n-\n@@ -3817,1 +3676,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCReturnsInnerPointer = 429;\n+     * enum CXCursorKind.CXCursor_ObjCReturnsInnerPointer = 429\n@@ -3824,1 +3683,0 @@\n-\n@@ -3827,1 +3685,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCRequiresSuper = 430;\n+     * enum CXCursorKind.CXCursor_ObjCRequiresSuper = 430\n@@ -3834,1 +3692,0 @@\n-\n@@ -3837,1 +3694,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCRootClass = 431;\n+     * enum CXCursorKind.CXCursor_ObjCRootClass = 431\n@@ -3844,1 +3701,0 @@\n-\n@@ -3847,1 +3703,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCSubclassingRestricted = 432;\n+     * enum CXCursorKind.CXCursor_ObjCSubclassingRestricted = 432\n@@ -3854,1 +3710,0 @@\n-\n@@ -3857,1 +3712,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCExplicitProtocolImpl = 433;\n+     * enum CXCursorKind.CXCursor_ObjCExplicitProtocolImpl = 433\n@@ -3864,1 +3719,0 @@\n-\n@@ -3867,1 +3721,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCDesignatedInitializer = 434;\n+     * enum CXCursorKind.CXCursor_ObjCDesignatedInitializer = 434\n@@ -3874,1 +3728,0 @@\n-\n@@ -3877,1 +3730,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCRuntimeVisible = 435;\n+     * enum CXCursorKind.CXCursor_ObjCRuntimeVisible = 435\n@@ -3884,1 +3737,0 @@\n-\n@@ -3887,1 +3739,1 @@\n-     * enum CXCursorKind.CXCursor_ObjCBoxable = 436;\n+     * enum CXCursorKind.CXCursor_ObjCBoxable = 436\n@@ -3894,1 +3746,0 @@\n-\n@@ -3897,1 +3748,1 @@\n-     * enum CXCursorKind.CXCursor_FlagEnum = 437;\n+     * enum CXCursorKind.CXCursor_FlagEnum = 437\n@@ -3904,1 +3755,0 @@\n-\n@@ -3907,1 +3757,1 @@\n-     * enum CXCursorKind.CXCursor_ConvergentAttr = 438;\n+     * enum CXCursorKind.CXCursor_ConvergentAttr = 438\n@@ -3914,1 +3764,0 @@\n-\n@@ -3917,1 +3766,1 @@\n-     * enum CXCursorKind.CXCursor_WarnUnusedAttr = 439;\n+     * enum CXCursorKind.CXCursor_WarnUnusedAttr = 439\n@@ -3924,1 +3773,0 @@\n-\n@@ -3927,1 +3775,1 @@\n-     * enum CXCursorKind.CXCursor_WarnUnusedResultAttr = 440;\n+     * enum CXCursorKind.CXCursor_WarnUnusedResultAttr = 440\n@@ -3934,1 +3782,0 @@\n-\n@@ -3937,1 +3784,1 @@\n-     * enum CXCursorKind.CXCursor_AlignedAttr = 441;\n+     * enum CXCursorKind.CXCursor_AlignedAttr = 441\n@@ -3944,1 +3791,0 @@\n-\n@@ -3947,1 +3793,1 @@\n-     * enum CXCursorKind.CXCursor_LastAttr = 441;\n+     * enum CXCursorKind.CXCursor_LastAttr = 441\n@@ -3954,1 +3800,0 @@\n-\n@@ -3957,1 +3802,1 @@\n-     * enum CXCursorKind.CXCursor_PreprocessingDirective = 500;\n+     * enum CXCursorKind.CXCursor_PreprocessingDirective = 500\n@@ -3964,1 +3809,0 @@\n-\n@@ -3967,1 +3811,1 @@\n-     * enum CXCursorKind.CXCursor_MacroDefinition = 501;\n+     * enum CXCursorKind.CXCursor_MacroDefinition = 501\n@@ -3974,1 +3818,0 @@\n-\n@@ -3977,1 +3820,1 @@\n-     * enum CXCursorKind.CXCursor_MacroExpansion = 502;\n+     * enum CXCursorKind.CXCursor_MacroExpansion = 502\n@@ -3984,1 +3827,0 @@\n-\n@@ -3987,1 +3829,1 @@\n-     * enum CXCursorKind.CXCursor_MacroInstantiation = 502;\n+     * enum CXCursorKind.CXCursor_MacroInstantiation = 502\n@@ -3994,1 +3836,0 @@\n-\n@@ -3997,1 +3838,1 @@\n-     * enum CXCursorKind.CXCursor_InclusionDirective = 503;\n+     * enum CXCursorKind.CXCursor_InclusionDirective = 503\n@@ -4004,1 +3845,0 @@\n-\n@@ -4007,1 +3847,1 @@\n-     * enum CXCursorKind.CXCursor_FirstPreprocessing = 500;\n+     * enum CXCursorKind.CXCursor_FirstPreprocessing = 500\n@@ -4014,1 +3854,0 @@\n-\n@@ -4017,1 +3856,1 @@\n-     * enum CXCursorKind.CXCursor_LastPreprocessing = 503;\n+     * enum CXCursorKind.CXCursor_LastPreprocessing = 503\n@@ -4024,1 +3863,0 @@\n-\n@@ -4027,1 +3865,1 @@\n-     * enum CXCursorKind.CXCursor_ModuleImportDecl = 600;\n+     * enum CXCursorKind.CXCursor_ModuleImportDecl = 600\n@@ -4034,1 +3872,0 @@\n-\n@@ -4037,1 +3874,1 @@\n-     * enum CXCursorKind.CXCursor_TypeAliasTemplateDecl = 601;\n+     * enum CXCursorKind.CXCursor_TypeAliasTemplateDecl = 601\n@@ -4044,1 +3881,0 @@\n-\n@@ -4047,1 +3883,1 @@\n-     * enum CXCursorKind.CXCursor_StaticAssert = 602;\n+     * enum CXCursorKind.CXCursor_StaticAssert = 602\n@@ -4054,1 +3890,0 @@\n-\n@@ -4057,1 +3892,1 @@\n-     * enum CXCursorKind.CXCursor_FriendDecl = 603;\n+     * enum CXCursorKind.CXCursor_FriendDecl = 603\n@@ -4064,1 +3899,0 @@\n-\n@@ -4067,1 +3901,1 @@\n-     * enum CXCursorKind.CXCursor_FirstExtraDecl = 600;\n+     * enum CXCursorKind.CXCursor_FirstExtraDecl = 600\n@@ -4074,1 +3908,0 @@\n-\n@@ -4077,1 +3910,1 @@\n-     * enum CXCursorKind.CXCursor_LastExtraDecl = 603;\n+     * enum CXCursorKind.CXCursor_LastExtraDecl = 603\n@@ -4084,1 +3917,0 @@\n-\n@@ -4087,1 +3919,1 @@\n-     * enum CXCursorKind.CXCursor_OverloadCandidate = 700;\n+     * enum CXCursorKind.CXCursor_OverloadCandidate = 700\n@@ -4093,6 +3925,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_getNullCursor();\n-     * }\n-     *\/\n-    public static MethodHandle clang_getNullCursor$MH() {\n+\n+    private static MethodHandle clang_getNullCursor$MH() {\n@@ -4101,1 +3929,1 @@\n-                CXCursor.$LAYOUT()        );\n+                CXCursor.layout()        );\n@@ -4110,0 +3938,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n+     * }\n+     *\/\n@@ -4113,1 +3946,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNullCursor\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n@@ -4118,6 +3954,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTranslationUnitCursor$MH() {\n+\n+    private static MethodHandle clang_getTranslationUnitCursor$MH() {\n@@ -4126,1 +3958,1 @@\n-                CXCursor.$LAYOUT(),\n+                CXCursor.layout(),\n@@ -4137,0 +3969,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n+     * }\n+     *\/\n@@ -4140,1 +3977,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTranslationUnitCursor\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -4145,6 +3985,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_equalCursors(CXCursor, CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_equalCursors$MH() {\n+\n+    private static MethodHandle clang_equalCursors$MH() {\n@@ -4154,2 +3990,2 @@\n-                CXCursor.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout(),\n+                CXCursor.layout()\n@@ -4165,0 +4001,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n+     * }\n+     *\/\n@@ -4168,1 +4009,4 @@\n-            return (int) mh$.invokeExact(x0, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalCursors\", x0, x1);\n+            }\n+            return (int)mh$.invokeExact(x0, x1);\n@@ -4173,6 +4017,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_Cursor_isNull(CXCursor cursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isNull$MH() {\n+\n+    private static MethodHandle clang_Cursor_isNull$MH() {\n@@ -4182,1 +4022,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -4192,0 +4032,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n+     * }\n+     *\/\n@@ -4195,1 +4040,4 @@\n-            return (int) mh$.invokeExact(cursor);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isNull\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n@@ -4200,6 +4048,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXCursorKind clang_getCursorKind(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorKind$MH() {\n+\n+    private static MethodHandle clang_getCursorKind$MH() {\n@@ -4209,1 +4053,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -4219,0 +4063,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n+     * }\n+     *\/\n@@ -4222,1 +4071,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorKind\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -4227,6 +4079,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isDeclaration(enum CXCursorKind);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isDeclaration$MH() {\n+\n+    private static MethodHandle clang_isDeclaration$MH() {\n@@ -4246,0 +4094,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n+     * }\n+     *\/\n@@ -4249,1 +4102,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isDeclaration\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -4254,6 +4110,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isAttribute(enum CXCursorKind);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isAttribute$MH() {\n+\n+    private static MethodHandle clang_isAttribute$MH() {\n@@ -4273,0 +4125,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n+     * }\n+     *\/\n@@ -4276,1 +4133,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isAttribute\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -4281,6 +4141,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isInvalid(enum CXCursorKind);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isInvalid$MH() {\n+\n+    private static MethodHandle clang_isInvalid$MH() {\n@@ -4300,0 +4156,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n+     * }\n+     *\/\n@@ -4303,1 +4164,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isInvalid\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -4308,6 +4172,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isPreprocessing(enum CXCursorKind);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isPreprocessing$MH() {\n+\n+    private static MethodHandle clang_isPreprocessing$MH() {\n@@ -4327,0 +4187,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n+     * }\n+     *\/\n@@ -4330,1 +4195,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isPreprocessing\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -4336,1 +4204,0 @@\n-\n@@ -4339,1 +4206,1 @@\n-     * enum CXLinkageKind.CXLinkage_Invalid = 0;\n+     * enum CXLinkageKind.CXLinkage_Invalid = 0\n@@ -4346,1 +4213,0 @@\n-\n@@ -4349,1 +4215,1 @@\n-     * enum CXLinkageKind.CXLinkage_NoLinkage = 1;\n+     * enum CXLinkageKind.CXLinkage_NoLinkage = 1\n@@ -4356,1 +4222,0 @@\n-\n@@ -4359,1 +4224,1 @@\n-     * enum CXLinkageKind.CXLinkage_Internal = 2;\n+     * enum CXLinkageKind.CXLinkage_Internal = 2\n@@ -4366,1 +4231,0 @@\n-\n@@ -4369,1 +4233,1 @@\n-     * enum CXLinkageKind.CXLinkage_UniqueExternal = 3;\n+     * enum CXLinkageKind.CXLinkage_UniqueExternal = 3\n@@ -4376,1 +4240,0 @@\n-\n@@ -4379,1 +4242,1 @@\n-     * enum CXLinkageKind.CXLinkage_External = 4;\n+     * enum CXLinkageKind.CXLinkage_External = 4\n@@ -4385,6 +4248,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorLinkage$MH() {\n+\n+    private static MethodHandle clang_getCursorLinkage$MH() {\n@@ -4394,1 +4253,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -4404,0 +4263,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n+     * }\n+     *\/\n@@ -4407,1 +4271,4 @@\n-            return (int) mh$.invokeExact(cursor);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLinkage\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n@@ -4413,1 +4280,0 @@\n-\n@@ -4416,1 +4282,1 @@\n-     * enum CXLanguageKind.CXLanguage_Invalid = 0;\n+     * enum CXLanguageKind.CXLanguage_Invalid = 0\n@@ -4423,1 +4289,0 @@\n-\n@@ -4426,1 +4291,1 @@\n-     * enum CXLanguageKind.CXLanguage_C = 1;\n+     * enum CXLanguageKind.CXLanguage_C = 1\n@@ -4433,1 +4298,0 @@\n-\n@@ -4436,1 +4300,1 @@\n-     * enum CXLanguageKind.CXLanguage_ObjC = 2;\n+     * enum CXLanguageKind.CXLanguage_ObjC = 2\n@@ -4443,1 +4307,0 @@\n-\n@@ -4446,1 +4309,1 @@\n-     * enum CXLanguageKind.CXLanguage_CPlusPlus = 3;\n+     * enum CXLanguageKind.CXLanguage_CPlusPlus = 3\n@@ -4452,6 +4315,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorLanguage$MH() {\n+\n+    private static MethodHandle clang_getCursorLanguage$MH() {\n@@ -4461,1 +4320,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -4471,0 +4330,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n+     * }\n+     *\/\n@@ -4474,1 +4338,4 @@\n-            return (int) mh$.invokeExact(cursor);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLanguage\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n@@ -4479,6 +4346,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n+\n+    private static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n@@ -4488,1 +4351,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -4498,0 +4361,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n+     * }\n+     *\/\n@@ -4501,1 +4369,4 @@\n-            return (MemorySegment) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getTranslationUnit\", x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(x0);\n@@ -4506,6 +4377,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getCursorLocation(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorLocation$MH() {\n+\n+    private static MethodHandle clang_getCursorLocation$MH() {\n@@ -4514,2 +4381,2 @@\n-                CXSourceLocation.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXSourceLocation.layout(),\n+                CXCursor.layout()\n@@ -4525,0 +4392,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n+     * }\n+     *\/\n@@ -4528,1 +4400,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLocation\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -4533,6 +4408,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceRange clang_getCursorExtent(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorExtent$MH() {\n+\n+    private static MethodHandle clang_getCursorExtent$MH() {\n@@ -4541,2 +4412,2 @@\n-                CXSourceRange.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXSourceRange.layout(),\n+                CXCursor.layout()\n@@ -4552,0 +4423,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n+     * }\n+     *\/\n@@ -4555,1 +4431,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorExtent\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -4561,1 +4440,0 @@\n-\n@@ -4564,1 +4442,1 @@\n-     * enum CXTypeKind.CXType_Invalid = 0;\n+     * enum CXTypeKind.CXType_Invalid = 0\n@@ -4571,1 +4449,0 @@\n-\n@@ -4574,1 +4451,1 @@\n-     * enum CXTypeKind.CXType_Unexposed = 1;\n+     * enum CXTypeKind.CXType_Unexposed = 1\n@@ -4581,1 +4458,0 @@\n-\n@@ -4584,1 +4460,1 @@\n-     * enum CXTypeKind.CXType_Void = 2;\n+     * enum CXTypeKind.CXType_Void = 2\n@@ -4591,1 +4467,0 @@\n-\n@@ -4594,1 +4469,1 @@\n-     * enum CXTypeKind.CXType_Bool = 3;\n+     * enum CXTypeKind.CXType_Bool = 3\n@@ -4601,1 +4476,0 @@\n-\n@@ -4604,1 +4478,1 @@\n-     * enum CXTypeKind.CXType_Char_U = 4;\n+     * enum CXTypeKind.CXType_Char_U = 4\n@@ -4611,1 +4485,0 @@\n-\n@@ -4614,1 +4487,1 @@\n-     * enum CXTypeKind.CXType_UChar = 5;\n+     * enum CXTypeKind.CXType_UChar = 5\n@@ -4621,1 +4494,0 @@\n-\n@@ -4624,1 +4496,1 @@\n-     * enum CXTypeKind.CXType_Char16 = 6;\n+     * enum CXTypeKind.CXType_Char16 = 6\n@@ -4631,1 +4503,0 @@\n-\n@@ -4634,1 +4505,1 @@\n-     * enum CXTypeKind.CXType_Char32 = 7;\n+     * enum CXTypeKind.CXType_Char32 = 7\n@@ -4641,1 +4512,0 @@\n-\n@@ -4644,1 +4514,1 @@\n-     * enum CXTypeKind.CXType_UShort = 8;\n+     * enum CXTypeKind.CXType_UShort = 8\n@@ -4651,1 +4521,0 @@\n-\n@@ -4654,1 +4523,1 @@\n-     * enum CXTypeKind.CXType_UInt = 9;\n+     * enum CXTypeKind.CXType_UInt = 9\n@@ -4661,1 +4530,0 @@\n-\n@@ -4664,1 +4532,1 @@\n-     * enum CXTypeKind.CXType_ULong = 10;\n+     * enum CXTypeKind.CXType_ULong = 10\n@@ -4671,1 +4539,0 @@\n-\n@@ -4674,1 +4541,1 @@\n-     * enum CXTypeKind.CXType_ULongLong = 11;\n+     * enum CXTypeKind.CXType_ULongLong = 11\n@@ -4681,1 +4548,0 @@\n-\n@@ -4684,1 +4550,1 @@\n-     * enum CXTypeKind.CXType_UInt128 = 12;\n+     * enum CXTypeKind.CXType_UInt128 = 12\n@@ -4691,1 +4557,0 @@\n-\n@@ -4694,1 +4559,1 @@\n-     * enum CXTypeKind.CXType_Char_S = 13;\n+     * enum CXTypeKind.CXType_Char_S = 13\n@@ -4701,1 +4566,0 @@\n-\n@@ -4704,1 +4568,1 @@\n-     * enum CXTypeKind.CXType_SChar = 14;\n+     * enum CXTypeKind.CXType_SChar = 14\n@@ -4711,1 +4575,0 @@\n-\n@@ -4714,1 +4577,1 @@\n-     * enum CXTypeKind.CXType_WChar = 15;\n+     * enum CXTypeKind.CXType_WChar = 15\n@@ -4721,1 +4584,0 @@\n-\n@@ -4724,1 +4586,1 @@\n-     * enum CXTypeKind.CXType_Short = 16;\n+     * enum CXTypeKind.CXType_Short = 16\n@@ -4731,1 +4593,0 @@\n-\n@@ -4734,1 +4595,1 @@\n-     * enum CXTypeKind.CXType_Int = 17;\n+     * enum CXTypeKind.CXType_Int = 17\n@@ -4741,1 +4602,0 @@\n-\n@@ -4744,1 +4604,1 @@\n-     * enum CXTypeKind.CXType_Long = 18;\n+     * enum CXTypeKind.CXType_Long = 18\n@@ -4751,1 +4611,0 @@\n-\n@@ -4754,1 +4613,1 @@\n-     * enum CXTypeKind.CXType_LongLong = 19;\n+     * enum CXTypeKind.CXType_LongLong = 19\n@@ -4761,1 +4620,0 @@\n-\n@@ -4764,1 +4622,1 @@\n-     * enum CXTypeKind.CXType_Int128 = 20;\n+     * enum CXTypeKind.CXType_Int128 = 20\n@@ -4771,1 +4629,0 @@\n-\n@@ -4774,1 +4631,1 @@\n-     * enum CXTypeKind.CXType_Float = 21;\n+     * enum CXTypeKind.CXType_Float = 21\n@@ -4781,1 +4638,0 @@\n-\n@@ -4784,1 +4640,1 @@\n-     * enum CXTypeKind.CXType_Double = 22;\n+     * enum CXTypeKind.CXType_Double = 22\n@@ -4791,1 +4647,0 @@\n-\n@@ -4794,1 +4649,1 @@\n-     * enum CXTypeKind.CXType_LongDouble = 23;\n+     * enum CXTypeKind.CXType_LongDouble = 23\n@@ -4801,1 +4656,0 @@\n-\n@@ -4804,1 +4658,1 @@\n-     * enum CXTypeKind.CXType_NullPtr = 24;\n+     * enum CXTypeKind.CXType_NullPtr = 24\n@@ -4811,1 +4665,0 @@\n-\n@@ -4814,1 +4667,1 @@\n-     * enum CXTypeKind.CXType_Overload = 25;\n+     * enum CXTypeKind.CXType_Overload = 25\n@@ -4821,1 +4674,0 @@\n-\n@@ -4824,1 +4676,1 @@\n-     * enum CXTypeKind.CXType_Dependent = 26;\n+     * enum CXTypeKind.CXType_Dependent = 26\n@@ -4831,1 +4683,0 @@\n-\n@@ -4834,1 +4685,1 @@\n-     * enum CXTypeKind.CXType_ObjCId = 27;\n+     * enum CXTypeKind.CXType_ObjCId = 27\n@@ -4841,1 +4692,0 @@\n-\n@@ -4844,1 +4694,1 @@\n-     * enum CXTypeKind.CXType_ObjCClass = 28;\n+     * enum CXTypeKind.CXType_ObjCClass = 28\n@@ -4851,1 +4701,0 @@\n-\n@@ -4854,1 +4703,1 @@\n-     * enum CXTypeKind.CXType_ObjCSel = 29;\n+     * enum CXTypeKind.CXType_ObjCSel = 29\n@@ -4861,1 +4710,0 @@\n-\n@@ -4864,1 +4712,1 @@\n-     * enum CXTypeKind.CXType_Float128 = 30;\n+     * enum CXTypeKind.CXType_Float128 = 30\n@@ -4871,1 +4719,0 @@\n-\n@@ -4874,1 +4721,1 @@\n-     * enum CXTypeKind.CXType_Half = 31;\n+     * enum CXTypeKind.CXType_Half = 31\n@@ -4881,1 +4728,0 @@\n-\n@@ -4884,1 +4730,1 @@\n-     * enum CXTypeKind.CXType_Float16 = 32;\n+     * enum CXTypeKind.CXType_Float16 = 32\n@@ -4891,1 +4737,0 @@\n-\n@@ -4894,1 +4739,1 @@\n-     * enum CXTypeKind.CXType_ShortAccum = 33;\n+     * enum CXTypeKind.CXType_ShortAccum = 33\n@@ -4901,1 +4746,0 @@\n-\n@@ -4904,1 +4748,1 @@\n-     * enum CXTypeKind.CXType_Accum = 34;\n+     * enum CXTypeKind.CXType_Accum = 34\n@@ -4911,1 +4755,0 @@\n-\n@@ -4914,1 +4757,1 @@\n-     * enum CXTypeKind.CXType_LongAccum = 35;\n+     * enum CXTypeKind.CXType_LongAccum = 35\n@@ -4921,1 +4764,0 @@\n-\n@@ -4924,1 +4766,1 @@\n-     * enum CXTypeKind.CXType_UShortAccum = 36;\n+     * enum CXTypeKind.CXType_UShortAccum = 36\n@@ -4931,1 +4773,0 @@\n-\n@@ -4934,1 +4775,1 @@\n-     * enum CXTypeKind.CXType_UAccum = 37;\n+     * enum CXTypeKind.CXType_UAccum = 37\n@@ -4941,1 +4782,0 @@\n-\n@@ -4944,1 +4784,1 @@\n-     * enum CXTypeKind.CXType_ULongAccum = 38;\n+     * enum CXTypeKind.CXType_ULongAccum = 38\n@@ -4951,1 +4791,0 @@\n-\n@@ -4954,1 +4793,1 @@\n-     * enum CXTypeKind.CXType_FirstBuiltin = 2;\n+     * enum CXTypeKind.CXType_FirstBuiltin = 2\n@@ -4961,1 +4800,0 @@\n-\n@@ -4964,1 +4802,1 @@\n-     * enum CXTypeKind.CXType_LastBuiltin = 39;\n+     * enum CXTypeKind.CXType_LastBuiltin = 39\n@@ -4971,1 +4809,0 @@\n-\n@@ -4974,1 +4811,1 @@\n-     * enum CXTypeKind.CXType_Complex = 100;\n+     * enum CXTypeKind.CXType_Complex = 100\n@@ -4981,1 +4818,0 @@\n-\n@@ -4984,1 +4820,1 @@\n-     * enum CXTypeKind.CXType_Pointer = 101;\n+     * enum CXTypeKind.CXType_Pointer = 101\n@@ -4991,1 +4827,0 @@\n-\n@@ -4994,1 +4829,1 @@\n-     * enum CXTypeKind.CXType_BlockPointer = 102;\n+     * enum CXTypeKind.CXType_BlockPointer = 102\n@@ -5001,1 +4836,0 @@\n-\n@@ -5004,1 +4838,1 @@\n-     * enum CXTypeKind.CXType_LValueReference = 103;\n+     * enum CXTypeKind.CXType_LValueReference = 103\n@@ -5011,1 +4845,0 @@\n-\n@@ -5014,1 +4847,1 @@\n-     * enum CXTypeKind.CXType_RValueReference = 104;\n+     * enum CXTypeKind.CXType_RValueReference = 104\n@@ -5021,1 +4854,0 @@\n-\n@@ -5024,1 +4856,1 @@\n-     * enum CXTypeKind.CXType_Record = 105;\n+     * enum CXTypeKind.CXType_Record = 105\n@@ -5031,1 +4863,0 @@\n-\n@@ -5034,1 +4865,1 @@\n-     * enum CXTypeKind.CXType_Enum = 106;\n+     * enum CXTypeKind.CXType_Enum = 106\n@@ -5041,1 +4872,0 @@\n-\n@@ -5044,1 +4874,1 @@\n-     * enum CXTypeKind.CXType_Typedef = 107;\n+     * enum CXTypeKind.CXType_Typedef = 107\n@@ -5051,1 +4881,0 @@\n-\n@@ -5054,1 +4883,1 @@\n-     * enum CXTypeKind.CXType_ObjCInterface = 108;\n+     * enum CXTypeKind.CXType_ObjCInterface = 108\n@@ -5061,1 +4890,0 @@\n-\n@@ -5064,1 +4892,1 @@\n-     * enum CXTypeKind.CXType_ObjCObjectPointer = 109;\n+     * enum CXTypeKind.CXType_ObjCObjectPointer = 109\n@@ -5071,1 +4899,0 @@\n-\n@@ -5074,1 +4901,1 @@\n-     * enum CXTypeKind.CXType_FunctionNoProto = 110;\n+     * enum CXTypeKind.CXType_FunctionNoProto = 110\n@@ -5081,1 +4908,0 @@\n-\n@@ -5084,1 +4910,1 @@\n-     * enum CXTypeKind.CXType_FunctionProto = 111;\n+     * enum CXTypeKind.CXType_FunctionProto = 111\n@@ -5091,1 +4917,0 @@\n-\n@@ -5094,1 +4919,1 @@\n-     * enum CXTypeKind.CXType_ConstantArray = 112;\n+     * enum CXTypeKind.CXType_ConstantArray = 112\n@@ -5101,1 +4926,0 @@\n-\n@@ -5104,1 +4928,1 @@\n-     * enum CXTypeKind.CXType_Vector = 113;\n+     * enum CXTypeKind.CXType_Vector = 113\n@@ -5111,1 +4935,0 @@\n-\n@@ -5114,1 +4937,1 @@\n-     * enum CXTypeKind.CXType_IncompleteArray = 114;\n+     * enum CXTypeKind.CXType_IncompleteArray = 114\n@@ -5121,1 +4944,0 @@\n-\n@@ -5124,1 +4946,1 @@\n-     * enum CXTypeKind.CXType_VariableArray = 115;\n+     * enum CXTypeKind.CXType_VariableArray = 115\n@@ -5131,1 +4953,0 @@\n-\n@@ -5134,1 +4955,1 @@\n-     * enum CXTypeKind.CXType_DependentSizedArray = 116;\n+     * enum CXTypeKind.CXType_DependentSizedArray = 116\n@@ -5141,1 +4962,0 @@\n-\n@@ -5144,1 +4964,1 @@\n-     * enum CXTypeKind.CXType_MemberPointer = 117;\n+     * enum CXTypeKind.CXType_MemberPointer = 117\n@@ -5151,1 +4971,0 @@\n-\n@@ -5154,1 +4973,1 @@\n-     * enum CXTypeKind.CXType_Auto = 118;\n+     * enum CXTypeKind.CXType_Auto = 118\n@@ -5161,1 +4980,0 @@\n-\n@@ -5164,1 +4982,1 @@\n-     * enum CXTypeKind.CXType_Elaborated = 119;\n+     * enum CXTypeKind.CXType_Elaborated = 119\n@@ -5171,1 +4989,0 @@\n-\n@@ -5174,1 +4991,1 @@\n-     * enum CXTypeKind.CXType_Pipe = 120;\n+     * enum CXTypeKind.CXType_Pipe = 120\n@@ -5181,1 +4998,0 @@\n-\n@@ -5184,1 +5000,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dRO = 121;\n+     * enum CXTypeKind.CXType_OCLImage1dRO = 121\n@@ -5191,1 +5007,0 @@\n-\n@@ -5194,1 +5009,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dArrayRO = 122;\n+     * enum CXTypeKind.CXType_OCLImage1dArrayRO = 122\n@@ -5201,1 +5016,0 @@\n-\n@@ -5204,1 +5018,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dBufferRO = 123;\n+     * enum CXTypeKind.CXType_OCLImage1dBufferRO = 123\n@@ -5211,1 +5025,0 @@\n-\n@@ -5214,1 +5027,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dRO = 124;\n+     * enum CXTypeKind.CXType_OCLImage2dRO = 124\n@@ -5221,1 +5034,0 @@\n-\n@@ -5224,1 +5036,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayRO = 125;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayRO = 125\n@@ -5231,1 +5043,0 @@\n-\n@@ -5234,1 +5045,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dDepthRO = 126;\n+     * enum CXTypeKind.CXType_OCLImage2dDepthRO = 126\n@@ -5241,1 +5052,0 @@\n-\n@@ -5244,1 +5054,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRO = 127;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRO = 127\n@@ -5251,1 +5061,0 @@\n-\n@@ -5254,1 +5063,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAARO = 128;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAARO = 128\n@@ -5261,1 +5070,0 @@\n-\n@@ -5264,1 +5072,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARO = 129;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARO = 129\n@@ -5271,1 +5079,0 @@\n-\n@@ -5274,1 +5081,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRO = 130;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRO = 130\n@@ -5281,1 +5088,0 @@\n-\n@@ -5284,1 +5090,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRO = 131;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRO = 131\n@@ -5291,1 +5097,0 @@\n-\n@@ -5294,1 +5099,1 @@\n-     * enum CXTypeKind.CXType_OCLImage3dRO = 132;\n+     * enum CXTypeKind.CXType_OCLImage3dRO = 132\n@@ -5301,1 +5106,0 @@\n-\n@@ -5304,1 +5108,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dWO = 133;\n+     * enum CXTypeKind.CXType_OCLImage1dWO = 133\n@@ -5311,1 +5115,0 @@\n-\n@@ -5314,1 +5117,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dArrayWO = 134;\n+     * enum CXTypeKind.CXType_OCLImage1dArrayWO = 134\n@@ -5321,1 +5124,0 @@\n-\n@@ -5324,1 +5126,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dBufferWO = 135;\n+     * enum CXTypeKind.CXType_OCLImage1dBufferWO = 135\n@@ -5331,1 +5133,0 @@\n-\n@@ -5334,1 +5135,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dWO = 136;\n+     * enum CXTypeKind.CXType_OCLImage2dWO = 136\n@@ -5341,1 +5142,0 @@\n-\n@@ -5344,1 +5144,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayWO = 137;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayWO = 137\n@@ -5351,1 +5151,0 @@\n-\n@@ -5354,1 +5153,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dDepthWO = 138;\n+     * enum CXTypeKind.CXType_OCLImage2dDepthWO = 138\n@@ -5361,1 +5160,0 @@\n-\n@@ -5364,1 +5162,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthWO = 139;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthWO = 139\n@@ -5371,1 +5169,0 @@\n-\n@@ -5374,1 +5171,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAAWO = 140;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAAWO = 140\n@@ -5381,1 +5178,0 @@\n-\n@@ -5384,1 +5180,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAAWO = 141;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAAWO = 141\n@@ -5391,1 +5187,0 @@\n-\n@@ -5394,1 +5189,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthWO = 142;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthWO = 142\n@@ -5401,1 +5196,0 @@\n-\n@@ -5404,1 +5198,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthWO = 143;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthWO = 143\n@@ -5411,1 +5205,0 @@\n-\n@@ -5414,1 +5207,1 @@\n-     * enum CXTypeKind.CXType_OCLImage3dWO = 144;\n+     * enum CXTypeKind.CXType_OCLImage3dWO = 144\n@@ -5421,1 +5214,0 @@\n-\n@@ -5424,1 +5216,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dRW = 145;\n+     * enum CXTypeKind.CXType_OCLImage1dRW = 145\n@@ -5431,1 +5223,0 @@\n-\n@@ -5434,1 +5225,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dArrayRW = 146;\n+     * enum CXTypeKind.CXType_OCLImage1dArrayRW = 146\n@@ -5441,1 +5232,0 @@\n-\n@@ -5444,1 +5234,1 @@\n-     * enum CXTypeKind.CXType_OCLImage1dBufferRW = 147;\n+     * enum CXTypeKind.CXType_OCLImage1dBufferRW = 147\n@@ -5451,1 +5241,0 @@\n-\n@@ -5454,1 +5243,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dRW = 148;\n+     * enum CXTypeKind.CXType_OCLImage2dRW = 148\n@@ -5461,1 +5250,0 @@\n-\n@@ -5464,1 +5252,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayRW = 149;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayRW = 149\n@@ -5471,1 +5259,0 @@\n-\n@@ -5474,1 +5261,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dDepthRW = 150;\n+     * enum CXTypeKind.CXType_OCLImage2dDepthRW = 150\n@@ -5481,1 +5268,0 @@\n-\n@@ -5484,1 +5270,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRW = 151;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRW = 151\n@@ -5491,1 +5277,0 @@\n-\n@@ -5494,1 +5279,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAARW = 152;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAARW = 152\n@@ -5501,1 +5286,0 @@\n-\n@@ -5504,1 +5288,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARW = 153;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARW = 153\n@@ -5511,1 +5295,0 @@\n-\n@@ -5514,1 +5297,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRW = 154;\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRW = 154\n@@ -5521,1 +5304,0 @@\n-\n@@ -5524,1 +5306,1 @@\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRW = 155;\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRW = 155\n@@ -5531,1 +5313,0 @@\n-\n@@ -5534,1 +5315,1 @@\n-     * enum CXTypeKind.CXType_OCLImage3dRW = 156;\n+     * enum CXTypeKind.CXType_OCLImage3dRW = 156\n@@ -5541,1 +5322,0 @@\n-\n@@ -5544,1 +5324,1 @@\n-     * enum CXTypeKind.CXType_OCLSampler = 157;\n+     * enum CXTypeKind.CXType_OCLSampler = 157\n@@ -5551,1 +5331,0 @@\n-\n@@ -5554,1 +5333,1 @@\n-     * enum CXTypeKind.CXType_OCLEvent = 158;\n+     * enum CXTypeKind.CXType_OCLEvent = 158\n@@ -5561,1 +5340,0 @@\n-\n@@ -5564,1 +5342,1 @@\n-     * enum CXTypeKind.CXType_OCLQueue = 159;\n+     * enum CXTypeKind.CXType_OCLQueue = 159\n@@ -5571,1 +5349,0 @@\n-\n@@ -5574,1 +5351,1 @@\n-     * enum CXTypeKind.CXType_OCLReserveID = 160;\n+     * enum CXTypeKind.CXType_OCLReserveID = 160\n@@ -5581,1 +5358,0 @@\n-\n@@ -5584,1 +5360,1 @@\n-     * enum CXTypeKind.CXType_ObjCObject = 161;\n+     * enum CXTypeKind.CXType_ObjCObject = 161\n@@ -5591,1 +5367,0 @@\n-\n@@ -5594,1 +5369,1 @@\n-     * enum CXTypeKind.CXType_ObjCTypeParam = 162;\n+     * enum CXTypeKind.CXType_ObjCTypeParam = 162\n@@ -5601,1 +5376,0 @@\n-\n@@ -5604,1 +5378,1 @@\n-     * enum CXTypeKind.CXType_Attributed = 163;\n+     * enum CXTypeKind.CXType_Attributed = 163\n@@ -5611,1 +5385,0 @@\n-\n@@ -5614,1 +5387,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMcePayload = 164;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMcePayload = 164\n@@ -5621,1 +5394,0 @@\n-\n@@ -5624,1 +5396,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImePayload = 165;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImePayload = 165\n@@ -5631,1 +5403,0 @@\n-\n@@ -5634,1 +5405,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefPayload = 166;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefPayload = 166\n@@ -5641,1 +5412,0 @@\n-\n@@ -5644,1 +5414,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicPayload = 167;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicPayload = 167\n@@ -5651,1 +5421,0 @@\n-\n@@ -5654,1 +5423,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMceResult = 168;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMceResult = 168\n@@ -5661,1 +5430,0 @@\n-\n@@ -5664,1 +5432,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResult = 169;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResult = 169\n@@ -5671,1 +5439,0 @@\n-\n@@ -5674,1 +5441,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefResult = 170;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefResult = 170\n@@ -5681,1 +5448,0 @@\n-\n@@ -5684,1 +5450,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicResult = 171;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicResult = 171\n@@ -5691,1 +5457,0 @@\n-\n@@ -5694,1 +5459,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172\n@@ -5701,1 +5466,0 @@\n-\n@@ -5704,1 +5468,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173\n@@ -5711,1 +5475,0 @@\n-\n@@ -5714,1 +5477,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174\n@@ -5721,1 +5484,0 @@\n-\n@@ -5724,1 +5486,1 @@\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175;\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175\n@@ -5731,1 +5493,0 @@\n-\n@@ -5734,1 +5495,1 @@\n-     * enum CXTypeKind.CXType_ExtVector = 176;\n+     * enum CXTypeKind.CXType_ExtVector = 176\n@@ -5741,1 +5502,0 @@\n-\n@@ -5744,1 +5504,1 @@\n-     * enum CXCallingConv.CXCallingConv_Default = 0;\n+     * enum CXCallingConv.CXCallingConv_Default = 0\n@@ -5751,1 +5511,0 @@\n-\n@@ -5754,1 +5513,1 @@\n-     * enum CXCallingConv.CXCallingConv_C = 1;\n+     * enum CXCallingConv.CXCallingConv_C = 1\n@@ -5761,1 +5520,0 @@\n-\n@@ -5764,1 +5522,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86StdCall = 2;\n+     * enum CXCallingConv.CXCallingConv_X86StdCall = 2\n@@ -5771,1 +5529,0 @@\n-\n@@ -5774,1 +5531,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86FastCall = 3;\n+     * enum CXCallingConv.CXCallingConv_X86FastCall = 3\n@@ -5781,1 +5538,0 @@\n-\n@@ -5784,1 +5540,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86ThisCall = 4;\n+     * enum CXCallingConv.CXCallingConv_X86ThisCall = 4\n@@ -5791,1 +5547,0 @@\n-\n@@ -5794,1 +5549,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86Pascal = 5;\n+     * enum CXCallingConv.CXCallingConv_X86Pascal = 5\n@@ -5801,1 +5556,0 @@\n-\n@@ -5804,1 +5558,1 @@\n-     * enum CXCallingConv.CXCallingConv_AAPCS = 6;\n+     * enum CXCallingConv.CXCallingConv_AAPCS = 6\n@@ -5811,1 +5565,0 @@\n-\n@@ -5814,1 +5567,1 @@\n-     * enum CXCallingConv.CXCallingConv_AAPCS_VFP = 7;\n+     * enum CXCallingConv.CXCallingConv_AAPCS_VFP = 7\n@@ -5821,1 +5574,0 @@\n-\n@@ -5824,1 +5576,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86RegCall = 8;\n+     * enum CXCallingConv.CXCallingConv_X86RegCall = 8\n@@ -5831,1 +5583,0 @@\n-\n@@ -5834,1 +5585,1 @@\n-     * enum CXCallingConv.CXCallingConv_IntelOclBicc = 9;\n+     * enum CXCallingConv.CXCallingConv_IntelOclBicc = 9\n@@ -5841,1 +5592,0 @@\n-\n@@ -5844,1 +5594,1 @@\n-     * enum CXCallingConv.CXCallingConv_Win64 = 10;\n+     * enum CXCallingConv.CXCallingConv_Win64 = 10\n@@ -5851,1 +5601,0 @@\n-\n@@ -5854,1 +5603,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86_64Win64 = 10;\n+     * enum CXCallingConv.CXCallingConv_X86_64Win64 = 10\n@@ -5861,1 +5610,0 @@\n-\n@@ -5864,1 +5612,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86_64SysV = 11;\n+     * enum CXCallingConv.CXCallingConv_X86_64SysV = 11\n@@ -5871,1 +5619,0 @@\n-\n@@ -5874,1 +5621,1 @@\n-     * enum CXCallingConv.CXCallingConv_X86VectorCall = 12;\n+     * enum CXCallingConv.CXCallingConv_X86VectorCall = 12\n@@ -5881,1 +5628,0 @@\n-\n@@ -5884,1 +5630,1 @@\n-     * enum CXCallingConv.CXCallingConv_Swift = 13;\n+     * enum CXCallingConv.CXCallingConv_Swift = 13\n@@ -5891,1 +5637,0 @@\n-\n@@ -5894,1 +5639,1 @@\n-     * enum CXCallingConv.CXCallingConv_PreserveMost = 14;\n+     * enum CXCallingConv.CXCallingConv_PreserveMost = 14\n@@ -5901,1 +5646,0 @@\n-\n@@ -5904,1 +5648,1 @@\n-     * enum CXCallingConv.CXCallingConv_PreserveAll = 15;\n+     * enum CXCallingConv.CXCallingConv_PreserveAll = 15\n@@ -5911,1 +5655,0 @@\n-\n@@ -5914,1 +5657,1 @@\n-     * enum CXCallingConv.CXCallingConv_AArch64VectorCall = 16;\n+     * enum CXCallingConv.CXCallingConv_AArch64VectorCall = 16\n@@ -5921,1 +5664,0 @@\n-\n@@ -5924,1 +5666,1 @@\n-     * enum CXCallingConv.CXCallingConv_Invalid = 100;\n+     * enum CXCallingConv.CXCallingConv_Invalid = 100\n@@ -5931,1 +5673,0 @@\n-\n@@ -5934,1 +5675,1 @@\n-     * enum CXCallingConv.CXCallingConv_Unexposed = 200;\n+     * enum CXCallingConv.CXCallingConv_Unexposed = 200\n@@ -5940,6 +5681,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getCursorType(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorType$MH() {\n+\n+    private static MethodHandle clang_getCursorType$MH() {\n@@ -5948,2 +5685,2 @@\n-                CXType.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXType.layout(),\n+                CXCursor.layout()\n@@ -5959,0 +5696,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n@@ -5962,1 +5704,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n@@ -5967,6 +5712,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getTypeSpelling(CXType CT);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTypeSpelling$MH() {\n+\n+    private static MethodHandle clang_getTypeSpelling$MH() {\n@@ -5975,2 +5716,2 @@\n-                CXString.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXString.layout(),\n+                CXType.layout()\n@@ -5986,0 +5727,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n@@ -5989,1 +5735,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, CT);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeSpelling\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -5994,6 +5743,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n+\n+    private static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n@@ -6002,2 +5747,2 @@\n-                CXType.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXType.layout(),\n+                CXCursor.layout()\n@@ -6013,0 +5758,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n@@ -6016,1 +5766,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypedefDeclUnderlyingType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n@@ -6021,6 +5774,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getEnumDeclIntegerType(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getEnumDeclIntegerType$MH() {\n+\n+    private static MethodHandle clang_getEnumDeclIntegerType$MH() {\n@@ -6029,2 +5778,2 @@\n-                CXType.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXType.layout(),\n+                CXCursor.layout()\n@@ -6040,0 +5789,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n@@ -6043,1 +5797,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumDeclIntegerType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n@@ -6048,6 +5805,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_getEnumConstantDeclValue(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getEnumConstantDeclValue$MH() {\n+\n+    private static MethodHandle clang_getEnumConstantDeclValue$MH() {\n@@ -6057,1 +5810,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6067,0 +5820,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n@@ -6070,1 +5828,4 @@\n-            return (long) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumConstantDeclValue\", C);\n+            }\n+            return (long)mh$.invokeExact(C);\n@@ -6075,6 +5836,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n+\n+    private static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n@@ -6084,1 +5841,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6094,0 +5851,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n@@ -6097,1 +5859,4 @@\n-            return (long) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumConstantDeclUnsignedValue\", C);\n+            }\n+            return (long)mh$.invokeExact(C);\n@@ -6102,6 +5867,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_getFieldDeclBitWidth(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getFieldDeclBitWidth$MH() {\n+\n+    private static MethodHandle clang_getFieldDeclBitWidth$MH() {\n@@ -6111,1 +5872,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6121,0 +5882,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n@@ -6124,1 +5890,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFieldDeclBitWidth\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6129,6 +5898,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_Cursor_getNumArguments(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_getNumArguments$MH() {\n+\n+    private static MethodHandle clang_Cursor_getNumArguments$MH() {\n@@ -6138,1 +5903,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6148,0 +5913,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n@@ -6151,1 +5921,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getNumArguments\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6156,6 +5929,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_getArgument$MH() {\n+\n+    private static MethodHandle clang_Cursor_getArgument$MH() {\n@@ -6164,2 +5933,2 @@\n-                CXCursor.$LAYOUT(),\n-                CXCursor.$LAYOUT(),\n+                CXCursor.layout(),\n+                CXCursor.layout(),\n@@ -6176,0 +5945,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n@@ -6179,1 +5953,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, C, i);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getArgument\", allocator, C, i);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C, i);\n@@ -6184,6 +5961,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_equalTypes(CXType A, CXType B);\n-     * }\n-     *\/\n-    public static MethodHandle clang_equalTypes$MH() {\n+\n+    private static MethodHandle clang_equalTypes$MH() {\n@@ -6193,2 +5966,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6204,0 +5977,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n@@ -6207,1 +5985,4 @@\n-            return (int) mh$.invokeExact(A, B);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalTypes\", A, B);\n+            }\n+            return (int)mh$.invokeExact(A, B);\n@@ -6212,6 +5993,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getCanonicalType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCanonicalType$MH() {\n+\n+    private static MethodHandle clang_getCanonicalType$MH() {\n@@ -6220,2 +5997,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6231,0 +6008,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n@@ -6234,1 +6016,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCanonicalType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6239,6 +6024,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isConstQualifiedType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isConstQualifiedType$MH() {\n+\n+    private static MethodHandle clang_isConstQualifiedType$MH() {\n@@ -6248,1 +6029,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6258,0 +6039,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n@@ -6261,1 +6047,4 @@\n-            return (int) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isConstQualifiedType\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n@@ -6266,6 +6055,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n+\n+    private static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n@@ -6275,1 +6060,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6285,0 +6070,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n@@ -6288,1 +6078,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isMacroFunctionLike\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6293,6 +6086,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n+\n+    private static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n@@ -6302,1 +6091,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6312,0 +6101,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n@@ -6315,1 +6109,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isFunctionInlined\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6320,6 +6117,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isVolatileQualifiedType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isVolatileQualifiedType$MH() {\n+\n+    private static MethodHandle clang_isVolatileQualifiedType$MH() {\n@@ -6329,1 +6122,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6339,0 +6132,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n@@ -6342,1 +6140,4 @@\n-            return (int) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isVolatileQualifiedType\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n@@ -6347,6 +6148,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getTypedefName(CXType CT);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTypedefName$MH() {\n+\n+    private static MethodHandle clang_getTypedefName$MH() {\n@@ -6355,2 +6152,2 @@\n-                CXString.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXString.layout(),\n+                CXType.layout()\n@@ -6366,8 +6163,0 @@\n-    public static MemorySegment clang_getTypedefName(SegmentAllocator allocator, MemorySegment CT) {\n-        var mh$ = clang_getTypedefName$MH();\n-        try {\n-            return (MemorySegment) mh$.invokeExact(allocator, CT);\n-        } catch (Throwable ex$) {\n-           throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -6376,1 +6165,1 @@\n-     * CXType clang_getPointeeType(CXType T);\n+     * CXString clang_getTypedefName(CXType CT)\n@@ -6379,1 +6168,13 @@\n-    public static MethodHandle clang_getPointeeType$MH() {\n+    public static MemorySegment clang_getTypedefName(SegmentAllocator allocator, MemorySegment CT) {\n+        var mh$ = clang_getTypedefName$MH();\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypedefName\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static MethodHandle clang_getPointeeType$MH() {\n@@ -6382,2 +6183,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6393,0 +6194,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n@@ -6396,1 +6202,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getPointeeType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6401,6 +6210,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_getTypeDeclaration(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTypeDeclaration$MH() {\n+\n+    private static MethodHandle clang_getTypeDeclaration$MH() {\n@@ -6409,2 +6214,2 @@\n-                CXCursor.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXCursor.layout(),\n+                CXType.layout()\n@@ -6420,0 +6225,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n@@ -6423,1 +6233,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeDeclaration\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6428,6 +6241,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getTypeKindSpelling(enum CXTypeKind K);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTypeKindSpelling$MH() {\n+\n+    private static MethodHandle clang_getTypeKindSpelling$MH() {\n@@ -6436,1 +6245,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -6447,0 +6256,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n@@ -6450,1 +6264,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, K);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeKindSpelling\", allocator, K);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, K);\n@@ -6455,6 +6272,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getFunctionTypeCallingConv$MH() {\n+\n+    private static MethodHandle clang_getFunctionTypeCallingConv$MH() {\n@@ -6464,1 +6277,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6474,0 +6287,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n@@ -6477,1 +6295,4 @@\n-            return (int) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFunctionTypeCallingConv\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n@@ -6482,6 +6303,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getResultType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getResultType$MH() {\n+\n+    private static MethodHandle clang_getResultType$MH() {\n@@ -6490,2 +6307,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6501,0 +6318,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n@@ -6504,1 +6326,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getResultType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6509,6 +6334,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_getNumArgTypes(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getNumArgTypes$MH() {\n+\n+    private static MethodHandle clang_getNumArgTypes$MH() {\n@@ -6518,1 +6339,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6528,0 +6349,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n@@ -6531,1 +6357,4 @@\n-            return (int) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumArgTypes\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n@@ -6536,6 +6365,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getArgType(CXType T, unsigned int i);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getArgType$MH() {\n+\n+    private static MethodHandle clang_getArgType$MH() {\n@@ -6544,2 +6369,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT(),\n+                CXType.layout(),\n+                CXType.layout(),\n@@ -6556,0 +6381,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n@@ -6559,1 +6389,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T, i);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArgType\", allocator, T, i);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -6564,6 +6397,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isFunctionTypeVariadic(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isFunctionTypeVariadic$MH() {\n+\n+    private static MethodHandle clang_isFunctionTypeVariadic$MH() {\n@@ -6573,1 +6402,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6583,0 +6412,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n@@ -6586,1 +6420,4 @@\n-            return (int) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isFunctionTypeVariadic\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n@@ -6591,6 +6428,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getCursorResultType(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorResultType$MH() {\n+\n+    private static MethodHandle clang_getCursorResultType$MH() {\n@@ -6599,2 +6432,2 @@\n-                CXType.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXType.layout(),\n+                CXCursor.layout()\n@@ -6610,0 +6443,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n@@ -6613,1 +6451,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorResultType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n@@ -6618,6 +6459,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getElementType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getElementType$MH() {\n+\n+    private static MethodHandle clang_getElementType$MH() {\n@@ -6626,2 +6463,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6637,0 +6474,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n@@ -6640,1 +6482,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getElementType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6645,6 +6490,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_getNumElements(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getNumElements$MH() {\n+\n+    private static MethodHandle clang_getNumElements$MH() {\n@@ -6654,1 +6495,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6664,0 +6505,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n@@ -6667,1 +6513,4 @@\n-            return (long) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumElements\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n@@ -6672,6 +6521,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_getArrayElementType(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getArrayElementType$MH() {\n+\n+    private static MethodHandle clang_getArrayElementType$MH() {\n@@ -6680,2 +6525,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6691,0 +6536,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n@@ -6694,1 +6544,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArrayElementType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6699,6 +6552,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_getArraySize(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getArraySize$MH() {\n+\n+    private static MethodHandle clang_getArraySize$MH() {\n@@ -6708,1 +6557,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6718,0 +6567,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n@@ -6721,1 +6575,4 @@\n-            return (long) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArraySize\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n@@ -6727,1 +6584,0 @@\n-\n@@ -6730,1 +6586,1 @@\n-     * enum CXTypeNullabilityKind.CXTypeNullability_NonNull = 0;\n+     * enum CXTypeNullabilityKind.CXTypeNullability_NonNull = 0\n@@ -6737,1 +6593,0 @@\n-\n@@ -6740,1 +6595,1 @@\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Nullable = 1;\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Nullable = 1\n@@ -6747,1 +6602,0 @@\n-\n@@ -6750,1 +6604,1 @@\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Unspecified = 2;\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Unspecified = 2\n@@ -6757,1 +6611,0 @@\n-\n@@ -6760,1 +6613,1 @@\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Invalid = 3;\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Invalid = 3\n@@ -6767,1 +6620,0 @@\n-\n@@ -6770,1 +6622,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Invalid = -1;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Invalid = -1\n@@ -6777,1 +6629,0 @@\n-\n@@ -6780,1 +6631,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Incomplete = -2;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Incomplete = -2\n@@ -6787,1 +6638,0 @@\n-\n@@ -6790,1 +6640,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Dependent = -3;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Dependent = -3\n@@ -6797,1 +6647,0 @@\n-\n@@ -6800,1 +6649,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_NotConstantSize = -4;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_NotConstantSize = -4\n@@ -6807,1 +6656,0 @@\n-\n@@ -6810,1 +6658,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_InvalidFieldName = -5;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_InvalidFieldName = -5\n@@ -6817,1 +6665,0 @@\n-\n@@ -6820,1 +6667,1 @@\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Undeduced = -6;\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Undeduced = -6\n@@ -6826,6 +6673,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_Type_getAlignOf(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Type_getAlignOf$MH() {\n+\n+    private static MethodHandle clang_Type_getAlignOf$MH() {\n@@ -6835,1 +6678,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6845,0 +6688,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n@@ -6848,1 +6696,4 @@\n-            return (long) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getAlignOf\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n@@ -6853,6 +6704,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_Type_getSizeOf(CXType T);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Type_getSizeOf$MH() {\n+\n+    private static MethodHandle clang_Type_getSizeOf$MH() {\n@@ -6862,1 +6709,1 @@\n-                CXType.$LAYOUT()\n+                CXType.layout()\n@@ -6872,0 +6719,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n@@ -6875,1 +6727,4 @@\n-            return (long) mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getSizeOf\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n@@ -6880,6 +6735,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_Type_getOffsetOf(CXType T, char* S);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Type_getOffsetOf$MH() {\n+\n+    private static MethodHandle clang_Type_getOffsetOf$MH() {\n@@ -6889,1 +6740,1 @@\n-                CXType.$LAYOUT(),\n+                CXType.layout(),\n@@ -6900,0 +6751,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n@@ -6903,1 +6759,4 @@\n-            return (long) mh$.invokeExact(T, S);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getOffsetOf\", T, S);\n+            }\n+            return (long)mh$.invokeExact(T, S);\n@@ -6908,6 +6767,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXType clang_Type_getValueType(CXType CT);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Type_getValueType$MH() {\n+\n+    private static MethodHandle clang_Type_getValueType$MH() {\n@@ -6916,2 +6771,2 @@\n-                CXType.$LAYOUT(),\n-                CXType.$LAYOUT()\n+                CXType.layout(),\n+                CXType.layout()\n@@ -6927,0 +6782,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n@@ -6930,1 +6790,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, CT);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getValueType\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -6935,6 +6798,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isAnonymous(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isAnonymous$MH() {\n+\n+    private static MethodHandle clang_Cursor_isAnonymous$MH() {\n@@ -6944,1 +6803,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6954,0 +6813,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n@@ -6957,1 +6821,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isAnonymous\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6962,6 +6829,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n+\n+    private static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n@@ -6971,1 +6834,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -6981,0 +6844,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n@@ -6984,1 +6852,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isAnonymousRecordDecl\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -6989,6 +6860,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isBitField(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isBitField$MH() {\n+\n+    private static MethodHandle clang_Cursor_isBitField$MH() {\n@@ -6998,1 +6865,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -7008,0 +6875,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n@@ -7011,1 +6883,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isBitField\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -7017,1 +6892,0 @@\n-\n@@ -7020,1 +6894,1 @@\n-     * enum CXChildVisitResult.CXChildVisit_Break = 0;\n+     * enum CXChildVisitResult.CXChildVisit_Break = 0\n@@ -7027,1 +6901,0 @@\n-\n@@ -7030,1 +6903,1 @@\n-     * enum CXChildVisitResult.CXChildVisit_Continue = 1;\n+     * enum CXChildVisitResult.CXChildVisit_Continue = 1\n@@ -7037,1 +6910,0 @@\n-\n@@ -7040,1 +6912,1 @@\n-     * enum CXChildVisitResult.CXChildVisit_Recurse = 2;\n+     * enum CXChildVisitResult.CXChildVisit_Recurse = 2\n@@ -7046,6 +6918,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data);\n-     * }\n-     *\/\n-    public static MethodHandle clang_visitChildren$MH() {\n+\n+    private static MethodHandle clang_visitChildren$MH() {\n@@ -7055,1 +6923,1 @@\n-                CXCursor.$LAYOUT(),\n+                CXCursor.layout(),\n@@ -7067,0 +6935,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n@@ -7070,1 +6943,4 @@\n-            return (int) mh$.invokeExact(parent, visitor, client_data);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_visitChildren\", parent, visitor, client_data);\n+            }\n+            return (int)mh$.invokeExact(parent, visitor, client_data);\n@@ -7075,6 +6951,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getCursorUSR(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorUSR$MH() {\n+\n+    private static MethodHandle clang_getCursorUSR$MH() {\n@@ -7083,2 +6955,2 @@\n-                CXString.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXString.layout(),\n+                CXCursor.layout()\n@@ -7094,0 +6966,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n@@ -7097,1 +6974,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorUSR\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7102,6 +6982,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getCursorSpelling(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorSpelling$MH() {\n+\n+    private static MethodHandle clang_getCursorSpelling$MH() {\n@@ -7110,2 +6986,2 @@\n-                CXString.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXString.layout(),\n+                CXCursor.layout()\n@@ -7121,0 +6997,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n@@ -7124,1 +7005,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorSpelling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7130,1 +7014,0 @@\n-\n@@ -7133,1 +7016,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Indentation = 0;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Indentation = 0\n@@ -7140,1 +7023,0 @@\n-\n@@ -7143,1 +7025,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressSpecifiers = 1;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressSpecifiers = 1\n@@ -7150,1 +7032,0 @@\n-\n@@ -7153,1 +7034,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTagKeyword = 2;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTagKeyword = 2\n@@ -7160,1 +7041,0 @@\n-\n@@ -7163,1 +7043,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeTagDefinition = 3;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeTagDefinition = 3\n@@ -7170,1 +7050,0 @@\n-\n@@ -7173,1 +7052,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressScope = 4;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressScope = 4\n@@ -7180,1 +7059,0 @@\n-\n@@ -7183,1 +7061,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressUnwrittenScope = 5;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressUnwrittenScope = 5\n@@ -7190,1 +7068,0 @@\n-\n@@ -7193,1 +7070,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressInitializers = 6;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressInitializers = 6\n@@ -7200,1 +7077,0 @@\n-\n@@ -7203,1 +7079,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantArraySizeAsWritten = 7;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantArraySizeAsWritten = 7\n@@ -7210,1 +7086,0 @@\n-\n@@ -7213,1 +7088,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_AnonymousTagLocations = 8;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_AnonymousTagLocations = 8\n@@ -7220,1 +7095,0 @@\n-\n@@ -7223,1 +7097,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressStrongLifetime = 9;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressStrongLifetime = 9\n@@ -7230,1 +7104,0 @@\n-\n@@ -7233,1 +7106,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressLifetimeQualifiers = 10;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressLifetimeQualifiers = 10\n@@ -7240,1 +7113,0 @@\n-\n@@ -7243,1 +7115,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11\n@@ -7250,1 +7122,0 @@\n-\n@@ -7253,1 +7124,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Bool = 12;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Bool = 12\n@@ -7260,1 +7131,0 @@\n-\n@@ -7263,1 +7133,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Restrict = 13;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Restrict = 13\n@@ -7270,1 +7140,0 @@\n-\n@@ -7273,1 +7142,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Alignof = 14;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Alignof = 14\n@@ -7280,1 +7149,0 @@\n-\n@@ -7283,1 +7151,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UnderscoreAlignof = 15;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UnderscoreAlignof = 15\n@@ -7290,1 +7158,0 @@\n-\n@@ -7293,1 +7160,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UseVoidForZeroParams = 16;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UseVoidForZeroParams = 16\n@@ -7300,1 +7167,0 @@\n-\n@@ -7303,1 +7169,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_TerseOutput = 17;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_TerseOutput = 17\n@@ -7310,1 +7176,0 @@\n-\n@@ -7313,1 +7178,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_PolishForDeclaration = 18;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_PolishForDeclaration = 18\n@@ -7320,1 +7185,0 @@\n-\n@@ -7323,1 +7187,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Half = 19;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Half = 19\n@@ -7330,1 +7194,0 @@\n-\n@@ -7333,1 +7196,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSWChar = 20;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSWChar = 20\n@@ -7340,1 +7203,0 @@\n-\n@@ -7343,1 +7205,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeNewlines = 21;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeNewlines = 21\n@@ -7350,1 +7212,0 @@\n-\n@@ -7353,1 +7214,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSVCFormatting = 22;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSVCFormatting = 22\n@@ -7360,1 +7221,0 @@\n-\n@@ -7363,1 +7223,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantsAsWritten = 23;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantsAsWritten = 23\n@@ -7370,1 +7230,0 @@\n-\n@@ -7373,1 +7232,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressImplicitBase = 24;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressImplicitBase = 24\n@@ -7380,1 +7239,0 @@\n-\n@@ -7383,1 +7241,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_FullyQualifiedName = 25;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_FullyQualifiedName = 25\n@@ -7390,1 +7248,0 @@\n-\n@@ -7393,1 +7250,1 @@\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_LastProperty = 25;\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_LastProperty = 25\n@@ -7399,6 +7256,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property);\n-     * }\n-     *\/\n-    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n+\n+    private static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n@@ -7419,0 +7272,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n@@ -7422,1 +7280,4 @@\n-            return (int) mh$.invokeExact(Policy, Property);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_getProperty\", Policy, Property);\n+            }\n+            return (int)mh$.invokeExact(Policy, Property);\n@@ -7427,6 +7288,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value);\n-     * }\n-     *\/\n-    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n+\n+    private static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n@@ -7447,0 +7304,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n@@ -7450,0 +7312,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_setProperty\", Policy, Property, Value);\n+            }\n@@ -7455,6 +7320,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n+\n+    private static MethodHandle clang_getCursorPrintingPolicy$MH() {\n@@ -7464,1 +7325,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -7474,0 +7335,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n@@ -7477,1 +7343,4 @@\n-            return (MemorySegment) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorPrintingPolicy\", x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(x0);\n@@ -7482,6 +7351,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy);\n-     * }\n-     *\/\n-    public static MethodHandle clang_PrintingPolicy_dispose$MH() {\n+\n+    private static MethodHandle clang_PrintingPolicy_dispose$MH() {\n@@ -7500,0 +7365,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n+     * }\n+     *\/\n@@ -7503,0 +7373,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_dispose\", Policy);\n+            }\n@@ -7508,6 +7381,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorPrettyPrinted$MH() {\n+\n+    private static MethodHandle clang_getCursorPrettyPrinted$MH() {\n@@ -7516,2 +7385,2 @@\n-                CXString.$LAYOUT(),\n-                CXCursor.$LAYOUT(),\n+                CXString.layout(),\n+                CXCursor.layout(),\n@@ -7528,0 +7397,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n@@ -7531,1 +7405,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, Cursor, Policy);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorPrettyPrinted\", allocator, Cursor, Policy);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Cursor, Policy);\n@@ -7536,6 +7413,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getCursorDisplayName(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorDisplayName$MH() {\n+\n+    private static MethodHandle clang_getCursorDisplayName$MH() {\n@@ -7544,2 +7417,2 @@\n-                CXString.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXString.layout(),\n+                CXCursor.layout()\n@@ -7555,0 +7428,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n@@ -7558,1 +7436,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorDisplayName\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7563,6 +7444,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_getCursorReferenced(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorReferenced$MH() {\n+\n+    private static MethodHandle clang_getCursorReferenced$MH() {\n@@ -7571,2 +7448,2 @@\n-                CXCursor.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout(),\n+                CXCursor.layout()\n@@ -7582,0 +7459,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n+     * }\n+     *\/\n@@ -7585,1 +7467,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorReferenced\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7590,6 +7475,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXCursor clang_getCursorDefinition(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorDefinition$MH() {\n+\n+    private static MethodHandle clang_getCursorDefinition$MH() {\n@@ -7598,2 +7479,2 @@\n-                CXCursor.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout(),\n+                CXCursor.layout()\n@@ -7609,0 +7490,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n+     * }\n+     *\/\n@@ -7612,1 +7498,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorDefinition\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7617,6 +7506,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_isCursorDefinition(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_isCursorDefinition$MH() {\n+\n+    private static MethodHandle clang_isCursorDefinition$MH() {\n@@ -7626,1 +7511,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -7636,0 +7521,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n+     * }\n+     *\/\n@@ -7639,1 +7529,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isCursorDefinition\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -7644,6 +7537,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_Cursor_isVariadic(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_isVariadic$MH() {\n+\n+    private static MethodHandle clang_Cursor_isVariadic$MH() {\n@@ -7653,1 +7542,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -7663,0 +7552,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n+     * }\n+     *\/\n@@ -7666,1 +7560,4 @@\n-            return (int) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isVariadic\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n@@ -7671,6 +7568,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_Cursor_getMangling(CXCursor);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_getMangling$MH() {\n+\n+    private static MethodHandle clang_Cursor_getMangling$MH() {\n@@ -7679,2 +7572,2 @@\n-                CXString.$LAYOUT(),\n-                CXCursor.$LAYOUT()\n+                CXString.layout(),\n+                CXCursor.layout()\n@@ -7690,0 +7583,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n+     * }\n+     *\/\n@@ -7693,1 +7591,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getMangling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -7699,1 +7600,0 @@\n-\n@@ -7702,1 +7602,1 @@\n-     * enum CXTokenKind.CXToken_Punctuation = 0;\n+     * enum CXTokenKind.CXToken_Punctuation = 0\n@@ -7709,1 +7609,0 @@\n-\n@@ -7712,1 +7611,1 @@\n-     * enum CXTokenKind.CXToken_Keyword = 1;\n+     * enum CXTokenKind.CXToken_Keyword = 1\n@@ -7719,1 +7618,0 @@\n-\n@@ -7722,1 +7620,1 @@\n-     * enum CXTokenKind.CXToken_Identifier = 2;\n+     * enum CXTokenKind.CXToken_Identifier = 2\n@@ -7729,1 +7627,0 @@\n-\n@@ -7732,1 +7629,1 @@\n-     * enum CXTokenKind.CXToken_Literal = 3;\n+     * enum CXTokenKind.CXToken_Literal = 3\n@@ -7739,1 +7636,0 @@\n-\n@@ -7742,1 +7638,1 @@\n-     * enum CXTokenKind.CXToken_Comment = 4;\n+     * enum CXTokenKind.CXToken_Comment = 4\n@@ -7748,6 +7644,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXTokenKind clang_getTokenKind(CXToken);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTokenKind$MH() {\n+\n+    private static MethodHandle clang_getTokenKind$MH() {\n@@ -7757,1 +7649,1 @@\n-                CXToken.$LAYOUT()\n+                CXToken.layout()\n@@ -7767,0 +7659,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n+     * }\n+     *\/\n@@ -7770,1 +7667,4 @@\n-            return (int) mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenKind\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n@@ -7775,6 +7675,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTokenSpelling$MH() {\n+\n+    private static MethodHandle clang_getTokenSpelling$MH() {\n@@ -7783,1 +7679,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -7785,1 +7681,1 @@\n-                CXToken.$LAYOUT()\n+                CXToken.layout()\n@@ -7795,0 +7691,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n@@ -7798,1 +7699,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenSpelling\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -7803,6 +7707,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTokenLocation$MH() {\n+\n+    private static MethodHandle clang_getTokenLocation$MH() {\n@@ -7811,1 +7711,1 @@\n-                CXSourceLocation.$LAYOUT(),\n+                CXSourceLocation.layout(),\n@@ -7813,1 +7713,1 @@\n-                CXToken.$LAYOUT()\n+                CXToken.layout()\n@@ -7823,0 +7723,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n@@ -7826,1 +7731,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenLocation\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -7831,6 +7739,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getTokenExtent$MH() {\n+\n+    private static MethodHandle clang_getTokenExtent$MH() {\n@@ -7839,1 +7743,1 @@\n-                CXSourceRange.$LAYOUT(),\n+                CXSourceRange.layout(),\n@@ -7841,1 +7745,1 @@\n-                CXToken.$LAYOUT()\n+                CXToken.layout()\n@@ -7851,0 +7755,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n@@ -7854,1 +7763,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, x0, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenExtent\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -7859,6 +7771,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken** Tokens, unsigned int* NumTokens);\n-     * }\n-     *\/\n-    public static MethodHandle clang_tokenize$MH() {\n+\n+    private static MethodHandle clang_tokenize$MH() {\n@@ -7868,1 +7776,1 @@\n-                CXSourceRange.$LAYOUT(),\n+                CXSourceRange.layout(),\n@@ -7880,0 +7788,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n@@ -7883,0 +7796,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_tokenize\", TU, Range, Tokens, NumTokens);\n+            }\n@@ -7888,6 +7804,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_disposeTokens(CXTranslationUnit TU, CXToken* Tokens, unsigned int NumTokens);\n-     * }\n-     *\/\n-    public static MethodHandle clang_disposeTokens$MH() {\n+\n+    private static MethodHandle clang_disposeTokens$MH() {\n@@ -7908,0 +7820,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n@@ -7911,0 +7828,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeTokens\", TU, Tokens, NumTokens);\n+            }\n@@ -7916,6 +7836,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind);\n-     * }\n-     *\/\n-    public static MethodHandle clang_getCursorKindSpelling$MH() {\n+\n+    private static MethodHandle clang_getCursorKindSpelling$MH() {\n@@ -7924,1 +7840,1 @@\n-                CXString.$LAYOUT(),\n+                CXString.layout(),\n@@ -7935,0 +7851,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n@@ -7938,1 +7859,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator, Kind);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorKindSpelling\", allocator, Kind);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Kind);\n@@ -7943,6 +7867,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXString clang_getClangVersion();\n-     * }\n-     *\/\n-    public static MethodHandle clang_getClangVersion$MH() {\n+\n+    private static MethodHandle clang_getClangVersion$MH() {\n@@ -7951,1 +7871,1 @@\n-                CXString.$LAYOUT()        );\n+                CXString.layout()        );\n@@ -7960,0 +7880,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n+     * }\n+     *\/\n@@ -7963,1 +7888,4 @@\n-            return (MemorySegment) mh$.invokeExact(allocator);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getClangVersion\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n@@ -7968,6 +7896,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_toggleCrashRecovery(unsigned int isEnabled);\n-     * }\n-     *\/\n-    public static MethodHandle clang_toggleCrashRecovery$MH() {\n+\n+    private static MethodHandle clang_toggleCrashRecovery$MH() {\n@@ -7986,0 +7910,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n+     * }\n+     *\/\n@@ -7989,0 +7918,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_toggleCrashRecovery\", isEnabled);\n+            }\n@@ -7994,6 +7926,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXEvalResult clang_Cursor_Evaluate(CXCursor C);\n-     * }\n-     *\/\n-    public static MethodHandle clang_Cursor_Evaluate$MH() {\n+\n+    private static MethodHandle clang_Cursor_Evaluate$MH() {\n@@ -8003,1 +7931,1 @@\n-                CXCursor.$LAYOUT()\n+                CXCursor.layout()\n@@ -8013,0 +7941,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n@@ -8016,1 +7949,4 @@\n-            return (MemorySegment) mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_Evaluate\", C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(C);\n@@ -8021,6 +7957,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getKind$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getKind$MH() {\n@@ -8040,0 +7972,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8043,1 +7980,4 @@\n-            return (int) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getKind\", E);\n+            }\n+            return (int)mh$.invokeExact(E);\n@@ -8048,6 +7988,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * int clang_EvalResult_getAsInt(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getAsInt$MH() {\n@@ -8067,0 +8003,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8070,1 +8011,4 @@\n-            return (int) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsInt\", E);\n+            }\n+            return (int)mh$.invokeExact(E);\n@@ -8075,6 +8019,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * long long clang_EvalResult_getAsLongLong(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n@@ -8094,0 +8034,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8097,1 +8042,4 @@\n-            return (long) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsLongLong\", E);\n+            }\n+            return (long)mh$.invokeExact(E);\n@@ -8102,6 +8050,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n+\n+    private static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n@@ -8121,0 +8065,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8124,1 +8073,4 @@\n-            return (int) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_isUnsignedInt\", E);\n+            }\n+            return (int)mh$.invokeExact(E);\n@@ -8129,6 +8081,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n@@ -8148,0 +8096,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8151,1 +8104,4 @@\n-            return (long) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsUnsigned\", E);\n+            }\n+            return (long)mh$.invokeExact(E);\n@@ -8156,6 +8112,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * double clang_EvalResult_getAsDouble(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getAsDouble$MH() {\n@@ -8175,0 +8127,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8178,1 +8135,4 @@\n-            return (double) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsDouble\", E);\n+            }\n+            return (double)mh$.invokeExact(E);\n@@ -8183,6 +8143,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * char* clang_EvalResult_getAsStr(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n+\n+    private static MethodHandle clang_EvalResult_getAsStr$MH() {\n@@ -8202,0 +8158,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8205,1 +8166,4 @@\n-            return (MemorySegment) mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsStr\", E);\n+            }\n+            return (MemorySegment)mh$.invokeExact(E);\n@@ -8210,6 +8174,2 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void clang_EvalResult_dispose(CXEvalResult E);\n-     * }\n-     *\/\n-    public static MethodHandle clang_EvalResult_dispose$MH() {\n+\n+    private static MethodHandle clang_EvalResult_dispose$MH() {\n@@ -8228,0 +8188,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n@@ -8231,0 +8196,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_dispose\", E);\n+            }\n@@ -8237,1 +8205,0 @@\n-\n@@ -8240,1 +8207,1 @@\n-     * enum .CXResult_Success = 0;\n+     * enum <anonymous>.CXResult_Success = 0\n@@ -8247,1 +8214,0 @@\n-\n@@ -8250,1 +8216,1 @@\n-     * enum .CXResult_Invalid = 1;\n+     * enum <anonymous>.CXResult_Invalid = 1\n@@ -8257,1 +8223,0 @@\n-\n@@ -8260,1 +8225,1 @@\n-     * enum .CXResult_VisitBreak = 2;\n+     * enum <anonymous>.CXResult_VisitBreak = 2\n@@ -8267,0 +8232,1 @@\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":1886,"deletions":1920,"binary":false,"changes":3806,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\/\n-\n-\/\/ Generated by jextract\n-\n-package org.openjdk.jextract.clang.libclang;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import java.lang.foreign.*;\n-import static java.lang.foreign.ValueLayout.*;\n-\n-\/**\n- * {@snippet lang=c :\n- * enum CXChildVisitResult (*clang_visitChildren$visitor)(struct ,struct ,void*);\n- * }\n- *\/\n-public interface clang_visitChildren$visitor {\n-\n-    int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);\n-\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n-        Index_h.C_INT,\n-        CXCursor.$LAYOUT(),\n-        CXCursor.$LAYOUT(),\n-        Index_h.C_POINTER\n-    );\n-\n-    MethodHandle UP$MH = Index_h.upcallHandle(clang_visitChildren$visitor.class, \"apply\", $DESC);\n-\n-    static MemorySegment allocate(clang_visitChildren$visitor fi, Arena scope) {\n-        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, scope);\n-    }\n-\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static clang_visitChildren$visitor ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment __x0, MemorySegment __x1, MemorySegment __x2) -> {\n-            try {\n-                return (int) DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n-    }\n-}\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/clang_visitChildren$visitor.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -6,1 +6,1 @@\n-  --source -t org.openjdk.jextract.clang.libclang -lclang \\\n+  -t org.openjdk.jextract.clang.libclang -lclang \\\n","filename":"updateclang\/extract.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}