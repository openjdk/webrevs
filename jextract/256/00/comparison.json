{"files":[{"patch":"@@ -0,0 +1,1 @@\n+-xc++\n\\ No newline at end of file\n","filename":"compile_flags.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -103,2 +103,2 @@\n-    StaticAssert(CXCursor_StaticAssert());\n-\n+    StaticAssert(CXCursor_StaticAssert()),\n+    Unsupported(-1);\n@@ -128,1 +128,1 @@\n-            throw new NoSuchElementException(\"Invalid Cursor kind value: \" + value);\n+            return Unsupported;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/CursorKind.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-            TreeMaker treeMaker = new TreeMaker();\n+            TreeMaker treeMaker = new TreeMaker(logger);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MacroParserImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.NoSuchElementException;\n@@ -50,1 +51,1 @@\n-        this.treeMaker = new TreeMaker();\n+        this.treeMaker = new TreeMaker(logger);\n@@ -69,14 +70,1 @@\n-                if (c.kind() == CursorKind.UnexposedDecl ||\n-                        c.kind() == CursorKind.Namespace) {\n-                    c.forEach(t -> {\n-                        Declaration declaration = treeMaker.createTree(t);\n-                        if (declaration != null) {\n-                            decls.add(declaration);\n-                        }\n-                    });\n-                } else {\n-                    Declaration decl = treeMaker.createTree(c);\n-                    if (decl != null) {\n-                        decls.add(decl);\n-                    }\n-                }\n+                parseDeclaration(c, decls);\n@@ -98,0 +86,11 @@\n+    private void parseDeclaration(Cursor c, List<Declaration> decls) {\n+        if (c.kind() == CursorKind.UnexposedDecl || c.kind() == CursorKind.Namespace) {\n+            c.forEach(t -> parseDeclaration(t, decls));\n+        } else {\n+            Declaration decl = treeMaker.createTree(c);\n+            if (decl != null) {\n+                decls.add(decl);\n+            }\n+        }\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Parser.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.NoSuchElementException;\n@@ -71,0 +72,1 @@\n+    private final Logger logger;\n@@ -72,1 +74,3 @@\n-    public TreeMaker() { }\n+    public TreeMaker(Logger logger) {\n+        this.logger = logger;\n+    }\n@@ -106,2 +110,4 @@\n-                c.kind() != CursorKind.StaticAssert) {\n-            throw new RuntimeException(\"Unsupported language: \" + c.language());\n+                !isAllowedCXXDecl(c)) {\n+            logger.warn(CursorPosition.of(c), \"jextract.skip.unsupported\", c.spelling(),\n+                    logger.format(\"unsupported.lang\", c.language()));\n+            return null;\n@@ -123,0 +129,7 @@\n+    private boolean isAllowedCXXDecl(Cursor cursor) {\n+        return switch (cursor.kind()) {\n+            case StaticAssert, StructDecl, UnionDecl -> true;\n+            default -> false;\n+        };\n+    }\n+\n@@ -246,1 +259,5 @@\n-                toType(c));\n+                \/\/ in C++ the type of an enum constant is the enum type itself.\n+                \/\/ We need to avoid infinite recursion, by using the enum integral type instead.\n+                c.type().kind() == TypeKind.Enum ?\n+                        toType(c.type().getDeclarationCursor().getEnumDeclIntegerType()) :\n+                        toType(c));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -108,0 +108,3 @@\n+unsupported.lang=\\\n+language {0} is not supported\n+\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.toolprovider.cpp;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+\n+public class TestCXXParsing extends JextractToolRunner {\n+\n+    JextractResult result;\n+\n+    @BeforeClass\n+    public void before() throws IOException {\n+        Path output = getOutputFilePath(\"TestCXXParsing-cxx.h\");\n+        Path outputH = getInputFilePath(\"cxx.h\");\n+        \/\/ put a \"compile_flags.txt\" file in current dir, to force C++ parsing\n+        Files.writeString(Path.of(\"compile_flags.txt\"), \"-xc++\");\n+        result = run(output, outputH.toString());\n+    }\n+\n+    @Test(dataProvider = \"skippedCases\")\n+    public void testSkipped(String skippedName, String reason) {\n+        result.checkContainsOutput(\"warning: Skipping \" + skippedName + \" (\" + reason);\n+    }\n+\n+    @Test(dataProvider = \"nonSkippedCases\")\n+    public void testNonSkipped(String nonSkippedName) {\n+        result.checkDoesNotContainOutput(\"warning: Skipping \" + nonSkippedName);\n+    }\n+\n+    private static final String REASON_UNSUPPORTED_LANG = \"language\";\n+\n+    @DataProvider\n+    public static Object[][] skippedCases() {\n+        return new Object[][]{\n+            {\"m_point\",              REASON_UNSUPPORTED_LANG},\n+            {\"m_choice\",             REASON_UNSUPPORTED_LANG},\n+            {\"Foo\",                  REASON_UNSUPPORTED_LANG}\n+        };\n+    }\n+\n+    @DataProvider\n+    public static Object[][] nonSkippedCases() {\n+        return new Object[][]{\n+                {\"x\" },\n+                {\"y\" },\n+                {\"Point\" },\n+                {\"Choice\" },\n+                {\"enumtype\" }\n+        };\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/cpp\/TestCXXParsing.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+extern \"C\" {\n+    extern \"C\" {\n+        extern \"C\" {\n+            typedef enum\n+            {\n+              A,\n+              B,\n+              C\n+            } enumtype;\n+\n+            void m(enumtype arg);\n+\n+            struct Point {\n+               int x;\n+               int y;\n+               void m_point();\n+            };\n+\n+            union Choice {\n+               int a;\n+               int b;\n+               void m_choice();\n+            };\n+\n+            class Foo {\n+               int x;\n+            };\n+\n+            namespace foo {\n+               int x;\n+            }\n+\n+            namespace bar {\n+               int y;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/cpp\/cxx.h","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}