{"files":[{"patch":"@@ -42,2 +42,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-           MemorySegment point = MemorySegment.allocateNative(Point2d.$LAYOUT(), session);\n+        try (var arena = Arena.openConfined()) {\n+           MemorySegment point = arena.allocate(Point2d.$LAYOUT());\n@@ -83,1 +83,4 @@\n-The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. A complete list of all the supported options is given below:\n+The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. If no package is specified, classes are generated in the unnamed package. If no name is specified for the main header class, then the header class name is\n+derived from the header file name. For example, if jextract is run on foo.h, then foo_h will be the name of the main header class.\n+\n+A complete list of all the supported options is given below:\n@@ -87,5 +90,5 @@\n-| `-D <macro>`                                                 | define a C preprocessor macro                                |\n-| `--header-class-name <name>`                                 | specify the name of the main header class                    |\n-| `-t, --target-package <package>`                             | specify target package for the generated bindings            |\n-| `-I <path>`                                                  | specify include files path for the clang parser              |\n-| `-l <library>`                                               | specify a library that will be loaded by the generated bindings |\n+| `-D --define-macro <macro>=<value>`                          | define <macro> to <value> (or 1 if <value> omitted)          |\n+| `--header-class-name <name>`                                 | name of the generated header class. If this option is not specified, then header class name is derived from the header file name. For example, class \"foo_h\" for header \"foo.h\". |\n+| `-t, --target-package <package>`                             | target package name for the generated classes. If this option is not specified, then unnamed package is used.  |\n+| `-I, --include-dir <dir>`                                    | append directory to the include search paths. Include search paths are searched in order. For example, if `-I foo -I bar` is specified, header files will be searched in \"foo\" first, then (if nothing is found) in \"bar\".|\n+| `-l, --library <name \\| path>`                               | specify a library by platform-independent name (e.g. \"GL\") or by absolute path (\"\/usr\/lib\/libGL.so\") that will be loaded by the generated class. |\n@@ -95,1 +98,1 @@\n-| `--include-[function,macro,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings (see below). When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings. |\n+| `--include-[function,constant,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings (see below). When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings. |\n@@ -109,1 +112,1 @@\n-jextract --dump-includes=includes.txt point.h\n+jextract --dump-includes includes.txt point.h\n","filename":"README.md","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"}]}