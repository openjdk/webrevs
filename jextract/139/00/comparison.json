{"files":[{"patch":"@@ -101,0 +101,4 @@\n+    public Type getValueType() {\n+        var valueType = Index_h.clang_getValueType(owner, segment);\n+        return new Type(valueType, owner);\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4836,0 +4836,1 @@\n+\n@@ -4849,0 +4850,18 @@\n+\n+    public static MethodHandle clang_getValueType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getValueType$MH,\"clang_Type_getValueType\");\n+    }\n+\n+    \/**\n+     * {@snippet :\n+     * CXType clang_getValueType(CXType T);\n+     * }\n+     *\/\n+    public static MemorySegment clang_getValueType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getValueType$MH();\n+        try {\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -122,0 +122,5 @@\n+\n+    static final MethodHandle clang_getValueType$MH = RuntimeHelper.downcallHandle(\n+            \"clang_Type_getValueType\",\n+            constants$11.clang_getElementType$FUNC\n+    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$11.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-        append(\" * {@snippet :\\n\");\n+        append(\" * {@snippet lang=c :\\n\");\n@@ -228,1 +228,1 @@\n-        append(\" * {@snippet :\\n\");\n+        append(\" * {@snippet lang=c :\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,0 +232,4 @@\n+            case Atomic: {\n+                Type aType = makeType(t.getValueType());\n+                return Type.qualified(Delegated.Kind.ATOMIC, aType);\n+            }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeMaker.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-            if (c == MemorySegment.class) {\n+            if (MemorySegment.class.isAssignableFrom(c)) {\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.api;\n+\n+import org.openjdk.jextract.Declaration;\n+import org.openjdk.jextract.Type;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import testlib.JextractApiTestBase;\n+\n+import static org.testng.Assert.*;\n+import static org.openjdk.jextract.Type.Primitive.Kind.*;\n+import static org.openjdk.jextract.Type.Delegated.Kind.*;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.EnumSet;\n+\n+public class TestAtomic extends JextractApiTestBase {\n+    Declaration.Scoped atomic;\n+\n+    @BeforeClass\n+    public void parse() {\n+        \/\/ We need stdatomic.h\n+        Path builtinInc = Paths.get(System.getProperty(\"java.home\"), \"conf\", \"jextract\");\n+        atomic = parse(\"atomic.h\", \"-I\", builtinInc.toString());\n+    }\n+\n+    @Test(dataProvider = \"atomicTypes\")\n+    public void testAtomic(String varName, Type expected) {\n+        Declaration.Variable var = findDecl(atomic, varName, Declaration.Variable.class);\n+        var kinds = EnumSet.of(ATOMIC);\n+        if (varName.startsWith(\"U_\")) {\n+            kinds.add(UNSIGNED);\n+        }\n+        if (varName.startsWith(\"S_\")) {\n+            kinds.add(SIGNED);\n+        }\n+        checkType(var.type(), kinds, expected);\n+    }\n+\n+    @DataProvider\n+    static Object[][] atomicTypes() {\n+        return new Object[][]{\n+                new Object[] { \"BOOL\", Type.primitive(Bool) },\n+                new Object[] { \"CHAR\", Type.primitive(Char) },\n+                new Object[] { \"S_CHAR\", Type.primitive(Char) },\n+                new Object[] { \"U_CHAR\", Type.primitive(Char) },\n+                new Object[] { \"SHORT\", Type.primitive(Short) },\n+                new Object[] { \"U_SHORT\", Type.primitive(Short) },\n+                new Object[] { \"INT\", Type.primitive(Int) },\n+                new Object[] { \"U_INT\", Type.primitive(Int) },\n+                new Object[] { \"LONG\", Type.primitive(Long) },\n+                new Object[] { \"U_LONG\", Type.primitive(Long) },\n+                new Object[] { \"LONGLONG\", Type.primitive(LongLong) },\n+                new Object[] { \"U_LONGLONG\", Type.primitive(LongLong) },\n+        };\n+    }\n+\n+    static void checkType(Type t, EnumSet<Type.Delegated.Kind> kinds, Type expected) {\n+        while (t instanceof Type.Delegated delegated) {\n+            kinds.remove(delegated.kind());\n+            t = delegated.type();\n+        }\n+        assertTrue(kinds.isEmpty(), \"Missing kinds: \" + kinds);\n+        assertEquals(t, expected);\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/TestAtomic.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdatomic.h>\n+\n+atomic_bool BOOL;\n+atomic_char CHAR;\n+atomic_schar S_CHAR;\n+atomic_uchar U_CHAR;\n+atomic_short SHORT;\n+atomic_ushort U_SHORT;\n+atomic_int INT;\n+atomic_uint U_INT;\n+atomic_long LONG;\n+atomic_ulong U_LONG;\n+atomic_llong LONGLONG;\n+atomic_ullong U_LONGLONG;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/atomic.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}