{"files":[{"patch":"@@ -990,0 +990,3 @@\n+| `-F <dir>` (macOs only)                                          | specify the framework directory include files. Defaults to the current Mac OS X SDK dir.|\n+| `-framework <framework>` (macOs only)                            | specify the name of the library, path will be expanded to that of the framework folder.|\n+\n","filename":"doc\/GUIDE.md","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n--F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\n","filename":"samples\/opengl\/compile_flags.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,2 +1,2 @@\n-jextract -t opengl -l :\/System\/Library\/Frameworks\/GLUT.framework\/GLUT \\\n-  -l :\/System\/Library\/Frameworks\/OpenGL.framework\/OpenGL \\\n+jextract -t opengl -framework GLUT \\\n+  -framework OpenGL \\\n","filename":"samples\/opengl\/compilesource.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.io.File;\n@@ -44,1 +45,0 @@\n-import java.io.UncheckedIOException;\n@@ -49,6 +49,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.List;\n-import java.util.Optional;\n+import java.util.*;\n@@ -68,0 +63,2 @@\n+    private static final boolean isMacOSX =\n+            System.getProperty(\"os.name\", \"unknown\").equals(\"Mac OS X\");\n@@ -79,0 +76,1 @@\n+    private final List<String> frameworkPaths;\n@@ -82,0 +80,5 @@\n+        frameworkPaths = new ArrayList<>(Arrays.asList(\n+                \"\/System\/Library\/Frameworks\/\",\n+                \"\/System\/Library\/PrivateFrameworks\/\"\n+        ));\n+        inferMacOSFrameworkPath().ifPresent(path -> frameworkPaths.add(path.toString()));\n@@ -296,1 +299,1 @@\n-                   if (spec == null ) {\n+                   if (spec == null) {\n@@ -367,0 +370,2 @@\n+        parser.accepts(\"-F\", \"help.mac.framework\", true);\n+        parser.accepts(\"-framework\", \"help.framework.library.path\", true);\n@@ -414,3 +419,1 @@\n-        inferPlatformIncludePath().ifPresent(platformPath -> {\n-            builder.addClangArg(\"-I\" + platformPath);\n-        });\n+        inferPlatformIncludePath().ifPresent(platformPath -> builder.addClangArg(\"-I\" + platformPath));\n@@ -442,0 +445,3 @@\n+            if (!optionSet.has(\"-l\")){\n+                logger.warn(\"jextract.no.library.specified\");\n+            }\n@@ -445,19 +451,5 @@\n-        boolean librariesSpecified = optionSet.has(\"-l\");\n-        if (librariesSpecified) {\n-            for (String lib : optionSet.valuesOf(\"-l\")) {\n-                try {\n-                    Library library = Options.Library.parse(lib);\n-                    Path libPath = Paths.get(library.libSpec());\n-                    if (!useSystemLoadLibrary ||\n-                            library.specKind() == Library.SpecKind.NAME ||\n-                            (libPath.isAbsolute() && Files.isRegularFile(libPath))) {\n-                        builder.addLibrary(library);\n-                    } else {\n-                        \/\/ not an absolute path, but--use-system-load-library was specified\n-                        logger.err(\"l.option.value.absolute.path\", lib);\n-                    }\n-                } catch (IllegalArgumentException ex) {\n-                    logger.err(\"l.option.value.invalid\", lib);\n-                    return OPTION_ERROR;\n-                }\n-            }\n+        if (optionSet.has(\"-F\")) {\n+            List<String> paths = optionSet.valuesOf(\"-F\");\n+\n+            paths.forEach(p -> builder.addClangArg(\"-F\" + p));\n+            frameworkPaths.addAll(0, paths);\n@@ -466,0 +458,8 @@\n+        inferMacOSFrameworkPath().ifPresent(platformPath -> builder.addClangArg(\"-F\" + platformPath));\n+\n+        int optionError = parseLibraries(\"l\", optionSet, useSystemLoadLibrary, builder);\n+        if (optionError != 0) return optionError;\n+\n+        optionError = parseLibraries(\"framework\", optionSet, useSystemLoadLibrary, builder);\n+        if (optionError != 0) return optionError;\n+\n@@ -535,0 +535,31 @@\n+    private int parseLibraries(String optionString, OptionSet optionSet, boolean useSystemLoadLibrary, Options.Builder builder) {\n+        if (optionSet.has(\"-\" + optionString)) {\n+            for (String lib : optionSet.valuesOf(\"-\" + optionString)) {\n+                try {\n+                    String frameworhPath = optionString.equals(\"framework\") ?\n+                            resolveFrameworkPath(lib) :\n+                            lib;\n+\n+                    if (frameworhPath == null) {\n+                        throw new IllegalArgumentException(\"Framework path does not exist: \" + lib);\n+                    }\n+\n+                    Library library = Library.parse(frameworhPath);\n+                    Path libPath = Paths.get(library.libSpec());\n+                    if (!useSystemLoadLibrary ||\n+                            library.specKind() == Library.SpecKind.NAME ||\n+                            (libPath.isAbsolute() && Files.isRegularFile(libPath))) {\n+                        builder.addLibrary(library);\n+                    } else {\n+                        \/\/ not an absolute path, but --use-system-load-library was specified\n+                        logger.err(\"l.option.value.absolute.path\", lib);\n+                    }\n+                } catch (IllegalArgumentException ex) {\n+                    logger.err(optionString + \".option.value.invalid\", lib);\n+                    return OPTION_ERROR;\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n@@ -554,2 +585,15 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (os.equals(\"Mac OS X\")) {\n+        return inferMacOsPath(\"usr\", \"include\");\n+    }\n+\n+    private Optional<Path> inferMacOSFrameworkPath() {\n+        return inferMacOsPath(\"System\", \"Library\", \"Frameworks\");\n+    }\n+\n+    private static String getMacOsSDKPath() throws IOException {\n+        ProcessBuilder pb = new ProcessBuilder().\n+                command(\"\/usr\/bin\/xcrun\", \"--show-sdk-path\");\n+        return new String(pb.start().getInputStream().readAllBytes());\n+    }\n+\n+    private Optional<Path> inferMacOsPath(String... paths) {\n+        if (isMacOSX) {\n@@ -557,5 +601,2 @@\n-                ProcessBuilder pb = new ProcessBuilder().\n-                    command(\"\/usr\/bin\/xcrun\", \"--show-sdk-path\");\n-                Process proc = pb.start();\n-                String str = new String(proc.getInputStream().readAllBytes());\n-                Path dir = Paths.get(str.trim(), \"usr\", \"include\");\n+                String str = getMacOsSDKPath();\n+                Path dir = Paths.get(str.trim(), paths);\n@@ -571,1 +612,0 @@\n-\n@@ -574,0 +614,11 @@\n+\n+    private String resolveFrameworkPath(String optionString) {\n+        for (String dir : frameworkPaths) {\n+            Path path = Path.of(dir, optionString + \".framework\");\n+            if (Files.exists(path)) {\n+                return \":\" + path + File.separator + optionString;\n+            }\n+        }\n+\n+        return null;\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":90,"deletions":39,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.jextract.Declaration.Constant;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2020, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -4,1 +4,1 @@\n-# \n+#\n@@ -8,1 +8,1 @@\n-# \n+#\n@@ -14,1 +14,1 @@\n-# \n+#\n@@ -18,1 +18,1 @@\n-# \n+#\n@@ -29,0 +29,1 @@\n+framework.option.value.invalid=invalid library specifier for -framework option: {0}\n@@ -50,0 +51,2 @@\n+help.mac.framework=specify the path of the framework include files\n+help.framework.library.path=specify name of framework library, jextract will infer public frameworks dir\n@@ -84,1 +87,6 @@\n---version                          print version information and exit                           \\n\n+--version                          print version information and exit                           \\n\\\n+\\                                                                                               \\n\\\n+macOS platform options for running jextract (available only when running on macOS):             \\n\\\n+-F <dir>            specify the framework directory                                     \\n\\\n+-framework <framework>                     specify framework library. -framework libGL is equivalent to         \\n\\\n+\\                                      -l :\/System\/Library\/Frameworks\/libGL.framework\/libGL\n@@ -122,0 +130,3 @@\n+\n+jextract.no.library.specified=\\\n+no library specified using -l but --use-system-load-library was used\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}