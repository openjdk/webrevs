{"files":[{"patch":"@@ -991,0 +991,8 @@\n+**macOS platform options (available only when running on macOS):**\n+\n+| Option                       | Meaning                                                                                                                                                                                                                                 |\n+|:-----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `--mac-framework-dir <dir>`  | specify the framework directory dir include files <br\/>defaults to the current Mac OS X SDK dir<br\/> This removes the need of having a compile_flags.txt with the required `-framework XYZ` options in the folder where jextract is ran |\n+| `-f, framework <framework>` | specify the name of the library, path will be expanded to that of the framework folder                                                                                                                                                  |\n+\n+\n","filename":"doc\/GUIDE.md","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n--F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\n","filename":"samples\/opengl\/compile_flags.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,2 +1,2 @@\n-jextract -t opengl -l :\/System\/Library\/Frameworks\/GLUT.framework\/GLUT \\\n-  -l :\/System\/Library\/Frameworks\/OpenGL.framework\/OpenGL \\\n+jextract -t opengl -f GLUT \\\n+  -f OpenGL \\\n","filename":"samples\/opengl\/compilesource.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import java.io.UncheckedIOException;\n@@ -49,6 +48,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.List;\n-import java.util.Optional;\n+import java.util.*;\n@@ -68,0 +62,2 @@\n+    private static final boolean isMacOSX =\n+            System.getProperty(\"os.name\", \"unknown\").equals(\"Mac OS X\");\n@@ -181,0 +177,3 @@\n+        if (isMacOSX){\n+            logger.info(\"jextract.usage.mac\");\n+        }\n@@ -246,0 +245,11 @@\n+        private static HashSet <String> platformOptions = new HashSet<>();\n+\n+        void addPlatformOption(String name) {\n+            platformOptions.add(name);\n+        }\n+\n+        void addPlatformOption(String name, List<String> aliases) {\n+            platformOptions.add(name);\n+            platformOptions.addAll(aliases);\n+        }\n+\n@@ -283,0 +293,4 @@\n+        static boolean isPlatformOption(String option) {\n+            return platformOptions.contains(option);\n+        }\n+\n@@ -296,1 +310,1 @@\n-                   if (spec == null ) {\n+                   if (spec == null) {\n@@ -303,1 +317,6 @@\n-                           throw new OptionException(\"invalid option: \" + arg);\n+                           if (isPlatformOption(arg)) {\n+                               var message = String.format(\"Error: Option [%s] is not valid on this platform\", arg);\n+                               throw new OptionException(message);\n+                           } else {\n+                               throw new OptionException(\"invalid option: \" + arg);\n+                           }\n@@ -368,0 +387,8 @@\n+        if (isMacOSX) {\n+            parser.accepts(\"--mac-framework-dir\", \"help.mac.framework\", true);\n+            parser.accepts(\"-f\", \"help.framework.library.path\", true);\n+        }\n+\n+        parser.addPlatformOption(\"--mac-framework-dir\");\n+        parser.addPlatformOption(\"-f\");\n+\n@@ -414,3 +441,2 @@\n-        inferPlatformIncludePath().ifPresent(platformPath -> {\n-            builder.addClangArg(\"-I\" + platformPath);\n-        });\n+\n+        inferPlatformIncludePath().ifPresent(platformPath -> builder.addClangArg(\"-I\" + platformPath));\n@@ -445,19 +471,9 @@\n-        boolean librariesSpecified = optionSet.has(\"-l\");\n-        if (librariesSpecified) {\n-            for (String lib : optionSet.valuesOf(\"-l\")) {\n-                try {\n-                    Library library = Options.Library.parse(lib);\n-                    Path libPath = Paths.get(library.libSpec());\n-                    if (!useSystemLoadLibrary ||\n-                            library.specKind() == Library.SpecKind.NAME ||\n-                            (libPath.isAbsolute() && Files.isRegularFile(libPath))) {\n-                        builder.addLibrary(library);\n-                    } else {\n-                        \/\/ not an absolute path, but--use-system-load-library was specified\n-                        logger.err(\"l.option.value.absolute.path\", lib);\n-                    }\n-                } catch (IllegalArgumentException ex) {\n-                    logger.err(\"l.option.value.invalid\", lib);\n-                    return OPTION_ERROR;\n-                }\n-            }\n+        Integer optionError = parseLibraries(\"l\", optionSet, useSystemLoadLibrary, builder);\n+        if (optionError != null) return optionError;\n+\n+        optionError = parseLibraries(\"f\", optionSet, useSystemLoadLibrary, builder);\n+        if (optionError != null) return optionError;\n+\n+\n+        if (optionSet.has(\"--mac-framework-dir\")) {\n+            optionSet.valuesOf(\"--mac-framework-dir\").forEach(p -> builder.addClangArg(\"-F\" + p));\n@@ -466,0 +482,2 @@\n+        inferMacOSFrameworkPath().ifPresent(platformPath -> builder.addClangArg(\"-F\" + platformPath));\n+\n@@ -535,0 +553,25 @@\n+    private Integer parseLibraries(String optionString, OptionSet optionSet, boolean useSystemLoadLibrary, Options.Builder builder) {\n+        if (optionSet.has(\"-\" + optionString)) {\n+            for (String lib : optionSet.valuesOf(\"-\" + optionString)) {\n+                try {\n+                    if (optionString.equals(\"f\")) lib = formatFrameworkPath(lib);\n+\n+                    Library library = Library.parse(lib);\n+                    Path libPath = Paths.get(library.libSpec());\n+                    if (!useSystemLoadLibrary ||\n+                            library.specKind() == Library.SpecKind.NAME ||\n+                            (libPath.isAbsolute() && Files.isRegularFile(libPath))) {\n+                        builder.addLibrary(library);\n+                    } else {\n+                        \/\/ not an absolute path, but --use-system-load-library was specified\n+                        logger.err(optionString + \".option.value.absolute.path\", lib);\n+                    }\n+                } catch (IllegalArgumentException ex) {\n+                    logger.err(optionString + \".option.value.invalid\", lib);\n+                    return OPTION_ERROR;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -554,2 +597,15 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (os.equals(\"Mac OS X\")) {\n+        return inferMacOsPath(\"usr\", \"include\");\n+    }\n+\n+    private Optional<Path> inferMacOSFrameworkPath() {\n+        return inferMacOsPath(\"System\", \"Library\", \"Frameworks\");\n+    }\n+\n+    private static String getMacOsSDKPath() throws IOException {\n+        ProcessBuilder pb = new ProcessBuilder().\n+                command(\"\/usr\/bin\/xcrun\", \"--show-sdk-path\");\n+        return new String(pb.start().getInputStream().readAllBytes());\n+    }\n+\n+    private Optional<Path> inferMacOsPath(String... paths) {\n+        if (isMacOSX) {\n@@ -557,5 +613,2 @@\n-                ProcessBuilder pb = new ProcessBuilder().\n-                    command(\"\/usr\/bin\/xcrun\", \"--show-sdk-path\");\n-                Process proc = pb.start();\n-                String str = new String(proc.getInputStream().readAllBytes());\n-                Path dir = Paths.get(str.trim(), \"usr\", \"include\");\n+                String str = getMacOsSDKPath();\n+                Path dir = Paths.get(str.trim(), paths);\n@@ -571,1 +624,0 @@\n-\n@@ -574,0 +626,4 @@\n+\n+    private String formatFrameworkPath(String optionString) {\n+        return String.format(\":\/System\/Library\/Frameworks\/%1$s.framework\/%1$s\", optionString);\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":96,"deletions":40,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2020, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -4,1 +4,1 @@\n-# \n+#\n@@ -8,1 +8,1 @@\n-# \n+#\n@@ -14,1 +14,1 @@\n-# \n+#\n@@ -18,1 +18,1 @@\n-# \n+#\n@@ -29,0 +29,1 @@\n+f.option.value.invalid=invalid library specifier for -f option: {0}\n@@ -30,0 +31,1 @@\n+f.option.value.absolute.path=when using --use-system-load-library, option value for -f option should be a name or an absolute path: {0}\n@@ -50,0 +52,2 @@\n+help.mac.framework=specify the path of the framework include files\n+help.framework.library.path=specify name of framework library, jextract will infer public frameworks dir\n@@ -86,0 +90,6 @@\n+jextract.usage.mac=\\\n+Platform dependent options for running jextract                                                 \\n\\\n+--mac-framework-dir <dir>          specify the framework directory                              \\n\\\n+-f <framework>                     specify framework library. -f libGL is equivalent to         \\n\\\n+\\                                      -l :\/System\/Library\/Frameworks\/libGL.framework\/libGL     \\n\n+\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}