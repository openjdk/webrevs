{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,0 +113,2 @@\n+                } catch (Error | RuntimeException ex) {\n+                    throw ex;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,0 +220,2 @@\n+                } catch (Error | RuntimeException ex) {\n+                   throw ex;\n@@ -457,0 +459,2 @@\n+                    } catch (Error | RuntimeException ex) {\n+                        throw ex;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,0 +264,2 @@\n+                    } catch (Error | RuntimeException ex) {\n+                        throw ex;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.util.concurrent.*;\n+import org.junit.jupiter.api.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import test.jextract.reachableException.*;\n+\n+\/*\n+ * @test\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract -t test.jextract.reachableException reachableException.h\n+ * @build TestReachableException\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED TestReachableException\n+ *\/\n+\n+public class TestReachableException {\n+\n+    private Arena confinedArena;\n+    private MemorySegment callbackSegment;\n+\n+    @BeforeEach\n+    public void setup() {\n+        confinedArena = Arena.ofConfined();\n+        callbackSegment = simple_callback.allocate(value ->\n+                System.out.println(\"Value: \" + value), confinedArena);\n+    }\n+\n+    @AfterEach\n+    public void cleanup() {\n+        if (confinedArena != null && confinedArena.scope().isAlive()) {\n+            confinedArena.close();\n+        }\n+    }\n+\n+    @Test\n+    void testWrongThreadAccess() throws Exception {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Throwable> future = executor.submit(() -> {\n+                try {\n+                    simple_callback.invoke(callbackSegment, 42);\n+                    return null;\n+                } catch (Throwable t) {\n+                    return t;\n+                }\n+            });\n+\n+            Throwable thrown = future.get(5, TimeUnit.SECONDS);\n+\n+            assertNotNull(thrown, \"Expected an exception when accessing from wrong thread\");\n+            assertInstanceOf(WrongThreadException.class, thrown,\n+                    \"Expected WrongThreadException but got: \" + thrown.getClass().getName());\n+\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+\n+    @Test\n+    void testSameThreadAccess() {\n+        assertDoesNotThrow(() -> {\n+            simple_callback.invoke(callbackSegment, 42);\n+        }, \"No exception should be thrown when accessing from the same thread\");\n+    }\n+\n+    @Test\n+    void testExceptionType() throws Exception {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Class<?>> future = executor.submit(() -> {\n+                try {\n+                    simple_callback.invoke(callbackSegment, 42);\n+                    return null;\n+                } catch (Throwable t) {\n+                    return t.getClass();\n+                }\n+            });\n+\n+            Class<?> exceptionClass = future.get(5, TimeUnit.SECONDS);\n+            assertEquals(WrongThreadException.class, exceptionClass,\n+                    \"Exception should be WrongThreadException, not wrapped in AssertionError\");\n+\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+}\n","filename":"test\/jtreg\/generator\/reachableException\/TestReachableException.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-void func(int);\n+typedef void (*simple_callback)(int value);\n","filename":"test\/jtreg\/generator\/reachableException\/reachableException.h","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JDK-8248474.h","status":"copied"}]}