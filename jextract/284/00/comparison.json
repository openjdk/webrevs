{"files":[{"patch":"@@ -124,2 +124,2 @@\n-                                                boolean useSystemLoadLibrary, PrintWriter errStream) {\n-        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libs, useSystemLoadLibrary, errStream));\n+                                                boolean useSystemLoadLibrary, PrintWriter errStream, Boolean includeJavaEnums) {\n+        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libs, useSystemLoadLibrary, errStream, includeJavaEnums));\n@@ -131,2 +131,2 @@\n-                                                         PrintWriter errStream) {\n-        return List.of(generate(decl, headerName, targetPkg, includeHelper, libs, useSystemLoadLibrary, errStream));\n+                                                         PrintWriter errStream, Boolean includeJavaEnums) {\n+        return List.of(generate(decl, headerName, targetPkg, includeHelper, libs, useSystemLoadLibrary, errStream, includeJavaEnums));\n@@ -138,1 +138,1 @@\n-                                             PrintWriter errStream) {\n+                                             PrintWriter errStream, Boolean includeJavaEnums) {\n@@ -145,1 +145,1 @@\n-        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary);\n+        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary, includeJavaEnums);\n@@ -393,0 +393,1 @@\n+        parser.accepts(\"--generate-java-enums\", format(\"help.generate-java-enums\"), false);\n@@ -473,0 +474,4 @@\n+        if (optionSet.has(\"--generate-java-enums\")) {\n+            builder.setIncludeJavaEnums(true);\n+        }\n+\n@@ -528,1 +533,1 @@\n-                options.targetPackage, options.includeHelper, options.libraries, options.useSystemLoadLibrary, err);\n+                options.targetPackage, options.includeHelper, options.libraries, options.useSystemLoadLibrary, err, options.includeJavaEnums);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-        INTERFACE(\"interface\");\n+        INTERFACE(\"interface\"),\n+        ENUM(\"enum\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.Iterator;\n@@ -94,0 +95,4 @@\n+    public void addEnum(Declaration.Scoped enumTree, String name) {\n+        emitEnum(enumTree, name);\n+    }\n+\n@@ -504,0 +509,39 @@\n+    private void emitEnum(Declaration.Scoped enumTree, String enumName) {\n+        incrAlign();\n+        emitDocComment(enumTree);\n+        appendLines(STR.\"\"\"\n+            public enum \\{enumName} {\n+            \"\"\");\n+        Iterator<Declaration> it = enumTree.members().iterator();\n+        StringBuilder sb = new StringBuilder();\n+        while (it.hasNext()) {\n+            Declaration.Constant member = (Declaration.Constant)it.next();\n+            String memberName = member.name().toUpperCase();\n+            sb.append(STR.\"\\{memberName}(\\{member.value()})\");\n+            if (it.hasNext()) {\n+                sb.append(\",\\n\");\n+            }\n+        }\n+        appendIndentedLines(sb.append(\";\").toString());\n+        appendBlankLine();\n+        appendIndentedLines(STR.\"\"\"\n+            private final int value;\n+            \"\"\");\n+        appendBlankLine();\n+        appendIndentedLines(STR.\"\"\"\n+            private \\{enumName}(int value) {;\n+                this.value = value;\n+            }\n+            \"\"\");\n+        appendBlankLine();\n+        appendIndentedLines(STR.\"\"\"\n+            public int getValue() {\n+                return this.value;\n+            }\n+            \"\"\");\n+        appendLines(STR.\"\"\"\n+            }\n+            \"\"\");\n+        decrAlign();\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    public final Boolean includeJavaEnums;\n@@ -44,1 +45,1 @@\n-                    String targetPackage, String outputDir, IncludeHelper includeHelper) {\n+                    String targetPackage, String outputDir, IncludeHelper includeHelper, Boolean includeJavaEnums) {\n@@ -51,0 +52,1 @@\n+        this.includeJavaEnums  = includeJavaEnums;\n@@ -64,0 +66,1 @@\n+        private Boolean includeJavaEnums;\n@@ -71,0 +74,1 @@\n+            this.includeJavaEnums = false;\n@@ -77,1 +81,1 @@\n-                    useSystemLoadLibrary, targetPackage, outputDir, includeHelper\n+                    useSystemLoadLibrary, targetPackage, outputDir, includeHelper, includeJavaEnums\n@@ -108,0 +112,4 @@\n+\n+        public void setIncludeJavaEnums(Boolean includeJavaEnums) {\n+            this.includeJavaEnums = includeJavaEnums;\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Options.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Optional;\n@@ -45,0 +46,1 @@\n+    private static Boolean includeJavaEnums;\n@@ -48,1 +50,1 @@\n-                                                   List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+                                                   List<Options.Library> libs, boolean useSystemLoadLibrary, Boolean includeJavaEnums) {\n@@ -51,0 +53,1 @@\n+        OutputFactory.includeJavaEnums = includeJavaEnums;\n@@ -106,0 +109,3 @@\n+        if(includeJavaEnums && Utils.isEnum(d) && !d.name().isEmpty()) {\n+           toplevelBuilder.addEnum(d, Utils.toPascalCase(d.name()));\n+        }\n@@ -147,1 +153,1 @@\n-\n+        Optional<List<Declaration.Scoped>> nde = NestedDeclarations.get(tree);\n@@ -157,0 +163,2 @@\n+        } else if (includeJavaEnums && Utils.isEnum(type) && nde.isPresent() && !nde.get().isEmpty()) {\n+            toplevelBuilder.addEnum(nde.get().get(0), Utils.toPascalCase(tree.name()));\n@@ -225,0 +233,4 @@\n+\n+        default void addEnum(Declaration.Scoped enumTree, String name) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -139,0 +139,5 @@\n+    @Override\n+    public void addEnum(Declaration.Scoped tree, String name) {\n+        nextHeader().addEnum(tree, name);\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -281,0 +281,25 @@\n+\n+    public static String toPascalCase(String text) {\n+        if (text == null || text.isEmpty()) {\n+            return text;\n+        }\n+\n+        StringBuilder builder = new StringBuilder();\n+        boolean capitalizeNext = true;\n+\n+        for (int i = 0; i < text.length(); i++) {\n+            char currentChar = text.charAt(i);\n+\n+            if (!Character.isLetter(currentChar)) {\n+                capitalizeNext = true;\n+            } else {\n+                if (capitalizeNext) {\n+                    builder.append(Character.toUpperCase(currentChar));\n+                    capitalizeNext = false;\n+                } else {\n+                    builder.append(Character.toLowerCase(currentChar));\n+                }\n+            }\n+        }\n+        return builder.toString();\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+help.generate-java-enums=generate java enum files\n@@ -78,1 +79,1 @@\n-                                   in 'java.library.path'.                                      \\n\\ \n+                                   in 'java.library.path'.                                      \\n\\\n@@ -84,1 +85,2 @@\n---version                          print version information and exit                           \\n\n+--version                          print version information and exit                           \\n\\\n+--generate-java-enums              generate java enum files for the C enums in the header files \\n\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import static test.jextract.testEnums.testEnums_h.CodetypeT;\n+import static test.jextract.testEnums.testEnums_h.Size;\n+import static test.jextract.testEnums.testEnums_h.Temp;\n+import static test.jextract.testEnums.testEnums_h.TempT;\n+\n+\/*\n+ * @test\n+ * @library \/lib\n+ * @run main\/othervm JtregJextract --generate-java-enums -l libTestEnums -t test.jextract.testEnums testEnums.h\n+ * @build LibTestEnums\n+ * @run testng\/othervm LibTestEnums\n+ *\/\n+public class LibTestEnums {\n+    @Test\n+    public void test() {\n+        assertEquals(CodetypeT.JAVA.getValue(), 0);\n+        assertEquals(CodetypeT.C.getValue(), 1);\n+        assertEquals(CodetypeT.CPP.getValue(), 2);\n+        assertEquals(CodetypeT.PYTHON.getValue(), 3);\n+        assertEquals(CodetypeT.RUBY.getValue(), 4);\n+\n+        assertEquals(Size.XS.getValue(), 0);\n+        assertEquals(Size.S.getValue(), 1);\n+        assertEquals(Size.M.getValue(), 2);\n+        assertEquals(Size.L.getValue(), 3);\n+        assertEquals(Size.XL.getValue(), 4);\n+        assertEquals(Size.XXL.getValue(), 5);\n+\n+        assertEquals(Temp.ONE.getValue(), 1);\n+        assertEquals(Temp.TWO.getValue(), 2);\n+\n+        assertEquals(TempT.ONE.getValue(), 1);\n+        assertEquals(TempT.TWO.getValue(), 2);\n+        assertEquals(TempT.THREE.getValue(), 3);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jtreg\/generator\/testEnums\/LibTestEnums.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-void func(int);\n+#include \"testEnums.h\"\n\\ No newline at end of file\n","filename":"test\/jtreg\/generator\/testEnums\/libTestEnums.c","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JDK-8248474.h","status":"copied"},{"patch":"@@ -49,1 +49,2 @@\n-   TWO\n+   TWO,\n+   THREE = ONE + TWO\n","filename":"test\/jtreg\/generator\/testEnums\/testEnums.h","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/anonenum.h","status":"copied"},{"patch":"@@ -74,0 +74,4 @@\n+            if (\"--generate-java-enums\".equals(opt)) {\n+                jextrOpts.add(\"--generate-java-enums\");\n+            }\n+\n","filename":"test\/lib\/JtregJextract.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}