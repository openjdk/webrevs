{"files":[{"patch":"@@ -7,0 +7,1 @@\n+  -cp classes `\r\n@@ -8,1 +9,0 @@\n-  --enable-preview --source=21 `\r\n","filename":"samples\/python3\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+  -cp classes `\r\n@@ -8,1 +9,0 @@\n-  --enable-preview --source=21 `\r\n","filename":"samples\/tensorflow\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -34,0 +32,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -35,1 +38,1 @@\n-public class Index_h  {\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -37,11 +40,85 @@\n-    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;\n-    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;\n-    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;\n-    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n-    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n-    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;\n-    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;\n-    public static final AddressLayout C_POINTER = Constants$root.C_POINTER$LAYOUT;\n-    \/**\n-     * {@snippet :\n-     * enum CXErrorCode.CXError_Success = 0;\n+public class Index_h {\n+\n+    Index_h() {\n+        \/\/ Should not be called directly\n+    }\n+\n+    static final Arena LIBRARY_ARENA = Arena.ofAuto();\n+    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean(\"jextract.trace.downcalls\");\n+\n+    static void traceDowncall(String name, Object... args) {\n+         String traceArgs = Arrays.stream(args)\n+                       .map(Object::toString)\n+                       .collect(Collectors.joining(\", \"));\n+         System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n+    }\n+\n+    static MemorySegment findOrThrow(String symbol) {\n+        return SYMBOL_LOOKUP.find(symbol)\n+            .orElseThrow(() -> new UnsatisfiedLinkError(\"unresolved symbol: \" + symbol));\n+    }\n+\n+    static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {\n+        MemoryLayout[] result = new MemoryLayout[varargs.length];\n+        for (int i = 0; i < varargs.length; i++) {\n+            result[i] = variadicLayout(varargs[i].getClass());\n+        }\n+        return result;\n+    }\n+\n+    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n+        try {\n+            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n+        } catch (ReflectiveOperationException ex) {\n+            throw new AssertionError(ex);\n+        }\n+    }\n+\n+    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {\n+        FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);\n+        Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());\n+        return SYMBOL_LOOKUP.find(name)\n+                .map(addr -> Linker.nativeLinker().downcallHandle(addr, variadicDesc, fva)\n+                        .asSpreader(Object[].class, variadicLayouts.length))\n+                .orElse(null);\n+    }\n+\n+    \/\/ Internals only below this point\n+\n+    private static MemoryLayout variadicLayout(Class<?> c) {\n+        \/\/ apply default argument promotions per C spec\n+        \/\/ note that all primitives are boxed, since they are passed through an Object[]\n+        if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {\n+            return JAVA_INT;\n+        } else if (c == Long.class) {\n+            return JAVA_LONG;\n+        } else if (c == Float.class || c == Double.class) {\n+            return JAVA_DOUBLE;\n+        } else if (MemorySegment.class.isAssignableFrom(c)) {\n+            return ADDRESS;\n+        }\n+        throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n+    }\n+\n+    static {\n+        String libName = System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"libclang\" : \"clang\";\n+        System.loadLibrary(libName);\n+    }\n+\n+    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()\n+            .or(Linker.nativeLinker().defaultLookup());\n+\n+    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n+            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));\n+    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+    private static final int CXError_Success = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXErrorCode.CXError_Success = 0\n@@ -51,1 +128,1 @@\n-        return (int)0L;\n+        return CXError_Success;\n@@ -53,0 +130,1 @@\n+    private static final int CXError_Failure = (int)1L;\n@@ -54,2 +132,2 @@\n-     * {@snippet :\n-     * enum CXErrorCode.CXError_Failure = 1;\n+     * {@snippet lang=c :\n+     * enum CXErrorCode.CXError_Failure = 1\n@@ -59,1 +137,1 @@\n-        return (int)1L;\n+        return CXError_Failure;\n@@ -61,0 +139,1 @@\n+    private static final int CXError_Crashed = (int)2L;\n@@ -62,2 +141,2 @@\n-     * {@snippet :\n-     * enum CXErrorCode.CXError_Crashed = 2;\n+     * {@snippet lang=c :\n+     * enum CXErrorCode.CXError_Crashed = 2\n@@ -67,1 +146,1 @@\n-        return (int)2L;\n+        return CXError_Crashed;\n@@ -69,0 +148,1 @@\n+    private static final int CXError_InvalidArguments = (int)3L;\n@@ -70,2 +150,2 @@\n-     * {@snippet :\n-     * enum CXErrorCode.CXError_InvalidArguments = 3;\n+     * {@snippet lang=c :\n+     * enum CXErrorCode.CXError_InvalidArguments = 3\n@@ -75,1 +155,1 @@\n-        return (int)3L;\n+        return CXError_InvalidArguments;\n@@ -77,0 +157,1 @@\n+    private static final int CXError_ASTReadError = (int)4L;\n@@ -78,2 +159,2 @@\n-     * {@snippet :\n-     * enum CXErrorCode.CXError_ASTReadError = 4;\n+     * {@snippet lang=c :\n+     * enum CXErrorCode.CXError_ASTReadError = 4\n@@ -83,1 +164,22 @@\n-        return (int)4L;\n+        return CXError_ASTReadError;\n+    }\n+\n+    private static class clang_getCString$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXString.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCString\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCString$descriptor() {\n+        return clang_getCString$constants.DESC;\n@@ -85,2 +187,9 @@\n-    public static MethodHandle clang_getCString$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_getCString$MH,\"clang_getCString\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCString$handle() {\n+        return clang_getCString$constants.HANDLE;\n@@ -89,2 +198,2 @@\n-     * {@snippet :\n-     * char* clang_getCString(CXString string);\n+     * {@snippet lang=c :\n+     * const char *clang_getCString(CXString string)\n@@ -94,1 +203,1 @@\n-        var mh$ = clang_getCString$MH();\n+        var mh$ = clang_getCString$constants.HANDLE;\n@@ -96,1 +205,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(string);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCString\", string);\n+            }\n+            return (MemorySegment)mh$.invokeExact(string);\n@@ -98,1 +210,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -101,2 +213,29 @@\n-    public static MethodHandle clang_disposeString$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_disposeString$MH,\"clang_disposeString\");\n+\n+    private static class clang_disposeString$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXString.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_disposeString\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_disposeString$descriptor() {\n+        return clang_disposeString$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeString$handle() {\n+        return clang_disposeString$constants.HANDLE;\n@@ -105,2 +244,2 @@\n-     * {@snippet :\n-     * void clang_disposeString(CXString string);\n+     * {@snippet lang=c :\n+     * void clang_disposeString(CXString string)\n@@ -110,1 +249,1 @@\n-        var mh$ = clang_disposeString$MH();\n+        var mh$ = clang_disposeString$constants.HANDLE;\n@@ -112,0 +251,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeString\", string);\n+            }\n@@ -114,1 +256,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -118,2 +260,2 @@\n-     * {@snippet :\n-     * typedef void* CXIndex;\n+     * {@snippet lang=c :\n+     * typedef void *CXIndex\n@@ -122,1 +264,1 @@\n-    public static final AddressLayout CXIndex = Constants$root.C_POINTER$LAYOUT;\n+    public static final AddressLayout CXIndex = Index_h.C_POINTER;\n@@ -124,2 +266,2 @@\n-     * {@snippet :\n-     * typedef struct CXTranslationUnitImpl* CXTranslationUnit;\n+     * {@snippet lang=c :\n+     * typedef struct CXTranslationUnitImpl *CXTranslationUnit\n@@ -128,1 +270,2 @@\n-    public static final AddressLayout CXTranslationUnit = Constants$root.C_POINTER$LAYOUT;\n+    public static final AddressLayout CXTranslationUnit = Index_h.C_POINTER;\n+    private static final int CXCursor_ExceptionSpecificationKind_None = (int)0L;\n@@ -130,2 +273,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_None = 0;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_None = 0\n@@ -135,1 +278,1 @@\n-        return (int)0L;\n+        return CXCursor_ExceptionSpecificationKind_None;\n@@ -137,0 +280,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_DynamicNone = (int)1L;\n@@ -138,2 +282,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_DynamicNone = 1;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_DynamicNone = 1\n@@ -143,1 +287,1 @@\n-        return (int)1L;\n+        return CXCursor_ExceptionSpecificationKind_DynamicNone;\n@@ -145,0 +289,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_Dynamic = (int)2L;\n@@ -146,2 +291,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Dynamic = 2;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Dynamic = 2\n@@ -151,1 +296,1 @@\n-        return (int)2L;\n+        return CXCursor_ExceptionSpecificationKind_Dynamic;\n@@ -153,0 +298,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_MSAny = (int)3L;\n@@ -154,2 +300,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_MSAny = 3;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_MSAny = 3\n@@ -159,1 +305,1 @@\n-        return (int)3L;\n+        return CXCursor_ExceptionSpecificationKind_MSAny;\n@@ -161,0 +307,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_BasicNoexcept = (int)4L;\n@@ -162,2 +309,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_BasicNoexcept = 4\n@@ -167,1 +314,1 @@\n-        return (int)4L;\n+        return CXCursor_ExceptionSpecificationKind_BasicNoexcept;\n@@ -169,0 +316,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_ComputedNoexcept = (int)5L;\n@@ -170,2 +318,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 5\n@@ -175,1 +323,1 @@\n-        return (int)5L;\n+        return CXCursor_ExceptionSpecificationKind_ComputedNoexcept;\n@@ -177,0 +325,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_Unevaluated = (int)6L;\n@@ -178,2 +327,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unevaluated = 6;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unevaluated = 6\n@@ -183,1 +332,1 @@\n-        return (int)6L;\n+        return CXCursor_ExceptionSpecificationKind_Unevaluated;\n@@ -185,0 +334,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_Uninstantiated = (int)7L;\n@@ -186,2 +336,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Uninstantiated = 7;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Uninstantiated = 7\n@@ -191,1 +341,1 @@\n-        return (int)7L;\n+        return CXCursor_ExceptionSpecificationKind_Uninstantiated;\n@@ -193,0 +343,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_Unparsed = (int)8L;\n@@ -194,2 +345,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unparsed = 8;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_Unparsed = 8\n@@ -199,1 +350,1 @@\n-        return (int)8L;\n+        return CXCursor_ExceptionSpecificationKind_Unparsed;\n@@ -201,0 +352,1 @@\n+    private static final int CXCursor_ExceptionSpecificationKind_NoThrow = (int)9L;\n@@ -202,2 +354,2 @@\n-     * {@snippet :\n-     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_NoThrow = 9;\n+     * {@snippet lang=c :\n+     * enum CXCursor_ExceptionSpecificationKind.CXCursor_ExceptionSpecificationKind_NoThrow = 9\n@@ -207,1 +359,1 @@\n-        return (int)9L;\n+        return CXCursor_ExceptionSpecificationKind_NoThrow;\n@@ -209,2 +361,11 @@\n-    public static MethodHandle clang_createIndex$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_createIndex$MH,\"clang_createIndex\");\n+\n+    private static class clang_createIndex$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_createIndex\"),\n+                    DESC);\n@@ -212,0 +373,1 @@\n+\n@@ -213,2 +375,3 @@\n-     * {@snippet :\n-     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n@@ -217,10 +380,2 @@\n-    public static MemorySegment clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics) {\n-        var mh$ = clang_createIndex$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeIndex$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_disposeIndex$MH,\"clang_disposeIndex\");\n+    public static FunctionDescriptor clang_createIndex$descriptor() {\n+        return clang_createIndex$constants.DESC;\n@@ -228,0 +383,1 @@\n+\n@@ -229,2 +385,3 @@\n-     * {@snippet :\n-     * void clang_disposeIndex(CXIndex index);\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n@@ -233,10 +390,2 @@\n-    public static void clang_disposeIndex(MemorySegment index) {\n-        var mh$ = clang_disposeIndex$MH();\n-        try {\n-            mh$.invokeExact(index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getFileName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_getFileName$MH,\"clang_getFileName\");\n+    public static MethodHandle clang_createIndex$handle() {\n+        return clang_createIndex$constants.HANDLE;\n@@ -245,2 +394,2 @@\n-     * {@snippet :\n-     * CXString clang_getFileName(CXFile SFile);\n+     * {@snippet lang=c :\n+     * CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)\n@@ -249,2 +398,2 @@\n-    public static MemorySegment clang_getFileName(SegmentAllocator allocator, MemorySegment SFile) {\n-        var mh$ = clang_getFileName$MH();\n+    public static MemorySegment clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics) {\n+        var mh$ = clang_createIndex$constants.HANDLE;\n@@ -252,1 +401,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, SFile);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_createIndex\", excludeDeclarationsFromPCH, displayDiagnostics);\n+            }\n+            return (MemorySegment)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n@@ -254,1 +406,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -257,2 +409,9 @@\n-    public static MethodHandle clang_getNullLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_getNullLocation$MH,\"clang_getNullLocation\");\n+\n+    private static class clang_disposeIndex$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_disposeIndex\"),\n+                    DESC);\n@@ -260,0 +419,1 @@\n+\n@@ -261,2 +421,3 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getNullLocation();\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n@@ -265,10 +426,2 @@\n-    public static MemorySegment clang_getNullLocation(SegmentAllocator allocator) {\n-        var mh$ = clang_getNullLocation$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_equalLocations$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_equalLocations$MH,\"clang_equalLocations\");\n+    public static FunctionDescriptor clang_disposeIndex$descriptor() {\n+        return clang_disposeIndex$constants.DESC;\n@@ -276,0 +429,1 @@\n+\n@@ -277,2 +431,3 @@\n-     * {@snippet :\n-     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2);\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n@@ -281,10 +436,2 @@\n-    public static int clang_equalLocations(MemorySegment loc1, MemorySegment loc2) {\n-        var mh$ = clang_equalLocations$MH();\n-        try {\n-            return (int)mh$.invokeExact(loc1, loc2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_getLocation$MH,\"clang_getLocation\");\n+    public static MethodHandle clang_disposeIndex$handle() {\n+        return clang_disposeIndex$constants.HANDLE;\n@@ -293,2 +440,2 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column);\n+     * {@snippet lang=c :\n+     * void clang_disposeIndex(CXIndex index)\n@@ -297,2 +444,2 @@\n-    public static MemorySegment clang_getLocation(SegmentAllocator allocator, MemorySegment tu, MemorySegment file, int line, int column) {\n-        var mh$ = clang_getLocation$MH();\n+    public static void clang_disposeIndex(MemorySegment index) {\n+        var mh$ = clang_disposeIndex$constants.HANDLE;\n@@ -300,1 +447,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, line, column);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeIndex\", index);\n+            }\n+            mh$.invokeExact(index);\n@@ -302,1 +452,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -305,2 +455,10 @@\n-    public static MethodHandle clang_getLocationForOffset$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_getLocationForOffset$MH,\"clang_getLocationForOffset\");\n+\n+    private static class clang_getFileName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getFileName\"),\n+                    DESC);\n@@ -308,0 +466,1 @@\n+\n@@ -309,2 +468,3 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n@@ -313,10 +473,2 @@\n-    public static MemorySegment clang_getLocationForOffset(SegmentAllocator allocator, MemorySegment tu, MemorySegment file, int offset) {\n-        var mh$ = clang_getLocationForOffset$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, offset);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Location_isInSystemHeader$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_Location_isInSystemHeader$MH,\"clang_Location_isInSystemHeader\");\n+    public static FunctionDescriptor clang_getFileName$descriptor() {\n+        return clang_getFileName$constants.DESC;\n@@ -324,0 +476,1 @@\n+\n@@ -325,2 +478,3 @@\n-     * {@snippet :\n-     * int clang_Location_isInSystemHeader(CXSourceLocation location);\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n@@ -329,10 +483,2 @@\n-    public static int clang_Location_isInSystemHeader(MemorySegment location) {\n-        var mh$ = clang_Location_isInSystemHeader$MH();\n-        try {\n-            return (int)mh$.invokeExact(location);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Location_isFromMainFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_Location_isFromMainFile$MH,\"clang_Location_isFromMainFile\");\n+    public static MethodHandle clang_getFileName$handle() {\n+        return clang_getFileName$constants.HANDLE;\n@@ -341,2 +487,2 @@\n-     * {@snippet :\n-     * int clang_Location_isFromMainFile(CXSourceLocation location);\n+     * {@snippet lang=c :\n+     * CXString clang_getFileName(CXFile SFile)\n@@ -345,2 +491,2 @@\n-    public static int clang_Location_isFromMainFile(MemorySegment location) {\n-        var mh$ = clang_Location_isFromMainFile$MH();\n+    public static MemorySegment clang_getFileName(SegmentAllocator allocator, MemorySegment SFile) {\n+        var mh$ = clang_getFileName$constants.HANDLE;\n@@ -348,1 +494,4 @@\n-            return (int)mh$.invokeExact(location);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFileName\", allocator, SFile);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, SFile);\n@@ -350,1 +499,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -353,2 +502,8 @@\n-    public static MethodHandle clang_Range_isNull$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_Range_isNull$MH,\"clang_Range_isNull\");\n+\n+    private static class clang_getNullLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout()    );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getNullLocation\"),\n+                    DESC);\n@@ -356,0 +511,1 @@\n+\n@@ -357,2 +513,3 @@\n-     * {@snippet :\n-     * int clang_Range_isNull(CXSourceRange range);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n@@ -361,7 +518,2 @@\n-    public static int clang_Range_isNull(MemorySegment range) {\n-        var mh$ = clang_Range_isNull$MH();\n-        try {\n-            return (int)mh$.invokeExact(range);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getNullLocation$descriptor() {\n+        return clang_getNullLocation$constants.DESC;\n@@ -369,2 +521,9 @@\n-    public static MethodHandle clang_getExpansionLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getExpansionLocation$MH,\"clang_getExpansionLocation\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNullLocation$handle() {\n+        return clang_getNullLocation$constants.HANDLE;\n@@ -373,2 +532,2 @@\n-     * {@snippet :\n-     * void clang_getExpansionLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getNullLocation()\n@@ -377,2 +536,2 @@\n-    public static void clang_getExpansionLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n-        var mh$ = clang_getExpansionLocation$MH();\n+    public static MemorySegment clang_getNullLocation(SegmentAllocator allocator) {\n+        var mh$ = clang_getNullLocation$constants.HANDLE;\n@@ -380,1 +539,4 @@\n-            mh$.invokeExact(location, file, line, column, offset);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNullLocation\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n@@ -382,1 +544,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -385,2 +547,11 @@\n-    public static MethodHandle clang_getSpellingLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getSpellingLocation$MH,\"clang_getSpellingLocation\");\n+\n+    private static class clang_equalLocations$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout(),\n+            CXSourceLocation.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_equalLocations\"),\n+                    DESC);\n@@ -388,0 +559,1 @@\n+\n@@ -389,2 +561,3 @@\n-     * {@snippet :\n-     * void clang_getSpellingLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n@@ -393,7 +566,2 @@\n-    public static void clang_getSpellingLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n-        var mh$ = clang_getSpellingLocation$MH();\n-        try {\n-            mh$.invokeExact(location, file, line, column, offset);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_equalLocations$descriptor() {\n+        return clang_equalLocations$constants.DESC;\n@@ -401,2 +569,9 @@\n-    public static MethodHandle clang_getFileLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getFileLocation$MH,\"clang_getFileLocation\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n+     * }\n+     *\/\n+    public static MethodHandle clang_equalLocations$handle() {\n+        return clang_equalLocations$constants.HANDLE;\n@@ -405,2 +580,2 @@\n-     * {@snippet :\n-     * void clang_getFileLocation(CXSourceLocation location, CXFile* file, unsigned int* line, unsigned int* column, unsigned int* offset);\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalLocations(CXSourceLocation loc1, CXSourceLocation loc2)\n@@ -409,2 +584,2 @@\n-    public static void clang_getFileLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n-        var mh$ = clang_getFileLocation$MH();\n+    public static int clang_equalLocations(MemorySegment loc1, MemorySegment loc2) {\n+        var mh$ = clang_equalLocations$constants.HANDLE;\n@@ -412,1 +587,4 @@\n-            mh$.invokeExact(location, file, line, column, offset);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalLocations\", loc1, loc2);\n+            }\n+            return (int)mh$.invokeExact(loc1, loc2);\n@@ -414,1 +592,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -417,2 +595,13 @@\n-    public static MethodHandle clang_getRangeStart$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getRangeStart$MH,\"clang_getRangeStart\");\n+\n+    private static class clang_getLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getLocation\"),\n+                    DESC);\n@@ -420,0 +609,1 @@\n+\n@@ -421,2 +611,3 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getRangeStart(CXSourceRange range);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n@@ -425,7 +616,2 @@\n-    public static MemorySegment clang_getRangeStart(SegmentAllocator allocator, MemorySegment range) {\n-        var mh$ = clang_getRangeStart$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getLocation$descriptor() {\n+        return clang_getLocation$constants.DESC;\n@@ -433,2 +619,9 @@\n-    public static MethodHandle clang_getRangeEnd$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getRangeEnd$MH,\"clang_getRangeEnd\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getLocation$handle() {\n+        return clang_getLocation$constants.HANDLE;\n@@ -437,2 +630,2 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getRangeEnd(CXSourceRange range);\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocation(CXTranslationUnit tu, CXFile file, unsigned int line, unsigned int column)\n@@ -441,2 +634,2 @@\n-    public static MemorySegment clang_getRangeEnd(SegmentAllocator allocator, MemorySegment range) {\n-        var mh$ = clang_getRangeEnd$MH();\n+    public static MemorySegment clang_getLocation(SegmentAllocator allocator, MemorySegment tu, MemorySegment file, int line, int column) {\n+        var mh$ = clang_getLocation$constants.HANDLE;\n@@ -444,1 +637,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getLocation\", allocator, tu, file, line, column);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, tu, file, line, column);\n@@ -446,1 +642,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -449,0 +645,14 @@\n+\n+    private static class clang_getLocationForOffset$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getLocationForOffset\"),\n+                    DESC);\n+    }\n+\n@@ -450,2 +660,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Ignored = 0;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n@@ -454,2 +665,2 @@\n-    public static int CXDiagnostic_Ignored() {\n-        return (int)0L;\n+    public static FunctionDescriptor clang_getLocationForOffset$descriptor() {\n+        return clang_getLocationForOffset$constants.DESC;\n@@ -457,0 +668,1 @@\n+\n@@ -458,2 +670,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Note = 1;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n@@ -462,2 +675,2 @@\n-    public static int CXDiagnostic_Note() {\n-        return (int)1L;\n+    public static MethodHandle clang_getLocationForOffset$handle() {\n+        return clang_getLocationForOffset$constants.HANDLE;\n@@ -466,2 +679,2 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Warning = 2;\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getLocationForOffset(CXTranslationUnit tu, CXFile file, unsigned int offset)\n@@ -470,2 +683,21 @@\n-    public static int CXDiagnostic_Warning() {\n-        return (int)2L;\n+    public static MemorySegment clang_getLocationForOffset(SegmentAllocator allocator, MemorySegment tu, MemorySegment file, int offset) {\n+        var mh$ = clang_getLocationForOffset$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getLocationForOffset\", allocator, tu, file, offset);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, tu, file, offset);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Location_isInSystemHeader$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Location_isInSystemHeader\"),\n+                    DESC);\n@@ -473,0 +705,1 @@\n+\n@@ -474,2 +707,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Error = 3;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n@@ -478,2 +712,2 @@\n-    public static int CXDiagnostic_Error() {\n-        return (int)3L;\n+    public static FunctionDescriptor clang_Location_isInSystemHeader$descriptor() {\n+        return clang_Location_isInSystemHeader$constants.DESC;\n@@ -481,0 +715,1 @@\n+\n@@ -482,2 +717,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity.CXDiagnostic_Fatal = 4;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n@@ -486,5 +722,2 @@\n-    public static int CXDiagnostic_Fatal() {\n-        return (int)4L;\n-    }\n-    public static MethodHandle clang_getChildDiagnostics$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getChildDiagnostics$MH,\"clang_getChildDiagnostics\");\n+    public static MethodHandle clang_Location_isInSystemHeader$handle() {\n+        return clang_Location_isInSystemHeader$constants.HANDLE;\n@@ -493,2 +726,2 @@\n-     * {@snippet :\n-     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D);\n+     * {@snippet lang=c :\n+     * int clang_Location_isInSystemHeader(CXSourceLocation location)\n@@ -497,2 +730,2 @@\n-    public static MemorySegment clang_getChildDiagnostics(MemorySegment D) {\n-        var mh$ = clang_getChildDiagnostics$MH();\n+    public static int clang_Location_isInSystemHeader(MemorySegment location) {\n+        var mh$ = clang_Location_isInSystemHeader$constants.HANDLE;\n@@ -500,1 +733,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(D);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Location_isInSystemHeader\", location);\n+            }\n+            return (int)mh$.invokeExact(location);\n@@ -502,1 +738,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -505,2 +741,10 @@\n-    public static MethodHandle clang_getNumDiagnostics$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getNumDiagnostics$MH,\"clang_getNumDiagnostics\");\n+\n+    private static class clang_Location_isFromMainFile$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceLocation.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Location_isFromMainFile\"),\n+                    DESC);\n@@ -508,0 +752,1 @@\n+\n@@ -509,2 +754,3 @@\n-     * {@snippet :\n-     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n@@ -513,10 +759,2 @@\n-    public static int clang_getNumDiagnostics(MemorySegment Unit) {\n-        var mh$ = clang_getNumDiagnostics$MH();\n-        try {\n-            return (int)mh$.invokeExact(Unit);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDiagnostic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getDiagnostic$MH,\"clang_getDiagnostic\");\n+    public static FunctionDescriptor clang_Location_isFromMainFile$descriptor() {\n+        return clang_Location_isFromMainFile$constants.DESC;\n@@ -524,0 +762,1 @@\n+\n@@ -525,2 +764,3 @@\n-     * {@snippet :\n-     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index);\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n@@ -529,10 +769,2 @@\n-    public static MemorySegment clang_getDiagnostic(MemorySegment Unit, int Index) {\n-        var mh$ = clang_getDiagnostic$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Unit, Index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeDiagnostic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_disposeDiagnostic$MH,\"clang_disposeDiagnostic\");\n+    public static MethodHandle clang_Location_isFromMainFile$handle() {\n+        return clang_Location_isFromMainFile$constants.HANDLE;\n@@ -541,2 +773,2 @@\n-     * {@snippet :\n-     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic);\n+     * {@snippet lang=c :\n+     * int clang_Location_isFromMainFile(CXSourceLocation location)\n@@ -545,2 +777,2 @@\n-    public static void clang_disposeDiagnostic(MemorySegment Diagnostic) {\n-        var mh$ = clang_disposeDiagnostic$MH();\n+    public static int clang_Location_isFromMainFile(MemorySegment location) {\n+        var mh$ = clang_Location_isFromMainFile$constants.HANDLE;\n@@ -548,1 +780,4 @@\n-            mh$.invokeExact(Diagnostic);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Location_isFromMainFile\", location);\n+            }\n+            return (int)mh$.invokeExact(location);\n@@ -550,1 +785,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -553,7 +788,10 @@\n-    \/**\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation = 1;\n-     * }\n-     *\/\n-    public static int CXDiagnostic_DisplaySourceLocation() {\n-        return (int)1L;\n+\n+    private static class clang_Range_isNull$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXSourceRange.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Range_isNull\"),\n+                    DESC);\n@@ -561,0 +799,1 @@\n+\n@@ -562,2 +801,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayColumn = 2;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n@@ -566,2 +806,2 @@\n-    public static int CXDiagnostic_DisplayColumn() {\n-        return (int)2L;\n+    public static FunctionDescriptor clang_Range_isNull$descriptor() {\n+        return clang_Range_isNull$constants.DESC;\n@@ -569,0 +809,1 @@\n+\n@@ -570,2 +811,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges = 4;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n@@ -574,2 +816,2 @@\n-    public static int CXDiagnostic_DisplaySourceRanges() {\n-        return (int)4L;\n+    public static MethodHandle clang_Range_isNull$handle() {\n+        return clang_Range_isNull$constants.HANDLE;\n@@ -578,2 +820,2 @@\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayOption = 8;\n+     * {@snippet lang=c :\n+     * int clang_Range_isNull(CXSourceRange range)\n@@ -582,2 +824,24 @@\n-    public static int CXDiagnostic_DisplayOption() {\n-        return (int)8L;\n+    public static int clang_Range_isNull(MemorySegment range) {\n+        var mh$ = clang_Range_isNull$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Range_isNull\", range);\n+            }\n+            return (int)mh$.invokeExact(range);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getExpansionLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getExpansionLocation\"),\n+                    DESC);\n@@ -585,0 +849,1 @@\n+\n@@ -586,2 +851,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryId = 16;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -590,2 +856,2 @@\n-    public static int CXDiagnostic_DisplayCategoryId() {\n-        return (int)16L;\n+    public static FunctionDescriptor clang_getExpansionLocation$descriptor() {\n+        return clang_getExpansionLocation$constants.DESC;\n@@ -593,0 +859,1 @@\n+\n@@ -594,2 +861,3 @@\n-     * {@snippet :\n-     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryName = 32;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -598,5 +866,2 @@\n-    public static int CXDiagnostic_DisplayCategoryName() {\n-        return (int)32L;\n-    }\n-    public static MethodHandle clang_formatDiagnostic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_formatDiagnostic$MH,\"clang_formatDiagnostic\");\n+    public static MethodHandle clang_getExpansionLocation$handle() {\n+        return clang_getExpansionLocation$constants.HANDLE;\n@@ -605,2 +870,2 @@\n-     * {@snippet :\n-     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options);\n+     * {@snippet lang=c :\n+     * void clang_getExpansionLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -609,2 +874,2 @@\n-    public static MemorySegment clang_formatDiagnostic(SegmentAllocator allocator, MemorySegment Diagnostic, int Options) {\n-        var mh$ = clang_formatDiagnostic$MH();\n+    public static void clang_getExpansionLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n+        var mh$ = clang_getExpansionLocation$constants.HANDLE;\n@@ -612,1 +877,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic, Options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getExpansionLocation\", location, file, line, column, offset);\n+            }\n+            mh$.invokeExact(location, file, line, column, offset);\n@@ -614,1 +882,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -617,2 +885,13 @@\n-    public static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_defaultDiagnosticDisplayOptions$MH,\"clang_defaultDiagnosticDisplayOptions\");\n+\n+    private static class clang_getSpellingLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getSpellingLocation\"),\n+                    DESC);\n@@ -620,0 +899,1 @@\n+\n@@ -621,2 +901,3 @@\n-     * {@snippet :\n-     * unsigned int clang_defaultDiagnosticDisplayOptions();\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -625,7 +906,2 @@\n-    public static int clang_defaultDiagnosticDisplayOptions() {\n-        var mh$ = clang_defaultDiagnosticDisplayOptions$MH();\n-        try {\n-            return (int)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getSpellingLocation$descriptor() {\n+        return clang_getSpellingLocation$constants.DESC;\n@@ -633,2 +909,9 @@\n-    public static MethodHandle clang_getDiagnosticSeverity$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getDiagnosticSeverity$MH,\"clang_getDiagnosticSeverity\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getSpellingLocation$handle() {\n+        return clang_getSpellingLocation$constants.HANDLE;\n@@ -637,2 +920,2 @@\n-     * {@snippet :\n-     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic);\n+     * {@snippet lang=c :\n+     * void clang_getSpellingLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -641,2 +924,2 @@\n-    public static int clang_getDiagnosticSeverity(MemorySegment x0) {\n-        var mh$ = clang_getDiagnosticSeverity$MH();\n+    public static void clang_getSpellingLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n+        var mh$ = clang_getSpellingLocation$constants.HANDLE;\n@@ -644,1 +927,4 @@\n-            return (int)mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getSpellingLocation\", location, file, line, column, offset);\n+            }\n+            mh$.invokeExact(location, file, line, column, offset);\n@@ -646,1 +932,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -649,2 +935,13 @@\n-    public static MethodHandle clang_getDiagnosticLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticLocation$MH,\"clang_getDiagnosticLocation\");\n+\n+    private static class clang_getFileLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getFileLocation\"),\n+                    DESC);\n@@ -652,0 +949,1 @@\n+\n@@ -653,2 +951,3 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -657,7 +956,2 @@\n-    public static MemorySegment clang_getDiagnosticLocation(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getDiagnosticLocation$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getFileLocation$descriptor() {\n+        return clang_getFileLocation$constants.DESC;\n@@ -665,2 +959,9 @@\n-    public static MethodHandle clang_getDiagnosticSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticSpelling$MH,\"clang_getDiagnosticSpelling\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFileLocation$handle() {\n+        return clang_getFileLocation$constants.HANDLE;\n@@ -669,2 +970,2 @@\n-     * {@snippet :\n-     * CXString clang_getDiagnosticSpelling(CXDiagnostic);\n+     * {@snippet lang=c :\n+     * void clang_getFileLocation(CXSourceLocation location, CXFile *file, unsigned int *line, unsigned int *column, unsigned int *offset)\n@@ -673,2 +974,2 @@\n-    public static MemorySegment clang_getDiagnosticSpelling(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getDiagnosticSpelling$MH();\n+    public static void clang_getFileLocation(MemorySegment location, MemorySegment file, MemorySegment line, MemorySegment column, MemorySegment offset) {\n+        var mh$ = clang_getFileLocation$constants.HANDLE;\n@@ -676,1 +977,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFileLocation\", location, file, line, column, offset);\n+            }\n+            mh$.invokeExact(location, file, line, column, offset);\n@@ -678,1 +982,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -681,7 +985,10 @@\n-    \/**\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_None = 0;\n-     * }\n-     *\/\n-    public static int CXTranslationUnit_None() {\n-        return (int)0L;\n+\n+    private static class clang_getRangeStart$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXSourceRange.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getRangeStart\"),\n+                    DESC);\n@@ -689,0 +996,1 @@\n+\n@@ -690,2 +998,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord = 1;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n@@ -694,2 +1003,2 @@\n-    public static int CXTranslationUnit_DetailedPreprocessingRecord() {\n-        return (int)1L;\n+    public static FunctionDescriptor clang_getRangeStart$descriptor() {\n+        return clang_getRangeStart$constants.DESC;\n@@ -697,0 +1006,1 @@\n+\n@@ -698,2 +1008,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_Incomplete = 2;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n@@ -702,2 +1013,2 @@\n-    public static int CXTranslationUnit_Incomplete() {\n-        return (int)2L;\n+    public static MethodHandle clang_getRangeStart$handle() {\n+        return clang_getRangeStart$constants.HANDLE;\n@@ -706,2 +1017,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_PrecompiledPreamble = 4;\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeStart(CXSourceRange range)\n@@ -710,2 +1021,21 @@\n-    public static int CXTranslationUnit_PrecompiledPreamble() {\n-        return (int)4L;\n+    public static MemorySegment clang_getRangeStart(SegmentAllocator allocator, MemorySegment range) {\n+        var mh$ = clang_getRangeStart$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getRangeStart\", allocator, range);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, range);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getRangeEnd$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXSourceRange.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getRangeEnd\"),\n+                    DESC);\n@@ -713,0 +1043,1 @@\n+\n@@ -714,2 +1045,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CacheCompletionResults = 8;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n@@ -718,2 +1050,2 @@\n-    public static int CXTranslationUnit_CacheCompletionResults() {\n-        return (int)8L;\n+    public static FunctionDescriptor clang_getRangeEnd$descriptor() {\n+        return clang_getRangeEnd$constants.DESC;\n@@ -721,0 +1053,1 @@\n+\n@@ -722,2 +1055,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_ForSerialization = 16;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n@@ -726,2 +1060,2 @@\n-    public static int CXTranslationUnit_ForSerialization() {\n-        return (int)16L;\n+    public static MethodHandle clang_getRangeEnd$handle() {\n+        return clang_getRangeEnd$constants.HANDLE;\n@@ -730,2 +1064,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CXXChainedPCH = 32;\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getRangeEnd(CXSourceRange range)\n@@ -734,2 +1068,10 @@\n-    public static int CXTranslationUnit_CXXChainedPCH() {\n-        return (int)32L;\n+    public static MemorySegment clang_getRangeEnd(SegmentAllocator allocator, MemorySegment range) {\n+        var mh$ = clang_getRangeEnd$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getRangeEnd\", allocator, range);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, range);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -737,0 +1079,1 @@\n+    private static final int CXDiagnostic_Ignored = (int)0L;\n@@ -738,2 +1081,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies = 64;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Ignored = 0\n@@ -742,2 +1085,2 @@\n-    public static int CXTranslationUnit_SkipFunctionBodies() {\n-        return (int)64L;\n+    public static int CXDiagnostic_Ignored() {\n+        return CXDiagnostic_Ignored;\n@@ -745,0 +1088,1 @@\n+    private static final int CXDiagnostic_Note = (int)1L;\n@@ -746,2 +1090,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Note = 1\n@@ -750,2 +1094,2 @@\n-    public static int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() {\n-        return (int)128L;\n+    public static int CXDiagnostic_Note() {\n+        return CXDiagnostic_Note;\n@@ -753,0 +1097,1 @@\n+    private static final int CXDiagnostic_Warning = (int)2L;\n@@ -754,2 +1099,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_CreatePreambleOnFirstParse = 256;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Warning = 2\n@@ -758,2 +1103,2 @@\n-    public static int CXTranslationUnit_CreatePreambleOnFirstParse() {\n-        return (int)256L;\n+    public static int CXDiagnostic_Warning() {\n+        return CXDiagnostic_Warning;\n@@ -761,0 +1106,1 @@\n+    private static final int CXDiagnostic_Error = (int)3L;\n@@ -762,2 +1108,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_KeepGoing = 512;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Error = 3\n@@ -766,2 +1112,2 @@\n-    public static int CXTranslationUnit_KeepGoing() {\n-        return (int)512L;\n+    public static int CXDiagnostic_Error() {\n+        return CXDiagnostic_Error;\n@@ -769,0 +1115,1 @@\n+    private static final int CXDiagnostic_Fatal = (int)4L;\n@@ -770,2 +1117,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse = 1024;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity.CXDiagnostic_Fatal = 4\n@@ -774,2 +1121,13 @@\n-    public static int CXTranslationUnit_SingleFileParse() {\n-        return (int)1024L;\n+    public static int CXDiagnostic_Fatal() {\n+        return CXDiagnostic_Fatal;\n+    }\n+\n+    private static class clang_getChildDiagnostics$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getChildDiagnostics\"),\n+                    DESC);\n@@ -777,0 +1135,1 @@\n+\n@@ -778,2 +1137,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n@@ -782,2 +1142,2 @@\n-    public static int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() {\n-        return (int)2048L;\n+    public static FunctionDescriptor clang_getChildDiagnostics$descriptor() {\n+        return clang_getChildDiagnostics$constants.DESC;\n@@ -785,0 +1145,1 @@\n+\n@@ -786,2 +1147,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeAttributedTypes = 4096;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n@@ -790,2 +1152,2 @@\n-    public static int CXTranslationUnit_IncludeAttributedTypes() {\n-        return (int)4096L;\n+    public static MethodHandle clang_getChildDiagnostics$handle() {\n+        return clang_getChildDiagnostics$constants.HANDLE;\n@@ -794,2 +1156,2 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_VisitImplicitAttributes = 8192;\n+     * {@snippet lang=c :\n+     * CXDiagnosticSet clang_getChildDiagnostics(CXDiagnostic D)\n@@ -798,2 +1160,21 @@\n-    public static int CXTranslationUnit_VisitImplicitAttributes() {\n-        return (int)8192L;\n+    public static MemorySegment clang_getChildDiagnostics(MemorySegment D) {\n+        var mh$ = clang_getChildDiagnostics$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getChildDiagnostics\", D);\n+            }\n+            return (MemorySegment)mh$.invokeExact(D);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getNumDiagnostics$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getNumDiagnostics\"),\n+                    DESC);\n@@ -801,0 +1182,1 @@\n+\n@@ -802,2 +1184,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n@@ -806,2 +1189,2 @@\n-    public static int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() {\n-        return (int)16384L;\n+    public static FunctionDescriptor clang_getNumDiagnostics$descriptor() {\n+        return clang_getNumDiagnostics$constants.DESC;\n@@ -809,0 +1192,1 @@\n+\n@@ -810,2 +1194,3 @@\n-     * {@snippet :\n-     * enum CXTranslationUnit_Flags.CXTranslationUnit_RetainExcludedConditionalBlocks = 32768;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n@@ -814,5 +1199,2 @@\n-    public static int CXTranslationUnit_RetainExcludedConditionalBlocks() {\n-        return (int)32768L;\n-    }\n-    public static MethodHandle clang_parseTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit$MH,\"clang_parseTranslationUnit\");\n+    public static MethodHandle clang_getNumDiagnostics$handle() {\n+        return clang_getNumDiagnostics$constants.HANDLE;\n@@ -821,2 +1203,2 @@\n-     * {@snippet :\n-     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, char* source_filename, char** command_line_args, int num_command_line_args, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files, unsigned int options);\n+     * {@snippet lang=c :\n+     * unsigned int clang_getNumDiagnostics(CXTranslationUnit Unit)\n@@ -825,2 +1207,2 @@\n-    public static MemorySegment clang_parseTranslationUnit(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options) {\n-        var mh$ = clang_parseTranslationUnit$MH();\n+    public static int clang_getNumDiagnostics(MemorySegment Unit) {\n+        var mh$ = clang_getNumDiagnostics$constants.HANDLE;\n@@ -828,1 +1210,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumDiagnostics\", Unit);\n+            }\n+            return (int)mh$.invokeExact(Unit);\n@@ -830,1 +1215,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -833,2 +1218,11 @@\n-    public static MethodHandle clang_parseTranslationUnit2$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit2$MH,\"clang_parseTranslationUnit2\");\n+\n+    private static class clang_getDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getDiagnostic\"),\n+                    DESC);\n@@ -836,0 +1230,1 @@\n+\n@@ -837,2 +1232,3 @@\n-     * {@snippet :\n-     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, char* source_filename, char** command_line_args, int num_command_line_args, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit* out_TU);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n@@ -841,7 +1237,2 @@\n-    public static int clang_parseTranslationUnit2(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options, MemorySegment out_TU) {\n-        var mh$ = clang_parseTranslationUnit2$MH();\n-        try {\n-            return (int)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getDiagnostic$descriptor() {\n+        return clang_getDiagnostic$constants.DESC;\n@@ -849,0 +1240,1 @@\n+\n@@ -850,2 +1242,3 @@\n-     * {@snippet :\n-     * enum CXSaveTranslationUnit_Flags.CXSaveTranslationUnit_None = 0;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n@@ -854,2 +1247,2 @@\n-    public static int CXSaveTranslationUnit_None() {\n-        return (int)0L;\n+    public static MethodHandle clang_getDiagnostic$handle() {\n+        return clang_getDiagnostic$constants.HANDLE;\n@@ -858,2 +1251,2 @@\n-     * {@snippet :\n-     * enum CXSaveError.CXSaveError_None = 0;\n+     * {@snippet lang=c :\n+     * CXDiagnostic clang_getDiagnostic(CXTranslationUnit Unit, unsigned int Index)\n@@ -862,2 +1255,10 @@\n-    public static int CXSaveError_None() {\n-        return (int)0L;\n+    public static MemorySegment clang_getDiagnostic(MemorySegment Unit, int Index) {\n+        var mh$ = clang_getDiagnostic$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnostic\", Unit, Index);\n+            }\n+            return (MemorySegment)mh$.invokeExact(Unit, Index);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -865,7 +1266,9 @@\n-    \/**\n-     * {@snippet :\n-     * enum CXSaveError.CXSaveError_Unknown = 1;\n-     * }\n-     *\/\n-    public static int CXSaveError_Unknown() {\n-        return (int)1L;\n+\n+    private static class clang_disposeDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_disposeDiagnostic\"),\n+                    DESC);\n@@ -873,0 +1276,1 @@\n+\n@@ -874,2 +1278,3 @@\n-     * {@snippet :\n-     * enum CXSaveError.CXSaveError_TranslationErrors = 2;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n@@ -878,2 +1283,2 @@\n-    public static int CXSaveError_TranslationErrors() {\n-        return (int)2L;\n+    public static FunctionDescriptor clang_disposeDiagnostic$descriptor() {\n+        return clang_disposeDiagnostic$constants.DESC;\n@@ -881,0 +1286,1 @@\n+\n@@ -882,2 +1288,3 @@\n-     * {@snippet :\n-     * enum CXSaveError.CXSaveError_InvalidTU = 3;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n@@ -886,5 +1293,2 @@\n-    public static int CXSaveError_InvalidTU() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_saveTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_saveTranslationUnit$MH,\"clang_saveTranslationUnit\");\n+    public static MethodHandle clang_disposeDiagnostic$handle() {\n+        return clang_disposeDiagnostic$constants.HANDLE;\n@@ -893,2 +1297,2 @@\n-     * {@snippet :\n-     * int clang_saveTranslationUnit(CXTranslationUnit TU, char* FileName, unsigned int options);\n+     * {@snippet lang=c :\n+     * void clang_disposeDiagnostic(CXDiagnostic Diagnostic)\n@@ -897,2 +1301,2 @@\n-    public static int clang_saveTranslationUnit(MemorySegment TU, MemorySegment FileName, int options) {\n-        var mh$ = clang_saveTranslationUnit$MH();\n+    public static void clang_disposeDiagnostic(MemorySegment Diagnostic) {\n+        var mh$ = clang_disposeDiagnostic$constants.HANDLE;\n@@ -900,1 +1304,4 @@\n-            return (int)mh$.invokeExact(TU, FileName, options);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeDiagnostic\", Diagnostic);\n+            }\n+            mh$.invokeExact(Diagnostic);\n@@ -902,1 +1309,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -905,3 +1312,1 @@\n-    public static MethodHandle clang_disposeTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_disposeTranslationUnit$MH,\"clang_disposeTranslationUnit\");\n-    }\n+    private static final int CXDiagnostic_DisplaySourceLocation = (int)1L;\n@@ -909,2 +1314,2 @@\n-     * {@snippet :\n-     * void clang_disposeTranslationUnit(CXTranslationUnit);\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation = 1\n@@ -913,7 +1318,2 @@\n-    public static void clang_disposeTranslationUnit(MemorySegment x0) {\n-        var mh$ = clang_disposeTranslationUnit$MH();\n-        try {\n-            mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXDiagnostic_DisplaySourceLocation() {\n+        return CXDiagnostic_DisplaySourceLocation;\n@@ -921,0 +1321,1 @@\n+    private static final int CXDiagnostic_DisplayColumn = (int)2L;\n@@ -922,2 +1323,2 @@\n-     * {@snippet :\n-     * enum CXReparse_Flags.CXReparse_None = 0;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayColumn = 2\n@@ -926,5 +1327,2 @@\n-    public static int CXReparse_None() {\n-        return (int)0L;\n-    }\n-    public static MethodHandle clang_defaultReparseOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_defaultReparseOptions$MH,\"clang_defaultReparseOptions\");\n+    public static int CXDiagnostic_DisplayColumn() {\n+        return CXDiagnostic_DisplayColumn;\n@@ -932,0 +1330,1 @@\n+    private static final int CXDiagnostic_DisplaySourceRanges = (int)4L;\n@@ -933,2 +1332,2 @@\n-     * {@snippet :\n-     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU);\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges = 4\n@@ -937,10 +1336,2 @@\n-    public static int clang_defaultReparseOptions(MemorySegment TU) {\n-        var mh$ = clang_defaultReparseOptions$MH();\n-        try {\n-            return (int)mh$.invokeExact(TU);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_reparseTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_reparseTranslationUnit$MH,\"clang_reparseTranslationUnit\");\n+    public static int CXDiagnostic_DisplaySourceRanges() {\n+        return CXDiagnostic_DisplaySourceRanges;\n@@ -948,0 +1339,1 @@\n+    private static final int CXDiagnostic_DisplayOption = (int)8L;\n@@ -949,2 +1341,2 @@\n-     * {@snippet :\n-     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile* unsaved_files, unsigned int options);\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayOption = 8\n@@ -953,7 +1345,2 @@\n-    public static int clang_reparseTranslationUnit(MemorySegment TU, int num_unsaved_files, MemorySegment unsaved_files, int options) {\n-        var mh$ = clang_reparseTranslationUnit$MH();\n-        try {\n-            return (int)mh$.invokeExact(TU, num_unsaved_files, unsaved_files, options);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXDiagnostic_DisplayOption() {\n+        return CXDiagnostic_DisplayOption;\n@@ -961,0 +1348,1 @@\n+    private static final int CXDiagnostic_DisplayCategoryId = (int)16L;\n@@ -962,2 +1350,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnexposedDecl = 1;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryId = 16\n@@ -966,2 +1354,2 @@\n-    public static int CXCursor_UnexposedDecl() {\n-        return (int)1L;\n+    public static int CXDiagnostic_DisplayCategoryId() {\n+        return CXDiagnostic_DisplayCategoryId;\n@@ -969,0 +1357,1 @@\n+    private static final int CXDiagnostic_DisplayCategoryName = (int)32L;\n@@ -970,2 +1359,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_StructDecl = 2;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticDisplayOptions.CXDiagnostic_DisplayCategoryName = 32\n@@ -974,2 +1363,14 @@\n-    public static int CXCursor_StructDecl() {\n-        return (int)2L;\n+    public static int CXDiagnostic_DisplayCategoryName() {\n+        return CXDiagnostic_DisplayCategoryName;\n+    }\n+\n+    private static class clang_formatDiagnostic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_formatDiagnostic\"),\n+                    DESC);\n@@ -977,0 +1378,1 @@\n+\n@@ -978,2 +1380,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnionDecl = 3;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n@@ -982,2 +1385,2 @@\n-    public static int CXCursor_UnionDecl() {\n-        return (int)3L;\n+    public static FunctionDescriptor clang_formatDiagnostic$descriptor() {\n+        return clang_formatDiagnostic$constants.DESC;\n@@ -985,0 +1388,1 @@\n+\n@@ -986,2 +1390,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ClassDecl = 4;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n@@ -990,2 +1395,2 @@\n-    public static int CXCursor_ClassDecl() {\n-        return (int)4L;\n+    public static MethodHandle clang_formatDiagnostic$handle() {\n+        return clang_formatDiagnostic$constants.HANDLE;\n@@ -994,2 +1399,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_EnumDecl = 5;\n+     * {@snippet lang=c :\n+     * CXString clang_formatDiagnostic(CXDiagnostic Diagnostic, unsigned int Options)\n@@ -998,2 +1403,19 @@\n-    public static int CXCursor_EnumDecl() {\n-        return (int)5L;\n+    public static MemorySegment clang_formatDiagnostic(SegmentAllocator allocator, MemorySegment Diagnostic, int Options) {\n+        var mh$ = clang_formatDiagnostic$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_formatDiagnostic\", allocator, Diagnostic, Options);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Diagnostic, Options);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_defaultDiagnosticDisplayOptions$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT    );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_defaultDiagnosticDisplayOptions\"),\n+                    DESC);\n@@ -1001,0 +1423,1 @@\n+\n@@ -1002,2 +1425,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FieldDecl = 6;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n@@ -1006,2 +1430,2 @@\n-    public static int CXCursor_FieldDecl() {\n-        return (int)6L;\n+    public static FunctionDescriptor clang_defaultDiagnosticDisplayOptions$descriptor() {\n+        return clang_defaultDiagnosticDisplayOptions$constants.DESC;\n@@ -1009,0 +1433,1 @@\n+\n@@ -1010,2 +1435,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_EnumConstantDecl = 7;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n@@ -1014,2 +1440,2 @@\n-    public static int CXCursor_EnumConstantDecl() {\n-        return (int)7L;\n+    public static MethodHandle clang_defaultDiagnosticDisplayOptions$handle() {\n+        return clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n@@ -1018,2 +1444,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FunctionDecl = 8;\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultDiagnosticDisplayOptions()\n@@ -1022,2 +1448,10 @@\n-    public static int CXCursor_FunctionDecl() {\n-        return (int)8L;\n+    public static int clang_defaultDiagnosticDisplayOptions() {\n+        var mh$ = clang_defaultDiagnosticDisplayOptions$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_defaultDiagnosticDisplayOptions\");\n+            }\n+            return (int)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1025,0 +1459,12 @@\n+\n+    private static class clang_getDiagnosticSeverity$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getDiagnosticSeverity\"),\n+                    DESC);\n+    }\n+\n@@ -1026,2 +1472,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_VarDecl = 9;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n@@ -1030,2 +1477,2 @@\n-    public static int CXCursor_VarDecl() {\n-        return (int)9L;\n+    public static FunctionDescriptor clang_getDiagnosticSeverity$descriptor() {\n+        return clang_getDiagnosticSeverity$constants.DESC;\n@@ -1033,0 +1480,1 @@\n+\n@@ -1034,2 +1482,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ParmDecl = 10;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n@@ -1038,2 +1487,2 @@\n-    public static int CXCursor_ParmDecl() {\n-        return (int)10L;\n+    public static MethodHandle clang_getDiagnosticSeverity$handle() {\n+        return clang_getDiagnosticSeverity$constants.HANDLE;\n@@ -1042,2 +1491,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCInterfaceDecl = 11;\n+     * {@snippet lang=c :\n+     * enum CXDiagnosticSeverity clang_getDiagnosticSeverity(CXDiagnostic)\n@@ -1046,2 +1495,21 @@\n-    public static int CXCursor_ObjCInterfaceDecl() {\n-        return (int)11L;\n+    public static int clang_getDiagnosticSeverity(MemorySegment x0) {\n+        var mh$ = clang_getDiagnosticSeverity$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticSeverity\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getDiagnosticLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getDiagnosticLocation\"),\n+                    DESC);\n@@ -1049,0 +1517,1 @@\n+\n@@ -1050,2 +1519,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCCategoryDecl = 12;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n@@ -1054,2 +1524,2 @@\n-    public static int CXCursor_ObjCCategoryDecl() {\n-        return (int)12L;\n+    public static FunctionDescriptor clang_getDiagnosticLocation$descriptor() {\n+        return clang_getDiagnosticLocation$constants.DESC;\n@@ -1057,0 +1527,1 @@\n+\n@@ -1058,2 +1529,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCProtocolDecl = 13;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n@@ -1062,2 +1534,2 @@\n-    public static int CXCursor_ObjCProtocolDecl() {\n-        return (int)13L;\n+    public static MethodHandle clang_getDiagnosticLocation$handle() {\n+        return clang_getDiagnosticLocation$constants.HANDLE;\n@@ -1066,2 +1538,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCPropertyDecl = 14;\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getDiagnosticLocation(CXDiagnostic)\n@@ -1070,2 +1542,10 @@\n-    public static int CXCursor_ObjCPropertyDecl() {\n-        return (int)14L;\n+    public static MemorySegment clang_getDiagnosticLocation(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getDiagnosticLocation$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticLocation\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1073,0 +1553,12 @@\n+\n+    private static class clang_getDiagnosticSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getDiagnosticSpelling\"),\n+                    DESC);\n+    }\n+\n@@ -1074,2 +1566,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCIvarDecl = 15;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n@@ -1078,2 +1571,2 @@\n-    public static int CXCursor_ObjCIvarDecl() {\n-        return (int)15L;\n+    public static FunctionDescriptor clang_getDiagnosticSpelling$descriptor() {\n+        return clang_getDiagnosticSpelling$constants.DESC;\n@@ -1081,0 +1574,1 @@\n+\n@@ -1082,2 +1576,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCInstanceMethodDecl = 16;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n@@ -1086,2 +1581,2 @@\n-    public static int CXCursor_ObjCInstanceMethodDecl() {\n-        return (int)16L;\n+    public static MethodHandle clang_getDiagnosticSpelling$handle() {\n+        return clang_getDiagnosticSpelling$constants.HANDLE;\n@@ -1090,2 +1585,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCClassMethodDecl = 17;\n+     * {@snippet lang=c :\n+     * CXString clang_getDiagnosticSpelling(CXDiagnostic)\n@@ -1094,2 +1589,10 @@\n-    public static int CXCursor_ObjCClassMethodDecl() {\n-        return (int)17L;\n+    public static MemorySegment clang_getDiagnosticSpelling(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getDiagnosticSpelling$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getDiagnosticSpelling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1097,0 +1600,1 @@\n+    private static final int CXTranslationUnit_None = (int)0L;\n@@ -1098,2 +1602,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCImplementationDecl = 18;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_None = 0\n@@ -1102,2 +1606,2 @@\n-    public static int CXCursor_ObjCImplementationDecl() {\n-        return (int)18L;\n+    public static int CXTranslationUnit_None() {\n+        return CXTranslationUnit_None;\n@@ -1105,0 +1609,1 @@\n+    private static final int CXTranslationUnit_DetailedPreprocessingRecord = (int)1L;\n@@ -1106,2 +1611,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCCategoryImplDecl = 19;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_DetailedPreprocessingRecord = 1\n@@ -1110,2 +1615,2 @@\n-    public static int CXCursor_ObjCCategoryImplDecl() {\n-        return (int)19L;\n+    public static int CXTranslationUnit_DetailedPreprocessingRecord() {\n+        return CXTranslationUnit_DetailedPreprocessingRecord;\n@@ -1113,0 +1618,1 @@\n+    private static final int CXTranslationUnit_Incomplete = (int)2L;\n@@ -1114,2 +1620,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TypedefDecl = 20;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_Incomplete = 2\n@@ -1118,2 +1624,2 @@\n-    public static int CXCursor_TypedefDecl() {\n-        return (int)20L;\n+    public static int CXTranslationUnit_Incomplete() {\n+        return CXTranslationUnit_Incomplete;\n@@ -1121,0 +1627,1 @@\n+    private static final int CXTranslationUnit_PrecompiledPreamble = (int)4L;\n@@ -1122,2 +1629,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXMethod = 21;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_PrecompiledPreamble = 4\n@@ -1126,2 +1633,2 @@\n-    public static int CXCursor_CXXMethod() {\n-        return (int)21L;\n+    public static int CXTranslationUnit_PrecompiledPreamble() {\n+        return CXTranslationUnit_PrecompiledPreamble;\n@@ -1129,0 +1636,1 @@\n+    private static final int CXTranslationUnit_CacheCompletionResults = (int)8L;\n@@ -1130,2 +1638,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_Namespace = 22;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CacheCompletionResults = 8\n@@ -1134,2 +1642,2 @@\n-    public static int CXCursor_Namespace() {\n-        return (int)22L;\n+    public static int CXTranslationUnit_CacheCompletionResults() {\n+        return CXTranslationUnit_CacheCompletionResults;\n@@ -1137,0 +1645,1 @@\n+    private static final int CXTranslationUnit_ForSerialization = (int)16L;\n@@ -1138,2 +1647,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LinkageSpec = 23;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_ForSerialization = 16\n@@ -1142,2 +1651,2 @@\n-    public static int CXCursor_LinkageSpec() {\n-        return (int)23L;\n+    public static int CXTranslationUnit_ForSerialization() {\n+        return CXTranslationUnit_ForSerialization;\n@@ -1145,0 +1654,1 @@\n+    private static final int CXTranslationUnit_CXXChainedPCH = (int)32L;\n@@ -1146,2 +1656,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_Constructor = 24;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CXXChainedPCH = 32\n@@ -1150,2 +1660,2 @@\n-    public static int CXCursor_Constructor() {\n-        return (int)24L;\n+    public static int CXTranslationUnit_CXXChainedPCH() {\n+        return CXTranslationUnit_CXXChainedPCH;\n@@ -1153,0 +1663,1 @@\n+    private static final int CXTranslationUnit_SkipFunctionBodies = (int)64L;\n@@ -1154,2 +1665,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_Destructor = 25;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_SkipFunctionBodies = 64\n@@ -1158,2 +1669,2 @@\n-    public static int CXCursor_Destructor() {\n-        return (int)25L;\n+    public static int CXTranslationUnit_SkipFunctionBodies() {\n+        return CXTranslationUnit_SkipFunctionBodies;\n@@ -1161,0 +1672,1 @@\n+    private static final int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = (int)128L;\n@@ -1162,2 +1674,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ConversionFunction = 26;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 128\n@@ -1166,2 +1678,2 @@\n-    public static int CXCursor_ConversionFunction() {\n-        return (int)26L;\n+    public static int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() {\n+        return CXTranslationUnit_IncludeBriefCommentsInCodeCompletion;\n@@ -1169,0 +1681,1 @@\n+    private static final int CXTranslationUnit_CreatePreambleOnFirstParse = (int)256L;\n@@ -1170,2 +1683,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TemplateTypeParameter = 27;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_CreatePreambleOnFirstParse = 256\n@@ -1174,2 +1687,2 @@\n-    public static int CXCursor_TemplateTypeParameter() {\n-        return (int)27L;\n+    public static int CXTranslationUnit_CreatePreambleOnFirstParse() {\n+        return CXTranslationUnit_CreatePreambleOnFirstParse;\n@@ -1177,0 +1690,1 @@\n+    private static final int CXTranslationUnit_KeepGoing = (int)512L;\n@@ -1178,2 +1692,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NonTypeTemplateParameter = 28;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_KeepGoing = 512\n@@ -1182,2 +1696,2 @@\n-    public static int CXCursor_NonTypeTemplateParameter() {\n-        return (int)28L;\n+    public static int CXTranslationUnit_KeepGoing() {\n+        return CXTranslationUnit_KeepGoing;\n@@ -1185,0 +1699,1 @@\n+    private static final int CXTranslationUnit_SingleFileParse = (int)1024L;\n@@ -1186,2 +1701,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TemplateTemplateParameter = 29;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_SingleFileParse = 1024\n@@ -1190,2 +1705,2 @@\n-    public static int CXCursor_TemplateTemplateParameter() {\n-        return (int)29L;\n+    public static int CXTranslationUnit_SingleFileParse() {\n+        return CXTranslationUnit_SingleFileParse;\n@@ -1193,0 +1708,1 @@\n+    private static final int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = (int)2048L;\n@@ -1194,2 +1710,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FunctionTemplate = 30;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = 2048\n@@ -1198,2 +1714,2 @@\n-    public static int CXCursor_FunctionTemplate() {\n-        return (int)30L;\n+    public static int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() {\n+        return CXTranslationUnit_LimitSkipFunctionBodiesToPreamble;\n@@ -1201,0 +1717,1 @@\n+    private static final int CXTranslationUnit_IncludeAttributedTypes = (int)4096L;\n@@ -1202,2 +1719,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ClassTemplate = 31;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IncludeAttributedTypes = 4096\n@@ -1206,2 +1723,2 @@\n-    public static int CXCursor_ClassTemplate() {\n-        return (int)31L;\n+    public static int CXTranslationUnit_IncludeAttributedTypes() {\n+        return CXTranslationUnit_IncludeAttributedTypes;\n@@ -1209,0 +1726,1 @@\n+    private static final int CXTranslationUnit_VisitImplicitAttributes = (int)8192L;\n@@ -1210,2 +1728,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ClassTemplatePartialSpecialization = 32;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_VisitImplicitAttributes = 8192\n@@ -1214,2 +1732,2 @@\n-    public static int CXCursor_ClassTemplatePartialSpecialization() {\n-        return (int)32L;\n+    public static int CXTranslationUnit_VisitImplicitAttributes() {\n+        return CXTranslationUnit_VisitImplicitAttributes;\n@@ -1217,0 +1735,1 @@\n+    private static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = (int)16384L;\n@@ -1218,2 +1737,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NamespaceAlias = 33;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = 16384\n@@ -1222,2 +1741,2 @@\n-    public static int CXCursor_NamespaceAlias() {\n-        return (int)33L;\n+    public static int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() {\n+        return CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles;\n@@ -1225,0 +1744,1 @@\n+    private static final int CXTranslationUnit_RetainExcludedConditionalBlocks = (int)32768L;\n@@ -1226,2 +1746,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UsingDirective = 34;\n+     * {@snippet lang=c :\n+     * enum CXTranslationUnit_Flags.CXTranslationUnit_RetainExcludedConditionalBlocks = 32768\n@@ -1230,2 +1750,19 @@\n-    public static int CXCursor_UsingDirective() {\n-        return (int)34L;\n+    public static int CXTranslationUnit_RetainExcludedConditionalBlocks() {\n+        return CXTranslationUnit_RetainExcludedConditionalBlocks;\n+    }\n+\n+    private static class clang_parseTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_parseTranslationUnit\"),\n+                    DESC);\n@@ -1233,0 +1770,1 @@\n+\n@@ -1234,2 +1772,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UsingDeclaration = 35;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n@@ -1238,2 +1777,2 @@\n-    public static int CXCursor_UsingDeclaration() {\n-        return (int)35L;\n+    public static FunctionDescriptor clang_parseTranslationUnit$descriptor() {\n+        return clang_parseTranslationUnit$constants.DESC;\n@@ -1241,0 +1780,1 @@\n+\n@@ -1242,2 +1782,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TypeAliasDecl = 36;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n@@ -1246,2 +1787,2 @@\n-    public static int CXCursor_TypeAliasDecl() {\n-        return (int)36L;\n+    public static MethodHandle clang_parseTranslationUnit$handle() {\n+        return clang_parseTranslationUnit$constants.HANDLE;\n@@ -1250,2 +1791,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCSynthesizeDecl = 37;\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_parseTranslationUnit(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options)\n@@ -1254,2 +1795,28 @@\n-    public static int CXCursor_ObjCSynthesizeDecl() {\n-        return (int)37L;\n+    public static MemorySegment clang_parseTranslationUnit(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options) {\n+        var mh$ = clang_parseTranslationUnit$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_parseTranslationUnit\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+            }\n+            return (MemorySegment)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_parseTranslationUnit2$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_parseTranslationUnit2\"),\n+                    DESC);\n@@ -1257,0 +1824,1 @@\n+\n@@ -1258,2 +1826,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCDynamicDecl = 38;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n@@ -1262,2 +1831,2 @@\n-    public static int CXCursor_ObjCDynamicDecl() {\n-        return (int)38L;\n+    public static FunctionDescriptor clang_parseTranslationUnit2$descriptor() {\n+        return clang_parseTranslationUnit2$constants.DESC;\n@@ -1265,0 +1834,1 @@\n+\n@@ -1266,2 +1836,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXAccessSpecifier = 39;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n@@ -1270,2 +1841,2 @@\n-    public static int CXCursor_CXXAccessSpecifier() {\n-        return (int)39L;\n+    public static MethodHandle clang_parseTranslationUnit2$handle() {\n+        return clang_parseTranslationUnit2$constants.HANDLE;\n@@ -1274,2 +1845,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstDecl = 1;\n+     * {@snippet lang=c :\n+     * enum CXErrorCode clang_parseTranslationUnit2(CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned int num_unsaved_files, unsigned int options, CXTranslationUnit *out_TU)\n@@ -1278,2 +1849,10 @@\n-    public static int CXCursor_FirstDecl() {\n-        return (int)1L;\n+    public static int clang_parseTranslationUnit2(MemorySegment CIdx, MemorySegment source_filename, MemorySegment command_line_args, int num_command_line_args, MemorySegment unsaved_files, int num_unsaved_files, int options, MemorySegment out_TU) {\n+        var mh$ = clang_parseTranslationUnit2$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_parseTranslationUnit2\", CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n+            }\n+            return (int)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1281,0 +1860,1 @@\n+    private static final int CXSaveTranslationUnit_None = (int)0L;\n@@ -1282,2 +1862,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastDecl = 39;\n+     * {@snippet lang=c :\n+     * enum CXSaveTranslationUnit_Flags.CXSaveTranslationUnit_None = 0\n@@ -1286,2 +1866,2 @@\n-    public static int CXCursor_LastDecl() {\n-        return (int)39L;\n+    public static int CXSaveTranslationUnit_None() {\n+        return CXSaveTranslationUnit_None;\n@@ -1289,0 +1869,1 @@\n+    private static final int CXSaveError_None = (int)0L;\n@@ -1290,2 +1871,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstRef = 40;\n+     * {@snippet lang=c :\n+     * enum CXSaveError.CXSaveError_None = 0\n@@ -1294,2 +1875,2 @@\n-    public static int CXCursor_FirstRef() {\n-        return (int)40L;\n+    public static int CXSaveError_None() {\n+        return CXSaveError_None;\n@@ -1297,0 +1878,1 @@\n+    private static final int CXSaveError_Unknown = (int)1L;\n@@ -1298,2 +1880,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCSuperClassRef = 40;\n+     * {@snippet lang=c :\n+     * enum CXSaveError.CXSaveError_Unknown = 1\n@@ -1302,2 +1884,2 @@\n-    public static int CXCursor_ObjCSuperClassRef() {\n-        return (int)40L;\n+    public static int CXSaveError_Unknown() {\n+        return CXSaveError_Unknown;\n@@ -1305,0 +1887,1 @@\n+    private static final int CXSaveError_TranslationErrors = (int)2L;\n@@ -1306,2 +1889,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCProtocolRef = 41;\n+     * {@snippet lang=c :\n+     * enum CXSaveError.CXSaveError_TranslationErrors = 2\n@@ -1310,2 +1893,2 @@\n-    public static int CXCursor_ObjCProtocolRef() {\n-        return (int)41L;\n+    public static int CXSaveError_TranslationErrors() {\n+        return CXSaveError_TranslationErrors;\n@@ -1313,0 +1896,1 @@\n+    private static final int CXSaveError_InvalidTU = (int)3L;\n@@ -1314,2 +1898,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCClassRef = 42;\n+     * {@snippet lang=c :\n+     * enum CXSaveError.CXSaveError_InvalidTU = 3\n@@ -1318,2 +1902,2 @@\n-    public static int CXCursor_ObjCClassRef() {\n-        return (int)42L;\n+    public static int CXSaveError_InvalidTU() {\n+        return CXSaveError_InvalidTU;\n@@ -1321,0 +1905,14 @@\n+\n+    private static class clang_saveTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_saveTranslationUnit\"),\n+                    DESC);\n+    }\n+\n@@ -1322,2 +1920,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TypeRef = 43;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n@@ -1326,2 +1925,2 @@\n-    public static int CXCursor_TypeRef() {\n-        return (int)43L;\n+    public static FunctionDescriptor clang_saveTranslationUnit$descriptor() {\n+        return clang_saveTranslationUnit$constants.DESC;\n@@ -1329,0 +1928,1 @@\n+\n@@ -1330,2 +1930,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXBaseSpecifier = 44;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n@@ -1334,2 +1935,2 @@\n-    public static int CXCursor_CXXBaseSpecifier() {\n-        return (int)44L;\n+    public static MethodHandle clang_saveTranslationUnit$handle() {\n+        return clang_saveTranslationUnit$constants.HANDLE;\n@@ -1338,2 +1939,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TemplateRef = 45;\n+     * {@snippet lang=c :\n+     * int clang_saveTranslationUnit(CXTranslationUnit TU, const char *FileName, unsigned int options)\n@@ -1342,2 +1943,20 @@\n-    public static int CXCursor_TemplateRef() {\n-        return (int)45L;\n+    public static int clang_saveTranslationUnit(MemorySegment TU, MemorySegment FileName, int options) {\n+        var mh$ = clang_saveTranslationUnit$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_saveTranslationUnit\", TU, FileName, options);\n+            }\n+            return (int)mh$.invokeExact(TU, FileName, options);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_disposeTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_disposeTranslationUnit\"),\n+                    DESC);\n@@ -1345,0 +1964,1 @@\n+\n@@ -1346,2 +1966,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NamespaceRef = 46;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n@@ -1350,2 +1971,2 @@\n-    public static int CXCursor_NamespaceRef() {\n-        return (int)46L;\n+    public static FunctionDescriptor clang_disposeTranslationUnit$descriptor() {\n+        return clang_disposeTranslationUnit$constants.DESC;\n@@ -1353,0 +1974,1 @@\n+\n@@ -1354,2 +1976,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MemberRef = 47;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n@@ -1358,2 +1981,2 @@\n-    public static int CXCursor_MemberRef() {\n-        return (int)47L;\n+    public static MethodHandle clang_disposeTranslationUnit$handle() {\n+        return clang_disposeTranslationUnit$constants.HANDLE;\n@@ -1362,2 +1985,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LabelRef = 48;\n+     * {@snippet lang=c :\n+     * void clang_disposeTranslationUnit(CXTranslationUnit)\n@@ -1366,2 +1989,10 @@\n-    public static int CXCursor_LabelRef() {\n-        return (int)48L;\n+    public static void clang_disposeTranslationUnit(MemorySegment x0) {\n+        var mh$ = clang_disposeTranslationUnit$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeTranslationUnit\", x0);\n+            }\n+            mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1369,0 +2000,1 @@\n+    private static final int CXReparse_None = (int)0L;\n@@ -1370,2 +2002,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OverloadedDeclRef = 49;\n+     * {@snippet lang=c :\n+     * enum CXReparse_Flags.CXReparse_None = 0\n@@ -1374,2 +2006,2 @@\n-    public static int CXCursor_OverloadedDeclRef() {\n-        return (int)49L;\n+    public static int CXReparse_None() {\n+        return CXReparse_None;\n@@ -1377,0 +2009,12 @@\n+\n+    private static class clang_defaultReparseOptions$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_defaultReparseOptions\"),\n+                    DESC);\n+    }\n+\n@@ -1378,2 +2022,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_VariableRef = 50;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n@@ -1382,2 +2027,2 @@\n-    public static int CXCursor_VariableRef() {\n-        return (int)50L;\n+    public static FunctionDescriptor clang_defaultReparseOptions$descriptor() {\n+        return clang_defaultReparseOptions$constants.DESC;\n@@ -1385,0 +2030,1 @@\n+\n@@ -1386,2 +2032,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastRef = 50;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n@@ -1390,2 +2037,2 @@\n-    public static int CXCursor_LastRef() {\n-        return (int)50L;\n+    public static MethodHandle clang_defaultReparseOptions$handle() {\n+        return clang_defaultReparseOptions$constants.HANDLE;\n@@ -1394,2 +2041,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstInvalid = 70;\n+     * {@snippet lang=c :\n+     * unsigned int clang_defaultReparseOptions(CXTranslationUnit TU)\n@@ -1398,2 +2045,24 @@\n-    public static int CXCursor_FirstInvalid() {\n-        return (int)70L;\n+    public static int clang_defaultReparseOptions(MemorySegment TU) {\n+        var mh$ = clang_defaultReparseOptions$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_defaultReparseOptions\", TU);\n+            }\n+            return (int)mh$.invokeExact(TU);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_reparseTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_reparseTranslationUnit\"),\n+                    DESC);\n@@ -1401,0 +2070,1 @@\n+\n@@ -1402,2 +2072,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_InvalidFile = 70;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n@@ -1406,2 +2077,2 @@\n-    public static int CXCursor_InvalidFile() {\n-        return (int)70L;\n+    public static FunctionDescriptor clang_reparseTranslationUnit$descriptor() {\n+        return clang_reparseTranslationUnit$constants.DESC;\n@@ -1409,0 +2080,1 @@\n+\n@@ -1410,2 +2082,3 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NoDeclFound = 71;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n@@ -1414,2 +2087,2 @@\n-    public static int CXCursor_NoDeclFound() {\n-        return (int)71L;\n+    public static MethodHandle clang_reparseTranslationUnit$handle() {\n+        return clang_reparseTranslationUnit$constants.HANDLE;\n@@ -1418,2 +2091,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NotImplemented = 72;\n+     * {@snippet lang=c :\n+     * int clang_reparseTranslationUnit(CXTranslationUnit TU, unsigned int num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned int options)\n@@ -1422,2 +2095,10 @@\n-    public static int CXCursor_NotImplemented() {\n-        return (int)72L;\n+    public static int clang_reparseTranslationUnit(MemorySegment TU, int num_unsaved_files, MemorySegment unsaved_files, int options) {\n+        var mh$ = clang_reparseTranslationUnit$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_reparseTranslationUnit\", TU, num_unsaved_files, unsaved_files, options);\n+            }\n+            return (int)mh$.invokeExact(TU, num_unsaved_files, unsaved_files, options);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -1425,0 +2106,1 @@\n+    private static final int CXCursor_UnexposedDecl = (int)1L;\n@@ -1426,2 +2108,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_InvalidCode = 73;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnexposedDecl = 1\n@@ -1430,2 +2112,2 @@\n-    public static int CXCursor_InvalidCode() {\n-        return (int)73L;\n+    public static int CXCursor_UnexposedDecl() {\n+        return CXCursor_UnexposedDecl;\n@@ -1433,0 +2115,1 @@\n+    private static final int CXCursor_StructDecl = (int)2L;\n@@ -1434,2 +2117,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastInvalid = 73;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_StructDecl = 2\n@@ -1438,2 +2121,2 @@\n-    public static int CXCursor_LastInvalid() {\n-        return (int)73L;\n+    public static int CXCursor_StructDecl() {\n+        return CXCursor_StructDecl;\n@@ -1441,0 +2124,1 @@\n+    private static final int CXCursor_UnionDecl = (int)3L;\n@@ -1442,2 +2126,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstExpr = 100;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnionDecl = 3\n@@ -1446,2 +2130,2 @@\n-    public static int CXCursor_FirstExpr() {\n-        return (int)100L;\n+    public static int CXCursor_UnionDecl() {\n+        return CXCursor_UnionDecl;\n@@ -1449,0 +2133,1 @@\n+    private static final int CXCursor_ClassDecl = (int)4L;\n@@ -1450,2 +2135,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnexposedExpr = 100;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ClassDecl = 4\n@@ -1454,2 +2139,2 @@\n-    public static int CXCursor_UnexposedExpr() {\n-        return (int)100L;\n+    public static int CXCursor_ClassDecl() {\n+        return CXCursor_ClassDecl;\n@@ -1457,0 +2142,1 @@\n+    private static final int CXCursor_EnumDecl = (int)5L;\n@@ -1458,2 +2144,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DeclRefExpr = 101;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_EnumDecl = 5\n@@ -1462,2 +2148,2 @@\n-    public static int CXCursor_DeclRefExpr() {\n-        return (int)101L;\n+    public static int CXCursor_EnumDecl() {\n+        return CXCursor_EnumDecl;\n@@ -1465,0 +2151,1 @@\n+    private static final int CXCursor_FieldDecl = (int)6L;\n@@ -1466,2 +2153,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MemberRefExpr = 102;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FieldDecl = 6\n@@ -1470,2 +2157,2 @@\n-    public static int CXCursor_MemberRefExpr() {\n-        return (int)102L;\n+    public static int CXCursor_FieldDecl() {\n+        return CXCursor_FieldDecl;\n@@ -1473,0 +2160,1 @@\n+    private static final int CXCursor_EnumConstantDecl = (int)7L;\n@@ -1474,2 +2162,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CallExpr = 103;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_EnumConstantDecl = 7\n@@ -1478,2 +2166,2 @@\n-    public static int CXCursor_CallExpr() {\n-        return (int)103L;\n+    public static int CXCursor_EnumConstantDecl() {\n+        return CXCursor_EnumConstantDecl;\n@@ -1481,0 +2169,1 @@\n+    private static final int CXCursor_FunctionDecl = (int)8L;\n@@ -1482,2 +2171,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCMessageExpr = 104;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FunctionDecl = 8\n@@ -1486,2 +2175,2 @@\n-    public static int CXCursor_ObjCMessageExpr() {\n-        return (int)104L;\n+    public static int CXCursor_FunctionDecl() {\n+        return CXCursor_FunctionDecl;\n@@ -1489,0 +2178,1 @@\n+    private static final int CXCursor_VarDecl = (int)9L;\n@@ -1490,2 +2180,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_BlockExpr = 105;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_VarDecl = 9\n@@ -1494,2 +2184,2 @@\n-    public static int CXCursor_BlockExpr() {\n-        return (int)105L;\n+    public static int CXCursor_VarDecl() {\n+        return CXCursor_VarDecl;\n@@ -1497,0 +2187,1 @@\n+    private static final int CXCursor_ParmDecl = (int)10L;\n@@ -1498,2 +2189,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IntegerLiteral = 106;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ParmDecl = 10\n@@ -1502,2 +2193,2 @@\n-    public static int CXCursor_IntegerLiteral() {\n-        return (int)106L;\n+    public static int CXCursor_ParmDecl() {\n+        return CXCursor_ParmDecl;\n@@ -1505,0 +2196,1 @@\n+    private static final int CXCursor_ObjCInterfaceDecl = (int)11L;\n@@ -1506,2 +2198,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FloatingLiteral = 107;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCInterfaceDecl = 11\n@@ -1510,2 +2202,2 @@\n-    public static int CXCursor_FloatingLiteral() {\n-        return (int)107L;\n+    public static int CXCursor_ObjCInterfaceDecl() {\n+        return CXCursor_ObjCInterfaceDecl;\n@@ -1513,0 +2205,1 @@\n+    private static final int CXCursor_ObjCCategoryDecl = (int)12L;\n@@ -1514,2 +2207,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ImaginaryLiteral = 108;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCCategoryDecl = 12\n@@ -1518,2 +2211,2 @@\n-    public static int CXCursor_ImaginaryLiteral() {\n-        return (int)108L;\n+    public static int CXCursor_ObjCCategoryDecl() {\n+        return CXCursor_ObjCCategoryDecl;\n@@ -1521,0 +2214,1 @@\n+    private static final int CXCursor_ObjCProtocolDecl = (int)13L;\n@@ -1522,2 +2216,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_StringLiteral = 109;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCProtocolDecl = 13\n@@ -1526,2 +2220,2 @@\n-    public static int CXCursor_StringLiteral() {\n-        return (int)109L;\n+    public static int CXCursor_ObjCProtocolDecl() {\n+        return CXCursor_ObjCProtocolDecl;\n@@ -1529,0 +2223,1 @@\n+    private static final int CXCursor_ObjCPropertyDecl = (int)14L;\n@@ -1530,2 +2225,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CharacterLiteral = 110;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCPropertyDecl = 14\n@@ -1534,2 +2229,2 @@\n-    public static int CXCursor_CharacterLiteral() {\n-        return (int)110L;\n+    public static int CXCursor_ObjCPropertyDecl() {\n+        return CXCursor_ObjCPropertyDecl;\n@@ -1537,0 +2232,1 @@\n+    private static final int CXCursor_ObjCIvarDecl = (int)15L;\n@@ -1538,2 +2234,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ParenExpr = 111;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCIvarDecl = 15\n@@ -1542,2 +2238,2 @@\n-    public static int CXCursor_ParenExpr() {\n-        return (int)111L;\n+    public static int CXCursor_ObjCIvarDecl() {\n+        return CXCursor_ObjCIvarDecl;\n@@ -1545,0 +2241,1 @@\n+    private static final int CXCursor_ObjCInstanceMethodDecl = (int)16L;\n@@ -1546,2 +2243,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnaryOperator = 112;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCInstanceMethodDecl = 16\n@@ -1550,2 +2247,2 @@\n-    public static int CXCursor_UnaryOperator() {\n-        return (int)112L;\n+    public static int CXCursor_ObjCInstanceMethodDecl() {\n+        return CXCursor_ObjCInstanceMethodDecl;\n@@ -1553,0 +2250,1 @@\n+    private static final int CXCursor_ObjCClassMethodDecl = (int)17L;\n@@ -1554,2 +2252,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ArraySubscriptExpr = 113;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCClassMethodDecl = 17\n@@ -1558,2 +2256,2 @@\n-    public static int CXCursor_ArraySubscriptExpr() {\n-        return (int)113L;\n+    public static int CXCursor_ObjCClassMethodDecl() {\n+        return CXCursor_ObjCClassMethodDecl;\n@@ -1561,0 +2259,1 @@\n+    private static final int CXCursor_ObjCImplementationDecl = (int)18L;\n@@ -1562,2 +2261,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_BinaryOperator = 114;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCImplementationDecl = 18\n@@ -1566,2 +2265,2 @@\n-    public static int CXCursor_BinaryOperator() {\n-        return (int)114L;\n+    public static int CXCursor_ObjCImplementationDecl() {\n+        return CXCursor_ObjCImplementationDecl;\n@@ -1569,0 +2268,1 @@\n+    private static final int CXCursor_ObjCCategoryImplDecl = (int)19L;\n@@ -1570,2 +2270,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CompoundAssignOperator = 115;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCCategoryImplDecl = 19\n@@ -1574,2 +2274,2 @@\n-    public static int CXCursor_CompoundAssignOperator() {\n-        return (int)115L;\n+    public static int CXCursor_ObjCCategoryImplDecl() {\n+        return CXCursor_ObjCCategoryImplDecl;\n@@ -1577,0 +2277,1 @@\n+    private static final int CXCursor_TypedefDecl = (int)20L;\n@@ -1578,2 +2279,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ConditionalOperator = 116;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TypedefDecl = 20\n@@ -1582,2 +2283,2 @@\n-    public static int CXCursor_ConditionalOperator() {\n-        return (int)116L;\n+    public static int CXCursor_TypedefDecl() {\n+        return CXCursor_TypedefDecl;\n@@ -1585,0 +2286,1 @@\n+    private static final int CXCursor_CXXMethod = (int)21L;\n@@ -1586,2 +2288,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CStyleCastExpr = 117;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXMethod = 21\n@@ -1590,2 +2292,2 @@\n-    public static int CXCursor_CStyleCastExpr() {\n-        return (int)117L;\n+    public static int CXCursor_CXXMethod() {\n+        return CXCursor_CXXMethod;\n@@ -1593,0 +2295,1 @@\n+    private static final int CXCursor_Namespace = (int)22L;\n@@ -1594,2 +2297,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CompoundLiteralExpr = 118;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_Namespace = 22\n@@ -1598,2 +2301,2 @@\n-    public static int CXCursor_CompoundLiteralExpr() {\n-        return (int)118L;\n+    public static int CXCursor_Namespace() {\n+        return CXCursor_Namespace;\n@@ -1601,0 +2304,1 @@\n+    private static final int CXCursor_LinkageSpec = (int)23L;\n@@ -1602,2 +2306,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_InitListExpr = 119;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LinkageSpec = 23\n@@ -1606,2 +2310,2 @@\n-    public static int CXCursor_InitListExpr() {\n-        return (int)119L;\n+    public static int CXCursor_LinkageSpec() {\n+        return CXCursor_LinkageSpec;\n@@ -1609,0 +2313,1 @@\n+    private static final int CXCursor_Constructor = (int)24L;\n@@ -1610,2 +2315,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_AddrLabelExpr = 120;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_Constructor = 24\n@@ -1614,2 +2319,2 @@\n-    public static int CXCursor_AddrLabelExpr() {\n-        return (int)120L;\n+    public static int CXCursor_Constructor() {\n+        return CXCursor_Constructor;\n@@ -1617,0 +2322,1 @@\n+    private static final int CXCursor_Destructor = (int)25L;\n@@ -1618,2 +2324,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_StmtExpr = 121;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_Destructor = 25\n@@ -1622,2 +2328,2 @@\n-    public static int CXCursor_StmtExpr() {\n-        return (int)121L;\n+    public static int CXCursor_Destructor() {\n+        return CXCursor_Destructor;\n@@ -1625,0 +2331,1 @@\n+    private static final int CXCursor_ConversionFunction = (int)26L;\n@@ -1626,2 +2333,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_GenericSelectionExpr = 122;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ConversionFunction = 26\n@@ -1630,2 +2337,2 @@\n-    public static int CXCursor_GenericSelectionExpr() {\n-        return (int)122L;\n+    public static int CXCursor_ConversionFunction() {\n+        return CXCursor_ConversionFunction;\n@@ -1633,0 +2340,1 @@\n+    private static final int CXCursor_TemplateTypeParameter = (int)27L;\n@@ -1634,2 +2342,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_GNUNullExpr = 123;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TemplateTypeParameter = 27\n@@ -1638,2 +2346,2 @@\n-    public static int CXCursor_GNUNullExpr() {\n-        return (int)123L;\n+    public static int CXCursor_TemplateTypeParameter() {\n+        return CXCursor_TemplateTypeParameter;\n@@ -1641,0 +2349,1 @@\n+    private static final int CXCursor_NonTypeTemplateParameter = (int)28L;\n@@ -1642,2 +2351,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXStaticCastExpr = 124;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NonTypeTemplateParameter = 28\n@@ -1646,2 +2355,2 @@\n-    public static int CXCursor_CXXStaticCastExpr() {\n-        return (int)124L;\n+    public static int CXCursor_NonTypeTemplateParameter() {\n+        return CXCursor_NonTypeTemplateParameter;\n@@ -1649,0 +2358,1 @@\n+    private static final int CXCursor_TemplateTemplateParameter = (int)29L;\n@@ -1650,2 +2360,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXDynamicCastExpr = 125;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TemplateTemplateParameter = 29\n@@ -1654,2 +2364,2 @@\n-    public static int CXCursor_CXXDynamicCastExpr() {\n-        return (int)125L;\n+    public static int CXCursor_TemplateTemplateParameter() {\n+        return CXCursor_TemplateTemplateParameter;\n@@ -1657,0 +2367,1 @@\n+    private static final int CXCursor_FunctionTemplate = (int)30L;\n@@ -1658,2 +2369,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXReinterpretCastExpr = 126;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FunctionTemplate = 30\n@@ -1662,2 +2373,2 @@\n-    public static int CXCursor_CXXReinterpretCastExpr() {\n-        return (int)126L;\n+    public static int CXCursor_FunctionTemplate() {\n+        return CXCursor_FunctionTemplate;\n@@ -1665,0 +2376,1 @@\n+    private static final int CXCursor_ClassTemplate = (int)31L;\n@@ -1666,2 +2378,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXConstCastExpr = 127;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ClassTemplate = 31\n@@ -1670,2 +2382,2 @@\n-    public static int CXCursor_CXXConstCastExpr() {\n-        return (int)127L;\n+    public static int CXCursor_ClassTemplate() {\n+        return CXCursor_ClassTemplate;\n@@ -1673,0 +2385,1 @@\n+    private static final int CXCursor_ClassTemplatePartialSpecialization = (int)32L;\n@@ -1674,2 +2387,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXFunctionalCastExpr = 128;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ClassTemplatePartialSpecialization = 32\n@@ -1678,2 +2391,2 @@\n-    public static int CXCursor_CXXFunctionalCastExpr() {\n-        return (int)128L;\n+    public static int CXCursor_ClassTemplatePartialSpecialization() {\n+        return CXCursor_ClassTemplatePartialSpecialization;\n@@ -1681,0 +2394,1 @@\n+    private static final int CXCursor_NamespaceAlias = (int)33L;\n@@ -1682,2 +2396,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXTypeidExpr = 129;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NamespaceAlias = 33\n@@ -1686,2 +2400,2 @@\n-    public static int CXCursor_CXXTypeidExpr() {\n-        return (int)129L;\n+    public static int CXCursor_NamespaceAlias() {\n+        return CXCursor_NamespaceAlias;\n@@ -1689,0 +2403,1 @@\n+    private static final int CXCursor_UsingDirective = (int)34L;\n@@ -1690,2 +2405,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXBoolLiteralExpr = 130;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UsingDirective = 34\n@@ -1694,2 +2409,2 @@\n-    public static int CXCursor_CXXBoolLiteralExpr() {\n-        return (int)130L;\n+    public static int CXCursor_UsingDirective() {\n+        return CXCursor_UsingDirective;\n@@ -1697,0 +2412,1 @@\n+    private static final int CXCursor_UsingDeclaration = (int)35L;\n@@ -1698,2 +2414,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXNullPtrLiteralExpr = 131;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UsingDeclaration = 35\n@@ -1702,2 +2418,2 @@\n-    public static int CXCursor_CXXNullPtrLiteralExpr() {\n-        return (int)131L;\n+    public static int CXCursor_UsingDeclaration() {\n+        return CXCursor_UsingDeclaration;\n@@ -1705,0 +2421,1 @@\n+    private static final int CXCursor_TypeAliasDecl = (int)36L;\n@@ -1706,2 +2423,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXThisExpr = 132;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TypeAliasDecl = 36\n@@ -1710,2 +2427,2 @@\n-    public static int CXCursor_CXXThisExpr() {\n-        return (int)132L;\n+    public static int CXCursor_TypeAliasDecl() {\n+        return CXCursor_TypeAliasDecl;\n@@ -1713,0 +2430,1 @@\n+    private static final int CXCursor_ObjCSynthesizeDecl = (int)37L;\n@@ -1714,2 +2432,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXThrowExpr = 133;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCSynthesizeDecl = 37\n@@ -1718,2 +2436,2 @@\n-    public static int CXCursor_CXXThrowExpr() {\n-        return (int)133L;\n+    public static int CXCursor_ObjCSynthesizeDecl() {\n+        return CXCursor_ObjCSynthesizeDecl;\n@@ -1721,0 +2439,1 @@\n+    private static final int CXCursor_ObjCDynamicDecl = (int)38L;\n@@ -1722,2 +2441,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXNewExpr = 134;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCDynamicDecl = 38\n@@ -1726,2 +2445,2 @@\n-    public static int CXCursor_CXXNewExpr() {\n-        return (int)134L;\n+    public static int CXCursor_ObjCDynamicDecl() {\n+        return CXCursor_ObjCDynamicDecl;\n@@ -1729,0 +2448,1 @@\n+    private static final int CXCursor_CXXAccessSpecifier = (int)39L;\n@@ -1730,2 +2450,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXDeleteExpr = 135;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXAccessSpecifier = 39\n@@ -1734,2 +2454,2 @@\n-    public static int CXCursor_CXXDeleteExpr() {\n-        return (int)135L;\n+    public static int CXCursor_CXXAccessSpecifier() {\n+        return CXCursor_CXXAccessSpecifier;\n@@ -1737,0 +2457,1 @@\n+    private static final int CXCursor_FirstDecl = (int)1L;\n@@ -1738,2 +2459,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnaryExpr = 136;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstDecl = 1\n@@ -1742,2 +2463,2 @@\n-    public static int CXCursor_UnaryExpr() {\n-        return (int)136L;\n+    public static int CXCursor_FirstDecl() {\n+        return CXCursor_FirstDecl;\n@@ -1745,0 +2466,1 @@\n+    private static final int CXCursor_LastDecl = (int)39L;\n@@ -1746,2 +2468,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCStringLiteral = 137;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastDecl = 39\n@@ -1750,2 +2472,2 @@\n-    public static int CXCursor_ObjCStringLiteral() {\n-        return (int)137L;\n+    public static int CXCursor_LastDecl() {\n+        return CXCursor_LastDecl;\n@@ -1753,0 +2475,1 @@\n+    private static final int CXCursor_FirstRef = (int)40L;\n@@ -1754,2 +2477,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCEncodeExpr = 138;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstRef = 40\n@@ -1758,2 +2481,2 @@\n-    public static int CXCursor_ObjCEncodeExpr() {\n-        return (int)138L;\n+    public static int CXCursor_FirstRef() {\n+        return CXCursor_FirstRef;\n@@ -1761,0 +2484,1 @@\n+    private static final int CXCursor_ObjCSuperClassRef = (int)40L;\n@@ -1762,2 +2486,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCSelectorExpr = 139;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCSuperClassRef = 40\n@@ -1766,2 +2490,2 @@\n-    public static int CXCursor_ObjCSelectorExpr() {\n-        return (int)139L;\n+    public static int CXCursor_ObjCSuperClassRef() {\n+        return CXCursor_ObjCSuperClassRef;\n@@ -1769,0 +2493,1 @@\n+    private static final int CXCursor_ObjCProtocolRef = (int)41L;\n@@ -1770,2 +2495,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCProtocolExpr = 140;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCProtocolRef = 41\n@@ -1774,2 +2499,2 @@\n-    public static int CXCursor_ObjCProtocolExpr() {\n-        return (int)140L;\n+    public static int CXCursor_ObjCProtocolRef() {\n+        return CXCursor_ObjCProtocolRef;\n@@ -1777,0 +2502,1 @@\n+    private static final int CXCursor_ObjCClassRef = (int)42L;\n@@ -1778,2 +2504,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCBridgedCastExpr = 141;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCClassRef = 42\n@@ -1782,2 +2508,2 @@\n-    public static int CXCursor_ObjCBridgedCastExpr() {\n-        return (int)141L;\n+    public static int CXCursor_ObjCClassRef() {\n+        return CXCursor_ObjCClassRef;\n@@ -1785,0 +2511,1 @@\n+    private static final int CXCursor_TypeRef = (int)43L;\n@@ -1786,2 +2513,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_PackExpansionExpr = 142;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TypeRef = 43\n@@ -1790,2 +2517,2 @@\n-    public static int CXCursor_PackExpansionExpr() {\n-        return (int)142L;\n+    public static int CXCursor_TypeRef() {\n+        return CXCursor_TypeRef;\n@@ -1793,0 +2520,1 @@\n+    private static final int CXCursor_CXXBaseSpecifier = (int)44L;\n@@ -1794,2 +2522,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SizeOfPackExpr = 143;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXBaseSpecifier = 44\n@@ -1798,2 +2526,2 @@\n-    public static int CXCursor_SizeOfPackExpr() {\n-        return (int)143L;\n+    public static int CXCursor_CXXBaseSpecifier() {\n+        return CXCursor_CXXBaseSpecifier;\n@@ -1801,0 +2529,1 @@\n+    private static final int CXCursor_TemplateRef = (int)45L;\n@@ -1802,2 +2531,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LambdaExpr = 144;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TemplateRef = 45\n@@ -1806,2 +2535,2 @@\n-    public static int CXCursor_LambdaExpr() {\n-        return (int)144L;\n+    public static int CXCursor_TemplateRef() {\n+        return CXCursor_TemplateRef;\n@@ -1809,0 +2538,1 @@\n+    private static final int CXCursor_NamespaceRef = (int)46L;\n@@ -1810,2 +2540,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCBoolLiteralExpr = 145;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NamespaceRef = 46\n@@ -1814,2 +2544,2 @@\n-    public static int CXCursor_ObjCBoolLiteralExpr() {\n-        return (int)145L;\n+    public static int CXCursor_NamespaceRef() {\n+        return CXCursor_NamespaceRef;\n@@ -1817,0 +2547,1 @@\n+    private static final int CXCursor_MemberRef = (int)47L;\n@@ -1818,2 +2549,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCSelfExpr = 146;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MemberRef = 47\n@@ -1822,2 +2553,2 @@\n-    public static int CXCursor_ObjCSelfExpr() {\n-        return (int)146L;\n+    public static int CXCursor_MemberRef() {\n+        return CXCursor_MemberRef;\n@@ -1825,0 +2556,1 @@\n+    private static final int CXCursor_LabelRef = (int)48L;\n@@ -1826,2 +2558,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPArraySectionExpr = 147;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LabelRef = 48\n@@ -1830,2 +2562,2 @@\n-    public static int CXCursor_OMPArraySectionExpr() {\n-        return (int)147L;\n+    public static int CXCursor_LabelRef() {\n+        return CXCursor_LabelRef;\n@@ -1833,0 +2565,1 @@\n+    private static final int CXCursor_OverloadedDeclRef = (int)49L;\n@@ -1834,2 +2567,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAvailabilityCheckExpr = 148;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OverloadedDeclRef = 49\n@@ -1838,2 +2571,2 @@\n-    public static int CXCursor_ObjCAvailabilityCheckExpr() {\n-        return (int)148L;\n+    public static int CXCursor_OverloadedDeclRef() {\n+        return CXCursor_OverloadedDeclRef;\n@@ -1841,0 +2574,1 @@\n+    private static final int CXCursor_VariableRef = (int)50L;\n@@ -1842,2 +2576,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FixedPointLiteral = 149;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_VariableRef = 50\n@@ -1846,2 +2580,2 @@\n-    public static int CXCursor_FixedPointLiteral() {\n-        return (int)149L;\n+    public static int CXCursor_VariableRef() {\n+        return CXCursor_VariableRef;\n@@ -1849,0 +2583,1 @@\n+    private static final int CXCursor_LastRef = (int)50L;\n@@ -1850,2 +2585,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastExpr = 152;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastRef = 50\n@@ -1854,2 +2589,2 @@\n-    public static int CXCursor_LastExpr() {\n-        return (int)152L;\n+    public static int CXCursor_LastRef() {\n+        return CXCursor_LastRef;\n@@ -1857,0 +2592,1 @@\n+    private static final int CXCursor_FirstInvalid = (int)70L;\n@@ -1858,2 +2594,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstStmt = 200;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstInvalid = 70\n@@ -1862,2 +2598,2 @@\n-    public static int CXCursor_FirstStmt() {\n-        return (int)200L;\n+    public static int CXCursor_FirstInvalid() {\n+        return CXCursor_FirstInvalid;\n@@ -1865,0 +2601,1 @@\n+    private static final int CXCursor_InvalidFile = (int)70L;\n@@ -1866,2 +2603,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnexposedStmt = 200;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_InvalidFile = 70\n@@ -1870,2 +2607,2 @@\n-    public static int CXCursor_UnexposedStmt() {\n-        return (int)200L;\n+    public static int CXCursor_InvalidFile() {\n+        return CXCursor_InvalidFile;\n@@ -1873,0 +2610,1 @@\n+    private static final int CXCursor_NoDeclFound = (int)71L;\n@@ -1874,2 +2612,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LabelStmt = 201;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NoDeclFound = 71\n@@ -1878,2 +2616,2 @@\n-    public static int CXCursor_LabelStmt() {\n-        return (int)201L;\n+    public static int CXCursor_NoDeclFound() {\n+        return CXCursor_NoDeclFound;\n@@ -1881,0 +2619,1 @@\n+    private static final int CXCursor_NotImplemented = (int)72L;\n@@ -1882,2 +2621,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CompoundStmt = 202;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NotImplemented = 72\n@@ -1886,2 +2625,2 @@\n-    public static int CXCursor_CompoundStmt() {\n-        return (int)202L;\n+    public static int CXCursor_NotImplemented() {\n+        return CXCursor_NotImplemented;\n@@ -1889,0 +2628,1 @@\n+    private static final int CXCursor_InvalidCode = (int)73L;\n@@ -1890,2 +2630,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CaseStmt = 203;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_InvalidCode = 73\n@@ -1894,2 +2634,2 @@\n-    public static int CXCursor_CaseStmt() {\n-        return (int)203L;\n+    public static int CXCursor_InvalidCode() {\n+        return CXCursor_InvalidCode;\n@@ -1897,0 +2637,1 @@\n+    private static final int CXCursor_LastInvalid = (int)73L;\n@@ -1898,2 +2639,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DefaultStmt = 204;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastInvalid = 73\n@@ -1902,2 +2643,2 @@\n-    public static int CXCursor_DefaultStmt() {\n-        return (int)204L;\n+    public static int CXCursor_LastInvalid() {\n+        return CXCursor_LastInvalid;\n@@ -1905,0 +2646,1 @@\n+    private static final int CXCursor_FirstExpr = (int)100L;\n@@ -1906,2 +2648,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IfStmt = 205;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstExpr = 100\n@@ -1910,2 +2652,2 @@\n-    public static int CXCursor_IfStmt() {\n-        return (int)205L;\n+    public static int CXCursor_FirstExpr() {\n+        return CXCursor_FirstExpr;\n@@ -1913,0 +2655,1 @@\n+    private static final int CXCursor_UnexposedExpr = (int)100L;\n@@ -1914,2 +2657,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SwitchStmt = 206;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnexposedExpr = 100\n@@ -1918,2 +2661,2 @@\n-    public static int CXCursor_SwitchStmt() {\n-        return (int)206L;\n+    public static int CXCursor_UnexposedExpr() {\n+        return CXCursor_UnexposedExpr;\n@@ -1921,0 +2664,1 @@\n+    private static final int CXCursor_DeclRefExpr = (int)101L;\n@@ -1922,2 +2666,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_WhileStmt = 207;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DeclRefExpr = 101\n@@ -1926,2 +2670,2 @@\n-    public static int CXCursor_WhileStmt() {\n-        return (int)207L;\n+    public static int CXCursor_DeclRefExpr() {\n+        return CXCursor_DeclRefExpr;\n@@ -1929,0 +2673,1 @@\n+    private static final int CXCursor_MemberRefExpr = (int)102L;\n@@ -1930,2 +2675,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DoStmt = 208;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MemberRefExpr = 102\n@@ -1934,2 +2679,2 @@\n-    public static int CXCursor_DoStmt() {\n-        return (int)208L;\n+    public static int CXCursor_MemberRefExpr() {\n+        return CXCursor_MemberRefExpr;\n@@ -1937,0 +2682,1 @@\n+    private static final int CXCursor_CallExpr = (int)103L;\n@@ -1938,2 +2684,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ForStmt = 209;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CallExpr = 103\n@@ -1942,2 +2688,2 @@\n-    public static int CXCursor_ForStmt() {\n-        return (int)209L;\n+    public static int CXCursor_CallExpr() {\n+        return CXCursor_CallExpr;\n@@ -1945,0 +2691,1 @@\n+    private static final int CXCursor_ObjCMessageExpr = (int)104L;\n@@ -1946,2 +2693,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_GotoStmt = 210;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCMessageExpr = 104\n@@ -1950,2 +2697,2 @@\n-    public static int CXCursor_GotoStmt() {\n-        return (int)210L;\n+    public static int CXCursor_ObjCMessageExpr() {\n+        return CXCursor_ObjCMessageExpr;\n@@ -1953,0 +2700,1 @@\n+    private static final int CXCursor_BlockExpr = (int)105L;\n@@ -1954,2 +2702,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IndirectGotoStmt = 211;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_BlockExpr = 105\n@@ -1958,2 +2706,2 @@\n-    public static int CXCursor_IndirectGotoStmt() {\n-        return (int)211L;\n+    public static int CXCursor_BlockExpr() {\n+        return CXCursor_BlockExpr;\n@@ -1961,0 +2709,1 @@\n+    private static final int CXCursor_IntegerLiteral = (int)106L;\n@@ -1962,2 +2711,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ContinueStmt = 212;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IntegerLiteral = 106\n@@ -1966,2 +2715,2 @@\n-    public static int CXCursor_ContinueStmt() {\n-        return (int)212L;\n+    public static int CXCursor_IntegerLiteral() {\n+        return CXCursor_IntegerLiteral;\n@@ -1969,0 +2718,1 @@\n+    private static final int CXCursor_FloatingLiteral = (int)107L;\n@@ -1970,2 +2720,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_BreakStmt = 213;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FloatingLiteral = 107\n@@ -1974,2 +2724,2 @@\n-    public static int CXCursor_BreakStmt() {\n-        return (int)213L;\n+    public static int CXCursor_FloatingLiteral() {\n+        return CXCursor_FloatingLiteral;\n@@ -1977,0 +2727,1 @@\n+    private static final int CXCursor_ImaginaryLiteral = (int)108L;\n@@ -1978,2 +2729,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ReturnStmt = 214;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ImaginaryLiteral = 108\n@@ -1982,2 +2733,2 @@\n-    public static int CXCursor_ReturnStmt() {\n-        return (int)214L;\n+    public static int CXCursor_ImaginaryLiteral() {\n+        return CXCursor_ImaginaryLiteral;\n@@ -1985,0 +2736,1 @@\n+    private static final int CXCursor_StringLiteral = (int)109L;\n@@ -1986,2 +2738,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_GCCAsmStmt = 215;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_StringLiteral = 109\n@@ -1990,2 +2742,2 @@\n-    public static int CXCursor_GCCAsmStmt() {\n-        return (int)215L;\n+    public static int CXCursor_StringLiteral() {\n+        return CXCursor_StringLiteral;\n@@ -1993,0 +2745,1 @@\n+    private static final int CXCursor_CharacterLiteral = (int)110L;\n@@ -1994,2 +2747,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_AsmStmt = 215;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CharacterLiteral = 110\n@@ -1998,2 +2751,2 @@\n-    public static int CXCursor_AsmStmt() {\n-        return (int)215L;\n+    public static int CXCursor_CharacterLiteral() {\n+        return CXCursor_CharacterLiteral;\n@@ -2001,0 +2754,1 @@\n+    private static final int CXCursor_ParenExpr = (int)111L;\n@@ -2002,2 +2756,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAtTryStmt = 216;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ParenExpr = 111\n@@ -2006,2 +2760,2 @@\n-    public static int CXCursor_ObjCAtTryStmt() {\n-        return (int)216L;\n+    public static int CXCursor_ParenExpr() {\n+        return CXCursor_ParenExpr;\n@@ -2009,0 +2763,1 @@\n+    private static final int CXCursor_UnaryOperator = (int)112L;\n@@ -2010,2 +2765,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAtCatchStmt = 217;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnaryOperator = 112\n@@ -2014,2 +2769,2 @@\n-    public static int CXCursor_ObjCAtCatchStmt() {\n-        return (int)217L;\n+    public static int CXCursor_UnaryOperator() {\n+        return CXCursor_UnaryOperator;\n@@ -2017,0 +2772,1 @@\n+    private static final int CXCursor_ArraySubscriptExpr = (int)113L;\n@@ -2018,2 +2774,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAtFinallyStmt = 218;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ArraySubscriptExpr = 113\n@@ -2022,2 +2778,2 @@\n-    public static int CXCursor_ObjCAtFinallyStmt() {\n-        return (int)218L;\n+    public static int CXCursor_ArraySubscriptExpr() {\n+        return CXCursor_ArraySubscriptExpr;\n@@ -2025,0 +2781,1 @@\n+    private static final int CXCursor_BinaryOperator = (int)114L;\n@@ -2026,2 +2783,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAtThrowStmt = 219;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_BinaryOperator = 114\n@@ -2030,2 +2787,2 @@\n-    public static int CXCursor_ObjCAtThrowStmt() {\n-        return (int)219L;\n+    public static int CXCursor_BinaryOperator() {\n+        return CXCursor_BinaryOperator;\n@@ -2033,0 +2790,1 @@\n+    private static final int CXCursor_CompoundAssignOperator = (int)115L;\n@@ -2034,2 +2792,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAtSynchronizedStmt = 220;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CompoundAssignOperator = 115\n@@ -2038,2 +2796,2 @@\n-    public static int CXCursor_ObjCAtSynchronizedStmt() {\n-        return (int)220L;\n+    public static int CXCursor_CompoundAssignOperator() {\n+        return CXCursor_CompoundAssignOperator;\n@@ -2041,0 +2799,1 @@\n+    private static final int CXCursor_ConditionalOperator = (int)116L;\n@@ -2042,2 +2801,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCAutoreleasePoolStmt = 221;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ConditionalOperator = 116\n@@ -2046,2 +2805,2 @@\n-    public static int CXCursor_ObjCAutoreleasePoolStmt() {\n-        return (int)221L;\n+    public static int CXCursor_ConditionalOperator() {\n+        return CXCursor_ConditionalOperator;\n@@ -2049,0 +2808,1 @@\n+    private static final int CXCursor_CStyleCastExpr = (int)117L;\n@@ -2050,2 +2810,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCForCollectionStmt = 222;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CStyleCastExpr = 117\n@@ -2054,2 +2814,2 @@\n-    public static int CXCursor_ObjCForCollectionStmt() {\n-        return (int)222L;\n+    public static int CXCursor_CStyleCastExpr() {\n+        return CXCursor_CStyleCastExpr;\n@@ -2057,0 +2817,1 @@\n+    private static final int CXCursor_CompoundLiteralExpr = (int)118L;\n@@ -2058,2 +2819,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXCatchStmt = 223;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CompoundLiteralExpr = 118\n@@ -2062,2 +2823,2 @@\n-    public static int CXCursor_CXXCatchStmt() {\n-        return (int)223L;\n+    public static int CXCursor_CompoundLiteralExpr() {\n+        return CXCursor_CompoundLiteralExpr;\n@@ -2065,0 +2826,1 @@\n+    private static final int CXCursor_InitListExpr = (int)119L;\n@@ -2066,2 +2828,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXTryStmt = 224;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_InitListExpr = 119\n@@ -2070,2 +2832,2 @@\n-    public static int CXCursor_CXXTryStmt() {\n-        return (int)224L;\n+    public static int CXCursor_InitListExpr() {\n+        return CXCursor_InitListExpr;\n@@ -2073,0 +2835,1 @@\n+    private static final int CXCursor_AddrLabelExpr = (int)120L;\n@@ -2074,2 +2837,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXForRangeStmt = 225;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_AddrLabelExpr = 120\n@@ -2078,2 +2841,2 @@\n-    public static int CXCursor_CXXForRangeStmt() {\n-        return (int)225L;\n+    public static int CXCursor_AddrLabelExpr() {\n+        return CXCursor_AddrLabelExpr;\n@@ -2081,0 +2844,1 @@\n+    private static final int CXCursor_StmtExpr = (int)121L;\n@@ -2082,2 +2846,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SEHTryStmt = 226;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_StmtExpr = 121\n@@ -2086,2 +2850,2 @@\n-    public static int CXCursor_SEHTryStmt() {\n-        return (int)226L;\n+    public static int CXCursor_StmtExpr() {\n+        return CXCursor_StmtExpr;\n@@ -2089,0 +2853,1 @@\n+    private static final int CXCursor_GenericSelectionExpr = (int)122L;\n@@ -2090,2 +2855,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SEHExceptStmt = 227;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_GenericSelectionExpr = 122\n@@ -2094,2 +2859,2 @@\n-    public static int CXCursor_SEHExceptStmt() {\n-        return (int)227L;\n+    public static int CXCursor_GenericSelectionExpr() {\n+        return CXCursor_GenericSelectionExpr;\n@@ -2097,0 +2862,1 @@\n+    private static final int CXCursor_GNUNullExpr = (int)123L;\n@@ -2098,2 +2864,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SEHFinallyStmt = 228;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_GNUNullExpr = 123\n@@ -2102,2 +2868,2 @@\n-    public static int CXCursor_SEHFinallyStmt() {\n-        return (int)228L;\n+    public static int CXCursor_GNUNullExpr() {\n+        return CXCursor_GNUNullExpr;\n@@ -2105,0 +2871,1 @@\n+    private static final int CXCursor_CXXStaticCastExpr = (int)124L;\n@@ -2106,2 +2873,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MSAsmStmt = 229;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXStaticCastExpr = 124\n@@ -2110,2 +2877,2 @@\n-    public static int CXCursor_MSAsmStmt() {\n-        return (int)229L;\n+    public static int CXCursor_CXXStaticCastExpr() {\n+        return CXCursor_CXXStaticCastExpr;\n@@ -2113,0 +2880,1 @@\n+    private static final int CXCursor_CXXDynamicCastExpr = (int)125L;\n@@ -2114,2 +2882,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NullStmt = 230;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXDynamicCastExpr = 125\n@@ -2118,2 +2886,2 @@\n-    public static int CXCursor_NullStmt() {\n-        return (int)230L;\n+    public static int CXCursor_CXXDynamicCastExpr() {\n+        return CXCursor_CXXDynamicCastExpr;\n@@ -2121,0 +2889,1 @@\n+    private static final int CXCursor_CXXReinterpretCastExpr = (int)126L;\n@@ -2122,2 +2891,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DeclStmt = 231;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXReinterpretCastExpr = 126\n@@ -2126,2 +2895,2 @@\n-    public static int CXCursor_DeclStmt() {\n-        return (int)231L;\n+    public static int CXCursor_CXXReinterpretCastExpr() {\n+        return CXCursor_CXXReinterpretCastExpr;\n@@ -2129,0 +2898,1 @@\n+    private static final int CXCursor_CXXConstCastExpr = (int)127L;\n@@ -2130,2 +2900,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelDirective = 232;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXConstCastExpr = 127\n@@ -2134,2 +2904,2 @@\n-    public static int CXCursor_OMPParallelDirective() {\n-        return (int)232L;\n+    public static int CXCursor_CXXConstCastExpr() {\n+        return CXCursor_CXXConstCastExpr;\n@@ -2137,0 +2907,1 @@\n+    private static final int CXCursor_CXXFunctionalCastExpr = (int)128L;\n@@ -2138,2 +2909,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPSimdDirective = 233;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXFunctionalCastExpr = 128\n@@ -2142,2 +2913,2 @@\n-    public static int CXCursor_OMPSimdDirective() {\n-        return (int)233L;\n+    public static int CXCursor_CXXFunctionalCastExpr() {\n+        return CXCursor_CXXFunctionalCastExpr;\n@@ -2145,0 +2916,1 @@\n+    private static final int CXCursor_CXXTypeidExpr = (int)129L;\n@@ -2146,2 +2918,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPForDirective = 234;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXTypeidExpr = 129\n@@ -2150,2 +2922,2 @@\n-    public static int CXCursor_OMPForDirective() {\n-        return (int)234L;\n+    public static int CXCursor_CXXTypeidExpr() {\n+        return CXCursor_CXXTypeidExpr;\n@@ -2153,0 +2925,1 @@\n+    private static final int CXCursor_CXXBoolLiteralExpr = (int)130L;\n@@ -2154,2 +2927,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPSectionsDirective = 235;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXBoolLiteralExpr = 130\n@@ -2158,2 +2931,2 @@\n-    public static int CXCursor_OMPSectionsDirective() {\n-        return (int)235L;\n+    public static int CXCursor_CXXBoolLiteralExpr() {\n+        return CXCursor_CXXBoolLiteralExpr;\n@@ -2161,0 +2934,1 @@\n+    private static final int CXCursor_CXXNullPtrLiteralExpr = (int)131L;\n@@ -2162,2 +2936,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPSectionDirective = 236;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXNullPtrLiteralExpr = 131\n@@ -2166,2 +2940,2 @@\n-    public static int CXCursor_OMPSectionDirective() {\n-        return (int)236L;\n+    public static int CXCursor_CXXNullPtrLiteralExpr() {\n+        return CXCursor_CXXNullPtrLiteralExpr;\n@@ -2169,0 +2943,1 @@\n+    private static final int CXCursor_CXXThisExpr = (int)132L;\n@@ -2170,2 +2945,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPSingleDirective = 237;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXThisExpr = 132\n@@ -2174,2 +2949,2 @@\n-    public static int CXCursor_OMPSingleDirective() {\n-        return (int)237L;\n+    public static int CXCursor_CXXThisExpr() {\n+        return CXCursor_CXXThisExpr;\n@@ -2177,0 +2952,1 @@\n+    private static final int CXCursor_CXXThrowExpr = (int)133L;\n@@ -2178,2 +2954,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelForDirective = 238;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXThrowExpr = 133\n@@ -2182,2 +2958,2 @@\n-    public static int CXCursor_OMPParallelForDirective() {\n-        return (int)238L;\n+    public static int CXCursor_CXXThrowExpr() {\n+        return CXCursor_CXXThrowExpr;\n@@ -2185,0 +2961,1 @@\n+    private static final int CXCursor_CXXNewExpr = (int)134L;\n@@ -2186,2 +2963,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelSectionsDirective = 239;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXNewExpr = 134\n@@ -2190,2 +2967,2 @@\n-    public static int CXCursor_OMPParallelSectionsDirective() {\n-        return (int)239L;\n+    public static int CXCursor_CXXNewExpr() {\n+        return CXCursor_CXXNewExpr;\n@@ -2193,0 +2970,1 @@\n+    private static final int CXCursor_CXXDeleteExpr = (int)135L;\n@@ -2194,2 +2972,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskDirective = 240;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXDeleteExpr = 135\n@@ -2198,2 +2976,2 @@\n-    public static int CXCursor_OMPTaskDirective() {\n-        return (int)240L;\n+    public static int CXCursor_CXXDeleteExpr() {\n+        return CXCursor_CXXDeleteExpr;\n@@ -2201,0 +2979,1 @@\n+    private static final int CXCursor_UnaryExpr = (int)136L;\n@@ -2202,2 +2981,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPMasterDirective = 241;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnaryExpr = 136\n@@ -2206,2 +2985,2 @@\n-    public static int CXCursor_OMPMasterDirective() {\n-        return (int)241L;\n+    public static int CXCursor_UnaryExpr() {\n+        return CXCursor_UnaryExpr;\n@@ -2209,0 +2988,1 @@\n+    private static final int CXCursor_ObjCStringLiteral = (int)137L;\n@@ -2210,2 +2990,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPCriticalDirective = 242;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCStringLiteral = 137\n@@ -2214,2 +2994,2 @@\n-    public static int CXCursor_OMPCriticalDirective() {\n-        return (int)242L;\n+    public static int CXCursor_ObjCStringLiteral() {\n+        return CXCursor_ObjCStringLiteral;\n@@ -2217,0 +2997,1 @@\n+    private static final int CXCursor_ObjCEncodeExpr = (int)138L;\n@@ -2218,2 +2999,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskyieldDirective = 243;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCEncodeExpr = 138\n@@ -2222,2 +3003,2 @@\n-    public static int CXCursor_OMPTaskyieldDirective() {\n-        return (int)243L;\n+    public static int CXCursor_ObjCEncodeExpr() {\n+        return CXCursor_ObjCEncodeExpr;\n@@ -2225,0 +3006,1 @@\n+    private static final int CXCursor_ObjCSelectorExpr = (int)139L;\n@@ -2226,2 +3008,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPBarrierDirective = 244;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCSelectorExpr = 139\n@@ -2230,2 +3012,2 @@\n-    public static int CXCursor_OMPBarrierDirective() {\n-        return (int)244L;\n+    public static int CXCursor_ObjCSelectorExpr() {\n+        return CXCursor_ObjCSelectorExpr;\n@@ -2233,0 +3015,1 @@\n+    private static final int CXCursor_ObjCProtocolExpr = (int)140L;\n@@ -2234,2 +3017,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskwaitDirective = 245;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCProtocolExpr = 140\n@@ -2238,2 +3021,2 @@\n-    public static int CXCursor_OMPTaskwaitDirective() {\n-        return (int)245L;\n+    public static int CXCursor_ObjCProtocolExpr() {\n+        return CXCursor_ObjCProtocolExpr;\n@@ -2241,0 +3024,1 @@\n+    private static final int CXCursor_ObjCBridgedCastExpr = (int)141L;\n@@ -2242,2 +3026,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPFlushDirective = 246;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCBridgedCastExpr = 141\n@@ -2246,2 +3030,2 @@\n-    public static int CXCursor_OMPFlushDirective() {\n-        return (int)246L;\n+    public static int CXCursor_ObjCBridgedCastExpr() {\n+        return CXCursor_ObjCBridgedCastExpr;\n@@ -2249,0 +3033,1 @@\n+    private static final int CXCursor_PackExpansionExpr = (int)142L;\n@@ -2250,2 +3035,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_SEHLeaveStmt = 247;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_PackExpansionExpr = 142\n@@ -2254,2 +3039,2 @@\n-    public static int CXCursor_SEHLeaveStmt() {\n-        return (int)247L;\n+    public static int CXCursor_PackExpansionExpr() {\n+        return CXCursor_PackExpansionExpr;\n@@ -2257,0 +3042,1 @@\n+    private static final int CXCursor_SizeOfPackExpr = (int)143L;\n@@ -2258,2 +3044,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPOrderedDirective = 248;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SizeOfPackExpr = 143\n@@ -2262,2 +3048,2 @@\n-    public static int CXCursor_OMPOrderedDirective() {\n-        return (int)248L;\n+    public static int CXCursor_SizeOfPackExpr() {\n+        return CXCursor_SizeOfPackExpr;\n@@ -2265,0 +3051,1 @@\n+    private static final int CXCursor_LambdaExpr = (int)144L;\n@@ -2266,2 +3053,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPAtomicDirective = 249;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LambdaExpr = 144\n@@ -2270,2 +3057,2 @@\n-    public static int CXCursor_OMPAtomicDirective() {\n-        return (int)249L;\n+    public static int CXCursor_LambdaExpr() {\n+        return CXCursor_LambdaExpr;\n@@ -2273,0 +3060,1 @@\n+    private static final int CXCursor_ObjCBoolLiteralExpr = (int)145L;\n@@ -2274,2 +3062,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPForSimdDirective = 250;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCBoolLiteralExpr = 145\n@@ -2278,2 +3066,2 @@\n-    public static int CXCursor_OMPForSimdDirective() {\n-        return (int)250L;\n+    public static int CXCursor_ObjCBoolLiteralExpr() {\n+        return CXCursor_ObjCBoolLiteralExpr;\n@@ -2281,0 +3069,1 @@\n+    private static final int CXCursor_ObjCSelfExpr = (int)146L;\n@@ -2282,2 +3071,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelForSimdDirective = 251;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCSelfExpr = 146\n@@ -2286,2 +3075,2 @@\n-    public static int CXCursor_OMPParallelForSimdDirective() {\n-        return (int)251L;\n+    public static int CXCursor_ObjCSelfExpr() {\n+        return CXCursor_ObjCSelfExpr;\n@@ -2289,0 +3078,1 @@\n+    private static final int CXCursor_OMPArraySectionExpr = (int)147L;\n@@ -2290,2 +3080,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetDirective = 252;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPArraySectionExpr = 147\n@@ -2294,2 +3084,2 @@\n-    public static int CXCursor_OMPTargetDirective() {\n-        return (int)252L;\n+    public static int CXCursor_OMPArraySectionExpr() {\n+        return CXCursor_OMPArraySectionExpr;\n@@ -2297,0 +3087,1 @@\n+    private static final int CXCursor_ObjCAvailabilityCheckExpr = (int)148L;\n@@ -2298,2 +3089,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTeamsDirective = 253;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAvailabilityCheckExpr = 148\n@@ -2302,2 +3093,2 @@\n-    public static int CXCursor_OMPTeamsDirective() {\n-        return (int)253L;\n+    public static int CXCursor_ObjCAvailabilityCheckExpr() {\n+        return CXCursor_ObjCAvailabilityCheckExpr;\n@@ -2305,0 +3096,1 @@\n+    private static final int CXCursor_FixedPointLiteral = (int)149L;\n@@ -2306,2 +3098,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskgroupDirective = 254;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FixedPointLiteral = 149\n@@ -2310,2 +3102,2 @@\n-    public static int CXCursor_OMPTaskgroupDirective() {\n-        return (int)254L;\n+    public static int CXCursor_FixedPointLiteral() {\n+        return CXCursor_FixedPointLiteral;\n@@ -2313,0 +3105,1 @@\n+    private static final int CXCursor_LastExpr = (int)152L;\n@@ -2314,2 +3107,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPCancellationPointDirective = 255;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastExpr = 152\n@@ -2318,2 +3111,2 @@\n-    public static int CXCursor_OMPCancellationPointDirective() {\n-        return (int)255L;\n+    public static int CXCursor_LastExpr() {\n+        return CXCursor_LastExpr;\n@@ -2321,0 +3114,1 @@\n+    private static final int CXCursor_FirstStmt = (int)200L;\n@@ -2322,2 +3116,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPCancelDirective = 256;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstStmt = 200\n@@ -2326,2 +3120,2 @@\n-    public static int CXCursor_OMPCancelDirective() {\n-        return (int)256L;\n+    public static int CXCursor_FirstStmt() {\n+        return CXCursor_FirstStmt;\n@@ -2329,0 +3123,1 @@\n+    private static final int CXCursor_UnexposedStmt = (int)200L;\n@@ -2330,2 +3125,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetDataDirective = 257;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnexposedStmt = 200\n@@ -2334,2 +3129,2 @@\n-    public static int CXCursor_OMPTargetDataDirective() {\n-        return (int)257L;\n+    public static int CXCursor_UnexposedStmt() {\n+        return CXCursor_UnexposedStmt;\n@@ -2337,0 +3132,1 @@\n+    private static final int CXCursor_LabelStmt = (int)201L;\n@@ -2338,2 +3134,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskLoopDirective = 258;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LabelStmt = 201\n@@ -2342,2 +3138,2 @@\n-    public static int CXCursor_OMPTaskLoopDirective() {\n-        return (int)258L;\n+    public static int CXCursor_LabelStmt() {\n+        return CXCursor_LabelStmt;\n@@ -2345,0 +3141,1 @@\n+    private static final int CXCursor_CompoundStmt = (int)202L;\n@@ -2346,2 +3143,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTaskLoopSimdDirective = 259;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CompoundStmt = 202\n@@ -2350,2 +3147,2 @@\n-    public static int CXCursor_OMPTaskLoopSimdDirective() {\n-        return (int)259L;\n+    public static int CXCursor_CompoundStmt() {\n+        return CXCursor_CompoundStmt;\n@@ -2353,0 +3150,1 @@\n+    private static final int CXCursor_CaseStmt = (int)203L;\n@@ -2354,2 +3152,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPDistributeDirective = 260;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CaseStmt = 203\n@@ -2358,2 +3156,2 @@\n-    public static int CXCursor_OMPDistributeDirective() {\n-        return (int)260L;\n+    public static int CXCursor_CaseStmt() {\n+        return CXCursor_CaseStmt;\n@@ -2361,0 +3159,1 @@\n+    private static final int CXCursor_DefaultStmt = (int)204L;\n@@ -2362,2 +3161,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetEnterDataDirective = 261;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DefaultStmt = 204\n@@ -2366,2 +3165,2 @@\n-    public static int CXCursor_OMPTargetEnterDataDirective() {\n-        return (int)261L;\n+    public static int CXCursor_DefaultStmt() {\n+        return CXCursor_DefaultStmt;\n@@ -2369,0 +3168,1 @@\n+    private static final int CXCursor_IfStmt = (int)205L;\n@@ -2370,2 +3170,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetExitDataDirective = 262;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IfStmt = 205\n@@ -2374,2 +3174,2 @@\n-    public static int CXCursor_OMPTargetExitDataDirective() {\n-        return (int)262L;\n+    public static int CXCursor_IfStmt() {\n+        return CXCursor_IfStmt;\n@@ -2377,0 +3177,1 @@\n+    private static final int CXCursor_SwitchStmt = (int)206L;\n@@ -2378,2 +3179,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelDirective = 263;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SwitchStmt = 206\n@@ -2382,2 +3183,2 @@\n-    public static int CXCursor_OMPTargetParallelDirective() {\n-        return (int)263L;\n+    public static int CXCursor_SwitchStmt() {\n+        return CXCursor_SwitchStmt;\n@@ -2385,0 +3186,1 @@\n+    private static final int CXCursor_WhileStmt = (int)207L;\n@@ -2386,2 +3188,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelForDirective = 264;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_WhileStmt = 207\n@@ -2390,2 +3192,2 @@\n-    public static int CXCursor_OMPTargetParallelForDirective() {\n-        return (int)264L;\n+    public static int CXCursor_WhileStmt() {\n+        return CXCursor_WhileStmt;\n@@ -2393,0 +3195,1 @@\n+    private static final int CXCursor_DoStmt = (int)208L;\n@@ -2394,2 +3197,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetUpdateDirective = 265;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DoStmt = 208\n@@ -2398,2 +3201,2 @@\n-    public static int CXCursor_OMPTargetUpdateDirective() {\n-        return (int)265L;\n+    public static int CXCursor_DoStmt() {\n+        return CXCursor_DoStmt;\n@@ -2401,0 +3204,1 @@\n+    private static final int CXCursor_ForStmt = (int)209L;\n@@ -2402,2 +3206,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPDistributeParallelForDirective = 266;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ForStmt = 209\n@@ -2406,2 +3210,2 @@\n-    public static int CXCursor_OMPDistributeParallelForDirective() {\n-        return (int)266L;\n+    public static int CXCursor_ForStmt() {\n+        return CXCursor_ForStmt;\n@@ -2409,0 +3213,1 @@\n+    private static final int CXCursor_GotoStmt = (int)210L;\n@@ -2410,2 +3215,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPDistributeParallelForSimdDirective = 267;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_GotoStmt = 210\n@@ -2414,2 +3219,2 @@\n-    public static int CXCursor_OMPDistributeParallelForSimdDirective() {\n-        return (int)267L;\n+    public static int CXCursor_GotoStmt() {\n+        return CXCursor_GotoStmt;\n@@ -2417,0 +3222,1 @@\n+    private static final int CXCursor_IndirectGotoStmt = (int)211L;\n@@ -2418,2 +3224,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPDistributeSimdDirective = 268;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IndirectGotoStmt = 211\n@@ -2422,2 +3228,2 @@\n-    public static int CXCursor_OMPDistributeSimdDirective() {\n-        return (int)268L;\n+    public static int CXCursor_IndirectGotoStmt() {\n+        return CXCursor_IndirectGotoStmt;\n@@ -2425,0 +3231,1 @@\n+    private static final int CXCursor_ContinueStmt = (int)212L;\n@@ -2426,2 +3233,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetParallelForSimdDirective = 269;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ContinueStmt = 212\n@@ -2430,2 +3237,2 @@\n-    public static int CXCursor_OMPTargetParallelForSimdDirective() {\n-        return (int)269L;\n+    public static int CXCursor_ContinueStmt() {\n+        return CXCursor_ContinueStmt;\n@@ -2433,0 +3240,1 @@\n+    private static final int CXCursor_BreakStmt = (int)213L;\n@@ -2434,2 +3242,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetSimdDirective = 270;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_BreakStmt = 213\n@@ -2438,2 +3246,2 @@\n-    public static int CXCursor_OMPTargetSimdDirective() {\n-        return (int)270L;\n+    public static int CXCursor_BreakStmt() {\n+        return CXCursor_BreakStmt;\n@@ -2441,0 +3249,1 @@\n+    private static final int CXCursor_ReturnStmt = (int)214L;\n@@ -2442,2 +3251,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeDirective = 271;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ReturnStmt = 214\n@@ -2446,2 +3255,2 @@\n-    public static int CXCursor_OMPTeamsDistributeDirective() {\n-        return (int)271L;\n+    public static int CXCursor_ReturnStmt() {\n+        return CXCursor_ReturnStmt;\n@@ -2449,0 +3258,1 @@\n+    private static final int CXCursor_GCCAsmStmt = (int)215L;\n@@ -2450,2 +3260,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeSimdDirective = 272;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_GCCAsmStmt = 215\n@@ -2454,2 +3264,2 @@\n-    public static int CXCursor_OMPTeamsDistributeSimdDirective() {\n-        return (int)272L;\n+    public static int CXCursor_GCCAsmStmt() {\n+        return CXCursor_GCCAsmStmt;\n@@ -2457,0 +3267,1 @@\n+    private static final int CXCursor_AsmStmt = (int)215L;\n@@ -2458,2 +3269,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_AsmStmt = 215\n@@ -2462,2 +3273,2 @@\n-    public static int CXCursor_OMPTeamsDistributeParallelForSimdDirective() {\n-        return (int)273L;\n+    public static int CXCursor_AsmStmt() {\n+        return CXCursor_AsmStmt;\n@@ -2465,0 +3276,1 @@\n+    private static final int CXCursor_ObjCAtTryStmt = (int)216L;\n@@ -2466,2 +3278,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForDirective = 274;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAtTryStmt = 216\n@@ -2470,2 +3282,2 @@\n-    public static int CXCursor_OMPTeamsDistributeParallelForDirective() {\n-        return (int)274L;\n+    public static int CXCursor_ObjCAtTryStmt() {\n+        return CXCursor_ObjCAtTryStmt;\n@@ -2473,0 +3285,1 @@\n+    private static final int CXCursor_ObjCAtCatchStmt = (int)217L;\n@@ -2474,2 +3287,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDirective = 275;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAtCatchStmt = 217\n@@ -2478,2 +3291,2 @@\n-    public static int CXCursor_OMPTargetTeamsDirective() {\n-        return (int)275L;\n+    public static int CXCursor_ObjCAtCatchStmt() {\n+        return CXCursor_ObjCAtCatchStmt;\n@@ -2481,0 +3294,1 @@\n+    private static final int CXCursor_ObjCAtFinallyStmt = (int)218L;\n@@ -2482,2 +3296,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeDirective = 276;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAtFinallyStmt = 218\n@@ -2486,2 +3300,2 @@\n-    public static int CXCursor_OMPTargetTeamsDistributeDirective() {\n-        return (int)276L;\n+    public static int CXCursor_ObjCAtFinallyStmt() {\n+        return CXCursor_ObjCAtFinallyStmt;\n@@ -2489,0 +3303,1 @@\n+    private static final int CXCursor_ObjCAtThrowStmt = (int)219L;\n@@ -2490,2 +3305,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAtThrowStmt = 219\n@@ -2494,2 +3309,2 @@\n-    public static int CXCursor_OMPTargetTeamsDistributeParallelForDirective() {\n-        return (int)277L;\n+    public static int CXCursor_ObjCAtThrowStmt() {\n+        return CXCursor_ObjCAtThrowStmt;\n@@ -2497,0 +3312,1 @@\n+    private static final int CXCursor_ObjCAtSynchronizedStmt = (int)220L;\n@@ -2498,2 +3314,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAtSynchronizedStmt = 220\n@@ -2502,2 +3318,2 @@\n-    public static int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() {\n-        return (int)278L;\n+    public static int CXCursor_ObjCAtSynchronizedStmt() {\n+        return CXCursor_ObjCAtSynchronizedStmt;\n@@ -2505,0 +3321,1 @@\n+    private static final int CXCursor_ObjCAutoreleasePoolStmt = (int)221L;\n@@ -2506,2 +3323,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeSimdDirective = 279;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCAutoreleasePoolStmt = 221\n@@ -2510,2 +3327,2 @@\n-    public static int CXCursor_OMPTargetTeamsDistributeSimdDirective() {\n-        return (int)279L;\n+    public static int CXCursor_ObjCAutoreleasePoolStmt() {\n+        return CXCursor_ObjCAutoreleasePoolStmt;\n@@ -2513,0 +3330,1 @@\n+    private static final int CXCursor_ObjCForCollectionStmt = (int)222L;\n@@ -2514,2 +3332,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_BuiltinBitCastExpr = 280;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCForCollectionStmt = 222\n@@ -2518,2 +3336,2 @@\n-    public static int CXCursor_BuiltinBitCastExpr() {\n-        return (int)280L;\n+    public static int CXCursor_ObjCForCollectionStmt() {\n+        return CXCursor_ObjCForCollectionStmt;\n@@ -2521,0 +3339,1 @@\n+    private static final int CXCursor_CXXCatchStmt = (int)223L;\n@@ -2522,2 +3341,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopDirective = 281;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXCatchStmt = 223\n@@ -2526,2 +3345,2 @@\n-    public static int CXCursor_OMPMasterTaskLoopDirective() {\n-        return (int)281L;\n+    public static int CXCursor_CXXCatchStmt() {\n+        return CXCursor_CXXCatchStmt;\n@@ -2529,0 +3348,1 @@\n+    private static final int CXCursor_CXXTryStmt = (int)224L;\n@@ -2530,2 +3350,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopDirective = 282;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXTryStmt = 224\n@@ -2534,2 +3354,2 @@\n-    public static int CXCursor_OMPParallelMasterTaskLoopDirective() {\n-        return (int)282L;\n+    public static int CXCursor_CXXTryStmt() {\n+        return CXCursor_CXXTryStmt;\n@@ -2537,0 +3357,1 @@\n+    private static final int CXCursor_CXXForRangeStmt = (int)225L;\n@@ -2538,2 +3359,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopSimdDirective = 283;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXForRangeStmt = 225\n@@ -2542,2 +3363,2 @@\n-    public static int CXCursor_OMPMasterTaskLoopSimdDirective() {\n-        return (int)283L;\n+    public static int CXCursor_CXXForRangeStmt() {\n+        return CXCursor_CXXForRangeStmt;\n@@ -2545,0 +3366,1 @@\n+    private static final int CXCursor_SEHTryStmt = (int)226L;\n@@ -2546,2 +3368,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SEHTryStmt = 226\n@@ -2550,2 +3372,2 @@\n-    public static int CXCursor_OMPParallelMasterTaskLoopSimdDirective() {\n-        return (int)284L;\n+    public static int CXCursor_SEHTryStmt() {\n+        return CXCursor_SEHTryStmt;\n@@ -2553,0 +3375,1 @@\n+    private static final int CXCursor_SEHExceptStmt = (int)227L;\n@@ -2554,2 +3377,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastStmt = 293;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SEHExceptStmt = 227\n@@ -2558,2 +3381,2 @@\n-    public static int CXCursor_LastStmt() {\n-        return (int)293L;\n+    public static int CXCursor_SEHExceptStmt() {\n+        return CXCursor_SEHExceptStmt;\n@@ -2561,0 +3384,1 @@\n+    private static final int CXCursor_SEHFinallyStmt = (int)228L;\n@@ -2562,2 +3386,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TranslationUnit = 300;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SEHFinallyStmt = 228\n@@ -2566,2 +3390,2 @@\n-    public static int CXCursor_TranslationUnit() {\n-        return (int)300L;\n+    public static int CXCursor_SEHFinallyStmt() {\n+        return CXCursor_SEHFinallyStmt;\n@@ -2569,0 +3393,1 @@\n+    private static final int CXCursor_MSAsmStmt = (int)229L;\n@@ -2570,2 +3395,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstAttr = 400;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MSAsmStmt = 229\n@@ -2574,2 +3399,2 @@\n-    public static int CXCursor_FirstAttr() {\n-        return (int)400L;\n+    public static int CXCursor_MSAsmStmt() {\n+        return CXCursor_MSAsmStmt;\n@@ -2577,0 +3402,1 @@\n+    private static final int CXCursor_NullStmt = (int)230L;\n@@ -2578,2 +3404,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_UnexposedAttr = 400;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NullStmt = 230\n@@ -2582,2 +3408,2 @@\n-    public static int CXCursor_UnexposedAttr() {\n-        return (int)400L;\n+    public static int CXCursor_NullStmt() {\n+        return CXCursor_NullStmt;\n@@ -2585,0 +3411,1 @@\n+    private static final int CXCursor_DeclStmt = (int)231L;\n@@ -2586,2 +3413,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IBActionAttr = 401;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DeclStmt = 231\n@@ -2590,2 +3417,2 @@\n-    public static int CXCursor_IBActionAttr() {\n-        return (int)401L;\n+    public static int CXCursor_DeclStmt() {\n+        return CXCursor_DeclStmt;\n@@ -2593,0 +3420,1 @@\n+    private static final int CXCursor_OMPParallelDirective = (int)232L;\n@@ -2594,2 +3422,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IBOutletAttr = 402;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelDirective = 232\n@@ -2598,2 +3426,2 @@\n-    public static int CXCursor_IBOutletAttr() {\n-        return (int)402L;\n+    public static int CXCursor_OMPParallelDirective() {\n+        return CXCursor_OMPParallelDirective;\n@@ -2601,0 +3429,1 @@\n+    private static final int CXCursor_OMPSimdDirective = (int)233L;\n@@ -2602,2 +3431,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_IBOutletCollectionAttr = 403;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPSimdDirective = 233\n@@ -2606,2 +3435,2 @@\n-    public static int CXCursor_IBOutletCollectionAttr() {\n-        return (int)403L;\n+    public static int CXCursor_OMPSimdDirective() {\n+        return CXCursor_OMPSimdDirective;\n@@ -2609,0 +3438,1 @@\n+    private static final int CXCursor_OMPForDirective = (int)234L;\n@@ -2610,2 +3440,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXFinalAttr = 404;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPForDirective = 234\n@@ -2614,2 +3444,2 @@\n-    public static int CXCursor_CXXFinalAttr() {\n-        return (int)404L;\n+    public static int CXCursor_OMPForDirective() {\n+        return CXCursor_OMPForDirective;\n@@ -2617,0 +3447,1 @@\n+    private static final int CXCursor_OMPSectionsDirective = (int)235L;\n@@ -2618,2 +3449,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CXXOverrideAttr = 405;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPSectionsDirective = 235\n@@ -2622,2 +3453,2 @@\n-    public static int CXCursor_CXXOverrideAttr() {\n-        return (int)405L;\n+    public static int CXCursor_OMPSectionsDirective() {\n+        return CXCursor_OMPSectionsDirective;\n@@ -2625,0 +3456,1 @@\n+    private static final int CXCursor_OMPSectionDirective = (int)236L;\n@@ -2626,2 +3458,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_AnnotateAttr = 406;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPSectionDirective = 236\n@@ -2630,2 +3462,2 @@\n-    public static int CXCursor_AnnotateAttr() {\n-        return (int)406L;\n+    public static int CXCursor_OMPSectionDirective() {\n+        return CXCursor_OMPSectionDirective;\n@@ -2633,0 +3465,1 @@\n+    private static final int CXCursor_OMPSingleDirective = (int)237L;\n@@ -2634,2 +3467,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_AsmLabelAttr = 407;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPSingleDirective = 237\n@@ -2638,2 +3471,2 @@\n-    public static int CXCursor_AsmLabelAttr() {\n-        return (int)407L;\n+    public static int CXCursor_OMPSingleDirective() {\n+        return CXCursor_OMPSingleDirective;\n@@ -2641,0 +3474,1 @@\n+    private static final int CXCursor_OMPParallelForDirective = (int)238L;\n@@ -2642,2 +3476,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_PackedAttr = 408;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelForDirective = 238\n@@ -2646,2 +3480,2 @@\n-    public static int CXCursor_PackedAttr() {\n-        return (int)408L;\n+    public static int CXCursor_OMPParallelForDirective() {\n+        return CXCursor_OMPParallelForDirective;\n@@ -2649,0 +3483,1 @@\n+    private static final int CXCursor_OMPParallelSectionsDirective = (int)239L;\n@@ -2650,2 +3485,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_PureAttr = 409;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelSectionsDirective = 239\n@@ -2654,2 +3489,2 @@\n-    public static int CXCursor_PureAttr() {\n-        return (int)409L;\n+    public static int CXCursor_OMPParallelSectionsDirective() {\n+        return CXCursor_OMPParallelSectionsDirective;\n@@ -2657,0 +3492,1 @@\n+    private static final int CXCursor_OMPTaskDirective = (int)240L;\n@@ -2658,2 +3494,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ConstAttr = 410;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskDirective = 240\n@@ -2662,2 +3498,2 @@\n-    public static int CXCursor_ConstAttr() {\n-        return (int)410L;\n+    public static int CXCursor_OMPTaskDirective() {\n+        return CXCursor_OMPTaskDirective;\n@@ -2665,0 +3501,1 @@\n+    private static final int CXCursor_OMPMasterDirective = (int)241L;\n@@ -2666,2 +3503,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NoDuplicateAttr = 411;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPMasterDirective = 241\n@@ -2670,2 +3507,2 @@\n-    public static int CXCursor_NoDuplicateAttr() {\n-        return (int)411L;\n+    public static int CXCursor_OMPMasterDirective() {\n+        return CXCursor_OMPMasterDirective;\n@@ -2673,0 +3510,1 @@\n+    private static final int CXCursor_OMPCriticalDirective = (int)242L;\n@@ -2674,2 +3512,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CUDAConstantAttr = 412;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPCriticalDirective = 242\n@@ -2678,2 +3516,2 @@\n-    public static int CXCursor_CUDAConstantAttr() {\n-        return (int)412L;\n+    public static int CXCursor_OMPCriticalDirective() {\n+        return CXCursor_OMPCriticalDirective;\n@@ -2681,0 +3519,1 @@\n+    private static final int CXCursor_OMPTaskyieldDirective = (int)243L;\n@@ -2682,2 +3521,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CUDADeviceAttr = 413;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskyieldDirective = 243\n@@ -2686,2 +3525,2 @@\n-    public static int CXCursor_CUDADeviceAttr() {\n-        return (int)413L;\n+    public static int CXCursor_OMPTaskyieldDirective() {\n+        return CXCursor_OMPTaskyieldDirective;\n@@ -2689,0 +3528,1 @@\n+    private static final int CXCursor_OMPBarrierDirective = (int)244L;\n@@ -2690,2 +3530,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CUDAGlobalAttr = 414;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPBarrierDirective = 244\n@@ -2694,2 +3534,2 @@\n-    public static int CXCursor_CUDAGlobalAttr() {\n-        return (int)414L;\n+    public static int CXCursor_OMPBarrierDirective() {\n+        return CXCursor_OMPBarrierDirective;\n@@ -2697,0 +3537,1 @@\n+    private static final int CXCursor_OMPTaskwaitDirective = (int)245L;\n@@ -2698,2 +3539,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CUDAHostAttr = 415;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskwaitDirective = 245\n@@ -2702,2 +3543,2 @@\n-    public static int CXCursor_CUDAHostAttr() {\n-        return (int)415L;\n+    public static int CXCursor_OMPTaskwaitDirective() {\n+        return CXCursor_OMPTaskwaitDirective;\n@@ -2705,0 +3546,1 @@\n+    private static final int CXCursor_OMPFlushDirective = (int)246L;\n@@ -2706,2 +3548,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_CUDASharedAttr = 416;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPFlushDirective = 246\n@@ -2710,2 +3552,2 @@\n-    public static int CXCursor_CUDASharedAttr() {\n-        return (int)416L;\n+    public static int CXCursor_OMPFlushDirective() {\n+        return CXCursor_OMPFlushDirective;\n@@ -2713,0 +3555,1 @@\n+    private static final int CXCursor_SEHLeaveStmt = (int)247L;\n@@ -2714,2 +3557,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_VisibilityAttr = 417;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_SEHLeaveStmt = 247\n@@ -2718,2 +3561,2 @@\n-    public static int CXCursor_VisibilityAttr() {\n-        return (int)417L;\n+    public static int CXCursor_SEHLeaveStmt() {\n+        return CXCursor_SEHLeaveStmt;\n@@ -2721,0 +3564,1 @@\n+    private static final int CXCursor_OMPOrderedDirective = (int)248L;\n@@ -2722,2 +3566,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DLLExport = 418;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPOrderedDirective = 248\n@@ -2726,2 +3570,2 @@\n-    public static int CXCursor_DLLExport() {\n-        return (int)418L;\n+    public static int CXCursor_OMPOrderedDirective() {\n+        return CXCursor_OMPOrderedDirective;\n@@ -2729,0 +3573,1 @@\n+    private static final int CXCursor_OMPAtomicDirective = (int)249L;\n@@ -2730,2 +3575,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_DLLImport = 419;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPAtomicDirective = 249\n@@ -2734,2 +3579,2 @@\n-    public static int CXCursor_DLLImport() {\n-        return (int)419L;\n+    public static int CXCursor_OMPAtomicDirective() {\n+        return CXCursor_OMPAtomicDirective;\n@@ -2737,0 +3582,1 @@\n+    private static final int CXCursor_OMPForSimdDirective = (int)250L;\n@@ -2738,2 +3584,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NSReturnsRetained = 420;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPForSimdDirective = 250\n@@ -2742,2 +3588,2 @@\n-    public static int CXCursor_NSReturnsRetained() {\n-        return (int)420L;\n+    public static int CXCursor_OMPForSimdDirective() {\n+        return CXCursor_OMPForSimdDirective;\n@@ -2745,0 +3591,1 @@\n+    private static final int CXCursor_OMPParallelForSimdDirective = (int)251L;\n@@ -2746,2 +3593,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NSReturnsNotRetained = 421;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelForSimdDirective = 251\n@@ -2750,2 +3597,2 @@\n-    public static int CXCursor_NSReturnsNotRetained() {\n-        return (int)421L;\n+    public static int CXCursor_OMPParallelForSimdDirective() {\n+        return CXCursor_OMPParallelForSimdDirective;\n@@ -2753,0 +3600,1 @@\n+    private static final int CXCursor_OMPTargetDirective = (int)252L;\n@@ -2754,2 +3602,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NSReturnsAutoreleased = 422;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetDirective = 252\n@@ -2758,2 +3606,2 @@\n-    public static int CXCursor_NSReturnsAutoreleased() {\n-        return (int)422L;\n+    public static int CXCursor_OMPTargetDirective() {\n+        return CXCursor_OMPTargetDirective;\n@@ -2761,0 +3609,1 @@\n+    private static final int CXCursor_OMPTeamsDirective = (int)253L;\n@@ -2762,2 +3611,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NSConsumesSelf = 423;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTeamsDirective = 253\n@@ -2766,2 +3615,2 @@\n-    public static int CXCursor_NSConsumesSelf() {\n-        return (int)423L;\n+    public static int CXCursor_OMPTeamsDirective() {\n+        return CXCursor_OMPTeamsDirective;\n@@ -2769,0 +3618,1 @@\n+    private static final int CXCursor_OMPTaskgroupDirective = (int)254L;\n@@ -2770,2 +3620,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_NSConsumed = 424;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskgroupDirective = 254\n@@ -2774,2 +3624,2 @@\n-    public static int CXCursor_NSConsumed() {\n-        return (int)424L;\n+    public static int CXCursor_OMPTaskgroupDirective() {\n+        return CXCursor_OMPTaskgroupDirective;\n@@ -2777,0 +3627,1 @@\n+    private static final int CXCursor_OMPCancellationPointDirective = (int)255L;\n@@ -2778,2 +3629,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCException = 425;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPCancellationPointDirective = 255\n@@ -2782,2 +3633,2 @@\n-    public static int CXCursor_ObjCException() {\n-        return (int)425L;\n+    public static int CXCursor_OMPCancellationPointDirective() {\n+        return CXCursor_OMPCancellationPointDirective;\n@@ -2785,0 +3636,1 @@\n+    private static final int CXCursor_OMPCancelDirective = (int)256L;\n@@ -2786,2 +3638,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCNSObject = 426;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPCancelDirective = 256\n@@ -2790,2 +3642,2 @@\n-    public static int CXCursor_ObjCNSObject() {\n-        return (int)426L;\n+    public static int CXCursor_OMPCancelDirective() {\n+        return CXCursor_OMPCancelDirective;\n@@ -2793,0 +3645,1 @@\n+    private static final int CXCursor_OMPTargetDataDirective = (int)257L;\n@@ -2794,2 +3647,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCIndependentClass = 427;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetDataDirective = 257\n@@ -2798,2 +3651,2 @@\n-    public static int CXCursor_ObjCIndependentClass() {\n-        return (int)427L;\n+    public static int CXCursor_OMPTargetDataDirective() {\n+        return CXCursor_OMPTargetDataDirective;\n@@ -2801,0 +3654,1 @@\n+    private static final int CXCursor_OMPTaskLoopDirective = (int)258L;\n@@ -2802,2 +3656,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCPreciseLifetime = 428;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskLoopDirective = 258\n@@ -2806,2 +3660,2 @@\n-    public static int CXCursor_ObjCPreciseLifetime() {\n-        return (int)428L;\n+    public static int CXCursor_OMPTaskLoopDirective() {\n+        return CXCursor_OMPTaskLoopDirective;\n@@ -2809,0 +3663,1 @@\n+    private static final int CXCursor_OMPTaskLoopSimdDirective = (int)259L;\n@@ -2810,2 +3665,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCReturnsInnerPointer = 429;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTaskLoopSimdDirective = 259\n@@ -2814,2 +3669,2 @@\n-    public static int CXCursor_ObjCReturnsInnerPointer() {\n-        return (int)429L;\n+    public static int CXCursor_OMPTaskLoopSimdDirective() {\n+        return CXCursor_OMPTaskLoopSimdDirective;\n@@ -2817,0 +3672,1 @@\n+    private static final int CXCursor_OMPDistributeDirective = (int)260L;\n@@ -2818,2 +3674,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCRequiresSuper = 430;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPDistributeDirective = 260\n@@ -2822,2 +3678,2 @@\n-    public static int CXCursor_ObjCRequiresSuper() {\n-        return (int)430L;\n+    public static int CXCursor_OMPDistributeDirective() {\n+        return CXCursor_OMPDistributeDirective;\n@@ -2825,0 +3681,1 @@\n+    private static final int CXCursor_OMPTargetEnterDataDirective = (int)261L;\n@@ -2826,2 +3683,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCRootClass = 431;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetEnterDataDirective = 261\n@@ -2830,2 +3687,2 @@\n-    public static int CXCursor_ObjCRootClass() {\n-        return (int)431L;\n+    public static int CXCursor_OMPTargetEnterDataDirective() {\n+        return CXCursor_OMPTargetEnterDataDirective;\n@@ -2833,0 +3690,1 @@\n+    private static final int CXCursor_OMPTargetExitDataDirective = (int)262L;\n@@ -2834,2 +3692,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCSubclassingRestricted = 432;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetExitDataDirective = 262\n@@ -2838,2 +3696,2 @@\n-    public static int CXCursor_ObjCSubclassingRestricted() {\n-        return (int)432L;\n+    public static int CXCursor_OMPTargetExitDataDirective() {\n+        return CXCursor_OMPTargetExitDataDirective;\n@@ -2841,0 +3699,1 @@\n+    private static final int CXCursor_OMPTargetParallelDirective = (int)263L;\n@@ -2842,2 +3701,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCExplicitProtocolImpl = 433;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelDirective = 263\n@@ -2846,2 +3705,2 @@\n-    public static int CXCursor_ObjCExplicitProtocolImpl() {\n-        return (int)433L;\n+    public static int CXCursor_OMPTargetParallelDirective() {\n+        return CXCursor_OMPTargetParallelDirective;\n@@ -2849,0 +3708,1 @@\n+    private static final int CXCursor_OMPTargetParallelForDirective = (int)264L;\n@@ -2850,2 +3710,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCDesignatedInitializer = 434;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelForDirective = 264\n@@ -2854,2 +3714,2 @@\n-    public static int CXCursor_ObjCDesignatedInitializer() {\n-        return (int)434L;\n+    public static int CXCursor_OMPTargetParallelForDirective() {\n+        return CXCursor_OMPTargetParallelForDirective;\n@@ -2857,0 +3717,1 @@\n+    private static final int CXCursor_OMPTargetUpdateDirective = (int)265L;\n@@ -2858,2 +3719,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCRuntimeVisible = 435;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetUpdateDirective = 265\n@@ -2862,2 +3723,2 @@\n-    public static int CXCursor_ObjCRuntimeVisible() {\n-        return (int)435L;\n+    public static int CXCursor_OMPTargetUpdateDirective() {\n+        return CXCursor_OMPTargetUpdateDirective;\n@@ -2865,0 +3726,1 @@\n+    private static final int CXCursor_OMPDistributeParallelForDirective = (int)266L;\n@@ -2866,2 +3728,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ObjCBoxable = 436;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPDistributeParallelForDirective = 266\n@@ -2870,2 +3732,2 @@\n-    public static int CXCursor_ObjCBoxable() {\n-        return (int)436L;\n+    public static int CXCursor_OMPDistributeParallelForDirective() {\n+        return CXCursor_OMPDistributeParallelForDirective;\n@@ -2873,0 +3735,1 @@\n+    private static final int CXCursor_OMPDistributeParallelForSimdDirective = (int)267L;\n@@ -2874,2 +3737,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FlagEnum = 437;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPDistributeParallelForSimdDirective = 267\n@@ -2878,2 +3741,2 @@\n-    public static int CXCursor_FlagEnum() {\n-        return (int)437L;\n+    public static int CXCursor_OMPDistributeParallelForSimdDirective() {\n+        return CXCursor_OMPDistributeParallelForSimdDirective;\n@@ -2881,0 +3744,1 @@\n+    private static final int CXCursor_OMPDistributeSimdDirective = (int)268L;\n@@ -2882,2 +3746,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ConvergentAttr = 438;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPDistributeSimdDirective = 268\n@@ -2886,2 +3750,2 @@\n-    public static int CXCursor_ConvergentAttr() {\n-        return (int)438L;\n+    public static int CXCursor_OMPDistributeSimdDirective() {\n+        return CXCursor_OMPDistributeSimdDirective;\n@@ -2889,0 +3753,1 @@\n+    private static final int CXCursor_OMPTargetParallelForSimdDirective = (int)269L;\n@@ -2890,2 +3755,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_WarnUnusedAttr = 439;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetParallelForSimdDirective = 269\n@@ -2894,2 +3759,2 @@\n-    public static int CXCursor_WarnUnusedAttr() {\n-        return (int)439L;\n+    public static int CXCursor_OMPTargetParallelForSimdDirective() {\n+        return CXCursor_OMPTargetParallelForSimdDirective;\n@@ -2897,0 +3762,1 @@\n+    private static final int CXCursor_OMPTargetSimdDirective = (int)270L;\n@@ -2898,2 +3764,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_WarnUnusedResultAttr = 440;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetSimdDirective = 270\n@@ -2902,2 +3768,2 @@\n-    public static int CXCursor_WarnUnusedResultAttr() {\n-        return (int)440L;\n+    public static int CXCursor_OMPTargetSimdDirective() {\n+        return CXCursor_OMPTargetSimdDirective;\n@@ -2905,0 +3771,1 @@\n+    private static final int CXCursor_OMPTeamsDistributeDirective = (int)271L;\n@@ -2906,2 +3773,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_AlignedAttr = 441;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeDirective = 271\n@@ -2910,2 +3777,2 @@\n-    public static int CXCursor_AlignedAttr() {\n-        return (int)441L;\n+    public static int CXCursor_OMPTeamsDistributeDirective() {\n+        return CXCursor_OMPTeamsDistributeDirective;\n@@ -2913,0 +3780,1 @@\n+    private static final int CXCursor_OMPTeamsDistributeSimdDirective = (int)272L;\n@@ -2914,2 +3782,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastAttr = 441;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeSimdDirective = 272\n@@ -2918,2 +3786,2 @@\n-    public static int CXCursor_LastAttr() {\n-        return (int)441L;\n+    public static int CXCursor_OMPTeamsDistributeSimdDirective() {\n+        return CXCursor_OMPTeamsDistributeSimdDirective;\n@@ -2921,0 +3789,1 @@\n+    private static final int CXCursor_OMPTeamsDistributeParallelForSimdDirective = (int)273L;\n@@ -2922,2 +3791,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_PreprocessingDirective = 500;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForSimdDirective = 273\n@@ -2926,2 +3795,2 @@\n-    public static int CXCursor_PreprocessingDirective() {\n-        return (int)500L;\n+    public static int CXCursor_OMPTeamsDistributeParallelForSimdDirective() {\n+        return CXCursor_OMPTeamsDistributeParallelForSimdDirective;\n@@ -2929,0 +3798,1 @@\n+    private static final int CXCursor_OMPTeamsDistributeParallelForDirective = (int)274L;\n@@ -2930,2 +3800,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MacroDefinition = 501;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTeamsDistributeParallelForDirective = 274\n@@ -2934,2 +3804,2 @@\n-    public static int CXCursor_MacroDefinition() {\n-        return (int)501L;\n+    public static int CXCursor_OMPTeamsDistributeParallelForDirective() {\n+        return CXCursor_OMPTeamsDistributeParallelForDirective;\n@@ -2937,0 +3807,1 @@\n+    private static final int CXCursor_OMPTargetTeamsDirective = (int)275L;\n@@ -2938,2 +3809,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MacroExpansion = 502;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDirective = 275\n@@ -2942,2 +3813,2 @@\n-    public static int CXCursor_MacroExpansion() {\n-        return (int)502L;\n+    public static int CXCursor_OMPTargetTeamsDirective() {\n+        return CXCursor_OMPTargetTeamsDirective;\n@@ -2945,0 +3816,1 @@\n+    private static final int CXCursor_OMPTargetTeamsDistributeDirective = (int)276L;\n@@ -2946,2 +3818,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_MacroInstantiation = 502;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeDirective = 276\n@@ -2950,2 +3822,2 @@\n-    public static int CXCursor_MacroInstantiation() {\n-        return (int)502L;\n+    public static int CXCursor_OMPTargetTeamsDistributeDirective() {\n+        return CXCursor_OMPTargetTeamsDistributeDirective;\n@@ -2953,0 +3825,1 @@\n+    private static final int CXCursor_OMPTargetTeamsDistributeParallelForDirective = (int)277L;\n@@ -2954,2 +3827,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_InclusionDirective = 503;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForDirective = 277\n@@ -2958,2 +3831,2 @@\n-    public static int CXCursor_InclusionDirective() {\n-        return (int)503L;\n+    public static int CXCursor_OMPTargetTeamsDistributeParallelForDirective() {\n+        return CXCursor_OMPTargetTeamsDistributeParallelForDirective;\n@@ -2961,0 +3834,1 @@\n+    private static final int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = (int)278L;\n@@ -2962,2 +3836,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstPreprocessing = 500;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 278\n@@ -2966,2 +3840,2 @@\n-    public static int CXCursor_FirstPreprocessing() {\n-        return (int)500L;\n+    public static int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() {\n+        return CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective;\n@@ -2969,0 +3843,1 @@\n+    private static final int CXCursor_OMPTargetTeamsDistributeSimdDirective = (int)279L;\n@@ -2970,2 +3845,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastPreprocessing = 503;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPTargetTeamsDistributeSimdDirective = 279\n@@ -2974,2 +3849,2 @@\n-    public static int CXCursor_LastPreprocessing() {\n-        return (int)503L;\n+    public static int CXCursor_OMPTargetTeamsDistributeSimdDirective() {\n+        return CXCursor_OMPTargetTeamsDistributeSimdDirective;\n@@ -2977,0 +3852,1 @@\n+    private static final int CXCursor_BuiltinBitCastExpr = (int)280L;\n@@ -2978,2 +3854,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_ModuleImportDecl = 600;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_BuiltinBitCastExpr = 280\n@@ -2982,2 +3858,2 @@\n-    public static int CXCursor_ModuleImportDecl() {\n-        return (int)600L;\n+    public static int CXCursor_BuiltinBitCastExpr() {\n+        return CXCursor_BuiltinBitCastExpr;\n@@ -2985,0 +3861,1 @@\n+    private static final int CXCursor_OMPMasterTaskLoopDirective = (int)281L;\n@@ -2986,2 +3863,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_TypeAliasTemplateDecl = 601;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopDirective = 281\n@@ -2990,2 +3867,2 @@\n-    public static int CXCursor_TypeAliasTemplateDecl() {\n-        return (int)601L;\n+    public static int CXCursor_OMPMasterTaskLoopDirective() {\n+        return CXCursor_OMPMasterTaskLoopDirective;\n@@ -2993,0 +3870,1 @@\n+    private static final int CXCursor_OMPParallelMasterTaskLoopDirective = (int)282L;\n@@ -2994,2 +3872,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_StaticAssert = 602;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopDirective = 282\n@@ -2998,2 +3876,2 @@\n-    public static int CXCursor_StaticAssert() {\n-        return (int)602L;\n+    public static int CXCursor_OMPParallelMasterTaskLoopDirective() {\n+        return CXCursor_OMPParallelMasterTaskLoopDirective;\n@@ -3001,0 +3879,1 @@\n+    private static final int CXCursor_OMPMasterTaskLoopSimdDirective = (int)283L;\n@@ -3002,2 +3881,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FriendDecl = 603;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPMasterTaskLoopSimdDirective = 283\n@@ -3006,2 +3885,2 @@\n-    public static int CXCursor_FriendDecl() {\n-        return (int)603L;\n+    public static int CXCursor_OMPMasterTaskLoopSimdDirective() {\n+        return CXCursor_OMPMasterTaskLoopSimdDirective;\n@@ -3009,0 +3888,1 @@\n+    private static final int CXCursor_OMPParallelMasterTaskLoopSimdDirective = (int)284L;\n@@ -3010,2 +3890,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_FirstExtraDecl = 600;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OMPParallelMasterTaskLoopSimdDirective = 284\n@@ -3014,2 +3894,2 @@\n-    public static int CXCursor_FirstExtraDecl() {\n-        return (int)600L;\n+    public static int CXCursor_OMPParallelMasterTaskLoopSimdDirective() {\n+        return CXCursor_OMPParallelMasterTaskLoopSimdDirective;\n@@ -3017,0 +3897,1 @@\n+    private static final int CXCursor_LastStmt = (int)293L;\n@@ -3018,2 +3899,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_LastExtraDecl = 603;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastStmt = 293\n@@ -3022,2 +3903,2 @@\n-    public static int CXCursor_LastExtraDecl() {\n-        return (int)603L;\n+    public static int CXCursor_LastStmt() {\n+        return CXCursor_LastStmt;\n@@ -3025,0 +3906,1 @@\n+    private static final int CXCursor_TranslationUnit = (int)300L;\n@@ -3026,2 +3908,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind.CXCursor_OverloadCandidate = 700;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TranslationUnit = 300\n@@ -3030,5 +3912,2 @@\n-    public static int CXCursor_OverloadCandidate() {\n-        return (int)700L;\n-    }\n-    public static MethodHandle clang_getNullCursor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getNullCursor$MH,\"clang_getNullCursor\");\n+    public static int CXCursor_TranslationUnit() {\n+        return CXCursor_TranslationUnit;\n@@ -3036,0 +3915,1 @@\n+    private static final int CXCursor_FirstAttr = (int)400L;\n@@ -3037,2 +3917,2 @@\n-     * {@snippet :\n-     * CXCursor clang_getNullCursor();\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstAttr = 400\n@@ -3041,10 +3921,2 @@\n-    public static MemorySegment clang_getNullCursor(SegmentAllocator allocator) {\n-        var mh$ = clang_getNullCursor$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTranslationUnitCursor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getTranslationUnitCursor$MH,\"clang_getTranslationUnitCursor\");\n+    public static int CXCursor_FirstAttr() {\n+        return CXCursor_FirstAttr;\n@@ -3052,0 +3924,1 @@\n+    private static final int CXCursor_UnexposedAttr = (int)400L;\n@@ -3053,2 +3926,2 @@\n-     * {@snippet :\n-     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_UnexposedAttr = 400\n@@ -3057,10 +3930,2 @@\n-    public static MemorySegment clang_getTranslationUnitCursor(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getTranslationUnitCursor$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_equalCursors$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_equalCursors$MH,\"clang_equalCursors\");\n+    public static int CXCursor_UnexposedAttr() {\n+        return CXCursor_UnexposedAttr;\n@@ -3068,0 +3933,1 @@\n+    private static final int CXCursor_IBActionAttr = (int)401L;\n@@ -3069,2 +3935,2 @@\n-     * {@snippet :\n-     * unsigned int clang_equalCursors(CXCursor, CXCursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IBActionAttr = 401\n@@ -3073,10 +3939,2 @@\n-    public static int clang_equalCursors(MemorySegment x0, MemorySegment x1) {\n-        var mh$ = clang_equalCursors$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isNull$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_Cursor_isNull$MH,\"clang_Cursor_isNull\");\n+    public static int CXCursor_IBActionAttr() {\n+        return CXCursor_IBActionAttr;\n@@ -3084,0 +3942,1 @@\n+    private static final int CXCursor_IBOutletAttr = (int)402L;\n@@ -3085,2 +3944,2 @@\n-     * {@snippet :\n-     * int clang_Cursor_isNull(CXCursor cursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IBOutletAttr = 402\n@@ -3089,10 +3948,2 @@\n-    public static int clang_Cursor_isNull(MemorySegment cursor) {\n-        var mh$ = clang_Cursor_isNull$MH();\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursorKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getCursorKind$MH,\"clang_getCursorKind\");\n+    public static int CXCursor_IBOutletAttr() {\n+        return CXCursor_IBOutletAttr;\n@@ -3100,0 +3951,1 @@\n+    private static final int CXCursor_IBOutletCollectionAttr = (int)403L;\n@@ -3101,2 +3953,2 @@\n-     * {@snippet :\n-     * enum CXCursorKind clang_getCursorKind(CXCursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_IBOutletCollectionAttr = 403\n@@ -3105,10 +3957,2 @@\n-    public static int clang_getCursorKind(MemorySegment x0) {\n-        var mh$ = clang_getCursorKind$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isDeclaration$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_isDeclaration$MH,\"clang_isDeclaration\");\n+    public static int CXCursor_IBOutletCollectionAttr() {\n+        return CXCursor_IBOutletCollectionAttr;\n@@ -3116,0 +3960,1 @@\n+    private static final int CXCursor_CXXFinalAttr = (int)404L;\n@@ -3117,2 +3962,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isDeclaration(enum CXCursorKind);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXFinalAttr = 404\n@@ -3121,10 +3966,2 @@\n-    public static int clang_isDeclaration(int x0) {\n-        var mh$ = clang_isDeclaration$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isAttribute$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_isAttribute$MH,\"clang_isAttribute\");\n+    public static int CXCursor_CXXFinalAttr() {\n+        return CXCursor_CXXFinalAttr;\n@@ -3132,0 +3969,1 @@\n+    private static final int CXCursor_CXXOverrideAttr = (int)405L;\n@@ -3133,2 +3971,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isAttribute(enum CXCursorKind);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CXXOverrideAttr = 405\n@@ -3137,10 +3975,2 @@\n-    public static int clang_isAttribute(int x0) {\n-        var mh$ = clang_isAttribute$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isInvalid$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_isInvalid$MH,\"clang_isInvalid\");\n+    public static int CXCursor_CXXOverrideAttr() {\n+        return CXCursor_CXXOverrideAttr;\n@@ -3148,0 +3978,1 @@\n+    private static final int CXCursor_AnnotateAttr = (int)406L;\n@@ -3149,2 +3980,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isInvalid(enum CXCursorKind);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_AnnotateAttr = 406\n@@ -3153,10 +3984,2 @@\n-    public static int clang_isInvalid(int x0) {\n-        var mh$ = clang_isInvalid$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isPreprocessing$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_isPreprocessing$MH,\"clang_isPreprocessing\");\n+    public static int CXCursor_AnnotateAttr() {\n+        return CXCursor_AnnotateAttr;\n@@ -3164,0 +3987,1 @@\n+    private static final int CXCursor_AsmLabelAttr = (int)407L;\n@@ -3165,2 +3989,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isPreprocessing(enum CXCursorKind);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_AsmLabelAttr = 407\n@@ -3169,7 +3993,2 @@\n-    public static int clang_isPreprocessing(int x0) {\n-        var mh$ = clang_isPreprocessing$MH();\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXCursor_AsmLabelAttr() {\n+        return CXCursor_AsmLabelAttr;\n@@ -3177,0 +3996,1 @@\n+    private static final int CXCursor_PackedAttr = (int)408L;\n@@ -3178,2 +3998,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind.CXLinkage_Invalid = 0;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_PackedAttr = 408\n@@ -3182,2 +4002,2 @@\n-    public static int CXLinkage_Invalid() {\n-        return (int)0L;\n+    public static int CXCursor_PackedAttr() {\n+        return CXCursor_PackedAttr;\n@@ -3185,0 +4005,1 @@\n+    private static final int CXCursor_PureAttr = (int)409L;\n@@ -3186,2 +4007,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind.CXLinkage_NoLinkage = 1;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_PureAttr = 409\n@@ -3190,2 +4011,2 @@\n-    public static int CXLinkage_NoLinkage() {\n-        return (int)1L;\n+    public static int CXCursor_PureAttr() {\n+        return CXCursor_PureAttr;\n@@ -3193,0 +4014,1 @@\n+    private static final int CXCursor_ConstAttr = (int)410L;\n@@ -3194,2 +4016,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind.CXLinkage_Internal = 2;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ConstAttr = 410\n@@ -3198,2 +4020,2 @@\n-    public static int CXLinkage_Internal() {\n-        return (int)2L;\n+    public static int CXCursor_ConstAttr() {\n+        return CXCursor_ConstAttr;\n@@ -3201,0 +4023,1 @@\n+    private static final int CXCursor_NoDuplicateAttr = (int)411L;\n@@ -3202,2 +4025,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind.CXLinkage_UniqueExternal = 3;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NoDuplicateAttr = 411\n@@ -3206,2 +4029,2 @@\n-    public static int CXLinkage_UniqueExternal() {\n-        return (int)3L;\n+    public static int CXCursor_NoDuplicateAttr() {\n+        return CXCursor_NoDuplicateAttr;\n@@ -3209,0 +4032,1 @@\n+    private static final int CXCursor_CUDAConstantAttr = (int)412L;\n@@ -3210,2 +4034,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind.CXLinkage_External = 4;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CUDAConstantAttr = 412\n@@ -3214,2 +4038,2 @@\n-    public static int CXLinkage_External() {\n-        return (int)4L;\n+    public static int CXCursor_CUDAConstantAttr() {\n+        return CXCursor_CUDAConstantAttr;\n@@ -3217,2 +4041,8 @@\n-    public static MethodHandle clang_getCursorLinkage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getCursorLinkage$MH,\"clang_getCursorLinkage\");\n+    private static final int CXCursor_CUDADeviceAttr = (int)413L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CUDADeviceAttr = 413\n+     * }\n+     *\/\n+    public static int CXCursor_CUDADeviceAttr() {\n+        return CXCursor_CUDADeviceAttr;\n@@ -3220,0 +4050,1 @@\n+    private static final int CXCursor_CUDAGlobalAttr = (int)414L;\n@@ -3221,2 +4052,2 @@\n-     * {@snippet :\n-     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CUDAGlobalAttr = 414\n@@ -3225,7 +4056,2 @@\n-    public static int clang_getCursorLinkage(MemorySegment cursor) {\n-        var mh$ = clang_getCursorLinkage$MH();\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXCursor_CUDAGlobalAttr() {\n+        return CXCursor_CUDAGlobalAttr;\n@@ -3233,0 +4059,1 @@\n+    private static final int CXCursor_CUDAHostAttr = (int)415L;\n@@ -3234,2 +4061,2 @@\n-     * {@snippet :\n-     * enum CXLanguageKind.CXLanguage_Invalid = 0;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CUDAHostAttr = 415\n@@ -3238,2 +4065,2 @@\n-    public static int CXLanguage_Invalid() {\n-        return (int)0L;\n+    public static int CXCursor_CUDAHostAttr() {\n+        return CXCursor_CUDAHostAttr;\n@@ -3241,0 +4068,1 @@\n+    private static final int CXCursor_CUDASharedAttr = (int)416L;\n@@ -3242,2 +4070,2 @@\n-     * {@snippet :\n-     * enum CXLanguageKind.CXLanguage_C = 1;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_CUDASharedAttr = 416\n@@ -3246,2 +4074,2 @@\n-    public static int CXLanguage_C() {\n-        return (int)1L;\n+    public static int CXCursor_CUDASharedAttr() {\n+        return CXCursor_CUDASharedAttr;\n@@ -3249,0 +4077,1 @@\n+    private static final int CXCursor_VisibilityAttr = (int)417L;\n@@ -3250,2 +4079,2 @@\n-     * {@snippet :\n-     * enum CXLanguageKind.CXLanguage_ObjC = 2;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_VisibilityAttr = 417\n@@ -3254,2 +4083,2 @@\n-    public static int CXLanguage_ObjC() {\n-        return (int)2L;\n+    public static int CXCursor_VisibilityAttr() {\n+        return CXCursor_VisibilityAttr;\n@@ -3257,0 +4086,1 @@\n+    private static final int CXCursor_DLLExport = (int)418L;\n@@ -3258,2 +4088,2 @@\n-     * {@snippet :\n-     * enum CXLanguageKind.CXLanguage_CPlusPlus = 3;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DLLExport = 418\n@@ -3262,5 +4092,2 @@\n-    public static int CXLanguage_CPlusPlus() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_getCursorLanguage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorLanguage$MH,\"clang_getCursorLanguage\");\n+    public static int CXCursor_DLLExport() {\n+        return CXCursor_DLLExport;\n@@ -3268,0 +4095,1 @@\n+    private static final int CXCursor_DLLImport = (int)419L;\n@@ -3269,2 +4097,2 @@\n-     * {@snippet :\n-     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_DLLImport = 419\n@@ -3273,10 +4101,2 @@\n-    public static int clang_getCursorLanguage(MemorySegment cursor) {\n-        var mh$ = clang_getCursorLanguage$MH();\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_Cursor_getTranslationUnit$MH,\"clang_Cursor_getTranslationUnit\");\n+    public static int CXCursor_DLLImport() {\n+        return CXCursor_DLLImport;\n@@ -3284,0 +4104,1 @@\n+    private static final int CXCursor_NSReturnsRetained = (int)420L;\n@@ -3285,2 +4106,2 @@\n-     * {@snippet :\n-     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NSReturnsRetained = 420\n@@ -3289,10 +4110,2 @@\n-    public static MemorySegment clang_Cursor_getTranslationUnit(MemorySegment x0) {\n-        var mh$ = clang_Cursor_getTranslationUnit$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursorLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorLocation$MH,\"clang_getCursorLocation\");\n+    public static int CXCursor_NSReturnsRetained() {\n+        return CXCursor_NSReturnsRetained;\n@@ -3300,0 +4113,1 @@\n+    private static final int CXCursor_NSReturnsNotRetained = (int)421L;\n@@ -3301,2 +4115,2 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getCursorLocation(CXCursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NSReturnsNotRetained = 421\n@@ -3305,10 +4119,2 @@\n-    public static MemorySegment clang_getCursorLocation(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorLocation$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursorExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorExtent$MH,\"clang_getCursorExtent\");\n+    public static int CXCursor_NSReturnsNotRetained() {\n+        return CXCursor_NSReturnsNotRetained;\n@@ -3316,0 +4122,1 @@\n+    private static final int CXCursor_NSReturnsAutoreleased = (int)422L;\n@@ -3317,2 +4124,2 @@\n-     * {@snippet :\n-     * CXSourceRange clang_getCursorExtent(CXCursor);\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NSReturnsAutoreleased = 422\n@@ -3321,7 +4128,2 @@\n-    public static MemorySegment clang_getCursorExtent(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorExtent$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXCursor_NSReturnsAutoreleased() {\n+        return CXCursor_NSReturnsAutoreleased;\n@@ -3329,0 +4131,1 @@\n+    private static final int CXCursor_NSConsumesSelf = (int)423L;\n@@ -3330,2 +4133,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Invalid = 0;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NSConsumesSelf = 423\n@@ -3334,2 +4137,2 @@\n-    public static int CXType_Invalid() {\n-        return (int)0L;\n+    public static int CXCursor_NSConsumesSelf() {\n+        return CXCursor_NSConsumesSelf;\n@@ -3337,0 +4140,1 @@\n+    private static final int CXCursor_NSConsumed = (int)424L;\n@@ -3338,2 +4142,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Unexposed = 1;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_NSConsumed = 424\n@@ -3342,2 +4146,2 @@\n-    public static int CXType_Unexposed() {\n-        return (int)1L;\n+    public static int CXCursor_NSConsumed() {\n+        return CXCursor_NSConsumed;\n@@ -3345,0 +4149,1 @@\n+    private static final int CXCursor_ObjCException = (int)425L;\n@@ -3346,2 +4151,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Void = 2;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCException = 425\n@@ -3350,2 +4155,2 @@\n-    public static int CXType_Void() {\n-        return (int)2L;\n+    public static int CXCursor_ObjCException() {\n+        return CXCursor_ObjCException;\n@@ -3353,0 +4158,1 @@\n+    private static final int CXCursor_ObjCNSObject = (int)426L;\n@@ -3354,2 +4160,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Bool = 3;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCNSObject = 426\n@@ -3358,2 +4164,2 @@\n-    public static int CXType_Bool() {\n-        return (int)3L;\n+    public static int CXCursor_ObjCNSObject() {\n+        return CXCursor_ObjCNSObject;\n@@ -3361,0 +4167,1 @@\n+    private static final int CXCursor_ObjCIndependentClass = (int)427L;\n@@ -3362,2 +4169,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Char_U = 4;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCIndependentClass = 427\n@@ -3366,2 +4173,2 @@\n-    public static int CXType_Char_U() {\n-        return (int)4L;\n+    public static int CXCursor_ObjCIndependentClass() {\n+        return CXCursor_ObjCIndependentClass;\n@@ -3369,0 +4176,1 @@\n+    private static final int CXCursor_ObjCPreciseLifetime = (int)428L;\n@@ -3370,2 +4178,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UChar = 5;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCPreciseLifetime = 428\n@@ -3374,2 +4182,2 @@\n-    public static int CXType_UChar() {\n-        return (int)5L;\n+    public static int CXCursor_ObjCPreciseLifetime() {\n+        return CXCursor_ObjCPreciseLifetime;\n@@ -3377,0 +4185,1 @@\n+    private static final int CXCursor_ObjCReturnsInnerPointer = (int)429L;\n@@ -3378,2 +4187,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Char16 = 6;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCReturnsInnerPointer = 429\n@@ -3382,2 +4191,2 @@\n-    public static int CXType_Char16() {\n-        return (int)6L;\n+    public static int CXCursor_ObjCReturnsInnerPointer() {\n+        return CXCursor_ObjCReturnsInnerPointer;\n@@ -3385,0 +4194,1 @@\n+    private static final int CXCursor_ObjCRequiresSuper = (int)430L;\n@@ -3386,2 +4196,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Char32 = 7;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCRequiresSuper = 430\n@@ -3390,2 +4200,2 @@\n-    public static int CXType_Char32() {\n-        return (int)7L;\n+    public static int CXCursor_ObjCRequiresSuper() {\n+        return CXCursor_ObjCRequiresSuper;\n@@ -3393,0 +4203,1 @@\n+    private static final int CXCursor_ObjCRootClass = (int)431L;\n@@ -3394,2 +4205,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UShort = 8;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCRootClass = 431\n@@ -3398,2 +4209,2 @@\n-    public static int CXType_UShort() {\n-        return (int)8L;\n+    public static int CXCursor_ObjCRootClass() {\n+        return CXCursor_ObjCRootClass;\n@@ -3401,0 +4212,1 @@\n+    private static final int CXCursor_ObjCSubclassingRestricted = (int)432L;\n@@ -3402,2 +4214,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UInt = 9;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCSubclassingRestricted = 432\n@@ -3406,2 +4218,2 @@\n-    public static int CXType_UInt() {\n-        return (int)9L;\n+    public static int CXCursor_ObjCSubclassingRestricted() {\n+        return CXCursor_ObjCSubclassingRestricted;\n@@ -3409,0 +4221,1 @@\n+    private static final int CXCursor_ObjCExplicitProtocolImpl = (int)433L;\n@@ -3410,2 +4223,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ULong = 10;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCExplicitProtocolImpl = 433\n@@ -3414,2 +4227,2 @@\n-    public static int CXType_ULong() {\n-        return (int)10L;\n+    public static int CXCursor_ObjCExplicitProtocolImpl() {\n+        return CXCursor_ObjCExplicitProtocolImpl;\n@@ -3417,0 +4230,1 @@\n+    private static final int CXCursor_ObjCDesignatedInitializer = (int)434L;\n@@ -3418,2 +4232,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ULongLong = 11;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCDesignatedInitializer = 434\n@@ -3422,2 +4236,2 @@\n-    public static int CXType_ULongLong() {\n-        return (int)11L;\n+    public static int CXCursor_ObjCDesignatedInitializer() {\n+        return CXCursor_ObjCDesignatedInitializer;\n@@ -3425,0 +4239,1 @@\n+    private static final int CXCursor_ObjCRuntimeVisible = (int)435L;\n@@ -3426,2 +4241,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UInt128 = 12;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCRuntimeVisible = 435\n@@ -3430,2 +4245,2 @@\n-    public static int CXType_UInt128() {\n-        return (int)12L;\n+    public static int CXCursor_ObjCRuntimeVisible() {\n+        return CXCursor_ObjCRuntimeVisible;\n@@ -3433,0 +4248,1 @@\n+    private static final int CXCursor_ObjCBoxable = (int)436L;\n@@ -3434,2 +4250,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Char_S = 13;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ObjCBoxable = 436\n@@ -3438,2 +4254,2 @@\n-    public static int CXType_Char_S() {\n-        return (int)13L;\n+    public static int CXCursor_ObjCBoxable() {\n+        return CXCursor_ObjCBoxable;\n@@ -3441,0 +4257,1 @@\n+    private static final int CXCursor_FlagEnum = (int)437L;\n@@ -3442,2 +4259,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_SChar = 14;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FlagEnum = 437\n@@ -3446,2 +4263,2 @@\n-    public static int CXType_SChar() {\n-        return (int)14L;\n+    public static int CXCursor_FlagEnum() {\n+        return CXCursor_FlagEnum;\n@@ -3449,0 +4266,1 @@\n+    private static final int CXCursor_ConvergentAttr = (int)438L;\n@@ -3450,2 +4268,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_WChar = 15;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ConvergentAttr = 438\n@@ -3454,2 +4272,2 @@\n-    public static int CXType_WChar() {\n-        return (int)15L;\n+    public static int CXCursor_ConvergentAttr() {\n+        return CXCursor_ConvergentAttr;\n@@ -3457,0 +4275,1 @@\n+    private static final int CXCursor_WarnUnusedAttr = (int)439L;\n@@ -3458,2 +4277,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Short = 16;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_WarnUnusedAttr = 439\n@@ -3462,2 +4281,2 @@\n-    public static int CXType_Short() {\n-        return (int)16L;\n+    public static int CXCursor_WarnUnusedAttr() {\n+        return CXCursor_WarnUnusedAttr;\n@@ -3465,0 +4284,1 @@\n+    private static final int CXCursor_WarnUnusedResultAttr = (int)440L;\n@@ -3466,2 +4286,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Int = 17;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_WarnUnusedResultAttr = 440\n@@ -3470,2 +4290,2 @@\n-    public static int CXType_Int() {\n-        return (int)17L;\n+    public static int CXCursor_WarnUnusedResultAttr() {\n+        return CXCursor_WarnUnusedResultAttr;\n@@ -3473,0 +4293,1 @@\n+    private static final int CXCursor_AlignedAttr = (int)441L;\n@@ -3474,2 +4295,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Long = 18;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_AlignedAttr = 441\n@@ -3478,2 +4299,2 @@\n-    public static int CXType_Long() {\n-        return (int)18L;\n+    public static int CXCursor_AlignedAttr() {\n+        return CXCursor_AlignedAttr;\n@@ -3481,0 +4302,1 @@\n+    private static final int CXCursor_LastAttr = (int)441L;\n@@ -3482,2 +4304,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_LongLong = 19;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastAttr = 441\n@@ -3486,2 +4308,2 @@\n-    public static int CXType_LongLong() {\n-        return (int)19L;\n+    public static int CXCursor_LastAttr() {\n+        return CXCursor_LastAttr;\n@@ -3489,0 +4311,1 @@\n+    private static final int CXCursor_PreprocessingDirective = (int)500L;\n@@ -3490,2 +4313,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Int128 = 20;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_PreprocessingDirective = 500\n@@ -3494,2 +4317,2 @@\n-    public static int CXType_Int128() {\n-        return (int)20L;\n+    public static int CXCursor_PreprocessingDirective() {\n+        return CXCursor_PreprocessingDirective;\n@@ -3497,0 +4320,1 @@\n+    private static final int CXCursor_MacroDefinition = (int)501L;\n@@ -3498,2 +4322,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Float = 21;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MacroDefinition = 501\n@@ -3502,2 +4326,2 @@\n-    public static int CXType_Float() {\n-        return (int)21L;\n+    public static int CXCursor_MacroDefinition() {\n+        return CXCursor_MacroDefinition;\n@@ -3505,0 +4329,1 @@\n+    private static final int CXCursor_MacroExpansion = (int)502L;\n@@ -3506,2 +4331,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Double = 22;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MacroExpansion = 502\n@@ -3510,2 +4335,2 @@\n-    public static int CXType_Double() {\n-        return (int)22L;\n+    public static int CXCursor_MacroExpansion() {\n+        return CXCursor_MacroExpansion;\n@@ -3513,0 +4338,1 @@\n+    private static final int CXCursor_MacroInstantiation = (int)502L;\n@@ -3514,2 +4340,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_LongDouble = 23;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_MacroInstantiation = 502\n@@ -3518,2 +4344,2 @@\n-    public static int CXType_LongDouble() {\n-        return (int)23L;\n+    public static int CXCursor_MacroInstantiation() {\n+        return CXCursor_MacroInstantiation;\n@@ -3521,0 +4347,1 @@\n+    private static final int CXCursor_InclusionDirective = (int)503L;\n@@ -3522,2 +4349,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_NullPtr = 24;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_InclusionDirective = 503\n@@ -3526,2 +4353,2 @@\n-    public static int CXType_NullPtr() {\n-        return (int)24L;\n+    public static int CXCursor_InclusionDirective() {\n+        return CXCursor_InclusionDirective;\n@@ -3529,0 +4356,1 @@\n+    private static final int CXCursor_FirstPreprocessing = (int)500L;\n@@ -3530,2 +4358,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Overload = 25;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstPreprocessing = 500\n@@ -3534,2 +4362,2 @@\n-    public static int CXType_Overload() {\n-        return (int)25L;\n+    public static int CXCursor_FirstPreprocessing() {\n+        return CXCursor_FirstPreprocessing;\n@@ -3537,0 +4365,1 @@\n+    private static final int CXCursor_LastPreprocessing = (int)503L;\n@@ -3538,2 +4367,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Dependent = 26;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastPreprocessing = 503\n@@ -3542,2 +4371,2 @@\n-    public static int CXType_Dependent() {\n-        return (int)26L;\n+    public static int CXCursor_LastPreprocessing() {\n+        return CXCursor_LastPreprocessing;\n@@ -3545,0 +4374,1 @@\n+    private static final int CXCursor_ModuleImportDecl = (int)600L;\n@@ -3546,2 +4376,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCId = 27;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_ModuleImportDecl = 600\n@@ -3550,2 +4380,2 @@\n-    public static int CXType_ObjCId() {\n-        return (int)27L;\n+    public static int CXCursor_ModuleImportDecl() {\n+        return CXCursor_ModuleImportDecl;\n@@ -3553,0 +4383,1 @@\n+    private static final int CXCursor_TypeAliasTemplateDecl = (int)601L;\n@@ -3554,2 +4385,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCClass = 28;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_TypeAliasTemplateDecl = 601\n@@ -3558,2 +4389,2 @@\n-    public static int CXType_ObjCClass() {\n-        return (int)28L;\n+    public static int CXCursor_TypeAliasTemplateDecl() {\n+        return CXCursor_TypeAliasTemplateDecl;\n@@ -3561,0 +4392,1 @@\n+    private static final int CXCursor_StaticAssert = (int)602L;\n@@ -3562,2 +4394,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCSel = 29;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_StaticAssert = 602\n@@ -3566,2 +4398,2 @@\n-    public static int CXType_ObjCSel() {\n-        return (int)29L;\n+    public static int CXCursor_StaticAssert() {\n+        return CXCursor_StaticAssert;\n@@ -3569,0 +4401,1 @@\n+    private static final int CXCursor_FriendDecl = (int)603L;\n@@ -3570,2 +4403,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Float128 = 30;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FriendDecl = 603\n@@ -3574,2 +4407,2 @@\n-    public static int CXType_Float128() {\n-        return (int)30L;\n+    public static int CXCursor_FriendDecl() {\n+        return CXCursor_FriendDecl;\n@@ -3577,0 +4410,1 @@\n+    private static final int CXCursor_FirstExtraDecl = (int)600L;\n@@ -3578,2 +4412,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Half = 31;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_FirstExtraDecl = 600\n@@ -3582,2 +4416,2 @@\n-    public static int CXType_Half() {\n-        return (int)31L;\n+    public static int CXCursor_FirstExtraDecl() {\n+        return CXCursor_FirstExtraDecl;\n@@ -3585,0 +4419,1 @@\n+    private static final int CXCursor_LastExtraDecl = (int)603L;\n@@ -3586,2 +4421,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Float16 = 32;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_LastExtraDecl = 603\n@@ -3590,2 +4425,2 @@\n-    public static int CXType_Float16() {\n-        return (int)32L;\n+    public static int CXCursor_LastExtraDecl() {\n+        return CXCursor_LastExtraDecl;\n@@ -3593,0 +4428,1 @@\n+    private static final int CXCursor_OverloadCandidate = (int)700L;\n@@ -3594,2 +4430,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ShortAccum = 33;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind.CXCursor_OverloadCandidate = 700\n@@ -3598,2 +4434,11 @@\n-    public static int CXType_ShortAccum() {\n-        return (int)33L;\n+    public static int CXCursor_OverloadCandidate() {\n+        return CXCursor_OverloadCandidate;\n+    }\n+\n+    private static class clang_getNullCursor$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout()    );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getNullCursor\"),\n+                    DESC);\n@@ -3601,0 +4446,1 @@\n+\n@@ -3602,2 +4448,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Accum = 34;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n@@ -3606,2 +4453,2 @@\n-    public static int CXType_Accum() {\n-        return (int)34L;\n+    public static FunctionDescriptor clang_getNullCursor$descriptor() {\n+        return clang_getNullCursor$constants.DESC;\n@@ -3609,0 +4456,1 @@\n+\n@@ -3610,2 +4458,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_LongAccum = 35;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n@@ -3614,2 +4463,2 @@\n-    public static int CXType_LongAccum() {\n-        return (int)35L;\n+    public static MethodHandle clang_getNullCursor$handle() {\n+        return clang_getNullCursor$constants.HANDLE;\n@@ -3618,2 +4467,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UShortAccum = 36;\n+     * {@snippet lang=c :\n+     * CXCursor clang_getNullCursor()\n@@ -3622,2 +4471,21 @@\n-    public static int CXType_UShortAccum() {\n-        return (int)36L;\n+    public static MemorySegment clang_getNullCursor(SegmentAllocator allocator) {\n+        var mh$ = clang_getNullCursor$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNullCursor\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTranslationUnitCursor$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTranslationUnitCursor\"),\n+                    DESC);\n@@ -3625,0 +4493,1 @@\n+\n@@ -3626,2 +4495,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_UAccum = 37;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n@@ -3630,2 +4500,2 @@\n-    public static int CXType_UAccum() {\n-        return (int)37L;\n+    public static FunctionDescriptor clang_getTranslationUnitCursor$descriptor() {\n+        return clang_getTranslationUnitCursor$constants.DESC;\n@@ -3633,0 +4503,1 @@\n+\n@@ -3634,2 +4505,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ULongAccum = 38;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n@@ -3638,2 +4510,2 @@\n-    public static int CXType_ULongAccum() {\n-        return (int)38L;\n+    public static MethodHandle clang_getTranslationUnitCursor$handle() {\n+        return clang_getTranslationUnitCursor$constants.HANDLE;\n@@ -3642,2 +4514,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_FirstBuiltin = 2;\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTranslationUnitCursor(CXTranslationUnit)\n@@ -3646,2 +4518,22 @@\n-    public static int CXType_FirstBuiltin() {\n-        return (int)2L;\n+    public static MemorySegment clang_getTranslationUnitCursor(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getTranslationUnitCursor$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTranslationUnitCursor\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_equalCursors$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_equalCursors\"),\n+                    DESC);\n@@ -3649,0 +4541,1 @@\n+\n@@ -3650,2 +4543,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_LastBuiltin = 39;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n@@ -3654,2 +4548,2 @@\n-    public static int CXType_LastBuiltin() {\n-        return (int)39L;\n+    public static FunctionDescriptor clang_equalCursors$descriptor() {\n+        return clang_equalCursors$constants.DESC;\n@@ -3657,0 +4551,1 @@\n+\n@@ -3658,2 +4553,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Complex = 100;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n@@ -3662,2 +4558,2 @@\n-    public static int CXType_Complex() {\n-        return (int)100L;\n+    public static MethodHandle clang_equalCursors$handle() {\n+        return clang_equalCursors$constants.HANDLE;\n@@ -3666,2 +4562,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Pointer = 101;\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalCursors(CXCursor, CXCursor)\n@@ -3670,2 +4566,21 @@\n-    public static int CXType_Pointer() {\n-        return (int)101L;\n+    public static int clang_equalCursors(MemorySegment x0, MemorySegment x1) {\n+        var mh$ = clang_equalCursors$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalCursors\", x0, x1);\n+            }\n+            return (int)mh$.invokeExact(x0, x1);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isNull$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isNull\"),\n+                    DESC);\n@@ -3673,0 +4588,1 @@\n+\n@@ -3674,2 +4590,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_BlockPointer = 102;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n@@ -3678,2 +4595,2 @@\n-    public static int CXType_BlockPointer() {\n-        return (int)102L;\n+    public static FunctionDescriptor clang_Cursor_isNull$descriptor() {\n+        return clang_Cursor_isNull$constants.DESC;\n@@ -3681,0 +4598,1 @@\n+\n@@ -3682,2 +4600,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_LValueReference = 103;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n@@ -3686,2 +4605,2 @@\n-    public static int CXType_LValueReference() {\n-        return (int)103L;\n+    public static MethodHandle clang_Cursor_isNull$handle() {\n+        return clang_Cursor_isNull$constants.HANDLE;\n@@ -3690,2 +4609,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_RValueReference = 104;\n+     * {@snippet lang=c :\n+     * int clang_Cursor_isNull(CXCursor cursor)\n@@ -3694,2 +4613,10 @@\n-    public static int CXType_RValueReference() {\n-        return (int)104L;\n+    public static int clang_Cursor_isNull(MemorySegment cursor) {\n+        var mh$ = clang_Cursor_isNull$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isNull\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -3697,0 +4624,12 @@\n+\n+    private static class clang_getCursorKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorKind\"),\n+                    DESC);\n+    }\n+\n@@ -3698,2 +4637,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Record = 105;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n@@ -3702,2 +4642,2 @@\n-    public static int CXType_Record() {\n-        return (int)105L;\n+    public static FunctionDescriptor clang_getCursorKind$descriptor() {\n+        return clang_getCursorKind$constants.DESC;\n@@ -3705,0 +4645,1 @@\n+\n@@ -3706,2 +4647,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Enum = 106;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n@@ -3710,2 +4652,2 @@\n-    public static int CXType_Enum() {\n-        return (int)106L;\n+    public static MethodHandle clang_getCursorKind$handle() {\n+        return clang_getCursorKind$constants.HANDLE;\n@@ -3714,2 +4656,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Typedef = 107;\n+     * {@snippet lang=c :\n+     * enum CXCursorKind clang_getCursorKind(CXCursor)\n@@ -3718,2 +4660,21 @@\n-    public static int CXType_Typedef() {\n-        return (int)107L;\n+    public static int clang_getCursorKind(MemorySegment x0) {\n+        var mh$ = clang_getCursorKind$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorKind\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isDeclaration$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isDeclaration\"),\n+                    DESC);\n@@ -3721,0 +4682,1 @@\n+\n@@ -3722,2 +4684,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCInterface = 108;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n@@ -3726,2 +4689,2 @@\n-    public static int CXType_ObjCInterface() {\n-        return (int)108L;\n+    public static FunctionDescriptor clang_isDeclaration$descriptor() {\n+        return clang_isDeclaration$constants.DESC;\n@@ -3729,0 +4692,1 @@\n+\n@@ -3730,2 +4694,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCObjectPointer = 109;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n@@ -3734,2 +4699,2 @@\n-    public static int CXType_ObjCObjectPointer() {\n-        return (int)109L;\n+    public static MethodHandle clang_isDeclaration$handle() {\n+        return clang_isDeclaration$constants.HANDLE;\n@@ -3738,2 +4703,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_FunctionNoProto = 110;\n+     * {@snippet lang=c :\n+     * unsigned int clang_isDeclaration(enum CXCursorKind)\n@@ -3742,2 +4707,21 @@\n-    public static int CXType_FunctionNoProto() {\n-        return (int)110L;\n+    public static int clang_isDeclaration(int x0) {\n+        var mh$ = clang_isDeclaration$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isDeclaration\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isAttribute$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isAttribute\"),\n+                    DESC);\n@@ -3745,0 +4729,1 @@\n+\n@@ -3746,2 +4731,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_FunctionProto = 111;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n@@ -3750,2 +4736,2 @@\n-    public static int CXType_FunctionProto() {\n-        return (int)111L;\n+    public static FunctionDescriptor clang_isAttribute$descriptor() {\n+        return clang_isAttribute$constants.DESC;\n@@ -3753,0 +4739,1 @@\n+\n@@ -3754,2 +4741,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ConstantArray = 112;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n@@ -3758,2 +4746,2 @@\n-    public static int CXType_ConstantArray() {\n-        return (int)112L;\n+    public static MethodHandle clang_isAttribute$handle() {\n+        return clang_isAttribute$constants.HANDLE;\n@@ -3762,2 +4750,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Vector = 113;\n+     * {@snippet lang=c :\n+     * unsigned int clang_isAttribute(enum CXCursorKind)\n@@ -3766,2 +4754,21 @@\n-    public static int CXType_Vector() {\n-        return (int)113L;\n+    public static int clang_isAttribute(int x0) {\n+        var mh$ = clang_isAttribute$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isAttribute\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isInvalid$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isInvalid\"),\n+                    DESC);\n@@ -3769,0 +4776,1 @@\n+\n@@ -3770,2 +4778,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_IncompleteArray = 114;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n@@ -3774,2 +4783,2 @@\n-    public static int CXType_IncompleteArray() {\n-        return (int)114L;\n+    public static FunctionDescriptor clang_isInvalid$descriptor() {\n+        return clang_isInvalid$constants.DESC;\n@@ -3777,0 +4786,1 @@\n+\n@@ -3778,2 +4788,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_VariableArray = 115;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n@@ -3782,2 +4793,2 @@\n-    public static int CXType_VariableArray() {\n-        return (int)115L;\n+    public static MethodHandle clang_isInvalid$handle() {\n+        return clang_isInvalid$constants.HANDLE;\n@@ -3786,2 +4797,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_DependentSizedArray = 116;\n+     * {@snippet lang=c :\n+     * unsigned int clang_isInvalid(enum CXCursorKind)\n@@ -3790,2 +4801,10 @@\n-    public static int CXType_DependentSizedArray() {\n-        return (int)116L;\n+    public static int clang_isInvalid(int x0) {\n+        var mh$ = clang_isInvalid$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isInvalid\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -3793,0 +4812,12 @@\n+\n+    private static class clang_isPreprocessing$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isPreprocessing\"),\n+                    DESC);\n+    }\n+\n@@ -3794,2 +4825,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_MemberPointer = 117;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n@@ -3798,2 +4830,2 @@\n-    public static int CXType_MemberPointer() {\n-        return (int)117L;\n+    public static FunctionDescriptor clang_isPreprocessing$descriptor() {\n+        return clang_isPreprocessing$constants.DESC;\n@@ -3801,0 +4833,1 @@\n+\n@@ -3802,2 +4835,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Auto = 118;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n@@ -3806,2 +4840,2 @@\n-    public static int CXType_Auto() {\n-        return (int)118L;\n+    public static MethodHandle clang_isPreprocessing$handle() {\n+        return clang_isPreprocessing$constants.HANDLE;\n@@ -3810,2 +4844,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Elaborated = 119;\n+     * {@snippet lang=c :\n+     * unsigned int clang_isPreprocessing(enum CXCursorKind)\n@@ -3814,2 +4848,10 @@\n-    public static int CXType_Elaborated() {\n-        return (int)119L;\n+    public static int clang_isPreprocessing(int x0) {\n+        var mh$ = clang_isPreprocessing$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isPreprocessing\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -3817,0 +4859,1 @@\n+    private static final int CXLinkage_Invalid = (int)0L;\n@@ -3818,2 +4861,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Pipe = 120;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind.CXLinkage_Invalid = 0\n@@ -3822,2 +4865,2 @@\n-    public static int CXType_Pipe() {\n-        return (int)120L;\n+    public static int CXLinkage_Invalid() {\n+        return CXLinkage_Invalid;\n@@ -3825,0 +4868,1 @@\n+    private static final int CXLinkage_NoLinkage = (int)1L;\n@@ -3826,2 +4870,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dRO = 121;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind.CXLinkage_NoLinkage = 1\n@@ -3830,2 +4874,2 @@\n-    public static int CXType_OCLImage1dRO() {\n-        return (int)121L;\n+    public static int CXLinkage_NoLinkage() {\n+        return CXLinkage_NoLinkage;\n@@ -3833,0 +4877,1 @@\n+    private static final int CXLinkage_Internal = (int)2L;\n@@ -3834,2 +4879,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dArrayRO = 122;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind.CXLinkage_Internal = 2\n@@ -3838,2 +4883,2 @@\n-    public static int CXType_OCLImage1dArrayRO() {\n-        return (int)122L;\n+    public static int CXLinkage_Internal() {\n+        return CXLinkage_Internal;\n@@ -3841,0 +4886,1 @@\n+    private static final int CXLinkage_UniqueExternal = (int)3L;\n@@ -3842,2 +4888,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dBufferRO = 123;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind.CXLinkage_UniqueExternal = 3\n@@ -3846,2 +4892,2 @@\n-    public static int CXType_OCLImage1dBufferRO() {\n-        return (int)123L;\n+    public static int CXLinkage_UniqueExternal() {\n+        return CXLinkage_UniqueExternal;\n@@ -3849,0 +4895,1 @@\n+    private static final int CXLinkage_External = (int)4L;\n@@ -3850,2 +4897,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dRO = 124;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind.CXLinkage_External = 4\n@@ -3854,2 +4901,13 @@\n-    public static int CXType_OCLImage2dRO() {\n-        return (int)124L;\n+    public static int CXLinkage_External() {\n+        return CXLinkage_External;\n+    }\n+\n+    private static class clang_getCursorLinkage$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorLinkage\"),\n+                    DESC);\n@@ -3857,0 +4915,1 @@\n+\n@@ -3858,2 +4917,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayRO = 125;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n@@ -3862,2 +4922,2 @@\n-    public static int CXType_OCLImage2dArrayRO() {\n-        return (int)125L;\n+    public static FunctionDescriptor clang_getCursorLinkage$descriptor() {\n+        return clang_getCursorLinkage$constants.DESC;\n@@ -3865,0 +4925,1 @@\n+\n@@ -3866,2 +4927,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dDepthRO = 126;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n@@ -3870,2 +4932,2 @@\n-    public static int CXType_OCLImage2dDepthRO() {\n-        return (int)126L;\n+    public static MethodHandle clang_getCursorLinkage$handle() {\n+        return clang_getCursorLinkage$constants.HANDLE;\n@@ -3874,2 +4936,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRO = 127;\n+     * {@snippet lang=c :\n+     * enum CXLinkageKind clang_getCursorLinkage(CXCursor cursor)\n@@ -3878,2 +4940,10 @@\n-    public static int CXType_OCLImage2dArrayDepthRO() {\n-        return (int)127L;\n+    public static int clang_getCursorLinkage(MemorySegment cursor) {\n+        var mh$ = clang_getCursorLinkage$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLinkage\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -3881,0 +4951,1 @@\n+    private static final int CXLanguage_Invalid = (int)0L;\n@@ -3882,2 +4953,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAARO = 128;\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind.CXLanguage_Invalid = 0\n@@ -3886,2 +4957,2 @@\n-    public static int CXType_OCLImage2dMSAARO() {\n-        return (int)128L;\n+    public static int CXLanguage_Invalid() {\n+        return CXLanguage_Invalid;\n@@ -3889,0 +4960,1 @@\n+    private static final int CXLanguage_C = (int)1L;\n@@ -3890,2 +4962,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARO = 129;\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind.CXLanguage_C = 1\n@@ -3894,2 +4966,2 @@\n-    public static int CXType_OCLImage2dArrayMSAARO() {\n-        return (int)129L;\n+    public static int CXLanguage_C() {\n+        return CXLanguage_C;\n@@ -3897,0 +4969,1 @@\n+    private static final int CXLanguage_ObjC = (int)2L;\n@@ -3898,2 +4971,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRO = 130;\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind.CXLanguage_ObjC = 2\n@@ -3902,2 +4975,2 @@\n-    public static int CXType_OCLImage2dMSAADepthRO() {\n-        return (int)130L;\n+    public static int CXLanguage_ObjC() {\n+        return CXLanguage_ObjC;\n@@ -3905,0 +4978,1 @@\n+    private static final int CXLanguage_CPlusPlus = (int)3L;\n@@ -3906,2 +4980,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRO = 131;\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind.CXLanguage_CPlusPlus = 3\n@@ -3910,2 +4984,2 @@\n-    public static int CXType_OCLImage2dArrayMSAADepthRO() {\n-        return (int)131L;\n+    public static int CXLanguage_CPlusPlus() {\n+        return CXLanguage_CPlusPlus;\n@@ -3913,0 +4987,12 @@\n+\n+    private static class clang_getCursorLanguage$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorLanguage\"),\n+                    DESC);\n+    }\n+\n@@ -3914,2 +5000,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage3dRO = 132;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n@@ -3918,2 +5005,2 @@\n-    public static int CXType_OCLImage3dRO() {\n-        return (int)132L;\n+    public static FunctionDescriptor clang_getCursorLanguage$descriptor() {\n+        return clang_getCursorLanguage$constants.DESC;\n@@ -3921,0 +5008,1 @@\n+\n@@ -3922,2 +5010,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dWO = 133;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n@@ -3926,2 +5015,2 @@\n-    public static int CXType_OCLImage1dWO() {\n-        return (int)133L;\n+    public static MethodHandle clang_getCursorLanguage$handle() {\n+        return clang_getCursorLanguage$constants.HANDLE;\n@@ -3930,2 +5019,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dArrayWO = 134;\n+     * {@snippet lang=c :\n+     * enum CXLanguageKind clang_getCursorLanguage(CXCursor cursor)\n@@ -3934,2 +5023,21 @@\n-    public static int CXType_OCLImage1dArrayWO() {\n-        return (int)134L;\n+    public static int clang_getCursorLanguage(MemorySegment cursor) {\n+        var mh$ = clang_getCursorLanguage$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLanguage\", cursor);\n+            }\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_getTranslationUnit$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_getTranslationUnit\"),\n+                    DESC);\n@@ -3937,0 +5045,1 @@\n+\n@@ -3938,2 +5047,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dBufferWO = 135;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n@@ -3942,2 +5052,2 @@\n-    public static int CXType_OCLImage1dBufferWO() {\n-        return (int)135L;\n+    public static FunctionDescriptor clang_Cursor_getTranslationUnit$descriptor() {\n+        return clang_Cursor_getTranslationUnit$constants.DESC;\n@@ -3945,0 +5055,1 @@\n+\n@@ -3946,2 +5057,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dWO = 136;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n@@ -3950,2 +5062,2 @@\n-    public static int CXType_OCLImage2dWO() {\n-        return (int)136L;\n+    public static MethodHandle clang_Cursor_getTranslationUnit$handle() {\n+        return clang_Cursor_getTranslationUnit$constants.HANDLE;\n@@ -3954,2 +5066,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayWO = 137;\n+     * {@snippet lang=c :\n+     * CXTranslationUnit clang_Cursor_getTranslationUnit(CXCursor)\n@@ -3958,2 +5070,21 @@\n-    public static int CXType_OCLImage2dArrayWO() {\n-        return (int)137L;\n+    public static MemorySegment clang_Cursor_getTranslationUnit(MemorySegment x0) {\n+        var mh$ = clang_Cursor_getTranslationUnit$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getTranslationUnit\", x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getCursorLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorLocation\"),\n+                    DESC);\n@@ -3961,0 +5092,1 @@\n+\n@@ -3962,2 +5094,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dDepthWO = 138;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n@@ -3966,2 +5099,2 @@\n-    public static int CXType_OCLImage2dDepthWO() {\n-        return (int)138L;\n+    public static FunctionDescriptor clang_getCursorLocation$descriptor() {\n+        return clang_getCursorLocation$constants.DESC;\n@@ -3969,0 +5102,1 @@\n+\n@@ -3970,2 +5104,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthWO = 139;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n@@ -3974,2 +5109,2 @@\n-    public static int CXType_OCLImage2dArrayDepthWO() {\n-        return (int)139L;\n+    public static MethodHandle clang_getCursorLocation$handle() {\n+        return clang_getCursorLocation$constants.HANDLE;\n@@ -3978,2 +5113,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAAWO = 140;\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getCursorLocation(CXCursor)\n@@ -3982,2 +5117,10 @@\n-    public static int CXType_OCLImage2dMSAAWO() {\n-        return (int)140L;\n+    public static MemorySegment clang_getCursorLocation(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorLocation$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorLocation\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -3985,0 +5128,12 @@\n+\n+    private static class clang_getCursorExtent$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceRange.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorExtent\"),\n+                    DESC);\n+    }\n+\n@@ -3986,2 +5141,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAAWO = 141;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n@@ -3990,2 +5146,2 @@\n-    public static int CXType_OCLImage2dArrayMSAAWO() {\n-        return (int)141L;\n+    public static FunctionDescriptor clang_getCursorExtent$descriptor() {\n+        return clang_getCursorExtent$constants.DESC;\n@@ -3993,0 +5149,1 @@\n+\n@@ -3994,2 +5151,3 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthWO = 142;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n@@ -3998,2 +5156,2 @@\n-    public static int CXType_OCLImage2dMSAADepthWO() {\n-        return (int)142L;\n+    public static MethodHandle clang_getCursorExtent$handle() {\n+        return clang_getCursorExtent$constants.HANDLE;\n@@ -4002,2 +5160,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthWO = 143;\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getCursorExtent(CXCursor)\n@@ -4006,2 +5164,10 @@\n-    public static int CXType_OCLImage2dArrayMSAADepthWO() {\n-        return (int)143L;\n+    public static MemorySegment clang_getCursorExtent(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorExtent$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorExtent\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -4009,0 +5175,1 @@\n+    private static final int CXType_Invalid = (int)0L;\n@@ -4010,2 +5177,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage3dWO = 144;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Invalid = 0\n@@ -4014,2 +5181,2 @@\n-    public static int CXType_OCLImage3dWO() {\n-        return (int)144L;\n+    public static int CXType_Invalid() {\n+        return CXType_Invalid;\n@@ -4017,0 +5184,1 @@\n+    private static final int CXType_Unexposed = (int)1L;\n@@ -4018,2 +5186,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dRW = 145;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Unexposed = 1\n@@ -4022,2 +5190,2 @@\n-    public static int CXType_OCLImage1dRW() {\n-        return (int)145L;\n+    public static int CXType_Unexposed() {\n+        return CXType_Unexposed;\n@@ -4025,0 +5193,1 @@\n+    private static final int CXType_Void = (int)2L;\n@@ -4026,2 +5195,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dArrayRW = 146;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Void = 2\n@@ -4030,2 +5199,2 @@\n-    public static int CXType_OCLImage1dArrayRW() {\n-        return (int)146L;\n+    public static int CXType_Void() {\n+        return CXType_Void;\n@@ -4033,0 +5202,1 @@\n+    private static final int CXType_Bool = (int)3L;\n@@ -4034,2 +5204,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage1dBufferRW = 147;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Bool = 3\n@@ -4038,2 +5208,2 @@\n-    public static int CXType_OCLImage1dBufferRW() {\n-        return (int)147L;\n+    public static int CXType_Bool() {\n+        return CXType_Bool;\n@@ -4041,0 +5211,1 @@\n+    private static final int CXType_Char_U = (int)4L;\n@@ -4042,2 +5213,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dRW = 148;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Char_U = 4\n@@ -4046,2 +5217,2 @@\n-    public static int CXType_OCLImage2dRW() {\n-        return (int)148L;\n+    public static int CXType_Char_U() {\n+        return CXType_Char_U;\n@@ -4049,0 +5220,1 @@\n+    private static final int CXType_UChar = (int)5L;\n@@ -4050,2 +5222,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayRW = 149;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UChar = 5\n@@ -4054,2 +5226,2 @@\n-    public static int CXType_OCLImage2dArrayRW() {\n-        return (int)149L;\n+    public static int CXType_UChar() {\n+        return CXType_UChar;\n@@ -4057,0 +5229,1 @@\n+    private static final int CXType_Char16 = (int)6L;\n@@ -4058,2 +5231,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dDepthRW = 150;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Char16 = 6\n@@ -4062,2 +5235,2 @@\n-    public static int CXType_OCLImage2dDepthRW() {\n-        return (int)150L;\n+    public static int CXType_Char16() {\n+        return CXType_Char16;\n@@ -4065,0 +5238,1 @@\n+    private static final int CXType_Char32 = (int)7L;\n@@ -4066,2 +5240,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRW = 151;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Char32 = 7\n@@ -4070,2 +5244,2 @@\n-    public static int CXType_OCLImage2dArrayDepthRW() {\n-        return (int)151L;\n+    public static int CXType_Char32() {\n+        return CXType_Char32;\n@@ -4073,0 +5247,1 @@\n+    private static final int CXType_UShort = (int)8L;\n@@ -4074,2 +5249,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAARW = 152;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UShort = 8\n@@ -4078,2 +5253,2 @@\n-    public static int CXType_OCLImage2dMSAARW() {\n-        return (int)152L;\n+    public static int CXType_UShort() {\n+        return CXType_UShort;\n@@ -4081,0 +5256,1 @@\n+    private static final int CXType_UInt = (int)9L;\n@@ -4082,2 +5258,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARW = 153;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UInt = 9\n@@ -4086,2 +5262,2 @@\n-    public static int CXType_OCLImage2dArrayMSAARW() {\n-        return (int)153L;\n+    public static int CXType_UInt() {\n+        return CXType_UInt;\n@@ -4089,0 +5265,1 @@\n+    private static final int CXType_ULong = (int)10L;\n@@ -4090,2 +5267,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRW = 154;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ULong = 10\n@@ -4094,2 +5271,2 @@\n-    public static int CXType_OCLImage2dMSAADepthRW() {\n-        return (int)154L;\n+    public static int CXType_ULong() {\n+        return CXType_ULong;\n@@ -4097,0 +5274,1 @@\n+    private static final int CXType_ULongLong = (int)11L;\n@@ -4098,2 +5276,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRW = 155;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ULongLong = 11\n@@ -4102,2 +5280,2 @@\n-    public static int CXType_OCLImage2dArrayMSAADepthRW() {\n-        return (int)155L;\n+    public static int CXType_ULongLong() {\n+        return CXType_ULongLong;\n@@ -4105,0 +5283,1 @@\n+    private static final int CXType_UInt128 = (int)12L;\n@@ -4106,2 +5285,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLImage3dRW = 156;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UInt128 = 12\n@@ -4110,2 +5289,2 @@\n-    public static int CXType_OCLImage3dRW() {\n-        return (int)156L;\n+    public static int CXType_UInt128() {\n+        return CXType_UInt128;\n@@ -4113,0 +5292,1 @@\n+    private static final int CXType_Char_S = (int)13L;\n@@ -4114,2 +5294,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLSampler = 157;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Char_S = 13\n@@ -4118,2 +5298,2 @@\n-    public static int CXType_OCLSampler() {\n-        return (int)157L;\n+    public static int CXType_Char_S() {\n+        return CXType_Char_S;\n@@ -4121,0 +5301,1 @@\n+    private static final int CXType_SChar = (int)14L;\n@@ -4122,2 +5303,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLEvent = 158;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_SChar = 14\n@@ -4126,2 +5307,2 @@\n-    public static int CXType_OCLEvent() {\n-        return (int)158L;\n+    public static int CXType_SChar() {\n+        return CXType_SChar;\n@@ -4129,0 +5310,1 @@\n+    private static final int CXType_WChar = (int)15L;\n@@ -4130,2 +5312,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLQueue = 159;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_WChar = 15\n@@ -4134,2 +5316,2 @@\n-    public static int CXType_OCLQueue() {\n-        return (int)159L;\n+    public static int CXType_WChar() {\n+        return CXType_WChar;\n@@ -4137,0 +5319,1 @@\n+    private static final int CXType_Short = (int)16L;\n@@ -4138,2 +5321,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLReserveID = 160;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Short = 16\n@@ -4142,2 +5325,2 @@\n-    public static int CXType_OCLReserveID() {\n-        return (int)160L;\n+    public static int CXType_Short() {\n+        return CXType_Short;\n@@ -4145,0 +5328,1 @@\n+    private static final int CXType_Int = (int)17L;\n@@ -4146,2 +5330,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCObject = 161;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Int = 17\n@@ -4150,2 +5334,2 @@\n-    public static int CXType_ObjCObject() {\n-        return (int)161L;\n+    public static int CXType_Int() {\n+        return CXType_Int;\n@@ -4153,0 +5337,1 @@\n+    private static final int CXType_Long = (int)18L;\n@@ -4154,2 +5339,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ObjCTypeParam = 162;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Long = 18\n@@ -4158,2 +5343,2 @@\n-    public static int CXType_ObjCTypeParam() {\n-        return (int)162L;\n+    public static int CXType_Long() {\n+        return CXType_Long;\n@@ -4161,0 +5346,1 @@\n+    private static final int CXType_LongLong = (int)19L;\n@@ -4162,2 +5348,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_Attributed = 163;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_LongLong = 19\n@@ -4166,2 +5352,2 @@\n-    public static int CXType_Attributed() {\n-        return (int)163L;\n+    public static int CXType_LongLong() {\n+        return CXType_LongLong;\n@@ -4169,0 +5355,1 @@\n+    private static final int CXType_Int128 = (int)20L;\n@@ -4170,2 +5357,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMcePayload = 164;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Int128 = 20\n@@ -4174,2 +5361,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCMcePayload() {\n-        return (int)164L;\n+    public static int CXType_Int128() {\n+        return CXType_Int128;\n@@ -4177,0 +5364,1 @@\n+    private static final int CXType_Float = (int)21L;\n@@ -4178,2 +5366,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImePayload = 165;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Float = 21\n@@ -4182,2 +5370,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImePayload() {\n-        return (int)165L;\n+    public static int CXType_Float() {\n+        return CXType_Float;\n@@ -4185,0 +5373,1 @@\n+    private static final int CXType_Double = (int)22L;\n@@ -4186,2 +5375,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefPayload = 166;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Double = 22\n@@ -4190,2 +5379,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCRefPayload() {\n-        return (int)166L;\n+    public static int CXType_Double() {\n+        return CXType_Double;\n@@ -4193,0 +5382,1 @@\n+    private static final int CXType_LongDouble = (int)23L;\n@@ -4194,2 +5384,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicPayload = 167;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_LongDouble = 23\n@@ -4198,2 +5388,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCSicPayload() {\n-        return (int)167L;\n+    public static int CXType_LongDouble() {\n+        return CXType_LongDouble;\n@@ -4201,0 +5391,1 @@\n+    private static final int CXType_NullPtr = (int)24L;\n@@ -4202,2 +5393,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMceResult = 168;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_NullPtr = 24\n@@ -4206,2 +5397,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCMceResult() {\n-        return (int)168L;\n+    public static int CXType_NullPtr() {\n+        return CXType_NullPtr;\n@@ -4209,0 +5400,1 @@\n+    private static final int CXType_Overload = (int)25L;\n@@ -4210,2 +5402,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResult = 169;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Overload = 25\n@@ -4214,2 +5406,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImeResult() {\n-        return (int)169L;\n+    public static int CXType_Overload() {\n+        return CXType_Overload;\n@@ -4217,0 +5409,1 @@\n+    private static final int CXType_Dependent = (int)26L;\n@@ -4218,2 +5411,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefResult = 170;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Dependent = 26\n@@ -4222,2 +5415,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCRefResult() {\n-        return (int)170L;\n+    public static int CXType_Dependent() {\n+        return CXType_Dependent;\n@@ -4225,0 +5418,1 @@\n+    private static final int CXType_ObjCId = (int)27L;\n@@ -4226,2 +5420,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicResult = 171;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCId = 27\n@@ -4230,2 +5424,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCSicResult() {\n-        return (int)171L;\n+    public static int CXType_ObjCId() {\n+        return CXType_ObjCId;\n@@ -4233,0 +5427,1 @@\n+    private static final int CXType_ObjCClass = (int)28L;\n@@ -4234,2 +5429,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCClass = 28\n@@ -4238,2 +5433,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() {\n-        return (int)172L;\n+    public static int CXType_ObjCClass() {\n+        return CXType_ObjCClass;\n@@ -4241,0 +5436,1 @@\n+    private static final int CXType_ObjCSel = (int)29L;\n@@ -4242,2 +5438,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCSel = 29\n@@ -4246,2 +5442,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() {\n-        return (int)173L;\n+    public static int CXType_ObjCSel() {\n+        return CXType_ObjCSel;\n@@ -4249,0 +5445,1 @@\n+    private static final int CXType_Float128 = (int)30L;\n@@ -4250,2 +5447,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Float128 = 30\n@@ -4254,2 +5451,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() {\n-        return (int)174L;\n+    public static int CXType_Float128() {\n+        return CXType_Float128;\n@@ -4257,0 +5454,1 @@\n+    private static final int CXType_Half = (int)31L;\n@@ -4258,2 +5456,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Half = 31\n@@ -4262,2 +5460,2 @@\n-    public static int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() {\n-        return (int)175L;\n+    public static int CXType_Half() {\n+        return CXType_Half;\n@@ -4265,0 +5463,1 @@\n+    private static final int CXType_Float16 = (int)32L;\n@@ -4266,2 +5465,2 @@\n-     * {@snippet :\n-     * enum CXTypeKind.CXType_ExtVector = 176;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Float16 = 32\n@@ -4270,2 +5469,2 @@\n-    public static int CXType_ExtVector() {\n-        return (int)176L;\n+    public static int CXType_Float16() {\n+        return CXType_Float16;\n@@ -4273,0 +5472,1 @@\n+    private static final int CXType_ShortAccum = (int)33L;\n@@ -4274,2 +5474,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_Default = 0;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ShortAccum = 33\n@@ -4278,2 +5478,2 @@\n-    public static int CXCallingConv_Default() {\n-        return (int)0L;\n+    public static int CXType_ShortAccum() {\n+        return CXType_ShortAccum;\n@@ -4281,0 +5481,1 @@\n+    private static final int CXType_Accum = (int)34L;\n@@ -4282,2 +5483,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_C = 1;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Accum = 34\n@@ -4286,2 +5487,2 @@\n-    public static int CXCallingConv_C() {\n-        return (int)1L;\n+    public static int CXType_Accum() {\n+        return CXType_Accum;\n@@ -4289,0 +5490,1 @@\n+    private static final int CXType_LongAccum = (int)35L;\n@@ -4290,2 +5492,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86StdCall = 2;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_LongAccum = 35\n@@ -4294,2 +5496,2 @@\n-    public static int CXCallingConv_X86StdCall() {\n-        return (int)2L;\n+    public static int CXType_LongAccum() {\n+        return CXType_LongAccum;\n@@ -4297,0 +5499,1 @@\n+    private static final int CXType_UShortAccum = (int)36L;\n@@ -4298,2 +5501,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86FastCall = 3;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UShortAccum = 36\n@@ -4302,2 +5505,2 @@\n-    public static int CXCallingConv_X86FastCall() {\n-        return (int)3L;\n+    public static int CXType_UShortAccum() {\n+        return CXType_UShortAccum;\n@@ -4305,0 +5508,1 @@\n+    private static final int CXType_UAccum = (int)37L;\n@@ -4306,2 +5510,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86ThisCall = 4;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_UAccum = 37\n@@ -4310,2 +5514,2 @@\n-    public static int CXCallingConv_X86ThisCall() {\n-        return (int)4L;\n+    public static int CXType_UAccum() {\n+        return CXType_UAccum;\n@@ -4313,0 +5517,1 @@\n+    private static final int CXType_ULongAccum = (int)38L;\n@@ -4314,2 +5519,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86Pascal = 5;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ULongAccum = 38\n@@ -4318,2 +5523,2 @@\n-    public static int CXCallingConv_X86Pascal() {\n-        return (int)5L;\n+    public static int CXType_ULongAccum() {\n+        return CXType_ULongAccum;\n@@ -4321,0 +5526,1 @@\n+    private static final int CXType_FirstBuiltin = (int)2L;\n@@ -4322,2 +5528,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_AAPCS = 6;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_FirstBuiltin = 2\n@@ -4326,2 +5532,2 @@\n-    public static int CXCallingConv_AAPCS() {\n-        return (int)6L;\n+    public static int CXType_FirstBuiltin() {\n+        return CXType_FirstBuiltin;\n@@ -4329,0 +5535,1 @@\n+    private static final int CXType_LastBuiltin = (int)39L;\n@@ -4330,2 +5537,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_AAPCS_VFP = 7;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_LastBuiltin = 39\n@@ -4334,2 +5541,2 @@\n-    public static int CXCallingConv_AAPCS_VFP() {\n-        return (int)7L;\n+    public static int CXType_LastBuiltin() {\n+        return CXType_LastBuiltin;\n@@ -4337,0 +5544,1 @@\n+    private static final int CXType_Complex = (int)100L;\n@@ -4338,2 +5546,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86RegCall = 8;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Complex = 100\n@@ -4342,2 +5550,2 @@\n-    public static int CXCallingConv_X86RegCall() {\n-        return (int)8L;\n+    public static int CXType_Complex() {\n+        return CXType_Complex;\n@@ -4345,0 +5553,1 @@\n+    private static final int CXType_Pointer = (int)101L;\n@@ -4346,2 +5555,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_IntelOclBicc = 9;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Pointer = 101\n@@ -4350,2 +5559,2 @@\n-    public static int CXCallingConv_IntelOclBicc() {\n-        return (int)9L;\n+    public static int CXType_Pointer() {\n+        return CXType_Pointer;\n@@ -4353,0 +5562,1 @@\n+    private static final int CXType_BlockPointer = (int)102L;\n@@ -4354,2 +5564,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_Win64 = 10;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_BlockPointer = 102\n@@ -4358,2 +5568,2 @@\n-    public static int CXCallingConv_Win64() {\n-        return (int)10L;\n+    public static int CXType_BlockPointer() {\n+        return CXType_BlockPointer;\n@@ -4361,0 +5571,1 @@\n+    private static final int CXType_LValueReference = (int)103L;\n@@ -4362,2 +5573,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86_64Win64 = 10;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_LValueReference = 103\n@@ -4366,2 +5577,2 @@\n-    public static int CXCallingConv_X86_64Win64() {\n-        return (int)10L;\n+    public static int CXType_LValueReference() {\n+        return CXType_LValueReference;\n@@ -4369,0 +5580,1 @@\n+    private static final int CXType_RValueReference = (int)104L;\n@@ -4370,2 +5582,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86_64SysV = 11;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_RValueReference = 104\n@@ -4374,2 +5586,2 @@\n-    public static int CXCallingConv_X86_64SysV() {\n-        return (int)11L;\n+    public static int CXType_RValueReference() {\n+        return CXType_RValueReference;\n@@ -4377,0 +5589,1 @@\n+    private static final int CXType_Record = (int)105L;\n@@ -4378,2 +5591,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_X86VectorCall = 12;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Record = 105\n@@ -4382,2 +5595,2 @@\n-    public static int CXCallingConv_X86VectorCall() {\n-        return (int)12L;\n+    public static int CXType_Record() {\n+        return CXType_Record;\n@@ -4385,0 +5598,1 @@\n+    private static final int CXType_Enum = (int)106L;\n@@ -4386,2 +5600,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_Swift = 13;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Enum = 106\n@@ -4390,2 +5604,2 @@\n-    public static int CXCallingConv_Swift() {\n-        return (int)13L;\n+    public static int CXType_Enum() {\n+        return CXType_Enum;\n@@ -4393,0 +5607,1 @@\n+    private static final int CXType_Typedef = (int)107L;\n@@ -4394,2 +5609,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_PreserveMost = 14;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Typedef = 107\n@@ -4398,2 +5613,2 @@\n-    public static int CXCallingConv_PreserveMost() {\n-        return (int)14L;\n+    public static int CXType_Typedef() {\n+        return CXType_Typedef;\n@@ -4401,0 +5616,1 @@\n+    private static final int CXType_ObjCInterface = (int)108L;\n@@ -4402,2 +5618,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_PreserveAll = 15;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCInterface = 108\n@@ -4406,2 +5622,2 @@\n-    public static int CXCallingConv_PreserveAll() {\n-        return (int)15L;\n+    public static int CXType_ObjCInterface() {\n+        return CXType_ObjCInterface;\n@@ -4409,0 +5625,1 @@\n+    private static final int CXType_ObjCObjectPointer = (int)109L;\n@@ -4410,2 +5627,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_AArch64VectorCall = 16;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCObjectPointer = 109\n@@ -4414,2 +5631,2 @@\n-    public static int CXCallingConv_AArch64VectorCall() {\n-        return (int)16L;\n+    public static int CXType_ObjCObjectPointer() {\n+        return CXType_ObjCObjectPointer;\n@@ -4417,0 +5634,1 @@\n+    private static final int CXType_FunctionNoProto = (int)110L;\n@@ -4418,2 +5636,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_Invalid = 100;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_FunctionNoProto = 110\n@@ -4422,2 +5640,2 @@\n-    public static int CXCallingConv_Invalid() {\n-        return (int)100L;\n+    public static int CXType_FunctionNoProto() {\n+        return CXType_FunctionNoProto;\n@@ -4425,0 +5643,1 @@\n+    private static final int CXType_FunctionProto = (int)111L;\n@@ -4426,2 +5645,2 @@\n-     * {@snippet :\n-     * enum CXCallingConv.CXCallingConv_Unexposed = 200;\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_FunctionProto = 111\n@@ -4430,5 +5649,2 @@\n-    public static int CXCallingConv_Unexposed() {\n-        return (int)200L;\n-    }\n-    public static MethodHandle clang_getCursorType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorType$MH,\"clang_getCursorType\");\n+    public static int CXType_FunctionProto() {\n+        return CXType_FunctionProto;\n@@ -4436,0 +5652,1 @@\n+    private static final int CXType_ConstantArray = (int)112L;\n@@ -4437,2 +5654,2 @@\n-     * {@snippet :\n-     * CXType clang_getCursorType(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ConstantArray = 112\n@@ -4441,10 +5658,2 @@\n-    public static MemorySegment clang_getCursorType(SegmentAllocator allocator, MemorySegment C) {\n-        var mh$ = clang_getCursorType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTypeSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getTypeSpelling$MH,\"clang_getTypeSpelling\");\n+    public static int CXType_ConstantArray() {\n+        return CXType_ConstantArray;\n@@ -4452,0 +5661,1 @@\n+    private static final int CXType_Vector = (int)113L;\n@@ -4453,2 +5663,2 @@\n-     * {@snippet :\n-     * CXString clang_getTypeSpelling(CXType CT);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Vector = 113\n@@ -4457,10 +5667,2 @@\n-    public static MemorySegment clang_getTypeSpelling(SegmentAllocator allocator, MemorySegment CT) {\n-        var mh$ = clang_getTypeSpelling$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n+    public static int CXType_Vector() {\n+        return CXType_Vector;\n@@ -4468,0 +5670,1 @@\n+    private static final int CXType_IncompleteArray = (int)114L;\n@@ -4469,2 +5672,2 @@\n-     * {@snippet :\n-     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_IncompleteArray = 114\n@@ -4473,10 +5676,2 @@\n-    public static MemorySegment clang_getTypedefDeclUnderlyingType(SegmentAllocator allocator, MemorySegment C) {\n-        var mh$ = clang_getTypedefDeclUnderlyingType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getEnumDeclIntegerType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getEnumDeclIntegerType$MH,\"clang_getEnumDeclIntegerType\");\n+    public static int CXType_IncompleteArray() {\n+        return CXType_IncompleteArray;\n@@ -4484,0 +5679,1 @@\n+    private static final int CXType_VariableArray = (int)115L;\n@@ -4485,2 +5681,2 @@\n-     * {@snippet :\n-     * CXType clang_getEnumDeclIntegerType(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_VariableArray = 115\n@@ -4489,10 +5685,2 @@\n-    public static MemorySegment clang_getEnumDeclIntegerType(SegmentAllocator allocator, MemorySegment C) {\n-        var mh$ = clang_getEnumDeclIntegerType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getEnumConstantDeclValue$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclValue$MH,\"clang_getEnumConstantDeclValue\");\n+    public static int CXType_VariableArray() {\n+        return CXType_VariableArray;\n@@ -4500,0 +5688,1 @@\n+    private static final int CXType_DependentSizedArray = (int)116L;\n@@ -4501,2 +5690,2 @@\n-     * {@snippet :\n-     * long long clang_getEnumConstantDeclValue(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_DependentSizedArray = 116\n@@ -4505,10 +5694,2 @@\n-    public static long clang_getEnumConstantDeclValue(MemorySegment C) {\n-        var mh$ = clang_getEnumConstantDeclValue$MH();\n-        try {\n-            return (long)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclUnsignedValue$MH,\"clang_getEnumConstantDeclUnsignedValue\");\n+    public static int CXType_DependentSizedArray() {\n+        return CXType_DependentSizedArray;\n@@ -4516,0 +5697,1 @@\n+    private static final int CXType_MemberPointer = (int)117L;\n@@ -4517,2 +5699,2 @@\n-     * {@snippet :\n-     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_MemberPointer = 117\n@@ -4521,10 +5703,2 @@\n-    public static long clang_getEnumConstantDeclUnsignedValue(MemorySegment C) {\n-        var mh$ = clang_getEnumConstantDeclUnsignedValue$MH();\n-        try {\n-            return (long)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getFieldDeclBitWidth$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getFieldDeclBitWidth$MH,\"clang_getFieldDeclBitWidth\");\n+    public static int CXType_MemberPointer() {\n+        return CXType_MemberPointer;\n@@ -4532,0 +5706,1 @@\n+    private static final int CXType_Auto = (int)118L;\n@@ -4533,2 +5708,2 @@\n-     * {@snippet :\n-     * int clang_getFieldDeclBitWidth(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Auto = 118\n@@ -4537,10 +5712,2 @@\n-    public static int clang_getFieldDeclBitWidth(MemorySegment C) {\n-        var mh$ = clang_getFieldDeclBitWidth$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getNumArguments$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getNumArguments$MH,\"clang_Cursor_getNumArguments\");\n+    public static int CXType_Auto() {\n+        return CXType_Auto;\n@@ -4548,0 +5715,1 @@\n+    private static final int CXType_Elaborated = (int)119L;\n@@ -4549,2 +5717,2 @@\n-     * {@snippet :\n-     * int clang_Cursor_getNumArguments(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Elaborated = 119\n@@ -4553,10 +5721,2 @@\n-    public static int clang_Cursor_getNumArguments(MemorySegment C) {\n-        var mh$ = clang_Cursor_getNumArguments$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getArgument$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n+    public static int CXType_Elaborated() {\n+        return CXType_Elaborated;\n@@ -4564,0 +5724,1 @@\n+    private static final int CXType_Pipe = (int)120L;\n@@ -4565,2 +5726,2 @@\n-     * {@snippet :\n-     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Pipe = 120\n@@ -4569,10 +5730,2 @@\n-    public static MemorySegment clang_Cursor_getArgument(SegmentAllocator allocator, MemorySegment C, int i) {\n-        var mh$ = clang_Cursor_getArgument$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C, i);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_equalTypes$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_equalTypes$MH,\"clang_equalTypes\");\n+    public static int CXType_Pipe() {\n+        return CXType_Pipe;\n@@ -4580,0 +5733,1 @@\n+    private static final int CXType_OCLImage1dRO = (int)121L;\n@@ -4581,2 +5735,2 @@\n-     * {@snippet :\n-     * unsigned int clang_equalTypes(CXType A, CXType B);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dRO = 121\n@@ -4585,10 +5739,2 @@\n-    public static int clang_equalTypes(MemorySegment A, MemorySegment B) {\n-        var mh$ = clang_equalTypes$MH();\n-        try {\n-            return (int)mh$.invokeExact(A, B);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCanonicalType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getCanonicalType$MH,\"clang_getCanonicalType\");\n+    public static int CXType_OCLImage1dRO() {\n+        return CXType_OCLImage1dRO;\n@@ -4596,0 +5742,1 @@\n+    private static final int CXType_OCLImage1dArrayRO = (int)122L;\n@@ -4597,2 +5744,2 @@\n-     * {@snippet :\n-     * CXType clang_getCanonicalType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dArrayRO = 122\n@@ -4601,10 +5748,2 @@\n-    public static MemorySegment clang_getCanonicalType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getCanonicalType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isConstQualifiedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_isConstQualifiedType$MH,\"clang_isConstQualifiedType\");\n+    public static int CXType_OCLImage1dArrayRO() {\n+        return CXType_OCLImage1dArrayRO;\n@@ -4612,0 +5751,1 @@\n+    private static final int CXType_OCLImage1dBufferRO = (int)123L;\n@@ -4613,2 +5753,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isConstQualifiedType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dBufferRO = 123\n@@ -4617,10 +5757,2 @@\n-    public static int clang_isConstQualifiedType(MemorySegment T) {\n-        var mh$ = clang_isConstQualifiedType$MH();\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_isMacroFunctionLike$MH,\"clang_Cursor_isMacroFunctionLike\");\n+    public static int CXType_OCLImage1dBufferRO() {\n+        return CXType_OCLImage1dBufferRO;\n@@ -4628,0 +5760,1 @@\n+    private static final int CXType_OCLImage2dRO = (int)124L;\n@@ -4629,2 +5762,2 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dRO = 124\n@@ -4633,10 +5766,2 @@\n-    public static int clang_Cursor_isMacroFunctionLike(MemorySegment C) {\n-        var mh$ = clang_Cursor_isMacroFunctionLike$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_isFunctionInlined$MH,\"clang_Cursor_isFunctionInlined\");\n+    public static int CXType_OCLImage2dRO() {\n+        return CXType_OCLImage2dRO;\n@@ -4644,0 +5769,1 @@\n+    private static final int CXType_OCLImage2dArrayRO = (int)125L;\n@@ -4645,2 +5771,2 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayRO = 125\n@@ -4649,10 +5775,2 @@\n-    public static int clang_Cursor_isFunctionInlined(MemorySegment C) {\n-        var mh$ = clang_Cursor_isFunctionInlined$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isVolatileQualifiedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n+    public static int CXType_OCLImage2dArrayRO() {\n+        return CXType_OCLImage2dArrayRO;\n@@ -4660,0 +5778,1 @@\n+    private static final int CXType_OCLImage2dDepthRO = (int)126L;\n@@ -4661,2 +5780,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isVolatileQualifiedType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dDepthRO = 126\n@@ -4665,10 +5784,2 @@\n-    public static int clang_isVolatileQualifiedType(MemorySegment T) {\n-        var mh$ = clang_isVolatileQualifiedType$MH();\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTypedefName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getTypedefName$MH,\"clang_getTypedefName\");\n+    public static int CXType_OCLImage2dDepthRO() {\n+        return CXType_OCLImage2dDepthRO;\n@@ -4676,0 +5787,1 @@\n+    private static final int CXType_OCLImage2dArrayDepthRO = (int)127L;\n@@ -4677,2 +5789,2 @@\n-     * {@snippet :\n-     * CXString clang_getTypedefName(CXType CT);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRO = 127\n@@ -4681,10 +5793,2 @@\n-    public static MemorySegment clang_getTypedefName(SegmentAllocator allocator, MemorySegment CT) {\n-        var mh$ = clang_getTypedefName$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getPointeeType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getPointeeType$MH,\"clang_getPointeeType\");\n+    public static int CXType_OCLImage2dArrayDepthRO() {\n+        return CXType_OCLImage2dArrayDepthRO;\n@@ -4692,0 +5796,1 @@\n+    private static final int CXType_OCLImage2dMSAARO = (int)128L;\n@@ -4693,2 +5798,2 @@\n-     * {@snippet :\n-     * CXType clang_getPointeeType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAARO = 128\n@@ -4697,7 +5802,2 @@\n-    public static MemorySegment clang_getPointeeType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getPointeeType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXType_OCLImage2dMSAARO() {\n+        return CXType_OCLImage2dMSAARO;\n@@ -4705,2 +5805,1962 @@\n-    public static MethodHandle clang_getTypeDeclaration$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getTypeDeclaration$MH,\"clang_getTypeDeclaration\");\n+    private static final int CXType_OCLImage2dArrayMSAARO = (int)129L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARO = 129\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAARO() {\n+        return CXType_OCLImage2dArrayMSAARO;\n+    }\n+    private static final int CXType_OCLImage2dMSAADepthRO = (int)130L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRO = 130\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dMSAADepthRO() {\n+        return CXType_OCLImage2dMSAADepthRO;\n+    }\n+    private static final int CXType_OCLImage2dArrayMSAADepthRO = (int)131L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRO = 131\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAADepthRO() {\n+        return CXType_OCLImage2dArrayMSAADepthRO;\n+    }\n+    private static final int CXType_OCLImage3dRO = (int)132L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage3dRO = 132\n+     * }\n+     *\/\n+    public static int CXType_OCLImage3dRO() {\n+        return CXType_OCLImage3dRO;\n+    }\n+    private static final int CXType_OCLImage1dWO = (int)133L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dWO = 133\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dWO() {\n+        return CXType_OCLImage1dWO;\n+    }\n+    private static final int CXType_OCLImage1dArrayWO = (int)134L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dArrayWO = 134\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dArrayWO() {\n+        return CXType_OCLImage1dArrayWO;\n+    }\n+    private static final int CXType_OCLImage1dBufferWO = (int)135L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dBufferWO = 135\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dBufferWO() {\n+        return CXType_OCLImage1dBufferWO;\n+    }\n+    private static final int CXType_OCLImage2dWO = (int)136L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dWO = 136\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dWO() {\n+        return CXType_OCLImage2dWO;\n+    }\n+    private static final int CXType_OCLImage2dArrayWO = (int)137L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayWO = 137\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayWO() {\n+        return CXType_OCLImage2dArrayWO;\n+    }\n+    private static final int CXType_OCLImage2dDepthWO = (int)138L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dDepthWO = 138\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dDepthWO() {\n+        return CXType_OCLImage2dDepthWO;\n+    }\n+    private static final int CXType_OCLImage2dArrayDepthWO = (int)139L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthWO = 139\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayDepthWO() {\n+        return CXType_OCLImage2dArrayDepthWO;\n+    }\n+    private static final int CXType_OCLImage2dMSAAWO = (int)140L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAAWO = 140\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dMSAAWO() {\n+        return CXType_OCLImage2dMSAAWO;\n+    }\n+    private static final int CXType_OCLImage2dArrayMSAAWO = (int)141L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAAWO = 141\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAAWO() {\n+        return CXType_OCLImage2dArrayMSAAWO;\n+    }\n+    private static final int CXType_OCLImage2dMSAADepthWO = (int)142L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthWO = 142\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dMSAADepthWO() {\n+        return CXType_OCLImage2dMSAADepthWO;\n+    }\n+    private static final int CXType_OCLImage2dArrayMSAADepthWO = (int)143L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthWO = 143\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAADepthWO() {\n+        return CXType_OCLImage2dArrayMSAADepthWO;\n+    }\n+    private static final int CXType_OCLImage3dWO = (int)144L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage3dWO = 144\n+     * }\n+     *\/\n+    public static int CXType_OCLImage3dWO() {\n+        return CXType_OCLImage3dWO;\n+    }\n+    private static final int CXType_OCLImage1dRW = (int)145L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dRW = 145\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dRW() {\n+        return CXType_OCLImage1dRW;\n+    }\n+    private static final int CXType_OCLImage1dArrayRW = (int)146L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dArrayRW = 146\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dArrayRW() {\n+        return CXType_OCLImage1dArrayRW;\n+    }\n+    private static final int CXType_OCLImage1dBufferRW = (int)147L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage1dBufferRW = 147\n+     * }\n+     *\/\n+    public static int CXType_OCLImage1dBufferRW() {\n+        return CXType_OCLImage1dBufferRW;\n+    }\n+    private static final int CXType_OCLImage2dRW = (int)148L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dRW = 148\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dRW() {\n+        return CXType_OCLImage2dRW;\n+    }\n+    private static final int CXType_OCLImage2dArrayRW = (int)149L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayRW = 149\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayRW() {\n+        return CXType_OCLImage2dArrayRW;\n+    }\n+    private static final int CXType_OCLImage2dDepthRW = (int)150L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dDepthRW = 150\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dDepthRW() {\n+        return CXType_OCLImage2dDepthRW;\n+    }\n+    private static final int CXType_OCLImage2dArrayDepthRW = (int)151L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayDepthRW = 151\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayDepthRW() {\n+        return CXType_OCLImage2dArrayDepthRW;\n+    }\n+    private static final int CXType_OCLImage2dMSAARW = (int)152L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAARW = 152\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dMSAARW() {\n+        return CXType_OCLImage2dMSAARW;\n+    }\n+    private static final int CXType_OCLImage2dArrayMSAARW = (int)153L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAARW = 153\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAARW() {\n+        return CXType_OCLImage2dArrayMSAARW;\n+    }\n+    private static final int CXType_OCLImage2dMSAADepthRW = (int)154L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dMSAADepthRW = 154\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dMSAADepthRW() {\n+        return CXType_OCLImage2dMSAADepthRW;\n+    }\n+    private static final int CXType_OCLImage2dArrayMSAADepthRW = (int)155L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage2dArrayMSAADepthRW = 155\n+     * }\n+     *\/\n+    public static int CXType_OCLImage2dArrayMSAADepthRW() {\n+        return CXType_OCLImage2dArrayMSAADepthRW;\n+    }\n+    private static final int CXType_OCLImage3dRW = (int)156L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLImage3dRW = 156\n+     * }\n+     *\/\n+    public static int CXType_OCLImage3dRW() {\n+        return CXType_OCLImage3dRW;\n+    }\n+    private static final int CXType_OCLSampler = (int)157L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLSampler = 157\n+     * }\n+     *\/\n+    public static int CXType_OCLSampler() {\n+        return CXType_OCLSampler;\n+    }\n+    private static final int CXType_OCLEvent = (int)158L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLEvent = 158\n+     * }\n+     *\/\n+    public static int CXType_OCLEvent() {\n+        return CXType_OCLEvent;\n+    }\n+    private static final int CXType_OCLQueue = (int)159L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLQueue = 159\n+     * }\n+     *\/\n+    public static int CXType_OCLQueue() {\n+        return CXType_OCLQueue;\n+    }\n+    private static final int CXType_OCLReserveID = (int)160L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLReserveID = 160\n+     * }\n+     *\/\n+    public static int CXType_OCLReserveID() {\n+        return CXType_OCLReserveID;\n+    }\n+    private static final int CXType_ObjCObject = (int)161L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCObject = 161\n+     * }\n+     *\/\n+    public static int CXType_ObjCObject() {\n+        return CXType_ObjCObject;\n+    }\n+    private static final int CXType_ObjCTypeParam = (int)162L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ObjCTypeParam = 162\n+     * }\n+     *\/\n+    public static int CXType_ObjCTypeParam() {\n+        return CXType_ObjCTypeParam;\n+    }\n+    private static final int CXType_Attributed = (int)163L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_Attributed = 163\n+     * }\n+     *\/\n+    public static int CXType_Attributed() {\n+        return CXType_Attributed;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCMcePayload = (int)164L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMcePayload = 164\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCMcePayload() {\n+        return CXType_OCLIntelSubgroupAVCMcePayload;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImePayload = (int)165L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImePayload = 165\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImePayload() {\n+        return CXType_OCLIntelSubgroupAVCImePayload;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCRefPayload = (int)166L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefPayload = 166\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCRefPayload() {\n+        return CXType_OCLIntelSubgroupAVCRefPayload;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCSicPayload = (int)167L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicPayload = 167\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCSicPayload() {\n+        return CXType_OCLIntelSubgroupAVCSicPayload;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCMceResult = (int)168L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCMceResult = 168\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCMceResult() {\n+        return CXType_OCLIntelSubgroupAVCMceResult;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImeResult = (int)169L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResult = 169\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImeResult() {\n+        return CXType_OCLIntelSubgroupAVCImeResult;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCRefResult = (int)170L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCRefResult = 170\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCRefResult() {\n+        return CXType_OCLIntelSubgroupAVCRefResult;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCSicResult = (int)171L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCSicResult = 171\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCSicResult() {\n+        return CXType_OCLIntelSubgroupAVCSicResult;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = (int)172L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() {\n+        return CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = (int)173L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() {\n+        return CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = (int)174L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() {\n+        return CXType_OCLIntelSubgroupAVCImeSingleRefStreamin;\n+    }\n+    private static final int CXType_OCLIntelSubgroupAVCImeDualRefStreamin = (int)175L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175\n+     * }\n+     *\/\n+    public static int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() {\n+        return CXType_OCLIntelSubgroupAVCImeDualRefStreamin;\n+    }\n+    private static final int CXType_ExtVector = (int)176L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeKind.CXType_ExtVector = 176\n+     * }\n+     *\/\n+    public static int CXType_ExtVector() {\n+        return CXType_ExtVector;\n+    }\n+    private static final int CXCallingConv_Default = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_Default = 0\n+     * }\n+     *\/\n+    public static int CXCallingConv_Default() {\n+        return CXCallingConv_Default;\n+    }\n+    private static final int CXCallingConv_C = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_C = 1\n+     * }\n+     *\/\n+    public static int CXCallingConv_C() {\n+        return CXCallingConv_C;\n+    }\n+    private static final int CXCallingConv_X86StdCall = (int)2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86StdCall = 2\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86StdCall() {\n+        return CXCallingConv_X86StdCall;\n+    }\n+    private static final int CXCallingConv_X86FastCall = (int)3L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86FastCall = 3\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86FastCall() {\n+        return CXCallingConv_X86FastCall;\n+    }\n+    private static final int CXCallingConv_X86ThisCall = (int)4L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86ThisCall = 4\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86ThisCall() {\n+        return CXCallingConv_X86ThisCall;\n+    }\n+    private static final int CXCallingConv_X86Pascal = (int)5L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86Pascal = 5\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86Pascal() {\n+        return CXCallingConv_X86Pascal;\n+    }\n+    private static final int CXCallingConv_AAPCS = (int)6L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_AAPCS = 6\n+     * }\n+     *\/\n+    public static int CXCallingConv_AAPCS() {\n+        return CXCallingConv_AAPCS;\n+    }\n+    private static final int CXCallingConv_AAPCS_VFP = (int)7L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_AAPCS_VFP = 7\n+     * }\n+     *\/\n+    public static int CXCallingConv_AAPCS_VFP() {\n+        return CXCallingConv_AAPCS_VFP;\n+    }\n+    private static final int CXCallingConv_X86RegCall = (int)8L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86RegCall = 8\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86RegCall() {\n+        return CXCallingConv_X86RegCall;\n+    }\n+    private static final int CXCallingConv_IntelOclBicc = (int)9L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_IntelOclBicc = 9\n+     * }\n+     *\/\n+    public static int CXCallingConv_IntelOclBicc() {\n+        return CXCallingConv_IntelOclBicc;\n+    }\n+    private static final int CXCallingConv_Win64 = (int)10L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_Win64 = 10\n+     * }\n+     *\/\n+    public static int CXCallingConv_Win64() {\n+        return CXCallingConv_Win64;\n+    }\n+    private static final int CXCallingConv_X86_64Win64 = (int)10L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86_64Win64 = 10\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86_64Win64() {\n+        return CXCallingConv_X86_64Win64;\n+    }\n+    private static final int CXCallingConv_X86_64SysV = (int)11L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86_64SysV = 11\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86_64SysV() {\n+        return CXCallingConv_X86_64SysV;\n+    }\n+    private static final int CXCallingConv_X86VectorCall = (int)12L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_X86VectorCall = 12\n+     * }\n+     *\/\n+    public static int CXCallingConv_X86VectorCall() {\n+        return CXCallingConv_X86VectorCall;\n+    }\n+    private static final int CXCallingConv_Swift = (int)13L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_Swift = 13\n+     * }\n+     *\/\n+    public static int CXCallingConv_Swift() {\n+        return CXCallingConv_Swift;\n+    }\n+    private static final int CXCallingConv_PreserveMost = (int)14L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_PreserveMost = 14\n+     * }\n+     *\/\n+    public static int CXCallingConv_PreserveMost() {\n+        return CXCallingConv_PreserveMost;\n+    }\n+    private static final int CXCallingConv_PreserveAll = (int)15L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_PreserveAll = 15\n+     * }\n+     *\/\n+    public static int CXCallingConv_PreserveAll() {\n+        return CXCallingConv_PreserveAll;\n+    }\n+    private static final int CXCallingConv_AArch64VectorCall = (int)16L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_AArch64VectorCall = 16\n+     * }\n+     *\/\n+    public static int CXCallingConv_AArch64VectorCall() {\n+        return CXCallingConv_AArch64VectorCall;\n+    }\n+    private static final int CXCallingConv_Invalid = (int)100L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_Invalid = 100\n+     * }\n+     *\/\n+    public static int CXCallingConv_Invalid() {\n+        return CXCallingConv_Invalid;\n+    }\n+    private static final int CXCallingConv_Unexposed = (int)200L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv.CXCallingConv_Unexposed = 200\n+     * }\n+     *\/\n+    public static int CXCallingConv_Unexposed() {\n+        return CXCallingConv_Unexposed;\n+    }\n+\n+    private static class clang_getCursorType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorType$descriptor() {\n+        return clang_getCursorType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorType$handle() {\n+        return clang_getCursorType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorType(SegmentAllocator allocator, MemorySegment C) {\n+        var mh$ = clang_getCursorType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTypeSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTypeSpelling\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeSpelling$descriptor() {\n+        return clang_getTypeSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeSpelling$handle() {\n+        return clang_getTypeSpelling$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeSpelling(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeSpelling(SegmentAllocator allocator, MemorySegment CT) {\n+        var mh$ = clang_getTypeSpelling$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeSpelling\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTypedefDeclUnderlyingType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTypedefDeclUnderlyingType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypedefDeclUnderlyingType$descriptor() {\n+        return clang_getTypedefDeclUnderlyingType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypedefDeclUnderlyingType$handle() {\n+        return clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getTypedefDeclUnderlyingType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType(SegmentAllocator allocator, MemorySegment C) {\n+        var mh$ = clang_getTypedefDeclUnderlyingType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypedefDeclUnderlyingType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getEnumDeclIntegerType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getEnumDeclIntegerType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumDeclIntegerType$descriptor() {\n+        return clang_getEnumDeclIntegerType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumDeclIntegerType$handle() {\n+        return clang_getEnumDeclIntegerType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getEnumDeclIntegerType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getEnumDeclIntegerType(SegmentAllocator allocator, MemorySegment C) {\n+        var mh$ = clang_getEnumDeclIntegerType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumDeclIntegerType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getEnumConstantDeclValue$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getEnumConstantDeclValue\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumConstantDeclValue$descriptor() {\n+        return clang_getEnumConstantDeclValue$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumConstantDeclValue$handle() {\n+        return clang_getEnumConstantDeclValue$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_getEnumConstantDeclValue(CXCursor C)\n+     * }\n+     *\/\n+    public static long clang_getEnumConstantDeclValue(MemorySegment C) {\n+        var mh$ = clang_getEnumConstantDeclValue$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumConstantDeclValue\", C);\n+            }\n+            return (long)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getEnumConstantDeclUnsignedValue$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getEnumConstantDeclUnsignedValue\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$descriptor() {\n+        return clang_getEnumConstantDeclUnsignedValue$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$handle() {\n+        return clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned long long clang_getEnumConstantDeclUnsignedValue(CXCursor C)\n+     * }\n+     *\/\n+    public static long clang_getEnumConstantDeclUnsignedValue(MemorySegment C) {\n+        var mh$ = clang_getEnumConstantDeclUnsignedValue$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getEnumConstantDeclUnsignedValue\", C);\n+            }\n+            return (long)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getFieldDeclBitWidth$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getFieldDeclBitWidth\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getFieldDeclBitWidth$descriptor() {\n+        return clang_getFieldDeclBitWidth$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFieldDeclBitWidth$handle() {\n+        return clang_getFieldDeclBitWidth$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_getFieldDeclBitWidth(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_getFieldDeclBitWidth(MemorySegment C) {\n+        var mh$ = clang_getFieldDeclBitWidth$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFieldDeclBitWidth\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_getNumArguments$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_getNumArguments\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getNumArguments$descriptor() {\n+        return clang_Cursor_getNumArguments$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getNumArguments$handle() {\n+        return clang_Cursor_getNumArguments$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_Cursor_getNumArguments(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_getNumArguments(MemorySegment C) {\n+        var mh$ = clang_Cursor_getNumArguments$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getNumArguments\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_getArgument$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout(),\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_getArgument\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_getArgument$descriptor() {\n+        return clang_Cursor_getArgument$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_getArgument$handle() {\n+        return clang_Cursor_getArgument$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_Cursor_getArgument(CXCursor C, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Cursor_getArgument(SegmentAllocator allocator, MemorySegment C, int i) {\n+        var mh$ = clang_Cursor_getArgument$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getArgument\", allocator, C, i);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C, i);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_equalTypes$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_equalTypes\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_equalTypes$descriptor() {\n+        return clang_equalTypes$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static MethodHandle clang_equalTypes$handle() {\n+        return clang_equalTypes$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_equalTypes(CXType A, CXType B)\n+     * }\n+     *\/\n+    public static int clang_equalTypes(MemorySegment A, MemorySegment B) {\n+        var mh$ = clang_equalTypes$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_equalTypes\", A, B);\n+            }\n+            return (int)mh$.invokeExact(A, B);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getCanonicalType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCanonicalType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCanonicalType$descriptor() {\n+        return clang_getCanonicalType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCanonicalType$handle() {\n+        return clang_getCanonicalType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCanonicalType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCanonicalType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getCanonicalType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCanonicalType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isConstQualifiedType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isConstQualifiedType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isConstQualifiedType$descriptor() {\n+        return clang_isConstQualifiedType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isConstQualifiedType$handle() {\n+        return clang_isConstQualifiedType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isConstQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static int clang_isConstQualifiedType(MemorySegment T) {\n+        var mh$ = clang_isConstQualifiedType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isConstQualifiedType\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isMacroFunctionLike$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isMacroFunctionLike\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isMacroFunctionLike$descriptor() {\n+        return clang_Cursor_isMacroFunctionLike$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isMacroFunctionLike$handle() {\n+        return clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isMacroFunctionLike(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_isMacroFunctionLike(MemorySegment C) {\n+        var mh$ = clang_Cursor_isMacroFunctionLike$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isMacroFunctionLike\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isFunctionInlined$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isFunctionInlined\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isFunctionInlined$descriptor() {\n+        return clang_Cursor_isFunctionInlined$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isFunctionInlined$handle() {\n+        return clang_Cursor_isFunctionInlined$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isFunctionInlined(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_isFunctionInlined(MemorySegment C) {\n+        var mh$ = clang_Cursor_isFunctionInlined$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isFunctionInlined\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isVolatileQualifiedType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isVolatileQualifiedType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isVolatileQualifiedType$descriptor() {\n+        return clang_isVolatileQualifiedType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isVolatileQualifiedType$handle() {\n+        return clang_isVolatileQualifiedType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isVolatileQualifiedType(CXType T)\n+     * }\n+     *\/\n+    public static int clang_isVolatileQualifiedType(MemorySegment T) {\n+        var mh$ = clang_isVolatileQualifiedType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isVolatileQualifiedType\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTypedefName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTypedefName\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypedefName$descriptor() {\n+        return clang_getTypedefName$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypedefName$handle() {\n+        return clang_getTypedefName$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTypedefName(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypedefName(SegmentAllocator allocator, MemorySegment CT) {\n+        var mh$ = clang_getTypedefName$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypedefName\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getPointeeType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getPointeeType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getPointeeType$descriptor() {\n+        return clang_getPointeeType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getPointeeType$handle() {\n+        return clang_getPointeeType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getPointeeType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getPointeeType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getPointeeType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getPointeeType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTypeDeclaration$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTypeDeclaration\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeDeclaration$descriptor() {\n+        return clang_getTypeDeclaration$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeDeclaration$handle() {\n+        return clang_getTypeDeclaration$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXCursor clang_getTypeDeclaration(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeDeclaration(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getTypeDeclaration$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeDeclaration\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTypeKindSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTypeKindSpelling\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getTypeKindSpelling$descriptor() {\n+        return clang_getTypeKindSpelling$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTypeKindSpelling$handle() {\n+        return clang_getTypeKindSpelling$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXString clang_getTypeKindSpelling(enum CXTypeKind K)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getTypeKindSpelling(SegmentAllocator allocator, int K) {\n+        var mh$ = clang_getTypeKindSpelling$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTypeKindSpelling\", allocator, K);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, K);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getFunctionTypeCallingConv$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getFunctionTypeCallingConv\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getFunctionTypeCallingConv$descriptor() {\n+        return clang_getFunctionTypeCallingConv$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getFunctionTypeCallingConv$handle() {\n+        return clang_getFunctionTypeCallingConv$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T)\n+     * }\n+     *\/\n+    public static int clang_getFunctionTypeCallingConv(MemorySegment T) {\n+        var mh$ = clang_getFunctionTypeCallingConv$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getFunctionTypeCallingConv\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getResultType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getResultType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getResultType$descriptor() {\n+        return clang_getResultType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getResultType$handle() {\n+        return clang_getResultType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getResultType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getResultType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getResultType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getResultType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getNumArgTypes$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getNumArgTypes\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNumArgTypes$descriptor() {\n+        return clang_getNumArgTypes$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNumArgTypes$handle() {\n+        return clang_getNumArgTypes$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * int clang_getNumArgTypes(CXType T)\n+     * }\n+     *\/\n+    public static int clang_getNumArgTypes(MemorySegment T) {\n+        var mh$ = clang_getNumArgTypes$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumArgTypes\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getArgType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout(),\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getArgType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArgType$descriptor() {\n+        return clang_getArgType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArgType$handle() {\n+        return clang_getArgType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getArgType(CXType T, unsigned int i)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArgType(SegmentAllocator allocator, MemorySegment T, int i) {\n+        var mh$ = clang_getArgType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArgType\", allocator, T, i);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T, i);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isFunctionTypeVariadic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isFunctionTypeVariadic\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_isFunctionTypeVariadic$descriptor() {\n+        return clang_isFunctionTypeVariadic$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_isFunctionTypeVariadic$handle() {\n+        return clang_isFunctionTypeVariadic$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_isFunctionTypeVariadic(CXType T)\n+     * }\n+     *\/\n+    public static int clang_isFunctionTypeVariadic(MemorySegment T) {\n+        var mh$ = clang_isFunctionTypeVariadic$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isFunctionTypeVariadic\", T);\n+            }\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getCursorResultType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorResultType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorResultType$descriptor() {\n+        return clang_getCursorResultType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorResultType$handle() {\n+        return clang_getCursorResultType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getCursorResultType(CXCursor C)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getCursorResultType(SegmentAllocator allocator, MemorySegment C) {\n+        var mh$ = clang_getCursorResultType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorResultType\", allocator, C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getElementType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getElementType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getElementType$descriptor() {\n+        return clang_getElementType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getElementType$handle() {\n+        return clang_getElementType$constants.HANDLE;\n+    }\n+\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getElementType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getElementType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getElementType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getNumElements$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getNumElements\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getNumElements$descriptor() {\n+        return clang_getNumElements$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getNumElements$handle() {\n+        return clang_getNumElements$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_getNumElements(CXType T)\n+     * }\n+     *\/\n+    public static long clang_getNumElements(MemorySegment T) {\n+        var mh$ = clang_getNumElements$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getNumElements\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getArrayElementType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getArrayElementType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArrayElementType$descriptor() {\n+        return clang_getArrayElementType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArrayElementType$handle() {\n+        return clang_getArrayElementType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_getArrayElementType(CXType T)\n+     * }\n+     *\/\n+    public static MemorySegment clang_getArrayElementType(SegmentAllocator allocator, MemorySegment T) {\n+        var mh$ = clang_getArrayElementType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArrayElementType\", allocator, T);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getArraySize$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getArraySize\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getArraySize$descriptor() {\n+        return clang_getArraySize$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getArraySize$handle() {\n+        return clang_getArraySize$constants.HANDLE;\n@@ -4709,2 +7769,2 @@\n-     * {@snippet :\n-     * CXCursor clang_getTypeDeclaration(CXType T);\n+     * {@snippet lang=c :\n+     * long long clang_getArraySize(CXType T)\n@@ -4713,2 +7773,498 @@\n-    public static MemorySegment clang_getTypeDeclaration(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getTypeDeclaration$MH();\n+    public static long clang_getArraySize(MemorySegment T) {\n+        var mh$ = clang_getArraySize$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getArraySize\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    private static final int CXTypeNullability_NonNull = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeNullabilityKind.CXTypeNullability_NonNull = 0\n+     * }\n+     *\/\n+    public static int CXTypeNullability_NonNull() {\n+        return CXTypeNullability_NonNull;\n+    }\n+    private static final int CXTypeNullability_Nullable = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Nullable = 1\n+     * }\n+     *\/\n+    public static int CXTypeNullability_Nullable() {\n+        return CXTypeNullability_Nullable;\n+    }\n+    private static final int CXTypeNullability_Unspecified = (int)2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Unspecified = 2\n+     * }\n+     *\/\n+    public static int CXTypeNullability_Unspecified() {\n+        return CXTypeNullability_Unspecified;\n+    }\n+    private static final int CXTypeNullability_Invalid = (int)3L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeNullabilityKind.CXTypeNullability_Invalid = 3\n+     * }\n+     *\/\n+    public static int CXTypeNullability_Invalid() {\n+        return CXTypeNullability_Invalid;\n+    }\n+    private static final int CXTypeLayoutError_Invalid = (int)-1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Invalid = -1\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_Invalid() {\n+        return CXTypeLayoutError_Invalid;\n+    }\n+    private static final int CXTypeLayoutError_Incomplete = (int)-2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Incomplete = -2\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_Incomplete() {\n+        return CXTypeLayoutError_Incomplete;\n+    }\n+    private static final int CXTypeLayoutError_Dependent = (int)-3L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Dependent = -3\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_Dependent() {\n+        return CXTypeLayoutError_Dependent;\n+    }\n+    private static final int CXTypeLayoutError_NotConstantSize = (int)-4L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_NotConstantSize = -4\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_NotConstantSize() {\n+        return CXTypeLayoutError_NotConstantSize;\n+    }\n+    private static final int CXTypeLayoutError_InvalidFieldName = (int)-5L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_InvalidFieldName = -5\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_InvalidFieldName() {\n+        return CXTypeLayoutError_InvalidFieldName;\n+    }\n+    private static final int CXTypeLayoutError_Undeduced = (int)-6L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXTypeLayoutError.CXTypeLayoutError_Undeduced = -6\n+     * }\n+     *\/\n+    public static int CXTypeLayoutError_Undeduced() {\n+        return CXTypeLayoutError_Undeduced;\n+    }\n+\n+    private static class clang_Type_getAlignOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Type_getAlignOf\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getAlignOf$descriptor() {\n+        return clang_Type_getAlignOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getAlignOf$handle() {\n+        return clang_Type_getAlignOf$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getAlignOf(CXType T)\n+     * }\n+     *\/\n+    public static long clang_Type_getAlignOf(MemorySegment T) {\n+        var mh$ = clang_Type_getAlignOf$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getAlignOf\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Type_getSizeOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Type_getSizeOf\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getSizeOf$descriptor() {\n+        return clang_Type_getSizeOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getSizeOf$handle() {\n+        return clang_Type_getSizeOf$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getSizeOf(CXType T)\n+     * }\n+     *\/\n+    public static long clang_Type_getSizeOf(MemorySegment T) {\n+        var mh$ = clang_Type_getSizeOf$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getSizeOf\", T);\n+            }\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Type_getOffsetOf$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            CXType.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Type_getOffsetOf\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getOffsetOf$descriptor() {\n+        return clang_Type_getOffsetOf$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getOffsetOf$handle() {\n+        return clang_Type_getOffsetOf$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * long long clang_Type_getOffsetOf(CXType T, const char *S)\n+     * }\n+     *\/\n+    public static long clang_Type_getOffsetOf(MemorySegment T, MemorySegment S) {\n+        var mh$ = clang_Type_getOffsetOf$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getOffsetOf\", T, S);\n+            }\n+            return (long)mh$.invokeExact(T, S);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Type_getValueType$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXType.layout(),\n+            CXType.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Type_getValueType\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Type_getValueType$descriptor() {\n+        return clang_Type_getValueType$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Type_getValueType$handle() {\n+        return clang_Type_getValueType$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * CXType clang_Type_getValueType(CXType CT)\n+     * }\n+     *\/\n+    public static MemorySegment clang_Type_getValueType(SegmentAllocator allocator, MemorySegment CT) {\n+        var mh$ = clang_Type_getValueType$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Type_getValueType\", allocator, CT);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, CT);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isAnonymous$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isAnonymous\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isAnonymous$descriptor() {\n+        return clang_Cursor_isAnonymous$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isAnonymous$handle() {\n+        return clang_Cursor_isAnonymous$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymous(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_isAnonymous(MemorySegment C) {\n+        var mh$ = clang_Cursor_isAnonymous$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isAnonymous\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isAnonymousRecordDecl$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isAnonymousRecordDecl\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$descriptor() {\n+        return clang_Cursor_isAnonymousRecordDecl$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$handle() {\n+        return clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_isAnonymousRecordDecl(MemorySegment C) {\n+        var mh$ = clang_Cursor_isAnonymousRecordDecl$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isAnonymousRecordDecl\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_isBitField$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isBitField\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_Cursor_isBitField$descriptor() {\n+        return clang_Cursor_isBitField$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_isBitField$handle() {\n+        return clang_Cursor_isBitField$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isBitField(CXCursor C)\n+     * }\n+     *\/\n+    public static int clang_Cursor_isBitField(MemorySegment C) {\n+        var mh$ = clang_Cursor_isBitField$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isBitField\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    private static final int CXChildVisit_Break = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXChildVisitResult.CXChildVisit_Break = 0\n+     * }\n+     *\/\n+    public static int CXChildVisit_Break() {\n+        return CXChildVisit_Break;\n+    }\n+    private static final int CXChildVisit_Continue = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXChildVisitResult.CXChildVisit_Continue = 1\n+     * }\n+     *\/\n+    public static int CXChildVisit_Continue() {\n+        return CXChildVisit_Continue;\n+    }\n+    private static final int CXChildVisit_Recurse = (int)2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXChildVisitResult.CXChildVisit_Recurse = 2\n+     * }\n+     *\/\n+    public static int CXChildVisit_Recurse() {\n+        return CXChildVisit_Recurse;\n+    }\n+\n+    private static class clang_visitChildren$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_visitChildren\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_visitChildren$descriptor() {\n+        return clang_visitChildren$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static MethodHandle clang_visitChildren$handle() {\n+        return clang_visitChildren$constants.HANDLE;\n+    }\n+    \/**\n+     * {@snippet lang=c :\n+     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)\n+     * }\n+     *\/\n+    public static int clang_visitChildren(MemorySegment parent, MemorySegment visitor, MemorySegment client_data) {\n+        var mh$ = clang_visitChildren$constants.HANDLE;\n@@ -4716,1 +8272,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_visitChildren\", parent, visitor, client_data);\n+            }\n+            return (int)mh$.invokeExact(parent, visitor, client_data);\n@@ -4718,1 +8277,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -4721,2 +8280,30 @@\n-    public static MethodHandle clang_getTypeKindSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getTypeKindSpelling$MH,\"clang_getTypeKindSpelling\");\n+\n+    private static class clang_getCursorUSR$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorUSR\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_getCursorUSR$descriptor() {\n+        return clang_getCursorUSR$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorUSR$handle() {\n+        return clang_getCursorUSR$constants.HANDLE;\n@@ -4725,2 +8312,2 @@\n-     * {@snippet :\n-     * CXString clang_getTypeKindSpelling(enum CXTypeKind K);\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorUSR(CXCursor)\n@@ -4729,2 +8316,2 @@\n-    public static MemorySegment clang_getTypeKindSpelling(SegmentAllocator allocator, int K) {\n-        var mh$ = clang_getTypeKindSpelling$MH();\n+    public static MemorySegment clang_getCursorUSR(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorUSR$constants.HANDLE;\n@@ -4732,1 +8319,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, K);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorUSR\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -4734,1 +8324,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -4737,2 +8327,10 @@\n-    public static MethodHandle clang_getFunctionTypeCallingConv$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getFunctionTypeCallingConv$MH,\"clang_getFunctionTypeCallingConv\");\n+\n+    private static class clang_getCursorSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorSpelling\"),\n+                    DESC);\n@@ -4740,0 +8338,1 @@\n+\n@@ -4741,2 +8340,3 @@\n-     * {@snippet :\n-     * enum CXCallingConv clang_getFunctionTypeCallingConv(CXType T);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n@@ -4745,7 +8345,2 @@\n-    public static int clang_getFunctionTypeCallingConv(MemorySegment T) {\n-        var mh$ = clang_getFunctionTypeCallingConv$MH();\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getCursorSpelling$descriptor() {\n+        return clang_getCursorSpelling$constants.DESC;\n@@ -4753,2 +8348,9 @@\n-    public static MethodHandle clang_getResultType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getResultType$MH,\"clang_getResultType\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorSpelling$handle() {\n+        return clang_getCursorSpelling$constants.HANDLE;\n@@ -4757,2 +8359,2 @@\n-     * {@snippet :\n-     * CXType clang_getResultType(CXType T);\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorSpelling(CXCursor)\n@@ -4761,2 +8363,2 @@\n-    public static MemorySegment clang_getResultType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getResultType$MH();\n+    public static MemorySegment clang_getCursorSpelling(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorSpelling$constants.HANDLE;\n@@ -4764,1 +8366,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorSpelling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -4766,1 +8371,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -4769,2 +8374,8 @@\n-    public static MethodHandle clang_getNumArgTypes$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n+    private static final int CXPrintingPolicy_Indentation = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Indentation = 0\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_Indentation() {\n+        return CXPrintingPolicy_Indentation;\n@@ -4772,0 +8383,1 @@\n+    private static final int CXPrintingPolicy_SuppressSpecifiers = (int)1L;\n@@ -4773,2 +8385,2 @@\n-     * {@snippet :\n-     * int clang_getNumArgTypes(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressSpecifiers = 1\n@@ -4777,7 +8389,2 @@\n-    public static int clang_getNumArgTypes(MemorySegment T) {\n-        var mh$ = clang_getNumArgTypes$MH();\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_SuppressSpecifiers() {\n+        return CXPrintingPolicy_SuppressSpecifiers;\n@@ -4785,2 +8392,8 @@\n-    public static MethodHandle clang_getArgType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getArgType$MH,\"clang_getArgType\");\n+    private static final int CXPrintingPolicy_SuppressTagKeyword = (int)2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTagKeyword = 2\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_SuppressTagKeyword() {\n+        return CXPrintingPolicy_SuppressTagKeyword;\n@@ -4788,0 +8401,1 @@\n+    private static final int CXPrintingPolicy_IncludeTagDefinition = (int)3L;\n@@ -4789,2 +8403,2 @@\n-     * {@snippet :\n-     * CXType clang_getArgType(CXType T, unsigned int i);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeTagDefinition = 3\n@@ -4793,7 +8407,2 @@\n-    public static MemorySegment clang_getArgType(SegmentAllocator allocator, MemorySegment T, int i) {\n-        var mh$ = clang_getArgType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_IncludeTagDefinition() {\n+        return CXPrintingPolicy_IncludeTagDefinition;\n@@ -4801,2 +8410,8 @@\n-    public static MethodHandle clang_isFunctionTypeVariadic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_isFunctionTypeVariadic$MH,\"clang_isFunctionTypeVariadic\");\n+    private static final int CXPrintingPolicy_SuppressScope = (int)4L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressScope = 4\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_SuppressScope() {\n+        return CXPrintingPolicy_SuppressScope;\n@@ -4804,0 +8419,1 @@\n+    private static final int CXPrintingPolicy_SuppressUnwrittenScope = (int)5L;\n@@ -4805,2 +8421,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isFunctionTypeVariadic(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressUnwrittenScope = 5\n@@ -4809,7 +8425,2 @@\n-    public static int clang_isFunctionTypeVariadic(MemorySegment T) {\n-        var mh$ = clang_isFunctionTypeVariadic$MH();\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_SuppressUnwrittenScope() {\n+        return CXPrintingPolicy_SuppressUnwrittenScope;\n@@ -4817,2 +8428,8 @@\n-    public static MethodHandle clang_getCursorResultType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getCursorResultType$MH,\"clang_getCursorResultType\");\n+    private static final int CXPrintingPolicy_SuppressInitializers = (int)6L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressInitializers = 6\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_SuppressInitializers() {\n+        return CXPrintingPolicy_SuppressInitializers;\n@@ -4820,0 +8437,1 @@\n+    private static final int CXPrintingPolicy_ConstantArraySizeAsWritten = (int)7L;\n@@ -4821,2 +8439,2 @@\n-     * {@snippet :\n-     * CXType clang_getCursorResultType(CXCursor C);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantArraySizeAsWritten = 7\n@@ -4825,7 +8443,2 @@\n-    public static MemorySegment clang_getCursorResultType(SegmentAllocator allocator, MemorySegment C) {\n-        var mh$ = clang_getCursorResultType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n+        return CXPrintingPolicy_ConstantArraySizeAsWritten;\n@@ -4833,2 +8446,8 @@\n-    public static MethodHandle clang_getElementType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getElementType$MH,\"clang_getElementType\");\n+    private static final int CXPrintingPolicy_AnonymousTagLocations = (int)8L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_AnonymousTagLocations = 8\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_AnonymousTagLocations() {\n+        return CXPrintingPolicy_AnonymousTagLocations;\n@@ -4836,1 +8455,1 @@\n-\n+    private static final int CXPrintingPolicy_SuppressStrongLifetime = (int)9L;\n@@ -4838,2 +8457,2 @@\n-     * {@snippet :\n-     * CXType clang_getElementType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressStrongLifetime = 9\n@@ -4842,7 +8461,2 @@\n-    public static MemorySegment clang_getElementType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getElementType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_SuppressStrongLifetime() {\n+        return CXPrintingPolicy_SuppressStrongLifetime;\n@@ -4850,3 +8464,8 @@\n-\n-    public static MethodHandle clang_getValueType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getValueType$MH,\"clang_Type_getValueType\");\n+    private static final int CXPrintingPolicy_SuppressLifetimeQualifiers = (int)10L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressLifetimeQualifiers = 10\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n+        return CXPrintingPolicy_SuppressLifetimeQualifiers;\n@@ -4854,1 +8473,1 @@\n-\n+    private static final int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = (int)11L;\n@@ -4856,2 +8475,2 @@\n-     * {@snippet :\n-     * CXType clang_getValueType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11\n@@ -4860,7 +8479,2 @@\n-    public static MemorySegment clang_getValueType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getValueType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n+        return CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors;\n@@ -4868,2 +8482,8 @@\n-    public static MethodHandle clang_getNumElements$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getNumElements$MH,\"clang_getNumElements\");\n+    private static final int CXPrintingPolicy_Bool = (int)12L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Bool = 12\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_Bool() {\n+        return CXPrintingPolicy_Bool;\n@@ -4871,0 +8491,1 @@\n+    private static final int CXPrintingPolicy_Restrict = (int)13L;\n@@ -4872,2 +8493,2 @@\n-     * {@snippet :\n-     * long long clang_getNumElements(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Restrict = 13\n@@ -4876,7 +8497,2 @@\n-    public static long clang_getNumElements(MemorySegment T) {\n-        var mh$ = clang_getNumElements$MH();\n-        try {\n-            return (long)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_Restrict() {\n+        return CXPrintingPolicy_Restrict;\n@@ -4884,2 +8500,8 @@\n-    public static MethodHandle clang_getArrayElementType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n+    private static final int CXPrintingPolicy_Alignof = (int)14L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Alignof = 14\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_Alignof() {\n+        return CXPrintingPolicy_Alignof;\n@@ -4887,0 +8509,1 @@\n+    private static final int CXPrintingPolicy_UnderscoreAlignof = (int)15L;\n@@ -4888,2 +8511,2 @@\n-     * {@snippet :\n-     * CXType clang_getArrayElementType(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UnderscoreAlignof = 15\n@@ -4892,7 +8515,2 @@\n-    public static MemorySegment clang_getArrayElementType(SegmentAllocator allocator, MemorySegment T) {\n-        var mh$ = clang_getArrayElementType$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_UnderscoreAlignof() {\n+        return CXPrintingPolicy_UnderscoreAlignof;\n@@ -4900,2 +8518,8 @@\n-    public static MethodHandle clang_getArraySize$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getArraySize$MH,\"clang_getArraySize\");\n+    private static final int CXPrintingPolicy_UseVoidForZeroParams = (int)16L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UseVoidForZeroParams = 16\n+     * }\n+     *\/\n+    public static int CXPrintingPolicy_UseVoidForZeroParams() {\n+        return CXPrintingPolicy_UseVoidForZeroParams;\n@@ -4903,0 +8527,1 @@\n+    private static final int CXPrintingPolicy_TerseOutput = (int)17L;\n@@ -4904,2 +8529,2 @@\n-     * {@snippet :\n-     * long long clang_getArraySize(CXType T);\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_TerseOutput = 17\n@@ -4908,7 +8533,2 @@\n-    public static long clang_getArraySize(MemorySegment T) {\n-        var mh$ = clang_getArraySize$MH();\n-        try {\n-            return (long)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_TerseOutput() {\n+        return CXPrintingPolicy_TerseOutput;\n@@ -4916,0 +8536,1 @@\n+    private static final int CXPrintingPolicy_PolishForDeclaration = (int)18L;\n@@ -4917,2 +8538,2 @@\n-     * {@snippet :\n-     * enum CXTypeNullabilityKind.CXTypeNullability_NonNull = 0;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_PolishForDeclaration = 18\n@@ -4921,2 +8542,2 @@\n-    public static int CXTypeNullability_NonNull() {\n-        return (int)0L;\n+    public static int CXPrintingPolicy_PolishForDeclaration() {\n+        return CXPrintingPolicy_PolishForDeclaration;\n@@ -4924,0 +8545,1 @@\n+    private static final int CXPrintingPolicy_Half = (int)19L;\n@@ -4925,2 +8547,2 @@\n-     * {@snippet :\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Nullable = 1;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Half = 19\n@@ -4929,2 +8551,2 @@\n-    public static int CXTypeNullability_Nullable() {\n-        return (int)1L;\n+    public static int CXPrintingPolicy_Half() {\n+        return CXPrintingPolicy_Half;\n@@ -4932,0 +8554,1 @@\n+    private static final int CXPrintingPolicy_MSWChar = (int)20L;\n@@ -4933,2 +8556,2 @@\n-     * {@snippet :\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Unspecified = 2;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSWChar = 20\n@@ -4937,2 +8560,2 @@\n-    public static int CXTypeNullability_Unspecified() {\n-        return (int)2L;\n+    public static int CXPrintingPolicy_MSWChar() {\n+        return CXPrintingPolicy_MSWChar;\n@@ -4940,0 +8563,1 @@\n+    private static final int CXPrintingPolicy_IncludeNewlines = (int)21L;\n@@ -4941,2 +8565,2 @@\n-     * {@snippet :\n-     * enum CXTypeNullabilityKind.CXTypeNullability_Invalid = 3;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeNewlines = 21\n@@ -4945,2 +8569,2 @@\n-    public static int CXTypeNullability_Invalid() {\n-        return (int)3L;\n+    public static int CXPrintingPolicy_IncludeNewlines() {\n+        return CXPrintingPolicy_IncludeNewlines;\n@@ -4948,0 +8572,1 @@\n+    private static final int CXPrintingPolicy_MSVCFormatting = (int)22L;\n@@ -4949,2 +8574,2 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Invalid = -1;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSVCFormatting = 22\n@@ -4953,2 +8578,2 @@\n-    public static int CXTypeLayoutError_Invalid() {\n-        return (int)-1L;\n+    public static int CXPrintingPolicy_MSVCFormatting() {\n+        return CXPrintingPolicy_MSVCFormatting;\n@@ -4956,0 +8581,1 @@\n+    private static final int CXPrintingPolicy_ConstantsAsWritten = (int)23L;\n@@ -4957,2 +8583,2 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Incomplete = -2;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantsAsWritten = 23\n@@ -4961,2 +8587,2 @@\n-    public static int CXTypeLayoutError_Incomplete() {\n-        return (int)-2L;\n+    public static int CXPrintingPolicy_ConstantsAsWritten() {\n+        return CXPrintingPolicy_ConstantsAsWritten;\n@@ -4964,0 +8590,1 @@\n+    private static final int CXPrintingPolicy_SuppressImplicitBase = (int)24L;\n@@ -4965,2 +8592,2 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Dependent = -3;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressImplicitBase = 24\n@@ -4969,2 +8596,2 @@\n-    public static int CXTypeLayoutError_Dependent() {\n-        return (int)-3L;\n+    public static int CXPrintingPolicy_SuppressImplicitBase() {\n+        return CXPrintingPolicy_SuppressImplicitBase;\n@@ -4972,0 +8599,1 @@\n+    private static final int CXPrintingPolicy_FullyQualifiedName = (int)25L;\n@@ -4973,2 +8601,2 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_NotConstantSize = -4;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_FullyQualifiedName = 25\n@@ -4977,2 +8605,2 @@\n-    public static int CXTypeLayoutError_NotConstantSize() {\n-        return (int)-4L;\n+    public static int CXPrintingPolicy_FullyQualifiedName() {\n+        return CXPrintingPolicy_FullyQualifiedName;\n@@ -4980,0 +8608,1 @@\n+    private static final int CXPrintingPolicy_LastProperty = (int)25L;\n@@ -4981,2 +8610,2 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_InvalidFieldName = -5;\n+     * {@snippet lang=c :\n+     * enum CXPrintingPolicyProperty.CXPrintingPolicy_LastProperty = 25\n@@ -4985,2 +8614,2 @@\n-    public static int CXTypeLayoutError_InvalidFieldName() {\n-        return (int)-5L;\n+    public static int CXPrintingPolicy_LastProperty() {\n+        return CXPrintingPolicy_LastProperty;\n@@ -4988,0 +8617,13 @@\n+\n+    private static class clang_PrintingPolicy_getProperty$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_PrintingPolicy_getProperty\"),\n+                    DESC);\n+    }\n+\n@@ -4989,2 +8631,3 @@\n-     * {@snippet :\n-     * enum CXTypeLayoutError.CXTypeLayoutError_Undeduced = -6;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n@@ -4993,2 +8636,2 @@\n-    public static int CXTypeLayoutError_Undeduced() {\n-        return (int)-6L;\n+    public static FunctionDescriptor clang_PrintingPolicy_getProperty$descriptor() {\n+        return clang_PrintingPolicy_getProperty$constants.DESC;\n@@ -4996,2 +8639,9 @@\n-    public static MethodHandle clang_Type_getSizeOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Type_getSizeOf$MH,\"clang_Type_getSizeOf\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n+     * }\n+     *\/\n+    public static MethodHandle clang_PrintingPolicy_getProperty$handle() {\n+        return clang_PrintingPolicy_getProperty$constants.HANDLE;\n@@ -5000,2 +8650,2 @@\n-     * {@snippet :\n-     * long long clang_Type_getSizeOf(CXType T);\n+     * {@snippet lang=c :\n+     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)\n@@ -5004,2 +8654,2 @@\n-    public static long clang_Type_getSizeOf(MemorySegment T) {\n-        var mh$ = clang_Type_getSizeOf$MH();\n+    public static int clang_PrintingPolicy_getProperty(MemorySegment Policy, int Property) {\n+        var mh$ = clang_PrintingPolicy_getProperty$constants.HANDLE;\n@@ -5007,1 +8657,4 @@\n-            return (long)mh$.invokeExact(T);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_getProperty\", Policy, Property);\n+            }\n+            return (int)mh$.invokeExact(Policy, Property);\n@@ -5009,1 +8662,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5012,2 +8665,11 @@\n-    public static MethodHandle clang_Type_getAlignOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Type_getAlignOf$MH,\"clang_Type_getAlignOf\");\n+\n+    private static class clang_PrintingPolicy_setProperty$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            Index_h.C_INT,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_PrintingPolicy_setProperty\"),\n+                    DESC);\n@@ -5015,0 +8677,1 @@\n+\n@@ -5016,2 +8679,3 @@\n-     * {@snippet :\n-     * long long clang_Type_getAlignOf(CXType T);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n@@ -5020,7 +8684,2 @@\n-    public static long clang_Type_getAlignOf(MemorySegment T) {\n-        var mh$ = clang_Type_getAlignOf$MH();\n-        try {\n-            return (long)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_PrintingPolicy_setProperty$descriptor() {\n+        return clang_PrintingPolicy_setProperty$constants.DESC;\n@@ -5028,2 +8687,9 @@\n-    public static MethodHandle clang_Type_getOffsetOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Type_getOffsetOf$MH,\"clang_Type_getOffsetOf\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n+     * }\n+     *\/\n+    public static MethodHandle clang_PrintingPolicy_setProperty$handle() {\n+        return clang_PrintingPolicy_setProperty$constants.HANDLE;\n@@ -5032,2 +8698,2 @@\n-     * {@snippet :\n-     * long long clang_Type_getOffsetOf(CXType T, char* S);\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value)\n@@ -5036,2 +8702,2 @@\n-    public static long clang_Type_getOffsetOf(MemorySegment T, MemorySegment S) {\n-        var mh$ = clang_Type_getOffsetOf$MH();\n+    public static void clang_PrintingPolicy_setProperty(MemorySegment Policy, int Property, int Value) {\n+        var mh$ = clang_PrintingPolicy_setProperty$constants.HANDLE;\n@@ -5039,1 +8705,4 @@\n-            return (long)mh$.invokeExact(T, S);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_setProperty\", Policy, Property, Value);\n+            }\n+            mh$.invokeExact(Policy, Property, Value);\n@@ -5041,1 +8710,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5044,2 +8713,10 @@\n-    public static MethodHandle clang_Cursor_isAnonymous$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymous$MH,\"clang_Cursor_isAnonymous\");\n+\n+    private static class clang_getCursorPrintingPolicy$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorPrintingPolicy\"),\n+                    DESC);\n@@ -5047,0 +8724,1 @@\n+\n@@ -5048,2 +8726,3 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isAnonymous(CXCursor C);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n@@ -5052,7 +8731,2 @@\n-    public static int clang_Cursor_isAnonymous(MemorySegment C) {\n-        var mh$ = clang_Cursor_isAnonymous$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getCursorPrintingPolicy$descriptor() {\n+        return clang_getCursorPrintingPolicy$constants.DESC;\n@@ -5060,2 +8734,9 @@\n-    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorPrintingPolicy$handle() {\n+        return clang_getCursorPrintingPolicy$constants.HANDLE;\n@@ -5064,2 +8745,2 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isAnonymousRecordDecl(CXCursor C);\n+     * {@snippet lang=c :\n+     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor)\n@@ -5068,2 +8749,2 @@\n-    public static int clang_Cursor_isAnonymousRecordDecl(MemorySegment C) {\n-        var mh$ = clang_Cursor_isAnonymousRecordDecl$MH();\n+    public static MemorySegment clang_getCursorPrintingPolicy(MemorySegment x0) {\n+        var mh$ = clang_getCursorPrintingPolicy$constants.HANDLE;\n@@ -5071,1 +8752,4 @@\n-            return (int)mh$.invokeExact(C);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorPrintingPolicy\", x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(x0);\n@@ -5073,1 +8757,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5076,2 +8760,9 @@\n-    public static MethodHandle clang_Cursor_isBitField$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n+\n+    private static class clang_PrintingPolicy_dispose$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_PrintingPolicy_dispose\"),\n+                    DESC);\n@@ -5079,0 +8770,1 @@\n+\n@@ -5080,2 +8772,3 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isBitField(CXCursor C);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n@@ -5084,7 +8777,2 @@\n-    public static int clang_Cursor_isBitField(MemorySegment C) {\n-        var mh$ = clang_Cursor_isBitField$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_PrintingPolicy_dispose$descriptor() {\n+        return clang_PrintingPolicy_dispose$constants.DESC;\n@@ -5092,0 +8780,1 @@\n+\n@@ -5093,2 +8782,3 @@\n-     * {@snippet :\n-     * enum CXChildVisitResult.CXChildVisit_Break = 0;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n@@ -5097,2 +8787,2 @@\n-    public static int CXChildVisit_Break() {\n-        return (int)0L;\n+    public static MethodHandle clang_PrintingPolicy_dispose$handle() {\n+        return clang_PrintingPolicy_dispose$constants.HANDLE;\n@@ -5101,2 +8791,2 @@\n-     * {@snippet :\n-     * enum CXChildVisitResult.CXChildVisit_Continue = 1;\n+     * {@snippet lang=c :\n+     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy)\n@@ -5105,2 +8795,10 @@\n-    public static int CXChildVisit_Continue() {\n-        return (int)1L;\n+    public static void clang_PrintingPolicy_dispose(MemorySegment Policy) {\n+        var mh$ = clang_PrintingPolicy_dispose$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_PrintingPolicy_dispose\", Policy);\n+            }\n+            mh$.invokeExact(Policy);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5108,0 +8806,13 @@\n+\n+    private static class clang_getCursorPrettyPrinted$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout(),\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorPrettyPrinted\"),\n+                    DESC);\n+    }\n+\n@@ -5109,2 +8820,3 @@\n-     * {@snippet :\n-     * enum CXChildVisitResult.CXChildVisit_Recurse = 2;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n@@ -5113,2 +8825,2 @@\n-    public static int CXChildVisit_Recurse() {\n-        return (int)2L;\n+    public static FunctionDescriptor clang_getCursorPrettyPrinted$descriptor() {\n+        return clang_getCursorPrettyPrinted$constants.DESC;\n@@ -5116,2 +8828,9 @@\n-    public static MethodHandle clang_visitChildren$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_visitChildren$MH,\"clang_visitChildren\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorPrettyPrinted$handle() {\n+        return clang_getCursorPrettyPrinted$constants.HANDLE;\n@@ -5120,2 +8839,2 @@\n-     * {@snippet :\n-     * unsigned int clang_visitChildren(CXCursor parent, CXCursorVisitor visitor, CXClientData client_data);\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy)\n@@ -5124,2 +8843,2 @@\n-    public static int clang_visitChildren(MemorySegment parent, MemorySegment visitor, MemorySegment client_data) {\n-        var mh$ = clang_visitChildren$MH();\n+    public static MemorySegment clang_getCursorPrettyPrinted(SegmentAllocator allocator, MemorySegment Cursor, MemorySegment Policy) {\n+        var mh$ = clang_getCursorPrettyPrinted$constants.HANDLE;\n@@ -5127,1 +8846,4 @@\n-            return (int)mh$.invokeExact(parent, visitor, client_data);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorPrettyPrinted\", allocator, Cursor, Policy);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Cursor, Policy);\n@@ -5129,1 +8851,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5132,2 +8854,10 @@\n-    public static MethodHandle clang_getCursorUSR$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_getCursorUSR$MH,\"clang_getCursorUSR\");\n+\n+    private static class clang_getCursorDisplayName$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorDisplayName\"),\n+                    DESC);\n@@ -5135,0 +8865,1 @@\n+\n@@ -5136,2 +8867,3 @@\n-     * {@snippet :\n-     * CXString clang_getCursorUSR(CXCursor);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n@@ -5140,7 +8872,2 @@\n-    public static MemorySegment clang_getCursorUSR(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorUSR$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getCursorDisplayName$descriptor() {\n+        return clang_getCursorDisplayName$constants.DESC;\n@@ -5148,2 +8875,9 @@\n-    public static MethodHandle clang_getCursorSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorDisplayName$handle() {\n+        return clang_getCursorDisplayName$constants.HANDLE;\n@@ -5152,2 +8886,2 @@\n-     * {@snippet :\n-     * CXString clang_getCursorSpelling(CXCursor);\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorDisplayName(CXCursor)\n@@ -5156,2 +8890,2 @@\n-    public static MemorySegment clang_getCursorSpelling(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorSpelling$MH();\n+    public static MemorySegment clang_getCursorDisplayName(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorDisplayName$constants.HANDLE;\n@@ -5159,1 +8893,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorDisplayName\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n@@ -5161,1 +8898,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5164,7 +8901,10 @@\n-    \/**\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Indentation = 0;\n-     * }\n-     *\/\n-    public static int CXPrintingPolicy_Indentation() {\n-        return (int)0L;\n+\n+    private static class clang_getCursorReferenced$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorReferenced\"),\n+                    DESC);\n@@ -5172,0 +8912,1 @@\n+\n@@ -5173,2 +8914,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressSpecifiers = 1;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n@@ -5177,2 +8919,2 @@\n-    public static int CXPrintingPolicy_SuppressSpecifiers() {\n-        return (int)1L;\n+    public static FunctionDescriptor clang_getCursorReferenced$descriptor() {\n+        return clang_getCursorReferenced$constants.DESC;\n@@ -5180,0 +8922,1 @@\n+\n@@ -5181,2 +8924,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTagKeyword = 2;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n@@ -5185,2 +8929,2 @@\n-    public static int CXPrintingPolicy_SuppressTagKeyword() {\n-        return (int)2L;\n+    public static MethodHandle clang_getCursorReferenced$handle() {\n+        return clang_getCursorReferenced$constants.HANDLE;\n@@ -5189,2 +8933,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeTagDefinition = 3;\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorReferenced(CXCursor)\n@@ -5193,2 +8937,10 @@\n-    public static int CXPrintingPolicy_IncludeTagDefinition() {\n-        return (int)3L;\n+    public static MemorySegment clang_getCursorReferenced(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorReferenced$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorReferenced\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5196,0 +8948,12 @@\n+\n+    private static class clang_getCursorDefinition$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXCursor.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorDefinition\"),\n+                    DESC);\n+    }\n+\n@@ -5197,2 +8961,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressScope = 4;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n@@ -5201,2 +8966,2 @@\n-    public static int CXPrintingPolicy_SuppressScope() {\n-        return (int)4L;\n+    public static FunctionDescriptor clang_getCursorDefinition$descriptor() {\n+        return clang_getCursorDefinition$constants.DESC;\n@@ -5204,0 +8969,1 @@\n+\n@@ -5205,2 +8971,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressUnwrittenScope = 5;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n@@ -5209,2 +8976,2 @@\n-    public static int CXPrintingPolicy_SuppressUnwrittenScope() {\n-        return (int)5L;\n+    public static MethodHandle clang_getCursorDefinition$handle() {\n+        return clang_getCursorDefinition$constants.HANDLE;\n@@ -5213,2 +8980,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressInitializers = 6;\n+     * {@snippet lang=c :\n+     * CXCursor clang_getCursorDefinition(CXCursor)\n@@ -5217,2 +8984,21 @@\n-    public static int CXPrintingPolicy_SuppressInitializers() {\n-        return (int)6L;\n+    public static MemorySegment clang_getCursorDefinition(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_getCursorDefinition$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorDefinition\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_isCursorDefinition$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_isCursorDefinition\"),\n+                    DESC);\n@@ -5220,0 +9006,1 @@\n+\n@@ -5221,2 +9008,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantArraySizeAsWritten = 7;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n@@ -5225,2 +9013,2 @@\n-    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n-        return (int)7L;\n+    public static FunctionDescriptor clang_isCursorDefinition$descriptor() {\n+        return clang_isCursorDefinition$constants.DESC;\n@@ -5228,0 +9016,1 @@\n+\n@@ -5229,2 +9018,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_AnonymousTagLocations = 8;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n@@ -5233,2 +9023,2 @@\n-    public static int CXPrintingPolicy_AnonymousTagLocations() {\n-        return (int)8L;\n+    public static MethodHandle clang_isCursorDefinition$handle() {\n+        return clang_isCursorDefinition$constants.HANDLE;\n@@ -5237,2 +9027,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressStrongLifetime = 9;\n+     * {@snippet lang=c :\n+     * unsigned int clang_isCursorDefinition(CXCursor)\n@@ -5241,2 +9031,10 @@\n-    public static int CXPrintingPolicy_SuppressStrongLifetime() {\n-        return (int)9L;\n+    public static int clang_isCursorDefinition(MemorySegment x0) {\n+        var mh$ = clang_isCursorDefinition$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_isCursorDefinition\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5244,0 +9042,12 @@\n+\n+    private static class clang_Cursor_isVariadic$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_isVariadic\"),\n+                    DESC);\n+    }\n+\n@@ -5245,2 +9055,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressLifetimeQualifiers = 10;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n@@ -5249,2 +9060,2 @@\n-    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n-        return (int)10L;\n+    public static FunctionDescriptor clang_Cursor_isVariadic$descriptor() {\n+        return clang_Cursor_isVariadic$constants.DESC;\n@@ -5252,0 +9063,1 @@\n+\n@@ -5253,2 +9065,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = 11;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n@@ -5257,2 +9070,2 @@\n-    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n-        return (int)11L;\n+    public static MethodHandle clang_Cursor_isVariadic$handle() {\n+        return clang_Cursor_isVariadic$constants.HANDLE;\n@@ -5261,2 +9074,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Bool = 12;\n+     * {@snippet lang=c :\n+     * unsigned int clang_Cursor_isVariadic(CXCursor C)\n@@ -5265,2 +9078,21 @@\n-    public static int CXPrintingPolicy_Bool() {\n-        return (int)12L;\n+    public static int clang_Cursor_isVariadic(MemorySegment C) {\n+        var mh$ = clang_Cursor_isVariadic$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_isVariadic\", C);\n+            }\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_Cursor_getMangling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_getMangling\"),\n+                    DESC);\n@@ -5268,0 +9100,1 @@\n+\n@@ -5269,2 +9102,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Restrict = 13;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n@@ -5273,2 +9107,2 @@\n-    public static int CXPrintingPolicy_Restrict() {\n-        return (int)13L;\n+    public static FunctionDescriptor clang_Cursor_getMangling$descriptor() {\n+        return clang_Cursor_getMangling$constants.DESC;\n@@ -5276,0 +9110,1 @@\n+\n@@ -5277,2 +9112,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Alignof = 14;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n@@ -5281,2 +9117,2 @@\n-    public static int CXPrintingPolicy_Alignof() {\n-        return (int)14L;\n+    public static MethodHandle clang_Cursor_getMangling$handle() {\n+        return clang_Cursor_getMangling$constants.HANDLE;\n@@ -5285,2 +9121,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UnderscoreAlignof = 15;\n+     * {@snippet lang=c :\n+     * CXString clang_Cursor_getMangling(CXCursor)\n@@ -5289,2 +9125,10 @@\n-    public static int CXPrintingPolicy_UnderscoreAlignof() {\n-        return (int)15L;\n+    public static MemorySegment clang_Cursor_getMangling(SegmentAllocator allocator, MemorySegment x0) {\n+        var mh$ = clang_Cursor_getMangling$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_getMangling\", allocator, x0);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5292,0 +9136,1 @@\n+    private static final int CXToken_Punctuation = (int)0L;\n@@ -5293,2 +9138,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_UseVoidForZeroParams = 16;\n+     * {@snippet lang=c :\n+     * enum CXTokenKind.CXToken_Punctuation = 0\n@@ -5297,2 +9142,2 @@\n-    public static int CXPrintingPolicy_UseVoidForZeroParams() {\n-        return (int)16L;\n+    public static int CXToken_Punctuation() {\n+        return CXToken_Punctuation;\n@@ -5300,0 +9145,1 @@\n+    private static final int CXToken_Keyword = (int)1L;\n@@ -5301,2 +9147,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_TerseOutput = 17;\n+     * {@snippet lang=c :\n+     * enum CXTokenKind.CXToken_Keyword = 1\n@@ -5305,2 +9151,2 @@\n-    public static int CXPrintingPolicy_TerseOutput() {\n-        return (int)17L;\n+    public static int CXToken_Keyword() {\n+        return CXToken_Keyword;\n@@ -5308,0 +9154,1 @@\n+    private static final int CXToken_Identifier = (int)2L;\n@@ -5309,2 +9156,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_PolishForDeclaration = 18;\n+     * {@snippet lang=c :\n+     * enum CXTokenKind.CXToken_Identifier = 2\n@@ -5313,2 +9160,2 @@\n-    public static int CXPrintingPolicy_PolishForDeclaration() {\n-        return (int)18L;\n+    public static int CXToken_Identifier() {\n+        return CXToken_Identifier;\n@@ -5316,0 +9163,1 @@\n+    private static final int CXToken_Literal = (int)3L;\n@@ -5317,2 +9165,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_Half = 19;\n+     * {@snippet lang=c :\n+     * enum CXTokenKind.CXToken_Literal = 3\n@@ -5321,2 +9169,2 @@\n-    public static int CXPrintingPolicy_Half() {\n-        return (int)19L;\n+    public static int CXToken_Literal() {\n+        return CXToken_Literal;\n@@ -5324,0 +9172,1 @@\n+    private static final int CXToken_Comment = (int)4L;\n@@ -5325,2 +9174,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSWChar = 20;\n+     * {@snippet lang=c :\n+     * enum CXTokenKind.CXToken_Comment = 4\n@@ -5329,2 +9178,2 @@\n-    public static int CXPrintingPolicy_MSWChar() {\n-        return (int)20L;\n+    public static int CXToken_Comment() {\n+        return CXToken_Comment;\n@@ -5332,7 +9181,10 @@\n-    \/**\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_IncludeNewlines = 21;\n-     * }\n-     *\/\n-    public static int CXPrintingPolicy_IncludeNewlines() {\n-        return (int)21L;\n+\n+    private static class clang_getTokenKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            CXToken.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTokenKind\"),\n+                    DESC);\n@@ -5340,0 +9192,1 @@\n+\n@@ -5341,2 +9194,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_MSVCFormatting = 22;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n@@ -5345,2 +9199,2 @@\n-    public static int CXPrintingPolicy_MSVCFormatting() {\n-        return (int)22L;\n+    public static FunctionDescriptor clang_getTokenKind$descriptor() {\n+        return clang_getTokenKind$constants.DESC;\n@@ -5348,0 +9202,1 @@\n+\n@@ -5349,2 +9204,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_ConstantsAsWritten = 23;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n@@ -5353,2 +9209,2 @@\n-    public static int CXPrintingPolicy_ConstantsAsWritten() {\n-        return (int)23L;\n+    public static MethodHandle clang_getTokenKind$handle() {\n+        return clang_getTokenKind$constants.HANDLE;\n@@ -5357,2 +9213,2 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_SuppressImplicitBase = 24;\n+     * {@snippet lang=c :\n+     * CXTokenKind clang_getTokenKind(CXToken)\n@@ -5361,2 +9217,22 @@\n-    public static int CXPrintingPolicy_SuppressImplicitBase() {\n-        return (int)24L;\n+    public static int clang_getTokenKind(MemorySegment x0) {\n+        var mh$ = clang_getTokenKind$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenKind\", x0);\n+            }\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_getTokenSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTokenSpelling\"),\n+                    DESC);\n@@ -5364,0 +9240,1 @@\n+\n@@ -5365,2 +9242,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_FullyQualifiedName = 25;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n@@ -5369,2 +9247,2 @@\n-    public static int CXPrintingPolicy_FullyQualifiedName() {\n-        return (int)25L;\n+    public static FunctionDescriptor clang_getTokenSpelling$descriptor() {\n+        return clang_getTokenSpelling$constants.DESC;\n@@ -5372,0 +9250,1 @@\n+\n@@ -5373,2 +9252,3 @@\n-     * {@snippet :\n-     * enum CXPrintingPolicyProperty.CXPrintingPolicy_LastProperty = 25;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n@@ -5377,5 +9257,2 @@\n-    public static int CXPrintingPolicy_LastProperty() {\n-        return (int)25L;\n-    }\n-    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n+    public static MethodHandle clang_getTokenSpelling$handle() {\n+        return clang_getTokenSpelling$constants.HANDLE;\n@@ -5384,2 +9261,2 @@\n-     * {@snippet :\n-     * unsigned int clang_PrintingPolicy_getProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property);\n+     * {@snippet lang=c :\n+     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken)\n@@ -5388,2 +9265,2 @@\n-    public static int clang_PrintingPolicy_getProperty(MemorySegment Policy, int Property) {\n-        var mh$ = clang_PrintingPolicy_getProperty$MH();\n+    public static MemorySegment clang_getTokenSpelling(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1) {\n+        var mh$ = clang_getTokenSpelling$constants.HANDLE;\n@@ -5391,1 +9268,4 @@\n-            return (int)mh$.invokeExact(Policy, Property);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenSpelling\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -5393,1 +9273,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5396,2 +9276,11 @@\n-    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n+\n+    private static class clang_getTokenLocation$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceLocation.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTokenLocation\"),\n+                    DESC);\n@@ -5399,0 +9288,1 @@\n+\n@@ -5400,2 +9290,3 @@\n-     * {@snippet :\n-     * void clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n@@ -5404,7 +9295,2 @@\n-    public static void clang_PrintingPolicy_setProperty(MemorySegment Policy, int Property, int Value) {\n-        var mh$ = clang_PrintingPolicy_setProperty$MH();\n-        try {\n-            mh$.invokeExact(Policy, Property, Value);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getTokenLocation$descriptor() {\n+        return clang_getTokenLocation$constants.DESC;\n@@ -5412,2 +9298,9 @@\n-    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenLocation$handle() {\n+        return clang_getTokenLocation$constants.HANDLE;\n@@ -5416,2 +9309,2 @@\n-     * {@snippet :\n-     * CXPrintingPolicy clang_getCursorPrintingPolicy(CXCursor);\n+     * {@snippet lang=c :\n+     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken)\n@@ -5420,2 +9313,2 @@\n-    public static MemorySegment clang_getCursorPrintingPolicy(MemorySegment x0) {\n-        var mh$ = clang_getCursorPrintingPolicy$MH();\n+    public static MemorySegment clang_getTokenLocation(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1) {\n+        var mh$ = clang_getTokenLocation$constants.HANDLE;\n@@ -5423,1 +9316,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenLocation\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -5425,1 +9321,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5428,2 +9324,11 @@\n-    public static MethodHandle clang_PrintingPolicy_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_dispose$MH,\"clang_PrintingPolicy_dispose\");\n+\n+    private static class clang_getTokenExtent$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXSourceRange.layout(),\n+            Index_h.C_POINTER,\n+            CXToken.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getTokenExtent\"),\n+                    DESC);\n@@ -5431,0 +9336,1 @@\n+\n@@ -5432,2 +9338,3 @@\n-     * {@snippet :\n-     * void clang_PrintingPolicy_dispose(CXPrintingPolicy Policy);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n@@ -5436,7 +9343,2 @@\n-    public static void clang_PrintingPolicy_dispose(MemorySegment Policy) {\n-        var mh$ = clang_PrintingPolicy_dispose$MH();\n-        try {\n-            mh$.invokeExact(Policy);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getTokenExtent$descriptor() {\n+        return clang_getTokenExtent$constants.DESC;\n@@ -5444,2 +9346,9 @@\n-    public static MethodHandle clang_getCursorPrettyPrinted$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrettyPrinted$MH,\"clang_getCursorPrettyPrinted\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getTokenExtent$handle() {\n+        return clang_getTokenExtent$constants.HANDLE;\n@@ -5448,2 +9357,2 @@\n-     * {@snippet :\n-     * CXString clang_getCursorPrettyPrinted(CXCursor Cursor, CXPrintingPolicy Policy);\n+     * {@snippet lang=c :\n+     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken)\n@@ -5452,2 +9361,2 @@\n-    public static MemorySegment clang_getCursorPrettyPrinted(SegmentAllocator allocator, MemorySegment Cursor, MemorySegment Policy) {\n-        var mh$ = clang_getCursorPrettyPrinted$MH();\n+    public static MemorySegment clang_getTokenExtent(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1) {\n+        var mh$ = clang_getTokenExtent$constants.HANDLE;\n@@ -5455,1 +9364,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getTokenExtent\", allocator, x0, x1);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, x0, x1);\n@@ -5457,1 +9369,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5460,2 +9372,12 @@\n-    public static MethodHandle clang_getCursorDisplayName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n+\n+    private static class clang_tokenize$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            CXSourceRange.layout(),\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_tokenize\"),\n+                    DESC);\n@@ -5463,0 +9385,1 @@\n+\n@@ -5464,2 +9387,3 @@\n-     * {@snippet :\n-     * CXString clang_getCursorDisplayName(CXCursor);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n@@ -5468,7 +9392,2 @@\n-    public static MemorySegment clang_getCursorDisplayName(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorDisplayName$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_tokenize$descriptor() {\n+        return clang_tokenize$constants.DESC;\n@@ -5476,2 +9395,9 @@\n-    public static MethodHandle clang_getCursorReferenced$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n+     * }\n+     *\/\n+    public static MethodHandle clang_tokenize$handle() {\n+        return clang_tokenize$constants.HANDLE;\n@@ -5480,2 +9406,2 @@\n-     * {@snippet :\n-     * CXCursor clang_getCursorReferenced(CXCursor);\n+     * {@snippet lang=c :\n+     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned int *NumTokens)\n@@ -5484,2 +9410,2 @@\n-    public static MemorySegment clang_getCursorReferenced(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorReferenced$MH();\n+    public static void clang_tokenize(MemorySegment TU, MemorySegment Range, MemorySegment Tokens, MemorySegment NumTokens) {\n+        var mh$ = clang_tokenize$constants.HANDLE;\n@@ -5487,1 +9413,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_tokenize\", TU, Range, Tokens, NumTokens);\n+            }\n+            mh$.invokeExact(TU, Range, Tokens, NumTokens);\n@@ -5489,1 +9418,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5492,2 +9421,11 @@\n-    public static MethodHandle clang_getCursorDefinition$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_getCursorDefinition$MH,\"clang_getCursorDefinition\");\n+\n+    private static class clang_disposeTokens$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER,\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_disposeTokens\"),\n+                    DESC);\n@@ -5495,0 +9433,1 @@\n+\n@@ -5496,2 +9435,3 @@\n-     * {@snippet :\n-     * CXCursor clang_getCursorDefinition(CXCursor);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n@@ -5500,7 +9440,2 @@\n-    public static MemorySegment clang_getCursorDefinition(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_getCursorDefinition$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_disposeTokens$descriptor() {\n+        return clang_disposeTokens$constants.DESC;\n@@ -5508,2 +9443,9 @@\n-    public static MethodHandle clang_isCursorDefinition$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isCursorDefinition$MH,\"clang_isCursorDefinition\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n+     * }\n+     *\/\n+    public static MethodHandle clang_disposeTokens$handle() {\n+        return clang_disposeTokens$constants.HANDLE;\n@@ -5512,2 +9454,2 @@\n-     * {@snippet :\n-     * unsigned int clang_isCursorDefinition(CXCursor);\n+     * {@snippet lang=c :\n+     * void clang_disposeTokens(CXTranslationUnit TU, CXToken *Tokens, unsigned int NumTokens)\n@@ -5516,2 +9458,2 @@\n-    public static int clang_isCursorDefinition(MemorySegment x0) {\n-        var mh$ = clang_isCursorDefinition$MH();\n+    public static void clang_disposeTokens(MemorySegment TU, MemorySegment Tokens, int NumTokens) {\n+        var mh$ = clang_disposeTokens$constants.HANDLE;\n@@ -5519,1 +9461,4 @@\n-            return (int)mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_disposeTokens\", TU, Tokens, NumTokens);\n+            }\n+            mh$.invokeExact(TU, Tokens, NumTokens);\n@@ -5521,1 +9466,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5524,2 +9469,10 @@\n-    public static MethodHandle clang_Cursor_isVariadic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n+\n+    private static class clang_getCursorKindSpelling$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout(),\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getCursorKindSpelling\"),\n+                    DESC);\n@@ -5527,0 +9480,1 @@\n+\n@@ -5528,2 +9482,3 @@\n-     * {@snippet :\n-     * unsigned int clang_Cursor_isVariadic(CXCursor C);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n@@ -5532,7 +9487,2 @@\n-    public static int clang_Cursor_isVariadic(MemorySegment C) {\n-        var mh$ = clang_Cursor_isVariadic$MH();\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_getCursorKindSpelling$descriptor() {\n+        return clang_getCursorKindSpelling$constants.DESC;\n@@ -5540,2 +9490,9 @@\n-    public static MethodHandle clang_Cursor_getMangling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n+     * }\n+     *\/\n+    public static MethodHandle clang_getCursorKindSpelling$handle() {\n+        return clang_getCursorKindSpelling$constants.HANDLE;\n@@ -5544,2 +9501,2 @@\n-     * {@snippet :\n-     * CXString clang_Cursor_getMangling(CXCursor);\n+     * {@snippet lang=c :\n+     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind)\n@@ -5548,2 +9505,2 @@\n-    public static MemorySegment clang_Cursor_getMangling(SegmentAllocator allocator, MemorySegment x1) {\n-        var mh$ = clang_Cursor_getMangling$MH();\n+    public static MemorySegment clang_getCursorKindSpelling(SegmentAllocator allocator, int Kind) {\n+        var mh$ = clang_getCursorKindSpelling$constants.HANDLE;\n@@ -5551,1 +9508,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getCursorKindSpelling\", allocator, Kind);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator, Kind);\n@@ -5553,1 +9513,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5556,0 +9516,10 @@\n+\n+    private static class clang_getClangVersion$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            CXString.layout()    );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_getClangVersion\"),\n+                    DESC);\n+    }\n+\n@@ -5557,2 +9527,3 @@\n-     * {@snippet :\n-     * enum CXTokenKind.CXToken_Punctuation = 0;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n@@ -5561,2 +9532,2 @@\n-    public static int CXToken_Punctuation() {\n-        return (int)0L;\n+    public static FunctionDescriptor clang_getClangVersion$descriptor() {\n+        return clang_getClangVersion$constants.DESC;\n@@ -5564,0 +9535,1 @@\n+\n@@ -5565,2 +9537,3 @@\n-     * {@snippet :\n-     * enum CXTokenKind.CXToken_Keyword = 1;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n@@ -5569,2 +9542,2 @@\n-    public static int CXToken_Keyword() {\n-        return (int)1L;\n+    public static MethodHandle clang_getClangVersion$handle() {\n+        return clang_getClangVersion$constants.HANDLE;\n@@ -5573,2 +9546,2 @@\n-     * {@snippet :\n-     * enum CXTokenKind.CXToken_Identifier = 2;\n+     * {@snippet lang=c :\n+     * CXString clang_getClangVersion()\n@@ -5577,2 +9550,20 @@\n-    public static int CXToken_Identifier() {\n-        return (int)2L;\n+    public static MemorySegment clang_getClangVersion(SegmentAllocator allocator) {\n+        var mh$ = clang_getClangVersion$constants.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_getClangVersion\", allocator);\n+            }\n+            return (MemorySegment)mh$.invokeExact(allocator);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static class clang_toggleCrashRecovery$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_INT\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_toggleCrashRecovery\"),\n+                    DESC);\n@@ -5580,0 +9571,1 @@\n+\n@@ -5581,2 +9573,3 @@\n-     * {@snippet :\n-     * enum CXTokenKind.CXToken_Literal = 3;\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n@@ -5585,2 +9578,2 @@\n-    public static int CXToken_Literal() {\n-        return (int)3L;\n+    public static FunctionDescriptor clang_toggleCrashRecovery$descriptor() {\n+        return clang_toggleCrashRecovery$constants.DESC;\n@@ -5588,0 +9581,1 @@\n+\n@@ -5589,2 +9583,3 @@\n-     * {@snippet :\n-     * enum CXTokenKind.CXToken_Comment = 4;\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n@@ -5593,5 +9588,2 @@\n-    public static int CXToken_Comment() {\n-        return (int)4L;\n-    }\n-    public static MethodHandle clang_getTokenKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenKind$MH,\"clang_getTokenKind\");\n+    public static MethodHandle clang_toggleCrashRecovery$handle() {\n+        return clang_toggleCrashRecovery$constants.HANDLE;\n@@ -5600,2 +9592,2 @@\n-     * {@snippet :\n-     * CXTokenKind clang_getTokenKind(CXToken);\n+     * {@snippet lang=c :\n+     * void clang_toggleCrashRecovery(unsigned int isEnabled)\n@@ -5604,2 +9596,2 @@\n-    public static int clang_getTokenKind(MemorySegment x0) {\n-        var mh$ = clang_getTokenKind$MH();\n+    public static void clang_toggleCrashRecovery(int isEnabled) {\n+        var mh$ = clang_toggleCrashRecovery$constants.HANDLE;\n@@ -5607,1 +9599,4 @@\n-            return (int)mh$.invokeExact(x0);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_toggleCrashRecovery\", isEnabled);\n+            }\n+            mh$.invokeExact(isEnabled);\n@@ -5609,1 +9604,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5612,2 +9607,10 @@\n-    public static MethodHandle clang_getTokenSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n+\n+    private static class clang_Cursor_Evaluate$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            CXCursor.layout()\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_Cursor_Evaluate\"),\n+                    DESC);\n@@ -5615,0 +9618,1 @@\n+\n@@ -5616,2 +9620,3 @@\n-     * {@snippet :\n-     * CXString clang_getTokenSpelling(CXTranslationUnit, CXToken);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n@@ -5620,7 +9625,2 @@\n-    public static MemorySegment clang_getTokenSpelling(SegmentAllocator allocator, MemorySegment x1, MemorySegment x2) {\n-        var mh$ = clang_getTokenSpelling$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_Cursor_Evaluate$descriptor() {\n+        return clang_Cursor_Evaluate$constants.DESC;\n@@ -5628,2 +9628,9 @@\n-    public static MethodHandle clang_getTokenLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n+     * }\n+     *\/\n+    public static MethodHandle clang_Cursor_Evaluate$handle() {\n+        return clang_Cursor_Evaluate$constants.HANDLE;\n@@ -5632,2 +9639,2 @@\n-     * {@snippet :\n-     * CXSourceLocation clang_getTokenLocation(CXTranslationUnit, CXToken);\n+     * {@snippet lang=c :\n+     * CXEvalResult clang_Cursor_Evaluate(CXCursor C)\n@@ -5636,2 +9643,2 @@\n-    public static MemorySegment clang_getTokenLocation(SegmentAllocator allocator, MemorySegment x1, MemorySegment x2) {\n-        var mh$ = clang_getTokenLocation$MH();\n+    public static MemorySegment clang_Cursor_Evaluate(MemorySegment C) {\n+        var mh$ = clang_Cursor_Evaluate$constants.HANDLE;\n@@ -5639,1 +9646,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_Cursor_Evaluate\", C);\n+            }\n+            return (MemorySegment)mh$.invokeExact(C);\n@@ -5641,1 +9651,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5644,2 +9654,10 @@\n-    public static MethodHandle clang_getTokenExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenExtent$MH,\"clang_getTokenExtent\");\n+\n+    private static class clang_EvalResult_getKind$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getKind\"),\n+                    DESC);\n@@ -5647,0 +9665,1 @@\n+\n@@ -5648,2 +9667,3 @@\n-     * {@snippet :\n-     * CXSourceRange clang_getTokenExtent(CXTranslationUnit, CXToken);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n@@ -5652,7 +9672,2 @@\n-    public static MemorySegment clang_getTokenExtent(SegmentAllocator allocator, MemorySegment x1, MemorySegment x2) {\n-        var mh$ = clang_getTokenExtent$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_EvalResult_getKind$descriptor() {\n+        return clang_EvalResult_getKind$constants.DESC;\n@@ -5660,2 +9675,9 @@\n-    public static MethodHandle clang_tokenize$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_tokenize$MH,\"clang_tokenize\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getKind$handle() {\n+        return clang_EvalResult_getKind$constants.HANDLE;\n@@ -5664,2 +9686,2 @@\n-     * {@snippet :\n-     * void clang_tokenize(CXTranslationUnit TU, CXSourceRange Range, CXToken** Tokens, unsigned int* NumTokens);\n+     * {@snippet lang=c :\n+     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E)\n@@ -5668,2 +9690,2 @@\n-    public static void clang_tokenize(MemorySegment TU, MemorySegment Range, MemorySegment Tokens, MemorySegment NumTokens) {\n-        var mh$ = clang_tokenize$MH();\n+    public static int clang_EvalResult_getKind(MemorySegment E) {\n+        var mh$ = clang_EvalResult_getKind$constants.HANDLE;\n@@ -5671,1 +9693,4 @@\n-            mh$.invokeExact(TU, Range, Tokens, NumTokens);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getKind\", E);\n+            }\n+            return (int)mh$.invokeExact(E);\n@@ -5673,1 +9698,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5676,2 +9701,10 @@\n-    public static MethodHandle clang_disposeTokens$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_disposeTokens$MH,\"clang_disposeTokens\");\n+\n+    private static class clang_EvalResult_getAsInt$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getAsInt\"),\n+                    DESC);\n@@ -5679,0 +9712,1 @@\n+\n@@ -5680,2 +9714,3 @@\n-     * {@snippet :\n-     * void clang_disposeTokens(CXTranslationUnit TU, CXToken* Tokens, unsigned int NumTokens);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n@@ -5684,7 +9719,2 @@\n-    public static void clang_disposeTokens(MemorySegment TU, MemorySegment Tokens, int NumTokens) {\n-        var mh$ = clang_disposeTokens$MH();\n-        try {\n-            mh$.invokeExact(TU, Tokens, NumTokens);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_EvalResult_getAsInt$descriptor() {\n+        return clang_EvalResult_getAsInt$constants.DESC;\n@@ -5692,2 +9722,9 @@\n-    public static MethodHandle clang_getCursorKindSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsInt$handle() {\n+        return clang_EvalResult_getAsInt$constants.HANDLE;\n@@ -5696,2 +9733,2 @@\n-     * {@snippet :\n-     * CXString clang_getCursorKindSpelling(enum CXCursorKind Kind);\n+     * {@snippet lang=c :\n+     * int clang_EvalResult_getAsInt(CXEvalResult E)\n@@ -5700,2 +9737,2 @@\n-    public static MemorySegment clang_getCursorKindSpelling(SegmentAllocator allocator, int Kind) {\n-        var mh$ = clang_getCursorKindSpelling$MH();\n+    public static int clang_EvalResult_getAsInt(MemorySegment E) {\n+        var mh$ = clang_EvalResult_getAsInt$constants.HANDLE;\n@@ -5703,1 +9740,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsInt\", E);\n+            }\n+            return (int)mh$.invokeExact(E);\n@@ -5705,1 +9745,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5708,2 +9748,10 @@\n-    public static MethodHandle clang_getClangVersion$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_getClangVersion$MH,\"clang_getClangVersion\");\n+\n+    private static class clang_EvalResult_getAsLongLong$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getAsLongLong\"),\n+                    DESC);\n@@ -5711,0 +9759,1 @@\n+\n@@ -5712,2 +9761,3 @@\n-     * {@snippet :\n-     * CXString clang_getClangVersion();\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n@@ -5716,7 +9766,2 @@\n-    public static MemorySegment clang_getClangVersion(SegmentAllocator allocator) {\n-        var mh$ = clang_getClangVersion$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_EvalResult_getAsLongLong$descriptor() {\n+        return clang_EvalResult_getAsLongLong$constants.DESC;\n@@ -5724,2 +9769,9 @@\n-    public static MethodHandle clang_toggleCrashRecovery$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsLongLong$handle() {\n+        return clang_EvalResult_getAsLongLong$constants.HANDLE;\n@@ -5728,2 +9780,2 @@\n-     * {@snippet :\n-     * void clang_toggleCrashRecovery(unsigned int isEnabled);\n+     * {@snippet lang=c :\n+     * long long clang_EvalResult_getAsLongLong(CXEvalResult E)\n@@ -5732,2 +9784,2 @@\n-    public static void clang_toggleCrashRecovery(int isEnabled) {\n-        var mh$ = clang_toggleCrashRecovery$MH();\n+    public static long clang_EvalResult_getAsLongLong(MemorySegment E) {\n+        var mh$ = clang_EvalResult_getAsLongLong$constants.HANDLE;\n@@ -5735,1 +9787,4 @@\n-            mh$.invokeExact(isEnabled);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsLongLong\", E);\n+            }\n+            return (long)mh$.invokeExact(E);\n@@ -5737,1 +9792,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5740,2 +9795,10 @@\n-    public static MethodHandle clang_Cursor_Evaluate$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n+\n+    private static class clang_EvalResult_isUnsignedInt$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_INT,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_isUnsignedInt\"),\n+                    DESC);\n@@ -5743,0 +9806,1 @@\n+\n@@ -5744,2 +9808,3 @@\n-     * {@snippet :\n-     * CXEvalResult clang_Cursor_Evaluate(CXCursor C);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n@@ -5748,7 +9813,2 @@\n-    public static MemorySegment clang_Cursor_Evaluate(MemorySegment C) {\n-        var mh$ = clang_Cursor_Evaluate$MH();\n-        try {\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_EvalResult_isUnsignedInt$descriptor() {\n+        return clang_EvalResult_isUnsignedInt$constants.DESC;\n@@ -5756,2 +9816,9 @@\n-    public static MethodHandle clang_EvalResult_getKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_isUnsignedInt$handle() {\n+        return clang_EvalResult_isUnsignedInt$constants.HANDLE;\n@@ -5760,2 +9827,2 @@\n-     * {@snippet :\n-     * CXEvalResultKind clang_EvalResult_getKind(CXEvalResult E);\n+     * {@snippet lang=c :\n+     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E)\n@@ -5764,2 +9831,2 @@\n-    public static int clang_EvalResult_getKind(MemorySegment E) {\n-        var mh$ = clang_EvalResult_getKind$MH();\n+    public static int clang_EvalResult_isUnsignedInt(MemorySegment E) {\n+        var mh$ = clang_EvalResult_isUnsignedInt$constants.HANDLE;\n@@ -5767,0 +9834,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_isUnsignedInt\", E);\n+            }\n@@ -5769,1 +9839,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5772,2 +9842,10 @@\n-    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n+\n+    private static class clang_EvalResult_getAsUnsigned$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_LONG_LONG,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getAsUnsigned\"),\n+                    DESC);\n@@ -5775,0 +9853,1 @@\n+\n@@ -5776,2 +9855,3 @@\n-     * {@snippet :\n-     * int clang_EvalResult_getAsInt(CXEvalResult E);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n@@ -5780,7 +9860,2 @@\n-    public static int clang_EvalResult_getAsInt(MemorySegment E) {\n-        var mh$ = clang_EvalResult_getAsInt$MH();\n-        try {\n-            return (int)mh$.invokeExact(E);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static FunctionDescriptor clang_EvalResult_getAsUnsigned$descriptor() {\n+        return clang_EvalResult_getAsUnsigned$constants.DESC;\n@@ -5788,2 +9863,9 @@\n-    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsUnsigned$handle() {\n+        return clang_EvalResult_getAsUnsigned$constants.HANDLE;\n@@ -5792,2 +9874,2 @@\n-     * {@snippet :\n-     * long long clang_EvalResult_getAsLongLong(CXEvalResult E);\n+     * {@snippet lang=c :\n+     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E)\n@@ -5796,2 +9878,2 @@\n-    public static long clang_EvalResult_getAsLongLong(MemorySegment E) {\n-        var mh$ = clang_EvalResult_getAsLongLong$MH();\n+    public static long clang_EvalResult_getAsUnsigned(MemorySegment E) {\n+        var mh$ = clang_EvalResult_getAsUnsigned$constants.HANDLE;\n@@ -5799,0 +9881,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsUnsigned\", E);\n+            }\n@@ -5801,1 +9886,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5804,2 +9889,10 @@\n-    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n+\n+    private static class clang_EvalResult_getAsDouble$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_DOUBLE,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getAsDouble\"),\n+                    DESC);\n@@ -5807,0 +9900,1 @@\n+\n@@ -5808,2 +9902,3 @@\n-     * {@snippet :\n-     * unsigned int clang_EvalResult_isUnsignedInt(CXEvalResult E);\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n@@ -5812,10 +9907,2 @@\n-    public static int clang_EvalResult_isUnsignedInt(MemorySegment E) {\n-        var mh$ = clang_EvalResult_isUnsignedInt$MH();\n-        try {\n-            return (int)mh$.invokeExact(E);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n+    public static FunctionDescriptor clang_EvalResult_getAsDouble$descriptor() {\n+        return clang_EvalResult_getAsDouble$constants.DESC;\n@@ -5823,0 +9910,1 @@\n+\n@@ -5824,2 +9912,3 @@\n-     * {@snippet :\n-     * unsigned long long clang_EvalResult_getAsUnsigned(CXEvalResult E);\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n@@ -5828,10 +9917,2 @@\n-    public static long clang_EvalResult_getAsUnsigned(MemorySegment E) {\n-        var mh$ = clang_EvalResult_getAsUnsigned$MH();\n-        try {\n-            return (long)mh$.invokeExact(E);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n+    public static MethodHandle clang_EvalResult_getAsDouble$handle() {\n+        return clang_EvalResult_getAsDouble$constants.HANDLE;\n@@ -5840,2 +9921,2 @@\n-     * {@snippet :\n-     * double clang_EvalResult_getAsDouble(CXEvalResult E);\n+     * {@snippet lang=c :\n+     * double clang_EvalResult_getAsDouble(CXEvalResult E)\n@@ -5845,1 +9926,1 @@\n-        var mh$ = clang_EvalResult_getAsDouble$MH();\n+        var mh$ = clang_EvalResult_getAsDouble$constants.HANDLE;\n@@ -5847,0 +9928,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsDouble\", E);\n+            }\n@@ -5849,1 +9933,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5852,2 +9936,30 @@\n-    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n+\n+    private static class clang_EvalResult_getAsStr$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            Index_h.C_POINTER,\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_getAsStr\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_getAsStr$descriptor() {\n+        return clang_EvalResult_getAsStr$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_getAsStr$handle() {\n+        return clang_EvalResult_getAsStr$constants.HANDLE;\n@@ -5856,2 +9968,2 @@\n-     * {@snippet :\n-     * char* clang_EvalResult_getAsStr(CXEvalResult E);\n+     * {@snippet lang=c :\n+     * const char *clang_EvalResult_getAsStr(CXEvalResult E)\n@@ -5861,1 +9973,1 @@\n-        var mh$ = clang_EvalResult_getAsStr$MH();\n+        var mh$ = clang_EvalResult_getAsStr$constants.HANDLE;\n@@ -5863,1 +9975,4 @@\n-            return (java.lang.foreign.MemorySegment)mh$.invokeExact(E);\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_getAsStr\", E);\n+            }\n+            return (MemorySegment)mh$.invokeExact(E);\n@@ -5865,1 +9980,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5868,2 +9983,29 @@\n-    public static MethodHandle clang_EvalResult_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n+\n+    private static class clang_EvalResult_dispose$constants {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(\n+            Index_h.C_POINTER\n+        );\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n+                    Index_h.findOrThrow(\"clang_EvalResult_dispose\"),\n+                    DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static FunctionDescriptor clang_EvalResult_dispose$descriptor() {\n+        return clang_EvalResult_dispose$constants.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n+     * }\n+     *\/\n+    public static MethodHandle clang_EvalResult_dispose$handle() {\n+        return clang_EvalResult_dispose$constants.HANDLE;\n@@ -5872,2 +10014,2 @@\n-     * {@snippet :\n-     * void clang_EvalResult_dispose(CXEvalResult E);\n+     * {@snippet lang=c :\n+     * void clang_EvalResult_dispose(CXEvalResult E)\n@@ -5877,1 +10019,1 @@\n-        var mh$ = clang_EvalResult_dispose$MH();\n+        var mh$ = clang_EvalResult_dispose$constants.HANDLE;\n@@ -5879,0 +10021,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"clang_EvalResult_dispose\", E);\n+            }\n@@ -5881,1 +10026,1 @@\n-            throw new AssertionError(\"should not reach here\", ex$);\n+           throw new AssertionError(\"should not reach here\", ex$);\n@@ -5884,0 +10029,1 @@\n+    private static final int CXResult_Success = (int)0L;\n@@ -5885,2 +10031,2 @@\n-     * {@snippet :\n-     * enum .CXResult_Success = 0;\n+     * {@snippet lang=c :\n+     * enum <anonymous>.CXResult_Success = 0\n@@ -5890,1 +10036,1 @@\n-        return (int)0L;\n+        return CXResult_Success;\n@@ -5892,0 +10038,1 @@\n+    private static final int CXResult_Invalid = (int)1L;\n@@ -5893,2 +10040,2 @@\n-     * {@snippet :\n-     * enum .CXResult_Invalid = 1;\n+     * {@snippet lang=c :\n+     * enum <anonymous>.CXResult_Invalid = 1\n@@ -5898,1 +10045,1 @@\n-        return (int)1L;\n+        return CXResult_Invalid;\n@@ -5900,0 +10047,1 @@\n+    private static final int CXResult_VisitBreak = (int)2L;\n@@ -5901,2 +10049,2 @@\n-     * {@snippet :\n-     * enum .CXResult_VisitBreak = 2;\n+     * {@snippet lang=c :\n+     * enum <anonymous>.CXResult_VisitBreak = 2\n@@ -5906,1 +10054,1 @@\n-        return (int)2L;\n+        return CXResult_VisitBreak;\n@@ -5910,1 +10058,0 @@\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":7356,"deletions":3209,"binary":false,"changes":10565,"status":"modified"}]}