{"files":[{"patch":"@@ -3,1 +3,1 @@\n-`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/454). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n+`jextract` is a tool which mechanically generates Java bindings from native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/454). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n","filename":"README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,0 +88,21 @@\n+Generally speaking, the bindings generated by jextract depend on the platform on which\n+jextract is running. For example, when a C header file is processed by the C pre-processor,\n+it is possible for code in the header file to detect the current platform using\n+pre-processor directives, and expand to a different result based on that platform (see\n+also the section on [pre-processor definitions](#preprocessor-definitions)). Additionally,\n+different built in C types can have different formats depending on the platform (for\n+example, the `long` type has different formats on Linux and Windows). Both of these are\n+examples of things that can lead jextract to generate different outputs depending on the\n+platform on which it is run. Care should be taken when generating bindings with jextract\n+on one platform, and using those bindings on another platform, as the header files may\n+contain platform-dependent code that can cause the generated code to misbehave when used\n+on another platform.\n+\n+However, it is also possible for a C library to be written in such a way that it is not\n+platform dependent: a so-called _portable_ library. Sharing the bindings generated for a\n+portable library across different platforms should work without issues. It is typically\n+advisable to generate different sets of bindings, one on each platform on which the\n+bindings are intended to be used, and then comparing the generated code to make sure that\n+there are no differences between platforms, before sharing a single set of bindings\n+between different platforms.\n+\n","filename":"doc\/GUIDE.md","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}