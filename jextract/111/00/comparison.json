{"files":[{"patch":"@@ -48,1 +48,1 @@\n-            var handle = handleAddr.reinterpret(arena.scope(), org.unix.dlfcn_h::dlclose);\n+            var handle = handleAddr.reinterpret(arena, org.unix.dlfcn_h::dlclose);\n","filename":"samples\/dlopen\/Dlopen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        this.ptr = ptr.reinterpret(size, arena.scope(), cleanup).asReadOnly();\n+        this.ptr = ptr.reinterpret(size, arena, cleanup).asReadOnly();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/ClangDisposable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n+        MemorySegment symbol = addr.reinterpret(arena, null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    static final OfAddress C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64)\n+    static final AddressLayout C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64)\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Constants$root.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;\n+    public static final AddressLayout C_POINTER = Constants$root.C_POINTER$LAYOUT;\n@@ -122,1 +122,1 @@\n-    public static final OfAddress CXIndex = Constants$root.C_POINTER$LAYOUT;\n+    public static final AddressLayout CXIndex = Constants$root.C_POINTER$LAYOUT;\n@@ -128,1 +128,1 @@\n-    public static final OfAddress CXTranslationUnit = Constants$root.C_POINTER$LAYOUT;\n+    public static final AddressLayout CXTranslationUnit = Constants$root.C_POINTER$LAYOUT;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n+         return addr.reinterpret(numElements * layout.byteSize(), arena, null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-            append(\"arena.scope(), null);\\n\");\n+            append(\"arena, null);\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-        append(\" OfAddress \");\n+        append(\" AddressLayout \");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,0 +293,22 @@\n+            final ValueLayout newLayout;\n+            if (layout.carrier() == boolean.class) {\n+                newLayout = ValueLayout.JAVA_BOOLEAN;\n+            } else if (layout.carrier() == byte.class) {\n+                newLayout = ValueLayout.JAVA_BYTE;\n+            } else if (layout.carrier() == char.class) {\n+                newLayout = ValueLayout.JAVA_CHAR;\n+            } else if (layout.carrier() == short.class) {\n+                newLayout = ValueLayout.JAVA_SHORT;\n+            } else if (layout.carrier() == int.class) {\n+                newLayout = ValueLayout.JAVA_INT;\n+            } else if (layout.carrier() == float.class) {\n+                newLayout = ValueLayout.JAVA_FLOAT;\n+            } else if (layout.carrier() == long.class) {\n+                newLayout = ValueLayout.JAVA_LONG;\n+            } else if (layout.carrier() == double.class) {\n+                newLayout = ValueLayout.JAVA_DOUBLE;\n+            } else if (layout.carrier() == MemorySegment.class) {\n+                newLayout = ValueLayout.ADDRESS;\n+            } else {\n+                throw new AssertionError(\"Cannot get here\");\n+            }\n@@ -294,2 +316,1 @@\n-            return MemoryLayout.valueLayout(layout.carrier(), layout.order())\n-                    .withBitAlignment(layout.bitAlignment());\n+            return newLayout.withOrder(layout.order()).withBitAlignment(layout.bitAlignment());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -182,1 +183,1 @@\n-        public static final ValueLayout.OfAddress POINTER_LAYOUT = ADDRESS.withBitAlignment(64)\n+        public static final AddressLayout POINTER_LAYOUT = ADDRESS.withBitAlignment(64)\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n+         return addr.reinterpret(numElements * layout.byteSize(), arena, null);\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -64,1 +65,1 @@\n-    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS\n+    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}