{"files":[{"patch":"@@ -35,1 +35,1 @@\n-import org.openjdk.jextract.impl.MissingDepWarner;\n+import org.openjdk.jextract.impl.MissingDepChecker;\n@@ -130,1 +130,1 @@\n-                .map(new MissingDepWarner(logger)::scan)\n+                .map(new MissingDepChecker(logger)::scan)\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.impl;\n+\n+import org.openjdk.jextract.Declaration;\n+import org.openjdk.jextract.Type;\n+import org.openjdk.jextract.Type.Delegated;\n+import org.openjdk.jextract.impl.DeclarationImpl.Skip;\n+\n+\/*\n+ * This visitor marks declarations to be skipped, based on --include options specified.\n+ *\/\n+public final class MissingDepChecker implements Declaration.Visitor<Void, Declaration> {\n+    private final Logger logger;\n+\n+    public MissingDepChecker(Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    public Declaration.Scoped scan(Declaration.Scoped header) {\n+        header.members().forEach(fieldTree -> fieldTree.accept(this, null));\n+        return header;\n+    }\n+\n+    @Override\n+    public Void visitFunction(Declaration.Function funcTree, Declaration parent) {\n+        if (Skip.isPresent(funcTree)) return null;\n+\n+        checkMissingDep(funcTree, funcTree.type().returnType());\n+        funcTree.type().argumentTypes().forEach(p -> checkMissingDep(funcTree, p));\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visitScoped(Declaration.Scoped d, Declaration parent) {\n+        if (Skip.isPresent(d)) return null;\n+\n+        d.members().forEach(fieldTree -> fieldTree.accept(this, d));\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {\n+        if (Skip.isPresent(tree)) return null;\n+\n+        checkMissingDep(tree, tree.type());\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visitVariable(Declaration.Variable tree, Declaration parent) {\n+        if (Skip.isPresent(tree)) return null;\n+\n+        if (parent != null && !Skip.isPresent(parent))  {\n+            checkMissingDep(parent, tree.type());\n+        } else {\n+            checkMissingDep(tree, tree.type());\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visitDeclaration(Declaration decl, Declaration parent) {\n+        return null;\n+    }\n+\n+    void checkMissingDep(Declaration decl, Type type) {\n+        if (type instanceof Type.Declared declared) {\n+            \/\/ we only have to check for missing structs because (a) pointers to missing structs can still lead\n+            \/\/ to valid code and (b) missing typedefs to existing structs are resolved correctly, as typedefs are never\n+            \/\/ referred to by name in the generated code (because of libclang limitations).\n+            if (Skip.isPresent(declared.tree())) {\n+                logger.err(\"jextract.bad.include\", decl.name(), declared.tree().name());\n+            }\n+        } else if (type instanceof Delegated delegated &&\n+                        delegated.kind() == Delegated.Kind.TYPEDEF) {\n+            checkMissingDep(decl, delegated.type());\n+        } else if (type instanceof Type.Array arrayType) {\n+            checkMissingDep(decl, arrayType.elementType());\n+        }\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MissingDepChecker.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.impl;\n-\n-import org.openjdk.jextract.Declaration;\n-import org.openjdk.jextract.Type;\n-import org.openjdk.jextract.Type.Delegated;\n-import org.openjdk.jextract.impl.DeclarationImpl.Skip;\n-\n-\/*\n- * This visitor marks declarations to be skipped, based on --include options specified.\n- *\/\n-public final class MissingDepWarner implements Declaration.Visitor<Void, Declaration> {\n-    private final Logger logger;\n-\n-    public MissingDepWarner(Logger logger) {\n-        this.logger = logger;\n-    }\n-\n-    public Declaration.Scoped scan(Declaration.Scoped header) {\n-        header.members().forEach(fieldTree -> fieldTree.accept(this, null));\n-        return header;\n-    }\n-\n-    @Override\n-    public Void visitFunction(Declaration.Function funcTree, Declaration parent) {\n-        if (Skip.isPresent(funcTree)) return null;\n-\n-        warnMissingDep(funcTree, funcTree.type().returnType());\n-        funcTree.type().argumentTypes().forEach(p -> warnMissingDep(funcTree, p));\n-        return null;\n-    }\n-\n-    @Override\n-    public Void visitScoped(Declaration.Scoped d, Declaration parent) {\n-        if (Skip.isPresent(d)) return null;\n-\n-        d.members().forEach(fieldTree -> fieldTree.accept(this, d));\n-        return null;\n-    }\n-\n-    @Override\n-    public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {\n-        if (Skip.isPresent(tree)) return null;\n-\n-        warnMissingDep(tree, tree.type());\n-        return null;\n-    }\n-\n-    @Override\n-    public Void visitVariable(Declaration.Variable tree, Declaration parent) {\n-        if (Skip.isPresent(tree)) return null;\n-\n-        if (parent != null && !Skip.isPresent(parent))  {\n-            warnMissingDep(parent, tree.type());\n-        } else {\n-            warnMissingDep(tree, tree.type());\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Void visitDeclaration(Declaration decl, Declaration parent) {\n-        return null;\n-    }\n-\n-    void warnMissingDep(Declaration decl, Type type) {\n-        if (type instanceof Type.Declared declared) {\n-            \/\/ we only have to check for missing structs because (a) pointers to missing structs can still lead\n-            \/\/ to valid code and (b) missing typedefs to existing structs are resolved correctly, as typedefs are never\n-            \/\/ referred to by name in the generated code (because of libclang limitations).\n-            if (Skip.isPresent(declared.tree())) {\n-                logger.err(\"jextract.bad.include\", decl.name(), declared.tree().name());\n-            }\n-        } else if (type instanceof Delegated delegated &&\n-                        delegated.kind() == Delegated.Kind.TYPEDEF) {\n-            warnMissingDep(decl, delegated.type());\n-        } else if (type instanceof Type.Array arrayType) {\n-            warnMissingDep(decl, arrayType.elementType());\n-        }\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MissingDepWarner.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"}]}