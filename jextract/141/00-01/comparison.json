{"files":[{"patch":"@@ -51,1 +51,0 @@\n-    private final List<String> enclosingClassNames;\n@@ -56,0 +55,1 @@\n+    private final ClassSourceBuilder enclosing;\n@@ -57,1 +57,1 @@\n-    ClassSourceBuilder(SourceFileBuilder builder, String modifiers, Kind kind, String className, String superName, List<String> enclosingClassNames) {\n+    ClassSourceBuilder(SourceFileBuilder builder, String modifiers, Kind kind, String className, String superName, ClassSourceBuilder enclosing) {\n@@ -63,1 +63,1 @@\n-        this.enclosingClassNames = enclosingClassNames;\n+        this.enclosing = enclosing;\n@@ -73,1 +73,1 @@\n-        return Stream.concat(enclosingClassNames.stream(), Stream.of(className)).collect(Collectors.joining(\".\"));\n+        return isNested() ? enclosing.fullName() + \".\" + className : className;\n@@ -76,2 +76,7 @@\n-    final SourceFileBuilder sourceFileBuilder() {\n-        return sb;\n+    \/\/ is the name enclosed by a class of the same name?\n+    protected final boolean isEnclosedBySameName(String name) {\n+        return className().equals(name) || (isNested() && enclosing.isEnclosedBySameName(name));\n+    }\n+\n+    protected final boolean isNested() {\n+        return enclosing != null;\n@@ -80,2 +85,2 @@\n-    final List<String> enclosingClassNames() {\n-        return enclosingClassNames;\n+    final SourceFileBuilder sourceFileBuilder() {\n+        return sb;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-            super(builder, \"final\", Kind.CLASS, className, null, List.of());\n+            super(builder, \"final\", Kind.CLASS, className, null, null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Constants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class FunctionalInterfaceBuilder extends ClassSourceBuilder {\n+final class FunctionalInterfaceBuilder extends ClassSourceBuilder {\n@@ -43,1 +43,0 @@\n-    private final Type.Function funcType;\n@@ -50,2 +49,2 @@\n-    FunctionalInterfaceBuilder(SourceFileBuilder builder, Constants constants, String className, List<String> enclosing,\n-                               Type.Function funcType, FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n+    private FunctionalInterfaceBuilder(SourceFileBuilder builder, Constants constants, String className, ClassSourceBuilder enclosing,\n+                                       FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n@@ -53,1 +52,0 @@\n-        this.funcType = funcType;\n@@ -61,7 +59,10 @@\n-    void generate() {\n-        emitDocComment(funcType, className());\n-        classBegin();\n-        emitFunctionalInterfaceMethod();\n-        emitFunctionalFactories();\n-        emitFunctionalFactoryForPointer();\n-        classEnd();\n+    public static void generate(SourceFileBuilder builder, Constants constants, String className, ClassSourceBuilder enclosing,\n+                               Type.Function funcType, FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n+        FunctionalInterfaceBuilder fib = new FunctionalInterfaceBuilder(builder, constants, className, enclosing,\n+                descriptor, parameterNames);\n+        fib.emitDocComment(funcType, className);\n+        fib.classBegin();\n+        fib.emitFunctionalInterfaceMethod();\n+        fib.emitFunctionalFactories();\n+        fib.emitFunctionalFactoryForPointer();\n+        fib.classEnd();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        super(builder, \"public\", Kind.CLASS, className, superName, List.of());\n+        super(builder, \"public\", Kind.CLASS, className, superName, null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.jextract.impl;\n-\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.GroupLayout;\n-import java.lang.foreign.MemoryLayout;\n-import org.openjdk.jextract.Declaration;\n-import org.openjdk.jextract.Type;\n-\n-import javax.tools.JavaFileObject;\n-import java.util.List;\n-import java.util.Optional;\n-\n-interface JavaSourceBuilder {\n-\n-    default void addVar(Declaration.Variable varTree, String javaName,\n-                        MemoryLayout layout, Optional<String> fiName) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-\n-    default void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor,\n-                             String javaName, List<String> parameterNames) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-\n-    default void addConstant(Declaration.Constant constantTree, String javaName, Class<?> javaType) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-\n-    default void addTypedef(Declaration.Typedef typedefTree, String javaName, String superClass) {\n-        addTypedef(typedefTree, javaName, superClass, typedefTree.type());\n-    }\n-\n-    default void addTypedef(Declaration.Typedef typedefTree, String javaName,\n-                            String superClass, Type type) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-\n-    default StructBuilder addStruct(Declaration.Scoped structTree, boolean isNestedAnonStruct,\n-                                    String javaName, GroupLayout layout) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-\n-    default void addFunctionalInterface(Type.Function funcType, String javaName,\n-                                FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n-        throw new UnsupportedOperationException(\"Not implemented\");\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/JavaSourceBuilder.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -56,1 +56,1 @@\n-    protected JavaSourceBuilder currentBuilder;\n+    protected Builder currentBuilder;\n@@ -182,1 +182,1 @@\n-        JavaSourceBuilder prevBuilder = null;\n+        Builder prevBuilder = null;\n@@ -437,0 +437,36 @@\n+\n+    interface Builder {\n+\n+        default void addVar(Declaration.Variable varTree, String javaName,\n+                            MemoryLayout layout, Optional<String> fiName) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+\n+        default void addFunction(Declaration.Function funcTree, FunctionDescriptor descriptor,\n+                                 String javaName, List<String> parameterNames) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+\n+        default void addConstant(Declaration.Constant constantTree, String javaName, Class<?> javaType) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+\n+        default void addTypedef(Declaration.Typedef typedefTree, String javaName, String superClass) {\n+            addTypedef(typedefTree, javaName, superClass, typedefTree.type());\n+        }\n+\n+        default void addTypedef(Declaration.Typedef typedefTree, String javaName,\n+                                String superClass, Type type) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+\n+        default StructBuilder addStruct(Declaration.Scoped structTree, boolean isNestedAnonStruct,\n+                                        String javaName, GroupLayout layout) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+\n+        default void addFunctionalInterface(Type.Function funcType, String javaName,\n+                                    FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public class SourceFileBuilder {\n+final class SourceFileBuilder {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.stream.Stream;\n@@ -48,1 +47,1 @@\n-class StructBuilder extends ClassSourceBuilder implements JavaSourceBuilder {\n+final class StructBuilder extends ClassSourceBuilder implements OutputFactory.Builder {\n@@ -58,2 +57,2 @@\n-    StructBuilder(SourceFileBuilder builder, Constants constants, String modifiers, String className, List<String> enclosing,\n-                  Declaration.Scoped structTree, GroupLayout structLayout) {\n+    StructBuilder(SourceFileBuilder builder, Constants constants, String modifiers, String className,\n+                  ClassSourceBuilder enclosing, Declaration.Scoped structTree, GroupLayout structLayout) {\n@@ -68,5 +67,0 @@\n-    \/\/ is the name enclosed by a class of the same name?\n-    private boolean isEnclosedBySameName(String name) {\n-        return className().equals(name) || enclosingClassNames().contains(name);\n-    }\n-\n@@ -91,4 +85,0 @@\n-    private boolean isNested() {\n-        return !enclosingClassNames().isEmpty();\n-    }\n-\n@@ -128,4 +118,0 @@\n-    private List<String> enclosingForNested() {\n-        return Stream.concat(enclosingClassNames().stream(), Stream.of(className())).toList();\n-    }\n-\n@@ -141,1 +127,1 @@\n-            StructBuilder builder = new StructBuilder(sourceFileBuilder(), constants, \"public static final\", name, enclosingForNested(), tree, layout);\n+            StructBuilder builder = new StructBuilder(sourceFileBuilder(), constants, \"public static final\", name, this, tree, layout);\n@@ -152,3 +138,1 @@\n-        FunctionalInterfaceBuilder builder = new FunctionalInterfaceBuilder(sourceFileBuilder(), constants, javaName,\n-                enclosingForNested(), funcType, descriptor, parameterNames);\n-        builder.generate();\n+        FunctionalInterfaceBuilder.generate(sourceFileBuilder(), constants, javaName, this, funcType, descriptor, parameterNames);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-class ToplevelBuilder implements JavaSourceBuilder {\n+class ToplevelBuilder implements OutputFactory.Builder {\n@@ -122,1 +122,1 @@\n-            TypedefBuilder builder = new TypedefBuilder(sfb, sfb.className(), superClass, typedefTree);\n+            TypedefBuilder.generate(sfb, sfb.className(), superClass, typedefTree);\n@@ -124,1 +124,0 @@\n-            builder.generate();\n@@ -133,1 +132,1 @@\n-        StructBuilder structBuilder = new StructBuilder(sfb, constants, \"public\", sfb.className(), List.of(), tree, layout);\n+        StructBuilder structBuilder = new StructBuilder(sfb, constants, \"public\", sfb.className(), null, tree, layout);\n@@ -143,3 +142,1 @@\n-        FunctionalInterfaceBuilder builder = new FunctionalInterfaceBuilder(sfb, constants, sfb.className(), List.of(),\n-                funcType, descriptor, parameterNames);\n-        builder.generate();\n+        FunctionalInterfaceBuilder.generate(sfb, constants, sfb.className(), null, funcType, descriptor, parameterNames);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jextract.Type;\n@@ -32,7 +33,3 @@\n-public class TypedefBuilder extends ClassSourceBuilder {\n-    private final Declaration.Typedef typedefTree;\n-\n-    public TypedefBuilder(SourceFileBuilder builder, String className, String superClass,\n-                          Declaration.Typedef typedefTree) {\n-        super(builder, \"public\", Kind.CLASS, className, superClass, List.of());\n-        this.typedefTree = typedefTree;\n+final class TypedefBuilder extends ClassSourceBuilder {\n+    private TypedefBuilder(SourceFileBuilder builder, String className, String superClass) {\n+        super(builder, \"public\", Kind.CLASS, className, superClass, null);\n@@ -41,5 +38,7 @@\n-    void generate() {\n-        emitDocComment(typedefTree);\n-        classBegin();\n-        emitPrivateDefaultConstructor();\n-        classEnd();\n+    public static void generate(SourceFileBuilder builder, String className, String superClass,\n+                          Declaration.Typedef typedefTree) {\n+        TypedefBuilder tdb = new TypedefBuilder(builder, className, superClass);\n+        tdb.emitDocComment(typedefTree);\n+        tdb.classBegin();\n+        tdb.emitPrivateDefaultConstructor();\n+        tdb.classEnd();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypedefBuilder.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            \"typedef unsigned long size_t;\",\n+            \"typedef unsigned long long size_t;\",\n@@ -199,1 +199,1 @@\n-                .replaceAll(\"\\\\{@snippet :\", \"\")\n+                .replaceAll(\"\\\\{@snippet lang=c :\", \"\")\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-typedef unsigned long size_t;\n+typedef unsigned long long size_t;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/typedefs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}