{"files":[{"patch":"@@ -3,1 +3,1 @@\n-`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n+`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/454). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n@@ -5,1 +5,1 @@\n-### Getting started\n+### Getting jextract\n@@ -7,1 +7,1 @@\n-`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable build of the [panama\/foreign repository](https:\/\/github.com\/openjdk\/panama-foreign) is also required.\n+Pre-built binaries for jextract are periodically released [here](https:\/\/jdk.java.net\/jextract). These binaries are built from the `master` branch of this repo, and target the foreign memory access and function API in the latest mainline JDK (for which binaries can be found [here](https:\/\/jdk.java.net)).\n@@ -9,37 +9,1 @@\n-> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n-> \n-> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by chercking out the appropriate branch.\n-> For example, to build a jextract tool which works against JDK 18:\n-> \n-> `git checkout jdk18`\n-> \n-> Over time, new branches will be added, each targeting a specific JDK version.\n-> <\/details>\n-\n-`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n-\n-(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n-supports JDK 18. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n-\n-\n-\n-```sh\n-$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> clean verify\n-```\n-\n-\n-> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n-> \n-> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n-> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n->\n-> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n-> \n-> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n-> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n-> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n-> \n-> <\/details>\n-\n-After building, there should be a new `jextract` folder under `build`.\n-To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n+Alternatively, to build jextract from the latest sources (which include all the latest updates and fixes) please refer to the [building](#building--testing) section below.\n@@ -47,12 +11,1 @@\n-```sh\n-$ build\/jextract\/bin\/jextract\n-Expected a header file\n-```\n-\n-The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n-\n-```sh\n-$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n-```\n-\n-Note however that running `jtreg` task requires `cmake` to be available on the `PATH`.\n+---\n@@ -77,1 +30,1 @@\n-jextract --source -t org.jextract point.h\n+jextract -t org.jextract point.h\n@@ -127,1 +80,1 @@\n-| `-D --define-macro <macro>=<value>`                          | define <macro> to <value> (or 1 if <value> omitted)          |\n+| `-D --define-macro <macro>=<value>`                          | define `<macro>` to `<value>` (or 1 if `<value>` omitted)          |\n@@ -133,1 +86,0 @@\n-| `--source`                                                   | generate java sources instead of classfiles                  |\n@@ -164,1 +116,1 @@\n-jextract -t org.jextract --source @includes.txt point.h\n+jextract -t org.jextract @includes.txt point.h\n@@ -203,0 +155,58 @@\n+---\n+\n+### Building & Testing\n+\n+`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/434), so a suitable [jdk 22 distribution](https:\/\/jdk.java.net\/22\/) is also required.\n+\n+> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n+>\n+> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by checking out the appropriate branch.\n+> For example, to build a jextract tool which works against JDK 21:\n+>\n+> `git checkout jdk21`\n+>\n+> Over time, new branches will be added, each targeting a specific JDK version.\n+> <\/details>\n+\n+`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n+\n+(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n+supports JDK 21. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n+\n+\n+\n+```sh\n+$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> clean verify\n+```\n+\n+\n+> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n+>\n+> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n+> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n+>\n+> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n+>\n+> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n+> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n+> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n+>\n+> <\/details>\n+\n+After building, there should be a new `jextract` folder under `build`.\n+To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n+\n+```sh\n+$ build\/jextract\/bin\/jextract\n+Expected a header file\n+```\n+\n+#### Testing\n+\n+The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n+\n+```sh\n+$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n+```\n+\n+Note: running `jtreg` task requires `cmake` to be available on the `PATH`.\n","filename":"README.md","additions":66,"deletions":56,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-         \"--add-modules=org.openjdk.jextract,jdk.compiler,jdk.zipfs\",\n+         \"--add-modules=org.openjdk.jextract\",\n","filename":"build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract;\n+\n+\/**\n+ * A class representing a Java source file.\n+ *\n+ * @param className the name of the top-level public class in this source file.\n+ * @param packageName the name of the package the top-level class in this source file resides in.\n+ * @param contents the contents of the source file.\n+ *\/\n+public record JavaSourceFile(String className, String packageName, String contents) {\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JavaSourceFile.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import org.openjdk.jextract.impl.DuplicateFilter;\n+import org.openjdk.jextract.impl.IncludeFilter;\n@@ -32,1 +34,2 @@\n-import org.openjdk.jextract.impl.CodeGenerator;\n+import org.openjdk.jextract.impl.NameMangler;\n+import org.openjdk.jextract.impl.OutputFactory;\n@@ -35,1 +38,1 @@\n-import org.openjdk.jextract.impl.Writer;\n+import org.openjdk.jextract.impl.UnsupportedFilter;\n@@ -37,1 +40,0 @@\n-import javax.tools.JavaFileObject;\n@@ -42,0 +44,1 @@\n+import java.nio.file.FileAlreadyExistsException;\n@@ -119,1 +122,1 @@\n-    public static List<JavaFileObject> generate(Declaration.Scoped decl, String headerName,\n+    public static List<JavaSourceFile> generate(Declaration.Scoped decl, String headerName,\n@@ -121,1 +124,1 @@\n-        return List.of(CodeGenerator.generate(decl, headerName, targetPkg, new IncludeHelper(), libNames, errStream));\n+        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libNames, errStream));\n@@ -124,1 +127,1 @@\n-    private static List<JavaFileObject> generateInternal(Declaration.Scoped decl, String headerName,\n+    private static List<JavaSourceFile> generateInternal(Declaration.Scoped decl, String headerName,\n@@ -127,1 +130,13 @@\n-        return List.of(CodeGenerator.generate(decl, headerName, targetPkg, includeHelper, libNames, errStream));\n+        return List.of(generate(decl, headerName, targetPkg, includeHelper, libNames, errStream));\n+    }\n+\n+    private static JavaSourceFile[] generate(Declaration.Scoped decl, String headerName,\n+                                            String targetPkg, IncludeHelper includeHelper,\n+                                            List<String> libNames, PrintWriter errStream) {\n+        var transformedDecl = Stream.of(decl)\n+                .map(new IncludeFilter(includeHelper)::scan)\n+                .map(new DuplicateFilter()::scan)\n+                .map(new NameMangler(headerName)::scan)\n+                .map(new UnsupportedFilter(errStream)::scan)\n+                .findFirst().get();\n+        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libNames);\n@@ -131,1 +146,1 @@\n-     * Write resulting {@link JavaFileObject} instances into specified destination path.\n+     * Write resulting {@link JavaSourceFile} instances into specified destination path.\n@@ -133,2 +148,1 @@\n-     * @param compileSources whether to compile .java sources or not\n-     * @param files the {@link JavaFileObject} instances to be written.\n+     * @param files the {@link JavaSourceFile} instances to be written.\n@@ -136,5 +150,30 @@\n-    public static void write(Path dest, boolean compileSources, List<JavaFileObject> files) throws UncheckedIOException {\n-        try {\n-            new Writer(dest, files).writeAll(compileSources);\n-        } catch (IOException ex) {\n-            throw new UncheckedIOException(ex);\n+    public static void write(Path dest, List<JavaSourceFile> files) throws IOException {\n+        Path destDir = createOutputDir(dest);\n+        for (var entry : files) {\n+            String packagePath = packageNameToPath(entry.packageName());\n+            Path fullPath = destDir.resolve(packagePath, entry.className() + \".java\").normalize();\n+            Path dir = fullPath.getParent();\n+            \/\/ In case the folder exist and is a link to a folder, this should be OK\n+            \/\/ Case in point, \/tmp on MacOS link to \/private\/tmp\n+            if (Files.exists(dir)) {\n+                if (!Files.isDirectory(dir)) {\n+                    throw new FileAlreadyExistsException(dir.toAbsolutePath().toString());\n+                }\n+            } else {\n+                Files.createDirectories(fullPath.getParent());\n+            }\n+            Files.write(fullPath, List.of(entry.contents()));\n+        }\n+    }\n+\n+    private static String packageNameToPath(String packageName) {\n+        return packageName.isEmpty() ? \"\" : packageName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n+    }\n+\n+    private static Path createOutputDir(Path dest) throws IOException {\n+        Path absDest = dest.toAbsolutePath();\n+        if (!Files.exists(absDest)) {\n+            Files.createDirectories(absDest);\n+        }\n+        if (!Files.isDirectory(absDest)) {\n+            throw new IOException(\"Not a directory: \" + dest);\n@@ -142,0 +181,1 @@\n+        return absDest;\n@@ -347,1 +387,0 @@\n-        parser.accepts(\"--source\", format(\"help.source\"), false);\n@@ -430,3 +469,0 @@\n-        if (optionSet.has(\"--source\")) {\n-            builder.setGenerateSource();\n-        }\n@@ -465,1 +501,1 @@\n-        List<JavaFileObject> files = null;\n+        List<JavaSourceFile> files;\n@@ -499,6 +535,9 @@\n-                write(output, !options.source, files);\n-            }\n-        } catch (UncheckedIOException uioe) {\n-            err.println(uioe.getMessage());\n-            if (JextractTool.DEBUG) {\n-                uioe.printStackTrace(err);\n+                try {\n+                    write(output, files);\n+                } catch (IOException e) {\n+                    err.println(e.getMessage());\n+                    if (JextractTool.DEBUG) {\n+                        e.printStackTrace(err);\n+                    }\n+                    return OUTPUT_ERROR;\n+                }\n@@ -506,1 +545,0 @@\n-            return OUTPUT_ERROR;\n@@ -557,0 +595,1 @@\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":67,"deletions":28,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.impl;\n-\n-import org.openjdk.jextract.Declaration;\n-\n-import java.io.PrintWriter;\n-import java.util.List;\n-import java.util.stream.Stream;\n-import javax.tools.JavaFileObject;\n-\n-public final class CodeGenerator {\n-    private CodeGenerator() {}\n-\n-    public static JavaFileObject[] generate(Declaration.Scoped decl, String headerName,\n-                                            String targetPkg, IncludeHelper includeHelper,\n-                                            List<String> libNames, PrintWriter errStream) {\n-        var transformedDecl = Stream.of(decl)\n-                .map(new IncludeFilter(includeHelper)::scan)\n-                .map(new DuplicateFilter()::scan)\n-                .map(new NameMangler(headerName)::scan)\n-                .map(new UnsupportedFilter(errStream)::scan)\n-                .findFirst().get();\n-        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libNames);\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CodeGenerator.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-final class DuplicateFilter implements Declaration.Visitor<Void, Void> {\n+public final class DuplicateFilter implements Declaration.Visitor<Void, Void> {\n@@ -65,1 +65,1 @@\n-    DuplicateFilter() {\n+    public DuplicateFilter() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DuplicateFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-package org.openjdk.jextract.impl;\n-\n-import javax.tools.FileObject;\n-import javax.tools.ForwardingJavaFileManager;\n-import javax.tools.JavaCompiler;\n-import javax.tools.JavaFileManager;\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n-import javax.tools.ToolProvider;\n-import java.io.*;\n-import java.io.Writer;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-final class InMemoryJavaCompiler {\n-    private InMemoryJavaCompiler() {}\n-\n-    static List<JavaFileObject> compile(List<JavaFileObject> files,\n-                                        String... options) {\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        FileManager fileManager = new FileManager(compiler.getStandardFileManager(null, null, null));\n-\n-        Writer writer = new StringWriter();\n-        Boolean exitCode = compiler.getTask(writer, fileManager, null, Arrays.asList(options), null, files).call();\n-        if (!exitCode) {\n-            throw new CompilationFailedException(\"In memory compilation failed: \" + writer.toString());\n-        }\n-        return fileManager.getCompiledFiles();\n-    }\n-\n-    \/\/ Wraper for class byte array\n-    private static class ClassFile extends SimpleJavaFileObject {\n-        private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-        protected ClassFile(String name) {\n-            super(URI.create(name.replace('.', '\/') + Kind.CLASS.extension), Kind.CLASS);\n-        }\n-\n-        @Override\n-        public ByteArrayOutputStream openOutputStream() {\n-            return this.baos;\n-        }\n-\n-        @Override\n-        public InputStream openInputStream() {\n-            return new ByteArrayInputStream(baos.toByteArray());\n-        }\n-    }\n-\n-    \/\/ File manager which spawns ClassFile instances on demand\n-    private static class FileManager extends ForwardingJavaFileManager<JavaFileManager> {\n-        private final List<JavaFileObject> compiled = new ArrayList<>();\n-\n-        protected FileManager(JavaFileManager fileManager) {\n-            super(fileManager);\n-        }\n-\n-        @Override\n-        public JavaFileObject getJavaFileForOutput(Location location, String name, JavaFileObject.Kind kind, FileObject source) throws IOException {\n-            JavaFileObject out = new ClassFile(name);\n-            compiled.add(out);\n-            return out;\n-        }\n-\n-        public List<JavaFileObject> getCompiledFiles() {\n-            return compiled;\n-        }\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/InMemoryJavaCompiler.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -33,1 +33,1 @@\n-final class IncludeFilter implements Declaration.Visitor<Void, Declaration> {\n+public final class IncludeFilter implements Declaration.Visitor<Void, Declaration> {\n@@ -36,1 +36,1 @@\n-    IncludeFilter(IncludeHelper includeHelper) {\n+    public IncludeFilter(IncludeHelper includeHelper) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-final class NameMangler implements Declaration.Visitor<Void, Declaration> {\n+public final class NameMangler implements Declaration.Visitor<Void, Declaration> {\n@@ -116,1 +116,1 @@\n-    NameMangler(String headerName) {\n+    public NameMangler(String headerName) {\n@@ -121,1 +121,1 @@\n-    Declaration.Scoped scan(Declaration.Scoped header) {\n+    public Declaration.Scoped scan(Declaration.Scoped header) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-    public final List<String> filters;\n@@ -40,1 +39,0 @@\n-    public final boolean source;\n@@ -44,2 +42,1 @@\n-            List<String> filters, String targetPackage,\n-            String outputDir, boolean source, IncludeHelper includeHelper) {\n+                    String targetPackage, String outputDir, IncludeHelper includeHelper) {\n@@ -48,1 +45,0 @@\n-        this.filters = filters;\n@@ -51,1 +47,0 @@\n-        this.source = source;\n@@ -59,4 +54,0 @@\n-    public static Options createDefault() {\n-        return builder().build();\n-    }\n-\n@@ -66,1 +57,0 @@\n-        private final List<String> filters;\n@@ -69,2 +59,1 @@\n-        private boolean source;\n-        private IncludeHelper includeHelper = new IncludeHelper();\n+        private final IncludeHelper includeHelper = new IncludeHelper();\n@@ -75,1 +64,0 @@\n-            this.filters = new ArrayList<>();\n@@ -78,1 +66,0 @@\n-            this.source = false;\n@@ -85,2 +72,1 @@\n-                    Collections.unmodifiableList(filters),\n-                    targetPackage, outputDir, source, includeHelper\n+                    targetPackage, outputDir, includeHelper\n@@ -106,8 +92,0 @@\n-        public void addFilter(String filter) {\n-            filters.add(filter);\n-        }\n-\n-        public void setGenerateSource() {\n-            source = true;\n-        }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Options.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -29,1 +30,0 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n@@ -33,1 +33,0 @@\n-import javax.tools.JavaFileObject;\n@@ -36,1 +35,0 @@\n-import java.util.Optional;\n@@ -47,2 +45,2 @@\n-    static JavaFileObject[] generateWrapped(Declaration.Scoped decl,\n-                String pkgName, List<String> libraryNames) {\n+    public static JavaSourceFile[] generateWrapped(Declaration.Scoped decl,\n+                                                   String pkgName, List<String> libraryNames) {\n@@ -59,1 +57,1 @@\n-    JavaFileObject[] generate(Declaration.Scoped decl) {\n+    JavaSourceFile[] generate(Declaration.Scoped decl) {\n@@ -62,2 +60,2 @@\n-        List<JavaFileObject> files = new ArrayList<>(toplevelBuilder.toFiles());\n-        return files.toArray(new JavaFileObject[0]);\n+        List<JavaSourceFile> files = new ArrayList<>(toplevelBuilder.toFiles());\n+        return files.toArray(JavaSourceFile[]::new);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import javax.tools.JavaFileObject;\n+import org.openjdk.jextract.JavaSourceFile;\n+\n@@ -97,2 +98,2 @@\n-    public JavaFileObject toFile(String suffix, Function<String, String> finisher) {\n-        return Utils.fileFromString(packageName, STR.\"\\{className}\\{suffix}\", finisher.apply(sb.toString()));\n+    public JavaSourceFile toFile(String suffix, Function<String, String> finisher) {\n+        return new JavaSourceFile(STR.\"\\{className}\\{suffix}\", packageName, finisher.apply(sb.toString()));\n@@ -101,1 +102,1 @@\n-    public JavaFileObject toFile(Function<String, String> finisher) {\n+    public JavaSourceFile toFile(Function<String, String> finisher) {\n@@ -105,1 +106,1 @@\n-    public JavaFileObject toFile() {\n+    public JavaSourceFile toFile() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -32,1 +33,0 @@\n-import javax.tools.JavaFileObject;\n@@ -36,1 +36,0 @@\n-import java.util.Optional;\n@@ -88,1 +87,1 @@\n-    public List<JavaFileObject> toFiles() {\n+    public List<JavaSourceFile> toFiles() {\n@@ -91,1 +90,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n+        List<JavaSourceFile> files = new ArrayList<>();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -39,2 +40,0 @@\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n@@ -42,1 +41,0 @@\n-import java.io.IOException;\n@@ -48,1 +46,0 @@\n-import java.net.URI;\n@@ -56,14 +53,0 @@\n-    private static URI fileName(String pkgName, String clsName, String extension) {\n-        String pkgPrefix = pkgName.isEmpty() ? \"\" : pkgName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n-        return URI.create(pkgPrefix + clsName + extension);\n-    }\n-\n-    static JavaFileObject fileFromString(String pkgName, String clsName, String contents) {\n-        return new SimpleJavaFileObject(fileName(pkgName, clsName, \".java\"), JavaFileObject.Kind.SOURCE) {\n-            @Override\n-            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n-                return contents;\n-            }\n-        };\n-    }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-package org.openjdk.jextract.impl;\n-\n-import javax.tools.JavaFileObject;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.FileAlreadyExistsException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-public final class Writer {\n-    private final List<? extends JavaFileObject> files;\n-    private final Path dest;\n-\n-    public Writer(Path dest, List<? extends JavaFileObject> files) {\n-        this.files = files;\n-        this.dest = dest;\n-    }\n-\n-    private List<JavaFileObject> ensureSourcesCompiled() {\n-        List<JavaFileObject> sources = sources();\n-        if (sources.isEmpty()) {\n-            return List.of();\n-        } else {\n-            return InMemoryJavaCompiler.compile(sources,\n-                \"--enable-preview\",\n-                \"--source\", \"22\",\n-                \"-d\", dest.toAbsolutePath().toString(),\n-                \"-cp\", dest.toAbsolutePath().toString());\n-        }\n-    }\n-\n-    public void writeAll(boolean compileSources) throws IOException {\n-        writeClassFiles(resources());\n-        writeClassFiles(classes());\n-        if (compileSources) {\n-            writeClassFiles(ensureSourcesCompiled());\n-        } else {\n-            writeSourceFiles();\n-        }\n-    }\n-\n-    void writeClassFiles(List<JavaFileObject> files) throws IOException {\n-        Path destDir = createOutputDir();\n-        for (var entry : files) {\n-            String path = entry.getName();\n-            Path fullPath = destDir.resolve(path).normalize();\n-            Files.createDirectories(fullPath.getParent());\n-            try (InputStream is = entry.openInputStream()) {\n-                Files.write(fullPath, is.readAllBytes());\n-            }\n-        }\n-    }\n-\n-    void writeSourceFiles() throws IOException {\n-        Path destDir = createOutputDir();\n-        for (var entry : sources()) {\n-            String srcPath = entry.getName();\n-            Path fullPath = destDir.resolve(srcPath).normalize();\n-            Path dir = fullPath.getParent();\n-            \/\/ In case the folder exist and is a link to a folder, this should be OK\n-            \/\/ Case in point, \/tmp on MacOS link to \/private\/tmp\n-            if (Files.exists(dir)) {\n-                if (!Files.isDirectory(dir)) {\n-                    throw new FileAlreadyExistsException(dir.toAbsolutePath().toString());\n-                }\n-            } else {\n-                Files.createDirectories(fullPath.getParent());\n-            }\n-            Files.write(fullPath, List.of(entry.getCharContent(false)));\n-        }\n-    }\n-\n-    private List<JavaFileObject> sources() {\n-        return files.stream()\n-                .filter(jfo -> jfo.getKind() == JavaFileObject.Kind.SOURCE)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<JavaFileObject> classes() {\n-        return files.stream()\n-                .filter(jfo -> jfo.getKind() == JavaFileObject.Kind.CLASS)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<JavaFileObject> resources() {\n-        return files.stream()\n-                .filter(jfo -> (jfo.getKind() == JavaFileObject.Kind.HTML || jfo.getKind() == JavaFileObject.Kind.OTHER))\n-                .collect(Collectors.toList());\n-    }\n-\n-    private Path createOutputDir() throws IOException {\n-        Path absDest = dest.toAbsolutePath();\n-        if (!Files.exists(absDest)) {\n-            Files.createDirectories(absDest);\n-        }\n-        if (!Files.isDirectory(absDest)) {\n-            throw new IOException(\"Not a directory: \" + dest);\n-        }\n-        return absDest;\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Writer.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-        run(\"--output\", splitOutput.toString(), splitH.toString()).checkSuccess();\n+        runAndCompile(splitOutput, splitH.toString());\n","filename":"test\/jtreg\/TestSplit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,9 +40,0 @@\n-\/*\n- * @test id=sources\n- * @bug 7903239\n- * @summary ofAddress factory of function pointer type is wrong for struct returns\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l AllocCallback -t test.jextract.allocCallback alloc_callback.h\n- * @build TestAllocCallback\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestAllocCallback\n- *\/\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_global.h\n- * @build TestGlobal\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestGlobal\n- *\/\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestGlobal.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_struct.h\n- * @build TestStruct\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestStruct\n- *\/\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestStruct.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_typedef.h\n- * @build TestTypedef\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestTypedef\n- *\/\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestTypedef.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -39,7 +39,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.dedup macro_fields.h\n- * @build TestDedup\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestDedup\n- *\/\n","filename":"test\/jtreg\/generator\/dedup\/TestDedup.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @test id=classes\n+ * @test\n@@ -42,7 +42,0 @@\n-\/*\n- * @test id=sources\n-  * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Func -t test.jextract.funcpointers func.h\n- * @build TestFuncPointerInvokers\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestFuncPointerInvokers\n- *\/\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.nested.anon nestedInsideAnon.h\n- * @build TestNestedInsideAnon\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedInsideAnon\n- *\/\n","filename":"test\/jtreg\/generator\/nestedInsideAnon\/TestNestedInsideAnon.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,7 +40,0 @@\n-\/*\n- * @test id=sources\n-  * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Func -t test.jextract.nestedaccess nestedStructAccess.h\n- * @build TestNestedStructAccess\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedStructAccess\n- *\/\n","filename":"test\/jtreg\/generator\/nestedStructAccess\/TestNestedStructAccess.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -39,7 +39,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.nested.typedef nestedStructTypedef.h\n- * @build TestNestedStructTypedef\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedStructTypedef\n- *\/\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/TestNestedStructTypedef.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,7 +41,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.nestedtypes nested_types.h\n- * @build TestNestedTypes\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedTypes\n- *\/\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypes.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,7 +40,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.nestedtypes.names nested_types_names.h\n- * @build TestNestedTypesNames\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedTypesNames\n- *\/\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesNames.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,7 +41,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.nestedtypes.unsupported nested_types_unsupported.h\n- * @build TestNestedTypesUnsupported\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNestedTypesUnsupported\n- *\/\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesUnsupported.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.out.struct out_of_order_struct.h\n- * @build TestOutOfOrderStruct\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestOutOfOrderStruct\n- *\/\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderStruct.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -38,7 +38,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.out.typedef out_of_order_typedef.h\n- * @build TestOutOfOrderTypedef\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestOutOfOrderTypedef\n- *\/\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderTypedef.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,7 +40,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.packedstructs packedstructs.h\n- * @build TestPackedStructs\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestPackedStructs\n- *\/\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id=classes\n+ * @test\n@@ -39,9 +39,0 @@\n- * @build TestReinterpret\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestReinterpret\n- *\/\n-\/*\n- * @test id=sources\n- * @bug 8253102 7903626\n- * @summary jextract should emit reinterpret utility method on struct classes\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Reinterpret -t test.jextract.reinterpret reinterpret.h\n","filename":"test\/jtreg\/generator\/reinterpret\/TestReinterpret.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @test id=classes\n+ * @test\n@@ -36,9 +36,0 @@\n-\/*\n- * @test id=sources\n- * @bug 7903347\n- * @summary add long name option for all single letter options and expand help on default values for various options\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources --library Test7903347 -t test.jextract.test7903347 test7903347.h\n- * @build LibTest7903347Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest7903347Test\n- *\/\n","filename":"test\/jtreg\/generator\/test7903347\/LibTest7903347Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=classes\n+ * @test\n@@ -37,9 +37,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8239918\n- * @summary jextract generates uncompilable code for no argument C function\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8239918 -t test.jextract.test8239918 test8239918.h\n- * @build LibTest8239918Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8239918Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8239918\/LibTest8239918Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=classes\n+ * @test\n@@ -37,12 +37,0 @@\n-\n-\/*\n- * @test id=sources\n- * @bug 8240373\n- * @summary Jextract assigns type \"Void\" to enum macros\n- * @library \/lib\n- *\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8240373 test8240373.h\n- * @build Lib8240373Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Lib8240373Test\n- *\/\n-\n","filename":"test\/jtreg\/generator\/test8240373\/Lib8240373Test.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @test id=classes\n+ * @test\n@@ -44,9 +44,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @bug 8244412\n- * @summary jextract should generate static utils class for primitive typedefs\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8244412 test8244412.h\n- * @build LibTest8244412Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8244412Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,10 +40,0 @@\n-\n-\/*\n- * @test id=sources\n- * @bug 8244938\n- * @summary Crash in foreign ABI CallArranger class when a test native function returns a nested struct\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8244938 -t test.jextract.test8244938 test8244938.h\n- * @build Test8244938\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test8244938\n- *\/\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,9 +41,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8245003\n- * @summary jextract does not generate accessor for MemorySegement typed values\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8245003 -t test.jextract.test8245003 test8245003.h\n- * @build Test8245003\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test8245003\n- *\/\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,9 +41,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8246341\n- * @summary jextract should generate Cpointer utilities class\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8246341 -t test.jextract.test8246341 test8246341.h\n- * @build LibTest8246341Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8246341Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,9 +41,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8246400\n- * @summary jextract should generate a utility to manage mutliple MemorySegments\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8246400 -t test.jextract.test8246400 test8246400.h\n- * @build LibTest8246400Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8246400Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=classes\n+ * @test\n@@ -37,9 +37,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @bug 8249757\n- * @summary jextract should expose a way to load library from a given absolute path\n- * @run main\/othervm JtregJextractSources -libpath Test8249757 -t test.jextract.test8249757 test8249757.h\n- * @build LibTest8249757Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8249757Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8249757\/LibTest8249757Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @test id=classes\n+ * @test\n@@ -43,9 +43,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8252121\n- * @summary jextract generated code fails with ABI for typedefed array type parameters\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.arrayparam -l Arrayparam arrayparam.h\n- * @build Test8252121\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test8252121\n- *\/\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,9 +41,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8252465\n- * @summary jextract generates wrong layout and varhandle when different structs have same named field\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8252465 test8252465.h\n- * @build LibTest8252465Test\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8252465Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=classes\n+ * @test\n@@ -37,9 +37,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @bug 8253390\n- * @summary jextract should quote string literals\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8253390 test8253390.h\n- * @build LibTest8253390Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8253390Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8253390\/LibTest8253390Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -41,9 +41,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @bug 8254983\n- * @summary jextract fails to hande layout paths nested structs\/union\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8254983 test8254983.h\n- * @build LibTest8254983Test\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8254983Test\n- *\/\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @test id=classes\n+ * @test\n@@ -46,10 +46,0 @@\n-\n-\/*\n- * @test id=sources\n- * @library \/lib\n- *\n- * @run main\/othervm JtregJextractSources -l Unsupported -t test.jextract.unsupported unsupported.h\n- * @build LibUnsupportedTest\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibUnsupportedTest\n- *\/\n-\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,9 +40,0 @@\n- *\/\n-\/*\n- * @test id=sources\n- * @bug 8258605\n- * @summary regression: jextract can not handle function prototypes as function arguments\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l FuncParam -t test.jextract.test8258605 funcParam.h\n- * @build LibTest8258605Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8258605Test\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id=classes\n+ * @test\n@@ -40,9 +40,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8261511\n- * @summary jextract does not generate accessor for MemorySegement typed values\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -l Test8261511 -t test.jextract.test8261511 test8261511.h\n- * @build Test8261511\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test8261511\n- *\/\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=sources\n+ * @test\n@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextractSources -l Test8281764 -t test.jextract.test8281764 test8281764.h\n+ * @run main\/othervm JtregJextract -l Test8281764 -t test.jextract.test8281764 test8281764.h\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @test id=sources\n+ * @test\n@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextractSources -l Test8282235 -t test.jextract.test8282235 test8282235.h\n+ * @run main\/othervm JtregJextract -l Test8282235 -t test.jextract.test8282235 test8282235.h\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @test id=classes\n-  * @library \/lib\n+ * @test\n+ * @library \/lib\n@@ -38,7 +38,0 @@\n- \/*\n- * @test id=sources\n-  * @library \/lib\n- * @run main\/othervm JtregJextractSources -l FuncPtr -t test.jextract.fp funcPtr.h\n- * @build LibFuncPtrTest\n- * @run testng\/othervm LibFuncPtrTest\n- *\/\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id=classes\n+ * @test\n@@ -39,7 +39,0 @@\n-\/*\n- * @test id=sources\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.redef redef.h\n- * @build TestGlobalRedefinition\n- * @run testng\/othervm -Dforeign.restricted=permit TestGlobalRedefinition\n- *\/\n","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id=classes\n+ * @test\n@@ -39,9 +39,0 @@\n-\/*\n- * @test id=sources\n- * @bug 8259473\n- * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.testLinkageErrors testLinkageErrors.h\n- * @build TestLinkageErrors\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLinkageErrors\n- *\/\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @test id=classes\n+ * @test\n@@ -43,8 +43,0 @@\n-\/*\n- * @test id=sources\n- *\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.printf -l Printf printf.h\n- * @build TestPrintf\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestPrintf\n- *\/\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @test id=classes\n+ * @test\n@@ -43,10 +43,0 @@\n-\n-\/*\n- * @test id=sources\n- * @library \/lib\n- *\n- * @run main\/othervm JtregJextractSources -l Struct -t test.jextract.struct struct.h\n- * @build LibStructTest\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibStructTest\n- *\/\n-\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.IOException;\n@@ -26,0 +25,1 @@\n+import java.io.IOException;\n@@ -28,1 +28,1 @@\n-import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n@@ -32,1 +32,1 @@\n-import java.util.Arrays;\n+import java.util.List;\n@@ -36,0 +36,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -37,3 +39,1 @@\n-import org.openjdk.jextract.JextractTool;\n-\n-import java.util.Date;\n+import testlib.TestUtils;\n@@ -41,0 +41,1 @@\n+import org.openjdk.jextract.JextractTool;\n@@ -45,0 +46,2 @@\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+            .orElseThrow(() ->  new RuntimeException(\"javac tool not found\"));\n@@ -49,4 +52,0 @@\n-    JtregJextract() {\n-        this(null, null);\n-    }\n-\n@@ -54,5 +53,2 @@\n-        inputDir = (input != null) ? input :\n-                Paths.get(System.getProperty(\"test.src\", \".\"));\n-        outputDir = (output != null) ? output :\n-                Paths.get(System.getProperty(\"test.classes\", \".\"));\n-\n+        inputDir = input;\n+        outputDir = output;\n@@ -61,1 +57,1 @@\n-    protected String[] processArgs(String... args) {\n+    private String[] processArgs(String... args) {\n@@ -65,1 +61,0 @@\n-        jextrOpts.clear();\n@@ -110,1 +105,1 @@\n-    protected int jextract(String... options) {\n+    private void jextract(String... options) {\n@@ -116,1 +111,1 @@\n-                System.err.println(writer.toString());\n+                System.err.println(writer);\n@@ -119,1 +114,0 @@\n-            return result;\n@@ -129,3 +123,17 @@\n-    public static int main(String[] args) {\n-        JtregJextract jj =  new JtregJextract();\n-        return jj.jextract(args);\n+    private static Path getJextractSourcePath() {\n+        Path testSrc = Path.of(System.getProperty(\"test.file\"));\n+        return Path.of(testSrc.toFile().getName() + \"_sources\");\n+    }\n+\n+    public static int main(String[] args) throws IOException {\n+        System.err.println(\"jextract\");\n+        Path sourcePath = getJextractSourcePath();\n+        JtregJextract jj =  new JtregJextract(\n+            Paths.get(System.getProperty(\"test.src\", \".\")),\n+            sourcePath);\n+        jj.jextract(args);\n+\n+        Path outputDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n+\n+        TestUtils.compile(sourcePath, outputDir);\n+        return 0;\n","filename":"test\/lib\/JtregJextract.java","additions":32,"deletions":24,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.io.UncheckedIOException;\n-import java.lang.reflect.Array;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.spi.ToolProvider;\n-import java.util.stream.Collectors;\n-\n-import org.openjdk.jextract.JextractTool;\n-\n-public class JtregJextractSources {\n-\n-    private static final ToolProvider JEXTRACT_TOOL = new JextractTool.JextractToolProvider();\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() ->\n-                    new RuntimeException(\"javac tool not found\")\n-            );\n-\n-    private static Path getJextractSourcePath() {\n-        Path testSrc = Path.of(System.getProperty(\"test.file\"));\n-        return Path.of(testSrc.toFile().getName() + \"_sources\");\n-    }\n-\n-    public static int main(String[] args) throws IOException {\n-        System.err.println(\"jextract --source mode\");\n-        Path sourcePath = getJextractSourcePath();\n-        JtregJextract jj =  new JtregJextract(null, sourcePath);\n-        String[] newArgs = new String[args.length + 1];\n-        newArgs[0] = \"--source\";\n-        System.arraycopy(args, 0, newArgs, 1, args.length);\n-        jj.jextract(newArgs);\n-\n-        Path outputDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n-\n-        List<String> files = Files.find(sourcePath.toAbsolutePath(), 999, (path, ignored) -> path.toString().endsWith(\".java\"))\n-                .map(p -> p.toAbsolutePath().toString())\n-                .collect(Collectors.toList());\n-\n-        StringWriter writer = new StringWriter();\n-        PrintWriter pw = new PrintWriter(writer);\n-\n-        try {\n-            System.err.println(\"compiling jextracted sources @ \" + sourcePath.toAbsolutePath());\n-            List<String> commands = new ArrayList<>();\n-            commands.add(\"-parameters\");\n-            commands.add(\"--source=22\");\n-            commands.add(\"--enable-preview\");\n-            commands.add(\"-d\");\n-            commands.add(outputDir.toAbsolutePath().toString());\n-            commands.addAll(files);\n-            int result = JAVAC_TOOL.run(pw, pw, commands.toArray(new String[0]));\n-            if (result != 0) {\n-                System.err.println(writer.toString());\n-                throw new RuntimeException(\"javac returns non-zero value\");\n-            }\n-            return result;\n-        } catch (Throwable t) {\n-            throw new AssertionError(t);\n-        }\n-    }\n-}\n","filename":"test\/lib\/JtregJextractSources.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+\n@@ -45,1 +46,0 @@\n-import org.openjdk.jextract.Type;\n@@ -142,2 +142,16 @@\n-    protected static JextractResult run(Object... options) {\n-        return run(Arrays.stream(options).map(Objects::toString).toArray(String[]::new));\n+    protected static JextractResult runAndCompile(Path outputDir, Object... options) {\n+        return runAndCompile(outputDir, Arrays.stream(options).map(Objects::toString).toArray(String[]::new));\n+    }\n+\n+    protected static JextractResult runAndCompile(Path outputDir, String... options) {\n+        JextractResult jextractResult = run(outputDir, options).checkSuccess();\n+        TestUtils.compile(outputDir, outputDir);\n+        return jextractResult;\n+    }\n+\n+    protected static JextractResult run(Path outputDir, String... options) {\n+        String[] extendedOptions = new String[options.length + 2];\n+        extendedOptions[0] = \"--output\";\n+        extendedOptions[1] = outputDir.toString();\n+        System.arraycopy(options, 0, extendedOptions, 2, options.length);\n+        return runNoOuput(extendedOptions);\n@@ -146,1 +160,1 @@\n-    protected static JextractResult run(String... options) {\n+    protected static JextractResult runNoOuput(String... options) {\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n@@ -32,0 +34,2 @@\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n@@ -35,0 +39,3 @@\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+        .orElseThrow(() ->  new RuntimeException(\"javac tool not found\"));\n+\n@@ -48,0 +55,28 @@\n+        }\n+    }\n+\n+    public static void compile(Path sourcePath, Path outputDir) {\n+        List<String> files;\n+        try (Stream<Path> filesStream = Files.find(sourcePath.toAbsolutePath(), 999, (path, ignored) -> path.toString().endsWith(\".java\"))) {\n+            files = filesStream.map(p -> p.toAbsolutePath().toString()).toList();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        StringWriter writer = new StringWriter();\n+        PrintWriter pw = new PrintWriter(writer);\n+\n+        try {\n+            System.err.println(\"compiling jextracted sources @ \" + sourcePath.toAbsolutePath());\n+            List<String> commands = new ArrayList<>();\n+            commands.add(\"-parameters\");\n+            commands.add(\"-d\");\n+            commands.add(outputDir.toAbsolutePath().toString());\n+            commands.addAll(files);\n+            int result = JAVAC_TOOL.run(pw, pw, commands.toArray(new String[0]));\n+            if (result != 0) {\n+                System.err.println(writer);\n+                throw new RuntimeException(\"javac returns non-zero value\");\n+            }\n+        } catch (Throwable t) {\n+            throw new AssertionError(t);\n","filename":"test\/lib\/testlib\/TestUtils.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,2 +57,2 @@\n-        run(\"--output\", getOutputFilePath(\"badBitfieldsGen\").toString(),\n-                getInputFilePath(\"badBitfields.h\").toString()).checkSuccess();\n+        runAndCompile(getOutputFilePath(\"badBitfieldsGen\"),\n+                getInputFilePath(\"badBitfields.h\").toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/BadBitfieldTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,1 @@\n-import java.util.function.Predicate;\n-import java.util.stream.Stream;\n-import java.lang.foreign.GroupLayout;\n-import java.lang.foreign.MemorySegment;\n+\n@@ -52,1 +49,1 @@\n-        run( \"--output\", dirPath.toString(), getInputFilePath(\"constants.h\").toString()).checkSuccess();\n+        runAndCompile(dirPath, getInputFilePath(\"constants.h\").toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        run(\n+        runAndCompile(output,\n@@ -42,2 +42,1 @@\n-            \"--output\", output,\n-            input).checkSuccess();\n+            input);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/IncompleteArrayTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,4 +42,4 @@\n-        run().checkFailure(OPTION_ERROR); \/\/ no options\n-        run(\"--help\").checkSuccess();\n-        run(\"-h\").checkSuccess();\n-        run(\"-?\").checkSuccess();\n+        runNoOuput().checkFailure(OPTION_ERROR); \/\/ no options\n+        runNoOuput(\"--help\").checkSuccess();\n+        runNoOuput(\"-h\").checkSuccess();\n+        runNoOuput(\"-?\").checkSuccess();\n@@ -50,1 +50,1 @@\n-        run(\"--version\").checkSuccess();\n+        runNoOuput(\"--version\").checkSuccess();\n@@ -56,1 +56,1 @@\n-        run(\"@non_existent_args\")\n+        runNoOuput(\"@non_existent_args\")\n@@ -64,1 +64,1 @@\n-        run(getInputFilePath(\"non_existent.h\").toString())\n+        runNoOuput(getInputFilePath(\"non_existent.h\").toString())\n@@ -72,1 +72,1 @@\n-        run(getInputFilePath(\"non_existent_includer.h\").toString())\n+        runNoOuput(getInputFilePath(\"non_existent_includer.h\").toString())\n@@ -79,1 +79,1 @@\n-        run(getInputFilePath(\"directory.h\").toString())\n+        runNoOuput(getInputFilePath(\"directory.h\").toString())\n@@ -87,1 +87,1 @@\n-        run(getInputFilePath(\"illegal_decls.h\").toString())\n+        runNoOuput(getInputFilePath(\"illegal_decls.h\").toString())\n@@ -99,1 +99,1 @@\n-            run(getInputFilePath(\"unsupported_lang.h\").toString())\n+            runNoOuput(getInputFilePath(\"unsupported_lang.h\").toString())\n@@ -111,1 +111,1 @@\n-        run(\"--output\", helloOutput.toString(), helloH.toString()).checkSuccess();\n+        runAndCompile(helloOutput, helloH.toString());\n@@ -130,1 +130,1 @@\n-        run(\"--output\", helloOutput.toString(),\n+        runAndCompile(helloOutput,\n@@ -132,1 +132,1 @@\n-            getInputFilePath(\"hello.h\").toString()).checkSuccess();\n+            getInputFilePath(\"hello.h\").toString());\n@@ -144,2 +144,1 @@\n-        run(targetPkgOption, \"com.acme\", \"--output\",\n-            helloOutput.toString(), helloH.toString()).checkSuccess();\n+        runAndCompile(helloOutput, targetPkgOption, \"com.acme\", helloH.toString());\n@@ -175,2 +174,1 @@\n-        run(\"--header-class-name\", \"MyHello\", \"-t\", \"com.acme\", \"--output\",\n-            helloOutput.toString(), helloH.toString()).checkSuccess();\n+        runAndCompile(helloOutput, \"--header-class-name\", \"MyHello\", \"-t\", \"com.acme\", helloH.toString());\n@@ -196,2 +194,2 @@\n-        run(\"-I\", includerH.getParent().resolve(\"inc\").toString(),\n-            \"--output\", includerOutput.toString(), includerH.toString()).checkSuccess();\n+        runAndCompile(includerOutput, \"-I\", includerH.getParent().resolve(\"inc\").toString(),\n+            includerH.toString());\n@@ -211,2 +209,2 @@\n-        run(\"--include-dir\", includerH.getParent().resolve(\"inc\").toString(),\n-            \"--output\", includerOutput.toString(), includerH.toString()).checkSuccess();\n+        runAndCompile(includerOutput, \"--include-dir\", includerH.getParent().resolve(\"inc\").toString(),\n+            includerH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.foreign.GroupLayout;\n@@ -33,1 +32,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -45,1 +43,1 @@\n-        run(\"--output\", repeatedDeclsOutput.toString(), repeatedDeclsH.toString()).checkSuccess();\n+        runAndCompile(repeatedDeclsOutput, repeatedDeclsH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903158.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n@@ -52,1 +52,1 @@\n-        run(\"-D\", \"FOO\", \"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, \"-D\", \"FOO\", outputH.toString());\n@@ -66,1 +66,1 @@\n-        run(\"--define-macro\", \"FOO\", \"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, \"--define-macro\", \"FOO\", outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903164.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test7903237Output.toString(), test7903237H.toString()).checkSuccess();\n+        runAndCompile(test7903237Output, test7903237H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903237.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.nio.file.Path;\n@@ -179,2 +178,1 @@\n-        run(\"--source\", \"--output\",\n-            output.toString(), outputH.toString()).checkSuccess();\n+        run(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test7903285Output.toString(), test7903285H.toString()).checkSuccess();\n+        runAndCompile(test7903285Output, test7903285H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903285.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test7903339Output.toString(), test7903339H.toString()).checkSuccess();\n+        runAndCompile(test7903339Output, test7903339H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903339.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        run(\"--output\", anonenumOutput.toString(), anonenumH.toString()).checkSuccess();\n+        runAndCompile(anonenumOutput, anonenumH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240181.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", exportsOutput.toString(), exportsH.toString()).checkSuccess();\n+        runAndCompile(exportsOutput, exportsH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240657.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.lang.reflect.Field;\n@@ -69,1 +68,1 @@\n-        run(\"--output\", floatConstsOutput.toString(), floatConstsH.toString()).checkSuccess();\n+        runAndCompile(floatConstsOutput, floatConstsH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240752.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.foreign.GroupLayout;\n@@ -44,1 +43,1 @@\n-        run(\"--output\", nameCollisionOutput.toString(), nameCollisionH.toString()).checkSuccess();\n+        runAndCompile(nameCollisionOutput, nameCollisionH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", typedefsOutput.toString(), typedefsH.toString()).checkSuccess();\n+        runAndCompile(typedefsOutput, typedefsH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8244412.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        run(\"--output\", test8245767Output.toString(), test8245767H.toString()).checkSuccess();\n+        runAndCompile(test8245767Output, test8245767H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8245767.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.foreign.MemorySegment;\n+\n@@ -39,1 +39,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test8248474Output.toString(), test8248474H.toString()).checkSuccess();\n+        runAndCompile(test8248474Output, test8248474H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248474.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.foreign.MemorySegment;\n+\n@@ -42,1 +42,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test8258223Output.toString(), test8258223H.toString()).checkSuccess();\n+        runAndCompile(test8258223Output, test8258223H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258223.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test8258405Output.toString(), test8258405H.toString()).checkSuccess();\n+        runAndCompile(test8258405Output, test8258405H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258405.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-            run(\"--output\", test8260344Output.toString(), test8260344H.toString()).checkSuccess();\n+            runAndCompile(test8260344Output, test8260344H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260344.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.foreign.MemorySegment;\n+\n@@ -42,1 +42,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.foreign.MemorySegment;\n+\n@@ -38,1 +38,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n@@ -54,1 +54,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n@@ -73,1 +73,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        run(\"--output\", test8261893Output.toString(), test8261893H.toString()).checkSuccess();\n+        runAndCompile(test8261893Output, test8261893H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261893.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.lang.reflect.Method;\n@@ -42,1 +41,1 @@\n-        run(\"--output\", test8262117Output.toString(), test8262117H.toString()).checkSuccess();\n+        runAndCompile(test8262117Output, test8262117H.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262117.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262733.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262825.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262851.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-            run(\"--output\", getOutputFilePath(\"attributedPointerTypedef\").toString(),\n-                getInputFilePath(\"attributedPointerTypedef.h\").toString()).checkSuccess();\n+            runAndCompile(getOutputFilePath(\"attributedPointerTypedef\"),\n+                getInputFilePath(\"attributedPointerTypedef.h\").toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestAttributedPointerTypedef.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.foreign.Arena;\n+\n@@ -213,1 +213,1 @@\n-        run(\n+        runAndCompile(outputDir,\n@@ -215,1 +215,0 @@\n-            \"--output\", outputDir,\n@@ -218,1 +217,1 @@\n-        ).checkSuccess();\n+        );\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            run(\"--output\", filterOutput.toString(), expectedKind.filterOption, expectedKind.symbolName, filterH.toString()).checkSuccess();\n+            runAndCompile(filterOutput, expectedKind.filterOption, expectedKind.symbolName, filterH.toString());\n@@ -70,1 +70,1 @@\n-            run(\"--dump-includes\", includes.toString(), filterH.toString()).checkSuccess();\n+            runNoOuput(\"--dump-includes\", includes.toString(), filterH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        run(\"--output\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n+        runAndCompile(nestedOutput, nestedH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        runAndCompile(outputPath, headerFile.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestTypedefIsFunctionProto.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        run(\"--output\", uniondeclOutput.toString(), uniondeclH.toString()).checkSuccess();\n+        runAndCompile(uniondeclOutput, uniondeclH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/UniondeclTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,1 @@\n-        run(\"--output\",\n-            output.toString(), outputH.toString()).checkSuccess();\n+        runAndCompile(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedAnonOffset\/TestNestedAnonOffset.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,1 @@\n-        result = run(\"--source\", \"--output\",\n-            output.toString(), outputH.toString()).checkSuccess();\n+        result = run(output, outputH.toString());\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/unsupported\/TestUnsupportedTypes.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}