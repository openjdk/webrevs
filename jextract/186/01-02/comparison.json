{"files":[{"patch":"@@ -3,1 +3,1 @@\n-`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n+`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/434). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n@@ -5,1 +5,1 @@\n-### Getting started\n+### Getting jextract\n@@ -7,1 +7,1 @@\n-`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable build of the [panama\/foreign repository](https:\/\/github.com\/openjdk\/panama-foreign) is also required.\n+Pre-built binaries for jextract are periodically released [here](https:\/\/jdk.java.net\/jextract). These binaries are built from the `master` branch of this repo, and target the foreign memory access and function API in the latest mainline JDK (for which binaries can be found [here](https:\/\/jdk.java.net)).\n@@ -9,20 +9,1 @@\n-> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n-> \n-> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by chercking out the appropriate branch.\n-> For example, to build a jextract tool which works against JDK 18:\n-> \n-> `git checkout jdk18`\n-> \n-> Over time, new branches will be added, each targeting a specific JDK version.\n-> <\/details>\n-\n-`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n-\n-(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n-supports JDK 18. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n-\n-\n-\n-```sh\n-$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> clean verify\n-```\n+Alternatively, to build jextract from the latest sources (which include all the latest updates and fixes) please refer to the [building](#building--testing) section below.\n@@ -30,29 +11,1 @@\n-\n-> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n-> \n-> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n-> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n->\n-> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n-> \n-> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n-> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n-> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n-> \n-> <\/details>\n-\n-After building, there should be a new `jextract` folder under `build`.\n-To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n-\n-```sh\n-$ build\/jextract\/bin\/jextract\n-Expected a header file\n-```\n-\n-The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n-\n-```sh\n-$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n-```\n-\n-Note however that running `jtreg` task requires `cmake` to be available on the `PATH`.\n+---\n@@ -77,1 +30,1 @@\n-jextract --source -t org.jextract point.h\n+jextract -t org.jextract point.h\n@@ -127,1 +80,1 @@\n-| `-D --define-macro <macro>=<value>`                          | define <macro> to <value> (or 1 if <value> omitted)          |\n+| `-D --define-macro <macro>=<value>`                          | define `<macro>` to `<value>` (or 1 if `<value>` omitted)          |\n@@ -133,1 +86,0 @@\n-| `--source`                                                   | generate java sources instead of classfiles                  |\n@@ -164,1 +116,1 @@\n-jextract -t org.jextract --source @includes.txt point.h\n+jextract -t org.jextract @includes.txt point.h\n@@ -169,1 +121,1 @@\n-#### Tracing support\n+---\n@@ -171,3 +123,1 @@\n-It is sometimes useful to inspect the parameters passed to a native call, especially when diagnosing application\n-bugs and\/or crashes. The code generated by the `jextract` tool supports *tracing* of native calls, that is, parameters\n-passed to native calls can be printed on the standard output.\n+### Building & Testing\n@@ -175,2 +125,1 @@\n-To enable the tracing support, just pass the `-Djextract.trace.downcalls=true` flag to the launcher used to start the application.\n-Below we show an excerpt of the output when running the [OpenGL example](samples\/opengl) with tracing support enabled:\n+`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/434), so a suitable [jdk 22 distribution](https:\/\/jdk.java.net\/22\/) is also required.\n@@ -178,0 +127,41 @@\n+> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n+>\n+> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by checking out the appropriate branch.\n+> For example, to build a jextract tool which works against JDK 21:\n+>\n+> `git checkout jdk21`\n+>\n+> Over time, new branches will be added, each targeting a specific JDK version.\n+> <\/details>\n+\n+`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n+\n+(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n+supports JDK 21. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n+\n+\n+\n+```sh\n+$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> clean verify\n+```\n+\n+\n+> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n+>\n+> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n+> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n+>\n+> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n+>\n+> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n+> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n+> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n+>\n+> <\/details>\n+\n+After building, there should be a new `jextract` folder under `build`.\n+To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n+\n+```sh\n+$ build\/jextract\/bin\/jextract\n+Expected a header file\n@@ -179,22 +169,7 @@\n-glutInit(MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 }, MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 })\n-glutInitDisplayMode(18)\n-glutInitWindowSize(900, 900)\n-glutCreateWindow(MemorySegment{ address: 0x7fa6b03f8e70, byteSize: 14 })\n-glClearColor(0.0, 0.0, 0.0, 0.0)\n-glShadeModel(7425)\n-glLightfv(16384, 4611, MemorySegment{ address: 0x7fa6b03de8d0, byteSize: 16 })\n-glLightfv(16384, 4608, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n-glLightfv(16384, 4609, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n-glLightfv(16384, 4610, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n-glMaterialfv(1028, 5633, MemorySegment{ address: 0x7fa6b0634860, byteSize: 4 })\n-glEnable(2896)\n-glEnable(16384)\n-glEnable(2929)\n-glutDisplayFunc(MemorySegment{ address: 0x7fa6a002e820, byteSize: 0 })\n-glutIdleFunc(MemorySegment{ address: 0x7fa6a015a620, byteSize: 0 })\n-glutMainLoop()\n-glClear(16640)\n-glPushMatrix()\n-glRotatef(-20.0, 1.0, 1.0, 0.0)\n-glRotatef(0.0, 0.0, 1.0, 0.0)\n-glutSolidTeapot(0.5)\n+\n+#### Testing\n+\n+The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n+\n+```sh\n+$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n@@ -203,0 +178,1 @@\n+Note: running `jtreg` task requires `cmake` to be available on the `PATH`.\n","filename":"README.md","additions":60,"deletions":84,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-         \"--add-modules=org.openjdk.jextract,jdk.compiler,jdk.zipfs\",\n+         \"--add-modules=org.openjdk.jextract\",\n","filename":"build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import org.openjdk.jextract.impl.DuplicateFilter;\n+import org.openjdk.jextract.impl.IncludeFilter;\n@@ -32,1 +34,2 @@\n-import org.openjdk.jextract.impl.CodeGenerator;\n+import org.openjdk.jextract.impl.NameMangler;\n+import org.openjdk.jextract.impl.OutputFactory;\n@@ -35,1 +38,1 @@\n-import org.openjdk.jextract.impl.Writer;\n+import org.openjdk.jextract.impl.UnsupportedFilter;\n@@ -41,0 +44,1 @@\n+import java.nio.file.FileAlreadyExistsException;\n@@ -120,1 +124,1 @@\n-        return List.of(CodeGenerator.generate(decl, headerName, targetPkg, new IncludeHelper(), libNames, errStream));\n+        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libNames, errStream));\n@@ -126,1 +130,13 @@\n-        return List.of(CodeGenerator.generate(decl, headerName, targetPkg, includeHelper, libNames, errStream));\n+        return List.of(generate(decl, headerName, targetPkg, includeHelper, libNames, errStream));\n+    }\n+\n+    private static JavaSourceFile[] generate(Declaration.Scoped decl, String headerName,\n+                                            String targetPkg, IncludeHelper includeHelper,\n+                                            List<String> libNames, PrintWriter errStream) {\n+        var transformedDecl = Stream.of(decl)\n+                .map(new IncludeFilter(includeHelper)::scan)\n+                .map(new DuplicateFilter()::scan)\n+                .map(new NameMangler(headerName)::scan)\n+                .map(new UnsupportedFilter(errStream)::scan)\n+                .findFirst().get();\n+        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libNames);\n@@ -134,5 +150,30 @@\n-    public static void write(Path dest, List<JavaSourceFile> files) throws UncheckedIOException {\n-        try {\n-            new Writer(dest, files).write();\n-        } catch (IOException ex) {\n-            throw new UncheckedIOException(ex);\n+    public static void write(Path dest, List<JavaSourceFile> files) throws IOException {\n+        Path destDir = createOutputDir(dest);\n+        for (var entry : files) {\n+            String packagePath = packageNameToPath(entry.packageName());\n+            Path fullPath = destDir.resolve(packagePath, entry.className() + \".java\").normalize();\n+            Path dir = fullPath.getParent();\n+            \/\/ In case the folder exist and is a link to a folder, this should be OK\n+            \/\/ Case in point, \/tmp on MacOS link to \/private\/tmp\n+            if (Files.exists(dir)) {\n+                if (!Files.isDirectory(dir)) {\n+                    throw new FileAlreadyExistsException(dir.toAbsolutePath().toString());\n+                }\n+            } else {\n+                Files.createDirectories(fullPath.getParent());\n+            }\n+            Files.write(fullPath, List.of(entry.contents()));\n+        }\n+    }\n+\n+    private static String packageNameToPath(String packageName) {\n+        return packageName.isEmpty() ? \"\" : packageName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n+    }\n+\n+    private static Path createOutputDir(Path dest) throws IOException {\n+        Path absDest = dest.toAbsolutePath();\n+        if (!Files.exists(absDest)) {\n+            Files.createDirectories(absDest);\n+        }\n+        if (!Files.isDirectory(absDest)) {\n+            throw new IOException(\"Not a directory: \" + dest);\n@@ -140,0 +181,1 @@\n+        return absDest;\n@@ -493,6 +535,9 @@\n-                write(output, files);\n-            }\n-        } catch (UncheckedIOException uioe) {\n-            err.println(uioe.getMessage());\n-            if (JextractTool.DEBUG) {\n-                uioe.printStackTrace(err);\n+                try {\n+                    write(output, files);\n+                } catch (IOException e) {\n+                    err.println(e.getMessage());\n+                    if (JextractTool.DEBUG) {\n+                        e.printStackTrace(err);\n+                    }\n+                    return OUTPUT_ERROR;\n+                }\n@@ -500,1 +545,0 @@\n-            return OUTPUT_ERROR;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":60,"deletions":16,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.impl;\n-\n-import org.openjdk.jextract.Declaration;\n-import org.openjdk.jextract.JavaSourceFile;\n-\n-import java.io.PrintWriter;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-public final class CodeGenerator {\n-    private CodeGenerator() {}\n-\n-    public static JavaSourceFile[] generate(Declaration.Scoped decl, String headerName,\n-                                            String targetPkg, IncludeHelper includeHelper,\n-                                            List<String> libNames, PrintWriter errStream) {\n-        var transformedDecl = Stream.of(decl)\n-                .map(new IncludeFilter(includeHelper)::scan)\n-                .map(new DuplicateFilter()::scan)\n-                .map(new NameMangler(headerName)::scan)\n-                .map(new UnsupportedFilter(errStream)::scan)\n-                .findFirst().get();\n-        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libNames);\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CodeGenerator.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-final class DuplicateFilter implements Declaration.Visitor<Void, Void> {\n+public final class DuplicateFilter implements Declaration.Visitor<Void, Void> {\n@@ -65,1 +65,1 @@\n-    DuplicateFilter() {\n+    public DuplicateFilter() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DuplicateFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-final class IncludeFilter implements Declaration.Visitor<Void, Declaration> {\n+public final class IncludeFilter implements Declaration.Visitor<Void, Declaration> {\n@@ -36,1 +36,1 @@\n-    IncludeFilter(IncludeHelper includeHelper) {\n+    public IncludeFilter(IncludeHelper includeHelper) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-final class NameMangler implements Declaration.Visitor<Void, Declaration> {\n+public final class NameMangler implements Declaration.Visitor<Void, Declaration> {\n@@ -116,1 +116,1 @@\n-    NameMangler(String headerName) {\n+    public NameMangler(String headerName) {\n@@ -121,1 +121,1 @@\n-    Declaration.Scoped scan(Declaration.Scoped header) {\n+    public Declaration.Scoped scan(Declaration.Scoped header) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-    static JavaSourceFile[] generateWrapped(Declaration.Scoped decl,\n-                                            String pkgName, List<String> libraryNames) {\n+    public static JavaSourceFile[] generateWrapped(Declaration.Scoped decl,\n+                                                   String pkgName, List<String> libraryNames) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-package org.openjdk.jextract.impl;\n-\n-import org.openjdk.jextract.JavaSourceFile;\n-\n-import java.io.IOException;\n-import java.nio.file.FileAlreadyExistsException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-public final class Writer {\n-    private final List<JavaSourceFile> files;\n-    private final Path dest;\n-\n-    public Writer(Path dest, List<JavaSourceFile> files) {\n-        this.files = files;\n-        this.dest = dest;\n-    }\n-\n-    public void write() throws IOException {\n-        Path destDir = createOutputDir();\n-        for (var entry : files) {\n-            String packagePath = packageNameToPath(entry.packageName());\n-            Path fullPath = destDir.resolve(packagePath, entry.className() + \".java\").normalize();\n-            Path dir = fullPath.getParent();\n-            \/\/ In case the folder exist and is a link to a folder, this should be OK\n-            \/\/ Case in point, \/tmp on MacOS link to \/private\/tmp\n-            if (Files.exists(dir)) {\n-                if (!Files.isDirectory(dir)) {\n-                    throw new FileAlreadyExistsException(dir.toAbsolutePath().toString());\n-                }\n-            } else {\n-                Files.createDirectories(fullPath.getParent());\n-            }\n-            Files.write(fullPath, List.of(entry.contents()));\n-        }\n-    }\n-\n-    private static String packageNameToPath(String packageName) {\n-        return packageName.isEmpty() ? \"\" : packageName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n-    }\n-\n-    private Path createOutputDir() throws IOException {\n-        Path absDest = dest.toAbsolutePath();\n-        if (!Files.exists(absDest)) {\n-            Files.createDirectories(absDest);\n-        }\n-        if (!Files.isDirectory(absDest)) {\n-            throw new IOException(\"Not a directory: \" + dest);\n-        }\n-        return absDest;\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Writer.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestGlobal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestStruct.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/dedup\/TestDedup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedInsideAnon\/TestNestedInsideAnon.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedStructAccess\/TestNestedStructAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/TestNestedStructTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesNames.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesUnsupported.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderStruct.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/reinterpret\/TestReinterpret.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test7903347\/LibTest7903347Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8239918\/LibTest8239918Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8240373\/Lib8240373Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8249757\/LibTest8249757Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8253390\/LibTest8253390Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @test id\n+ * @test\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-            commands.add(\"--source=22\");\n-            commands.add(\"--enable-preview\");\n","filename":"test\/lib\/testlib\/TestUtils.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}