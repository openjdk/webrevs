{"files":[{"patch":"@@ -3,1 +3,1 @@\n-`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/434). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n+`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/454). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n@@ -121,0 +121,34 @@\n+#### Tracing support\n+\n+It is sometimes useful to inspect the parameters passed to a native call, especially when diagnosing application\n+bugs and\/or crashes. The code generated by the `jextract` tool supports *tracing* of native calls, that is, parameters\n+passed to native calls can be printed on the standard output.\n+\n+To enable the tracing support, just pass the `-Djextract.trace.downcalls=true` flag to the launcher used to start the application.\n+Below we show an excerpt of the output when running the [OpenGL example](samples\/opengl) with tracing support enabled:\n+\n+```\n+glutInit(MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 }, MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 })\n+glutInitDisplayMode(18)\n+glutInitWindowSize(900, 900)\n+glutCreateWindow(MemorySegment{ address: 0x7fa6b03f8e70, byteSize: 14 })\n+glClearColor(0.0, 0.0, 0.0, 0.0)\n+glShadeModel(7425)\n+glLightfv(16384, 4611, MemorySegment{ address: 0x7fa6b03de8d0, byteSize: 16 })\n+glLightfv(16384, 4608, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glLightfv(16384, 4609, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glLightfv(16384, 4610, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glMaterialfv(1028, 5633, MemorySegment{ address: 0x7fa6b0634860, byteSize: 4 })\n+glEnable(2896)\n+glEnable(16384)\n+glEnable(2929)\n+glutDisplayFunc(MemorySegment{ address: 0x7fa6a002e820, byteSize: 0 })\n+glutIdleFunc(MemorySegment{ address: 0x7fa6a015a620, byteSize: 0 })\n+glutMainLoop()\n+glClear(16640)\n+glPushMatrix()\n+glRotatef(-20.0, 1.0, 1.0, 0.0)\n+glRotatef(0.0, 0.0, 1.0, 0.0)\n+glutSolidTeapot(0.5)\n+```\n+\n","filename":"README.md","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}