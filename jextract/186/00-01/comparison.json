{"files":[{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract;\n+\n+\/**\n+ * A class representing a Java source file.\n+ *\n+ * @param className the name of the top-level public class in this source file.\n+ * @param packageName the name of the package the top-level class in this source file resides in.\n+ * @param contents the contents of the source file.\n+ *\/\n+public record JavaSourceFile(String className, String packageName, String contents) {\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JavaSourceFile.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -37,1 +37,0 @@\n-import javax.tools.JavaFileObject;\n@@ -119,1 +118,1 @@\n-    public static List<JavaFileObject> generate(Declaration.Scoped decl, String headerName,\n+    public static List<JavaSourceFile> generate(Declaration.Scoped decl, String headerName,\n@@ -124,1 +123,1 @@\n-    private static List<JavaFileObject> generateInternal(Declaration.Scoped decl, String headerName,\n+    private static List<JavaSourceFile> generateInternal(Declaration.Scoped decl, String headerName,\n@@ -131,1 +130,1 @@\n-     * Write resulting {@link JavaFileObject} instances into specified destination path.\n+     * Write resulting {@link JavaSourceFile} instances into specified destination path.\n@@ -133,1 +132,1 @@\n-     * @param files the {@link JavaFileObject} instances to be written.\n+     * @param files the {@link JavaSourceFile} instances to be written.\n@@ -135,1 +134,1 @@\n-    public static void write(Path dest, List<JavaFileObject> files) throws UncheckedIOException {\n+    public static void write(Path dest, List<JavaSourceFile> files) throws UncheckedIOException {\n@@ -137,1 +136,1 @@\n-            new Writer(dest, files).writeAll();\n+            new Writer(dest, files).write();\n@@ -460,1 +459,1 @@\n-        List<JavaFileObject> files = null;\n+        List<JavaSourceFile> files;\n@@ -552,0 +551,1 @@\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -32,1 +33,0 @@\n-import javax.tools.JavaFileObject;\n@@ -37,1 +37,1 @@\n-    public static JavaFileObject[] generate(Declaration.Scoped decl, String headerName,\n+    public static JavaSourceFile[] generate(Declaration.Scoped decl, String headerName,\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CodeGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -29,1 +30,0 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.JavaFunctionalInterfaceName;\n@@ -33,1 +33,0 @@\n-import javax.tools.JavaFileObject;\n@@ -36,1 +35,0 @@\n-import java.util.Optional;\n@@ -47,2 +45,2 @@\n-    static JavaFileObject[] generateWrapped(Declaration.Scoped decl,\n-                String pkgName, List<String> libraryNames) {\n+    static JavaSourceFile[] generateWrapped(Declaration.Scoped decl,\n+                                            String pkgName, List<String> libraryNames) {\n@@ -59,1 +57,1 @@\n-    JavaFileObject[] generate(Declaration.Scoped decl) {\n+    JavaSourceFile[] generate(Declaration.Scoped decl) {\n@@ -62,2 +60,2 @@\n-        List<JavaFileObject> files = new ArrayList<>(toplevelBuilder.toFiles());\n-        return files.toArray(new JavaFileObject[0]);\n+        List<JavaSourceFile> files = new ArrayList<>(toplevelBuilder.toFiles());\n+        return files.toArray(JavaSourceFile[]::new);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import javax.tools.JavaFileObject;\n+import org.openjdk.jextract.JavaSourceFile;\n+\n@@ -97,2 +98,2 @@\n-    public JavaFileObject toFile(String suffix, Function<String, String> finisher) {\n-        return Utils.fileFromString(packageName, STR.\"\\{className}\\{suffix}\", finisher.apply(sb.toString()));\n+    public JavaSourceFile toFile(String suffix, Function<String, String> finisher) {\n+        return new JavaSourceFile(STR.\"\\{className}\\{suffix}\", packageName, finisher.apply(sb.toString()));\n@@ -101,1 +102,1 @@\n-    public JavaFileObject toFile(Function<String, String> finisher) {\n+    public JavaSourceFile toFile(Function<String, String> finisher) {\n@@ -105,1 +106,1 @@\n-    public JavaFileObject toFile() {\n+    public JavaSourceFile toFile() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -32,1 +33,0 @@\n-import javax.tools.JavaFileObject;\n@@ -36,1 +36,0 @@\n-import java.util.Optional;\n@@ -88,1 +87,1 @@\n-    public List<JavaFileObject> toFiles() {\n+    public List<JavaSourceFile> toFiles() {\n@@ -91,1 +90,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n+        List<JavaSourceFile> files = new ArrayList<>();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jextract.JavaSourceFile;\n@@ -39,2 +40,0 @@\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n@@ -42,1 +41,0 @@\n-import java.io.IOException;\n@@ -48,1 +46,0 @@\n-import java.net.URI;\n@@ -56,14 +53,0 @@\n-    private static URI fileName(String pkgName, String clsName, String extension) {\n-        String pkgPrefix = pkgName.isEmpty() ? \"\" : pkgName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n-        return URI.create(pkgPrefix + clsName + extension);\n-    }\n-\n-    static JavaFileObject fileFromString(String pkgName, String clsName, String contents) {\n-        return new SimpleJavaFileObject(fileName(pkgName, clsName, \".java\"), JavaFileObject.Kind.SOURCE) {\n-            @Override\n-            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n-                return contents;\n-            }\n-        };\n-    }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import javax.tools.JavaFileObject;\n+import org.openjdk.jextract.JavaSourceFile;\n+\n@@ -31,1 +32,0 @@\n-import java.io.InputStream;\n@@ -36,1 +36,0 @@\n-import java.util.stream.Collectors;\n@@ -39,1 +38,1 @@\n-    private final List<? extends JavaFileObject> files;\n+    private final List<JavaSourceFile> files;\n@@ -42,1 +41,1 @@\n-    public Writer(Path dest, List<? extends JavaFileObject> files) {\n+    public Writer(Path dest, List<JavaSourceFile> files) {\n@@ -47,7 +46,1 @@\n-    public void writeAll() throws IOException {\n-        writeClassFiles(resources());\n-        writeClassFiles(classes());\n-        writeSourceFiles();\n-    }\n-\n-    void writeClassFiles(List<JavaFileObject> files) throws IOException {\n+    public void write() throws IOException {\n@@ -56,14 +49,2 @@\n-            String path = entry.getName();\n-            Path fullPath = destDir.resolve(path).normalize();\n-            Files.createDirectories(fullPath.getParent());\n-            try (InputStream is = entry.openInputStream()) {\n-                Files.write(fullPath, is.readAllBytes());\n-            }\n-        }\n-    }\n-\n-    void writeSourceFiles() throws IOException {\n-        Path destDir = createOutputDir();\n-        for (var entry : sources()) {\n-            String srcPath = entry.getName();\n-            Path fullPath = destDir.resolve(srcPath).normalize();\n+            String packagePath = packageNameToPath(entry.packageName());\n+            Path fullPath = destDir.resolve(packagePath, entry.className() + \".java\").normalize();\n@@ -80,1 +61,1 @@\n-            Files.write(fullPath, List.of(entry.getCharContent(false)));\n+            Files.write(fullPath, List.of(entry.contents()));\n@@ -84,16 +65,2 @@\n-    private List<JavaFileObject> sources() {\n-        return files.stream()\n-                .filter(jfo -> jfo.getKind() == JavaFileObject.Kind.SOURCE)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<JavaFileObject> classes() {\n-        return files.stream()\n-                .filter(jfo -> jfo.getKind() == JavaFileObject.Kind.CLASS)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<JavaFileObject> resources() {\n-        return files.stream()\n-                .filter(jfo -> (jfo.getKind() == JavaFileObject.Kind.HTML || jfo.getKind() == JavaFileObject.Kind.OTHER))\n-                .collect(Collectors.toList());\n+    private static String packageNameToPath(String packageName) {\n+        return packageName.isEmpty() ? \"\" : packageName.replaceAll(\"\\\\.\", \"\/\") + \"\/\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Writer.java","additions":10,"deletions":43,"binary":false,"changes":53,"status":"modified"}]}