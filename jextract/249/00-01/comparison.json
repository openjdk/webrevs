{"files":[{"patch":"@@ -99,0 +99,8 @@\n+    protected Path getInputDir() {\n+        return inputDir.toAbsolutePath();\n+    }\n+\n+    protected Path getOutputDir() {\n+        return outputDir.toAbsolutePath();\n+    }\n+\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n@@ -215,12 +217,29 @@\n-        Path stdioOutput = getOutputFilePath(\"stdio\");\n-        runAndCompile(stdioOutput, \"<stdio.h>\");\n-        try(TestUtils.Loader loader = TestUtils.classLoader(stdioOutput)) {\n-            Class<?> cls = loader.loadClass(\"stdio_h\");\n-            Class<?> invokerCls = findNestedClass(cls, \"printf\");\n-            assertNotNull(invokerCls);\n-            \/\/ check a method for \"MethodHandle handle()\"\n-            assertNotNull(findMethod(invokerCls, \"handle\"));\n-            \/\/ check a method for \"FunctionDescriptor descriptor()\"\n-            assertNotNull(findMethod(invokerCls, \"descriptor\"));\n-            \/\/ check a method for \"<invokerCls> invoker(MemoryLayout...)\"\n-            assertNotNull(findMethod(invokerCls, \"makeInvoker\", MemoryLayout[].class));\n+        Path helloOutput = getOutputFilePath(\"hello_special\");\n+        runAndCompile(helloOutput, \"-I\", getInputDir().toString(), \"<hello.h>\");\n+        try(TestUtils.Loader loader = TestUtils.classLoader(helloOutput)) {\n+            Class<?> cls = loader.loadClass(\"hello_h\");\n+            checkHeaderMembers(cls);\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testSpecialStandardHeaderSyntax() {\n+        \/\/ standard include header files cannot be found on Windows without setting\n+        \/\/ the location of standard header explicitly!\n+        if (IS_WINDOWS) {\n+            System.err.println(\"skipping test that uses standard header\");\n+        } else {\n+            Path stdioOutput = getOutputFilePath(\"stdio\");\n+            runAndCompile(stdioOutput, \"<stdio.h>\");\n+            try(TestUtils.Loader loader = TestUtils.classLoader(stdioOutput)) {\n+                Class<?> cls = loader.loadClass(\"stdio_h\");\n+                Class<?> invokerCls = findNestedClass(cls, \"printf\");\n+                assertNotNull(invokerCls);\n+                \/\/ check a method for \"MethodHandle handle()\"\n+                assertNotNull(findMethod(invokerCls, \"handle\"));\n+                \/\/ check a method for \"FunctionDescriptor descriptor()\"\n+                assertNotNull(findMethod(invokerCls, \"descriptor\"));\n+                \/\/ check a method for \"<invokerCls> invoker(MemoryLayout...)\"\n+                assertNotNull(findMethod(invokerCls, \"makeInvoker\", MemoryLayout[].class));\n+            }\n@@ -239,12 +258,36 @@\n-        Path unixOutput = getOutputFilePath(\"unix\");\n-        runAndCompile(unixOutput, \"--header-class-name\", \"Unix\", \"<stdio.h>\", \"<stdlib.h>\");\n-        try(TestUtils.Loader loader = TestUtils.classLoader(unixOutput)) {\n-            Class<?> cls = loader.loadClass(\"Unix\");\n-            Class<?> invokerCls = findNestedClass(cls, \"printf\");\n-            assertNotNull(invokerCls);\n-            \/\/ check a method for \"MethodHandle handle()\"\n-            assertNotNull(findMethod(invokerCls, \"handle\"));\n-            \/\/ check a method for \"FunctionDescriptor descriptor()\"\n-            assertNotNull(findMethod(invokerCls, \"descriptor\"));\n-            \/\/ check a method for \"<invokerCls> invoker(MemoryLayout...)\"\n-            assertNotNull(findMethod(invokerCls, \"makeInvoker\", MemoryLayout[].class));\n+        Path multiOutput = getOutputFilePath(\"multi\");\n+        runAndCompile(multiOutput,\n+            \"-I\", getInputDir().toString(),\n+            \"--header-class-name\", \"Multi\",\n+            \"hello.h\", \"typedefs.h\");\n+        try(TestUtils.Loader loader = TestUtils.classLoader(multiOutput)) {\n+            Class<?> cls = loader.loadClass(\"Multi\");\n+\n+            \/\/ check stuff from hello.h\n+            checkHeaderMembers(cls);\n+\n+            \/\/ check stuff from typedefs.h\n+            assertNotNull(findField(cls, \"byte_t\"));\n+            assertNotNull(findField(cls, \"mysize_t\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testStandardMultipleHeaders() {\n+        \/\/ standard include header files cannot be found on Windows without setting\n+        \/\/ the location of standard header explicitly!\n+        if (IS_WINDOWS) {\n+            System.err.println(\"skipping test that uses standard headers\");\n+        } else {\n+            Path unixOutput = getOutputFilePath(\"unix\");\n+            runAndCompile(unixOutput, \"--header-class-name\", \"Unix\", \"<stdio.h>\", \"<stdlib.h>\");\n+            try(TestUtils.Loader loader = TestUtils.classLoader(unixOutput)) {\n+                Class<?> cls = loader.loadClass(\"Unix\");\n+                Class<?> invokerCls = findNestedClass(cls, \"printf\");\n+                assertNotNull(invokerCls);\n+                \/\/ check a method for \"MethodHandle handle()\"\n+                assertNotNull(findMethod(invokerCls, \"handle\"));\n+                \/\/ check a method for \"FunctionDescriptor descriptor()\"\n+                assertNotNull(findMethod(invokerCls, \"descriptor\"));\n+                \/\/ check a method for \"<invokerCls> invoker(MemoryLayout...)\"\n+                assertNotNull(findMethod(invokerCls, \"makeInvoker\", MemoryLayout[].class));\n@@ -252,2 +295,3 @@\n-            \/\/ check qsort function\n-            assertNotNull(findMethod(cls, \"qsort\", MemorySegment.class, long.class, long.class, MemorySegment.class));\n+                \/\/ check qsort function\n+                assertNotNull(findMethod(cls, \"qsort\", MemorySegment.class, long.class, long.class, MemorySegment.class));\n+            }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":70,"deletions":26,"binary":false,"changes":96,"status":"modified"}]}