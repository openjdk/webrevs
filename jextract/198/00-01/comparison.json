{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -57,1 +56,0 @@\n-        String nativeName = varTree.name();\n@@ -59,1 +57,1 @@\n-        String layoutVar = emitVarLayout(varTree.type(), javaName);\n+        String holderClass = emitVarHolderClass(varTree, javaName);\n@@ -61,4 +59,3 @@\n-            String segmentConstant = emitGlobalSegment(layoutVar, javaName, nativeName);\n-            emitGlobalSegmentGetter(segmentConstant, layoutVar, javaName, varTree, \"Getter for variable:\");\n-            emitGlobalSegmentSetter(segmentConstant, layoutVar, javaName, varTree, \"Setter for variable:\");\n-            int dims = Utils.dimensions(varTree.type());\n+            emitGlobalSegmentGetter(holderClass, javaName, varTree, \"Getter for variable:\");\n+            emitGlobalSegmentSetter(holderClass, javaName, varTree, \"Setter for variable:\");\n+            int dims = Utils.dimensions(varTree.type()).size();\n@@ -66,1 +63,0 @@\n-                String arrayHandle = emitArrayElementHandle(javaName, varTree, layoutVar, dims);\n@@ -68,2 +64,2 @@\n-                emitGlobalArrayGetter(segmentConstant, arrayHandle, indexList, javaName, varTree, \"Indexed getter for variable:\");\n-                emitGlobalArraySetter(segmentConstant, arrayHandle, indexList, javaName, varTree, \"Indexed setter for variable:\");\n+                emitGlobalArrayGetter(holderClass, indexList, javaName, varTree, \"Indexed getter for variable:\");\n+                emitGlobalArraySetter(holderClass, indexList, javaName, varTree, \"Indexed setter for variable:\");\n@@ -72,3 +68,2 @@\n-            String segmentConstant = emitGlobalSegment(layoutVar, javaName, nativeName);\n-            emitGlobalGetter(segmentConstant, layoutVar, javaName, varTree, \"Getter for variable:\");\n-            emitGlobalSetter(segmentConstant, layoutVar, javaName, varTree, \"Setter for variable:\");\n+            emitGlobalGetter(holderClass, javaName, varTree, \"Getter for variable:\");\n+            emitGlobalSetter(holderClass, javaName, varTree, \"Setter for variable:\");\n@@ -149,1 +144,0 @@\n-        String getterName = mangleName(javaName, MethodHandle.class);\n@@ -156,0 +150,1 @@\n+            String holderClass = STR.\"\\{javaName}$constants\";\n@@ -158,3 +153,2 @@\n-                private static MethodHandle \\{getterName}() {\n-                    class Holder {\n-                        static final FunctionDescriptor DESC = \\{functionDescriptorString(2, decl.type())};\n+                private static class \\{holderClass} {\n+                    public static final FunctionDescriptor DESC = \\{functionDescriptorString(1, decl.type())};\n@@ -162,1 +156,1 @@\n-                        static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+                    public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n@@ -165,2 +159,0 @@\n-                    }\n-                    return Holder.MH;\n@@ -169,13 +161,12 @@\n-                appendBlankLine();\n-                emitDocComment(decl);\n-                appendLines(STR.\"\"\"\n-                public static \\{retType} \\{javaName}(\\{paramExprs(declType, finalParamNames, isVarArg)}) {\n-                    var mh$ = \\{getterName}();\n-                    try {\n-                        if (TRACE_DOWNCALLS) {\n-                            traceDowncall(\\{traceArgList});\n-                        }\n-                        \\{returnWithCast}mh$.invokeExact(\\{paramList});\n-                    } catch (Throwable ex$) {\n-                       throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n+            appendBlankLine();\n+            emitDocComment(decl, \"Function descriptor for:\");\n+            appendLines(STR.\"\"\"\n+                public static FunctionDescriptor \\{javaName}$descriptor() {\n+                    return \\{holderClass}.DESC;\n+                }\n+                \"\"\");\n+            appendBlankLine();\n+            emitDocComment(decl, \"Downcall method handle for:\");\n+            appendLines(STR.\"\"\"\n+                public static MethodHandle \\{javaName}$handle() {\n+                    return \\{holderClass}.HANDLE;\n@@ -184,0 +175,14 @@\n+            emitDocComment(decl);\n+            appendLines(STR.\"\"\"\n+            public static \\{retType} \\{javaName}(\\{paramExprs(declType, finalParamNames, isVarArg)}) {\n+                var mh$ = \\{holderClass}.HANDLE;\n+                try {\n+                    if (TRACE_DOWNCALLS) {\n+                        traceDowncall(\\{traceArgList});\n+                    }\n+                    \\{returnWithCast}mh$.invokeExact(\\{paramList});\n+                } catch (Throwable ex$) {\n+                   throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            }\n+            \"\"\");\n@@ -321,1 +326,1 @@\n-    private void emitGlobalGetter(String segmentConstant, String layoutVar, String javaName,\n+    private void emitGlobalGetter(String holderClass, String javaName,\n@@ -329,1 +334,1 @@\n-                return \\{segmentConstant}.get(\\{layoutVar}, 0L);\n+                return \\{holderClass}.SEGMENT.get(\\{holderClass}.LAYOUT, 0L);\n@@ -335,1 +340,1 @@\n-    private void emitGlobalSetter(String segmentConstant, String layoutVar, String javaName,\n+    private void emitGlobalSetter(String holderClass, String javaName,\n@@ -343,1 +348,1 @@\n-                \\{segmentConstant}.set(\\{layoutVar}, 0L, varValue);\n+                \\{holderClass}.SEGMENT.set(\\{holderClass}.LAYOUT, 0L, varValue);\n@@ -349,1 +354,1 @@\n-    private void emitGlobalSegmentGetter(String segmentConstant, String layoutVar, String javaName,\n+    private void emitGlobalSegmentGetter(String holderClass, String javaName,\n@@ -356,1 +361,1 @@\n-                return \\{segmentConstant};\n+                return \\{holderClass}.SEGMENT;\n@@ -362,1 +367,1 @@\n-    private void emitGlobalSegmentSetter(String segmentConstant, String layoutVar, String javaName,\n+    private void emitGlobalSegmentSetter(String holderClass, String javaName,\n@@ -369,1 +374,1 @@\n-                MemorySegment.copy(varValue, 0L, \\{segmentConstant}, 0L, \\{layoutVar}.byteSize());\n+                MemorySegment.copy(varValue, 0L, \\{holderClass}.SEGMENT, 0L, \\{holderClass}.LAYOUT.byteSize());\n@@ -375,46 +380,1 @@\n-    public String emitGlobalSegment(String layout, String javaName, String nativeName) {\n-        String mangledName = mangleName(javaName, MemorySegment.class);\n-        appendIndentedLines(STR.\"\"\"\n-\n-            private static MemorySegment \\{mangledName}() {\n-                class Holder {\n-                    static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\")\n-                        .reinterpret(\\{layout}.byteSize());\n-                }\n-                return Holder.SEGMENT;\n-            }\n-            \"\"\");\n-        return STR.\"\\{mangledName}()\";\n-    }\n-\n-    private String emitArrayElementHandle(String javaName, Declaration.Variable varTree, String fieldLayoutName, int dims) {\n-        String arrayHandleName = STR.\"\\{javaName}$ELEM_HANDLE\";\n-        String path = IntStream.range(0, dims)\n-                .mapToObj(_ -> \"sequenceElement()\")\n-                .collect(Collectors.joining(\", \"));\n-        Type elemType = Utils.typeOrElemType(varTree.type());\n-        if (Utils.isStructOrUnion(elemType)) {\n-            appendIndentedLines(STR.\"\"\"\n-\n-                private static MethodHandle \\{arrayHandleName}() {\n-                    class Holder {\n-                        static final MethodHandle HANDLE = \\{fieldLayoutName}.sliceHandle(\\{path});\n-                    }\n-                    return Holder.HANDLE;\n-                }\n-                \"\"\");\n-        } else {\n-            appendIndentedLines(STR.\"\"\"\n-\n-                private static VarHandle \\{arrayHandleName}() {\n-                    class Holder {\n-                        static final VarHandle HANDLE = \\{fieldLayoutName}.varHandle(\\{path});\n-                    }\n-                    return Holder.HANDLE;\n-                }\n-                \"\"\");\n-        }\n-        return STR.\"\\{arrayHandleName}()\";\n-    }\n-\n-    private void emitGlobalArrayGetter(String segmentConstant, String arrayElementHandle, IndexList indexList,\n+    private void emitGlobalArrayGetter(String holderClass, IndexList indexList,\n@@ -431,1 +391,1 @@\n-                        return (MemorySegment)\\{arrayElementHandle}.invokeExact(\\{segmentConstant}, 0L, \\{indexList.use()});\n+                        return (MemorySegment)\\{holderClass}.HANDLE.invokeExact(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()});\n@@ -440,1 +400,1 @@\n-                    return (\\{typeCls.getSimpleName()})\\{arrayElementHandle}.get(\\{segmentConstant}, 0L, \\{indexList.use()});\n+                    return (\\{typeCls.getSimpleName()})\\{holderClass}.HANDLE.get(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()});\n@@ -447,1 +407,1 @@\n-    private void emitGlobalArraySetter(String segmentConstant, String arrayElementHandle, IndexList indexList,\n+    private void emitGlobalArraySetter(String holderClass, IndexList indexList,\n@@ -463,1 +423,1 @@\n-                    \\{arrayElementHandle}.set(\\{segmentConstant}, 0L, \\{indexList.use()}, varValue);\n+                    \\{holderClass}.HANDLE.set(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()}, varValue);\n@@ -470,2 +430,3 @@\n-    private String emitVarLayout(Type varType, String javaName) {\n-        String mangledName = mangleName(javaName, MemoryLayout.class);\n+    private String emitVarHolderClass(Declaration.Variable var, String javaName) {\n+        Type varType = var.type();\n+        String mangledName = STR.\"\\{javaName}$constants\";\n@@ -473,4 +434,17 @@\n-        appendIndentedLines(STR.\"\"\"\n-            private static \\{layoutType} \\{mangledName}() {\n-                class Holder {\n-                    static final \\{layoutType} LAYOUT = \\{layoutString(varType)};\n+        if (varType instanceof Type.Array) {\n+            List<Long> dimensions = Utils.dimensions(varType);\n+            String path = IntStream.range(0, dimensions.size())\n+                    .mapToObj(_ -> \"sequenceElement()\")\n+                    .collect(Collectors.joining(\", \"));\n+            Type elemType = Utils.typeOrElemType(varType);\n+            String accessHandle = Utils.isStructOrUnion(elemType) ?\n+                    STR.\"public static final MethodHandle HANDLE = LAYOUT.sliceHandle(\\{path});\" :\n+                    STR.\"public static final VarHandle HANDLE = LAYOUT.varHandle(\\{path});\\n\";\n+            String dimsString = dimensions.stream().map(d -> d.toString())\n+                    .collect(Collectors.joining(\", \"));\n+            appendIndentedLines(STR.\"\"\"\n+                private static class \\{mangledName} {\n+                    public static final \\{layoutType} LAYOUT = \\{layoutString(varType)};\n+                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{var.name()}\").reinterpret(LAYOUT.byteSize());\n+                    \\{accessHandle}\n+                    public static final long[] DIMS = { \\{dimsString} };\n@@ -478,4 +452,37 @@\n-                return Holder.LAYOUT;\n-            }\n-            \"\"\");\n-        return STR.\"\\{mangledName}()\";\n+                \"\"\");\n+        } else {\n+            appendIndentedLines(STR.\"\"\"\n+                private static class \\{mangledName} {\n+                    public static final \\{layoutType} LAYOUT = \\{layoutString(varType)};\n+                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{var.name()}\").reinterpret(LAYOUT.byteSize());\n+                }\n+                \"\"\");\n+        }\n+        incrAlign();\n+        appendBlankLine();\n+        emitDocComment(var, \"Layout for variable:\");\n+        appendLines(STR.\"\"\"\n+                public static \\{layoutType} \\{javaName}$layout() {\n+                    return \\{mangledName}.LAYOUT;\n+                }\n+                \"\"\");\n+        if (!Utils.isStructOrUnion(varType) && !Utils.isArray(varType)) {\n+            appendBlankLine();\n+            emitDocComment(var, \"Segment for variable:\");\n+            appendLines(STR.\"\"\"\n+                    public static MemorySegment \\{javaName}$segment() {\n+                        return \\{mangledName}.SEGMENT;\n+                    }\n+                    \"\"\");\n+        }\n+        if (varType instanceof Type.Array) {\n+            appendBlankLine();\n+            emitDocComment(var, \"Dimensions for array variable:\");\n+            appendLines(STR.\"\"\"\n+                public static long[] \\{javaName}$dimensions() {\n+                    return \\{mangledName}.DIMS;\n+                }\n+                \"\"\");\n+        }\n+        decrAlign();\n+        return mangledName;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":108,"deletions":101,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -137,2 +137,2 @@\n-        String layoutField = emitLayoutFieldDecl(varTree);\n-        String offsetField = emitOffsetFieldDecl(varTree);\n+        String layoutField = emitLayoutFieldDecl(varTree, javaName);\n+        String offsetField = emitOffsetFieldDecl(varTree, javaName);\n@@ -140,0 +140,1 @@\n+            emitDimensionsFieldDecl(varTree, javaName);\n@@ -142,1 +143,1 @@\n-            int dims = Utils.dimensions(varTree.type());\n+            int dims = Utils.dimensions(varTree.type()).size();\n@@ -235,2 +236,2 @@\n-                        .mapToObj(_ -> \"sequenceElement()\")\n-                        .collect(Collectors.joining(\", \"));\n+                .mapToObj(_ -> \"sequenceElement()\")\n+                .collect(Collectors.joining(\", \"));\n@@ -384,2 +385,2 @@\n-    private String emitOffsetFieldDecl(Declaration field) {\n-        String offsetFieldName = STR.\"\\{field.name()}$OFFSET\";\n+    private String emitOffsetFieldDecl(Declaration.Variable field, String javaName) {\n+        String offsetFieldName = STR.\"\\{javaName}$OFFSET\";\n@@ -389,0 +390,7 @@\n+        appendBlankLine();\n+        emitFieldDocComment(field, \"Offset for field:\");\n+        appendIndentedLines(STR.\"\"\"\n+            public static final long \\{javaName}$offset() {\n+                return \\{offsetFieldName};\n+            }\n+            \"\"\");\n@@ -392,2 +400,2 @@\n-    private String emitLayoutFieldDecl(Declaration.Variable field) {\n-        String layoutFieldName = STR.\"\\{field.name()}$LAYOUT\";\n+    private String emitLayoutFieldDecl(Declaration.Variable field, String javaName) {\n+        String layoutFieldName = STR.\"\\{javaName}$LAYOUT\";\n@@ -398,0 +406,7 @@\n+        appendBlankLine();\n+        emitFieldDocComment(field, \"Layout for field:\");\n+        appendIndentedLines(STR.\"\"\"\n+            public static final \\{layoutType} \\{javaName}$layout() {\n+                return \\{layoutFieldName};\n+            }\n+            \"\"\");\n@@ -401,0 +416,18 @@\n+    private void emitDimensionsFieldDecl(Declaration.Variable field, String javaName) {\n+        String dimsFieldName = STR.\"\\{javaName}$DIMS\";\n+        List<Long> dimensions = Utils.dimensions(field.type());\n+        String dimsString = dimensions.stream().map(d -> d.toString())\n+                .collect(Collectors.joining(\", \"));\n+        appendIndentedLines(STR.\"\"\"\n+\n+            private static long[] \\{dimsFieldName} = { \\{dimsString} };\n+            \"\"\");\n+        appendBlankLine();\n+        emitFieldDocComment(field, \"Dimensions for array field:\");\n+        appendIndentedLines(STR.\"\"\"\n+            public static long[] \\{javaName}$dimensions() {\n+                return \\{dimsFieldName};\n+            }\n+            \"\"\");\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -186,5 +188,8 @@\n-    static int dimensions(Type type) {\n-        return switch (type) {\n-            case Type.Array array -> 1 + dimensions(array.elementType());\n-            default -> 0;\n-        };\n+    static List<Long> dimensions(Type type) {\n+        List<Long> dims = new ArrayList<>();\n+        while (type instanceof Type.Array array) {\n+            if (array.elementCount().isEmpty()) return List.of();\n+            dims.add(array.elementCount().getAsLong());\n+            type = array.elementType();\n+        }\n+        return dims;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n+            long[] dims = Foo.ints1$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n@@ -59,2 +60,3 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n-                for (int j = 0; j < 2; j++) {\n+            long[] dims = Foo.ints2$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n@@ -72,3 +74,4 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n-                for (int j = 0; j < 2; j++) {\n-                    for (int k = 0; k < 2; k++) {\n+            long[] dims = Foo.ints3$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n+                    for (int k = 0; k < dims[2]; k++) {\n@@ -85,1 +88,2 @@\n-        for (int i = 0 ; i < 2 ; i++) {\n+        long[] dims = ints1$dimensions();\n+        for (int i = 0 ; i < dims[0] ; i++) {\n@@ -93,2 +97,3 @@\n-        for (int i = 0 ; i < 2 ; i++) {\n-            for (int j = 0; j < 2; j++) {\n+        long[] dims = ints2$dimensions();\n+        for (int i = 0 ; i < dims[0] ; i++) {\n+            for (int j = 0; j < dims[1]; j++) {\n@@ -103,3 +108,4 @@\n-        for (int i = 0 ; i < 2 ; i++) {\n-            for (int j = 0; j < 2; j++) {\n-                for (int k = 0; k < 2; k++) {\n+        long[] dims = ints3$dimensions();\n+        for (int i = 0 ; i < dims[0] ; i++) {\n+            for (int j = 0; j < dims[1]; j++) {\n+                for (int k = 0; k < dims[2]; k++) {\n@@ -117,1 +123,2 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n+            long[] dims = Foo.points1$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n@@ -132,2 +139,3 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n-                for (int j = 0; j < 2; j++) {\n+            long[] dims = Foo.points2$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n@@ -149,3 +157,4 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n-                for (int j = 0; j < 2; j++) {\n-                    for (int k = 0; k < 2; k++) {\n+            long[] dims = Foo.points3$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n+                    for (int k = 0; k < dims[2]; k++) {\n@@ -167,1 +176,2 @@\n-            for (int i = 0; i < 2; i++) {\n+            long[] dims = points1$dimensions();\n+            for (int i = 0; i < dims[0]; i++) {\n@@ -181,2 +191,3 @@\n-            for (int i = 0; i < 2; i++) {\n-                for (int j = 0; j < 2; j++) {\n+            long[] dims = points2$dimensions();\n+            for (int i = 0; i < dims[0]; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n@@ -197,3 +208,4 @@\n-            for (int i = 0 ; i < 2 ; i++) {\n-                for (int j = 0; j < 2; j++) {\n-                    for (int k = 0; k < 2; k++) {\n+            long[] dims = points3$dimensions();\n+            for (int i = 0 ; i < dims[0] ; i++) {\n+                for (int j = 0; j < dims[1]; j++) {\n+                    for (int k = 0; k < dims[2]; k++) {\n","filename":"test\/jtreg\/generator\/arrayAccess\/TestArrayAccess.java","additions":36,"deletions":24,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-    struct Point points2[2][2];\n-    struct Point points3[2][2][2];\n+    struct Point points2[2][3];\n+    struct Point points3[2][3][4];\n@@ -47,2 +47,2 @@\n-    int ints2[2][2];\n-    int ints3[2][2][2];\n+    int ints2[2][3];\n+    int ints3[2][3][4];\n@@ -54,2 +54,2 @@\n-extern struct Point points2[2][2];\n-extern struct Point points3[2][2][2];\n+extern struct Point points2[2][3];\n+extern struct Point points3[2][3][4];\n@@ -58,2 +58,2 @@\n-extern int ints2[2][2];\n-extern int ints3[2][2][2];\n+extern int ints2[2][3];\n+extern int ints3[2][3][4];\n","filename":"test\/jtreg\/generator\/arrayAccess\/array_access.h","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-EXPORT struct Point points2[2][2];\n-EXPORT struct Point points3[2][2][2];\n+EXPORT struct Point points2[2][3];\n+EXPORT struct Point points3[2][3][4];\n@@ -31,2 +31,2 @@\n-EXPORT int ints2[2][2];\n-EXPORT int ints3[2][2][2];\n+EXPORT int ints2[2][3];\n+EXPORT int ints3[2][3][4];\n","filename":"test\/jtreg\/generator\/arrayAccess\/libArrayAccess.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -174,4 +174,4 @@\n-            Field offsetField = findField(structCls, memberName + \"$OFFSET\");\n-            assertNotNull(offsetField);\n-            assertEquals(offsetField.getType(), long.class);\n-            assertEquals(offsetField.get(null), structLayout.byteOffset(PathElement.groupElement(memberName)));\n+            Method offsetMethod = findMethod(structCls, memberName + \"$offset\");\n+            assertNotNull(offsetMethod);\n+            assertEquals(offsetMethod.getReturnType(), long.class);\n+            assertEquals(offsetMethod.invoke(null), structLayout.byteOffset(PathElement.groupElement(memberName)));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-        assertEquals(comments, List.of(\n+        assertContains(comments, List.of(\n@@ -153,0 +153,2 @@\n+            \"Layout for variable: int abc\",\n+            \"Segment for variable: int abc\",\n@@ -154,1 +156,3 @@\n-            \"Setter for variable: char *msg\"\n+            \"Setter for variable: char *msg\",\n+            \"Layout for variable: char *msg\",\n+            \"Segment for variable: char *msg\"\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/docComments\/TestDocComments.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}