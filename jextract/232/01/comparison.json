{"files":[{"patch":"@@ -51,0 +51,5 @@\n+    private final static String ASMLABEL = \"AsmLabelAttr\";\n+\n+    private static final boolean isMacOSX =\n+            System.getProperty(\"os.name\", \"unknown\").contains(\"OS X\");\n+\n@@ -86,1 +91,16 @@\n-        emitFunctionWrapper(JavaName.getOrThrow(funcTree), nativeName, needsAllocator, isVarargs, parameterNames, funcTree);\n+\n+\n+        emitFunctionWrapper(JavaName.getOrThrow(funcTree), nativeName,\n+                needsAllocator, isVarargs, parameterNames, funcTree);\n+    }\n+\n+    private String lookupName(Declaration decl) {\n+        var attrs = decl.getAttribute(Declaration.ClangAttributes.class);\n+        if (attrs.isPresent() && attrs.get().attributes().containsKey(ASMLABEL)) {\n+            String asmLabel = attrs.get().attributes().get(ASMLABEL).get(0);\n+            return isMacOSX ?\n+                    asmLabel.substring(1) : \/\/ skip leading \"_\"\n+                    asmLabel;\n+        } else {\n+            return decl.name();\n+        }\n@@ -159,1 +179,1 @@\n-                    public static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\");\n+                    public static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(decl)}\");\n@@ -208,1 +228,1 @@\n-                    private static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\");\n+                    private static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(decl)}\");\n@@ -490,1 +510,1 @@\n-                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{var.name()}\").reinterpret(LAYOUT.byteSize());\n+                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(var)}\").reinterpret(LAYOUT.byteSize());\n@@ -499,1 +519,1 @@\n-                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{var.name()}\").reinterpret(LAYOUT.byteSize());\n+                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(var)}\").reinterpret(LAYOUT.byteSize());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static test.jextract.alias_add.libAsmSymbol_h.*;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @requires os.family != \"windows\"\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract -l AsmSymbol -DADD --use-system-load-library -t test.jextract.alias_add libAsmSymbol.h\n+ * @build TestAliasAdd\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestAliasAdd\n+ *\/\n+public class TestAliasAdd {\n+\n+    @Test\n+    public void checkGlobalVar() {\n+        assertEquals(1, foo());\n+    }\n+\n+    @Test\n+    public void checkGlobalFunction() {\n+        assertEquals(3, func(1, 2));\n+    }\n+}\n","filename":"test\/jtreg\/generator\/aliases\/TestAliasAdd.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static test.jextract.alias_mul.libAsmSymbol_h.*;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @requires os.family != \"windows\"\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract -l AsmSymbol --use-system-load-library -t test.jextract.alias_mul libAsmSymbol.h\n+ * @build TestAliasMul\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestAliasMul\n+ *\/\n+public class TestAliasMul {\n+\n+    @Test\n+    public void checkGlobalVar() {\n+        assertEquals(2, foo());\n+    }\n+\n+    @Test\n+    public void checkGlobalFunction() {\n+        assertEquals(2, func(1, 2));\n+    }\n+}\n","filename":"test\/jtreg\/generator\/aliases\/TestAliasMul.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2019, 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+#include \"libAsmSymbol.h\"\n+\n+EXPORT int fooA = 1;\n+EXPORT int funcA (int x, int y) {\n+    return x + y;\n+}\n+\n+EXPORT int fooB = 2;\n+EXPORT int funcB (int x, int y) {\n+    return x * y;\n+}\n","filename":"test\/jtreg\/generator\/aliases\/libAsmSymbol.c","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2019, 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+#if __APPLE__\n+#define ALIAS(sym) __asm(\"_\" #sym)\n+#else\n+#define ALIAS(sym) __asm__(#sym)\n+#endif \/\/ __APPLE__\n+\n+#ifdef ADD\n+\n+EXPORT extern int foo ALIAS(fooA);\n+EXPORT int func (int x, int y) ALIAS(funcA);\n+\n+#else\n+\n+EXPORT extern int foo ALIAS(fooB);\n+EXPORT int func (int x, int y) ALIAS(funcB);\n+\n+#endif \/\/ ADD\n","filename":"test\/jtreg\/generator\/aliases\/libAsmSymbol.h","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}