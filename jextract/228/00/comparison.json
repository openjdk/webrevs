{"files":[{"patch":"@@ -159,3 +159,3 @@\n-                    public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(\n-                                \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\"),\n-                                DESC);\n+                    public static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\");\n+\n+                    public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n@@ -178,0 +178,8 @@\n+            appendBlankLine();\n+            emitDocComment(decl, \"Address for:\");\n+            appendLines(STR.\"\"\"\n+                public static MemorySegment \\{javaName}$address() {\n+                    return \\{holderClass}.ADDR;\n+                }\n+                \"\"\");\n+            appendBlankLine();\n@@ -227,0 +235,7 @@\n+                    \/**\n+                     * {@return the address}\n+                     *\/\n+                    public static MemorySegment address() {\n+                        return ADDR;\n+                    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/TestSplit.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/arrayAccess\/TestArrayAccess.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestGlobal.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestStruct.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestTypedef.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/dedup\/TestDedup.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-  * @library \/lib\n+ * @library \/lib\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/nestedInsideAnon\/TestNestedInsideAnon.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/TestNestedStructTypedef.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesUnsupported.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderStruct.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderTypedef.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static test.jextract.passaddr.passaddr_h.*;\n+\n+\/*\n+ * @test\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract -l passaddr --use-system-load-library -t test.jextract.passaddr passaddr.h\n+ * @build TestPassAddr\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestPassAddr\n+ *\/\n+public class TestPassAddr {\n+\n+    @Test\n+    public void testPackedStructs() {\n+        a(b$address());\n+        a_variadic(b_variadic.address());\n+    }\n+}\n","filename":"test\/jtreg\/generator\/passaddr\/TestPassAddr.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"passaddr.h\"\n+\n+EXPORT void b(void) {}\n+EXPORT void a(cb_t cb) {\n+    cb();\n+}\n+\n+EXPORT void b_variadic(int x, ...) {}\n+EXPORT void a_variadic(cb_var_t cb) {\n+    cb(3, 1, 2, 3);\n+}\n","filename":"test\/jtreg\/generator\/passaddr\/libpassaddr.c","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+typedef void (*cb_t)(void);\n+EXPORT void b(void);\n+EXPORT void a(cb_t cb);\n+\n+typedef void (*cb_var_t)(void);\n+EXPORT void b_variadic(int x, ...);\n+EXPORT void a_variadic(cb_var_t cb);\n","filename":"test\/jtreg\/generator\/passaddr\/passaddr.h","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -38,0 +38,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/reinterpret\/TestReinterpret.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/structAccessors\/TestGlobalStructAccess.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-  * @library \/lib\n+ * @library \/lib\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/structAccessors\/TestNestedStructAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test7903347\/LibTest7903347Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8239918\/LibTest8239918Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8240373\/Lib8240373Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8249757\/LibTest8249757Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8253390\/LibTest8253390Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- *\n@@ -41,0 +40,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @build testlib.TestUtils\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-lib.dirs = \/lib\n\\ No newline at end of file\n+lib.dirs = \/lib\n+lib.build = testlib.TestUtils\n","filename":"test\/testng\/TEST.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}