{"files":[{"patch":"@@ -61,0 +61,1 @@\n+    private final String runtimeHelperName;\n@@ -62,1 +63,2 @@\n-    ClassSourceBuilder(SourceFileBuilder builder, String modifiers, Kind kind, String className, String superName, ClassSourceBuilder enclosing) {\n+    ClassSourceBuilder(SourceFileBuilder builder, String modifiers, Kind kind, String className, String superName,\n+                       ClassSourceBuilder enclosing, String runtimeHelperName) {\n@@ -69,0 +71,1 @@\n+        this.runtimeHelperName = runtimeHelperName;\n@@ -81,0 +84,4 @@\n+    final String runtimeHelperName() {\n+        return runtimeHelperName;\n+    }\n+\n@@ -247,1 +254,1 @@\n-    private static String valueLayoutString(ValueLayout vl) {\n+    private String valueLayoutString(ValueLayout vl) {\n@@ -265,1 +272,1 @@\n-            return \"RuntimeHelper.POINTER\";\n+            return STR.\"\\{runtimeHelperName}.C_POINTER\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,2 +46,3 @@\n-                                       FunctionDescriptor descriptor, Optional<List<String>> parameterNames) {\n-        super(builder, \"public\", Kind.INTERFACE, className, null, enclosing);\n+                                       String runtimeHelperName, FunctionDescriptor descriptor,\n+                                       Optional<List<String>> parameterNames) {\n+        super(builder, \"public\", Kind.INTERFACE, className, null, enclosing, runtimeHelperName);\n@@ -54,1 +55,1 @@\n-    public static void generate(SourceFileBuilder builder, String className, ClassSourceBuilder enclosing,\n+    public static void generate(SourceFileBuilder builder, String className, ClassSourceBuilder enclosing, String runtimeHelperName,\n@@ -56,1 +57,1 @@\n-        FunctionalInterfaceBuilder fib = new FunctionalInterfaceBuilder(builder, className, enclosing,\n+        FunctionalInterfaceBuilder fib = new FunctionalInterfaceBuilder(builder, className, enclosing, runtimeHelperName,\n@@ -75,1 +76,1 @@\n-            MethodHandle UP$MH = RuntimeHelper.upcallHandle(\\{className()}.class, \\\"apply\\\", $DESC);\n+            MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.class, \\\"apply\\\", $DESC);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    HeaderFileBuilder(SourceFileBuilder builder, String className, String superName) {\n-        super(builder, \"public\", Kind.CLASS, className, superName, null);\n+    HeaderFileBuilder(SourceFileBuilder builder, String className, String superName, String runtimeHelperName) {\n+        super(builder, \"public\", Kind.CLASS, className, superName, null, runtimeHelperName);\n@@ -163,1 +163,1 @@\n-                            RuntimeHelper.findOrThrow(\"\\{nativeName}\"),\n+                            \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\"),\n@@ -192,5 +192,1 @@\n-                    var mh$ = Linker.nativeLinker().downcallHandle(\n-                            RuntimeHelper.findOrThrow(\"\\{nativeName}\"),\n-                            baseDesc$.appendArgumentLayouts(layouts),\n-                            Linker.Option.firstVariadicArg(baseDesc$.argumentLayouts().size())\n-                        ).asSpreader(Object[].class, layouts.length);\n+                    var mh$ = \\{runtimeHelperName()}.downcallHandleVariadic(\"\\{nativeName}\", baseDesc$, layouts);\n@@ -213,1 +209,1 @@\n-                    MemoryLayout[] inferredLayouts$ = RuntimeHelper.inferVariadicLayouts(\\{varargsParam});\n+                    MemoryLayout[] inferredLayouts$ = \\{runtimeHelperName()}.inferVariadicLayouts(\\{varargsParam});\n@@ -248,1 +244,1 @@\n-    void emitLoadLibraries(List<String> libraries) {\n+    void emitFirstHeaderPreamble(List<String> libraries) {\n@@ -250,0 +246,1 @@\n+        appendLines(\"static final SymbolLookup SYMBOL_LOOKUP;\");\n@@ -256,0 +253,6 @@\n+        appendLines(\"\"\"\n+\n+            SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n+            Linker linker = Linker.nativeLinker();\n+            SYMBOL_LOOKUP = name -> loaderLookup.find(name).or(() -> linker.defaultLookup().find(name));\n+            \"\"\");\n@@ -260,0 +263,51 @@\n+    void emitRuntimeHelperMethods() {\n+        appendIndentedLines(\"\"\"\n+            static MemorySegment findOrThrow(String symbol) {\n+                return SYMBOL_LOOKUP.find(symbol)\n+                    .orElseThrow(() -> new UnsatisfiedLinkError(\"unresolved symbol: \" + symbol));\n+            }\n+\n+            static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {\n+                MemoryLayout[] result = new MemoryLayout[varargs.length];\n+                for (int i = 0; i < varargs.length; i++) {\n+                    result[i] = variadicLayout(varargs[i].getClass());\n+                }\n+                return result;\n+            }\n+\n+            static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n+                try {\n+                    return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n+                } catch (ReflectiveOperationException ex) {\n+                    throw new AssertionError(ex);\n+                }\n+            }\n+\n+            static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {\n+                FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);\n+                Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());\n+                return SYMBOL_LOOKUP.find(name)\n+                        .map(addr -> Linker.nativeLinker().downcallHandle(addr, variadicDesc, fva)\n+                                .asSpreader(Object[].class, variadicLayouts.length))\n+                        .orElse(null);\n+            }\n+\n+            \/\/ Internals only below this point\n+\n+            private static MemoryLayout variadicLayout(Class<?> c) {\n+                \/\/ apply default argument promotions per C spec\n+                \/\/ note that all primitives are boxed, since they are passed through an Object[]\n+                if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {\n+                    return JAVA_INT;\n+                } else if (c == Long.class) {\n+                    return JAVA_LONG;\n+                } else if (c == Float.class || c == Double.class) {\n+                    return JAVA_DOUBLE;\n+                } else if (MemorySegment.class.isAssignableFrom(c)) {\n+                    return ADDRESS;\n+                }\n+                throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n+            }\n+            \"\"\");\n+    }\n+\n@@ -300,1 +354,1 @@\n-                    static final MemorySegment SEGMENT = RuntimeHelper.findOrThrow(\"\\{nativeName}\")\n+                    static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\")\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":65,"deletions":11,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -267,2 +267,2 @@\n-                \"Arena\", \"NativeArena\", \"MemorySegment\", \"ValueLayout\",\n-                \"RuntimeHelper\" -> true;\n+                \"Arena\", \"NativeArena\", \"MemorySegment\", \"ValueLayout\"\n+                    -> true;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,15 +111,2 @@\n-        try {\n-            List<JavaFileObject> files = new ArrayList<>(toplevelBuilder.toFiles());\n-            files.add(jfoFromString(pkgName, \"RuntimeHelper\", getRuntimeHelperSource()));\n-            return files.toArray(new JavaFileObject[0]);\n-        } catch (IOException ex) {\n-            throw new UncheckedIOException(ex);\n-        } catch (URISyntaxException ex2) {\n-            throw new RuntimeException(ex2);\n-        }\n-    }\n-\n-    private String getRuntimeHelperSource() throws URISyntaxException, IOException {\n-        URL runtimeHelper = OutputFactory.class.getResource(\"resources\/RuntimeHelper.java.template\");\n-        return (pkgName.isEmpty()? \"\" : \"package \" + pkgName + \";\\n\") +\n-                        String.join(\"\\n\", Files.readAllLines(Paths.get(runtimeHelper.toURI())));\n+        List<JavaFileObject> files = new ArrayList<>(toplevelBuilder.toFiles());\n+        return files.toArray(new JavaFileObject[0]);\n@@ -172,3 +159,1 @@\n-            currentBuilder = structBuilder = currentBuilder.addStruct(\n-                d,\n-                layout);\n+            currentBuilder = structBuilder = currentBuilder.addStruct(d, layout);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+            import java.lang.invoke.MethodHandles;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,2 +61,3 @@\n-                  ClassSourceBuilder enclosing, Declaration.Scoped structTree, GroupLayout structLayout) {\n-        super(builder, modifiers, Kind.CLASS, className, null, enclosing);\n+                  ClassSourceBuilder enclosing, String runtimeHelperName, Declaration.Scoped structTree,\n+                  GroupLayout structLayout) {\n+        super(builder, modifiers, Kind.CLASS, className, null, enclosing, runtimeHelperName);\n@@ -128,1 +129,1 @@\n-                    JavaName.getOrThrow(tree), this, tree, layout);\n+                    JavaName.getOrThrow(tree), this, runtimeHelperName(), tree, layout);\n@@ -139,1 +140,1 @@\n-                this, funcType, descriptor, JavaParameterNames.get(funcType));\n+                this, runtimeHelperName(), funcType, descriptor, JavaParameterNames.get(funcType));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        HeaderFileBuilder first = new HeaderFileBuilder(sfb, sfb.className(), \"#{SUPER}\");\n+        HeaderFileBuilder first = new HeaderFileBuilder(sfb, sfb.className(), \"#{SUPER}\", sfb.className());\n@@ -66,1 +66,1 @@\n-        first.emitLoadLibraries(libraries);\n+        first.emitFirstHeaderPreamble(libraries);\n@@ -76,1 +76,6 @@\n-        first.emitPointerTypedef(\"C_POINTER\");\n+\n+        \/\/ we don't use 'emitPrimitiveTypedef' so we can attach the target layout\n+        first.appendIndentedLines(\"\"\"\n+            public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n+                    .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));\n+            \"\"\");\n@@ -81,0 +86,4 @@\n+        boolean hasOneHeader = lastHeader == firstHeader;\n+        if (hasOneHeader) {\n+            firstHeader.emitRuntimeHelperMethods();\n+        }\n@@ -85,1 +94,1 @@\n-                lastHeader != firstHeader ? \"extends \" + lastHeader.className() : \"\")));\n+                hasOneHeader ? \"\" : \"extends \" + lastHeader.className())));\n@@ -121,1 +130,1 @@\n-            TypedefBuilder.generate(sfb, sfb.className(), superClass, typedefTree);\n+            TypedefBuilder.generate(sfb, sfb.className(), superClass, firstHeader.className(), typedefTree);\n@@ -130,1 +139,1 @@\n-        StructBuilder structBuilder = new StructBuilder(sfb, \"public\", sfb.className(), null, tree, layout);\n+        StructBuilder structBuilder = new StructBuilder(sfb, \"public\", sfb.className(), null, firstHeader.className(), tree, layout);\n@@ -139,1 +148,1 @@\n-        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, funcType, descriptor, JavaParameterNames.get(funcType));\n+        FunctionalInterfaceBuilder.generate(sfb, sfb.className(), null, firstHeader.className(), funcType, descriptor, JavaParameterNames.get(funcType));\n@@ -144,1 +153,4 @@\n-            boolean hasSuper = lastHeader != firstHeader;\n+            boolean wasFirstHeader = lastHeader == firstHeader;\n+            if (wasFirstHeader) {\n+                firstHeader.emitRuntimeHelperMethods();\n+            }\n@@ -148,1 +160,1 @@\n-                    hasSuper ? lastHeader.className() : null);\n+                    wasFirstHeader ? null : lastHeader.className(), firstHeader.className());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-    private TypedefBuilder(SourceFileBuilder builder, String className, String superClass) {\n-        super(builder, \"public\", Kind.CLASS, className, superClass, null);\n+    private TypedefBuilder(SourceFileBuilder builder, String className, String superClass, String runtimeHelperName) {\n+        super(builder, \"public\", Kind.CLASS, className, superClass, null, runtimeHelperName);\n@@ -38,3 +38,3 @@\n-    public static void generate(SourceFileBuilder builder, String className, String superClass,\n-                          Declaration.Typedef typedefTree) {\n-        TypedefBuilder tdb = new TypedefBuilder(builder, className, superClass);\n+    public static void generate(SourceFileBuilder builder, String className, String superClass, String runtimeHelperName,\n+                                Declaration.Typedef typedefTree) {\n+        TypedefBuilder tdb = new TypedefBuilder(builder, className, superClass, runtimeHelperName);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypedefBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/\/ Generated by jextract\n-\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.SymbolLookup;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.ValueLayout;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-\n-import java.lang.foreign.AddressLayout;\n-import java.lang.foreign.MemoryLayout;\n-\n-import static java.lang.foreign.ValueLayout.*;\n-import static java.lang.Long.MAX_VALUE;\n-\n-final class RuntimeHelper {\n-\n-    private static final MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();\n-    private static final SymbolLookup SYMBOL_LOOKUP;\n-    static final AddressLayout POINTER = ValueLayout.ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(MAX_VALUE, JAVA_BYTE));\n-\n-    static {\n-        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n-        Linker linker = Linker.nativeLinker();\n-        SYMBOL_LOOKUP = name -> loaderLookup.find(name).or(() -> linker.defaultLookup().find(name));\n-    }\n-\n-    \/\/ Suppresses default constructor, ensuring non-instantiability.\n-    private RuntimeHelper() {}\n-\n-    static MemorySegment findOrThrow(String symbol) {\n-        return SYMBOL_LOOKUP.find(symbol)\n-            .orElseThrow(() -> new UnsatisfiedLinkError(\"unresolved symbol: \" + symbol));\n-    }\n-\n-    static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {\n-        MemoryLayout[] result = new MemoryLayout[varargs.length];\n-        for (int i = 0; i < varargs.length; i++) {\n-            result[i] = variadicLayout(varargs[i].getClass());\n-        }\n-        return result;\n-    }\n-\n-    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n-        try {\n-            return MH_LOOKUP.findVirtual(fi, name, fdesc.toMethodType());\n-        } catch (ReflectiveOperationException ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-    \/\/ Internals only below this point\n-\n-    private static MemoryLayout variadicLayout(Class<?> c) {\n-        \/\/ apply default argument promotions per C spec\n-        \/\/ note that all primitives are boxed, since they are passed through an Object[]\n-        if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {\n-            return JAVA_INT;\n-        } else if (c == Long.class) {\n-            return JAVA_LONG;\n-        } else if (c == Float.class || c == Double.class) {\n-            return JAVA_DOUBLE;\n-        } else if (MemorySegment.class.isAssignableFrom(c)) {\n-            return ADDRESS;\n-        }\n-        throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n-    }\n-}\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -46,1 +46,0 @@\n-            assertNotNull(loader.loadClass(\"RuntimeHelper_\"));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262825.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}