{"files":[{"patch":"@@ -78,1 +78,1 @@\n-                return RuntimeHelper.upcallStub(UP$MH, fi, $DESC, scope);\n+                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, scope);\n@@ -85,1 +85,1 @@\n-            MethodHandle DOWN$MH = RuntimeHelper.downcallHandle($DESC);\n+            MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.File;\n@@ -161,1 +162,3 @@\n-                    static final MethodHandle MH = RuntimeHelper.downcallHandle(\\\"\\{nativeName}\\\", DESC);\n+                    static final MethodHandle MH = Linker.nativeLinker().downcallHandle(\n+                            RuntimeHelper.findOrThrow(\"\\{nativeName}\"),\n+                            DESC);\n@@ -163,1 +166,1 @@\n-                return RuntimeHelper.requireNonNull(Holder.MH, \\\"\\{javaName}\\\");\n+                return Holder.MH;\n@@ -189,1 +192,5 @@\n-                    var mh$ = RuntimeHelper.downcallHandleVariadic(\"\\{nativeName}\", baseDesc$, layouts);\n+                    var mh$ = Linker.nativeLinker().downcallHandle(\n+                            RuntimeHelper.findOrThrow(\"\\{nativeName}\"),\n+                            baseDesc$.appendArgumentLayouts(layouts),\n+                            Linker.Option.firstVariadicArg(baseDesc$.argumentLayouts().size())\n+                        ).asSpreader(Object[].class, layouts.length);\n@@ -241,0 +248,12 @@\n+    void emitLoadLibraries(List<String> libraries) {\n+        incrAlign();\n+        appendLines(\"static {\");\n+        for (String lib : libraries) {\n+            String quotedLibName = lib.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n+            String method = quotedLibName.indexOf(File.separatorChar) != -1 ? \"load\" : \"loadLibrary\";\n+            appendIndentedLines(STR.\"System.\\{method}(\\\"\\{quotedLibName}\\\");\");\n+        }\n+        appendLines(\"}\");\n+        decrAlign();\n+    }\n+\n@@ -254,1 +273,1 @@\n-                return (\\{type.getSimpleName()}) \\{vhConstant}.get(RuntimeHelper.requireNonNull(\\{segmentConstant}, \"\\{nativeName}\"), 0L);\n+                return (\\{type.getSimpleName()}) \\{vhConstant}.get(\\{segmentConstant}(), 0L);\n@@ -266,1 +285,1 @@\n-                \\{vhConstant}.set(RuntimeHelper.requireNonNull(\\{segmentConstant}, \"\\{nativeName}\"), 0L, x);\n+                \\{vhConstant}.set(\\{segmentConstant}(), 0L, x);\n@@ -275,4 +294,0 @@\n-        appendLines(STR.\"\"\"\n-            private static final MemorySegment \\{mangledName} = RuntimeHelper.lookupGlobalVariable(\\\"\\{nativeName}\\\", \\{layout});\n-\n-            \"\"\");\n@@ -284,1 +299,5 @@\n-                return RuntimeHelper.requireNonNull(\\{mangledName}, \\\"\\{javaName}\\\");\n+                class Holder {\n+                    static final MemorySegment SEGMENT = RuntimeHelper.findOrThrow(\"\\{nativeName}\")\n+                        .reinterpret(\\{layout}.byteSize());\n+                }\n+                return Holder.SEGMENT;\n@@ -334,1 +353,1 @@\n-            return STR.\"RuntimeHelper.CONSTANT_ALLOCATOR.allocateFrom(\\\"\\{Utils.quote(Objects.toString(value))}\\\");\";\n+            return STR.\"Arena.ofAuto().allocateFrom(\\\"\\{Utils.quote(Objects.toString(value))}\\\");\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName);\n+        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libraryNames);\n@@ -94,1 +94,1 @@\n-            generate(decl, libraryNames.toArray(new String[0]));\n+            generate(decl);\n@@ -103,1 +103,1 @@\n-    JavaFileObject[] generate(Declaration.Scoped decl, String[] libs) {\n+    JavaFileObject[] generate(Declaration.Scoped decl) {\n@@ -113,1 +113,1 @@\n-            files.add(jfoFromString(pkgName,\"RuntimeHelper\", getRuntimeHelperSource(libs)));\n+            files.add(jfoFromString(pkgName, \"RuntimeHelper\", getRuntimeHelperSource()));\n@@ -122,1 +122,1 @@\n-    private String getRuntimeHelperSource(String[] libraries) throws URISyntaxException, IOException {\n+    private String getRuntimeHelperSource() throws URISyntaxException, IOException {\n@@ -124,1 +124,1 @@\n-        String template = (pkgName.isEmpty()? \"\" : \"package \" + pkgName + \";\\n\") +\n+        return (pkgName.isEmpty()? \"\" : \"package \" + pkgName + \";\\n\") +\n@@ -126,14 +126,0 @@\n-        List<String> loadLibrariesStr = new ArrayList<>();\n-        for (String lib : libraries) {\n-            String quotedLibName = quoteLibraryName(lib);\n-            if (quotedLibName.indexOf(File.separatorChar) != -1) {\n-                loadLibrariesStr.add(\"System.load(\\\"\" + quotedLibName + \"\\\");\");\n-            } else {\n-                loadLibrariesStr.add(\"System.loadLibrary(\\\"\" + quotedLibName + \"\\\");\");\n-            }\n-        }\n-        return template.replace(\"#LOAD_LIBRARIES#\", loadLibrariesStr.stream().collect(Collectors.joining(\" \")));\n-    }\n-\n-    private String quoteLibraryName(String lib) {\n-        return lib.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-                return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);\n+                return addr.reinterpret($LAYOUT().byteSize(), scope, null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    ToplevelBuilder(String packageName, String headerClassName) {\n+    ToplevelBuilder(String packageName, String headerClassName, List<String> libraries) {\n@@ -60,1 +60,1 @@\n-        lastHeader = firstHeader = createFirstHeader(sfb);\n+        lastHeader = firstHeader = createFirstHeader(sfb, libraries);\n@@ -63,1 +63,1 @@\n-    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb) {\n+    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb, List<String> libraries) {\n@@ -66,0 +66,1 @@\n+        first.emitLoadLibraries(libraries);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-import java.lang.foreign.GroupLayout;\n@@ -9,2 +8,0 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.SegmentAllocator;\n@@ -15,6 +12,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import java.util.stream.Stream;\n@@ -25,1 +16,0 @@\n-import static java.lang.foreign.Linker.*;\n@@ -31,2 +21,0 @@\n-    private static final Linker LINKER = Linker.nativeLinker();\n-    private static final ClassLoader LOADER = RuntimeHelper.class.getClassLoader();\n@@ -35,1 +23,0 @@\n-    private static final SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n@@ -38,3 +25,0 @@\n-    final static SegmentAllocator CONSTANT_ALLOCATOR =\n-            (size, align) -> Arena.ofAuto().allocate(size, align);\n-\n@@ -42,1 +26,0 @@\n-        #LOAD_LIBRARIES#\n@@ -44,1 +27,2 @@\n-        SYMBOL_LOOKUP = name -> loaderLookup.find(name).or(() -> LINKER.defaultLookup().find(name));\n+        Linker linker = Linker.nativeLinker();\n+        SYMBOL_LOOKUP = name -> loaderLookup.find(name).or(() -> linker.defaultLookup().find(name));\n@@ -50,30 +34,3 @@\n-    static <T> T requireNonNull(T obj, String symbolName) {\n-        if (obj == null) {\n-            throw new UnsatisfiedLinkError(\"unresolved symbol: \" + symbolName);\n-        }\n-        return obj;\n-    }\n-\n-    static MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n-        return SYMBOL_LOOKUP.find(name)\n-                .map(s -> s.reinterpret(layout.byteSize()))\n-                .orElse(null);\n-    }\n-\n-    static MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {\n-        return SYMBOL_LOOKUP.find(name).\n-                map(addr -> LINKER.downcallHandle(addr, fdesc)).\n-                orElse(null);\n-    }\n-\n-    static MethodHandle downcallHandle(FunctionDescriptor fdesc) {\n-        return LINKER.downcallHandle(fdesc);\n-    }\n-\n-    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {\n-        FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);\n-        Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());\n-        return SYMBOL_LOOKUP.find(name)\n-                .map(addr -> LINKER.downcallHandle(addr, variadicDesc, fva)\n-                        .asSpreader(Object[].class, variadicLayouts.length))\n-                .orElse(null);\n+    static MemorySegment findOrThrow(String symbol) {\n+        return SYMBOL_LOOKUP.find(symbol)\n+            .orElseThrow(() -> new UnsatisfiedLinkError(\"unresolved symbol: \" + symbol));\n@@ -93,10 +50,1 @@\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-    static <Z> MemorySegment upcallStub(MethodHandle fiHandle, Z z, FunctionDescriptor fdesc, Arena scope) {\n-        try {\n-            fiHandle = fiHandle.bindTo(z);\n-            return LINKER.upcallStub(fiHandle, fdesc, scope);\n-        } catch (Throwable ex) {\n+        } catch (ReflectiveOperationException ex) {\n@@ -107,4 +55,0 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena arena) {\n-         return addr.reinterpret(numElements * layout.byteSize(), arena, null);\n-    }\n-\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":6,"deletions":62,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.MemorySegment;\n-import org.testng.annotations.Test;\n-import test.jextract.test8259473.*;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static test.jextract.test8259473.test8259473_h.*;\n-\n-\/*\n- * @test id=classes\n- * @bug 8259473\n- * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n- * @library \/lib\n- * @run main\/othervm JtregJextract -t test.jextract.test8259473 test8259473.h\n- * @build LibTest8259473Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8259473Test\n- *\/\n-\/*\n- * @test id=sources\n- * @bug 8259473\n- * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n- * @library \/lib\n- * @run main\/othervm JtregJextractSources -t test.jextract.test8259473 test8259473.h\n- * @build LibTest8259473Test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest8259473Test\n- *\/\n-public class LibTest8259473Test {\n-    @Test\n-    public void nullChecksTest() {\n-        try {\n-            func();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: func\"));\n-        }\n-\n-        try {\n-            func$MH();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: func\"));\n-        }\n-\n-        try {\n-            x$get();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n-        }\n-\n-        try {\n-            x$set(1);\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n-        }\n-\n-        try {\n-            x$SEGMENT();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n-        }\n-\n-        try {\n-            y$SEGMENT();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: y\"));\n-        }\n-\n-        try {\n-            pt$SEGMENT();\n-            throw new AssertionError(\"should not reach here\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            assertTrue(ule.getMessage().contains(\"unresolved symbol: pt\"));\n-        }\n-    }\n-}\n","filename":"test\/jtreg\/generator\/test8259473\/LibTest8259473Test.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import test.jextract.testLinkageErrors.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static test.jextract.testLinkageErrors.testLinkageErrors_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @bug 8259473\n+ * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n+ * @library \/lib\n+ * @run main\/othervm JtregJextract -t test.jextract.testLinkageErrors testLinkageErrors.h\n+ * @build TestLinkageErrors\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLinkageErrors\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @bug 8259473\n+ * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n+ * @library \/lib\n+ * @run main\/othervm JtregJextractSources -t test.jextract.testLinkageErrors testLinkageErrors.h\n+ * @build TestLinkageErrors\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLinkageErrors\n+ *\/\n+public class TestLinkageErrors {\n+\n+    static void assertThrowsULE(Runnable action, String symbol) {\n+        try {\n+            action.run();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (Throwable t) {\n+            while (t.getCause() != null) {\n+                t = t.getCause();\n+            }\n+            assertTrue(t.getMessage().contains(\"unresolved symbol: \" + symbol));\n+        }\n+    }\n+\n+    @Test\n+    public void nullChecksTest() {\n+        assertThrowsULE(() -> func(), \"func\");\n+        assertThrowsULE(() -> func$MH(), \"func\");\n+        assertThrowsULE(() -> x$get(), \"x\");\n+        assertThrowsULE(() -> x$set(1), \"x\");\n+        assertThrowsULE(() -> x$SEGMENT(), \"x\");\n+        assertThrowsULE(() -> y$SEGMENT(), \"y\");\n+        assertThrowsULE(() -> pt$SEGMENT(), \"pt\");\n+    }\n+}\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"","filename":"test\/jtreg\/generator\/testLinkageErrors\/testLinkageErrors.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jtreg\/generator\/test8259473\/test8259473.h","status":"renamed"}]}