{"files":[{"patch":"@@ -35,2 +35,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -38,0 +36,1 @@\n+\n@@ -43,0 +42,1 @@\n+\n@@ -52,1 +52,1 @@\n-*\/\n+ *\/\n@@ -56,1 +56,2 @@\n-    record Exit(String message, int exitCode) {}\n+    record Exit(String message, int exitCode) {\n+    }\n@@ -64,20 +65,0 @@\n-    private static class ArenaCleanup implements AutoCloseable {\n-        private Arena arena = Arena.ofConfined();\n-        private final List<Runnable> preCloseActions = new ArrayList<>();\n-\n-        void addCleanup(Runnable runnable) {\n-            preCloseActions.add(runnable);\n-        }\n-\n-        Arena arena() {\n-            return arena;\n-        }\n-\n-        @Override\n-        public void close() {\n-            preCloseActions.forEach(Runnable::run);\n-            System.out.println(\"cleanup done\");\n-            arena.close();\n-        }\n-    }\n-\n@@ -91,1 +72,1 @@\n-        int exitCode = 0;\n+        var ppFormatCtx = NULL;\n@@ -98,6 +79,4 @@\n-        try (var arenaCleanup = new ArenaCleanup()) {\n-            var arena = arenaCleanup.arena();\n-            \/\/ AVFormatContext *ppFormatCtx;\n-            var ppFormatCtx = arena.allocate(C_POINTER);\n-            \/\/ char* fileName;\n-            var fileName = arena.allocateUtf8String(args[0]);\n+        try (var arena = Arena.ofConfined()) {\n+            try {\n+                \/\/ AVFormatContext *ppFormatCtx;\n+                ppFormatCtx = arena.allocate(C_POINTER);\n@@ -105,7 +84,2 @@\n-            \/\/ open video file\n-            if (avformat_open_input(ppFormatCtx, fileName, NULL, NULL) != 0) {\n-                return new Exit(\"Cannot open \" + args[0], 1);\n-            }\n-            System.out.println(\"opened \" + args[0]);\n-            \/\/ AVFormatContext *pFormatCtx;\n-            var pFormatCtx = ppFormatCtx.get(C_POINTER, 0);\n+                \/\/ char* fileName;\n+                var fileName = arena.allocateUtf8String(args[0]);\n@@ -113,3 +87,7 @@\n-            \/\/ Retrieve stream info\n-            if (avformat_find_stream_info(pFormatCtx, NULL) < 0) {\n-                return new Exit(\"Could not find stream information\", 1);\n+                \/\/ open video file\n+                if (avformat_open_input(ppFormatCtx, fileName, NULL, NULL) != 0) {\n+                    return new Exit(\"Cannot open \" + args[0], 1);\n+                }\n+                System.out.println(\"opened \" + args[0]);\n+                \/\/ AVFormatContext *pFormatCtx;\n+                var pFormatCtx = ppFormatCtx.get(C_POINTER, 0);\n@@ -117,1 +95,3 @@\n-            }\n+                \/\/ Retrieve stream info\n+                if (avformat_find_stream_info(pFormatCtx, NULL) < 0) {\n+                    return new Exit(\"Could not find stream information\", 1);\n@@ -119,32 +99,0 @@\n-            arenaCleanup.addCleanup(() -> {\n-                \/\/ Close the video file\n-                avformat_close_input(ppFormatCtx);\n-            });\n-\n-            \/\/ Dump AV format info on stderr\n-            av_dump_format(pFormatCtx, 0, fileName, 0);\n-\n-            \/\/ Find the first video stream\n-            int videoStream = -1;\n-            \/\/ AVFrameContext formatCtx;\n-            \/\/ formatCtx.nb_streams\n-            int nb_streams = AVFormatContext.nb_streams$get(pFormatCtx);\n-            System.out.println(\"number of streams: \" + nb_streams);\n-            \/\/ formatCtx.streams\n-            var pStreams = AVFormatContext.streams$get(pFormatCtx);\n-\n-            \/\/ AVCodecContext* pVideoCodecCtx;\n-            var pVideoCodecCtx = NULL;\n-            \/\/ AVCodec* pCodec;\n-            var pCodec = NULL;\n-            for (int i = 0; i < nb_streams; i++) {\n-                \/\/ AVStream* pStream;\n-                var pStream = pStreams.getAtIndex(C_POINTER, i);\n-                \/\/ AVCodecContext* pCodecCtx;\n-                pCodecCtx = AVStream.codec$get(pStream);\n-                if (AVCodecContext.codec_type$get(pCodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n-                    videoStream = i;\n-                    pVideoCodecCtx = pCodecCtx;\n-                    \/\/ Find the decoder for the video stream\n-                    pCodec = avcodec_find_decoder(AVCodecContext.codec_id$get(pCodecCtx));\n-                    break;\n@@ -152,1 +100,0 @@\n-            }\n@@ -154,5 +101,29 @@\n-            if (videoStream == -1) {\n-                return new Exit(\"Didn't find a video stream\", 1);\n-            } else {\n-                System.out.println(\"Found video stream (index: \" + videoStream + \")\");\n-            }\n+                \/\/ Dump AV format info on stderr\n+                av_dump_format(pFormatCtx, 0, fileName, 0);\n+\n+                \/\/ Find the first video stream\n+                int videoStream = -1;\n+                \/\/ AVFrameContext formatCtx;\n+                \/\/ formatCtx.nb_streams\n+                int nb_streams = AVFormatContext.nb_streams$get(pFormatCtx);\n+                System.out.println(\"number of streams: \" + nb_streams);\n+                \/\/ formatCtx.streams\n+                var pStreams = AVFormatContext.streams$get(pFormatCtx);\n+\n+                \/\/ AVCodecContext* pVideoCodecCtx;\n+                var pVideoCodecCtx = NULL;\n+                \/\/ AVCodec* pCodec;\n+                var pCodec = NULL;\n+                for (int i = 0; i < nb_streams; i++) {\n+                    \/\/ AVStream* pStream;\n+                    var pStream = pStreams.getAtIndex(C_POINTER, i);\n+                    \/\/ AVCodecContext* pCodecCtx;\n+                    pCodecCtx = AVStream.codec$get(pStream);\n+                    if (AVCodecContext.codec_type$get(pCodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n+                        videoStream = i;\n+                        pVideoCodecCtx = pCodecCtx;\n+                        \/\/ Find the decoder for the video stream\n+                        pCodec = avcodec_find_decoder(AVCodecContext.codec_id$get(pCodecCtx));\n+                        break;\n+                    }\n+                }\n@@ -160,3 +131,5 @@\n-            if (pCodec.equals(NULL)) {\n-                return new Exit(\"Unsupported codec\", 1);\n-            }\n+                if (videoStream == -1) {\n+                    return new Exit(\"Didn't find a video stream\", 1);\n+                } else {\n+                    System.out.println(\"Found video stream (index: \" + videoStream + \")\");\n+                }\n@@ -164,8 +137,3 @@\n-            \/\/ Copy context\n-            \/\/ AVCodecContext *pCodecCtxOrig;\n-            pCodecCtxOrig = pVideoCodecCtx;\n-            \/\/ AVCodecContext *pCodecCtx;\n-            pCodecCtx = avcodec_alloc_context3(pCodec);\n-            if (avcodec_copy_context(pCodecCtx, pCodecCtxOrig) != 0) {\n-                return new Exit(\"Cannot copy context\", 1);\n-            }\n+                if (pCodec.equals(NULL)) {\n+                    return new Exit(\"Unsupported codec\", 1);\n+                }\n@@ -173,4 +141,8 @@\n-            \/\/ Open codec\n-            if (avcodec_open2(pCodecCtx, pCodec, NULL) < 0) {\n-                return new Exit(\"Cannot open codec\", 1);\n-            }\n+                \/\/ Copy context\n+                \/\/ AVCodecContext *pCodecCtxOrig;\n+                pCodecCtxOrig = pVideoCodecCtx;\n+                \/\/ AVCodecContext *pCodecCtx;\n+                pCodecCtx = avcodec_alloc_context3(pCodec);\n+                if (avcodec_copy_context(pCodecCtx, pCodecCtxOrig) != 0) {\n+                    return new Exit(\"Cannot copy context\", 1);\n+                }\n@@ -178,6 +150,4 @@\n-            \/\/ Allocate video frame\n-            \/\/ AVFrame* pFrame;\n-            pFrame = av_frame_alloc();\n-            \/\/ Allocate an AVFrame structure\n-            \/\/ AVFrame* pFrameRGB;\n-            pFrameRGB = av_frame_alloc();\n+                \/\/ Open codec\n+                if (avcodec_open2(pCodecCtx, pCodec, NULL) < 0) {\n+                    return new Exit(\"Cannot open codec\", 1);\n+                }\n@@ -185,5 +155,6 @@\n-            \/\/ Determine required buffer size and allocate buffer\n-            int width = AVCodecContext.width$get(pCodecCtx);\n-            int height = AVCodecContext.height$get(pCodecCtx);\n-            int numBytes = avpicture_get_size(AV_PIX_FMT_RGB24(), width, height);\n-            buffer = av_malloc(numBytes * C_CHAR.byteSize());\n+                \/\/ Allocate video frame\n+                \/\/ AVFrame* pFrame;\n+                pFrame = av_frame_alloc();\n+                \/\/ Allocate an AVFrame structure\n+                \/\/ AVFrame* pFrameRGB;\n+                pFrameRGB = av_frame_alloc();\n@@ -191,0 +162,5 @@\n+                \/\/ Determine required buffer size and allocate buffer\n+                int width = AVCodecContext.width$get(pCodecCtx);\n+                int height = AVCodecContext.height$get(pCodecCtx);\n+                int numBytes = avpicture_get_size(AV_PIX_FMT_RGB24(), width, height);\n+                buffer = av_malloc(numBytes * C_CHAR.byteSize());\n@@ -192,9 +168,0 @@\n-            if (pFrame.equals(NULL)) {\n-                return new Exit(\"Cannot allocate frame\", 1);\n-            }\n-            if (pFrameRGB.equals(NULL)) {\n-                return new Exit(\"Cannot allocate RGB frame\", 1);\n-            }\n-            if (buffer.equals(NULL)) {\n-                return new Exit(\"cannot allocate buffer\", 1);\n-            }\n@@ -202,38 +169,49 @@\n-            \/\/ Assign appropriate parts of buffer to image planes in pFrameRGB\n-            \/\/ Note that pFrameRGB is an AVFrame, but AVFrame is a superset\n-            \/\/ of AVPicture\n-            avpicture_fill(pFrameRGB, buffer, AV_PIX_FMT_RGB24(), width, height);\n-\n-            \/\/ initialize SWS context for software scaling\n-            int pix_fmt = AVCodecContext.pix_fmt$get(pCodecCtx);\n-            var sws_ctx = sws_getContext(width, height, pix_fmt, width, height,\n-                AV_PIX_FMT_RGB24(), SWS_BILINEAR(), NULL, NULL, NULL);\n-\n-            int i = 0;\n-            \/\/ ACPacket packet;\n-            var packet = AVPacket.allocate(arena);\n-            \/\/ int* pFrameFinished;\n-            var pFrameFinished = arena.allocate(C_INT);\n-\n-            while (av_read_frame(pFormatCtx, packet) >= 0) {\n-                \/\/ Is this a packet from the video stream?\n-                \/\/ packet.stream_index == videoStream\n-                if (AVPacket.stream_index$get(packet) == videoStream) {\n-                    \/\/ Decode video frame\n-                    avcodec_decode_video2(pCodecCtx, pFrame, pFrameFinished, packet);\n-\n-                    int frameFinished = pFrameFinished.get(C_INT, 0);\n-                    \/\/ Did we get a video frame?\n-                    if (frameFinished != 0) {\n-                        \/\/ Convert the image from its native format to RGB\n-                        sws_scale(sws_ctx, AVFrame.data$slice(pFrame),\n-                            AVFrame.linesize$slice(pFrame), 0, height,\n-                            AVFrame.data$slice(pFrameRGB), AVFrame.linesize$slice(pFrameRGB));\n-\n-                        \/\/ Save the frame to disk\n-                        if (++i <= NUM_FRAMES_TO_CAPTURE) {\n-                            try {\n-                                saveFrame(pFrameRGB, arena, width, height, i);\n-                            } catch (Exception exp) {\n-                                exp.printStackTrace();\n-                                return new Exit(\"save frame failed for frame \" + i, 1);\n+                if (pFrame.equals(NULL)) {\n+                    return new Exit(\"Cannot allocate frame\", 1);\n+                }\n+                if (pFrameRGB.equals(NULL)) {\n+                    return new Exit(\"Cannot allocate RGB frame\", 1);\n+                }\n+                if (buffer.equals(NULL)) {\n+                    return new Exit(\"cannot allocate buffer\", 1);\n+                }\n+\n+                \/\/ Assign appropriate parts of buffer to image planes in pFrameRGB\n+                \/\/ Note that pFrameRGB is an AVFrame, but AVFrame is a superset\n+                \/\/ of AVPicture\n+                avpicture_fill(pFrameRGB, buffer, AV_PIX_FMT_RGB24(), width, height);\n+\n+                \/\/ initialize SWS context for software scaling\n+                int pix_fmt = AVCodecContext.pix_fmt$get(pCodecCtx);\n+                var sws_ctx = sws_getContext(width, height, pix_fmt, width, height,\n+                        AV_PIX_FMT_RGB24(), SWS_BILINEAR(), NULL, NULL, NULL);\n+\n+                int i = 0;\n+                \/\/ ACPacket packet;\n+                var packet = AVPacket.allocate(arena);\n+                \/\/ int* pFrameFinished;\n+                var pFrameFinished = arena.allocate(C_INT);\n+\n+                while (av_read_frame(pFormatCtx, packet) >= 0) {\n+                    \/\/ Is this a packet from the video stream?\n+                    \/\/ packet.stream_index == videoStream\n+                    if (AVPacket.stream_index$get(packet) == videoStream) {\n+                        \/\/ Decode video frame\n+                        avcodec_decode_video2(pCodecCtx, pFrame, pFrameFinished, packet);\n+\n+                        int frameFinished = pFrameFinished.get(C_INT, 0);\n+                        \/\/ Did we get a video frame?\n+                        if (frameFinished != 0) {\n+                            \/\/ Convert the image from its native format to RGB\n+                            sws_scale(sws_ctx, AVFrame.data$slice(pFrame),\n+                                    AVFrame.linesize$slice(pFrame), 0, height,\n+                                    AVFrame.data$slice(pFrameRGB), AVFrame.linesize$slice(pFrameRGB));\n+\n+                            \/\/ Save the frame to disk\n+                            if (++i <= NUM_FRAMES_TO_CAPTURE) {\n+                                try {\n+                                    saveFrame(pFrameRGB, arena, width, height, i);\n+                                } catch (Exception exp) {\n+                                    exp.printStackTrace();\n+                                    return new Exit(\"save frame failed for frame \" + i, 1);\n+                                }\n@@ -242,2 +220,1 @@\n-                     }\n-                 }\n+                    }\n@@ -245,5 +222,5 @@\n-                 \/\/ Free the packet that was allocated by av_read_frame\n-                 av_free_packet(packet);\n-            }\n-        } finally {\n-            \/\/ clean-up everything\n+                    \/\/ Free the packet that was allocated by av_read_frame\n+                    av_free_packet(packet);\n+                }\n+            } finally {\n+                \/\/ clean-up everything\n@@ -251,4 +228,4 @@\n-            \/\/ Free the RGB image\n-            if (!buffer.equals(NULL)) {\n-                av_free(buffer);\n-            }\n+                \/\/ Free the RGB image\n+                if (!buffer.equals(NULL)) {\n+                    av_free(buffer);\n+                }\n@@ -256,3 +233,3 @@\n-            if (!pFrameRGB.equals(NULL)) {\n-                av_free(pFrameRGB);\n-            }\n+                if (!pFrameRGB.equals(NULL)) {\n+                    av_free(pFrameRGB);\n+                }\n@@ -260,4 +237,4 @@\n-            \/\/ Free the YUV frame\n-            if (!pFrame.equals(NULL)) {\n-                av_free(pFrame);\n-            }\n+                \/\/ Free the YUV frame\n+                if (!pFrame.equals(NULL)) {\n+                    av_free(pFrame);\n+                }\n@@ -265,4 +242,4 @@\n-            \/\/ Close the codecs\n-            if (!pCodecCtx.equals(NULL)) {\n-                avcodec_close(pCodecCtx);\n-            }\n+                \/\/ Close the codecs\n+                if (!pCodecCtx.equals(NULL)) {\n+                    avcodec_close(pCodecCtx);\n+                }\n@@ -270,2 +247,8 @@\n-            if (!pCodecCtxOrig.equals(NULL)) {\n-                avcodec_close(pCodecCtxOrig);\n+                if (!pCodecCtxOrig.equals(NULL)) {\n+                    avcodec_close(pCodecCtxOrig);\n+                }\n+\n+                if (!ppFormatCtx.equals(NULL)) {\n+                    \/\/ Close the video file\n+                    avformat_close_input(ppFormatCtx);\n+                }\n@@ -279,1 +262,1 @@\n-            int width, int height, int iFrame)\n+                                  int width, int height, int iFrame)\n@@ -295,1 +278,1 @@\n-                                      .reinterpret(3*width, arena, null);\n+                        .reinterpret(3 * width, arena, null);\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":162,"deletions":179,"binary":false,"changes":341,"status":"modified"}]}