{"files":[{"patch":"@@ -978,14 +978,15 @@\n-| Option                                                       | Meaning                                                      |\n-| :----------------------------------------------------------- | ------------------------------------------------------------ |\n-| `-D --define-macro <macro>=<value>`                          | define `<macro>` to `<value>` (or 1 if `<value>` omitted)          |\n-| `--header-class-name <name>`                                 | name of the generated header class. If this option is not specified, then header class name is derived from the header file name. For example, class \"foo_h\" for header \"foo.h\". If multiple headers are specified, then this option is mandatory. |\n-| `-t, --target-package <package>`                             | target package name for the generated classes. If this option is not specified, then unnamed package is used.  |\n-| `-I, --include-dir <dir>`                                    | append directory to the include search paths. Include search paths are searched in order. For example, if `-I foo -I bar` is specified, header files will be searched in \"foo\" first, then (if nothing is found) in \"bar\".|\n-| `-l, --library <name \\| path>`                               | specify a shared library that should be loaded by the generated header class. If <libspec> starts with `:`, then what follows is interpreted as a library path. Otherwise, `<libspec>` denotes a library name. Examples: <br>`-l GL`<br>`-l :libGL.so.1`<br>`-l :\/usr\/lib\/libGL.so.1`|\n-| `--use-system-load-library`                                  | libraries specified using `-l` are loaded in the loader symbol lookup (using either `System::loadLibrary`, or `System::load`). Useful if the libraries must be loaded from one of the paths in `java.library.path`.|\n-| `--output <path>`                                            | specify where to place generated files                       |\n-| `--dump-includes <String>`                                   | dump included symbols into specified file (see below)        |\n-| `--include-[function,constant,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings. When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings. |\n-| `--version`                                                  | print version information and exit |\n-| `-F <dir>` (macOs only)                                          | specify the framework directory include files. Defaults to the current Mac OS X SDK dir.|\n-| `--framework <framework>` (macOs only)                           | specify the name of the library, path will be expanded to that of the framework folder.|\n+| Option                                                           | Meaning                                                                                                                                                                                                                                                                               |\n+|:-----------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `-D --define-macro <macro>=<value>`                              | define `<macro>` to `<value>` (or 1 if `<value>` omitted)                                                                                                                                                                                                                             |\n+| `--header-class-name <name>`                                     | name of the generated header class. If this option is not specified, then header class name is derived from the header file name. For example, class \"foo_h\" for header \"foo.h\". If multiple headers are specified, then this option is mandatory.                                    |\n+| `-t, --target-package <package>`                                 | target package name for the generated classes. If this option is not specified, then unnamed package is used.                                                                                                                                                                         |\n+| `-I, --include-dir <dir>`                                        | append directory to the include search paths. Include search paths are searched in order. For example, if `-I foo -I bar` is specified, header files will be searched in \"foo\" first, then (if nothing is found) in \"bar\".                                                            |\n+| `-l, --library <name \\| path>`                                   | specify a shared library that should be loaded by the generated header class. If <libspec> starts with `:`, then what follows is interpreted as a library path. Otherwise, `<libspec>` denotes a library name. Examples: <br>`-l GL`<br>`-l :libGL.so.1`<br>`-l :\/usr\/lib\/libGL.so.1` |\n+| `--use-system-load-library`                                      | libraries specified using `-l` are loaded in the loader symbol lookup (using either `System::loadLibrary`, or `System::load`). Useful if the libraries must be loaded from one of the paths in `java.library.path`.                                                                   |\n+| `--output <path>`                                                | specify where to place generated files                                                                                                                                                                                                                                                |\n+| `--dump-includes <String>`                                       | dump included symbols into specified file (see below)                                                                                                                                                                                                                                 |\n+| `--include-[function,constant,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings. When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings.                                                                        |\n+| `--shared-symbols <name>`                                          | override the name of the root header class                                                                                                                                                                                                                                            |\n+| `--version`                                                      | print version information and exit                                                                                                                                                                                                                                                    |\n+| `-F <dir>` (macOs only)                                          | specify the framework directory include files. Defaults to the current Mac OS X SDK dir.                                                                                                                                                                                              |\n+| `--framework <framework>` (macOs only)                           | specify the name of the library, path will be expanded to that of the framework folder.                                                                                                                                                                                               |\n","filename":"doc\/GUIDE.md","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -140,1 +140,2 @@\n-                List.of(OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary));\n+                List.of(OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary,\n+                        includeHelper.getSharedSymbolsFile()));\n@@ -337,1 +338,1 @@\n-                   for (String alias : spec.aliases()) {\n+                   for (String _ : spec.aliases()) {\n@@ -359,0 +360,1 @@\n+        parser.accepts(\"--shared-symbols\", \"help.shared.symbols\", true);\n@@ -402,1 +404,1 @@\n-                Files.lines(compileFlagsTxt).forEach(opt -> builder.addClangArg(opt));\n+                Files.lines(compileFlagsTxt).forEach(builder::addClangArg);\n@@ -442,0 +444,4 @@\n+        if (optionSet.has(\"--shared-symbols\")) {\n+            builder.setSharedUtilsName(optionSet.valueOf(\"--shared-symbols\"));\n+        }\n+\n@@ -474,1 +480,1 @@\n-        if (optionSet.nonOptionArguments().size() == 0) {\n+        if (optionSet.nonOptionArguments().isEmpty()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -391,0 +391,20 @@\n+    void emitBasicPrimitiveTypes(){\n+        appendIndentedLines(\"\"\"\n+\n+            public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get(\"bool\");\n+            public static final ValueLayout.OfByte C_CHAR =(ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get(\"char\");\n+            public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get(\"short\");\n+            public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\"int\");\n+            public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long long\");\n+            public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get(\"float\");\n+            public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\"double\");\n+            public static final AddressLayout C_POINTER = ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get(\"void*\"))\n+                    .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, C_CHAR));\n+            \"\"\");\n+        if (TypeImpl.IS_WINDOWS) {\n+            appendIndentedLines(\"public static final ValueLayout.OfInt C_LONG = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n+            appendIndentedLines(\"public static final ValueLayout.OfDouble C_LONG_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\\\"double\\\");\");\n+        } else {\n+            appendIndentedLines(\"public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,5 @@\n+    public String sharedSymbolsFile;\n+\n+    public String getSharedSymbolsFile() {\n+        return sharedSymbolsFile;\n+    }\n@@ -125,1 +130,1 @@\n-            Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, (_unused) -> new HashSet<>());\n+            Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, _unused -> new HashSet<>());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeHelper.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,4 @@\n+        public void setSharedUtilsName(String sharedSymbolsFile) {\n+            includeHelper.sharedSymbolsFile = sharedSymbolsFile;\n+        }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Options.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-                                                   List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+                                                   List<Options.Library> libs,\n+                                                   boolean useSystemLoadLibrary,\n+                                                   String sharedSymbolsFile) {\n@@ -50,1 +52,2 @@\n-        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libs, useSystemLoadLibrary);\n+        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName,\n+                libs, useSystemLoadLibrary, sharedSymbolsFile);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    private static String SHARED;\n@@ -54,1 +55,1 @@\n-                    List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+                    List<Options.Library> libs, boolean useSystemLoadLibrary, String sharedSymbolsFile) {\n@@ -56,0 +57,2 @@\n+        SHARED = sharedSymbolsFile != null ? sharedSymbolsFile : headerDesc.displayName() + \"$shared\";\n+        createSharedClass();\n@@ -61,0 +64,11 @@\n+    private void createSharedClass() {\n+        SourceFileBuilder sfb = SourceFileBuilder.newSourceFile(packageName(), SHARED);\n+        HeaderFileBuilder sharedBuilder = new HeaderFileBuilder(sfb, SHARED, null, SHARED);\n+        sharedBuilder.appendBlankLine();\n+        sharedBuilder.classBegin();\n+        sharedBuilder.emitDefaultConstructor();\n+        sharedBuilder.emitBasicPrimitiveTypes();\n+        sharedBuilder.classEnd();\n+        otherBuilders.add(sfb);\n+    }\n+\n@@ -62,1 +76,1 @@\n-        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%1$s#{SUFFIX}\",sfb.className()), null, sfb.className());\n+        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%1$s#{SUFFIX}\",sfb.className()), SHARED, sfb.className());\n@@ -68,19 +82,0 @@\n-        \/\/ emit basic primitive types\n-        first.appendIndentedLines(\"\"\"\n-\n-            public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get(\"bool\");\n-            public static final ValueLayout.OfByte C_CHAR =(ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get(\"char\");\n-            public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get(\"short\");\n-            public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\"int\");\n-            public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long long\");\n-            public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get(\"float\");\n-            public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\"double\");\n-            public static final AddressLayout C_POINTER = ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get(\"void*\"))\n-                    .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, C_CHAR));\n-            \"\"\");\n-        if (TypeImpl.IS_WINDOWS) {\n-            first.appendIndentedLines(\"public static final ValueLayout.OfInt C_LONG = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n-            first.appendIndentedLines(\"public static final ValueLayout.OfDouble C_LONG_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\\\"double\\\");\");\n-        } else {\n-            first.appendIndentedLines(\"public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n-        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2020, 2025 Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+help.shared.symbols=override the name of the root header class\n@@ -87,0 +88,1 @@\n+--shared-symbols <name>            override the name of the root header class                   \\n\\\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import java.nio.file.Path;\n+import testlib.TestUtils;\n+import testlib.JextractToolRunner;\n+import test.jextract.sharedSymbolsHeader.*;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 7903933\n+ * @summary check that header containg the shared symbols was created with the specified name\n+ * @library \/lib\n+ * @build testlib.JextractToolRunner testlib.TestUtils\n+ * @run main\/othervm JtregJextract -t test.jextract.sharedSymbolsHeader sharedSymbolsHeader.h\n+ *\/\n+public class TestSharedSymbolsHeader extends JextractToolRunner {\n+    @Test\n+    public void testSplit() {\n+        Path splitOutput = getOutputFilePath(\"sharedSymbolsHeader\");\n+        Path splitH = getInputFilePath(\"sharedSymbolsHeader.h\");\n+        runAndCompile(splitOutput, splitH.toString());\n+        try(TestUtils.Loader loader = TestUtils.classLoader(splitOutput)) {\n+            assertNotNull(loader.loadClass(\"sharedSymbolsHeader_h$shared\"));\n+        } finally {\n+            TestUtils.deleteDir(splitOutput);\n+        }\n+    }\n+}\n","filename":"test\/jtreg\/generator\/sharedSymbolsHeader\/TestSharedSymbolsHeader.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-void func(int);\n+typedef int T;\n+typedef char* P1;\n","filename":"test\/jtreg\/generator\/sharedSymbolsHeader\/sharedSymbolsHeader.h","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JDK-8248474.h","status":"copied"}]}