{"files":[{"patch":"@@ -989,0 +989,1 @@\n+| `--sharable-utils <name>`                                        | generate shared utility class for common layouts and methods |\n@@ -991,1 +992,1 @@\n-| `-framework <framework>` (macOs only)                            | specify the name of the library, path will be expanded to that of the framework folder.|\n+| `--framework <framework>` (macOs only)                           | specify the name of the library, path will be expanded to that of the framework folder.|\n","filename":"doc\/GUIDE.md","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-jextract -t opengl -framework GLUT \\\n-  -framework OpenGL \\\n+jextract -t opengl --framework GLUT \\\n+  --framework OpenGL \\\n","filename":"samples\/opengl\/compilesource.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -140,1 +140,2 @@\n-                List.of(OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary));\n+                List.of(OutputFactory.generateWrapped(transformedDecl, targetPkg,\n+                        libs, useSystemLoadLibrary, includeHelper.getSharableItems()));\n@@ -337,1 +338,1 @@\n-                   for (String alias : spec.aliases()) {\n+                   for (String _ : spec.aliases()) {\n@@ -359,0 +360,1 @@\n+        parser.accepts(\"--sharable-items\", \"help.sharable.items\", true);\n@@ -373,1 +375,1 @@\n-            parser.accepts(\"-framework\", \"help.framework.library.path\", true);\n+            parser.accepts(\"--framework\", \"help.framework.library.path\", true);\n@@ -402,1 +404,1 @@\n-                Files.lines(compileFlagsTxt).forEach(opt -> builder.addClangArg(opt));\n+                Files.lines(compileFlagsTxt).forEach(builder::addClangArg);\n@@ -442,0 +444,4 @@\n+        if (optionSet.has(\"--sharable-items\")) {\n+            builder.useSharableItems(optionSet.valueOf(\"--sharable-items\"));\n+        }\n+\n@@ -474,1 +480,1 @@\n-        if (optionSet.nonOptionArguments().size() == 0) {\n+        if (optionSet.nonOptionArguments().isEmpty()) {\n@@ -517,1 +523,1 @@\n-            if (options.includeHelper.dumpIncludesFile != null) {\n+            if (options.includeHelper.getDumpIncludesFile() != null) {\n@@ -539,2 +545,5 @@\n-        if (optionSet.has(\"-\" + optionString)) {\n-            for (String lib : optionSet.valuesOf(\"-\" + optionString)) {\n+        String cmdOption = optionString.length() < 3 ?\n+                \"-\" + optionString :\n+                \"--\" + optionString;\n+        if (optionSet.has(cmdOption)) {\n+            for (String lib : optionSet.valuesOf(cmdOption)) {\n@@ -542,1 +551,1 @@\n-                    String spec = optionString.equals(\"framework\") ?\n+                    String spec = cmdOption.equals(\"--framework\") ?\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -395,0 +395,20 @@\n+    void emitBasicPrimitiveTypes(){\n+        appendIndentedLines(\"\"\"\n+\n+            public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get(\"bool\");\n+            public static final ValueLayout.OfByte C_CHAR =(ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get(\"char\");\n+            public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get(\"short\");\n+            public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\"int\");\n+            public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long long\");\n+            public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get(\"float\");\n+            public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\"double\");\n+            public static final AddressLayout C_POINTER = ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get(\"void*\"))\n+                    .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, C_CHAR));\n+            \"\"\");\n+        if (TypeImpl.IS_WINDOWS) {\n+            appendIndentedLines(\"public static final ValueLayout.OfInt C_LONG = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n+            appendIndentedLines(\"public static final ValueLayout.OfDouble C_LONG_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\\\"double\\\");\");\n+        } else {\n+            appendIndentedLines(\"public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,18 @@\n-    public String dumpIncludesFile;\n+\n+    private String dumpIncludesFile;\n+    private String sharableItems;\n+\n+    public String getDumpIncludesFile() {\n+        return dumpIncludesFile;\n+    }\n+\n+    public void setDumpIncludesFile(String dumpIncludesFile) {\n+        this.dumpIncludesFile = dumpIncludesFile;\n+    }\n+\n+    public void setSharableItems(String sharableItems) {\n+        this.sharableItems = sharableItems;\n+    }\n+    public String getSharableItems() {\n+        return sharableItems;\n+    }\n@@ -89,1 +106,1 @@\n-        Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, (_unused) -> new HashSet<>());\n+        Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, _unused -> new HashSet<>());\n@@ -125,1 +142,1 @@\n-            Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, (_unused) -> new HashSet<>());\n+            Set<String> names = includesSymbolNamesByKind.computeIfAbsent(kind, _unused -> new HashSet<>());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeHelper.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,5 @@\n-            includeHelper.dumpIncludesFile = dumpIncludesFile;\n+            includeHelper.setDumpIncludesFile(dumpIncludesFile);\n+        }\n+\n+        public void useSharableItems(String name) {\n+            includeHelper.setSharableItems(name);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Options.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-                                                   List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+                                                   List<Options.Library> libs,\n+                                                   boolean useSystemLoadLibrary,\n+                                                   String generateShareableItems) {\n@@ -50,1 +52,7 @@\n-        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libs, useSystemLoadLibrary);\n+        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(\n+                pkgName,\n+                clsName,\n+                libs,\n+                useSystemLoadLibrary,\n+                generateShareableItems\n+        );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    private final String jextractUTILS;\n@@ -52,0 +53,1 @@\n+    private SourceFileBuilder jextractUtilsBuilder;\n@@ -54,1 +56,4 @@\n-                    List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+                    List<Options.Library> libs,\n+                    boolean useSystemLoadLibrary,\n+                    String generateShareableItems) {\n+        jextractUTILS = generateShareableItems;\n@@ -56,0 +61,5 @@\n+\n+        if (jextractUTILS != null) {\n+            jextractUtilsBuilder = createJextractUtilsBuilder(packageName,libs,useSystemLoadLibrary);\n+        }\n+\n@@ -58,1 +68,1 @@\n-        lastHeader = createFirstHeader(sfb, libs, useSystemLoadLibrary);\n+        lastHeader = createFirstHeader(sfb, libs, useSystemLoadLibrary, jextractUTILS);\n@@ -61,2 +71,8 @@\n-    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb, List<Options.Library> libs, boolean useSystemLoadLibrary) {\n-        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%1$s#{SUFFIX}\",sfb.className()), null, sfb.className());\n+    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb,\n+                                                       List<Options.Library> libs,\n+                                                       boolean useSystemLoadLibrary,\n+                                                       String generateShareableItems) {\n+        HeaderFileBuilder first = new HeaderFileBuilder(sfb,\n+                String.format(\"%1$s#{SUFFIX}\", sfb.className()),\n+                generateShareableItems,\n+                sfb.className());\n@@ -66,20 +82,5 @@\n-        first.emitRuntimeHelperMethods();\n-        first.emitFirstHeaderPreamble(libs, useSystemLoadLibrary);\n-        \/\/ emit basic primitive types\n-        first.appendIndentedLines(\"\"\"\n-\n-            public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get(\"bool\");\n-            public static final ValueLayout.OfByte C_CHAR =(ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get(\"char\");\n-            public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get(\"short\");\n-            public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\"int\");\n-            public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long long\");\n-            public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get(\"float\");\n-            public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\"double\");\n-            public static final AddressLayout C_POINTER = ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get(\"void*\"))\n-                    .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, C_CHAR));\n-            \"\"\");\n-        if (TypeImpl.IS_WINDOWS) {\n-            first.appendIndentedLines(\"public static final ValueLayout.OfInt C_LONG = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n-            first.appendIndentedLines(\"public static final ValueLayout.OfDouble C_LONG_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\\\"double\\\");\");\n-        } else {\n-            first.appendIndentedLines(\"public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\\\"long\\\");\");\n+\n+        if (generateShareableItems == null) {\n+            first.emitRuntimeHelperMethods();\n+            first.emitFirstHeaderPreamble(libs, useSystemLoadLibrary);\n+            first.emitBasicPrimitiveTypes();\n@@ -87,0 +88,1 @@\n+\n@@ -90,0 +92,16 @@\n+    private SourceFileBuilder createJextractUtilsBuilder(String packageName, List<Options.Library> libs, boolean useSystemLoadLibrary) {\n+        SourceFileBuilder utilsBuilder = SourceFileBuilder.newSourceFile(packageName, jextractUTILS);\n+        HeaderFileBuilder utilsHeader = new HeaderFileBuilder(utilsBuilder, jextractUTILS, null, jextractUTILS);\n+\n+        utilsHeader.appendBlankLine();\n+        utilsHeader.classBegin();\n+        utilsHeader.emitDefaultConstructor();\n+\n+        utilsHeader.emitRuntimeHelperMethods();\n+        utilsHeader.emitFirstHeaderPreamble(libs, useSystemLoadLibrary);\n+        utilsHeader.emitBasicPrimitiveTypes();\n+        utilsHeader.classEnd();\n+\n+        return utilsBuilder;\n+    }\n+\n@@ -95,0 +113,4 @@\n+        if (jextractUTILS != null && jextractUtilsBuilder != null) {\n+            files.add(jextractUtilsBuilder.toFile());\n+        }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":46,"deletions":24,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+help.sharable.items=generate shared utility class for common layouts and methods\n@@ -87,0 +88,1 @@\n+--sharable-items <name>            generate shared utility class for common layouts and methods \\n\\\n@@ -91,1 +93,1 @@\n--framework <framework>                     specify framework library. -framework libGL is equivalent to         \\n\\\n+--framework <framework>                     specify framework library. --framework libGL is equivalent to         \\n\\\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import test.jextract.sharableItems.*;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.testng.Assert.assertEquals;\n+import static test.jextract.sharableItems.sharableItems_h.*;\n+\n+\/*\n+ * @test\n+ * @bug 7903933\n+ * @summary This is verbatim copy of TestNestedInsideAnon except for the `@run` command, used to test the `--sharable-items` option\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract --sharable-items FFM_UTILS -t test.jextract.sharableItems sharableItems.h\n+ * @build TestSharableItems\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestSharableItems\n+ *\/\n+public class TestSharableItems {\n+    @Test\n+    public void testAnonField() {\n+        checkLayout(S.layout());\n+    }\n+\n+    void checkLayout(GroupLayout layout) {\n+        assertEquals(((GroupLayout)layout.memberLayouts().get(0)).memberLayouts().get(0).withoutName(),\n+                S.Flags.layout().withoutName());\n+    }\n+}\n","filename":"test\/jtreg\/generator\/sharableItems\/TestSharableItems.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-} P;\n+} S;\n","filename":"test\/jtreg\/generator\/sharableItems\/sharableItems.h","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jtreg\/generator\/nestedInsideAnon\/nestedInsideAnon.h","status":"copied"}]}