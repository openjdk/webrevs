{"files":[{"patch":"@@ -62,1 +62,0 @@\n-    options.compilerArgs << \"-Xlint:unchecked\"\n","filename":"build.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.jextract.json.parser.JWCC;\n@@ -44,2 +43,0 @@\n-     * @param extension parse extended JSON format.\n-     *                  Allows comments and trailing commas.\n@@ -48,1 +45,1 @@\n-    public static <T extends Record> T parse(String str, Class<T> cls, boolean extension) {\n+    public static <T extends Record> T parse(String str, Class<T> cls) {\n@@ -52,1 +49,1 @@\n-        JSONValue jsonValue = extension ? JWCC.parse(str) : new JSONParser().parse(str);\n+        JSONValue jsonValue = new JSONParser().parse(str);\n@@ -56,11 +53,0 @@\n-    \/**\n-     * Parse a given String to a Record object of given type.\n-     *\n-     * @param str JSON string to parse.\n-     * @param cls the target record class type.\n-     * @return parsed and mapped record.\n-     *\/\n-    public static <T extends Record> T parse(String str, Class<T> cls) {\n-        return JSON.parse(str, cls, false);\n-    }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/JSON.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.json.parser;\n-\n-\/**\n- * JWCC is JSON With Commas and Comments. In addition to supporting all of JSON\n- * JWCC also supports trailing commas and comments. Comments can be either\n- * until single-line or multi-line.\n- *\n- * Comments are stripped and are not present in the parsed result.\n- *\/\n-public final class JWCC {\n-    private JWCC() {}\n-\n-    public static JSONValue parse(String s) {\n-        return new JSONParser(true, true).parse(s);\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JWCC.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -71,31 +71,0 @@\n-    @Test\n-    public void testParseRecordFromJSONExtended() {\n-        String json = \"\"\"\n-        {\n-          \"x\" : 888,  \/\/ X coordinate value\n-          \"y\" : -777, \/\/ Y coordinate value\n-        }\"\"\";\n-        Point pt = JSON.parse(json, Point.class, true);\n-        assertEquals(pt.x(), 888);\n-        assertEquals(pt.y(), -777);\n-\n-        \/\/ parsing without extension should fail!\n-        boolean gotException = false;\n-        try {\n-            JSON.parse(json, Point.class, false);\n-        } catch (RuntimeException re) {\n-            gotException = true;\n-        }\n-        assertTrue(gotException);\n-\n-        \/\/ parsing without extension should fail!\n-        gotException = false;\n-        try {\n-            \/\/ default mode is to disable extensions\n-            JSON.parse(json, Point.class);\n-        } catch (RuntimeException re) {\n-            gotException = true;\n-        }\n-        assertTrue(gotException);\n-    }\n-\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/json\/JSONTests.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.test.json.parser;\n-\n-import java.util.*;\n-import java.util.stream.*;\n-import org.openjdk.jextract.json.parser.*;\n-\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-public class JWCCTests {\n-    @Test\n-    public void testSingleLineComment() {\n-        var text = \"\"\"\n-                   \/\/ this is a comment before the object\n-                   { \/\/ this is a comment after opening brace\n-                     \"foo\": \"bar\" \/\/ this is a comment after field\n-                   } \/\/ this is a comment after closening brace\n-                   \/\/ this is a comment after the object\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"bar\", json.get(\"foo\").asString());\n-    }\n-\n-    @Test\n-    public void testSingleLineCommentAfterKey() {\n-        var text = \"\"\"\n-                   {\n-                     \"foo\": \/\/ comment\n-                         \"bar\"\n-                   }\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"bar\", json.get(\"foo\").asString());\n-    }\n-\n-    @Test\n-    public void testSingleLineCommentAfterKeyWithoutValue() {\n-        var text = \"\"\"\n-                   {\n-                     \"foo\": \/\/ comment\n-                   }\n-                   \"\"\";\n-        assertThrows(IllegalStateException.class, () -> {\n-            JWCC.parse(text);\n-        });\n-    }\n-\n-    @Test\n-    public void testInlineComment() {\n-        var text = \"\"\"\n-                   \/*\n-                    * This is a multi-line comment\n-                    *\n-                    *\/\n-                   \/*\n-                    * This is another multi-line comment with JSON in it\n-                    {\n-                      \"foo\": 17\n-                    }\n-                    *\/\n-                   \/* small comment *\/ { \/* another\n-                   multi-line *\/\n-                     \/* before *\/ \"foo\" \/* a comment *\/ : \/* another comment *\/ \"bar\" \/* so many comments *\/\n-                   } \/* after *\/\n-                   \/*\n-                    * A final multi-line\n-                    *\/\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"bar\", json.get(\"foo\").asString());\n-    }\n-\n-    @Test\n-    public void testInlineAndLineComment() {\n-        var text = \"\"\"\n-                   \/*\n-                    * This is a multi-line comment\n-                    * \/\/ with a line comment inside it\n-                    *\/\n-                   \/*\n-                    * This is another multi-line comment with JSON in it\n-                    {\n-                      \"foo\": 17\n-                    }\n-                    *\/\n-                   \/* small comment *\/ { \/\/ until end-of-line with closing brace }\n-                     \/* before *\/ \"foo\" \/* a comment *\/ : \/* another comment *\/ \"bar\" \/\/\/\/\/\/\/ end-of-line\n-                   } \/* after *\/ \/\/ end-of-line \/* with in-line *\/\n-                   \/*\n-                    * A final multi-line\n-                    *\/\n-                    \/\/ A final singe-line\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"bar\", json.get(\"foo\").asString());\n-    }\n-\n-    @Test\n-    public void testInlineAndLineCommentWithArray() {\n-        var text = \"\"\"\n-                   \/*\n-                    * This is a multi-line comment\n-                    * \/\/ with a line comment inside it\n-                    *\/\n-                   \/*\n-                    * This is another multi-line comment with JSON in it\n-                    {\n-                      \"foo\": 17\n-                    }\n-                    *\/\n-                   \/* small comment *\/ [ \/\/ until end-of-line with closing brace }\n-                     \/* before *\/ \"foo\" \/* a comment *\/ , \/* another comment *\/ \"bar\" \/\/\/\/\/\/\/ end-of-line\n-                   ] \/* after *\/ \/\/ end-of-line \/* with in-line *\/\n-                   \/*\n-                    * A final multi-line\n-                    *\/\n-                    \/\/ A final singe-line\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"foo\", json.get(0).asString());\n-        assertEquals(\"bar\", json.get(1).asString());\n-        assertEquals(2, json.asArray().size());\n-    }\n-\n-    @Test\n-    public void testTrailingComma() {\n-        var text = \"\"\"\n-                   {\n-                       \"a\": 1,\n-                       \"b\": 2,\n-                   }\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(1, json.get(\"a\").asInt());\n-        assertEquals(2, json.get(\"b\").asInt());\n-    }\n-\n-    @Test\n-    public void testTrailingCommaWithLineComment() {\n-        var text = \"\"\"\n-                   {\n-                       \"a\": 1, \/\/ a comment\n-                       \"b\": 2, \/\/ another comment\n-                   }\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(1, json.get(\"a\").asInt());\n-        assertEquals(2, json.get(\"b\").asInt());\n-    }\n-\n-    @Test\n-    public void testTrailingCommaWithInLineComment() {\n-        var text = \"\"\"\n-                   {\n-                       \"a\": 1, \/* an in-line *\/\n-                       \"b\": 2, \/* another in-line *\/\n-                   }\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(1, json.get(\"a\").asInt());\n-        assertEquals(2, json.get(\"b\").asInt());\n-    }\n-\n-    @Test\n-    public void testTrailingOnSameLine() {\n-        var text = \"\"\"\n-                   {\n-                       \"a\": 1, \"b\": 2, \/* in-line *\/ \"c\": 3,\n-                   }\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(1, json.get(\"a\").asInt());\n-        assertEquals(2, json.get(\"b\").asInt());\n-        assertEquals(3, json.get(\"c\").asInt());\n-    }\n-\n-    @Test\n-    public void testTrailingWithArray() {\n-        var text = \"\"\"\n-                   [\n-                       \"a\",\n-                   ]\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"a\", json.get(0).asString());\n-    }\n-\n-    @Test\n-    public void testTrailingWithMultipleArray() {\n-        var text = \"\"\"\n-                   [\n-                       \"a\",\n-                       \"b\",\n-                   ]\n-                   \"\"\";\n-        var json = JWCC.parse(text);\n-        assertEquals(\"a\", json.get(0).asString());\n-        assertEquals(\"b\", json.get(1).asString());\n-    }\n-}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/json\/parser\/JWCCTests.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"}]}