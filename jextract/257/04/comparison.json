{"files":[{"patch":"@@ -236,0 +236,2 @@\n+                \"-javacoption:--add-exports=org.openjdk.jextract\/org.openjdk.jextract.json.parser=ALL-UNNAMED\",\n+                \"-javaoption:--add-exports=org.openjdk.jextract\/org.openjdk.jextract.json.parser=ALL-UNNAMED\",\n","filename":"build.gradle","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+public final class JSON {\n+    private JSON() {}\n+\n+    public static JSONValue parse(String s) {\n+        return new JSONParser().parse(s);\n+    }\n+\n+    public static JSONValue of(int i) {\n+        return JSONValue.from(i);\n+    }\n+\n+    public static JSONValue of(long l) {\n+        return JSONValue.from(l);\n+    }\n+\n+    public static JSONValue of(double d) {\n+        return JSONValue.from(d);\n+    }\n+\n+    public static JSONValue of(boolean b) {\n+        return JSONValue.from(b);\n+    }\n+\n+    public static JSONValue of(String s) {\n+        return JSONValue.from(s);\n+    }\n+\n+    public static JSONValue of() {\n+        return JSONValue.fromNull();\n+    }\n+\n+    public static JSONArray array() {\n+        return new JSONArray();\n+    }\n+\n+    public static JSONObject object() {\n+        return new JSONObject();\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSON.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+public final class JSONArray implements JSONValue, Iterable<JSONValue> {\n+    private final List<JSONValue> values;\n+\n+    public JSONArray() {\n+        this.values = new ArrayList<>();\n+    }\n+\n+    public JSONArray(JSONValue[] array) {\n+        this.values = new ArrayList<>(array.length);\n+        for (var v : array) {\n+            values.add(v);\n+        }\n+    }\n+\n+    public JSONArray(List<JSONValue> values) {\n+        this.values = new ArrayList<>(values);\n+    }\n+\n+    @Override\n+    public boolean isArray() {\n+        return true;\n+    }\n+\n+    @Override\n+    public JSONArray asArray() {\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, boolean value) {\n+        values.set(i, JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, int value) {\n+        values.set(i, JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, long value) {\n+        values.set(i, JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, String value) {\n+        values.set(i, JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, double value) {\n+        values.set(i, JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray set(int i, JSONValue value) {\n+        values.set(i, value);\n+        return this;\n+    }\n+\n+    public JSONArray setNull(int i) {\n+        values.set(i, JSON.of());\n+        return this;\n+    }\n+\n+    public JSONArray add(boolean value) {\n+        values.add(JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray add(int value) {\n+        values.add(JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray add(long value) {\n+        values.add(JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray add(String value) {\n+        values.add(JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray add(double value) {\n+        values.add(JSON.of(value));\n+        return this;\n+    }\n+\n+    public JSONArray add(JSONValue value) {\n+        values.add(value);\n+        return this;\n+    }\n+\n+    public JSONArray addNull() {\n+        values.add(JSON.of());\n+        return this;\n+    }\n+\n+    public JSONValue get(int i) {\n+        return values.get(i);\n+    }\n+\n+    public int size() {\n+        return values.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return values.isEmpty();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        var builder = new StringBuilder();\n+\n+        builder.append(\"[\");\n+        for (var i = 0; i < size(); i++) {\n+            builder.append(get(i).toString());\n+            if (i != (size() - 1)) {\n+                builder.append(\",\");\n+            }\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+\n+    @Override\n+    public Stream<JSONValue> stream() {\n+        return values.stream();\n+    }\n+\n+    @Override\n+    public Iterator<JSONValue> iterator() {\n+        return values.iterator();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONArray that = (JSONArray) o;\n+        return values.equals(that.values);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(values);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONArray.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.Objects;\n+\n+public final class JSONBoolean implements JSONValue {\n+    private final boolean value;\n+\n+    public JSONBoolean(boolean value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean isBoolean() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean asBoolean() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value ? \"true\" : \"false\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONBoolean that = (JSONBoolean) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONBoolean.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.Objects;\n+\n+public final class JSONDecimal implements JSONValue {\n+    private final double value;\n+\n+    public JSONDecimal(double value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean isDouble() {\n+        return true;\n+    }\n+\n+    @Override\n+    public float asFloat() {\n+        return (float) value;\n+    }\n+\n+    @Override\n+    public double asDouble() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Double.toString(value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONDecimal that = (JSONDecimal) o;\n+        return Double.compare(that.value, value) == 0;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONDecimal.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+public final class JSONNull implements JSONValue {\n+    static final JSONNull instance = new JSONNull();\n+\n+    private JSONNull() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String asString() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JSONArray asArray() {\n+        return null;\n+    }\n+\n+    @Override\n+    public JSONObject asObject() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"null\";\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONNull.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.Objects;\n+\n+public final class JSONNumber implements JSONValue {\n+    private final long value;\n+\n+    public JSONNumber(int value) {\n+        this.value = (long) value;\n+    }\n+\n+    public JSONNumber(long value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean isInt() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isLong() {\n+        return true;\n+    }\n+\n+    @Override\n+    public byte asByte() {\n+        int v = asInt();\n+        if ((byte)v != v) {\n+            throw new ArithmeticException(\"byte overflow: \" + value);\n+        }\n+        return (byte) v;\n+    }\n+\n+    @Override\n+    public short asShort() {\n+        int v = asInt();\n+        if ((short)v != v) {\n+            throw new ArithmeticException(\"short overflow: \" + value);\n+        }\n+        return (short) v;\n+    }\n+\n+    @Override\n+    public int asInt() {\n+        return Math.toIntExact(value);\n+    }\n+\n+    @Override\n+    public long asLong() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Long.toString(value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONNumber that = (JSONNumber) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONNumber.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.Map;\n+import java.util.List;\n+import java.util.LinkedHashMap;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public final class JSONObject implements JSONValue {\n+    public static class Field {\n+        private final String name;\n+        private final JSONValue value;\n+\n+        private Field(String name, JSONValue value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+\n+        public String name() {\n+            return name;\n+        }\n+\n+        public JSONValue value() {\n+            return value;\n+        }\n+    }\n+\n+    private final Map<String, JSONValue> value;\n+\n+    public JSONObject() {\n+        this(new LinkedHashMap<>(), false);\n+    }\n+\n+    public JSONObject(Map<String, JSONValue> map) {\n+        this(map, true);\n+    }\n+\n+    \/\/ package private helper to avoid copying the map\n+    JSONObject(Map<String, JSONValue> map, boolean copy) {\n+        this.value = copy ? new LinkedHashMap<>(map) : map;\n+    }\n+\n+    @Override\n+    public boolean isObject() {\n+        return true;\n+    }\n+\n+    @Override\n+    public JSONObject asObject() {\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, boolean v) {\n+        value.put(k, JSON.of(v));\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, int v) {\n+        value.put(k, JSON.of(v));\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, long v) {\n+        value.put(k, JSON.of(v));\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, String v) {\n+        value.put(k, JSON.of(v));\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, double v) {\n+        value.put(k, JSON.of(v));\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, JSONArray v) {\n+        value.put(k, v);\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, JSONObject v) {\n+        value.put(k, v);\n+        return this;\n+    }\n+\n+    public JSONObject put(String k, JSONValue v) {\n+        value.put(k, v);\n+        return this;\n+    }\n+\n+    public JSONObject putNull(String k) {\n+        value.put(k, JSON.of());\n+        return this;\n+    }\n+\n+    public JSONObject remove(String k) {\n+        value.remove(k);\n+        return this;\n+    }\n+\n+    public JSONValue get(String k) {\n+        return value.get(k);\n+    }\n+\n+    public JSONValue getOrDefault(String k, JSONValue fallback) {\n+        return value.getOrDefault(k, fallback);\n+    }\n+\n+    public List<Field> fields() {\n+        return value.entrySet()\n+                    .stream()\n+                    .map(e -> new Field(e.getKey(), e.getValue()))\n+                    .collect(Collectors.toList());\n+    }\n+\n+    public boolean contains(String field) {\n+        return value.containsKey(field);\n+    }\n+\n+    public int size() {\n+        return value.size();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        var builder = new StringBuilder();\n+        builder.append(\"{\");\n+        for (var key : value.keySet()) {\n+            builder.append(\"\\\"\");\n+            builder.append(key);\n+            builder.append(\"\\\":\");\n+            builder.append(value.get(key).toString());\n+            builder.append(\",\");\n+        }\n+\n+        var end = builder.length() - 1;\n+        if (builder.charAt(end) == ',') {\n+            builder.deleteCharAt(end);\n+        }\n+\n+        builder.append(\"}\");\n+        return builder.toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONObject that = (JSONObject) o;\n+        return value.equals(that.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONObject.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,472 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.Optional;\n+\n+public final class JSONParser {\n+    private int pos = 0;\n+    private String input;\n+    private final boolean allowComments;\n+    private final boolean allowTrailingCommas;\n+\n+    public JSONParser() {\n+        this(false, false);\n+    }\n+\n+    public JSONParser(boolean allowComments, boolean allowTrailingCommas) {\n+        this.allowComments = allowComments;\n+        this.allowTrailingCommas = allowTrailingCommas;\n+    }\n+\n+    private IllegalStateException failure(String message) {\n+        return new IllegalStateException(String.format(\"[%d]: %s : %s\", pos, message, input));\n+    }\n+\n+    private char current() {\n+        return input.charAt(pos);\n+    }\n+\n+    private Optional<Character> next() {\n+        var nextPos = pos + 1;\n+        return nextPos < input.length() ?\n+            Optional.of(input.charAt(nextPos)) : Optional.empty();\n+    }\n+\n+    private void advance() {\n+        pos++;\n+    }\n+\n+    private boolean hasInput() {\n+        return pos < input.length();\n+    }\n+\n+    private void expectMoreInput(String message) {\n+        if (!hasInput()) {\n+            throw failure(message);\n+        }\n+    }\n+\n+    private char next(String message) {\n+        advance();\n+        if (!hasInput()) {\n+            throw failure(message);\n+        }\n+        return current();\n+    }\n+\n+\n+    private void expect(char c) {\n+        var msg = String.format(\"Expected character %c\", c);\n+\n+        var n = next(msg);\n+        if (n != c) {\n+            throw failure(msg);\n+        }\n+    }\n+\n+    private void assume(char c, String message) {\n+        expectMoreInput(message);\n+        if (current() != c) {\n+            throw failure(message);\n+        }\n+    }\n+\n+    private JSONBoolean parseBoolean() {\n+        if (current() == 't') {\n+            expect('r');\n+            expect('u');\n+            expect('e');\n+            advance();\n+            return new JSONBoolean(true);\n+        }\n+\n+        if (current() == 'f') {\n+            expect('a');\n+            expect('l');\n+            expect('s');\n+            expect('e');\n+            advance();\n+            return new JSONBoolean(false);\n+        }\n+\n+        throw failure(\"a boolean can only be 'true' or 'false'\");\n+    }\n+\n+    private JSONValue parseNumber() {\n+        var isInteger = true;\n+        var builder = new StringBuilder();\n+\n+        if (current() == '-') {\n+            builder.append(current());\n+            advance();\n+            expectMoreInput(\"a number cannot consist of only '-'\");\n+        }\n+\n+        if (current() == '0') {\n+            builder.append(current());\n+            advance();\n+\n+            if (hasInput() && current() == '.') {\n+                isInteger = false;\n+                builder.append(current());\n+                advance();\n+\n+                expectMoreInput(\"a number cannot end with '.'\");\n+\n+                if (!isDigit(current())) {\n+                    throw failure(\"must be at least one digit after '.'\");\n+                }\n+\n+                while (hasInput() && isDigit(current())) {\n+                    builder.append(current());\n+                    advance();\n+                }\n+            }\n+        } else {\n+            while (hasInput() && isDigit(current())) {\n+                builder.append(current());\n+                advance();\n+            }\n+\n+            if (hasInput() && current() == '.') {\n+                isInteger = false;\n+                builder.append(current());\n+                advance();\n+\n+                expectMoreInput(\"a number cannot end with '.'\");\n+\n+                if (!isDigit(current())) {\n+                    throw failure(\"must be at least one digit after '.'\");\n+                }\n+\n+                while (hasInput() && isDigit(current())) {\n+                    builder.append(current());\n+                    advance();\n+                }\n+            }\n+        }\n+\n+        if (hasInput() && (current() == 'e' || current() == 'E')) {\n+            isInteger = false;\n+\n+            builder.append(current());\n+            advance();\n+            expectMoreInput(\"a number cannot end with 'e' or 'E'\");\n+\n+            if (current() == '+' || current() == '-') {\n+                builder.append(current());\n+                advance();\n+            }\n+\n+            if (!isDigit(current())) {\n+                throw failure(\"a digit must follow {'e','E'}{'+','-'}\");\n+            }\n+\n+            while (hasInput() && isDigit(current())) {\n+                builder.append(current());\n+                advance();\n+            }\n+        }\n+\n+        var value = builder.toString();\n+        return isInteger ? new JSONNumber(Long.parseLong(value)) :\n+                           new JSONDecimal(Double.parseDouble(value));\n+\n+    }\n+\n+    private JSONString parseString() {\n+        var missingEndChar = \"string is not terminated with '\\\"'\";\n+        var builder = new StringBuilder();\n+        for (var c = next(missingEndChar); c != '\"'; c = next(missingEndChar)) {\n+            if (c == '\\\\') {\n+                var n = next(missingEndChar);\n+                switch (n) {\n+                    case '\"':\n+                        builder.append(\"\\\"\");\n+                        break;\n+                    case '\\\\':\n+                        builder.append(\"\\\\\");\n+                        break;\n+                    case '\/':\n+                        builder.append(\"\/\");\n+                        break;\n+                    case 'b':\n+                        builder.append(\"\\b\");\n+                        break;\n+                    case 'f':\n+                        builder.append(\"\\f\");\n+                        break;\n+                    case 'n':\n+                        builder.append(\"\\n\");\n+                        break;\n+                    case 'r':\n+                        builder.append(\"\\r\");\n+                        break;\n+                    case 't':\n+                        builder.append(\"\\t\");\n+                        break;\n+                    case 'u':\n+                        var u1 = next(missingEndChar);\n+                        var u2 = next(missingEndChar);\n+                        var u3 = next(missingEndChar);\n+                        var u4 = next(missingEndChar);\n+                        var cp = Integer.parseInt(String.format(\"%c%c%c%c\", u1, u2, u3, u4), 16);\n+                        builder.append(new String(new int[]{cp}, 0, 1));\n+                        break;\n+                    default:\n+                        throw failure(String.format(\"Unexpected escaped character '%c'\", n));\n+                }\n+            } else {\n+                builder.append(c);\n+            }\n+        }\n+\n+        advance(); \/\/ step beyond closing \"\n+        return new JSONString(builder.toString());\n+    }\n+\n+    private JSONArray parseArray() {\n+        var error = \"array is not terminated with ']'\";\n+        var list = new ArrayList<JSONValue>();\n+\n+        advance(); \/\/ step beyond opening '['\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n+        expectMoreInput(error);\n+\n+        while (current() != ']') {\n+            var val = parseValue();\n+            list.add(val);\n+\n+            expectMoreInput(error);\n+            if (current() == ',') {\n+                advance();\n+                if (allowTrailingCommas) {\n+                    if (allowComments) {\n+                        consumeCommentsAndWhitespace();\n+                    } else {\n+                        consumeWhitespace();\n+                    }\n+                }\n+            }\n+            expectMoreInput(error);\n+        }\n+\n+        advance(); \/\/ step beyond closing ']'\n+        return new JSONArray(list.toArray(new JSONValue[0]));\n+    }\n+\n+    public JSONNull parseNull() {\n+        expect('u');\n+        expect('l');\n+        expect('l');\n+        advance();\n+        return JSONNull.instance;\n+    }\n+\n+    public JSONObject parseObject() {\n+        var error = \"object is not terminated with '}'\";\n+        var map = new LinkedHashMap<String, JSONValue>();\n+\n+        advance(); \/\/ step beyond opening '{'\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n+        expectMoreInput(error);\n+\n+        while (current() != '}') {\n+            var key = parseValue();\n+            if (!(key instanceof JSONString)) {\n+                throw failure(\"a field must of type string\");\n+            }\n+\n+            if (!hasInput() || current() != ':') {\n+                throw failure(\"a field must be followed by ':'\");\n+            }\n+            advance(); \/\/ skip ':'\n+\n+            var val = parseValue();\n+            map.put(key.asString(), val);\n+\n+            expectMoreInput(error);\n+            if (current() == ',') {\n+                advance();\n+                if (allowTrailingCommas) {\n+                    if (allowComments) {\n+                        consumeCommentsAndWhitespace();\n+                    } else {\n+                        consumeWhitespace();\n+                    }\n+                }\n+            }\n+            expectMoreInput(error);\n+        }\n+\n+        advance(); \/\/ step beyond '}'\n+        return new JSONObject(map, false \/* do not copy *\/);\n+    }\n+\n+    private boolean isDigit(char c) {\n+        return c == '0' ||\n+               c == '1' ||\n+               c == '2' ||\n+               c == '3' ||\n+               c == '4' ||\n+               c == '5' ||\n+               c == '6' ||\n+               c == '7' ||\n+               c == '8' ||\n+               c == '9';\n+    }\n+\n+    private boolean isStartOfNumber(char c) {\n+        return isDigit(c) || c == '-';\n+    }\n+\n+    private boolean isStartOfString(char c) {\n+        return c == '\"';\n+    }\n+\n+    private boolean isStartOfBoolean(char c) {\n+        return c == 't' || c == 'f';\n+    }\n+\n+    private boolean isStartOfArray(char c) {\n+        return c == '[';\n+    }\n+\n+    private boolean isStartOfNull(char c) {\n+        return c == 'n';\n+    }\n+\n+    private boolean isWhitespace(char c) {\n+        return c == '\\r' ||\n+               c == '\\n' ||\n+               c == '\\t' ||\n+               c == ' ';\n+    }\n+\n+    private boolean isStartOfObject(char c) {\n+        return c == '{';\n+    }\n+\n+    private void consumeCommentsAndWhitespace() {\n+        while (hasInput() && (isWhitespace(current()) || isComment())) {\n+            consumeWhitespace();\n+            consumeComment();\n+        }\n+    }\n+\n+    private boolean isComment() {\n+        return hasInput() &&\n+               current() == '\/' &&\n+               (next().equals(Optional.of('*')) || next().equals(Optional.of('\/')));\n+    }\n+\n+    private void consumeComment() {\n+        if (isComment()) {\n+            advance();\n+            if (current() == '\/') {\n+                advance();\n+                while (hasInput() && current() != '\\n') {\n+                    advance();\n+                }\n+            } else {\n+                advance();\n+                while (hasInput()) {\n+                    if (current() == '*' && next().equals(Optional.of('\/'))) {\n+                        advance();\n+                        advance();\n+                        break;\n+                    }\n+                    advance();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void consumeWhitespace() {\n+        while (hasInput() && isWhitespace(current())) {\n+            advance();\n+        }\n+    }\n+\n+    public JSONValue parseValue() {\n+        JSONValue ret = null;\n+\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n+        if (hasInput()) {\n+            var c = current();\n+\n+            if (isStartOfNumber(c)) {\n+                ret = parseNumber();\n+            } else if (isStartOfString(c)) {\n+                ret = parseString();\n+            } else if (isStartOfBoolean(c)) {\n+                ret = parseBoolean();\n+            } else if (isStartOfArray(c)) {\n+                ret = parseArray();\n+            } else if (isStartOfNull(c)) {\n+                ret = parseNull();\n+            } else if (isStartOfObject(c)) {\n+                ret = parseObject();\n+            } else {\n+                throw failure(\"not a valid start of a JSON value\");\n+            }\n+        }\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n+\n+        return ret;\n+    }\n+\n+    public JSONValue parse(String s) {\n+        if (s == null || s.equals(\"\")) {\n+            return null;\n+        }\n+\n+        pos = 0;\n+        input = s;\n+\n+        var result = parseValue();\n+        if (hasInput()) {\n+            throw failure(\"can only have one top-level JSON value\");\n+        }\n+        return result;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONParser.java","additions":472,"deletions":0,"binary":false,"changes":472,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.Objects;\n+\n+public final class JSONString implements JSONValue {\n+    private final String value;\n+\n+    public JSONString(String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean isString() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String asString() {\n+        return value;\n+    }\n+\n+    @Override\n+    public char asChar() {\n+        String s = asString();\n+        if (s.length() != 1) {\n+            throw new IllegalStateException(\"cannot convert to char: \" + s);\n+        }\n+        return s.charAt(0);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        var builder = new StringBuilder();\n+        builder.append(\"\\\"\");\n+\n+        for (var i = 0; i < value.length(); i++) {\n+            var c = value.charAt(i);\n+\n+            switch (c) {\n+                case '\"':\n+                    builder.append(\"\\\\\\\"\");\n+                    break;\n+                case '\\\\':\n+                    builder.append(\"\\\\\\\\\");\n+                    break;\n+                case '\/':\n+                    builder.append(\"\\\\\/\");\n+                    break;\n+                case '\\b':\n+                    builder.append(\"\\\\b\");\n+                    break;\n+                case '\\f':\n+                    builder.append(\"\\\\f\");\n+                    break;\n+                case '\\n':\n+                    builder.append(\"\\\\n\");\n+                    break;\n+                case '\\r':\n+                    builder.append(\"\\\\r\");\n+                    break;\n+                case '\\t':\n+                    builder.append(\"\\\\t\");\n+                    break;\n+                default:\n+                    builder.append(c);\n+                    break;\n+            }\n+        }\n+\n+        builder.append(\"\\\"\");\n+        return builder.toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JSONString that = (JSONString) o;\n+        return Objects.equals(value, that.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONString.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.json.parser;\n+\n+import java.util.stream.Stream;\n+import java.util.List;\n+\n+public sealed interface JSONValue permits\n+        JSONBoolean, JSONNumber, JSONDecimal, JSONString,\n+        JSONObject, JSONArray, JSONNull  {\n+    default byte asByte() {\n+        throw new IllegalStateException(\"Unsupported conversion to byte\");\n+    }\n+\n+    default short asShort() {\n+        throw new IllegalStateException(\"Unsupported conversion to short\");\n+    }\n+\n+    default int asInt() {\n+        throw new IllegalStateException(\"Unsupported conversion to int\");\n+    }\n+\n+    default long asLong() {\n+        throw new IllegalStateException(\"Unsupported conversion to long\");\n+    }\n+\n+    default float asFloat() {\n+        throw new IllegalStateException(\"Unsupported conversion to float\");\n+    }\n+\n+    default double asDouble() {\n+        throw new IllegalStateException(\"Unsupported conversion to double\");\n+    }\n+\n+    default String asString() {\n+        throw new IllegalStateException(\"Unsupported conversion to String\");\n+    }\n+\n+    default char asChar() {\n+        throw new IllegalStateException(\"Unsupported conversion to char\");\n+    }\n+\n+    default boolean asBoolean() {\n+        throw new IllegalStateException(\"Unsupported conversion to boolean\");\n+    }\n+\n+    default JSONArray asArray() {\n+        throw new IllegalStateException(\"Unsupported conversion to array\");\n+    }\n+\n+    default JSONObject asObject() {\n+        throw new IllegalStateException(\"Unsupported conversion to object\");\n+    }\n+\n+    default boolean isInt() {\n+        return false;\n+    }\n+\n+    default boolean isLong() {\n+        return false;\n+    }\n+\n+    default boolean isDouble() {\n+        return false;\n+    }\n+\n+    default boolean isString() {\n+        return false;\n+    }\n+\n+    default boolean isBoolean() {\n+        return false;\n+    }\n+\n+    default boolean isArray() {\n+        return false;\n+    }\n+\n+    default boolean isObject() {\n+        return false;\n+    }\n+\n+    default boolean isNull() {\n+        return false;\n+    }\n+\n+    default List<JSONObject.Field> fields() {\n+        return asObject().fields();\n+    }\n+\n+    default boolean contains(String field) {\n+        return asObject().contains(field);\n+    }\n+\n+    default JSONValue get(String field) {\n+        return asObject().get(field);\n+    }\n+\n+    default JSONValue getOrDefault(String field, JSONValue fallback) {\n+        return asObject().getOrDefault(field, fallback);\n+    }\n+\n+    default JSONValue get(int i) {\n+        return asArray().get(i);\n+    }\n+\n+    default Stream<JSONValue> stream() {\n+        return Stream.of(this);\n+    }\n+\n+    static JSONValue from(int i) {\n+        return new JSONNumber(i);\n+    }\n+\n+    static JSONValue from(long l) {\n+        return new JSONNumber(l);\n+    }\n+\n+    static JSONValue from(double d) {\n+        return new JSONDecimal(d);\n+    }\n+\n+    static JSONValue from(boolean b) {\n+        return new JSONBoolean(b);\n+    }\n+\n+    static JSONValue from(String s) {\n+        return new JSONString(s);\n+    }\n+\n+    static JSONValue fromNull() {\n+        return JSONNull.instance;\n+    }\n+\n+    static String toPrettyString(JSONValue value) {\n+        StringBuilder builder = new StringBuilder();\n+        toPrettyString(builder, 0, false, value);\n+        return builder.toString();\n+    }\n+\n+    private static void toPrettyString(StringBuilder builder, int level, boolean asField, JSONValue value) {\n+        if (!asField) {\n+            indent(builder, level);\n+        }\n+        switch (value) {\n+            case JSONObject obj -> {\n+                builder.append(\"{\\n\");\n+                List<JSONObject.Field> fields = obj.fields();\n+                for (int i = 0; i < fields.size(); i++) {\n+                    JSONObject.Field field = fields.get(i);\n+                    indent(builder, level + 1).append(\"\\\"\" + field.name() + \"\\\": \");\n+                    toPrettyString(builder, level + 1, true, field.value());\n+                    if (i < fields.size() - 1) {\n+                        builder.append(\",\\n\");\n+                    } else {\n+                        builder.append(\"\\n\");\n+                    }\n+                }\n+                indent(builder, level).append(\"}\");\n+            }\n+            case JSONArray array -> {\n+                builder.append(\"[\\n\");\n+                for (int i = 0; i < array.size(); i++) {\n+                    toPrettyString(builder, level + 1, false, array.get(i));\n+                    if (i < array.size() - 1) {\n+                        builder.append(\",\\n\");\n+                    } else {\n+                        builder.append(\"\\n\");\n+                    }\n+                }\n+                indent(builder, level).append(\"]\");\n+            }\n+            case JSONValue v -> builder.append(v);\n+        }\n+    }\n+\n+    private static StringBuilder indent(StringBuilder builder, int level) {\n+        builder.append(\"  \".repeat(level));\n+        return builder;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/json\/parser\/JSONValue.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -0,0 +1,622 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.json.parser;\n+\n+import java.util.*;\n+import java.util.stream.*;\n+import org.openjdk.jextract.json.parser.*;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class JSONParserTests {\n+    private final JSONParser parser = new JSONParser();\n+\n+    @Test\n+    void testParseTrue() {\n+        var value = parser.parse(\"true\");\n+        assertEquals(value.asBoolean(), true);\n+    }\n+\n+    @Test\n+    void testParseFalse() {\n+        var value = parser.parse(\"false\");\n+        assertEquals(value.asBoolean(), false);\n+    }\n+\n+    @Test\n+    void testParseInt() {\n+        var value = parser.parse(\"17\");\n+        assertEquals(value.asInt(), 17);\n+    }\n+\n+    @Test\n+    void testParseTrueWithWhitespace() {\n+        var value = parser.parse(\"    true   \\n \\t   \\r\\n\");\n+        assertEquals(value.asBoolean(), true);\n+    }\n+\n+    @Test\n+    void testParseFalseWithWhitespace() {\n+        var value = parser.parse(\"\\r\\n    \\t    false  \\t\\t\\t\");\n+        assertEquals(value.asBoolean(), false);\n+    }\n+\n+    @Test\n+    void testParseString() {\n+        var value = parser.parse(\"\\\"Hello, JSON\\\"\");\n+        assertEquals(value.asString(), \"Hello, JSON\");\n+    }\n+\n+    @Test\n+    void testParseArray() {\n+        var value = parser.parse(\"[1,2,3]\");\n+        assertEquals(value.asArray().get(0).asInt(), 1);\n+        assertEquals(value.asArray().get(1).asInt(), 2);\n+        assertEquals(value.asArray().get(2).asInt(), 3);\n+    }\n+\n+    @Test\n+    void testParseNull() {\n+        var value = parser.parse(\"null\");\n+        assertEquals(value.asArray(), null);\n+    }\n+\n+    @Test\n+    void testParseObject() {\n+        var value = parser.parse(\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\");\n+        assertEquals(value.asObject().get(\"a\").asInt(), 1);\n+        assertEquals(value.asObject().get(\"b\").asInt(), 2);\n+        assertEquals(value.asObject().get(\"c\").asInt(), 3);\n+    }\n+\n+    @Test\n+    void testParseArrayWithWhitespace() {\n+        var value = parser.parse(\"\\n\\n\\n\\t [  1, \\t\\n   2, \\r\\n \\t \\t 3  ] \\t\\t\\t\\n\");\n+        assertEquals(value.asArray().get(0).asInt(), 1);\n+        assertEquals(value.asArray().get(1).asInt(), 2);\n+        assertEquals(value.asArray().get(2).asInt(), 3);\n+    }\n+\n+    @Test\n+    void testParseObjectWithWhitespace() {\n+        var value = parser.parse(\"   \\t \\r\\n   {  \\t \\n \\r\\\"a\\\" \\n\\n \\t : \\r\\n 1 \\n\\n, \\\"b\\\"  :  2 ,  \\\"c\\\"  :  3  }  \");\n+        assertEquals(value.asObject().get(\"a\").asInt(), 1);\n+        assertEquals(value.asObject().get(\"b\").asInt(), 2);\n+        assertEquals(value.asObject().get(\"c\").asInt(), 3);\n+    }\n+\n+    @Test\n+    void testObjectShortcut() {\n+        var value = parser.parse(\"{ \\\"a\\\":1, \\\"b\\\":2, \\\"c\\\":3 }\");\n+        assertEquals(value.get(\"a\").asInt(), 1);\n+        assertEquals(value.get(\"b\").asInt(), 2);\n+        assertEquals(value.get(\"c\").asInt(), 3);\n+    }\n+\n+    @Test\n+    void testArrayShortcut() {\n+        var value = parser.parse(\"[ 1, 2, 3]\");\n+        assertEquals(value.get(0).asInt(), 1);\n+        assertEquals(value.get(1).asInt(), 2);\n+        assertEquals(value.get(2).asInt(), 3);\n+    }\n+\n+    @Test\n+    void testIntToString() {\n+        var v = JSON.of(17);\n+        assertEquals(v.toString(), \"17\");\n+    }\n+\n+    @Test\n+    void testDoubleToString() {\n+        var v = JSON.of(17.7);\n+        assertEquals(v.toString(), \"17.7\");\n+    }\n+\n+    @Test\n+    void testBooleanToString() {\n+        var v = JSON.of(true);\n+        assertEquals(v.toString(), \"true\");\n+    }\n+\n+    @Test\n+    void testNullToString() {\n+        var v = JSON.of();\n+        assertEquals(v.toString(), \"null\");\n+    }\n+\n+    @Test\n+    void testStringToString() {\n+        var v = JSON.of(\"Hello, JSON\");\n+        assertEquals(v.toString(), \"\\\"Hello, JSON\\\"\");\n+    }\n+\n+    @Test\n+    void testArrayToString() {\n+        var v = new JSONArray();\n+        v.add(1);\n+        v.add(2);\n+        v.add(3);\n+        assertEquals(v.toString(), \"[1,2,3]\");\n+    }\n+\n+    @Test\n+    void testObjectToString() {\n+        var v = new JSONObject();\n+        v.put(\"a\", 1);\n+        v.put(\"b\", 2);\n+        v.put(\"c\", 3);\n+        assertEquals(v.toString(), \"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\");\n+    }\n+\n+    @Test\n+    void testNestedObjectToString() {\n+        var inner = new JSONObject();\n+        inner.put(\"a\", 1);\n+        inner.put(\"b\", 2);\n+        inner.put(\"c\", 3);\n+\n+        var outer = new JSONObject();\n+        outer.put(\"inner\", inner);\n+        assertEquals(outer.toString(), \"{\\\"inner\\\":{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}}\");\n+    }\n+\n+    @Test\n+    void testToStringAndParse() {\n+        var inner = new JSONObject();\n+        inner.put(\"a\", 1);\n+        inner.put(\"b\", 2);\n+        inner.put(\"c\", 3);\n+\n+        var outer = new JSONObject();\n+        outer.put(\"inner\", inner);\n+\n+        var s = outer.toString();\n+\n+        var parsed = parser.parse(s);\n+        assertEquals(parsed.get(\"inner\").get(\"a\").asInt(), 1);\n+        assertEquals(parsed.get(\"inner\").get(\"b\").asInt(), 2);\n+        assertEquals(parsed.get(\"inner\").get(\"c\").asInt(), 3);\n+    }\n+\n+    @Test\n+    void testLargerJSONText() {\n+        var text = \"{\\n\" +\n+                   \"  \\\"name\\\": \\\"mighty_readme\\\",\\n\" +\n+                   \"  \\\"head_sha\\\": \\\"ce587453ced02b1526dfb4cb910479d431683101\\\",\\n\" +\n+                   \"  \\\"status\\\": \\\"completed\\\",\\n\" +\n+                   \"  \\\"started_at\\\": \\\"2017-11-30T19:39:10Z\\\",\\n\" +\n+                   \"  \\\"completed_at\\\": \\\"2017-11-30T19:49:10Z\\\",\\n\" +\n+                   \"  \\\"output\\\": {\\n\" +\n+                   \"    \\\"title\\\": \\\"Mighty Readme report\\\",\\n\" +\n+                   \"    \\\"summary\\\": \\\"There are 0 failures, 2 warnings, and 1 notices.\\\",\\n\" +\n+                   \"    \\\"text\\\": \\\"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\\\",\\n\" +\n+                   \"    \\\"annotations\\\": [\\n\" +\n+                   \"      {\\n\" +\n+                   \"        \\\"path\\\": \\\"README.md\\\",\\n\" +\n+                   \"        \\\"annotation_level\\\": \\\"warning\\\",\\n\" +\n+                   \"        \\\"title\\\": \\\"Spell Checker\\\",\\n\" +\n+                   \"        \\\"message\\\": \\\"Check your spelling for 'banaas'.\\\",\\n\" +\n+                   \"        \\\"raw_details\\\": \\\"Do you mean 'bananas' or 'banana'?\\\",\\n\" +\n+                   \"        \\\"start_line\\\": \\\"2\\\",\\n\" +\n+                   \"        \\\"end_line\\\": \\\"2\\\"\\n\" +\n+                   \"      },\\n\" +\n+                   \"      {\\n\" +\n+                   \"        \\\"path\\\": \\\"README.md\\\",\\n\" +\n+                   \"        \\\"annotation_level\\\": \\\"warning\\\",\\n\" +\n+                   \"        \\\"title\\\": \\\"Spell Checker\\\",\\n\" +\n+                   \"        \\\"message\\\": \\\"Check your spelling for 'aples'\\\",\\n\" +\n+                   \"        \\\"raw_details\\\": \\\"Do you mean 'apples' or 'Naples'\\\",\\n\" +\n+                   \"        \\\"start_line\\\": \\\"4\\\",\\n\" +\n+                   \"        \\\"end_line\\\": \\\"4\\\"\\n\" +\n+                   \"      }\\n\" +\n+                   \"    ],\\n\" +\n+                   \"    \\\"images\\\": [\\n\" +\n+                   \"      {\\n\" +\n+                   \"        \\\"alt\\\": \\\"Super bananas\\\",\\n\" +\n+                   \"        \\\"image_url\\\": \\\"http:\/\/example.com\/images\/42\\\"\\n\" +\n+                   \"      }\\n\" +\n+                   \"    ]\\n\" +\n+                   \"  },\\n\" +\n+                   \"  \\\"actions\\\": [\\n\" +\n+                   \"    {\\n\" +\n+                   \"      \\\"label\\\": \\\"Fix\\\",\\n\" +\n+                   \"      \\\"identifier\\\": \\\"fix_errors\\\",\\n\" +\n+                   \"      \\\"description\\\": \\\"Allow us to fix these errors for you\\\"\\n\" +\n+                   \"    }\\n\" +\n+                   \"  ]\\n\" +\n+                   \"}\";\n+        var v = parser.parse(text);\n+        assertEquals(v.get(\"name\").asString(), \"mighty_readme\");\n+        assertEquals(v.get(\"output\").get(\"annotations\").get(0).get(\"path\").asString(), \"README.md\");\n+    }\n+\n+    @Test\n+    void testAPI() {\n+        var o = JSON.object()\n+                    .put(\"a\", 1)\n+                    .put(\"b\", 2)\n+                    .put(\"c\", 3);\n+\n+        var parsed = JSON.parse(o.toString());\n+        assertEquals(parsed.get(\"a\").asInt(), 1);\n+        assertEquals(parsed.get(\"b\").asInt(), 2);\n+        assertEquals(parsed.get(\"c\").asInt(), 3);\n+\n+        var a = JSON.array()\n+                    .add(\"a\")\n+                    .add(2)\n+                    .add(false)\n+                    .add(3.14);\n+\n+        parsed = JSON.parse(a.toString());\n+        assertEquals(parsed.get(0).asString(), \"a\");\n+        assertEquals(parsed.get(1).asInt(), 2);\n+        assertEquals(parsed.get(2).asBoolean(), false);\n+        assertEquals(parsed.get(3).asDouble(), 3.14);\n+\n+        var o2 = JSON.object()\n+                     .put(\"inner\",\n+                        JSON.object()\n+                            .put(\"x\", 1)\n+                            .put(\"y\", \"user_2\")\n+                            .put(\"z\", 2.1))\n+                     .put(\"array\",\n+                        JSON.array()\n+                            .add(4)\n+                            .add(false)\n+                            .add(\"user_1\"));\n+\n+        parsed = JSON.parse(o2.toString());\n+        assertEquals(parsed.get(\"inner\").get(\"x\").asInt(), 1);\n+        assertEquals(parsed.get(\"inner\").get(\"y\").asString(), \"user_2\");\n+        assertEquals(parsed.get(\"inner\").get(\"z\").asDouble(), 2.1);\n+        assertEquals(parsed.get(\"array\").get(0).asInt(), 4);\n+        assertEquals(parsed.get(\"array\").get(1).asBoolean(), false);\n+        assertEquals(parsed.get(\"array\").get(2).asString(), \"user_1\");\n+    }\n+\n+    @Test\n+    void testParseStringWithCitation() {\n+        var v = JSON.parse(\"\\\"hello, \\\\\\\"citation\\\\\\\"\\\"\");\n+        assertEquals(\"hello, \\\"citation\\\"\", v.asString());\n+    }\n+\n+    @Test\n+    void testParseStringBackslash() {\n+        var v = JSON.parse(\"\\\"hello, backslash: \\\\\\\\ \\\"\");\n+        assertEquals(\"hello, backslash: \\\\ \", v.asString());\n+    }\n+\n+    @Test\n+    void testParseStringBackslashAndN() {\n+        var v = JSON.parse(\"\\\"hello, backslash: \\\\\\\\n \\\"\");\n+        assertEquals(\"hello, backslash: \\\\n \", v.asString());\n+    }\n+\n+    @Test\n+    void testParseEmptyString() {\n+        var v = JSON.parse(\"\\\"\\\"\");\n+        assertEquals(\"\", v.asString());\n+    }\n+\n+    @Test\n+    void testParseStringWithNewline() {\n+        var v = JSON.parse(\"\\\"hello newline\\\\n\\\"\");\n+        assertEquals(\"hello newline\\n\", v.asString());\n+    }\n+\n+    @Test\n+    void testStreamAPI() {\n+        var v = JSON.array().add(1).add(2).add(3);\n+        var a = v.stream().mapToInt(JSONValue::asInt).toArray();\n+        assertEquals(a[0], 1);\n+        assertEquals(a[1], 2);\n+        assertEquals(a[2], 3);\n+\n+        var v2 = JSON.of(17.7);\n+        assertEquals(v2.stream().count(), 1L);\n+    }\n+\n+    @Test\n+    void testIterateFieldsInObject() {\n+        var o = JSON.object()\n+                    .put(\"a\", 1)\n+                    .put(\"b\", 2)\n+                    .put(\"c\", 3);\n+\n+        var fields = o.fields();\n+        assertEquals(fields.size(), 3);\n+\n+        var seen = new HashSet<String>();\n+        fields.forEach(f -> seen.add(f.name()));\n+        assertTrue(seen.contains(\"a\"));\n+        assertTrue(seen.contains(\"b\"));\n+        assertTrue(seen.contains(\"c\"));\n+    }\n+\n+    @Test\n+    void testObjectContains() {\n+        var o = JSON.object().put(\"a\", 1);\n+        assertTrue(o.contains(\"a\"));\n+        assertFalse(o.contains(\"b\"));\n+    }\n+\n+    @Test\n+    void testArrayIterator() {\n+        var array = JSON.array().add(1).add(2).add(3);\n+        var count = 0;\n+        for (var e : array) {\n+            count++;\n+        }\n+        assertEquals(count, 3);\n+    }\n+\n+    @Test\n+    void testStringEncodingWithEscapedChars() {\n+        var s = JSON.of(\"hello newline\\n\");\n+        assertEquals(\"\\\"hello newline\\\\n\\\"\", s.toString());\n+\n+        s = JSON.of(\"backslash: \\\\\");\n+        assertEquals(\"\\\"backslash: \\\\\\\\\\\"\", s.toString());\n+    }\n+\n+    @Test\n+    void testLongNumber() {\n+        var l = 1337L;\n+        var json = JSON.of(l);\n+        assertEquals(\"1337\", json.toString());\n+        assertEquals(1337L, json.asLong());\n+        assertEquals(1337, json.asInt());\n+    }\n+\n+    @Test\n+    void testEscapedUnicodeCodePoint() {\n+        var s = \"\\\"\\\\ud83d\\\\ude04\\\"\";\n+        var json = JSON.parse(s);\n+        assertEquals(\"\\ud83d\\ude04\", json.asString());\n+\n+        s = \"\\\"\\\\u003c\\\"\";\n+        json = JSON.parse(s);\n+        assertEquals(\"\\u003c\", json.asString());\n+        assertEquals(\"<\", json.asString());\n+    }\n+\n+    @Test\n+    void testLargeGitLabExample() {\n+        var s =\n+        \"[\" +\n+            \"{\" +\n+                \"\\\"id\\\":369,\" +\n+                \"\\\"iid\\\":2,\" +\n+                \"\\\"project_id\\\":55,\" +\n+                \"\\\"title\\\":\\\"Add some useful whitespace\\\",\"+\n+                \"\\\"description\\\":\\\"It is that time.\\\\n\\\\n\\\\u003c!-- \" +\n+                                  \"Anything below this marker will be \" +\n+                                  \"automatically updated, please do not \" +\n+                                  \"edit manually! --\\\\u003e\\\\n\\\\n- [x] \" +\n+                                  \"Your change must have been available for \" +\n+                                  \"review at least 24 hours\\\\n- [ ] Title must \" +\n+                                  \"be of the format id: description where id \" +\n+                                  \"matches an existing JBS issue\\\",\" +\n+                \"\\\"state\\\":\\\"opened\\\",\" +\n+                \"\\\"created_at\\\":\\\"2018-09-06T11:52:39.314Z\\\",\" +\n+                \"\\\"updated_at\\\":\\\"2018-09-10T13:08:27.648Z\\\",\" +\n+                \"\\\"target_branch\\\":\\\"master\\\",\" +\n+                \"\\\"source_branch\\\":\\\"rwtest-1\\\",\" +\n+                \"\\\"upvotes\\\":0,\" +\n+                \"\\\"downvotes\\\":0,\"+\n+                \"\\\"author\\\":{\" +\n+                    \"\\\"id\\\":2,\" +\n+                    \"\\\"name\\\":\\\"User Number 3\\\",\" +\n+                    \"\\\"username\\\":\\\"user_3\\\",\" +\n+                    \"\\\"state\\\":\\\"active\\\",\" +\n+                    \"\\\"avatar_url\\\":\\\"avatar.png\\\",\" +\n+                    \"\\\"web_url\\\":\\\"https:\/\/host.com\/user_3\\\"\" +\n+                    \"},\" +\n+                \"\\\"assignee\\\":null,\" +\n+                \"\\\"source_project_id\\\":55,\" +\n+                \"\\\"target_project_id\\\":55,\" +\n+                \"\\\"labels\\\":[],\" +\n+                \"\\\"draft\\\":false,\" +\n+                \"\\\"milestone\\\":null,\" +\n+                \"\\\"merge_when_pipeline_succeeds\\\":false,\" +\n+                \"\\\"merge_status\\\":\\\"can_be_merged\\\",\" +\n+                \"\\\"sha\\\":\\\"e282f1d56fa0710783d1c5d77a6c850669937a72\\\",\" +\n+                \"\\\"merge_commit_sha\\\":null,\" +\n+                \"\\\"user_notes_count\\\":2,\" +\n+                \"\\\"discussion_locked\\\":null,\" +\n+                \"\\\"should_remove_source_branch\\\":null,\" +\n+                \"\\\"force_remove_source_branch\\\":false,\" +\n+                \"\\\"web_url\\\":\\\"https:\/\/host.com\/user_3\/test\/merge_requests\/2\\\",\" +\n+                \"\\\"time_stats\\\":{\" +\n+                    \"\\\"time_estimate\\\":0,\" +\n+                    \"\\\"total_time_spent\\\":0,\" +\n+                    \"\\\"human_time_estimate\\\":null,\" +\n+                    \"\\\"human_total_time_spent\\\":null\" +\n+                    \"},\" +\n+                \"\\\"squash\\\":false\" +\n+            \"}\" +\n+        \"]\";\n+\n+        var json = JSON.parse(s);\n+        assertEquals(369, json.get(0).get(\"id\").asInt());\n+        assertEquals(\"active\", json.get(0).get(\"author\").get(\"state\").asString());\n+    }\n+\n+    @Test\n+    public void testIsNull() {\n+        var json = JSON.parse(\"[{\\\"id\\\":705,\\\"type\\\":null,\\\"body\\\":\\\"description\\\"}]\");\n+        assertTrue(json.get(0).get(\"type\").isNull());\n+        assertFalse(json.get(0).get(\"type\").isInt());\n+        assertFalse(json.get(0).get(\"type\").isLong());\n+        assertFalse(json.get(0).get(\"type\").isDouble());\n+        assertFalse(json.get(0).get(\"type\").isString());\n+        assertFalse(json.get(0).get(\"type\").isBoolean());\n+        assertFalse(json.get(0).get(\"type\").isArray());\n+        assertFalse(json.get(0).get(\"type\").isObject());\n+\n+        assertFalse(json.get(0).get(\"id\").isNull());\n+    }\n+\n+    @Test\n+    public void testContainsShortcut() {\n+        var json = JSON.parse(\"{\\\"id\\\":705,\\\"type\\\":null,\\\"body\\\":\\\"description\\\"}\");\n+        assertTrue(json.contains(\"id\"));\n+        assertFalse(json.contains(\"header\"));\n+        assertTrue(json.contains(\"type\"));\n+    }\n+\n+    @Test\n+    public void testFieldsShortcut() {\n+        var json = JSON.parse(\"{\\\"id\\\":705,\\\"type\\\":null,\\\"body\\\":\\\"description\\\"}\");\n+        var names = json.fields().stream().map(JSONObject.Field::name).collect(Collectors.toSet());\n+        assertEquals(Set.of(\"id\", \"type\", \"body\"), names);\n+    }\n+\n+    @Test\n+    public void testArrayWithWhitespace() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": [ ] }\");\n+        assertEquals(0, json.get(\"foo\").asArray().size());\n+    }\n+\n+    @Test\n+    public void testObjectWithWhitespace() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": { } }\");\n+        assertEquals(0, json.get(\"foo\").asObject().fields().size());\n+    }\n+\n+    @Test\n+    public void testIsInt() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": 1 }\");\n+\n+        assertTrue(json.get(\"foo\").isInt());\n+        assertTrue(json.get(\"foo\").isLong());\n+\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsLong() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": 1337 }\");\n+\n+        assertTrue(json.get(\"foo\").isInt());\n+        assertTrue(json.get(\"foo\").isLong());\n+\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsDouble() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": 17.7 }\");\n+\n+        assertTrue(json.get(\"foo\").isDouble());\n+\n+        assertFalse(json.get(\"foo\").isInt());\n+        assertFalse(json.get(\"foo\").isLong());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsString() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": \\\"bar\\\" }\");\n+\n+        assertTrue(json.get(\"foo\").isString());\n+\n+        assertFalse(json.get(\"foo\").isInt());\n+        assertFalse(json.get(\"foo\").isLong());\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsBoolean() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": true }\");\n+\n+        assertTrue(json.get(\"foo\").isBoolean());\n+\n+        assertFalse(json.get(\"foo\").isInt());\n+        assertFalse(json.get(\"foo\").isLong());\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsArray() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": [1,2,3] }\");\n+\n+        assertTrue(json.get(\"foo\").isArray());\n+\n+        assertFalse(json.get(\"foo\").isInt());\n+        assertFalse(json.get(\"foo\").isLong());\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isObject());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testIsObject() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": { \\\"bar\\\": true } }\");\n+\n+        assertTrue(json.get(\"foo\").isObject());\n+\n+        assertFalse(json.get(\"foo\").isInt());\n+        assertFalse(json.get(\"foo\").isLong());\n+        assertFalse(json.get(\"foo\").isDouble());\n+        assertFalse(json.get(\"foo\").isBoolean());\n+        assertFalse(json.get(\"foo\").isString());\n+        assertFalse(json.get(\"foo\").isArray());\n+        assertFalse(json.get(\"foo\").isNull());\n+    }\n+\n+    @Test\n+    public void testJSONObjectWithNullField() {\n+        var json = JSON.parse(\"{ \\\"foo\\\": null }\");\n+\n+        assertNotNull(json.get(\"foo\"));\n+        assertTrue(json.get(\"foo\").isNull());\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/json\/parser\/JSONParserTests.java","additions":622,"deletions":0,"binary":false,"changes":622,"status":"added"}]}