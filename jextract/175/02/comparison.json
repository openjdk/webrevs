{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                if (CXType.kind$get(type) != CXType_Invalid()) {\n+                if (CXType.kind(type) != CXType_Invalid()) {\n","filename":"samples\/libclang\/ASTPrinter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-Select-String -Path 'includes_all.conf' -Pattern 'curl' | %{ $_.Line } | Out-File -FilePath 'includes_filtered.conf' -Encoding ascii\r\n+Select-String -Path 'includes_all.conf' -Pattern '(curl|sockaddr )' | %{ $_.Line } | Out-File -FilePath 'includes_filtered.conf' -Encoding ascii\r\n","filename":"samples\/libcurl\/compile_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-                int nb_streams = AVFormatContext.nb_streams$get(pFormatCtx);\n+                int nb_streams = AVFormatContext.nb_streams(pFormatCtx);\n@@ -111,1 +111,1 @@\n-                var pStreams = AVFormatContext.streams$get(pFormatCtx);\n+                var pStreams = AVFormatContext.streams(pFormatCtx);\n@@ -121,2 +121,2 @@\n-                    pCodecCtx = AVStream.codec$get(pStream);\n-                    if (AVCodecContext.codec_type$get(pCodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n+                    pCodecCtx = AVStream.codec(pStream);\n+                    if (AVCodecContext.codec_type(pCodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n@@ -126,1 +126,1 @@\n-                        pCodec = avcodec_find_decoder(AVCodecContext.codec_id$get(pCodecCtx));\n+                        pCodec = avcodec_find_decoder(AVCodecContext.codec_id(pCodecCtx));\n@@ -163,2 +163,2 @@\n-                int width = AVCodecContext.width$get(pCodecCtx);\n-                int height = AVCodecContext.height$get(pCodecCtx);\n+                int width = AVCodecContext.width(pCodecCtx);\n+                int height = AVCodecContext.height(pCodecCtx);\n@@ -185,1 +185,1 @@\n-                int pix_fmt = AVCodecContext.pix_fmt$get(pCodecCtx);\n+                int pix_fmt = AVCodecContext.pix_fmt(pCodecCtx);\n@@ -198,1 +198,1 @@\n-                    if (AVPacket.stream_index$get(packet) == videoStream) {\n+                    if (AVPacket.stream_index(packet) == videoStream) {\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-            System.err.printf(\"Time = %d:%02d\\n\", tm.tm_hour$get(time), tm.tm_min$get(time));\n+            System.err.printf(\"Time = %d:%02d\\n\", tm.tm_hour(time), tm.tm_min(time));\n","filename":"samples\/time\/PanamaTime.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -407,5 +407,0 @@\n-        public static Optional<String> get(Declaration declaration) {\n-            return declaration.getAttribute(JavaFunctionalInterfaceName.class)\n-                    .map(JavaFunctionalInterfaceName::fiName);\n-        }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.openjdk.jextract.impl.DeclarationImpl.DeclarationString;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,0 @@\n-        Optional<String> fiName = JavaFunctionalInterfaceName.get(varTree);\n@@ -74,1 +73,0 @@\n-            fiName.ifPresent(s -> emitFunctionalInterfaceGetter(s, javaName));\n@@ -214,8 +212,0 @@\n-    private void emitFunctionalInterfaceGetter(String fiName, String javaName) {\n-        appendIndentedLines(STR.\"\"\"\n-            public static \\{fiName} \\{javaName}() {\n-                return \\{fiName}.ofAddress(\\{javaName}$get(), Arena.global());\n-            }\n-            \"\"\");\n-    }\n-\n@@ -312,1 +302,1 @@\n-            public static \\{type.getSimpleName()} \\{javaName}$get() {\n+            public static \\{type.getSimpleName()} \\{javaName}() {\n@@ -325,1 +315,1 @@\n-            public static void \\{javaName}$set(\\{type.getSimpleName()} x) {\n+            public static void \\{javaName}(\\{type.getSimpleName()} x) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import java.util.Optional;\n@@ -91,0 +90,1 @@\n+            emitAsSlice();\n@@ -135,1 +135,0 @@\n-        Optional<String> fiName = JavaFunctionalInterfaceName.get(varTree);\n@@ -144,1 +143,0 @@\n-            emitIndexedFieldGetter(javaName, varTree.type(), offsetField);\n@@ -146,2 +144,0 @@\n-            emitIndexedFieldSetter(javaName, varTree.type(), offsetField);\n-            fiName.ifPresent(s -> emitFunctionalInterfaceGetter(s, javaName));\n@@ -159,9 +155,0 @@\n-    private void emitFunctionalInterfaceGetter(String fiName, String javaName) {\n-        appendIndentedLines(STR.\"\"\"\n-\n-            public static \\{fiName} \\{javaName}(MemorySegment segment, Arena scope) {\n-                return \\{fiName}.ofAddress(\\{javaName}$get(segment), scope);\n-            }\n-            \"\"\");\n-    }\n-\n@@ -174,1 +161,1 @@\n-            public static \\{type.getSimpleName()} \\{javaName}$get(MemorySegment \\{seg}) {\n+            public static \\{type.getSimpleName()} \\{javaName}(MemorySegment \\{seg}) {\n@@ -187,1 +174,1 @@\n-            public static void \\{javaName}$set(MemorySegment \\{seg}, \\{type.getSimpleName()} \\{x}) {\n+            public static void \\{javaName}(MemorySegment \\{seg}, \\{type.getSimpleName()} \\{x}) {\n@@ -197,1 +184,1 @@\n-            public static MemorySegment \\{javaName}$slice(MemorySegment \\{seg}) {\n+            public static MemorySegment \\{javaName}(MemorySegment \\{seg}) {\n@@ -203,0 +190,9 @@\n+    private void emitAsSlice() {\n+        appendIndentedLines(STR.\"\"\"\n+\n+            public static MemorySegment asSlice(MemorySegment ptr, long index) {\n+                return ptr.asSlice($LAYOUT().byteSize() * index);\n+            }\n+            \"\"\");\n+    }\n+\n@@ -233,25 +229,0 @@\n-    private void emitIndexedFieldGetter(String javaName, Type varType, String offsetField) {\n-        String index = safeParameterName(\"index\");\n-        String seg = safeParameterName(\"seg\");\n-        Class<?> type = Utils.carrierFor(varType);\n-        appendIndentedLines(STR.\"\"\"\n-\n-            public static \\{type.getSimpleName()} \\{javaName}$get(MemorySegment \\{seg}, long \\{index}) {\n-                return \\{seg}.get(\\{layoutString(varType)}, \\{offsetField} + (\\{index} * sizeof()));\n-            }\n-            \"\"\");\n-    }\n-\n-    private void emitIndexedFieldSetter(String javaName, Type varType, String offsetField) {\n-        String index = safeParameterName(\"index\");\n-        String seg = safeParameterName(\"seg\");\n-        String x = safeParameterName(\"x\");\n-        Class<?> type = Utils.carrierFor(varType);\n-        appendIndentedLines(STR.\"\"\"\n-\n-            public static void \\{javaName}$set(MemorySegment \\{seg}, long \\{index}, \\{type.getSimpleName()} \\{x}) {\n-                \\{seg}.set(\\{layoutString(varType)}, \\{offsetField} + (\\{index} * sizeof()), \\{x});\n-            }\n-            \"\"\");\n-    }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":14,"deletions":43,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-            var barA = Foo.a(foo, arena).apply();\n-            var barB = Foo.b(foo, arena).apply(100);\n+            var barA = Foo.a.ofAddress(Foo.a(foo), arena).apply();\n+            var barB = Foo.b.ofAddress(Foo.b(foo), arena).apply(100);\n@@ -58,2 +58,2 @@\n-            assertEquals(Bar.a$get(barA), 5);\n-            assertEquals(Bar.a$get(barB), 100);\n+            assertEquals(Bar.a(barA), 5);\n+            assertEquals(Bar.a(barB), 100);\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,10 +50,0 @@\n-    @Test\n-    public void testStructFieldTypedef() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            AtomicInteger val = new AtomicInteger(-1);\n-            MemorySegment bar = Bar.allocate(arena);\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n-            Bar.foo(bar, arena).apply(42);\n-            assertEquals(val.get(), 42);\n-        }\n-    }\n@@ -66,12 +56,2 @@\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n-            Foo.ofAddress(Bar.foo$get(bar), arena).apply(42);\n-            assertEquals(val.get(), 42);\n-        }\n-    }\n-\n-    @Test\n-    public void testGlobalTypedef() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            AtomicInteger val = new AtomicInteger(-1);\n-            f$set(Foo.allocate((i) -> val.set(i), arena));\n-            f().apply(42);\n+            Bar.foo(bar, Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(Bar.foo(bar), arena).apply(42);\n@@ -86,13 +66,2 @@\n-            f$set(Foo.allocate((i) -> val.set(i), arena));\n-            Foo.ofAddress(f$get(), arena).apply(42);\n-            assertEquals(val.get(), 42);\n-        }\n-    }\n-\n-    @Test\n-    public void testStructFieldFunctionPointer() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            AtomicInteger val = new AtomicInteger(-1);\n-            MemorySegment baz = Baz.allocate(arena);\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n-            Baz.fp(baz, arena).apply(42);\n+            f(Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(f(), arena).apply(42);\n@@ -108,12 +77,2 @@\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n-            Baz.fp.ofAddress(Baz.fp$get(baz), arena).apply(42);\n-            assertEquals(val.get(), 42);\n-        }\n-    }\n-\n-    @Test\n-    public void testGlobalFunctionPointer() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            AtomicInteger val = new AtomicInteger(-1);\n-            fp$set(fp.allocate((i) -> val.set(i), arena));\n-            fp().apply(42);\n+            Baz.fp(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n+            Baz.fp.ofAddress(Baz.fp(baz), arena).apply(42);\n@@ -128,2 +87,2 @@\n-            fp$set(fp.allocate((i) -> val.set(i), arena));\n-            fp.ofAddress(fp$get(), arena).apply(42);\n+            fp(fp.allocate((i) -> val.set(i), arena));\n+            fp.ofAddress(fp(), arena).apply(42);\n@@ -137,2 +96,2 @@\n-            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena));\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n+            fp_addr(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena));\n+            assertEquals(fp_addr.ofAddress(fp_addr(), arena).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":11,"deletions":52,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,4 +56,4 @@\n-             assertEquals(Point.k$get(seg), 44);\n-             var point2dSeg = Point.point2d$slice(seg);\n-             assertEquals(Point2D.i$get(point2dSeg), 567);\n-             assertEquals(Point2D.j$get(point2dSeg), 33);\n+             assertEquals(Point.k(seg), 44);\n+             var point2dSeg = Point.point2d(seg);\n+             assertEquals(Point2D.i(point2dSeg), 567);\n+             assertEquals(Point2D.j(point2dSeg), 33);\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-        assertEquals(Point.x$get(seg), 56);\n-        assertEquals(Point.y$get(seg), 75);\n+        assertEquals(Point.x(seg), 56);\n+        assertEquals(Point.y(seg), 75);\n@@ -60,2 +60,2 @@\n-        assertEquals(Point3D.z$get(seg), 35);\n-        var pointSeg = Point3D.p$slice(seg);\n+        assertEquals(Point3D.z(seg), 35);\n+        var pointSeg = Point3D.p(seg);\n@@ -63,2 +63,2 @@\n-        assertEquals(Point.x$get(pointSeg), 43);\n-        assertEquals(Point.y$get(pointSeg), 45);\n+        assertEquals(Point.x(pointSeg), 43);\n+        assertEquals(Point.y(pointSeg), 45);\n@@ -81,2 +81,2 @@\n-        assertEquals(Foo.count$get(seg), 37);\n-        var greeting = Foo.greeting$slice(seg);\n+        assertEquals(Foo.count(seg), 37);\n+        var greeting = Foo.greeting(seg);\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,2 @@\n-            Vector.x$set(v1, 1.0);\n-            Vector.y$set(v1, 0.0);\n+            Vector.x(v1, 1.0);\n+            Vector.y(v1, 0.0);\n@@ -60,2 +60,2 @@\n-            Vector.x$set(v2, 0.0);\n-            Vector.y$set(v2, 1.0);\n+            Vector.x(v2, 0.0);\n+            Vector.y(v2, 1.0);\n@@ -65,2 +65,2 @@\n-            assertEquals(Vector.x$get(sum), 1.0, 0.1);\n-            assertEquals(Vector.y$get(sum), 1.0, 0.1);\n+            assertEquals(Vector.x(sum), 1.0, 0.1);\n+            assertEquals(Vector.y(sum), 1.0, 0.1);\n@@ -69,2 +69,2 @@\n-                return (Vector.x$get(a) * Vector.x$get(b)) +\n-                    (Vector.y$get(a) * Vector.y$get(b));\n+                return (Vector.x(a) * Vector.x(b)) +\n+                    (Vector.y(a) * Vector.y(b));\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-            Foo.x$set(foo, 3.14f);\n-            assertEquals(Foo.x$get(foo), 3.14f, 0.001f);\n+            Foo.x(foo, 3.14f);\n+            assertEquals(Foo.x(foo), 3.14f, 0.001f);\n@@ -58,2 +58,2 @@\n-            Bar.x$set(bar, -42);\n-            assertEquals(Bar.x$get(bar), -42);\n+            Bar.x(bar, -42);\n+            assertEquals(Bar.x(bar), -42);\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,2 +57,2 @@\n-            assertEquals(Point.x$get(seg), 14);\n-            assertEquals(Point.y$get(seg), 99);\n+            assertEquals(Point.x(seg), 14);\n+            assertEquals(Point.y(seg), 99);\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,2 @@\n-            Foo._struct.x$set(str, 42);\n-            assertEquals(Foo._struct.x$get(str), 42);\n+            Foo._struct.x(str, 42);\n+            assertEquals(Foo._struct.x(str), 42);\n@@ -66,2 +66,2 @@\n-            Foo._union._struct.x$set(str, 42);\n-            assertEquals(Foo._union._struct.x$get(str), 42);\n+            Foo._union._struct.x(str, 42);\n+            assertEquals(Foo._union._struct.x(str), 42);\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,4 @@\n-            Foo.i$set(seg, 32);\n-            Foo.c$set(seg, (byte)'z');\n-            assertEquals(Foo.i$get(seg), 32);\n-            assertEquals(Foo.c$get(seg), (byte)'z');\n+            Foo.i(seg, 32);\n+            Foo.c(seg, (byte)'z');\n+            assertEquals(Foo.i(seg), 32);\n+            assertEquals(Foo.c(seg), (byte)'z');\n@@ -75,4 +75,4 @@\n-            Foo.i$set(seg, 42);\n-            Foo.c$set(seg, (byte)'j');\n-            assertEquals(Foo.i$get(seg), 42);\n-            assertEquals(Foo.c$get(seg), (byte)'j');\n+            Foo.i(seg, 42);\n+            Foo.c(seg, (byte)'j');\n+            assertEquals(Foo.i(seg), 42);\n+            assertEquals(Foo.c(seg), (byte)'j');\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-             assertFalse(Foo.bar$get(foo).equals(NULL));\n+             assertFalse(Foo.bar(foo).equals(NULL));\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-            var funcPtr = Foo.sum$get(get_foo(arena));\n+            var funcPtr = Foo.sum(get_foo(arena));\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        Method mGet = redef_h.class.getMethod(\"x$get\");\n+        Method mGet = redef_h.class.getMethod(\"x\");\n@@ -52,1 +52,1 @@\n-        Method mSet = redef_h.class.getMethod(\"x$set\", int.class);\n+        Method mSet = redef_h.class.getMethod(\"x\", int.class);\n","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,2 @@\n-        assertThrowsULE(() -> x$get(), \"x\");\n-        assertThrowsULE(() -> x$set(1), \"x\");\n+        assertThrowsULE(() -> x(), \"x\");\n+        assertThrowsULE(() -> x(1), \"x\");\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.lang.foreign.MemorySegment;\n+\n@@ -56,2 +58,2 @@\n-            assertEquals(Point.x$get(seg), 42);\n-            assertEquals(Point.y$get(seg), -39);\n+            assertEquals(Point.x(seg), 42);\n+            assertEquals(Point.y(seg), -39);\n@@ -65,4 +67,4 @@\n-            Point.x$set(seg, 56);\n-            Point.y$set(seg, 65);\n-            assertEquals(Point.x$get(seg), 56);\n-            assertEquals(Point.y$get(seg), 65);\n+            Point.x(seg, 56);\n+            Point.y(seg, 65);\n+            assertEquals(Point.x(seg), 56);\n+            assertEquals(Point.y(seg), 65);\n@@ -77,2 +79,3 @@\n-                Point.x$set(seg, i, 56 + i);\n-                Point.y$set(seg, i, 65 + i);\n+                MemorySegment point = Point.asSlice(seg, i);\n+                Point.x(point, 56 + i);\n+                Point.y(point, 65 + i);\n@@ -81,2 +84,3 @@\n-                assertEquals(Point.x$get(seg, i), 56 + i);\n-                assertEquals(Point.y$get(seg, i), 65 + i);\n+                MemorySegment point = Point.asSlice(seg, i);\n+                assertEquals(Point.x(point), 56 + i);\n+                assertEquals(Point.y(point), 65 + i);\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-            assertNotNull(findMethod(cls, \"i$get\"));\n+            assertNotNull(findMethod(cls, \"i\"));\n@@ -70,1 +70,1 @@\n-            assertNotNull(findMethod(cls, \"i$set\", int.class));\n+            assertNotNull(findMethod(cls, \"i\", int.class));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,7 +43,3 @@\n-            \/\/ Check if getters for pointer fields were generated\n-            checkMethod(nodeClass, \"next$get\", MemorySegment.class, MemorySegment.class);\n-            checkMethod(nodeClass, \"next$get\", MemorySegment.class, MemorySegment.class, long.class);\n-\n-            \/\/ Check if setters for pointer fields were generated\n-            checkMethod(nodeClass, \"next$set\", void.class, MemorySegment.class, MemorySegment.class);\n-            checkMethod(nodeClass, \"next$set\", void.class, MemorySegment.class, long.class, MemorySegment.class);\n+            checkMethod(nodeClass, \"next\", MemorySegment.class, MemorySegment.class);\n+            checkMethod(nodeClass, \"next\", void.class, MemorySegment.class, MemorySegment.class);\n+            checkMethod(nodeClass, \"asSlice\", MemorySegment.class, MemorySegment.class, long.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,3 +48,2 @@\n-            assertNotNull(findMethod(fooClass, \"bar$get\", MemorySegment.class));\n-            assertNull(findMethod(fooClass, \"names$get\", MemorySegment.class));\n-            assertNotNull(findMethod(fooClass, \"names$slice\", MemorySegment.class));\n+            assertNotNull(findMethod(fooClass, \"bar\", MemorySegment.class));\n+            assertNotNull(findMethod(fooClass, \"names\", MemorySegment.class));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,4 +45,3 @@\n-            checkMethod(FooClass, \"c$get\", byte.class, MemorySegment.class);\n-            checkMethod(FooClass, \"c$get\", byte.class, MemorySegment.class, long.class);\n-            checkMethod(FooClass, \"c$set\", void.class, MemorySegment.class, byte.class);\n-            checkMethod(FooClass, \"c$set\", void.class, MemorySegment.class, long.class, byte.class);\n+            checkMethod(FooClass, \"c\", byte.class, MemorySegment.class);\n+            checkMethod(FooClass, \"c\", void.class, MemorySegment.class, byte.class);\n+            checkMethod(FooClass, \"asSlice\", MemorySegment.class, MemorySegment.class, long.class);\n@@ -51,8 +50,5 @@\n-            checkMethod(Foo2Class, \"z$get\", int.class, MemorySegment.class);\n-            checkMethod(Foo2Class, \"z$get\", int.class, MemorySegment.class, long.class);\n-            checkMethod(Foo2Class, \"z$set\", void.class, MemorySegment.class, int.class);\n-            checkMethod(Foo2Class, \"z$set\", void.class, MemorySegment.class, long.class, int.class);\n-            checkMethod(Foo2Class, \"w$get\", int.class, MemorySegment.class);\n-            checkMethod(Foo2Class, \"w$get\", int.class, MemorySegment.class, long.class);\n-            checkMethod(Foo2Class, \"w$set\", void.class, MemorySegment.class, int.class);\n-            checkMethod(Foo2Class, \"w$set\", void.class, MemorySegment.class, long.class, int.class);\n+            checkMethod(Foo2Class, \"z\", int.class, MemorySegment.class);\n+            checkMethod(Foo2Class, \"z\", void.class, MemorySegment.class, int.class);\n+            checkMethod(Foo2Class, \"w\", int.class, MemorySegment.class);\n+            checkMethod(Foo2Class, \"w\", void.class, MemorySegment.class, int.class);\n+            checkMethod(Foo2Class, \"asSlice\", MemorySegment.class, MemorySegment.class, long.class);\n@@ -82,1 +78,0 @@\n-\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,2 @@\n-            checkMethod(FooClass, \"s$get\", short.class, MemorySegment.class);\n-            checkMethod(FooClass, \"s$get\", short.class, MemorySegment.class, long.class);\n-            checkMethod(FooClass, \"s$set\", void.class, MemorySegment.class, short.class);\n-            checkMethod(FooClass, \"s$set\", void.class, MemorySegment.class, long.class, short.class);\n+            checkMethod(FooClass, \"s\", short.class, MemorySegment.class);\n+            checkMethod(FooClass, \"s\", void.class, MemorySegment.class, short.class);\n@@ -46,4 +44,2 @@\n-            checkMethod(FooClass, \"ptr$get\", MemorySegment.class, MemorySegment.class);\n-            checkMethod(FooClass, \"ptr$get\", MemorySegment.class, MemorySegment.class, long.class);\n-            checkMethod(FooClass, \"ptr$set\", void.class, MemorySegment.class, MemorySegment.class);\n-            checkMethod(FooClass, \"ptr$set\", void.class, MemorySegment.class, long.class, MemorySegment.class);\n+            checkMethod(FooClass, \"ptr\", MemorySegment.class, MemorySegment.class);\n+            checkMethod(FooClass, \"ptr\", void.class, MemorySegment.class, MemorySegment.class);\n@@ -51,0 +47,1 @@\n+            checkMethod(FooClass, \"asSlice\", MemorySegment.class, MemorySegment.class, long.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,4 +46,2 @@\n-            checkMethod(rab2Class, \"y$get\", int.class, MemorySegment.class);\n-            checkMethod(rab2Class, \"y$get\", int.class, MemorySegment.class, long.class);\n-            checkMethod(rab2Class, \"y$set\", void.class, MemorySegment.class, int.class);\n-            checkMethod(rab2Class, \"y$set\", void.class, MemorySegment.class, long.class, int.class);\n+            checkMethod(rab2Class, \"y\", int.class, MemorySegment.class);\n+            checkMethod(rab2Class, \"y\", void.class, MemorySegment.class, int.class);\n@@ -51,4 +49,4 @@\n-            checkMethod(rab2Class, \"x$get\", short.class, MemorySegment.class);\n-            checkMethod(rab2Class, \"x$get\", short.class, MemorySegment.class, long.class);\n-            checkMethod(rab2Class, \"x$set\", void.class, MemorySegment.class, short.class);\n-            checkMethod(rab2Class, \"x$set\", void.class, MemorySegment.class, long.class, short.class);\n+            checkMethod(rab2Class, \"x\", short.class, MemorySegment.class);\n+            checkMethod(rab2Class, \"x\", void.class, MemorySegment.class, short.class);\n+\n+            checkMethod(rab2Class, \"asSlice\", MemorySegment.class, MemorySegment.class, long.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-            checkMethod(ndpi_class, \"gnutella_msg_id$slice\", MemorySegment.class, MemorySegment.class);\n+            checkMethod(ndpi_class, \"gnutella_msg_id\", MemorySegment.class, MemorySegment.class);\n@@ -59,5 +59,5 @@\n-            checkMethod(foo_class, \"clear_color$slice\", MemorySegment.class, MemorySegment.class);\n-            checkMethod(foo_class, \"clear_z$get\", int.class, MemorySegment.class);\n-            checkMethod(foo_class, \"clear_z$set\", void.class, MemorySegment.class, int.class);\n-            checkMethod(foo_class, \"clear_s$get\", byte.class, MemorySegment.class);\n-            checkMethod(foo_class, \"clear_s$set\", void.class, MemorySegment.class, byte.class);\n+            checkMethod(foo_class, \"clear_color\", MemorySegment.class, MemorySegment.class);\n+            checkMethod(foo_class, \"clear_z\", int.class, MemorySegment.class);\n+            checkMethod(foo_class, \"clear_z\", void.class, MemorySegment.class, int.class);\n+            checkMethod(foo_class, \"clear_s\", byte.class, MemorySegment.class);\n+            checkMethod(foo_class, \"clear_s\", void.class, MemorySegment.class, byte.class);\n@@ -78,2 +78,2 @@\n-            checkMethod(plugin_class, \"maxAl_sduAudioFrames$get\", byte.class, MemorySegment.class);\n-            checkMethod(plugin_class, \"maxAl_sduAudioFrames$set\", void.class, MemorySegment.class, byte.class);\n+            checkMethod(plugin_class, \"maxAl_sduAudioFrames\", byte.class, MemorySegment.class);\n+            checkMethod(plugin_class, \"maxAl_sduAudioFrames\", void.class, MemorySegment.class, byte.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n-        Method getter = checkMethod(cls, name + \"$get\", expectedType);\n+        Method getter = checkMethod(cls, name, expectedType);\n@@ -176,2 +176,1 @@\n-        checkMethod(cls, name + \"$get\", expectedType);\n-        checkMethod(cls, name + \"$set\", void.class, expectedType);\n+        checkMethod(cls, name, void.class, expectedType);\n@@ -194,2 +193,2 @@\n-            Method getter = checkMethod(structCls, memberName + \"$get\", expectedType, MemorySegment.class);\n-            Method setter = checkMethod(structCls, memberName + \"$set\", void.class, MemorySegment.class, expectedType);\n+            Method getter = checkMethod(structCls, memberName, expectedType, MemorySegment.class);\n+            Method setter = checkMethod(structCls, memberName, void.class, MemorySegment.class, expectedType);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-                case VAR -> findMethod(headerClass, symbolName + \"$get\");\n+                case VAR -> findMethod(headerClass, symbolName);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-                Method slicer = cls.getMethod(fieldName + \"$slice\", MemorySegment.class);\n+                Method slicer = cls.getMethod(fieldName, MemorySegment.class);\n@@ -164,1 +164,1 @@\n-                Method getter = cls.getMethod(fieldName + \"$get\", MemorySegment.class);\n+                Method getter = cls.getMethod(fieldName, MemorySegment.class);\n@@ -166,1 +166,1 @@\n-                Method setter = cls.getMethod(fieldName + \"$set\", MemorySegment.class, type);\n+                Method setter = cls.getMethod(fieldName, MemorySegment.class, type);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}