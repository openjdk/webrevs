{"files":[{"patch":"@@ -59,1 +59,1 @@\n-        fib.emitFunctionalInterface();\n+        String fiName = fib.emitFunctionalInterface();\n@@ -61,1 +61,1 @@\n-        fib.emitFunctionalFactory();\n+        fib.emitFunctionalFactory(fiName);\n@@ -66,1 +66,4 @@\n-    private void emitFunctionalInterface() {\n+    private String emitFunctionalInterface() {\n+        \/\/ beware of mangling!\n+        String fiName = className().toLowerCase().equals(\"function\") ?\n+                \"Function$\" : \"Function\";\n@@ -72,1 +75,1 @@\n-            public interface Function {\n+            public interface \\{fiName} {\n@@ -76,0 +79,1 @@\n+        return fiName;\n@@ -78,1 +82,1 @@\n-    private void emitFunctionalFactory() {\n+    private void emitFunctionalFactory(String fiName) {\n@@ -81,1 +85,1 @@\n-            private static final MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.Function.class, \"apply\", $DESC);\n+            private static final MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.\\{fiName}.class, \"apply\", $DESC);\n@@ -87,1 +91,1 @@\n-            public static MemorySegment allocate(\\{className()}.Function fi, Arena arena) {\n+            public static MemorySegment allocate(\\{className()}.\\{fiName} fi, Arena arena) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.toolprovider.fiMangle.nestedDecls;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.lang.reflect.Modifier;\n+import java.nio.file.Path;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+public class TestFunctionalInterfaceMangle extends JextractToolRunner {\n+\n+    Loader loader;\n+\n+    @BeforeClass\n+    public void beforeClass() {\n+        Path output = getOutputFilePath(\"TestFunctionalInterfaceMangler-fiMangle.h\");\n+        Path outputH = getInputFilePath(\"fi_mangle.h\");\n+        runAndCompile(output, outputH.toString());\n+\n+        loader = classLoader(output);\n+    }\n+\n+    @AfterClass\n+    public void afterClass() {\n+        loader.close();\n+    }\n+\n+    @Test\n+    public void testFunctionPointer() {\n+        Class<?> fpClass = loader.loadClass(\"Function\");\n+        assertNotNull(fpClass);\n+        Class<?> fiClass = findNestedClass(fpClass, \"Function$\");\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/fiMangle\/nestedDecls\/TestFunctionalInterfaceMangle.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -24,2 +24,1 @@\n-void f(int n, ...);\n-void F(int n, ...);\n\\ No newline at end of file\n+typedef void (*Function)(int);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/fiMangle\/nestedDecls\/fi_mangle.h","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/variadicNames\/variadic_names.h","status":"copied"}]}