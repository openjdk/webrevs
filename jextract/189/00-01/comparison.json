{"files":[{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JIMAGE_ResourceIterator$visitor {\n+public class JIMAGE_ResourceIterator$visitor {\n@@ -19,1 +22,3 @@\n-    int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6);\n+    public interface Function {\n+        int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -32,1 +37,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JIMAGE_ResourceIterator$visitor.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JIMAGE_ResourceIterator$visitor.Function.class, \"apply\", $DESC);\n@@ -34,1 +43,1 @@\n-    static MemorySegment allocate(JIMAGE_ResourceIterator$visitor fi, Arena scope) {\n+    public static MemorySegment allocate(JIMAGE_ResourceIterator$visitor.Function fi, Arena scope) {\n@@ -38,11 +47,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JIMAGE_ResourceIterator$visitor ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment __x0, MemorySegment __x1, MemorySegment __x2, MemorySegment __x3, MemorySegment __x4, MemorySegment __x5, MemorySegment __x6) -> {\n-            try {\n-                return (int) DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6) {\n+        try {\n+            return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JIMAGE_ResourceIterator$visitor.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageClose_t {\n+public class JImageClose_t {\n@@ -19,1 +22,3 @@\n-    void apply(MemorySegment jimage);\n+    public interface Function {\n+        void apply(MemorySegment jimage);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(\n@@ -25,1 +30,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageClose_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageClose_t.Function.class, \"apply\", $DESC);\n@@ -27,1 +36,1 @@\n-    static MemorySegment allocate(JImageClose_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageClose_t.Function fi, Arena scope) {\n@@ -31,11 +40,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageClose_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage) -> {\n-            try {\n-                 DOWN$MH.invokeExact(symbol, _jimage);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static void invoke(MemorySegment funcPtr,MemorySegment jimage) {\n+        try {\n+             DOWN$MH.invokeExact(funcPtr, jimage);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageFindResource_t {\n+public class JImageFindResource_t {\n@@ -19,1 +22,3 @@\n-    long apply(MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment name, MemorySegment size);\n+    public interface Function {\n+        long apply(MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment name, MemorySegment size);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -30,1 +35,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageFindResource_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageFindResource_t.Function.class, \"apply\", $DESC);\n@@ -32,1 +41,1 @@\n-    static MemorySegment allocate(JImageFindResource_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageFindResource_t.Function fi, Arena scope) {\n@@ -36,11 +45,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageFindResource_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage, MemorySegment _module_name, MemorySegment _version, MemorySegment _name, MemorySegment _size) -> {\n-            try {\n-                return (long) DOWN$MH.invokeExact(symbol, _jimage, _module_name, _version, _name, _size);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static long invoke(MemorySegment funcPtr,MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment name, MemorySegment size) {\n+        try {\n+            return (long) DOWN$MH.invokeExact(funcPtr, jimage, module_name, version, name, size);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageGetResource_t {\n+public class JImageGetResource_t {\n@@ -19,1 +22,3 @@\n-    long apply(MemorySegment jimage, long location, MemorySegment buffer, long size);\n+    public interface Function {\n+        long apply(MemorySegment jimage, long location, MemorySegment buffer, long size);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -29,1 +34,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageGetResource_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageGetResource_t.Function.class, \"apply\", $DESC);\n@@ -31,1 +40,1 @@\n-    static MemorySegment allocate(JImageGetResource_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageGetResource_t.Function fi, Arena scope) {\n@@ -35,11 +44,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageGetResource_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage, long _location, MemorySegment _buffer, long _size) -> {\n-            try {\n-                return (long) DOWN$MH.invokeExact(symbol, _jimage, _location, _buffer, _size);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static long invoke(MemorySegment funcPtr,MemorySegment jimage, long location, MemorySegment buffer, long size) {\n+        try {\n+            return (long) DOWN$MH.invokeExact(funcPtr, jimage, location, buffer, size);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageOpen_t {\n+public class JImageOpen_t {\n@@ -19,1 +22,3 @@\n-    MemorySegment apply(MemorySegment name, MemorySegment error);\n+    public interface Function {\n+        MemorySegment apply(MemorySegment name, MemorySegment error);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -27,1 +32,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageOpen_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageOpen_t.Function.class, \"apply\", $DESC);\n@@ -29,1 +38,1 @@\n-    static MemorySegment allocate(JImageOpen_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageOpen_t.Function fi, Arena scope) {\n@@ -33,11 +42,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageOpen_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _name, MemorySegment _error) -> {\n-            try {\n-                return (MemorySegment) DOWN$MH.invokeExact(symbol, _name, _error);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment name, MemorySegment error) {\n+        try {\n+            return (MemorySegment) DOWN$MH.invokeExact(funcPtr, name, error);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImagePackageToModule_t {\n+public class JImagePackageToModule_t {\n@@ -19,1 +22,3 @@\n-    MemorySegment apply(MemorySegment jimage, MemorySegment package_name);\n+    public interface Function {\n+        MemorySegment apply(MemorySegment jimage, MemorySegment package_name);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -27,1 +32,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImagePackageToModule_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImagePackageToModule_t.Function.class, \"apply\", $DESC);\n@@ -29,1 +38,1 @@\n-    static MemorySegment allocate(JImagePackageToModule_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImagePackageToModule_t.Function fi, Arena scope) {\n@@ -33,11 +42,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImagePackageToModule_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage, MemorySegment _package_name) -> {\n-            try {\n-                return (MemorySegment) DOWN$MH.invokeExact(symbol, _jimage, _package_name);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment jimage, MemorySegment package_name) {\n+        try {\n+            return (MemorySegment) DOWN$MH.invokeExact(funcPtr, jimage, package_name);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageResourceIterator_t {\n+public class JImageResourceIterator_t {\n@@ -19,1 +22,3 @@\n-    void apply(MemorySegment jimage, MemorySegment visitor, MemorySegment arg);\n+    public interface Function {\n+        void apply(MemorySegment jimage, MemorySegment visitor, MemorySegment arg);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(\n@@ -27,1 +32,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageResourceIterator_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageResourceIterator_t.Function.class, \"apply\", $DESC);\n@@ -29,1 +38,1 @@\n-    static MemorySegment allocate(JImageResourceIterator_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageResourceIterator_t.Function fi, Arena scope) {\n@@ -33,11 +42,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageResourceIterator_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage, MemorySegment _visitor, MemorySegment _arg) -> {\n-            try {\n-                 DOWN$MH.invokeExact(symbol, _jimage, _visitor, _arg);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static void invoke(MemorySegment funcPtr,MemorySegment jimage, MemorySegment visitor, MemorySegment arg) {\n+        try {\n+             DOWN$MH.invokeExact(funcPtr, jimage, visitor, arg);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -17,1 +20,1 @@\n-public interface JImageResourceVisitor_t {\n+public class JImageResourceVisitor_t {\n@@ -19,1 +22,3 @@\n-    int apply(MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment package_, MemorySegment name, MemorySegment extension, MemorySegment arg);\n+    public interface Function {\n+        int apply(MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment package_, MemorySegment name, MemorySegment extension, MemorySegment arg);\n+    }\n@@ -21,1 +26,1 @@\n-    FunctionDescriptor $DESC = FunctionDescriptor.of(\n+    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(\n@@ -32,1 +37,5 @@\n-    MethodHandle UP$MH = jimage_h.upcallHandle(JImageResourceVisitor_t.class, \"apply\", $DESC);\n+    public static FunctionDescriptor descriptor() {\n+        return $DESC;\n+    }\n+\n+    private static final MethodHandle UP$MH = jimage_h.upcallHandle(JImageResourceVisitor_t.Function.class, \"apply\", $DESC);\n@@ -34,1 +43,1 @@\n-    static MemorySegment allocate(JImageResourceVisitor_t fi, Arena scope) {\n+    public static MemorySegment allocate(JImageResourceVisitor_t.Function fi, Arena scope) {\n@@ -38,11 +47,8 @@\n-    MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n-\n-    static JImageResourceVisitor_t ofAddress(MemorySegment addr, Arena arena) {\n-        MemorySegment symbol = addr.reinterpret(arena, null);\n-        return (MemorySegment _jimage, MemorySegment _module_name, MemorySegment _version, MemorySegment _package_, MemorySegment _name, MemorySegment _extension, MemorySegment _arg) -> {\n-            try {\n-                return (int) DOWN$MH.invokeExact(symbol, _jimage, _module_name, _version, _package_, _name, _extension, _arg);\n-            } catch (Throwable ex$) {\n-                throw new AssertionError(\"should not reach here\", ex$);\n-            }\n-        };\n+    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+\n+    public static int invoke(MemorySegment funcPtr,MemorySegment jimage, MemorySegment module_name, MemorySegment version, MemorySegment package_, MemorySegment name, MemorySegment extension, MemorySegment arg) {\n+        try {\n+            return (int) DOWN$MH.invokeExact(funcPtr, jimage, module_name, version, package_, name, extension, arg);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n+import java.lang.invoke.*;\n@@ -10,0 +7,5 @@\n+import java.nio.ByteOrder;\n+import java.util.*;\n+import java.util.function.*;\n+import java.util.stream.*;\n+\n@@ -11,0 +13,1 @@\n+import static java.lang.foreign.MemoryLayout.PathElement.*;\n@@ -46,0 +49,9 @@\n+    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean(\"jextract.trace.downcalls\");\n+\n+    static void traceDowncall(String name, Object... args) {\n+         String traceArgs = Arrays.stream(args)\n+                       .map(Object::toString)\n+                       .collect(Collectors.joining(\", \"));\n+         System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n+    }\n+\n@@ -120,5 +132,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * JImageFile *JIMAGE_Open(const char *name, jint *error)\n-     * }\n-     *\/\n+\n@@ -140,0 +148,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * JImageFile *JIMAGE_Open(const char *name, jint *error)\n+     * }\n+     *\/\n@@ -143,0 +156,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_Open\", name, error);\n+            }\n@@ -148,5 +164,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void JIMAGE_Close(JImageFile *jimage)\n-     * }\n-     *\/\n+\n@@ -166,0 +178,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void JIMAGE_Close(JImageFile *jimage)\n+     * }\n+     *\/\n@@ -169,0 +186,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_Close\", jimage);\n+            }\n@@ -174,5 +194,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * const char *JIMAGE_PackageToModule(JImageFile *jimage, const char *package_name)\n-     * }\n-     *\/\n+\n@@ -194,0 +210,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * const char *JIMAGE_PackageToModule(JImageFile *jimage, const char *package_name)\n+     * }\n+     *\/\n@@ -197,0 +218,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_PackageToModule\", jimage, package_name);\n+            }\n@@ -202,5 +226,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * JImageLocationRef JIMAGE_FindResource(JImageFile *jimage, const char *module_name, const char *version, const char *name, jlong *size)\n-     * }\n-     *\/\n+\n@@ -225,0 +245,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * JImageLocationRef JIMAGE_FindResource(JImageFile *jimage, const char *module_name, const char *version, const char *name, jlong *size)\n+     * }\n+     *\/\n@@ -228,0 +253,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_FindResource\", jimage, module_name, version, name, size);\n+            }\n@@ -233,5 +261,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * jlong JIMAGE_GetResource(JImageFile *jimage, JImageLocationRef location, char *buffer, jlong size)\n-     * }\n-     *\/\n+\n@@ -255,0 +279,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * jlong JIMAGE_GetResource(JImageFile *jimage, JImageLocationRef location, char *buffer, jlong size)\n+     * }\n+     *\/\n@@ -258,0 +287,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_GetResource\", jimage, location, buffer, size);\n+            }\n@@ -263,5 +295,1 @@\n-    \/**\n-     * {@snippet lang=c :\n-     * void JIMAGE_ResourceIterator(JImageFile *jimage, JImageResourceVisitor_t visitor, void *arg)\n-     * }\n-     *\/\n+\n@@ -283,0 +311,5 @@\n+    \/**\n+     * {@snippet lang=c :\n+     * void JIMAGE_ResourceIterator(JImageFile *jimage, JImageResourceVisitor_t visitor, void *arg)\n+     * }\n+     *\/\n@@ -286,0 +319,3 @@\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"JIMAGE_ResourceIterator\", jimage, visitor, arg);\n+            }\n","filename":"samples\/libjimage\/org\/openjdk\/jimage_h.java","additions":70,"deletions":34,"binary":false,"changes":104,"status":"modified"}]}