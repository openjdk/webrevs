{"files":[{"patch":"@@ -193,0 +193,1 @@\n+            String invokerClassName = newHolderClassName(javaName);\n@@ -198,1 +199,1 @@\n-                public interface \\{javaName} {\n+                public interface \\{invokerClassName} {\n@@ -213,1 +214,1 @@\n-                public static \\{javaName} \\{javaName}(MemoryLayout... layouts) {\n+                public static \\{invokerClassName} \\{javaName}(MemoryLayout... layouts) {\n@@ -222,1 +223,1 @@\n-                        } catch(IllegalArgumentException ex$)  {\n+                        } catch(IllegalArgumentException | ClassCastException ex$)  {\n@@ -455,1 +456,1 @@\n-        String mangledName = newHolderClassName(javaName);\n+        String mangledName = newHolderClassName(STR.\"\\{javaName}$constants\");\n@@ -592,1 +593,1 @@\n-        String holderClassName = STR.\"\\{javaName}$constants\";\n+        String holderClassName = javaName;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -66,1 +67,1 @@\n-    @Test(dataProvider = \"wrongArgsCases\", expectedExceptions = IllegalArgumentException.class)\n+    @Test(dataProvider = \"wrongArgsCases\", expectedExceptions = { IllegalArgumentException.class, ClassCastException.class })\n@@ -98,5 +99,3 @@\n-            {\n-                \"%d\", new MemoryLayout[] {C_INT}, new Object[0], \/\/ too few args\n-                \"%d\", new MemoryLayout[] {C_INT}, new Object[] { 1, 2 }, \/\/ too many args\n-                \"%.2f\", new MemoryLayout[] {C_DOUBLE}, new Object[] { 1 }, \/\/ wrong type\n-            }\n+            { \"%d\", new MemoryLayout[] {C_INT}, new Object[0], \/* too few args *\/ },\n+            { \"%d\", new MemoryLayout[] {C_INT}, new Object[] { 1, 2 }, \/* too many args *\/ },\n+            { \"%.2f\", new MemoryLayout[] {C_POINTER}, new Object[] { 1 }, \/* wrong type *\/ },\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.toolprovider.variadicNames;\n+\n+import java.nio.file.Path;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import testlib.JextractToolRunner;\n+\n+import static org.testng.Assert.*;\n+\n+public class TestMangledVariadicNames extends JextractToolRunner {\n+\n+    Loader loader;\n+\n+    @BeforeClass\n+    public void before() {\n+        Path output = getOutputFilePath(\"TestMangledVariadicNames-variadic_names.h\");\n+        Path input = getInputFilePath(\"variadic_names.h\");\n+        runAndCompile(output, input.toString());\n+        loader = classLoader(output);\n+    }\n+\n+    @Test\n+    public void testMangledVariadicNames() {\n+        Class<?> headerClass = loader.loadClass(\"variadic_names_h\");\n+        assertNotNull(headerClass);\n+        assertNotNull(findNestedClass(headerClass, \"f\"));\n+        assertNotNull(findNestedClass(headerClass, \"F$\"));\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/variadicNames\/TestMangledVariadicNames.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -24,3 +24,2 @@\n-#include \"globalStructAccess.h\"\n-\n-struct Point p = { 1, 2 };\n+void f(int n, ...);\n+void F(int n, ...);\n\\ No newline at end of file\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/variadicNames\/variadic_names.h","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jtreg\/generator\/structAccessors\/libStructGlobal.c","status":"copied"}]}