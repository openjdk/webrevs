{"files":[{"patch":"@@ -154,1 +154,1 @@\n-            %s() {\n+            %1$s() {\n@@ -167,1 +167,1 @@\n-            %s\n+            %1$s\n@@ -169,1 +169,1 @@\n-            %s\n+            %2$s\n@@ -172,1 +172,1 @@\n-            \"\"\", !header.isEmpty() ? String.format(\" * %s\\n\", header) : \"\", declarationComment(decl));\n+            \"\"\", !header.isEmpty() ? String.format(\" * %1$s\\n\", header) : \"\", declarationComment(decl));\n@@ -200,2 +200,2 @@\n-            case Declared d when Utils.isStructOrUnion(d) -> alignIfNeeded(\"%s.layout()\", JavaName.getFullNameOrThrow(d.tree()), ClangAlignOf.getOrThrow(d.tree()) \/ 8, align);\n-            case Delegated d when d.kind() == Delegated.Kind.POINTER -> alignIfNeeded(\"%s.C_POINTER\", runtimeHelperName(), 8, align);\n+            case Declared d when Utils.isStructOrUnion(d) -> alignIfNeeded(\"%1$s.layout()\", JavaName.getFullNameOrThrow(d.tree()), ClangAlignOf.getOrThrow(d.tree()) \/ 8, align);\n+            case Delegated d when d.kind() == Delegated.Kind.POINTER -> alignIfNeeded(\"%1$s.C_POINTER\", runtimeHelperName(), 8, align);\n@@ -203,2 +203,2 @@\n-            case Function _ -> alignIfNeeded(\"%s.C_POINTER\", runtimeHelperName(), 8, align);\n-            case Array a -> String.format(\"MemoryLayout.sequenceLayout(%d, %s)\", a.elementCount().orElse(0L), layoutString(a.elementType(), align));\n+            case Function _ -> alignIfNeeded(\"%1$s.C_POINTER\", runtimeHelperName(), 8, align);\n+            case Array a -> String.format(\"MemoryLayout.sequenceLayout(%1$d, %2$s)\", a.elementCount().orElse(0L), layoutString(a.elementType(), align));\n@@ -216,1 +216,1 @@\n-            builder.append(String.format(\"%s%s\", indentString(textBoxIndent + 1), layoutString(functionType.returnType())));\n+            builder.append(String.format(\"%1$s%2$s\", indentString(textBoxIndent + 1), layoutString(functionType.returnType())));\n@@ -228,1 +228,1 @@\n-                builder.append(String.format(\"%s%s\", indentString(textBoxIndent + 1), layoutString(arg)));\n+                builder.append(String.format(\"%1$s%2$s\", indentString(textBoxIndent + 1), layoutString(arg)));\n@@ -243,8 +243,8 @@\n-            case Bool -> String.format(\"%s.C_BOOL\", runtimeHelperName());\n-            case Char -> String.format(\"%s.C_CHAR\", runtimeHelperName());\n-            case Short -> alignIfNeeded(\"%s.C_SHORT\", runtimeHelperName(), 2, align);\n-            case Int -> alignIfNeeded(\"%s.C_INT\", runtimeHelperName(), 4, align);\n-            case Long -> alignIfNeeded(\"%s.C_LONG\", runtimeHelperName(), TypeImpl.IS_WINDOWS ? 4 : 8, align);\n-            case LongLong -> alignIfNeeded(\"%s.C_LONG_LONG\", runtimeHelperName(), 8, align);\n-            case Float -> alignIfNeeded(\"%s.C_FLOAT\", runtimeHelperName(), 4, align);\n-            case Double -> alignIfNeeded(\"%s.C_DOUBLE\", runtimeHelperName(), 8, align);\n+            case Bool -> String.format(\"%1$s.C_BOOL\", runtimeHelperName());\n+            case Char -> String.format(\"%1$s.C_CHAR\", runtimeHelperName());\n+            case Short -> alignIfNeeded(\"%1$s.C_SHORT\", runtimeHelperName(), 2, align);\n+            case Int -> alignIfNeeded(\"%1$s.C_INT\", runtimeHelperName(), 4, align);\n+            case Long -> alignIfNeeded(\"%1$s.C_LONG\", runtimeHelperName(), TypeImpl.IS_WINDOWS ? 4 : 8, align);\n+            case LongLong -> alignIfNeeded(\"%1$s.C_LONG_LONG\", runtimeHelperName(), 8, align);\n+            case Float -> alignIfNeeded(\"%1$s.C_FLOAT\", runtimeHelperName(), 4, align);\n+            case Double -> alignIfNeeded(\"%1$s.C_DOUBLE\", runtimeHelperName(), 8, align);\n@@ -252,1 +252,1 @@\n-                    alignIfNeeded(\"%s.C_LONG_DOUBLE\", runtimeHelperName(), 8, align) :\n+                    alignIfNeeded(\"%1$s.C_LONG_DOUBLE\", runtimeHelperName(), 8, align) :\n@@ -268,1 +268,1 @@\n-        return String.format(\"%sMemoryLayout.paddingLayout(%d)\", indentString(indent), size);\n+        return String.format(\"%1$sMemoryLayout.paddingLayout(%2$d)\", indentString(indent), size);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -95,2 +95,1 @@\n-            \"\"\",\n-            runtimeHelperName(), className(), fiName);\n+            \"\"\", runtimeHelperName(), className(), fiName);\n@@ -103,1 +102,1 @@\n-        String paramStr = methodType.parameterCount() != 0 ? String.format(\",%s\", paramExprs()) : \"\";\n+        String paramStr = methodType.parameterCount() != 0 ? String.format(\",%1$s\", paramExprs()) : \"\";\n@@ -105,1 +104,2 @@\n-        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+        \n+            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n@@ -150,1 +150,1 @@\n-            retExpr = String.format(\"return (%s)\", methodType.returnType().getSimpleName());\n+            retExpr = String.format(\"return (%1$s)\", methodType.returnType().getSimpleName());\n@@ -168,1 +168,1 @@\n-            private static final FunctionDescriptor $DESC = %s;\n+            private static final FunctionDescriptor $DESC = %1$s;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.text.MessageFormat;\n@@ -171,1 +170,1 @@\n-        String returnWithCast = isVoid ? \"\" : String.format(\"%s(%s)\", returnNoCast, retType);\n+        String returnWithCast = isVoid ? \"\" : String.format(\"%1$s(%2$s)\", returnNoCast, retType);\n@@ -174,2 +173,2 @@\n-                String.format(\"\\\"%s\\\"\", nativeName) :\n-                String.format(\"\\\"%s\\\", %s\", nativeName, paramList);\n+                String.format(\"\\\"%1$s\\\"\", nativeName) :\n+                String.format(\"\\\"%1$s\\\", %2$s\", nativeName, paramList);\n@@ -318,2 +317,2 @@\n-            static {\n-            \"\"\");\n+                static {\n+                \"\"\");\n@@ -323,1 +322,1 @@\n-                appendIndentedLines(\"System.%s(\\\"%s\\\");\", method, lib.toQuotedName());\n+                appendIndentedLines(\"System.%1$s(\\\"%2$s\\\");\", method, lib.toQuotedName());\n@@ -327,2 +326,2 @@\n-            }\n-            \"\"\");\n+                }\n+                \"\"\");\n@@ -333,2 +332,2 @@\n-                            String.format(\"SymbolLookup.libraryLookup(\\\"%s\\\", LIBRARY_ARENA)\", l.toQuotedName()) :\n-                            String.format(\"SymbolLookup.libraryLookup(System.mapLibraryName(\\\"%s\\\"), LIBRARY_ARENA)\", l.toQuotedName()))\n+                            String.format(\"SymbolLookup.libraryLookup(\\\"%1$s\\\", LIBRARY_ARENA)\", l.toQuotedName()) :\n+                            String.format(\"SymbolLookup.libraryLookup(System.mapLibraryName(\\\"%1$s\\\"), LIBRARY_ARENA)\", l.toQuotedName()))\n@@ -345,1 +344,1 @@\n-            lookupCalls.add(isFirst ? lookup : String.format(\".or(%s)\", lookup));\n+            lookupCalls.add(isFirst ? lookup : String.format(\".or(%1$s)\", lookup));\n@@ -352,1 +351,1 @@\n-                .collect(Collectors.joining(String.format(\"\\n%s\", indentString(2)), \"static final SymbolLookup SYMBOL_LOOKUP = \", \";\")));\n+                .collect(Collectors.joining(String.format(\"\\n%1$s\", indentString(2)), \"static final SymbolLookup SYMBOL_LOOKUP = \", \";\")));\n@@ -431,2 +430,2 @@\n-            public static MemorySegment %s() {\n-                return %s.SEGMENT;\n+            public static MemorySegment %1$s() {\n+                return %2$s.SEGMENT;\n@@ -444,2 +443,2 @@\n-            public static void %s(MemorySegment varValue) {\n-                MemorySegment.copy(varValue, 0L, %s.SEGMENT, 0L, %s.LAYOUT.byteSize());\n+            public static void %1$s(MemorySegment varValue) {\n+                MemorySegment.copy(varValue, 0L, %2$s.SEGMENT, 0L, %2$s.LAYOUT.byteSize());\n@@ -447,1 +446,1 @@\n-            \"\"\", javaName, holderClass, holderClass);\n+            \"\"\", javaName, holderClass);\n@@ -487,5 +486,5 @@\n-            appendLines(MessageFormat.format(\"\"\"\n-        public static void {0}({1}, MemorySegment varValue) '{'\n-            MemorySegment.copy(varValue, 0L, {0}({2}), 0L, {3}.byteSize());\n-        '}'\n-        \"\"\", javaName, indexList.decl(), indexList.use(), layoutString(elemType)));\n+            appendLines(\"\"\"\n+                public static void %1$s(%2$s, MemorySegment varValue) {\n+                    MemorySegment.copy(varValue, 0L, %1$s(%3$s), 0L, %4$s.byteSize());\n+                }\n+                 \"\"\", javaName, indexList.decl(), indexList.use(), layoutString(elemType));\n@@ -494,4 +493,4 @@\n-        public static void %1$s(%2$s, %3$s varValue) {\n-            %4$s.HANDLE.set(%4$s.SEGMENT, 0L, %5$s, varValue);\n-        }\n-        \"\"\", javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, indexList.use());\n+                public static void %1$s(%2$s, %3$s varValue) {\n+                    %4$s.HANDLE.set(%4$s.SEGMENT, 0L, %5$s, varValue);\n+                }\n+                \"\"\", javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, indexList.use());\n@@ -504,1 +503,1 @@\n-        String mangledName = newHolderClassName(String.format(\"%s$constants\", javaName));\n+        String mangledName = newHolderClassName(String.format(\"%1$s$constants\", javaName));\n@@ -518,3 +517,3 @@\n-            private static class %1$s {\n-                public static final %2$s LAYOUT = %3$s;\n-                public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n+                private static class %1$s {\n+                    public static final %2$s LAYOUT = %3$s;\n+                    public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n@@ -522,3 +521,3 @@\n-                public static final long[] DIMS = { %7$s };\n-            }\n-            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(),\n+                    public static final long[] DIMS = { %7$s };\n+                }\n+                \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(),\n@@ -528,5 +527,5 @@\n-            private static class %1$s {\n-                public static final %2$s LAYOUT = %3$s;\n-                public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n-            }\n-            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var));\n+                private static class %1$s {\n+                    public static final %2$s LAYOUT = %3$s;\n+                    public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n+                }\n+                \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var));\n@@ -538,4 +537,4 @@\n-        public static %s %s$layout() {\n-            return %s.LAYOUT;\n-        }\n-        \"\"\", layoutType, javaName, mangledName);\n+                public static %1$s %2$s$layout() {\n+                    return %3$s.LAYOUT;\n+                }\n+                \"\"\", layoutType, javaName, mangledName);\n@@ -546,4 +545,4 @@\n-            public static MemorySegment %s$segment() {\n-                return %s.SEGMENT;\n-            }\n-            \"\"\", javaName, mangledName);\n+                    public static MemorySegment %1$s$segment() {\n+                        return %2$s.SEGMENT;\n+                    }\n+                    \"\"\", javaName, mangledName);\n@@ -555,4 +554,4 @@\n-            public static long[] %s$dimensions() {\n-                return %s.DIMS;\n-            }\n-            \"\"\", javaName, mangledName);\n+                public static long[] %1$s$dimensions() {\n+                    return %2$s.DIMS;\n+                }\n+                \"\"\", javaName, mangledName);\n@@ -569,1 +568,1 @@\n-                public static %s %s() {\n+                public static %1$s %2$s() {\n@@ -571,2 +570,2 @@\n-                        static final %s %s\n-                            = %s.LIBRARY_ARENA.allocateFrom(\"%s\");\n+                        static final %1$s %2$s\n+                            = %3$s.LIBRARY_ARENA.allocateFrom(\"%4$s\");\n@@ -574,1 +573,1 @@\n-                    return Holder.%s;\n+                    return Holder.%2$s;\n@@ -579,2 +578,0 @@\n-                javaType.getSimpleName(),\n-                constantName,\n@@ -582,2 +579,1 @@\n-                Utils.quote(Objects.toString(value)),\n-                constantName);\n+                Utils.quote(Objects.toString(value)));\n@@ -586,1 +582,1 @@\n-                private static final %s %s = %s;\n+                private static final %1$s %2$s = %3$s;\n@@ -591,1 +587,1 @@\n-                 emitDocComment(declaration);\n+            emitDocComment(declaration);\n@@ -593,2 +589,2 @@\n-                public static %s %s() {\n-                    return %s;\n+                public static %1$s %2$s() {\n+                    return %2$s;\n@@ -598,1 +594,0 @@\n-                constantName,\n@@ -606,1 +601,1 @@\n-            return String.format(\"MemorySegment.ofAddress(%dL)\", ((Number)value).longValue());\n+            return String.format(\"MemorySegment.ofAddress(%1$dL)\", ((Number)value).longValue());\n@@ -639,1 +634,1 @@\n-                throw new IllegalArgumentException(String.format(\"Unhandled type: %s, or value: %s\", type, value));\n+                throw new IllegalArgumentException(String.format(\"Unhandled type: %1$s, or value: %2$s\", type, value));\n@@ -649,3 +644,2 @@\n-        public static final %s %s = %s;\n-        \"\"\",\n-        Utils.layoutCarrierFor(type).getSimpleName(), javaName, layoutString(type));\n+        public static final %1$s %2$s = %3$s;\n+        \"\"\", Utils.layoutCarrierFor(type).getSimpleName(), javaName, layoutString(type));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":63,"deletions":69,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        errWriter.println(String.format(\"ERROR: %s\", format(key, args)));\n+        errWriter.println(String.format(\"ERROR: %1$s\", format(key, args)));\n@@ -59,1 +59,1 @@\n-        errWriter.println(String.format(\"WARNING: %s\", format(key, args)));\n+        errWriter.println(String.format(\"WARNING: %1$s\", format(key, args)));\n@@ -73,1 +73,1 @@\n-        errWriter.println(String.format(\"FATAL: %s\", format(msg, args)));\n+        errWriter.println(String.format(\"FATAL: %1$s\", format(msg, args)));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Logger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -177,2 +177,2 @@\n-                    String.format(\"<error: %s>\", ((TypeImpl.ErronrousTypeImpl) t).erroneousName) :\n-                    String.format(\"<unknown: %s>\", t.getClass().getName());\n+                    String.format(\"<error: %1$s>\", ((TypeImpl.ErronrousTypeImpl) t).erroneousName) :\n+                    String.format(\"<unknown: %1$s>\", t.getClass().getName());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/PrettyPrinter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-            \/\/ Generated by jextract%s\n+            \/\/ Generated by jextract%1$s\n@@ -64,1 +64,1 @@\n-            \"\"\", SHOW_GENERATING_CLASS ? String.format(\" (via %s)\", getClass().getName()) : \"\"));\n+            \"\"\", SHOW_GENERATING_CLASS ? String.format(\" (via %2$s)\", getClass().getName()) : \"\"));\n@@ -67,1 +67,1 @@\n-                package %s;\n+                package %1$s;\n@@ -99,1 +99,1 @@\n-        return new JavaSourceFile(String.format(\"%s%s\",className,suffix),packageName,finisher.apply(sb.toString()));\n+        return new JavaSourceFile(String.format(\"%1$s%2$s\", className, suffix), packageName, finisher.apply(sb.toString()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.text.MessageFormat;\n@@ -156,1 +155,1 @@\n-            throw new IllegalArgumentException(String.format(\"Type not supported: %s\", varTree.type()));\n+            throw new IllegalArgumentException(String.format(\"Type not supported: %1$s\", varTree.type()));\n@@ -230,1 +229,1 @@\n-           public static void %1$s(MemorySegment %2$s, MemorySegment %3$s) {\n+            public static void %1$s(MemorySegment %2$s, MemorySegment %3$s) {\n@@ -237,1 +236,1 @@\n-        String arrayHandleName = String.format(\"%s$ELEM_HANDLE\", javaName);\n+        String arrayHandleName = String.format(\"%1$s$ELEM_HANDLE\", javaName);\n@@ -306,1 +305,1 @@\n-        appendIndentedLines(MessageFormat.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -309,2 +308,2 @@\n-             * Obtains a slice of {0} which selects the array element at {0}.\n-             * The returned segment has address {0}.address() + index * layout().byteSize()\n+             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.\n+             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}\n@@ -312,4 +311,4 @@\n-            public static MemorySegment asSlice(MemorySegment {0}, long index) '{'\n-                return {0}.asSlice(layout().byteSize() * index);\n-            '}'\n-            \"\"\", arrayParam));\n+            public static MemorySegment asSlice(MemorySegment %1$s, long index) {\n+                return %1$s.asSlice(layout().byteSize() * index);\n+            }\n+            \"\"\", arrayParam);\n@@ -321,1 +320,1 @@\n-             * The size (in bytes) of this %s\n+             * The size (in bytes) of this %1$s\n@@ -329,1 +328,1 @@\n-        appendIndentedLines(MessageFormat.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -332,1 +331,1 @@\n-             * Allocate a segment of size '{'@code layout().byteSize()'}' using {0}\n+             * Allocate a segment of size {@code layout().byteSize()} using {@code %1$s}}\n@@ -334,4 +333,4 @@\n-            public static MemorySegment allocate(SegmentAllocator {0}) '{'\n-                return {0}.allocate(layout());\n-            '}'\n-            \"\"\", allocatorParam));\n+            public static MemorySegment allocate(SegmentAllocator %1$s) {\n+                return %1$s.allocate(layout());\n+            }\n+            \"\"\", allocatorParam);\n@@ -379,1 +378,1 @@\n-            private static final GroupLayout $LAYOUT = %s;\n+            private static final GroupLayout $LAYOUT = %1$s;\n@@ -382,1 +381,1 @@\n-             * The layout of this %s\n+             * The layout of this %2$s\n@@ -387,2 +386,1 @@\n-            \"\"\",\n-            structOrUnionLayoutString(structType), kindName());\n+            \"\"\", structOrUnionLayoutString(structType), kindName());\n@@ -392,1 +390,1 @@\n-        String offsetFieldName = String.format(\"%s$OFFSET\", javaName);\n+        String offsetFieldName = String.format(\"%1$s$OFFSET\", javaName);\n@@ -394,1 +392,1 @@\n-            private static final long %s = %d;\n+            private static final long %1$s = %2$d;\n@@ -400,2 +398,2 @@\n-            public static final long %s$offset() {\n-                return %s;\n+            public static final long %1$s$offset() {\n+                return %2$s;\n@@ -408,1 +406,1 @@\n-        String layoutFieldName = String.format(\"%s$LAYOUT\", javaName);\n+        String layoutFieldName = String.format(\"%1$s$LAYOUT\", javaName);\n@@ -424,1 +422,1 @@\n-        String dimsFieldName = String.format(\"%s$DIMS\", javaName);\n+        String dimsFieldName = String.format(\"%1$s$DIMS\", javaName);\n@@ -430,1 +428,1 @@\n-            private static long[] %s = { %s };\n+            private static long[] %1$s = { %2$s };\n@@ -435,2 +433,2 @@\n-            public static long[] %s$dimensions() {\n-                return %s;\n+            public static long[] %1$s$dimensions() {\n+                return %2$s;\n@@ -480,1 +478,1 @@\n-                    memberLayout = String.format(\"%s%s.withName(\\\"%s\\\")\", indentString(indent + 1), memberLayout, member.name());\n+                    memberLayout = String.format(\"%1$s%2$s.withName(\\\"%3$s\\\")\", indentString(indent + 1), memberLayout, member.name());\n@@ -505,3 +503,3 @@\n-                String.format(\"%sMemoryLayout.structLayout(\\n\", indentString(indent)) :\n-                String.format(\"%sMemoryLayout.unionLayout(\\n\", indentString(indent));\n-        String suffix = String.format(\"\\n%s)\", indentString(indent));\n+                String.format(\"%1$sMemoryLayout.structLayout(\\n\", indentString(indent)) :\n+                String.format(\"%1$sMemoryLayout.unionLayout(\\n\", indentString(indent));\n+        String suffix = String.format(\"\\n%1$s)\", indentString(indent));\n@@ -514,1 +512,1 @@\n-        return String.format(\"%s.withName(\\\"%s\\\")\", layoutString, name);\n+        return String.format(\"%1$s.withName(\\\"%2$s\\\")\", layoutString, name);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%s#{SUFFIX}\",sfb.className()), null, sfb.className());\n+        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%1$s#{SUFFIX}\",sfb.className()), null, sfb.className());\n@@ -102,2 +102,2 @@\n-                        String.format(\"_%d\", suffix);\n-                String prevSuffix = String.format(\"_%d\", suffix + 1);\n+                        String.format(\"_%1$d\", suffix);\n+                String prevSuffix = String.format(\"_%1$d\", suffix + 1);\n@@ -106,1 +106,1 @@\n-                               .replace(\"#{PREV_SUFFIX}\", prevSuffix)));\n+                              .replace(\"#{PREV_SUFFIX}\", prevSuffix)));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-            valueString = String.format(\"\\\"%s\\\"\", valueString);\n+            valueString = String.format(\"\\\"%1$s\\\"\", valueString);\n@@ -238,1 +238,1 @@\n-            valueString = String.format(\"(void*) %s\", valueString);\n+            valueString = String.format(\"(void*) %1$s\", valueString);\n@@ -240,1 +240,1 @@\n-        DeclarationString.with(macro, String.format(\"#define %s %s\", name, valueString));\n+        DeclarationString.with(macro, String.format(\"#define %1$s %2$s\", name, valueString));\n@@ -533,1 +533,1 @@\n-        return String.format(\"enum %s.%s = %s\", enumName, enumConstant.name(), enumConstant.value());\n+        return String.format(\"enum %1$s.%2$s = %3$s\", enumName, enumConstant.name(), enumConstant.value());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}