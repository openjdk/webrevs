{"files":[{"patch":"@@ -110,1 +110,1 @@\n-        appendLines(String.format(\"%s %s %s%s {\", modifiers, kind.kindName, className, extendsExpr));\n+        appendLines(\"%s %s %s%s {\", modifiers, kind.kindName, className, extendsExpr);\n@@ -133,0 +133,3 @@\n+    void appendLines(String s, String... args) {\n+        sb.appendLines(String.format(s, (Object []) args));\n+    }\n@@ -144,0 +147,4 @@\n+    void appendIndentedLines(String s, String... args) {\n+        sb.appendIndentedLines(String.format(s, (Object []) args));\n+    }\n+\n@@ -145,1 +152,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -150,1 +157,1 @@\n-            \"\"\", className));\n+            \"\"\", className);\n@@ -158,1 +165,1 @@\n-        appendLines(String.format(\"\"\"\n+        appendLines(\"\"\"\n@@ -165,1 +172,1 @@\n-            \"\"\", !header.isEmpty() ? String.format(\" * %s\\n\", header) : \"\", declarationComment(decl)));\n+            \"\"\", !header.isEmpty() ? String.format(\" * %s\\n\", header) : \"\", declarationComment(decl));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -75,2 +75,2 @@\n-            public interface %s {\n-                %s apply(%s);\n+            public interface %1$s {\n+                %2$s apply(%3$s);\n@@ -79,1 +79,1 @@\n-            fiName, methodType.returnType().getSimpleName(), paramExprs()));\n+            fiName, methodType.returnType().getSimpleName(), paramExprs());\n@@ -84,1 +84,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -86,1 +86,1 @@\n-            private static final MethodHandle UP$MH = %s.upcallHandle(%s.%s.class, \"apply\", $DESC);\n+            private static final MethodHandle UP$MH = %1$s.upcallHandle(%2$s.%3$s.class, \"apply\", $DESC);\n@@ -92,1 +92,1 @@\n-            public static MemorySegment allocate(%s.%s fi, Arena arena) {\n+            public static MemorySegment allocate(%2$s.%3$s fi, Arena arena) {\n@@ -96,1 +96,1 @@\n-            runtimeHelperName(), className(), fiName, className(), fiName));\n+            runtimeHelperName(), className(), fiName);\n@@ -104,1 +104,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -110,1 +110,1 @@\n-            public static %s invoke(MemorySegment funcPtr%s%s) {\n+            public static %1$s invoke(MemorySegment funcPtr%2$s%3$s) {\n@@ -112,1 +112,1 @@\n-                    %s DOWN$MH.invokeExact(funcPtr%s%s);\n+                    %4$s DOWN$MH.invokeExact(funcPtr%5$s%6$s);\n@@ -123,1 +123,1 @@\n-            otherArgExprs()));\n+            otherArgExprs());\n@@ -166,1 +166,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -176,2 +176,1 @@\n-            \"\"\",\n-            functionDescriptorString(0, funcType)));\n+            \"\"\", functionDescriptorString(0, funcType));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.text.MessageFormat;\n@@ -178,1 +179,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -180,2 +181,2 @@\n-                private static class %s {\n-                    public static final FunctionDescriptor DESC = %s;\n+                private static class %1$s {\n+                    public static final FunctionDescriptor DESC = %2$s;\n@@ -183,1 +184,1 @@\n-                    public static final MemorySegment ADDR = %s.findOrThrow(\"%s\");\n+                    public static final MemorySegment ADDR = %3$s.findOrThrow(\"%4$s\");\n@@ -187,2 +188,2 @@\n-                \"\"\",\n-                holderClass, functionDescriptorString(1, decl.type()), runtimeHelperName(), lookupName(decl)));\n+                \"\"\", holderClass, functionDescriptorString(1, decl.type()),\n+                    runtimeHelperName(), lookupName(decl));\n@@ -191,3 +192,3 @@\n-            appendLines(String.format(\"\"\"\n-                public static FunctionDescriptor %s$descriptor() {\n-                    return %s.DESC;\n+            appendLines(\"\"\"\n+                public static FunctionDescriptor %1$s$descriptor() {\n+                    return %2$s.DESC;\n@@ -195,1 +196,1 @@\n-                \"\"\", javaName, holderClass));\n+                \"\"\", javaName, holderClass);\n@@ -198,3 +199,3 @@\n-            appendLines(String.format(\"\"\"\n-                public static MethodHandle %s$handle() {\n-                    return %s.HANDLE;\n+            appendLines(\"\"\"\n+                public static MethodHandle %1$s$handle() {\n+                    return %2$s.HANDLE;\n@@ -202,2 +203,1 @@\n-                \"\"\",\n-                javaName, holderClass));\n+                \"\"\", javaName, holderClass);\n@@ -206,3 +206,3 @@\n-            appendLines(String.format(\"\"\"\n-                public static MemorySegment %s$address() {\n-                    return %s.ADDR;\n+            appendLines(\"\"\"\n+                public static MemorySegment %1$s$address() {\n+                    return %2$s.ADDR;\n@@ -210,2 +210,1 @@\n-                \"\"\",\n-                javaName, holderClass));\n+                \"\"\", javaName, holderClass);\n@@ -214,3 +213,3 @@\n-            appendLines(String.format(\"\"\"\n-            public static %s %s(%s) {\n-                var mh$ = %s.HANDLE;\n+            appendLines(\"\"\"\n+            public static %1$s %2$s(%3$s) {\n+                var mh$ = %4$s.HANDLE;\n@@ -219,1 +218,1 @@\n-                        traceDowncall(%s);\n+                        traceDowncall(%5$s);\n@@ -221,1 +220,1 @@\n-                    %s mh$.invokeExact(%s);\n+                    %6$s mh$.invokeExact(%7$s);\n@@ -226,3 +225,3 @@\n-            \"\"\",\n-            retType, javaName, paramExprs(declType, finalParamNames, isVarArg),\n-            holderClass, traceArgList, returnWithCast, paramList));\n+            \"\"\", retType, javaName,\n+            paramExprs(declType, finalParamNames, isVarArg),\n+            holderClass, traceArgList, returnWithCast, paramList);\n@@ -234,4 +233,4 @@\n-            appendLines(String.format(\"\"\"\n-                public static class %s {\n-                    private static final FunctionDescriptor BASE_DESC = %s;\n-                    private static final MemorySegment ADDR = %s.findOrThrow(\"%s\");\n+            appendLines(\"\"\"\n+                public static class %1$s {\n+                    private static final FunctionDescriptor BASE_DESC = %2$s;\n+                    private static final MemorySegment ADDR = %3$s.findOrThrow(\"%4$s\");\n@@ -243,1 +242,1 @@\n-                    private %s(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {\n+                    private %5$s(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {\n@@ -248,2 +247,2 @@\n-                \"\"\",\n-                invokerClassName, functionDescriptorString(2, decl.type()), runtimeHelperName(), lookupName(decl), invokerClassName));\n+                \"\"\", invokerClassName, functionDescriptorString(2, decl.type()),\n+                    runtimeHelperName(), lookupName(decl), invokerClassName);\n@@ -253,2 +252,2 @@\n-            appendLines(String.format(\"\"\"\n-                public static %s makeInvoker(MemoryLayout... layouts) {\n+            appendLines(\"\"\"\n+                public static %1$s makeInvoker(MemoryLayout... layouts) {\n@@ -259,1 +258,1 @@\n-                    return new %s(mh$, desc$, spreader$);\n+                    return new %1$s(mh$, desc$, spreader$);\n@@ -261,2 +260,1 @@\n-                \"\"\",\n-                invokerClassName, invokerClassName));\n+                \"\"\", invokerClassName);\n@@ -264,1 +262,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -287,1 +285,1 @@\n-                    public %s apply(%s) {\n+                    public %1$s apply(%2$s) {\n@@ -290,1 +288,1 @@\n-                                traceDowncall(%s);\n+                                traceDowncall(%3$s);\n@@ -292,1 +290,1 @@\n-                            %s spreader.invokeExact(%s);\n+                            %4$s spreader.invokeExact(%5$s);\n@@ -300,2 +298,1 @@\n-                \"\"\",\n-                retType, paramExprs, traceArgList, returnWithCast, paramList));\n+                \"\"\", retType, paramExprs, traceArgList, returnWithCast, paramList);\n@@ -319,1 +316,1 @@\n-            appendIndentedLines(String.format(\"\"\"\n+            appendIndentedLines(\"\"\"\n@@ -322,1 +319,1 @@\n-            \"\"\"));\n+            \"\"\");\n@@ -326,1 +323,1 @@\n-                appendIndentedLines(String.format(\"System.%s(\\\"%s\\\");\", method, lib.toQuotedName()));\n+                appendIndentedLines(\"System.%s(\\\"%s\\\");\", method, lib.toQuotedName());\n@@ -406,3 +403,3 @@\n-        appendLines(String.format(\"\"\"\n-            public static %s %s() {\n-                return %s.SEGMENT.get(%s.LAYOUT, 0L);\n+        appendLines(\"\"\"\n+            public static %1$s %2$s() {\n+                return %3$s.SEGMENT.get(%3$s.LAYOUT, 0L);\n@@ -410,2 +407,1 @@\n-            \"\"\", type.getSimpleName(), javaName, holderClass, holderClass));\n-\n+            \"\"\", type.getSimpleName(), javaName, holderClass);\n@@ -421,3 +417,3 @@\n-        appendLines(String.format(\"\"\"\n-            public static void %s(%s varValue) {\n-                %s.SEGMENT.set(%s.LAYOUT, 0L, varValue);\n+        appendLines(\"\"\"\n+            public static void %1$s(%2$s varValue) {\n+                %3$s.SEGMENT.set(%4$s.LAYOUT, 0L, varValue);\n@@ -425,2 +421,1 @@\n-            \"\"\", javaName, type.getSimpleName(), holderClass, holderClass));\n-\n+            \"\"\", javaName, type.getSimpleName(), holderClass, holderClass);\n@@ -435,1 +430,1 @@\n-        appendLines(String.format(\"\"\"\n+        appendLines(\"\"\"\n@@ -439,2 +434,1 @@\n-            \"\"\", javaName, holderClass));\n-\n+            \"\"\", javaName, holderClass);\n@@ -449,1 +443,1 @@\n-        appendLines(String.format(\"\"\"\n+        appendLines(\"\"\"\n@@ -453,1 +447,1 @@\n-            \"\"\", javaName, holderClass, holderClass));\n+            \"\"\", javaName, holderClass, holderClass);\n@@ -465,2 +459,2 @@\n-            appendLines(String.format(\"\"\"\n-                public static MemorySegment %s(%s) {\n+            appendLines(\"\"\"\n+                public static MemorySegment %1$s(%2$s) {\n@@ -468,1 +462,1 @@\n-                        return (MemorySegment)%s.HANDLE.invokeExact(%s.SEGMENT, 0L, %s);\n+                        return (MemorySegment)%3$s.HANDLE.invokeExact(%4$s.SEGMENT, 0L, %5$s);\n@@ -473,1 +467,1 @@\n-                \"\"\", javaName, indexList.decl(), holderClass, holderClass, indexList.use()));\n+                \"\"\", javaName, indexList.decl(), holderClass, holderClass, indexList.use());\n@@ -475,3 +469,3 @@\n-            appendLines(String.format(\"\"\"\n-                public static %s %s(%s) {\n-                    return (%s)%s.HANDLE.get(%s.SEGMENT, 0L, %s);\n+            appendLines(\"\"\"\n+                public static %1$s %2$s(%3$s) {\n+                    return (%1$s)%4$s.HANDLE.get(%4$s.SEGMENT, 0L, %5$s);\n@@ -479,1 +473,2 @@\n-                \"\"\", typeCls.getSimpleName(), javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, holderClass, indexList.use()));\n+                \"\"\", typeCls.getSimpleName(), javaName, indexList.decl(),\n+                    holderClass, indexList.use());\n@@ -492,5 +487,5 @@\n-            appendLines(String.format(\"\"\"\n-        public static void %s(%s, MemorySegment varValue) {\n-            MemorySegment.copy(varValue, 0L, %s(%s), 0L, %s.byteSize());\n-        }\n-        \"\"\", javaName, indexList.decl(), javaName, indexList.use(), layoutString(elemType)));\n+            appendLines(MessageFormat.format(\"\"\"\n+        public static void {0}({1}, MemorySegment varValue) '{'\n+            MemorySegment.copy(varValue, 0L, {0}({2}), 0L, {3}.byteSize());\n+        '}'\n+        \"\"\", javaName, indexList.decl(), indexList.use(), layoutString(elemType)));\n@@ -498,3 +493,3 @@\n-            appendLines(String.format(\"\"\"\n-        public static void %s(%s, %s varValue) {\n-            %s.HANDLE.set(%s.SEGMENT, 0L, %s, varValue);\n+            appendLines(\"\"\"\n+        public static void %1$s(%2$s, %3$s varValue) {\n+            %4$s.HANDLE.set(%4$s.SEGMENT, 0L, %5$s, varValue);\n@@ -502,1 +497,1 @@\n-        \"\"\", javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, holderClass, indexList.use()));\n+        \"\"\", javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, indexList.use());\n@@ -522,6 +517,6 @@\n-            appendIndentedLines(String.format(\"\"\"\n-            private static class %s {\n-                public static final %s LAYOUT = %s;\n-                public static final MemorySegment SEGMENT = %s.findOrThrow(\"%s\").reinterpret(LAYOUT.byteSize());\n-                %s\n-                public static final long[] DIMS = { %s };\n+            appendIndentedLines(\"\"\"\n+            private static class %1$s {\n+                public static final %2$s LAYOUT = %3$s;\n+                public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n+                %6$s\n+                public static final long[] DIMS = { %7$s };\n@@ -529,1 +524,2 @@\n-            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var), accessHandle, dimsString));\n+            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(),\n+                    lookupName(var), accessHandle, dimsString);\n@@ -531,4 +527,4 @@\n-            appendIndentedLines(String.format(\"\"\"\n-            private static class %s {\n-                public static final %s LAYOUT = %s;\n-                public static final MemorySegment SEGMENT = %s.findOrThrow(\"%s\").reinterpret(LAYOUT.byteSize());\n+            appendIndentedLines(\"\"\"\n+            private static class %1$s {\n+                public static final %2$s LAYOUT = %3$s;\n+                public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n@@ -536,1 +532,1 @@\n-            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var)));\n+            \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var));\n@@ -541,1 +537,1 @@\n-        appendLines(String.format(\"\"\"\n+        appendLines(\"\"\"\n@@ -545,1 +541,1 @@\n-        \"\"\", layoutType, javaName, mangledName));\n+        \"\"\", layoutType, javaName, mangledName);\n@@ -549,1 +545,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -553,1 +549,1 @@\n-            \"\"\", javaName, mangledName));\n+            \"\"\", javaName, mangledName);\n@@ -558,1 +554,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -562,1 +558,1 @@\n-            \"\"\", javaName, mangledName));\n+            \"\"\", javaName, mangledName);\n@@ -572,1 +568,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -581,7 +577,7 @@\n-                    javaType.getSimpleName(),\n-                    constantName,\n-                    javaType.getSimpleName(),\n-                    constantName,\n-                    runtimeHelperName(),\n-                    Utils.quote(Objects.toString(value)),\n-                    constantName));\n+                javaType.getSimpleName(),\n+                constantName,\n+                javaType.getSimpleName(),\n+                constantName,\n+                runtimeHelperName(),\n+                Utils.quote(Objects.toString(value)),\n+                constantName);\n@@ -589,1 +585,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -594,1 +590,1 @@\n-                constantValue(javaType, value)));\n+                constantValue(javaType, value));\n@@ -596,1 +592,1 @@\n-            appendLines(String.format(\"\"\"\n+            appendLines(\"\"\"\n@@ -603,1 +599,1 @@\n-                constantName));\n+                constantName);\n@@ -652,1 +648,1 @@\n-        appendLines(String.format(\"\"\"\n+        appendLines(\"\"\"\n@@ -655,1 +651,1 @@\n-         Utils.layoutCarrierFor(type).getSimpleName(), javaName, layoutString(type)));\n+        Utils.layoutCarrierFor(type).getSimpleName(), javaName, layoutString(type));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":109,"deletions":113,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-            \"\"\",\n-            SHOW_GENERATING_CLASS ? String.format(\" (via %s)\", getClass().getName()) : \"\"));\n+            \"\"\", SHOW_GENERATING_CLASS ? String.format(\" (via %s)\", getClass().getName()) : \"\"));\n@@ -70,2 +69,1 @@\n-                \"\"\",\n-                packageName));\n+                \"\"\", packageName));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.text.MessageFormat;\n@@ -191,3 +192,3 @@\n-        appendIndentedLines(String.format(\"\"\"\n-            public static %s %s(MemorySegment %s) {\n-                return %s.get(%s, %s);\n+        appendIndentedLines(\"\"\"\n+            public static %1$s %2$s(MemorySegment %3$s) {\n+                return %3$s.get(%4$s, %5$s);\n@@ -195,2 +196,1 @@\n-            \"\"\",\n-            type.getSimpleName(), javaName, segmentParam, segmentParam, layoutField, offsetField));\n+            \"\"\", type.getSimpleName(), javaName, segmentParam, layoutField, offsetField);\n@@ -205,3 +205,3 @@\n-        appendIndentedLines(String.format(\"\"\"\n-            public static void %s(MemorySegment %s, %s %s) {\n-                %s.set(%s, %s, %s);\n+        appendIndentedLines(\"\"\"\n+            public static void %1$s(MemorySegment %2$s, %3$s %4$s) {\n+                %2$s.set(%5$s, %6$s, %4$s);\n@@ -209,3 +209,1 @@\n-            \"\"\",\n-            javaName, segmentParam, type.getSimpleName(), valueParam,\n-            segmentParam, layoutField, offsetField, valueParam));\n+            \"\"\", javaName, segmentParam, type.getSimpleName(), valueParam, layoutField, offsetField);\n@@ -218,3 +216,3 @@\n-        appendIndentedLines(String.format(\"\"\"\n-            public static MemorySegment %s(MemorySegment %s) {\n-                return %s.asSlice(%s, %s.byteSize());\n+        appendIndentedLines(\"\"\"\n+            public static MemorySegment %1$s(MemorySegment %2$s) {\n+                return %2$s.asSlice(%3$s, %4$s.byteSize());\n@@ -223,1 +221,1 @@\n-            javaName, segmentParam, segmentParam, offsetField, layoutField));\n+            javaName, segmentParam, offsetField, layoutField);\n@@ -231,3 +229,3 @@\n-        appendIndentedLines(String.format(\"\"\"\n-            public static void %s(MemorySegment %s, MemorySegment %s) {\n-                MemorySegment.copy(%s, 0L, %s, %s, %s.byteSize());\n+        appendIndentedLines(\"\"\"\n+           public static void %1$s(MemorySegment %2$s, MemorySegment %3$s) {\n+                MemorySegment.copy(%3$s, 0L, %2$s, %4$s, %5$s.byteSize());\n@@ -235,2 +233,1 @@\n-            \"\"\",\n-            javaName, segmentParam, valueParam, valueParam, segmentParam, offsetField, layoutField));\n+            \"\"\", javaName, segmentParam, valueParam, offsetField, layoutField);\n@@ -246,1 +243,1 @@\n-            appendIndentedLines(String.format(\"\"\"\n+            appendIndentedLines(\"\"\"\n@@ -248,2 +245,1 @@\n-                \"\"\",\n-                arrayHandleName, fieldLayoutName, path));\n+                \"\"\", arrayHandleName, fieldLayoutName, path);\n@@ -251,1 +247,1 @@\n-            appendIndentedLines(String.format(\"\"\"\n+            appendIndentedLines(\"\"\"\n@@ -253,2 +249,1 @@\n-                \"\"\",\n-                arrayHandleName, fieldLayoutName, path));\n+                \"\"\", arrayHandleName, fieldLayoutName, path);\n@@ -266,2 +261,2 @@\n-            appendIndentedLines(String.format(\"\"\"\n-                public static MemorySegment %s(MemorySegment %s, %s) {\n+            appendIndentedLines(\"\"\"\n+                public static MemorySegment %1$s(MemorySegment %2$s, %3$s) {\n@@ -269,1 +264,1 @@\n-                        return (MemorySegment)%s.invokeExact(%s, 0L, %s);\n+                        return (MemorySegment)%4$s.invokeExact(%2$s, 0L, %5$s);\n@@ -274,2 +269,1 @@\n-                \"\"\",\n-                javaName, segmentParam, indexList.decl(), arrayElementHandle, segmentParam, indexList.use()));\n+                \"\"\", javaName, segmentParam, indexList.decl(), arrayElementHandle, indexList.use());\n@@ -277,3 +271,3 @@\n-            appendIndentedLines(String.format(\"\"\"\n-                public static %s %s(MemorySegment %s, %s) {\n-                    return (%s)%s.get(%s, 0L, %s);\n+            appendIndentedLines(\"\"\"\n+                public static %1$s %2$s(MemorySegment %3$s, %4$s) {\n+                    return (%1$s)%5$s.get(%3$s, 0L, %6$s);\n@@ -281,3 +275,2 @@\n-                \"\"\",\n-                elemTypeCls.getSimpleName(), javaName, segmentParam, indexList.decl(),\n-                elemTypeCls.getSimpleName(), arrayElementHandle, segmentParam, indexList.use()));\n+                \"\"\", elemTypeCls.getSimpleName(), javaName, segmentParam\n+                   ,indexList.decl(), arrayElementHandle, indexList.use());\n@@ -295,3 +288,3 @@\n-            appendIndentedLines(String.format(\"\"\"\n-                public static void %s(MemorySegment %s, %s, MemorySegment %s) {\n-                    MemorySegment.copy(%s, 0L, %s(%s, %s), 0L, %s.byteSize());\n+            appendIndentedLines(\"\"\"\n+                public static void %1$s(MemorySegment %2$s, %3$s, MemorySegment %4$s) {\n+                    MemorySegment.copy(%4$s, 0L, %1$s(%2$s, %5$s), 0L, %6$s.byteSize());\n@@ -299,3 +292,2 @@\n-                \"\"\",\n-                javaName, segmentParam, indexList.decl(), valueParam, valueParam,\n-                javaName, segmentParam, indexList.use(), layoutString(elemType)));\n+                \"\"\", javaName, segmentParam, indexList.decl()\n+                   ,valueParam, indexList.use(), layoutString(elemType));\n@@ -303,3 +295,3 @@\n-            appendIndentedLines(String.format(\"\"\"\n-                public static void %s(MemorySegment %s, %s, %s %s) {\n-                    %s.set(%s, 0L, %s, %s);\n+            appendIndentedLines(\"\"\"\n+                public static void %1$s(MemorySegment %2$s, %3$s, %4$s %5$s) {\n+                    %6$s.set(%2$s, 0L, %7$s, %5$s);\n@@ -307,3 +299,2 @@\n-                \"\"\",\n-                javaName, segmentParam, indexList.decl(), elemTypeCls.getSimpleName(),\n-                valueParam, arrayElementHandle, segmentParam, indexList.use(), valueParam));\n+                \"\"\", javaName, segmentParam, indexList.decl(), elemTypeCls.getSimpleName()\n+                   ,valueParam, arrayElementHandle, indexList.use());\n@@ -315,1 +306,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(MessageFormat.format(\"\"\"\n@@ -318,2 +309,2 @@\n-             * Obtains a slice of %s which selects the array element at %s.\n-             * The returned segment has address %s.address() + index * layout().byteSize()\n+             * Obtains a slice of {0} which selects the array element at {0}.\n+             * The returned segment has address {0}.address() + index * layout().byteSize()\n@@ -321,5 +312,4 @@\n-            public static MemorySegment asSlice(MemorySegment %s, long index) {\n-                return %s.asSlice(layout().byteSize() * index);\n-            }\n-            \"\"\",\n-            arrayParam, arrayParam, arrayParam, arrayParam, arrayParam));\n+            public static MemorySegment asSlice(MemorySegment {0}, long index) '{'\n+                return {0}.asSlice(layout().byteSize() * index);\n+            '}'\n+            \"\"\", arrayParam));\n@@ -329,1 +319,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -334,2 +324,1 @@\n-            \"\"\",\n-            kindName()));\n+            \"\"\", kindName());\n@@ -340,1 +329,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(MessageFormat.format(\"\"\"\n@@ -343,1 +332,1 @@\n-             * Allocate a segment of size {@code layout().byteSize()} using %s\n+             * Allocate a segment of size '{'@code layout().byteSize()'}' using {0}\n@@ -345,5 +334,4 @@\n-            public static MemorySegment allocate(SegmentAllocator %s) {\n-                return %s.allocate(layout());\n-            }\n-            \"\"\",\n-            allocatorParam, allocatorParam, allocatorParam));\n+            public static MemorySegment allocate(SegmentAllocator {0}) '{'\n+                return {0}.allocate(layout());\n+            '}'\n+            \"\"\", allocatorParam));\n@@ -355,1 +343,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -358,2 +346,2 @@\n-             * Allocate an array of size {@code %s} using %s.\n-             * The returned segment has size {@code %s * layout().byteSize()}.\n+             * Allocate an array of size {@code %1$s} using %2$s.\n+             * The returned segment has size {@code %1$s * layout().byteSize()}.\n@@ -361,2 +349,2 @@\n-            public static MemorySegment allocateArray(long %s, SegmentAllocator %s) {\n-                return %s.allocate(MemoryLayout.sequenceLayout(%s, layout()));\n+            public static MemorySegment allocateArray(long %1$s, SegmentAllocator %2$s) {\n+                return %2$s.allocate(MemoryLayout.sequenceLayout(%1$s, layout()));\n@@ -364,3 +352,1 @@\n-            \"\"\",\n-            elementCountParam, allocatorParam, elementCountParam,\n-            elementCountParam, allocatorParam, allocatorParam, elementCountParam));\n+            \"\"\", elementCountParam, allocatorParam);\n@@ -391,1 +377,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -402,1 +388,1 @@\n-            structOrUnionLayoutString(structType), kindName()));\n+            structOrUnionLayoutString(structType), kindName());\n@@ -413,1 +399,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -417,2 +403,1 @@\n-            \"\"\",\n-            javaName, offsetFieldName));\n+            \"\"\", javaName, offsetFieldName);\n@@ -425,4 +410,3 @@\n-        appendIndentedLines(String.format(\"\"\"\n-            private static final %s %s = (%s)$LAYOUT.select(%s);\n-            \"\"\",\n-            layoutType, layoutFieldName, layoutType, fieldElementPaths(field.name())));\n+        appendIndentedLines(\"\"\"\n+            private static final %s %s = (%1$s)$LAYOUT.select(%s);\n+            \"\"\", layoutType, layoutFieldName, fieldElementPaths(field.name()));\n@@ -431,1 +415,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -435,2 +419,1 @@\n-            \"\"\",\n-            layoutType, javaName, layoutFieldName));\n+            \"\"\", layoutType, javaName, layoutFieldName);\n@@ -445,1 +428,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -448,2 +431,1 @@\n-            \"\"\",\n-            dimsFieldName, dimsString));\n+            \"\"\", dimsFieldName, dimsString);\n@@ -452,1 +434,1 @@\n-        appendIndentedLines(String.format(\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -456,2 +438,1 @@\n-            \"\"\",\n-            javaName, dimsFieldName));\n+            \"\"\", javaName, dimsFieldName);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":74,"deletions":93,"binary":false,"changes":167,"status":"modified"}]}