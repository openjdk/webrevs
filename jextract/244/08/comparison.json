{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,3 +110,1 @@\n-        appendLines(STR.\"\"\"\n-            \\{modifiers} \\{kind.kindName} \\{className}\\{extendsExpr} {\n-            \"\"\");\n+        appendLines(\"%1$s %2$s %3$s%4$s {\", modifiers, kind.kindName, className, extendsExpr);\n@@ -131,0 +129,4 @@\n+    String format(String s, String... args) {\n+        return String.format(s, (Object[]) args);\n+    }\n+\n@@ -135,0 +137,3 @@\n+    void appendLines(String s, String... args) {\n+        sb.appendLines(format(s, args));\n+    }\n@@ -146,0 +151,4 @@\n+    void appendIndentedLines(String s, String... args) {\n+        sb.appendIndentedLines(format(s, args));\n+    }\n+\n@@ -147,1 +156,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -149,1 +158,1 @@\n-            \\{className}() {\n+            %1$s() {\n@@ -152,1 +161,1 @@\n-            \"\"\");\n+            \"\"\", className);\n@@ -160,1 +169,1 @@\n-        appendLines(STR.\"\"\"\n+        appendLines(\"\"\"\n@@ -162,1 +171,1 @@\n-            \\{!header.isEmpty() ? STR.\" * \\{header}\\n\" : \"\"}\\\n+            %1$s\n@@ -164,1 +173,1 @@\n-            \\{declarationComment(decl)}\n+            %2$s\n@@ -167,1 +176,1 @@\n-            \"\"\");\n+            \"\"\", !header.isEmpty() ? String.format(\" * %1$s\\n\", header) : \"\", declarationComment(decl));\n@@ -195,2 +204,2 @@\n-            case Declared d when Utils.isStructOrUnion(d) -> alignIfNeeded(STR.\"\\{JavaName.getFullNameOrThrow(d.tree())}.layout()\", ClangAlignOf.getOrThrow(d.tree()) \/ 8, align);\n-            case Delegated d when d.kind() == Delegated.Kind.POINTER -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_POINTER\", 8, align);\n+            case Declared d when Utils.isStructOrUnion(d) -> alignIfNeeded(\"%1$s.layout()\", JavaName.getFullNameOrThrow(d.tree()), ClangAlignOf.getOrThrow(d.tree()) \/ 8, align);\n+            case Delegated d when d.kind() == Delegated.Kind.POINTER -> alignIfNeeded(\"%1$s.C_POINTER\", runtimeHelperName(), 8, align);\n@@ -198,2 +207,2 @@\n-            case Function _ -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_POINTER\", 8, align);\n-            case Array a -> STR.\"MemoryLayout.sequenceLayout(\\{a.elementCount().orElse(0L)}, \\{layoutString(a.elementType(), align)})\";\n+            case Function _ -> alignIfNeeded(\"%1$s.C_POINTER\", runtimeHelperName(), 8, align);\n+            case Array a -> String.format(\"MemoryLayout.sequenceLayout(%1$d, %2$s)\", a.elementCount().orElse(0L), layoutString(a.elementType(), align));\n@@ -211,1 +220,1 @@\n-            builder.append(STR.\"\\{indentString(textBoxIndent + 1)}\\{layoutString(functionType.returnType())}\");\n+            builder.append(String.format(\"%1$s%2$s\", indentString(textBoxIndent + 1), layoutString(functionType.returnType())));\n@@ -223,1 +232,1 @@\n-                builder.append(STR.\"\\{indentString(textBoxIndent + 1)}\\{layoutString(arg)}\");\n+                builder.append(String.format(\"%1$s%2$s\", indentString(textBoxIndent + 1), layoutString(arg)));\n@@ -228,1 +237,1 @@\n-        builder.append(STR.\"\\{indentString(textBoxIndent)})\");\n+        builder.append(indentString(textBoxIndent)).append(\")\");\n@@ -238,8 +247,8 @@\n-            case Bool -> STR.\"\\{runtimeHelperName()}.C_BOOL\";\n-            case Char -> STR.\"\\{runtimeHelperName()}.C_CHAR\";\n-            case Short -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_SHORT\", 2, align);\n-            case Int -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_INT\", 4, align);\n-            case Long -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_LONG\", TypeImpl.IS_WINDOWS ? 4 : 8, align);\n-            case LongLong -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_LONG_LONG\", 8, align);\n-            case Float -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_FLOAT\", 4, align);\n-            case Double -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_DOUBLE\", 8, align);\n+            case Bool -> runtimeHelperName() + \".C_BOOL\";\n+            case Char -> runtimeHelperName() + \".C_CHAR\";\n+            case Short -> alignIfNeeded(\"%1$s.C_SHORT\", runtimeHelperName(), 2, align);\n+            case Int -> alignIfNeeded(\"%1$s.C_INT\", runtimeHelperName(), 4, align);\n+            case Long -> alignIfNeeded(\"%1$s.C_LONG\", runtimeHelperName(), TypeImpl.IS_WINDOWS ? 4 : 8, align);\n+            case LongLong -> alignIfNeeded(\"%1$s.C_LONG_LONG\", runtimeHelperName(), 8, align);\n+            case Float -> alignIfNeeded(\"%1$s.C_FLOAT\", runtimeHelperName(), 4, align);\n+            case Double -> alignIfNeeded(\"%1$s.C_DOUBLE\", runtimeHelperName(), 8, align);\n@@ -247,1 +256,1 @@\n-                    alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_LONG_DOUBLE\", 8, align) :\n+                    alignIfNeeded(\"%1$s.C_LONG_DOUBLE\", runtimeHelperName(), 8, align) :\n@@ -255,1 +264,2 @@\n-    private String alignIfNeeded(String layoutPrefix, long align, long expectedAlign) {\n+    private String alignIfNeeded(String layout, String prefix, long align, long expectedAlign) {\n+        String layoutPrefix = String.format(layout, prefix);\n@@ -257,1 +267,1 @@\n-                STR.\"\\{runtimeHelperName()}.align(\\{layoutPrefix}, \\{expectedAlign})\" :\n+                String.format(\"%1$s.align(%2$s, %3$d)\", runtimeHelperName(), layoutPrefix, expectedAlign) :\n@@ -262,1 +272,1 @@\n-        return STR.\"\\{indentString(indent)}MemoryLayout.paddingLayout(\\{size})\";\n+        return String.format(\"%1$sMemoryLayout.paddingLayout(%2$d)\", indentString(indent), size);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":40,"deletions":30,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -75,2 +75,2 @@\n-            public interface \\{fiName} {\n-                \\{methodType.returnType().getSimpleName()} apply(\\{paramExprs()});\n+            public interface %1$s {\n+                %2$s apply(%3$s);\n@@ -78,1 +78,2 @@\n-            \"\"\");\n+            \"\"\",\n+            fiName, methodType.returnType().getSimpleName(), paramExprs());\n@@ -83,1 +84,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -85,1 +86,1 @@\n-            private static final MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.\\{fiName}.class, \"apply\", $DESC);\n+            private static final MethodHandle UP$MH = %1$s.upcallHandle(%2$s.%3$s.class, \"apply\", $DESC);\n@@ -91,1 +92,1 @@\n-            public static MemorySegment allocate(\\{className()}.\\{fiName} fi, Arena arena) {\n+            public static MemorySegment allocate(%2$s.%3$s fi, Arena arena) {\n@@ -94,1 +95,1 @@\n-            \"\"\");\n+            \"\"\", runtimeHelperName(), className(), fiName);\n@@ -101,2 +102,2 @@\n-        String paramStr = methodType.parameterCount() != 0 ? STR.\",\\{paramExprs()}\" : \"\";\n-        appendIndentedLines(STR.\"\"\"\n+        String paramStr = methodType.parameterCount() != 0 ? String.format(\",%1$s\", paramExprs()) : \"\";\n+        appendIndentedLines(\"\"\"\n@@ -109,1 +110,1 @@\n-            public static \\{methodType.returnType().getSimpleName()} invoke(MemorySegment funcPtr\\{allocParam}\\{paramStr}) {\n+            public static %1$s invoke(MemorySegment funcPtr%2$s%3$s) {\n@@ -111,1 +112,1 @@\n-                    \\{retExpr()} DOWN$MH.invokeExact(funcPtr\\{allocArg}\\{otherArgExprs()});\n+                    %4$s DOWN$MH.invokeExact(funcPtr%5$s%6$s);\n@@ -116,1 +117,7 @@\n-            \"\"\");\n+            \"\"\",\n+            methodType.returnType().getSimpleName(),\n+            allocParam,\n+            paramStr,\n+            retExpr(),\n+            allocArg,\n+            otherArgExprs());\n@@ -143,1 +150,1 @@\n-            retExpr = STR.\"return (\\{methodType.returnType().getSimpleName()})\";\n+            retExpr = String.format(\"return (%1$s)\", methodType.returnType().getSimpleName());\n@@ -159,1 +166,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -161,1 +168,1 @@\n-            private static final FunctionDescriptor $DESC = \\{functionDescriptorString(0, funcType)};\n+            private static final FunctionDescriptor $DESC = %1$s;\n@@ -169,1 +176,1 @@\n-            \"\"\");\n+            \"\"\", functionDescriptorString(0, funcType));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -169,2 +169,2 @@\n-        String returnNoCast = isVoid ? \"\" : STR.\"return \";\n-        String returnWithCast = isVoid ? \"\" : STR.\"\\{returnNoCast}(\\{retType})\";\n+        String returnNoCast = isVoid ? \"\" : \"return \";\n+        String returnWithCast = isVoid ? \"\" : String.format(\"%1$s(%2$s)\", returnNoCast, retType);\n@@ -173,2 +173,2 @@\n-                STR.\"\\\"\\{nativeName}\\\"\" :\n-                STR.\"\\\"\\{nativeName}\\\", \\{paramList}\";\n+                String.format(\"\\\"%1$s\\\"\", nativeName) :\n+                String.format(\"\\\"%1$s\\\", %2$s\", nativeName, paramList);\n@@ -178,1 +178,1 @@\n-            appendLines(STR.\"\"\"\n+            appendLines(\"\"\"\n@@ -180,2 +180,2 @@\n-                private static class \\{holderClass} {\n-                    public static final FunctionDescriptor DESC = \\{functionDescriptorString(1, decl.type())};\n+                private static class %1$s {\n+                    public static final FunctionDescriptor DESC = %2$s;\n@@ -183,1 +183,1 @@\n-                    public static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(decl)}\");\n+                    public static final MemorySegment ADDR = %3$s.findOrThrow(\"%4$s\");\n@@ -187,1 +187,2 @@\n-                \"\"\");\n+                \"\"\", holderClass, functionDescriptorString(1, decl.type()),\n+                    runtimeHelperName(), lookupName(decl));\n@@ -190,3 +191,3 @@\n-            appendLines(STR.\"\"\"\n-                public static FunctionDescriptor \\{javaName}$descriptor() {\n-                    return \\{holderClass}.DESC;\n+            appendLines(\"\"\"\n+                public static FunctionDescriptor %1$s$descriptor() {\n+                    return %2$s.DESC;\n@@ -194,1 +195,1 @@\n-                \"\"\");\n+                \"\"\", javaName, holderClass);\n@@ -197,3 +198,3 @@\n-            appendLines(STR.\"\"\"\n-                public static MethodHandle \\{javaName}$handle() {\n-                    return \\{holderClass}.HANDLE;\n+            appendLines(\"\"\"\n+                public static MethodHandle %1$s$handle() {\n+                    return %2$s.HANDLE;\n@@ -201,1 +202,1 @@\n-                \"\"\");\n+                \"\"\", javaName, holderClass);\n@@ -204,3 +205,3 @@\n-            appendLines(STR.\"\"\"\n-                public static MemorySegment \\{javaName}$address() {\n-                    return \\{holderClass}.ADDR;\n+            appendLines(\"\"\"\n+                public static MemorySegment %1$s$address() {\n+                    return %2$s.ADDR;\n@@ -208,1 +209,1 @@\n-                \"\"\");\n+                \"\"\", javaName, holderClass);\n@@ -211,3 +212,3 @@\n-            appendLines(STR.\"\"\"\n-            public static \\{retType} \\{javaName}(\\{paramExprs(declType, finalParamNames, isVarArg)}) {\n-                var mh$ = \\{holderClass}.HANDLE;\n+            appendLines(\"\"\"\n+            public static %1$s %2$s(%3$s) {\n+                var mh$ = %4$s.HANDLE;\n@@ -216,1 +217,1 @@\n-                        traceDowncall(\\{traceArgList});\n+                        traceDowncall(%5$s);\n@@ -218,1 +219,1 @@\n-                    \\{returnWithCast}mh$.invokeExact(\\{paramList});\n+                    %6$smh$.invokeExact(%7$s);\n@@ -223,1 +224,3 @@\n-            \"\"\");\n+            \"\"\", retType, javaName,\n+            paramExprs(declType, finalParamNames, isVarArg),\n+            holderClass, traceArgList, returnWithCast, paramList);\n@@ -229,4 +232,4 @@\n-            appendLines(STR.\"\"\"\n-                public static class \\{invokerClassName} {\n-                    private static final FunctionDescriptor BASE_DESC = \\{functionDescriptorString(2, decl.type())};\n-                    private static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(decl)}\");\n+            appendLines(\"\"\"\n+                public static class %1$s {\n+                    private static final FunctionDescriptor BASE_DESC = %2$s;\n+                    private static final MemorySegment ADDR = %3$s.findOrThrow(\"%4$s\");\n@@ -238,1 +241,1 @@\n-                    private \\{invokerClassName}(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {\n+                    private %5$s(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {\n@@ -243,1 +246,2 @@\n-                \"\"\");\n+                \"\"\", invokerClassName, functionDescriptorString(2, decl.type()),\n+                    runtimeHelperName(), lookupName(decl), invokerClassName);\n@@ -247,2 +251,2 @@\n-            appendLines(STR.\"\"\"\n-                public static \\{invokerClassName} makeInvoker(MemoryLayout... layouts) {\n+            appendLines(\"\"\"\n+                public static %1$s makeInvoker(MemoryLayout... layouts) {\n@@ -253,1 +257,1 @@\n-                    return new \\{invokerClassName}(mh$, desc$, spreader$);\n+                    return new %1$s(mh$, desc$, spreader$);\n@@ -255,1 +259,1 @@\n-                \"\"\");\n+                \"\"\", invokerClassName);\n@@ -257,1 +261,1 @@\n-            appendLines(STR.\"\"\"\n+            appendLines(\"\"\"\n@@ -280,1 +284,1 @@\n-                    public \\{retType} apply(\\{paramExprs}) {\n+                    public %1$s apply(%2$s) {\n@@ -283,1 +287,1 @@\n-                                traceDowncall(\\{traceArgList});\n+                                traceDowncall(%3$s);\n@@ -285,1 +289,1 @@\n-                            \\{returnWithCast}spreader.invokeExact(\\{paramList});\n+                            %4$s spreader.invokeExact(%5$s);\n@@ -293,1 +297,1 @@\n-                \"\"\");\n+                \"\"\", retType, paramExprs, traceArgList, returnWithCast, paramList);\n@@ -318,1 +322,1 @@\n-                appendIndentedLines(STR.\"System.\\{method}(\\\"\\{lib.toQuotedName()}\\\");\");\n+                appendIndentedLines(\"System.%1$s(\\\"%2$s\\\");\", method, lib.toQuotedName());\n@@ -328,2 +332,2 @@\n-                            STR.\"SymbolLookup.libraryLookup(\\\"\\{l.toQuotedName()}\\\", LIBRARY_ARENA)\" :\n-                            STR.\"SymbolLookup.libraryLookup(System.mapLibraryName(\\\"\\{l.toQuotedName()}\\\"), LIBRARY_ARENA)\")\n+                            String.format(\"SymbolLookup.libraryLookup(\\\"%1$s\\\", LIBRARY_ARENA)\", l.toQuotedName()) :\n+                            String.format(\"SymbolLookup.libraryLookup(System.mapLibraryName(\\\"%1$s\\\"), LIBRARY_ARENA)\", l.toQuotedName()))\n@@ -340,1 +344,1 @@\n-            lookupCalls.add(isFirst ? lookup : STR.\".or(\\{lookup})\");\n+            lookupCalls.add(isFirst ? lookup : String.format(\".or(%1$s)\", lookup));\n@@ -347,1 +351,1 @@\n-                .collect(Collectors.joining(STR.\"\\n\\{indentString(2)}\", \"static final SymbolLookup SYMBOL_LOOKUP = \", \";\")));\n+                .collect(Collectors.joining(String.format(\"\\n%1$s\", indentString(2)), \"static final SymbolLookup SYMBOL_LOOKUP = \", \";\")));\n@@ -398,3 +402,3 @@\n-        appendLines(STR.\"\"\"\n-            public static \\{type.getSimpleName()} \\{javaName}() {\n-                return \\{holderClass}.SEGMENT.get(\\{holderClass}.LAYOUT, 0L);\n+        appendLines(\"\"\"\n+            public static %1$s %2$s() {\n+                return %3$s.SEGMENT.get(%3$s.LAYOUT, 0L);\n@@ -402,1 +406,1 @@\n-            \"\"\");\n+            \"\"\", type.getSimpleName(), javaName, holderClass);\n@@ -412,3 +416,3 @@\n-        appendLines(STR.\"\"\"\n-            public static void \\{javaName}(\\{type.getSimpleName()} varValue) {\n-                \\{holderClass}.SEGMENT.set(\\{holderClass}.LAYOUT, 0L, varValue);\n+        appendLines(\"\"\"\n+            public static void %1$s(%2$s varValue) {\n+                %3$s.SEGMENT.set(%3$s.LAYOUT, 0L, varValue);\n@@ -416,1 +420,1 @@\n-            \"\"\");\n+            \"\"\", javaName, type.getSimpleName(), holderClass);\n@@ -425,3 +429,3 @@\n-        appendLines(STR.\"\"\"\n-            public static MemorySegment \\{javaName}() {\n-                return \\{holderClass}.SEGMENT;\n+        appendLines(\"\"\"\n+            public static MemorySegment %1$s() {\n+                return %2$s.SEGMENT;\n@@ -429,1 +433,1 @@\n-            \"\"\");\n+            \"\"\", javaName, holderClass);\n@@ -438,3 +442,3 @@\n-        appendLines(STR.\"\"\"\n-            public static void \\{javaName}(MemorySegment varValue) {\n-                MemorySegment.copy(varValue, 0L, \\{holderClass}.SEGMENT, 0L, \\{holderClass}.LAYOUT.byteSize());\n+        appendLines(\"\"\"\n+            public static void %1$s(MemorySegment varValue) {\n+                MemorySegment.copy(varValue, 0L, %2$s.SEGMENT, 0L, %2$s.LAYOUT.byteSize());\n@@ -442,1 +446,1 @@\n-            \"\"\");\n+            \"\"\", javaName, holderClass);\n@@ -454,2 +458,2 @@\n-            appendLines(STR.\"\"\"\n-                public static MemorySegment \\{javaName}(\\{indexList.decl()}) {\n+            appendLines(\"\"\"\n+                public static MemorySegment %1$s(%2$s) {\n@@ -457,1 +461,1 @@\n-                        return (MemorySegment)\\{holderClass}.HANDLE.invokeExact(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()});\n+                        return (MemorySegment)%3$s.HANDLE.invokeExact(%3$s.SEGMENT, 0L, %4$s);\n@@ -462,1 +466,1 @@\n-                \"\"\");\n+                \"\"\", javaName, indexList.decl(), holderClass, indexList.use());\n@@ -464,3 +468,3 @@\n-            appendLines(STR.\"\"\"\n-                public static \\{typeCls.getSimpleName()} \\{javaName}(\\{indexList.decl()}) {\n-                    return (\\{typeCls.getSimpleName()})\\{holderClass}.HANDLE.get(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()});\n+            appendLines(\"\"\"\n+                public static %1$s %2$s(%3$s) {\n+                    return (%1$s)%4$s.HANDLE.get(%4$s.SEGMENT, 0L, %5$s);\n@@ -468,1 +472,2 @@\n-                \"\"\");\n+                \"\"\", typeCls.getSimpleName(), javaName, indexList.decl(),\n+                    holderClass, indexList.use());\n@@ -481,3 +486,3 @@\n-            appendLines(STR.\"\"\"\n-                public static void \\{javaName}(\\{indexList.decl()}, MemorySegment varValue) {\n-                    MemorySegment.copy(varValue, 0L, \\{javaName}(\\{indexList.use()}), 0L, \\{layoutString(elemType)}.byteSize());\n+            appendLines(\"\"\"\n+                public static void %1$s(%2$s, MemorySegment varValue) {\n+                    MemorySegment.copy(varValue, 0L, %1$s(%3$s), 0L, %4$s.byteSize());\n@@ -485,1 +490,1 @@\n-                \"\"\");\n+                \"\"\", javaName, indexList.decl(), indexList.use(), layoutString(elemType));\n@@ -487,3 +492,3 @@\n-            appendLines(STR.\"\"\"\n-                public static void \\{javaName}(\\{indexList.decl()}, \\{typeCls.getSimpleName()} varValue) {\n-                    \\{holderClass}.HANDLE.set(\\{holderClass}.SEGMENT, 0L, \\{indexList.use()}, varValue);\n+            appendLines(\"\"\"\n+                public static void %1$s(%2$s, %3$s varValue) {\n+                    %4$s.HANDLE.set(%4$s.SEGMENT, 0L, %5$s, varValue);\n@@ -491,1 +496,1 @@\n-                \"\"\");\n+                \"\"\", javaName, indexList.decl(), typeCls.getSimpleName(), holderClass, indexList.use());\n@@ -498,1 +503,1 @@\n-        String mangledName = newHolderClassName(STR.\"\\{javaName}$constants\");\n+        String mangledName = newHolderClassName(String.format(\"%1$s$constants\", javaName));\n@@ -507,3 +512,3 @@\n-                    STR.\"public static final MethodHandle HANDLE = LAYOUT.sliceHandle(\\{path});\" :\n-                    STR.\"public static final VarHandle HANDLE = LAYOUT.varHandle(\\{path});\\n\";\n-            String dimsString = dimensions.stream().map(d -> d.toString())\n+                    \"public static final MethodHandle HANDLE = LAYOUT.sliceHandle(\" + path + \");\" :\n+                    \"public static final VarHandle HANDLE = LAYOUT.varHandle(\" + path + \");\\n\";\n+            String dimsString = dimensions.stream().map(Object::toString)\n@@ -511,6 +516,6 @@\n-            appendIndentedLines(STR.\"\"\"\n-                private static class \\{mangledName} {\n-                    public static final \\{layoutType} LAYOUT = \\{layoutString(varType)};\n-                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(var)}\").reinterpret(LAYOUT.byteSize());\n-                    \\{accessHandle}\n-                    public static final long[] DIMS = { \\{dimsString} };\n+            appendIndentedLines(\"\"\"\n+                private static class %1$s {\n+                    public static final %2$s LAYOUT = %3$s;\n+                    public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n+                %6$s\n+                    public static final long[] DIMS = { %7$s };\n@@ -518,1 +523,2 @@\n-                \"\"\");\n+                \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(),\n+                    lookupName(var), accessHandle, dimsString);\n@@ -520,4 +526,4 @@\n-            appendIndentedLines(STR.\"\"\"\n-                private static class \\{mangledName} {\n-                    public static final \\{layoutType} LAYOUT = \\{layoutString(varType)};\n-                    public static final MemorySegment SEGMENT = \\{runtimeHelperName()}.findOrThrow(\"\\{lookupName(var)}\").reinterpret(LAYOUT.byteSize());\n+            appendIndentedLines(\"\"\"\n+                private static class %1$s {\n+                    public static final %2$s LAYOUT = %3$s;\n+                    public static final MemorySegment SEGMENT = %4$s.findOrThrow(\"%5$s\").reinterpret(LAYOUT.byteSize());\n@@ -525,1 +531,1 @@\n-                \"\"\");\n+                \"\"\", mangledName, layoutType, layoutString(varType), runtimeHelperName(), lookupName(var));\n@@ -530,3 +536,3 @@\n-        appendLines(STR.\"\"\"\n-                public static \\{layoutType} \\{javaName}$layout() {\n-                    return \\{mangledName}.LAYOUT;\n+        appendLines(\"\"\"\n+                public static %1$s %2$s$layout() {\n+                    return %3$s.LAYOUT;\n@@ -534,1 +540,1 @@\n-                \"\"\");\n+                \"\"\", layoutType, javaName, mangledName);\n@@ -538,3 +544,3 @@\n-            appendLines(STR.\"\"\"\n-                    public static MemorySegment \\{javaName}$segment() {\n-                        return \\{mangledName}.SEGMENT;\n+            appendLines(\"\"\"\n+                    public static MemorySegment %1$s$segment() {\n+                        return %2$s.SEGMENT;\n@@ -542,1 +548,1 @@\n-                    \"\"\");\n+                    \"\"\", javaName, mangledName);\n@@ -547,3 +553,3 @@\n-            appendLines(STR.\"\"\"\n-                public static long[] \\{javaName}$dimensions() {\n-                    return \\{mangledName}.DIMS;\n+            appendLines(\"\"\"\n+                public static long[] %1$s$dimensions() {\n+                    return %2$s.DIMS;\n@@ -551,1 +557,1 @@\n-                \"\"\");\n+                \"\"\", javaName, mangledName);\n@@ -561,2 +567,2 @@\n-            appendLines(STR.\"\"\"\n-                public static \\{javaType.getSimpleName()} \\{constantName}() {\n+            appendLines(\"\"\"\n+                public static %1$s %2$s() {\n@@ -564,2 +570,2 @@\n-                        static final \\{javaType.getSimpleName()} \\{constantName}\n-                            = \\{runtimeHelperName()}.LIBRARY_ARENA.allocateFrom(\"\\{Utils.quote(Objects.toString(value))}\");\n+                        static final %1$s %2$s\n+                            = %3$s.LIBRARY_ARENA.allocateFrom(\"%4$s\");\n@@ -567,1 +573,1 @@\n-                    return Holder.\\{constantName};\n+                    return Holder.%2$s;\n@@ -569,1 +575,5 @@\n-                \"\"\");\n+                \"\"\",\n+                javaType.getSimpleName(),\n+                constantName,\n+                runtimeHelperName(),\n+                Utils.quote(Objects.toString(value)));\n@@ -571,3 +581,6 @@\n-            appendLines(STR.\"\"\"\n-                private static final \\{javaType.getSimpleName()} \\{constantName} = \\{constantValue(javaType, value)};\n-                \"\"\");\n+            appendLines(\"\"\"\n+                private static final %1$s %2$s = %3$s;\n+                \"\"\",\n+                javaType.getSimpleName(),\n+                constantName,\n+                constantValue(javaType, value));\n@@ -575,3 +588,3 @@\n-            appendLines(STR.\"\"\"\n-                public static \\{javaType.getSimpleName()} \\{constantName}() {\n-                    return \\{constantName};\n+            appendLines(\"\"\"\n+                public static %1$s %2$s() {\n+                    return %2$s;\n@@ -579,1 +592,3 @@\n-                \"\"\");\n+                \"\"\",\n+                javaType.getSimpleName(),\n+                constantName);\n@@ -586,1 +601,1 @@\n-            return STR.\"MemorySegment.ofAddress(\\{((Number)value).longValue()}L)\";\n+            return String.format(\"MemorySegment.ofAddress(%1$dL)\", ((Number)value).longValue());\n@@ -619,1 +634,1 @@\n-                throw new IllegalArgumentException(STR.\"Unhandled type: \\{type}, or value: \\{value}\");\n+                throw new IllegalArgumentException(String.format(\"Unhandled type: %1$s, or value: %2$s\", type, value));\n@@ -628,3 +643,3 @@\n-        appendLines(STR.\"\"\"\n-        public static final \\{Utils.layoutCarrierFor(type).getSimpleName()} \\{javaName} = \\{layoutString(type)};\n-        \"\"\");\n+        appendLines(\"\"\"\n+        public static final %1$s %2$s = %3$s;\n+        \"\"\", Utils.layoutCarrierFor(type).getSimpleName(), javaName, layoutString(type));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":140,"deletions":125,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        errWriter.println(STR.\"ERROR: \\{format(key, args)}\");\n+        errWriter.println(String.format(\"ERROR: %1$s\", format(key, args)));\n@@ -59,1 +59,1 @@\n-        errWriter.println(STR.\"WARNING: \\{format(key, args)}\");\n+        errWriter.println(String.format(\"WARNING: %1$s\", format(key, args)));\n@@ -73,1 +73,1 @@\n-        errWriter.println(STR.\"FATAL: \\{format(msg, args)}\");\n+        errWriter.println(String.format(\"FATAL: %1$s\", format(msg, args)));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Logger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,2 +177,2 @@\n-                    STR.\"<error: \\{((TypeImpl.ErronrousTypeImpl)t).erroneousName}>\" :\n-                    STR.\"<unknown: \\{t.getClass().getName()}>\";\n+                    String.format(\"<error: %1$s>\", ((TypeImpl.ErronrousTypeImpl) t).erroneousName) :\n+                    String.format(\"<unknown: %1$s>\", t.getClass().getName());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/PrettyPrinter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-        appendLines(STR.\"\"\"\n-            \/\/ Generated by jextract\\{SHOW_GENERATING_CLASS ? STR.\" (via \\{getClass().getName()})\" : \"\"}\n+        appendLines(String.format(\"\"\"\n+            \/\/ Generated by jextract%1$s\n@@ -64,1 +64,1 @@\n-            \"\"\");\n+            \"\"\", SHOW_GENERATING_CLASS ? String.format(\" (via %2$s)\", getClass().getName()) : \"\"));\n@@ -66,2 +66,2 @@\n-            appendLines(STR.\"\"\"\n-                package \\{packageName};\n+            appendLines(String.format(\"\"\"\n+                package %1$s;\n@@ -69,1 +69,1 @@\n-                \"\"\");\n+                \"\"\", packageName));\n@@ -99,1 +99,1 @@\n-        return new JavaSourceFile(STR.\"\\{className}\\{suffix}\", packageName, finisher.apply(sb.toString()));\n+        return new JavaSourceFile(String.format(\"%1$s%2$s\", className, suffix), packageName, finisher.apply(sb.toString()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-            throw new IllegalArgumentException(STR.\"Type not supported: \\{varTree.type()}\");\n+            throw new IllegalArgumentException(String.format(\"Type not supported: %1$s\", varTree.type()));\n@@ -191,3 +191,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static \\{type.getSimpleName()} \\{javaName}(MemorySegment \\{segmentParam}) {\n-                return \\{segmentParam}.get(\\{layoutField}, \\{offsetField});\n+        appendIndentedLines(\"\"\"\n+            public static %1$s %2$s(MemorySegment %3$s) {\n+                return %3$s.get(%4$s, %5$s);\n@@ -195,1 +195,1 @@\n-            \"\"\");\n+            \"\"\", type.getSimpleName(), javaName, segmentParam, layoutField, offsetField);\n@@ -204,3 +204,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static void \\{javaName}(MemorySegment \\{segmentParam}, \\{type.getSimpleName()} \\{valueParam}) {\n-                \\{segmentParam}.set(\\{layoutField}, \\{offsetField}, \\{valueParam});\n+        appendIndentedLines(\"\"\"\n+            public static void %1$s(MemorySegment %2$s, %3$s %4$s) {\n+                %2$s.set(%5$s, %6$s, %4$s);\n@@ -208,1 +208,1 @@\n-            \"\"\");\n+            \"\"\", javaName, segmentParam, type.getSimpleName(), valueParam, layoutField, offsetField);\n@@ -215,3 +215,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static MemorySegment \\{javaName}(MemorySegment \\{segmentParam}) {\n-                return \\{segmentParam}.asSlice(\\{offsetField}, \\{layoutField}.byteSize());\n+        appendIndentedLines(\"\"\"\n+            public static MemorySegment %1$s(MemorySegment %2$s) {\n+                return %2$s.asSlice(%3$s, %4$s.byteSize());\n@@ -219,1 +219,2 @@\n-            \"\"\");\n+            \"\"\",\n+            javaName, segmentParam, offsetField, layoutField);\n@@ -227,3 +228,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static void \\{javaName}(MemorySegment \\{segmentParam}, MemorySegment \\{valueParam}) {\n-                MemorySegment.copy(\\{valueParam}, 0L, \\{segmentParam}, \\{offsetField}, \\{layoutField}.byteSize());\n+        appendIndentedLines(\"\"\"\n+            public static void %1$s(MemorySegment %2$s, MemorySegment %3$s) {\n+                MemorySegment.copy(%3$s, 0L, %2$s, %4$s, %5$s.byteSize());\n@@ -231,1 +232,1 @@\n-            \"\"\");\n+            \"\"\", javaName, segmentParam, valueParam, offsetField, layoutField);\n@@ -235,1 +236,1 @@\n-        String arrayHandleName = STR.\"\\{javaName}$ELEM_HANDLE\";\n+        String arrayHandleName = String.format(\"%1$s$ELEM_HANDLE\", javaName);\n@@ -241,3 +242,3 @@\n-            appendIndentedLines(STR.\"\"\"\n-                private static final MethodHandle \\{arrayHandleName} = \\{fieldLayoutName}.sliceHandle(\\{path});\n-                \"\"\");\n+            appendIndentedLines(\"\"\"\n+                private static final MethodHandle %1$s = %2$s.sliceHandle(%3$s);\n+                \"\"\", arrayHandleName, fieldLayoutName, path);\n@@ -245,3 +246,3 @@\n-            appendIndentedLines(STR.\"\"\"\n-                private static final VarHandle \\{arrayHandleName} = \\{fieldLayoutName}.varHandle(\\{path});\n-                \"\"\");\n+            appendIndentedLines(\"\"\"\n+                private static final VarHandle %1$s = %2$s.varHandle(%3$s);\n+                \"\"\", arrayHandleName, fieldLayoutName, path);\n@@ -259,2 +260,2 @@\n-            appendIndentedLines(STR.\"\"\"\n-                public static MemorySegment \\{javaName}(MemorySegment \\{segmentParam}, \\{indexList.decl()}) {\n+            appendIndentedLines(\"\"\"\n+                public static MemorySegment %1$s(MemorySegment %2$s, %3$s) {\n@@ -262,1 +263,1 @@\n-                        return (MemorySegment)\\{arrayElementHandle}.invokeExact(\\{segmentParam}, 0L, \\{indexList.use()});\n+                        return (MemorySegment)%4$s.invokeExact(%2$s, 0L, %5$s);\n@@ -267,1 +268,1 @@\n-                \"\"\");\n+                \"\"\", javaName, segmentParam, indexList.decl(), arrayElementHandle, indexList.use());\n@@ -269,3 +270,3 @@\n-            appendIndentedLines(STR.\"\"\"\n-                public static \\{elemTypeCls.getSimpleName()} \\{javaName}(MemorySegment \\{segmentParam}, \\{indexList.decl()}) {\n-                    return (\\{elemTypeCls.getSimpleName()})\\{arrayElementHandle}.get(\\{segmentParam}, 0L, \\{indexList.use()});\n+            appendIndentedLines(\"\"\"\n+                public static %1$s %2$s(MemorySegment %3$s, %4$s) {\n+                    return (%1$s)%5$s.get(%3$s, 0L, %6$s);\n@@ -273,1 +274,2 @@\n-                \"\"\");\n+                \"\"\", elemTypeCls.getSimpleName(), javaName, segmentParam\n+                   ,indexList.decl(), arrayElementHandle, indexList.use());\n@@ -285,3 +287,3 @@\n-            appendIndentedLines(STR.\"\"\"\n-                public static void \\{javaName}(MemorySegment \\{segmentParam}, \\{indexList.decl()}, MemorySegment \\{valueParam}) {\n-                    MemorySegment.copy(\\{valueParam}, 0L, \\{javaName}(\\{segmentParam}, \\{indexList.use()}), 0L, \\{layoutString(elemType)}.byteSize());\n+            appendIndentedLines(\"\"\"\n+                public static void %1$s(MemorySegment %2$s, %3$s, MemorySegment %4$s) {\n+                    MemorySegment.copy(%4$s, 0L, %1$s(%2$s, %5$s), 0L, %6$s.byteSize());\n@@ -289,1 +291,2 @@\n-                \"\"\");\n+                \"\"\", javaName, segmentParam, indexList.decl()\n+                   ,valueParam, indexList.use(), layoutString(elemType));\n@@ -291,3 +294,3 @@\n-            appendIndentedLines(STR.\"\"\"\n-                public static void \\{javaName}(MemorySegment \\{segmentParam}, \\{indexList.decl()}, \\{elemTypeCls.getSimpleName()} \\{valueParam}) {\n-                    \\{arrayElementHandle}.set(\\{segmentParam}, 0L, \\{indexList.use()}, \\{valueParam});\n+            appendIndentedLines(\"\"\"\n+                public static void %1$s(MemorySegment %2$s, %3$s, %4$s %5$s) {\n+                    %6$s.set(%2$s, 0L, %7$s, %5$s);\n@@ -295,1 +298,2 @@\n-                \"\"\");\n+                \"\"\", javaName, segmentParam, indexList.decl(), elemTypeCls.getSimpleName()\n+                   ,valueParam, arrayElementHandle, indexList.use());\n@@ -301,1 +305,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -307,2 +311,2 @@\n-            public static MemorySegment asSlice(MemorySegment \\{arrayParam}, long index) {\n-                return \\{arrayParam}.asSlice(layout().byteSize() * index);\n+            public static MemorySegment asSlice(MemorySegment %1$s, long index) {\n+                return %1$s.asSlice(layout().byteSize() * index);\n@@ -310,1 +314,1 @@\n-            \"\"\");\n+            \"\"\", arrayParam);\n@@ -314,2 +318,1 @@\n-        appendIndentedLines(STR.\"\"\"\n-\n+        appendIndentedLines(\"\"\"\n@@ -317,1 +320,1 @@\n-             * The size (in bytes) of this \\{kindName()}\n+             * The size (in bytes) of this %1$s\n@@ -320,1 +323,1 @@\n-            \"\"\");\n+            \"\"\", kindName());\n@@ -325,1 +328,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -328,1 +331,1 @@\n-             * Allocate a segment of size {@code layout().byteSize()} using {@code \\{allocatorParam}}\n+             * Allocate a segment of size {@code layout().byteSize()} using {@code %1$s}}\n@@ -330,2 +333,2 @@\n-            public static MemorySegment allocate(SegmentAllocator \\{allocatorParam}) {\n-                return \\{allocatorParam}.allocate(layout());\n+            public static MemorySegment allocate(SegmentAllocator %1$s) {\n+                return %1$s.allocate(layout());\n@@ -333,1 +336,1 @@\n-            \"\"\");\n+            \"\"\", allocatorParam);\n@@ -339,1 +342,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -342,2 +345,2 @@\n-             * Allocate an array of size {@code \\{elementCountParam}} using {@code \\{allocatorParam}}.\n-             * The returned segment has size {@code \\{elementCountParam} * layout().byteSize()}.\n+             * Allocate an array of size {@code %1$s} using {@code %2$s}.\n+             * The returned segment has size {@code %1$s * layout().byteSize()}.\n@@ -345,2 +348,2 @@\n-            public static MemorySegment allocateArray(long \\{elementCountParam}, SegmentAllocator \\{allocatorParam}) {\n-                return \\{allocatorParam}.allocate(MemoryLayout.sequenceLayout(\\{elementCountParam}, layout()));\n+            public static MemorySegment allocateArray(long %1$s, SegmentAllocator %2$s) {\n+                return %2$s.allocate(MemoryLayout.sequenceLayout(%1$s, layout()));\n@@ -348,1 +351,1 @@\n-            \"\"\");\n+            \"\"\", elementCountParam, allocatorParam);\n@@ -373,1 +376,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -375,1 +378,1 @@\n-            private static final GroupLayout $LAYOUT = \\{structOrUnionLayoutString(structType)};\n+            private static final GroupLayout $LAYOUT = %1$s;\n@@ -378,1 +381,1 @@\n-             * The layout of this \\{kindName()}\n+             * The layout of this %2$s\n@@ -383,1 +386,1 @@\n-            \"\"\");\n+            \"\"\", structOrUnionLayoutString(structType), kindName());\n@@ -387,4 +390,5 @@\n-        String offsetFieldName = STR.\"\\{javaName}$OFFSET\";\n-        appendIndentedLines(STR.\"\"\"\n-            private static final long \\{offsetFieldName} = \\{ClangOffsetOf.getOrThrow(field) \/ 8};\n-            \"\"\");\n+        String offsetFieldName = javaName + \"$OFFSET\";\n+        appendIndentedLines(String.format(\"\"\"\n+            private static final long %1$s = %2$d;\n+            \"\"\",\n+            offsetFieldName, ClangOffsetOf.getOrThrow(field) \/ 8));\n@@ -393,3 +397,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static final long \\{javaName}$offset() {\n-                return \\{offsetFieldName};\n+        appendIndentedLines(\"\"\"\n+            public static final long %1$s$offset() {\n+                return %2$s;\n@@ -397,1 +401,1 @@\n-            \"\"\");\n+            \"\"\", javaName, offsetFieldName);\n@@ -402,1 +406,1 @@\n-        String layoutFieldName = STR.\"\\{javaName}$LAYOUT\";\n+        String layoutFieldName = javaName + \"$LAYOUT\";\n@@ -404,3 +408,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            private static final \\{layoutType} \\{layoutFieldName} = (\\{layoutType})$LAYOUT.select(\\{fieldElementPaths(field.name())});\n-            \"\"\");\n+        appendIndentedLines(\"\"\"\n+            private static final %1$s %2$s = (%1$s)$LAYOUT.select(%3$s);\n+            \"\"\", layoutType, layoutFieldName, fieldElementPaths(field.name()));\n@@ -409,3 +413,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static final \\{layoutType} \\{javaName}$layout() {\n-                return \\{layoutFieldName};\n+        appendIndentedLines(\"\"\"\n+            public static final %1$s %2$s$layout() {\n+                return %3$s;\n@@ -413,1 +417,1 @@\n-            \"\"\");\n+            \"\"\", layoutType, javaName, layoutFieldName);\n@@ -418,1 +422,1 @@\n-        String dimsFieldName = STR.\"\\{javaName}$DIMS\";\n+        String dimsFieldName = javaName + \"$DIMS\";\n@@ -420,1 +424,1 @@\n-        String dimsString = dimensions.stream().map(d -> d.toString())\n+        String dimsString = dimensions.stream().map(Object::toString)\n@@ -422,1 +426,1 @@\n-        appendIndentedLines(STR.\"\"\"\n+        appendIndentedLines(\"\"\"\n@@ -424,2 +428,2 @@\n-            private static long[] \\{dimsFieldName} = { \\{dimsString} };\n-            \"\"\");\n+            private static long[] %1$s = { %2$s };\n+            \"\"\", dimsFieldName, dimsString);\n@@ -428,3 +432,3 @@\n-        appendIndentedLines(STR.\"\"\"\n-            public static long[] \\{javaName}$dimensions() {\n-                return \\{dimsFieldName};\n+        appendIndentedLines(\"\"\"\n+            public static long[] %1$s$dimensions() {\n+                return %2$s;\n@@ -432,1 +436,1 @@\n-            \"\"\");\n+            \"\"\", javaName, dimsFieldName);\n@@ -474,1 +478,1 @@\n-                    memberLayout = STR.\"\\{indentString(indent + 1)}\\{memberLayout}.withName(\\\"\\{member.name()}\\\")\";\n+                    memberLayout = String.format(\"%1$s%2$s.withName(\\\"%3$s\\\")\", indentString(indent + 1), memberLayout, member.name());\n@@ -499,3 +503,3 @@\n-                STR.\"\\{indentString(indent)}MemoryLayout.structLayout(\\n\" :\n-                STR.\"\\{indentString(indent)}MemoryLayout.unionLayout(\\n\";\n-        String suffix = STR.\"\\n\\{indentString(indent)})\";\n+                String.format(\"%1$sMemoryLayout.structLayout(\\n\", indentString(indent)) :\n+                String.format(\"%1$sMemoryLayout.unionLayout(\\n\", indentString(indent));\n+        String suffix = String.format(\"\\n%1$s)\", indentString(indent));\n@@ -508,1 +512,1 @@\n-        return STR.\"\\{layoutString}.withName(\\\"\\{name}\\\")\";\n+        return String.format(\"%1$s.withName(\\\"%2$s\\\")\", layoutString, name);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":97,"deletions":93,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        HeaderFileBuilder first = new HeaderFileBuilder(sfb, STR.\"\\{sfb.className()}#{SUFFIX}\", null, sfb.className());\n+        HeaderFileBuilder first = new HeaderFileBuilder(sfb, String.format(\"%1$s#{SUFFIX}\",sfb.className()), null, sfb.className());\n@@ -67,1 +67,1 @@\n-        first.appendIndentedLines(STR.\"\"\"\n+        first.appendIndentedLines(\"\"\"\n@@ -102,2 +102,2 @@\n-                        STR.\"_\\{suffix}\";\n-                String prevSuffix = STR.\"_\\{suffix + 1}\";\n+                        String.format(\"_%1$d\", suffix);\n+                String prevSuffix = String.format(\"_%1$d\", suffix + 1);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-            valueString = STR.\"\\\"\\{valueString}\\\"\";\n+            valueString = String.format(\"\\\"%1$s\\\"\", valueString);\n@@ -238,1 +238,1 @@\n-            valueString = STR.\"(void*) \\{valueString}\";\n+            valueString = String.format(\"(void*) %1$s\", valueString);\n@@ -240,1 +240,1 @@\n-        DeclarationString.with(macro, STR.\"#define \\{name} \\{valueString}\");\n+        DeclarationString.with(macro, String.format(\"#define %1$s %2$s\", name, valueString));\n@@ -533,1 +533,1 @@\n-        return STR.\"enum \\{enumName}.\\{enumConstant.name()} = \\{enumConstant.value()}\";\n+        return String.format(\"enum %1$s.%2$s = %3$s\", enumName, enumConstant.name(), enumConstant.value());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}