{"files":[{"patch":"@@ -506,1 +506,1 @@\n-            logger.err(\"jextract.clang.error\", ce.getMessage());\n+            logger.print(ce);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import org.openjdk.jextract.Position;\n+import org.openjdk.jextract.clang.Diagnostic;\n+\n@@ -31,2 +34,21 @@\n-    public ClangException(String message) {\n-        super(message);\n+    private final Position position;\n+    private final int severity;\n+    private final String spelling;\n+\n+    public ClangException(Position pos, int severity, String spelling) {\n+        super(spelling);\n+        this.position = pos;\n+        this.severity = severity;\n+        this.spelling = spelling;\n+    }\n+\n+    public Position position() {\n+        return position;\n+    }\n+\n+    public int severity() {\n+        return severity;\n+    }\n+\n+    public String spelling() {\n+        return spelling;\n@@ -35,2 +57,2 @@\n-    public ClangException(String message, Throwable cause) {\n-        super(message, cause);\n+    public boolean isError() {\n+        return severity == Diagnostic.CXDiagnostic_Error;\n@@ -39,2 +61,2 @@\n-    public ClangException(Throwable cause) {\n-        super(cause);\n+    public boolean isFatal() {\n+        return severity == Diagnostic.CXDiagnostic_Fatal;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClangException.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jextract.Position;\n@@ -53,0 +54,8 @@\n+    public void print(ClangException exp) {\n+        errWriter.println(String.format(\"%1$s: %2$s: %3$s\",\n+            position(exp.position()),\n+            exp.isFatal()? \"fatal\" : \"error\",\n+            exp.spelling()));\n+        nErrors++;\n+    }\n+\n@@ -54,1 +63,8 @@\n-        errWriter.println(String.format(\"ERROR: %1$s\", format(key, args)));\n+        err(Position.NO_POSITION, key, args);\n+    }\n+\n+    public void err(Position pos, String key, Object... args) {\n+        String msg = Position.NO_POSITION.equals(pos) ?\n+            String.format(\"error: %1$s\", format(key, args)) :\n+            String.format(\"%1$s: error: %2$s\", position(pos), format(key, args));\n+        errWriter.println(msg);\n@@ -59,1 +75,8 @@\n-        errWriter.println(String.format(\"WARNING: %1$s\", format(key, args)));\n+        warn(Position.NO_POSITION, key, args);\n+    }\n+\n+    public void warn(Position pos, String key, Object... args) {\n+        String msg = Position.NO_POSITION.equals(pos) ?\n+            String.format(\"warning: %1$s\", format(key, args)) :\n+            String.format(\"%1$s: warning: %2$s\", position(pos), format(key, args));\n+        errWriter.println(msg);\n@@ -64,2 +87,11 @@\n-        errWriter.println(format(key, args));\n-        nWarnings++;\n+        info(Position.NO_POSITION, key, args);\n+    }\n+\n+    public void info(Position pos, String key, Object... args) {\n+        String msg = Position.NO_POSITION.equals(pos) ?\n+            format(key, args) : position(pos) + \": \" + format(key, args);\n+        errWriter.println(msg);\n+    }\n+\n+    private String position(Position pos) {\n+        return pos.path().getFileName().toString() + \":\" + pos.line() + \":\" + pos.col();\n@@ -73,1 +105,1 @@\n-        errWriter.println(String.format(\"FATAL: %1$s\", format(msg, args)));\n+        errWriter.println(String.format(\"fatal: %1$s\", format(msg, args)));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Logger.java","additions":37,"deletions":5,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-                logger.err(\"jextract.bad.include\", decl.name(), declared.tree().name());\n+                logger.err(decl.pos(), \"jextract.bad.include\", decl.name(), declared.tree().name());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/MissingDepChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jextract.Position;\n@@ -102,1 +103,4 @@\n-                        throw new ClangException(d.toString());\n+                        throw new ClangException(\n+                            asPosition(d.location().getSpellingLocation()),\n+                            d.severity(),\n+                            d.spelling());\n@@ -111,0 +115,6 @@\n+    record PositionRecord(Path path, int line, int col) implements Position {}\n+\n+    private Position asPosition(SourceLocation.Location loc) {\n+        return new PositionRecord(loc.path(), loc.line(), loc.column());\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Parser.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.jextract.Position;\n@@ -77,1 +78,1 @@\n-            warnSkip(funcTree.name(), unsupportedType(unsupportedType));\n+            warnSkip(funcTree.pos(), funcTree.name(), unsupportedType(unsupportedType));\n@@ -115,1 +116,1 @@\n-            warnSkip(name, unsupportedType(unsupportedType));\n+            warnSkip(varTree.pos(), name, unsupportedType(unsupportedType));\n@@ -135,1 +136,1 @@\n-            warnSkip(scoped.name(), unsupportedType(unsupportedType));\n+            warnSkip(scoped.pos(), scoped.name(), unsupportedType(unsupportedType));\n@@ -143,1 +144,1 @@\n-                    warnSkip(fieldName(firstNamedParent, bitField), unsupportedBitfield());\n+                    warnSkip(scoped.pos(), fieldName(firstNamedParent, bitField), unsupportedBitfield());\n@@ -169,1 +170,1 @@\n-            warnSkip(typedefTree.name(), unsupportedType(unsupportedType));\n+            warnSkip(typedefTree.pos(), typedefTree.name(), unsupportedType(unsupportedType));\n@@ -188,1 +189,1 @@\n-            warnSkip(name, unsupportedType(unsupportedType));\n+            warnSkip(d.pos(), name, unsupportedType(unsupportedType));\n@@ -204,1 +205,1 @@\n-            warnSkip(nameOfSkipped, unsupportedType(unsupportedType));\n+            warnSkip(decl.pos(), nameOfSkipped, unsupportedType(unsupportedType));\n@@ -209,1 +210,1 @@\n-            warnSkip(nameOfSkipped, unsupportedVariadicCallback(decl.name()));\n+            warnSkip(decl.pos(), nameOfSkipped, unsupportedVariadicCallback(decl.name()));\n@@ -284,2 +285,2 @@\n-    private void warnSkip(String treeName, String message) {\n-        logger.warn(\"jextract.skip.unsupported\", treeName, message);\n+    private void warnSkip(Position pos, String treeName, String message) {\n+        logger.warn(pos, \"jextract.skip.unsupported\", treeName, message);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnsupportedFilter.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -99,3 +99,0 @@\n-jextract.clang.error=\\\n-{0}\n-\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        result.checkContainsOutput(\"ERROR: \" + badDeclName + \" depends on \" + missingDepName);\n+        result.checkContainsOutput(\"error: \" + badDeclName + \" depends on \" + missingDepName);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/includeDeps\/TestBadIncludes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        result.checkContainsOutput(\"ERROR: \" + badDeclName + \" depends on \" + missingDepName);\n+        result.checkContainsOutput(\"error: \" + badDeclName + \" depends on \" + missingDepName);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/includeDeps\/TestNestedBadIncludes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        result.checkContainsOutput(\"WARNING: Skipping \" + skippedName + \" (\" + reason);\n+        result.checkContainsOutput(\"warning: Skipping \" + skippedName + \" (\" + reason);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/unsupported\/TestUnsupportedTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}