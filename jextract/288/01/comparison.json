{"files":[{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *   - Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *   - Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and\/or other materials provided with the distribution.\n+ *\n+ *   - Neither the name of Oracle nor the names of its\n+ *     contributors may be used to endorse or promote products derived\n+ *     from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+ * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.stream.Stream;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+\n+\/**\n+ * Scans a directory of compiled client class files and lists all native\n+ * symbols referenced and writes the sorted, unique list of symbols into an output file.\n+ * Requires JDK 24+ (java.lang.classfile API).\n+ *\n+ * Usage:\n+ *   java --enable-preview NativeSymbolLister <clientClasses-dir> <output-file>\n+ *\/\n+public class NativeSymbolLister {\n+    public static void main(String[] args) throws IOException {\n+        if (args.length != 2) {\n+            System.err.println(\"Usage: java NativeSymbolLister <clientClasses-dir> <output-file>\");\n+            System.exit(1);\n+        }\n+        Path dir = Paths.get(args[0]);\n+        Path output = Paths.get(args[1]);\n+        if (!Files.isDirectory(dir)) {\n+            System.err.println(\"Not a directory: \" + dir);\n+            System.exit(1);\n+        }\n+\n+        Set<String> symbols = new TreeSet<>();\n+        try (Stream<Path> paths = Files.walk(dir)) {\n+            paths.filter(p -> p.toString().endsWith(\".class\"))\n+                    .forEach(p -> {\n+                        try {\n+                            byte[] bytes = Files.readAllBytes(p);\n+                            symbols.addAll(extractSymbols(bytes));\n+                        } catch (IOException e) {\n+                            System.err.println(\"Failed to read \" + p + \": \" + e.getMessage());\n+                        }\n+                    });\n+        }\n+\n+        try (BufferedWriter writer = Files.newBufferedWriter(output, StandardCharsets.UTF_8)) {\n+            for (String sym : symbols) {\n+                writer.write(sym);\n+                writer.newLine();\n+            }\n+        }\n+\n+        System.out.println(\"Symbols written to \" + output + \" (\" + symbols.size() + \" entries)\");\n+    }\n+\n+    private static Set<String> extractSymbols(byte[] classBytes) {\n+        Set<String> set = new HashSet<>();\n+        ClassModel cm = ClassFile.of().parse(classBytes);\n+        cm.elementStream()\n+                .flatMap(ce -> ce instanceof MethodModel mm\n+                        ? mm.elementStream()\n+                        .flatMap(me -> me instanceof CodeModel code\n+                                ? code.elementStream()\n+                                : Stream.empty())\n+                        : Stream.empty())\n+                .forEach(elem -> {\n+                    if (elem instanceof InvokeInstruction inv) {\n+                        String name = inv.name().stringValue();\n+                        if (!\"<init>\".equals(name) && !\"<clinit>\".equals(name)) {\n+                            set.add(name);\n+                        }\n+                    } else if (elem instanceof FieldInstruction fld) {\n+                        set.add(fld.name().stringValue());\n+                    }\n+                });\n+        return set;\n+    }\n+}\n","filename":"samples\/opengl-minimal-bidings\/NativeSymbolLister.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+# jextract symbol filtering sample\n+\n+This sample demonstrates how to analyze compiled client code to discover which native symbols are actually used.  \n+The workflow is:\n+\n+1. Run `jextract` to dump all includes.\n+2. Compile and run `NativeSymbolLister` on your client classes to collect referenced symbols.\n+3. Filter the includes file.\n+4. Re-run `jextract` to generate a much smaller binding set.\n+\n+## Notes on Windows\n+\n+This sample requires freeglut as a dependency. On Windows the freeglut package that comes with MinGW is know not to work,\n+because clang (which jextract uses under the hood) doesn't seem to understand MinGW builtins found in the MinGW standard library header files.\n+\n+The sample has been tested against the freeglut MSVC package found here: https:\/\/www.transmissionzero.co.uk\/software\/freeglut-devel\/\n+\n+On top of that, the code in Teapot.java has to be changed to account for different parameter names in the Windows freeglut headers:\n+\n+```\n+diff --git a\/opengl\/Teapot.java b\/opengl\/Teapot.java\n+index 22d1f44..d5eb786 100644\n+--- a\/opengl\/Teapot.java\n++++ b\/opengl\/Teapot.java\n+@@ -79,8 +79,8 @@ public class Teapot {\n+             glutInitWindowSize(500, 500);\n+             glutCreateWindow(allocator.allocateUtf8String(\"Hello Panama!\"));\n+             var teapot = new Teapot(allocator);\n+-            var displayStub = glutDisplayFunc$func.allocate(teapot::display, scope);\n+-            var idleStub = glutIdleFunc$func.allocate(teapot::onIdle, scope);\n++            var displayStub = glutDisplayFunc$callback.allocate(teapot::display, scope);\n++            var idleStub = glutIdleFunc$callback.allocate(teapot::onIdle, scope);\n+             glutDisplayFunc(displayStub);\n+             glutIdleFunc(idleStub);\n+             glutMainLoop();\n+```\n","filename":"samples\/opengl-minimal-bidings\/README.md","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,2 @@\n-            glutInit(argc, argc);\n+            var argv = arena.allocate(C_POINTER);\n+            glutInit(argc, argv);\n","filename":"samples\/opengl-minimal-bidings\/Teapot.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"samples\/opengl\/Teapot.java","status":"copied"},{"patch":"","filename":"samples\/opengl-minimal-bidings\/compile_windows.ps1","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"samples\/opengl\/compile_windows.ps1","status":"copied"},{"patch":"@@ -0,0 +1,35 @@\n+jextract --dump-includes includes.txt \\\n+  -t opengl \\\n+  --framework GLUT \\\n+  --framework OpenGL \\\n+  \"<GLUT\/glut.h>\"\n+\n+jextract -t opengl \\\n+  --framework GLUT \\\n+  --framework OpenGL \\\n+  \"<GLUT\/glut.h>\"\n+\n+javac --release 24 \\\n+      -d target\/generatedclasses \\\n+      opengl\/*.java\n+\n+javac --release 24 \\\n+      -cp target\/generatedclasses \\\n+      -d target\/clientClasses \\\n+      Teapot.java\n+\n+java --enable-preview \\\n+      --source 24 \\\n+      NativeSymbolLister.java \\\n+      target\/clientClasses \\\n+      used.txt\n+\n+grep -Ff used.txt includes.txt > includes-filtered.txt\n+\n+rm -rf target opengl\n+\n+jextract @includes-filtered.txt -t opengl --framework GLUT \\\n+  --framework OpenGL \\\n+  \"<GLUT\/glut.h>\"\n+\n+javac --source=24 -d . opengl\/*.java\n","filename":"samples\/opengl-minimal-bidings\/compilesource.sh","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"","filename":"samples\/opengl-minimal-bidings\/run.sh","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"samples\/opengl\/run.sh","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,2 @@\n-            glutInit(argc, argc);\n+            var argv = arena.allocate(C_POINTER);\n+            glutInit(argc, argv);\n","filename":"samples\/opengl\/Teapot.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}