{"files":[{"patch":"@@ -84,1 +84,2 @@\n-| `-l, --library <name \\| path>`                               | specify a library by platform-independent name (e.g. \"GL\") or by absolute path (\"\/usr\/lib\/libGL.so\") that will be loaded by the generated class. |\n+| `-l, --library <name \\| path>`                               | specify a shared library that should be loaded by the generated header class. If <libspec> starts with `:`, then what follows is interpreted as a library path. Otherwise, `<libspec>` denotes a library name. Examples: <br>`-l GL`<br>`-l :libGL.so.1`<br>`-l :\/usr\/lib\/libGL.so.1`|\n+| `--use-system-load-library`                                  | libraries specified using `-l` are loaded in the loader symbol lookup (using either `System::loadLibrary`, or `System::load`). Useful if the libraries must be loaded from one of the paths in `java.library.path`.| \n","filename":"README.md","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.jextract.impl.Options.Library;\n@@ -40,1 +41,0 @@\n-import java.io.File;\n@@ -123,2 +123,3 @@\n-                                                String targetPkg, List<String> libNames, PrintWriter errStream) {\n-        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libNames, errStream));\n+                                                String targetPkg, List<Options.Library> libs,\n+                                                boolean useSystemLoadLibrary, PrintWriter errStream) {\n+        return List.of(generate(decl, headerName, targetPkg, new IncludeHelper(), libs, useSystemLoadLibrary, errStream));\n@@ -129,2 +130,3 @@\n-                                                         List<String> libNames, PrintWriter errStream) {\n-        return List.of(generate(decl, headerName, targetPkg, includeHelper, libNames, errStream));\n+                                                         List<Options.Library> libs, boolean useSystemLoadLibrary,\n+                                                         PrintWriter errStream) {\n+        return List.of(generate(decl, headerName, targetPkg, includeHelper, libs, useSystemLoadLibrary, errStream));\n@@ -134,2 +136,3 @@\n-                                            String targetPkg, IncludeHelper includeHelper,\n-                                            List<String> libNames, PrintWriter errStream) {\n+                                             String targetPkg, IncludeHelper includeHelper,\n+                                             List<Options.Library> libs, boolean useSystemLoadLibrary,\n+                                             PrintWriter errStream) {\n@@ -142,1 +145,1 @@\n-        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libNames);\n+        return OutputFactory.generateWrapped(transformedDecl, targetPkg, libs, useSystemLoadLibrary);\n@@ -386,0 +389,1 @@\n+        parser.accepts(\"--use-system-load-library\", format(\"help.use.system.load.library\"), false);\n@@ -469,0 +473,5 @@\n+        boolean useSystemLoadLibrary = optionSet.has(\"--use-system-load-library\");\n+        if (useSystemLoadLibrary) {\n+            builder.setUseSystemLoadLibrary(true);\n+        }\n+\n@@ -472,6 +481,7 @@\n-                if (lib.indexOf(File.separatorChar) == -1) {\n-                    builder.addLibraryName(lib);\n-                } else {\n-                    Path libPath = Paths.get(lib);\n-                    if (libPath.isAbsolute() && Files.isRegularFile(libPath)) {\n-                        builder.addLibraryName(lib);\n+                try {\n+                    Library library = Options.Library.parse(lib);\n+                    Path libPath = Paths.get(library.libSpec());\n+                    if (!useSystemLoadLibrary ||\n+                            library.specKind() == Library.SpecKind.NAME ||\n+                            (libPath.isAbsolute() && Files.isRegularFile(libPath))) {\n+                        builder.addLibrary(library);\n@@ -479,2 +489,2 @@\n-                        err.println(format(\"l.option.value.invalid\", lib));\n-                        return OPTION_ERROR;\n+                        \/\/ not an absolute path, but--use-system-load-library was specified\n+                        err.println(format(\"l.option.value.absolute.path\", lib));\n@@ -482,0 +492,3 @@\n+                } catch (IllegalArgumentException ex) {\n+                    err.println(format(\"l.option.value.invalid\", lib));\n+                    return OPTION_ERROR;\n@@ -515,1 +528,1 @@\n-                options.targetPackage, options.includeHelper, options.libraryNames, err);\n+                options.targetPackage, options.includeHelper, options.libraries, options.useSystemLoadLibrary, err);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.io.File;\n@@ -30,1 +29,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -245,7 +243,5 @@\n-    void emitFirstHeaderPreamble(List<String> libraries) {\n-        appendIndentedLines(\"\"\"\n-\n-            static final SymbolLookup SYMBOL_LOOKUP\n-                    = SymbolLookup.loaderLookup().or(Linker.nativeLinker().defaultLookup());\n-            \"\"\");\n-        if (!libraries.isEmpty()) {\n+    void emitFirstHeaderPreamble(List<Options.Library> libraries, boolean useSystemLoadLibrary) {\n+        List<String> lookups = new ArrayList<>();\n+        \/\/ if legacy library loading is selected, load libraries (if any) into current loader\n+        if (useSystemLoadLibrary) {\n+            appendBlankLine();\n@@ -257,4 +253,3 @@\n-            for (String lib : libraries) {\n-                String quotedLibName = lib.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n-                String method = quotedLibName.indexOf(File.separatorChar) != -1 ? \"load\" : \"loadLibrary\";\n-                appendIndentedLines(STR.\"System.\\{method}(\\\"\\{quotedLibName}\\\");\");\n+            for (Options.Library lib : libraries) {\n+                String method = lib.specKind() == Options.Library.SpecKind.PATH ? \"load\" : \"loadLibrary\";\n+                appendIndentedLines(STR.\"System.\\{method}(\\\"\\{lib.toQuotedName()}\\\");\");\n@@ -266,0 +261,7 @@\n+        } else {\n+            \/\/ otherwise, add a library lookup per library (if any)\n+            libraries.stream() \/\/ add library lookups (if any)\n+                    .map(l -> l.specKind() == Options.Library.SpecKind.PATH ?\n+                            STR.\"SymbolLookup.libraryLookup(\\\"\\{l.toQuotedName()}\\\", LIBRARY_ARENA)\" :\n+                            STR.\"SymbolLookup.libraryLookup(System.mapLibraryName(\\\"\\{l.toQuotedName()}\\\"), LIBRARY_ARENA)\")\n+                    .collect(Collectors.toCollection(() -> lookups));\n@@ -267,0 +269,16 @@\n+\n+        lookups.add(\"SymbolLookup.loaderLookup()\"); \/\/ fallback to loader lookup\n+        lookups.add(\"Linker.nativeLinker().defaultLookup()\"); \/\/ fallback to native lookup\n+\n+        \/\/ wrap all lookups (but the first) with \".or(...)\"\n+        List<String> lookupCalls = new ArrayList<>();\n+        boolean isFirst = true;\n+        for (String lookup : lookups) {\n+            lookupCalls.add(isFirst ? lookup : STR.\".or(\\{lookup})\");\n+            isFirst = false;\n+        }\n+\n+        \/\/ chain all the calls together into a combined symbol lookup\n+        appendBlankLine();\n+        appendIndentedLines(lookupCalls.stream()\n+                .collect(Collectors.joining(STR.\"\\n\\{indentString(2)}\", \"static final SymbolLookup SYMBOL_LOOKUP = \", \";\")));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":31,"deletions":13,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-    public final List<String> libraryNames;\n+    public final List<Library> libraries;\n+    \/\/ The symbol lookup kind\n+    public final boolean useSystemLoadLibrary;\n@@ -41,1 +43,1 @@\n-    private Options(List<String> clangArgs, List<String> libraryNames,\n+    private Options(List<String> clangArgs, List<Library> libraries, boolean useSystemLoadLibrary,\n@@ -44,1 +46,2 @@\n-        this.libraryNames = libraryNames;\n+        this.libraries = libraries;\n+        this.useSystemLoadLibrary = useSystemLoadLibrary;\n@@ -56,1 +59,2 @@\n-        private final List<String> libraryNames;\n+        private final List<Library> libraries;\n+        private boolean useSystemLoadLibrary;\n@@ -63,1 +67,1 @@\n-            this.libraryNames = new ArrayList<>();\n+            this.libraries = new ArrayList<>();\n@@ -66,0 +70,1 @@\n+            this.useSystemLoadLibrary = false;\n@@ -71,2 +76,2 @@\n-                    Collections.unmodifiableList(libraryNames),\n-                    targetPackage, outputDir, includeHelper\n+                    Collections.unmodifiableList(libraries),\n+                    useSystemLoadLibrary, targetPackage, outputDir, includeHelper\n@@ -80,2 +85,6 @@\n-        public void addLibraryName(String name) {\n-            libraryNames.add(name);\n+        public void addLibrary(Library library) {\n+            libraries.add(library);\n+        }\n+\n+        public void setUseSystemLoadLibrary(boolean useSystemLoadLibrary) {\n+            this.useSystemLoadLibrary = useSystemLoadLibrary;\n@@ -100,0 +109,30 @@\n+\n+    \/**\n+     * A record describing a shared library.\n+     *\n+     * @param libSpec the library specification (either a name or a path, see below)\n+     * @param specKind the library specification kind (e.g. a name or a path)\n+     *\/\n+    public record Library(String libSpec, SpecKind specKind) {\n+\n+        public enum SpecKind {\n+            NAME,\n+            PATH;\n+        }\n+\n+        public static Library parse(String optionString) {\n+            SpecKind specKind = optionString.startsWith(\":\") ?\n+                    SpecKind.PATH : SpecKind.NAME;\n+            if (specKind == SpecKind.PATH && optionString.length() == 1) {\n+                \/\/ empty library specifier!\n+                throw new IllegalArgumentException();\n+            }\n+            return specKind == SpecKind.PATH ?\n+                    new Library(optionString.substring(1), specKind) :\n+                    new Library(optionString, specKind);\n+        }\n+\n+        String toQuotedName() {\n+            return libSpec().replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n+        }\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Options.java","additions":48,"deletions":9,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-                                                   String pkgName, List<String> libraryNames) {\n+                                                   String pkgName,\n+                                                   List<Options.Library> libs, boolean useSystemLoadLibrary) {\n@@ -49,1 +50,1 @@\n-        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libraryNames);\n+        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libs, useSystemLoadLibrary);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-    ToplevelBuilder(String packageName, String headerClassName, List<String> libraries) {\n+    ToplevelBuilder(String packageName, String headerClassName,\n+                    List<Options.Library> libs, boolean useSystemLoadLibrary) {\n@@ -55,1 +56,1 @@\n-        lastHeader = createFirstHeader(sfb, libraries);\n+        lastHeader = createFirstHeader(sfb, libs, useSystemLoadLibrary);\n@@ -58,1 +59,1 @@\n-    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb, List<String> libraries) {\n+    private static HeaderFileBuilder createFirstHeader(SourceFileBuilder sfb, List<Options.Library> libs, boolean useSystemLoadLibrary) {\n@@ -62,1 +63,0 @@\n-        first.emitFirstHeaderPreamble(libraries);\n@@ -64,0 +64,2 @@\n+        first.emitRuntimeHelperMethods();\n+        first.emitFirstHeaderPreamble(libs, useSystemLoadLibrary);\n@@ -83,1 +85,0 @@\n-        first.emitRuntimeHelperMethods();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-l.option.value.invalid=option value for -l option should be a name or an absolute path: {0}\n+l.option.value.invalid=invalid library specifier for -l option: {0}\n+l.option.value.absolute.path=when using --use-system-load-library, option value for -l option should be a name or an absolute path: {0}\n@@ -43,0 +44,1 @@\n+help.use.system.load.library=load libraries in the loader symbol lookup\n@@ -66,3 +68,11 @@\n--l, --library <name | path>        specify a library by platform-independent name (e.g. \"GL\")   \\n\\\n-\\                                   or by absolute path (\"\/usr\/lib\/libGL.so\") that will be      \\n\\\n-\\                                   loaded by the generated class.                              \\n\\\n+-l, --library <libspec>            specify a shared library that should be loaded by the        \\n\\\n+\\                                  generated header class. If <libspec> starts with ':', then   \\n\\\n+\\                                   what follows is interpreted as a library path. Otherwise,   \\n\\\n+\\                                   <libspec> denotes a library name. Examples:                 \\n\\\n+\\                                      -l GL                                                    \\n\\\n+\\                                      -l :libGL.so.1                                           \\n\\\n+\\                                      -l :\/usr\/lib\/libGL.so.1                                  \\n\\\n+--use-system-load-library          libraries specified using -l are loaded in the loader symbol \\n\\\n+                                   lookup (using either System::loadLibrary, or System::load).  \\n\\\n+                                   Useful if the libraries must be loaded from one of the paths \\n\\\n+                                   in 'java.library.path'.                                      \\n\\ \n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm JtregJextract -l AllocCallback -t test.jextract.allocCallback alloc_callback.h\n+ * @run main\/othervm JtregJextract -l AllocCallback --use-system-load-library -t test.jextract.allocCallback alloc_callback.h\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm JtregJextract -l ArrayAccess -t test.jextract.arrayaccess array_access.h\n+ * @run main\/othervm JtregJextract -l ArrayAccess --use-system-load-library -t test.jextract.arrayaccess array_access.h\n","filename":"test\/jtreg\/generator\/arrayAccess\/TestArrayAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm JtregJextract -t test.jextract.clinit --library ClinitGlobal -Djextract.decls.per.header=1 clinit_global.h\n+ * @run main\/othervm JtregJextract -t test.jextract.clinit --library ClinitGlobal --use-system-load-library -Djextract.decls.per.header=1 clinit_global.h\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestGlobal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm JtregJextract -l Func -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_typedef.h\n+ * @run main\/othervm JtregJextract -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_typedef.h\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm JtregJextract -l Func -t test.jextract.funcpointers func.h\n+ * @run main\/othervm JtregJextract -l Func --use-system-load-library -t test.jextract.funcpointers func.h\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm JtregJextract -l Reinterpret -t test.jextract.reinterpret reinterpret.h\n+ * @run main\/othervm JtregJextract -l Reinterpret --use-system-load-library -t test.jextract.reinterpret reinterpret.h\n","filename":"test\/jtreg\/generator\/reinterpret\/TestReinterpret.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm JtregJextract -l StructGlobal -t test.jextract.globalaccess globalStructAccess.h\n+ * @run main\/othervm JtregJextract -l StructGlobal --use-system-load-library -t test.jextract.globalaccess globalStructAccess.h\n","filename":"test\/jtreg\/generator\/structAccessors\/TestGlobalStructAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm JtregJextract --library Test7903347 -t test.jextract.test7903347 test7903347.h\n+ * @run main\/othervm JtregJextract --library Test7903347 --use-system-load-library -t test.jextract.test7903347 test7903347.h\n","filename":"test\/jtreg\/generator\/test7903347\/LibTest7903347Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextract -l Test8239918 -t test.jextract.test8239918 test8239918.h\n+ * @run main\/othervm JtregJextract -l Test8239918 --use-system-load-library -t test.jextract.test8239918 test8239918.h\n","filename":"test\/jtreg\/generator\/test8239918\/LibTest8239918Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm JtregJextract -l Test8244938 -t test.jextract.test8244938 test8244938.h\n+ * @run main\/othervm JtregJextract -l Test8244938 --use-system-load-library -t test.jextract.test8244938 test8244938.h\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm JtregJextract -l Test8245003 -t test.jextract.test8245003 test8245003.h\n+ * @run main\/othervm JtregJextract -l Test8245003 --use-system-load-library -t test.jextract.test8245003 test8245003.h\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm JtregJextract -l Test8246341 -t test.jextract.test8246341 test8246341.h\n+ * @run main\/othervm JtregJextract -l Test8246341 --use-system-load-library -t test.jextract.test8246341 test8246341.h\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm JtregJextract -l Test8246400 -t test.jextract.test8246400 test8246400.h\n+ * @run main\/othervm JtregJextract -l Test8246400 --use-system-load-library -t test.jextract.test8246400 test8246400.h\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextract -libpath Test8249757 -t test.jextract.test8249757 test8249757.h\n+ * @run main\/othervm JtregJextract -l Test8249757 --use-system-load-library -t test.jextract.test8249757 test8249757.h\n","filename":"test\/jtreg\/generator\/test8249757\/LibTest8249757Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run main\/othervm JtregJextract -t test.jextract.arrayparam -l Arrayparam arrayparam.h\n+ * @run main\/othervm JtregJextract -t test.jextract.arrayparam -l Arrayparam --use-system-load-library arrayparam.h\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main\/othervm JtregJextract -l Unsupported -t test.jextract.unsupported unsupported.h\n+ * @run main\/othervm JtregJextract -l Unsupported --use-system-load-library -t test.jextract.unsupported unsupported.h\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm JtregJextract -l FuncParam -t test.jextract.test8258605 funcParam.h\n+ * @run main\/othervm JtregJextract -l FuncParam --use-system-load-library -t test.jextract.test8258605 funcParam.h\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm JtregJextract -l Test8261511 -t test.jextract.test8261511 test8261511.h\n+ * @run main\/othervm JtregJextract -l Test8261511 --use-system-load-library -t test.jextract.test8261511 test8261511.h\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextract -l Test8281764 -t test.jextract.test8281764 test8281764.h\n+ * @run main\/othervm JtregJextract -l Test8281764 --use-system-load-library -t test.jextract.test8281764 test8281764.h\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm JtregJextract -l Test8282235 -t test.jextract.test8282235 test8282235.h\n+ * @run main\/othervm JtregJextract -l Test8282235 --use-system-load-library -t test.jextract.test8282235 test8282235.h\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm JtregJextract -l FuncPtr -t test.jextract.fp funcPtr.h\n+ * @run main\/othervm JtregJextract -l FuncPtr --use-system-load-library -t test.jextract.fp funcPtr.h\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run main\/othervm JtregJextract -t test.jextract.printf -l Printf printf.h\n+ * @run main\/othervm JtregJextract -t test.jextract.printf -l Printf --use-system-load-library printf.h\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run main\/othervm JtregJextract -l Struct -t test.jextract.struct struct.h\n+ * @run main\/othervm JtregJextract -l Struct --use-system-load-library -t test.jextract.struct struct.h\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,10 +74,0 @@\n-            if (\"-libpath\".equals(opt)) {\n-                String lib = args[i];\n-                jextrOpts.add(\"-l\");\n-                String libpath = System.getProperty(\"java.library.path\") + File.separator + System.mapLibraryName(lib);\n-                System.err.println(\"jextract driver libpath passed: \" + libpath);\n-                jextrOpts.add(libpath);\n-                i++;\n-                continue;\n-            }\n-\n","filename":"test\/lib\/JtregJextract.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-            \"-l\", \"Examples\",\n+            \"-l\", \"Examples\", \"--use-system-load-library\",\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}