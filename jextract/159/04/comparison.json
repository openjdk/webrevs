{"files":[{"patch":"@@ -214,1 +214,1 @@\n-                \"-avm\", \"-conc:auto\", \"-verbose:summary\",\n+                \"-avm\", \"-conc:auto\", \"-verbose:summary,fail,error\",\n","filename":"build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.Predicate;\n@@ -197,0 +198,4 @@\n+    public void forEachShortCircuit(Predicate<Cursor> action) {\n+        CursorChildren.forEachShortCircuit(this, action);\n+    }\n+\n@@ -207,1 +212,1 @@\n-            private final Consumer<Cursor> action;\n+            private final Predicate<Cursor> action;\n@@ -211,1 +216,1 @@\n-            Context(Consumer<Cursor> action, ClangDisposable owner) {\n+            Context(Predicate<Cursor> action, ClangDisposable owner) {\n@@ -223,2 +228,1 @@\n-                    action.accept(new Cursor(segment, owner));\n-                    return true;\n+                    return action.test(new Cursor(segment, owner));\n@@ -249,1 +253,8 @@\n-        synchronized static void forEach(Cursor c, Consumer<Cursor> op) {\n+        static void forEach(Cursor c, Consumer<Cursor> op) {\n+            forEachShortCircuit(c, decl -> {\n+                op.accept(decl);\n+                return true;\n+            });\n+        }\n+\n+        synchronized static void forEachShortCircuit(Cursor c, Predicate<Cursor> op) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -330,4 +330,1 @@\n-            Optional<Declaration> firstDecl = ((Scoped)member).members().stream().findFirst();\n-            return firstDecl.isEmpty() ?\n-                    OptionalLong.empty() :\n-                    recordMemberOffset(firstDecl.get());\n+            return AnonymousStruct.getOrThrow((Scoped) member).offset();\n@@ -342,2 +339,4 @@\n-    record AnonymousStruct() {\n-        private static final AnonymousStruct INSTANCE = new AnonymousStruct();\n+    record AnonymousStruct(OptionalLong offset) {\n+        public static void with(Scoped scoped, OptionalLong offset) {\n+            scoped.addAttribute(new AnonymousStruct(offset));\n+        }\n@@ -345,2 +344,2 @@\n-        public static void with(Scoped scoped) {\n-            scoped.addAttribute(INSTANCE);\n+        public static AnonymousStruct getOrThrow(Scoped scoped) {\n+            return scoped.getAttribute(AnonymousStruct.class).orElseThrow();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.Skip;\n@@ -288,3 +289,1 @@\n-            if (member instanceof Scoped nested && nested.kind() == Scoped.Kind.BITFIELDS) {\n-                \/\/ skip\n-            } else {\n+            if (!Skip.isPresent(member)) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.OptionalLong;\n@@ -318,1 +319,1 @@\n-            AnonymousStruct.with(structOrUnionDecl);\n+            AnonymousStruct.with(structOrUnionDecl, offsetOfAnonymousRecord(parent, recordCursor, recordCursor));\n@@ -324,0 +325,37 @@\n+    \/*\n+     * For the first named field that is nested somewhere inside anonRecord, we get the offset\n+     * to outermostParent and anonRecord itself. Subtracting the latter from the former\n+     * then gives us the offset of the anonRecord within outermostParent.\n+     *\n+     * Deals with cases like this too:\n+     *\n+     * struct Foo {\n+     *     char c; \/\/ offset = 0\n+     *     struct <anon1> { \/\/ offset = 96 - 64 = 32\n+     *         int: 32;\n+     *         struct <anon2> { \/\/ offset = 96 - 32 = 64\n+     *             int: 32;\n+     *             int x; \/\/ offset(Foo) = 96, offset(anon2) = 32, offset(anon1) = 64\n+     *         };\n+     *     };\n+     * };\n+     *\/\n+    private static OptionalLong offsetOfAnonymousRecord(Cursor outermostParent, Cursor anonRecord, Cursor record) {\n+        AtomicReference<OptionalLong> result = new AtomicReference<>(OptionalLong.empty());\n+        record.forEachShortCircuit(fc -> {\n+            if (Utils.isFlattenable(fc)) {\n+                if (!fc.spelling().isEmpty()) {\n+                    long offsetToOutermost = outermostParent.type().getOffsetOf(fc.spelling());\n+                    long offsetToAnon = anonRecord.type().getOffsetOf(fc.spelling());\n+                    result.set(OptionalLong.of(offsetToOutermost - offsetToAnon));\n+                    return false;\n+                } else if (fc.isAnonymousStruct()) {\n+                    result.set(offsetOfAnonymousRecord(outermostParent, anonRecord, fc));\n+                    return false;\n+                }\n+            }\n+            return true;\n+        });\n+        return result.get();\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    public Void visitFunction(Function funcTree, Declaration parent) {\n+    public Void visitFunction(Function funcTree, Declaration firstNamedParent) {\n@@ -98,0 +98,6 @@\n+    private static String fieldName(Declaration firstNamedParent, Declaration decl) {\n+        String name = firstNamedParent != null ? firstNamedParent.name() + \".\" : \"\";\n+        name += decl.name();\n+        return name;\n+    }\n+\n@@ -99,1 +105,1 @@\n-    public Void visitVariable(Variable varTree, Declaration parent) {\n+    public Void visitVariable(Variable varTree, Declaration firstNamedParent) {\n@@ -107,2 +113,1 @@\n-        String name = parent != null ? parent.name() + \".\" : \"\";\n-        name += varTree.name();\n+        String name = fieldName(firstNamedParent, varTree);\n@@ -115,7 +120,0 @@\n-        if (varTree.kind() == Declaration.Variable.Kind.BITFIELD) {\n-            \/\/skip\n-            warnSkip(name, \"type is bitfield\");\n-            Skip.with(varTree);\n-            return null;\n-        }\n-\n@@ -132,1 +130,1 @@\n-    public Void visitScoped(Scoped scoped, Declaration declaration) {\n+    public Void visitScoped(Scoped scoped, Declaration firstNamedParent) {\n@@ -137,0 +135,1 @@\n+            return null;\n@@ -138,0 +137,11 @@\n+\n+        if (scoped.kind() == Kind.BITFIELDS) {\n+            for (Declaration bitField : scoped.members()) {\n+                if (!bitField.name().isEmpty()) {\n+                    warnSkip(fieldName(firstNamedParent, bitField), \"type is bitfield\");\n+                }\n+            }\n+            Skip.with(scoped);\n+            return null;\n+        }\n+\n@@ -139,0 +149,1 @@\n+        Declaration newNamedParent = !scoped.name().isEmpty() ? scoped : firstNamedParent;\n@@ -140,1 +151,1 @@\n-            fieldTree.accept(this, scoped);\n+            fieldTree.accept(this, newNamedParent);\n@@ -146,1 +157,1 @@\n-    public Void visitTypedef(Typedef typedefTree, Declaration declaration) {\n+    public Void visitTypedef(Typedef typedefTree, Declaration firstNamedParent) {\n@@ -167,1 +178,1 @@\n-    public Void visitConstant(Constant d, Declaration declaration) {\n+    public Void visitConstant(Constant d, Declaration firstNamedParent) {\n@@ -172,1 +183,1 @@\n-    public Void visitDeclaration(Declaration d, Declaration declaration) {\n+    public Void visitDeclaration(Declaration d, Declaration firstNamedParent) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnsupportedFilter.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+    public static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jextract.test.toolprovider.nestedAnonOffset;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.UnionLayout;\n+import java.nio.file.Path;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+public class TestNestedAnonOffset extends JextractToolRunner {\n+\n+    Loader loader;\n+\n+    @BeforeClass\n+    public void beforeClass() {\n+        Path output = getOutputFilePath(\"TestAnon-anonymousStructs.h\");\n+        Path outputH = getInputFilePath(\"anonymousStructs.h\");\n+        run(\"--output\",\n+            output.toString(), outputH.toString()).checkSuccess();\n+\n+        loader = classLoader(output);\n+    }\n+\n+    @AfterClass\n+    public void afterClass() {\n+        loader.close();\n+    }\n+\n+    @Test\n+    public void testFoo() {\n+        Class<?> foo = loader.loadClass(\"Foo\");\n+        assertNotNull(foo);\n+        StructLayout layout = (StructLayout) findLayout(foo);\n+        assertEquals(layout.memberLayouts().get(0), C_CHAR.withName(\"c\"));\n+        assertEquals(layout.memberLayouts().get(1), MemoryLayout.paddingLayout(3));\n+\n+        StructLayout nestedAnon1 = (StructLayout) layout.memberLayouts().get(2);\n+        assertEquals(nestedAnon1.memberLayouts().get(0), MemoryLayout.paddingLayout(4));\n+\n+        StructLayout nestedAnon2 = (StructLayout) nestedAnon1.memberLayouts().get(1);\n+        assertEquals(nestedAnon2.memberLayouts().get(0), MemoryLayout.paddingLayout(4));\n+        assertEquals(nestedAnon2.memberLayouts().get(1), C_INT.withName(\"x\"));\n+    }\n+\n+    @Test\n+    public void testBar() {\n+        Class<?> bar = loader.loadClass(\"Bar\");\n+        assertNotNull(bar);\n+        StructLayout layout = (StructLayout) findLayout(bar);\n+        assertEquals(layout.memberLayouts().get(0), C_CHAR.withName(\"c\"));\n+        assertEquals(layout.memberLayouts().get(1), MemoryLayout.paddingLayout(3));\n+\n+        StructLayout nestedAnon1 = (StructLayout) layout.memberLayouts().get(2);\n+        assertEquals(nestedAnon1.memberLayouts().get(0), MemoryLayout.paddingLayout(4));\n+\n+        UnionLayout nestedAnon2 = (UnionLayout) nestedAnon1.memberLayouts().get(1);\n+        assertEquals(nestedAnon2.memberLayouts().get(0), C_INT.withName(\"x\"));\n+    }\n+\n+    @Test\n+    public void testBaz() {\n+        Class<?> baz = loader.loadClass(\"Baz\");\n+        assertNotNull(baz);\n+        StructLayout layout = (StructLayout) findLayout(baz);\n+        assertEquals(layout.memberLayouts().get(0), C_CHAR.withName(\"c\"));\n+        \/\/ Note here: only on Windows, the bitfield needs to be aligned and requires more padding\n+        assertEquals(layout.memberLayouts().get(1), MemoryLayout.paddingLayout(IS_WINDOWS ? 11 : 8));\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedAnonOffset\/TestNestedAnonOffset.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+struct Foo {\n+    char c;\n+    struct {\n+        int: 32;\n+        struct {\n+            int: 32;\n+            int x;\n+        };\n+    };\n+};\n+\n+struct Bar {\n+    char c;\n+    struct {\n+        int: 32;\n+        union {\n+            int: 32;\n+            int x;\n+        };\n+    };\n+};\n+\n+struct Baz {\n+    char c;\n+    struct { \/\/ should be skipped\n+        int: 32;\n+        struct {\n+            int: 32;\n+        };\n+    };\n+};\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nestedAnonOffset\/anonymousStructs.h","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}