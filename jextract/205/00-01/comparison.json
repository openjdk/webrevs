{"files":[{"patch":"@@ -198,3 +198,3 @@\n-                public interface \\{invokerClassName} {\n-                    FunctionDescriptor BASE_DESC = \\{functionDescriptorString(2, decl.type())};\n-                    MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\");\n+                public record \\{invokerClassName}(MethodHandle handle, FunctionDescriptor descriptor) {\n+                    private static final FunctionDescriptor BASE_DESC = \\{functionDescriptorString(2, decl.type())};\n+                    private static final MemorySegment ADDR = \\{runtimeHelperName()}.findOrThrow(\"\\{nativeName}\");\n@@ -202,30 +202,1 @@\n-                    \\{retType} apply(\\{paramExprs});\n-                \"\"\");\n-\n-            incrAlign();\n-            appendBlankLine();\n-            emitDocComment(decl, \"Specialized method handle factory for:\");\n-            appendLines(STR.\"\"\"\n-                static MethodHandle handle(MemoryLayout... layouts) {\n-                    FunctionDescriptor desc = descriptor(layouts);\n-                    Linker.Option fva = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());\n-                    return Linker.nativeLinker().downcallHandle(ADDR, desc, fva);\n-                }\n-                \"\"\");\n-            appendBlankLine();\n-            emitDocComment(decl, \"Specialized function descriptor factory for:\");\n-            appendLines(STR.\"\"\"\n-                static FunctionDescriptor descriptor(MemoryLayout... layouts) {\n-                    return BASE_DESC.appendArgumentLayouts(layouts);\n-                }\n-                \"\"\");\n-            decrAlign();\n-            appendLines(\"\"\"\n-                }\n-\n-                \"\"\");\n-            emitDocComment(decl, \"Variadic invoker factory for:\");\n-            appendLines(STR.\"\"\"\n-                public static \\{invokerClassName} \\{javaName}(MemoryLayout... layouts) {\n-                    var mh$ = \\{invokerClassName}.handle(layouts).asSpreader(Object[].class, layouts.length);\n-                    return (\\{paramExprs}) -> {\n+                    public \\{retType} apply(\\{paramExprs}) {\n@@ -236,1 +207,2 @@\n-                            \\{returnWithCast}mh$.invokeExact(\\{paramList});\n+                            int trailingArgCount$ = descriptor.argumentLayouts().size() - BASE_DESC.argumentLayouts().size();\n+                            \\{returnWithCast}handle.asSpreader(Object[].class, trailingArgCount$).invokeExact(\\{paramList});\n@@ -242,1 +214,11 @@\n-                    };\n+                    }\n+                }\n+\n+                \"\"\");\n+            emitDocComment(decl, \"Variadic invoker factory for:\");\n+            appendLines(STR.\"\"\"\n+                public static \\{invokerClassName} \\{javaName}(MemoryLayout... layouts) {\n+                    FunctionDescriptor desc$ = \\{invokerClassName}.BASE_DESC.appendArgumentLayouts(layouts);\n+                    Linker.Option fva$ = Linker.Option.firstVariadicArg(\\{invokerClassName}.BASE_DESC.argumentLayouts().size());\n+                    var mh$ = Linker.nativeLinker().downcallHandle(\\{invokerClassName}.ADDR, desc$, fva$);\n+                    return new \\{invokerClassName}(mh$, desc$);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":17,"deletions":35,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-        FunctionDescriptor baseDesc = my_sprintf.descriptor();\n-        assertEquals(baseDesc, FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER, C_INT));\n+        my_sprintf invoker = my_sprintf();\n+        assertEquals(invoker.descriptor(), FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER, C_INT));\n@@ -57,1 +57,1 @@\n-            MethodHandle handle = my_sprintf.handle(layouts);\n+            MethodHandle handle = my_sprintf(layouts).handle();\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -128,7 +128,4 @@\n-        \/\/ check for base desc and address fields\n-        assertNotNull(findField(invokerCls, \"BASE_DESC\"));\n-        assertNotNull(findField(invokerCls, \"ADDR\"));\n-        \/\/ check a method for \"MethodHandle handle(MemoryLayout...)\"\n-        assertNotNull(findMethod(invokerCls, \"handle\", MemoryLayout[].class));\n-        \/\/ check a method for \"FunctionDescriptor descriptor(MemoryLayout...)\"\n-        assertNotNull(findMethod(invokerCls, \"descriptor\", MemoryLayout[].class));\n+        \/\/ check a method for \"MethodHandle handle()\"\n+        assertNotNull(findMethod(invokerCls, \"handle\"));\n+        \/\/ check a method for \"FunctionDescriptor descriptor()\"\n+        assertNotNull(findMethod(invokerCls, \"descriptor\"));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}