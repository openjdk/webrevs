{"files":[{"patch":"@@ -211,8 +211,15 @@\n-\n-                    static \\{invokerClassName} specialize(MemoryLayout... layouts) {\n-                        FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);\n-                        Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());\n-                        var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);\n-                        var spreader$ = mh$.asSpreader(Object[].class, layouts.length);\n-                        return new \\{invokerClassName}(mh$, desc$, spreader$);\n-                    }\n+                \"\"\");\n+            incrAlign();\n+            appendBlankLine();\n+            emitDocComment(decl, \"Variadic invoker factory for:\");\n+            appendLines(STR.\"\"\"\n+                public static \\{invokerClassName} makeInvoker(MemoryLayout... layouts) {\n+                    FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);\n+                    Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());\n+                    var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);\n+                    var spreader$ = mh$.asSpreader(Object[].class, layouts.length);\n+                    return new \\{invokerClassName}(mh$, desc$, spreader$);\n+                }\n+                \"\"\");\n+            decrAlign();\n+            appendLines(STR.\"\"\"\n@@ -247,8 +254,0 @@\n-\n-                \"\"\");\n-            emitDocComment(decl, \"Variadic invoker factory for:\");\n-            appendLines(STR.\"\"\"\n-                public static \\{invokerClassName} \\{javaName}(MemoryLayout... layouts) {\n-                    return \\{invokerClassName}.specialize(layouts);\n-                }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        my_sprintf invoker = my_sprintf();\n+        my_sprintf invoker = my_sprintf.makeInvoker();\n@@ -57,1 +57,1 @@\n-            MethodHandle handle = my_sprintf(layouts).handle();\n+            MethodHandle handle = my_sprintf.makeInvoker(layouts).handle();\n@@ -73,1 +73,1 @@\n-            my_sprintf(layouts)\n+            my_sprintf.makeInvoker(layouts)\n@@ -84,1 +84,1 @@\n-            my_sprintf(layouts)\n+            my_sprintf.makeInvoker(layouts)\n@@ -92,1 +92,1 @@\n-        my_sprintf(layouts); \/\/ should throw\n+        my_sprintf.makeInvoker(layouts); \/\/ should throw\n","filename":"test\/jtreg\/generator\/testPrintf\/TestPrintf.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -123,2 +123,0 @@\n-        \/\/ check a method for \"printf(MemoryLayout...)\"\n-        assertNotNull(findMethod(header, \"printf\", MemoryLayout[].class));\n@@ -132,0 +130,2 @@\n+        \/\/ check a method for \"<invokerCls> invoker(MemoryLayout...)\"\n+        assertNotNull(findMethod(invokerCls, \"makeInvoker\", MemoryLayout[].class));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}