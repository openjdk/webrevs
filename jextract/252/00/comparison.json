{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.jextract.Declaration.Constant;\n@@ -203,1 +202,1 @@\n-            case Declared d when Utils.isEnum(d) -> layoutString(((Constant)d.tree().members().get(0)).type(), align);\n+            case Declared d when Utils.isEnum(d) -> layoutString(DeclarationImpl.ClangEnumType.get(d.tree()).get(), align);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-    record EnumConstant(String get) {\n+    record EnumConstant(String enumName) {\n@@ -359,1 +359,15 @@\n-                    .map(EnumConstant::get);\n+                    .map(EnumConstant::enumName);\n+        }\n+    }\n+\n+    \/**\n+     * An attribute used to store the type of an enum declaration, as seen by clang.\n+     *\/\n+    record ClangEnumType(Type type) {\n+        public static void with(Declaration.Scoped enumDecl, Type type) {\n+            enumDecl.addAttribute(new ClangEnumType(type));\n+        }\n+\n+        public static Optional<Type> get(Declaration.Scoped enumDecl) {\n+            return enumDecl.getAttribute(ClangEnumType.class)\n+                    .map(ClangEnumType::type);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -378,1 +378,3 @@\n-            return Declaration.enum_(CursorPosition.of(c), c.spelling(), decls.toArray(new Declaration[0]));\n+            Declaration.Scoped enumDecl = Declaration.enum_(CursorPosition.of(c), c.spelling(), decls.toArray(new Declaration[0]));\n+            DeclarationImpl.ClangEnumType.with(enumDecl, toType(c.getEnumDeclIntegerType()));\n+            return enumDecl;\n@@ -484,0 +486,4 @@\n+    Type toType(org.openjdk.jextract.clang.Type t) {\n+        return TypeMaker.makeType(t, this);\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import org.openjdk.jextract.Declaration.Scoped;\n-import org.openjdk.jextract.Declaration.Typedef;\n-import org.openjdk.jextract.JavaSourceFile;\n@@ -35,1 +32,0 @@\n-import org.openjdk.jextract.Type.Declared;\n@@ -41,0 +37,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.ClangEnumType;\n@@ -160,2 +157,1 @@\n-            case Type.Declared declared when declared.tree().kind() == Declaration.Scoped.Kind.ENUM ->\n-                isPrimitive(((Declaration.Constant)declared.tree().members().get(0)).type());\n+            case Type.Declared declared when declared.tree().kind() == Declaration.Scoped.Kind.ENUM -> true;\n@@ -217,1 +213,1 @@\n-                    carrierFor(((Declaration.Constant) declared.tree().members().get(0)).type()) :\n+                    carrierFor(ClangEnumType.get(declared.tree()).get()) :\n@@ -259,1 +255,1 @@\n-            case Type.Declared declared when isEnum(declared) -> layoutCarrierFor(((Constant)declared.tree().members().get(0)).type());\n+            case Type.Declared declared when isEnum(declared) -> layoutCarrierFor(ClangEnumType.get(declared.tree()).get());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import test.jextract.bigenum.*;\n+\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.ValueLayout;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @requires (os.arch == \"amd64\" | os.arch == \"x86_64\") & os.family == \"linux\"\n+ * @library \/lib\n+ * @build testlib.TestUtils\n+ * @run main\/othervm JtregJextract -t test.jextract.bigenum bigEnum.h\n+ * @build TestBigEnum\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestBigEnum\n+ *\/\n+public class TestBigEnum {\n+\n+    @Test\n+    public void testBigEnum() {\n+        GroupLayout structLayout = structType.layout();\n+        assertEquals(structLayout.memberLayouts().get(0).withoutName(), ValueLayout.JAVA_LONG);\n+        assertEquals(structLayout.byteSize(), 16);\n+    }\n+}\n","filename":"test\/jtreg\/generator\/bigEnum\/TestBigEnum.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+typedef enum\n+{\n+    EnumDef_Undefined = -1,\n+    EnumDef_Big = 0x80000000\n+\n+} EnumDef;\n+\n+typedef struct structType\n+{\n+    EnumDef someEnum;\n+    long long bigNumber;\n+} value;\n","filename":"test\/jtreg\/generator\/bigEnum\/bigEnum.h","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"}]}