{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.jextract.impl.DeclarationImpl.ClangAlignOf;\n@@ -194,2 +195,2 @@\n-            case Declared d when Utils.isStructOrUnion(d) -> STR.\"\\{JavaName.getFullNameOrThrow(d.tree())}.layout()\";\n-            case Delegated d when d.kind() == Delegated.Kind.POINTER -> STR.\"\\{runtimeHelperName()}.C_POINTER\";\n+            case Declared d when Utils.isStructOrUnion(d) -> alignIfNeeded(STR.\"\\{JavaName.getFullNameOrThrow(d.tree())}.layout()\", ClangAlignOf.getOrThrow(d.tree()) \/ 8, align);\n+            case Delegated d when d.kind() == Delegated.Kind.POINTER -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_POINTER\", 8, align);\n@@ -197,1 +198,1 @@\n-            case Function _ -> STR.\"\\{runtimeHelperName()}.C_POINTER\";\n+            case Function _ -> alignIfNeeded(STR.\"\\{runtimeHelperName()}.C_POINTER\", 8, align);\n@@ -256,1 +257,1 @@\n-                STR.\"\\{layoutPrefix}.withByteAlignment(\\{expectedAlign})\" :\n+                STR.\"\\{runtimeHelperName()}.align(\\{layoutPrefix}, \\{expectedAlign})\" :\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -336,0 +336,14 @@\n+\n+            static MemoryLayout align(MemoryLayout layout, long align) {\n+                return switch (layout) {\n+                    case PaddingLayout p -> p;\n+                    case ValueLayout v -> v.withByteAlignment(align);\n+                    case GroupLayout g -> {\n+                        MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n+                                .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n+                        yield g instanceof StructLayout ?\n+                                MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n+                    }\n+                    case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n+                };\n+            }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -52,0 +52,4 @@\n+        checkLayout(S9.layout());\n+        checkLayout(S10.layout());\n+        checkLayout(S11.layout());\n+        checkLayout(S12.layout());\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,0 +71,28 @@\n+\n+struct NonPacked {\n+  long long aField;\n+};\n+\n+#pragma pack(1)\n+struct S9 {\n+  char first;\n+  struct NonPacked second;\n+};\n+\n+#pragma pack(1)\n+struct S10 {\n+   char first;\n+   long long second[2];\n+};\n+\n+#pragma pack(1)\n+struct S11 {\n+   char first;\n+   void *second;\n+};\n+\n+#pragma pack(1)\n+struct S12 {\n+   char first;\n+   void (*second)(int);\n+};\n","filename":"test\/jtreg\/generator\/packed\/packedstructs.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}