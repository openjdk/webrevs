{"files":[{"patch":"@@ -193,1 +193,1 @@\n-            case Declared d when Utils.isStructOrUnion(d) -> STR.\"\\{JavaName.getFullNameOrThrow(d.tree())}.$LAYOUT()\";\n+            case Declared d when Utils.isStructOrUnion(d) -> STR.\"\\{JavaName.getFullNameOrThrow(d.tree())}.layout()\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        super(builder, \"public\", Kind.INTERFACE, className, null, enclosing, runtimeHelperName);\n+        super(builder, \"public\", Kind.CLASS, className, null, enclosing, runtimeHelperName);\n@@ -58,1 +58,1 @@\n-        fib.emitFunctionalInterfaceMethod();\n+        fib.emitFunctionalInterface();\n@@ -65,1 +65,1 @@\n-    private void emitFunctionalInterfaceMethod() {\n+    private void emitFunctionalInterface() {\n@@ -68,1 +68,3 @@\n-            \\{methodType.returnType().getSimpleName()} apply(\\{paramExprs()});\n+            public interface Function {\n+                \\{methodType.returnType().getSimpleName()} apply(\\{paramExprs()});\n+            }\n@@ -75,1 +77,1 @@\n-            MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.class, \"apply\", $DESC);\n+            private static final MethodHandle UP$MH = \\{runtimeHelperName()}.upcallHandle(\\{className()}.Function.class, \"apply\", $DESC);\n@@ -77,1 +79,1 @@\n-            static MemorySegment allocate(\\{className()} fi, Arena scope) {\n+            public static MemorySegment allocate(\\{className()}.Function fi, Arena scope) {\n@@ -90,1 +92,1 @@\n-            MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n+            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);\n@@ -92,1 +94,1 @@\n-            static \\{methodType.returnType().getSimpleName()} invoke(MemorySegment funcPtr\\{allocParam}\\{paramStr}) {\n+            public static \\{methodType.returnType().getSimpleName()} invoke(MemorySegment funcPtr\\{allocParam}\\{paramStr}) {\n@@ -144,1 +146,5 @@\n-            FunctionDescriptor $DESC = \\{functionDescriptorString(0, funcType)};\n+            private static final FunctionDescriptor $DESC = \\{functionDescriptorString(0, funcType)};\n+\n+            public static FunctionDescriptor descriptor() {\n+                return $DESC;\n+            }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -71,1 +71,3 @@\n-            emitGlobalSegment(layoutVar, javaName, nativeName, varTree);\n+            String segmentConstant = emitGlobalSegment(layoutVar, javaName, nativeName);\n+            emitGlobalSegmentGetter(segmentConstant, layoutVar, javaName, varTree, \"Getter for variable:\");\n+            emitGlobalSegmentSetter(segmentConstant, layoutVar, javaName, varTree, \"Setter for variable:\");\n@@ -73,1 +75,1 @@\n-            String segmentConstant = emitGlobalSegment(layoutVar, javaName, nativeName, null);\n+            String segmentConstant = emitGlobalSegment(layoutVar, javaName, nativeName);\n@@ -323,0 +325,1 @@\n+        appendBlankLine();\n@@ -336,0 +339,1 @@\n+        appendBlankLine();\n@@ -347,2 +351,3 @@\n-    public String emitGlobalSegment(String layout, String javaName, String nativeName, Declaration declaration) {\n-        String mangledName = mangleName(javaName, MemorySegment.class);\n+    private void emitGlobalSegmentGetter(String segmentConstant, String layoutVar, String javaName,\n+                                         Declaration.Variable varTree, String docHeader) {\n+        appendBlankLine();\n@@ -350,3 +355,14 @@\n-        if (declaration != null) {\n-            emitDocComment(declaration);\n-        }\n+        emitDocComment(varTree, docHeader);\n+        appendLines(STR.\"\"\"\n+            public static MemorySegment \\{javaName}() {\n+                return \\{segmentConstant};\n+            }\n+            \"\"\");\n+        decrAlign();\n+    }\n+\n+    private void emitGlobalSegmentSetter(String segmentConstant, String layoutVar, String javaName,\n+                                         Declaration.Variable varTree, String docHeader) {\n+        appendBlankLine();\n+        incrAlign();\n+        emitDocComment(varTree, docHeader);\n@@ -354,1 +370,12 @@\n-            \\{MEMBER_MODS} MemorySegment \\{mangledName}() {\n+            public static void \\{javaName}(MemorySegment varValue) {\n+                MemorySegment.copy(varValue, 0L, \\{segmentConstant}, 0L, \\{layoutVar}.byteSize());\n+            }\n+            \"\"\");\n+        decrAlign();\n+    }\n+\n+    public String emitGlobalSegment(String layout, String javaName, String nativeName) {\n+        String mangledName = mangleName(javaName, MemorySegment.class);\n+        appendIndentedLines(STR.\"\"\"\n+\n+            private static MemorySegment \\{mangledName}() {\n@@ -362,1 +389,0 @@\n-        decrAlign();\n@@ -370,1 +396,1 @@\n-            \\{MEMBER_MODS} \\{layoutType} \\{mangledName}() {\n+            private static \\{layoutType} \\{mangledName}() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-                return \\{arrayParam}.asSlice($LAYOUT().byteSize() * index);\n+                return \\{arrayParam}.asSlice(layout().byteSize() * index);\n@@ -238,1 +238,1 @@\n-            public static long sizeof() { return $LAYOUT().byteSize(); }\n+            public static long sizeof() { return layout().byteSize(); }\n@@ -247,1 +247,1 @@\n-                return \\{allocatorParam}.allocate($LAYOUT());\n+                return \\{allocatorParam}.allocate(layout());\n@@ -258,1 +258,1 @@\n-                return \\{allocatorParam}.allocate(MemoryLayout.sequenceLayout(\\{elementCountParam}, $LAYOUT()));\n+                return \\{allocatorParam}.allocate(MemoryLayout.sequenceLayout(\\{elementCountParam}, layout()));\n@@ -271,1 +271,1 @@\n-                return addr.reinterpret($LAYOUT().byteSize() * elementCount, arena, cleanup);\n+                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);\n@@ -281,1 +281,1 @@\n-            public static final GroupLayout $LAYOUT() {\n+            public static final GroupLayout layout() {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            var foo = alloc_callback_h.foo$SEGMENT();\n+            var foo = alloc_callback_h.foo();\n","filename":"test\/jtreg\/generator\/allocCallback\/TestAllocCallback.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm JtregJextract -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_global.h\n+ * @run main\/othervm JtregJextract -t test.jextract.clinit --library ClinitGlobal -Djextract.decls.per.header=1 clinit_global.h\n@@ -41,1 +41,1 @@\n- * @run main\/othervm JtregJextractSources -t test.jextract.clinit -Djextract.decls.per.header=1 clinit_global.h\n+ * @run main\/othervm JtregJextractSources -t test.jextract.clinit --library ClinitGlobal -Djextract.decls.per.header=1 clinit_global.h\n@@ -51,2 +51,2 @@\n-        assertEquals(layout, clinit_global_h.global1$LAYOUT());\n-        assertEquals(layout, clinit_global_h.global2$LAYOUT());\n+        clinit_global_h.global1(1);\n+        clinit_global_h.global2(2);\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestGlobal.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        GroupLayout pointLayout = Point.$LAYOUT();\n+        GroupLayout pointLayout = Point.layout();\n","filename":"test\/jtreg\/generator\/clinitCycles\/TestStruct.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-EXPORT int global1;\n-EXPORT int global2;\n+EXPORT extern int global1;\n+EXPORT extern int global2;\n","filename":"test\/jtreg\/generator\/clinitCycles\/clinit_global.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+#include <clinit_global.h>\n+\n+int global1 = 1;\n+int global2 = 1;\n\\ No newline at end of file\n","filename":"test\/jtreg\/generator\/clinitCycles\/libClinitGlobal.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -50,2 +50,2 @@\n-        checkLayout(PointA.$LAYOUT());\n-        checkLayout(PointB.$LAYOUT());\n+        checkLayout(PointA.layout());\n+        checkLayout(PointB.layout());\n","filename":"test\/jtreg\/generator\/dedup\/TestDedup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        checkLayout(P.$LAYOUT());\n+        checkLayout(P.layout());\n@@ -54,1 +54,1 @@\n-                P.Flags.$LAYOUT().withoutName());\n+                P.Flags.layout().withoutName());\n","filename":"test\/jtreg\/generator\/nestedInsideAnon\/TestNestedInsideAnon.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        checkLayout(T.$LAYOUT());\n+        checkLayout(T.layout());\n","filename":"test\/jtreg\/generator\/nestedStructTypedef\/TestNestedStructTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n-        checkNestedLayout(NestedStructArray.$LAYOUT());\n-        checkNestedLayout(NestedStructArrayTypedef.$LAYOUT());\n-        checkNestedLayout(NestedStructArrayTypedefTypedef.$LAYOUT());\n+        checkNestedLayout(NestedStructArray.layout());\n+        checkNestedLayout(NestedStructArrayTypedef.layout());\n+        checkNestedLayout(NestedStructArrayTypedefTypedef.layout());\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypes.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        checkLayout(f1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(f1$x0.$LAYOUT(), ARG_STRUCT);\n+        checkLayout(f1$return.layout(), RET_STRUCT);\n+        checkLayout(f1$x0.layout(), ARG_STRUCT);\n@@ -68,2 +68,2 @@\n-        checkLayout(SR_FUN.$LAYOUT(), RET_STRUCT);\n-        checkLayout(SA_FUN.$LAYOUT(), ARG_STRUCT);\n+        checkLayout(SR_FUN.layout(), RET_STRUCT);\n+        checkLayout(SA_FUN.layout(), ARG_STRUCT);\n@@ -71,3 +71,3 @@\n-        checkLayout(fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(fp1.$DESC, FUNC_DESC);\n+        checkLayout(fp1$return.layout(), RET_STRUCT);\n+        checkLayout(fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(fp1.descriptor(), FUNC_DESC);\n@@ -75,3 +75,3 @@\n-        checkLayout(SR_VAR.$LAYOUT(), RET_STRUCT);\n-        checkLayout(SA_VAR.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(fp2.$DESC, FUNC_DESC);\n+        checkLayout(SR_VAR.layout(), RET_STRUCT);\n+        checkLayout(SA_VAR.layout(), ARG_STRUCT);\n+        checkDescriptor(fp2.descriptor(), FUNC_DESC);\n@@ -79,3 +79,3 @@\n-        checkLayout(td1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(td1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(td1.$DESC, FUNC_DESC);\n+        checkLayout(td1$return.layout(), RET_STRUCT);\n+        checkLayout(td1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(td1.descriptor(), FUNC_DESC);\n@@ -83,3 +83,3 @@\n-        checkLayout(SR_DEF.$LAYOUT(), RET_STRUCT);\n-        checkLayout(SA_DEF.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(td2.$DESC, FUNC_DESC);\n+        checkLayout(SR_DEF.layout(), RET_STRUCT);\n+        checkLayout(SA_DEF.layout(), ARG_STRUCT);\n+        checkDescriptor(td2.descriptor(), FUNC_DESC);\n@@ -87,3 +87,3 @@\n-        checkLayout(Outer.fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(Outer.fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(Outer.fp1.$DESC, FUNC_DESC);\n+        checkLayout(Outer.fp1$return.layout(), RET_STRUCT);\n+        checkLayout(Outer.fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(Outer.fp1.descriptor(), FUNC_DESC);\n@@ -91,3 +91,3 @@\n-        checkLayout(Outer.SR_FLD.$LAYOUT(), RET_STRUCT);\n-        checkLayout(Outer.SA_FLD.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(Outer.fp2.$DESC, FUNC_DESC);\n+        checkLayout(Outer.SR_FLD.layout(), RET_STRUCT);\n+        checkLayout(Outer.SA_FLD.layout(), ARG_STRUCT);\n+        checkDescriptor(Outer.fp2.descriptor(), FUNC_DESC);\n@@ -95,3 +95,3 @@\n-        checkLayout(outer_var.fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(outer_var.fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(outer_var.fp1.$DESC, FUNC_DESC);\n+        checkLayout(outer_var.fp1$return.layout(), RET_STRUCT);\n+        checkLayout(outer_var.fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(outer_var.fp1.descriptor(), FUNC_DESC);\n@@ -99,3 +99,3 @@\n-        checkLayout(outer_var.SR_FLD_VAR.$LAYOUT(), RET_STRUCT);\n-        checkLayout(outer_var.SA_FLD_VAR.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(outer_var.fp2.$DESC, FUNC_DESC);\n+        checkLayout(outer_var.SR_FLD_VAR.layout(), RET_STRUCT);\n+        checkLayout(outer_var.SA_FLD_VAR.layout(), ARG_STRUCT);\n+        checkDescriptor(outer_var.fp2.descriptor(), FUNC_DESC);\n@@ -103,3 +103,3 @@\n-        checkLayout(outer_td.fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(outer_td.fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(outer_td.fp1.$DESC, FUNC_DESC);\n+        checkLayout(outer_td.fp1$return.layout(), RET_STRUCT);\n+        checkLayout(outer_td.fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(outer_td.fp1.descriptor(), FUNC_DESC);\n@@ -107,3 +107,3 @@\n-        checkLayout(outer_td.SR_FLD_DEF.$LAYOUT(), RET_STRUCT);\n-        checkLayout(outer_td.SA_FLD_DEF.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(outer_td.fp2.$DESC, FUNC_DESC);\n+        checkLayout(outer_td.SR_FLD_DEF.layout(), RET_STRUCT);\n+        checkLayout(outer_td.SA_FLD_DEF.layout(), ARG_STRUCT);\n+        checkDescriptor(outer_td.fp2.descriptor(), FUNC_DESC);\n@@ -111,3 +111,3 @@\n-        checkLayout(f3$return.fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(f3$return.fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(f3$return.fp1.$DESC, FUNC_DESC);\n+        checkLayout(f3$return.fp1$return.layout(), RET_STRUCT);\n+        checkLayout(f3$return.fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(f3$return.fp1.descriptor(), FUNC_DESC);\n@@ -115,3 +115,3 @@\n-        checkLayout(f3$return.SR_FLD_FUN_RET.$LAYOUT(), RET_STRUCT);\n-        checkLayout(f3$return.SA_FLD_FUN_RET.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(f3$return.fp2.$DESC, FUNC_DESC);\n+        checkLayout(f3$return.SR_FLD_FUN_RET.layout(), RET_STRUCT);\n+        checkLayout(f3$return.SA_FLD_FUN_RET.layout(), ARG_STRUCT);\n+        checkDescriptor(f3$return.fp2.descriptor(), FUNC_DESC);\n@@ -119,3 +119,3 @@\n-        checkLayout(f4$x0.fp1$return.$LAYOUT(), RET_STRUCT);\n-        checkLayout(f4$x0.fp1$x0.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(f4$x0.fp1.$DESC, FUNC_DESC);\n+        checkLayout(f4$x0.fp1$return.layout(), RET_STRUCT);\n+        checkLayout(f4$x0.fp1$x0.layout(), ARG_STRUCT);\n+        checkDescriptor(f4$x0.fp1.descriptor(), FUNC_DESC);\n@@ -123,3 +123,3 @@\n-        checkLayout(f4$x0.SR_FLD_FUN_ARG.$LAYOUT(), RET_STRUCT);\n-        checkLayout(f4$x0.SA_FLD_FUN_ARG.$LAYOUT(), ARG_STRUCT);\n-        checkDescriptor(f4$x0.fp2.$DESC, FUNC_DESC);\n+        checkLayout(f4$x0.SR_FLD_FUN_ARG.layout(), RET_STRUCT);\n+        checkLayout(f4$x0.SA_FLD_FUN_ARG.layout(), ARG_STRUCT);\n+        checkDescriptor(f4$x0.fp2.descriptor(), FUNC_DESC);\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesNames.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -56,6 +56,6 @@\n-        checkLayout(Outer.$LAYOUT(), UNDEFINED_STRUCT);\n-        checkLayout(outer_var.$LAYOUT(), UNDEFINED_STRUCT);\n-        checkLayout(outer_td.$LAYOUT(), UNDEFINED_STRUCT);\n-        checkLayout(outer_td$0.$LAYOUT(), UNDEFINED_STRUCT);\n-        checkLayout(f2$return.$LAYOUT(), UNDEFINED_STRUCT);\n-        checkLayout(f3$x0.$LAYOUT(), UNDEFINED_STRUCT);\n+        checkLayout(Outer.layout(), UNDEFINED_STRUCT);\n+        checkLayout(outer_var.layout(), UNDEFINED_STRUCT);\n+        checkLayout(outer_td.layout(), UNDEFINED_STRUCT);\n+        checkLayout(outer_td$0.layout(), UNDEFINED_STRUCT);\n+        checkLayout(f2$return.layout(), UNDEFINED_STRUCT);\n+        checkLayout(f3$x0.layout(), UNDEFINED_STRUCT);\n","filename":"test\/jtreg\/generator\/nestedTypes\/TestNestedTypesUnsupported.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        checkLayout(Foo.$LAYOUT());\n+        checkLayout(Foo.layout());\n@@ -54,1 +54,1 @@\n-                Foo.Baz.$LAYOUT().withoutName());\n+                Foo.Baz.layout().withoutName());\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderStruct.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        checkLayout(Foo.$LAYOUT());\n+        checkLayout(Foo.layout());\n@@ -54,1 +54,1 @@\n-                Foo.Baz.$LAYOUT().withoutName());\n+                Foo.Baz.layout().withoutName());\n","filename":"test\/jtreg\/generator\/outOfOrder\/TestOutOfOrderTypedef.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,8 +51,8 @@\n-        checkLayout(S1.$LAYOUT());\n-        checkLayout(S2.$LAYOUT());\n-        checkLayout(S3.$LAYOUT());\n-        checkLayout(S4.$LAYOUT());\n-        checkLayout(S5.$LAYOUT());\n-        checkLayout(S6.$LAYOUT());\n-        checkLayout(S7.$LAYOUT());\n-        checkLayout(S8.$LAYOUT());\n+        checkLayout(S1.layout());\n+        checkLayout(S2.layout());\n+        checkLayout(S3.layout());\n+        checkLayout(S4.layout());\n+        checkLayout(S5.layout());\n+        checkLayout(S6.layout());\n+        checkLayout(S7.layout());\n+        checkLayout(S8.layout());\n","filename":"test\/jtreg\/generator\/packed\/TestPackedStructs.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        var seg = special_pt$SEGMENT();\n+        var seg = special_pt();\n@@ -58,1 +58,1 @@\n-        seg = special_pt3d$SEGMENT();\n+        seg = special_pt3d();\n@@ -69,1 +69,1 @@\n-        var seg = iarr$SEGMENT();\n+        var seg = iarr();\n@@ -79,1 +79,1 @@\n-        seg = foo$SEGMENT();\n+        seg = foo();\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            assertEquals(((GroupLayout)Foo._struct.$LAYOUT()).memberLayouts().size(), 1);\n+            assertEquals(((GroupLayout)Foo._struct.layout()).memberLayouts().size(), 1);\n@@ -63,1 +63,1 @@\n-        assertEquals(((GroupLayout)Foo._union._struct.$LAYOUT()).memberLayouts().size(), 2);\n+        assertEquals(((GroupLayout)Foo._union._struct.layout()).memberLayouts().size(), 2);\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        GroupLayout g = (GroupLayout)Foo.$LAYOUT();\n+        GroupLayout g = (GroupLayout)Foo.layout();\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        var apply = func.class.getMethod(\"apply\", int.class);\n+        var apply = func.Function.class.getMethod(\"apply\", int.class);\n@@ -42,1 +42,1 @@\n-        apply = fptr.class.getMethod(\"apply\", int.class, int.class);\n+        apply = fptr.Function.class.getMethod(\"apply\", int.class, int.class);\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        var apply = func.class.getMethod(\"apply\", int.class);\n+        var apply = func.Function.class.getMethod(\"apply\", int.class);\n@@ -42,1 +42,1 @@\n-        apply = fptr.class.getMethod(\"apply\", int.class, int.class);\n+        apply = fptr.Function.class.getMethod(\"apply\", int.class, int.class);\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-        assertThrowsULE(() -> func$MH(), \"func\");\n@@ -68,3 +67,3 @@\n-        assertThrowsULE(() -> x$SEGMENT(), \"x\");\n-        assertThrowsULE(() -> y$SEGMENT(), \"y\");\n-        assertThrowsULE(() -> pt$SEGMENT(), \"pt\");\n+        assertThrowsULE(() -> x(), \"x\");\n+        assertThrowsULE(() -> y(), \"y\");\n+        assertThrowsULE(() -> pt(), \"pt\");\n","filename":"test\/jtreg\/generator\/testLinkageErrors\/TestLinkageErrors.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        GroupLayout g = (GroupLayout)AllTypes.$LAYOUT();\n+        GroupLayout g = (GroupLayout)AllTypes.layout();\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,1 +257,10 @@\n-        return findLayout(cls, \"\");\n+        Method method = findMethod(cls, \"layout\");\n+        assertNotNull(method);\n+        assertTrue(MemoryLayout.class.isAssignableFrom(method.getReturnType()));\n+        try {\n+            return (MemoryLayout)method.invoke(null);\n+        } catch (Exception exp) {\n+            System.err.println(exp);\n+            assertTrue(false, \"should not reach here\");\n+        }\n+        return null;\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -82,5 +82,10 @@\n-            \"int abc[10]\",\n-            \"float numbers[3]\",\n-            \"char *msg[5]\",\n-            \"int pixels[200][100]\",\n-            \"int points[10][20][30]\"));\n+            \"Getter for variable: int abc[10]\",\n+            \"Setter for variable: int abc[10]\",\n+            \"Getter for variable: float numbers[3]\",\n+            \"Setter for variable: float numbers[3]\",\n+            \"Getter for variable: char *msg[5]\",\n+            \"Setter for variable: char *msg[5]\",\n+            \"Getter for variable: int pixels[200][100]\",\n+            \"Setter for variable: int pixels[200][100]\",\n+            \"Getter for variable: int points[10][20][30]\",\n+            \"Setter for variable: int points[10][20][30]\"));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,3 +58,0 @@\n-            MemoryLayout fooVarLayout = findLayout(cls, \"foo\");\n-            assertNotNull(fooVarLayout);\n-\n@@ -69,6 +66,0 @@\n-            MemoryLayout foo2VarLayout = findLayout(cls, \"foo2\");\n-            assertNotNull(foo2VarLayout);\n-\n-            MemoryLayout barVarLayout = findLayout(cls, \"bar\");\n-            assertNotNull(barVarLayout);\n-\n@@ -83,3 +74,0 @@\n-            MemoryLayout bar2VarLayout = findLayout(cls, \"bar2\");\n-            assertNotNull(bar2VarLayout);\n-\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            Class<?> fiClass = loader.loadClass(\"func$f\");\n+            Class<?> fiClass = loader.loadClass(\"func$f$Function\");\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            Class<?> fiClass = loader.loadClass(\"func$f\");\n+            Class<?> fiClass = loader.loadClass(\"func$f$Function\");\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            assertNotNull(findMethod(headerClass, \"tzname$SEGMENT\"));\n+            assertNotNull(findMethod(headerClass, \"tzname\"));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-            cls = loader.loadClass(\"func\");\n+            cls = loader.loadClass(\"func$Function\");\n@@ -48,1 +48,1 @@\n-            cls = loader.loadClass(\"Foo$bar\");\n+            cls = loader.loadClass(\"Foo$bar$Function\");\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258405.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -153,8 +153,0 @@\n-        Method mh_getter = checkMethod(cls, name + \"$MH\", MethodHandle.class);\n-        MethodHandle mh = (MethodHandle) mh_getter.invoke(null);\n-        assertEquals(mh.type(), expectedType);\n-\n-        Object actualReturn = mh.invokeWithArguments(args);\n-        assertEquals(actualReturn.getClass(), expectedReturn.getClass());\n-        assertEquals(actualReturn, expectedReturn);\n-\n@@ -167,6 +159,0 @@\n-        Method layout_getter = checkMethod(cls, name + \"$LAYOUT\", MemoryLayout.class);\n-        assertEquals(layout_getter.invoke(null), expectedLayout);\n-\n-        Method addr_getter = checkMethod(cls, name + \"$SEGMENT\", MemorySegment.class);\n-        MemorySegment segment = (MemorySegment)addr_getter.invoke(null);\n-\n@@ -174,1 +160,1 @@\n-        assertEquals(getter.invoke(segment), expectedValue);\n+        assertEquals(getter.invoke(null), expectedValue);\n@@ -184,1 +170,1 @@\n-        Method layout_getter = checkMethod(structCls, \"$LAYOUT\", MemoryLayout.class);\n+        Method layout_getter = checkMethod(structCls, \"layout\", MemoryLayout.class);\n@@ -203,1 +189,1 @@\n-        Class<?> fiClass = loader.loadClass(\"com.acme.\" + name);\n+        Class<?> fiClass = loader.loadClass(\"com.acme.\" + name + \"$Function\");\n@@ -206,1 +192,3 @@\n-        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, Arena.class);\n+        Class<?> cbClass = loader.loadClass(\"com.acme.\" + name);\n+        assertNotNull(cbClass);\n+        checkMethod(cbClass, \"allocate\", MemorySegment.class, fiClass, Arena.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"}]}