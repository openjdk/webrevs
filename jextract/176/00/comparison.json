{"files":[{"patch":"@@ -179,0 +179,34 @@\n+#### Tracing support\n+\n+It is sometimes useful to inspect the parameters passed to a native call, especially when diagnosing application\n+bugs and\/or crashes. The code generated by the `jextract` tool supports *tracing* of native calls, that is, parameters\n+passed to native calls can be printed on the standard output.\n+\n+To enable the tracing support, just pass the `-Djextract.trace.downcalls=true` flag to the launcher used to start the application.\n+Below we show an excerpt of the output when running the [OpenGL example](samples\/opengl) with tracing support enabled:\n+\n+```\n+glutInit(MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 }, MemorySegment{ address: 0x7fa6b03d6400, byteSize: 4 })\n+glutInitDisplayMode(18)\n+glutInitWindowSize(900, 900)\n+glutCreateWindow(MemorySegment{ address: 0x7fa6b03f8e70, byteSize: 14 })\n+glClearColor(0.0, 0.0, 0.0, 0.0)\n+glShadeModel(7425)\n+glLightfv(16384, 4611, MemorySegment{ address: 0x7fa6b03de8d0, byteSize: 16 })\n+glLightfv(16384, 4608, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glLightfv(16384, 4609, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glLightfv(16384, 4610, MemorySegment{ address: 0x7fa6b0634840, byteSize: 16 })\n+glMaterialfv(1028, 5633, MemorySegment{ address: 0x7fa6b0634860, byteSize: 4 })\n+glEnable(2896)\n+glEnable(16384)\n+glEnable(2929)\n+glutDisplayFunc(MemorySegment{ address: 0x7fa6a002e820, byteSize: 0 })\n+glutIdleFunc(MemorySegment{ address: 0x7fa6a015a620, byteSize: 0 })\n+glutMainLoop()\n+glClear(16640)\n+glPushMatrix()\n+glRotatef(-20.0, 1.0, 1.0, 0.0)\n+glRotatef(0.0, 0.0, 1.0, 0.0)\n+glutSolidTeapot(0.5)\n+```\n+\n","filename":"README.md","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.Arrays;\n@@ -49,0 +50,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -151,0 +154,4 @@\n+        String paramList = String.join(\", \", finalParamNames);\n+        String traceArgList = paramList.isEmpty() ?\n+                STR.\"\\\"\\{nativeName}\\\"\" :\n+                STR.\"\\\"\\{nativeName}\\\", \\{paramList}\";\n@@ -169,1 +176,4 @@\n-                        \\{returnExpr}mh$.invokeExact(\\{String.join(\", \", finalParamNames)});\n+                        if (TRACE_DOWNCALLS) {\n+                            traceDowncall(\\{traceArgList});\n+                        }\n+                        \\{returnExpr}mh$.invokeExact(\\{paramList});\n@@ -192,1 +202,4 @@\n-                            \\{returnExpr}mh$.invokeExact(\\{String.join(\", \", finalParamNames)});\n+                            if (TRACE_DOWNCALLS) {\n+                                traceDowncall(\\{traceArgList});\n+                            }\n+                            \\{returnExpr}mh$.invokeExact(\\{paramList});\n@@ -257,0 +270,9 @@\n+            static final boolean TRACE_DOWNCALLS = Boolean.getBoolean(\"jextract.trace.downcalls\");\n+\n+            static void traceDowncall(String name, Object... args) {\n+                 String traceArgs = Arrays.stream(args)\n+                               .map(Object::toString)\n+                               .collect(Collectors.joining(\", \"));\n+                 System.out.printf(\"%s(%s)\\\\n\", name, traceArgs);\n+            }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -74,4 +74,1 @@\n-            import java.lang.invoke.MethodHandle;\n-            import java.lang.invoke.MethodHandles;\n-            import java.lang.invoke.VarHandle;\n-            import java.nio.ByteOrder;\n+            import java.lang.invoke.*;\n@@ -79,0 +76,4 @@\n+            import java.nio.ByteOrder;\n+            import java.util.*;\n+            import java.util.stream.*;\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}