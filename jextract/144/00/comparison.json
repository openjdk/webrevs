{"files":[{"patch":"@@ -27,4 +27,0 @@\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n@@ -90,4 +86,1 @@\n-        indent();\n-        append(modifiers);\n-        append(\" \");\n-        append(kind.kindName + \" \" + className);\n+        String extendsExpr = \"\";\n@@ -95,2 +88,1 @@\n-            append(\" extends \");\n-            append(superName);\n+            extendsExpr = \" extends \" + superName;\n@@ -98,1 +90,4 @@\n-        append(\" {\\n\\n\");\n+        appendLines(STR.\"\"\"\n+            \\{modifiers} \\{kind.kindName} \\{className}\\{extendsExpr} {\n+\n+            \"\"\");\n@@ -136,0 +131,11 @@\n+    \/\/ append multiple lines (indentation is added automatically)\n+    void appendLines(String s) {\n+        sb.appendLines(s);\n+    }\n+\n+    \/\/ increase indentation before appending lines\n+    \/\/ decrease afterwards\n+    void appendIndentedLines(String s) {\n+        sb.appendIndentedLines(s);\n+    }\n+\n@@ -137,9 +143,4 @@\n-        incrAlign();\n-        indent();\n-        append(\"\/\/ Suppresses default constructor, ensuring non-instantiability.\\n\");\n-        indent();\n-        append(\"private \");\n-        append(className);\n-        append(\"() {}\");\n-        append('\\n');\n-        decrAlign();\n+        appendLines(STR.\"\"\"\n+            \/\/ Suppresses default constructor, ensuring non-instantiability.\n+            private \\{className}() {}\n+            \"\"\");\n@@ -153,15 +154,8 @@\n-        indent();\n-        append(\"\/**\\n\");\n-        if (!header.isEmpty()) {\n-            indent();\n-            append(\" * \");\n-            append(header);\n-            append(\"\\n\");\n-        }\n-        indent();\n-        append(\" * {@snippet lang=c :\\n\");\n-        append(CDeclarationPrinter.declaration(decl, \" \".repeat(align()*4) + \" * \"));\n-        indent();\n-        append(\" * }\\n\");\n-        indent();\n-        append(\" *\/\\n\");\n+        appendLines(STR.\"\"\"\n+            \/**\n+            \\{!header.isEmpty() ? STR.\" * \\{header}\\n\" : \"\"}\\\n+             * {@snippet lang=c :\n+             \\{CDeclarationPrinter.declaration(decl, \" \".repeat(align()*4) + \" * \")}\n+             * }\n+             *\/\n+            \"\"\");\n@@ -171,11 +165,7 @@\n-        indent();\n-        append(\"\/**\\n\");\n-        indent();\n-        append(\" * {@snippet lang=c :\\n\");\n-        append(\" * \");\n-        append(CDeclarationPrinter.declaration(funcType, name));\n-        append(\";\\n\");\n-        indent();\n-        append(\" * }\\n\");\n-        indent();\n-        append(\" *\/\\n\");\n+        appendLines(STR.\"\"\"\n+            \/**\n+             * {@snippet lang=c :\n+             * \\{CDeclarationPrinter.declaration(funcType, name)};\n+             * }\n+             *\/\n+            \"\"\");\n@@ -189,18 +179,5 @@\n-        indent();\n-        append(mods + \" \" + constant.type().getSimpleName() + \" \" + getterName + \"() {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return \");\n-        if (nullCheck) {\n-            append(\"RuntimeHelper.requireNonNull(\");\n-        }\n-        append(constant.accessExpression());\n-        if (nullCheck) {\n-            append(\",\\\"\");\n-            append(symbolName);\n-            append(\"\\\")\");\n-        }\n-        append(\";\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n+        appendLines(STR.\"\"\"\n+            \\{mods} \\{constant.type().getSimpleName()} \\{getterName}() {\n+                return \\{nullCheck ? STR.\"RuntimeHelper.requireNonNull(\\{constant}, \\\"\\{symbolName}\\\")\" : constant};\n+            }\n+            \"\"\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":41,"deletions":64,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.util.StringJoiner;\n@@ -162,0 +163,5 @@\n+\n+        @Override\n+        public String toString() {\n+            return accessExpression();\n+        }\n@@ -300,1 +306,0 @@\n-            incrAlign();\n@@ -302,8 +307,3 @@\n-            indent();\n-            append(MEMBER_MODS + \" MethodHandle \");\n-            append(mhConst.constantName + \" = RuntimeHelper.upcallHandle(\");\n-            append(className + \".class, \");\n-            append(\"\\\"\" + methodName + \"\\\", \");\n-            append(functionDesc.accessExpression());\n-            append(\");\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final MethodHandle \\{mhConst.constantName} = RuntimeHelper.upcallHandle(\\{className}.class, \"\\{methodName}\", \\{functionDesc});\n+                \"\"\");\n@@ -315,2 +315,0 @@\n-            incrAlign();\n-            indent();\n@@ -318,4 +316,3 @@\n-            append(MEMBER_MODS + \" VarHandle \" + vhConst.constantName + \" = \");\n-            append(layoutConstant.accessExpression());\n-            append(\".varHandle();\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final VarHandle \\{vhConst.constantName} = \\{layoutConstant}.varHandle();\n+                \"\"\");\n@@ -325,0 +322,9 @@\n+        private static String pathElementStr(String nativeName, List<String> prefixElementNames) {\n+            StringJoiner joiner = new StringJoiner(\", \");\n+            for (String prefixElementName : prefixElementNames) {\n+                joiner.add(STR.\"MemoryLayout.PathElement.groupElement(\\\"\\{prefixElementName}\\\")\");\n+            }\n+            joiner.add(STR.\"MemoryLayout.PathElement.groupElement(\\\"\\{nativeName}\\\")\");\n+            return joiner.toString();\n+        }\n+\n@@ -327,2 +333,0 @@\n-            incrAlign();\n-            indent();\n@@ -330,12 +334,3 @@\n-            append(MEMBER_MODS + \" VarHandle \" + vhConst.constantName + \" = \");\n-            append(layoutConstant.accessExpression());\n-            append(\".varHandle(\");\n-            String prefix = \"\";\n-            for (String prefixElementName : prefixElementNames) {\n-                append(prefix + \"MemoryLayout.PathElement.groupElement(\\\"\" + prefixElementName + \"\\\")\");\n-                prefix = \", \";\n-            }\n-            append(prefix + \"MemoryLayout.PathElement.groupElement(\\\"\" + nativeName + \"\\\")\");\n-            append(\")\");\n-            append(\";\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final VarHandle \\{vhConst.constantName} = \\{layoutConstant}.varHandle(\\{pathElementStr(nativeName, prefixElementNames)});\n+                \"\"\");\n@@ -435,4 +430,0 @@\n-            incrAlign();\n-            indent();\n-            append(MEMBER_MODS);\n-            append(\" MemorySegment \");\n@@ -440,5 +431,4 @@\n-            append(segConstant.constantName);\n-            append(\" = RuntimeHelper.CONSTANT_ALLOCATOR.allocateFrom(\\\"\");\n-            append(Utils.quote(Objects.toString(value)));\n-            append(\"\\\");\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final MemorySegment \\{segConstant.constantName} =\n+                        RuntimeHelper.CONSTANT_ALLOCATOR.allocateFrom(\"\\{Utils.quote(Objects.toString(value))}\");\n+                \"\"\");\n@@ -449,4 +439,0 @@\n-            incrAlign();\n-            indent();\n-            append(MEMBER_MODS);\n-            append(\" MemorySegment \");\n@@ -454,5 +440,4 @@\n-            append(segConstant.constantName);\n-            append(\" = MemorySegment.ofAddress(\");\n-            append(((Number)value).longValue());\n-            append(\"L);\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final MemorySegment \\{segConstant.constantName} =\n+                        MemorySegment.ofAddress(\\{((Number)value).longValue()}L);\n+                \"\"\");\n@@ -464,4 +449,0 @@\n-            incrAlign();\n-            indent();\n-            append(MEMBER_MODS);\n-            append(\" MemorySegment \");\n@@ -469,7 +450,4 @@\n-            append(segConstant.constantName);\n-            append(\" = \");\n-            append(\"RuntimeHelper.lookupGlobalVariable(\");\n-            append(\"\\\"\" + nativeName + \"\\\", \");\n-            append(layoutConstant.accessExpression());\n-            append(\");\\n\");\n-            decrAlign();\n+            appendIndentedLines(STR.\"\"\"\n+                static final MemorySegment \\{segConstant.constantName} =\n+                        RuntimeHelper.lookupGlobalVariable(\"\\{nativeName}\", \\{layoutConstant});\n+                \"\"\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Constants.java","additions":36,"deletions":58,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-    private static final String MEMBER_MODS = \"static\";\n-\n@@ -71,0 +69,32 @@\n+    private void emitFunctionalInterfaceMethod() {\n+        appendIndentedLines(STR.\"\"\"\n+            \\{fiRetType()} apply(\\{paramExprs(\"\")});\n+            \"\"\");\n+    }\n+\n+    private void emitFunctionalFactories() {\n+        Constant functionDesc = constants.addFunctionDesc(fiDesc);\n+        Constant upcallHandle = constants.addUpcallMethodHandle(fullName(), \"apply\", fiDesc);\n+        appendIndentedLines(STR.\"\"\"\n+            static MemorySegment allocate(\\{className()} fi, Arena scope) {\n+                return RuntimeHelper.upcallStub(\\{upcallHandle}, fi, \\{functionDesc}, scope);\n+            }\n+            \"\"\");\n+    }\n+\n+    private void emitFunctionalFactoryForPointer() {\n+        Constant mhConstant = constants.addVirtualDowncallMethodHandle(fiDesc);\n+        appendIndentedLines(STR.\"\"\"\n+            static \\{className()} ofAddress(MemorySegment addr, Arena arena) {\n+                MemorySegment symbol = addr.reinterpret(arena, null);\n+                return (\\{paramExprs(\"_\")}) -> {\n+                    try {\n+                        \\{retExpr()} \\{mhConstant}.invokeExact(symbol\\{otherArgExprs()});\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n+            }\n+            \"\"\");\n+    }\n+\n@@ -80,4 +110,2 @@\n-    private void emitFunctionalInterfaceMethod() {\n-        incrAlign();\n-        indent();\n-        append(fiType.returnType().getName() + \" apply(\");\n+    private String paramExprs(String paramNamePrefix) {\n+        StringBuilder result = new StringBuilder();\n@@ -86,3 +114,3 @@\n-            append(delim + fiType.parameterType(i).getName());\n-            append(\" \");\n-            append(parameterName(i));\n+            result.append(delim).append(fiType.parameterType(i).getSimpleName());\n+            result.append(\" \");\n+            result.append(paramNamePrefix).append(parameterName(i));\n@@ -91,2 +119,1 @@\n-        append(\");\\n\");\n-        decrAlign();\n+        return result.toString();\n@@ -95,14 +122,2 @@\n-    private void emitFunctionalFactories() {\n-        Constant functionDesc = constants.addFunctionDesc(fiDesc);\n-        Constant upcallHandle = constants.addUpcallMethodHandle(fullName(), \"apply\", fiDesc);\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, Arena scope) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return RuntimeHelper.upcallStub(\" +\n-            upcallHandle.accessExpression() + \", fi, \" + functionDesc.accessExpression() + \", scope);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+    private String fiRetType() {\n+        return fiType.returnType().getSimpleName();\n@@ -111,24 +126,6 @@\n-    private void emitFunctionalFactoryForPointer() {\n-        Constant mhConstant = constants.addVirtualDowncallMethodHandle(fiDesc);\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, Arena arena) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"MemorySegment symbol = addr.reinterpret(\");\n-        append(\"arena, null);\\n\");\n-        indent();\n-        append(\"return (\");\n-        String delim = \"\";\n-        for (int i = 0 ; i < fiType.parameterCount(); i++) {\n-            append(delim + fiType.parameterType(i).getName());\n-            append(\" \");\n-            append(\"_\" + parameterName(i));\n-            delim = \", \";\n-        }\n-        append(\") -> {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"try {\\n\");\n-        incrAlign();\n-        indent();\n+    private String downcallRetType() {\n+        return fiType.returnType().getSimpleName();\n+    }\n+\n+    private String retExpr() {\n+        String retExpr = \"\";\n@@ -136,1 +133,1 @@\n-            append(\"return (\" + fiType.returnType().getName() + \")\");\n+            retExpr = STR.\"return (\\{fiRetType()})\";\n@@ -139,1 +136,1 @@\n-                append(\"(\" + downcallType.returnType().getName() + \")\");\n+                retExpr += STR.\" (\\{downcallRetType()})\";\n@@ -142,1 +139,5 @@\n-        append(mhConstant.accessExpression() + \".invokeExact(symbol\");\n+        return retExpr;\n+    }\n+\n+    private String otherArgExprs() {\n+        String argsExprs = \"\";\n@@ -144,1 +145,1 @@\n-            String params = IntStream.range(0, fiType.parameterCount())\n+            argsExprs += \", \" + IntStream.range(0, fiType.parameterCount())\n@@ -155,1 +156,0 @@\n-            append(\", \" + params);\n@@ -157,17 +157,1 @@\n-        append(\");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"} catch (Throwable ex$) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"throw new AssertionError(\\\"should not reach here\\\", ex$);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"};\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        return argsExprs;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":55,"deletions":71,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.StringJoiner;\n@@ -93,1 +94,1 @@\n-        emitFunctionWrapper(mhConstant, javaName, nativeName, downcallType, needsAllocator, isVarargs, parameterNames, funcTree);\n+        emitFunctionWrapper(mhConstant, javaName, downcallType, needsAllocator, isVarargs, parameterNames, funcTree);\n@@ -103,0 +104,2 @@\n+    private static List<String> finalizeParameterNames(List<String> parameterNames, boolean needsAllocator, boolean isVarArg) {\n+        List<String> result = new ArrayList<>();\n@@ -104,6 +107,0 @@\n-    private void emitFunctionWrapper(Constant mhConstant, String javaName, String nativeName, MethodType declType,\n-                                     boolean needsAllocator, boolean isVarargs, List<String> parameterNames, Declaration decl) {\n-        incrAlign();\n-        emitDocComment(decl);\n-        indent();\n-        append(MEMBER_MODS + \" \");\n@@ -111,4 +108,1 @@\n-            \/\/ needs allocator parameter\n-            declType = declType.insertParameterTypes(0, SegmentAllocator.class);\n-            parameterNames = new ArrayList<>(parameterNames);\n-            parameterNames.add(0, \"allocator\");\n+            result.add(\"allocator\");\n@@ -116,13 +110,8 @@\n-        List<String> pExprs = emitFunctionWrapperDecl(javaName, declType, isVarargs, parameterNames);\n-        append(\" {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"var mh$ = \");\n-        append(mhConstant.getterName(javaName));\n-        append(\"();\\n\");\n-        indent();\n-        append(\"try {\\n\");\n-        incrAlign();\n-        indent();\n-        if (!declType.returnType().equals(void.class)) {\n-            append(\"return (\" + declType.returnType().getName() + \")\");\n+\n+        int i = 0;\n+        for (; i < parameterNames.size(); i++) {\n+            String name = parameterNames.get(i);\n+            if (name.isEmpty()) {\n+                name = \"x\" + i;\n+            }\n+            result.add(name);\n@@ -130,14 +119,6 @@\n-        append(\"mh$.invokeExact(\" + String.join(\", \", pExprs) + \");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"} catch (Throwable ex$) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"throw new AssertionError(\\\"should not reach here\\\", ex$);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+\n+        if (isVarArg) {\n+            result.add(\"x\" + i);\n+        }\n+\n+        return result;\n@@ -146,14 +127,7 @@\n-    private List<String> emitFunctionWrapperDecl(String javaName, MethodType methodType, boolean isVarargs, List<String> paramNames) {\n-        append(methodType.returnType().getSimpleName() + \" \" + javaName + \"(\");\n-        String delim = \"\";\n-        List<String> pExprs = new ArrayList<>();\n-        final int numParams = paramNames.size();\n-        for (int i = 0 ; i < numParams; i++) {\n-            String pName = paramNames.get(i);\n-            if (pName.isEmpty()) {\n-                pName = \"x\" + i;\n-            }\n-            pExprs.add(pName);\n-            Class<?> pType = methodType.parameterType(i);\n-            append(delim + pType.getSimpleName() + \" \" + pName);\n-            delim = \", \";\n+    private static String paramExprs(MethodType type, List<String> parameterNames, boolean isVarArg) {\n+        assert parameterNames.size() >= type.parameterCount();\n+        StringJoiner sb = new StringJoiner(\", \");\n+        int i = 0;\n+        for (; i < type.parameterCount(); i++) {\n+            String pName = parameterNames.get(i);\n+            sb.add(type.parameterType(i).getSimpleName() + \" \" + pName);\n@@ -161,4 +135,3 @@\n-        if (isVarargs) {\n-            String lastArg = \"x\" + numParams;\n-            append(delim + \"Object... \" + lastArg);\n-            pExprs.add(lastArg);\n+\n+        if (isVarArg) {\n+            sb.add(\"Object... \" + parameterNames.get(i));\n@@ -166,2 +139,2 @@\n-        append(\")\");\n-        return pExprs;\n+\n+        return sb.toString();\n@@ -170,5 +143,12 @@\n-    private void emitFunctionalInterfaceGetter(String fiName, String javaName) {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" \");\n-        append(fiName + \" \" + javaName + \" () {\\n\");\n+    private void emitFunctionWrapper(Constant mhConstant, String javaName, MethodType declType, boolean needsAllocator,\n+                                     boolean isVarArg, List<String> parameterNames, Declaration decl) {\n+        List<String> finalParamNames = finalizeParameterNames(parameterNames, needsAllocator, isVarArg);\n+        if (needsAllocator) {\n+            declType = declType.insertParameterTypes(0, SegmentAllocator.class);\n+        }\n+\n+        String retType = declType.returnType().getSimpleName();\n+        String returnExpr = \"\";\n+        if (!declType.returnType().equals(void.class)) {\n+            returnExpr = STR.\"return (\\{retType}) \";\n+        }\n@@ -176,5 +156,11 @@\n-        indent();\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), Arena.global());\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n+        emitDocComment(decl);\n+        appendLines(STR.\"\"\"\n+            public static \\{retType} \\{javaName}(\\{paramExprs(declType, finalParamNames, isVarArg)}) {\n+                var mh$ = \\{mhConstant.getterName(javaName)}();\n+                try {\n+                    \\{returnExpr}mh$.invokeExact(\\{String.join(\", \", finalParamNames)});\n+                } catch (Throwable ex$) {\n+                   throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            }\n+            \"\"\");\n@@ -184,0 +170,8 @@\n+    private void emitFunctionalInterfaceGetter(String fiName, String javaName) {\n+        appendIndentedLines(STR.\"\"\"\n+            public static \\{fiName} \\{javaName}() {\n+                return \\{fiName}.ofAddress(\\{javaName}$get(), Arena.global());\n+            }\n+            \"\"\");\n+    }\n+\n@@ -191,0 +185,2 @@\n+            String declType = Utils.layoutDeclarationType(primType.kind().layout().orElseThrow()).getSimpleName();\n+            Constant layoutConstant = constants.addLayout(kind.layout().get());\n@@ -195,8 +191,3 @@\n-            indent();\n-            append(MEMBER_MODS);\n-            append(\" final\");\n-            append(\" \" + Utils.layoutDeclarationType(primType.kind().layout().orElseThrow()).getSimpleName());\n-            append(\" \" + name);\n-            append(\" = \");\n-            append(constants.addLayout(kind.layout().get()).accessExpression());\n-            append(\";\\n\");\n+            appendLines(STR.\"\"\"\n+                public static final \\{declType} \\{name} = \\{layoutConstant};\n+                \"\"\");\n@@ -212,0 +203,1 @@\n+        Constant layoutConstant = constants.addLayout(TypeImpl.PointerImpl.POINTER_LAYOUT);\n@@ -216,8 +208,3 @@\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" final\");\n-        append(\" AddressLayout \");\n-        append(name);\n-        append(\" = \");\n-        append(constants.addLayout(TypeImpl.PointerImpl.POINTER_LAYOUT).accessExpression());\n-        append(\";\\n\");\n+        appendLines(STR.\"\"\"\n+            public static final AddressLayout \\{name} = \\{layoutConstant};\n+            \"\"\");\n@@ -238,14 +225,5 @@\n-        indent();\n-        append(MEMBER_MODS + \" \" + type.getSimpleName() + \" \" + javaName + \"$get() {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return (\" + type.getName() + \") \");\n-        append(vhConstant.accessExpression());\n-        append(\".get(RuntimeHelper.requireNonNull(\");\n-        append(segmentConstant.accessExpression());\n-        append(\", \\\"\");\n-        append(nativeName);\n-        append(\"\\\"), 0L);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n+        appendLines(STR.\"\"\"\n+            public static \\{type.getSimpleName()} \\{javaName}$get() {\n+                return (\\{type.getSimpleName()}) \\{vhConstant}.get(RuntimeHelper.requireNonNull(\\{segmentConstant}, \"\\{nativeName}\"), 0L);\n+            }\n+            \"\"\");\n@@ -259,13 +237,5 @@\n-        indent();\n-        append(MEMBER_MODS + \" void \" + javaName + \"$set(\" + type.getSimpleName() + \" x) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(vhConstant.accessExpression());\n-        append(\".set(RuntimeHelper.requireNonNull(\");\n-        append(segmentConstant.accessExpression());\n-        append(\", \\\"\");\n-        append(nativeName);\n-        append(\"\\\"), 0L, x);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n+        appendLines(STR.\"\"\"\n+            public static void \\{javaName}$set(\\{type.getSimpleName()} x) {\n+                \\{vhConstant}.set(RuntimeHelper.requireNonNull(\\{segmentConstant}, \"\\{nativeName}\"), 0L, x);\n+            }\n+            \"\"\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":81,"deletions":111,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -124,0 +123,10 @@\n+\n+    public void appendLines(String s) {\n+        sb.append(s.indent(align * 4));\n+    }\n+\n+    public void appendIndentedLines(String s) {\n+        incrAlign();\n+        appendLines(s);\n+        decrAlign();\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/SourceFileBuilder.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -179,11 +178,5 @@\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" \");\n-        append(fiName + \" \" + javaName + \"(MemorySegment segment, Arena scope) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment), scope);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static \\{fiName} \\{javaName}(MemorySegment segment, Arena scope) {\n+                return \\{fiName}.ofAddress(\\{javaName}$get(segment), scope);\n+            }\n+            \"\"\");\n@@ -193,2 +186,0 @@\n-        incrAlign();\n-        indent();\n@@ -196,9 +187,5 @@\n-        append(MEMBER_MODS + \" \" + type.getSimpleName() + \" \" + javaName + \"$get(MemorySegment \" + seg + \") {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return (\" + type.getName() + \")\"\n-                + vhConstant.accessExpression() + \".get(\" + seg + \", 0L);\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static \\{type.getSimpleName()} \\{javaName}$get(MemorySegment \\{seg}) {\n+                return (\\{type.getName()}) \\{vhConstant}.get(\\{seg}, 0L);\n+            }\n+            \"\"\");\n@@ -208,2 +195,0 @@\n-        incrAlign();\n-        indent();\n@@ -212,9 +197,5 @@\n-        String param = MemorySegment.class.getSimpleName() + \" \" + seg;\n-        append(MEMBER_MODS + \" void \" + javaName + \"$set(\" + param + \", \" + type.getSimpleName() + \" \" + x + \") {\\n\");\n-        incrAlign();\n-        indent();\n-        append(vhConstant.accessExpression() + \".set(\" + seg + \", 0L, \" + x + \");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static void \\{javaName}$set(MemorySegment \\{seg}, \\{type.getSimpleName()} \\{x}) {\n+                \\{vhConstant}.set(\\{seg}, 0L, \\{x});\n+            }\n+            \"\"\");\n@@ -235,2 +216,0 @@\n-        incrAlign();\n-        indent();\n@@ -238,12 +217,5 @@\n-        append(MEMBER_MODS + \" MemorySegment \" + javaName + \"$slice(MemorySegment \" + seg + \") {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return \" + seg + \".asSlice(\");\n-        append(structLayout.byteOffset(elementPaths(nativeName)));\n-        append(\", \");\n-        append(layout.byteSize());\n-        append(\");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static MemorySegment \\{javaName}$slice(MemorySegment \\{seg}) {\n+                return \\{seg}.asSlice(\\{structLayout.byteOffset(elementPaths(nativeName))}, \\{layout.byteSize()});\n+            }\n+            \"\"\");\n@@ -253,5 +225,3 @@\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" long sizeof() { return $LAYOUT().byteSize(); }\\n\");\n-        decrAlign();\n+        appendIndentedLines(\"\"\"\n+            public static long sizeof() { return $LAYOUT().byteSize(); }\n+            \"\"\");\n@@ -261,5 +231,3 @@\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\\n\");\n-        decrAlign();\n+        appendIndentedLines(\"\"\"\n+            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+            \"\"\");\n@@ -269,11 +237,5 @@\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocateArray(long len, SegmentAllocator allocator) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(\"\"\"\n+            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {\n+                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+            }\n+            \"\"\");\n@@ -283,5 +245,5 @@\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n-        decrAlign();\n+        appendIndentedLines(\"\"\"\n+            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) {\n+                return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);\n+            }\n+            \"\"\");\n@@ -291,2 +253,0 @@\n-        incrAlign();\n-        indent();\n@@ -295,13 +255,5 @@\n-        String params = MemorySegment.class.getSimpleName() + \" \" + seg + \", long \" + index;\n-        append(MEMBER_MODS + \" \" + type.getSimpleName() + \" \" + javaName + \"$get(\" + params + \") {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return (\" + type.getName() + \")\");\n-        append(vhConstant.accessExpression());\n-        append(\".get(\");\n-        append(seg + \", \");\n-        append(index + \" * sizeof());\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static \\{type.getSimpleName()} \\{javaName}$get(MemorySegment \\{seg}, long \\{index}) {\n+                return (\\{type.getName()}) \\{vhConstant}.get(\\{seg}, \\{index} * sizeof());\n+            }\n+            \"\"\");\n@@ -311,2 +263,0 @@\n-        incrAlign();\n-        indent();\n@@ -316,15 +266,5 @@\n-        String params = MemorySegment.class.getSimpleName() + \" \" + seg +\n-            \", long \" + index + \", \" + type.getSimpleName() + \" \" + x;\n-        append(MEMBER_MODS + \" void \" + javaName + \"$set(\" + params + \") {\\n\");\n-        incrAlign();\n-        indent();\n-        append(vhConstant.accessExpression());\n-        append(\".set(\");\n-        append(seg + \", \");\n-        append(index + \" * sizeof(), \");\n-        append(x);\n-        append(\");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n+        appendIndentedLines(STR.\"\"\"\n+            public static void \\{javaName}$set(MemorySegment \\{seg}, long \\{index}, \\{type.getSimpleName()} \\{x}) {\n+                \\{vhConstant}.set(\\{seg}, \\{index} * sizeof(), \\{x});\n+            }\n+            \"\"\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":46,"deletions":106,"binary":false,"changes":152,"status":"modified"}]}