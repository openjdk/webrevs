{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,9 @@\n-            private static final MethodHandle UP$MH = %1$s.upcallHandle(%2$s.%3$s.class, \"apply\", $DESC);\n+            static MethodHandle upcallHandle() {\n+                try {\n+                    return MethodHandles.lookup().findVirtual(%2$s.%3$s.class, \"apply\", $DESC.toMethodType());\n+                } catch (ReflectiveOperationException ex) {\n+                    throw new AssertionError(ex);\n+                }\n+            }\n+\n+            private static final MethodHandle UP$MH = upcallHandle();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -367,8 +367,0 @@\n-            static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n-                try {\n-                    return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n-                } catch (ReflectiveOperationException ex) {\n-                    throw new AssertionError(ex);\n-                }\n-            }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}