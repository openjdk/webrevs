{"files":[{"patch":"@@ -163,0 +163,9 @@\n+    final void emitPrivateConstructor() {\n+        appendIndentedLines(\"\"\"\n+\n+            private %1$s() {\n+                \/\/ Should not be called directly\n+            }\n+            \"\"\", className);\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        super(builder, isNested ? \"public static\" : \"public\", Kind.CLASS, className, null, enclosing, runtimeHelperName);\n+        super(builder, isNested ? \"public final static\" : \"public final\", Kind.CLASS, className, null, enclosing, runtimeHelperName);\n@@ -58,1 +58,1 @@\n-        fib.emitDefaultConstructor();\n+        fib.emitPrivateConstructor();\n@@ -86,1 +86,9 @@\n-            private static final MethodHandle UP$MH = %1$s.upcallHandle(%2$s.%3$s.class, \"apply\", $DESC);\n+            private static MethodHandle upcallHandle() {\n+                try {\n+                    return MethodHandles.lookup().findVirtual(%2$s.%3$s.class, \"apply\", $DESC.toMethodType());\n+                } catch (ReflectiveOperationException ex) {\n+                    throw new AssertionError(ex);\n+                }\n+            }\n+\n+            private static final MethodHandle UP$MH = upcallHandle();\n@@ -102,1 +110,1 @@\n-        String paramStr = methodType.parameterCount() != 0 ? String.format(\",%1$s\", paramExprs()) : \"\";\n+        String paramStr = methodType.parameterCount() != 0 ? String.format(\", %1$s\", paramExprs()) : \"\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -367,8 +367,0 @@\n-            static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n-                try {\n-                    return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n-                } catch (ReflectiveOperationException ex) {\n-                    throw new AssertionError(ex);\n-                }\n-            }\n-\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-        checkDefaultConstructor(fpClass);\n+        checkPrivateConstructor(fpClass);\n@@ -231,0 +231,9 @@\n+\n+    private void checkPrivateConstructor(Class<?> cls) {\n+        try {\n+            Constructor<?> c = cls.getDeclaredConstructor();\n+            assertEquals(c.getModifiers(), Modifier.PRIVATE, \"Unexpected constructor modifiers\");\n+        } catch (ReflectiveOperationException ex) {\n+            fail(\"Private constructor not found!\");\n+        }\n+    }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}