{"files":[{"patch":"@@ -9,0 +9,15 @@\n+sourceSets {\n+    test {\n+        java {\n+            srcDirs = ['test\/jtreg', file(\"test\/jtreg\/generator\").listFiles(), 'test\/lib', 'test\/testng']\n+            \/\/ exclude all test files from compilation. Jtreg compiles these for us when tests run\n+            exclude \"**\/*\"\n+        }\n+    }\n+}\n+\n+dependencies {\n+    \/\/ add jtreg jars as dependencies of tests\n+    testImplementation fileTree(dir: findProperty(\"jtreg_home\") + \"\/lib\/\", include: \"*.jar\")\n+}\n+\n@@ -28,2 +43,1 @@\n-def jextract_jmod_libs_dir = \"$buildDir\/jextract_jmod_libs\"\n-def jextract_jmod_conf_dir = \"$buildDir\/jextract_jmod_conf\";\n+def jextract_jmod_inputs = \"$buildDir\/jmod_inputs\"\n@@ -53,8 +67,2 @@\n-task copyLibClang(type: Copy) {\n-    dependsOn jar\n-\n-    def dir_prefix_len = \"$buildDir\".length()\n-    def libs_dir = jextract_jmod_libs_dir.substring(dir_prefix_len)\n-    def conf_dir = jextract_jmod_conf_dir.substring(dir_prefix_len)\n-\n-    into(\"$buildDir\")\n+task copyLibClang(type: Sync) {\n+    into(\"$buildDir\/jmod_inputs\")\n@@ -65,1 +73,2 @@\n-        into(libs_dir)\n+        exclude(\"clang.exe\")\n+        into(\"libs\")\n@@ -70,1 +79,1 @@\n-        into(conf_dir + \"\/jextract\")\n+        into(\"conf\/jextract\")\n@@ -75,1 +84,1 @@\n-    dependsOn copyLibClang\n+    dependsOn jar, copyLibClang\n@@ -79,0 +88,1 @@\n+    inputs.dir(\"$jextract_jmod_inputs\")\n@@ -90,2 +100,2 @@\n-          \"--libs=$jextract_jmod_libs_dir\",\n-          \"--conf=$jextract_jmod_conf_dir\",\n+          \"--libs=$jextract_jmod_inputs\/libs\",\n+          \"--conf=$jextract_jmod_inputs\/conf\",\n@@ -100,1 +110,1 @@\n-    inputs.file(jar.archiveFile.get())\n+    inputs.file(\"$jextract_jmod_file\")\n@@ -114,1 +124,1 @@\n-         \"--add-modules=org.openjdk.jextract,jdk.compiler,jdk.zipfs\",\n+         \"--add-modules=org.openjdk.jextract\",\n@@ -117,0 +127,1 @@\n+         \"--strip-debug\", \"--no-man-pages\", \"--no-header-files\",\n@@ -135,1 +146,1 @@\n-    dependsOn verify\n+    dependsOn createJextractJmod\n@@ -140,1 +151,1 @@\n-    inputs.file(jar.archiveFile.get())\n+    inputs.file(\"$jextract_jmod_file\")\n@@ -177,3 +188,3 @@\n-\/\/ run jtreg tests. Note: needs jtreg_home variable set to point to the jtreg\n-task jtreg(type: JavaExec) {\n-    dependsOn createRuntimeImageForTest,cmakeBuild\n+void createJtregTask(String name, boolean coverage, String os_lib_dir) {\n+    tasks.register(name, JavaExec) {\n+        dependsOn createRuntimeImageForTest,cmakeBuild\n@@ -181,1 +192,0 @@\n-    doFirst {\n@@ -185,0 +195,26 @@\n+        \/\/ e.g.: <jacoco repo>\/org.jacoco.agent\/target\/classes\/jacocoagent.jar\n+        if (coverage && findProperty(\"jacoco_agent\") == null) {\n+            throw new GradleException(\"jacoco_agent is not defined\")\n+        }\n+\n+        workingDir = \"$buildDir\"\n+\n+        classpath = files(findProperty(\"jtreg_home\") + \"\/lib\/jtreg.jar\")\n+\n+        args = [\n+                \"-jdk\", \"$buildDir\/jextract-jdk-test-image\",\n+                \"-nativepath:$buildDir\/testlib-install\/${os_lib_dir}\",\n+                \"-javaoption:--enable-preview\",\n+                \"-javaoption:--enable-native-access=org.openjdk.jextract,ALL-UNNAMED\",\n+                \"-avm\", \"-conc:auto\", \"-verbose:summary,fail,error\",\n+                \"-retain:fail,error\",\n+        ]\n+\n+        if (coverage) {\n+            String jacocoAgent = findProperty(\"jacoco_agent\")\n+            String coverageFile = \"$buildDir\/jacoco-run\/jextract.exec\"\n+            String includes = \"org.openjdk.jextract.*\"\n+            args += \"-javaoption:-javaagent:$jacocoAgent=destfile=$coverageFile,includes=$includes\"\n+        }\n+\n+        args += \"..\/test\"\n@@ -186,0 +222,4 @@\n+}\n+\n+createJtregTask(\"jtreg\", false, os_lib_dir)\n+createJtregTask(\"jtregWithCoverage\", true, os_lib_dir)\n@@ -187,1 +227,7 @@\n-    workingDir = \"$buildDir\"\n+tasks.register(\"coverage\", JavaExec) {\n+    dependsOn jtregWithCoverage\n+\n+    \/\/ e.g.: <jacoco repo>\/org.jacoco.cli\/target\/org.jacoco.cli-0.8.12-SNAPSHOT-nodeps.jar\n+    if (findProperty(\"jacoco_cli\") == null) {\n+        throw new GradleException(\"jacoco_cli is not defined\")\n+    }\n@@ -189,1 +235,1 @@\n-    classpath = files(findProperty(\"jtreg_home\") + \"\/lib\/jtreg.jar\")\n+    classpath = files(findProperty(\"jacoco_cli\"))\n@@ -192,5 +238,5 @@\n-            \"-jdk\", \"$buildDir\/jextract-jdk-test-image\",\n-            \"-nativepath:$buildDir\/testlib-install\/${os_lib_dir}\",\n-            \"-javaoption:--enable-native-access=org.openjdk.jextract,ALL-UNNAMED\",\n-            \"-avm\", \"-conc:auto\", \"-verbose:summary\",\n-            \"..\/test\"\n+            \"report\",\n+            \"$buildDir\/jacoco-run\/jextract.exec\",\n+            \"--classfiles\", \"$buildDir\/classes\/java\/main\",\n+            \"--sourcefiles\", \"$projectDir\/src\/main\/java\",\n+            \"--html\", \"$buildDir\/jacoco-report\"\n","filename":"build.gradle","additions":76,"deletions":30,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"clinit_global.h\"\n+\n+int global1 = 1;\n+int global2 = 2;\n","filename":"test\/jtreg\/generator\/clinitCycles\/libClinitGlobal.c","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"}]}