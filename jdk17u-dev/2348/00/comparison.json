{"files":[{"patch":"@@ -194,19 +194,19 @@\n-\/\/        System.out.println(\"\\nClient: Explicitly setting the default authenticator: \"\n-\/\/            + toString(Authenticator.getDefault()));\n-\/\/        HTTPTestClient.connect(protocol, server, mode, Authenticator.getDefault());\n-\/\/        count = authOne.count.get();\n-\/\/        if (count != expectedIncrement) {\n-\/\/            throw new AssertionError(\"Authenticator #1 called \" + count(count)\n-\/\/                + \" expected it to be called \" + expected(expectedIncrement));\n-\/\/        }\n-\/\/        count = authTwo.count.get();\n-\/\/        if (count != expectedIncrement) {\n-\/\/            throw new AssertionError(\"Authenticator #2 called \" + count(count)\n-\/\/                + \" expected it to be called \" + expected(expectedIncrement));\n-\/\/        }\n-\/\/        count =  AUTHENTICATOR.count.get();\n-\/\/        if (count != defaultCount + 2 * expectedIncrement) {\n-\/\/            throw new AssertionError(\"Default Authenticator called \" + count(count)\n-\/\/                + \" expected it to be called \"\n-\/\/                + expected(defaultCount + 2 * expectedIncrement));\n-\/\/        }\n+        System.out.println(\"\\nClient: Explicitly setting the default authenticator: \"\n+            + toString(Authenticator.getDefault()));\n+        HTTPTestClient.connect(protocol, server, mode, Authenticator.getDefault());\n+        count = authOne.count.get();\n+        if (count != expectedIncrement) {\n+            throw new AssertionError(\"Authenticator #1 called \" + count(count)\n+                + \" expected it to be called \" + expected(expectedIncrement));\n+        }\n+        count = authTwo.count.get();\n+        if (count != expectedIncrement) {\n+            throw new AssertionError(\"Authenticator #2 called \" + count(count)\n+                + \" expected it to be called \" + expected(expectedIncrement));\n+        }\n+        count =  AUTHENTICATOR.count.get();\n+        if (count != defaultCount + 2 * expectedIncrement) {\n+            throw new AssertionError(\"Default Authenticator called \" + count(count)\n+                + \" expected it to be called \"\n+                + expected(defaultCount + 2 * expectedIncrement));\n+        }\n@@ -241,10 +241,10 @@\n-\/\/            try {\n-\/\/                conn.setAuthenticator(Authenticator.getDefault());\n-\/\/                throw new RuntimeException(\"Expected IllegalStateException\"\n-\/\/                        + \" trying to set an authenticator after connect\"\n-\/\/                        + \" not raised.\");\n-\/\/            } catch (IllegalStateException ise) {\n-\/\/                System.out.println(\"Client: caught expected ISE\"\n-\/\/                        + \" trying to set an authenticator after connect: \"\n-\/\/                        + ise);\n-\/\/            }\n+            try {\n+                conn.setAuthenticator(Authenticator.getDefault());\n+                throw new RuntimeException(\"Expected IllegalStateException\"\n+                        + \" trying to set an authenticator after connect\"\n+                        + \" not raised.\");\n+            } catch (IllegalStateException ise) {\n+                System.out.println(\"Client: caught expected ISE\"\n+                        + \" trying to set an authenticator after connect: \"\n+                        + ise);\n+            }\n@@ -282,1 +282,1 @@\n-        return scheme == HttpSchemeType.NONE ? 0 : 1 * EXPECTED_AUTH_CALLS_PER_TEST;\n+        return scheme == HttpSchemeType.NONE ? 0 : 2 * EXPECTED_AUTH_CALLS_PER_TEST;\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPSetAuthenticatorTest.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.net.BindException;\n@@ -30,0 +31,1 @@\n+import java.time.Duration;\n@@ -38,0 +40,2 @@\n+    public static final long DELAY_BEFORE_RETRY = 2500; \/\/ milliseconds\n+\n@@ -43,0 +47,26 @@\n+        try {\n+            doConnect(protocol, server, authType, auth);\n+        } catch (BindException ex) {\n+            \/\/ sleep a bit then try again once\n+            System.out.println(\"WARNING: Unexpected BindException: \" + ex);\n+            System.out.println(\"\\tSleeping a bit and try again...\");\n+            long start = System.nanoTime();\n+            System.gc();\n+            try {\n+                Thread.sleep(DELAY_BEFORE_RETRY);\n+            } catch (InterruptedException iex) {\n+                \/\/ ignore\n+            }\n+            System.gc();\n+            System.out.println(\"\\tRetrying after \"\n+                    + Duration.ofNanos(System.nanoTime() - start).toMillis()\n+                    + \" milliseconds\");\n+            doConnect(protocol, server, authType, auth);\n+        }\n+    }\n+\n+    public static void doConnect(HttpProtocolType protocol,\n+                               HTTPTestServer server,\n+                               HttpAuthType authType,\n+                               Authenticator auth)\n+            throws IOException {\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTestClient.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}