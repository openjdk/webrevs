{"files":[{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4765272\n+ * @summary REGRESSION: IAE: focusCycleRoot not focus cyle root of a Component\n+ * @key headful\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.FocusTraversalPolicy;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4765272 {\n+    static boolean focusGained = false;\n+    static JFrame f;\n+    static JButton bt1;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4765272\");\n+                bt1 = new JButton(\"Button 1\");\n+                JButton bt2 = new JButton(\"Button 2\");\n+\n+                JPanel p = new JPanel();\n+                p.setLayout(new FlowLayout());\n+                p.add(bt1);\n+                p.add(bt2);\n+                f.getContentPane().add(p);\n+\n+                FocusTraversalPolicy policy = new FocusTraversalPolicy() {\n+                    @Override\n+                    public Component getComponentAfter(Container aContainer, Component aComponent) {\n+                        if (aComponent == bt1) {\n+                            return bt2;\n+                        }\n+                        return bt1;\n+                    }\n+\n+                    @Override\n+                    public Component getComponentBefore(Container aContainer, Component aComponent) {\n+                        if (aComponent == bt1) {\n+                            return bt2;\n+                        }\n+                        return bt1;\n+                    }\n+\n+                    @Override\n+                    public Component getFirstComponent(Container aContainer) {\n+                        return bt1;\n+                    }\n+\n+                    @Override\n+                    public Component getLastComponent(Container aContainer) {\n+                        return bt2;\n+                    }\n+\n+                    @Override\n+                    public Component getDefaultComponent(Container aContainer) {\n+                        return bt1;\n+                    }\n+                };\n+\n+                bt1.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        p.removeAll();\n+                        synchronized (this) {\n+                            focusGained = true;\n+                            this.notifyAll();\n+                        }\n+                    }\n+                });\n+\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                bt1.requestFocus();\n+                try {\n+                    if (!focusGained) {\n+                        Thread.sleep(5000);\n+                    }\n+                } catch (Exception ex) {\n+                    ex.printStackTrace();\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComponent\/bug4765272.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4979794\n+ * @summary A component is sometimes the next component for itself in focus policy.\n+ * @key headful\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.FocusTraversalPolicy;\n+import java.awt.Robot;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4979794 {\n+    static JFrame fr;\n+    static JButton btn1;\n+    static JButton btn2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4979794\");\n+                fr.getContentPane().setLayout(null);\n+\n+                JPanel p = new JPanel();\n+                p.setLayout(null);\n+                fr.getContentPane().add(p);\n+\n+                btn1 = new JButton(\"Button 1\");\n+                btn1.setBounds(0, 0, 200, 200);\n+\n+                btn2 = new JButton(\"Button 2\");\n+                btn2.setBounds(0, 0, 200, 200);\n+\n+                p.add(btn1);\n+                p.add(btn2);\n+                p.setSize(200, 200);\n+\n+                fr.setLocationRelativeTo(null);\n+                fr.setSize(300, 300);\n+                fr.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                Container root = btn1.getFocusCycleRootAncestor();\n+                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();\n+                Component next1 = policy.getComponentAfter(fr, btn1);\n+                Component next2 = policy.getComponentAfter(fr, btn2);\n+                if (next1 == next2) {\n+                    throw new RuntimeException(\"btn1 and btn2 have the same next Component.\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComponent\/bug4979794.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4907772\n+ * @summary 1.4 REGRESSION: JPanel responds to mouse clicks on overlapping JPanel\n+ * @key headful\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.FocusTraversalPolicy;\n+import java.awt.Robot;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4907772 {\n+    static JFrame fr;\n+    static JButton btn1;\n+    static JButton btn2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4907772\");\n+                fr.getContentPane().setLayout(null);\n+\n+                JPanel p = new JPanel();\n+                p.setLayout(null);\n+                fr.getContentPane().add(p);\n+\n+                btn1 = new JButton(\"Button 1\");\n+                btn1.setBounds(0, 0, 200, 200);\n+\n+                btn2 = new JButton(\"Button 2\");\n+                btn2.setBounds(0, 0, 200, 200);\n+\n+                p.add(btn1);\n+                p.add(btn2);\n+\n+                fr.setLocationRelativeTo(null);\n+                fr.pack();\n+                fr.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                Container root = btn1.getFocusCycleRootAncestor();\n+                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();\n+                Component initial = policy.getInitialComponent(fr);\n+                if (initial == btn2) {\n+                    throw new RuntimeException(\"The underlying button shouldn't be the initial component of FCR\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPanel\/bug4907772.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4753342\n+ * @key headful\n+ * @summary Makes sure add\/remove\/setLayout redirect to the contentpane\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.GridLayout;\n+import java.awt.LayoutManager;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JWindow;\n+import javax.swing.RootPaneContainer;\n+import javax.swing.SwingUtilities;\n+\n+public class RootPaneChecking {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+                MyJFrame frame = new MyJFrame();\n+                frame.setTitle(\"RootPaneChecking\");\n+                checkRootPaneCheckingEnabled(frame);\n+                frame.setRootPaneCheckingEnabled(false);\n+                checkRootPaneCheckingDisabled(frame);\n+\n+                MyJWindow window = new MyJWindow();\n+                checkRootPaneCheckingEnabled(window);\n+                window.setRootPaneCheckingEnabled(false);\n+                checkRootPaneCheckingDisabled(window);\n+\n+                MyJDialog dialog = new MyJDialog();\n+                checkRootPaneCheckingEnabled(dialog);\n+                dialog.setRootPaneCheckingEnabled(false);\n+                checkRootPaneCheckingDisabled(dialog);\n+\n+                MyJInternalFrame iframe = new MyJInternalFrame();\n+                checkRootPaneCheckingEnabled(iframe);\n+                iframe.setRootPaneCheckingEnabled(false);\n+                checkRootPaneCheckingDisabled(iframe);\n+        });\n+    }\n+\n+    private static void checkRootPaneCheckingEnabled(RootPaneContainer rpc) {\n+        Container parent = (Container) rpc;\n+        Container cp = rpc.getContentPane();\n+        \/\/ Test add\n+        JButton button = new JButton(\"RootPaneChecking\");\n+        parent.add(button);\n+        if (button.getParent() != cp) {\n+            throw new RuntimeException(\"Add parent mismatch, want: \" +\n+                    cp + \" got \" + button.getParent());\n+        }\n+\n+        \/\/ Test remove\n+        parent.remove(button);\n+        if (button.getParent() != null) {\n+            throw new RuntimeException(\"Remove mismatch, want null got \" +\n+                    button.getParent());\n+        }\n+\n+        \/\/ Test setLayout\n+        LayoutManager manager = new GridLayout();\n+        parent.setLayout(manager);\n+        if (manager != cp.getLayout()) {\n+            throw new RuntimeException(\"LayoutManager mismatch, want: \" +\n+                    manager + \" got \" + cp.getLayout());\n+        }\n+    }\n+\n+    private static void checkRootPaneCheckingDisabled(RootPaneContainer rpc) {\n+        Container parent = (Container) rpc;\n+        Container cp = rpc.getContentPane();\n+\n+        \/\/ Test add\n+        JButton button = new JButton(\"RootPaneChecking\");\n+        parent.add(button);\n+        if (button.getParent() != parent) {\n+            throw new RuntimeException(\"Add parent mismatch, want: \" +\n+                    parent + \" got \" + button.getParent());\n+        }\n+\n+        \/\/ Test setLayout\n+        LayoutManager manager = new GridLayout();\n+        parent.setLayout(manager);\n+        if (manager != parent.getLayout()) {\n+            throw new RuntimeException(\"LayoutManager mismatch, want: \" +\n+                    manager + \" got \" + cp.getLayout());\n+        }\n+    }\n+\n+    static class MyJFrame extends JFrame {\n+        public void setRootPaneCheckingEnabled(boolean x) {\n+            super.setRootPaneCheckingEnabled(x);\n+        }\n+    }\n+\n+    static class MyJWindow extends JWindow {\n+        public void setRootPaneCheckingEnabled(boolean x) {\n+            super.setRootPaneCheckingEnabled(x);\n+        }\n+    }\n+\n+    static class MyJDialog extends JDialog {\n+        public void setRootPaneCheckingEnabled(boolean x) {\n+            super.setRootPaneCheckingEnabled(x);\n+        }\n+    }\n+\n+    static class MyJInternalFrame extends JInternalFrame {\n+        public void setRootPaneCheckingEnabled(boolean x) {\n+            super.setRootPaneCheckingEnabled(x);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/RootPaneChecking\/RootPaneChecking.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}