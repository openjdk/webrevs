{"files":[{"patch":"@@ -830,1 +830,1 @@\n-java\/awt\/font\/TextLayout\/TestJustification.html 8250791 macosx-all\n+java\/awt\/font\/TextLayout\/TestJustification.java 8250791 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-<!--\n- Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n- \n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n- \n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- \n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n---> \n-\n-<html>\n-<head>\n-<title>Test Justification<\/title>\n-<\/head>\n-<body>\n-<!--\n- @test\n- @bug 4211728 4178140 8145542\n- @summary Justify several lines of text and verify that the lines are the same\n- length and cursor positions are correct.\n-Bug 4211728:  TextLayout.draw() draws characters at wrong position.\n-Bug 4178140:  TextLayout does not justify\n- @run applet\/manual=yesno TestJustification.html\n--->\n-<h3>Test Justification<\/h1>\n-<hr>\n-<p>Five lines of text should appear, all justified to the same width,\n-followed by a sixth line containing only roman characters and no spaces\n-which is not justified, and instead is centered.\n-Carets should appear between all characters. Pass the test if this is\n-true.\n-<p>\n-<applet code=TestJustification.class width=500 height=500>\n-alt=\"Your browser understands the &lt;APPLET&gt; tag but isn't running the applet, for some reason.\"\n-Your browser is completely ignoring the &lt;APPLET&gt; tag!\n-<\/applet>\n-<\/body>\n-<\/html>\n-\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestJustification.html","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,18 @@\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.Rectangle2D;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n@@ -25,2 +43,9 @@\n- *\n- * See TestJustification.html for main test.\n+ * @test\n+ * @bug 4211728 4178140 8145542\n+ * @summary Justify several lines of text and verify that the lines are the same\n+   length and cursor positions are correct.\n+   Bug 4211728: TextLayout.draw() draws characters at wrong position.\n+   Bug 4178140: TextLayout does not justify.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestJustification\n@@ -29,55 +54,20 @@\n-import java.applet.*;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.text.*;\n-\n-public class TestJustification extends Applet {\n-  JustificationPanel panel;\n-\n-  public void init() {\n-    setLayout(new BorderLayout());\n-    panel = new JustificationPanel(\"Bitstream Cyberbit\");\n-    add(\"Center\", panel);\n-  }\n-\n-  public void destroy() {\n-    remove(panel);\n-  }\n-\n-  \/\/ calls system.exit, not for use in tests.\n-  public static void main(String args[]) {\n-    TestJustification justificationTest = new TestJustification();\n-    justificationTest.init();\n-    justificationTest.start();\n-\n-    Frame f = new Frame(\"Test Justification\");\n-    f.addWindowListener(new WindowAdapter() {\n-      public void windowClosing(WindowEvent e) {\n-        System.exit(0);\n-      }\n-    });\n-\n-    f.add(\"Center\", justificationTest);\n-    f.setSize(500, 500);\n-    f.show();\n-  }\n-\n-  public String getAppletInfo() {\n-    return \"Test TextLayout.getJustifiedLayout()\";\n-  }\n-\n-  static class JustificationPanel extends Panel {\n-    TextLayout[] layouts;\n-    String fontname;\n-    float height;\n-    float oldfsize;\n-\n-    AttributedCharacterIterator lineText;\n-    TextLayout[] lines;\n-    int linecount;\n-    float oldwidth;\n-\n-    JustificationPanel(String fontname) {\n-      this.fontname = fontname;\n+public class TestJustification {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Five lines of text should appear, all justified to the same width,\n+            followed by a sixth line containing only roman characters and\n+            no spaces which is not justified, and instead is centered.\n+            Carets should appear between all characters.\n+\n+            PASS the test if this is true, else press FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PassFailJFrame.builder()\n+                      .title(\"Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(35)\n+                      .testUI(TestJustification::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n@@ -86,8 +76,8 @@\n-    private static final String[] texts = {\n-      \"This is an english Highlighting demo.\", \"Highlighting\",\n-      \"This is an arabic \\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e demo.\", \"arabic \\u0627\\u0628\\u062a\\u062c\",\n-      \"This is a hebrew \\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5 demo.\", \"hebrew \\u05d0\\u05d1\\u05d2\",\n-      \"This is a cjk \\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\uf900\\uf901\\uf902 demo.\", \"cjk\",\n-      \"NoSpaceCJK:\\u4e00\\u4e01\\u4e02and\\uac00\\uac01\\uc4faand\\uf900\\uf901\\uf902\", \"No\",\n-      \"NoSpaceRoman\", \"Space\"\n-    };\n+    private static Frame createUI() {\n+        Frame frame= new Frame(\"Test Text Justification\");\n+        JustificationPanel panel = new JustificationPanel(\"Bitstream Cyberbit\");\n+        frame.add(panel);\n+        frame.add(\"Center\", panel);\n+        frame.setSize(500, 450);\n+        return frame;\n+    }\n@@ -95,2 +85,5 @@\n-    public void paint(Graphics g) {\n-      Graphics2D g2d = (Graphics2D)g;\n+    static class JustificationPanel extends Panel {\n+        TextLayout[] layouts;\n+        String fontname;\n+        float height;\n+        float oldfsize;\n@@ -98,2 +91,4 @@\n-      Dimension d = getSize();\n-      Insets insets = getInsets();\n+        AttributedCharacterIterator lineText;\n+        TextLayout[] lines;\n+        int linecount;\n+        float oldwidth;\n@@ -101,3 +96,3 @@\n-      float w = d.width - insets.left - insets.right;\n-      float h = d.height - insets.top - insets.bottom;\n-      int fsize = (int)w\/25;\n+        JustificationPanel(String fontname) {\n+            this.fontname = fontname;\n+        }\n@@ -105,1 +100,8 @@\n-      FontRenderContext frc = g2d.getFontRenderContext();\n+        private static final String[] texts = {\n+                \"This is an english Highlighting demo.\", \"Highlighting\",\n+                \"This is an arabic \\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e demo.\", \"arabic \\u0627\\u0628\\u062a\\u062c\",\n+                \"This is a hebrew \\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5 demo.\", \"hebrew \\u05d0\\u05d1\\u05d2\",\n+                \"This is a cjk \\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\uf900\\uf901\\uf902 demo.\", \"cjk\",\n+                \"NoSpaceCJK:\\u4e00\\u4e01\\u4e02and\\uac00\\uac01\\uc4faand\\uf900\\uf901\\uf902\", \"No\",\n+                \"NoSpaceRoman\", \"Space\"\n+        };\n@@ -107,2 +109,2 @@\n-      if (layouts == null || fsize != oldfsize) {\n-        oldfsize = fsize;\n+        public void paint(Graphics g) {\n+            Graphics2D g2d = (Graphics2D)g;\n@@ -110,2 +112,2 @@\n-        Font f0 = new Font(fontname, Font.PLAIN, fsize);\n-        Font f1 = new Font(fontname, Font.ITALIC, (int)(fsize * 1.5));\n+            Dimension d = getSize();\n+            Insets insets = getInsets();\n@@ -113,3 +115,3 @@\n-        if (layouts == null) {\n-          layouts = new TextLayout[texts.length \/ 2];\n-        }\n+            float w = d.width - insets.left - insets.right;\n+            float h = d.height - insets.top - insets.bottom;\n+            int fsize = (int)w\/25;\n@@ -117,4 +119,1 @@\n-        height = 0;\n-        for (int i = 0; i < layouts.length; ++i) {\n-          String text = texts[i*2];\n-          String target = texts[i*2+1];\n+            FontRenderContext frc = g2d.getFontRenderContext();\n@@ -122,2 +121,2 @@\n-          AttributedString astr = new AttributedString(text);\n-          astr.addAttribute(TextAttribute.FONT, f0, 0, text.length());\n+            if (layouts == null || fsize != oldfsize) {\n+                oldfsize = fsize;\n@@ -125,3 +124,2 @@\n-          int start = text.indexOf(target);\n-          int limit = start + target.length();\n-          astr.addAttribute(TextAttribute.FONT, f1, start, limit);\n+                Font f0 = new Font(fontname, Font.PLAIN, fsize);\n+                Font f1 = new Font(fontname, Font.ITALIC, (int)(fsize * 1.5));\n@@ -129,1 +127,3 @@\n-          TextLayout layout = new TextLayout(astr.getIterator(), frc);\n+                if (layouts == null) {\n+                    layouts = new TextLayout[texts.length \/ 2];\n+                }\n@@ -131,1 +131,4 @@\n-          layout = layout.getJustifiedLayout(w - 20);\n+                height = 0;\n+                for (int i = 0; i < layouts.length; ++i) {\n+                    String text = texts[i*2];\n+                    String target = texts[i*2+1];\n@@ -133,1 +136,8 @@\n-          layouts[i] = layout;\n+                    AttributedString astr = new AttributedString(text);\n+                    astr.addAttribute(TextAttribute.FONT, f0, 0, text.length());\n+\n+                    int start = text.indexOf(target);\n+                    int limit = start + target.length();\n+                    astr.addAttribute(TextAttribute.FONT, f1, start, limit);\n+\n+                    TextLayout layout = new TextLayout(astr.getIterator(), frc);\n@@ -135,3 +145,3 @@\n-          height += layout.getAscent() + layout.getDescent() + layout.getLeading();\n-        }\n-      }\n+                    layout = layout.getJustifiedLayout(w - 20);\n+\n+                    layouts[i] = layout;\n@@ -139,2 +149,3 @@\n-      g2d.setColor(Color.white);\n-      g2d.fill(new Rectangle.Float(insets.left, insets.top, w, h));\n+                    height += layout.getAscent() + layout.getDescent() + layout.getLeading();\n+                }\n+            }\n@@ -142,1 +153,2 @@\n-      float basey = 20;\n+            g2d.setColor(Color.white);\n+            g2d.fill(new Rectangle.Float(insets.left, insets.top, w, h));\n@@ -144,2 +156,1 @@\n-      for (int i = 0; i < layouts.length; ++i) {\n-        TextLayout layout = layouts[i];\n+            float basey = 20;\n@@ -147,7 +158,8 @@\n-        float la = layout.getAscent();\n-        float ld = layout.getDescent();\n-        float ll = layout.getLeading();\n-        float lw = layout.getAdvance();\n-        float lh = la + ld + ll;\n-        float lx = (w - lw) \/ 2f;\n-        float ly = basey + layout.getAscent();\n+            for (TextLayout layout : layouts) {\n+                float la = layout.getAscent();\n+                float ld = layout.getDescent();\n+                float ll = layout.getLeading();\n+                float lw = layout.getAdvance();\n+                float lh = la + ld + ll;\n+                float lx = (w - lw) \/ 2f;\n+                float ly = basey + layout.getAscent();\n@@ -155,2 +167,2 @@\n-        g2d.setColor(Color.black);\n-        g2d.translate(insets.left + lx, insets.top + ly);\n+                g2d.setColor(Color.black);\n+                g2d.translate(insets.left + lx, insets.top + ly);\n@@ -158,2 +170,2 @@\n-        Rectangle2D bounds = new Rectangle2D.Float(0, -la, lw, lh);\n-        g2d.draw(bounds);\n+                Rectangle2D bounds = new Rectangle2D.Float(0, -la, lw, lh);\n+                g2d.draw(bounds);\n@@ -161,1 +173,1 @@\n-        layout.draw(g2d, 0, 0);\n+                layout.draw(g2d, 0, 0);\n@@ -163,5 +175,5 @@\n-        g2d.setColor(Color.red);\n-        for (int j = 0, e = layout.getCharacterCount(); j <= e; ++j) {\n-          Shape[] carets = layout.getCaretShapes(j, bounds);\n-          g2d.draw(carets[0]);\n-        }\n+                g2d.setColor(Color.red);\n+                for (int j = 0, e = layout.getCharacterCount(); j <= e; ++j) {\n+                    Shape[] carets = layout.getCaretShapes(j, bounds);\n+                    g2d.draw(carets[0]);\n+                }\n@@ -169,62 +181,3 @@\n-        g2d.translate(-insets.left - lx, -insets.top - ly);\n-        basey += layout.getAscent() + layout.getDescent() + layout.getLeading();\n-      }\n-\n-      \/\/ add LineBreakMeasurer-generated layouts\n-\n-      if (lineText == null) {\n-        String text = \"This is a long line of text that should be broken across multiple \"\n-          + \"lines and then justified to fit the break width.  This test should pass if \"\n-          + \"these lines are justified to the same width, and fail otherwise.  It should \"\n-          + \"also format the hebrew (\\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5) and arabic \"\n-          + \"(\\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e) and CJK \"\n-          + \"(\\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\u67b1\\u67b2\\u67b3\\u67b4\\u67b5\\u67b6\\u67b7\"\n-          + \"\\u67b8\\u67b9) text correctly.\";\n-\n-        Float regular = new Float(16.0);\n-        Float big = new Float(24.0);\n-        AttributedString astr = new AttributedString(text);\n-        astr.addAttribute(TextAttribute.SIZE, regular, 0, text.length());\n-        astr.addAttribute(TextAttribute.FAMILY, fontname, 0, text.length());\n-\n-        int ix = text.indexOf(\"broken\");\n-        astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n-        ix = text.indexOf(\"hebrew\");\n-        astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n-        ix = text.indexOf(\"arabic\");\n-        astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n-        ix = text.indexOf(\"CJK\");\n-        astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 3);\n-\n-        lineText = astr.getIterator();\n-      }\n-\n-      float width = w - 20;\n-      if (lines == null || width != oldwidth) {\n-        oldwidth = width;\n-\n-        lines = new TextLayout[10];\n-        linecount = 0;\n-\n-        LineBreakMeasurer measurer = new LineBreakMeasurer(lineText, frc);\n-\n-        for (;;) {\n-          TextLayout layout = measurer.nextLayout(width);\n-          if (layout == null) {\n-            break;\n-          }\n-\n-          \/\/ justify all but last line\n-          if (linecount > 0) {\n-            lines[linecount - 1] = lines[linecount - 1].getJustifiedLayout(width);\n-          }\n-\n-          if (linecount == lines.length) {\n-            TextLayout[] nlines = new TextLayout[lines.length * 2];\n-            System.arraycopy(lines, 0, nlines, 0, lines.length);\n-            lines = nlines;\n-          }\n-\n-          lines[linecount++] = layout;\n-        }\n-      }\n+                g2d.translate(-insets.left - lx, -insets.top - ly);\n+                basey += layout.getAscent() + layout.getDescent() + layout.getLeading();\n+            }\n@@ -232,3 +185,1 @@\n-      float basex = insets.left + 10;\n-      basey += 10;\n-      g2d.setColor(Color.black);\n+            \/\/ add LineBreakMeasurer-generated layouts\n@@ -236,2 +187,8 @@\n-      for (int i = 0; i < linecount; ++i) {\n-        TextLayout layout = lines[i];\n+            if (lineText == null) {\n+                String text = \"This is a long line of text that should be broken across multiple \"\n+                              + \"lines and then justified to fit the break width.  This test should pass if \"\n+                              + \"these lines are justified to the same width, and fail otherwise.  It should \"\n+                              + \"also format the hebrew (\\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5) and arabic \"\n+                              + \"(\\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e) and CJK \"\n+                              + \"(\\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\u67b1\\u67b2\\u67b3\\u67b4\\u67b5\\u67b6\\u67b7\"\n+                              + \"\\u67b8\\u67b9) text correctly.\";\n@@ -239,3 +196,5 @@\n-        basey += layout.getAscent();\n-        float adv = layout.getAdvance();\n-        float dx = layout.isLeftToRight() ? 0 : width - adv;\n+                Float regular = 16.0F;\n+                Float big = 24.0F;\n+                AttributedString astr = new AttributedString(text);\n+                astr.addAttribute(TextAttribute.SIZE, regular, 0, text.length());\n+                astr.addAttribute(TextAttribute.FAMILY, fontname, 0, text.length());\n@@ -243,1 +202,8 @@\n-        layout.draw(g2d, basex + dx, basey);\n+                int ix = text.indexOf(\"broken\");\n+                astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+                ix = text.indexOf(\"hebrew\");\n+                astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+                ix = text.indexOf(\"arabic\");\n+                astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+                ix = text.indexOf(\"CJK\");\n+                astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 3);\n@@ -245,2 +211,49 @@\n-        basey += layout.getDescent() + layout.getLeading();\n-      }\n+                lineText = astr.getIterator();\n+            }\n+\n+            float width = w - 20;\n+            if (lines == null || width != oldwidth) {\n+                oldwidth = width;\n+\n+                lines = new TextLayout[10];\n+                linecount = 0;\n+\n+                LineBreakMeasurer measurer = new LineBreakMeasurer(lineText, frc);\n+\n+                for (;;) {\n+                    TextLayout layout = measurer.nextLayout(width);\n+                    if (layout == null) {\n+                        break;\n+                    }\n+\n+                    \/\/ justify all but last line\n+                    if (linecount > 0) {\n+                        lines[linecount - 1] = lines[linecount - 1].getJustifiedLayout(width);\n+                    }\n+\n+                    if (linecount == lines.length) {\n+                        TextLayout[] nlines = new TextLayout[lines.length * 2];\n+                        System.arraycopy(lines, 0, nlines, 0, lines.length);\n+                        lines = nlines;\n+                    }\n+\n+                    lines[linecount++] = layout;\n+                }\n+            }\n+\n+            float basex = insets.left + 10;\n+            basey += 10;\n+            g2d.setColor(Color.black);\n+\n+            for (int i = 0; i < linecount; ++i) {\n+                TextLayout layout = lines[i];\n+\n+                basey += layout.getAscent();\n+                float adv = layout.getAdvance();\n+                float dx = layout.isLeftToRight() ? 0 : width - adv;\n+\n+                layout.draw(g2d, basex + dx, basey);\n+\n+                basey += layout.getDescent() + layout.getLeading();\n+            }\n+        }\n@@ -248,1 +261,0 @@\n-  }\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestJustification.java","additions":204,"deletions":192,"binary":false,"changes":396,"status":"modified"}]}