{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,4 @@\n- * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient \/test\/jdk\/java\/net\/httpclient\/http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters Http2Handler\n- *          jdk.test.lib.net.IPSupport\n- *          Http2TestExchange\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.IPSupport\n@@ -55,0 +55,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SANTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext DigestEchoServer\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -33,8 +34,0 @@\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n- * @build ALPNFailureTest\n","filename":"test\/jdk\/java\/net\/httpclient\/ALPNProxyFailureTest.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractNoBody.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPublishers.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -36,0 +36,1 @@\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -37,4 +38,0 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n@@ -93,0 +90,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPushPromises.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingSubscribers.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -30,4 +30,0 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n@@ -73,0 +69,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/AggregateRequestBodyTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,4 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -69,11 +73,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build jdk.test.lib.Platform\n- * @build jdk.test.lib.util.FileUtils\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-\/\/ for JTwork\/\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for classes in JTwork\/\/classes\/0\/test\/jdk\/java\/net\/httpclient\/lib\/\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -49,9 +51,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer HttpRedirectTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- * java.net.http\/jdk.internal.net.http.frame\n- * java.net.http\/jdk.internal.net.http.hpack\n- * java.logging\n- * java.base\/sun.net.www.http\n- * java.base\/sun.net.www\n- * java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DigestEchoServer\n","filename":"test\/jdk\/java\/net\/httpclient\/AuthFilterCacheTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,9 +27,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -54,0 +47,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/BasicRedirectTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -30,1 +30,1 @@\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -32,4 +32,0 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n@@ -86,0 +82,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/CancelRequestTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -70,0 +63,4 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/ConcurrentResponses.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -85,0 +78,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/CookieHeaderTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,9 +27,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -65,0 +58,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/CustomRequestPublisher.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -59,0 +55,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/CustomResponseSubscriber.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DependentActionsTest\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DependentActionsTest\n@@ -89,0 +86,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/DependentActionsTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DependentPromiseActionsTest\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DependentPromiseActionsTest\n@@ -87,0 +84,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/DependentPromiseActionsTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n@@ -65,10 +66,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer\n- *        ReferenceTracker DigestEchoClient\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DigestEchoServer ReferenceTracker DigestEchoClient\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoClient.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -32,7 +32,1 @@\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoClientSSL.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoServer.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters EncodedCharsInURI\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        EncodedCharsInURI\n@@ -79,0 +76,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/EncodedCharsInURI.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -61,0 +54,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/EscapedOctetsInURI.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,8 +32,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib ..\/http2\/server\n- * @compile ..\/HttpServerAdapters.java\n- * @build jdk.test.lib.net.SimpleSSLContext SecureZipFSProvider\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        SecureZipFSProvider\n@@ -74,0 +69,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-\/\/ for JTwork\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest1.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n-\/\/ for JTwork\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest2.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n-\/\/ for JTwork\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest3.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,8 +29,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib ..\/http2\/server\n- * @compile ..\/HttpServerAdapters.java\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -66,0 +61,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.policy","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,4 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -64,9 +68,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.SimpleSSLContext\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterPublisherTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,4 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -65,9 +69,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterSubscriberTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,12 +28,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n- * @library \/test\/lib http2\/server\n- * @build HttpServerAdapters DigestEchoServer Http2TestServer ForbiddenHeadTest\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build DigestEchoServer ForbiddenHeadTest jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -87,0 +78,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/ForbiddenHeadTest.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -68,0 +64,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/GZIPInputStreamTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -82,0 +75,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/HeadTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -65,9 +67,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer HttpRedirectTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext DigestEchoServer HttpRedirectTest\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRedirectTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,683 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.net.httpserver.Filter;\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpContext;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-\n-import java.net.InetAddress;\n-import java.io.ByteArrayInputStream;\n-import java.net.http.HttpClient.Version;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.PrintStream;\n-import java.io.UncheckedIOException;\n-import java.math.BigInteger;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.net.http.HttpHeaders;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.ExecutorService;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.stream.Stream;\n-\n-\/**\n- * Defines an adaptation layers so that a test server handlers and filters\n- * can be implemented independently of the underlying server version.\n- * <p>\n- * For instance:\n- * <pre>{@code\n- *\n- *  URI http1URI, http2URI;\n- *\n- *  InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n- *  HttpTestServer server1 = HttpTestServer.of(HttpServer.create(sa, 0));\n- *  HttpTestContext context = server.addHandler(new HttpTestEchoHandler(), \"\/http1\/echo\");\n- *  http2URI = \"http:\/\/localhost:\" + server1.getAddress().getPort() + \"\/http1\/echo\";\n- *\n- *  Http2TestServer http2TestServer = new Http2TestServer(\"localhost\", false, 0);\n- *  HttpTestServer server2 = HttpTestServer.of(http2TestServer);\n- *  server2.addHandler(new HttpTestEchoHandler(), \"\/http2\/echo\");\n- *  http1URI = \"http:\/\/localhost:\" + server2.getAddress().getPort() + \"\/http2\/echo\";\n- *\n- *  }<\/pre>\n- *\/\n-public interface HttpServerAdapters {\n-\n-    static final boolean PRINTSTACK =\n-            Boolean.getBoolean(\"jdk.internal.httpclient.debug\");\n-\n-    static void uncheckedWrite(ByteArrayOutputStream baos, byte[] ba) {\n-        try {\n-            baos.write(ba);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    static void printBytes(PrintStream out, String prefix, byte[] bytes) {\n-        int padding = 4 + 4 - (bytes.length % 4);\n-        padding = padding > 4 ? padding - 4 : 4;\n-        byte[] bigbytes = new byte[bytes.length + padding];\n-        System.arraycopy(bytes, 0, bigbytes, padding, bytes.length);\n-        out.println(prefix + bytes.length + \" \"\n-                    + new BigInteger(bigbytes).toString(16));\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP request Headers.\n-     *\/\n-    public static abstract class HttpTestRequestHeaders {\n-        public abstract Optional<String> firstValue(String name);\n-        public abstract Set<String> keySet();\n-        public abstract Set<Map.Entry<String, List<String>>> entrySet();\n-        public abstract List<String> get(String name);\n-        public abstract boolean containsKey(String name);\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (!(o instanceof HttpTestRequestHeaders other)) return false;\n-            return Objects.equals(entrySet(), other.entrySet());\n-        }\n-        @Override\n-        public int hashCode() {\n-            return Objects.hashCode(entrySet());\n-        }\n-\n-        public static HttpTestRequestHeaders of(Headers headers) {\n-            return new Http1TestRequestHeaders(headers);\n-        }\n-\n-        public static HttpTestRequestHeaders of(HttpHeaders headers) {\n-            return new Http2TestRequestHeaders(headers);\n-        }\n-\n-        private static final class Http1TestRequestHeaders extends HttpTestRequestHeaders {\n-            private final Headers headers;\n-            Http1TestRequestHeaders(Headers h) { this.headers = h; }\n-            @Override\n-            public Optional<String> firstValue(String name) {\n-                if (headers.containsKey(name)) {\n-                    return Optional.ofNullable(headers.getFirst(name));\n-                }\n-                return Optional.empty();\n-            }\n-            @Override\n-            public Set<String> keySet() { return headers.keySet(); }\n-            @Override\n-            public Set<Map.Entry<String, List<String>>> entrySet() {\n-                return headers.entrySet();\n-            }\n-            @Override\n-            public List<String> get(String name) {\n-                return headers.get(name);\n-            }\n-            @Override\n-            public boolean containsKey(String name) {\n-                return headers.containsKey(name);\n-            }\n-            @Override\n-            public String toString() {\n-                return String.valueOf(headers);\n-            }\n-        }\n-        private static final class Http2TestRequestHeaders extends HttpTestRequestHeaders {\n-            private final HttpHeaders headers;\n-            Http2TestRequestHeaders(HttpHeaders h) { this.headers = h; }\n-            @Override\n-            public Optional<String> firstValue(String name) {\n-                return headers.firstValue(name);\n-            }\n-            @Override\n-            public Set<String> keySet() { return headers.map().keySet(); }\n-            @Override\n-            public Set<Map.Entry<String, List<String>>> entrySet() {\n-                return headers.map().entrySet();\n-            }\n-            @Override\n-            public List<String> get(String name) {\n-                return headers.allValues(name);\n-            }\n-            @Override\n-            public boolean containsKey(String name) {\n-                return headers.firstValue(name).isPresent();\n-            }\n-            @Override\n-            public String toString() {\n-                return String.valueOf(headers);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP response Headers.\n-     *\/\n-    public static abstract class HttpTestResponseHeaders {\n-        public abstract void addHeader(String name, String value);\n-\n-        public static HttpTestResponseHeaders of(Headers headers) {\n-            return new Http1TestResponseHeaders(headers);\n-        }\n-        public static HttpTestResponseHeaders of(HttpHeadersBuilder headersBuilder) {\n-            return new Http2TestResponseHeaders(headersBuilder);\n-        }\n-\n-        private final static class Http1TestResponseHeaders extends HttpTestResponseHeaders {\n-            private final Headers headers;\n-            Http1TestResponseHeaders(Headers h) { this.headers = h; }\n-            @Override\n-            public void addHeader(String name, String value) {\n-                headers.add(name, value);\n-            }\n-        }\n-        private final static class Http2TestResponseHeaders extends HttpTestResponseHeaders {\n-            private final HttpHeadersBuilder headersBuilder;\n-            Http2TestResponseHeaders(HttpHeadersBuilder hb) { this.headersBuilder = hb; }\n-            @Override\n-            public void addHeader(String name, String value) {\n-                headersBuilder.addHeader(name, value);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Server Exchange.\n-     *\/\n-    public static abstract class HttpTestExchange implements AutoCloseable {\n-        public abstract Version getServerVersion();\n-        public abstract Version getExchangeVersion();\n-        public abstract InputStream   getRequestBody();\n-        public abstract OutputStream  getResponseBody();\n-        public abstract HttpTestRequestHeaders getRequestHeaders();\n-        public abstract HttpTestResponseHeaders getResponseHeaders();\n-        public abstract void sendResponseHeaders(int code, int contentLength) throws IOException;\n-        public abstract URI getRequestURI();\n-        public abstract String getRequestMethod();\n-        public abstract void close();\n-        public abstract InetSocketAddress getRemoteAddress();\n-        public void serverPush(URI uri, HttpHeaders headers, byte[] body) {\n-            ByteArrayInputStream bais = new ByteArrayInputStream(body);\n-            serverPush(uri, headers, bais);\n-        }\n-        public void serverPush(URI uri, HttpHeaders headers, InputStream body) {\n-            throw new UnsupportedOperationException(\"serverPush with \" + getExchangeVersion());\n-        }\n-        public boolean serverPushAllowed() {\n-            return false;\n-        }\n-        public static HttpTestExchange of(HttpExchange exchange) {\n-            return new Http1TestExchange(exchange);\n-        }\n-        public static HttpTestExchange of(Http2TestExchange exchange) {\n-            return new Http2TestExchangeImpl(exchange);\n-        }\n-\n-        abstract void doFilter(Filter.Chain chain) throws IOException;\n-\n-        \/\/ implementations...\n-        private static final class Http1TestExchange extends HttpTestExchange {\n-            private final HttpExchange exchange;\n-            Http1TestExchange(HttpExchange exch) {\n-                this.exchange = exch;\n-            }\n-            @Override\n-            public Version getServerVersion() { return Version.HTTP_1_1; }\n-            @Override\n-            public Version getExchangeVersion() { return Version.HTTP_1_1; }\n-            @Override\n-            public InputStream getRequestBody() {\n-                return exchange.getRequestBody();\n-            }\n-            @Override\n-            public OutputStream getResponseBody() {\n-                return exchange.getResponseBody();\n-            }\n-            @Override\n-            public HttpTestRequestHeaders getRequestHeaders() {\n-                return HttpTestRequestHeaders.of(exchange.getRequestHeaders());\n-            }\n-            @Override\n-            public HttpTestResponseHeaders getResponseHeaders() {\n-                return HttpTestResponseHeaders.of(exchange.getResponseHeaders());\n-            }\n-            @Override\n-            public void sendResponseHeaders(int code, int contentLength) throws IOException {\n-                if (contentLength == 0) contentLength = -1;\n-                else if (contentLength < 0) contentLength = 0;\n-                exchange.sendResponseHeaders(code, contentLength);\n-            }\n-            @Override\n-            void doFilter(Filter.Chain chain) throws IOException {\n-                chain.doFilter(exchange);\n-            }\n-            @Override\n-            public void close() { exchange.close(); }\n-\n-            @Override\n-            public InetSocketAddress getRemoteAddress() {\n-                return exchange.getRemoteAddress();\n-            }\n-\n-            @Override\n-            public URI getRequestURI() { return exchange.getRequestURI(); }\n-            @Override\n-            public String getRequestMethod() { return exchange.getRequestMethod(); }\n-            @Override\n-            public String toString() {\n-                return this.getClass().getSimpleName() + \": \" + exchange.toString();\n-            }\n-        }\n-\n-        private static final class Http2TestExchangeImpl extends HttpTestExchange {\n-            private final Http2TestExchange exchange;\n-            Http2TestExchangeImpl(Http2TestExchange exch) {\n-                this.exchange = exch;\n-            }\n-            @Override\n-            public Version getServerVersion() { return Version.HTTP_2; }\n-            @Override\n-            public Version getExchangeVersion() { return Version.HTTP_2; }\n-            @Override\n-            public InputStream getRequestBody() {\n-                return exchange.getRequestBody();\n-            }\n-            @Override\n-            public OutputStream getResponseBody() {\n-                return exchange.getResponseBody();\n-            }\n-            @Override\n-            public HttpTestRequestHeaders getRequestHeaders() {\n-                return HttpTestRequestHeaders.of(exchange.getRequestHeaders());\n-            }\n-\n-            @Override\n-            public HttpTestResponseHeaders getResponseHeaders() {\n-                return HttpTestResponseHeaders.of(exchange.getResponseHeaders());\n-            }\n-            @Override\n-            public void sendResponseHeaders(int code, int contentLength) throws IOException {\n-                if (contentLength == 0) contentLength = -1;\n-                else if (contentLength < 0) contentLength = 0;\n-                exchange.sendResponseHeaders(code, contentLength);\n-            }\n-            @Override\n-            public boolean serverPushAllowed() {\n-                return exchange.serverPushAllowed();\n-            }\n-            @Override\n-            public void serverPush(URI uri, HttpHeaders headers, InputStream body) {\n-                exchange.serverPush(uri, headers, body);\n-            }\n-            void doFilter(Filter.Chain filter) throws IOException {\n-                throw new IOException(\"cannot use HTTP\/1.1 filter with HTTP\/2 server\");\n-            }\n-            @Override\n-            public void close() { exchange.close();}\n-\n-            @Override\n-            public InetSocketAddress getRemoteAddress() {\n-                return exchange.getRemoteAddress();\n-            }\n-\n-            @Override\n-            public URI getRequestURI() { return exchange.getRequestURI(); }\n-            @Override\n-            public String getRequestMethod() { return exchange.getRequestMethod(); }\n-            @Override\n-            public String toString() {\n-                return this.getClass().getSimpleName() + \": \" + exchange.toString();\n-            }\n-        }\n-\n-    }\n-\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Server Handlers.\n-     *\/\n-    public interface HttpTestHandler {\n-        void handle(HttpTestExchange t) throws IOException;\n-\n-        default HttpHandler toHttpHandler() {\n-            return (t) -> doHandle(HttpTestExchange.of(t));\n-        }\n-        default Http2Handler toHttp2Handler() {\n-            return (t) -> doHandle(HttpTestExchange.of(t));\n-        }\n-        private void doHandle(HttpTestExchange t) throws IOException {\n-            try {\n-                handle(t);\n-            } catch (Throwable x) {\n-                System.out.println(\"WARNING: exception caught in HttpTestHandler::handle \" + x);\n-                System.err.println(\"WARNING: exception caught in HttpTestHandler::handle \" + x);\n-                if (PRINTSTACK && !expectException(t)) x.printStackTrace(System.out);\n-                throw x;\n-            }\n-        }\n-    }\n-\n-\n-    public static class HttpTestEchoHandler implements HttpTestHandler {\n-        @Override\n-        public void handle(HttpTestExchange t) throws IOException {\n-            try (InputStream is = t.getRequestBody();\n-                 OutputStream os = t.getResponseBody()) {\n-                byte[] bytes = is.readAllBytes();\n-                printBytes(System.out,\"Echo server got \"\n-                        + t.getExchangeVersion() + \" bytes: \", bytes);\n-                if (t.getRequestHeaders().firstValue(\"Content-type\").isPresent()) {\n-                    t.getResponseHeaders().addHeader(\"Content-type\",\n-                            t.getRequestHeaders().firstValue(\"Content-type\").get());\n-                }\n-                t.sendResponseHeaders(200, bytes.length);\n-                os.write(bytes);\n-            }\n-        }\n-    }\n-\n-    public static boolean expectException(HttpTestExchange e) {\n-        HttpTestRequestHeaders h = e.getRequestHeaders();\n-        Optional<String> expectException = h.firstValue(\"X-expect-exception\");\n-        if (expectException.isPresent()) {\n-            return expectException.get().equalsIgnoreCase(\"true\");\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Server Filter Chains.\n-     *\/\n-    public abstract class HttpChain {\n-\n-        public abstract void doFilter(HttpTestExchange exchange) throws IOException;\n-        public static HttpChain of(Filter.Chain chain) {\n-            return new Http1Chain(chain);\n-        }\n-\n-        public static HttpChain of(List<HttpTestFilter> filters, HttpTestHandler handler) {\n-            return new Http2Chain(filters, handler);\n-        }\n-\n-        private static class Http1Chain extends HttpChain {\n-            final Filter.Chain chain;\n-            Http1Chain(Filter.Chain chain) {\n-                this.chain = chain;\n-            }\n-            @Override\n-            public void doFilter(HttpTestExchange exchange) throws IOException {\n-                try {\n-                    exchange.doFilter(chain);\n-                } catch (Throwable t) {\n-                    System.out.println(\"WARNING: exception caught in Http1Chain::doFilter \" + t);\n-                    System.err.println(\"WARNING: exception caught in Http1Chain::doFilter \" + t);\n-                    if (PRINTSTACK && !expectException(exchange)) t.printStackTrace(System.out);\n-                    throw t;\n-                }\n-            }\n-        }\n-\n-        private static class Http2Chain extends HttpChain {\n-            ListIterator<HttpTestFilter> iter;\n-            HttpTestHandler handler;\n-            Http2Chain(List<HttpTestFilter> filters, HttpTestHandler handler) {\n-                this.iter = filters.listIterator();\n-                this.handler = handler;\n-            }\n-            @Override\n-            public void doFilter(HttpTestExchange exchange) throws IOException {\n-                try {\n-                    if (iter.hasNext()) {\n-                        iter.next().doFilter(exchange, this);\n-                    } else {\n-                        handler.handle(exchange);\n-                    }\n-                } catch (Throwable t) {\n-                    System.out.println(\"WARNING: exception caught in Http2Chain::doFilter \" + t);\n-                    System.err.println(\"WARNING: exception caught in Http2Chain::doFilter \" + t);\n-                    if (PRINTSTACK && !expectException(exchange)) t.printStackTrace(System.out);\n-                    throw t;\n-                }\n-            }\n-        }\n-\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Server Filters.\n-     *\/\n-    public abstract class HttpTestFilter {\n-\n-        public abstract String description();\n-\n-        public abstract void doFilter(HttpTestExchange exchange, HttpChain chain) throws IOException;\n-\n-        public Filter toFilter() {\n-            return new Filter() {\n-                @Override\n-                public void doFilter(HttpExchange exchange, Chain chain) throws IOException {\n-                    HttpTestFilter.this.doFilter(HttpTestExchange.of(exchange), HttpChain.of(chain));\n-                }\n-                @Override\n-                public String description() {\n-                    return HttpTestFilter.this.description();\n-                }\n-            };\n-        }\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Server Context.\n-     *\/\n-    public static abstract class HttpTestContext {\n-        public abstract String getPath();\n-        public abstract void addFilter(HttpTestFilter filter);\n-        public abstract Version getVersion();\n-\n-        \/\/ will throw UOE if the server is HTTP\/2\n-        public abstract void setAuthenticator(com.sun.net.httpserver.Authenticator authenticator);\n-    }\n-\n-    \/**\n-     * A version agnostic adapter class for HTTP Servers.\n-     *\/\n-    public static abstract class HttpTestServer {\n-        private static final class ServerLogging {\n-            private static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n-            static void enableLogging() {\n-                logger.setLevel(Level.FINE);\n-                Stream.of(Logger.getLogger(\"\").getHandlers())\n-                        .forEach(h -> h.setLevel(Level.ALL));\n-            }\n-        }\n-\n-        public abstract void start();\n-        public abstract void stop();\n-        public abstract HttpTestContext addHandler(HttpTestHandler handler, String root);\n-        public abstract InetSocketAddress getAddress();\n-        public abstract Version getVersion();\n-\n-        public String serverAuthority() {\n-            InetSocketAddress address = getAddress();\n-            String hostString = address.getHostString();\n-            hostString = address.getAddress().isLoopbackAddress() || hostString.equals(\"localhost\")\n-                    ? address.getAddress().getHostAddress() \/\/ use the raw IP address, if loopback\n-                    : hostString; \/\/ use whatever host string was used to construct the address\n-            hostString = hostString.contains(\":\")\n-                    ? \"[\" + hostString + \"]\"\n-                    : hostString;\n-            return hostString + \":\" + address.getPort();\n-        }\n-\n-        public static HttpTestServer of(HttpServer server) {\n-            return new Http1TestServer(server);\n-        }\n-\n-        public static HttpTestServer of(HttpServer server, ExecutorService executor) {\n-            return new Http1TestServer(server, executor);\n-        }\n-\n-        public static HttpTestServer of(Http2TestServer server) {\n-            return new Http2TestServerImpl(server);\n-        }\n-\n-        private static class Http1TestServer extends  HttpTestServer {\n-            private final HttpServer impl;\n-            private final ExecutorService executor;\n-            Http1TestServer(HttpServer server) {\n-                this(server, null);\n-            }\n-            Http1TestServer(HttpServer server, ExecutorService executor) {\n-                if (executor != null) server.setExecutor(executor);\n-                this.executor = executor;\n-                this.impl = server;\n-            }\n-            @Override\n-            public void start() {\n-                System.out.println(\"Http1TestServer: start\");\n-                impl.start();\n-            }\n-            @Override\n-            public void stop() {\n-                System.out.println(\"Http1TestServer: stop\");\n-                try {\n-                    impl.stop(0);\n-                } finally {\n-                    if (executor != null) {\n-                        executor.shutdownNow();\n-                    }\n-                }\n-            }\n-            @Override\n-            public HttpTestContext addHandler(HttpTestHandler handler, String path) {\n-                System.out.println(\"Http1TestServer[\" + getAddress()\n-                        + \"]::addHandler \" + handler + \", \" + path);\n-                return new Http1TestContext(impl.createContext(path, handler.toHttpHandler()));\n-            }\n-            @Override\n-            public InetSocketAddress getAddress() {\n-                return new InetSocketAddress(InetAddress.getLoopbackAddress(),\n-                        impl.getAddress().getPort());\n-            }\n-            public Version getVersion() { return Version.HTTP_1_1; }\n-        }\n-\n-        private static class Http1TestContext extends HttpTestContext {\n-            private final HttpContext context;\n-            Http1TestContext(HttpContext ctxt) {\n-                this.context = ctxt;\n-            }\n-            @Override public String getPath() {\n-                return context.getPath();\n-            }\n-            @Override\n-            public void addFilter(HttpTestFilter filter) {\n-                System.out.println(\"Http1TestContext::addFilter \" + filter.description());\n-                context.getFilters().add(filter.toFilter());\n-            }\n-            @Override\n-            public void setAuthenticator(com.sun.net.httpserver.Authenticator authenticator) {\n-                context.setAuthenticator(authenticator);\n-            }\n-            @Override public Version getVersion() { return Version.HTTP_1_1; }\n-        }\n-\n-        private static class Http2TestServerImpl extends  HttpTestServer {\n-            private final Http2TestServer impl;\n-            Http2TestServerImpl(Http2TestServer server) {\n-                this.impl = server;\n-            }\n-            @Override\n-            public void start() {\n-                System.out.println(\"Http2TestServerImpl: start\");\n-                impl.start();\n-            }\n-            @Override\n-            public void stop() {\n-                System.out.println(\"Http2TestServerImpl: stop\");\n-                impl.stop();\n-            }\n-            @Override\n-            public HttpTestContext addHandler(HttpTestHandler handler, String path) {\n-                System.out.println(\"Http2TestServerImpl[\" + getAddress()\n-                                   + \"]::addHandler \" + handler + \", \" + path);\n-                Http2TestContext context = new Http2TestContext(handler, path);\n-                impl.addHandler(context.toHttp2Handler(), path);\n-                return context;\n-            }\n-            @Override\n-            public InetSocketAddress getAddress() {\n-                return new InetSocketAddress(InetAddress.getLoopbackAddress(),\n-                        impl.getAddress().getPort());\n-            }\n-            public Version getVersion() { return Version.HTTP_2; }\n-        }\n-\n-        private static class Http2TestContext\n-                extends HttpTestContext implements HttpTestHandler {\n-            private final HttpTestHandler handler;\n-            private final String path;\n-            private final List<HttpTestFilter> filters = new CopyOnWriteArrayList<>();\n-            Http2TestContext(HttpTestHandler hdl, String path) {\n-                this.handler = hdl;\n-                this.path = path;\n-            }\n-            @Override\n-            public String getPath() { return path; }\n-            @Override\n-            public void addFilter(HttpTestFilter filter) {\n-                System.out.println(\"Http2TestContext::addFilter \" + filter.description());\n-                filters.add(filter);\n-            }\n-            @Override\n-            public void handle(HttpTestExchange exchange) throws IOException {\n-                System.out.println(\"Http2TestContext::handle \" + exchange);\n-                HttpChain.of(filters, handler).doFilter(exchange);\n-            }\n-            @Override\n-            public void setAuthenticator(com.sun.net.httpserver.Authenticator authenticator) {\n-                throw new UnsupportedOperationException(\"Can't set HTTP\/1.1 authenticator on HTTP\/2 context\");\n-            }\n-            @Override public Version getVersion() { return Version.HTTP_2; }\n-        }\n-    }\n-\n-    public static void enableServerLogging() {\n-        System.setProperty(\"java.util.logging.SimpleFormatter.format\",\n-                \"%4$s [%1$tb %1$td, %1$tl:%1$tM:%1$tS.%1$tN] %2$s: %5$s%6$s%n\");\n-        HttpTestServer.ServerLogging.enableLogging();\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpServerAdapters.java","additions":0,"deletions":683,"binary":false,"changes":683,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -58,9 +60,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer HttpSlowServerTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DigestEchoServer HttpSlowServerTest\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpSlowServerTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build jdk.test.lib.Platform\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.Platform\n@@ -51,0 +45,4 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpVersionsTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -50,9 +52,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters ProxyServer HttpsTunnelAuthTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        ProxyServer HttpsTunnelAuthTest\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpsTunnelAuthTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -53,9 +55,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer HttpsTunnelTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DigestEchoServer HttpsTunnelTest\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpsTunnelTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n- *       ReferenceTracker AggregateRequestBodyTest\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *       ReferenceTracker\n@@ -84,0 +80,3 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/ISO_8859_1_Test.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -60,0 +56,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/ImmutableFlowItems.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -76,0 +73,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/InvalidInputStreamSubscriptionRequest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -32,4 +32,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -74,0 +71,3 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/InvalidSubscriptionRequest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -78,9 +80,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer LargeHandshakeTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n+ *        DigestEchoServer\n","filename":"test\/jdk\/java\/net\/httpclient\/LargeHandshakeTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -60,9 +62,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters DigestEchoServer LargeResponseTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext DigestEchoServer\n","filename":"test\/jdk\/java\/net\/httpclient\/LargeResponseTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -80,9 +82,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer LineBodyHandlerTest HttpServerAdapters ReferenceTracker\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build ReferenceTracker jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.SimpleSSLContext\n","filename":"test\/jdk\/java\/net\/httpclient\/LineBodyHandlerTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,6 +27,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -65,0 +61,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/MappingResponseSubscriber.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,10 +28,2 @@\n- *\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -63,0 +55,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/MaxStreams.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n","filename":"test\/jdk\/java\/net\/httpclient\/NoBodyPartOne.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n","filename":"test\/jdk\/java\/net\/httpclient\/NoBodyPartTwo.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -61,0 +54,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/NonAsciiCharsInURI.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,12 +29,11 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib ..\/http2\/server\n- * @build Http2TestServer Http2TestServerConnection Http2TestExchange\n- *        Http2Handler OutgoingPushPromise Queue\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build jdk.test.lib.Platform\n- * @build jdk.test.lib.util.FileUtils\n- * @compile ..\/HttpServerAdapters.java\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.httpclient.test.lib.http2.Http2TestServerConnection\n+ *        jdk.httpclient.test.lib.http2.Http2TestExchange\n+ *        jdk.httpclient.test.lib.http2.Http2Handler\n+ *        jdk.httpclient.test.lib.http2.OutgoingPushPromise\n+ *        jdk.httpclient.test.lib.http2.Queue\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.Platform\n+ *        jdk.test.lib.util.FileUtils\n@@ -72,1 +71,7 @@\n-\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.OutgoingPushPromise;\n+import jdk.httpclient.test.lib.http2.Queue;\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodyHandlerOfFileDownloadTest.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,12 +30,10 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib ..\/http2\/server\n- * @build Http2TestServer Http2TestServerConnection Http2TestExchange\n- *        Http2Handler OutgoingPushPromise Queue\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build jdk.test.lib.Platform\n- * @build jdk.test.lib.util.FileUtils\n- * @compile ..\/HttpServerAdapters.java\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.httpclient.test.lib.http2.Http2TestServerConnection\n+ *        jdk.httpclient.test.lib.http2.Http2TestExchange\n+ *        jdk.httpclient.test.lib.http2.Http2Handler\n+ *        jdk.httpclient.test.lib.http2.OutgoingPushPromise\n+ *        jdk.httpclient.test.lib.http2.Queue\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.Platform jdk.test.lib.util.FileUtils\n@@ -70,1 +68,7 @@\n-\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.OutgoingPushPromise;\n+import jdk.httpclient.test.lib.http2.Queue;\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodyHandlerOfFileTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,12 +30,9 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib ..\/http2\/server\n- * @build Http2TestServer Http2TestServerConnection Http2TestExchange\n- *        Http2Handler OutgoingPushPromise Queue\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build jdk.test.lib.Platform\n- * @build jdk.test.lib.util.FileUtils\n- * @compile ..\/HttpServerAdapters.java\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.httpclient.test.lib.http2.Http2TestServerConnection\n+ *        jdk.httpclient.test.lib.http2.Http2TestExchange\n+ *        jdk.httpclient.test.lib.http2.Http2Handler\n+ *        jdk.httpclient.test.lib.http2.OutgoingPushPromise\n+ *        jdk.httpclient.test.lib.http2.Queue jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.Platform jdk.test.lib.util.FileUtils\n@@ -78,1 +75,7 @@\n-\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.OutgoingPushPromise;\n+import jdk.httpclient.test.lib.http2.Queue;\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodySubscriberOfFileTest.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-\/\/ for java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/ofFile.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-\/\/ for java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/ofFileDownload.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -34,7 +34,1 @@\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ProxyAuthDisabledSchemes.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library \/test\/lib http2\/server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -34,7 +34,1 @@\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ProxyAuthDisabledSchemesSSL.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,12 +29,3 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n- * @library \/test\/lib http2\/server\n- * @build HttpServerAdapters DigestEchoServer Http2TestServer ProxySelectorTest\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build DigestEchoServer ProxySelectorTest jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -86,0 +77,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/ProxySelectorTest.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,8 +27,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -53,0 +47,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/RedirectMethodChange.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,9 +27,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -58,0 +51,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/RedirectWithCookie.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n- *       ReferenceTracker Response204V2Test\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *       ReferenceTracker jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -60,0 +56,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/Response204V2Test.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -76,0 +72,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/ResponsePublisher.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,4 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext ReferenceTracker\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker\n@@ -70,0 +65,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/RetryWithCookie.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters EncodedCharsInURI\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n@@ -75,0 +72,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/ServerCloseTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,4 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer HttpServerAdapters SpecialHeadersTest\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -91,0 +86,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/SpecialHeadersTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,8 +29,3 @@\n- * @modules java.net.http\n- *          java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- * @library http2\/server\n- * @build Http2TestServer Http2TestExchange\n- * @compile HttpServerAdapters.java\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -53,0 +48,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/StreamCloseTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,9 +28,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -56,0 +49,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/StreamingBody.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,1 +1,8 @@\n-modules = java.net.http\n+modules=java.base\/sun.net.www.http \\\n+        java.base\/sun.net.www \\\n+        java.base\/sun.net \\\n+        java.net.http\/jdk.internal.net.http.common \\\n+        java.net.http\/jdk.internal.net.http.frame \\\n+        java.net.http\/jdk.internal.net.http.hpack \\\n+        java.logging \\\n+        jdk.httpserver\n","filename":"test\/jdk\/java\/net\/httpclient\/TEST.properties","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersCustomAfterCancel.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersCustomBeforeCancel.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersIOAfterCancel.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersIOBeforeCancel.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersInNextRequest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersInRequest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersInSubscribe.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n@@ -31,4 +31,1 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPublishersSanity.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsInputStreamCustom\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsInputStreamCustom\n+ *       jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsInputStreamCustom.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsInputStreamIO\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsInputStreamIO\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsInputStreamIO.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsLinesCustom\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsLinesCustom\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsLinesCustom.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsLinesIO\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsLinesIO\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsLinesIO.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsStringCustom\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsStringCustom\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsStringCustom.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsStringIO\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesAsStringIO\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesAsStringIO.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesSanity\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker AbstractThrowingPushPromises ThrowingPushPromisesSanity\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingPushPromisesSanity.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsInputStream AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsInputStream AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsInputStream.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsInputStreamAsync AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsInputStreamAsync AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsInputStreamAsync.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsLines AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsLines AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsLines.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsLinesAsync AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsLinesAsync AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsLinesAsync.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsString AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsString AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsString.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersAsStringAsync AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersAsStringAsync AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersAsStringAsync.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n-  *       ReferenceTracker ThrowingSubscribersSanity AbstractThrowingSubscribers\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ *        ReferenceTracker ThrowingSubscribersSanity AbstractThrowingSubscribers\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/ThrowingSubscribersSanity.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -51,9 +53,3 @@\n- * @library \/test\/lib http2\/server\n- * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters TlsContextTest\n- * @modules java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          java.base\/sun.net.www.http\n- *          java.base\/sun.net.www\n- *          java.base\/sun.net\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext TlsContextTest\n+ *        jdk.httpclient.test.lib.common.HttpServerAdapters\n","filename":"test\/jdk\/java\/net\/httpclient\/TlsContextTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,9 +32,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -69,0 +62,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/UnauthorizedTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib http2\/server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -75,0 +68,2 @@\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/UserCookieTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-\/\/ for JTwork\/\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/java\/net\/httpclient\/http2\/server\/*\" {\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n","filename":"test\/jdk\/java\/net\/httpclient\/dependent.policy","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- * @library \/test\/lib server\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -64,0 +59,6 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.BodyOutputStream;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n@@ -305,1 +306,1 @@\n-                os.closeInternal();\n+                os.markClosed();\n@@ -308,2 +309,3 @@\n-            for (Http2Frame f : headerFrames)\n-                conn.outputQ.put(f);\n+            for (Http2Frame f : headerFrames) {\n+                conn.addToOutputQ(f);\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BadHeadersTest.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,3 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestUtil\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -50,0 +47,5 @@\n+import jdk.httpclient.test.lib.common.TestUtil;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.Http2EchoHandler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BasicTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,2 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- * @library \/test\/lib server\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n@@ -33,2 +30,0 @@\n- * @build Http2TestServer\n- * @build jdk.test.lib.net.SimpleSSLContext\n@@ -59,0 +54,7 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.BodyOutputStream;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+\n@@ -300,1 +302,1 @@\n-                os.closeInternal();\n+                os.markClosed();\n@@ -302,2 +304,3 @@\n-            for (Http2Frame f : headerFrames)\n-                conn.outputQ.put(f);\n+            for (Http2Frame f : headerFrames) {\n+                conn.addToOutputQ(f);\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ContinuationFrameTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -49,0 +49,4 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2EchoHandler;\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ErrorTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,3 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestUtil\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -43,0 +40,4 @@\n+import jdk.httpclient.test.lib.common.TestUtil;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2EchoHandler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/FixedThreadPoolTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,2 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -55,0 +51,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ImplicitPushCancel.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,2 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -48,0 +44,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/NoBodyTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -63,7 +66,2 @@\n- * @modules java.net.http\n- * @library \/test\/lib server\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n- * @build jdk.test.lib.net.SimpleSSLContext ProxyTest2\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ProxyTest2.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,4 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.httpclient.test.lib.http2.Http2EchoHandler\n+ *        jdk.httpclient.test.lib.http2.Http2RedirectHandler\n@@ -50,0 +48,5 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.Http2EchoHandler;\n+import jdk.httpclient.test.lib.http2.Http2RedirectHandler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/RedirectTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,3 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.httpclient.test.lib.common.TestUtil jdk.httpclient.test.lib.http2.PushHandler\n@@ -50,0 +47,5 @@\n+import jdk.httpclient.test.lib.common.TestUtil;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.PushHandler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ServerPush.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,2 @@\n- * @library \/test\/lib server\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -50,0 +46,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ServerPushWithDiffTypes.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n@@ -42,1 +45,2 @@\n- * @library server\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer\n@@ -44,4 +48,0 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/TLSConnection.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.nio.ByteBuffer;\n-import java.util.List;\n-\n-import jdk.internal.net.http.common.Utils;\n-import jdk.internal.net.http.frame.DataFrame;\n-import jdk.internal.net.http.frame.Http2Frame;\n-import jdk.internal.net.http.frame.ResetFrame;\n-\n-\/**\n- * InputStream reads frames off stream q and supplies read demand from any\n- * DataFrames it finds. Window updates are sent back on the connections send\n- * q.\n- *\/\n-class BodyInputStream extends InputStream {\n-\n-    final Queue<Http2Frame> q;\n-    final int streamid;\n-    boolean closed;\n-    boolean eof;\n-    final Http2TestServerConnection conn;\n-\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    BodyInputStream(Queue q, int streamid, Http2TestServerConnection conn) {\n-        this.q = q;\n-        this.streamid = streamid;\n-        this.conn = conn;\n-    }\n-\n-    DataFrame df;\n-    ByteBuffer[] buffers;\n-    ByteBuffer buffer;\n-    int nextIndex = -1;\n-\n-    private DataFrame getData() throws IOException {\n-        if (eof) {\n-            return null;\n-        }\n-        Http2Frame frame;\n-        do {\n-            frame = q.take();\n-            if (frame == null) return null; \/\/ closed\/eof before receiving data.\n-            \/\/ ignoring others for now Wupdates handled elsewhere\n-            if (frame.type() != DataFrame.TYPE) {\n-                System.out.println(\"Ignoring \" + frame.toString() + \" CHECK THIS\");\n-            }\n-        } while (frame.type() != DataFrame.TYPE);\n-        df = (DataFrame) frame;\n-        int len = df.payloadLength();\n-        eof = frame.getFlag(DataFrame.END_STREAM);\n-        \/\/ acknowledge\n-        conn.sendWindowUpdates(len, streamid);\n-        return (DataFrame) frame;\n-    }\n-\n-    \/\/ null return means EOF\n-    private ByteBuffer getBuffer() throws IOException {\n-        if (buffer == null || !buffer.hasRemaining()) {\n-            if (nextIndex == -1 || nextIndex == buffers.length) {\n-                DataFrame df = getData();\n-                if (df == null) {\n-                    return null;\n-                }\n-                List<ByteBuffer> data = df.getData();\n-                long len = Utils.remaining(data);\n-                if ((len == 0) && eof) {\n-                    return null;\n-                }\n-\n-                buffers = data.toArray(Utils.EMPTY_BB_ARRAY);\n-                nextIndex = 0;\n-            }\n-            buffer = buffers[nextIndex++];\n-        }\n-        return buffer;\n-    }\n-\n-    @Override\n-    public int read(byte[] buf, int offset, int length) throws IOException {\n-        if (closed) {\n-            throw new IOException(\"closed\");\n-        }\n-        ByteBuffer b = getBuffer();\n-        if (b == null) {\n-            return -1;\n-        }\n-        int remaining = b.remaining();\n-        if (remaining < length) {\n-            length = remaining;\n-        }\n-        b.get(buf, offset, length);\n-        return length;\n-    }\n-\n-    byte[] one = new byte[1];\n-\n-    @Override\n-    public int read() throws IOException {\n-        int c = read(one, 0, 1);\n-        if (c == -1) {\n-            return -1;\n-        }\n-        return one[0] & 0xFF;\n-    }\n-\n-    @Override\n-    public void close() {\n-        \/\/ TODO reset this stream\n-        closed = true;\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/BodyInputStream.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.nio.ByteBuffer;\n-\n-import jdk.internal.net.http.frame.DataFrame;\n-\n-\/**\n- * OutputStream. Incoming window updates handled by the main connection\n- * reader thread.\n- *\/\n-@SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-class BodyOutputStream extends OutputStream {\n-    final static byte[] EMPTY_BARRAY = new byte[0];\n-\n-    final int streamid;\n-    int window;\n-    volatile boolean closed;\n-    boolean goodToGo = false; \/\/ not allowed to send until headers sent\n-    final Http2TestServerConnection conn;\n-    final Queue outputQ;\n-\n-    BodyOutputStream(int streamid, int initialWindow, Http2TestServerConnection conn) {\n-        this.window = initialWindow;\n-        this.streamid = streamid;\n-        this.conn = conn;\n-        this.outputQ = conn.outputQ;\n-        conn.registerStreamWindowUpdater(streamid, this::updateWindow);\n-    }\n-\n-    \/\/ called from connection reader thread as all incoming window\n-    \/\/ updates are handled there.\n-    synchronized void updateWindow(int update) {\n-        window += update;\n-        notifyAll();\n-    }\n-\n-    void waitForWindow(int demand) throws InterruptedException {\n-        \/\/ first wait for the connection window\n-        conn.obtainConnectionWindow(demand);\n-        \/\/ now wait for the stream window\n-        synchronized (this) {\n-            while (demand > 0) {\n-                int n = Math.min(demand, window);\n-                demand -= n;\n-                window -= n;\n-                if (demand > 0) {\n-                    wait();\n-                }\n-            }\n-        }\n-    }\n-\n-    void goodToGo() {\n-        goodToGo = true;\n-    }\n-\n-    @Override\n-    public void write(byte[] buf, int offset, int len) throws IOException {\n-        if (closed) {\n-            throw new IOException(\"closed\");\n-        }\n-\n-        if (!goodToGo) {\n-            throw new IllegalStateException(\"sendResponseHeaders must be called first\");\n-        }\n-        try {\n-            int max = conn.getMaxFrameSize();\n-            while (len > 0) {\n-                int n = len > max ? max : len;\n-                waitForWindow(n);\n-                send(buf, offset, n, 0);\n-                offset += n;\n-                len -= n;\n-            }\n-        } catch (InterruptedException ex) {\n-            throw new IOException(ex);\n-        }\n-    }\n-\n-    private void send(byte[] buf, int offset, int len, int flags) throws IOException {\n-        ByteBuffer buffer = ByteBuffer.allocate(len);\n-        buffer.put(buf, offset, len);\n-        buffer.flip();\n-        assert streamid != 0;\n-        DataFrame df = new DataFrame(streamid, flags, buffer);\n-        outputQ.put(df);\n-    }\n-\n-    byte[] one = new byte[1];\n-\n-    @Override\n-    public void write(int b) throws IOException {\n-        one[0] = (byte) b;\n-        write(one, 0, 1);\n-    }\n-\n-    void closeInternal() {\n-        closed = true;\n-    }\n-\n-    @Override\n-    public void close() {\n-        if (closed) return;\n-        synchronized (this) {\n-            if (closed) return;\n-            closed = true;\n-        }\n-        try {\n-            send(EMPTY_BARRAY, 0, 0, DataFrame.END_STREAM);\n-        } catch (IOException ex) {\n-            System.err.println(\"TestServer: OutputStream.close exception: \" + ex);\n-            ex.printStackTrace();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/BodyOutputStream.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import jdk.internal.net.http.common.HttpHeadersImpl;\n-\n-public class EchoHandler implements Http2Handler {\n-    static final Path CWD = Paths.get(\".\");\n-\n-    public EchoHandler() {}\n-\n-    @Override\n-    public void handle(Http2TestExchange t)\n-            throws IOException {\n-        try {\n-            System.err.println(\"EchoHandler received request to \" + t.getRequestURI());\n-            InputStream is = t.getRequestBody();\n-            HttpHeadersImpl map = t.getRequestHeaders();\n-            HttpHeadersImpl map1 = t.getResponseHeaders();\n-            map1.addHeader(\"X-Hello\", \"world\");\n-            map1.addHeader(\"X-Bye\", \"universe\");\n-            String fixedrequest = map.firstValue(\"XFixed\").orElse(null);\n-            File outfile = Files.createTempFile(CWD, \"foo\", \"bar\").toFile();\n-            \/\/System.err.println (\"QQQ = \" + outfile.toString());\n-            FileOutputStream fos = new FileOutputStream(outfile);\n-            int count = (int) is.transferTo(fos);\n-            System.err.printf(\"EchoHandler read %d bytes\\n\", count);\n-            is.close();\n-            fos.close();\n-            InputStream is1 = new FileInputStream(outfile);\n-            OutputStream os = null;\n-            \/\/ return the number of bytes received (no echo)\n-            String summary = map.firstValue(\"XSummary\").orElse(null);\n-            if (fixedrequest != null && summary == null) {\n-                t.sendResponseHeaders(200, count);\n-                os = t.getResponseBody();\n-                int count1 = (int)is1.transferTo(os);\n-                System.err.printf(\"EchoHandler wrote %d bytes\\n\", count1);\n-            } else {\n-                t.sendResponseHeaders(200, 0);\n-                os = t.getResponseBody();\n-                int count1 = (int)is1.transferTo(os);\n-                System.err.printf(\"EchoHandler wrote %d bytes\\n\", count1);\n-\n-                if (summary != null) {\n-                    String s = Integer.toString(count);\n-                    os.write(s.getBytes());\n-                }\n-            }\n-            outfile.delete();\n-            os.close();\n-            is1.close();\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n-            throw new IOException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/EchoHandler.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.Closeable;\n-import java.io.IOException;\n-\n-\/**\n- * Implemented by closeable objects which might be able to report\n- * an error when closed due to exceptional conditions.\n- *\/\n-public interface ExceptionallyCloseable extends Closeable {\n-\n-    \/**\n-     * Called when an instance of {@code ExceptionallyCloseable} is closed\n-     * due to some exceptional condition revealed by {@code cause}.\n-     *\n-     * @implSpec The default implementation of this method simply calls\n-     *           {@link #close()}. Implementation of this interface are\n-     *           suppose to override this method in order to ensure that\n-     *           the cause is properly reported.\n-     *\n-     * @param cause The reason for which the object is closed.\n-     * @throws IOException if {@link #close()} fails.\n-     *\/\n-    public default void closeExceptionally(Throwable cause) throws IOException {\n-        close();\n-    }\n-\n-    public static void close(Throwable t, Closeable c) throws IOException {\n-        if (c instanceof ExceptionallyCloseable) {\n-            ((ExceptionallyCloseable)c).closeExceptionally(t);\n-        } else {\n-            c.close();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/ExceptionallyCloseable.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.net.http.HttpHeaders;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-\n-public class Http2EchoHandler implements Http2Handler {\n-    static final Path CWD = Paths.get(\".\");\n-\n-    public Http2EchoHandler() {}\n-\n-    @Override\n-    public void handle(Http2TestExchange t)\n-            throws IOException {\n-        try {\n-            System.err.printf(\"EchoHandler received request to %s from %s\\n\",\n-                              t.getRequestURI(), t.getRemoteAddress());\n-            InputStream is = t.getRequestBody();\n-            HttpHeaders map = t.getRequestHeaders();\n-            HttpHeadersBuilder headersBuilder = t.getResponseHeaders();\n-            headersBuilder.addHeader(\"X-Hello\", \"world\");\n-            headersBuilder.addHeader(\"X-Bye\", \"universe\");\n-            String fixedrequest = map.firstValue(\"XFixed\").orElse(null);\n-            File outfile = Files.createTempFile(CWD, \"foo\", \"bar\").toFile();\n-            \/\/System.err.println (\"QQQ = \" + outfile.toString());\n-            FileOutputStream fos = new FileOutputStream(outfile);\n-            int count = (int) is.transferTo(fos);\n-            System.err.printf(\"EchoHandler read %d bytes\\n\", count);\n-            is.close();\n-            fos.close();\n-            InputStream is1 = new FileInputStream(outfile);\n-            OutputStream os = null;\n-            \/\/ return the number of bytes received (no echo)\n-            String summary = map.firstValue(\"XSummary\").orElse(null);\n-            if (fixedrequest != null && summary == null) {\n-                t.sendResponseHeaders(200, count);\n-                os = t.getResponseBody();\n-                int count1 = (int)is1.transferTo(os);\n-                System.err.printf(\"EchoHandler wrote %d bytes\\n\", count1);\n-            } else {\n-                t.sendResponseHeaders(200, 0);\n-                os = t.getResponseBody();\n-                int count1 = (int)is1.transferTo(os);\n-                System.err.printf(\"EchoHandler wrote %d bytes\\n\", count1);\n-\n-                if (summary != null) {\n-                    String s = Integer.toString(count);\n-                    os.write(s.getBytes());\n-                }\n-            }\n-            outfile.delete();\n-            os.close();\n-            is1.close();\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n-            throw new IOException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2EchoHandler.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import java.io.IOException;\n-\n-\/**\n- * A handler which is invoked to process HTTP exchanges. Each\n- * HTTP exchange is handled by one of these handlers.\n- *\/\n-public interface Http2Handler {\n-    \/**\n-     * Handles the given request and generate an appropriate response.\n-     *\n-     * @param exchange the exchange containing the request from the\n-     *      client and used to send the response\n-     * @throws NullPointerException if exchange is <code>null<\/code>\n-     *\/\n-    void handle (Http2TestExchange exchange) throws IOException;\n-}\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2Handler.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.util.function.Supplier;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-\n-public class Http2RedirectHandler implements Http2Handler {\n-\n-    final Supplier<String> supplier;\n-\n-    public Http2RedirectHandler(Supplier<String> redirectSupplier) {\n-        supplier = redirectSupplier;\n-    }\n-\n-    @Override\n-    public void handle(Http2TestExchange t) throws IOException {\n-        examineExchange(t);\n-        try (InputStream is = t.getRequestBody()) {\n-            is.readAllBytes();\n-            String location = supplier.get();\n-            System.err.printf(\"RedirectHandler request to %s from %s\\n\",\n-                    t.getRequestURI().toString(), t.getRemoteAddress().toString());\n-            System.err.println(\"Redirecting to: \" + location);\n-            HttpHeadersBuilder headersBuilder = t.getResponseHeaders();\n-            headersBuilder.addHeader(\"Location\", location);\n-            t.sendResponseHeaders(redirectCode(), 1024);\n-            byte[] bb = new byte[1024];\n-            OutputStream os = t.getResponseBody();\n-            os.write(bb);\n-            os.close();\n-            t.close();\n-        }\n-    }\n-\n-    protected int redirectCode() {\n-        return 301;\n-    }\n-\n-    \/\/ override in sub-class to examine the exchange, but don't\n-    \/\/ alter transaction state by reading the request body etc.\n-    protected void examineExchange(Http2TestExchange t) {\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2RedirectHandler.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.URI;\n-import java.net.InetSocketAddress;\n-import java.net.http.HttpHeaders;\n-import java.util.concurrent.CompletableFuture;\n-import javax.net.ssl.SSLSession;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-\n-public interface Http2TestExchange {\n-\n-    HttpHeaders getRequestHeaders();\n-\n-    HttpHeadersBuilder getResponseHeaders();\n-\n-    URI getRequestURI();\n-\n-    String getRequestMethod();\n-\n-    SSLSession getSSLSession();\n-\n-    void close();\n-\n-    InputStream getRequestBody();\n-\n-    OutputStream getResponseBody();\n-\n-    void sendResponseHeaders(int rCode, long responseLength) throws IOException;\n-\n-    InetSocketAddress getRemoteAddress();\n-\n-    int getResponseCode();\n-\n-    InetSocketAddress getLocalAddress();\n-\n-    String getProtocol();\n-\n-    boolean serverPushAllowed();\n-\n-    void serverPush(URI uri, HttpHeaders headers, InputStream content);\n-\n-    \/**\n-     * Send a PING on this exchanges connection, and completes the returned CF\n-     * with the number of milliseconds it took to get a valid response.\n-     * It may also complete exceptionally\n-     *\/\n-    CompletableFuture<Long> sendPing();\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestExchange.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,206 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.InetSocketAddress;\n-import java.net.http.HttpHeaders;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.CompletableFuture;\n-import javax.net.ssl.SSLSession;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-import jdk.internal.net.http.frame.HeaderFrame;\n-import jdk.internal.net.http.frame.HeadersFrame;\n-\n-public class Http2TestExchangeImpl implements Http2TestExchange {\n-\n-    static final String HEAD = \"HEAD\";\n-    final HttpHeaders reqheaders;\n-    final HttpHeadersBuilder rspheadersBuilder;\n-    final URI uri;\n-    final String method;\n-    final InputStream is;\n-    final BodyOutputStream os;\n-    final SSLSession sslSession;\n-    final int streamid;\n-    final boolean pushAllowed;\n-    final Http2TestServerConnection conn;\n-    final Http2TestServer server;\n-\n-    int responseCode = -1;\n-    long responseLength;\n-\n-    Http2TestExchangeImpl(int streamid,\n-                          String method,\n-                          HttpHeaders reqheaders,\n-                          HttpHeadersBuilder rspheadersBuilder,\n-                          URI uri,\n-                          InputStream is,\n-                          SSLSession sslSession,\n-                          BodyOutputStream os,\n-                          Http2TestServerConnection conn,\n-                          boolean pushAllowed) {\n-        this.reqheaders = reqheaders;\n-        this.rspheadersBuilder = rspheadersBuilder;\n-        this.uri = uri;\n-        this.method = method;\n-        this.is = is;\n-        this.streamid = streamid;\n-        this.os = os;\n-        this.sslSession = sslSession;\n-        this.pushAllowed = pushAllowed;\n-        this.conn = conn;\n-        this.server = conn.server;\n-    }\n-\n-    @Override\n-    public HttpHeaders getRequestHeaders() {\n-        return reqheaders;\n-    }\n-\n-    @Override\n-    public CompletableFuture<Long> sendPing() {\n-        return conn.sendPing();\n-    }\n-\n-    @Override\n-    public HttpHeadersBuilder getResponseHeaders() {\n-        return rspheadersBuilder;\n-    }\n-\n-    @Override\n-    public URI getRequestURI() {\n-        return uri;\n-    }\n-\n-    @Override\n-    public String getRequestMethod() {\n-        return method;\n-    }\n-\n-    @Override\n-    public SSLSession getSSLSession() {\n-        return sslSession;\n-    }\n-\n-    @Override\n-    public void close() {\n-        try {\n-            is.close();\n-            os.close();\n-        } catch (IOException e) {\n-            System.err.println(\"TestServer: HttpExchange.close exception: \" + e);\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Override\n-    public InputStream getRequestBody() {\n-        return is;\n-    }\n-\n-    @Override\n-    public OutputStream getResponseBody() {\n-        return os;\n-    }\n-\n-    @Override\n-    public void sendResponseHeaders(int rCode, long responseLength) throws IOException {\n-        this.responseLength = responseLength;\n-        if (responseLength !=0 && rCode != 204 && !isHeadRequest()) {\n-                long clen = responseLength > 0 ? responseLength : 0;\n-            rspheadersBuilder.setHeader(\"Content-length\", Long.toString(clen));\n-        }\n-\n-        rspheadersBuilder.setHeader(\":status\", Integer.toString(rCode));\n-        HttpHeaders headers = rspheadersBuilder.build();\n-\n-        Http2TestServerConnection.ResponseHeaders response\n-                = new Http2TestServerConnection.ResponseHeaders(headers);\n-        response.streamid(streamid);\n-        response.setFlag(HeaderFrame.END_HEADERS);\n-\n-\n-        if (responseLength < 0 || rCode == 204) {\n-            response.setFlag(HeadersFrame.END_STREAM);\n-            os.closeInternal();\n-        }\n-        conn.outputQ.put(response);\n-        os.goodToGo();\n-        System.err.println(\"Sent response headers \" + rCode);\n-    }\n-\n-    @Override\n-    public InetSocketAddress getRemoteAddress() {\n-        return (InetSocketAddress) conn.socket.getRemoteSocketAddress();\n-    }\n-\n-    @Override\n-    public int getResponseCode() {\n-        return responseCode;\n-    }\n-\n-    @Override\n-    public InetSocketAddress getLocalAddress() {\n-        return server.getAddress();\n-    }\n-\n-    @Override\n-    public String getProtocol() {\n-        return \"HTTP\/2\";\n-    }\n-\n-    @Override\n-    public boolean serverPushAllowed() {\n-        return pushAllowed;\n-    }\n-\n-    @Override\n-    public void serverPush(URI uri, HttpHeaders headers, InputStream content) {\n-        HttpHeadersBuilder headersBuilder = new HttpHeadersBuilder();\n-        headersBuilder.setHeader(\":method\", \"GET\");\n-        headersBuilder.setHeader(\":scheme\", uri.getScheme());\n-        headersBuilder.setHeader(\":authority\", uri.getAuthority());\n-        headersBuilder.setHeader(\":path\", uri.getPath());\n-        for (Map.Entry<String,List<String>> entry : headers.map().entrySet()) {\n-            for (String value : entry.getValue())\n-                headersBuilder.addHeader(entry.getKey(), value);\n-        }\n-        HttpHeaders combinedHeaders = headersBuilder.build();\n-        OutgoingPushPromise pp = new OutgoingPushPromise(streamid, uri, combinedHeaders, content);\n-\n-        try {\n-            conn.outputQ.put(pp);\n-            \/\/ writeLoop will spin up thread to read the InputStream\n-        } catch (IOException ex) {\n-            System.err.println(\"TestServer: pushPromise exception: \" + ex);\n-        }\n-    }\n-\n-    private boolean isHeadRequest() {\n-        return HEAD.equalsIgnoreCase(getRequestMethod());\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestExchangeImpl.java","additions":0,"deletions":206,"binary":false,"changes":206,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.net.ssl.SSLSession;\n-import java.io.InputStream;\n-import java.net.URI;\n-import java.net.http.HttpHeaders;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-\n-\/**\n- * A supplier of Http2TestExchanges. If the default Http2TestExchange impl is\n- * not sufficient, then a supplier may be set on an Http2TestServer through its\n- * {@link Http2TestServer#setExchangeSupplier(Http2TestExchangeSupplier)}.\n- *\n- * Useful for testing scenarios where non-standard or specific server behaviour\n- * is required, either direct control over the frames sent, \"bad\" behaviour, or\n- * something else.\n- *\/\n-public interface Http2TestExchangeSupplier {\n-\n-    Http2TestExchange get(int streamid,\n-                          String method,\n-                          HttpHeaders reqheaders,\n-                          HttpHeadersBuilder rspheadersBuilder,\n-                          URI uri,\n-                          InputStream is,\n-                          SSLSession sslSession,\n-                          BodyOutputStream os,\n-                          Http2TestServerConnection conn,\n-                          boolean pushAllowed);\n-\n-    static Http2TestExchangeSupplier ofDefault() {\n-        return Http2TestExchangeImpl::new;\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestExchangeSupplier.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,346 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.net.*;\n-import java.util.*;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Consumer;\n-import javax.net.ServerSocketFactory;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLParameters;\n-import javax.net.ssl.SSLServerSocket;\n-import javax.net.ssl.SSLServerSocketFactory;\n-import javax.net.ssl.SNIServerName;\n-import jdk.internal.net.http.frame.ErrorFrame;\n-\n-\/**\n- * Waits for incoming TCP connections from a client and establishes\n- * a HTTP2 connection. Two threads are created per connection. One for reading\n- * and one for writing. Incoming requests are dispatched to the supplied\n- * Http2Handler on additional threads. All threads\n- * obtained from the supplied ExecutorService.\n- *\/\n-public class Http2TestServer implements AutoCloseable {\n-    final ServerSocket server;\n-    final boolean supportsHTTP11;\n-    volatile boolean secure;\n-    final ExecutorService exec;\n-    volatile boolean stopping = false;\n-    final Map<String,Http2Handler> handlers;\n-    final SSLContext sslContext;\n-    final String serverName;\n-    final HashMap<InetSocketAddress,Http2TestServerConnection> connections;\n-    final Properties properties;\n-\n-    private static ThreadFactory defaultThreadFac =\n-        (Runnable r) -> {\n-            Thread t = new Thread(r);\n-            t.setName(\"Test-server-pool\");\n-            return t;\n-        };\n-\n-\n-    private static ExecutorService getDefaultExecutor() {\n-        return Executors.newCachedThreadPool(defaultThreadFac);\n-    }\n-\n-    public Http2TestServer(String serverName, boolean secure, int port) throws Exception {\n-        this(serverName, secure, port, getDefaultExecutor(), 50, null, null);\n-    }\n-\n-    public Http2TestServer(boolean secure, int port) throws Exception {\n-        this(null, secure, port, getDefaultExecutor(), 50, null, null);\n-    }\n-\n-    public InetSocketAddress getAddress() {\n-        return (InetSocketAddress)server.getLocalSocketAddress();\n-    }\n-\n-    public String serverAuthority() {\n-        final InetSocketAddress inetSockAddr = getAddress();\n-        final String hostIP = inetSockAddr.getAddress().getHostAddress();\n-        \/\/ escape for ipv6\n-        final String h = hostIP.contains(\":\") ? \"[\" + hostIP + \"]\" : hostIP;\n-        return h + \":\" + inetSockAddr.getPort();\n-    }\n-\n-    public Http2TestServer(boolean secure,\n-                           SSLContext context) throws Exception {\n-        this(null, secure, 0, null, 50, null, context);\n-    }\n-\n-    public Http2TestServer(String serverName, boolean secure,\n-                           SSLContext context) throws Exception {\n-        this(serverName, secure, 0, null, 50, null, context);\n-    }\n-\n-    public Http2TestServer(boolean secure,\n-                           int port,\n-                           ExecutorService exec,\n-                           SSLContext context) throws Exception {\n-        this(null, secure, port, exec, 50, null, context);\n-    }\n-\n-    public Http2TestServer(String serverName,\n-                           boolean secure,\n-                           int port,\n-                           ExecutorService exec,\n-                           SSLContext context)\n-        throws Exception\n-    {\n-        this(serverName, secure, port, exec, 50, null, context);\n-    }\n-\n-    public Http2TestServer(String serverName,\n-                           boolean secure,\n-                           int port,\n-                           ExecutorService exec,\n-                           int backlog,\n-                           Properties properties,\n-                           SSLContext context)\n-        throws Exception\n-    {\n-        this(serverName, secure, port, exec, backlog, properties, context, false);\n-    }\n-\n-    public Http2TestServer(String serverName,\n-                           boolean secure,\n-                           int port,\n-                           ExecutorService exec,\n-                           int backlog,\n-                           Properties properties,\n-                           SSLContext context,\n-                           boolean supportsHTTP11)\n-        throws Exception\n-    {\n-        this(InetAddress.getLoopbackAddress(), serverName, secure, port, exec,\n-                backlog, properties, context, supportsHTTP11);\n-    }\n-\n-    \/**\n-     * Create a Http2Server listening on the given port. Currently needs\n-     * to know in advance whether incoming connections are plain TCP \"h2c\"\n-     * or TLS \"h2\".\n-     *\n-     * The HTTP\/1.1 support, when supportsHTTP11 is true, is currently limited\n-     * to a canned 0-length response that contains the following headers:\n-     *       \"X-Magic\", \"HTTP\/1.1 request received by HTTP\/2 server\",\n-     *       \"X-Received-Body\", <the request body>);\n-     *\n-     * @param localAddr local address to bind to\n-     * @param serverName SNI servername\n-     * @param secure https or http\n-     * @param port listen port\n-     * @param exec executor service (cached thread pool is used if null)\n-     * @param backlog the server socket backlog\n-     * @param properties additional configuration properties\n-     * @param context the SSLContext used when secure is true\n-     * @param supportsHTTP11 if true, the server may issue an HTTP\/1.1 response\n-     *        to either 1) a non-Upgrade HTTP\/1.1 request, or 2) a secure\n-     *        connection without the h2 ALPN. Otherwise, false to operate in\n-     *        HTTP\/2 mode exclusively.\n-     *\/\n-    public Http2TestServer(InetAddress localAddr,\n-                           String serverName,\n-                           boolean secure,\n-                           int port,\n-                           ExecutorService exec,\n-                           int backlog,\n-                           Properties properties,\n-                           SSLContext context,\n-                           boolean supportsHTTP11)\n-        throws Exception\n-    {\n-        this.serverName = serverName;\n-        this.supportsHTTP11 = supportsHTTP11;\n-        if (secure) {\n-           if (context != null)\n-               this.sslContext = context;\n-           else\n-               this.sslContext = SSLContext.getDefault();\n-            server = initSecure(localAddr, port, backlog);\n-        } else {\n-            this.sslContext = context;\n-            server = initPlaintext(port, backlog);\n-        }\n-        this.secure = secure;\n-        this.exec = exec == null ? getDefaultExecutor() : exec;\n-        this.handlers = Collections.synchronizedMap(new HashMap<>());\n-        this.properties = properties;\n-        this.connections = new HashMap<>();\n-    }\n-\n-    \/**\n-     * Adds the given handler for the given path\n-     *\/\n-    public void addHandler(Http2Handler handler, String path) {\n-        handlers.put(path, handler);\n-    }\n-\n-    volatile Http2TestExchangeSupplier exchangeSupplier = Http2TestExchangeSupplier.ofDefault();\n-\n-    \/**\n-     * Sets an explicit exchange handler to be used for all future connections.\n-     * Useful for testing scenarios where non-standard or specific server\n-     * behaviour is required, either direct control over the frames sent, \"bad\"\n-     * behaviour, or something else.\n-     *\/\n-    public void setExchangeSupplier(Http2TestExchangeSupplier exchangeSupplier) {\n-        this.exchangeSupplier = exchangeSupplier;\n-    }\n-\n-    Http2Handler getHandlerFor(String path) {\n-        if (path == null || path.equals(\"\"))\n-            path = \"\/\";\n-\n-        final String fpath = path;\n-        AtomicReference<String> bestMatch = new AtomicReference<>(\"\");\n-        AtomicReference<Http2Handler> href = new AtomicReference<>();\n-\n-        handlers.forEach((key, value) -> {\n-            if (fpath.startsWith(key) && key.length() > bestMatch.get().length()) {\n-                bestMatch.set(key);\n-                href.set(value);\n-            }\n-        });\n-        Http2Handler handler = href.get();\n-        if (handler == null)\n-            throw new RuntimeException(\"No handler found for path \" + path);\n-        System.err.println(\"Using handler for: \" + bestMatch.get());\n-        return handler;\n-    }\n-\n-    final ServerSocket initPlaintext(int port, int backlog) throws Exception {\n-        ServerSocket ss = new ServerSocket();\n-        ss.setReuseAddress(false);\n-        ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), backlog);\n-        return ss;\n-    }\n-\n-    public synchronized void stop() {\n-        \/\/ TODO: clean shutdown GoAway\n-        stopping = true;\n-        System.err.printf(\"Server stopping %d connections\\n\", connections.size());\n-        for (Http2TestServerConnection connection : connections.values()) {\n-            connection.close(ErrorFrame.NO_ERROR);\n-        }\n-        try {\n-            server.close();\n-        } catch (IOException e) {}\n-        exec.shutdownNow();\n-    }\n-\n-\n-    final ServerSocket initSecure(InetAddress localAddr, int port, int backlog) throws Exception {\n-        ServerSocketFactory fac;\n-        SSLParameters sslp = null;\n-        fac = sslContext.getServerSocketFactory();\n-        sslp = sslContext.getSupportedSSLParameters();\n-        SSLServerSocket se = (SSLServerSocket) fac.createServerSocket();\n-        se.setReuseAddress(false);\n-        se.bind(new InetSocketAddress(localAddr, 0), backlog);\n-        if (supportsHTTP11) {\n-            sslp.setApplicationProtocols(new String[]{\"h2\", \"http\/1.1\"});\n-        } else {\n-            sslp.setApplicationProtocols(new String[]{\"h2\"});\n-        }\n-        sslp.setEndpointIdentificationAlgorithm(\"HTTPS\");\n-        se.setSSLParameters(sslp);\n-        se.setEnabledCipherSuites(se.getSupportedCipherSuites());\n-        se.setEnabledProtocols(se.getSupportedProtocols());\n-        \/\/ other initialisation here\n-        return se;\n-    }\n-\n-    public String serverName() {\n-        return serverName;\n-    }\n-\n-    private synchronized void putConnection(InetSocketAddress addr, Http2TestServerConnection c) {\n-        if (!stopping)\n-            connections.put(addr, c);\n-    }\n-\n-    private synchronized void removeConnection(InetSocketAddress addr, Http2TestServerConnection c) {\n-        connections.remove(addr, c);\n-    }\n-\n-    \/**\n-     * Starts a thread which waits for incoming connections.\n-     *\/\n-    public void start() {\n-        exec.submit(() -> {\n-            try {\n-                while (!stopping) {\n-                    Socket socket = server.accept();\n-                    Http2TestServerConnection c = null;\n-                    InetSocketAddress addr = null;\n-                    try {\n-                        addr = (InetSocketAddress) socket.getRemoteSocketAddress();\n-                        c = createConnection(this, socket, exchangeSupplier);\n-                        putConnection(addr, c);\n-                        c.run();\n-                    } catch (Throwable e) {\n-                        \/\/ we should not reach here, but if we do\n-                        \/\/ the connection might not have been closed\n-                        \/\/ and if so then the client might wait\n-                        \/\/ forever.\n-                        if (c != null) {\n-                            removeConnection(addr, c);\n-                            c.close(ErrorFrame.PROTOCOL_ERROR);\n-                        } else {\n-                            socket.close();\n-                        }\n-                        System.err.println(\"TestServer: start exception: \" + e);\n-                    }\n-                }\n-            } catch (SecurityException se) {\n-                System.err.println(\"TestServer: terminating, caught \" + se);\n-                se.printStackTrace();\n-                stopping = true;\n-                try { server.close(); } catch (IOException ioe) { \/* ignore *\/}\n-            } catch (Throwable e) {\n-                if (!stopping) {\n-                    System.err.println(\"TestServer: terminating, caught \" + e);\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-    }\n-\n-    protected Http2TestServerConnection createConnection(Http2TestServer http2TestServer,\n-                                                         Socket socket,\n-                                                         Http2TestExchangeSupplier exchangeSupplier)\n-            throws IOException {\n-        return new Http2TestServerConnection(http2TestServer, socket, exchangeSupplier, properties);\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        stop();\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServer.java","additions":0,"deletions":346,"binary":false,"changes":346,"status":"deleted"},{"patch":"@@ -1,1193 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.Socket;\n-import java.net.URI;\n-import java.net.InetAddress;\n-import javax.net.ssl.*;\n-import java.net.URISyntaxException;\n-import java.net.http.HttpHeaders;\n-import java.nio.ByteBuffer;\n-import java.util.*;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.function.Consumer;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n-import jdk.internal.net.http.frame.*;\n-import jdk.internal.net.http.hpack.Decoder;\n-import jdk.internal.net.http.hpack.DecodingCallback;\n-import jdk.internal.net.http.hpack.Encoder;\n-import sun.net.www.http.ChunkedInputStream;\n-import sun.net.www.http.HttpClient;\n-import static java.nio.charset.StandardCharsets.ISO_8859_1;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static jdk.internal.net.http.frame.SettingsFrame.HEADER_TABLE_SIZE;\n-\n-\/**\n- * Represents one HTTP2 connection, either plaintext upgraded from HTTP\/1.1\n- * or HTTPS opened using \"h2\" ALPN.\n- *\/\n-public class Http2TestServerConnection {\n-    final Http2TestServer server;\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    final Map<Integer, Queue> streams; \/\/ input q per stream\n-    final Map<Integer, BodyOutputStream> outStreams; \/\/ output q per stream\n-    final HashSet<Integer> pushStreams;\n-    final Queue<Http2Frame> outputQ;\n-    volatile int nextstream;\n-    final Socket socket;\n-    final Http2TestExchangeSupplier exchangeSupplier;\n-    final InputStream is;\n-    final OutputStream os;\n-    volatile Encoder hpackOut;\n-    volatile Decoder hpackIn;\n-    volatile SettingsFrame clientSettings;\n-    final SettingsFrame serverSettings;\n-    final ExecutorService exec;\n-    final boolean secure;\n-    final Properties properties;\n-    volatile boolean stopping;\n-    volatile int nextPushStreamId = 2;\n-    ConcurrentLinkedQueue<PingRequest> pings = new ConcurrentLinkedQueue<>();\n-\n-    final static ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);\n-    final static byte[] EMPTY_BARRAY = new byte[0];\n-    final Random random;\n-\n-    final static byte[] clientPreface = \"PRI * HTTP\/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\".getBytes();\n-\n-    static class Sentinel extends Http2Frame {\n-        Sentinel() { super(-1,-1);}\n-    }\n-\n-    static final Sentinel sentinel = new Sentinel();\n-\n-    class PingRequest {\n-        final byte[] pingData;\n-        final long pingStamp;\n-        final CompletableFuture<Long> response;\n-\n-        PingRequest() {\n-            pingData = new byte[8];\n-            random.nextBytes(pingData);\n-            pingStamp = System.currentTimeMillis();\n-            response = new CompletableFuture<>();\n-        }\n-\n-        PingFrame frame() {\n-            return new PingFrame(0, pingData);\n-        }\n-\n-        CompletableFuture<Long> response() {\n-            return response;\n-        }\n-\n-        void success() {\n-            response.complete(System.currentTimeMillis() - pingStamp);\n-        }\n-\n-        void fail(Throwable t) {\n-            response.completeExceptionally(t);\n-        }\n-    }\n-\n-    Http2TestServerConnection(Http2TestServer server,\n-                              Socket socket,\n-                              Http2TestExchangeSupplier exchangeSupplier,\n-                              Properties properties)\n-        throws IOException\n-    {\n-        System.err.println(\"TestServer: New connection from \" + socket);\n-\n-        if (socket instanceof SSLSocket) {\n-            SSLSocket sslSocket = (SSLSocket)socket;\n-            handshake(server.serverName(), sslSocket);\n-            if (!server.supportsHTTP11 && !\"h2\".equals(sslSocket.getApplicationProtocol())) {\n-                throw new IOException(\"Unexpected ALPN: [\" + sslSocket.getApplicationProtocol() + \"]\");\n-            }\n-        }\n-        this.server = server;\n-        this.exchangeSupplier = exchangeSupplier;\n-        this.streams = Collections.synchronizedMap(new HashMap<>());\n-        this.outStreams = Collections.synchronizedMap(new HashMap<>());\n-        this.outputQ = new Queue<>(sentinel);\n-        this.random = new Random();\n-        this.socket = socket;\n-        this.properties = properties;\n-        this.socket.setTcpNoDelay(true);\n-        this.serverSettings = getServerSettingProperties();\n-        this.exec = server.exec;\n-        this.secure = server.secure;\n-        this.pushStreams = new HashSet<>();\n-        is = new BufferedInputStream(socket.getInputStream());\n-        os = new BufferedOutputStream(socket.getOutputStream());\n-    }\n-\n-    static final String propPrefix = \"http2server.settings.\";\n-\n-    static final String[][] propIDs = {\n-        {\"header_table_size\", Integer.toString(SettingsFrame.HEADER_TABLE_SIZE)},\n-        {\"enable_push\", Integer.toString(SettingsFrame.ENABLE_PUSH)},\n-        {\"max_concurrent_streams\", Integer.toString(SettingsFrame.MAX_CONCURRENT_STREAMS)},\n-        {\"initial_window_size\", Integer.toString(SettingsFrame.INITIAL_WINDOW_SIZE)},\n-        {\"max_frame_size\", Integer.toString(SettingsFrame.MAX_FRAME_SIZE)},\n-        {\"max_header_list_size\", Integer.toString(SettingsFrame.MAX_HEADER_LIST_SIZE)}\n-    };\n-\n-    private SettingsFrame getServerSettingProperties() {\n-        SettingsFrame s = SettingsFrame.defaultRFCSettings();\n-        if (properties == null)\n-            return s;\n-        for (int i=0; i<propIDs.length; i++) {\n-            String key = propIDs[i][0];\n-            String numS = propIDs[i][1];\n-            String prop = properties.getProperty(propPrefix + key);\n-            if (prop != null) {\n-                try {\n-                    System.err.println(\"TestServer: setting \" + key + \" property to: \" +\n-                        prop);\n-                    int num = Integer.parseInt(numS);\n-                    System.err.println(\"TestServer: num = \" + num);\n-                    s.setParameter(num, Integer.parseInt(prop));\n-                } catch (NumberFormatException e) {\/* ignore errors *\/}\n-            }\n-        }\n-        return s;\n-    }\n-\n-    \/**\n-     * Sends a PING frame on this connection, and completes the returned\n-     * CF when the PING ack is received. The CF is given\n-     * an integer, whose value is the number of milliseconds\n-     * between PING and ACK.\n-     *\/\n-    CompletableFuture<Long> sendPing() {\n-        PingRequest ping = null;\n-        try {\n-            ping = new PingRequest();\n-            pings.add(ping);\n-            outputQ.put(ping.frame());\n-        } catch (Throwable t) {\n-            ping.fail(t);\n-        }\n-        return ping.response();\n-    }\n-\n-    void goAway(int error) throws IOException {\n-        int laststream = nextstream >= 3 ? nextstream - 2 : 1;\n-\n-        GoAwayFrame go = new GoAwayFrame(laststream, error);\n-        outputQ.put(go);\n-    }\n-\n-    \/**\n-     * Returns the first PingRequest from Queue\n-     *\/\n-    private PingRequest getNextRequest() {\n-        return pings.poll();\n-    }\n-\n-    \/**\n-     * Handles incoming Ping, which could be an ack\n-     * or a client originated Ping\n-     *\/\n-    void handlePing(PingFrame ping) throws IOException {\n-        if (ping.streamid() != 0) {\n-            System.err.println(\"Invalid ping received\");\n-            close(ErrorFrame.PROTOCOL_ERROR);\n-            return;\n-        }\n-        if (ping.getFlag(PingFrame.ACK)) {\n-            \/\/ did we send a Ping?\n-            PingRequest request = getNextRequest();\n-            if (request == null) {\n-                System.err.println(\"Invalid ping ACK received\");\n-                close(ErrorFrame.PROTOCOL_ERROR);\n-                return;\n-            } else if (!Arrays.equals(request.pingData, ping.getData())) {\n-                request.fail(new RuntimeException(\"Wrong ping data in ACK\"));\n-            } else {\n-                request.success();\n-            }\n-        } else {\n-            \/\/ client originated PING. Just send it back with ACK set\n-            ping.setFlag(PingFrame.ACK);\n-            outputQ.put(ping);\n-        }\n-    }\n-\n-    private static boolean compareIPAddrs(InetAddress addr1, String host) {\n-        try {\n-            InetAddress addr2 = InetAddress.getByName(host);\n-            return addr1.equals(addr2);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    private static void handshake(String name, SSLSocket sock) throws IOException {\n-        if (name == null) {\n-            sock.getSession(); \/\/ awaits handshake completion\n-            return;\n-        } else if (name.equals(\"localhost\")) {\n-            name = \"localhost\";\n-        }\n-        final String fname = name;\n-        final InetAddress addr1 = InetAddress.getByName(name);\n-        SSLParameters params = sock.getSSLParameters();\n-        SNIMatcher matcher = new SNIMatcher(StandardConstants.SNI_HOST_NAME) {\n-            public boolean matches (SNIServerName n) {\n-                String host = ((SNIHostName)n).getAsciiName();\n-                if (host.equals(\"localhost\"))\n-                    host = \"localhost\";\n-                boolean cmp = host.equalsIgnoreCase(fname);\n-                if (cmp)\n-                    return true;\n-                return compareIPAddrs(addr1, host);\n-            }\n-        };\n-        List<SNIMatcher> list = List.of(matcher);\n-        params.setSNIMatchers(list);\n-        sock.setSSLParameters(params);\n-        sock.getSession(); \/\/ blocks until handshake done\n-    }\n-\n-    void closeIncoming() {\n-        close(-1);\n-    }\n-\n-    void close(int error) {\n-        if (stopping)\n-            return;\n-        stopping = true;\n-        System.err.printf(\"Server connection to %s stopping. %d streams\\n\",\n-            socket.getRemoteSocketAddress().toString(), streams.size());\n-        streams.forEach((i, q) -> {\n-            q.orderlyClose();\n-        });\n-        try {\n-            if (error != -1)\n-                goAway(error);\n-            outputQ.orderlyClose();\n-            socket.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-    private void readPreface() throws IOException {\n-        int len = clientPreface.length;\n-        byte[] bytes = new byte[len];\n-        int n = is.readNBytes(bytes, 0, len);\n-        if (Arrays.compare(clientPreface, bytes) != 0) {\n-            System.err.printf(\"Invalid preface: read %d\/%d bytes%n\", n, len);\n-            throw new IOException(\"Invalid preface: \" +\n-                    new String(bytes, 0, len, ISO_8859_1));\n-        }\n-    }\n-\n-    Http1InitialRequest doUpgrade(Http1InitialRequest upgrade) throws IOException {\n-        String h2c = getHeader(upgrade.headers, \"Upgrade\");\n-        if (h2c == null || !h2c.equals(\"h2c\")) {\n-            System.err.println(\"Server:HEADERS: \" + upgrade);\n-            throw new IOException(\"Bad upgrade 1 \" + h2c);\n-        }\n-\n-        sendHttp1Response(101, \"Switching Protocols\", \"Connection\", \"Upgrade\",\n-                \"Upgrade\", \"h2c\");\n-\n-        sendSettingsFrame();\n-        readPreface();\n-\n-        String clientSettingsString = getHeader(upgrade.headers, \"HTTP2-Settings\");\n-        clientSettings = getSettingsFromString(clientSettingsString);\n-\n-        return upgrade;\n-    }\n-\n-    \/**\n-     * Decodes the given, Client, settings payload provided in base64 HTTP1\n-     * header value.\n-     *\/\n-    private SettingsFrame getSettingsFromString(String s) throws IOException {\n-        Base64.Decoder decoder = Base64.getUrlDecoder();\n-        byte[] payload = decoder.decode(s);\n-        ByteBuffer bb1 = ByteBuffer.wrap(payload);\n-        \/\/ simulate header of Settings Frame\n-        ByteBuffer bb0 = ByteBuffer.wrap(\n-                new byte[] {0, 0, (byte)payload.length, 4, 0, 0, 0, 0, 0});\n-        List<Http2Frame> frames = new ArrayList<>();\n-        FramesDecoder reader = new FramesDecoder(frames::add);\n-        reader.decode(bb0);\n-        reader.decode(bb1);\n-        if (frames.size()!=1)\n-            throw new IOException(\"Expected 1 frame got \"+frames.size()) ;\n-        Http2Frame frame = frames.get(0);\n-        if (!(frame instanceof SettingsFrame))\n-            throw new IOException(\"Expected SettingsFrame\");\n-        return (SettingsFrame)frame;\n-    }\n-\n-    public int getMaxFrameSize() {\n-        return clientSettings.getParameter(SettingsFrame.MAX_FRAME_SIZE);\n-    }\n-\n-    \/** Sends a pre-canned HTTP\/1.1 response. *\/\n-    private void standardHTTP11Response(Http1InitialRequest request)\n-        throws IOException\n-    {\n-        String upgradeHeader = getHeader(request.headers, \"Upgrade\");\n-        if (upgradeHeader != null) {\n-            throw new IOException(\"Unexpected Upgrade header:\" + upgradeHeader);\n-        }\n-\n-        sendHttp1Response(200, \"OK\",\n-                          \"Connection\", \"close\",\n-                          \"Content-Length\", \"0\",\n-                          \"X-Magic\", \"HTTP\/1.1 request received by HTTP\/2 server\",\n-                          \"X-Received-Body\", new String(request.body, UTF_8));\n-    }\n-\n-    void run() throws Exception {\n-        Http1InitialRequest upgrade = null;\n-        if (!secure) {\n-            Http1InitialRequest request = readHttp1Request();\n-            String h2c = getHeader(request.headers, \"Upgrade\");\n-            if (h2c == null || !h2c.equals(\"h2c\")) {\n-                if (server.supportsHTTP11) {\n-                    standardHTTP11Response(request);\n-                    socket.close();\n-                    return;\n-                } else {\n-                    System.err.println(\"Server:HEADERS: \" + upgrade);\n-                    throw new IOException(\"Bad upgrade 1 \" + h2c);\n-                }\n-            }\n-            upgrade = doUpgrade(request);\n-        } else { \/\/ secure\n-            SSLSocket sslSocket = (SSLSocket)socket;\n-            if (sslSocket.getApplicationProtocol().equals(\"h2\")) {\n-                readPreface();\n-                sendSettingsFrame(true);\n-                clientSettings = (SettingsFrame) readFrame();\n-                if (clientSettings.getFlag(SettingsFrame.ACK)) {\n-                    \/\/ we received the ack to our frame first\n-                    clientSettings = (SettingsFrame) readFrame();\n-                }\n-                nextstream = 1;\n-            } else if (sslSocket.getApplicationProtocol().equals(\"http\/1.1\") ||\n-                       sslSocket.getApplicationProtocol().equals(\"\")) {\n-                standardHTTP11Response(readHttp1Request());\n-                socket.shutdownOutput();\n-                socket.close();\n-                return;\n-            } else {\n-                throw new IOException(\"Unexpected ALPN:\" + sslSocket.getApplicationProtocol());\n-            }\n-        }\n-\n-        \/\/ Uncomment if needed, but very noisy\n-        \/\/System.out.println(\"ServerSettings: \" + serverSettings);\n-        \/\/System.out.println(\"ClientSettings: \" + clientSettings);\n-\n-        hpackOut = new Encoder(serverSettings.getParameter(HEADER_TABLE_SIZE));\n-        hpackIn = new Decoder(clientSettings.getParameter(HEADER_TABLE_SIZE));\n-\n-        if (!secure) {\n-            createPrimordialStream(upgrade);\n-            nextstream = 3;\n-        }\n-\n-        (new ConnectionThread(\"readLoop\", this::readLoop)).start();\n-        (new ConnectionThread(\"writeLoop\", this::writeLoop)).start();\n-    }\n-\n-    class ConnectionThread extends Thread {\n-        final Runnable r;\n-        ConnectionThread(String name, Runnable r) {\n-            setName(name);\n-            setDaemon(true);\n-            this.r = r;\n-        }\n-\n-        public void run() {\n-            r.run();\n-        }\n-    }\n-\n-    private void writeFrame(Http2Frame frame) throws IOException {\n-        List<ByteBuffer> bufs = new FramesEncoder().encodeFrame(frame);\n-        \/\/System.err.println(\"TestServer: Writing frame \" + frame.toString());\n-        int c = 0;\n-        for (ByteBuffer buf : bufs) {\n-            byte[] ba = buf.array();\n-            int start = buf.arrayOffset() + buf.position();\n-            c += buf.remaining();\n-            os.write(ba, start, buf.remaining());\n-\n-\/\/            System.out.println(\"writing byte at a time\");\n-\/\/            while (buf.hasRemaining()) {\n-\/\/                byte b = buf.get();\n-\/\/                os.write(b);\n-\/\/                os.flush();\n-\/\/                try {\n-\/\/                    Thread.sleep(1);\n-\/\/                } catch(InterruptedException e) {\n-\/\/                    UncheckedIOException uie = new UncheckedIOException(new IOException(\"\"));\n-\/\/                    uie.addSuppressed(e);\n-\/\/                    throw uie;\n-\/\/                }\n-\/\/            }\n-        }\n-        os.flush();\n-        \/\/System.err.printf(\"TestServer: wrote %d bytes\\n\", c);\n-    }\n-\n-    private void handleCommonFrame(Http2Frame f) throws IOException {\n-        if (f instanceof SettingsFrame) {\n-            SettingsFrame sf = (SettingsFrame) f;\n-            if (sf.getFlag(SettingsFrame.ACK)) \/\/ ignore\n-            {\n-                return;\n-            }\n-            \/\/ otherwise acknowledge it\n-            clientSettings = sf;\n-            SettingsFrame frame = new SettingsFrame();\n-            frame.setFlag(SettingsFrame.ACK);\n-            frame.streamid(0);\n-            outputQ.put(frame);\n-            return;\n-        } else if (f instanceof GoAwayFrame) {\n-            System.err.println(\"Closing: \"+ f.toString());\n-            close(ErrorFrame.NO_ERROR);\n-        } else if (f instanceof PingFrame) {\n-            handlePing((PingFrame)f);\n-        } else\n-            throw new UnsupportedOperationException(\"Not supported yet: \" + f.toString());\n-    }\n-\n-    void sendWindowUpdates(int len, int streamid) throws IOException {\n-        if (len == 0)\n-            return;\n-        WindowUpdateFrame wup = new WindowUpdateFrame(streamid, len);\n-        outputQ.put(wup);\n-        wup = new WindowUpdateFrame(0 , len);\n-        outputQ.put(wup);\n-    }\n-\n-    HttpHeaders decodeHeaders(List<HeaderFrame> frames) throws IOException {\n-        HttpHeadersBuilder headersBuilder = createNewHeadersBuilder();\n-\n-        DecodingCallback cb = (name, value) -> {\n-            headersBuilder.addHeader(name.toString(), value.toString());\n-        };\n-\n-        for (HeaderFrame frame : frames) {\n-            List<ByteBuffer> buffers = frame.getHeaderBlock();\n-            for (ByteBuffer buffer : buffers) {\n-                hpackIn.decode(buffer, false, cb);\n-            }\n-        }\n-        hpackIn.decode(EMPTY_BUFFER, true, cb);\n-        return headersBuilder.build();\n-    }\n-\n-    String getRequestLine(String request) {\n-        int eol = request.indexOf(CRLF);\n-        return request.substring(0, eol);\n-    }\n-\n-    String getHeaders(String request) {\n-        int start = request.indexOf(CRLF);\n-        int end = request.indexOf(CRLFCRLF);\n-        if (start == -1 || end == -1) {\n-            throw new RuntimeException(\"Malformed request\");\n-        }\n-        return request.substring(start,end);\n-    }\n-\n-    static void addHeaders(String headersString, HttpHeadersBuilder headersBuilder) {\n-        String[] hh = headersString.split(CRLF);\n-        for (String header : hh) {\n-            int colon = header.indexOf(':');\n-            if (colon == -1)\n-                continue;\n-            String name = header.substring(0, colon);\n-            String value = header.substring(colon+1);\n-            while (value.startsWith(\" \"))\n-                value = value.substring(1);\n-            headersBuilder.addHeader(name, value);\n-        }\n-    }\n-\n-    \/\/ First stream (1) comes from a plaintext HTTP\/1.1 request\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    void createPrimordialStream(Http1InitialRequest request) throws IOException {\n-        HttpHeadersBuilder headersBuilder = createNewHeadersBuilder();\n-        String requestLine = getRequestLine(request.headers);\n-        String[] tokens = requestLine.split(\" \");\n-        if (!tokens[2].equals(\"HTTP\/1.1\")) {\n-            throw new IOException(\"bad request line\");\n-        }\n-        URI uri;\n-        try {\n-            uri = new URI(tokens[1]);\n-        } catch (URISyntaxException e) {\n-            throw new IOException(e);\n-        }\n-        String host = getHeader(request.headers, \"Host\");\n-        if (host == null) {\n-            throw new IOException(\"missing Host\");\n-        }\n-\n-        headersBuilder.setHeader(\":method\", tokens[0]);\n-        headersBuilder.setHeader(\":scheme\", \"http\"); \/\/ always in this case\n-        headersBuilder.setHeader(\":authority\", host);\n-        String path = uri.getRawPath();\n-        if (uri.getRawQuery() != null)\n-            path = path + \"?\" + uri.getRawQuery();\n-        headersBuilder.setHeader(\":path\", path);\n-\n-        Queue q = new Queue(sentinel);\n-        byte[] body = getRequestBody(request);\n-        addHeaders(getHeaders(request.headers), headersBuilder);\n-        headersBuilder.setHeader(\"Content-length\", Integer.toString(body.length));\n-        HttpHeaders headers = headersBuilder.build();\n-\n-        addRequestBodyToQueue(body, q);\n-        streams.put(1, q);\n-        exec.submit(() -> {\n-            handleRequest(headers, q, 1, true \/*complete request has been read*\/);\n-        });\n-    }\n-\n-    \/\/ all other streams created here\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    void createStream(HeaderFrame frame) throws IOException {\n-        List<HeaderFrame> frames = new LinkedList<>();\n-        frames.add(frame);\n-        int streamid = frame.streamid();\n-        if (streamid != nextstream) {\n-            throw new IOException(\"unexpected stream id\");\n-        }\n-        nextstream += 2;\n-\n-        boolean endStream = false;\n-        if (frame.getFlag(HeaderFrame.END_STREAM)) {\n-            endStream = true;\n-        }\n-\n-        while (!frame.getFlag(HeaderFrame.END_HEADERS)) {\n-            Http2Frame f = readFrame();\n-            if (!(f instanceof HeaderFrame)) {\n-                handleCommonFrame(f); \/\/ should only be error frames\n-            } else {\n-                frame = (HeaderFrame) f;\n-                if (frame.getFlag(HeaderFrame.END_STREAM)) {\n-                    endStream = true;\n-                }\n-                frames.add(frame);\n-            }\n-        }\n-        boolean endStreamReceived = endStream;\n-        HttpHeaders headers = decodeHeaders(frames);\n-\n-        \/\/ Strict to assert Client correctness. Not all servers are as strict,\n-        \/\/ but some are known to be.\n-        Optional<?> disallowedHeader = headers.firstValue(\"Upgrade\");\n-        if (disallowedHeader.isPresent()) {\n-            throw new IOException(\"Unexpected Upgrade in headers:\" + headers);\n-        }\n-        disallowedHeader = headers.firstValue(\"HTTP2-Settings\");\n-        if (disallowedHeader.isPresent())\n-            throw new IOException(\"Unexpected HTTP2-Settings in headers:\" + headers);\n-\n-\n-        Queue q = new Queue(sentinel);\n-        streams.put(streamid, q);\n-        exec.submit(() -> {\n-            handleRequest(headers, q, streamid, endStreamReceived);\n-        });\n-    }\n-\n-    \/\/ runs in own thread. Handles request from start to finish. Incoming frames\n-    \/\/ for this stream\/request delivered on Q\n-\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    void handleRequest(HttpHeaders headers,\n-                       Queue queue,\n-                       int streamid,\n-                       boolean endStreamReceived)\n-    {\n-        String method = headers.firstValue(\":method\").orElse(\"\");\n-        \/\/System.out.println(\"method = \" + method);\n-        String path = headers.firstValue(\":path\").orElse(\"\");\n-        \/\/System.out.println(\"path = \" + path);\n-        String scheme = headers.firstValue(\":scheme\").orElse(\"\");\n-        \/\/System.out.println(\"scheme = \" + scheme);\n-        String authority = headers.firstValue(\":authority\").orElse(\"\");\n-        \/\/System.out.println(\"authority = \" + authority);\n-        System.err.printf(\"TestServer: %s %s\\n\", method, path);\n-        int winsize = clientSettings.getParameter(\n-                SettingsFrame.INITIAL_WINDOW_SIZE);\n-        \/\/System.err.println (\"Stream window size = \" + winsize);\n-\n-        final InputStream bis;\n-        if (endStreamReceived && queue.size() == 0) {\n-            System.err.println(\"Server: got END_STREAM for stream \" + streamid);\n-            bis = NullInputStream.INSTANCE;\n-        } else {\n-            System.err.println(\"Server: creating input stream for stream \" + streamid);\n-            bis = new BodyInputStream(queue, streamid, this);\n-        }\n-        try (bis;\n-             BodyOutputStream bos = new BodyOutputStream(streamid, winsize, this))\n-        {\n-            outStreams.put(streamid, bos);\n-            String us = scheme + \":\/\/\" + authority + path;\n-            URI uri = new URI(us);\n-            boolean pushAllowed = clientSettings.getParameter(SettingsFrame.ENABLE_PUSH) == 1;\n-            HttpHeadersBuilder rspheadersBuilder = createNewHeadersBuilder();\n-            Http2TestExchange exchange = exchangeSupplier.get(streamid, method,\n-                    headers, rspheadersBuilder, uri, bis, getSSLSession(),\n-                    bos, this, pushAllowed);\n-\n-            \/\/ give to user\n-            Http2Handler handler = server.getHandlerFor(uri.getPath());\n-            try {\n-                handler.handle(exchange);\n-            } catch (IOException closed) {\n-                if (bos.closed) {\n-                    Queue q = streams.get(streamid);\n-                    if (q != null && (q.isClosed() || q.isClosing())) {\n-                        System.err.println(\"TestServer: Stream \" + streamid + \" closed: \" + closed);\n-                        return;\n-                    }\n-                }\n-                throw closed;\n-            }\n-\n-            \/\/ everything happens in the exchange from here. Hopefully will\n-            \/\/ return though.\n-        } catch (Throwable e) {\n-            System.err.println(\"TestServer: handleRequest exception: \" + e);\n-            e.printStackTrace();\n-            close(-1);\n-        }\n-    }\n-\n-    protected HttpHeadersBuilder createNewHeadersBuilder() {\n-        return new HttpHeadersBuilder();\n-    }\n-\n-    private SSLSession getSSLSession() {\n-        if (! (socket instanceof SSLSocket))\n-            return null;\n-        SSLSocket ssl = (SSLSocket)socket;\n-        return ssl.getSession();\n-    }\n-    \/\/ Runs in own thread\n-\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    void readLoop() {\n-        try {\n-            while (!stopping) {\n-                Http2Frame frame = readFrameImpl();\n-                if (frame == null) {\n-                    closeIncoming();\n-                    return;\n-                }\n-                \/\/System.err.printf(\"TestServer: received frame %s\\n\", frame);\n-                int stream = frame.streamid();\n-                int next = nextstream;\n-                int nextPush = nextPushStreamId;\n-                if (stream == 0) {\n-                    if (frame.type() == WindowUpdateFrame.TYPE) {\n-                        WindowUpdateFrame wup = (WindowUpdateFrame) frame;\n-                        updateConnectionWindow(wup.getUpdate());\n-                    } else {\n-                        \/\/ other common frame types\n-                        handleCommonFrame(frame);\n-                    }\n-                } else {\n-                    Queue q = streams.get(stream);\n-                    if (frame.type() == HeadersFrame.TYPE) {\n-                        if (q != null) {\n-                            System.err.println(\"HEADERS frame for existing stream! Error.\");\n-                            \/\/ TODO: close connection\n-                            continue;\n-                        } else {\n-                            createStream((HeadersFrame) frame);\n-                        }\n-                    } else {\n-                        if (q == null && !pushStreams.contains(stream)) {\n-                            System.err.printf(\"Non Headers frame received with\"+\n-                                    \" non existing stream (%d) \", frame.streamid());\n-                            System.err.println(frame);\n-                            continue;\n-                        }\n-                        if (frame.type() == WindowUpdateFrame.TYPE) {\n-                            WindowUpdateFrame wup = (WindowUpdateFrame) frame;\n-                            synchronized (updaters) {\n-                                Consumer<Integer> r = updaters.get(stream);\n-                                r.accept(wup.getUpdate());\n-                            }\n-                        } else if (frame.type() == ResetFrame.TYPE) {\n-                            \/\/ do orderly close on input q\n-                            \/\/ and close the output q immediately\n-                            \/\/ This should mean depending on what the\n-                            \/\/ handler is doing: either an EOF on read\n-                            \/\/ or an IOException if writing the response.\n-                            if (q != null) {\n-                                q.orderlyClose();\n-                                BodyOutputStream oq = outStreams.get(stream);\n-                                if (oq != null)\n-                                    oq.closeInternal();\n-                            } else if (pushStreams.contains(stream)) {\n-                                \/\/ we could interrupt the pushStream's output\n-                                \/\/ but the continuation, even after a reset\n-                                \/\/ should be handle gracefully by the client\n-                                \/\/ anyway.\n-                            } else if (isClientStreamId(stream) && stream < next) {\n-                                \/\/ We may receive a reset on a client stream that has already\n-                                \/\/ been closed. Just ignore it.\n-                                System.err.println(\"TestServer: received ResetFrame on closed stream: \" + stream);\n-                                System.err.println(frame);\n-                            } else if (isServerStreamId(stream) && stream < nextPush) {\n-                                \/\/ We may receive a reset on a push stream that has already\n-                                \/\/ been closed. Just ignore it.\n-                                System.err.println(\"TestServer: received ResetFrame on closed push stream: \" + stream);\n-                                System.err.println(frame);\n-                            } else {\n-                                System.err.println(\"TestServer: Unexpected frame on: \" + stream);\n-                                System.err.println(frame);\n-                                throw new IOException(\"Unexpected frame\");\n-                            }\n-                        } else {\n-                            q.put(frame);\n-                        }\n-                    }\n-                }\n-            }\n-        } catch (Throwable e) {\n-            if (!stopping) {\n-                System.err.println(\"Http server reader thread shutdown\");\n-                e.printStackTrace();\n-            }\n-            close(ErrorFrame.PROTOCOL_ERROR);\n-        }\n-    }\n-\n-    static boolean isClientStreamId(int streamid) {\n-        return (streamid & 0x01) == 0x01;\n-    }\n-\n-    static boolean isServerStreamId(int streamid) {\n-        return (streamid & 0x01) == 0x00;\n-    }\n-\n-    \/** Encodes an group of headers, without any ordering guarantees. *\/\n-    List<ByteBuffer> encodeHeaders(HttpHeaders headers) {\n-        List<ByteBuffer> buffers = new LinkedList<>();\n-\n-        ByteBuffer buf = getBuffer();\n-        boolean encoded;\n-        for (Map.Entry<String, List<String>> entry : headers.map().entrySet()) {\n-            List<String> values = entry.getValue();\n-            String key = entry.getKey().toLowerCase();\n-            for (String value : values) {\n-                do {\n-                    hpackOut.header(key, value);\n-                    encoded = hpackOut.encode(buf);\n-                    if (!encoded) {\n-                        buf.flip();\n-                        buffers.add(buf);\n-                        buf = getBuffer();\n-                    }\n-                } while (!encoded);\n-            }\n-        }\n-        buf.flip();\n-        buffers.add(buf);\n-        return buffers;\n-    }\n-\n-    \/** Encodes an ordered list of headers. *\/\n-    List<ByteBuffer> encodeHeadersOrdered(List<Map.Entry<String,String>> headers) {\n-        List<ByteBuffer> buffers = new LinkedList<>();\n-\n-        ByteBuffer buf = getBuffer();\n-        boolean encoded;\n-        for (Map.Entry<String, String> entry : headers) {\n-            String value = entry.getValue();\n-            String key = entry.getKey().toLowerCase();\n-            do {\n-                hpackOut.header(key, value);\n-                encoded = hpackOut.encode(buf);\n-                if (!encoded) {\n-                    buf.flip();\n-                    buffers.add(buf);\n-                    buf = getBuffer();\n-                }\n-            } while (!encoded);\n-        }\n-        buf.flip();\n-        buffers.add(buf);\n-        return buffers;\n-    }\n-\n-    static void closeIgnore(Closeable c) {\n-        try {\n-            c.close();\n-        } catch (IOException e) {}\n-    }\n-\n-    \/\/ Runs in own thread\n-    void writeLoop() {\n-        try {\n-            while (!stopping) {\n-                Http2Frame frame;\n-                try {\n-                    frame = outputQ.take();\n-                    if (stopping)\n-                        break;\n-                } catch(IOException x) {\n-                    if (stopping && x.getCause() instanceof InterruptedException) {\n-                        break;\n-                    } else throw x;\n-                }\n-                if (frame instanceof ResponseHeaders) {\n-                    ResponseHeaders rh = (ResponseHeaders)frame;\n-                    HeadersFrame hf = new HeadersFrame(rh.streamid(), rh.getFlags(), encodeHeaders(rh.headers));\n-                    writeFrame(hf);\n-                } else if (frame instanceof OutgoingPushPromise) {\n-                    handlePush((OutgoingPushPromise)frame);\n-                } else\n-                    writeFrame(frame);\n-            }\n-            System.err.println(\"TestServer: Connection writer stopping\");\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n-            \/*close();\n-            if (!stopping) {\n-                e.printStackTrace();\n-                System.err.println(\"TestServer: writeLoop exception: \" + e);\n-            }*\/\n-        }\n-    }\n-\n-    private void handlePush(OutgoingPushPromise op) throws IOException {\n-        int promisedStreamid = nextPushStreamId;\n-        PushPromiseFrame pp = new PushPromiseFrame(op.parentStream,\n-                                                   HeaderFrame.END_HEADERS,\n-                                                   promisedStreamid,\n-                                                   encodeHeaders(op.headers),\n-                                                   0);\n-        pushStreams.add(promisedStreamid);\n-        nextPushStreamId += 2;\n-        pp.streamid(op.parentStream);\n-        writeFrame(pp);\n-        final InputStream ii = op.is;\n-        final BodyOutputStream oo = new BodyOutputStream(\n-                promisedStreamid,\n-                clientSettings.getParameter(\n-                        SettingsFrame.INITIAL_WINDOW_SIZE), this);\n-        outStreams.put(promisedStreamid, oo);\n-        oo.goodToGo();\n-        exec.submit(() -> {\n-            try {\n-                ResponseHeaders oh = getPushResponse(promisedStreamid);\n-                outputQ.put(oh);\n-                ii.transferTo(oo);\n-            } catch (Throwable ex) {\n-                System.err.printf(\"TestServer: pushing response error: %s\\n\",\n-                        ex.toString());\n-            } finally {\n-                closeIgnore(ii);\n-                closeIgnore(oo);\n-            }\n-        });\n-\n-    }\n-\n-    \/\/ returns a minimal response with status 200\n-    \/\/ that is the response to the push promise just sent\n-    private ResponseHeaders getPushResponse(int streamid) {\n-        HttpHeadersBuilder hb = createNewHeadersBuilder();\n-        hb.addHeader(\":status\", \"200\");\n-        ResponseHeaders oh = new ResponseHeaders(hb.build());\n-        oh.streamid(streamid);\n-        oh.setFlag(HeaderFrame.END_HEADERS);\n-        return oh;\n-    }\n-\n-    private ByteBuffer getBuffer() {\n-        return ByteBuffer.allocate(8 * 1024);\n-    }\n-\n-    private Http2Frame readFrame() throws IOException {\n-        Http2Frame f = readFrameImpl();\n-        if (f == null)\n-            throw new IOException(\"connection closed\");\n-        return f;\n-    }\n-\n-    \/\/ does not throw an exception for EOF\n-    private Http2Frame readFrameImpl() throws IOException {\n-        try {\n-            byte[] buf = new byte[9];\n-            int ret;\n-            ret=is.readNBytes(buf, 0, 9);\n-            if (ret == 0) {\n-                return null;\n-            } else if (ret != 9) {\n-                throw new IOException(\"readFrame: connection closed\");\n-            }\n-            int len = 0;\n-            for (int i = 0; i < 3; i++) {\n-                int n = buf[i] & 0xff;\n-                \/\/System.err.println(\"n = \" + n);\n-                len = (len << 8) + n;\n-            }\n-            byte[] rest = new byte[len];\n-            int n = is.readNBytes(rest, 0, len);\n-            if (n != len)\n-                throw new IOException(\"Error reading frame\");\n-            List<Http2Frame> frames = new ArrayList<>();\n-            FramesDecoder reader = new FramesDecoder(frames::add);\n-            reader.decode(ByteBuffer.wrap(buf));\n-            reader.decode(ByteBuffer.wrap(rest));\n-            if (frames.size()!=1)\n-                throw new IOException(\"Expected 1 frame got \"+frames.size()) ;\n-\n-            return frames.get(0);\n-        } catch (IOException ee) {\n-            if (stopping)\n-                return null;\n-            throw ee;\n-        }\n-    }\n-\n-    void sendSettingsFrame() throws IOException {\n-        sendSettingsFrame(false);\n-    }\n-\n-    void sendSettingsFrame(boolean now) throws IOException {\n-        if (now) {\n-            writeFrame(serverSettings);\n-        } else {\n-            outputQ.put(serverSettings);\n-        }\n-    }\n-\n-    String readUntil(String end) throws IOException {\n-        int number = end.length();\n-        int found = 0;\n-        StringBuilder sb = new StringBuilder();\n-        while (found < number) {\n-            char expected = end.charAt(found);\n-            int c = is.read();\n-            if (c == -1) {\n-                throw new IOException(\"Connection closed\");\n-            }\n-            char c0 = (char) c;\n-            sb.append(c0);\n-            if (c0 != expected) {\n-                found = 0;\n-                continue;\n-            }\n-            found++;\n-        }\n-        return sb.toString();\n-    }\n-\n-    private int getContentLength(String headers) {\n-        return getIntHeader(headers, \"Content-length\");\n-    }\n-\n-    private int getIntHeader(String headers, String name) {\n-        String val = getHeader(headers, name);\n-        if (val == null) {\n-            return -1;\n-        }\n-        return Integer.parseInt(val);\n-    }\n-\n-    private String getHeader(String headers, String name) {\n-        String headers1 = headers.toLowerCase(); \/\/ not efficient\n-        name = CRLF + name.toLowerCase();\n-        int start = headers1.indexOf(name);\n-        if (start == -1) {\n-            return null;\n-        }\n-        start += 2;\n-        int end = headers1.indexOf(CRLF, start);\n-        String line = headers.substring(start, end);\n-        start = line.indexOf(':');\n-        if (start == -1) {\n-            return null;\n-        }\n-        return line.substring(start + 1).trim();\n-    }\n-\n-    final static String CRLF = \"\\r\\n\";\n-    final static String CRLFCRLF = \"\\r\\n\\r\\n\";\n-\n-    static class Http1InitialRequest {\n-        final String headers;\n-        final byte[] body;\n-        Http1InitialRequest(String headers, byte[] body) {\n-            this.headers = headers;\n-            this.body = body.clone();\n-        }\n-    }\n-\n-    Http1InitialRequest readHttp1Request() throws IOException {\n-        String headers = readUntil(CRLF + CRLF);\n-        int clen = getContentLength(headers);\n-        String te = getHeader(headers, \"Transfer-encoding\");\n-        byte[] buf = new byte[0];\n-        try {\n-            if (clen >= 0) {\n-                \/\/ HTTP\/1.1 fixed length content ( may be 0 ), read it\n-                buf = new byte[clen];\n-                is.readNBytes(buf, 0, clen);\n-            } else if (\"chunked\".equalsIgnoreCase(te)) {\n-                \/\/  HTTP\/1.1 chunked data, read it\n-                buf = readChunkedInputStream(is);\n-            }\n-            return new Http1InitialRequest(headers, buf);\n-        } catch (IOException e) {\n-            System.err.println(\"TestServer: headers read: [ \" + headers + \" ]\");\n-            throw e;\n-        }\n-    }\n-\n-    \/\/ This is a quick hack to get a chunked input stream reader.\n-    private static byte[] readChunkedInputStream(InputStream is) throws IOException {\n-        ChunkedInputStream cis = new ChunkedInputStream(is, new HttpClient() {}, null);\n-        return cis.readAllBytes();\n-    }\n-\n-    void sendHttp1Response(int code, String msg, String... headers) throws IOException {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"HTTP\/1.1 \")\n-                .append(code)\n-                .append(' ')\n-                .append(msg)\n-                .append(CRLF);\n-        int numheaders = headers.length;\n-        for (int i = 0; i < numheaders; i += 2) {\n-            sb.append(headers[i])\n-                    .append(\": \")\n-                    .append(headers[i + 1])\n-                    .append(CRLF);\n-        }\n-        sb.append(CRLF);\n-        String s = sb.toString();\n-        os.write(s.getBytes(\"US-ASCII\"));\n-        os.flush();\n-    }\n-\n-    private void unexpectedFrame(Http2Frame frame) {\n-        System.err.println(\"OOPS. Unexpected\");\n-        assert false;\n-    }\n-\n-    final static ByteBuffer[] bbarray = new ByteBuffer[0];\n-\n-    \/\/ wrapper around a BlockingQueue that throws an exception when it's closed\n-    \/\/ Each stream has one of these\n-\n-    byte[] getRequestBody(Http1InitialRequest request) {\n-        return request.body;\n-    }\n-\n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n-    void addRequestBodyToQueue(byte[] body, Queue q) throws IOException {\n-        ByteBuffer buf = ByteBuffer.wrap(body);\n-        DataFrame df = new DataFrame(1, DataFrame.END_STREAM, buf);\n-        \/\/ only used for primordial stream\n-        q.put(df);\n-    }\n-\n-    \/\/ window updates done in main reader thread because they may\n-    \/\/ be used to unblock BodyOutputStreams waiting for WUPs\n-\n-    HashMap<Integer,Consumer<Integer>> updaters = new HashMap<>();\n-\n-    void registerStreamWindowUpdater(int streamid, Consumer<Integer> r) {\n-        synchronized(updaters) {\n-            updaters.put(streamid, r);\n-        }\n-    }\n-\n-    int sendWindow = 64 * 1024 - 1; \/\/ connection level send window\n-\n-    \/**\n-     * BodyOutputStreams call this to get the connection window first.\n-     *\n-     * @param amount\n-     *\/\n-    synchronized void obtainConnectionWindow(int amount) throws InterruptedException {\n-        while (amount > 0) {\n-            int n = Math.min(amount, sendWindow);\n-            amount -= n;\n-            sendWindow -= n;\n-            if (amount > 0)\n-                wait();\n-        }\n-    }\n-\n-    synchronized void updateConnectionWindow(int amount) {\n-        sendWindow += amount;\n-        notifyAll();\n-    }\n-\n-    \/\/ simplified output headers class. really just a type safe container\n-    \/\/ for the hashmap.\n-\n-    static class ResponseHeaders extends Http2Frame {\n-        HttpHeaders headers;\n-\n-        ResponseHeaders(HttpHeaders headers) {\n-            super(0, 0);\n-            this.headers = headers;\n-        }\n-\n-    }\n-\n-    static class NullInputStream extends InputStream {\n-        static final NullInputStream INSTANCE = new NullInputStream();\n-        private NullInputStream() {}\n-        public int read()      { return -1; }\n-        public int available() { return 0;  }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServerConnection.java","additions":0,"deletions":1193,"binary":false,"changes":1193,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import static java.lang.System.out;\n-\n-public class NoBodyHandler implements Http2Handler {\n-\n-    @Override\n-    public void handle(Http2TestExchange t) throws IOException {\n-        try {\n-            out.println(\"NoBodyHandler received request to \" + t.getRequestURI());\n-            try (InputStream is = t.getRequestBody()) {\n-                byte[] ba = is.readAllBytes();\n-                out.println(Thread.currentThread().getName() + \": Read \" + ba.length);\n-            }\n-            t.sendResponseHeaders(200, 0);\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n-            throw new IOException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/NoBodyHandler.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.InputStream;\n-import java.net.URI;\n-import java.net.http.HttpHeaders;\n-import jdk.internal.net.http.frame.Http2Frame;\n-\n-\/\/ will be converted to a PushPromiseFrame in the writeLoop\n-\/\/ a thread is then created to produce the DataFrames from the InputStream\n-class OutgoingPushPromise extends Http2Frame {\n-    final HttpHeaders headers;\n-    final URI uri;\n-    final InputStream is;\n-    final int parentStream; \/\/ not the pushed streamid\n-\n-    public OutgoingPushPromise(int parentStream,\n-                               URI uri,\n-                               HttpHeaders headers,\n-                               InputStream is) {\n-        super(0,0);\n-        this.uri = uri;\n-        this.headers = headers;\n-        this.is = is;\n-        this.parentStream = parentStream;\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/OutgoingPushPromise.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.net.*;\n-import java.net.http.HttpHeaders;\n-import java.nio.file.*;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.BiPredicate;\n-\n-public class PushHandler implements Http2Handler {\n-\n-    static final BiPredicate<String,String> ACCEPT_ALL = (x, y) -> true;\n-\n-    final Path tempFile;\n-    final int loops;\n-    final long file_size;\n-\n-    public PushHandler(Path file, int loops) throws Exception {\n-        tempFile = file;\n-        this.loops = loops;\n-        this.file_size = Files.size(file);\n-    }\n-\n-    int invocation = 0;\n-\n-    public void handle(Http2TestExchange ee) {\n-        try {\n-            System.err.println (\"Server: handle \" + ee);\n-            invocation++;\n-\n-            if (ee.serverPushAllowed()) {\n-                URI requestURI = ee.getRequestURI();\n-                for (int i=0; i<loops; i++) {\n-                    InputStream is = new FileInputStream(tempFile.toFile());\n-                    URI u = requestURI.resolve(\"\/x\/y\/z\/\" + Integer.toString(i));\n-                    HttpHeaders h = HttpHeaders.of(Map.of(\"X-foo\", List.of(\"bar\")),\n-                                                   ACCEPT_ALL);\n-                    ee.serverPush(u, h, is);\n-                }\n-                System.err.println (\"Server: sent all pushes\");\n-            }\n-            ee.sendResponseHeaders(200, file_size);\n-            OutputStream os = ee.getResponseBody();\n-            InputStream iis = new FileInputStream(tempFile.toFile());\n-            iis.transferTo(os);\n-            os.close();\n-            iis.close();\n-        } catch (Exception ex) {\n-            System.err.println (\"Server: exception \" + ex);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/PushHandler.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.util.LinkedList;\n-import java.util.Objects;\n-import java.util.stream.Stream;\n-\n-\/\/ Each stream has one of these for input. Each Http2Connection has one\n-\/\/ for output. Can be used blocking or asynchronously.\n-\n-public class Queue<T> implements ExceptionallyCloseable {\n-\n-    private final LinkedList<T> q = new LinkedList<>();\n-    private boolean closed = false;\n-    private boolean closing = false;\n-    private Throwable exception = null;\n-    private int waiters; \/\/ true if someone waiting\n-    private final T closeSentinel;\n-\n-    Queue(T closeSentinel) {\n-        this.closeSentinel = Objects.requireNonNull(closeSentinel);\n-    }\n-\n-    public synchronized int size() {\n-        return q.size();\n-    }\n-\n-    public synchronized boolean isClosed() {\n-        return closed;\n-    }\n-\n-    public synchronized boolean isClosing() {\n-        return closing;\n-    }\n-\n-    public synchronized void put(T obj) throws IOException {\n-        Objects.requireNonNull(obj);\n-        if (closed || closing) {\n-            throw new IOException(\"stream closed\");\n-        }\n-\n-        q.add(obj);\n-\n-        if (waiters > 0) {\n-            notifyAll();\n-        }\n-    }\n-\n-    \/\/ Other close() variants are immediate and abortive\n-    \/\/ This allows whatever is on Q to be processed first.\n-\n-    public synchronized void orderlyClose() {\n-        if (closing || closed)\n-            return;\n-\n-        try {\n-            put(closeSentinel);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        closing = true;\n-    }\n-\n-    @Override\n-    public synchronized void close() {\n-        if (closed)\n-            return;\n-        closed = true;\n-        notifyAll();\n-    }\n-\n-    @Override\n-    public synchronized void closeExceptionally(Throwable t) {\n-        if (exception == null) exception = t;\n-        else if (t != null && t != exception) {\n-            if (!Stream.of(exception.getSuppressed())\n-                .filter(x -> x == t)\n-                .findFirst()\n-                .isPresent())\n-            {\n-                exception.addSuppressed(t);\n-            }\n-        }\n-        close();\n-    }\n-\n-    public synchronized T take() throws IOException {\n-        if (closed) {\n-            throw newIOException(\"stream closed\");\n-        }\n-        try {\n-            while (q.size() == 0) {\n-                waiters++;\n-                wait();\n-                if (closed) {\n-                    throw newIOException(\"Queue closed\");\n-                }\n-                waiters--;\n-            }\n-            T item = q.removeFirst();\n-            if (item.equals(closeSentinel)) {\n-                closed = true;\n-                assert q.isEmpty();\n-                return null;\n-            }\n-            return item;\n-        } catch (InterruptedException ex) {\n-            throw new IOException(ex);\n-        }\n-    }\n-\n-    public synchronized T poll() throws IOException {\n-        if (closed) {\n-            throw newIOException(\"stream closed\");\n-        }\n-\n-        if (q.isEmpty()) {\n-            return null;\n-        }\n-        return take();\n-    }\n-\n-    private IOException newIOException(String msg) {\n-        if (exception == null) {\n-            return new IOException(msg);\n-        } else {\n-            return new IOException(msg, exception);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Queue.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.nio.file.*;\n-import java.util.Arrays;\n-\n-public class TestUtil {\n-\n-    static final Path CWD = Paths.get(\".\");\n-    final static String fileContent = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \/\/ repeated\n-\n-    public static Path getAFile(int size) throws IOException {\n-        Path p = tempFile();\n-        BufferedWriter writer = Files.newBufferedWriter(p);\n-        int len = fileContent.length();\n-        int iterations = size \/ len;\n-        int remainder = size - (iterations * len);\n-        for (int i=0; i<iterations; i++)\n-            writer.write(fileContent, 0, len);\n-        writer.write(fileContent, 0, remainder);\n-        writer.close();\n-        return p;\n-    }\n-\n-    public static Path tempFile() {\n-        try {\n-            Path p = Files.createTempFile(CWD, \"TestUtil_tmp_\", \"_HTTPClient\");\n-            return p;\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    public static Void compareFiles(Path path1, Path path2) {\n-        \/\/System.err.printf(\"Comparing %s and %s\\n\", path1.toString(), path2.toString());\n-        try {\n-            long size1 = Files.size(path1);\n-            long size2 = Files.size(path2);\n-            if (size1 != size2) {\n-                String msg = \"File sizes do not match \" +\n-                        Long.toString(size1) + \"\/\" + Long.toString(size2);\n-                throw new RuntimeException(msg);\n-            }\n-            compareContents(path1, path2);\n-            return null;\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    static void compareContents(Path path1, Path path2) {\n-        try {\n-            byte[] b1 = Files.readAllBytes(path1);\n-            byte[] b2 = Files.readAllBytes(path2);\n-            if (!Arrays.equals(b1, b2))\n-                throw new RuntimeException (\"Files do not match\");\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/TestUtil.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"}]}