{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -197,1 +198,1 @@\n-        long t1 = System.currentTimeMillis();\n+        long t1 = System.nanoTime();\n@@ -202,2 +203,3 @@\n-        t1 = System.currentTimeMillis() - t1;\n-        checkTime (t1, 5000);\n+        t1 = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1);\n+        final long expectedTime = TimeUnit.SECONDS.toMillis(5);\n+        checkIfTimeOut(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1), expectedTime);\n","filename":"test\/jdk\/java\/net\/ipv6tests\/TcpTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,4 +154,0 @@\n-    \/* check the time got is within 50% of the time expected *\/\n-    public static void checkTime (long got, long expected) {\n-        checkTime(got, expected, expected);\n-    }\n@@ -159,8 +155,7 @@\n-    \/* check the time got is between start and end, given 50% tolerance *\/\n-    public static void checkTime(long got, long start, long end) {\n-        dprintln(\"checkTime: got = \" + got + \" start = \" + start + \" end = \" + end);\n-        long upper = end + (end \/ 2);\n-        long lower = start - (start \/ 2);\n-        if (got > upper || got < lower) {\n-            throw new RuntimeException(\"checkTime failed: got \" + got\n-                    + \", expected between \" + start + \" and \" + end);\n+    \/* check the timeout breached lower bound time rule *\/\n+    public static void checkIfTimeOut(long got, long expected) {\n+        dprintln(\"checkIfTimeOut: got = \" + got + \" lower bound = \" + expected);\n+\n+        if (got < expected) {\n+            throw new RuntimeException(\"checkIfTimeOut failed: got \" + got\n+                    + \", expected at least \" + expected );\n","filename":"test\/jdk\/java\/net\/ipv6tests\/Tests.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -141,1 +142,1 @@\n-        long t1 = System.currentTimeMillis();\n+        long t1 = System.nanoTime();\n@@ -147,1 +148,2 @@\n-        checkTime (System.currentTimeMillis() - t1, 4000);\n+        final long expectedTime = TimeUnit.SECONDS.toMillis(4);\n+        checkIfTimeOut(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1), expectedTime);\n@@ -154,1 +156,1 @@\n-        t1 = System.currentTimeMillis();\n+        t1 = System.nanoTime();\n@@ -160,1 +162,1 @@\n-        checkTime (System.currentTimeMillis() - t1, 4000);\n+        checkIfTimeOut(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1), expectedTime);\n@@ -177,1 +179,1 @@\n-        t1 = System.currentTimeMillis();\n+        t1 = System.nanoTime();\n@@ -179,1 +181,2 @@\n-        checkTime (System.currentTimeMillis() - t1, 2000, 10000);\n+        final long startTime = TimeUnit.SECONDS.toMillis(2);\n+        checkIfTimeOut(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1), startTime);\n","filename":"test\/jdk\/java\/net\/ipv6tests\/UdpTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}