{"files":[{"patch":"@@ -41,1 +41,0 @@\n-    static final int NUM_LINES = 50;\n@@ -48,1 +47,1 @@\n-    static boolean testStartProcess(boolean withConsumer) throws Exception {\n+    static boolean testStartProcess(int numOfLines, boolean withConsumer) throws Exception {\n@@ -50,0 +49,1 @@\n+        output = \"\";\n@@ -55,1 +55,1 @@\n-        launcher.addToolArg(\"test\"); \/\/ This one argument triggers producing the output\n+        launcher.addToolArg(Integer.toString(numOfLines));\n@@ -76,1 +76,1 @@\n-            if (numLines != NUM_LINES ) {\n+            if (numLines != numOfLines) {\n@@ -79,0 +79,1 @@\n+                System.out.print(output);\n@@ -80,4 +81,0 @@\n-            System.out.println(\"DEBUG: Consumer output: got \" + numLines + \" lines , expected \"\n-                               + NUM_LINES  + \". Output follow:\");\n-            System.out.print(output);\n-            System.out.println(\"DEBUG: done with Consumer output.\");\n@@ -87,1 +84,1 @@\n-        if (numLinesOut != NUM_LINES) {\n+        if (numLinesOut != numOfLines) {\n@@ -89,0 +86,1 @@\n+            System.out.print(out.getStdout());\n@@ -91,4 +89,0 @@\n-        System.out.println(\"DEBUG: OutputAnalyzer output: got \" + numLinesOut + \" lines, expected \"\n-                           + NUM_LINES  + \". Output follows:\");\n-        System.out.print(out.getStdout());\n-        System.out.println(\"DEBUG: done with OutputAnalyzer stdout.\");\n@@ -99,1 +93,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -101,2 +95,3 @@\n-            for (int i = 0; i < NUM_LINES; i++) {\n-                System.out.println(\"A line on stdout \" + i);\n+            int iter = Integer.parseInt(args[0]);\n+            for (int i = 0; i < iter; i++) {\n+                System.out.println(\"A line on stdout: \" + i + \" \" + \".\".repeat(i));\n@@ -105,5 +100,9 @@\n-            try {\n-                boolean test1Result = testStartProcess(false);\n-                boolean test2Result = testStartProcess(true);\n-                if (!test1Result || !test2Result) {\n-                    throw new RuntimeException(\"One or more tests failed. See output for details.\");\n+            for (int i = 1; i < 5; i++) {\n+                System.out.println(\"ITERATION \" + i);\n+                boolean test1Result = testStartProcess(i * 10 + i, false);\n+                if (!test1Result) {\n+                    throw new RuntimeException(\"First test (no consumer) failed. See output for details.\");\n+                }\n+                boolean test2Result = testStartProcess(i * 10 + i, true);\n+                if (!test2Result) {\n+                    throw new RuntimeException(\"Second test (with consumer) failed. See output for details.\");\n@@ -111,8 +110,0 @@\n-            } catch (RuntimeException re) {\n-                re.printStackTrace();\n-                System.out.println(\"Test ERROR\");\n-                throw re;\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-                System.out.println(\"Test ERROR\");\n-                throw new RuntimeException(ex);\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/ProcessToolsStartProcessTest.java","additions":20,"deletions":29,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -116,1 +117,1 @@\n-        } catch (InterruptedException | TimeoutException e) {\n+        } catch (InterruptedException | TimeoutException | CancellationException e) {\n@@ -158,0 +159,1 @@\n+        The stream uses  Future<Void> task from StreamPumper.process() to check if output is complete.\n@@ -163,0 +165,2 @@\n+        private Future<Void> task;\n+\n@@ -167,0 +171,3 @@\n+        synchronized void setTask(Future<Void> task) {\n+            this.task = task;\n+        }\n@@ -173,2 +180,11 @@\n-                if (!p.isAlive()) {\n-                    return -1;\n+                if (!p.isAlive() && (task != null)) {\n+                    try {\n+                        task.get(10, TimeUnit.MILLISECONDS);\n+                        if (current == count) {\n+                            return -1;\n+                        }\n+                    } catch (TimeoutException e) {\n+                        \/\/ continue execution, so wait() give a chance to write\n+                    } catch (InterruptedException | ExecutionException e) {\n+                        return -1;\n+                    }\n@@ -194,1 +210,1 @@\n-        OutputStream getOutputStream() {\n+        BufferOutputStream getOutputStream() {\n@@ -242,0 +258,2 @@\n+\n+\n@@ -259,1 +277,0 @@\n-\n@@ -282,0 +299,3 @@\n+        stdOut.getOutputStream().setTask(stdoutTask);\n+        stdErr.getOutputStream().setTask(stderrTask);\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}