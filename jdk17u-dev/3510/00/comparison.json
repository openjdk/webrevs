{"files":[{"patch":"@@ -3476,8 +3476,6 @@\n-            StringBuilder buf;\n-            if(intCompact!=INFLATED) {\n-                buf = new StringBuilder(20+trailingZeros);\n-                buf.append(intCompact);\n-            } else {\n-                String str = intVal.toString();\n-                buf = new StringBuilder(str.length()+trailingZeros);\n-                buf.append(str);\n+            String str = intCompact != INFLATED\n+                ? Long.toString(intCompact)\n+                : intVal.toString();\n+            int len = str.length() + trailingZeros;\n+            if (len < 0) {\n+                throw new OutOfMemoryError(\"too large to fit in a String\");\n@@ -3485,1 +3483,3 @@\n-            for (int i = 0; i < trailingZeros; i++) {\n+            StringBuilder buf = new StringBuilder(len);\n+            buf.append(str);\n+            for (; trailingZeros>0; trailingZeros--) {\n@@ -3490,1 +3490,1 @@\n-        String str ;\n+        String str;\n@@ -3500,1 +3500,1 @@\n-    private String getValueString(int signum, String intString, int scale) {\n+    private static String getValueString(int signum, String intString, int scale) {\n@@ -3504,1 +3504,1 @@\n-        if (insertionPoint == 0) {  \/* Point goes right before intVal *\/\n+        if (insertionPoint == 0) {  \/* Point goes just before intVal *\/\n@@ -3512,1 +3512,5 @@\n-            buf = new StringBuilder(3-insertionPoint + intString.length());\n+            int len = (signum < 0 ? 3 : 2) + scale;\n+            if (len < 0) {\n+                throw new OutOfMemoryError(\"too large to fit in a String\");\n+            }\n+            buf = new StringBuilder(len);\n@@ -3514,1 +3518,1 @@\n-            for (int i=0; i<-insertionPoint; i++) {\n+            for (; insertionPoint<0; insertionPoint++) {  \/\/ insertionPoint != MIN_VALUE\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4984872\n+ * @bug 4984872 8318915\n@@ -70,0 +70,5 @@\n+\n+            {\"12345e-1\",                 \"1234.5\"},\n+            {\"12345e-2\",                 \"123.45\"},\n+            {\"12345e-3\",                 \"12.345\"},\n+            {\"12345e-4\",                 \"1.2345\"},\n@@ -92,0 +97,32 @@\n+        String[] failingCases = {\n+            \"1E-\" + (Integer.MAX_VALUE - 0),            \/\/ MAX_VALUE + 2 chars\n+            \"1E-\" + (Integer.MAX_VALUE - 1),            \/\/ MAX_VALUE + 1 chars\n+\n+            \"-1E-\" + (Integer.MAX_VALUE - 0),           \/\/ MAX_VALUE + 3 chars\n+            \"-1E-\" + (Integer.MAX_VALUE - 1),           \/\/ MAX_VALUE + 2 chars\n+            \"-1E-\" + (Integer.MAX_VALUE - 2),           \/\/ MAX_VALUE + 1 chars\n+\n+            \"123456789E-\" + (Integer.MAX_VALUE - 0),    \/\/ MAX_VALUE + 2 chars\n+            \"123456789E-\" + (Integer.MAX_VALUE - 1),    \/\/ MAX_VALUE + 1 chars\n+\n+            \"-123456789E-\" + (Integer.MAX_VALUE - 0),   \/\/ MAX_VALUE + 3 chars\n+            \"-123456789E-\" + (Integer.MAX_VALUE - 1),   \/\/ MAX_VALUE + 2 chars\n+            \"-123456789E-\" + (Integer.MAX_VALUE - 2),   \/\/ MAX_VALUE + 1 chars\n+\n+            \"1E\" + Integer.MAX_VALUE,                   \/\/ MAX_VALUE + 1 chars\n+            \"123456789E\" + Integer.MAX_VALUE,           \/\/ MAX_VALUE + 9 chars\n+\n+            \"-1E\" + Integer.MAX_VALUE,                  \/\/ MAX_VALUE + 2 chars\n+            \"-123456789E\" + Integer.MAX_VALUE,          \/\/ MAX_VALUE + 10 chars\n+        };\n+        \/* We expect pre-emptive OutOfMemoryErrors, nothing else *\/\n+        for (String failingCase : failingCases) {\n+            try {\n+                new BigDecimal(failingCase).toPlainString();\n+            } catch (OutOfMemoryError expected) {\n+                continue;\n+            } catch (Throwable ignored) {\n+            }\n+            ++errors;\n+        }\n+\n","filename":"test\/jdk\/java\/math\/BigDecimal\/ToPlainStringTests.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}