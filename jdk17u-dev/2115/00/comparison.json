{"files":[{"patch":"@@ -40,6 +40,0 @@\n-\n-  \/\/ If class unloading is globally enabled, aggressive does unloading even with\n-  \/\/ concurrent cycles.\n-  if (ClassUnloading) {\n-    SHENANDOAH_ERGO_OVERRIDE_DEFAULT(ShenandoahUnloadClassesFrequency, 1);\n-  }\n@@ -65,1 +59,1 @@\n-  if (!can_unload_classes_normal()) return false;\n+  if (!can_unload_classes()) return false;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,5 +56,0 @@\n-  \/\/ No unloading during concurrent mark? Communicate that to heuristics\n-  if (!ClassUnloadingWithConcurrentMark) {\n-    FLAG_SET_DEFAULT(ShenandoahUnloadClassesFrequency, 0);\n-  }\n-\n@@ -265,8 +260,0 @@\n-bool ShenandoahHeuristics::can_unload_classes_normal() {\n-  if (!can_unload_classes()) return false;\n-  if (has_metaspace_oom()) return true;\n-  if (!ClassUnloadingWithConcurrentMark) return false;\n-  if (ShenandoahUnloadClassesFrequency == 0) return false;\n-  return true;\n-}\n-\n@@ -274,1 +261,1 @@\n-  if (!can_unload_classes_normal()) return false;\n+  if (!can_unload_classes()) return false;\n@@ -276,6 +263,1 @@\n-  size_t cycle = ShenandoahHeap::heap()->shenandoah_policy()->cycle_counter();\n-  \/\/ Unload classes every Nth GC cycle.\n-  \/\/ This should not happen in the same cycle as process_references to amortize costs.\n-  \/\/ Offsetting by one is enough to break the rendezvous when periods are equal.\n-  \/\/ When periods are not equal, offsetting by one is just as good as any other guess.\n-  return (cycle + 1) % ShenandoahUnloadClassesFrequency == 0;\n+  return ClassUnloadingWithConcurrentMark;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-  virtual bool can_unload_classes_normal();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -79,5 +79,0 @@\n-  product(uintx, ShenandoahUnloadClassesFrequency, 1, EXPERIMENTAL,         \\\n-          \"Unload the classes every Nth cycle. Normally affects concurrent \"\\\n-          \"GC cycles, as degenerated and full GCs would try to unload \"     \\\n-          \"classes regardless. Set to zero to disable class unloading.\")    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,2 +143,0 @@\n-                passWith(\"-XX:ShenandoahGCMode=\" + mode, \"-XX:ShenandoahGCHeuristics=\" + h, \"-XX:+ClassUnloading\", \"-XX:-ClassUnloadingWithConcurrentMark\", \"-XX:ShenandoahUnloadClassesFrequency=0\");\n-                passWith(\"-XX:ShenandoahGCMode=\" + mode, \"-XX:ShenandoahGCHeuristics=\" + h, \"-XX:+ClassUnloading\", \"-XX:+ClassUnloadingWithConcurrentMark\", \"-XX:ShenandoahUnloadClassesFrequency=0\");\n@@ -149,2 +147,0 @@\n-                failWith(\"-XX:ShenandoahGCMode=\" + mode, \"-XX:ShenandoahGCHeuristics=\" + h, \"-XX:-ClassUnloading\", \"-XX:+ClassUnloadingWithConcurrentMark\", \"-XX:ShenandoahUnloadClassesFrequency=1\");\n-                failWith(\"-XX:ShenandoahGCMode=\" + mode, \"-XX:ShenandoahGCHeuristics=\" + h, \"-XX:-ClassUnloading\", \"-XX:-ClassUnloadingWithConcurrentMark\", \"-XX:ShenandoahUnloadClassesFrequency=1\");\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}