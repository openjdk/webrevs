{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.AlgorithmParameterGenerator;\n+import java.security.AlgorithmParameters;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.security.spec.DSAGenParameterSpec;\n+import java.security.spec.DSAParameterSpec;\n+\n+\/*\n+ * @test\n+ * @bug 8271566\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm\/timeout=30 LargeDSAKey\n+ *\/\n+\n+public final class LargeDSAKey extends PKCS11Test {\n+\n+    private static final boolean enableDebug = false;\n+\n+    private static final String knownText =\n+            \"Known text known text known text\";\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", p);\n+        AlgorithmParameterGenerator dsaParGen =\n+                AlgorithmParameterGenerator.getInstance(\"DSA\");\n+        DSAGenParameterSpec dsaParGenSpec =\n+                new DSAGenParameterSpec(2048, 256);\n+        dsaParGen.init(dsaParGenSpec, new SecureRandom());\n+        AlgorithmParameters params = dsaParGen.generateParameters();\n+        DSAParameterSpec dsaParams =\n+                params.getParameterSpec(DSAParameterSpec.class);\n+        kpg.initialize(dsaParams);\n+        KeyPair kp = kpg.generateKeyPair();\n+        doTestSignature(kp, p);\n+    }\n+\n+    private static void doTestSignature(KeyPair kp, Provider p)\n+            throws Exception {\n+        byte[] knownTextSig = null;\n+        Signature s = Signature.getInstance(\"SHA1withDSA\", p);\n+        PrivateKey privKey = kp.getPrivate();\n+        PublicKey pubKey = kp.getPublic();\n+        if (enableDebug) {\n+            System.out.println(\"Signature algorithm: \" + s.getAlgorithm());\n+            System.out.println(\"Signature Provider: \" + s.getProvider());\n+            System.out.println(\"Private key for signature: \" + privKey);\n+            System.out.println(\"Public key for signature: \" + pubKey);\n+        }\n+        s.initSign(privKey);\n+        s.update(knownText.getBytes());\n+        knownTextSig = s.sign();\n+        s.initVerify(pubKey);\n+        s.update(knownText.getBytes());\n+        if (s.verify(knownTextSig) == false) {\n+            throw new Exception(\"Could not verify signature\");\n+        }\n+        if (enableDebug) {\n+            System.out.println(\"Signature verified\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        main(new LargeDSAKey());\n+        System.out.println(\"TEST PASS - OK\");\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/LargeDSAKey.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}