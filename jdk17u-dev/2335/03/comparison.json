{"files":[{"patch":"@@ -106,0 +106,1 @@\n+  bool    _protection_domain_initialized;\n@@ -133,0 +134,1 @@\n+    _protection_domain_initialized = false;\n@@ -688,1 +690,2 @@\n-    if (_protection_domain() == NULL) {\n+    if (!_protection_domain_initialized && k != NULL) {\n+      assert(_protection_domain() == NULL, \"must be uninitialized\");\n@@ -694,0 +697,5 @@\n+\n+    \/\/ Only initialize the protection domain handle with the protection domain of the very first entry.\n+    \/\/ This also ensures that older replay files work.\n+    _protection_domain_initialized = true;\n+\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276227\n+ * @library \/ \/test\/lib\n+ * @summary Testing that ciReplay works if we do not find the class files to replay compile.\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.compMode != \"Xcomp\" & vm.debug == true & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      compiler.ciReplay.TestNoClassFile\n+ *\/\n+\n+package compiler.ciReplay;\n+\n+public class TestNoClassFile extends DumpReplayBase {\n+\n+    public static void main(String[] args) {\n+        new TestNoClassFile().runTest(TIERED_DISABLED_VM_OPTION);\n+    }\n+\n+    @Override\n+    public void testAction() {\n+        \/\/ Override classpath such that we do not find any class files for replay compilation. Should exit gracefully.\n+        positiveTest(\"-cp foo\", \"-XX:+ReplayIgnoreInitErrors\");\n+    }\n+\n+    @Override\n+    public String getTestClass() {\n+        return NoClassFileMain.class.getName();\n+    }\n+\n+}\n+\n+class NoClassFileMain {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+    public static void test() {\n+        NoClassFileHelper.bar();\n+    }\n+}\n+\n+class NoClassFileHelper {\n+    public static int bar() {\n+        return 3;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestNoClassFile.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}