{"files":[{"patch":"@@ -838,1 +838,2 @@\n-        if (ce instanceof ArrayEncoder ae) {\n+        \/\/ fastpath with ArrayEncoder implies `doReplace`.\n+        if (doReplace && ce instanceof ArrayEncoder ae) {\n@@ -849,4 +850,0 @@\n-            if (doReplace) {\n-                ce.onMalformedInput(CodingErrorAction.REPLACE)\n-                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n- * @bug 8201276 8205058 8209576\n+ * @bug 8201276 8205058 8209576 8287541\n@@ -54,0 +54,1 @@\n+ * @modules jdk.charsets\n@@ -63,5 +64,0 @@\n-    \/\/ malformed input: a high surrogate without the low surrogate\n-    static char[] illChars = {\n-        '\\u00fa', '\\ud800'\n-    };\n-\n@@ -101,0 +97,2 @@\n+            {path, \"\\u041e\", Charset.forName(\"windows-1252\")}, \/\/ cyrillic capital letter O\n+            {path, \"\\u091c\", Charset.forName(\"windows-31j\")}, \/\/ devanagari letter ja\n@@ -122,1 +120,1 @@\n-    public Object[][] getWriteString() throws IOException {\n+    public Object[][] getWriteString() {\n@@ -137,2 +135,1 @@\n-    public Object[][] getReadString() throws IOException {\n-        Path path = Files.createTempFile(\"readString_file1\", null);\n+    public Object[][] getReadString() {\n@@ -270,1 +267,0 @@\n-        String s;\n@@ -272,1 +268,1 @@\n-            s = Files.readString(path);\n+            Files.readString(path);\n@@ -274,1 +270,1 @@\n-            s = Files.readString(path, csRead);\n+            Files.readString(path, csRead);\n","filename":"test\/jdk\/java\/nio\/file\/Files\/ReadWriteString.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"}]}