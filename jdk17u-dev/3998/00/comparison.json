{"files":[{"patch":"@@ -117,1 +117,1 @@\n-    abi_minframe* sender_abi = (abi_minframe*) fp;\n+    volatile abi_minframe* sender_abi = (abi_minframe*) fp; \/\/ May get updated concurrently by deoptimization!\n@@ -119,1 +119,1 @@\n-    address   sender_pc = (address) sender_abi->lr;;\n+    address   sender_pc = (address) sender_abi->lr;\n@@ -132,0 +132,2 @@\n+    intptr_t* unextended_sender_sp = is_interpreted_frame() ? (intptr_t*)get_ijava_state()->sender_sp : sender_sp;\n+\n@@ -134,1 +136,10 @@\n-    frame sender(sender_sp, sender_pc);\n+    \/\/ JDK-8339386 is different than the upstream version:\n+    \/\/ The frame constructor doesn't check sanity of a deopt pc, but determines it.\n+    \/\/ Other accessors for reading it are not available in 17u.\n+    frame sender(sender_sp, sender_pc, unextended_sender_sp);\n+    \/\/ If the sender is a deoptimized nmethod we need to check if the original pc is valid.\n+    nmethod* sender_nm = sender_blob->as_nmethod_or_null();\n+    if (sender_nm != nullptr && sender._deopt_state == is_deoptimized) {\n+      address orig_pc = sender.pc();\n+      if (!sender_nm->insts_contains_inclusive(orig_pc)) return false;\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}