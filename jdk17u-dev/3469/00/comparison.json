{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4130788\n+ * @summary Choice components move unexpectedly when in lightweight containers\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ChoiceInLWTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ChoiceInLWTest extends Frame implements Runnable {\n+    private final Choice choices;\n+    static final String INSTRUCTIONS = \"\"\"\n+            After test starts wait for two seconds and open a choice.\n+            If choice's popup obscures the label above it press Fail.\n+            Otherwise press Pass.\n+            \"\"\";\n+\n+    public ChoiceInLWTest() {\n+        setLayout(new BorderLayout());\n+        Container lwCont = new Container();\n+        lwCont.setLayout(new FlowLayout());\n+        choices = new Choice();\n+        choices.add(\"This is just a token item to get a nice width.\");\n+        lwCont.add(choices);\n+        add(\"Center\", lwCont);\n+        Label label = new Label(\"You should see an unobscured Choice below.\");\n+        label.setAlignment(Label.CENTER);\n+        add(\"North\", label);\n+        addChoiceItem();\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowOpened(WindowEvent e) {\n+                super.windowOpened(e);\n+                new Thread(ChoiceInLWTest.this).start();\n+            }\n+        });\n+        pack();\n+    }\n+\n+    private void addChoiceItem() {\n+        choices.add(\"Adding an item used to move the Choice!\");\n+    }\n+\n+    public void run() {\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException ignore) {\n+        }\n+        addChoiceItem();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Choice in LW Container Test\")\n+                .testUI(ChoiceInLWTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceInLWTest\/ChoiceInLWTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6367251\n+ * @summary 2 items are highlighted when pressing, dragging the mouse inside the choice, XToolkit\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiItemSelected_DragOut\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class MultiItemSelected_DragOut extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            1) Open Choice.\n+            2) Start drag from first item to second or third one.\n+            3) Without releasing left mouse button\n+               press and release right mouse button.\n+            4) Release left mouse button.\n+            5) Open choice again.\n+            6) If there is only one selection cursor\n+               in the dropdown list press Pass otherwise press Fail.\n+            \"\"\";\n+\n+    public MultiItemSelected_DragOut() {\n+        Choice choice = new Choice();\n+\n+        for (int i = 1; i < 10; i++) {\n+            choice.add(\"item \" + i);\n+        }\n+        add(choice);\n+        choice.addItemListener(ie -> System.out.println(ie));\n+\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        validate();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"MultiItemSelected Drag Out Test\")\n+                .testUI(MultiItemSelected_DragOut::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/MultiItemSelected\/MultiItemSelected_DragOut.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6367251\n+ * @summary 2 items are highlighted when dragging inside and press ESC or ENTER\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiItemSelected_KeySelect\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class MultiItemSelected_KeySelect extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            1) Open Choice.\n+            2) Start drag from first item to another one.\n+            3) Without releasing the mouse button press ESC key.\n+            4) Open choice again.\n+            5) Verify that there is only one\n+               selection cursor in the dropdown list.\n+            6) Repeat steps 2-5 once again but  this time\n+               press ENTER key instead of ESC.\n+            7) If in both scenarios there is only one selection cursor\n+               press Pass otherwise press Fail.\n+            \"\"\";\n+\n+    public MultiItemSelected_KeySelect() {\n+        Choice choice = new Choice();\n+\n+        for (int i = 1; i < 10; i++) {\n+            choice.add(\"item \" + i);\n+        }\n+        add(choice);\n+        choice.addItemListener(ie -> System.out.println(ie));\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        validate();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"MultiItemSelected Key Select Test\")\n+                .testUI(MultiItemSelected_KeySelect::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/MultiItemSelected\/MultiItemSelected_KeySelect.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6367251\n+ * @summary 2 items are highlighted when dragging outside and press UP or DOWN\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiItemSelected_UpDown\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class MultiItemSelected_UpDown extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            1) Open Choice.\n+            2) Start drag from first item to another one.\n+            3) Without interrupting drag\n+               move mouse cursor outside the choice popup.\n+            4) Press UP, DOWN key several times to position\n+               selection cursor to a different item.\n+            5) Release mouse button.\n+            6) If popup is closed upon mouse button release open Choice again.\n+            7) Verify that there is only one\n+               selection cursor in the dropdown list.\n+            8) If true then press Pass, otherwise press Fail.\n+            \"\"\";\n+\n+    public MultiItemSelected_UpDown() {\n+        Choice choice = new Choice();\n+\n+        for (int i = 1; i < 20; i++) {\n+            choice.add(\" item \" + i);\n+        }\n+        add(choice);\n+        choice.addItemListener(ie -> System.out.println(ie));\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        validate();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"MultiItemSelected Up\/Down Test\")\n+                .testUI(MultiItemSelected_UpDown::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/MultiItemSelected\/MultiItemSelected_UpDown.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6292186\n+ * @summary Choice is not refreshed properly when the last item gets removed\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RepaintAfterRemoveLastItemTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class RepaintAfterRemoveLastItemTest extends Frame implements ActionListener {\n+    Choice ch = new Choice();\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            Press on the 'remove' button after that if the choice does not display\n+            'only item' press Pass. If 'only item' is still displayed press Fail.\n+            \"\"\";\n+\n+    public RepaintAfterRemoveLastItemTest() {\n+        ch.add(\"only item\");\n+        add(ch);\n+\n+        Button b = new Button(\"remove\");\n+        add(b);\n+        b.addActionListener(this);\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        validate();\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        if (ch.getItemCount() != 0) {\n+            ch.remove(0);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Repaint After Remove Test\")\n+                .testUI(RepaintAfterRemoveLastItemTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/RepaintAfterRemoveLastItemTest\/RepaintAfterRemoveLastItemTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}