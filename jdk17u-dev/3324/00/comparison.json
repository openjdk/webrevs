{"files":[{"patch":"@@ -580,0 +580,1 @@\n+            \"ComboBox.squareButton\", Boolean.FALSE,\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -360,0 +360,28 @@\n+    \/**\n+     * The minimum size is the size of the display area plus insets plus the button.\n+     *\/\n+    @Override\n+    public Dimension getMinimumSize( JComponent c ) {\n+        if ( !isMinimumSizeDirty ) {\n+            return new Dimension(cachedMinimumSize);\n+        }\n+        Dimension size = getDisplaySize();\n+        Insets insets = getInsets();\n+        Insets arrowInsets = arrowButton.getInsets();\n+        \/\/calculate the width and height of the button\n+        int buttonHeight = size.height;\n+        int buttonWidth = squareButton ?\n+                            buttonHeight :\n+                            arrowButton.getPreferredSize().width;\n+        \/\/adjust the size based on the button width\n+        size.height += insets.top + insets.bottom + arrowInsets.top\n+                        + arrowInsets.bottom;\n+        size.width  += insets.left + insets.right + arrowInsets.left\n+                        + arrowInsets.right + buttonWidth;\n+\n+        cachedMinimumSize.setSize( size.width, size.height );\n+        isMinimumSizeDirty = false;\n+\n+        return new Dimension(size);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthComboBoxUI.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1528,1 +1528,1 @@\n-            s = (int)(0.3 * height + 0.5) + 1;\n+            s = (int)(0.3 * MIN(height, width) + 0.5) + 1;\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8218474\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies if combobox components are rendered correctly.\n+ * @run main TestComboBoxComponentRendering\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.image.BufferedImage;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class TestComboBoxComponentRendering {\n+    private static JFrame frame;\n+    private static JComboBox cb;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (!laf.getClassName().contains(\"MotifLookAndFeel\") &&\n+                !laf.getClassName().contains(\"MetalLookAndFeel\")) {\n+                System.out.println(\"Testing LAF: \" + laf.getClassName());\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                doTesting(laf);\n+            }\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void doTesting(UIManager.LookAndFeelInfo laf)\n+            throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                createAndShowUI();\n+            });\n+            boolean passed = false;\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Point pt = cb.getLocationOnScreen();\n+            BufferedImage img = robot.createScreenCapture(\n+                    new Rectangle(pt.x, pt.y, cb.getWidth(), cb.getHeight()));\n+            for (int x = 20; x < img.getWidth()-20; ++x) {\n+                for (int y = 20; y < img.getHeight()-20; ++y) {\n+                    if (img.getRGB(x,y) == Color.RED.getRGB()) {\n+                        passed = true;\n+                        break;\n+                    }\n+                }\n+                if (passed)\n+                    break;\n+            }\n+\n+            if (passed) {\n+                System.out.println(\"Passed\");\n+            } else {\n+                ImageIO.write(img, \"png\",\n+                        new File(\"ComboBox.png\"));\n+                throw new RuntimeException(\"ComboBox components not rendered\" +\n+                        \" correctly for: \" + laf.getClassName());\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        String[] petStrings = { \"Bird\", \"Cat\", \"Dog\", \"Rabbit\", \"Pig\" };\n+        frame = new JFrame();\n+        cb = new JComboBox(petStrings);\n+        cb.setRenderer(new ComboBoxCustomRenderer());\n+        frame.pack();\n+        frame.add(cb);\n+        frame.setSize(200,250);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n+\n+class ComboBoxCustomRenderer extends JLabel\n+        implements ListCellRenderer {\n+\n+    public ComboBoxCustomRenderer() {\n+        setOpaque(true);\n+        setHorizontalAlignment(CENTER);\n+        setVerticalAlignment(CENTER);\n+    }\n+\n+    public Component getListCellRendererComponent(JList list, Object value,\n+                        int index, boolean isSelected, boolean cellHasFocus) {\n+        setText(value.toString());\n+        setForeground(Color.RED);\n+        return this;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/TestComboBoxComponentRendering.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 4517214\n+ * @bug 4517214 8218474\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/TestComboBoxHeight.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}