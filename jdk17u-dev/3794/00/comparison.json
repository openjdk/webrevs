{"files":[{"patch":"@@ -845,3 +845,8 @@\n-        \/\/ TODO: userinfo deprecated. Needs to be removed\n-        hdrs.setHeader(\":authority\", uri.getAuthority());\n-        \/\/ TODO: ensure header names beginning with : not in user headers\n+        String host = uri.getHost();\n+        int port = uri.getPort();\n+        assert host != null;\n+        if (port != -1) {\n+            hdrs.setHeader(\":authority\", host + \":\" + port);\n+        } else {\n+            hdrs.setHeader(\":authority\", host);\n+        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\n+\/**\n+ * @test\n+ * @bug 8292876\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.http2.Http2TestServer jdk.test.lib.net.SimpleSSLContext\n+ * @run junit UserInfoTest\n+ *\/\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class UserInfoTest {\n+\n+    Http2TestServer server;\n+    int port;\n+    SSLContext sslContext;\n+\n+    @BeforeAll\n+    void before() throws Exception {\n+        sslContext = new SimpleSSLContext().get();\n+        server = createServer(sslContext);\n+        port = server.getAddress().getPort();\n+        server.start();\n+    }\n+\n+    @AfterAll\n+    void after() throws Exception {\n+        server.close();\n+    }\n+\n+    static class Http2TestHandler implements Http2Handler {\n+        @Override\n+        public void handle(Http2TestExchange e) throws IOException {\n+            String authorityHeader = e.getRequestHeaders().firstValue(\":authority\").orElse(null);\n+            if (authorityHeader == null || authorityHeader.contains(\"user@\")) {\n+                e.sendResponseHeaders(500, -1);\n+            } else {\n+                e.sendResponseHeaders(200, -1);\n+            }\n+        }\n+    }\n+\n+    private static Http2TestServer createServer(SSLContext sslContext) throws Exception {\n+        Http2TestServer http2TestServer = new Http2TestServer(\"localhost\", true, sslContext);\n+        Http2TestHandler handler = new Http2TestHandler();\n+        http2TestServer.addHandler(handler, \"\/\");\n+        return http2TestServer;\n+    }\n+\n+    @Test\n+    public void testAuthorityHeader() throws Exception {\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .proxy(HttpClient.Builder.NO_PROXY)\n+                .sslContext(sslContext)\n+                .build();\n+\n+        URI uri = URIBuilder.newBuilder()\n+                .scheme(\"https\")\n+                .userInfo(\"user\")\n+                .loopback()\n+                .port(port)\n+                .build();\n+\n+        HttpRequest request = HttpRequest\n+                .newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+\n+        assertEquals(200, response.statusCode(), \"Test Failed : \" + response.uri().getAuthority());\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/UserInfoTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}