{"files":[{"patch":"@@ -0,0 +1,295 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/* @test\n+ * @bug 8024624\n+ * @key headful\n+ * @requires (os.family != \"mac\")\n+ * @summary Tests some of JTable's key navigation\n+ * @run main JTableOrientationNavTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.ComponentOrientation;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.ListSelectionModel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableModel;\n+\n+import static java.awt.event.KeyEvent.VK_CONTROL;\n+import static java.awt.event.KeyEvent.VK_LEFT;\n+import static java.awt.event.KeyEvent.VK_PAGE_DOWN;\n+import static java.awt.event.KeyEvent.VK_PAGE_UP;\n+import static java.awt.event.KeyEvent.VK_RIGHT;\n+import static java.awt.event.KeyEvent.VK_SHIFT;\n+\n+public class JTableOrientationNavTest {\n+    private static JFrame frame;\n+    private static JTable table;\n+    private static JScrollPane sp;\n+    private static Robot robot;\n+    private static boolean ltr = true;\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                frame.add(createContentPane());\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+            executeTest();\n+            setupRTL();\n+            executeTest();\n+\n+            System.out.println(\"Passed\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+\n+    private static TableModel getTableModel1() {\n+        String[] columnNames = {\"Column 0\", \"Column 1\", \"Column 2\",\n+                \"Column 3\", \"Column 4\"};\n+        String[][] data = {{\"Table 00, 00\", \"Table 00, 01\", \"Table 00, 02\",\n+                                    \"Table 00, 03\", \"Table 00, 04\"},\n+                           {\"Table 01, 00\", \"Table 01, 01\", \"Table 01, 02\",\n+                                   \"Table 01, 03\", \"Table 01, 04\"},\n+                           {\"Table 02, 00\", \"Table 02, 01\", \"Table 02, 02\",\n+                                   \"Table 02, 03\", \"Table 02, 04\"},\n+                           {\"Table 03, 00\", \"Table 03, 01\", \"Table 03, 02\",\n+                                   \"Table 03, 03\", \"Table 03, 04\"},\n+                           {\"Table 04, 00\", \"Table 04, 01\", \"Table 04, 02\",\n+                                   \"Table 04, 03\", \"Table 04, 04\"},\n+                           {\"Table 05, 00\", \"Table 05, 01\", \"Table 05, 02\",\n+                                   \"Table 05, 03\", \"Table 05, 04\"}};\n+\n+        return new DefaultTableModel(data, columnNames);\n+    }\n+\n+    private static TableModel getTableModel2() {\n+        String[] columnNames = new String[30];\n+        String[][] data = new String[1][30];\n+\n+        for (int i = 0; i < columnNames.length; i++) {\n+            columnNames[i] = \"Column \" + i;\n+            data[0][i] = \"Data \" + 1;\n+        }\n+\n+        return new DefaultTableModel(data, columnNames);\n+    }\n+\n+    private static Component createContentPane() {\n+        table = new JTable(getTableModel1());\n+        table.setCellSelectionEnabled(true);\n+        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n+        JPanel panel = new JPanel(new BorderLayout());\n+        sp = new JScrollPane(table);\n+        panel.add(sp);\n+        return panel;\n+    }\n+\n+    private static void executeTest() throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            table.setRowSelectionInterval(0, 0);\n+            table.setColumnSelectionInterval(0, 0);\n+            checkSelection(0, 0);\n+        });\n+\n+        robot.keyPress(ltr ? VK_RIGHT : VK_LEFT);\n+        robot.keyRelease(ltr ? VK_RIGHT : VK_LEFT);\n+\n+        SwingUtilities.invokeAndWait(() -> checkSelection(1, 1));\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(ltr ? VK_RIGHT : VK_LEFT);\n+        robot.keyRelease(ltr ? VK_RIGHT : VK_LEFT);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(2, 1);\n+            table.setRowSelectionInterval(0, 0);\n+            table.setColumnSelectionInterval(4, 4);\n+            checkSelection(4, 4);\n+        });\n+\n+        robot.keyPress(ltr ? VK_LEFT : VK_RIGHT);\n+        robot.keyRelease(ltr ? VK_LEFT : VK_RIGHT);\n+\n+        SwingUtilities.invokeAndWait(() -> checkSelection(3, 3));\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(ltr ? VK_LEFT : VK_RIGHT);\n+        robot.keyRelease(ltr ? VK_LEFT : VK_RIGHT);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(2, 3);\n+            table.setColumnSelectionInterval(2, 2);\n+            checkSelection(2, 2);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_PAGE_UP);\n+        robot.keyRelease(VK_PAGE_UP);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(0, 0);\n+            table.setColumnSelectionInterval(2, 2);\n+            checkSelection(2, 2);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(4, 4);\n+            table.setColumnSelectionInterval(2, 2);\n+            checkSelection(2, 2);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_SHIFT);\n+        robot.keyPress(VK_PAGE_UP);\n+        robot.keyRelease(VK_PAGE_UP);\n+        robot.keyRelease(VK_SHIFT);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(0, 0, 1, 2);\n+            table.setColumnSelectionInterval(2, 2);\n+            checkSelection(2, 2);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_SHIFT);\n+        robot.keyPress(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_SHIFT);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(4, 2, 3, 4);\n+            table.setModel(getTableModel2());\n+            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+            table.setRowSelectionInterval(0, 0);\n+            table.setColumnSelectionInterval(0, 0);\n+            table.scrollRectToVisible(new Rectangle(ltr ? 0 : table.getWidth(), 0, 1, 1));\n+            checkSelection(0, 0);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_PAGE_DOWN);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            checkSelection(6, 6);\n+            table.setColumnSelectionInterval(29, 29);\n+            table.scrollRectToVisible(new Rectangle(ltr ? table.getWidth() : 0, 0, 1, 1));\n+            checkSelection(29, 29);\n+        });\n+\n+        robot.keyPress(VK_CONTROL);\n+        robot.keyPress(VK_PAGE_UP);\n+        robot.keyRelease(VK_PAGE_UP);\n+        robot.keyRelease(VK_CONTROL);\n+\n+        SwingUtilities.invokeAndWait(() -> checkSelection(23, 23));\n+\n+        System.out.println(\"Done with ltr: \" + ltr);\n+    }\n+\n+    private static void setupRTL() throws InterruptedException, InvocationTargetException {\n+        ltr = false;\n+        SwingUtilities.invokeAndWait(() -> {\n+            table.setModel(getTableModel1());\n+            table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);\n+            sp.applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        });\n+    }\n+\n+    private static void checkSelection(int col, int... allCols) {\n+        int trow = table.getSelectionModel().getLeadSelectionIndex();\n+        int[] trows = table.getSelectedRows();\n+        int tcol = table.getColumnModel().getSelectionModel().getLeadSelectionIndex();\n+        int[] tcols = table.getSelectedColumns();\n+\n+        if (trow != 0) {\n+            throw new RuntimeException(\"Wrong lead row\");\n+        }\n+\n+        if (trows.length != 1 || trows[0] != 0) {\n+            throw new RuntimeException(\"Bad row selection\");\n+        }\n+\n+        if (col != tcol) {\n+            throw new RuntimeException(\"Wrong lead col\");\n+        }\n+\n+        if (allCols == null || allCols.length == 0) {\n+            if (tcols.length != 0) {\n+                throw new RuntimeException(\"Should be no cols selected\");\n+            }\n+        } else {\n+            Arrays.sort(tcols);\n+            Arrays.sort(allCols);\n+\n+            for (int c : allCols) {\n+                if (Arrays.binarySearch(tcols, c) < 0) {\n+                    throw new RuntimeException(\"Wrong column selection\");\n+                }\n+            }\n+\n+            for (int c : tcols) {\n+                if (Arrays.binarySearch(allCols, c) < 0) {\n+                    throw new RuntimeException(\"Wrong column selection\");\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableOrientationNavTest\/JTableOrientationNavTest.java","additions":295,"deletions":0,"binary":false,"changes":295,"status":"added"}]}