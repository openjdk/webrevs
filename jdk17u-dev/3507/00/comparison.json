{"files":[{"patch":"@@ -47,0 +47,1 @@\n+    private static final int MAX_TRANSFER_SIZE = 128*1024;\n@@ -208,2 +209,10 @@\n-        out.write(buf, pos, len);\n-        pos = count;\n+        if (len > 0) {\n+            int nwritten = 0;\n+            while (nwritten < len) {\n+                int nbyte = Integer.min(len - nwritten, MAX_TRANSFER_SIZE);\n+                out.write(buf, pos, nbyte);\n+                pos += nbyte;\n+                nwritten += nbyte;\n+            }\n+            assert pos == count;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8316156\n+ * @summary Ensure ByteArrayInputStream.transferTo does not cause direct memory\n+ *          to overflow MaxDirectMemorySize\n+ * @run junit\/othervm -XX:MaxDirectMemorySize=5M ChunkedTransferTo\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ChunkedTransferTo {\n+    \/\/ this value must exceed MaxDirectMemorySize\n+    private static final int SIZE = 10_000_000;\n+\n+    @Test\n+    public void byteArrayInputStream() throws IOException {\n+        byte[] src = new byte[SIZE];\n+        Random rnd = new Random(System.nanoTime());\n+        rnd.nextBytes(src);\n+        try (ByteArrayInputStream bais = new ByteArrayInputStream(src)) {\n+            Path target = Files.createTempFile(\"SNA\", \"FU\");\n+            FileChannel fc = FileChannel.open(target, CREATE, WRITE);\n+            bais.transferTo(Channels.newOutputStream(fc));\n+            byte[] dst = new byte[SIZE + 1];\n+            try (FileInputStream fis = new FileInputStream(target.toFile())) {\n+                int n = -1;\n+                if ((n = fis.read(dst)) != SIZE)\n+                    throw new RuntimeException(n + \" != \" + SIZE);\n+            }\n+            Files.delete(target);\n+            if (!Arrays.equals(src, 0, SIZE, dst, 0, SIZE))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        } catch (OutOfMemoryError oome) {\n+            throw new RuntimeException(oome);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ByteArrayInputStream\/ChunkedTransferTo.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}