{"files":[{"patch":"@@ -268,1 +268,1 @@\n-            result[j>>3] = (result[j>>3] << 8) | seed[j];\n+            result[j>>3] = (result[j>>3] << 8) | (seed[j] & 0xFF);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.random.*;\n+import jdk.internal.util.random.RandomSupport;\n+\n+\/**\n+ * @test\n+ * @summary RandomSupport.convertSeedBytesToLongs sign extension overwrites previous bytes.\n+ * @bug 8282144\n+ * @modules java.base\/jdk.internal.util.random\n+ * @run main T8282144\n+ * @key randomness\n+ *\/\n+\n+\n+public class T8282144 {\n+    public static void main(String[] args) {\n+        RandomGenerator rng = RandomGeneratorFactory.of(\"L64X128MixRandom\").create(42);\n+\n+        for (int i = 1; i < 8; i++) {\n+            byte[] seed = new byte[i];\n+\n+            for (int j = 0; j < 10; j++) {\n+                rng.nextBytes(seed);\n+\n+                long[] existing = RandomSupport.convertSeedBytesToLongs(seed, 1, 1);\n+                long[] testing = convertSeedBytesToLongsFixed(seed, 1, 1);\n+\n+                for (int k = 0; k < existing.length; k++) {\n+                    if (existing[k] != testing[k]) {\n+                        throw new RuntimeException(\"convertSeedBytesToLongs incorrect\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public static long[] convertSeedBytesToLongsFixed(byte[] seed, int n, int z) {\n+        final long[] result = new long[n];\n+        final int m = Math.min(seed.length, n << 3);\n+\n+        \/\/ Distribute seed bytes into the words to be formed.\n+        for (int j = 0; j < m; j++) {\n+            result[j >> 3] = (result[j >> 3] << 8) | (seed[j] & 0xff);\n+        }\n+\n+        return result;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Random\/T8282144.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}