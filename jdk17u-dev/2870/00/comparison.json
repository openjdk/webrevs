{"files":[{"patch":"@@ -809,1 +809,1 @@\n-            if (!isDirectory(dir, LinkOption.NOFOLLOW_LINKS))\n+            if (!isDirectory(dir))\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.testng.Assert.*;\n+import org.testng.SkipException;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8032220 8293792\n+ * @summary Test java.nio.file.Files.createDirectories method\n+ * @library ..\n+ * @run testng CreateDirectories\n+ *\/\n+public class CreateDirectories {\n+\n+    \/**\n+     * Test Files.createDirectories symbolic file with an existing directory.\n+     *\/\n+    @Test\n+    public void testSymlinkDir() throws Exception {\n+        \/\/ create a temp dir as the \"root\" in which we will run our tests.\n+        final Path top = TestUtil.createTemporaryDirectory();\n+        if (!TestUtil.supportsLinks(top)) {\n+            System.out.println(\"Skipping tests since symbolic links isn't \" +\n+                    \"supported under directory \"+ top);\n+            throw new SkipException(\"Symbolic links not supported\");\n+        }\n+        System.out.println(\"Running tests under directory \" + top.toAbsolutePath());\n+        final Path fooDir = Files.createDirectory(top.resolve(\"foo\"));\n+        assertTrue(Files.isDirectory(fooDir),\n+                fooDir + \" was expected to be a directory but wasn't\");\n+\n+        \/\/ now create a symlink to the \"foo\" dir\n+        final Path symlink = Files.createSymbolicLink(top.resolve(\"symlinkToFoo\"),\n+                fooDir.toAbsolutePath());\n+        assertTrue(Files.isSymbolicLink(symlink),\n+                symlink + \" was expected to be a symlink but wasn't\");\n+        assertTrue(Files.isDirectory(symlink),\n+                symlink + \" was expected to be a directory but wasn't\");\n+\n+        \/\/ now create a directory under the symlink (which effectively creates a directory under\n+        \/\/ \"foo\")\n+        final Path barDir = Files.createDirectory(symlink.resolve(\"bar\"));\n+        assertTrue(Files.isDirectory(barDir),\n+                barDir + \" was expected to be a directory but wasn't\");\n+        \/\/ ultimately, we now have this directory structure:\n+        \/\/ <root-dir>\n+        \/\/   |--- foo\n+        \/\/   |     |--- bar\n+        \/\/   |\n+        \/\/   |--- symlinkToFoo -> (links to) <absolute-path-to-root-dir>\/foo\n+\n+\n+        \/\/ now call Files.createDirectories on each of these existing directory\/symlink paths\n+        \/\/ and expect each one to succeed\n+        Files.createDirectories(fooDir); \/\/ .\/<root-dir>\/foo\n+        Files.createDirectories(symlink); \/\/ .\/<root-dir>\/symlinkToFoo\n+        Files.createDirectories(barDir); \/\/ .\/<root-dir>\/symlinkToFoo\/bar\n+    }\n+\n+    \/**\n+     * Tests Files.createDirectories\n+     *\/\n+    @Test\n+    public void testCreateDirectories() throws IOException {\n+        final Path tmpdir = TestUtil.createTemporaryDirectory();\n+        \/\/ a no-op\n+        Files.createDirectories(tmpdir);\n+\n+        \/\/ create one directory\n+        Path subdir = tmpdir.resolve(\"a\");\n+        Files.createDirectories(subdir);\n+        assertTrue(Files.isDirectory(subdir), subdir + \" was expected to be a directory,\" +\n+                \" but wasn't\");\n+\n+        \/\/ create parents\n+        subdir = subdir.resolve(\"b\/c\/d\");\n+        Files.createDirectories(subdir);\n+        assertTrue(Files.isDirectory(subdir), subdir + \" was expected to be a directory,\" +\n+                \" but wasn't\");\n+\n+        \/\/ existing file is not a directory\n+        Path file = Files.createFile(tmpdir.resolve(\"x\"));\n+        try {\n+            Files.createDirectories(file);\n+            throw new RuntimeException(\"failure expected\");\n+        } catch (FileAlreadyExistsException x) { }\n+        try {\n+            Files.createDirectories(file.resolve(\"y\"));\n+            throw new RuntimeException(\"failure expected\");\n+        } catch (IOException x) { }\n+\n+        \/\/ the root directory always exists\n+        Path root = Path.of(\"\/\");\n+        Files.createDirectories(root);\n+        Files.createDirectories(root.toAbsolutePath());\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CreateDirectories.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -25,2 +25,2 @@\n- * @bug 4313887 6838333 8005566 8032220 8215467 8255576 8286160\n- * @summary Unit test for miscellenous methods in java.nio.file.Files\n+ * @bug 4313887 6838333 8005566 8215467 8255576 8286160\n+ * @summary Unit test for miscellaneous methods in java.nio.file.Files\n@@ -54,1 +54,0 @@\n-            testCreateDirectories(dir);\n@@ -64,33 +63,0 @@\n-    \/**\n-     * Tests createDirectories\n-     *\/\n-    static void testCreateDirectories(Path tmpdir) throws IOException {\n-        \/\/ a no-op\n-        createDirectories(tmpdir);\n-\n-        \/\/ create one directory\n-        Path subdir = tmpdir.resolve(\"a\");\n-        createDirectories(subdir);\n-        assertTrue(exists(subdir));\n-\n-        \/\/ create parents\n-        subdir = subdir.resolve(\"b\/c\/d\");\n-        createDirectories(subdir);\n-        assertTrue(exists(subdir));\n-\n-        \/\/ existing file is not a directory\n-        Path file = createFile(tmpdir.resolve(\"x\"));\n-        try {\n-            createDirectories(file);\n-            throw new RuntimeException(\"failure expected\");\n-        } catch (FileAlreadyExistsException x) { }\n-        try {\n-            createDirectories(file.resolve(\"y\"));\n-            throw new RuntimeException(\"failure expected\");\n-        } catch (IOException x) { }\n-\n-        \/\/ the root directory always exists\n-        Path root = Path.of(\"\/\");\n-        Files.createDirectories(root);\n-        Files.createDirectories(root.toAbsolutePath());\n-    }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Misc.java","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"}]}