{"files":[{"patch":"@@ -40,7 +40,0 @@\n-    public static final ThreadLocal<ActiveSettingEvent> EVENT = new ThreadLocal<ActiveSettingEvent>() {\n-        @Override\n-        protected ActiveSettingEvent initialValue() {\n-            return new ActiveSettingEvent();\n-        }\n-    };\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ActiveSettingEvent.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -293,1 +293,0 @@\n-        ActiveSettingEvent event = ActiveSettingEvent.EVENT.get();\n@@ -300,0 +299,1 @@\n+                ActiveSettingEvent event = new ActiveSettingEvent();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-            settingsManager.setEventControl(handler.getEventControl());\n+            settingsManager.setEventControl(handler.getEventControl(), true);\n@@ -202,2 +202,2 @@\n-    public synchronized void setSettings(List<Map<String, String>> list) {\n-        settingsManager.setSettings(list);\n+    public synchronized void setSettings(List<Map<String, String>> list, boolean writeSettingEvents) {\n+        settingsManager.setSettings(list, writeSettingEvents);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-            updateSettings();\n+            updateSettings(false);\n@@ -278,1 +278,1 @@\n-            updateSettings();\n+            updateSettings(false);\n@@ -342,1 +342,1 @@\n-            updateSettingsButIgnoreRecording(recording);\n+            updateSettingsButIgnoreRecording(recording, false);\n@@ -386,2 +386,2 @@\n-    void updateSettings() {\n-        updateSettingsButIgnoreRecording(null);\n+    void updateSettings(boolean writeSettingEvents) {\n+        updateSettingsButIgnoreRecording(null, writeSettingEvents);\n@@ -390,1 +390,1 @@\n-    void updateSettingsButIgnoreRecording(PlatformRecording ignoreMe) {\n+    void updateSettingsButIgnoreRecording(PlatformRecording ignoreMe, boolean writeSettingEvents) {\n@@ -398,1 +398,1 @@\n-        MetadataRepository.getInstance().setSettings(list);\n+        MetadataRepository.getInstance().setSettings(list, writeSettingEvents);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-                recorder.updateSettings();\n+                recorder.updateSettings(true);\n@@ -492,1 +492,1 @@\n-                recorder.updateSettings();\n+                recorder.updateSettings(true);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    void setSettings(List<Map<String, String>> activeSettings) {\n+    void setSettings(List<Map<String, String>> activeSettings, boolean writeSettingEvents) {\n@@ -146,1 +146,1 @@\n-                setEventControl(ec);\n+                setEventControl(ec, writeSettingEvents);\n@@ -214,1 +214,1 @@\n-    void setEventControl(EventControl ec) {\n+    void setEventControl(EventControl ec, boolean writeSettingEvents) {\n@@ -253,1 +253,3 @@\n-        ec.writeActiveSettingEvent();\n+        if (writeSettingEvents) {\n+            ec.writeActiveSettingEvent();\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SettingsManager.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.HashSet;\n@@ -28,0 +29,1 @@\n+import java.util.Set;\n@@ -63,0 +65,1 @@\n+        testOnlyOnce();\n@@ -77,0 +80,33 @@\n+    private static void testOnlyOnce() throws Exception {\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        try (Recording r = new Recording(c)) {\n+            r.enable(ACTIVE_SETTING_EVENT_NAME).withStackTrace();\n+            r.start();\n+            r.stop();\n+            Map<String, RecordedEvent> settings = new HashMap<>();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            for (RecordedEvent e : events) {\n+                if (e.getEventType().getName().equals(ACTIVE_SETTING_EVENT_NAME)) {\n+                    long id = e.getLong(\"id\");\n+                    String name = e.getString(\"name\");\n+                    String value = e.getString(\"value\");\n+                    String s = id + \"#\" + name + \"=\" + value;\n+                    if (settings.containsKey(s)) {\n+                        System.out.println(\"Event:\");\n+                        System.out.println(settings.get(s));\n+                        System.out.println(\"Duplicated by:\");\n+                        System.out.println(e);\n+                        String message = \"Found duplicated setting '\" + s + \"'\";\n+                        for (EventType type : FlightRecorder.getFlightRecorder().getEventTypes()) {\n+                            if (type.getId() == id) {\n+                                throw new Exception(message+  \" for \" + type.getName());\n+                            }\n+                        }\n+                        throw new Exception(message);\n+                    }\n+                    settings.put(s, e);\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveSettingEvent.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"}]}