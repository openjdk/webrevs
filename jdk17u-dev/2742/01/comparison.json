{"files":[{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Red Hat, Inc. All rights reserved.\n@@ -166,1 +167,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -171,1 +171,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -273,1 +272,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -278,1 +276,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -333,1 +330,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -338,1 +334,0 @@\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n@@ -753,1 +754,0 @@\n-      MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -760,1 +760,0 @@\n-      MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -865,1 +864,0 @@\n-      MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -872,1 +870,0 @@\n-      MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -549,1 +550,1 @@\n-  assert(CodeCache_lock->owned_by_self(), \"Lock must be held\");\n+  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -559,1 +560,1 @@\n-  assert(CodeCache_lock->owned_by_self(), \"Lock must be held\");\n+  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}