{"files":[{"patch":"@@ -2243,9 +2243,5 @@\n-            } catch (IndexOutOfBoundsException ex) {\n-                if (pos.getErrorIndex() < 0) {\n-                    pos.setErrorIndex(0);\n-                }\n-                return null;\n-            }\n-            if (context == null) {\n-                if (pos.getErrorIndex() < 0) {\n-                    pos.setErrorIndex(0);\n+                if (context == null) {\n+                    if (pos.getErrorIndex() < 0) {\n+                        pos.setErrorIndex(0);\n+                    }\n+                    return null;\n@@ -2253,3 +2249,0 @@\n-                return null;\n-            }\n-            try {\n@@ -2262,1 +2255,3 @@\n-                pos.setErrorIndex(0);\n+                if (pos.getErrorIndex() < 0) {\n+                    pos.setErrorIndex(0);\n+                }\n@@ -2267,1 +2262,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatter.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import static java.time.temporal.ChronoField.HOUR_OF_DAY;\n@@ -68,0 +69,1 @@\n+import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;\n@@ -73,0 +75,1 @@\n+import static org.testng.Assert.assertNull;\n@@ -74,0 +77,1 @@\n+import java.text.ParsePosition;\n@@ -83,0 +87,1 @@\n+import java.time.format.SignStyle;\n@@ -84,0 +89,1 @@\n+import java.util.Locale;\n@@ -91,1 +97,1 @@\n- * @bug 8223773 8272473\n+ * @bug 8223773 8272473 8319640\n@@ -240,0 +246,26 @@\n+\n+    \/\/ Checks ::toFormat().parseObject(text, pos) do not throw DateTimeException\n+    @Test\n+    public void test_toFormat_2arg_null_return_on_DateTimeException() {\n+        var f = new DateTimeFormatterBuilder()\n+            .appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE)\n+            .optionalStart()\n+            .appendLiteral(':')\n+            .appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE)\n+            .optionalEnd()\n+            .optionalStart()\n+            .appendOffset(\"+HHmm\", \"Z\")\n+            .optionalEnd()\n+            .toFormatter(Locale.ROOT)\n+            .toFormat();\n+        assertNull(f.parseObject(\"17-30\", new ParsePosition(0)));\n+    }\n+\n+    \/\/ Checks ::toFormat().parseObject(text, pos) do not throw IOOBE\n+    @Test\n+    public void test_toFormat_2arg_null_return_on_IOOBE() {\n+        var date = \"2023-11-13\";\n+        assertNull(DateTimeFormatter.ISO_LOCAL_DATE\n+                .toFormat()\n+                .parseObject(date, new ParsePosition(date.length() + 1)));\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeParsing.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"}]}