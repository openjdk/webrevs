{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.ArrayDeque;\n@@ -35,1 +36,0 @@\n-import java.util.Arrays;\n@@ -38,0 +38,1 @@\n+import java.util.Deque;\n@@ -108,2 +109,4 @@\n-            \/\/ Add default methods inherited from interfaces\n-            for (Class<?> iface : type.getInterfaces()) {\n+            \/\/ Add methods inherited from interfaces\n+            Deque<Class<?>> ifaceDeque = new ArrayDeque<>(List.of(type.getInterfaces()));\n+            while (!ifaceDeque.isEmpty()) {\n+                Class<?> iface = ifaceDeque.removeLast();\n@@ -113,0 +116,1 @@\n+                ifaceDeque.addAll(List.of(iface.getInterfaces()));\n@@ -114,1 +118,1 @@\n-                    if (!Modifier.isAbstract(method.getModifiers())) {\n+                    if (!Modifier.isAbstract(method.getModifiers()) && !method.isBridge()) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/MethodInfo.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,2 @@\n-                if ((this.read == null) || this.read.type.isAssignableFrom(info.type)) {\n+                if ((this.read == null) || (!info.method.isDefault()\n+                                            && this.read.type.isAssignableFrom(info.type))) {\n@@ -95,0 +96,3 @@\n+                } else if (isParentOfIncoming(this.write, info)) {\n+                    this.write = info;\n+                    writeType = info.type;\n@@ -316,0 +320,12 @@\n+\n+    private static boolean isParentOfIncoming(MethodInfo current, MethodInfo incoming) {\n+        if (null == current) {\n+            return false;\n+        }\n+        Class<?> currentClass = current.method.getDeclaringClass();\n+        Class<?> incomingClass = incoming.method.getDeclaringClass();\n+        if (currentClass == incomingClass) {\n+            return false;\n+        }\n+        return currentClass.isAssignableFrom(incomingClass);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/PropertyInfo.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1071,2 +1071,6 @@\n-            MethodDescriptor composite = new MethodDescriptor(old, md);\n-            methods.put(name, composite);\n+            Class<?> oldClass = old.getMethod().getDeclaringClass();\n+            Class<?> mdClass = md.getMethod().getDeclaringClass();\n+            if (oldClass == mdClass || oldClass.isAssignableFrom(mdClass) || !mdClass.isAssignableFrom(oldClass)) {\n+                MethodDescriptor composite = new MethodDescriptor(old, md);\n+                methods.put(name, composite);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Introspector.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8071693\n+ * @bug 8071693 8347826\n@@ -31,0 +31,1 @@\n+import java.beans.BeanInfo;\n@@ -33,0 +34,1 @@\n+import java.beans.MethodDescriptor;\n@@ -34,0 +36,1 @@\n+import java.beans.SimpleBeanInfo;\n@@ -35,0 +38,1 @@\n+import java.util.Arrays;\n@@ -38,0 +42,1 @@\n+import java.util.Objects;\n@@ -40,0 +45,1 @@\n+import java.util.stream.Stream;\n@@ -81,0 +87,6 @@\n+        verifyMethods(D1.class,\n+            \"public static int DefaultMethodBeanPropertyTest$A1.getStaticValue()\",\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n+        );\n@@ -82,4 +94,4 @@\n-            \"getClass\",     \/\/ inherited method\n-            \"getValue\",     \/\/ inherited default method\n-            \"getFoo\",       \/\/ overridden interface method\n-            \"getObj\"        \/\/ overridden default method\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n@@ -111,0 +123,3 @@\n+        verifyMethods(D2.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n+        );\n@@ -112,2 +127,2 @@\n-            \"getClass\",\n-            \"getFoo\"\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n@@ -147,0 +162,3 @@\n+        verifyMethods(D3.class,\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n+        );\n@@ -148,2 +166,2 @@\n-            \"getClass\",\n-            \"getFoo\"\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n@@ -153,1 +171,266 @@\n-\/\/ Helper methods\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 4              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A4 {\n+        default Object getDefault0() {\n+            return null;\n+        }\n+        default Object getDefault1() {\n+            return null;\n+        }\n+        default Object getDefault2() {\n+            return null;\n+        }\n+        default Object getDefault3() {\n+            return null;\n+        }\n+        Object getNonDefault();\n+    }\n+\n+    public class B4 implements A4 {\n+        @Override\n+        public Object getDefault1() {\n+            return new B4();\n+        }\n+        @Override\n+        public String getDefault2() {\n+            return null;\n+        }\n+        @Override\n+        public Float getDefault3() {\n+            return null;\n+        }\n+        public Long getNonDefault() {\n+            return null;\n+        }\n+    }\n+\n+    public static void testScenario4() {\n+        verifyMethods(B4.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n+        );\n+        verifyProperties(B4.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 5              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A5 {\n+        public default void setParentFoo(Integer num) {\n+        }\n+        public default void setFoo(String num) {\n+        }\n+        public static int getStaticValue() {\n+            return 0;\n+        }\n+        private int getPrivateValue() {\n+            return 0;\n+        }\n+    }\n+\n+    public class B5 implements A5 {\n+        public void setFoo(Number num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+        public static int getStaticValue() {\n+            return 0;\n+        }\n+    }\n+\n+    public static void testScenario5() {\n+        verifyMethods(B5.class,\n+            \"public static int DefaultMethodBeanPropertyTest$B5.getStaticValue()\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setFoo(java.lang.String)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B5.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 6              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public class A6 {\n+        public void setParentFoo(Integer num) {\n+        }\n+        public void setFoo(Integer num) {\n+        }\n+        public static int getStaticValue() {\n+            return 0;\n+        }\n+        private int getPrivateValue() {\n+            return 0;\n+        }\n+    }\n+\n+    public class B6 extends A6 {\n+        public void setFoo(String num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+        public static int getStaticValue() {\n+            return 0;\n+        }\n+    }\n+\n+    public static void testScenario6() {\n+        verifyMethods(B6.class,\n+            \"public static int DefaultMethodBeanPropertyTest$B6.getStaticValue()\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B6.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 7              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    interface A7<T> {\n+        T getValue();\n+    }\n+\n+    interface B7 {\n+        Runnable getValue();\n+    }\n+\n+    interface AB7 extends B7, A7<Object> {\n+        Runnable getValue();\n+    }\n+\n+    abstract class D7 implements AB7 {\n+        public void setValue(Runnable value) {\n+        }\n+    }\n+\n+    public static void testScenario7() {\n+        verifyMethods(D7.class,\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n+        );\n+        verifyProperties(D7.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 8              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A8 {\n+        public default void setFoo(Float num) {\n+        }\n+        public default void setFoo2(Integer num) {\n+        }\n+    }\n+    public interface B8 extends A8 {\n+        public default void setFoo(Integer num) {\n+        }\n+        public default void setFoo2(Float num) {\n+        }\n+    }\n+\n+    public class C8 implements B8 {\n+    }\n+\n+    public static void testScenario8() {\n+        verifyMethods(C8.class,\n+            \"public default void DefaultMethodBeanPropertyTest$A8.setFoo(java.lang.Float)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A8.setFoo2(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo2(java.lang.Float)\"\n+        );\n+        verifyProperties(C8.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo2(java.lang.Float)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 9              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public class A9 {\n+        public void setFoo(Object value) {\n+        }\n+        public void setFoo(String value) {\n+        }\n+        public void setFoo2(Object value) {\n+        }\n+        public void setFoo2(Integer value) {\n+        }\n+        \/\/ For the same setters with inconvertible arg types PropertyInfo behavior is undefined.\n+        \/\/ public void setLocalFoo3(Long num) { }\n+        \/\/ public void setLocalFoo3(Float num) { }\n+    }\n+\n+    public static void testScenario9() {\n+        verifyMethods(A9.class,\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.Object)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Object)\"\n+        );\n+        verifyProperties(A9.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Integer)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 10              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public static class A10 {\n+        public Object getProp() {\n+            return null;\n+        }\n+    }\n+\n+    public static interface B10 {\n+        Object getProp();\n+    }\n@@ -155,1 +438,19 @@\n-    public static void verifyProperties(Class<?> type, String... getterNames) {\n+    public static class C10_1 extends A10 implements B10 {\n+    }\n+\n+    public static class C10_2 extends A10 implements B10 {\n+    }\n+\n+    public static class A10BeanInfo extends SimpleBeanInfo {\n+        public MethodDescriptor[] getMethodDescriptors() {\n+            try {\n+                Class params[] = {};\n+                MethodDescriptor md = new MethodDescriptor(A10.class.getDeclaredMethod(\"getProp\", params));\n+                md.setDisplayName(\"display name\");\n+                MethodDescriptor res[] = { md };\n+                return res;\n+            } catch (Exception exception) {\n+                throw new Error(\"unexpected exception\", exception);\n+            }\n+        }\n+    }\n@@ -157,6 +458,2 @@\n-        \/\/ Gather expected properties\n-        final HashSet<PropertyDescriptor> expected = new HashSet<>();\n-        for (String methodName : getterNames) {\n-            final String suffix = methodName.substring(3);\n-            final String propName = Introspector.decapitalize(suffix);\n-            final Method getter;\n+    public static class C10_1BeanInfo extends SimpleBeanInfo {\n+        public BeanInfo[] getAdditionalBeanInfo() {\n@@ -164,3 +461,7 @@\n-                getter = type.getMethod(methodName);\n-            } catch (NoSuchMethodException e) {\n-                throw new Error(\"unexpected error\", e);\n+                BeanInfo res[] = {\n+                    Introspector.getBeanInfo(A10.class),\n+                    Introspector.getBeanInfo(B10.class)\n+                };\n+                return res;\n+            } catch (IntrospectionException exception) {\n+                throw new Error(\"unexpected exception\", exception);\n@@ -168,1 +469,5 @@\n-            final PropertyDescriptor propDesc;\n+        }\n+    }\n+\n+    public static class C10_2BeanInfo extends SimpleBeanInfo {\n+        public BeanInfo[] getAdditionalBeanInfo() {\n@@ -170,3 +475,7 @@\n-                propDesc = new PropertyDescriptor(propName, getter, null);\n-            } catch (IntrospectionException e) {\n-                throw new Error(\"unexpected error\", e);\n+                BeanInfo res[] = {\n+                    Introspector.getBeanInfo(B10.class),\n+                    Introspector.getBeanInfo(A10.class)\n+                };\n+                return res;\n+            } catch (IntrospectionException exception) {\n+                throw new Error(\"unexpected exception\", exception);\n@@ -174,1 +483,0 @@\n-            expected.add(propDesc);\n@@ -176,0 +484,1 @@\n+    }\n@@ -177,8 +486,10 @@\n-        \/\/ Verify properties can be found directly\n-        expected.stream()\n-                .map(PropertyDescriptor::getName)\n-                .filter(name -> BeanUtils.getPropertyDescriptor(type, name) == null)\n-                .findFirst()\n-                .ifPresent(name -> {\n-                    throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n-                });\n+    public static void testScenario10() {\n+        {\n+            var md = getMethodDescriptor(C10_1.class, A10.class, \"getProp\");\n+            assertEquals(\"display name\", md.getDisplayName(), \"getDisplayName()\");\n+        }\n+        {\n+            var md = getMethodDescriptor(C10_2.class, A10.class, \"getProp\");\n+            assertEquals(\"display name\", md.getDisplayName(), \"getDisplayName()\");\n+        }\n+    }\n@@ -186,3 +497,1 @@\n-        \/\/ Gather actual properties\n-        final Set<PropertyDescriptor> actual =\n-                Set.of(BeanUtils.getPropertyDescriptors(type));\n+\/\/ Helper methods\n@@ -190,1 +499,1 @@\n-        \/\/ Verify the two sets are the same\n+    private static void verifyEquality(String title, Set<String> expected, Set<String> actual) {\n@@ -192,9 +501,59 @@\n-            throw new Error(\"mismatch: \" + type\n-              + \"\\nACTUAL:\\n  \"\n-              + actual.stream()\n-                      .map(Object::toString)\n-                      .collect(Collectors.joining(\"\\n  \"))\n-              + \"\\nEXPECTED:\\n  \"\n-              + expected.stream()\n-                        .map(Object::toString)\n-                        .collect(Collectors.joining(\"\\n  \")));\n+            throw new Error(title + \" mismatch: \"\n+                    + \"\\nACTUAL:\\n  \"\n+                    + actual.stream()\n+                            .map(Object::toString)\n+                            .collect(Collectors.joining(\"\\n  \"))\n+                    + \"\\nEXPECTED:\\n  \"\n+                    + expected.stream()\n+                              .map(Object::toString)\n+                              .collect(Collectors.joining(\"\\n  \")));\n+        }\n+    }\n+\n+    public static void verifyProperties(Class<?> type,  String... methodNames) {\n+        try {\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n+            final Set<String> actual = Arrays\n+                    .stream(Introspector.getBeanInfo(type)\n+                                        .getPropertyDescriptors())\n+                    .flatMap(pd -> Stream.of(pd.getReadMethod(), pd.getWriteMethod()))\n+                    .filter(Objects::nonNull)\n+                    .map((Method m) -> m.toString())\n+                    .collect(Collectors.toSet());\n+            verifyEquality(\"properties\", expected, actual);\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n+        }\n+    }\n+\n+    public static void verifyMethods(Class<?> type, String... methodNames) {\n+        try {\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n+            final Set<String> actual = Arrays\n+                    .stream(Introspector.getBeanInfo(type, Object.class)\n+                                        .getMethodDescriptors())\n+                    .map(MethodDescriptor::getMethod)\n+                    .map(Method::toString)\n+                    .collect(Collectors.toSet());\n+            verifyEquality(\"methods\", expected, actual);\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n+        }\n+    }\n+\n+    private static MethodDescriptor getMethodDescriptor(Class cls, Class stop, String name) {\n+        try {\n+            for (var md : Introspector.getBeanInfo(cls, stop).getMethodDescriptors()) {\n+                if (md.getName().equals(name)) {\n+                    return md;\n+                }\n+            }\n+            return null;\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n+        }\n+    }\n+\n+    private static void assertEquals(Object expected, Object actual, String msg) {\n+        if (!expected.equals(actual)) {\n+            throw new Error(msg + \":\\nACTUAL: \" + actual + \"\\nEXPECTED: \" + expected);\n@@ -210,0 +569,7 @@\n+        testScenario4();\n+        testScenario5();\n+        testScenario6();\n+        testScenario7();\n+        testScenario8();\n+        testScenario9();\n+        testScenario10();\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":413,"deletions":47,"binary":false,"changes":460,"status":"modified"}]}