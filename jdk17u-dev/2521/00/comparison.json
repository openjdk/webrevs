{"files":[{"patch":"@@ -1,328 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test %W% %E%  %I%, %G%\n-  @bug 6315717\n-  @summary  manual control over the Robot\n-  @author Andrei Dmitriev : area=awt.robot\n-  @run applet\/manual=yesno ManualInstructions.html\n-*\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.Timer;\n-import java.util.TimerTask;\n-\n-public class ManualInstructions extends Applet\n-{\n-    final static long SEND_DELAY = 1000;\n-\n-    public static void main(String s[]){\n-        ManualInstructions mi = new ManualInstructions();\n-        mi.init();\n-        mi.start();\n-    }\n-\n-    static Robot robot;\n-    Point mouseLocation; \/\/where mouse should be pressed each time\n-    Panel target = new Panel();\n-    Button pressOn = new Button(\"press on ...\");\n-    Button releaseOn = new Button(\"release on ...\");\n-    Button clickOn = new Button(\"click on ...\");\n-    Choice buttonNumber = new Choice();\n-\n-    public void init()\n-    {\n-        try {\n-            robot = new Robot();\n-        } catch (AWTException ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(ex);\n-        }\n-        this.setLayout (new BorderLayout ());\n-\n-        target.setBackground(Color.green);\n-        target.setName(\"GreenBox\");\/\/for the ease of debug\n-        target.setPreferredSize(new Dimension(100, 100));\n-        String toolkit = Toolkit.getDefaultToolkit().getClass().getName();\n-\n-        \/\/ on X systems two buttons are reserved for wheel though they are countable by MouseInfo.\n-        int buttonsNumber = toolkit.equals(\"sun.awt.windows.WToolkit\")?MouseInfo.getNumberOfButtons():MouseInfo.getNumberOfButtons()-2;\n-\n-        for (int i = 0; i < 8; i++){\n-            buttonNumber.add(\"BUTTON\"+(i+1)+\"_MASK\");\n-        }\n-\n-        pressOn.addActionListener(new ActionListener(){\n-                public void actionPerformed(ActionEvent e){\n-                    System.out.println(\"Now pressing : \" + (buttonNumber.getSelectedIndex()+1));\n-\n-                    Timer timer = new Timer();\n-                    TimerTask robotInteraction = new TimerTask(){\n-                            public void run(){\n-                                robot.mouseMove(updateTargetLocation().x, updateTargetLocation().y);\n-                                robot.mousePress(getMask(buttonNumber.getSelectedIndex()+1));\n-                            }\n-                        };\n-                    timer.schedule(robotInteraction, SEND_DELAY);\n-                }\n-            });\n-\n-        releaseOn.addActionListener(new ActionListener(){\n-            public void actionPerformed(ActionEvent e){\n-                System.out.println(\"Now releasing : \" + (buttonNumber.getSelectedIndex()+1));\n-                Timer timer = new Timer();\n-                TimerTask robotInteraction = new TimerTask(){\n-                        public void run(){\n-                            robot.mouseMove(updateTargetLocation().x, updateTargetLocation().y);\n-                            robot.mouseRelease(getMask(buttonNumber.getSelectedIndex()+1));\n-                        }\n-                    };\n-                timer.schedule(robotInteraction, SEND_DELAY);\n-            }\n-        });\n-\n-        clickOn.addActionListener(new ActionListener(){\n-            public void actionPerformed(ActionEvent e){\n-                System.out.println(\"Now clicking : \" + (buttonNumber.getSelectedIndex()+1));\n-                Timer timer = new Timer();\n-                TimerTask robotInteraction = new TimerTask(){\n-                        public void run(){\n-                            robot.mouseMove(updateTargetLocation().x, updateTargetLocation().y);\n-                            robot.mousePress(getMask(buttonNumber.getSelectedIndex()+1));\n-                            robot.mouseRelease(getMask(buttonNumber.getSelectedIndex()+1));\n-                        }\n-                    };\n-                timer.schedule(robotInteraction, SEND_DELAY);\n-            }\n-\n-        });\n-        target.addMouseListener(new MouseAdapter(){\n-           public void mousePressed(MouseEvent e){\n-                Sysout.println(\"\"+e);\n-           }\n-           public void mouseReleased(MouseEvent e){\n-                Sysout.println(\"\"+e);\n-           }\n-           public void mouseClicked(MouseEvent e){\n-                Sysout.println(\"\"+e);\n-           }\n-        });\n-\n-        String[] instructions =\n-        {\n-            \"Do provide an instruction to the robot by\",\n-            \"choosing the button number to act and \",\n-            \"pressing appropriate java.awt.Button on the left.\",\n-            \"Inspect an output in the TextArea below.\",\n-            \"Please don't generate non-natural sequences like Release-Release, etc.\",\n-            \"If you use keyboard be sure that you released the keyboard shortly.\",\n-            \"If events are generated well press Pass, otherwise Fail.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    private int getMask(int button){\n-        return InputEvent.getMaskForButton(button);\n-\n-        \/*\n-            \/\/this only works for standard buttons and for old JDK builds\n-        int mask = 0;\n-        switch (button){\n-        case 1: {\n-            mask = InputEvent.BUTTON1_MASK;\n-            break;\n-        }\n-        case 2: {\n-            mask = InputEvent.BUTTON2_MASK;\n-            break;\n-        }\n-        case 3: {\n-            mask = InputEvent.BUTTON3_MASK;\n-            break;\n-        }\n-        }\n-        return mask;\n-        *\/\n-    }\n-\n-    private Point updateTargetLocation() {\n-        return new Point(target.getLocationOnScreen().x + target.getWidth()\/2, target.getLocationOnScreen().y + target.getHeight()\/2);\n-    }\n-\n-    public void start ()\n-    {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-        Frame f = new Frame (\"Set action for Robot here.\");\n-        f.setLayout(new FlowLayout());\n-        f.add(buttonNumber);\n-        f.add(pressOn);\n-        f.add(releaseOn);\n-        f.add(clickOn);\n-        f.add(target);\n-        f.pack();\n-        f.setVisible(true);\n-     }\/\/ start()\n-}\/\/ class\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 120;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-            }\/\/ while\n-        }\/\/ for\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/Robot\/ManualInstructions\/ManualInstructions.java","additions":0,"deletions":328,"binary":false,"changes":328,"status":"deleted"}]}