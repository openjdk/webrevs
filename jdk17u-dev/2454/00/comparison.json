{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -1922,1 +1922,1 @@\n-    return 4 * (int)(intptr_t)cr + c;\n+    return 4 * cr.encoding() + c;\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -592,1 +592,1 @@\n-      Address       addr = dst_in_memory ? frame_map()->address_for_slot(dst->double_stack_ix()) : NULL;\n+      Address       addr = dst_in_memory ? frame_map()->address_for_slot(dst->double_stack_ix()) : Address();\n@@ -616,1 +616,1 @@\n-      Address       addr = dst_in_memory ? frame_map()->address_for_slot(dst->double_stack_ix()) : NULL;\n+      Address       addr = dst_in_memory ? frame_map()->address_for_slot(dst->double_stack_ix()) : Address();\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-        __ add(R4_ARG2, (intptr_t) _ref_addr.disp(), _ref_addr.base());\n+        __ addi(R4_ARG2, _ref_addr.base(), _ref_addr.disp());\n@@ -547,1 +547,1 @@\n-        __ add(R4_ARG2, (intptr_t) _ref_addr.disp(), _ref_addr.base()); \/\/ Cloberring _ref\n+        __ addi(R4_ARG2, _ref_addr.base(), _ref_addr.disp()); \/\/ Clobbering _ref\n@@ -551,1 +551,1 @@\n-        __ add(R4_ARG2, (intptr_t) _ref_addr.disp(), _ref_addr.base());\n+        __ addi(R4_ARG2, _ref_addr.base(), _ref_addr.disp());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -1782,1 +1782,1 @@\n-      add(R28_mdx, off_to_args, R28_mdx);\n+      addi(R28_mdx, R28_mdx, off_to_args);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -303,1 +303,1 @@\n-    __ add(R15_argbase, Interpreter::stackElementSize, R15_argbase);\n+    __ addi(R15_argbase, R15_argbase, Interpreter::stackElementSize);\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2015 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/\/ Make sure the defines don't screw up the declarations later on in this file.\n-#define DONT_USE_REGISTER_DEFINES\n-\n-#include \"asm\/register.hpp\"\n-\n-REGISTER_DEFINITION(Register, noreg);\n-\n-REGISTER_DEFINITION(FloatRegister, fnoreg);\n-\n-REGISTER_DEFINITION(VectorRegister, vnoreg);\n-\n-REGISTER_DEFINITION(VectorSRegister, vsnoreg);\n","filename":"src\/hotspot\/cpu\/ppc\/register_definitions_ppc.cpp","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -29,2 +29,1 @@\n-\n-const char* RegisterImpl::name() const {\n+const char* Register::name() const {\n@@ -40,1 +39,1 @@\n-const char* ConditionRegisterImpl::name() const {\n+const char* ConditionRegister::name() const {\n@@ -47,1 +46,1 @@\n-const char* FloatRegisterImpl::name() const {\n+const char* FloatRegister::name() const {\n@@ -57,1 +56,1 @@\n-const char* SpecialRegisterImpl::name() const {\n+const char* SpecialRegister::name() const {\n@@ -64,1 +63,1 @@\n-const char* VectorRegisterImpl::name() const {\n+const char* VectorRegister::name() const {\n@@ -74,1 +73,1 @@\n-const char* VectorSRegisterImpl::name() const {\n+const char* VectorSRegister::name() const {\n@@ -89,2 +88,2 @@\n-VectorSRegister FloatRegisterImpl::to_vsr() const {\n-  if (this == fnoreg) { return vsnoreg; }\n+VectorSRegister FloatRegister::to_vsr() const {\n+  if (*this == fnoreg) { return vsnoreg; }\n@@ -95,2 +94,2 @@\n-VectorSRegister VectorRegisterImpl::to_vsr() const {\n-  if (this == vnoreg) { return vsnoreg; }\n+VectorSRegister VectorRegister::to_vsr() const {\n+  if (*this == vnoreg) { return vsnoreg; }\n@@ -101,2 +100,2 @@\n-VectorRegister VectorSRegisterImpl::to_vr() const {\n-  if (this == vsnoreg) { return vnoreg; }\n+VectorRegister VectorSRegister::to_vr() const {\n+  if (*this == vsnoreg) { return vnoreg; }\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.cpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-class Address;\n@@ -78,8 +77,0 @@\n-\/\/ Use Register as shortcut\n-class RegisterImpl;\n-typedef RegisterImpl* Register;\n-\n-inline Register as_Register(int encoding) {\n-  assert(encoding >= -1 && encoding < 32, \"bad register encoding\");\n-  return (Register)(intptr_t)encoding;\n-}\n@@ -88,1 +79,2 @@\n-class RegisterImpl: public AbstractRegisterImpl {\n+class Register {\n+  int _encoding;\n@@ -94,0 +86,5 @@\n+  constexpr Register(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const Register rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const Register rhs) const { return _encoding != rhs._encoding; }\n+  const Register* operator->() const { return this; }\n+\n@@ -95,1 +92,1 @@\n-  inline friend Register as_Register(int encoding);\n+  inline constexpr friend Register as_Register(int encoding);\n@@ -98,3 +95,3 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return value(); }\n-  inline VMReg as_VMReg();\n-  Register successor() const { return as_Register(encoding() + 1); }\n+  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  inline VMReg as_VMReg() const;\n+  Register successor() const { return Register(encoding() + 1); }\n@@ -103,3 +100,3 @@\n-  bool is_valid()       const { return ( 0 <= (value()&0x7F) && (value()&0x7F) <  number_of_registers); }\n-  bool is_volatile()    const { return ( 0 <= (value()&0x7F) && (value()&0x7F) <= 13 ); }\n-  bool is_nonvolatile() const { return (14 <= (value()&0x7F) && (value()&0x7F) <= 31 ); }\n+  bool is_valid()       const { return ( 0 <= _encoding && _encoding <  number_of_registers); }\n+  bool is_volatile()    const { return ( 0 <= _encoding && _encoding <= 13 ); }\n+  bool is_nonvolatile() const { return (14 <= _encoding && _encoding <= 31 ); }\n@@ -110,36 +107,4 @@\n-\/\/ The integer registers of the PPC architecture\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(Register, R0,   (0));\n-CONSTANT_REGISTER_DECLARATION(Register, R1,   (1));\n-CONSTANT_REGISTER_DECLARATION(Register, R2,   (2));\n-CONSTANT_REGISTER_DECLARATION(Register, R3,   (3));\n-CONSTANT_REGISTER_DECLARATION(Register, R4,   (4));\n-CONSTANT_REGISTER_DECLARATION(Register, R5,   (5));\n-CONSTANT_REGISTER_DECLARATION(Register, R6,   (6));\n-CONSTANT_REGISTER_DECLARATION(Register, R7,   (7));\n-CONSTANT_REGISTER_DECLARATION(Register, R8,   (8));\n-CONSTANT_REGISTER_DECLARATION(Register, R9,   (9));\n-CONSTANT_REGISTER_DECLARATION(Register, R10, (10));\n-CONSTANT_REGISTER_DECLARATION(Register, R11, (11));\n-CONSTANT_REGISTER_DECLARATION(Register, R12, (12));\n-CONSTANT_REGISTER_DECLARATION(Register, R13, (13));\n-CONSTANT_REGISTER_DECLARATION(Register, R14, (14));\n-CONSTANT_REGISTER_DECLARATION(Register, R15, (15));\n-CONSTANT_REGISTER_DECLARATION(Register, R16, (16));\n-CONSTANT_REGISTER_DECLARATION(Register, R17, (17));\n-CONSTANT_REGISTER_DECLARATION(Register, R18, (18));\n-CONSTANT_REGISTER_DECLARATION(Register, R19, (19));\n-CONSTANT_REGISTER_DECLARATION(Register, R20, (20));\n-CONSTANT_REGISTER_DECLARATION(Register, R21, (21));\n-CONSTANT_REGISTER_DECLARATION(Register, R22, (22));\n-CONSTANT_REGISTER_DECLARATION(Register, R23, (23));\n-CONSTANT_REGISTER_DECLARATION(Register, R24, (24));\n-CONSTANT_REGISTER_DECLARATION(Register, R25, (25));\n-CONSTANT_REGISTER_DECLARATION(Register, R26, (26));\n-CONSTANT_REGISTER_DECLARATION(Register, R27, (27));\n-CONSTANT_REGISTER_DECLARATION(Register, R28, (28));\n-CONSTANT_REGISTER_DECLARATION(Register, R29, (29));\n-CONSTANT_REGISTER_DECLARATION(Register, R30, (30));\n-CONSTANT_REGISTER_DECLARATION(Register, R31, (31));\n-\n+inline constexpr Register as_Register(int encoding) {\n+  assert(encoding >= -1 && encoding < 32, \"bad register encoding\");\n+  return Register(encoding);\n+}\n@@ -147,9 +112,35 @@\n-\/\/\n-\/\/ Because Power has many registers, #define'ing values for them is\n-\/\/ beneficial in code size and is worth the cost of some of the\n-\/\/ dangers of defines. If a particular file has a problem with these\n-\/\/ defines then it's possible to turn them off in that file by\n-\/\/ defining DONT_USE_REGISTER_DEFINES. Register_definition_ppc.cpp\n-\/\/ does that so that it's able to provide real definitions of these\n-\/\/ registers for use in debuggers and such.\n-\/\/\n+\/\/ The integer registers of the PPC architecture\n+constexpr Register noreg = as_Register(-1);\n+\n+constexpr Register  R0 = as_Register( 0);\n+constexpr Register  R1 = as_Register( 1);\n+constexpr Register  R2 = as_Register( 2);\n+constexpr Register  R3 = as_Register( 3);\n+constexpr Register  R4 = as_Register( 4);\n+constexpr Register  R5 = as_Register( 5);\n+constexpr Register  R6 = as_Register( 6);\n+constexpr Register  R7 = as_Register( 7);\n+constexpr Register  R8 = as_Register( 8);\n+constexpr Register  R9 = as_Register( 9);\n+constexpr Register R10 = as_Register(10);\n+constexpr Register R11 = as_Register(11);\n+constexpr Register R12 = as_Register(12);\n+constexpr Register R13 = as_Register(13);\n+constexpr Register R14 = as_Register(14);\n+constexpr Register R15 = as_Register(15);\n+constexpr Register R16 = as_Register(16);\n+constexpr Register R17 = as_Register(17);\n+constexpr Register R18 = as_Register(18);\n+constexpr Register R19 = as_Register(19);\n+constexpr Register R20 = as_Register(20);\n+constexpr Register R21 = as_Register(21);\n+constexpr Register R22 = as_Register(22);\n+constexpr Register R23 = as_Register(23);\n+constexpr Register R24 = as_Register(24);\n+constexpr Register R25 = as_Register(25);\n+constexpr Register R26 = as_Register(26);\n+constexpr Register R27 = as_Register(27);\n+constexpr Register R28 = as_Register(28);\n+constexpr Register R29 = as_Register(29);\n+constexpr Register R30 = as_Register(30);\n+constexpr Register R31 = as_Register(31);\n@@ -157,45 +148,0 @@\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define noreg ((Register)(noreg_RegisterEnumValue))\n-\n-#define R0 ((Register)(R0_RegisterEnumValue))\n-#define R1 ((Register)(R1_RegisterEnumValue))\n-#define R2 ((Register)(R2_RegisterEnumValue))\n-#define R3 ((Register)(R3_RegisterEnumValue))\n-#define R4 ((Register)(R4_RegisterEnumValue))\n-#define R5 ((Register)(R5_RegisterEnumValue))\n-#define R6 ((Register)(R6_RegisterEnumValue))\n-#define R7 ((Register)(R7_RegisterEnumValue))\n-#define R8 ((Register)(R8_RegisterEnumValue))\n-#define R9 ((Register)(R9_RegisterEnumValue))\n-#define R10 ((Register)(R10_RegisterEnumValue))\n-#define R11 ((Register)(R11_RegisterEnumValue))\n-#define R12 ((Register)(R12_RegisterEnumValue))\n-#define R13 ((Register)(R13_RegisterEnumValue))\n-#define R14 ((Register)(R14_RegisterEnumValue))\n-#define R15 ((Register)(R15_RegisterEnumValue))\n-#define R16 ((Register)(R16_RegisterEnumValue))\n-#define R17 ((Register)(R17_RegisterEnumValue))\n-#define R18 ((Register)(R18_RegisterEnumValue))\n-#define R19 ((Register)(R19_RegisterEnumValue))\n-#define R20 ((Register)(R20_RegisterEnumValue))\n-#define R21 ((Register)(R21_RegisterEnumValue))\n-#define R22 ((Register)(R22_RegisterEnumValue))\n-#define R23 ((Register)(R23_RegisterEnumValue))\n-#define R24 ((Register)(R24_RegisterEnumValue))\n-#define R25 ((Register)(R25_RegisterEnumValue))\n-#define R26 ((Register)(R26_RegisterEnumValue))\n-#define R27 ((Register)(R27_RegisterEnumValue))\n-#define R28 ((Register)(R28_RegisterEnumValue))\n-#define R29 ((Register)(R29_RegisterEnumValue))\n-#define R30 ((Register)(R30_RegisterEnumValue))\n-#define R31 ((Register)(R31_RegisterEnumValue))\n-#endif\n-\n-\/\/ Use ConditionRegister as shortcut\n-class ConditionRegisterImpl;\n-typedef ConditionRegisterImpl* ConditionRegister;\n-\n-inline ConditionRegister as_ConditionRegister(int encoding) {\n-  assert(encoding >= 0 && encoding < 8, \"bad condition register encoding\");\n-  return (ConditionRegister)(intptr_t)encoding;\n-}\n@@ -204,1 +150,2 @@\n-class ConditionRegisterImpl: public AbstractRegisterImpl {\n+class ConditionRegister {\n+  int _encoding;\n@@ -210,0 +157,5 @@\n+  constexpr ConditionRegister(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const ConditionRegister rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const ConditionRegister rhs) const { return _encoding != rhs._encoding; }\n+  const ConditionRegister* operator->() const { return this; }\n+\n@@ -211,1 +163,1 @@\n-  inline friend ConditionRegister as_ConditionRegister(int encoding);\n+  inline constexpr friend ConditionRegister as_ConditionRegister(int encoding);\n@@ -214,2 +166,2 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return value(); }\n-  inline VMReg as_VMReg();\n+  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  inline VMReg as_VMReg() const;\n@@ -218,2 +170,2 @@\n-  bool is_valid()       const { return  (0 <= value()        &&  value() < number_of_registers); }\n-  bool is_nonvolatile() const { return  (2 <= (value()&0x7F) && (value()&0x7F) <= 4 );  }\n+  bool is_valid()       const { return (0 <= _encoding && _encoding <  number_of_registers); }\n+  bool is_nonvolatile() const { return (2 <= _encoding && _encoding <= 4 );  }\n@@ -224,36 +176,3 @@\n-\/\/ The (parts of the) condition register(s) of the PPC architecture\n-\/\/ sys\/ioctl.h on AIX defines CR0-CR3, so I name these CCR.\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR0,   (0));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR1,   (1));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR2,   (2));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR3,   (3));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR4,   (4));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR5,   (5));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR6,   (6));\n-CONSTANT_REGISTER_DECLARATION(ConditionRegister, CCR7,   (7));\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-\n-#define CCR0 ((ConditionRegister)(CCR0_ConditionRegisterEnumValue))\n-#define CCR1 ((ConditionRegister)(CCR1_ConditionRegisterEnumValue))\n-#define CCR2 ((ConditionRegister)(CCR2_ConditionRegisterEnumValue))\n-#define CCR3 ((ConditionRegister)(CCR3_ConditionRegisterEnumValue))\n-#define CCR4 ((ConditionRegister)(CCR4_ConditionRegisterEnumValue))\n-#define CCR5 ((ConditionRegister)(CCR5_ConditionRegisterEnumValue))\n-#define CCR6 ((ConditionRegister)(CCR6_ConditionRegisterEnumValue))\n-#define CCR7 ((ConditionRegister)(CCR7_ConditionRegisterEnumValue))\n-\n-#endif \/\/ DONT_USE_REGISTER_DEFINES\n-\n-\/\/ Forward declaration\n-\/\/ Use VectorSRegister as a shortcut.\n-class VectorSRegisterImpl;\n-typedef VectorSRegisterImpl* VectorSRegister;\n-\n-\/\/ Use FloatRegister as shortcut\n-class FloatRegisterImpl;\n-typedef FloatRegisterImpl* FloatRegister;\n-\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  assert(encoding >= -1 && encoding < 32, \"bad float register encoding\");\n-  return (FloatRegister)(intptr_t)encoding;\n+inline constexpr ConditionRegister as_ConditionRegister(int encoding) {\n+  assert(encoding >= 0 && encoding < 8, \"bad condition register encoding\");\n+  return ConditionRegister(encoding);\n@@ -262,0 +181,12 @@\n+constexpr ConditionRegister CCR0 = as_ConditionRegister(0);\n+constexpr ConditionRegister CCR1 = as_ConditionRegister(1);\n+constexpr ConditionRegister CCR2 = as_ConditionRegister(2);\n+constexpr ConditionRegister CCR3 = as_ConditionRegister(3);\n+constexpr ConditionRegister CCR4 = as_ConditionRegister(4);\n+constexpr ConditionRegister CCR5 = as_ConditionRegister(5);\n+constexpr ConditionRegister CCR6 = as_ConditionRegister(6);\n+constexpr ConditionRegister CCR7 = as_ConditionRegister(7);\n+\n+\n+class VectorSRegister;\n+\n@@ -263,1 +194,2 @@\n-class FloatRegisterImpl: public AbstractRegisterImpl {\n+class FloatRegister {\n+  int _encoding;\n@@ -269,0 +201,5 @@\n+  constexpr FloatRegister(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const FloatRegister rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const FloatRegister rhs) const { return _encoding != rhs._encoding; }\n+  const FloatRegister* operator->() const { return this; }\n+\n@@ -270,1 +207,1 @@\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n+  inline constexpr friend FloatRegister as_FloatRegister(int encoding);\n@@ -273,3 +210,3 @@\n-  int           encoding() const { assert(is_valid(), \"invalid register\"); return value(); }\n-  inline VMReg  as_VMReg();\n-  FloatRegister successor() const { return as_FloatRegister(encoding() + 1); }\n+  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  inline VMReg as_VMReg() const;\n+  FloatRegister successor() const { return FloatRegister(encoding() + 1); }\n@@ -278,1 +215,1 @@\n-  bool is_valid() const { return (0 <= value() && value() < number_of_registers); }\n+  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -286,78 +223,3 @@\n-\/\/ The float registers of the PPC architecture\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F0,  ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F1,  ( 1));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F2,  ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F3,  ( 3));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F4,  ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F5,  ( 5));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F6,  ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F7,  ( 7));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F8,  ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F9,  ( 9));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F10, (10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F11, (11));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F12, (12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F13, (13));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F14, (14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F15, (15));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F16, (16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F17, (17));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F18, (18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F19, (19));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F20, (20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F21, (21));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F22, (22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F23, (23));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F24, (24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F25, (25));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F26, (26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F27, (27));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F28, (28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F29, (29));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F30, (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, F31, (31));\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define fnoreg ((FloatRegister)(fnoreg_FloatRegisterEnumValue))\n-#define F0     ((FloatRegister)(    F0_FloatRegisterEnumValue))\n-#define F1     ((FloatRegister)(    F1_FloatRegisterEnumValue))\n-#define F2     ((FloatRegister)(    F2_FloatRegisterEnumValue))\n-#define F3     ((FloatRegister)(    F3_FloatRegisterEnumValue))\n-#define F4     ((FloatRegister)(    F4_FloatRegisterEnumValue))\n-#define F5     ((FloatRegister)(    F5_FloatRegisterEnumValue))\n-#define F6     ((FloatRegister)(    F6_FloatRegisterEnumValue))\n-#define F7     ((FloatRegister)(    F7_FloatRegisterEnumValue))\n-#define F8     ((FloatRegister)(    F8_FloatRegisterEnumValue))\n-#define F9     ((FloatRegister)(    F9_FloatRegisterEnumValue))\n-#define F10    ((FloatRegister)(   F10_FloatRegisterEnumValue))\n-#define F11    ((FloatRegister)(   F11_FloatRegisterEnumValue))\n-#define F12    ((FloatRegister)(   F12_FloatRegisterEnumValue))\n-#define F13    ((FloatRegister)(   F13_FloatRegisterEnumValue))\n-#define F14    ((FloatRegister)(   F14_FloatRegisterEnumValue))\n-#define F15    ((FloatRegister)(   F15_FloatRegisterEnumValue))\n-#define F16    ((FloatRegister)(   F16_FloatRegisterEnumValue))\n-#define F17    ((FloatRegister)(   F17_FloatRegisterEnumValue))\n-#define F18    ((FloatRegister)(   F18_FloatRegisterEnumValue))\n-#define F19    ((FloatRegister)(   F19_FloatRegisterEnumValue))\n-#define F20    ((FloatRegister)(   F20_FloatRegisterEnumValue))\n-#define F21    ((FloatRegister)(   F21_FloatRegisterEnumValue))\n-#define F22    ((FloatRegister)(   F22_FloatRegisterEnumValue))\n-#define F23    ((FloatRegister)(   F23_FloatRegisterEnumValue))\n-#define F24    ((FloatRegister)(   F24_FloatRegisterEnumValue))\n-#define F25    ((FloatRegister)(   F25_FloatRegisterEnumValue))\n-#define F26    ((FloatRegister)(   F26_FloatRegisterEnumValue))\n-#define F27    ((FloatRegister)(   F27_FloatRegisterEnumValue))\n-#define F28    ((FloatRegister)(   F28_FloatRegisterEnumValue))\n-#define F29    ((FloatRegister)(   F29_FloatRegisterEnumValue))\n-#define F30    ((FloatRegister)(   F30_FloatRegisterEnumValue))\n-#define F31    ((FloatRegister)(   F31_FloatRegisterEnumValue))\n-#endif \/\/ DONT_USE_REGISTER_DEFINES\n-\n-\/\/ Use SpecialRegister as shortcut\n-class SpecialRegisterImpl;\n-typedef SpecialRegisterImpl* SpecialRegister;\n-\n-inline SpecialRegister as_SpecialRegister(int encoding) {\n-  return (SpecialRegister)(intptr_t)encoding;\n+inline constexpr FloatRegister as_FloatRegister(int encoding) {\n+  assert(encoding >= -1 && encoding < 32, \"bad float register encoding\");\n+  return FloatRegister(encoding);\n@@ -366,0 +228,37 @@\n+\/\/ The float registers of the PPC architecture\n+constexpr FloatRegister fnoreg = as_FloatRegister(-1);\n+\n+constexpr FloatRegister  F0 = as_FloatRegister( 0);\n+constexpr FloatRegister  F1 = as_FloatRegister( 1);\n+constexpr FloatRegister  F2 = as_FloatRegister( 2);\n+constexpr FloatRegister  F3 = as_FloatRegister( 3);\n+constexpr FloatRegister  F4 = as_FloatRegister( 4);\n+constexpr FloatRegister  F5 = as_FloatRegister( 5);\n+constexpr FloatRegister  F6 = as_FloatRegister( 6);\n+constexpr FloatRegister  F7 = as_FloatRegister( 7);\n+constexpr FloatRegister  F8 = as_FloatRegister( 8);\n+constexpr FloatRegister  F9 = as_FloatRegister( 9);\n+constexpr FloatRegister F10 = as_FloatRegister(10);\n+constexpr FloatRegister F11 = as_FloatRegister(11);\n+constexpr FloatRegister F12 = as_FloatRegister(12);\n+constexpr FloatRegister F13 = as_FloatRegister(13);\n+constexpr FloatRegister F14 = as_FloatRegister(14);\n+constexpr FloatRegister F15 = as_FloatRegister(15);\n+constexpr FloatRegister F16 = as_FloatRegister(16);\n+constexpr FloatRegister F17 = as_FloatRegister(17);\n+constexpr FloatRegister F18 = as_FloatRegister(18);\n+constexpr FloatRegister F19 = as_FloatRegister(19);\n+constexpr FloatRegister F20 = as_FloatRegister(20);\n+constexpr FloatRegister F21 = as_FloatRegister(21);\n+constexpr FloatRegister F22 = as_FloatRegister(22);\n+constexpr FloatRegister F23 = as_FloatRegister(23);\n+constexpr FloatRegister F24 = as_FloatRegister(24);\n+constexpr FloatRegister F25 = as_FloatRegister(25);\n+constexpr FloatRegister F26 = as_FloatRegister(26);\n+constexpr FloatRegister F27 = as_FloatRegister(27);\n+constexpr FloatRegister F28 = as_FloatRegister(28);\n+constexpr FloatRegister F29 = as_FloatRegister(29);\n+constexpr FloatRegister F30 = as_FloatRegister(30);\n+constexpr FloatRegister F31 = as_FloatRegister(31);\n+\n+\n@@ -367,1 +266,2 @@\n-class SpecialRegisterImpl: public AbstractRegisterImpl {\n+class SpecialRegister {\n+  int _encoding;\n@@ -373,0 +273,5 @@\n+  constexpr SpecialRegister(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const SpecialRegister rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const SpecialRegister rhs) const { return _encoding != rhs._encoding; }\n+  const SpecialRegister* operator->() const { return this; }\n+\n@@ -374,1 +279,1 @@\n-  inline friend SpecialRegister as_SpecialRegister(int encoding);\n+  inline constexpr friend SpecialRegister as_SpecialRegister(int encoding);\n@@ -377,2 +282,2 @@\n-  int             encoding()  const { assert(is_valid(), \"invalid register\"); return value(); }\n-  inline VMReg    as_VMReg();\n+  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  inline VMReg as_VMReg() const;\n@@ -381,1 +286,1 @@\n-  bool is_valid()       const { return 0 <= value() && value() < number_of_registers; }\n+  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -386,24 +291,2 @@\n-\/\/ The special registers of the PPC architecture\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_XER,     (0));\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_LR,      (1));\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_CTR,     (2));\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_VRSAVE,  (3));\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_SPEFSCR, (4));\n-CONSTANT_REGISTER_DECLARATION(SpecialRegister, SR_PPR,     (5));\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define SR_XER     ((SpecialRegister)(SR_XER_SpecialRegisterEnumValue))\n-#define SR_LR      ((SpecialRegister)(SR_LR_SpecialRegisterEnumValue))\n-#define SR_CTR     ((SpecialRegister)(SR_CTR_SpecialRegisterEnumValue))\n-#define SR_VRSAVE  ((SpecialRegister)(SR_VRSAVE_SpecialRegisterEnumValue))\n-#define SR_SPEFSCR ((SpecialRegister)(SR_SPEFSCR_SpecialRegisterEnumValue))\n-#define SR_PPR     ((SpecialRegister)(SR_PPR_SpecialRegisterEnumValue))\n-#endif \/\/ DONT_USE_REGISTER_DEFINES\n-\n-\n-\/\/ Use VectorRegister as shortcut\n-class VectorRegisterImpl;\n-typedef VectorRegisterImpl* VectorRegister;\n-\n-inline VectorRegister as_VectorRegister(int encoding) {\n-  return (VectorRegister)(intptr_t)encoding;\n+inline constexpr SpecialRegister as_SpecialRegister(int encoding) {\n+  return SpecialRegister(encoding);\n@@ -412,0 +295,9 @@\n+\/\/ The special registers of the PPC architecture\n+constexpr SpecialRegister SR_XER     = as_SpecialRegister(0);\n+constexpr SpecialRegister SR_LR      = as_SpecialRegister(1);\n+constexpr SpecialRegister SR_CTR     = as_SpecialRegister(2);\n+constexpr SpecialRegister SR_VRSAVE  = as_SpecialRegister(3);\n+constexpr SpecialRegister SR_SPEFSCR = as_SpecialRegister(4);\n+constexpr SpecialRegister SR_PPR     = as_SpecialRegister(5);\n+\n+\n@@ -413,1 +305,2 @@\n-class VectorRegisterImpl: public AbstractRegisterImpl {\n+class VectorRegister {\n+  int _encoding;\n@@ -419,0 +312,5 @@\n+  constexpr VectorRegister(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const VectorRegister rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const VectorRegister rhs) const { return _encoding != rhs._encoding; }\n+  const VectorRegister* operator->() const { return this; }\n+\n@@ -420,1 +318,1 @@\n-  inline friend VectorRegister as_VectorRegister(int encoding);\n+  inline constexpr friend VectorRegister as_VectorRegister(int encoding);\n@@ -423,1 +321,1 @@\n-  int            encoding()  const { assert(is_valid(), \"invalid register\"); return value(); }\n+  int encoding()  const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -426,1 +324,1 @@\n-  bool is_valid()       const { return   0 <=  value()       &&  value() < number_of_registers; }\n+  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -434,0 +332,4 @@\n+inline constexpr VectorRegister as_VectorRegister(int encoding) {\n+  return VectorRegister(encoding);\n+}\n+\n@@ -435,0 +337,34 @@\n+constexpr VectorRegister vnoreg = as_VectorRegister(-1);\n+\n+constexpr VectorRegister  VR0 = as_VectorRegister( 0);\n+constexpr VectorRegister  VR1 = as_VectorRegister( 1);\n+constexpr VectorRegister  VR2 = as_VectorRegister( 2);\n+constexpr VectorRegister  VR3 = as_VectorRegister( 3);\n+constexpr VectorRegister  VR4 = as_VectorRegister( 4);\n+constexpr VectorRegister  VR5 = as_VectorRegister( 5);\n+constexpr VectorRegister  VR6 = as_VectorRegister( 6);\n+constexpr VectorRegister  VR7 = as_VectorRegister( 7);\n+constexpr VectorRegister  VR8 = as_VectorRegister( 8);\n+constexpr VectorRegister  VR9 = as_VectorRegister( 9);\n+constexpr VectorRegister VR10 = as_VectorRegister(10);\n+constexpr VectorRegister VR11 = as_VectorRegister(11);\n+constexpr VectorRegister VR12 = as_VectorRegister(12);\n+constexpr VectorRegister VR13 = as_VectorRegister(13);\n+constexpr VectorRegister VR14 = as_VectorRegister(14);\n+constexpr VectorRegister VR15 = as_VectorRegister(15);\n+constexpr VectorRegister VR16 = as_VectorRegister(16);\n+constexpr VectorRegister VR17 = as_VectorRegister(17);\n+constexpr VectorRegister VR18 = as_VectorRegister(18);\n+constexpr VectorRegister VR19 = as_VectorRegister(19);\n+constexpr VectorRegister VR20 = as_VectorRegister(20);\n+constexpr VectorRegister VR21 = as_VectorRegister(21);\n+constexpr VectorRegister VR22 = as_VectorRegister(22);\n+constexpr VectorRegister VR23 = as_VectorRegister(23);\n+constexpr VectorRegister VR24 = as_VectorRegister(24);\n+constexpr VectorRegister VR25 = as_VectorRegister(25);\n+constexpr VectorRegister VR26 = as_VectorRegister(26);\n+constexpr VectorRegister VR27 = as_VectorRegister(27);\n+constexpr VectorRegister VR28 = as_VectorRegister(28);\n+constexpr VectorRegister VR29 = as_VectorRegister(29);\n+constexpr VectorRegister VR30 = as_VectorRegister(30);\n+constexpr VectorRegister VR31 = as_VectorRegister(31);\n@@ -436,75 +372,0 @@\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, vnoreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR0,  ( 0));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR1,  ( 1));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR2,  ( 2));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR3,  ( 3));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR4,  ( 4));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR5,  ( 5));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR6,  ( 6));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR7,  ( 7));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR8,  ( 8));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR9,  ( 9));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR10, (10));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR11, (11));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR12, (12));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR13, (13));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR14, (14));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR15, (15));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR16, (16));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR17, (17));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR18, (18));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR19, (19));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR20, (20));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR21, (21));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR22, (22));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR23, (23));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR24, (24));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR25, (25));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR26, (26));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR27, (27));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR28, (28));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR29, (29));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR30, (30));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, VR31, (31));\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define vnoreg ((VectorRegister)(vnoreg_VectorRegisterEnumValue))\n-#define VR0    ((VectorRegister)(   VR0_VectorRegisterEnumValue))\n-#define VR1    ((VectorRegister)(   VR1_VectorRegisterEnumValue))\n-#define VR2    ((VectorRegister)(   VR2_VectorRegisterEnumValue))\n-#define VR3    ((VectorRegister)(   VR3_VectorRegisterEnumValue))\n-#define VR4    ((VectorRegister)(   VR4_VectorRegisterEnumValue))\n-#define VR5    ((VectorRegister)(   VR5_VectorRegisterEnumValue))\n-#define VR6    ((VectorRegister)(   VR6_VectorRegisterEnumValue))\n-#define VR7    ((VectorRegister)(   VR7_VectorRegisterEnumValue))\n-#define VR8    ((VectorRegister)(   VR8_VectorRegisterEnumValue))\n-#define VR9    ((VectorRegister)(   VR9_VectorRegisterEnumValue))\n-#define VR10   ((VectorRegister)(  VR10_VectorRegisterEnumValue))\n-#define VR11   ((VectorRegister)(  VR11_VectorRegisterEnumValue))\n-#define VR12   ((VectorRegister)(  VR12_VectorRegisterEnumValue))\n-#define VR13   ((VectorRegister)(  VR13_VectorRegisterEnumValue))\n-#define VR14   ((VectorRegister)(  VR14_VectorRegisterEnumValue))\n-#define VR15   ((VectorRegister)(  VR15_VectorRegisterEnumValue))\n-#define VR16   ((VectorRegister)(  VR16_VectorRegisterEnumValue))\n-#define VR17   ((VectorRegister)(  VR17_VectorRegisterEnumValue))\n-#define VR18   ((VectorRegister)(  VR18_VectorRegisterEnumValue))\n-#define VR19   ((VectorRegister)(  VR19_VectorRegisterEnumValue))\n-#define VR20   ((VectorRegister)(  VR20_VectorRegisterEnumValue))\n-#define VR21   ((VectorRegister)(  VR21_VectorRegisterEnumValue))\n-#define VR22   ((VectorRegister)(  VR22_VectorRegisterEnumValue))\n-#define VR23   ((VectorRegister)(  VR23_VectorRegisterEnumValue))\n-#define VR24   ((VectorRegister)(  VR24_VectorRegisterEnumValue))\n-#define VR25   ((VectorRegister)(  VR25_VectorRegisterEnumValue))\n-#define VR26   ((VectorRegister)(  VR26_VectorRegisterEnumValue))\n-#define VR27   ((VectorRegister)(  VR27_VectorRegisterEnumValue))\n-#define VR28   ((VectorRegister)(  VR28_VectorRegisterEnumValue))\n-#define VR29   ((VectorRegister)(  VR29_VectorRegisterEnumValue))\n-#define VR30   ((VectorRegister)(  VR30_VectorRegisterEnumValue))\n-#define VR31   ((VectorRegister)(  VR31_VectorRegisterEnumValue))\n-#endif \/\/ DONT_USE_REGISTER_DEFINES\n-\n-\n-inline VectorSRegister as_VectorSRegister(int encoding) {\n-  return (VectorSRegister)(intptr_t)encoding;\n-}\n@@ -513,1 +374,2 @@\n-class VectorSRegisterImpl: public AbstractRegisterImpl {\n+class VectorSRegister {\n+  int _encoding;\n@@ -519,0 +381,5 @@\n+  constexpr VectorSRegister(int encoding = -1) : _encoding(encoding) {}\n+  bool operator==(const VectorSRegister rhs) const { return _encoding == rhs._encoding; }\n+  bool operator!=(const VectorSRegister rhs) const { return _encoding != rhs._encoding; }\n+  const VectorSRegister* operator->() const { return this; }\n+\n@@ -520,1 +387,1 @@\n-  inline friend VectorSRegister as_VectorSRegister(int encoding);\n+  inline constexpr friend VectorSRegister as_VectorSRegister(int encoding);\n@@ -523,2 +390,2 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return value(); }\n-  inline VMReg as_VMReg();\n+  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  inline VMReg as_VMReg() const;\n@@ -527,1 +394,1 @@\n-  bool is_valid() const { return 0 <=  value() &&  value() < number_of_registers; }\n+  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -535,1 +402,3 @@\n-\/\/ The Vector-Scalar (VSX) registers of the POWER architecture.\n+inline constexpr VectorSRegister as_VectorSRegister(int encoding) {\n+  return VectorSRegister(encoding);\n+}\n@@ -537,137 +406,67 @@\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, vsnoreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR0,  ( 0));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR1,  ( 1));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR2,  ( 2));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR3,  ( 3));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR4,  ( 4));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR5,  ( 5));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR6,  ( 6));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR7,  ( 7));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR8,  ( 8));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR9,  ( 9));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR10, (10));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR11, (11));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR12, (12));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR13, (13));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR14, (14));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR15, (15));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR16, (16));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR17, (17));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR18, (18));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR19, (19));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR20, (20));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR21, (21));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR22, (22));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR23, (23));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR24, (24));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR25, (25));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR26, (26));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR27, (27));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR28, (28));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR29, (29));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR30, (30));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR31, (31));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR32, (32));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR33, (33));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR34, (34));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR35, (35));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR36, (36));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR37, (37));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR38, (38));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR39, (39));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR40, (40));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR41, (41));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR42, (42));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR43, (43));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR44, (44));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR45, (45));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR46, (46));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR47, (47));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR48, (48));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR49, (49));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR50, (50));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR51, (51));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR52, (52));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR53, (53));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR54, (54));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR55, (55));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR56, (56));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR57, (57));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR58, (58));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR59, (59));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR60, (60));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR61, (61));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR62, (62));\n-CONSTANT_REGISTER_DECLARATION(VectorSRegister, VSR63, (63));\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define vsnoreg ((VectorSRegister)(vsnoreg_VectorSRegisterEnumValue))\n-#define VSR0    ((VectorSRegister)(   VSR0_VectorSRegisterEnumValue))\n-#define VSR1    ((VectorSRegister)(   VSR1_VectorSRegisterEnumValue))\n-#define VSR2    ((VectorSRegister)(   VSR2_VectorSRegisterEnumValue))\n-#define VSR3    ((VectorSRegister)(   VSR3_VectorSRegisterEnumValue))\n-#define VSR4    ((VectorSRegister)(   VSR4_VectorSRegisterEnumValue))\n-#define VSR5    ((VectorSRegister)(   VSR5_VectorSRegisterEnumValue))\n-#define VSR6    ((VectorSRegister)(   VSR6_VectorSRegisterEnumValue))\n-#define VSR7    ((VectorSRegister)(   VSR7_VectorSRegisterEnumValue))\n-#define VSR8    ((VectorSRegister)(   VSR8_VectorSRegisterEnumValue))\n-#define VSR9    ((VectorSRegister)(   VSR9_VectorSRegisterEnumValue))\n-#define VSR10   ((VectorSRegister)(  VSR10_VectorSRegisterEnumValue))\n-#define VSR11   ((VectorSRegister)(  VSR11_VectorSRegisterEnumValue))\n-#define VSR12   ((VectorSRegister)(  VSR12_VectorSRegisterEnumValue))\n-#define VSR13   ((VectorSRegister)(  VSR13_VectorSRegisterEnumValue))\n-#define VSR14   ((VectorSRegister)(  VSR14_VectorSRegisterEnumValue))\n-#define VSR15   ((VectorSRegister)(  VSR15_VectorSRegisterEnumValue))\n-#define VSR16   ((VectorSRegister)(  VSR16_VectorSRegisterEnumValue))\n-#define VSR17   ((VectorSRegister)(  VSR17_VectorSRegisterEnumValue))\n-#define VSR18   ((VectorSRegister)(  VSR18_VectorSRegisterEnumValue))\n-#define VSR19   ((VectorSRegister)(  VSR19_VectorSRegisterEnumValue))\n-#define VSR20   ((VectorSRegister)(  VSR20_VectorSRegisterEnumValue))\n-#define VSR21   ((VectorSRegister)(  VSR21_VectorSRegisterEnumValue))\n-#define VSR22   ((VectorSRegister)(  VSR22_VectorSRegisterEnumValue))\n-#define VSR23   ((VectorSRegister)(  VSR23_VectorSRegisterEnumValue))\n-#define VSR24   ((VectorSRegister)(  VSR24_VectorSRegisterEnumValue))\n-#define VSR25   ((VectorSRegister)(  VSR25_VectorSRegisterEnumValue))\n-#define VSR26   ((VectorSRegister)(  VSR26_VectorSRegisterEnumValue))\n-#define VSR27   ((VectorSRegister)(  VSR27_VectorSRegisterEnumValue))\n-#define VSR28   ((VectorSRegister)(  VSR28_VectorSRegisterEnumValue))\n-#define VSR29   ((VectorSRegister)(  VSR29_VectorSRegisterEnumValue))\n-#define VSR30   ((VectorSRegister)(  VSR30_VectorSRegisterEnumValue))\n-#define VSR31   ((VectorSRegister)(  VSR31_VectorSRegisterEnumValue))\n-#define VSR32   ((VectorSRegister)(  VSR32_VectorSRegisterEnumValue))\n-#define VSR33   ((VectorSRegister)(  VSR33_VectorSRegisterEnumValue))\n-#define VSR34   ((VectorSRegister)(  VSR34_VectorSRegisterEnumValue))\n-#define VSR35   ((VectorSRegister)(  VSR35_VectorSRegisterEnumValue))\n-#define VSR36   ((VectorSRegister)(  VSR36_VectorSRegisterEnumValue))\n-#define VSR37   ((VectorSRegister)(  VSR37_VectorSRegisterEnumValue))\n-#define VSR38   ((VectorSRegister)(  VSR38_VectorSRegisterEnumValue))\n-#define VSR39   ((VectorSRegister)(  VSR39_VectorSRegisterEnumValue))\n-#define VSR40   ((VectorSRegister)(  VSR40_VectorSRegisterEnumValue))\n-#define VSR41   ((VectorSRegister)(  VSR41_VectorSRegisterEnumValue))\n-#define VSR42   ((VectorSRegister)(  VSR42_VectorSRegisterEnumValue))\n-#define VSR43   ((VectorSRegister)(  VSR43_VectorSRegisterEnumValue))\n-#define VSR44   ((VectorSRegister)(  VSR44_VectorSRegisterEnumValue))\n-#define VSR45   ((VectorSRegister)(  VSR45_VectorSRegisterEnumValue))\n-#define VSR46   ((VectorSRegister)(  VSR46_VectorSRegisterEnumValue))\n-#define VSR47   ((VectorSRegister)(  VSR47_VectorSRegisterEnumValue))\n-#define VSR48   ((VectorSRegister)(  VSR48_VectorSRegisterEnumValue))\n-#define VSR49   ((VectorSRegister)(  VSR49_VectorSRegisterEnumValue))\n-#define VSR50   ((VectorSRegister)(  VSR50_VectorSRegisterEnumValue))\n-#define VSR51   ((VectorSRegister)(  VSR51_VectorSRegisterEnumValue))\n-#define VSR52   ((VectorSRegister)(  VSR52_VectorSRegisterEnumValue))\n-#define VSR53   ((VectorSRegister)(  VSR53_VectorSRegisterEnumValue))\n-#define VSR54   ((VectorSRegister)(  VSR54_VectorSRegisterEnumValue))\n-#define VSR55   ((VectorSRegister)(  VSR55_VectorSRegisterEnumValue))\n-#define VSR56   ((VectorSRegister)(  VSR56_VectorSRegisterEnumValue))\n-#define VSR57   ((VectorSRegister)(  VSR57_VectorSRegisterEnumValue))\n-#define VSR58   ((VectorSRegister)(  VSR58_VectorSRegisterEnumValue))\n-#define VSR59   ((VectorSRegister)(  VSR59_VectorSRegisterEnumValue))\n-#define VSR60   ((VectorSRegister)(  VSR60_VectorSRegisterEnumValue))\n-#define VSR61   ((VectorSRegister)(  VSR61_VectorSRegisterEnumValue))\n-#define VSR62   ((VectorSRegister)(  VSR62_VectorSRegisterEnumValue))\n-#define VSR63   ((VectorSRegister)(  VSR63_VectorSRegisterEnumValue))\n-#endif \/\/ DONT_USE_REGISTER_DEFINES\n-\n-\/\/ Maximum number of incoming arguments that can be passed in i registers.\n-const int PPC_ARGS_IN_REGS_NUM = 8;\n+\/\/ The Vector-Scalar (VSX) registers of the POWER architecture.\n+constexpr VectorSRegister vsnoreg = as_VectorSRegister(-1);\n+\n+constexpr VectorSRegister  VSR0 = as_VectorSRegister( 0);\n+constexpr VectorSRegister  VSR1 = as_VectorSRegister( 1);\n+constexpr VectorSRegister  VSR2 = as_VectorSRegister( 2);\n+constexpr VectorSRegister  VSR3 = as_VectorSRegister( 3);\n+constexpr VectorSRegister  VSR4 = as_VectorSRegister( 4);\n+constexpr VectorSRegister  VSR5 = as_VectorSRegister( 5);\n+constexpr VectorSRegister  VSR6 = as_VectorSRegister( 6);\n+constexpr VectorSRegister  VSR7 = as_VectorSRegister( 7);\n+constexpr VectorSRegister  VSR8 = as_VectorSRegister( 8);\n+constexpr VectorSRegister  VSR9 = as_VectorSRegister( 9);\n+constexpr VectorSRegister VSR10 = as_VectorSRegister(10);\n+constexpr VectorSRegister VSR11 = as_VectorSRegister(11);\n+constexpr VectorSRegister VSR12 = as_VectorSRegister(12);\n+constexpr VectorSRegister VSR13 = as_VectorSRegister(13);\n+constexpr VectorSRegister VSR14 = as_VectorSRegister(14);\n+constexpr VectorSRegister VSR15 = as_VectorSRegister(15);\n+constexpr VectorSRegister VSR16 = as_VectorSRegister(16);\n+constexpr VectorSRegister VSR17 = as_VectorSRegister(17);\n+constexpr VectorSRegister VSR18 = as_VectorSRegister(18);\n+constexpr VectorSRegister VSR19 = as_VectorSRegister(19);\n+constexpr VectorSRegister VSR20 = as_VectorSRegister(20);\n+constexpr VectorSRegister VSR21 = as_VectorSRegister(21);\n+constexpr VectorSRegister VSR22 = as_VectorSRegister(22);\n+constexpr VectorSRegister VSR23 = as_VectorSRegister(23);\n+constexpr VectorSRegister VSR24 = as_VectorSRegister(24);\n+constexpr VectorSRegister VSR25 = as_VectorSRegister(25);\n+constexpr VectorSRegister VSR26 = as_VectorSRegister(26);\n+constexpr VectorSRegister VSR27 = as_VectorSRegister(27);\n+constexpr VectorSRegister VSR28 = as_VectorSRegister(28);\n+constexpr VectorSRegister VSR29 = as_VectorSRegister(29);\n+constexpr VectorSRegister VSR30 = as_VectorSRegister(30);\n+constexpr VectorSRegister VSR31 = as_VectorSRegister(31);\n+constexpr VectorSRegister VSR32 = as_VectorSRegister(32);\n+constexpr VectorSRegister VSR33 = as_VectorSRegister(33);\n+constexpr VectorSRegister VSR34 = as_VectorSRegister(34);\n+constexpr VectorSRegister VSR35 = as_VectorSRegister(35);\n+constexpr VectorSRegister VSR36 = as_VectorSRegister(36);\n+constexpr VectorSRegister VSR37 = as_VectorSRegister(37);\n+constexpr VectorSRegister VSR38 = as_VectorSRegister(38);\n+constexpr VectorSRegister VSR39 = as_VectorSRegister(39);\n+constexpr VectorSRegister VSR40 = as_VectorSRegister(40);\n+constexpr VectorSRegister VSR41 = as_VectorSRegister(41);\n+constexpr VectorSRegister VSR42 = as_VectorSRegister(42);\n+constexpr VectorSRegister VSR43 = as_VectorSRegister(43);\n+constexpr VectorSRegister VSR44 = as_VectorSRegister(44);\n+constexpr VectorSRegister VSR45 = as_VectorSRegister(45);\n+constexpr VectorSRegister VSR46 = as_VectorSRegister(46);\n+constexpr VectorSRegister VSR47 = as_VectorSRegister(47);\n+constexpr VectorSRegister VSR48 = as_VectorSRegister(48);\n+constexpr VectorSRegister VSR49 = as_VectorSRegister(49);\n+constexpr VectorSRegister VSR50 = as_VectorSRegister(50);\n+constexpr VectorSRegister VSR51 = as_VectorSRegister(51);\n+constexpr VectorSRegister VSR52 = as_VectorSRegister(52);\n+constexpr VectorSRegister VSR53 = as_VectorSRegister(53);\n+constexpr VectorSRegister VSR54 = as_VectorSRegister(54);\n+constexpr VectorSRegister VSR55 = as_VectorSRegister(55);\n+constexpr VectorSRegister VSR56 = as_VectorSRegister(56);\n+constexpr VectorSRegister VSR57 = as_VectorSRegister(57);\n+constexpr VectorSRegister VSR58 = as_VectorSRegister(58);\n+constexpr VectorSRegister VSR59 = as_VectorSRegister(59);\n+constexpr VectorSRegister VSR60 = as_VectorSRegister(60);\n+constexpr VectorSRegister VSR61 = as_VectorSRegister(61);\n+constexpr VectorSRegister VSR62 = as_VectorSRegister(62);\n+constexpr VectorSRegister VSR63 = as_VectorSRegister(63);\n@@ -681,5 +480,5 @@\n-    max_gpr = RegisterImpl::number_of_registers * 2,\n-    max_fpr = max_gpr + FloatRegisterImpl::number_of_registers * 2,\n-    max_vsr = max_fpr + VectorSRegisterImpl::number_of_registers,\n-    max_cnd = max_vsr + ConditionRegisterImpl::number_of_registers,\n-    max_spr = max_cnd + SpecialRegisterImpl::number_of_registers,\n+    max_gpr = Register::number_of_registers * 2,\n+    max_fpr = max_gpr + FloatRegister::number_of_registers * 2,\n+    max_vsr = max_fpr + VectorSRegister::number_of_registers,\n+    max_cnd = max_vsr + ConditionRegister::number_of_registers,\n+    max_spr = max_cnd + SpecialRegister::number_of_registers,\n@@ -694,57 +493,27 @@\n-REGISTER_DECLARATION(Register,      R0_SCRATCH, R0);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R1_SP,      R1);  \/\/ non-volatile\n-REGISTER_DECLARATION(Register,      R2_TOC,     R2);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R3_RET,     R3);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R3_ARG1,    R3);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R4_ARG2,    R4);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R5_ARG3,    R5);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R6_ARG4,    R6);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R7_ARG5,    R7);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R8_ARG6,    R8);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R9_ARG7,    R9);  \/\/ volatile\n-REGISTER_DECLARATION(Register,      R10_ARG8,   R10); \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F0_SCRATCH, F0);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F1_RET,     F1);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F1_ARG1,    F1);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F2_ARG2,    F2);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F3_ARG3,    F3);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F4_ARG4,    F4);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F5_ARG5,    F5);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F6_ARG6,    F6);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F7_ARG7,    F7);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F8_ARG8,    F8);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F9_ARG9,    F9);  \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F10_ARG10,  F10); \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F11_ARG11,  F11); \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F12_ARG12,  F12); \/\/ volatile\n-REGISTER_DECLARATION(FloatRegister, F13_ARG13,  F13); \/\/ volatile\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define R0_SCRATCH         AS_REGISTER(Register, R0)\n-#define R1_SP              AS_REGISTER(Register, R1)\n-#define R2_TOC             AS_REGISTER(Register, R2)\n-#define R3_RET             AS_REGISTER(Register, R3)\n-#define R3_ARG1            AS_REGISTER(Register, R3)\n-#define R4_ARG2            AS_REGISTER(Register, R4)\n-#define R5_ARG3            AS_REGISTER(Register, R5)\n-#define R6_ARG4            AS_REGISTER(Register, R6)\n-#define R7_ARG5            AS_REGISTER(Register, R7)\n-#define R8_ARG6            AS_REGISTER(Register, R8)\n-#define R9_ARG7            AS_REGISTER(Register, R9)\n-#define R10_ARG8           AS_REGISTER(Register, R10)\n-#define F0_SCRATCH         AS_REGISTER(FloatRegister, F0)\n-#define F1_RET             AS_REGISTER(FloatRegister, F1)\n-#define F1_ARG1            AS_REGISTER(FloatRegister, F1)\n-#define F2_ARG2            AS_REGISTER(FloatRegister, F2)\n-#define F3_ARG3            AS_REGISTER(FloatRegister, F3)\n-#define F4_ARG4            AS_REGISTER(FloatRegister, F4)\n-#define F5_ARG5            AS_REGISTER(FloatRegister, F5)\n-#define F6_ARG6            AS_REGISTER(FloatRegister, F6)\n-#define F7_ARG7            AS_REGISTER(FloatRegister, F7)\n-#define F8_ARG8            AS_REGISTER(FloatRegister, F8)\n-#define F9_ARG9            AS_REGISTER(FloatRegister, F9)\n-#define F10_ARG10          AS_REGISTER(FloatRegister, F10)\n-#define F11_ARG11          AS_REGISTER(FloatRegister, F11)\n-#define F12_ARG12          AS_REGISTER(FloatRegister, F12)\n-#define F13_ARG13          AS_REGISTER(FloatRegister, F13)\n-#endif\n+constexpr Register R0_SCRATCH = R0;  \/\/ volatile\n+constexpr Register R1_SP      = R1;  \/\/ non-volatile\n+constexpr Register R2_TOC     = R2;  \/\/ volatile\n+constexpr Register R3_RET     = R3;  \/\/ volatile\n+constexpr Register R3_ARG1    = R3;  \/\/ volatile\n+constexpr Register R4_ARG2    = R4;  \/\/ volatile\n+constexpr Register R5_ARG3    = R5;  \/\/ volatile\n+constexpr Register R6_ARG4    = R6;  \/\/ volatile\n+constexpr Register R7_ARG5    = R7;  \/\/ volatile\n+constexpr Register R8_ARG6    = R8;  \/\/ volatile\n+constexpr Register R9_ARG7    = R9;  \/\/ volatile\n+constexpr Register R10_ARG8   = R10; \/\/ volatile\n+constexpr FloatRegister F0_SCRATCH = F0;  \/\/ volatile\n+constexpr FloatRegister F1_RET     = F1;  \/\/ volatile\n+constexpr FloatRegister F1_ARG1    = F1;  \/\/ volatile\n+constexpr FloatRegister F2_ARG2    = F2;  \/\/ volatile\n+constexpr FloatRegister F3_ARG3    = F3;  \/\/ volatile\n+constexpr FloatRegister F4_ARG4    = F4;  \/\/ volatile\n+constexpr FloatRegister F5_ARG5    = F5;  \/\/ volatile\n+constexpr FloatRegister F6_ARG6    = F6;  \/\/ volatile\n+constexpr FloatRegister F7_ARG7    = F7;  \/\/ volatile\n+constexpr FloatRegister F8_ARG8    = F8;  \/\/ volatile\n+constexpr FloatRegister F9_ARG9    = F9;  \/\/ volatile\n+constexpr FloatRegister F10_ARG10  = F10; \/\/ volatile\n+constexpr FloatRegister F11_ARG11  = F11; \/\/ volatile\n+constexpr FloatRegister F12_ARG12  = F12; \/\/ volatile\n+constexpr FloatRegister F13_ARG13  = F13; \/\/ volatile\n@@ -754,18 +523,7 @@\n-REGISTER_DECLARATION(Register, R14_bcp,        R14);\n-REGISTER_DECLARATION(Register, R15_esp,        R15);\n-REGISTER_DECLARATION(FloatRegister, F15_ftos,  F15);\n-REGISTER_DECLARATION(Register, R16_thread,     R16);      \/\/ address of current thread\n-REGISTER_DECLARATION(Register, R17_tos,        R17);      \/\/ address of Java tos (prepushed).\n-REGISTER_DECLARATION(Register, R18_locals,     R18);      \/\/ address of first param slot (receiver).\n-REGISTER_DECLARATION(Register, R19_method,     R19);      \/\/ address of current method\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define R14_bcp           AS_REGISTER(Register, R14)\n-#define R15_esp           AS_REGISTER(Register, R15)\n-#define F15_ftos          AS_REGISTER(FloatRegister, F15)\n-#define R16_thread        AS_REGISTER(Register, R16)\n-#define R17_tos           AS_REGISTER(Register, R17)\n-#define R18_locals        AS_REGISTER(Register, R18)\n-#define R19_method        AS_REGISTER(Register, R19)\n-#define R21_sender_SP     AS_REGISTER(Register, R21)\n-#define R23_method_handle AS_REGISTER(Register, R23)\n-#endif\n+constexpr Register R14_bcp       = R14;\n+constexpr Register R15_esp       = R15;\n+constexpr FloatRegister F15_ftos = F15;\n+constexpr Register R16_thread    = R16;      \/\/ address of current thread\n+constexpr Register R17_tos       = R17;      \/\/ address of Java tos (prepushed).\n+constexpr Register R18_locals    = R18;      \/\/ address of first param slot (receiver).\n+constexpr Register R19_method    = R19;      \/\/ address of current method\n@@ -776,40 +534,19 @@\n-REGISTER_DECLARATION(Register, R21_tmp1, R21);\n-REGISTER_DECLARATION(Register, R22_tmp2, R22);\n-REGISTER_DECLARATION(Register, R23_tmp3, R23);\n-REGISTER_DECLARATION(Register, R24_tmp4, R24);\n-REGISTER_DECLARATION(Register, R25_tmp5, R25);\n-REGISTER_DECLARATION(Register, R26_tmp6, R26);\n-REGISTER_DECLARATION(Register, R27_tmp7, R27);\n-REGISTER_DECLARATION(Register, R28_tmp8, R28);\n-REGISTER_DECLARATION(Register, R29_tmp9, R29);\n-REGISTER_DECLARATION(Register, R24_dispatch_addr,     R24);\n-REGISTER_DECLARATION(Register, R25_templateTableBase, R25);\n-REGISTER_DECLARATION(Register, R26_monitor,           R26);\n-REGISTER_DECLARATION(Register, R27_constPoolCache,    R27);\n-REGISTER_DECLARATION(Register, R28_mdx,               R28);\n-\n-REGISTER_DECLARATION(Register, R19_inline_cache_reg, R19);\n-REGISTER_DECLARATION(Register, R29_TOC, R29);\n-\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define R21_tmp1         AS_REGISTER(Register, R21)\n-#define R22_tmp2         AS_REGISTER(Register, R22)\n-#define R23_tmp3         AS_REGISTER(Register, R23)\n-#define R24_tmp4         AS_REGISTER(Register, R24)\n-#define R25_tmp5         AS_REGISTER(Register, R25)\n-#define R26_tmp6         AS_REGISTER(Register, R26)\n-#define R27_tmp7         AS_REGISTER(Register, R27)\n-#define R28_tmp8         AS_REGISTER(Register, R28)\n-#define R29_tmp9         AS_REGISTER(Register, R29)\n-\/\/    Lmonitors  : monitor pointer\n-\/\/    LcpoolCache: constant pool cache\n-\/\/    mdx: method data index\n-#define R24_dispatch_addr     AS_REGISTER(Register, R24)\n-#define R25_templateTableBase AS_REGISTER(Register, R25)\n-#define R26_monitor           AS_REGISTER(Register, R26)\n-#define R27_constPoolCache    AS_REGISTER(Register, R27)\n-#define R28_mdx               AS_REGISTER(Register, R28)\n-\n-#define R19_inline_cache_reg AS_REGISTER(Register, R19)\n-#define R29_TOC AS_REGISTER(Register, R29)\n-#endif\n+constexpr Register R21_tmp1 = R21;\n+constexpr Register R22_tmp2 = R22;\n+constexpr Register R23_tmp3 = R23;\n+constexpr Register R24_tmp4 = R24;\n+constexpr Register R25_tmp5 = R25;\n+constexpr Register R26_tmp6 = R26;\n+constexpr Register R27_tmp7 = R27;\n+constexpr Register R28_tmp8 = R28;\n+constexpr Register R29_tmp9 = R29;\n+constexpr Register R24_dispatch_addr     = R24;\n+constexpr Register R25_templateTableBase = R25;\n+constexpr Register R26_monitor           = R26;\n+constexpr Register R27_constPoolCache    = R27;\n+constexpr Register R28_mdx               = R28;\n+\n+constexpr Register R19_inline_cache_reg = R19;\n+constexpr Register R21_sender_SP = R21;\n+constexpr Register R23_method_handle = R23;\n+constexpr Register R29_TOC = R29;\n@@ -818,6 +555,2 @@\n-REGISTER_DECLARATION(Register, R11_scratch1, R11);\n-REGISTER_DECLARATION(Register, R12_scratch2, R12);\n-#ifndef DONT_USE_REGISTER_DEFINES\n-#define R11_scratch1   AS_REGISTER(Register, R11)\n-#define R12_scratch2   AS_REGISTER(Register, R12)\n-#endif\n+constexpr Register R11_scratch1 = R11;\n+constexpr Register R12_scratch2 = R12;\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.hpp","additions":343,"deletions":610,"binary":false,"changes":953,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -325,1 +325,1 @@\n-        if (reg_num == SR_CTR_SpecialRegisterEnumValue) {\n+        if (reg_num == SR_CTR.encoding()) {\n@@ -404,1 +404,1 @@\n-        if (reg_num == SR_CTR_SpecialRegisterEnumValue) {\n+        if (reg_num == SR_CTR.encoding()) {\n@@ -584,1 +584,1 @@\n-\/\/ up to RegisterImpl::number_of_registers) are the 64-bit\n+\/\/ up to Register::number_of_registers) are the 64-bit\n@@ -2018,3 +2018,3 @@\n-  bool reg_destroyed[RegisterImpl::number_of_registers];\n-  bool freg_destroyed[FloatRegisterImpl::number_of_registers];\n-  for (int r = 0 ; r < RegisterImpl::number_of_registers ; r++) {\n+  bool reg_destroyed[Register::number_of_registers];\n+  bool freg_destroyed[FloatRegister::number_of_registers];\n+  for (int r = 0 ; r < Register::number_of_registers ; r++) {\n@@ -2023,1 +2023,1 @@\n-  for (int f = 0 ; f < FloatRegisterImpl::number_of_registers ; f++) {\n+  for (int f = 0 ; f < FloatRegister::number_of_registers ; f++) {\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2136,1 +2136,1 @@\n-    __ check_klass_subtype_slow_path(sub_klass, super_klass, temp, R0, &L_success, NULL);\n+    __ check_klass_subtype_slow_path(sub_klass, super_klass, temp, R0, &L_success);\n@@ -3540,1 +3540,1 @@\n-    __ add(R3_ARG1, _abi0(lr), R1_SP);\n+    __ addi(R3_ARG1, R1_SP, _abi0(lr));\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2015, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2015, 2022 SAP SE. All rights reserved.\n@@ -1013,1 +1013,1 @@\n-    __ add(R14_bcp, in_bytes(ConstMethod::codes_offset()), Rconst_method);\n+    __ addi(R14_bcp, Rconst_method, in_bytes(ConstMethod::codes_offset()));\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2013, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2013, 2022 SAP SE. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    if (reg->encoding() < RegisterImpl::number_of_registers-1)\n+    if (reg->encoding() < Register::number_of_registers-1)\n@@ -44,1 +44,1 @@\n-    if (reg->encoding() < FloatRegisterImpl::number_of_registers-1)\n+    if (reg->encoding() < FloatRegister::number_of_registers-1)\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -29,2 +29,5 @@\n-inline VMReg RegisterImpl::as_VMReg() {\n-  if (this == noreg) return VMRegImpl::Bad();\n+#include \"code\/vmreg.hpp\"\n+#include \"register_ppc.hpp\"\n+\n+inline VMReg Register::as_VMReg() const {\n+  if (*this == noreg) return VMRegImpl::Bad();\n@@ -35,1 +38,1 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() {\n+inline VMReg FloatRegister::as_VMReg() const {\n@@ -40,1 +43,1 @@\n-inline VMReg VectorSRegisterImpl::as_VMReg() {\n+inline VMReg VectorSRegister::as_VMReg() const {\n@@ -44,1 +47,1 @@\n-inline VMReg ConditionRegisterImpl::as_VMReg() {\n+inline VMReg ConditionRegister::as_VMReg() const {\n@@ -48,1 +51,1 @@\n-inline VMReg SpecialRegisterImpl::as_VMReg() {\n+inline VMReg SpecialRegister::as_VMReg() const {\n@@ -52,1 +55,0 @@\n-\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.inline.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2560,1 +2560,1 @@\n-  declare_constant(RegisterImpl::number_of_registers)                     \\\n+  NOT_PPC64( declare_constant(RegisterImpl::number_of_registers) )        \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}