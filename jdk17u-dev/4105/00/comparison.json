{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Arrays;\n@@ -45,0 +46,1 @@\n+import java.util.HashSet;\n@@ -57,0 +59,1 @@\n+import static java.util.stream.Collectors.toSet;\n@@ -63,1 +66,1 @@\n-final public class TKit {\n+public final class TKit {\n@@ -84,1 +87,1 @@\n-    public final static String ICON_SUFFIX = Functional.identity(() -> {\n+    public static final String ICON_SUFFIX = Functional.identity(() -> {\n@@ -744,0 +747,80 @@\n+    public static DirectoryContentVerifier assertDirectoryContent(Path dir) {\n+        return new DirectoryContentVerifier(dir);\n+    }\n+    public static final class DirectoryContentVerifier {\n+        public DirectoryContentVerifier(Path baseDir) {\n+            this(baseDir, ThrowingSupplier.toSupplier(() -> {\n+                try (var files = Files.list(baseDir)) {\n+                    return files.map(Path::getFileName).collect(toSet());\n+                }\n+            }).get());\n+        }\n+        public void match(Path ... expected) {\n+            DirectoryContentVerifier.this.match(Set.of(expected));\n+        }\n+        public void match(Set<Path> expected) {\n+            currentTest.notifyAssert();\n+            var comm = Comm.compare(content, expected);\n+            if (!comm.unique1.isEmpty() && !comm.unique2.isEmpty()) {\n+                error(String.format(\n+                        \"assertDirectoryContentEquals(%s): Some expected %s. Unexpected %s. Missing %s\",\n+                        baseDir, format(comm.common), format(comm.unique1), format(comm.unique2)));\n+            } else if (!comm.unique1.isEmpty()) {\n+                error(String.format(\n+                        \"assertDirectoryContentEquals%s: Expected %s. Unexpected %s\",\n+                        baseDir, format(comm.common), format(comm.unique1)));\n+            } else if (!comm.unique2.isEmpty()) {\n+                error(String.format(\n+                        \"assertDirectoryContentEquals(%s): Some expected %s. Missing %s\",\n+                        baseDir, format(comm.common), format(comm.unique2)));\n+            } else {\n+                traceAssert(String.format(\n+                        \"assertDirectoryContentEquals(%s): Expected %s\",\n+                        baseDir, format(expected)));\n+            }\n+        }\n+        public void contains(Path ... expected) {\n+            contains(Set.of(expected));\n+        }\n+        public void contains(Set<Path> expected) {\n+            currentTest.notifyAssert();\n+            var comm = Comm.compare(content, expected);\n+            if (!comm.unique2.isEmpty()) {\n+                error(String.format(\n+                        \"assertDirectoryContentContains(%s): Some expected %s. Missing %s\",\n+                        baseDir, format(comm.common), format(comm.unique2)));\n+            } else {\n+                traceAssert(String.format(\n+                        \"assertDirectoryContentContains(%s): Expected %s\",\n+                        baseDir, format(expected)));\n+            }\n+        }\n+        public DirectoryContentVerifier removeAll(Path ... paths) {\n+            Set<Path> newContent = new HashSet<>(content);\n+            newContent.removeAll(List.of(paths));\n+            return new DirectoryContentVerifier(baseDir, newContent);\n+        }\n+        private DirectoryContentVerifier(Path baseDir, Set<Path> contents) {\n+            this.baseDir = baseDir;\n+            this.content = contents;\n+        }\n+        private static record Comm(Set<Path> common, Set<Path> unique1, Set<Path> unique2) {\n+            static Comm compare(Set<Path> a, Set<Path> b) {\n+                Set<Path> common = new HashSet<>(a);\n+                common.retainAll(b);\n+                Set<Path> unique1 = new HashSet<>(a);\n+                unique1.removeAll(common);\n+                Set<Path> unique2 = new HashSet<>(b);\n+                unique2.removeAll(common);\n+                return new Comm(common, unique1, unique2);\n+            }\n+        }\n+        private static String format(Set<Path> paths) {\n+            return Arrays.toString(\n+                    paths.stream().sorted().map(Path::toString).toArray(\n+                            String[]::new));\n+        }\n+        private final Path baseDir;\n+        private final Set<Path> content;\n+    }\n+\n@@ -793,1 +876,1 @@\n-    public final static class TextStreamVerifier {\n+    public static final class TextStreamVerifier {\n@@ -856,1 +939,1 @@\n-        final private String value;\n+        private final String value;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":87,"deletions":4,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -64,16 +64,0 @@\n-    \/\/ Tests have problems on windows where path in the temp dir are too long\n-    \/\/ for the wix tools.  We can't use a tempDir outside the TKit's WorkDir, so\n-    \/\/ we minimize both the tempRoot directory name (above) and the tempDir name\n-    \/\/ (below) to the extension part (which is necessary to differenciate between\n-    \/\/ the multiple PackageTypes that will be run for one JPackageCommand).\n-    \/\/ It might be beter if the whole work dir name was shortened from:\n-    \/\/ jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java.\n-    public static Path getTempDirectory(JPackageCommand cmd, Path tempRoot) {\n-        String ext = cmd.outputBundle().getFileName().toString();\n-        int i = ext.lastIndexOf(\".\");\n-        if (i > 0 && i < (ext.length() - 1)) {\n-            ext = ext.substring(i+1);\n-        }\n-        return tempRoot.resolve(ext);\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"","filename":"test\/jdk\/tools\/jpackage\/linux\/UsrTreeTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/tools\/jpackage\/linux\/jdk\/jpackage\/tests\/UsrTreeTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -49,1 +48,1 @@\n- *  --jpt-run=jdk.jpackage.tests.AppVersionTest\n+ *  --jpt-run=AppVersionTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppVersionTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/AppVersionTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -45,2 +44,0 @@\n-import static jdk.jpackage.test.WindowsHelper.getTempDirectory;\n-\n@@ -54,1 +51,1 @@\n- *  --jpt-run=jdk.jpackage.tests.BasicTest\n+ *  --jpt-run=BasicTest\n@@ -288,1 +285,1 @@\n-            Path tempDir = getTempDirectory(cmd, tempRoot);\n+            Path tempDir = tempRoot.resolve(cmd.packageType().name());\n@@ -305,6 +302,2 @@\n-                Path tempDir = getTempDirectory(cmd, tempRoot);\n-                String[] tempDirContents = tempDir.toFile().list();\n-                TKit.assertStringListEquals(List.of(\"foo.txt\"), List.of(\n-                        tempDirContents), String.format(\n-                                \"Check the contents of the supplied temporary directory [%s]\",\n-                                tempDir));\n+                Path tempDir = Path.of(cmd.getArgumentValue(\"--temp\"));\n+                TKit.assertDirectoryContent(tempDir).match(Path.of(\"foo.txt\"));\n@@ -312,1 +305,1 @@\n-                        Files.readAllLines(tempDir.resolve(tempDirContents[0])),\n+                        Files.readAllLines(tempDir.resolve(\"foo.txt\")),\n@@ -318,1 +311,1 @@\n-                Path tempDir = getTempDirectory(cmd, tempRoot);\n+                Path tempDir = Path.of(cmd.getArgumentValue(\"--temp\"));\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":6,"deletions":13,"binary":false,"changes":19,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/BasicTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -49,1 +48,1 @@\n- *  --jpt-run=jdk.jpackage.tests.CookedRuntimeTest\n+ *  --jpt-run=CookedRuntimeTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/CookedRuntimeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/CookedRuntimeTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -40,1 +39,1 @@\n- *  --jpt-run=jdk.jpackage.tests.DotInNameTest\n+ *  --jpt-run=DotInNameTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/DotInNameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/DotInNameTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -40,1 +39,1 @@\n- *  --jpt-run=jdk.jpackage.tests.ErrorTest\n+ *  --jpt-run=ErrorTest\n@@ -51,1 +50,1 @@\n- *  --jpt-run=jdk.jpackage.tests.ErrorTest\n+ *  --jpt-run=ErrorTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/ErrorTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -40,1 +39,1 @@\n- *  --jpt-run=jdk.jpackage.tests.JLinkOptionsTest\n+ *  --jpt-run=JLinkOptionsTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/JLinkOptionsTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -42,1 +41,1 @@\n- *  --jpt-run=jdk.jpackage.tests.JavaOptionsEqualsTest\n+ *  --jpt-run=JavaOptionsEqualsTest\n@@ -53,1 +52,1 @@\n- *  --jpt-run=jdk.jpackage.tests.JavaOptionsEqualsTest\n+ *  --jpt-run=JavaOptionsEqualsTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsEqualsTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/JavaOptionsEqualsTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -42,1 +41,1 @@\n- *  --jpt-run=jdk.jpackage.tests.JavaOptionsTest\n+ *  --jpt-run=JavaOptionsTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/JavaOptionsTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -48,1 +47,1 @@\n-import static jdk.jpackage.tests.MainClassTest.Script.MainClassType.*;\n+\n@@ -58,1 +57,1 @@\n- *  --jpt-run=jdk.jpackage.tests.MainClassTest\n+ *  --jpt-run=MainClassTest\n@@ -84,1 +83,1 @@\n-            appDesc.setWithMainClass(v != NotSet);\n+            appDesc.setWithMainClass(v != MainClassType.NotSet);\n@@ -174,1 +173,2 @@\n-        final var withMainClass = Set.of(SetWrong, SetRight);\n+        final var withMainClass = Set.of(Script.MainClassType.SetWrong,\n+                Script.MainClassType.SetRight);\n@@ -207,1 +207,1 @@\n-        if (script.jarMainClass == SetWrong) {\n+        if (script.jarMainClass == Script.MainClassType.SetWrong) {\n@@ -226,1 +226,1 @@\n-        appShouldSucceed |= (script.mainClass == SetRight);\n+        appShouldSucceed |= (script.mainClass == Script.MainClassType.SetRight);\n@@ -230,1 +230,1 @@\n-        appShouldSucceed |= (script.mainClass == NotSet && script.jarMainClass == SetRight);\n+        appShouldSucceed |= (script.mainClass == Script.MainClassType.NotSet && script.jarMainClass == Script.MainClassType.SetRight);\n","filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/MainClassTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -51,1 +50,1 @@\n- *  --jpt-run=jdk.jpackage.tests.ModulePathTest\n+ *  --jpt-run=ModulePathTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/ModulePathTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -43,1 +42,1 @@\n- *  --jpt-run=jdk.jpackage.tests.ModulePathTest2\n+ *  --jpt-run=ModulePathTest2\n","filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest2.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/ModulePathTest2.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -56,1 +55,1 @@\n- *  --jpt-run=jdk.jpackage.tests.ModulePathTest3\n+ *  --jpt-run=ModulePathTest3\n","filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest3.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/ModulePathTest3.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -40,1 +39,1 @@\n- *  --jpt-run=jdk.jpackage.tests.MultipleJarAppTest\n+ *  --jpt-run=MultipleJarAppTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultipleJarAppTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/MultipleJarAppTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -50,1 +49,1 @@\n- *  --jpt-run=jdk.jpackage.tests.NoMPathRuntimeTest\n+ *  --jpt-run=NoMPathRuntimeTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/NoMPathRuntimeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/NoMPathRuntimeTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -40,1 +39,1 @@\n- *  --jpt-run=jdk.jpackage.tests.NonExistentTest\n+ *  --jpt-run=NonExistentTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/NonExistentTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/NonExistentTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -41,1 +40,1 @@\n- *  --jpt-run=jdk.jpackage.tests.UnicodeArgsTest\n+ *  --jpt-run=UnicodeArgsTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/UnicodeArgsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/UnicodeArgsTest.java","status":"renamed"},{"patch":"@@ -24,1 +24,0 @@\n-package jdk.jpackage.tests;\n@@ -64,1 +63,1 @@\n- *  --jpt-run=jdk.jpackage.tests.VendorTest\n+ *  --jpt-run=VendorTest\n@@ -77,1 +76,1 @@\n- *  --jpt-run=jdk.jpackage.tests.VendorTest\n+ *  --jpt-run=VendorTest\n","filename":"test\/jdk\/tools\/jpackage\/share\/VendorTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/VendorTest.java","status":"renamed"},{"patch":"@@ -25,0 +25,1 @@\n+import java.nio.file.Files;\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinL10nTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}