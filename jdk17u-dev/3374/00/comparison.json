{"files":[{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @bug 4075194\n+ * @summary 4075194, Choice may not be displayed at the location requested\n+ * @key headful\n+ *\/\n+\n+public class ChoicePosTest {\n+\n+    private static Robot robot;\n+    private static Frame frame;\n+    private static final int GAP = 10;\n+    private static volatile Choice c1,c2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ChoicePosTest::createAndShowGUI);\n+\n+            robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            captureAndTestChoices();\n+        } finally {\n+            EventQueue.invokeAndWait(frame::dispose);\n+        }\n+\n+        System.out.println(\"Passed\");\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"ChoicePosTest\");\n+        Insets insets = frame.getInsets();\n+        frame.setSize( insets.left + 400 + insets.right, insets.top + 400 + insets.bottom );\n+        frame.setBackground(Color.RED);\n+        frame.setLayout(null);\n+        frame.setLocationRelativeTo(null);\n+\n+        c1 = new Choice();\n+        c1.setBackground(Color.GREEN);\n+        frame.add( c1 );\n+        c1.setBounds( 20, 50, 100, 100 );\n+\n+        c2 = new Choice();\n+        c2.setBackground(Color.GREEN);\n+        frame.add(c2);\n+        c2.addItem(\"One\");\n+        c2.addItem(\"Two\");\n+        c2.addItem(\"Three\");\n+        c2.setBounds( 125, 50, 100, 100 );\n+\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    private static void captureAndTestChoices() {\n+        Point c1loc = c1.getLocationOnScreen();\n+        Point c2loc = c2.getLocationOnScreen();\n+\n+        int startX = c1loc.x - GAP;\n+        int startY = c1loc.y - GAP;\n+        int captureWidth = c2loc.x + c2.getWidth() + GAP - startX;\n+        int captureHeight = c2loc.y + c2.getHeight() + GAP - startY;\n+\n+        BufferedImage bi = robot.createScreenCapture(\n+                new Rectangle(startX, startY, captureWidth, captureHeight)\n+        );\n+\n+        int redPix = Color.RED.getRGB();\n+\n+        int lastNonRedCount = 0;\n+\n+        for (int y = 0; y < captureHeight; y++) {\n+            int nonRedCount = 0;\n+            for (int x = 0; x < captureWidth; x++) {\n+                int pix = bi.getRGB(x, y);\n+                if (pix != redPix) {\n+                    nonRedCount++;\n+                }\n+            }\n+\n+            if (nonRedCount > 0 && lastNonRedCount > 0) {\n+                if (lastNonRedCount - nonRedCount > 0) {\n+                    System.err.printf(\n+                            \"Failed at %d, nonRedCount: %d lastNonRedCount: %d\\n\",\n+                            y, nonRedCount, lastNonRedCount\n+                    );\n+\n+                    try {\n+                        ImageIO.write(bi, \"png\", new File(\"choices.png\"));\n+                    } catch (IOException ignored) {\n+                    }\n+\n+                    throw new RuntimeException(\"Choices are not aligned\");\n+                }\n+            }\n+\n+            lastNonRedCount = nonRedCount;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoicePosTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Frame;\n+import jdk.test.lib.Platform;\n+\n+\/*\n+ * @test\n+ * @bug 4134619\n+ * @summary    Tests that the EventDispatchThread doesn't deadlock with\n+ *             user threads which are modifying a Choice component.\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual DeadlockTest\n+ *\/\n+\n+public class DeadlockTest extends Thread {\n+\n+    static volatile Choice choice1;\n+    static volatile Choice choice2;\n+    static volatile Choice choice3;\n+    static volatile Frame frame;\n+    static int itemCount = 0;\n+\n+    private static final boolean isWindows = Platform.isWindows();\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on the top Choice component and hold the mouse still briefly.\n+            Then, without releasing the mouse button, move the cursor to a menu\n+            item and then again hold the mouse still briefly.\n+            %s\n+            Release the button and repeat this process.\n+\n+            Verify that this does not cause a deadlock\n+            or crash within a reasonable amount of time.\n+            \"\"\".formatted(\n+                isWindows\n+                    ? \"(menu can automatically collapse sometimes, this is ok)\\n\"\n+                    : \"\"\n+\n+    )       ;\n+\n+    public static void main(String[] args) throws Exception {\n+        DeadlockTest deadlockTest = new DeadlockTest();\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .title(\"DeadlockTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(deadlockTest::createAndShowUI)\n+                .build();\n+\n+        deadlockTest.start();\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+   public Frame createAndShowUI() {\n+       frame = new Frame(\"Check Choice\");\n+       frame.setLayout(new BorderLayout());\n+       choice1 = new Choice();\n+       choice2 = new Choice();\n+       choice3 = new Choice();\n+       frame.add(choice1, BorderLayout.NORTH);\n+       frame.add(choice3, BorderLayout.CENTER);\n+       frame.add(choice2, BorderLayout.SOUTH);\n+       frame.pack();\n+       return frame;\n+   }\n+\n+    public void run() {\n+        while (true) {\n+            if (choice1 != null && itemCount < 40) {\n+                choice1.add(\"I am Choice, yes I am : \" + itemCount * itemCount);\n+                choice2.add(\"I am the same, yes I am : \" + itemCount * itemCount);\n+                choice3.add(\"I am the same, yes I am : \" + itemCount * itemCount);\n+                itemCount++;\n+            }\n+            if (itemCount >= 20 && choice1 != null &&\n+                    choice1.getItemCount() > 0) {\n+                choice1.removeAll();\n+                choice2.removeAll();\n+                choice3.removeAll();\n+                itemCount = 0;\n+            }\n+            frame.validate();\n+            try {\n+                Thread.sleep(1000);\n+            } catch (Exception ignored) {}\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/DeadlockTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+\n+\/*\n+ * @test\n+ * @bug 4293346\n+ * @summary Checks that Choice does update its dimensions on font change\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetFontTest\n+ *\/\n+\n+public class SetFontTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Choice component used to not update its dimension on font change.\n+            Select one of fonts on the choice pull down list.\n+            Pull down the list after the font change; if items in the list are\n+            shown correctly the test is passed, otherwise it failed.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"SetFontTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(SetFontTest::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createAndShowUI() {\n+        Frame frame = new Frame(\"SetFontTest\");\n+        Choice choice = new Choice();\n+        frame.setBounds(100, 400, 400, 100);\n+        choice.addItem(\"dummy\");\n+        choice.addItem(\"Set LARGE Font\");\n+        choice.addItem(\"Set small Font\");\n+        choice.addItem(\"addNewItem\");\n+        choice.addItem(\"deleteItem\");\n+\n+        choice.addItemListener(e -> {\n+            if (e.getItem().toString().equals(\"addNewItem\")) {\n+                choice.addItem(\"very very very very long item\");\n+                frame.validate();\n+            } else if (e.getItem().toString().equals(\"deleteItem\")) {\n+                if (choice.getItemCount() > 4) {\n+                    choice.remove(4);\n+                    frame.validate();\n+                }\n+            } else if (e.getItem().toString().equals(\"Set LARGE Font\")) {\n+                choice.setFont(new Font(\"Dialog\", Font.PLAIN, 24));\n+                frame.validate();\n+            } else if (e.getItem().toString().equals(\"Set small Font\")) {\n+                choice.setFont(new Font(\"Dialog\", Font.PLAIN, 10));\n+                frame.validate();\n+            }\n+        });\n+        Panel panel = new Panel();\n+        panel.add(choice);\n+        frame.add(panel, BorderLayout.CENTER);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/SetFontTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}