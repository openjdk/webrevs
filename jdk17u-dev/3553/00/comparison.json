{"files":[{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4234245\n+ * @summary the actionEvent is not invoked when hit enter on list.\n+ * @key headful\n+ * @run main ActionEventWhenHitEnterTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.IllegalComponentStateException;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+\n+public class ActionEventWhenHitEnterTest\n+        implements ActionListener, ItemListener {\n+\n+    volatile boolean passed1;\n+    volatile boolean passed2;\n+    volatile Point pt;\n+    List list;\n+    Frame frame;\n+\n+    public static void main(final String[] args) throws Exception {\n+        ActionEventWhenHitEnterTest app = new ActionEventWhenHitEnterTest();\n+        app.doTest();\n+    }\n+\n+    public ActionEventWhenHitEnterTest() {\n+        list = new List(7);\n+        for (int i = 0; i < 10; i++) {\n+            list.add(\"Item \" + i);\n+        }\n+        list.addItemListener(this);\n+        list.addActionListener(this);\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        passed1 = true;\n+        System.out.println(\"--> Action event invoked: \" + ae.getSource());\n+    }\n+\n+    public void itemStateChanged(ItemEvent ie) {\n+        passed2 = true;\n+        System.out.println(\"--> Item state changed:\" + ie.getSource());\n+    }\n+\n+    public void doTest() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"ActionEventWhenHitEnterTest\");\n+            frame.add(list);\n+            frame.setSize(200, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                pt = list.getLocationOnScreen();\n+            });\n+\n+            if (pt.x != 0 || pt.y != 0) {\n+                robot.mouseMove(pt.x + list.getWidth() \/ 2,\n+                                pt.y + list.getHeight() \/ 2);\n+                robot.waitForIdle();\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.waitForIdle();\n+\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+            }\n+\n+            robot.waitForIdle();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!passed1 || !passed2) {\n+            throw new RuntimeException(\"ActionEventWhenHitEnterTest FAILED\");\n+        }\n+        System.out.println(\"Test PASSED\");\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ActionEventWhenHitEnterTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4117288\n+ * @summary JDKversion1.2beta3-J List's add() method is much slower.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListAddPerfTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ListAddPerfTest {\n+\n+    static Button button;\n+    static List list;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+         It is used to check the performance of List add operation.\n+\n+         Instructions:\n+             Click on the Remove All button.\n+             The list should be cleared.\n+             The button is now named \"Add Items\".\n+             Click on the \"Add Items\" button.\n+             800 items should be added to the list.\n+             Notice not only how fast or slow this is, but also how\n+             'smooth' it goes as well i.e. without any flashing.\n+\n+             Press pass if the list performance is acceptable.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ListAddPerfTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int)INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(ListAddPerfTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame frame = new Frame(\"ListAddPerfTest\");\n+        frame.setLayout(new BorderLayout());\n+\n+        button = new Button(\"Remove All\");\n+        button.addActionListener((ActionEvent e) -> {\n+            if (list.getItemCount() > 0) {\n+                list.removeAll();\n+                list.invalidate();\n+                button.setLabel(\"Add Items\");\n+            } else {\n+                for (int i = 0; i < 800; i ++) {\n+                    list.add(\"My number is \" + i);\n+                }\n+                button.setLabel(\"Remove All\");\n+            }\n+        });\n+\n+        list = new List(15);\n+        for (int i = 0; i < 800; i ++) {\n+            list.add(\"My number is \" + i);\n+        }\n+\n+        frame.add(\"North\", button);\n+        frame.add(\"South\", list);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListAddPerfTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6240151\n+ * @summary XToolkit: Dragging the List scrollbar initiates DnD\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseDraggedOriginatedByScrollBarTest\n+*\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class MouseDraggedOriginatedByScrollBarTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1) Click and drag the scrollbar of the list.\n+            2) Keep dragging till the mouse pointer goes out the scrollbar.\n+            3) The test failed if you see messages about events. The test passed if you don't.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"MouseDraggedOriginatedByScrollBarTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(MouseDraggedOriginatedByScrollBarTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame frame = new Frame();\n+        List list = new List(4, false);\n+\n+        list.add(\"000\");\n+        list.add(\"111\");\n+        list.add(\"222\");\n+        list.add(\"333\");\n+        list.add(\"444\");\n+        list.add(\"555\");\n+        list.add(\"666\");\n+        list.add(\"777\");\n+        list.add(\"888\");\n+        list.add(\"999\");\n+\n+        frame.add(list);\n+\n+        list.addMouseMotionListener(\n+            new MouseMotionAdapter(){\n+                @Override\n+                public void mouseDragged(MouseEvent me){\n+                    PassFailJFrame.log(me.toString());\n+                }\n+            });\n+\n+        list.addMouseListener(\n+            new MouseAdapter() {\n+                public void mousePressed(MouseEvent me) {\n+                    PassFailJFrame.log(me.toString());\n+                }\n+\n+                public void mouseReleased(MouseEvent me) {\n+                    PassFailJFrame.log(me.toString());\n+                }\n+\n+                public void mouseClicked(MouseEvent me){\n+                    PassFailJFrame.log(me.toString());\n+                }\n+            });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/MouseDraggedOriginatedByScrollBarTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4189244\n+ * @summary Swing Popup menu is not being refreshed (cleared) under a Dialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"windows\")\n+ * @run main\/manual bug4189244\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+\n+public class bug4189244 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+         This is Windows only test!\n+\n+         Click right button on frame to show popup menu.\n+         (menu should be placed inside frame otherwise bug is not reproducible)\n+         click on any menu item (dialog will be shown).\n+         close dialog.\n+         if you see part of popupmenu, under dialog, before it is closed,\n+         then test failed, else passed.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                .title(\"bug4189244 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int)INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(bug4189244::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+\n+    private static JFrame createTestUI() {\n+        RefreshBug panel = new RefreshBug();\n+        JFrame frame = new JFrame(\"Popup refresh bug\");\n+\n+        frame.add(panel, BorderLayout.CENTER);\n+        panel.init();\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n+\n+class RefreshBug extends JPanel implements ActionListener {\n+    JPopupMenu _jPopupMenu = new JPopupMenu();\n+\n+    public void init() {\n+        JMenuItem menuItem;\n+        JButton jb = new JButton(\"Bring the popup here and select an item\");\n+\n+        this.add(jb, BorderLayout.CENTER);\n+\n+        for(int i = 1; i < 10; i++) {\n+            menuItem = new JMenuItem(\"Item \" + i);\n+            menuItem.addActionListener(this);\n+            _jPopupMenu.add(menuItem);\n+        }\n+\n+        MouseListener ml = new MouseAdapter() {\n+            public void mouseReleased(MouseEvent e) {\n+                if (e.isPopupTrigger()) {\n+                        _jPopupMenu.show(e.getComponent(),\n+                                         e.getX(), e.getY());\n+                }\n+            }\n+        };\n+        this.addMouseListener(ml);\n+\n+        jb.addMouseListener(ml);\n+\n+    }\n+\n+    \/\/ An action is requested by the user\n+    public void actionPerformed(java.awt.event.ActionEvent e) {\n+        JOptionPane.showMessageDialog(this,\n+                                      \"Check if there is some popup left under me\\n\"+\n+                                      \"if not, retry and let the popup appear where i am\",\n+                                      \"WARNING\",\n+                                      JOptionPane.WARNING_MESSAGE);\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/bug4189244.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}