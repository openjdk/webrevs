{"files":[{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4363534\n+ * @summary This test verifies that setting a non-thin-line BasicStroke\n+ *     on a Graphics2D obtained from a BufferedImage will correctly validate\n+ *     the pipelines for the line-widening pipeline even if that is the only\n+ *     non-default attribute on the graphics.\n+ *\n+ *\/\n+\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+public class BasicStrokeValidate  {\n+\n+    public static final int TESTW = 100;\n+    public static final int TESTH = 100;\n+\n+    public static void main(String[] args) {\n+        BufferedImage bi1 = createImage(false);\n+        BufferedImage bi2 = createImage(true);\n+        compare(bi1, bi2); \/\/ images should differ\n+    }\n+\n+    static BufferedImage createImage(boolean dashed) {\n+        BufferedImage bi = new BufferedImage(TESTW, TESTH, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = bi.createGraphics();\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, TESTW, TESTH);\n+        g2d.setColor(Color.black);\n+        if (dashed) {\n+            g2d.setStroke(new BasicStroke(1.0f, BasicStroke.CAP_SQUARE,\n+                                          BasicStroke.JOIN_MITER, 10.0f,\n+                                          new float[] {2.5f, 3.5f},\n+                                          0.0f));\n+        }\n+        g2d.drawRect(10, 10, TESTW-20, TESTH-20);\n+        g2d.setStroke(new BasicStroke(10f));\n+        g2d.drawRect(20, 20, TESTW-40, TESTH-40);\n+        return bi;\n+    }\n+\n+    static void compare(BufferedImage i1, BufferedImage i2) {\n+        boolean same = true;\n+        int w = i1.getWidth(), h = i1.getHeight();\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                int p1 = i1.getRGB(x, y);\n+                int p2 = i2.getRGB(x, y);\n+                if (p1 != p2) {\n+                    same = false;\n+                }\n+            }\n+            if (!same) {\n+                break;\n+            }\n+        }\n+        if (same) {\n+             throw new RuntimeException(\"No difference\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/BasicStrokeValidate.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4191004\n+ * @summary Tests that no IllegalArgumentException is thrown when calling\n+ *           drawImage with certain conditions\n+ * @key headful\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Toolkit;\n+import java.awt.geom.GeneralPath;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+public class DrawImageIAETest extends Frame {\n+\n+     static String filename = \"\/duke.gif\";\n+     private volatile Image dimg;\n+     private volatile BufferedImage bimg;\n+     static volatile DrawImageIAETest app;\n+     static volatile JFrame jframe;\n+     static volatile boolean passed = true;\n+     static volatile Exception exception = null;\n+     static volatile CountDownLatch imageLatch = new CountDownLatch(1);\n+\n+     DrawImageIAETest(String title) {\n+         super(title);\n+     }\n+\n+     public static void main(final String[] args) throws Exception {\n+         EventQueue.invokeAndWait(DrawImageIAETest:: createUI);\n+         imageLatch.await(3, TimeUnit.MILLISECONDS);\n+         try {\n+             if (!passed) {\n+                 throw new RuntimeException(\"Test FAILED: exception caught:\" + exception);\n+             }\n+         } finally {\n+            if (jframe != null) {\n+                EventQueue.invokeAndWait(jframe::dispose);\n+            }\n+            if (app != null) {\n+                EventQueue.invokeAndWait(app::dispose);\n+            }\n+         }\n+     }\n+\n+     static void createUI() {\n+         app = new DrawImageIAETest(\"DrawImageIAETest\");\n+         app.setLayout (new BorderLayout());\n+         app.setSize(200,200);\n+         app.setLocationRelativeTo(null);\n+         app.setVisible(true);\n+\n+         String file;\n+         try {\n+             String dir = System.getProperty(\"test.src\",\n+                                             System.getProperty(\"user.dir\"));\n+             file = dir + filename;\n+         } catch (Exception e) {\n+             file = \".\" + filename;\n+         }\n+\n+         Image textureAlphaSource = null;\n+         MediaTracker tracker = new MediaTracker(app);\n+         app.dimg = Toolkit.getDefaultToolkit().getImage(file);\n+         tracker.addImage(app.dimg, 1);\n+         try {\n+             tracker.waitForAll();\n+             imageLatch.countDown();\n+         } catch (Exception e) {\n+             System.err.println(\"Can't load images\");\n+         }\n+\n+         if (app.dimg == null) {\n+             passed = false;\n+             return;\n+         }\n+\n+         jframe = new JFrame(\"Test DrawImageIAETest\");\n+         jframe.setSize(300, 300);\n+         JPanel jpanel;\n+         jframe.getContentPane().add(\"Center\", jpanel = new JPanel() {\n+             public void paint(Graphics _g) {\n+                 Graphics2D g = (Graphics2D)_g;\n+                 Dimension d = getSize();\n+                 Graphics2D g2 = app.createGraphics2D(d.width, d.height);\n+                 app.drawDemo(d.width, d.height, g2);\n+                 g2.dispose();\n+                 g.drawImage(app.bimg, 0, 0, app);\n+             }\n+         });\n+         jpanel.setSize(140, 140);\n+         jframe.setVisible(true);\n+    }\n+\n+    public void drawDemo(int w, int h, Graphics2D g2) {\n+        GeneralPath p1 = new GeneralPath();\n+        GeneralPath p2 = new GeneralPath();\n+\n+        int dukeX = 73;\n+        int dukeY = 26;\n+\n+        double x = 118;\n+        double y = 17;\n+        double ew = 50;\n+        double eh = 48;\n+\n+        p1.append(new Ellipse2D.Double(x, y, ew, eh), false);\n+        p2.append(new Rectangle2D.Double(x+5, y+5, ew-10, eh-10),false);\n+\n+        g2.setClip(p1);\n+        g2.clip(p2);\n+        try {\n+            g2.drawImage(dimg, dukeX, dukeY, null);\n+        } catch (IllegalArgumentException e) {\n+            passed = false;\n+            exception = e;\n+        }\n+    }\n+\n+    public Graphics2D createGraphics2D(int w, int h) {\n+        Graphics2D g2 = null;\n+        if (bimg == null || bimg.getWidth() != w || bimg.getHeight() != h) {\n+            bimg = (BufferedImage) createImage(w, h);\n+        }\n+        g2 = bimg.createGraphics();\n+        g2.setBackground(getBackground());\n+        g2.clearRect(0, 0, w, h);\n+        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));\n+        return g2;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawImageIAETest\/DrawImageIAETest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawImageIAETest\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/duke.gif","status":"copied"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4203598\n+ * @summary This test verifies that an image with transparent background can be displayed\n+ *          correctly with the red background color given.\n+ *           The correct display should be the sleeping Duke on a red background.\n+ *\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+\n+public class ImageRendering {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String imgName = \"snooze.gif\";\n+        File file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n+        BufferedImage image = ImageIO.read(file);\n+        int w = image.getWidth();\n+        int h = image.getHeight();\n+        BufferedImage dest = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = dest.createGraphics();\n+        g2d.drawImage(image, 0, 0, Color.red, null);\n+        int redPixel = Color.red.getRGB();\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                int srcPixel = image.getRGB(x, y);\n+                if ((srcPixel & 0x0ff000000) == 0) {\n+                    int destPix = dest.getRGB(x, y);\n+                    if (destPix != redPixel) {\n+                        throw new RuntimeException(\"Not red at x=\" + x +\n+                               \" y=\" + y +\n+                               \"pix = \" + Integer.toHexString(destPix));\n+                    }\n+                }\n+            }\n+       }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/ImageRendering\/ImageRendering.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Graphics2D\/ImageRendering\/snooze.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/J2Ddemo\/images\/snooze.gif","status":"copied"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 4210466 4417756\n+ * @summary thin lines are not draw correctly under large scales\n+ *\/\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import java.awt.image.BufferedImage;\n+import java.awt.geom.Ellipse2D;\n+\n+public class ScaledThinLineTest {\n+\n+    public static void main(String[] args) {\n+        ScaledThinLineTest c1 = new ScaledThinLineTest(200, 200);\n+        ScaledThinLineTest c2 = new ScaledThinLineTest(1, 10000);\n+        ScaledThinLineTest c3 = new ScaledThinLineTest(10000, 1);\n+        ScaledThinLineTest c4 = new ScaledThinLineTest(0.01, 10000);\n+        ScaledThinLineTest c5 = new ScaledThinLineTest(10000, 0.01);\n+        compare(c1.bi, c2.bi);\n+        compare(c2.bi, c3.bi);\n+        compare(c3.bi, c4.bi);\n+        compare(c4.bi, c5.bi);\n+    }\n+\n+    private final Shape shape;\n+    private final double scaleX,scaleY;\n+    private BufferedImage bi = null;\n+\n+    public ScaledThinLineTest(double width, double height) {\n+        shape = new Ellipse2D.Double(0.25*width, 0.25*height, width, height);\n+        scaleX = 200\/width;\n+        scaleY = 200\/height;\n+        int iw = 300, ih = 300;\n+        bi = new BufferedImage(iw, ih, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2 = bi.createGraphics();\n+        g2.setColor(Color.white);\n+        g2.fillRect(0, 0, iw, ih);\n+        g2.setColor(Color.black);\n+        g2.scale(scaleX,scaleY);\n+        g2.setStroke(new BasicStroke(0));\n+        g2.draw(shape);\n+    }\n+\n+\n+    static void compare(BufferedImage i1, BufferedImage i2) {\n+        int w = i1.getWidth(), h = i1.getHeight();\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                int p1 = i1.getRGB(x, y);\n+                int p2 = i2.getRGB(x, y);\n+                if (p1 != p2) {\n+                    System.out.println(\"images differ at \" + x + \" \" + y);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/ScaledThinLineTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug  4190429\n+ * @key headful\n+ * @summary In this bug, text drawing performance should be reasonable.\n+ *          And should (per string) be consistent with the size of the\n+ *          rectangle in which the string is drawn, not the rectangle\n+ *          bounding the whole window.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.Toolkit;\n+import java.awt.font.GlyphVector;\n+import java.awt.geom.AffineTransform;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TextPerf extends Canvas {\n+\n+    static volatile CountDownLatch paintLatch = new CountDownLatch(1);\n+    static volatile long paintTime = 5000; \/\/ causes test fail if it is not updated.\n+    static volatile Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(TextPerf::createUI);\n+        paintLatch.await(5, TimeUnit.SECONDS);\n+        if (paintTime > 2000) {\n+            throw new RuntimeException(\"Paint time is \" + paintTime + \"ms\");\n+        }\n+        if (frame != null) {\n+            EventQueue.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    static void createUI() {\n+        frame = new Frame(\"TextPerf\");\n+        frame.setLayout(new BorderLayout());\n+        TextPerf tp = new TextPerf();\n+        frame.add(tp, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();\n+        return new Dimension(d.width - 50, d.height - 50);\n+    }\n+\n+    static Font[] fonts = {\n+        new Font(Font.SERIF, Font.PLAIN, 10),\n+        new Font(Font.SANS_SERIF, Font.PLAIN, 10),\n+        new Font(Font.MONOSPACED, Font.ITALIC, 10),\n+        new Font(Font.SERIF, Font.PLAIN, 14),\n+        new Font(Font.SERIF, Font.BOLD, 12),\n+    };\n+\n+    public void paint(Graphics g1) {\n+\n+        Graphics2D g = (Graphics2D)g1;\n+        String text = \"Hello,_Wgjpqy!\";\n+        Toolkit.getDefaultToolkit().sync();\n+        long startTime = System.currentTimeMillis();\n+        FontMetrics[] cachedMetrics = new FontMetrics[fonts.length];\n+        Dimension size = getSize();\n+        int prim = 0;\n+        int spaceWidth = 5;\n+        Color cols[] = { Color.red, Color.blue, Color.yellow,\n+                         Color.green, Color.pink, Color.orange} ;\n+\n+        for (int y = 20; y < size.height; y += 20) {\n+            int i = 0;\n+            for (int x = 0; x < size.width; i++) {\n+                Font font = fonts[i % fonts.length];\n+                FontMetrics metrics = cachedMetrics[i % fonts.length];\n+                if (metrics == null) {\n+                    metrics = g.getFontMetrics(font);\n+                    cachedMetrics[i % fonts.length] = metrics;\n+                }\n+\n+                g.setFont(font);\n+                g.setColor(cols[i % cols.length]);\n+                switch (prim++) {\n+                  case 0:  g.drawString(text, x, y);\n+                           break;\n+                  case 1:  g.drawBytes(text.getBytes(), 0, text.length(), x, y);\n+                           break;\n+                  case 2:  char[] chs= new char[text.length()];\n+                           text.getChars(0,text.length(), chs, 0);\n+                           g.drawChars(chs, 0, text.length(), x, y);\n+                           break;\n+                  case 3:  GlyphVector gv = font.createGlyphVector(\n+                                              g.getFontRenderContext(), text);\n+                           g.drawGlyphVector(gv, (float)x, (float)y);\n+                  default: prim = 0;\n+                }\n+\n+                x += metrics.stringWidth(text) + spaceWidth;\n+            }\n+        }\n+\n+        \/\/ Draw some transformed text to verify correct bounds calculated\n+        AffineTransform at = AffineTransform.getTranslateInstance(50, 50);\n+        at.scale(7.0,7.0);\n+        at.rotate(1.0);\n+        g.transform(at);\n+        g.setColor(Color.black);\n+        Font font = new Font(Font.SERIF, Font.PLAIN, 20);\n+        RenderingHints hints = new RenderingHints(null);\n+        hints.put(RenderingHints.KEY_ANTIALIASING,\n+                  RenderingHints.VALUE_ANTIALIAS_ON);\n+        g.setRenderingHints(hints);\n+        g.setFont(font);\n+        FontMetrics metrics = g.getFontMetrics(font);\n+        g.drawString(\"Java\", 5,5);\n+\n+        Toolkit.getDefaultToolkit().sync();\n+        long endTime = System.currentTimeMillis();\n+        paintTime = endTime - startTime;\n+        String msg = \"repainted in \" + paintTime + \" milliseconds\";\n+        System.out.println(msg);\n+        System.out.flush();\n+\n+        paintLatch.countDown();\n+     }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/TextPerf.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}