{"files":[{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4268949\n+ * @summary Tests if JInternalFrame can do setBackground()\n+ * @run main bug4268949\n+ *\/\n+\n+import java.awt.Color;\n+import javax.swing.JInternalFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4268949 {\n+\n+    static Color c1;\n+    static Color c2;\n+    static Color c3;\n+\n+    public static void main(String[] argv) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JInternalFrame if1, if2, if3;\n+            if1 = new JInternalFrame(\"Frame 1\");\n+            if2 = new JInternalFrame(\"Frame 2\");\n+            if3 = new JInternalFrame(\"Frame 3\");\n+            if1.setBounds(20, 20, 95, 95);\n+            if2.setBounds(120, 20, 95, 95);\n+            if3.setBounds(220, 20, 95, 95);\n+            if1.setBackground(Color.red);\n+            if2.setBackground(Color.blue);\n+            if3.setBackground(Color.green);\n+            c1 = if1.getContentPane().getBackground();\n+            c2 = if2.getContentPane().getBackground();\n+            c3 = if3.getContentPane().getBackground();\n+        });\n+        if (!(c1.equals(Color.red)) || !(c2.equals(Color.blue))\n+                || !(c3.equals(Color.green))) {\n+            throw new RuntimeException(\"Test failed: JInternalFrame \" +\n+                    \"cannot do setBackground()\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4268949.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4309079\n+ * @summary Tests that when a JInternalFrame is activated,\n+            focused JTextField shows cursor.\n+ * @key headful\n+ * @run main bug4309079\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import javax.swing.JFrame;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4309079 {\n+\n+    private static JFrame f;\n+    private static JTextField tf;\n+    private static JDesktopPane desktop;\n+    private static JInternalFrame f1;\n+    private static JInternalFrame f2;\n+    private static volatile boolean passed = true;\n+    private static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame();\n+                f.setSize(500, 300);\n+                tf = new JTextField(10);\n+                tf.addFocusListener(new FocusListener() {\n+                    public void focusGained(FocusEvent e) {\n+                        passed = tf.getCaret().isVisible();\n+                    }\n+                    public void focusLost(FocusEvent e) {\n+                    }\n+                });\n+                tf.requestFocus();\n+                f1 = AddFrame(new JTextField(10));\n+                f2 = AddFrame(tf);\n+                f.getContentPane().add(desktop);\n+                f.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                f1.toFront();\n+                f2.toFront();\n+                p = tf.getLocationOnScreen();\n+            });\n+            robot.mouseMove(p.x, p.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK );\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK );\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static JInternalFrame AddFrame(JTextField tf) {\n+        JInternalFrame frame = new JInternalFrame();\n+        desktop = new JDesktopPane();\n+        desktop.add(frame);\n+        frame.getContentPane().setLayout(new FlowLayout());\n+        frame.getContentPane().add(tf);\n+        frame.setSize(300, 200);\n+        frame.setVisible(true);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4309079.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4732229\n+ * @summary Ctrl+Space, bringing up System menu on a JIF errors using Win LAF\n+ * @key headful\n+ * @run main bug4732229\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class bug4732229 {\n+\n+    JFrame frame;\n+    JDesktopPane desktop;\n+    JInternalFrame jif;\n+    JTextArea ta;\n+    Robot robot;\n+    volatile boolean keyTyped = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        bug4732229 b = new bug4732229();\n+        b.init();\n+    }\n+\n+    public void init() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4732229\");\n+                desktop = new JDesktopPane();\n+                frame.getContentPane().add(desktop);\n+\n+                ta = new JTextArea();\n+                ta.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        synchronized (bug4732229.this) {\n+                            keyTyped = true;\n+                            bug4732229.this.notifyAll();\n+                        }\n+                    }\n+                });\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                jif = new JInternalFrame(\"Internal Frame\", true, false, true,\n+                        true);\n+                jif.setBounds(10, 10, 100, 100);\n+                jif.getContentPane().add(ta);\n+                jif.setVisible(true);\n+                desktop.add(jif);\n+                try {\n+                    jif.setSelected(true);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+            });\n+            synchronized (this) {\n+                while (!keyTyped) {\n+                    bug4732229.this.wait();\n+                }\n+            }\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    jif.setSelected(false);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+                jif.setVisible(false);\n+                desktop.remove(jif);\n+                try {\n+                    UIManager.setLookAndFeel(\n+                            UIManager.getSystemLookAndFeelClassName());\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+                desktop.updateUI();\n+\n+                jif = new JInternalFrame(\"Internal Frame\", true, false, true,\n+                        true);\n+                jif.setBounds(10, 10, 100, 100);\n+                jif.getContentPane().add(ta);\n+                jif.setVisible(true);\n+                desktop.add(jif);\n+                try {\n+                    jif.setSelected(true);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+            synchronized (this) {\n+                while (!keyTyped) {\n+                    bug4732229.this.wait();\n+                }\n+            }\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4732229.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5009724\n+ * @requires (os.family == \"linux\")\n+ * @summary JInternalFrame not serializable in GTK L&F\n+ * @key headful\n+ * @run main bug5009724\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import javax.swing.AbstractAction;\n+import javax.swing.JInternalFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug5009724 {\n+\n+    public static void main(String []args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        SwingUtilities.invokeAndWait(() -> {\n+            JInternalFrame frame = new JInternalFrame();\n+            ObjectOutputStream out = null;\n+            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n+            try {\n+                out = new ObjectOutputStream(byteStream);\n+            } catch (IOException e) {\n+\n+            }\n+            if (out != null) {\n+                System.out.println(\"Testing...\");\n+                try {\n+                    out.writeObject(frame);\n+                } catch (Exception e) {\n+                    System.out.println(e);\n+                    throw new RuntimeException(\"Serialization exception. Test failed.\");\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug5009724.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4191374\n+ * @summary Verify if JMenuBar.getSubElements returns an array\n+            with null values\n+ * @run main bug4191374\n+ *\/\n+\n+import javax.swing.Box;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.MenuElement;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4191374 {\n+    static JMenuBar mb;\n+    static volatile boolean pass = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            mb = new JMenuBar();\n+            newMenu(mb);\n+            newMenu(mb);\n+            mb.add(Box.createGlue());\n+            mb.add(new JMenu(\"Help\"));\n+            MenuElement[] me = mb.getSubElements();\n+            for (int i = 0; i < me.length; i++) {\n+                if (me[i] == null)\n+                    pass = false;\n+            }\n+        });\n+        if (!pass) {\n+            throw new RuntimeException(\"Bug 4191374 FAILED\");\n+        }\n+    }\n+\n+    public static void newMenu(JMenuBar mb) {\n+        JMenu m = (JMenu) mb.add(new JMenu(\"File\"));\n+        m.add(\"Menu item\");\n+        m.add(\"Menu item\");\n+        m.add(\"Menu item\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/bug4191374.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}