{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+    private static final String N2_STR = \"N2\";\n@@ -43,12 +44,20 @@\n-        userRoot = Preferences.userRoot();\n-        ncla = new NodeChangeListenerAdd();\n-        userRoot.addNodeChangeListener(ncla);\n-        \/\/Should initiate a node added event\n-        addNode();\n-        \/\/ Should not initiate a node added event\n-        addNode();\n-        \/\/Should initate a child removed event\n-        removeNode();\n-\n-        if (failed) {\n-            throw new RuntimeException(\"Failed\");\n+        try {\n+            userRoot = Preferences.userRoot();\n+            \/\/ Make sure test node is not present before test\n+            clearPrefs();\n+\n+            ncla = new NodeChangeListenerAdd();\n+            userRoot.addNodeChangeListener(ncla);\n+            \/\/Should initiate a node added event\n+            addNode();\n+            \/\/ Should not initiate a node added event\n+            addNode();\n+            \/\/Should initate a child removed event\n+            removeNode();\n+\n+            if (failed) {\n+                throw new RuntimeException(\"Failed\");\n+            }\n+        } finally {\n+            \/\/ Make sure test node is not present after the test\n+            clearPrefs();\n@@ -60,1 +69,1 @@\n-        N2 = userRoot.node(\"N2\");\n+        N2 = userRoot.node(N2_STR);\n@@ -62,12 +71,1 @@\n-        int passItr = -1;\n-\n-        for (int i = 0; i < SLEEP_ITRS; i++) {\n-            System.out.print(\"addNode sleep iteration \" + i + \"...\");\n-            Thread.sleep(3000);\n-            System.out.println(\"done.\");\n-            if (ncla.getAddNumber() == 1) {\n-                passItr = i;\n-                break;\n-            }\n-        }\n-        checkPassItr(passItr, \"addNode()\");\n+        checkAndSleep(1, \"addNode\");\n@@ -80,1 +78,2 @@\n-        int passItr = -1;\n+        checkAndSleep(0, \"removeNode\");\n+    }\n@@ -82,0 +81,6 @@\n+    \/* Check for the expected value in the listener (1 after addNode(), 0 after removeNode()).\n+     * Sleep a few extra times in a loop, if needed, for debugging purposes, to\n+     * see if the event gets delivered late.\n+     *\/\n+    private static void checkAndSleep(int expectedListenerVal, String methodName) throws InterruptedException {\n+        int expectedItr = -1; \/\/ iteration in which the expected value was retrieved from the listener, or -1 if never\n@@ -83,1 +88,1 @@\n-            System.out.print(\"removeNode sleep iteration \" + i + \"...\");\n+            System.out.print(methodName + \" sleep iteration \" + i + \"...\");\n@@ -86,2 +91,2 @@\n-            if (ncla.getAddNumber() == 0) {\n-                passItr = i;\n+            if (ncla.getAddNumber() == expectedListenerVal) {\n+                expectedItr = i;\n@@ -91,2 +96,0 @@\n-        checkPassItr(passItr, \"removeNode()\");\n-    }\n@@ -94,5 +97,1 @@\n-    \/* If the listener wasn't notified on iteration 0, throw a RuntimeException\n-     * with some contextual information\n-     *\/\n-    private static void checkPassItr(int itr, String methodName) {\n-        if (itr == 0) {\n+        if (expectedItr == 0) {\n@@ -102,2 +101,2 @@\n-            if (itr == -1) {\n-                throw new RuntimeException(\"Failed in \" + methodName + \" - change listener never notified\");\n+            if (expectedItr == -1) {\n+                System.out.println(\"Failed in \" + methodName + \" - change listener never notified\");\n@@ -105,1 +104,15 @@\n-                throw new RuntimeException(\"Failed in \" + methodName + \" - listener notified on iteration \" + itr);\n+                System.out.println(\"Failed in \" + methodName + \" - listener notified on iteration \" + expectedItr);\n+            }\n+        }\n+    }\n+\n+    \/* Check if the node already exists in userRoot, and remove it if so. *\/\n+    private static void clearPrefs() throws BackingStoreException {\n+        if (userRoot.nodeExists(N2_STR)) {\n+            System.out.println(\"Node \" + N2_STR + \" already\/still exists; clearing\");\n+            Preferences clearNode = userRoot.node(N2_STR);\n+            userRoot.flush();\n+            clearNode.removeNode();\n+            userRoot.flush();\n+            if (userRoot.nodeExists(N2_STR)) {\n+                throw new RuntimeException(\"Unable to clear pre-existing node.\" + (failed ? \" Also, the test failed\" : \"\"));\n","filename":"test\/jdk\/java\/util\/prefs\/AddNodeChangeListener.java","additions":53,"deletions":40,"binary":false,"changes":93,"status":"modified"}]}