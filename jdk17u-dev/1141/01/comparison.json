{"files":[{"patch":"@@ -667,0 +667,1 @@\n+        MethodSymbol prevMethodSym = currentMethodSym;\n@@ -669,0 +670,1 @@\n+            currentMethodSym = null;\n@@ -672,0 +674,1 @@\n+            currentMethodSym = prevMethodSym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8278834\n+ * @summary Verify pattern matching nested inside initializers of classes nested in methods\n+ *          works correctly.\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build combo.ComboTestHelper\n+ * @compile BindingsInitializer.java\n+ * @run main BindingsInitializer\n+ *\/\n+\n+import combo.ComboInstance;\n+import combo.ComboParameter;\n+import combo.ComboTask;\n+import combo.ComboTestHelper;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import toolbox.ToolBox;\n+\n+public class BindingsInitializer extends ComboInstance<BindingsInitializer> {\n+    protected ToolBox tb;\n+\n+    BindingsInitializer() {\n+        super();\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ComboTestHelper<BindingsInitializer>()\n+                .withDimension(\"OUTER\", (x, outer) -> x.outer = outer, Outer.values())\n+                .withDimension(\"MIDDLE\", (x, middle) -> x.middle = middle, Middle.values())\n+                .withDimension(\"INNER\", (x, inner) -> x.inner = inner, Inner.values())\n+                .withDimension(\"TEST\", (x, test) -> x.test = test, Test.values())\n+                .run(BindingsInitializer::new);\n+    }\n+\n+    private Outer outer;\n+    private Middle middle;\n+    private Inner inner;\n+    private Test test;\n+\n+    private static final String MAIN_TEMPLATE =\n+            \"\"\"\n+            public class Test {\n+                private static Object obj = \"\";\n+                #{OUTER}\n+            }\n+            \"\"\";\n+\n+    @Override\n+    protected void doWork() throws Throwable {\n+        Path base = Paths.get(\".\");\n+\n+        ComboTask task = newCompilationTask()\n+                .withSourceFromTemplate(MAIN_TEMPLATE, pname -> switch (pname) {\n+                        case \"OUTER\" -> outer;\n+                        case \"MIDDLE\" -> middle;\n+                        case \"INNER\" -> inner;\n+                        case \"TESST\" -> test;\n+                        default -> throw new UnsupportedOperationException(pname);\n+                    });\n+\n+        task.generate(result -> {\n+            if (result.hasErrors()) {\n+                throw new AssertionError(\"Unexpected result: \" + result.compilationInfo());\n+            }\n+        });\n+    }\n+\n+    public enum Outer implements ComboParameter {\n+        NONE(\"#{MIDDLE}\"),\n+        STATIC_CLASS(\"static class Nested { #{MIDDLE} }\"),\n+        CLASS(\"class Inner { #{MIDDLE} }\");\n+        private final String code;\n+\n+        private Outer(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+\n+    public enum Middle implements ComboParameter {\n+        STATIC_INIT(\"static { #{INNER} }\"),\n+        INIT(\"{ #{INNER} }\"),\n+        METHOD(\"void test() { #{INNER} }\");\n+        private final String code;\n+\n+        private Middle(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+\n+    public enum Inner implements ComboParameter {\n+        DIRECT(\"#{TEST}\"),\n+        CLASS_STATIC_INIT(\"class C { static { #{TEST} } }\"),\n+        CLASS_INIT(\"class C { { #{TEST} } }\"),\n+        CLASS_METHOD(\"class C { void t() { #{TEST} } }\"),\n+        ANNONYMOUS_CLASS_STATIC_INIT(\"new Object() { static { #{TEST} } };\"),\n+        ANNONYMOUS_CLASS_INIT(\"new Object() { { #{TEST} } };\"),\n+        ANNONYMOUS_CLASS_METHOD(\"new Object() { void t() { #{TEST} } };\");\n+        private final String code;\n+\n+        private Inner(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+\n+    public enum Test implements ComboParameter {\n+        TEST(\"if (obj instanceof String str) System.err.println(str);\");\n+        private final String code;\n+\n+        private Test(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsInitializer.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}