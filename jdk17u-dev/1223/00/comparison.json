{"files":[{"patch":"@@ -900,0 +900,3 @@\n+                        if (keepAliveConnections < 0) {\n+                            keepAliveConnections = usingProxy?50:5;\n+                        }\n@@ -901,0 +904,5 @@\n+                        if (keepAliveTimeout < -1) {\n+                            \/\/ if the server specified a negative (invalid) value\n+                            \/\/ then we set to -1, which is equivalent to no value\n+                            keepAliveTimeout = -1;\n+                        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8291637\n+ * @run main\/othervm -Dhttp.keepAlive.time.server=20 -esa -ea B8291637 timeout\n+ * @run main\/othervm -Dhttp.keepAlive.time.server=20 -esa -ea B8291637 max\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class B8291637 {\n+    static CompletableFuture<Boolean> passed = new CompletableFuture<>();\n+\n+    static class Server extends Thread {\n+        final ServerSocket serverSocket;\n+        final int port;\n+        final String param; \/\/ the parameter to test \"max\" or \"timeout\"\n+        volatile Socket s;\n+\n+        public Server(String param) throws IOException {\n+            serverSocket = new ServerSocket(0);\n+            port = serverSocket.getLocalPort();\n+            setDaemon(true);\n+            this.param = param;\n+        }\n+\n+        public int getPort() {\n+            return port;\n+        }\n+\n+        public void close() {\n+            try {\n+                serverSocket.close();\n+                if (s != null)\n+                    s.close();\n+            } catch (IOException e) {}\n+        }\n+\n+        static void readRequest(Socket s) throws IOException {\n+            InputStream is = s.getInputStream();\n+            is.read();\n+            while (is.available() > 0)\n+                is.read();\n+        }\n+\n+        public void run() {\n+            try {\n+                while (true) {\n+                    s = serverSocket.accept();\n+                    readRequest(s);\n+                    OutputStream os = s.getOutputStream();\n+                    String resp = \"\" +\n+                            \"HTTP\/1.1 200 OK\\r\\n\" +\n+                            \"Content-Length: 11\\r\\n\" +\n+                            \"Connection: Keep-Alive\\r\\n\" +\n+                            \"Keep-Alive: \" + param + \"=-10\\r\\n\" + \/\/ invalid negative value\n+                            \"\\r\\n\" +\n+                            \"Hello World\";\n+                    os.write(resp.getBytes(StandardCharsets.ISO_8859_1));\n+                    os.flush();\n+                    InputStream is = s.getInputStream();\n+                    long l1 = System.currentTimeMillis();\n+                    is.read();\n+                    long l2 = System.currentTimeMillis();\n+                    long diff = (l2 - l1) \/ 1000;\n+                    \/*\n+                     * timeout is set to 20 seconds. If bug is still present\n+                     * then the timeout will occur the first time the keep alive\n+                     * thread wakes up which is after 5 seconds. This allows\n+                     * very large leeway with slow running hardware.\n+                     *\n+                     * Same behavior should occur in case of max=-1 with the bug\n+                     *\/\n+                    if (diff < 19) {\n+                        passed.complete(false);\n+                    } else {\n+                        passed.complete(true);\n+                    }\n+                    System.out.println(\"Time diff = \" + diff);\n+                }\n+            } catch (Throwable t) {\n+                System.err.println(\"Server exception terminating: \" + t);\n+                passed.completeExceptionally(t);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Server server = new Server(args[0]);\n+        int port = server.getPort();\n+        server.start();\n+        URL url = new URL(\"http:\/\/127.0.0.1:\" + Integer.toString(port) + \"\/\");\n+        HttpURLConnection urlc = (HttpURLConnection) url.openConnection();\n+        InputStream i = urlc.getInputStream();\n+        int c,count=0;\n+        byte[] buf = new byte[256];\n+        while ((c=i.read(buf)) != -1) {\n+            count+=c;\n+        }\n+        i.close();\n+        System.out.println(\"Read \" + count );\n+        try {\n+            if (!passed.get()) {\n+                throw new RuntimeException(\"Test failed\");\n+            } else {\n+                System.out.println(\"Test passed\");\n+            }\n+        } finally {\n+            server.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/B8291637.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}