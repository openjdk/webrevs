{"files":[{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_INTEGRALCONSTANT_HPP\n-#define SHARE_METAPROGRAMMING_INTEGRALCONSTANT_HPP\n-\n-\n-\/\/ An Integral Constant is a class providing a compile-time value of an\n-\/\/ integral type.  An Integral Constant is also a nullary metafunction,\n-\/\/ returning itself.  An integral constant object is implicitly\n-\/\/ convertible to the associated value.\n-\/\/\n-\/\/ A type n is a model of Integral Constant if it meets the following\n-\/\/ requirements:\n-\/\/\n-\/\/ n::ValueType                : The integral type of n::value\n-\/\/ n::value                    : An integral constant expression\n-\/\/ n::type                     : IsSame<n::type, n>::value is true\n-\/\/ n::value_type const c = n() : c == n::value\n-\n-\/\/ A model of the Integer Constant concept.\n-\/\/ T is an integral type, and is the value_type.\n-\/\/ v is an integral constant, and is the value.\n-template<typename T, T v>\n-struct IntegralConstant {\n-  typedef T value_type;\n-  static const value_type value = v;\n-  typedef IntegralConstant<T, v> type;\n-  operator value_type() { return value; }\n-};\n-\n-\/\/ A bool valued IntegralConstant whose value is true.\n-typedef IntegralConstant<bool, true> TrueType;\n-\n-\/\/ A bool valued IntegralConstant whose value is false.\n-typedef IntegralConstant<bool, false> FalseType;\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_INTEGRALCONSTANT_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/integralConstant.hpp","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/integralConstant.hpp\"\n@@ -64,1 +63,1 @@\n-  struct MustConvertCompressedOop: public IntegralConstant<bool,\n+  struct MustConvertCompressedOop: public std::integral_constant<bool,\n@@ -89,1 +88,1 @@\n-  struct PossiblyLockedAccess: public IntegralConstant<bool, false> {};\n+  struct PossiblyLockedAccess: public std::false_type {};\n@@ -91,1 +90,1 @@\n-  struct PossiblyLockedAccess: public IntegralConstant<bool, (sizeof(T) > 4)> {};\n+  struct PossiblyLockedAccess: public std::integral_constant<bool, (sizeof(T) > 4)> {};\n@@ -614,1 +613,1 @@\n-    struct CanHardwireRaw: public IntegralConstant<\n+    struct CanHardwireRaw: public std::integral_constant<\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+#include <type_traits>\n+\n@@ -254,1 +256,1 @@\n-  template<typename T> struct IsHeapWordSized: public IntegralConstant<bool, sizeof(T) == HeapWordSize> { };\n+  template<typename T> struct IsHeapWordSized: public std::integral_constant<bool, sizeof(T) == HeapWordSize> { };\n@@ -337,1 +339,1 @@\n-template<> struct RawAccessBarrierArrayCopy::IsHeapWordSized<void>: public IntegralConstant<bool, false> { };\n+template<> struct RawAccessBarrierArrayCopy::IsHeapWordSized<void>: public std::false_type { };\n","filename":"src\/hotspot\/share\/oops\/accessBackend.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/integralConstant.hpp\"\n@@ -33,0 +32,2 @@\n+#include <type_traits>\n+\n@@ -44,1 +45,1 @@\n-struct HasDecorator: public IntegralConstant<bool, (decorators & decorator) != 0> {};\n+struct HasDecorator: public std::integral_constant<bool, (decorators & decorator) != 0> {};\n","filename":"src\/hotspot\/share\/oops\/accessDecorators.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"metaprogramming\/integralConstant.hpp\"\n@@ -33,0 +32,2 @@\n+#include <type_traits>\n+\n@@ -359,1 +360,1 @@\n-struct PrimitiveConversions::Translate<markWord> : public TrueType {\n+struct PrimitiveConversions::Translate<markWord> : public std::true_type {\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include <type_traits>\n+\n@@ -80,1 +82,1 @@\n-struct PrimitiveConversions::Translate<OopHandle> : public TrueType {\n+struct PrimitiveConversions::Translate<OopHandle> : public std::true_type {\n","filename":"src\/hotspot\/share\/oops\/oopHandle.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"metaprogramming\/integralConstant.hpp\"\n@@ -32,0 +31,2 @@\n+#include <type_traits>\n+\n@@ -110,1 +111,1 @@\n-struct PrimitiveConversions::Translate<oop> : public TrueType {\n+struct PrimitiveConversions::Translate<oop> : public std::true_type {\n@@ -118,25 +119,25 @@\n-#define DEF_OOP(type)                                                      \\\n-   class type##OopDesc;                                                    \\\n-   class type##Oop : public oop {                                          \\\n-     public:                                                               \\\n-       type##Oop() : oop() {}                                              \\\n-       type##Oop(const type##Oop& o) : oop(o) {}                           \\\n-       type##Oop(const oop& o) : oop(o) {}                                 \\\n-       type##Oop(type##OopDesc* o) : oop((oopDesc*)o) {}                   \\\n-       operator type##OopDesc* () const { return (type##OopDesc*)obj(); }  \\\n-       type##OopDesc* operator->() const {                                 \\\n-            return (type##OopDesc*)obj();                                  \\\n-       }                                                                   \\\n-       type##Oop& operator=(const type##Oop& o) {                          \\\n-            oop::operator=(o);                                             \\\n-            return *this;                                                  \\\n-       }                                                                   \\\n-   };                                                                      \\\n-                                                                           \\\n-   template<>                                                              \\\n-   struct PrimitiveConversions::Translate<type##Oop> : public TrueType {   \\\n-     typedef type##Oop Value;                                              \\\n-     typedef type##OopDesc* Decayed;                                       \\\n-                                                                           \\\n-     static Decayed decay(Value x) { return (type##OopDesc*)x.obj(); }     \\\n-     static Value recover(Decayed x) { return type##Oop(x); }              \\\n+#define DEF_OOP(type)                                                          \\\n+   class type##OopDesc;                                                        \\\n+   class type##Oop : public oop {                                              \\\n+     public:                                                                   \\\n+       type##Oop() : oop() {}                                                  \\\n+       type##Oop(const type##Oop& o) : oop(o) {}                               \\\n+       type##Oop(const oop& o) : oop(o) {}                                     \\\n+       type##Oop(type##OopDesc* o) : oop((oopDesc*)o) {}                       \\\n+       operator type##OopDesc* () const { return (type##OopDesc*)obj(); }      \\\n+       type##OopDesc* operator->() const {                                     \\\n+            return (type##OopDesc*)obj();                                      \\\n+       }                                                                       \\\n+       type##Oop& operator=(const type##Oop& o) {                              \\\n+            oop::operator=(o);                                                 \\\n+            return *this;                                                      \\\n+       }                                                                       \\\n+   };                                                                          \\\n+                                                                               \\\n+   template<>                                                                  \\\n+   struct PrimitiveConversions::Translate<type##Oop> : public std::true_type { \\\n+     typedef type##Oop Value;                                                  \\\n+     typedef type##OopDesc* Decayed;                                           \\\n+                                                                               \\\n+     static Decayed decay(Value x) { return (type##OopDesc*)x.obj(); }         \\\n+     static Value recover(Decayed x) { return type##Oop(x); }                  \\\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"metaprogramming\/integralConstant.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}