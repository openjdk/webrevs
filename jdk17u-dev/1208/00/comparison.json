{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,5 @@\n+    private static final int FEATURE;\n+    static {\n+        FEATURE = Runtime.version().feature();\n+        assert FEATURE >= 10;\n+    }\n@@ -50,15 +55,21 @@\n-        return new Object[][]{\n-                { 53,   0,  Set.of() },                      \/\/ JDK 9\n-                { 53,   0,  Set.of(STATIC) },\n-                { 53,   0,  Set.of(TRANSITIVE) },\n-                { 53,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 54,   0,  Set.of() },                      \/\/ JDK 10\n-                { 55,   0,  Set.of() },                      \/\/ JDK 11\n-                { 56,   0,  Set.of() },                      \/\/ JDK 12\n-                { 57,   0,  Set.of() },                      \/\/ JDK 13\n-                { 58,   0,  Set.of() },                      \/\/ JDK 14\n-                { 59,   0,  Set.of() },                      \/\/ JDK 15\n-                { 60,   0,  Set.of() },                      \/\/ JDK 16\n-                { 61,   0,  Set.of() },                      \/\/ JDK 17\n-        };\n+        \/*\n+         * There are four test cases for JDK 9 and then one test case\n+         * for each subsequent JDK version from JDK 10 to the current\n+         * feature release for a total of (4 + (FEATURE - 9) ) =>\n+         * (feature - 5) rows.\n+         *\/\n+        Object[][] result = new Object[(FEATURE - 5)][];\n+\n+        \/\/ Class file version of JDK 9 is 53.0\n+        result[0] = new Object[]{ 53, 0, Set.of()};\n+        result[1] = new Object[]{ 53, 0, Set.of(STATIC) };\n+        result[2] = new Object[]{ 53, 0, Set.of(TRANSITIVE) };\n+        result[3] = new Object[]{ 53, 0, Set.of(STATIC, TRANSITIVE) };\n+\n+        \/\/ Major class file version of JDK N is 44 + n. Create rows\n+        \/\/ for JDK 10 through FEATURE.\n+        for (int i = 4; i < (FEATURE - 5) ; i++) {\n+            result[i] = new Object[]{i + 50, 0, Set.of()};\n+        }\n+\n+        return result;\n@@ -70,39 +81,24 @@\n-        return new Object[][]{\n-                { 50,   0,  Set.of()},                       \/\/ JDK 6\n-                { 51,   0,  Set.of()},                       \/\/ JDK 7\n-                { 52,   0,  Set.of()},                       \/\/ JDK 8\n-\n-                { 54,   0,  Set.of(STATIC) },                \/\/ JDK 10\n-                { 54,   0,  Set.of(TRANSITIVE) },\n-                { 54,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 55,   0,  Set.of(STATIC) },                \/\/ JDK 11\n-                { 55,   0,  Set.of(TRANSITIVE) },\n-                { 55,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 56,   0,  Set.of(STATIC) },                \/\/ JDK 12\n-                { 56,   0,  Set.of(TRANSITIVE) },\n-                { 56,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 57,   0,  Set.of(STATIC) },                \/\/ JDK 13\n-                { 57,   0,  Set.of(TRANSITIVE) },\n-                { 57,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 58,   0,  Set.of(STATIC) },                \/\/ JDK 14\n-                { 58,   0,  Set.of(TRANSITIVE) },\n-                { 58,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 59,   0,  Set.of(STATIC) },                \/\/ JDK 15\n-                { 59,   0,  Set.of(TRANSITIVE) },\n-                { 59,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 60,   0,  Set.of(STATIC) },                \/\/ JDK 16\n-                { 60,   0,  Set.of(TRANSITIVE) },\n-                { 60,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 61,   0,  Set.of(STATIC) },                \/\/ JDK 17\n-                { 61,   0,  Set.of(TRANSITIVE) },\n-                { 61,   0,  Set.of(STATIC, TRANSITIVE) },\n-\n-                { 62,   0,  Set.of()},                       \/\/ JDK 18\n-        };\n+        \/*\n+         * There are three test cases for releases prior to JDK 9,\n+         * three test cases for each JDK version from JDK 10 to the\n+         * current feature release, plus one addition test case for\n+         * the next release for a total of (3 + (FEATURE - 9) * 3 + 1)\n+         * rows.\n+         *\/\n+        int unsupportedCount = 3 + (FEATURE - 9)*3 + 1;\n+        Object[][] result = new Object[unsupportedCount][];\n+\n+        result[0] = new Object[]{50, 0, Set.of()}; \/\/ JDK 6\n+        result[1] = new Object[]{51, 0, Set.of()}; \/\/ JDK 7\n+        result[2] = new Object[]{52, 0, Set.of()}; \/\/ JDK 8\n+\n+        for (int i = 10; i <= FEATURE ; i++) {\n+            int base = 3 + (i-10)*3;\n+            \/\/ Major class file version of JDK N is 44+n\n+            result[base]     = new Object[]{i + 44, 0, Set.of(STATIC)};\n+            result[base + 1] = new Object[]{i + 44, 0, Set.of(TRANSITIVE)};\n+            result[base + 2] = new Object[]{i + 44, 0, Set.of(STATIC, TRANSITIVE)};\n+        }\n+\n+        result[unsupportedCount - 1] = new Object[]{FEATURE+1+44, 0, Set.of()};\n+        return result;\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":51,"deletions":55,"binary":false,"changes":106,"status":"modified"}]}