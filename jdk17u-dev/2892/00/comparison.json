{"files":[{"patch":"@@ -595,1 +595,0 @@\n-            SystemTest.suite(),\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * Written by Doug Lea with assistance from members of JCP JSR-166\n- * Expert Group and released to the public domain, as explained at\n- * http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\n- * Other contributors include Andrew Wright, Jeffrey Hayes,\n- * Pat Fisher, Mike Judd.\n- *\/\n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n-public class SystemTest extends JSR166TestCase {\n-    public static void main(String[] args) {\n-        main(suite(), args);\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(SystemTest.class);\n-    }\n-\n-    \/**\n-     * Worst case rounding for millisecs; set for 60 cycle millis clock.\n-     * This value might need to be changed on JVMs with coarser\n-     * System.currentTimeMillis clocks.\n-     *\/\n-    static final long MILLIS_ROUND = 17;\n-\n-    \/**\n-     * Nanos between readings of millis is no longer than millis (plus\n-     * possible rounding), and vice versa.\n-     * This shows only that nano timing not (much) worse than milli.\n-     *\/\n-    public void testNanoTime() throws InterruptedException {\n-        long m0 = System.currentTimeMillis();\n-        long n0 = System.nanoTime();\n-        Thread.sleep(1);\n-        long m1 = System.currentTimeMillis();\n-        long n1 = System.nanoTime();\n-        Thread.sleep(50);       \/\/ avoid possibly scaled SHORT_DELAY_MS\n-        long m2 = System.currentTimeMillis();\n-        long n2 = System.nanoTime();\n-        Thread.sleep(1);\n-        long m3 = System.currentTimeMillis();\n-        long n3 = System.nanoTime();\n-        assertTrue((n2 - n1) \/ 1_000_000 <= m3 - m0 + MILLIS_ROUND);\n-        assertTrue(m2 - m1 <= (n3 - n0) \/ 1_000_000 + MILLIS_ROUND);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/SystemTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"}]}