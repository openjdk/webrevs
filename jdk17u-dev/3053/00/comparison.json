{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -28,1 +29,1 @@\n-import java.lang.reflect.AccessibleObject;\n+import java.lang.module.ModuleReference;\n@@ -46,1 +47,1 @@\n-import java.util.Collections;\n+import java.util.Deque;\n@@ -48,0 +49,2 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n@@ -49,0 +52,1 @@\n+import java.util.LinkedList;\n@@ -50,0 +54,1 @@\n+import java.util.Map;\n@@ -55,1 +60,0 @@\n-import java.util.stream.Stream;\n@@ -61,1 +65,1 @@\n- * @bug 8065552\n+ * @bug 8065552 8309532\n@@ -286,1 +290,1 @@\n-         * Filter deployment modules\n+         * Filter JVMCI module and its transitive dependences\n@@ -289,4 +293,24 @@\n-            Set<String> mods = Set.of(\"javafx.deploy\", \"jdk.deploy\", \"jdk.plugin\", \"jdk.javaws\",\n-                \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n-                \/\/ exported to jdk.internal.vm.compiler\n-                \"jdk.internal.vm.compiler\"\n+            \/\/ Build module graph and inverse dependences\n+            Set<String> modules = new HashSet<>();\n+            Map<String, Set<String>> moduleToDeps = new HashMap<>();\n+            Map<String, Set<String>> inverseDeps = new HashMap<>();\n+            for (ModuleReference mref : ModuleFinder.ofSystem().findAll()) {\n+                var md = mref.descriptor();\n+                modules.add(md.name());\n+                Set<String> deps = md.requires().stream().map(ModuleDescriptor.Requires::name)\n+                                                .collect(Collectors.toSet());\n+                moduleToDeps.put(md.name(), deps);\n+                inverseDeps.put(md.name(), new HashSet<>());\n+            }\n+\n+            \/\/ reverse edges\n+            moduleToDeps.keySet().forEach(u -> {\n+                moduleToDeps.get(u)\n+                            .forEach(v -> inverseDeps.get(v)\n+                                                     .add(u));\n+            });\n+\n+            Set<String> mods = Set.of(\n+                    \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n+                    \/\/ exported to jdk.internal.vm.compiler\n+                    \"jdk.internal.vm.compiler\", \"jdk.internal.vm.compiler.management\"\n@@ -294,4 +318,30 @@\n-            return ModuleFinder.ofSystem().findAll().stream()\n-                               .map(mref -> mref.descriptor().name())\n-                               .filter(mn -> !mods.contains(mn))\n-                               .collect(Collectors.toSet());\n+            \/\/ Filters all modules that directly or indirectly require jdk.internal.vm.compiler\n+            \/\/ and jdk.internal.vm.compiler.management, as these are upgradeable and\n+            \/\/ also provide APIs to add qualified exports dynamically\n+            Set<String> filters = mods.stream().flatMap(mn -> findDeps(mn, inverseDeps).stream())\n+                                      .collect(Collectors.toSet());\n+            System.out.println(\"Filtered modules: \" + filters);\n+            return modules.stream()\n+                          .filter(mn -> !filters.contains(mn))\n+                          .collect(Collectors.toSet());\n+        }\n+\n+        \/*\n+         * Traverse the graph to find all the dependences from the given name.\n+         *\/\n+        static Set<String> findDeps(String name, Map<String, Set<String>> graph) {\n+            Set<String> visited = new HashSet<>();\n+            Deque<String> deque = new LinkedList<>();\n+            deque.add(name);\n+            String node;\n+            while (!deque.isEmpty()) {\n+                node = deque.pop();\n+                if (visited.contains(node))\n+                    continue;\n+\n+                visited.add(node);\n+                Set<String> deps = graph.get(node);\n+                if (deps != null)\n+                    deque.addAll(deps);\n+            }\n+            return visited;\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/FieldSetAccessibleTest.java","additions":64,"deletions":14,"binary":false,"changes":78,"status":"modified"}]}