{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import java.util.HexFormat;\n+\n@@ -152,1 +154,2 @@\n-                  toHexString(expected) + \" Got: \"+ toHexString(result));\n+                  HexFormat.of().withDelimiter(\" \").formatHex(expected.getBytes())\n+                    + \" Got: \"+ HexFormat.of().withDelimiter(\" \").formatHex(result.getBytes()));\n@@ -194,3 +197,6 @@\n-                errln(\"FAIL input: \" + toHexString(input) + \"\\n\" +\n-                      \" decompose: \" + toHexString(result) + \"\\n\" +\n-                      \"  expected: \" + toHexString(output));\n+                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(input.getBytes()) + \"\\n\" +\n+                      \" decompose: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(result.getBytes()) + \"\\n\" +\n+                      \"  expected: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()));\n@@ -201,3 +207,6 @@\n-                errln(\"FAIL input: \" + toHexString(input) + \"\\n\" +\n-                      \"   compose: \" + toHexString(result) + \"\\n\" +\n-                      \"  expected: \" + toHexString(output));\n+                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(input.getBytes()) + \"\\n\" +\n+                      \"   compose: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()) + \"\\n\" +\n+                      \"  expected: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()));\n@@ -234,2 +243,4 @@\n-                logln(\"Ok: \" + toHexString(a) + \" x COMPOSE_COMPAT => \" +\n-                      toHexString(b));\n+                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(a.getBytes()) + \" x COMPOSE_COMPAT => \" +\n+                      HexFormat.of().withDelimiter(\" \")\n+                              .formatHex(b.getBytes()));\n@@ -237,2 +248,6 @@\n-                errln(\"FAIL: \" + toHexString(a) + \" x COMPOSE_COMPAT => \" +\n-                      toHexString(b) + \", expect \" + toHexString(exp));\n+                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(b.getBytes()) + \" x COMPOSE_COMPAT => \" +\n+                      HexFormat.of().withDelimiter(\" \")\n+                              .formatHex(a.getBytes()) + \", expect \" +\n+                        HexFormat.of().withDelimiter(\" \")\n+                                .formatHex(exp.getBytes()));\n@@ -244,2 +259,2 @@\n-                logln(\"Ok: \" + toHexString(b) + \" x DECOMP => \" +\n-                      toHexString(a));\n+                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                      HexFormat.of().withDelimiter(\" \").formatHex(a.getBytes()));\n@@ -247,2 +262,2 @@\n-                errln(\"FAIL: \" + toHexString(b) + \" x DECOMP => \" +\n-                      toHexString(a) + \", expect \" + toHexString(exp));\n+                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                      HexFormat.of().withDelimiter(\" \").formatHex(a.getBytes()) + \", expect \" + HexFormat.of().withDelimiter(\" \").formatHex(exp.getBytes()));\n@@ -385,3 +400,6 @@\n-            errln(\"FAIL: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for the latest Unicode\");\n+            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(c.getBytes()) + \" for the latest Unicode\");\n@@ -389,3 +407,6 @@\n-            logln(\"Ok: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for the latest Unicode\");\n+            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(c.getBytes()) + \" for the latest Unicode\");\n@@ -397,3 +418,4 @@\n-            errln(\"FAIL: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for Unicode 3.2.0\");\n+            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(c.getBytes()) + \" for Unicode 3.2.0\");\n@@ -401,3 +423,4 @@\n-            logln(\"Ok: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for Unicode 3.2.0\");\n+            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(c.getBytes()) + \" for Unicode 3.2.0\");\n@@ -575,1 +598,2 @@\n-            logln(\"Normalizing '\" + input + \"' (\" + toHexString(input) + \")\" );\n+            logln(\"Normalizing '\" + input + \"' (\" + HexFormat.of()\n+                    .withDelimiter(\" \").formatHex(input.getBytes()) + \")\" );\n@@ -582,2 +606,4 @@\n-                    + \" expected '\" + expect + \"' (\" + toHexString(expect) + \")\"\n-                    + \" but got '\" + output + \"' (\" + toHexString(output) + \")\"\n+                    + \" expected '\" + expect + \"' (\" + HexFormat.of()\n+                        .withDelimiter(\" \").formatHex(expect.getBytes()) + \")\"\n+                    + \" but got '\" + output + \"' (\" + HexFormat.of()\n+                        .withDelimiter(\" \").formatHex(output.getBytes()) + \")\"\n","filename":"test\/jdk\/java\/text\/Normalizer\/ICUBasicTest.java","additions":56,"deletions":30,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Comparator;\n@@ -52,1 +53,0 @@\n-\n@@ -54,0 +54,2 @@\n+        Class<? extends IntlTest> testClass = getClass();\n+        testName = testClass.getCanonicalName();\n@@ -55,1 +57,1 @@\n-        Method[] methods = getClass().getDeclaredMethods();\n+        Method[] methods = testClass.getDeclaredMethods();\n@@ -70,2 +72,1 @@\n-    protected void run(String[] args) throws Exception\n-    {\n+    protected void run(String[] args) throws Exception {\n@@ -76,37 +77,2 @@\n-\n-        \/\/ Parse the test arguments.  They can be either the flag\n-        \/\/ \"-verbose\" or names of test methods. Create a list of\n-        \/\/ tests to be run.\n-        List<Method> testsToRun = new ArrayList<>(args.length);\n-        for (String arg : args) {\n-            switch (arg) {\n-            case \"-verbose\":\n-                verbose = true;\n-                break;\n-            case \"-prompt\":\n-                prompt = true;\n-                break;\n-            case \"-nothrow\":\n-                nothrow = true;\n-                break;\n-            case \"-exitcode\":\n-                exitCode = true;\n-                break;\n-            default:\n-                Method m = testMethods.get(arg);\n-                if (m == null) {\n-                    System.out.println(\"Method \" + arg + \": not found\");\n-                    usage();\n-                    return;\n-                }\n-                testsToRun.add(m);\n-                break;\n-            }\n-        }\n-\n-        \/\/ If no test method names were given explicitly, run them all.\n-        if (testsToRun.isEmpty()) {\n-            testsToRun.addAll(testMethods.values());\n-        }\n-\n-        System.out.println(getClass().getName() + \" {\");\n+        List<Method> testsToRun = configureTestsAndArgs(args);\n+        System.out.println(testName + \" {\");\n@@ -118,3 +84,2 @@\n-\n-            writeTestName(testMethod.getName());\n-\n+            String testName = testMethod.getName();\n+            writeTestName(testName);\n@@ -122,1 +87,1 @@\n-                testMethod.invoke(this, new Object[0]);\n+                testMethod.invoke(this);\n@@ -124,1 +89,1 @@\n-                errln(\"Can't acces test method \" + testMethod.getName());\n+                errln(\"Can't access test method \" + testName);\n@@ -126,3 +91,5 @@\n-                errln(\"Uncaught exception thrown in test method \"\n-                        + testMethod.getName());\n-                e.getTargetException().printStackTrace(this.log);\n+                \/\/ Log exception first, that way if -nothrow is\n+                \/\/ not an arg, the original exception is still logged\n+                logExc(e);\n+                errln(String.format(\"$$$ Uncaught exception thrown in %s,\" +\n+                        \" see above for cause\", testName));\n@@ -133,2 +100,0 @@\n-        writeTestResult(errorCount);\n-\n@@ -143,6 +108,31 @@\n-        if (nothrow) {\n-            if (exitCode) {\n-                System.exit(errorCount);\n-            }\n-            if (errorCount > 0) {\n-                throw new IllegalArgumentException(\"encountered \" + errorCount + \" errors\");\n+        if (exitCode) {\n+            System.exit(errorCount);\n+        }\n+        if (errorCount > 0) {\n+            throw new RuntimeException(String.format(\n+                    \"$$$ %s FAILED with %s failures%n\", testName, errorCount));\n+        } else {\n+            log.println(String.format(\"\\t$$$ %s PASSED%n\", testName));\n+        }\n+    }\n+\n+    private List<Method> configureTestsAndArgs(String[] args) {\n+        \/\/ Parse the test arguments. They can be either the flag\n+        \/\/ \"-verbose\" or names of test methods. Create a list of\n+        \/\/ tests to be run.\n+        List<Method> testsToRun = new ArrayList<>(args.length);\n+        for (String arg : args) {\n+            switch (arg) {\n+                case \"-verbose\" -> verbose = true;\n+                case \"-prompt\" -> prompt = true;\n+                case \"-nothrow\" -> nothrow = true;\n+                case \"-exitcode\" -> exitCode = true;\n+                default -> {\n+                    Method m = testMethods.get(arg);\n+                    if (m == null) {\n+                        System.out.println(\"Method \" + arg + \": not found\");\n+                        usage();\n+                        return testsToRun;\n+                    }\n+                    testsToRun.add(m);\n+                }\n@@ -151,0 +141,7 @@\n+        \/\/ If no test method names were given explicitly, run them all.\n+        if (testsToRun.isEmpty()) {\n+            testsToRun.addAll(testMethods.values());\n+        }\n+        \/\/ Arbitrarily sort the tests, so that they are run in the same order every time\n+        testsToRun.sort(Comparator.comparing(Method::getName));\n+        return testsToRun;\n@@ -180,0 +177,5 @@\n+    private void logExc(InvocationTargetException ite) {\n+        indent(indentLevel);\n+        ite.getTargetException().printStackTrace(this.log);\n+    }\n+\n@@ -227,14 +229,0 @@\n-    \/*\n-     * Returns a spece-delimited hex String.\n-     *\/\n-    protected static String toHexString(String s) {\n-        StringBuilder sb = new StringBuilder(\" \");\n-\n-        for (int i = 0; i < s.length(); i++) {\n-            sb.append(Integer.toHexString(s.charAt(i)));\n-            sb.append(' ');\n-        }\n-\n-        return sb.toString();\n-    }\n-\n@@ -261,1 +249,1 @@\n-\n+    private final String testName;\n","filename":"test\/jdk\/java\/text\/testlib\/IntlTest.java","additions":61,"deletions":73,"binary":false,"changes":134,"status":"modified"}]}