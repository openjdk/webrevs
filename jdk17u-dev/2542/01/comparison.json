{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.jstatd\/Launcher.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.ObjectInputFilter;\n@@ -50,0 +51,2 @@\n+    private static final String rmiFilterPattern = \"sun.jvmstat.monitor.remote.RemoteVm;com.sun.proxy.jdk.proxy*;java.lang.reflect.Proxy;java.rmi.server.RemoteObjectInvocationHandler;java.rmi.server.RemoteObject;!*\";\n+\n@@ -75,1 +78,0 @@\n-    @SuppressWarnings({\"removal\",\"deprecation\"}) \/\/ Use of RMISecurityManager\n@@ -135,4 +137,0 @@\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(new RMISecurityManager());\n-        }\n-\n@@ -152,2 +150,0 @@\n-            \/\/ use 1.5.0 dynamically generated subs.\n-            System.setProperty(\"java.rmi.server.ignoreSubClasses\", \"true\");\n@@ -155,0 +151,1 @@\n+            ObjectInputFilter filter = ObjectInputFilter.Config.createFilter(rmiFilterPattern);\n@@ -156,1 +153,1 @@\n-                    remoteHost, rmiPort);\n+                    remoteHost, rmiPort, filter);\n","filename":"src\/jdk.jstatd\/share\/classes\/sun\/tools\/jstatd\/Jstatd.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy\n+ * jstatd -J-XX:+UsePerfData\n@@ -247,5 +247,5 @@\n-     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy\n-     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port\n-     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port -r rmiport\n-     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -n serverName\n-     * jstatd -J-XX:+UsePerfData -J-Djava.security.policy=all.policy -p port -n serverName\n+     * jstatd -J-XX:+UsePerfData\n+     * jstatd -J-XX:+UsePerfData -p port\n+     * jstatd -J-XX:+UsePerfData -p port -r rmiport\n+     * jstatd -J-XX:+UsePerfData -n serverName\n+     * jstatd -J-XX:+UsePerfData -p port -n serverName\n@@ -258,4 +258,0 @@\n-        File policy = new File(testSrc, \"all.policy\");\n-        assertTrue(policy.exists() && policy.isFile(),\n-                \"Security policy \" + policy.getAbsolutePath() + \" does not exist or not a file\");\n-        launcher.addVMArg(\"-Djava.security.policy=\" + policy.getAbsolutePath());\n@@ -361,5 +357,2 @@\n-        \/\/ These asserts are disabled until JDK-8272317 is backported:\n-        \/\/ otherwise there are SM deprecation notices that fail them.\n-        \/\/ assertEquals(stdout.size(), 1, \"Output should contain one line\");\n-        \/\/ assertTrue(stdout.get(0).startsWith(\"jstatd started\"), \"List should start with 'jstatd started'\");\n-        output.shouldContain(\"jstatd started\");\n+        assertEquals(stdout.size(), 1, \"Output should contain one line\");\n+        assertTrue(stdout.get(0).startsWith(\"jstatd started\"), \"List should start with 'jstatd started'\");\n","filename":"test\/jdk\/sun\/tools\/jstatd\/JstatdTest.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-   permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/sun\/tools\/jstatd\/all.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"}]}