{"files":[{"patch":"@@ -398,0 +398,3 @@\n+        Rectangle bounds = table.getBounds();\n+        bounds.x = bounds.y = 0;\n+\n@@ -399,1 +402,1 @@\n-        Rectangle visibleBounds = clip.intersection(table.getBounds());\n+        Rectangle visibleBounds = clip.intersection(bounds);\n@@ -401,2 +404,2 @@\n-        Point lowerRight = new Point(visibleBounds.x + visibleBounds.width,\n-                                     visibleBounds.y + visibleBounds.height);\n+        Point lowerRight = new Point(visibleBounds.x + visibleBounds.width - 1,\n+                                     visibleBounds.y + visibleBounds.height - 1);\n@@ -413,1 +416,1 @@\n-        for(int visrow = rMin; visrow < rMax; visrow++) {\n+        for(int visrow = rMin; visrow <= rMax; visrow++) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TablePrintable.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1887,17 +1887,0 @@\n-        if (comp != null && !(comp instanceof JViewport) && !(comp instanceof JScrollPane)) {\n-            \/\/ We did rMax-1 to paint the same number of rows that are drawn on console\n-            \/\/ otherwise 1 extra row is printed per page than that are displayed\n-            \/\/ when there is no scrollPane and we do printing of table\n-            \/\/ but not when rmax is already pointing to index of last row\n-            \/\/ and if there is any selected rows\n-            if (rMax != (table.getRowCount() - 1) &&\n-                    (table.getSelectedRow() == -1)) {\n-                \/\/ Do not decrement rMax if rMax becomes\n-                \/\/ less than or equal to rMin\n-                \/\/ else cells will not be painted\n-                if (rMax - rMin > 1) {\n-                    rMax = rMax - 1;\n-                }\n-            }\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,221 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8236907\n+ * @summary  Verifies if JTable last row is visible.\n+ * @run main LastVisibleRow\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.event.InputEvent;\n+import java.awt.image.BufferedImage;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+public class LastVisibleRow {\n+    static JFrame frame;\n+    static JTable table;\n+    static Robot testRobot;\n+\n+    public static void main(String[] args) throws Exception {\n+        Point clkPoint;\n+        try {\n+            testRobot = new Robot();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+\n+                public void run() {\n+                    createAndShowGUI();\n+                }\n+            });\n+            testRobot.delay(1000);\n+            testRobot.waitForIdle();\n+            BufferedImage bufferedImageBefore = testRobot.createScreenCapture(getCaptureRect());\n+            testRobot.delay(1000);\n+            testRobot.waitForIdle();\n+            clkPoint = getMousePosition();\n+            mouseEvents(clkPoint);\n+            testRobot.waitForIdle();\n+            clearSelect();\n+            testRobot.waitForIdle();\n+            BufferedImage bufferedImageAfter = testRobot.createScreenCapture(getCaptureRect());\n+            testRobot.delay(1000);\n+\n+            if (!compare(bufferedImageBefore, bufferedImageAfter)) {\n+                throw new RuntimeException(\"Test Case Failed!!\");\n+            }\n+        } finally {\n+            if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+\n+    \/*\n+     *\n+     * Get clickable screen point for particular row and column of a table\n+     * param row   Row Number\n+     * param column    Column Number\n+     * return Point\n+     *\/\n+    private static Point getCellClickPoint(final int row, final int column) {\n+        Point result;\n+\n+        Rectangle rect = table.getCellRect(row, column, false);\n+        Point point = new Point(rect.x + rect.width \/ 2,\n+                rect.y + rect.height \/ 2);\n+        SwingUtilities.convertPointToScreen(point, table);\n+        result = point;\n+\n+        return result;\n+    }\n+\n+    private static void createAndShowGUI() {\n+        final PrintRequestAttributeSet printReqAttr = new HashPrintRequestAttributeSet();\n+        printReqAttr.add(javax.print.attribute.standard.OrientationRequested.LANDSCAPE);\n+        frame = new JFrame();\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        Container contentPane = frame.getContentPane();\n+        JPanel centerPane = new JPanel(new BorderLayout());\n+        centerPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n+        JPanel tablePaneContainer = new JPanel(new BorderLayout());\n+        JPanel tablePane = new JPanel(new BorderLayout());\n+        table = new JTable(new Object[][]{{\"row_1_col_1\", \"row_1_col_2\", \"row_1_col_3\"}, {\"row_2_col_1\", \"row_2_col_2\", \"row_2_col_3\"}, {\"row_3_col_1\", \"row_3_col_2\", \"row_3_col_3\"}, {\"row_4_col_1\", \"row_4_col_2\", \"row_4_col_3\"}}, new String[]{\"Col1\", \"Col2\", \"Col3\"});\n+        table.setPreferredSize(new Dimension(0, (table.getRowHeight() * 3)));\n+\n+        tablePane.add(table.getTableHeader(), BorderLayout.NORTH);\n+        tablePane.add(table, BorderLayout.CENTER);\n+        tablePaneContainer.add(tablePane, BorderLayout.CENTER);\n+        centerPane.add(tablePaneContainer, BorderLayout.NORTH);\n+        contentPane.add(centerPane, BorderLayout.CENTER);\n+        frame.setSize(400, 120);\n+        frame.setVisible(true);\n+        frame.setLocationRelativeTo(null);\n+\n+    }\n+\n+    \/*\n+     *\n+     * mouseEvents for last row click\n+     *\/\n+\n+    private static void mouseEvents(Point clkPnt)  {\n+        testRobot.mouseMove(clkPnt.x, clkPnt.y);\n+        testRobot.delay(50);\n+        testRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        testRobot.delay(50);\n+        testRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        testRobot.delay(50);\n+    }\n+    \/*\n+     *\n+     * getMousePosition Actions for last row click\n+     * returns Point\n+     * throws Exception\n+     *\/\n+\n+    private static Point getMousePosition() throws Exception {\n+        final Point[] clickPoint = new Point[1];\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                clickPoint[0] = getCellClickPoint(2, 0);\n+            }\n+        });\n+        return clickPoint[0];\n+    }\n+\n+    \/*\n+     *\n+     * Clears the selected table row\n+     * throws Exception\n+     *\/\n+\n+    private static void clearSelect() throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                table.getSelectionModel().clearSelection();\n+                table.setFocusable(false);\n+            }\n+        });\n+    }\n+\n+    \/*\n+     * getCaptureRect Method - To Compute the Rectangle for\n+     * Screen Capturing the Last Row for comparison\n+     * return Rectangle\n+     *\/\n+\n+    private static Rectangle getCaptureRect() throws InterruptedException, InvocationTargetException {\n+        final Rectangle[] captureRect = new Rectangle[1];\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                Rectangle cellRect = table.getCellRect(2, 0, true);\n+                Point point = new Point(cellRect.x, cellRect.y);\n+                SwingUtilities.convertPointToScreen(point, table);\n+\n+                captureRect[0] = new Rectangle(point.x, point.y, table.getColumnCount() * cellRect.width, cellRect.height);\n+            }\n+        });\n+        return captureRect[0];\n+    }\n+\n+    \/*\n+     * Compare method - to compare two images.\n+     * param bufferedImage1    Buffered Image Before click\n+     * param bufferedImage2    Buffered Image After click\n+     * return Boolean\n+     *\/\n+\n+    static Boolean compare(BufferedImage bufferedImage1, BufferedImage bufferedImage2) {\n+        if (bufferedImage1.getWidth() == bufferedImage2.getWidth()\n+                && bufferedImage1.getHeight() == bufferedImage2.getHeight()) {\n+            for (int x = 0; x < bufferedImage1.getWidth(); x++) {\n+                for (int y = 0; y < bufferedImage1.getHeight(); y++) {\n+                    if (bufferedImage1.getRGB(x, y) != bufferedImage2.getRGB(x, y)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/8236907\/LastVisibleRow.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"added"}]}