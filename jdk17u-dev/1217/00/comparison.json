{"files":[{"patch":"@@ -85,1 +85,1 @@\n-            \/\/ CLDR's resource bundle has an translated entry for this id.\n+            \/\/ CLDR's resource bundle has a translated entry for this id.\n@@ -94,1 +94,1 @@\n-                                       !TimeZone.getTimeZone(id).useDaylightTime());\n+                                       TimeZone.getTimeZone(id).toZoneId().getRules().isFixedOffset());\n@@ -132,1 +132,1 @@\n-        boolean noDST = !TimeZone.getTimeZone(names[0]).useDaylightTime();\n+        boolean noDST = TimeZone.getTimeZone(names[0]).toZoneId().getRules().isFixedOffset();\n@@ -152,1 +152,1 @@\n-        \/\/ Check parent locale first\n+        \/\/ Check parent locales first\n@@ -156,3 +156,2 @@\n-            if (cands.size() > 1) {\n-                var parentLoc = cands.get(1); \/\/ immediate parent locale\n-                String[] parentNames = super.getDisplayNameArray(id, parentLoc);\n+            for (int i = 1; i < cands.size() ; i++) {\n+                String[] parentNames = super.getDisplayNameArray(id, cands.get(i));\n@@ -166,16 +165,0 @@\n-        \/\/ Check if COMPAT can substitute the name\n-        if (LocaleProviderAdapter.getAdapterPreference().contains(Type.JRE)) {\n-            String[] compatNames = (String[])LocaleProviderAdapter.forJRE()\n-                .getLocaleResources(mapChineseLocale(locale))\n-                .getTimeZoneNames(id);\n-            if (compatNames != null) {\n-                for (int i = INDEX_STD_LONG; i <= INDEX_GEN_SHORT; i++) {\n-                    \/\/ Assumes COMPAT has no empty slots\n-                    if (i == index || !exists(names, i)) {\n-                        names[i] = compatNames[i];\n-                    }\n-                }\n-                return;\n-            }\n-        }\n-\n@@ -192,0 +175,13 @@\n+        \/\/ Check if COMPAT can substitute the name\n+        if (!exists(names, index) &&\n+                LocaleProviderAdapter.getAdapterPreference().contains(Type.JRE)) {\n+            String[] compatNames = (String[])LocaleProviderAdapter.forJRE()\n+                    .getLocaleResources(mapChineseLocale(locale))\n+                    .getTimeZoneNames(id);\n+            if (compatNames != null) {\n+                \/\/ Assumes COMPAT has no empty slots\n+                names[index] = compatNames[index];\n+                return;\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRTimeZoneNameProviderImpl.java","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8275721\n+ * @modules jdk.localedata\n+ * @summary Checks Chinese time zone names for `UTC` using CLDR are consistent\n+ * @run testng\/othervm -Djava.locale.providers=CLDR,COMPAT ChineseTimeZoneNameTest\n+ * @run testng\/othervm -Djava.locale.providers=CLDR ChineseTimeZoneNameTest\n+ *\/\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+\n+import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class ChineseTimeZoneNameTest {\n+\n+    private static final Locale SIMPLIFIED_CHINESE = Locale.forLanguageTag(\"zh-Hans\");\n+    private static final Locale TRADITIONAL_CHINESE = Locale.forLanguageTag(\"zh-Hant\");\n+    private static final ZonedDateTime EPOCH_UTC =\n+        ZonedDateTime.ofInstant(Instant.ofEpochSecond (0), ZoneId.of (\"UTC\"));\n+\n+    @DataProvider(name=\"locales\")\n+    Object[][] data() {\n+        return new Object[][] {\n+            {Locale.CHINESE,                        SIMPLIFIED_CHINESE},\n+            {Locale.SIMPLIFIED_CHINESE,             SIMPLIFIED_CHINESE},\n+            {Locale.forLanguageTag(\"zh-SG\"),        SIMPLIFIED_CHINESE},\n+            {Locale.forLanguageTag(\"zh-Hans-TW\"),   SIMPLIFIED_CHINESE},\n+            {Locale.forLanguageTag(\"zh-HK\"),        TRADITIONAL_CHINESE},\n+            {Locale.forLanguageTag(\"zh-MO\"),        TRADITIONAL_CHINESE},\n+            {Locale.TRADITIONAL_CHINESE,            TRADITIONAL_CHINESE},\n+            {Locale.forLanguageTag(\"zh-Hant-CN\"),   TRADITIONAL_CHINESE},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"locales\")\n+    public void test_ChineseTimeZoneNames(Locale testLoc, Locale resourceLoc) {\n+        assertEquals(DateTimeFormatter.ofPattern(\"z\", testLoc).format(EPOCH_UTC),\n+                DateTimeFormatter.ofPattern(\"z\", resourceLoc).format(EPOCH_UTC));\n+        assertEquals(DateTimeFormatter.ofPattern(\"zzzz\", testLoc).format(EPOCH_UTC),\n+                DateTimeFormatter.ofPattern(\"zzzz\", resourceLoc).format(EPOCH_UTC));\n+    }\n+}\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/ChineseTimeZoneNameTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}