{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -74,2 +76,3 @@\n-        KeyPairGenerator kpairGen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpairGen.initialize(1024);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpairGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpairGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/DES\/KeyWrapping.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,2 +41,3 @@\n-        KeyPairGenerator kpgen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpgen.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpgen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpgen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/DES\/Sealtest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -57,0 +58,1 @@\n+ * @library \/test\/lib\n@@ -266,1 +268,1 @@\n-            kpg.initialize(512);\n+            kpg.initialize(SecurityUtils.getTestKeySize(algo));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/KeyWrap\/TestCipherKeyWrapperTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -70,1 +72,1 @@\n-        byte[] salt = new byte[8];\n+        byte[] salt = new byte[SecurityUtils.getTestSaltSize()];\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBEKeyCleanupTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -46,1 +47,1 @@\n-\n+import jdk.test.lib.security.SecurityUtils;\n@@ -60,2 +61,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", kfp);\n-        kpg.initialize(2048);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, kfp);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/RSA\/TestOAEPPadding.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -62,2 +64,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", kfp);\n-        kpg.initialize(768);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, kfp);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/RSA\/TestOAEPWithParams.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -41,6 +42,6 @@\n-\n-        byte[] aliceSecret = new byte[80];\n-        byte[] bobSecret = new byte[80];\n-\n-        KeyAgreement alice = KeyAgreement.getInstance(\"DiffieHellman\");\n-        KeyAgreement bob = KeyAgreement.getInstance(\"DiffieHellman\");\n+        String kpgAlgorithm = \"DiffieHellman\";\n+        KeyAgreement alice = KeyAgreement.getInstance(kpgAlgorithm);\n+        KeyAgreement bob = KeyAgreement.getInstance(kpgAlgorithm);\n+        int keySizeBits = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        byte[] aliceSecret = new byte[keySizeBits \/ 8];\n+        byte[] bobSecret = new byte[keySizeBits \/ 8];\n@@ -50,2 +51,2 @@\n-            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"DiffieHellman\");\n-            keyPairGen.initialize(512);\n+            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+            keyPairGen.initialize(keySizeBits);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreementPadding.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -48,0 +49,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -112,1 +114,1 @@\n-            \"passPhrase\".toCharArray(), new byte [] { 0 }, 5, 512);\n+            \"passPhrase\".toCharArray(), new byte [SecurityUtils.getTestSaltSize()], 1000, 512);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyFactory\/TestProviderLeak.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -163,1 +164,1 @@\n-        keyGen.initialize(2048);\n+        keyGen.initialize(SecurityUtils.getTestKeySize(algorithm));\n","filename":"test\/jdk\/com\/sun\/org\/apache\/xml\/internal\/security\/SignatureKeyInfo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -58,0 +59,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -81,1 +83,1 @@\n-                kpg.initialize(512);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/KeySpecTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -71,1 +73,1 @@\n-                kpg.initialize(512);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/MultiThreadTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main NegativeTest DiffieHellman SunJCE DiffieHellman 1024\n+ * @run main NegativeTest DiffieHellman SunJCE DiffieHellman 2048\n@@ -62,0 +62,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -96,1 +97,1 @@\n-                kpg.initialize(512);\n+                kpg.initialize(SecurityUtils.getTestKeySize(kpgInit));\n","filename":"test\/jdk\/java\/security\/KeyAgreement\/NegativeTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library ..\/testlibrary\n+ * @library ..\/testlibrary \/test\/lib\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -75,2 +76,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/KeyFactory\/Failover.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -37,2 +39,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/KeyPairGenerator\/GenerateKeypair.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,0 +41,1 @@\n+        String kpgAlgorithm = \"RSA\";\n@@ -40,2 +43,3 @@\n-        new RSAKeyGenParameterSpec (1024, RSAKeyGenParameterSpec.F4);\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\",\n+        new RSAKeyGenParameterSpec (SecurityUtils.getTestKeySize(kpgAlgorithm),\n+                RSAKeyGenParameterSpec.F4);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm,\n","filename":"test\/jdk\/java\/security\/KeyPairGenerator\/GenerateRSAKeyPair.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -40,2 +42,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Provider\/SupportsParameter.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -46,2 +48,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/NONEwithRSA.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -54,0 +56,1 @@\n+            String kpgAlgorithm = \"RSA\";\n@@ -58,1 +61,1 @@\n-                keyGen = KeyPairGenerator.getInstance(\"RSA\", p);\n+                keyGen = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n@@ -60,1 +63,1 @@\n-                keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+                keyGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n@@ -65,1 +68,1 @@\n-            keyGen.initialize(1024);\n+            keyGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/ResetAfterException.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -42,2 +44,3 @@\n-        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DSA\");\n-        keyPairGenerator.initialize(1024);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        keyPairGenerator.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/java\/security\/Signature\/VerifyRangeCheckOverflow.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -41,1 +43,1 @@\n-        cakg.generate(1024);\n+        cakg.generate(SecurityUtils.getTestKeySize(\"RSA\"));\n","filename":"test\/jdk\/java\/security\/cert\/X509Certificate\/GetSigAlgParams.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final byte[] SALT = \"salt\".getBytes();\n+    private static final byte[] SALT = \"16-byte salt val\".getBytes();\n@@ -49,1 +49,1 @@\n-            HexFormat.of().parseHex(\"4B007901B765489ABEAD49D926F721D065A429C1\");\n+            HexFormat.of().parseHex(\"D2CACD3F1D44AF293C704F0B1005338D903C688C\");\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/SecKeyFacSunJCEPrf.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -38,1 +40,2 @@\n-        KeyPair keypair = generateKeyPair(\"RSA\", 1024);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPair keypair = generateKeyPair(kpgAlgorithm, SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/javax\/security\/auth\/Destroyable\/KeyDestructionTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -184,2 +185,4 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(1024);\n+        String kpgRSA = \"RSA\";\n+        String kpgDSA = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgRSA);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgRSA));\n@@ -190,2 +193,1 @@\n-        kpg = KeyPairGenerator.getInstance(\"DSA\");\n-        kpg.initialize(1024);\n+        kpg = KeyPairGenerator.getInstance(kpgDSA);\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -61,2 +62,4 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", p);\n-        kpg.initialize(1024);\n+        String kpgAlgorithm = \"RSA\";\n+        int keySize = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(keySize);\n@@ -116,1 +119,2 @@\n-            c1.update(new byte[256]);\n+            \/\/ Longer buffer size to verify IllegalBlockSizeException is thrown\n+            c1.update(new byte[keySize \/ 4]);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipher.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -60,2 +61,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", p);\n-        kpg.initialize(1024);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipherWrap.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -56,2 +57,3 @@\n-        final int KEY_LEN = 1024;\n-        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(\"RSA\", p);\n+        String kpgAlgorithm = \"RSA\";\n+        final int KEY_LEN = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRawRSACipher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -50,2 +51,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DH\", p);\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DH\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestDH.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -93,2 +95,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/provider\/KeyStore\/CaseSensitiveAliases.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -30,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -43,2 +45,4 @@\n-        TestSignatureOidHelper helper = new TestSignatureOidHelper(\"DSA\",\n-                System.getProperty(\"test.provider.name\", \"SUN\"), 1024, DATA);\n+        String kpgAlgorithm = \"DSA\";\n+        TestSignatureOidHelper helper = new TestSignatureOidHelper(kpgAlgorithm,\n+                System.getProperty(\"test.provider.name\", \"SUN\"),\n+                SecurityUtils.getTestKeySize(kpgAlgorithm), DATA);\n","filename":"test\/jdk\/sun\/security\/provider\/NSASuiteB\/TestSHAwithDSASignatureOids.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -41,0 +43,1 @@\n+        String kpgAlgorithm = \"RSA\";\n@@ -42,1 +45,1 @@\n-                KeyPairGenerator.getInstance(\"RSA\",\n+                KeyPairGenerator.getInstance(kpgAlgorithm,\n@@ -44,1 +47,1 @@\n-        generator.initialize(2048);\n+        generator.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/rsa\/BrokenRSAPrivateCrtKey.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -117,2 +118,3 @@\n-        \/\/ keypair generation is very slow, test only a few short keys\n-        int[] keyLengths = {512, 512, 1024};\n+        String kpgAlgorithm = \"RSA\";\n+        int keySize = SecurityUtils.getTestKeySize(kpgAlgorithm);\n+        int[] keyLengths = {keySize, keySize, keySize + 1024};\n@@ -122,1 +124,1 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", provider);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, provider);\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGenerator.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -38,1 +40,2 @@\n-    private static int keyLen = 512;\n+    private static final String KPG_ALGORITHM = \"RSA\";\n+    private static final int KEY_LENGTH = SecurityUtils.getTestKeySize(KPG_ALGORITHM);\n@@ -43,1 +46,1 @@\n-        BigInteger.ONE.shiftLeft(keyLen - 1).subtract(BigInteger.ONE)\n+        BigInteger.ONE.shiftLeft(KEY_LENGTH - 1).subtract(BigInteger.ONE)\n@@ -58,1 +61,1 @@\n-            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.initialize(new RSAKeyGenParameterSpec(KEY_LENGTH, exponent));\n@@ -70,1 +73,1 @@\n-            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.initialize(new RSAKeyGenParameterSpec(KEY_LENGTH, exponent));\n@@ -84,1 +87,1 @@\n-                KeyPairGenerator.getInstance(\"RSA\",\n+                KeyPairGenerator.getInstance(KPG_ALGORITHM,\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorExponent.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -48,0 +50,1 @@\n+        String kpgAlgorithm = \"RSA\";\n@@ -49,1 +52,1 @@\n-            KeyPairGenerator.getInstance(\"RSA\",\n+            KeyPairGenerator.getInstance(kpgAlgorithm,\n@@ -52,1 +55,1 @@\n-        kpg.initialize(2048, rnd);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm), rnd);\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorInit.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -35,0 +37,2 @@\n+    private static final String KPG_ALGORITHM = \"RSA\";\n+    private static final int KEY_LENGTH = SecurityUtils.getTestKeySize(KPG_ALGORITHM);\n@@ -37,2 +41,2 @@\n-        test(512);\n-        test(513);\n+        test(KEY_LENGTH);\n+        test(KEY_LENGTH + 1);\n@@ -43,1 +47,1 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\",\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(KPG_ALGORITHM,\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorLength.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -37,0 +38,1 @@\n+ * @library \/test\/lib\n@@ -45,1 +47,1 @@\n-        kpg.initialize(new RSAKeyGenParameterSpec(2048,\n+        kpg.initialize(new RSAKeyGenParameterSpec(SecurityUtils.getTestKeySize(\"RSA\"),\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/DefaultParamSpec.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -29,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -43,2 +45,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        kpg.initialize(1024);\n+        String kpgAlgorithm = \"RSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/InitAgain.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -56,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -65,1 +67,1 @@\n-    private static final int KEY_SIZE = 2048;\n+    private static final int KEY_SIZE = SecurityUtils.getTestKeySize(\"RSA\");\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/SerializedPSSKey.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -133,0 +135,1 @@\n+        int keySize = SecurityUtils.getTestKeySize(\"RSA\");\n@@ -138,1 +141,1 @@\n-        kpg.initialize(2048);\n+        kpg.initialize(keySize);\n@@ -146,1 +149,1 @@\n-        kpg.initialize(new RSAKeyGenParameterSpec(2048, pubExp, params));\n+        kpg.initialize(new RSAKeyGenParameterSpec(keySize, pubExp, params));\n@@ -152,1 +155,1 @@\n-        kpg.initialize(new RSAKeyGenParameterSpec(2048, pubExp, params));\n+        kpg.initialize(new RSAKeyGenParameterSpec(keySize, pubExp, params));\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/TestPSSKeySupport.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -55,2 +57,3 @@\n-        CertAndKeyGen cakg = new CertAndKeyGen(\"RSA\", \"SHA256withRSA\");\n-        cakg.generate(1024);\n+        String kpgAlgorithm = \"RSA\";\n+        CertAndKeyGen cakg = new CertAndKeyGen(kpgAlgorithm, \"SHA256withRSA\");\n+        cakg.generate(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NonStandardNames.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,21 @@\n+    \/*\n+     * Key Sizes for various algorithms.\n+     *\/\n+    private enum KeySize{\n+        RSA(2048),\n+        DSA(2048),\n+        DH(2048);\n+\n+        private final int keySize;\n+        KeySize(int keySize) {\n+            this.keySize = keySize;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.valueOf(keySize);\n+        }\n+    }\n+\n+    private final static int DEFAULT_SALTSIZE = 16;\n+\n@@ -110,0 +131,19 @@\n+    \/**\n+     * Returns a salt size for tests\n+     *\/\n+    public static int getTestSaltSize() {\n+        return DEFAULT_SALTSIZE;\n+    }\n+\n+    \/**\n+     * Returns a key size in bits for tests, depending on the specified algorithm\n+     *\/\n+    public static int getTestKeySize(String algo) {\n+        return switch (algo) {\n+            case \"RSA\" -> KeySize.RSA.keySize;\n+            case \"DSA\" -> KeySize.DSA.keySize;\n+            case \"DH\", \"DiffieHellman\" -> KeySize.DH.keySize;\n+            default -> throw new RuntimeException(\"Test key size not defined for \" + algo);\n+        };\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}