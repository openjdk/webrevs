{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,15 @@\n-import java.awt.*;\n-\n-import javax.swing.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.ButtonModel;\n+import javax.swing.CellRendererPane;\n+import javax.swing.DefaultButtonModel;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.UIManager;\n@@ -33,0 +45,8 @@\n+import apple.laf.JRSUIConstants.AlignmentHorizontal;\n+import apple.laf.JRSUIConstants.AlignmentVertical;\n+import apple.laf.JRSUIConstants.ArrowsOnly;\n+import apple.laf.JRSUIConstants.Focused;\n+import apple.laf.JRSUIConstants.IndicatorOnly;\n+import apple.laf.JRSUIConstants.Size;\n+import apple.laf.JRSUIConstants.State;\n+import apple.laf.JRSUIConstants.Widget;\n@@ -34,1 +54,0 @@\n-import apple.laf.JRSUIConstants.*;\n@@ -172,1 +191,1 @@\n-    protected void doRendererPaint(final Graphics g, final ButtonModel buttonModel, final boolean editable, final Insets insets, int left, int top, int width, int height) {\n+    private Component getRendererComponent() {\n@@ -175,0 +194,4 @@\n+        return renderer.getListCellRendererComponent(list, comboBox.getSelectedItem(), -1, false, false);\n+    }\n+\n+    protected void doRendererPaint(final Graphics g, final ButtonModel buttonModel, final boolean editable, final Insets insets, int left, int top, int width, int height) {\n@@ -176,2 +199,1 @@\n-        final Component c = renderer.getListCellRendererComponent(list, comboBox.getSelectedItem(), -1, false, false);\n-        \/\/ System.err.println(\"Renderer: \" + renderer);\n+        final Component c = getRendererComponent();\n@@ -236,0 +258,21 @@\n+\n+    @Override\n+    public AccessibleContext getAccessibleContext() {\n+        if (accessibleContext == null) {\n+            accessibleContext = new AccessibleAquaComboBoxButton();\n+        }\n+        return accessibleContext;\n+    }\n+\n+    private final class AccessibleAquaComboBoxButton extends AccessibleJButton {\n+        @Override\n+        public String getAccessibleName() {\n+            String name = super.getAccessibleName();\n+            if ((name == null || name.isEmpty())\n+                && (!comboBox.isEditable() && comboBox.getSelectedItem() != null)) {\n+                    Component c = getRendererComponent();\n+                    name = c.getAccessibleContext().getAccessibleName();\n+            }\n+            return name;\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaComboBoxButton.java","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -732,0 +732,31 @@\n+\n+    @Override\n+    public int getAccessibleChildrenCount(JComponent c) {\n+        return 2;\n+    }\n+\n+    @Override\n+    public Accessible getAccessibleChild(JComponent c, int i) {\n+        \/\/ 0 = the popup\n+        \/\/ 1 = the editor for editable combobox and the arrow button for non-editable combobox\n+        switch ( i ) {\n+            case 0:\n+                if (popup instanceof Accessible accessiblePopup) {\n+                    AccessibleContext ac = accessiblePopup.getAccessibleContext();\n+                    ac.setAccessibleParent(comboBox);\n+                    return accessiblePopup;\n+                }\n+                break;\n+            case 1:\n+                if (comboBox.isEditable()\n+                        && (editor instanceof Accessible accessibleEditor)) {\n+                    AccessibleContext ac = accessibleEditor.getAccessibleContext();\n+                    ac.setAccessibleParent(comboBox);\n+                    return accessibleEditor;\n+                } else if (!comboBox.isEditable()) {\n+                    return arrowButton;\n+                }\n+                break;\n+        }\n+        return null;\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaComboBoxUI.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 8283214\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"mac\")\n+ * @summary Verifies if item selected in JComboBox magnifies using\n+ *          screen magnifier a11y tool\n+ * @run main\/manual TestJComboBoxScreenMagnifier\n+ *\/\n+\n+public class TestJComboBoxScreenMagnifier {\n+    private static JFrame frame;\n+    private static final String INSTRUCTIONS =\n+            \"1) Enable Screen magnifier on the Mac\\n\\n\" +\n+                \"System Preference -> Accessibility -> Zoom -> \" +\n+                \"Select \\\"Enable Hover Text\\\"\\n\\n\" +\n+            \"2) Move the mouse over the combo box and press \" +\n+                \"\\\"Command\\\" button.\\n\\n\" +\n+            \"3) If magnified label is visible, press Pass else Fail.\";\n+\n+    public static void main(String[] args) throws InterruptedException,\n+             InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"JComboBox Screen Magnifier Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(12)\n+                .columns(40)\n+                .screenCapture()\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(TestJComboBoxScreenMagnifier::createAndShowUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"JComboBox A11Y Screen Magnifier Test\");\n+\n+        String[] fruits = new String[] {\"Apple\", \"Orange\",\n+                \"Mango\", \"Pineapple\", \"Banana\"};\n+        JComboBox<String> comboBox = new JComboBox<String>(fruits);\n+        JPanel fruitPanel = new JPanel(new GridLayout(1, 2));\n+        JLabel fruitLabel = new JLabel(\"Fruits:\", JLabel.CENTER);\n+        fruitLabel.getAccessibleContext().setAccessibleName(\"Fruits Label\");\n+        fruitPanel.add(fruitLabel);\n+        fruitPanel.add(comboBox);\n+        comboBox.getAccessibleContext().setAccessibleName(\"Fruit Combo box\");\n+        frame.getContentPane().add(fruitPanel, BorderLayout.CENTER);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame,\n+                PassFailJFrame.Position.HORIZONTAL);\n+        frame.pack();\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JComboBox\/TestJComboBoxScreenMagnifier.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 6567433\n+ * @bug 6567433 8283214\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/6567433\/UpdateUIRecursionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}