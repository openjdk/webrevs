{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.ButtonUI;\n+import javax.swing.plaf.metal.MetalRadioButtonUI;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4823809\n+ * @summary No Mnemonic or Focus Indicator when using HTML for a Component Text\n+ * @key headful\n+ * @run main bug4823809\n+ *\/\n+\n+public class bug4823809 {\n+    private static ButtonUI testUI;\n+    private static volatile boolean passed = false;\n+    private static JFrame frame;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"RadioButton Test\");\n+                testUI = new TestRadioButtonUI();\n+                JRadioButton radio = new TestRadioButton(\"<html>This is a radiobutton test!<\/html>\");\n+\n+                frame.getContentPane().add(radio);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!passed) {\n+                throw new Error(\"Focus isn't painted for JRadioButton with HTML text.\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class TestRadioButton extends JRadioButton {\n+        public TestRadioButton(String s) {\n+            super(s);\n+        }\n+\n+        public void setUI(ButtonUI ui) {\n+            super.setUI(testUI);\n+        }\n+    }\n+\n+    static class TestRadioButtonUI extends MetalRadioButtonUI {\n+        protected void paintFocus(Graphics g, Rectangle t, Dimension d) {\n+            super.paintFocus(g, t, d);\n+            passed = true;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/bug4823809.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JSplitPane;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+\n+\/*\n+ * @test\n+ * @bug 4147653\n+ * @summary JSplitPane.DIVIDER_LOCATION_PROPERTY is a property,\n+ * you can use that to know when the position changes.\n+ * @run main bug4147653\n+ *\/\n+\n+public class bug4147653 {\n+    private static volatile boolean flag = false;\n+\n+    static class DevMoved implements PropertyChangeListener {\n+        public void propertyChange(PropertyChangeEvent evt) {\n+            flag = true;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        JSplitPane sp = new JSplitPane();\n+\n+        DevMoved pl = new DevMoved();\n+        sp.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, pl);\n+        sp.setDividerLocation(sp.getDividerLocation() + 10);\n+        Thread.sleep(1000);\n+\n+        if (!flag) {\n+            throw new RuntimeException(\"Divider property was not changed...\");\n+        }\n+        System.out.println(\"Test Passed!\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/bug4147653.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.basic.BasicSplitPaneDivider;\n+import javax.swing.plaf.basic.BasicSplitPaneUI;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4870674\n+ * @summary JSplitPane's one-touch buttons should deal with resized split panes better\n+ * @key headful\n+ * @run main bug4870674\n+ *\/\n+\n+public class bug4870674 {\n+    private static JSplitPane jsp0, jsp1;\n+    private static JButton[] leftOneTouchButton = new JButton[2];\n+    private static JButton[] rightOneTouchButton = new JButton[2];\n+    private static JFrame frame;\n+    private static Robot robot;\n+    private static volatile boolean passed = true;\n+    private static volatile Point rightBtnPos0;\n+    private static volatile Point leftBtnPos0;\n+    private static volatile Point rightBtnPos1;\n+    private static volatile Point leftBtnPos1;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"Test\");\n+                frame.getContentPane().setLayout(new GridLayout(2, 1));\n+\n+                jsp0 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,\n+                        new JButton(\"Left\"),\n+                        new JButton(\"Right\"));\n+                frame.getContentPane().add(jsp0);\n+\n+                jsp0.setUI(new TestSplitPaneUI(0));\n+                jsp0.setOneTouchExpandable(true);\n+\n+                jsp1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,\n+                        new JButton(\"Left\"),\n+                        new JButton(\"Right\"));\n+                frame.getContentPane().add(jsp1);\n+\n+                jsp1.setUI(new TestSplitPaneUI(1));\n+                jsp1.setOneTouchExpandable(true);\n+\n+                frame.setSize(300, 100);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                rightBtnPos0 = rightOneTouchButton[0].getLocationOnScreen();\n+                rightBtnPos0.x += rightOneTouchButton[0].getWidth() \/ 2;\n+                rightBtnPos0.y += rightOneTouchButton[0].getHeight() \/ 2;\n+\n+                leftBtnPos1 = leftOneTouchButton[1].getLocationOnScreen();\n+                leftBtnPos1.x += leftOneTouchButton[0].getWidth() \/ 2;\n+                leftBtnPos1.y += leftOneTouchButton[0].getHeight() \/ 2;\n+\n+                leftBtnPos0 = leftOneTouchButton[0].getLocationOnScreen();\n+                leftBtnPos0.x += leftOneTouchButton[0].getWidth() \/ 2;\n+                leftBtnPos0.y += leftOneTouchButton[0].getHeight() \/ 2;\n+\n+                rightBtnPos1 = rightOneTouchButton[1].getLocationOnScreen();\n+                rightBtnPos1.x += rightOneTouchButton[0].getWidth() \/ 2;\n+                rightBtnPos1.y += rightOneTouchButton[0].getHeight() \/ 2;\n+\n+                jsp0.setDividerLocation(250);\n+            });\n+            robot.mouseMove(rightBtnPos0.x, rightBtnPos0.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SwingUtilities.invokeAndWait(() -> {\n+                jsp1.setDividerLocation(250);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            robot.mouseMove(leftBtnPos1.x, leftBtnPos1.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame.setSize(200, 100);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            robot.mouseMove(leftBtnPos0.x, leftBtnPos0.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            robot.mouseMove(rightBtnPos1.x, rightBtnPos1.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (jsp0.getDividerLocation() > jsp0.getMaximumDividerLocation() ||\n+                        jsp1.getDividerLocation() > jsp1.getMaximumDividerLocation()) {\n+                    passed = false;\n+                }\n+            });\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"The divider location couldn't \" +\n+                        \"be greater then its maximum location\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class TestSplitPaneUI extends BasicSplitPaneUI {\n+        int i;\n+\n+        public TestSplitPaneUI(int i) {\n+            super();\n+            this.i = i;\n+        }\n+\n+        public BasicSplitPaneDivider createDefaultDivider() {\n+            return new TestSplitPaneDivider(this, i);\n+        }\n+    }\n+\n+    static class TestSplitPaneDivider extends BasicSplitPaneDivider {\n+        int i = 0;\n+\n+        public TestSplitPaneDivider(BasicSplitPaneUI ui, int i) {\n+            super(ui);\n+            this.i = i;\n+        }\n+\n+        protected JButton createLeftOneTouchButton() {\n+            leftOneTouchButton[i] = super.createLeftOneTouchButton();\n+            return leftOneTouchButton[i];\n+        }\n+\n+        protected JButton createRightOneTouchButton() {\n+            rightOneTouchButton[i] = super.createRightOneTouchButton();\n+            return rightOneTouchButton[i];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/bug4870674.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"}]}