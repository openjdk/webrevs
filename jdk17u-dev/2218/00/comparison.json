{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.awt.AWTException;\n@@ -27,0 +28,1 @@\n+import java.awt.GraphicsDevice;\n@@ -28,0 +30,1 @@\n+import java.awt.Image;\n@@ -30,0 +33,1 @@\n+import java.awt.Robot;\n@@ -34,0 +38,3 @@\n+import java.awt.image.RenderedImage;\n+import java.io.File;\n+import java.io.IOException;\n@@ -36,0 +43,1 @@\n+import java.util.Arrays;\n@@ -39,0 +47,3 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.imageio.ImageIO;\n@@ -40,0 +51,2 @@\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n@@ -43,0 +56,1 @@\n+import javax.swing.JOptionPane;\n@@ -48,1 +62,0 @@\n-\n@@ -71,0 +84,1 @@\n+    private static final AtomicInteger imgCounter = new AtomicInteger(0);\n@@ -72,0 +86,1 @@\n+    private static Robot robot;\n@@ -117,0 +132,38 @@\n+        this(title, instructions, testTimeOut, rows, columns, false);\n+    }\n+\n+    \/**\n+     * Constructs a JFrame with a given title & serves as test instructional\n+     * frame where the user follows the specified test instruction in order\n+     * to test the test case & mark the test pass or fail. If the expected\n+     * result is seen then the user click on the 'Pass' button else click\n+     * on the 'Fail' button and the reason for the failure should be\n+     * specified in the JDialog JTextArea.\n+     * <p>\n+     * The test instruction frame also provides a way for the tester to take\n+     * a screenshot (full screen or individual frame) if this feature\n+     * is enabled by passing {@code true} as {@code  enableScreenCapture}\n+     * parameter.\n+     *\n+     * @param title        title of the Frame.\n+     * @param instructions the instruction for the tester on how to test\n+     *                     and what is expected (pass) and what is not\n+     *                     expected (fail).\n+     * @param testTimeOut  test timeout where time is specified in minutes.\n+     * @param rows         number of visible rows of the JTextArea where the\n+     *                     instruction is show.\n+     * @param columns      Number of columns of the instructional\n+     *                     JTextArea\n+     * @param enableScreenCapture if set to true, 'Capture Screen' button & its\n+     *                            associated UIs are added to test instruction\n+     *                            frame\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *                                   creating the test instruction frame on\n+     *                                   EDT\n+     *\/\n+    public PassFailJFrame(String title, String instructions, long testTimeOut,\n+                          int rows, int columns,\n+                          boolean enableScreenCapture) throws InterruptedException,\n+            InvocationTargetException {\n@@ -118,1 +171,2 @@\n-            createUI(title, instructions, testTimeOut, rows, columns);\n+            createUI(title, instructions, testTimeOut, rows, columns,\n+                    enableScreenCapture);\n@@ -121,1 +175,1 @@\n-                    rows, columns));\n+                    rows, columns, enableScreenCapture));\n@@ -125,0 +179,6 @@\n+    private PassFailJFrame(Builder builder) throws InterruptedException,\n+            InvocationTargetException {\n+        this(builder.title, builder.instructions, builder.testTimeOut,\n+                builder.rows, builder.columns, builder.screenCapture);\n+    }\n+\n@@ -126,1 +186,2 @@\n-                                 long testTimeOut, int rows, int columns) {\n+                                 long testTimeOut, int rows, int columns,\n+                                 boolean enableScreenCapture) {\n@@ -170,0 +231,4 @@\n+        if (enableScreenCapture) {\n+            buttonsPanel.add(createCapturePanel());\n+        }\n+\n@@ -187,0 +252,85 @@\n+    private static JComponent createCapturePanel() {\n+        JComboBox<CaptureType> screenShortType = new JComboBox<>(CaptureType.values());\n+\n+        JButton capture = new JButton(\"ScreenShot\");\n+        capture.addActionListener((e) ->\n+                captureScreen((CaptureType) screenShortType.getSelectedItem()));\n+\n+        JPanel panel = new JPanel();\n+        panel.add(screenShortType);\n+        panel.add(capture);\n+        return panel;\n+    }\n+\n+    private enum CaptureType {\n+        FULL_SCREEN(\"Capture Full Screen\"),\n+        WINDOWS(\"Capture Individual Frame\");\n+\n+        private final String type;\n+        CaptureType(String type) {\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return type;\n+        }\n+    }\n+\n+    private static Robot createRobot() {\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+            } catch (AWTException e) {\n+                String errorMsg = \"Failed to create an instance of Robot.\";\n+                JOptionPane.showMessageDialog(frame, errorMsg, \"Failed\",\n+                                              JOptionPane.ERROR_MESSAGE);\n+                forceFail(errorMsg + e.getMessage());\n+            }\n+        }\n+        return robot;\n+    }\n+\n+    private static void captureScreen(Rectangle bounds) {\n+        Robot robot = createRobot();\n+\n+        List<Image> imageList = robot.createMultiResolutionScreenCapture(bounds)\n+                                     .getResolutionVariants();\n+        Image image = imageList.get(imageList.size() - 1);\n+\n+        File file = new File(\"CaptureScreen_\"\n+                             + imgCounter.incrementAndGet() + \".png\");\n+        try {\n+            ImageIO.write((RenderedImage) image, \"png\", file);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void captureScreen(CaptureType type) {\n+        switch (type) {\n+            case FULL_SCREEN:\n+                Arrays.stream(GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                 .getScreenDevices())\n+                      .map(GraphicsDevice::getDefaultConfiguration)\n+                      .map(GraphicsConfiguration::getBounds)\n+                      .forEach(PassFailJFrame::captureScreen);\n+                break;\n+\n+            case WINDOWS:\n+                windowList.stream()\n+                          .filter(Window::isShowing)\n+                          .map(Window::getBounds)\n+                          .forEach(PassFailJFrame::captureScreen);\n+                break;\n+\n+            default:\n+                throw new IllegalStateException(\"Unexpected value of capture type\");\n+        }\n+\n+        JOptionPane.showMessageDialog(frame,\n+                                      \"Screen Captured Successfully\",\n+                                      \"Screen Capture\",\n+                                      JOptionPane.INFORMATION_MESSAGE);\n+    }\n+\n@@ -424,0 +574,68 @@\n+\n+    public static class Builder {\n+        private String title;\n+        private String instructions;\n+        private long testTimeOut;\n+        private int rows;\n+        private int columns;\n+        private boolean screenCapture = false;\n+\n+        public Builder title(String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        public Builder instructions(String instructions) {\n+            this.instructions = instructions;\n+            return this;\n+        }\n+\n+        public Builder testTimeOut(long testTimeOut) {\n+            this.testTimeOut = testTimeOut;\n+            return this;\n+        }\n+\n+        public Builder rows(int rows) {\n+            this.rows = rows;\n+            return this;\n+        }\n+\n+        public Builder columns(int columns) {\n+            this.columns = columns;\n+            return this;\n+        }\n+\n+        public Builder screenCapture() {\n+            this.screenCapture = true;\n+            return this;\n+        }\n+\n+        public PassFailJFrame build() throws InterruptedException,\n+                InvocationTargetException {\n+            validate();\n+            return new PassFailJFrame(this);\n+        }\n+\n+        private void validate() {\n+            if (this.title == null) {\n+                this.title = TITLE;\n+            }\n+\n+            if (this.instructions == null || this.instructions.length() == 0) {\n+                throw new RuntimeException(\"Please provide the test \" +\n+                        \"instruction for this manual test\");\n+            }\n+\n+            if (this.testTimeOut == 0L) {\n+                this.testTimeOut = TEST_TIMEOUT;\n+            }\n+\n+            if (this.rows == 0) {\n+                this.rows = ROWS;\n+            }\n+\n+            if (this.columns == 0) {\n+                this.columns = COLUMNS;\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":223,"deletions":5,"binary":false,"changes":228,"status":"modified"}]}