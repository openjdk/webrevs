{"files":[{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8314120\n+ * @summary Sanity test for FileDescriptor.sync\n+ * @library \/test\/lib\n+ * @run main Sync\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.SyncFailedException;\n+\n+public class Sync {\n+\n+    static final String TEST_DIR = System.getProperty(\"test.dir\", \".\");\n+    static final int TRIES = 10_000;\n+\n+    public static void testWith(File file) throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            FileDescriptor fd = fos.getFD();\n+            for (int t = 0; t < TRIES; t++) {\n+                fd.sync();\n+            }\n+        } catch (SyncFailedException sfe) {\n+            \/\/ Can happen on some filesystems, print it in the log\n+            System.out.println(\"Sync failed (acceptable)\");\n+            sfe.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Run on platform threads\n+        System.out.println(\"With platform threads\");\n+        run();\n+\n+        System.out.println(\"Complete\");\n+    }\n+\n+    private static class AutoDelete implements AutoCloseable {\n+        private final File file;\n+\n+        public AutoDelete(File file) {\n+            this.file = file;\n+        }\n+\n+        public File file() {\n+            return file;\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            file.delete();\n+        }\n+    }\n+\n+    public static void run() throws Exception {\n+        try (var w = new AutoDelete(new File(TEST_DIR, \"FileDescriptorSync1\"))) {\n+            testWith(w.file());\n+        }\n+\n+        try (var w = new AutoDelete(File.createTempFile(\"FileDescriptorSync2\", \"tmp\"))) {\n+            testWith(w.file());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/FileDescriptor\/Sync.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.SyncFailedException;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests the cost of FileDescriptor.sync\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class FileDescriptorSync {\n+\n+    private FileOutputStream fos;\n+    private FileDescriptor fd;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+        File tmp = File.createTempFile(\"FileDescriptorSync\", \"bin\");\n+        fos = new FileOutputStream(tmp);\n+        fd = fos.getFD();\n+    }\n+\n+    @TearDown\n+    public void tearDown() throws IOException {\n+        fos.close();\n+    }\n+\n+    @Benchmark\n+    public void sync() {\n+        try {\n+            fd.sync();\n+        } catch (SyncFailedException e) {\n+            \/\/ The test assumes the temp filesystem accepts syncs.\n+            \/\/ Avoid failing if it does not, measure the exceptional path then.\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/FileDescriptorSync.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}