{"files":[{"patch":"@@ -1290,0 +1290,1 @@\n+                    && !protectedPath\n@@ -1689,0 +1690,1 @@\n+                && !protectedPath\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2154,1 +2154,1 @@\n-            } else if (!token && storepass == null && prompt) {\n+            } else if (!token && storepass == null && prompt && !protectedPath) {\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281234\n+ * @summary The -protected option is not always checked in keytool and jarsigner\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.x509\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.util.JarUtils;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.jar.JarFile;\n+\n+public class AutoKeyStore {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        JarUtils.createJarFile(Path.of(\"unsigned.jar\"), Path.of(\".\"),\n+                Files.writeString(Path.of(\"file\"), \"hello\"));\n+\n+        SecurityTools.keytool(\"\"\"\n+                -J--add-exports -Jjava.base\/sun.security.tools.keytool=ALL-UNNAMED\n+                -J--add-exports -Jjava.base\/sun.security.x509=ALL-UNNAMED\n+                -providerClass AutoKeyStore$AutoProvider\n+                -providerPath $test.classes\n+                -storetype AUTO -keystore NONE -protected\n+                -list\n+                \"\"\").shouldHaveExitValue(0)\n+                .shouldContain(\"Keystore type: AUTO\")\n+                .shouldContain(\"Keystore provider: AUTO\")\n+                .shouldContain(\"PrivateKeyEntry\");\n+\n+        SecurityTools.jarsigner(\"\"\"\n+                -J--add-exports -Jjava.base\/sun.security.tools.keytool=ALL-UNNAMED\n+                -J--add-exports -Jjava.base\/sun.security.x509=ALL-UNNAMED\n+                                -J-cp -J$test.classes\n+                -providerClass AutoKeyStore$AutoProvider\n+                -storetype AUTO -keystore NONE -protected\n+                -signedJar signed.jar\n+                unsigned.jar\n+                one\n+                \"\"\").shouldHaveExitValue(0)\n+                .shouldContain(\"jar signed.\");\n+\n+        Asserts.assertTrue(new JarFile(\"signed.jar\")\n+                .getEntry(\"META-INF\/ONE.EC\") != null);\n+    }\n+\n+    public static class AutoProvider extends Provider {\n+        public AutoProvider() {\n+            super(\"AUTO\", \"1.1.1\", \"auto\");\n+            put(\"KeyStore.AUTO\", \"AutoKeyStore$KeyStoreImpl\");\n+        }\n+    }\n+\n+    \/\/ This keystore is not based on file. Whenever it's loaded\n+    \/\/ a self-sign certificate is generated inside\n+    public static class KeyStoreImpl extends KeyStoreSpi {\n+\n+        private PrivateKey pri;\n+        private PublicKey pub;\n+        private X509Certificate cert;\n+\n+        @Override\n+        public Key engineGetKey(String alias, char[] password) {\n+            return pri;\n+        }\n+\n+        @Override\n+        public Certificate[] engineGetCertificateChain(String alias) {\n+            return new Certificate[] { cert };\n+        }\n+\n+        @Override\n+        public Certificate engineGetCertificate(String alias) {\n+            return cert;\n+        }\n+\n+        @Override\n+        public Date engineGetCreationDate(String alias) {\n+            return new Date();\n+        }\n+\n+        @Override\n+        public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException {\n+            throw new KeyStoreException(\"Not supported\");\n+        }\n+\n+        @Override\n+        public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) throws KeyStoreException {\n+            throw new KeyStoreException(\"Not supported\");\n+        }\n+\n+        @Override\n+        public void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException {\n+            throw new KeyStoreException(\"Not supported\");\n+        }\n+\n+        @Override\n+        public void engineDeleteEntry(String alias) throws KeyStoreException {\n+            throw new KeyStoreException(\"Not supported\");\n+        }\n+\n+        @Override\n+        public Enumeration<String> engineAliases() {\n+            return Collections.enumeration(List.of(\"one\"));\n+        }\n+\n+        @Override\n+        public boolean engineContainsAlias(String alias) {\n+            return alias.equalsIgnoreCase(\"one\");\n+        }\n+\n+        @Override\n+        public int engineSize() {\n+            return 1;\n+        }\n+\n+        @Override\n+        public boolean engineIsKeyEntry(String alias) {\n+            return true;\n+        }\n+\n+        @Override\n+        public boolean engineIsCertificateEntry(String alias) {\n+            return false;\n+        }\n+\n+        @Override\n+        public String engineGetCertificateAlias(Certificate cert) {\n+            return \"one\";\n+        }\n+\n+        @Override\n+        public void engineStore(OutputStream stream, char[] password) {\n+        }\n+\n+        @Override\n+        public void engineLoad(InputStream stream, char[] password) throws IOException {\n+            try {\n+                CertAndKeyGen cag = new CertAndKeyGen(\"EC\", \"SHA256withECDSA\");\n+                cag.generate(\"secp256r1\");\n+                pri = cag.getPrivateKey();\n+                pub = cag.getPublicKey();\n+                cert = cag.getSelfCertificate(new X500Name(\"CN=one\"), 3600);\n+            } catch (Exception e) {\n+                throw new IOException(\"Not loaded\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/AutoKeyStore.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"},{"patch":"@@ -44,2 +44,2 @@\n- * not block because of entropy scarcity. {@code -Jvm-options} is supported\n- * as an argument.\n+ * not block because of entropy scarcity. An argument can be a normal string,\n+ * {@code -Jvm-options}, or {@code $sysProp}.\n@@ -66,1 +66,6 @@\n-                launcher.addVMArg(arg.substring(2));\n+                String jarg = arg.substring(2);\n+                if (jarg.length() > 1 && jarg.charAt(0) == '$') {\n+                    launcher.addVMArg(System.getProperty(jarg.substring(1)));\n+                } else {\n+                    launcher.addVMArg(jarg);\n+                }\n@@ -70,0 +75,2 @@\n+            } else if (arg.length() > 1 && arg.charAt(0) == '$') {\n+                launcher.addToolArg(System.getProperty(arg.substring(1)));\n","filename":"test\/lib\/jdk\/test\/lib\/SecurityTools.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}