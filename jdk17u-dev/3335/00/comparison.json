{"files":[{"patch":"@@ -65,1 +65,0 @@\n-        \/\/ Opt: Only need to do if we're not using the default GC\n@@ -67,1 +66,2 @@\n-        int screenNum = ((X11GraphicsDevice)gc.getDevice()).getScreen();\n+        final X11GraphicsDevice newDev = getSameScreenDevice(gc);\n+        final int visualToLookFor = graphicsConfig.getVisual();\n@@ -69,13 +69,5 @@\n-        X11GraphicsConfig parentgc;\n-        \/\/ save vis id of current gc\n-        int visual = graphicsConfig.getVisual();\n-\n-        X11GraphicsDevice newDev = (X11GraphicsDevice) GraphicsEnvironment.\n-            getLocalGraphicsEnvironment().\n-            getScreenDevices()[screenNum];\n-\n-        for (int i = 0; i < newDev.getNumConfigs(screenNum); i++) {\n-            if (visual == newDev.getConfigVisualId(i, screenNum)) {\n-                \/\/ use that\n-                graphicsConfig = (X11GraphicsConfig)newDev.getConfigurations()[i];\n-                break;\n+        final GraphicsConfiguration[] configurations = newDev.getConfigurations();\n+        for (final GraphicsConfiguration config : configurations) {\n+            final X11GraphicsConfig x11gc = (X11GraphicsConfig) config;\n+            if (visualToLookFor == x11gc.getVisual()) {\n+                graphicsConfig = x11gc;\n@@ -84,7 +76,0 @@\n-        \/\/ just in case...\n-        if (graphicsConfig == null) {\n-            graphicsConfig = (X11GraphicsConfig) GraphicsEnvironment.\n-                getLocalGraphicsEnvironment().\n-                getScreenDevices()[screenNum].\n-                getDefaultConfiguration();\n-        }\n@@ -95,0 +80,12 @@\n+    private X11GraphicsDevice getSameScreenDevice(GraphicsConfiguration gc) {\n+        XToolkit.awtLock(); \/\/ so that the number of screens doesn't change during\n+        try {\n+            final int screenNum = ((X11GraphicsDevice) gc.getDevice()).getScreen();\n+            return (X11GraphicsDevice) GraphicsEnvironment.\n+                    getLocalGraphicsEnvironment().\n+                    getScreenDevices()[screenNum];\n+        } finally {\n+            XToolkit.awtUnlock();\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XCanvasPeer.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import sun.awt.X11.XToolkit;\n@@ -66,1 +67,0 @@\n-    private final Object configLock = new Object();\n@@ -153,1 +153,2 @@\n-            synchronized (configLock) {\n+            XToolkit.awtLock();\n+            try {\n@@ -155,0 +156,2 @@\n+            } finally {\n+                XToolkit.awtUnlock();\n@@ -241,1 +244,2 @@\n-            synchronized (configLock) {\n+            XToolkit.awtLock();\n+            try {\n@@ -243,0 +247,2 @@\n+            } finally {\n+                XToolkit.awtUnlock();\n@@ -574,0 +580,2 @@\n+        assert XToolkit.isAWTLockHeldByCurrentThread();\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -317,2 +319,0 @@\n-    AWT_LOCK ();\n-\n@@ -375,1 +375,0 @@\n-        AWT_UNLOCK();\n@@ -385,0 +384,3 @@\n+        if (screenDataPtr->defaultConfig == NULL) {\n+            return;\n+        }\n@@ -584,1 +586,0 @@\n-    AWT_UNLOCK ();\n@@ -773,0 +774,1 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n@@ -783,0 +785,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -976,1 +980,2 @@\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -978,3 +983,2 @@\n-    int configs = x11Screens[screen].numConfigs;\n-    AWT_UNLOCK();\n-    return configs;\n+    return x11Screens[screen].numConfigs;\n+\n@@ -992,2 +996,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -997,1 +1001,0 @@\n-    AWT_UNLOCK();\n@@ -1010,2 +1013,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1015,1 +1018,0 @@\n-    AWT_UNLOCK();\n@@ -1028,2 +1030,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1033,1 +1035,0 @@\n-    AWT_UNLOCK();\n@@ -1143,0 +1144,3 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n+\n@@ -1144,1 +1148,0 @@\n-    AWT_LOCK();\n@@ -1166,1 +1169,0 @@\n-        AWT_UNLOCK();\n@@ -1185,1 +1187,0 @@\n-    AWT_UNLOCK();\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"}]}