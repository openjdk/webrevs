{"files":[{"patch":"@@ -911,1 +911,1 @@\n-    def = JLI_MemAlloc(sizeof(format)\n+    size_t defSize = sizeof(format)\n@@ -913,2 +913,3 @@\n-                       + JLI_StrLen(s));\n-    sprintf(def, format, s);\n+                       + JLI_StrLen(s);\n+    def = JLI_MemAlloc(defSize);\n+    snprintf(def, defSize, format, s);\n@@ -1371,2 +1372,3 @@\n-            char *tmp = JLI_MemAlloc(JLI_StrLen(arg) + 6);\n-            sprintf(tmp, \"-X%s\", arg + 1); \/* skip '-' *\/\n+            size_t tmpSize = JLI_StrLen(arg) + 6;\n+            char *tmp = JLI_MemAlloc(tmpSize);\n+            snprintf(tmp, tmpSize, \"-X%s\", arg + 1); \/* skip '-' *\/\n@@ -1704,2 +1706,3 @@\n-                envcp = (char *)JLI_MemAlloc(JLI_StrLen(s) + 40);\n-                sprintf(envcp, \"-Denv.class.path=%s\", s);\n+                size_t envcpSize = JLI_StrLen(s) + 40;\n+                envcp = (char *)JLI_MemAlloc(envcpSize);\n+                snprintf(envcp, envcpSize, \"-Denv.class.path=%s\", s);\n@@ -1717,2 +1720,3 @@\n-    apphome = (char *)JLI_MemAlloc(JLI_StrLen(home) + 40);\n-    sprintf(apphome, \"-Dapplication.home=%s\", home);\n+    size_t apphomeSize = JLI_StrLen(home) + 40;\n+    apphome = (char *)JLI_MemAlloc(apphomeSize);\n+    snprintf(apphome, apphomeSize, \"-Dapplication.home=%s\", home);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -562,1 +562,1 @@\n-    sprintf(buf, (const char *)\"GMT%c%02.2d:%02.2d\",\n+    snprintf(buf, sizeof(buf), (const char *)\"GMT%c%02.2d:%02.2d\",\n@@ -569,1 +569,1 @@\n-    sprintf(buf, (const char *)\"GMT%c%c%c:%c%c\", offset[0], offset[1], offset[2],\n+    snprintf(buf, sizeof(buf), (const char *)\"GMT%c%c%c:%c%c\", offset[0], offset[1], offset[2],\n","filename":"src\/java.base\/unix\/native\/libjava\/TimeZone_md.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,1 +391,1 @@\n-                sprintf(new_runpath, LD_LIBRARY_PATH \"=\"\n+                snprintf(new_runpath, new_runpath_size, LD_LIBRARY_PATH \"=\"\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        sprintf(buf, \"ms%d\", cp);\n+        snprintf(buf, sizeof(buf), \"ms%d\", cp);\n@@ -61,1 +61,1 @@\n-        sprintf(buf, \"UTF-8\");\n+        snprintf(buf, sizeof(buf), \"UTF-8\");\n@@ -63,1 +63,1 @@\n-        sprintf(buf, \"cp%d\", cp);\n+        snprintf(buf, sizeof(buf), \"cp%d\", cp);\n","filename":"src\/java.base\/windows\/native\/libjava\/Console_md.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-static void customZoneName(LONG bias, char *buffer) {\n+static void customZoneName(LONG bias, char *buffer, size_t bufSize) {\n@@ -137,1 +137,1 @@\n-        sprintf(buffer, \"GMT%c%02d:%02d\",\n+        snprintf(buffer, bufSize, \"GMT%c%02d:%02d\",\n@@ -149,1 +149,1 @@\n-static int getWinTimeZone(char *winZoneName)\n+static int getWinTimeZone(char *winZoneName, size_t winZoneNameBufSize)\n@@ -176,1 +176,1 @@\n-            customZoneName(dtzi.Bias, winZoneName);\n+            customZoneName(dtzi.Bias, winZoneName, winZoneNameBufSize);\n@@ -209,1 +209,1 @@\n-            customZoneName(dtzi.Bias, winZoneName);\n+            customZoneName(dtzi.Bias, winZoneName, winZoneNameBufSize);\n@@ -254,1 +254,1 @@\n-                    customZoneName(tzi.Bias, winZoneName);\n+                    customZoneName(tzi.Bias, winZoneName, winZoneNameBufSize);\n@@ -522,1 +522,1 @@\n-    result = getWinTimeZone(winZoneName);\n+    result = getWinTimeZone(winZoneName, sizeof(winZoneName));\n@@ -572,1 +572,1 @@\n-    customZoneName(bias, zonename);\n+    customZoneName(bias, zonename, sizeof(zonename));\n","filename":"src\/java.base\/windows\/native\/libjava\/TimeZone_md.c","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,2 @@\n-    char* buf = malloc(16);\n+    size_t buflen = 16;\n+    char* buf = malloc(buflen);\n@@ -144,1 +145,1 @@\n-        sprintf(buf, \"ms%d\", cp);\n+        snprintf(buf, buflen, \"ms%d\", cp);\n@@ -146,1 +147,1 @@\n-        sprintf(buf, \"UTF-8\");\n+        snprintf(buf, buflen, \"UTF-8\");\n@@ -148,1 +149,1 @@\n-        sprintf(buf, \"cp%d\", cp);\n+        snprintf(buf, buflen, \"cp%d\", cp);\n@@ -578,1 +579,1 @@\n-        sprintf(buf, \"%d.%d\", majorVersion, minorVersion);\n+        snprintf(buf, sizeof(buf), \"%d.%d\", majorVersion, minorVersion);\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}