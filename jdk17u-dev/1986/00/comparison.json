{"files":[{"patch":"@@ -273,3 +273,3 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_method_sampling_interval(JNIEnv* env, jobject jvm, jlong type, jlong intervalMillis))\n-  if (intervalMillis < 0) {\n-    intervalMillis = 0;\n+JVM_ENTRY_NO_ENV(void, jfr_set_method_sampling_period(JNIEnv* env, jobject jvm, jlong type, jlong periodMillis))\n+  if (periodMillis < 0) {\n+    periodMillis = 0;\n@@ -279,1 +279,1 @@\n-  if (intervalMillis > 0) {\n+  if (periodMillis > 0) {\n@@ -283,1 +283,1 @@\n-    JfrThreadSampling::set_java_sample_interval(intervalMillis);\n+    JfrThreadSampling::set_java_sample_period(periodMillis);\n@@ -285,1 +285,1 @@\n-    JfrThreadSampling::set_native_sample_interval(intervalMillis);\n+    JfrThreadSampling::set_native_sample_period(periodMillis);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-void JNICALL jfr_set_method_sampling_interval(JNIEnv* env, jobject jvm, jlong type, jlong intervalMillis);\n+void JNICALL jfr_set_method_sampling_period(JNIEnv* env, jobject jvm, jlong type, jlong periodMillis);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-      (char*)\"setMethodSamplingInterval\", (char*)\"(JJ)V\", (void*)jfr_set_method_sampling_interval,\n+      (char*)\"setMethodSamplingPeriod\", (char*)\"(JJ)V\", (void*)jfr_set_method_sampling_period,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -324,2 +324,2 @@\n-  size_t _interval_java;\n-  size_t _interval_native;\n+  int64_t _java_period_millis;\n+  int64_t _native_period_millis;\n@@ -332,1 +332,1 @@\n-  JfrThreadSampler(size_t interval_java, size_t interval_native, u4 max_frames);\n+  JfrThreadSampler(int64_t java_period_millis, int64_t native_period_millis, u4 max_frames);\n@@ -339,4 +339,2 @@\n-  void set_java_interval(size_t interval) { _interval_java = interval; };\n-  void set_native_interval(size_t interval) { _interval_native = interval; };\n-  size_t get_java_interval() { return _interval_java; };\n-  size_t get_native_interval() { return _interval_native; };\n+  void set_java_period(int64_t period_millis);\n+  void set_native_period(int64_t period_millis);\n@@ -351,0 +349,2 @@\n+  int64_t get_java_period() const { return _java_period_millis; };\n+  int64_t get_native_period() const { return _native_period_millis; };\n@@ -390,1 +390,1 @@\n-JfrThreadSampler::JfrThreadSampler(size_t interval_java, size_t interval_native, u4 max_frames) :\n+JfrThreadSampler::JfrThreadSampler(int64_t java_period_millis, int64_t native_period_millis, u4 max_frames) :\n@@ -396,2 +396,2 @@\n-  _interval_java(interval_java),\n-  _interval_native(interval_native),\n+  _java_period_millis(java_period_millis),\n+  _native_period_millis(native_period_millis),\n@@ -401,0 +401,2 @@\n+  assert(_java_period_millis >= 0, \"invariant\");\n+  assert(_native_period_millis >= 0, \"invariant\");\n@@ -407,0 +409,10 @@\n+void JfrThreadSampler::set_java_period(int64_t period_millis) {\n+  assert(period_millis >= 0, \"invariant\");\n+  _java_period_millis = period_millis;\n+}\n+\n+void JfrThreadSampler::set_native_period(int64_t period_millis) {\n+  assert(period_millis >= 0, \"invariant\");\n+  _native_period_millis = period_millis;\n+}\n+\n@@ -464,1 +476,1 @@\n-static jlong get_monotonic_ms() {\n+static int64_t get_monotonic_ms() {\n@@ -473,2 +485,2 @@\n-  jlong last_java_ms = get_monotonic_ms();\n-  jlong last_native_ms = last_java_ms;\n+  int64_t last_java_ms = get_monotonic_ms();\n+  int64_t last_native_ms = last_java_ms;\n@@ -483,2 +495,2 @@\n-    jlong java_interval = _interval_java == 0 ? max_jlong : MAX2<jlong>(_interval_java, 1);\n-    jlong native_interval = _interval_native == 0 ? max_jlong : MAX2<jlong>(_interval_native, 1);\n+    const int64_t java_period_millis = _java_period_millis == 0 ? max_jlong : MAX2<int64_t>(_java_period_millis, 1);\n+    const int64_t native_period_millis = _native_period_millis == 0 ? max_jlong : MAX2<int64_t>(_native_period_millis, 1);\n@@ -486,1 +498,1 @@\n-    jlong now_ms = get_monotonic_ms();\n+    const int64_t now_ms = get_monotonic_ms();\n@@ -489,1 +501,1 @@\n-     * Let I be java_interval or native_interval.\n+     * Let I be java_period or native_period.\n@@ -497,2 +509,2 @@\n-    jlong next_j = java_interval + (last_java_ms - now_ms);\n-    jlong next_n = native_interval + (last_native_ms - now_ms);\n+    const int64_t next_j = java_period_millis + (last_java_ms - now_ms);\n+    const int64_t next_n = native_period_millis + (last_native_ms - now_ms);\n@@ -500,1 +512,1 @@\n-    jlong sleep_to_next = MIN2<jlong>(next_j, next_n);\n+    const int64_t sleep_to_next = MIN2<int64_t>(next_j, next_n);\n@@ -597,2 +609,10 @@\n-static void log(size_t interval_java, size_t interval_native) {\n-  log_trace(jfr)(\"Updated thread sampler for java: \" SIZE_FORMAT \"  ms, native \" SIZE_FORMAT \" ms\", interval_java, interval_native);\n+#ifdef ASSERT\n+void assert_periods(const JfrThreadSampler* sampler, int64_t java_period_millis, int64_t native_period_millis) {\n+  assert(sampler != nullptr, \"invariant\");\n+  assert(sampler->get_java_period() == java_period_millis, \"invariant\");\n+  assert(sampler->get_native_period() == native_period_millis, \"invariant\");\n+}\n+#endif\n+\n+static void log(int64_t java_period_millis, int64_t native_period_millis) {\n+  log_trace(jfr)(\"Updated thread sampler for java: \" INT64_FORMAT \"  ms, native \" INT64_FORMAT \" ms\", java_period_millis, native_period_millis);\n@@ -601,4 +621,4 @@\n-void JfrThreadSampling::start_sampler(size_t interval_java, size_t interval_native) {\n-  assert(_sampler == NULL, \"invariant\");\n-  log_trace(jfr)(\"Enrolling thread sampler\");\n-  _sampler = new JfrThreadSampler(interval_java, interval_native, JfrOptionSet::stackdepth());\n+void JfrThreadSampling::create_sampler(int64_t java_period_millis, int64_t native_period_millis) {\n+  assert(_sampler == nullptr, \"invariant\");\n+  log_trace(jfr)(\"Creating thread sampler for java:\" INT64_FORMAT \" ms, native \" INT64_FORMAT \" ms\", java_period_millis, native_period_millis);\n+  _sampler = new JfrThreadSampler(java_period_millis, native_period_millis, JfrOptionSet::stackdepth());\n@@ -609,16 +629,4 @@\n-void JfrThreadSampling::set_sampling_interval(bool java_interval, size_t period) {\n-  size_t interval_java = 0;\n-  size_t interval_native = 0;\n-  if (_sampler != NULL) {\n-    interval_java = _sampler->get_java_interval();\n-    interval_native = _sampler->get_native_interval();\n-  }\n-  if (java_interval) {\n-    interval_java = period;\n-  } else {\n-    interval_native = period;\n-  }\n-  if (interval_java > 0 || interval_native > 0) {\n-    if (_sampler == NULL) {\n-      log_trace(jfr)(\"Creating thread sampler for java:%zu ms, native %zu ms\", interval_java, interval_native);\n-      start_sampler(interval_java, interval_native);\n+void JfrThreadSampling::update_run_state(int64_t java_period_millis, int64_t native_period_millis) {\n+  if (java_period_millis > 0 || native_period_millis > 0) {\n+    if (_sampler == nullptr) {\n+      create_sampler(java_period_millis, native_period_millis);\n@@ -626,2 +634,0 @@\n-      _sampler->set_java_interval(interval_java);\n-      _sampler->set_native_interval(interval_native);\n@@ -630,3 +636,6 @@\n-    assert(_sampler != NULL, \"invariant\");\n-    log(interval_java, interval_native);\n-  } else if (_sampler != NULL) {\n+    DEBUG_ONLY(assert_periods(_sampler, java_period_millis, native_period_millis);)\n+    log(java_period_millis, native_period_millis);\n+    return;\n+  }\n+  if (_sampler != nullptr) {\n+    DEBUG_ONLY(assert_periods(_sampler, java_period_millis, native_period_millis);)\n@@ -637,2 +646,22 @@\n-void JfrThreadSampling::set_java_sample_interval(size_t period) {\n-  if (_instance == NULL && 0 == period) {\n+void JfrThreadSampling::set_sampling_period(bool is_java_period, int64_t period_millis) {\n+  int64_t java_period_millis = 0;\n+  int64_t native_period_millis = 0;\n+  if (is_java_period) {\n+    java_period_millis = period_millis;\n+    if (_sampler != nullptr) {\n+      _sampler->set_java_period(java_period_millis);\n+      native_period_millis = _sampler->get_native_period();\n+    }\n+  } else {\n+    native_period_millis = period_millis;\n+    if (_sampler != nullptr) {\n+      _sampler->set_native_period(native_period_millis);\n+      java_period_millis = _sampler->get_java_period();\n+    }\n+  }\n+  update_run_state(java_period_millis, native_period_millis);\n+}\n+\n+void JfrThreadSampling::set_java_sample_period(int64_t period_millis) {\n+  assert(period_millis >= 0, \"invariant\");\n+  if (_instance == NULL && 0 == period_millis) {\n@@ -641,1 +670,1 @@\n-  instance().set_sampling_interval(true, period);\n+  instance().set_sampling_period(true, period_millis);\n@@ -644,2 +673,3 @@\n-void JfrThreadSampling::set_native_sample_interval(size_t period) {\n-  if (_instance == NULL && 0 == period) {\n+void JfrThreadSampling::set_native_sample_period(int64_t period_millis) {\n+  assert(period_millis >= 0, \"invariant\");\n+  if (_instance == NULL && 0 == period_millis) {\n@@ -648,1 +678,1 @@\n-  instance().set_sampling_interval(false, period);\n+  instance().set_sampling_period(false, period_millis);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":83,"deletions":53,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-class JfrStackFrame;\n@@ -33,1 +32,0 @@\n-class Thread;\n@@ -39,2 +37,3 @@\n-  void start_sampler(size_t interval_java, size_t interval_native);\n-  void set_sampling_interval(bool java_interval, size_t period);\n+  void create_sampler(int64_t java_period_millis, int64_t native_period_millis);\n+  void update_run_state(int64_t java_period_millis, int64_t native_period_millis);\n+  void set_sampling_period(bool is_java_period, int64_t period_millis);\n@@ -50,2 +49,2 @@\n-  static void set_java_sample_interval(size_t period);\n-  static void set_native_sample_interval(size_t period);\n+  static void set_java_sample_period(int64_t period_millis);\n+  static void set_native_sample_period(int64_t period_millis);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-     * Set interval for method samples, in milliseconds.\n+     * Set period for method samples, in milliseconds.\n@@ -271,1 +271,1 @@\n-     * Setting interval to 0 turns off the method sampler.\n+     * Setting period to 0 turns off the method sampler.\n@@ -273,1 +273,1 @@\n-     * @param intervalMillis the sampling interval\n+     * @param periodMillis the sampling period\n@@ -275,1 +275,1 @@\n-    public native void setMethodSamplingInterval(long type, long intervalMillis);\n+    public native void setMethodSamplingPeriod(long type, long periodMillis);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-                JVM.getJVM().setMethodSamplingInterval(getId(), p);\n+                JVM.getJVM().setMethodSamplingPeriod(getId(), p);\n@@ -219,1 +219,1 @@\n-            JVM.getJVM().setMethodSamplingInterval(getId(), p);\n+            JVM.getJVM().setMethodSamplingPeriod(getId(), p);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}