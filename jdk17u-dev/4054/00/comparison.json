{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,2 +120,3 @@\n-            iconTarget = appLayout.destktopIntegrationDirectory().resolve(\n-                    APP_NAME.fetchFrom(params) + \".ico\");\n+            Path iconDir = StandardBundlerParam.TEMP_ROOT.fetchFrom(params).resolve(\n+                    \"icons\");\n+            iconTarget = iconDir.resolve(APP_NAME.fetchFrom(params) + \".ico\");\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WindowsAppImageBuilder.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -446,4 +446,0 @@\n-            final Path icoFile = IOUtils.addSuffix(\n-                    installedAppImage.destktopIntegrationDirectory().resolve(\n-                            launcherBasename), \".ico\");\n-\n@@ -453,1 +449,0 @@\n-            xml.writeAttribute(\"IconIndex\", \"0\");\n@@ -456,1 +451,0 @@\n-            xml.writeAttribute(\"Icon\", Id.Icon.of(icoFile));\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,2 @@\n-    public static void rethrowUnchecked(Throwable throwable) throws ExceptionBox {\n+    public static RuntimeException rethrowUnchecked(Throwable throwable) throws\n+            ExceptionBox {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Functional.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -29,0 +31,2 @@\n+import java.util.List;\n+import java.util.Optional;\n@@ -63,1 +67,5 @@\n-        if (expectedDefault) {\n+        if (TKit.isWindows()) {\n+            TKit.assertPathExists(iconPath, false);\n+            WinIconVerifier.instance.verifyLauncherIcon(cmd, launcherName,\n+                    expectedIcon, expectedDefault);\n+        } else if (expectedDefault) {\n@@ -76,0 +84,130 @@\n+    private static class WinIconVerifier {\n+\n+        void verifyLauncherIcon(JPackageCommand cmd, String launcherName,\n+                Path expectedIcon, boolean expectedDefault) {\n+            TKit.withTempDirectory(\"icons\", tmpDir -> {\n+                Path launcher = cmd.appLauncherPath(launcherName);\n+                Path iconWorkDir = tmpDir.resolve(launcher.getFileName());\n+                Path iconContainer = iconWorkDir.resolve(\"container.exe\");\n+                Files.createDirectories(iconContainer.getParent());\n+                Files.copy(getDefaultAppLauncher(expectedIcon == null\n+                        && !expectedDefault), iconContainer);\n+                if (expectedIcon != null) {\n+                    setIcon(expectedIcon, iconContainer);\n+                }\n+\n+                Path extractedExpectedIcon = extractIconFromExecutable(\n+                        iconWorkDir, iconContainer, \"expected\");\n+                Path extractedActualIcon = extractIconFromExecutable(iconWorkDir,\n+                        launcher, \"actual\");\n+                TKit.assertTrue(-1 == Files.mismatch(extractedExpectedIcon,\n+                        extractedActualIcon),\n+                        String.format(\n+                                \"Check icon file [%s] of %s launcher is a copy of source icon file [%s]\",\n+                                extractedActualIcon,\n+                                Optional.ofNullable(launcherName).orElse(\"main\"),\n+                                extractedExpectedIcon));\n+            });\n+        }\n+\n+        private WinIconVerifier() {\n+            try {\n+                executableRebranderClass = Class.forName(\n+                        \"jdk.jpackage.internal.ExecutableRebrander\");\n+\n+                lockResource = executableRebranderClass.getDeclaredMethod(\n+                        \"lockResource\", String.class);\n+                \/\/ Note: this reflection call requires\n+                \/\/ --add-opens jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED\n+                lockResource.setAccessible(true);\n+\n+                unlockResource = executableRebranderClass.getDeclaredMethod(\n+                        \"unlockResource\", long.class);\n+                unlockResource.setAccessible(true);\n+\n+                iconSwap = executableRebranderClass.getDeclaredMethod(\"iconSwap\",\n+                        long.class, String.class);\n+                iconSwap.setAccessible(true);\n+            } catch (ClassNotFoundException | NoSuchMethodException\n+                    | SecurityException ex) {\n+                throw Functional.rethrowUnchecked(ex);\n+            }\n+        }\n+\n+        private Path extractIconFromExecutable(Path outputDir, Path executable,\n+                String label) {\n+            Path psScript = outputDir.resolve(label + \".ps1\");\n+            Path extractedIcon = outputDir.resolve(label + \".bmp\");\n+            TKit.createTextFile(psScript, List.of(\n+                    \"[System.Reflection.Assembly]::LoadWithPartialName('System.Drawing')\",\n+                    String.format(\n+                            \"[System.Drawing.Icon]::ExtractAssociatedIcon(\\\"%s\\\").ToBitmap().Save(\\\"%s\\\", [System.Drawing.Imaging.ImageFormat]::Bmp)\",\n+                            executable.toAbsolutePath().normalize(),\n+                            extractedIcon.toAbsolutePath().normalize()),\n+                    \"exit 0\"));\n+\n+            Executor.of(\"powershell\", \"-NoLogo\", \"-NoProfile\", \"-File\",\n+                    psScript.toAbsolutePath().normalize().toString()).execute();\n+\n+            return extractedIcon;\n+        }\n+\n+        private Path getDefaultAppLauncher(boolean noIcon) {\n+            \/\/ Create app image with the sole purpose to get the default app launcher\n+            Path defaultAppOutputDir = TKit.workDir().resolve(String.format(\n+                    \"out-%d\", ProcessHandle.current().pid()));\n+            JPackageCommand cmd = JPackageCommand.helloAppImage().setFakeRuntime().setArgumentValue(\n+                    \"--dest\", defaultAppOutputDir);\n+\n+            String launcherName;\n+            if (noIcon) {\n+                launcherName = \"no-icon\";\n+                new AdditionalLauncher(launcherName).setNoIcon().applyTo(cmd);\n+            } else {\n+                launcherName = null;\n+            }\n+\n+            if (!Files.isExecutable(cmd.appLauncherPath(launcherName))) {\n+                cmd.execute();\n+            }\n+            return cmd.appLauncherPath(launcherName);\n+        }\n+\n+        private void setIcon(Path iconPath, Path launcherPath) {\n+            TKit.trace(String.format(\"Set icon of [%s] launcher to [%s] file\",\n+                    launcherPath, iconPath));\n+            try {\n+                launcherPath.toFile().setWritable(true, true);\n+                try {\n+                    long lock = 0;\n+                    try {\n+                        lock = (Long) lockResource.invoke(null, new Object[]{\n+                            launcherPath.toAbsolutePath().normalize().toString()});\n+                        if (lock == 0) {\n+                            throw new RuntimeException(String.format(\n+                                    \"Failed to lock [%s] executable\",\n+                                    launcherPath));\n+                        }\n+                        iconSwap.invoke(null, new Object[]{lock,\n+                            iconPath.toAbsolutePath().normalize().toString()});\n+                    } finally {\n+                        if (lock != 0) {\n+                            unlockResource.invoke(null, new Object[]{lock});\n+                        }\n+                    }\n+                } catch (IllegalAccessException | InvocationTargetException ex) {\n+                    throw Functional.rethrowUnchecked(ex);\n+                }\n+            } finally {\n+                launcherPath.toFile().setWritable(false, true);\n+            }\n+        }\n+\n+        final static WinIconVerifier instance = new WinIconVerifier();\n+\n+        private final Class executableRebranderClass;\n+        private final Method lockResource;\n+        private final Method unlockResource;\n+        private final Method iconSwap;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":140,"deletions":2,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -54,1 +54,3 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=360 -Xmx512m\n+ *  --add-opens jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED\n+ *  jdk.jpackage.test.Main\n@@ -66,1 +68,3 @@\n- * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=540 -Xmx512m\n+ *  --add-opens jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED\n+ *  jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/share\/AddLauncherTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n- * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=540 -Xmx512m\n+ *  --add-opens jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED\n+ *  jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,3 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=360 -Xmx512m\n+ *  --add-opens jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED\n+ *  jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultiLauncherTwoPhaseTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}