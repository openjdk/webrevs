{"files":[{"patch":"@@ -1785,0 +1785,6 @@\n+WB_ENTRY(jobjectArray, WB_GetResolvedReferences(JNIEnv* env, jobject wb, jclass klass))\n+  InstanceKlass* ik = InstanceKlass::cast(java_lang_Class::as_Klass(JNIHandles::resolve(klass)));\n+  objArrayOop resolved_refs= ik->constants()->resolved_references();\n+  return (jobjectArray)JNIHandles::make_local(THREAD, resolved_refs);\n+WB_END\n+\n@@ -1916,12 +1922,0 @@\n-WB_ENTRY(jobject, WB_GetResolvedReferences(JNIEnv* env, jobject wb, jclass clazz))\n-  Klass *k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n-  if (k->is_instance_klass()) {\n-    InstanceKlass *ik = InstanceKlass::cast(k);\n-    ConstantPool *cp = ik->constants();\n-    objArrayOop refs =  cp->resolved_references();\n-    return (jobject)JNIHandles::make_local(THREAD, refs);\n-  } else {\n-    return NULL;\n-  }\n-WB_END\n-\n@@ -2556,0 +2550,1 @@\n+  {CC\"getResolvedReferences0\", CC\"(Ljava\/lang\/Class;)[Ljava\/lang\/Object;\", (void*)&WB_GetResolvedReferences},\n@@ -2581,1 +2576,0 @@\n-  {CC\"getResolvedReferences\", CC\"(Ljava\/lang\/Class;)Ljava\/lang\/Object;\", (void*)&WB_GetResolvedReferences},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test ResolvedReferencesNotNullTest\n+ * @bug 8313638\n+ * @summary Testing resolved references array to ensure elements are non-null\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @build jdk.test.whitebox.WhiteBox ResolvedReferencesWb ResolvedReferencesTestApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver ResolvedReferencesNotNullTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class ResolvedReferencesNotNullTest {\n+    public static void main(String[] args) throws Exception {\n+        SharedStringsUtils.buildJarAndWhiteBox(\"ResolvedReferencesWb\", \"ResolvedReferencesTestApp\");\n+        String appJar = TestCommon.getTestJar(SharedStringsUtils.TEST_JAR_NAME_FULL);\n+        String whiteboxParam = SharedStringsUtils.getWbParam();\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-cp\",\n+                                                                  appJar,\n+                                                                  whiteboxParam,\n+                                                                  \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                  \"-XX:+WhiteBoxAPI\",\n+                                                                  \"ResolvedReferencesWb\",\n+                                                                  \"false\" \/\/ ResolvedReferencesTestApp is not archived\n+                                                                  );\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        TestCommon.dump(appJar,\n+                        TestCommon.list(\"ResolvedReferencesWb\", \"ResolvedReferencesTestApp\"),\n+                        TestCommon.concat(\"-XX:SharedArchiveFile=ResolvedRef.jsa\",\n+                                          \"-XX:+UnlockDiagnosticVMOptions\",\n+                                          \"-XX:+WhiteBoxAPI\",\n+                                          whiteboxParam));\n+\n+        \/\/ Since ResolvedReferencesTestApp is now archived, all of the strings should be in the resolved\n+        \/\/ references array\n+        TestCommon.run(\"-cp\",\n+                       appJar,\n+                       whiteboxParam,\n+                       \"-XX:SharedArchiveFile=ResolvedRef.jsa\",\n+                       \"-XX:+UnlockDiagnosticVMOptions\",\n+                       \"-XX:+WhiteBoxAPI\",\n+                       \"ResolvedReferencesWb\",\n+                       \"true\" \/\/ ResolvedReferencesTestApp is archived\n+                       ).assertNormalExit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/ResolvedReferencesNotNullTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class ResolvedReferencesTestApp {\n+    \/\/ These strings must be in the resolved references array\n+    static String foo = \"fooString\";\n+    static String bar = \"barString\";\n+\n+    \/\/ This method is never called so the string should not be added to the resolved references array\n+    String qux() { return \"quxString\"; }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/ResolvedReferencesTestApp.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class ResolvedReferencesWb {\n+    public static void main(String[] args) throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"Test requires arg: [true|false]\");\n+        }\n+\n+        if (!args[0].equals(\"true\") && !args[0].equals(\"false\")) {\n+            throw new RuntimeException(\"Invalid argument: Test requires arg: [true|false]\");\n+        }\n+\n+        ResolvedReferencesTestApp t = new ResolvedReferencesTestApp();\n+        Object[] resolvedReferences = wb.getResolvedReferences(ResolvedReferencesTestApp.class);\n+        boolean isArchived = (args[0].equals(\"true\"));\n+\n+        if (resolvedReferences.length <= 0) {\n+            throw new RuntimeException(\"Resolved reference should not be null\");\n+        }\n+\n+        boolean foundFoo = false;\n+        boolean foundBar = false;\n+        boolean foundQux = false;\n+\n+        for (Object o : resolvedReferences) {\n+            if (o != null) {\n+                foundFoo |= (o.equals(\"fooString\"));\n+                foundBar |= (o.equals(\"barString\"));\n+                foundQux |= (o.equals(\"quxString\"));\n+            }\n+        }\n+\n+        if (isArchived) {\n+            \/\/ CDS eagerly resolves all the string literals in the ConstantPool. At this point, all\n+            \/\/ three strings should be in the resolvedReferences array.\n+            if (!foundFoo || !foundBar || !foundQux) {\n+                throwException(resolvedReferences, \"Incorrect resolved references array, all strings should be present\");\n+            }\n+        } else {\n+            \/\/ If the class is not archived, the string literals in the ConstantPool are resolved\n+            \/\/ on-demand. At this point, ResolvedReferencesTestApp::<clinit> has been executed\n+            \/\/ so the two strings used there should be in the resolvedReferences array.\n+            \/\/ ResolvedReferencesTestApp::qux() is not executed so \"quxString\"\n+            \/\/ should not yet be resolved.\n+            if (!foundFoo || !foundBar || foundQux) {\n+                throwException(resolvedReferences, \"Incorrect resolved references array, quxString should not be archived\");\n+            }\n+        }\n+    }\n+\n+    static void throwException(Object[] resolvedRefs, String errMsg) throws RuntimeException {\n+        System.out.printf(\"Resolved References Array Length: %d\\n\", resolvedRefs.length);\n+        for (Object o : resolvedRefs) {\n+            System.out.println(o);\n+        }\n+        throw new RuntimeException(errMsg);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/ResolvedReferencesWb.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -141,0 +141,6 @@\n+  private native Object[] getResolvedReferences0(Class<?> aClass);\n+  public         Object[] getResolvedReferences(Class<?> aClass) {\n+    Objects.requireNonNull(aClass);\n+    return getResolvedReferences0(aClass);\n+  }\n+\n@@ -606,1 +612,0 @@\n-  public native Object  getResolvedReferences(Class<?> c);\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}