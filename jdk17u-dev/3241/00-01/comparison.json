{"files":[{"patch":"@@ -40,1 +40,1 @@\n-  static const size_t MaxSelections = 320;\n+  static const size_t MaxSelections = 256;\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-<!--  \n-\n- Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n-\n-  @test\n-  @bug 4157271\n-  @summary Checks that when a Frame is created it honors the state it\n-  \twas set to. The bug was that if setState(Frame.ICONIFIED) was \n-  \tcalled before setVisible(true) the Frame would be shown in NORMAL \n-  \tstate instead of ICONIFIED.\n-  @author JTG East Team: area=awt.Frame\n-  @run applet\/manual=yesno FrameStateTest.html\n-\n- -->\n-\n-<html>\n-<head>\n-<title> FrameStateTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>FrameStateTest<br>Bug ID: 4157271<\/h1>\n-<p>This test checks that when setState(Frame.ICONIFIED) is called before\n-  \tsetVisible(true) the Frame is shown in the proper iconified state.\n-  \tThe problem was that it did not honor the initial iconic state, but\n- \tinstead was shown in the NORMAL state.<\/p>\n-<p>See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"FrameStateTest.class\" WIDTH=600 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameStateTest\/FrameStateTest.html","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,0 @@\n-  test\n-  @bug 4157271\n-  @summary Checks that when a Frame is created it honors the state it\n-        was set to. The bug was that if setState(Frame.ICONIFIED) was\n-        called before setVisible(true) the Frame would be shown in NORMAL\n-        state instead of ICONIFIED.\n-  @author JTG East Team: area=awt.Frame\n-  @run applet\/manual=yesno FrameStateTest.html\n-*\/\n-\n-\/**\n@@ -44,69 +33,17 @@\n-import java.awt.event.*;\n-import java.awt.*;\n-import java.lang.*;\n-import java.applet.Applet;\n-\n-\n-public class FrameStateTest extends Applet implements ActionListener, ItemListener{\n-\n-   Button btnCreate = new Button(\"Create Frame\");\n-   Button btnDispose = new Button(\"Dispose Frame\");\n-   CheckboxGroup cbgState = new CheckboxGroup();\n-   CheckboxGroup cbgResize = new CheckboxGroup();\n-   Checkbox cbIconState = new Checkbox(\"Frame state ICONIFIED\",cbgState,false);\n-   Checkbox cbNormState = new Checkbox(\"Frame state NORMAL\",cbgState,true);\n-   Checkbox cbNonResize = new Checkbox(\"Frame Nonresizable\",cbgResize,false);\n-   Checkbox cbResize = new Checkbox(\"Frame Resizable\",cbgResize,true);\n-   int iState = 0;\n-   boolean bResize = true;\n-   CreateFrame icontst;\n-\n-   public void init() {\n-      this.setLayout (new BorderLayout ());\n-\n-      String[] instructions =\n-       {\n-        \"Steps to try to reproduce this problem:\",\n-        \"When this test is run an Applet Viewer window will display. In the\",\n-        \"Applet Viewer window select the different options for the Frame (i.e.\",\n-        \"{Normal, Non-resizalbe}, {Normal, Resizable}, {Iconified, Resizable},\",\n-        \"{Iconified, Non-resizalbe}). After chosing the Frame's state click the\",\n-        \"Create Frame button. After the Frame (Frame State Test (Window2)) comes\",\n-        \"up make sure the proper behavior occurred (Frame shown in proper state).\",\n-        \"Click the Dispose button to close the Frame. Do the above steps for all\",\n-        \"the different Frame state combinations available. If you observe the\",\n-        \"proper behavior the test has passed, Press the Pass button. Otherwise\",\n-        \"the test has failed, Press the Fail button.\",\n-        \"Note: In Frame State Test (Window2) you can also chose the different\",\n-        \"buttons to see different Frame behavior. An example of a problem that\",\n-        \"has been seen, With the Frame nonresizable you can not iconify the Frame.\"\n-       };\n-      Sysout.createDialogWithInstructions( instructions );\n-\n-      btnDispose.setEnabled(false);\n-      add(btnCreate, BorderLayout.NORTH);\n-      add(btnDispose, BorderLayout.SOUTH);\n-\n-      Panel p = new Panel(new GridLayout(0,1));\n-      p.add(cbIconState);\n-      p.add(cbResize);\n-      add(p, BorderLayout.WEST);\n-\n-      p = new Panel(new GridLayout(0,1));\n-      p.add(cbNormState);\n-      p.add(cbNonResize);\n-      add(p, BorderLayout.EAST);\n-\n-      \/\/ Add Listeners\n-      btnDispose.addActionListener(this);\n-      btnCreate.addActionListener(this);\n-      cbNormState.addItemListener(this);\n-      cbResize.addItemListener(this);\n-      cbIconState.addItemListener(this);\n-      cbNonResize.addItemListener(this);\n-\n-      resize(600, 200);\n-\n-   }\/\/End  init()\n-\n-   public void actionPerformed(ActionEvent evt) {\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxGroup;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Rectangle;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import javax.swing.JPanel;\n+import javax.swing.Timer;\n@@ -114,0 +51,93 @@\n+\/*\n+ * @test\n+ * @bug 4157271\n+ * @summary Checks that when a Frame is created it honors the state it\n+ *       was set to. The bug was that if setState(Frame.ICONIFIED) was\n+ *       called before setVisible(true) the Frame would be shown in NORMAL\n+ *       state instead of ICONIFIED.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameStateTest\n+ *\/\n+\n+public class FrameStateTest implements ActionListener {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        <html><body><p>\n+        This test checks that when setState(Frame.ICONIFIED) is called before\n+        setVisible(true) the Frame is shown in the proper iconified state.\n+        The problem was that it did not honor the initial iconic state, but\n+        instead was shown in the NORMAL state.\n+        <\/p><hr\/><p>\n+\n+        Steps to try to reproduce this problem:\n+        <\/p><p>\n+        Select the different options for the Frame:\n+            <ul>\n+                <li><i>{Normal, Non-resizalbe}<\/i><\/li>\n+                <li><i>{Normal, Resizable}<\/i><\/li>\n+                <li><i>{Iconified, Resizable}<\/i><\/li>\n+                <li><i>{Iconified, Non-resizalbe}<\/i><\/li>\n+            <\/ul>\n+        After choosing the Frame's state click the\n+        Create Frame button.<br>\n+        After the Frame (Frame State Test (Window2)) comes\n+        up make sure the proper behavior occurred<br>\n+        (Frame shown in proper state).<br>\n+        Click the Dispose button to close the Frame.<br>\n+\n+        <\/p><hr\/><p>\n+\n+        Do the above steps for all the different Frame state combinations available.<br>\n+        If you observe the proper behavior the test has passed, Press the Pass button.<br>\n+        Otherwise the test has failed, Press the Fail button.\n+        <\/p><p>\n+        Note: In Frame State Test (Window2) you can also chose the different\n+        buttons to see different Frame behavior.<br>An example of a problem that\n+        has been seen, with the Frame non-resizable you can not iconify the Frame.\n+        <\/p>\n+        <\/body>\n+        <\/html>\n+        \"\"\";\n+\n+    public static final int DELAY = 1000;\n+\n+    Button btnCreate = new Button(\"Create Frame\");\n+    Button btnDispose = new Button(\"Dispose Frame\");\n+    CheckboxGroup cbgState = new CheckboxGroup();\n+    CheckboxGroup cbgResize = new CheckboxGroup();\n+    Checkbox cbIconState = new Checkbox(\"Frame state ICONIFIED\", cbgState, true);\n+    Checkbox cbNormState = new Checkbox(\"Frame state NORMAL\", cbgState, false);\n+    Checkbox cbNonResize = new Checkbox(\"Frame non-resizable\", cbgResize, false);\n+    Checkbox cbResize = new Checkbox(\"Frame Resizable\", cbgResize, true);\n+\n+    CreateFrame icontst;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+                .builder()\n+                .title(\"GetBoundsResizeTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .rows(25)\n+                .columns(70)\n+                .logArea(10)\n+                .splitUIBottom(() -> new FrameStateTest().createPanel())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public JPanel createPanel() {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new GridLayout(0, 3));\n+        btnDispose.setEnabled(false);\n+\n+        panel.add(cbIconState);\n+        panel.add(cbResize);\n+        panel.add(btnCreate);\n+        panel.add(cbNormState);\n+        panel.add(cbNonResize);\n+        panel.add(btnDispose);\n+\n+        btnDispose.addActionListener(this);\n+        btnCreate.addActionListener(this);\n@@ -115,0 +145,4 @@\n+        return panel;\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n@@ -118,2 +152,2 @@\n-            icontst = new CreateFrame(iState, bResize);\n-            icontst.show();\n+            icontst =new CreateFrame(cbIconState.getState(), cbResize.getState());\n+            icontst.setVisible(true);\n@@ -127,6 +161,39 @@\n-    public void itemStateChanged(ItemEvent evt) {\n-\n-        if (cbNormState.getState()) iState = 0;\n-        if (cbIconState.getState()) iState = 1;\n-        if (cbResize.getState()) bResize = true;\n-        if (cbNonResize.getState()) bResize = false;\n+    static class CreateFrame extends Frame\n+            implements ActionListener, WindowListener {\n+\n+        Button b1, b2, b3, b4, b5, b6, b7;\n+        boolean isResizable;\n+        String name = \"Frame State Test\";\n+\n+        CreateFrame(boolean iconified, boolean resizable) {\n+            setTitle(\"Frame State Test (Window 2)\");\n+\n+            isResizable = resizable;\n+\n+            PassFailJFrame.log(\"CREATING FRAME - Initially \" +\n+                    ((iconified) ? \"ICONIFIED\" : \"NORMAL (NON-ICONIFIED)\") + \" and \" +\n+                    ((isResizable) ? \"RESIZABLE\" : \"NON-RESIZABLE\"));\n+\n+            setLayout(new FlowLayout());\n+            add(b1 = new Button(\"resizable\"));\n+            add(b2 = new Button(\"resize\"));\n+            add(b3 = new Button(\"iconify\"));\n+            add(b4 = new Button(\"iconify and restore\"));\n+            add(b5 = new Button(\"hide and show\"));\n+            add(b6 = new Button(\"hide, iconify and show\"));\n+            add(b7 = new Button(\"hide, iconify, show, and restore\"));\n+            b1.addActionListener(this);\n+            b2.addActionListener(this);\n+            b3.addActionListener(this);\n+            b4.addActionListener(this);\n+            b5.addActionListener(this);\n+            b6.addActionListener(this);\n+            b7.addActionListener(this);\n+            addWindowListener(this);\n+\n+            setBounds(100, 2, 200, 200);\n+            setState(iconified ? Frame.ICONIFIED : Frame.NORMAL);\n+            setResizable(isResizable);\n+            pack();\n+            setVisible(true);\n+        }\n@@ -134,1 +201,7 @@\n-    }\n+        \/**\n+         * Calls all runnables on EDT with a {@code DELAY} delay before each run.\n+         * @param runnables to run\n+         *\/\n+        private static void delayedActions(Runnable... runnables) {\n+            setTimer(new ArrayDeque<>(Arrays.asList(runnables)));\n+        }\n@@ -136,1 +209,2 @@\n-}\/\/ class FrameStateTest\n+        private static void setTimer(Deque<Runnable> deque) {\n+            if (deque == null || deque.isEmpty()) return;\n@@ -138,0 +212,7 @@\n+            Timer timer = new Timer(DELAY, e -> {\n+                deque.pop().run();\n+                setTimer(deque);\n+            });\n+            timer.setRepeats(false);\n+            timer.start();\n+        }\n@@ -139,1 +220,71 @@\n-class CreateFrame extends Frame implements ActionListener , WindowListener {\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == b2) {\n+                Rectangle r = this.getBounds();\n+                r.width += 10;\n+                stateLog(\" - button pressed - setting bounds on Frame to: \" + r);\n+                setBounds(r);\n+                validate();\n+            } else if (e.getSource() == b1) {\n+                isResizable = !isResizable;\n+                stateLog(\" - button pressed - setting Resizable to: \" + isResizable);\n+                ((Frame) (b1.getParent())).setResizable(isResizable);\n+            } else if (e.getSource() == b3) {\n+                stateLog(\" - button pressed - setting Iconic: \");\n+                ((Frame) (b1.getParent())).setState(Frame.ICONIFIED);\n+                stateLog();\n+            } else if (e.getSource() == b4) {\n+                stateLog(\" - button pressed - setting Iconic: \");\n+                ((Frame) (b1.getParent())).setState(Frame.ICONIFIED);\n+                stateLog();\n+                delayedActions(() -> {\n+                    stateLog(\" - now restoring: \");\n+                    ((Frame) (b1.getParent())).setState(Frame.NORMAL);\n+                    stateLog();\n+                });\n+            } else if (e.getSource() == b5) {\n+                stateLog(\" - button pressed - hiding : \");\n+                b1.getParent().setVisible(false);\n+                stateLog();\n+                delayedActions(() -> {\n+                    stateLog(\" - now reshowing: \");\n+                    b1.getParent().setVisible(true);\n+                    stateLog();\n+                });\n+            } else if (e.getSource() == b6) {\n+                stateLog(\" - button pressed - hiding : \");\n+                b1.getParent().setVisible(false);\n+                stateLog();\n+                delayedActions(\n+                        () -> {\n+                            stateLog(\" - setting Iconic: \");\n+                            ((Frame) (b1.getParent())).setState(Frame.ICONIFIED);\n+                        },\n+                        () -> {\n+                            stateLog(\" - now reshowing: \");\n+                            b1.getParent().setVisible(true);\n+                            stateLog();\n+                        }\n+                );\n+            } else if (e.getSource() == b7) {\n+                stateLog(\" - button pressed - hiding : \");\n+                b1.getParent().setVisible(false);\n+                stateLog();\n+\n+                delayedActions(\n+                        () -> {\n+                            stateLog(\" - setting Iconic: \");\n+                            ((Frame) (b1.getParent())).setState(Frame.ICONIFIED);\n+                        },\n+                        () -> {\n+                            stateLog(\" - now reshowing: \");\n+                            b1.getParent().setVisible(true);\n+                            stateLog();\n+                        },\n+                        () -> {\n+                            stateLog(\" - now restoring: \");\n+                            ((Frame) (b1.getParent())).setState(Frame.NORMAL);\n+                            stateLog();\n+                        }\n+                );\n+            }\n+        }\n@@ -141,5 +292,3 @@\n-  static int e=0;\n-  static int u=0;\n-  static int p=0;\n-  static int i=0;\n-  static int v=0;\n+        public void windowActivated(WindowEvent e) {\n+            stateLog(\"Activated\");\n+        }\n@@ -147,4 +296,3 @@\n-  Button b1, b2, b3, b4, b5, b6, b7;\n-  boolean resizable = true;\n-  boolean iconic = false;\n-  String name = \"Frame State Test\";\n+        public void windowClosed(WindowEvent e) {\n+            stateLog(\"Closed\");\n+        }\n@@ -152,1 +300,4 @@\n-  CreateFrame (int iFrameState, boolean bFrameResizable) {\n+        public void windowClosing(WindowEvent e) {\n+            ((Window) (e.getSource())).dispose();\n+            stateLog(\"Closing\");\n+        }\n@@ -154,1 +305,3 @@\n-    setTitle(\"Frame State Test (Window 2)\");\n+        public void windowDeactivated(WindowEvent e) {\n+            stateLog(\"Deactivated\");\n+        }\n@@ -156,3 +309,3 @@\n-    if (iFrameState == 1) {\n-        iconic = true;\n-    }\n+        public void windowDeiconified(WindowEvent e) {\n+            stateLog(\"Deiconified\");\n+        }\n@@ -160,3 +313,3 @@\n-    if (!(bFrameResizable)) {\n-        resizable = false;\n-    }\n+        public void windowIconified(WindowEvent e) {\n+            stateLog(\"Iconified\");\n+        }\n@@ -164,121 +317,3 @@\n-    System.out.println(\"CREATING FRAME - Initially \"+\n-        ((iconic) ? \"ICONIFIED\" : \"NORMAL (NON-ICONIFIED)\") + \" and \" +\n-        ((resizable) ? \"RESIZABLE\" : \"NON-RESIZABLE\") );\n-\n-    Sysout.println(\"CREATING FRAME - Initially \"+\n-        ((iconic) ? \"ICONIFIED\" : \"NORMAL (NON-ICONIFIED)\") + \" and \" +\n-        ((resizable) ? \"RESIZABLE\" : \"NON-RESIZABLE\") );\n-\n-    setLayout(new FlowLayout() );\n-    b1 = new Button(\"resizable\");\n-    add(b1);\n-    b2 = new Button(\"resize\");\n-    add(b2);\n-    b3 = new Button(\"iconify\");\n-    add(b3);\n-    b4 = new Button(\"iconify and restore\");\n-    add(b4);\n-    b5 = new Button(\"hide and show\");\n-    add(b5);\n-    b6 = new Button(\"hide, iconify and show\");\n-    add(b6);\n-    b7 = new Button(\"hide, iconify, show, and restore\");\n-    add(b7);\n-    b1.addActionListener(this);\n-    b2.addActionListener(this);\n-    b3.addActionListener(this);\n-    b4.addActionListener(this);\n-    b5.addActionListener(this);\n-    b6.addActionListener(this);\n-    b7.addActionListener(this);\n-    addWindowListener(this);\n-\n-    setBounds(100,2,200, 200);\n-    setState(iconic ? Frame.ICONIFIED: Frame.NORMAL);\n-    setResizable(resizable);\n-    pack();\n-    setVisible(true);\n-\n-  }\n-\n-  public void actionPerformed ( ActionEvent e )\n-  {\n-    if ( e.getSource() == b2 ) {\n-        Rectangle r = this.getBounds();\n-        r.width += 10;\n-        System.out.println(\" - button pressed - setting bounds on Frame to: \"+r);\n-        setBounds(r);\n-        validate();\n-    } else if ( e.getSource() == b1 ) {\n-        resizable = !resizable;\n-        System.out.println(\" - button pressed - setting Resizable to: \"+resizable);\n-        ((Frame)(b1.getParent())).setResizable(resizable);\n-    } else if ( e.getSource() == b3 ) {\n-        System.out.println(\" - button pressed - setting Iconic: \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setState(Frame.ICONIFIED);\n-        dolog();\n-    } else if ( e.getSource() == b4 ) {\n-        System.out.println(\" - button pressed - setting Iconic: \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setState(Frame.ICONIFIED);\n-        dolog();\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - now restoring: \");\n-        ((Frame)(b1.getParent())).setState(Frame.NORMAL);\n-        dolog();\n-    } else if ( e.getSource() == b5 ) {\n-        System.out.println(\" - button pressed - hiding : \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setVisible(false);\n-        dolog();\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - now reshowing: \");\n-        ((Frame)(b1.getParent())).setVisible(true);\n-        dolog();\n-    } else if ( e.getSource() == b6 ) {\n-        System.out.println(\" - button pressed - hiding : \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setVisible(false);\n-        dolog();\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - setting Iconic: \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setState(Frame.ICONIFIED);\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - now reshowing: \");\n-        ((Frame)(b1.getParent())).setVisible(true);\n-        dolog();\n-    } else if ( e.getSource() == b7 ) {\n-        System.out.println(\" - button pressed - hiding : \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setVisible(false);\n-        dolog();\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - setting Iconic: \");\n-        dolog();\n-        ((Frame)(b1.getParent())).setState(Frame.ICONIFIED);\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - now reshowing: \");\n-        ((Frame)(b1.getParent())).setVisible(true);\n-        dolog();\n-        try {\n-                Thread.sleep(1000);\n-        } catch (Exception ex) {};\n-        System.out.println(\" - now restoring: \");\n-        ((Frame)(b1.getParent())).setState(Frame.NORMAL);\n-        dolog();\n-    }\n-  }\n+        public void windowOpened(WindowEvent e) {\n+            stateLog(\"Opened\");\n+        }\n@@ -286,29 +321,4 @@\n-    public void windowActivated(WindowEvent e) {\n-        System.out.println(name + \" Activated\");\n-        dolog();\n-    }\n-    public void windowClosed(WindowEvent e) {\n-        System.out.println(name + \" Closed\");\n-        dolog();\n-    }\n-    public void windowClosing(WindowEvent e) {\n-        ((Window)(e.getSource())).dispose();\n-        System.out.println(name + \" Closing\");\n-        dolog();\n-    }\n-    public void windowDeactivated(WindowEvent e) {\n-        System.out.println(name + \" Deactivated\");\n-        dolog();\n-    }\n-    public void windowDeiconified(WindowEvent e) {\n-        System.out.println(name + \" Deiconified\");\n-        dolog();\n-    }\n-    public void windowIconified(WindowEvent e) {\n-        System.out.println(name + \" Iconified\");\n-        dolog();\n-    }\n-    public void windowOpened(WindowEvent e) {\n-        System.out.println(name + \" Opened\");\n-        dolog();\n-    }\n+        public void stateLog(String message) {\n+            PassFailJFrame\n+                .log(\"[State=%d] %s %s\".formatted(getState(), name, message));\n+        }\n@@ -316,2 +326,3 @@\n-    public void dolog() {\n-        System.out.println(\" getState returns: \"+getState());\n+        public void stateLog() {\n+            PassFailJFrame.log(\"[State=\" + getState() + \"]\");\n+        }\n@@ -320,140 +331,0 @@\n-\n-\/\/ }\/\/ class FrameStateTest\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      int scrollNone = TextArea.SCROLLBARS_NONE;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 10, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameStateTest\/FrameStateTest.java","additions":272,"deletions":401,"binary":false,"changes":673,"status":"modified"}]}