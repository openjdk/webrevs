{"files":[{"patch":"@@ -1,33 +0,0 @@\n-#\n-# Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# Execute the test. \n-# No need to compile (now done by JTReg tags in calling file)\n-#\n-echo ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Dtest.src=${TESTCLASSES} \\\n-     -classpath ${TESTCLASSPATH} $* || exit 20\n-\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Dtest.src=${TESTCLASSES} \\\n-     -classpath ${TESTCLASSPATH} $* || exit 20\n-\n-exit 0\n","filename":"test\/jdk\/sun\/management\/jmxremote\/RunTest.sh","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,131 +0,0 @@\n-#\n-# Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# Utility Shell Script for generating .properties files or .password files\n-# or .access files from a list of input .in files.\n-#\n-# Source in this GeneratePropertyPassword.sh and call the function\n-# generatePropertyPasswordFiles.\n-# Call restoreFilePermissions to restore file permissions after the test completes\n-#\n-\n-\n-OS=`uname -s`\n-UMASK=`umask`\n-\n-case $OS in\n-CYGWIN_NT*)\n-    OS=\"Windows_NT\"\n-    if [ -z \"$SystemRoot\" ] ;  then\n-        SystemRoot=`cygpath $SYSTEMROOT`\n-    fi\n-esac\n-\n-case $OS in\n-Linux | Darwin | AIX )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    DFILESEP=$FILESEP\n-    TMP_FILE=${TESTCLASSES}${FILESEP}${TESTCLASS}.sed.tmpfile\n-\n-cat <<EOF > ${TMP_FILE}\n-s^@TEST-SRC@\/^${TESTCLASSES}${DFILESEP}^g\n-EOF\n-    ;;\n-Windows_95 | Windows_98 | Windows_NT | Windows_ME | CYGWIN*)\n-    PATHSEP=\";\"\n-    FILESEP=\"\\\\\"\n-    DFILESEP=$FILESEP$FILESEP\n-    TMP_FILE=${TESTCLASSES}${FILESEP}${TESTCLASS}.sed.tmpfile\n-\n-cat <<EOF > ${TMP_FILE}0\n-s^@TEST-SRC@\/^${TESTCLASSES}${DFILESEP}^g\n-EOF\n-    # Need to put double backslash in the .properties files\n-    cat ${TMP_FILE}0 | sed -e 's^\\\\\\\\^ZZZZ^g' | \\\n-        sed -e 's^\\\\^ZZZZ^g' | \\\n-        sed -e 's^ZZZZ^\\\\\\\\\\\\\\\\^g' > ${TMP_FILE}\n-\n-    if [ \"$OS\" = \"Windows_NT\" ]; then\n-        USER=`id -u -n`\n-        CACLS=\"$SystemRoot\/system32\/cacls.exe\"\n-        REVOKEALL=\"$TESTNATIVEPATH\/revokeall.exe\"\n-        if [ ! -x \"$REVOKEALL\" ] ; then\n-            echo \"$REVOKEALL doesn't exist or is not executable\"\n-            exit 1\n-        fi\n-    fi\n-    ;;\n-*)\n-    echo \"Unrecognized system! $OS\"\n-    exit 1\n-    ;;\n-esac\n-\n-generatePropertyPasswordFiles()\n-{\n-   for f in $@\n-   do\n-        echo processing $f\n-        suffix=`basename $f .in`\n-        f2=\"${TESTCLASSES}${FILESEP}${suffix}\"\n-\n-        if [ -f \"$f2\" ] ; then\n-            rm -f $f2 || echo WARNING: $f2 already exits - unable to remove old copy\n-        fi\n-\n-        echo creating $f2\n-        sed -f $TMP_FILE $f > $f2\n-\n-        if [ \"$OS\" = \"Windows_NT\" ]; then\n-            chown $USER $f2\n-            # Grant this user full access\n-            echo Y|$CACLS $f2 \\\/E \\\/G $USER:F\n-            # Revoke everyone else\n-            $REVOKEALL $f2\n-            # Display ACLs\n-            $CACLS $f2\n-        else\n-            chmod 600 $f2\n-        fi\n-   done\n-}\n-\n-restoreFilePermissions()\n-{\n-    for f in $@\n-    do\n-        suffix=`basename $f .in`\n-        f2=\"${TESTCLASSES}${FILESEP}${suffix}\"\n-\n-        if [ \"$OS\" = \"Windows_NT\" ]; then\n-            # Grant everyone full control\n-            $CACLS $f2 \\\/E \\\/G Everyone:F\n-        else\n-            chmod 777 $f2\n-        fi\n-\n-    done\n-}\n-\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/GeneratePropertyPassword.sh","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -27,1 +28,0 @@\n-import java.io.FilenameFilter;\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -32,3 +33,12 @@\n-import java.util.Properties;\n-import java.util.Iterator;\n-import java.util.Set;\n+import jdk.internal.agent.AgentConfigurationError;\n+\n+import javax.management.MBeanAttributeInfo;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServerConnection;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXServiceURL;\n+import java.security.Security;\n@@ -36,0 +46,1 @@\n+import java.util.Enumeration;\n@@ -37,0 +48,1 @@\n+import java.util.List;\n@@ -38,4 +50,2 @@\n-import java.util.Enumeration;\n-\n-import javax.management.remote.*;\n-import javax.management.*;\n+import java.util.Properties;\n+import java.util.Set;\n@@ -43,1 +53,10 @@\n-import jdk.internal.agent.AgentConfigurationError;\n+\/*\n+ * @test\n+ * @bug     6528083\n+ * @key     intermittent\n+ * @summary Test RMI Bootstrap\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/timeout=300 RmiBootstrapTest .*_test.*.in\n+ * *\/\n@@ -45,1 +64,10 @@\n-import java.security.Security;\n+\/*\n+ * @test\n+ * @bug     6528083\n+ * @key     intermittent\n+ * @summary Test RMI Bootstrap\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/timeout=300 RmiBootstrapTest .*_ssltest.*.in\n+ * *\/\n@@ -59,1 +87,1 @@\n- * <p>When called with some argument, the main() will interprete its args to\n+ * <p>When called with some argument, the main() will interpret its args to\n@@ -71,1 +99,2 @@\n-public class RmiBootstrapTest {\n+public class RmiBootstrapTest extends RmiTestBase {\n+    static TestLogger log = new TestLogger(\"RmiBootstrapTest\");\n@@ -74,97 +103,0 @@\n-    static TestLogger log =\n-        new TestLogger(\"RmiBootstrapTest\");\n-\n-    \/**\n-     * Default values for RMI configuration properties.\n-     **\/\n-    public static interface DefaultValues {\n-        public static final String PORT=\"0\";\n-        public static final String CONFIG_FILE_NAME=\"management.properties\";\n-        public static final String USE_SSL=\"true\";\n-        public static final String USE_AUTHENTICATION=\"true\";\n-        public static final String PASSWORD_FILE_NAME=\"jmxremote.password\";\n-        public static final String ACCESS_FILE_NAME=\"jmxremote.access\";\n-        public static final String KEYSTORE=\"keystore\";\n-        public static final String KEYSTORE_PASSWD=\"password\";\n-        public static final String TRUSTSTORE=\"truststore\";\n-        public static final String TRUSTSTORE_PASSWD=\"trustword\";\n-        public static final String SSL_NEED_CLIENT_AUTH=\"false\";\n-    }\n-\n-    \/**\n-     * Names of RMI configuration properties.\n-     **\/\n-    public static interface PropertyNames {\n-        public static final String PORT=\n-            \"com.sun.management.jmxremote.port\";\n-        public static final String CONFIG_FILE_NAME=\n-            \"com.sun.management.config.file\";\n-        public static final String USE_SSL=\n-            \"com.sun.management.jmxremote.ssl\";\n-        public static final String USE_AUTHENTICATION=\n-            \"com.sun.management.jmxremote.authenticate\";\n-        public static final String PASSWORD_FILE_NAME=\n-            \"com.sun.management.jmxremote.password.file\";\n-        public static final String ACCESS_FILE_NAME=\n-            \"com.sun.management.jmxremote.access.file\";\n-        public static final String INSTRUMENT_ALL=\n-            \"com.sun.management.instrumentall\";\n-        public static final String CREDENTIALS =\n-            \"jmx.remote.credentials\";\n-        public static final String KEYSTORE=\n-            \"javax.net.ssl.keyStore\";\n-        public static final String KEYSTORE_PASSWD=\n-            \"javax.net.ssl.keyStorePassword\";\n-        public static final String TRUSTSTORE=\n-            \"javax.net.ssl.trustStore\";\n-        public static final String TRUSTSTORE_PASSWD=\n-            \"javax.net.ssl.trustStorePassword\";\n-        public static final String SSL_ENABLED_CIPHER_SUITES =\n-            \"com.sun.management.jmxremote.ssl.enabled.cipher.suites\";\n-        public static final String SSL_ENABLED_PROTOCOLS =\n-            \"com.sun.management.jmxremote.ssl.enabled.protocols\";\n-        public static final String SSL_NEED_CLIENT_AUTH =\n-            \"com.sun.management.jmxremote.ssl.need.client.auth\";\n-        public static final String SSL_CLIENT_ENABLED_CIPHER_SUITES =\n-            \"javax.rmi.ssl.client.enabledCipherSuites\";\n-    }\n-\n-    \/**\n-     * A filter to find all filenames who match <prefix>*<suffix>.\n-     * Note that <prefix> and <suffix> can overlap.\n-     **\/\n-    private static class ConfigFilenameFilter implements FilenameFilter {\n-        final String suffix;\n-        final String prefix;\n-        ConfigFilenameFilter(String prefix, String suffix) {\n-            this.suffix=suffix;\n-            this.prefix=prefix;\n-        }\n-        public boolean accept(File dir, String name) {\n-            return (name.startsWith(prefix) && name.endsWith(suffix));\n-        }\n-    }\n-\n-    \/**\n-     * Get all \"management*ok.properties\" files in the directory\n-     * indicated by the \"test.src\" management property.\n-     **\/\n-    private static File[] findConfigurationFilesOk() {\n-        final String testSrc = System.getProperty(\"test.src\");\n-        final File dir = new File(testSrc);\n-        final FilenameFilter filter =\n-            new ConfigFilenameFilter(\"management_test\",\"ok.properties\");\n-        return dir.listFiles(filter);\n-    }\n-\n-    \/**\n-     * Get all \"management*ko.properties\" files in the directory\n-     * indicated by the \"test.src\" management property.\n-     **\/\n-    private static File[] findConfigurationFilesKo() {\n-        final String testSrc = System.getProperty(\"test.src\");\n-        final File dir = new File(testSrc);\n-        final FilenameFilter filter =\n-            new ConfigFilenameFilter(\"management_test\",\"ko.properties\");\n-        return dir.listFiles(filter);\n-    }\n@@ -175,0 +107,1 @@\n+     *\n@@ -177,3 +110,2 @@\n-    public static int listMBeans(MBeanServerConnection server)\n-        throws IOException {\n-        return listMBeans(server,null,null);\n+    public static int listMBeans(MBeanServerConnection server) throws IOException {\n+        return listMBeans(server, null, null);\n@@ -185,0 +117,1 @@\n+     *\n@@ -187,8 +120,6 @@\n-    public static int listMBeans(MBeanServerConnection server,\n-                                  ObjectName pattern, QueryExp query)\n-        throws IOException {\n-\n-        final Set names = server.queryNames(pattern,query);\n-        for (final Iterator i=names.iterator(); i.hasNext(); ) {\n-            ObjectName name = (ObjectName)i.next();\n-            log.trace(\"listMBeans\",\"Got MBean: \"+name);\n+    public static int listMBeans(MBeanServerConnection server, ObjectName pattern, QueryExp query)\n+            throws IOException {\n+\n+        final Set<ObjectName> names = server.queryNames(pattern, query);\n+        for (ObjectName name : names) {\n+            log.trace(\"listMBeans\", \"Got MBean: \" + name);\n@@ -196,2 +127,1 @@\n-                MBeanInfo info =\n-                    server.getMBeanInfo((ObjectName)name);\n+                MBeanInfo info = server.getMBeanInfo(name);\n@@ -199,2 +129,4 @@\n-                if (attrs == null) continue;\n-                for (int j=0; j<attrs.length; j++) {\n+                if (attrs == null) {\n+                    continue;\n+                }\n+                for (int j = 0; j < attrs.length; j++) {\n@@ -203,6 +135,4 @@\n-                            Object o =\n-                                server.getAttribute(name,attrs[j].getName());\n-                            if (log.isDebugOn())\n-                                log.debug(\"listMBeans\",\"\\t\\t\" +\n-                                          attrs[j].getName() +\n-                                          \" = \"+o);\n+                            Object o = server.getAttribute(name, attrs[j].getName());\n+                            if (log.isDebugOn()) {\n+                                log.debug(\"listMBeans\", \"\\t\\t\" + attrs[j].getName() + \" = \" + o);\n+                            }\n@@ -210,5 +140,2 @@\n-                            log.trace(\"listMBeans\",\"JmxClient failed to get \" +\n-                                      attrs[j].getName() + \": \" + x);\n-                            final IOException io =\n-                                new IOException(\"JmxClient failed to get \" +\n-                                                attrs[j].getName());\n+                            log.trace(\"listMBeans\", \"JmxClient failed to get \" + attrs[j].getName() + \": \" + x);\n+                            final IOException io = new IOException(\"JmxClient failed to get \" + attrs[j].getName());\n@@ -221,4 +148,2 @@\n-               log.trace(\"listMBeans\",\n-                         \"JmxClient failed to get MBeanInfo: \"  + x);\n-                final IOException io =\n-                    new IOException(\"JmxClient failed to get MBeanInfo: \"+x);\n+                log.trace(\"listMBeans\", \"JmxClient failed to get MBeanInfo: \" + x);\n+                final IOException io = new IOException(\"JmxClient failed to get MBeanInfo: \" + x);\n@@ -233,3 +158,2 @@\n-     * Compute the full path name for a default file.\n-     * @param basename basename (with extension) of the default file.\n-     * @return ${JRE}\/conf\/management\/${basename}\n+     * Calls run(args[]).\n+     * exit(1) if the test fails.\n@@ -237,9 +161,4 @@\n-    private static String getDefaultFileName(String basename) {\n-        final String fileSeparator = File.separator;\n-        final StringBuffer defaultFileName =\n-            new StringBuffer(System.getProperty(\"java.home\")).\n-            append(fileSeparator).append(\"conf\").append(fileSeparator).\n-            append(\"management\").append(fileSeparator).\n-            append(basename);\n-        return defaultFileName.toString();\n-    }\n+    public static void main(String args[]) throws Exception {\n+        if (args.length == 0) {\n+            throw new IllegalArgumentException(\"Argument is required for this\" + \" test\");\n+        }\n@@ -247,13 +166,1 @@\n-    \/**\n-     * Compute the full path name for a default file.\n-     * @param basename basename (with extension) of the default file.\n-     * @return ${JRE}\/conf\/management\/${basename}\n-     **\/\n-    private static String getDefaultStoreName(String basename) {\n-        final String fileSeparator = File.separator;\n-        final StringBuffer defaultFileName =\n-            new StringBuffer(System.getProperty(\"test.src\")).\n-            append(fileSeparator).append(\"ssl\").append(fileSeparator).\n-            append(basename);\n-        return defaultFileName.toString();\n-    }\n+        final List<Path> credentialFiles = prepareTestFiles(args[0]);\n@@ -261,0 +168,22 @@\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+\n+        try {\n+            MAX_GET_FREE_PORT_TRIES = Integer.parseInt(System.getProperty(\"test.getfreeport.max.tries\", \"10\"));\n+        } catch (NumberFormatException ex) {\n+        }\n+\n+        RmiBootstrapTest manager = new RmiBootstrapTest();\n+        try {\n+            manager.run(args);\n+        } catch (RuntimeException r) {\n+            System.out.println(\"Test Failed: \" + r.getMessage());\n+            System.exit(1);\n+        } catch (Throwable t) {\n+            System.out.println(\"Test Failed: \" + t);\n+            t.printStackTrace();\n+            System.exit(2);\n+        }\n+        System.out.println(\"**** Test  RmiBootstrap Passed ****\");\n+\n+        grantFilesAccess(credentialFiles, AccessControl.EVERYONE);\n+    }\n@@ -269,2 +198,1 @@\n-    private ArrayList readCredentials(String passwordFileName)\n-        throws IOException {\n+    private ArrayList readCredentials(String passwordFileName) throws IOException {\n@@ -272,1 +200,1 @@\n-        final ArrayList  result = new ArrayList();\n+        final ArrayList result = new ArrayList();\n@@ -274,4 +202,8 @@\n-        if (!f.exists()) return result;\n-        FileInputStream fin = new FileInputStream(passwordFileName);\n-        try {pws.load(fin);}finally{fin.close();}\n-        for (Enumeration en=pws.propertyNames();en.hasMoreElements();) {\n+        if (!f.exists()) {\n+            return result;\n+        }\n+        try (FileInputStream fin = new FileInputStream(passwordFileName)){\n+            pws.load(fin);\n+        } catch (IOException e) {\n+        }\n+        for (Enumeration en = pws.propertyNames(); en.hasMoreElements(); ) {\n@@ -279,2 +211,2 @@\n-            cred[0]=(String)en.nextElement();\n-            cred[1]=pws.getProperty(cred[0]);\n+            cred[0] = (String) en.nextElement();\n+            cred[1] = pws.getProperty(cred[0]);\n@@ -286,1 +218,0 @@\n-\n@@ -291,7 +222,9 @@\n-     * @param url JMXServiceURL of the server.\n-     * @param useCredentials An array of credentials (a credential\n-     *        is a two String array, so this is an array of arrays\n-     *        of strings:\n-     *           useCredentials[i][0]=subject\n-     *           useCredentials[i][1]=password\n-     *        if useCredentials[i] == null means no credentials.\n+     *\n+     * @param url             JMXServiceURL of the server.\n+     * @param useCredentials  An array of credentials (a credential\n+     *                        is a two String array, so this is an array of\n+     *                        arrays\n+     *                        of strings:\n+     *                        useCredentials[i][0]=subject\n+     *                        useCredentials[i][1]=password\n+     *                        if useCredentials[i] == null means no credentials.\n@@ -299,10 +232,16 @@\n-     *    Note: if expectConnectOk=false and the test fails to connect\n-     *          the number of failure is not incremented. Conversely,\n-     *          if expectConnectOk=false and the test does not fail to\n-     *          connect the number of failure is incremented.\n-     * @param expectReadOk true if communication (listMBeans) is expected\n-     *        to succeed.\n-     *    Note: if expectReadOk=false and the test fails to read MBeans\n-     *          the number of failure is not incremented. Conversely,\n-     *          if expectReadOk=false and the test does not fail to\n-     *          read MBeans the number of failure is incremented.\n+     *                        Note: if expectConnectOk=false and the test\n+     *                        fails to connect\n+     *                        the number of failure is not incremented.\n+     *                        Conversely,\n+     *                        if expectConnectOk=false and the test does not\n+     *                        fail to\n+     *                        connect the number of failure is incremented.\n+     * @param expectReadOk    true if communication (listMBeans) is expected\n+     *                        to succeed.\n+     *                        Note: if expectReadOk=false and the test fails\n+     *                        to read MBeans\n+     *                        the number of failure is not incremented.\n+     *                        Conversely,\n+     *                        if expectReadOk=false and the test does not\n+     *                        fail to\n+     *                        read MBeans the number of failure is incremented.\n@@ -311,5 +250,3 @@\n-    public int connectAndRead(JMXServiceURL url,\n-                              Object[] useCredentials,\n-                              boolean  expectConnectOk,\n-                              boolean  expectReadOk)\n-        throws IOException {\n+    public int connectAndRead(JMXServiceURL url, Object[] useCredentials,\n+            boolean expectConnectOk, boolean expectReadOk)\n+            throws IOException {\n@@ -319,1 +256,1 @@\n-        for (int i=0 ; i<useCredentials.length ; i++) {\n+        for (int i = 0; i < useCredentials.length; i++) {\n@@ -321,2 +258,2 @@\n-            final String[] credentials = (String[])useCredentials[i];\n-            final String   crinfo;\n+            final String[] credentials = (String[]) useCredentials[i];\n+            final String crinfo;\n@@ -324,2 +261,2 @@\n-                crinfo = \"{\"+credentials[0] + \", \" + credentials[1] + \"}\";\n-                m.put(PropertyNames.CREDENTIALS,credentials);\n+                crinfo = \"{\" + credentials[0] + \", \" + credentials[1] + \"}\";\n+                m.put(PropertyNames.CREDENTIALS, credentials);\n@@ -327,1 +264,1 @@\n-                crinfo=\"no credentials\";\n+                crinfo = \"no credentials\";\n@@ -329,1 +266,1 @@\n-            log.trace(\"testCommunication\",\"using credentials: \" + crinfo);\n+            log.trace(\"testCommunication\", \"using credentials: \" + crinfo);\n@@ -333,2 +270,2 @@\n-                c = JMXConnectorFactory.connect(url,m);\n-            } catch (IOException x ) {\n+                c = JMXConnectorFactory.connect(url, m);\n+            } catch (IOException x) {\n@@ -336,2 +273,1 @@\n-                    final String err = \"Connection failed for \" + crinfo +\n-                        \": \" + x;\n+                    final String err = \"Connection failed for \" + crinfo + \": \" + x;\n@@ -339,2 +275,2 @@\n-                    log.trace(\"testCommunication\",err);\n-                    log.debug(\"testCommunication\",x);\n+                    log.trace(\"testCommunication\", err);\n+                    log.debug(\"testCommunication\", x);\n@@ -344,2 +280,1 @@\n-                    System.out.println(\"Connection failed as expected for \" +\n-                                       crinfo + \": \" + x);\n+                    System.out.println(\"Connection failed as expected for \" + crinfo + \": \" + x);\n@@ -348,1 +283,1 @@\n-            } catch (RuntimeException x ) {\n+            } catch (RuntimeException x) {\n@@ -350,2 +285,1 @@\n-                    final String err = \"Connection failed for \" + crinfo +\n-                        \": \" + x;\n+                    final String err = \"Connection failed for \" + crinfo + \": \" + x;\n@@ -353,2 +287,2 @@\n-                    log.trace(\"testCommunication\",err);\n-                    log.debug(\"testCommunication\",x);\n+                    log.trace(\"testCommunication\", err);\n+                    log.debug(\"testCommunication\", x);\n@@ -358,2 +292,1 @@\n-                    System.out.println(\"Connection failed as expected for \" +\n-                                       crinfo + \": \" + x);\n+                    System.out.println(\"Connection failed as expected for \" + crinfo + \": \" + x);\n@@ -364,2 +297,1 @@\n-                MBeanServerConnection conn =\n-                    c.getMBeanServerConnection();\n+                MBeanServerConnection conn = c.getMBeanServerConnection();\n@@ -367,3 +299,7 @@\n-                    log.debug(\"testCommunication\",\"Connection is:\" + conn);\n-                    log.debug(\"testCommunication\",\"Server domain is: \" +\n-                              conn.getDefaultDomain());\n+                    log.debug(\"testCommunication\", \"Connection is:\" + conn);\n+                    log.debug(\"testCommunication\", \"Server domain is: \" + conn.getDefaultDomain());\n+                }\n+                final ObjectName pattern = new ObjectName(\"java.lang:type=Memory,*\");\n+                final int count = listMBeans(conn, pattern, null);\n+                if (count == 0) {\n+                    throw new Exception(\"Expected at least one matching \" + \"MBean for \" + pattern);\n@@ -371,6 +307,0 @@\n-                final ObjectName pattern =\n-                    new ObjectName(\"java.lang:type=Memory,*\");\n-                final int count = listMBeans(conn,pattern,null);\n-                if (count == 0)\n-                    throw new Exception(\"Expected at least one matching \"+\n-                                        \"MBean for \"+pattern);\n@@ -378,4 +308,2 @@\n-                    System.out.println(\"Communication succeeded \" +\n-                                       \"as expected for \"+\n-                                       crinfo + \": found \" + count\n-                                       + ((count<2)?\"MBean\":\"MBeans\"));\n+                    System.out.println(\"Communication succeeded \" + \"as expected for \" + crinfo + \": found \" + count +\n+                            ((count < 2) ? \"MBean\" : \"MBeans\"));\n@@ -383,2 +311,1 @@\n-                    final String err = \"Expected failure didn't occur for \" +\n-                        crinfo;\n+                    final String err = \"Expected failure didn't occur for \" + crinfo;\n@@ -388,1 +315,2 @@\n-            } catch (IOException x ) {\n+            } catch (IOException x) {\n+                final String err = \"Communication failed with \" + crinfo + \": \" + x;\n@@ -390,2 +318,0 @@\n-                    final String err = \"Communication failed with \" + crinfo +\n-                        \": \" + x;\n@@ -393,2 +319,2 @@\n-                    log.trace(\"testCommunication\",err);\n-                    log.debug(\"testCommunication\",x);\n+                    log.trace(\"testCommunication\", err);\n+                    log.debug(\"testCommunication\", x);\n@@ -398,2 +324,1 @@\n-                    System.out.println(\"Communication failed as expected for \"+\n-                                       crinfo + \": \" + x);\n+                    System.out.println(\"Communication failed as expected for \" + crinfo + \": \" + x);\n@@ -402,1 +327,1 @@\n-            } catch (RuntimeException x ) {\n+            } catch (RuntimeException x) {\n@@ -404,2 +329,1 @@\n-                    final String err = \"Communication failed with \" + crinfo +\n-                        \": \" + x;\n+                    final String err = \"Communication failed with \" + crinfo + \": \" + x;\n@@ -407,2 +331,2 @@\n-                    log.trace(\"testCommunication\",err);\n-                    log.debug(\"testCommunication\",x);\n+                    log.trace(\"testCommunication\", err);\n+                    log.debug(\"testCommunication\", x);\n@@ -412,2 +336,1 @@\n-                    System.out.println(\"Communication failed as expected for \"+\n-                                       crinfo + \": \" + x);\n+                    System.out.println(\"Communication failed as expected for \" + crinfo + \": \" + x);\n@@ -416,2 +339,1 @@\n-                final String err = \"Failed to read MBeans with \" + crinfo +\n-                    \": \" + x;\n+                final String err = \"Failed to read MBeans with \" + crinfo + \": \" + x;\n@@ -419,2 +341,2 @@\n-                log.trace(\"testCommunication\",err);\n-                log.debug(\"testCommunication\",x);\n+                log.trace(\"testCommunication\", err);\n+                log.debug(\"testCommunication\", x);\n@@ -430,1 +352,0 @@\n-\n@@ -432,30 +353,18 @@\n-        final String defaultKeyStore =\n-            getDefaultStoreName(DefaultValues.KEYSTORE);\n-        final String defaultTrustStore =\n-            getDefaultStoreName(DefaultValues.TRUSTSTORE);\n-\n-        final String keyStore =\n-            System.getProperty(PropertyNames.KEYSTORE, defaultKeyStore);\n-        System.setProperty(PropertyNames.KEYSTORE,keyStore);\n-        log.trace(\"setSslProperties\",PropertyNames.KEYSTORE+\"=\"+keyStore);\n-\n-        final String password =\n-            System.getProperty(PropertyNames.KEYSTORE_PASSWD,\n-                               DefaultValues.KEYSTORE_PASSWD);\n-        System.setProperty(PropertyNames.KEYSTORE_PASSWD,password);\n-        log.trace(\"setSslProperties\",\n-                  PropertyNames.KEYSTORE_PASSWD+\"=\"+password);\n-\n-        final String trustStore =\n-            System.getProperty(PropertyNames.TRUSTSTORE,\n-                               defaultTrustStore);\n-        System.setProperty(PropertyNames.TRUSTSTORE,trustStore);\n-        log.trace(\"setSslProperties\",\n-                  PropertyNames.TRUSTSTORE+\"=\"+trustStore);\n-\n-        final String trustword =\n-            System.getProperty(PropertyNames.TRUSTSTORE_PASSWD,\n-                               DefaultValues.TRUSTSTORE_PASSWD);\n-        System.setProperty(PropertyNames.TRUSTSTORE_PASSWD,trustword);\n-        log.trace(\"setSslProperties\",\n-                  PropertyNames.TRUSTSTORE_PASSWD+\"=\"+trustword);\n+        final String defaultKeyStore = defaultStoreNamePrefix + DefaultValues.KEYSTORE;\n+        final String defaultTrustStore = defaultStoreNamePrefix + DefaultValues.TRUSTSTORE;\n+\n+        final String keyStore = System.getProperty(PropertyNames.KEYSTORE, defaultKeyStore);\n+        System.setProperty(PropertyNames.KEYSTORE, keyStore);\n+        log.trace(\"setSslProperties\", PropertyNames.KEYSTORE + \"=\" + keyStore);\n+\n+        final String password = System.getProperty(PropertyNames.KEYSTORE_PASSWD, DefaultValues.KEYSTORE_PASSWD);\n+        System.setProperty(PropertyNames.KEYSTORE_PASSWD, password);\n+        log.trace(\"setSslProperties\", PropertyNames.KEYSTORE_PASSWD + \"=\" + password);\n+\n+        final String trustStore = System.getProperty(PropertyNames.TRUSTSTORE, defaultTrustStore);\n+        System.setProperty(PropertyNames.TRUSTSTORE, trustStore);\n+        log.trace(\"setSslProperties\", PropertyNames.TRUSTSTORE + \"=\" + trustStore);\n+\n+        final String trustword = System.getProperty(PropertyNames.TRUSTSTORE_PASSWD, DefaultValues.TRUSTSTORE_PASSWD);\n+        System.setProperty(PropertyNames.TRUSTSTORE_PASSWD, trustword);\n+        log.trace(\"setSslProperties\", PropertyNames.TRUSTSTORE_PASSWD + \"=\" + trustword);\n@@ -464,2 +373,1 @@\n-            System.setProperty(\"javax.rmi.ssl.client.enabledCipherSuites\",\n-                    clientEnabledCipherSuites);\n+            System.setProperty(\"javax.rmi.ssl.client.enabledCipherSuites\", clientEnabledCipherSuites);\n@@ -473,4 +381,2 @@\n-            final String defaultConf =\n-                getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-            final String confname =\n-                System.getProperty(PropertyNames.CONFIG_FILE_NAME,defaultConf);\n+            final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+            final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -482,1 +388,5 @@\n-                try {props.load(fin);} finally {fin.close();}\n+                try {\n+                    props.load(fin);\n+                } finally {\n+                    fin.close();\n+                }\n@@ -486,9 +396,4 @@\n-            final String  useSslStr =\n-                props.getProperty(PropertyNames.USE_SSL,\n-                                  DefaultValues.USE_SSL);\n-            final boolean useSsl =\n-                Boolean.valueOf(useSslStr).booleanValue();\n-\n-            log.debug(\"checkSslConfiguration\",\n-                      PropertyNames.USE_SSL+\"=\"+useSsl+\n-                      \": setting SSL\");\n+            final String useSslStr = props.getProperty(PropertyNames.USE_SSL, DefaultValues.USE_SSL);\n+            final boolean useSsl = Boolean.valueOf(useSslStr).booleanValue();\n+\n+            log.debug(\"checkSslConfiguration\", PropertyNames.USE_SSL + \"=\" + useSsl + \": setting SSL\");\n@@ -496,5 +401,3 @@\n-            final String  useSslClientAuthStr =\n-                props.getProperty(PropertyNames.SSL_NEED_CLIENT_AUTH,\n-                                  DefaultValues.SSL_NEED_CLIENT_AUTH);\n-            final boolean useSslClientAuth =\n-                Boolean.valueOf(useSslClientAuthStr).booleanValue();\n+            final String useSslClientAuthStr =\n+                    props.getProperty(PropertyNames.SSL_NEED_CLIENT_AUTH, DefaultValues.SSL_NEED_CLIENT_AUTH);\n+            final boolean useSslClientAuth = Boolean.valueOf(useSslClientAuthStr).booleanValue();\n@@ -502,2 +405,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                      PropertyNames.SSL_NEED_CLIENT_AUTH+\"=\"+useSslClientAuth);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_NEED_CLIENT_AUTH + \"=\" + useSslClientAuth);\n@@ -506,2 +408,1 @@\n-            final String sslCipherSuites =\n-                props.getProperty(PropertyNames.SSL_ENABLED_CIPHER_SUITES);\n+            final String sslCipherSuites = props.getProperty(PropertyNames.SSL_ENABLED_CIPHER_SUITES);\n@@ -509,3 +410,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                      PropertyNames.SSL_ENABLED_CIPHER_SUITES + \"=\" +\n-                      sslCipherSuites);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_ENABLED_CIPHER_SUITES + \"=\" + sslCipherSuites);\n@@ -514,2 +413,1 @@\n-            final String sslProtocols =\n-                props.getProperty(PropertyNames.SSL_ENABLED_PROTOCOLS);\n+            final String sslProtocols = props.getProperty(PropertyNames.SSL_ENABLED_PROTOCOLS);\n@@ -517,3 +415,1 @@\n-            log.debug(\"checkSslConfiguration\",\n-                      PropertyNames.SSL_ENABLED_PROTOCOLS + \"=\" +\n-                      sslProtocols);\n+            log.debug(\"checkSslConfiguration\", PropertyNames.SSL_ENABLED_PROTOCOLS + \"=\" + sslProtocols);\n@@ -522,2 +418,1 @@\n-                setSslProperties(props.getProperty(\n-                        PropertyNames.SSL_CLIENT_ENABLED_CIPHER_SUITES));\n+                setSslProperties(props.getProperty(PropertyNames.SSL_CLIENT_ENABLED_CIPHER_SUITES));\n@@ -527,1 +422,1 @@\n-            log.debug(\"checkSslConfiguration\",x);\n+            log.debug(\"checkSslConfiguration\", x);\n@@ -538,1 +433,1 @@\n-     *\n+     * <p>\n@@ -541,2 +436,1 @@\n-    public void testCommunication(JMXServiceURL url)\n-        throws IOException {\n+    public void testCommunication(JMXServiceURL url) throws IOException {\n@@ -544,4 +438,2 @@\n-        final String defaultConf =\n-            getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-        final String confname =\n-            System.getProperty(PropertyNames.CONFIG_FILE_NAME,defaultConf);\n+        final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+        final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -553,1 +445,5 @@\n-            try {props.load(fin);} finally {fin.close();}\n+            try {\n+                props.load(fin);\n+            } finally {\n+                fin.close();\n+            }\n@@ -557,5 +453,3 @@\n-        final String  useAuthenticationStr =\n-            props.getProperty(PropertyNames.USE_AUTHENTICATION,\n-                              DefaultValues.USE_AUTHENTICATION);\n-        final boolean useAuthentication =\n-            Boolean.valueOf(useAuthenticationStr).booleanValue();\n+        final String useAuthenticationStr =\n+                props.getProperty(PropertyNames.USE_AUTHENTICATION, DefaultValues.USE_AUTHENTICATION);\n+        final boolean useAuthentication = Boolean.valueOf(useAuthenticationStr).booleanValue();\n@@ -564,5 +458,4 @@\n-        final String defaultPasswordFileName = Utils.convertPath(\n-            getDefaultFileName(DefaultValues.PASSWORD_FILE_NAME));\n-        final String passwordFileName = Utils.convertPath(\n-            props.getProperty(PropertyNames.PASSWORD_FILE_NAME,\n-                              defaultPasswordFileName));\n+        final String defaultPasswordFileName =\n+                Utils.convertPath(defaultFileNamePrefix + DefaultValues.PASSWORD_FILE_NAME);\n+        final String passwordFileName =\n+                Utils.convertPath(props.getProperty(PropertyNames.PASSWORD_FILE_NAME, defaultPasswordFileName));\n@@ -571,5 +464,3 @@\n-        final String defaultAccessFileName = Utils.convertPath(\n-            getDefaultFileName(DefaultValues.ACCESS_FILE_NAME));\n-        final String accessFileName = Utils.convertPath(\n-            props.getProperty(PropertyNames.ACCESS_FILE_NAME,\n-                              defaultAccessFileName));\n+        final String defaultAccessFileName = Utils.convertPath(defaultFileNamePrefix + DefaultValues.ACCESS_FILE_NAME);\n+        final String accessFileName =\n+                Utils.convertPath(props.getProperty(PropertyNames.ACCESS_FILE_NAME, defaultAccessFileName));\n@@ -583,1 +474,1 @@\n-        final Object[] noCredentials = { null };\n+        final Object[] noCredentials = {null};\n@@ -586,3 +477,8 @@\n-            if (l.size() == 0) allCredentials = null;\n-            else allCredentials = l.toArray();\n-        } else allCredentials = noCredentials;\n+            if (l.size() == 0) {\n+                allCredentials = null;\n+            } else {\n+                allCredentials = l.toArray();\n+            }\n+        } else {\n+            allCredentials = noCredentials;\n+        }\n@@ -591,1 +487,1 @@\n-        if (allCredentials!=null) {\n+        if (allCredentials != null) {\n@@ -595,1 +491,1 @@\n-            errorCount += connectAndRead(url,allCredentials,true,true);\n+            errorCount += connectAndRead(url, allCredentials, true, true);\n@@ -600,6 +496,2 @@\n-            final String[][] someCredentials = {\n-                null,\n-                { \"modify\", \"R&D\" },\n-                { \"measure\", \"QED\" }\n-            };\n-            errorCount += connectAndRead(url,someCredentials,false,false);\n+            final String[][] someCredentials = {null, {\"modify\", \"R&D\"}, {\"measure\", \"QED\"}};\n+            errorCount += connectAndRead(url, someCredentials, false, false);\n@@ -612,5 +504,2 @@\n-            final String[][] badCredentials = {\n-                { \"bad.user\", \"R&D\" },\n-                { \"measure\", \"bad.password\" }\n-            };\n-            errorCount += connectAndRead(url,badCredentials,false,false);\n+            final String[][] badCredentials = {{\"bad.user\", \"R&D\"}, {\"measure\", \"bad.password\"}};\n+            errorCount += connectAndRead(url, badCredentials, false, false);\n@@ -619,3 +508,2 @@\n-            final String err = \"Test \" + confname + \" failed with \" +\n-                errorCount + \" error(s)\";\n-            log.debug(\"testCommunication\",err);\n+            final String err = \"Test \" + confname + \" failed with \" + errorCount + \" error(s)\";\n+            log.debug(\"testCommunication\", err);\n@@ -626,1 +514,0 @@\n-\n@@ -632,0 +519,1 @@\n+     *\n@@ -641,6 +529,5 @@\n-                    path=(file==null)?null:file.getCanonicalPath();\n-                } catch(IOException x) {\n-                    final String err = \"Failed to test configuration \" + file +\n-                        \": \" + x;\n-                    log.trace(\"testConfiguration\",err);\n-                    log.debug(\"testConfiguration\",x);\n+                    path = (file == null) ? null : file.getCanonicalPath();\n+                } catch (IOException x) {\n+                    final String err = \"Failed to test configuration \" + file + \": \" + x;\n+                    log.trace(\"testConfiguration\", err);\n+                    log.debug(\"testConfiguration\", x);\n@@ -649,1 +536,1 @@\n-                final String config = (path==null)?\"Default config file\":path;\n+                final String config = (path == null) ? \"Default config file\" : path;\n@@ -652,2 +539,1 @@\n-                System.out.println(\"*** Testing configuration (port=\" + port + \"): \"\n-                                   + path);\n+                System.out.println(\"*** Testing configuration (port=\" + port + \"): \" + path);\n@@ -656,3 +542,2 @@\n-                System.setProperty(\"com.sun.management.jmxremote.port\",\n-                                    Integer.toString(port));\n-                if (path != null)\n+                System.setProperty(\"com.sun.management.jmxremote.port\", Integer.toString(port));\n+                if (path != null) {\n@@ -660,1 +545,1 @@\n-                else\n+                } else {\n@@ -662,0 +547,1 @@\n+                }\n@@ -663,4 +549,4 @@\n-                log.trace(\"testConfiguration\",\"com.sun.management.jmxremote.port=\"+port);\n-                if (path != null && log.isDebugOn())\n-                    log.trace(\"testConfiguration\",\n-                              \"com.sun.management.config.file=\"+path);\n+                log.trace(\"testConfiguration\", \"com.sun.management.jmxremote.port=\" + port);\n+                if (path != null && log.isDebugOn()) {\n+                    log.trace(\"testConfiguration\", \"com.sun.management.config.file=\" + path);\n+                }\n@@ -676,1 +562,1 @@\n-                            throw (BindException)x.getCause().getCause();\n+                            throw (BindException) x.getCause().getCause();\n@@ -679,7 +565,6 @@\n-                    final String err = \"Failed to initialize connector:\" +\n-                        \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                        ((path!=null)?\"\\n\\tcom.sun.management.config.file=\"+path:\n-                         \"\\n\\t\"+config) +\n-                        \"\\n\\tError is: \" + x;\n-                    log.trace(\"testConfiguration\",err);\n-                    log.debug(\"testConfiguration\",x);\n+                    final String err =\n+                            \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n+                                    \"\\n\\tError is: \" + x;\n+                    log.trace(\"testConfiguration\", err);\n+                    log.debug(\"testConfiguration\", x);\n@@ -688,1 +573,1 @@\n-                    log.debug(\"testConfiguration\",x);\n+                    log.debug(\"testConfiguration\", x);\n@@ -693,3 +578,1 @@\n-                    JMXServiceURL url =\n-                        new JMXServiceURL(\"rmi\",null,0,\"\/jndi\/rmi:\/\/localhost:\"+\n-                                          port+\"\/jmxrmi\");\n+                    JMXServiceURL url = new JMXServiceURL(\"rmi\", null, 0, \"\/jndi\/rmi:\/\/localhost:\" + port + \"\/jmxrmi\");\n@@ -700,4 +583,3 @@\n-                        final String err = \"Failed to connect to agent {url=\"+url+\n-                            \"}: \" + x;\n-                        log.trace(\"testConfiguration\",err);\n-                        log.debug(\"testConfiguration\",x);\n+                        final String err = \"Failed to connect to agent {url=\" + url + \"}: \" + x;\n+                        log.trace(\"testConfiguration\", err);\n+                        log.debug(\"testConfiguration\", x);\n@@ -707,4 +589,3 @@\n-                    final String err = \"Failed to test configuration \"+config+\n-                        \": \"+x;\n-                    log.trace(\"testConfiguration\",err);\n-                    log.debug(\"testConfiguration\",x);\n+                    final String err = \"Failed to test configuration \" + config + \": \" + x;\n+                    log.trace(\"testConfiguration\", err);\n+                    log.debug(\"testConfiguration\", x);\n@@ -716,3 +597,3 @@\n-                        final String err = \"Failed to terminate: \"+x;\n-                        log.trace(\"testConfiguration\",err);\n-                        log.debug(\"testConfiguration\",x);\n+                        final String err = \"Failed to terminate: \" + x;\n+                        log.trace(\"testConfiguration\", err);\n+                        log.debug(\"testConfiguration\", x);\n@@ -723,1 +604,1 @@\n-            } catch(BindException ex) {\n+            } catch (BindException ex) {\n@@ -733,0 +614,1 @@\n+     *\n@@ -736,2 +618,1 @@\n-        String errStr = null;\n-        errStr = testConfiguration(conf);\n+        String errStr = testConfiguration(conf);\n@@ -739,2 +620,1 @@\n-            return \"Configuration \" +\n-                conf + \" should have failed!\";\n+            return \"Configuration \" + conf + \" should have failed!\";\n@@ -742,2 +622,1 @@\n-        System.out.println(\"Configuration \" +\n-                           conf + \" failed as expected\");\n+        System.out.println(\"Configuration \" + conf + \" failed as expected\");\n@@ -751,2 +630,3 @@\n-     *     *ok.properties: bootstrap should succeed.\n-     *     *ko.properties: bootstrap or connection should fail.\n+     * *ok.properties: bootstrap should succeed.\n+     * *ko.properties: bootstrap or connection should fail.\n+     *\n@@ -766,2 +646,1 @@\n-        return fileName +\n-            \": test file suffix must be one of [ko|ok].properties\";\n+        return fileName + \": test file suffix must be one of [ko|ok].properties\";\n@@ -773,0 +652,1 @@\n+     *\n@@ -775,3 +655,3 @@\n-    public void runko() throws InterruptedException, IOException {\n-        final File[] conf = findConfigurationFilesKo();\n-        if ((conf == null)||(conf.length == 0))\n+    public void runko(boolean useSsl) throws InterruptedException, IOException {\n+        final File[] conf = RmiTestBase.findConfigurationFilesKo(useSsl);\n+        if ((conf == null) || (conf.length == 0)) {\n@@ -779,0 +659,1 @@\n+        }\n@@ -781,1 +662,1 @@\n-        for (int i=0;i<conf.length;i++) {\n+        for (int i = 0; i < conf.length; i++) {\n@@ -793,0 +674,1 @@\n+     *\n@@ -795,3 +677,3 @@\n-    public void runok() throws InterruptedException, IOException {\n-        final File[] conf = findConfigurationFilesOk();\n-        if ((conf == null)||(conf.length == 0))\n+    public void runok(boolean useSsl) throws InterruptedException, IOException {\n+        final File[] conf = RmiTestBase.findConfigurationFilesOk(useSsl);\n+        if ((conf == null) || (conf.length == 0)) {\n@@ -799,0 +681,1 @@\n+        }\n@@ -801,1 +684,1 @@\n-        for (int i=0;i<conf.length;i++) {\n+        for (int i = 0; i < conf.length; i++) {\n@@ -823,0 +706,1 @@\n+     *\n@@ -825,3 +709,3 @@\n-    public void run() throws InterruptedException, IOException {\n-        runok();\n-        runko();\n+    public void run(boolean useSsl) throws InterruptedException, IOException {\n+        runok(useSsl);\n+        runko(useSsl);\n@@ -837,0 +721,1 @@\n+     *\n@@ -839,8 +724,9 @@\n-    public void run(String args[]) throws InterruptedException, IOException {\n-        if (args.length == 0) {\n-            run() ; return;\n-        }\n-        for (int i=0; i<args.length; i++) {\n-            final String errStr =testConfigurationFile(args[i]);\n-            if (errStr != null) {\n-                throw new RuntimeException(errStr);\n+    public void run(String[] args) throws InterruptedException, IOException {\n+        if (args.length == 1) {\n+            run(args[0].contains(\"ssl\"));\n+        } else {\n+            for (int i = 1; i < args.length; i++) {\n+                final String errStr = testConfigurationFile(args[i]);\n+                if (errStr != null) {\n+                    throw new RuntimeException(errStr);\n+                }\n@@ -850,27 +736,0 @@\n-\n-    \/**\n-     * Calls run(args[]).\n-     * exit(1) if the test fails.\n-     **\/\n-    public static void main(String args[]) throws Exception {\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n-\n-        try {\n-            MAX_GET_FREE_PORT_TRIES = Integer.parseInt(System.getProperty(\"test.getfreeport.max.tries\", \"10\"));\n-        } catch (NumberFormatException ex) {\n-        }\n-\n-        RmiBootstrapTest manager = new RmiBootstrapTest();\n-        try {\n-            manager.run(args);\n-        } catch (RuntimeException r) {\n-            System.out.println(\"Test Failed: \"+ r.getMessage());\n-            System.exit(1);\n-        } catch (Throwable t) {\n-            System.out.println(\"Test Failed: \"+ t);\n-            t.printStackTrace();\n-            System.exit(2);\n-        }\n-        System.out.println(\"**** Test  RmiBootstrap Passed ****\");\n-    }\n-\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiBootstrapTest.java","additions":321,"deletions":462,"binary":false,"changes":783,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-#\n-# Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug     6528083\n-# @key intermittent\n-# @summary Test RMI Bootstrap\n-#\n-# @library \/test\/lib\n-#\n-# @build TestLogger Utils RmiBootstrapTest\n-# @run shell\/timeout=300  RmiBootstrapTest.sh\n-\n-# Define the Java class test name\n-TESTCLASS=\"RmiBootstrapTest\"\n-export TESTCLASS\n-\n-# Source in utility shell script to generate and remove .properties and .acl files\n-. ${TESTSRC}\/GeneratePropertyPassword.sh\n-\n-generatePropertyPasswordFiles `ls ${TESTSRC}\/*_test*.in`\n-\n-rm -rf ${TESTCLASSES}\/ssl\n-mkdir -p ${TESTCLASSES}\/ssl\n-cp -rf ${TESTSRC}\/ssl\/*store ${TESTCLASSES}\/ssl\n-chmod -R 777 ${TESTCLASSES}\/ssl\n-\n-DEBUGOPTIONS=\"\"\n-export DEBUGOPTIONS\n-\n-EXTRAOPTIONS=\"--add-exports jdk.management.agent\/jdk.internal.agent=ALL-UNNAMED \\\n- --add-exports jdk.management.agent\/sun.management.jmxremote=ALL-UNNAMED\"\n-export EXTRAOPTIONS\n-\n-# Call the common generic test\n-#\n-# No need to since bug 4267864 is now fixed.\n-#\n-echo -------------------------------------------------------------\n-echo Launching test for `basename $0 .sh`\n-echo -------------------------------------------------------------\n-sh ${TESTSRC}\/..\/RunTest.sh ${DEBUGOPTIONS} ${EXTRAOPTIONS} ${TESTCLASS}\n-result=$?\n-restoreFilePermissions `ls ${TESTSRC}\/*_test*.in`\n-exit $result\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiBootstrapTest.sh","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-#\n-# Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug     6528083\n-# @summary Test RMI Bootstrap with SSL\n-#\n-# @library \/test\/lib\n-#\n-# @build TestLogger Utils RmiBootstrapTest\n-# @run shell\/timeout=300  RmiSslBootstrapTest.sh\n-\n-# Define the Java class test name\n-TESTCLASS=\"RmiBootstrapTest\"\n-export TESTCLASS\n-\n-# Source in utility shell script to generate and remove .properties and .acl files\n-. ${TESTSRC}\/GeneratePropertyPassword.sh\n-\n-generatePropertyPasswordFiles `ls ${TESTSRC}\/*_ssltest*.in`\n-\n-rm -rf ${TESTCLASSES}\/ssl\n-mkdir -p ${TESTCLASSES}\/ssl\n-cp -rf ${TESTSRC}\/ssl\/*store ${TESTCLASSES}\/ssl\n-chmod -R 777 ${TESTCLASSES}\/ssl\n-\n-DEBUGOPTIONS=\"\"\n-export DEBUGOPTIONS\n-\n-EXTRAOPTIONS=\"--add-exports jdk.management.agent\/jdk.internal.agent=ALL-UNNAMED \\\n- --add-exports jdk.management.agent\/sun.management.jmxremote=ALL-UNNAMED\"\n-export EXTRAOPTIONS\n-\n-# Call the common generic test\n-#\n-echo -------------------------------------------------------------\n-echo Launching test for `basename $0 .sh`\n-echo -------------------------------------------------------------\n-sh ${TESTSRC}\/..\/RunTest.sh ${DEBUGOPTIONS} ${EXTRAOPTIONS} ${TESTCLASS} \\\n-    ${TESTCLASSES}\/management_ssltest*.properties\n-result=$?\n-restoreFilePermissions `ls ${TESTSRC}\/*_ssltest*.in`\n-exit $result\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiSslBootstrapTest.sh","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -27,2 +28,0 @@\n-import java.io.InputStream;\n-import java.io.FilenameFilter;\n@@ -31,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -33,4 +33,0 @@\n-\n-import java.util.Properties;\n-import java.util.Iterator;\n-import java.util.Set;\n@@ -38,7 +34,2 @@\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Enumeration;\n-\n-import javax.management.remote.*;\n-import javax.management.*;\n+import java.util.List;\n+import java.util.Properties;\n@@ -48,0 +39,15 @@\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXConnectorServer;\n+\n+\/*\n+ * @test\n+ * @bug     4932854\n+ * @key     intermittent\n+ * @summary Test RMI Bootstrap with SSL and no keystore.\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/timeout=300 RmiSslNoKeyStoreTest .*_ssltest.*.in\n+ * *\/\n+\n@@ -72,4 +78,1 @@\n-public class RmiSslNoKeyStoreTest {\n-\n-    static TestLogger log =\n-        new TestLogger(\"RmiSslNoKeyStoreTest\");\n+public class RmiSslNoKeyStoreTest extends RmiTestBase {\n@@ -77,0 +80,1 @@\n+    static TestLogger log = new TestLogger(\"RmiSslNoKeyStoreTest\");\n@@ -82,0 +86,2 @@\n+    final String DEFAULT_KEY_STORE = defaultStoreNamePrefix + DefaultValues.KEYSTORE;\n+    final String KEY_STORE = System.getProperty(PropertyNames.KEYSTORE, DEFAULT_KEY_STORE);\n@@ -83,57 +89,5 @@\n-    \/**\n-     * Default values for RMI configuration properties.\n-     **\/\n-    public static interface DefaultValues {\n-        public static final String PORT=\"0\";\n-        public static final String CONFIG_FILE_NAME=\"management.properties\";\n-        public static final String USE_SSL=\"true\";\n-        public static final String USE_AUTHENTICATION=\"true\";\n-        public static final String PASSWORD_FILE_NAME=\"jmxremote.password\";\n-        public static final String ACCESS_FILE_NAME=\"jmxremote.access\";\n-        public static final String KEYSTORE=\"keystore\";\n-        public static final String KEYSTORE_PASSWD=\"password\";\n-        public static final String TRUSTSTORE=\"truststore\";\n-        public static final String TRUSTSTORE_PASSWD=\"trustword\";\n-    }\n-\n-    \/**\n-     * Names of RMI configuration properties.\n-     **\/\n-    public static interface PropertyNames {\n-        public static final String PORT=\"com.sun.management.jmxremote.port\";\n-        public static final String CONFIG_FILE_NAME=\n-            \"com.sun.management.config.file\";\n-        public static final String USE_SSL=\"com.sun.management.jmxremote.ssl\";\n-        public static final String USE_AUTHENTICATION=\n-            \"com.sun.management.jmxremote.authenticate\";\n-        public static final String PASSWORD_FILE_NAME=\n-            \"com.sun.management.jmxremote.password.file\";\n-        public static final String ACCESS_FILE_NAME=\n-            \"com.sun.management.jmxremote.access.file\";\n-        public static final String INSTRUMENT_ALL=\n-            \"com.sun.management.instrumentall\";\n-        public static final String CREDENTIALS =\n-            \"jmx.remote.credentials\";\n-        public static final String KEYSTORE=\"javax.net.ssl.keyStore\";\n-        public static final String KEYSTORE_PASSWD=\n-            \"javax.net.ssl.keyStorePassword\";\n-        public static final String KEYSTORE_TYPE=\"javax.net.ssl.keyStoreType\";\n-        public static final String TRUSTSTORE=\"javax.net.ssl.trustStore\";\n-        public static final String TRUSTSTORE_PASSWD=\n-            \"javax.net.ssl.trustStorePassword\";\n-    }\n-\n-    \/**\n-     * Compute the full path name for a default file.\n-     * @param basename basename (with extension) of the default file.\n-     * @return ${JRE}\/conf\/management\/${basename}\n-     **\/\n-    private static String getDefaultFileName(String basename) {\n-        final String fileSeparator = File.separator;\n-        final StringBuffer defaultFileName =\n-            new StringBuffer(System.getProperty(\"java.home\")).\n-            append(fileSeparator).append(\"conf\").append(fileSeparator).\n-            append(\"management\").append(fileSeparator).\n-            append(basename);\n-        return defaultFileName.toString();\n-    }\n+    private static void checkKeystore(Properties props)\n+            throws IOException, GeneralSecurityException {\n+        if (log.isDebugOn()) {\n+            log.debug(\"checkKeystore\", \"Checking Keystore configuration\");\n+        }\n@@ -141,13 +95,4 @@\n-    \/**\n-     * Compute the full path name for a default file.\n-     * @param basename basename (with extension) of the default file.\n-     * @return ${JRE}\/conf\/management\/${basename}\n-     **\/\n-    private static String getDefaultStoreName(String basename) {\n-        final String fileSeparator = File.separator;\n-        final StringBuffer defaultFileName =\n-            new StringBuffer(System.getProperty(\"test.src\")).\n-            append(fileSeparator).append(\"ssl\").append(fileSeparator).\n-            append(basename);\n-        return defaultFileName.toString();\n-    }\n+        final String keyStore = System.getProperty(PropertyNames.KEYSTORE);\n+        if (keyStore == null) {\n+            throw new IllegalArgumentException(\"System property \" + PropertyNames.KEYSTORE + \" not specified\");\n+        }\n@@ -155,14 +100,1 @@\n-    private static void checkKeystore(Properties props)\n-        throws IOException, GeneralSecurityException {\n-        if (log.isDebugOn())\n-            log.debug(\"checkKeystore\",\"Checking Keystore configuration\");\n-\n-        final String keyStore =\n-            System.getProperty(PropertyNames.KEYSTORE);\n-        if (keyStore == null)\n-            throw new IllegalArgumentException(\"System property \" +\n-                                               PropertyNames.KEYSTORE +\n-                                               \" not specified\");\n-\n-        final String keyStorePass =\n-            System.getProperty(PropertyNames.KEYSTORE_PASSWD);\n+        final String keyStorePass = System.getProperty(PropertyNames.KEYSTORE_PASSWD);\n@@ -174,1 +106,1 @@\n-            if (! ksf.canRead())\n+            if (!ksf.canRead()) {\n@@ -176,0 +108,1 @@\n+            }\n@@ -177,1 +110,1 @@\n-            if (log.isDebugOn())\n+            if (log.isDebugOn()) {\n@@ -179,3 +112,2 @@\n-            throw new IllegalArgumentException(\"System property \" +\n-                                               PropertyNames.KEYSTORE_PASSWD +\n-                                               \" not specified\");\n+            }\n+            throw new IllegalArgumentException(\"System property \" + PropertyNames.KEYSTORE_PASSWD + \" not specified\");\n@@ -187,4 +119,2 @@\n-        final String keyStoreType =\n-            System.getProperty(PropertyNames.KEYSTORE_TYPE,\n-                               KeyStore.getDefaultType());\n-        final KeyStore ks         = KeyStore.getInstance(keyStoreType);\n+        final String keyStoreType = System.getProperty(PropertyNames.KEYSTORE_TYPE, KeyStore.getDefaultType());\n+        final KeyStore ks = KeyStore.getInstance(keyStoreType);\n@@ -192,1 +122,1 @@\n-        final char keypassword[]  = keyStorePass.toCharArray();\n+        final char keypassword[] = keyStorePass.toCharArray();\n@@ -195,1 +125,1 @@\n-            ks.load(fin,keypassword);\n+            ks.load(fin, keypassword);\n@@ -197,1 +127,1 @@\n-            Arrays.fill(keypassword,' ');\n+            Arrays.fill(keypassword, ' ');\n@@ -201,2 +131,30 @@\n-        if (log.isDebugOn())\n-            log.debug(\"checkSSL\",\"SSL configuration successfully checked\");\n+        if (log.isDebugOn()) {\n+            log.debug(\"checkSSL\", \"SSL configuration successfully checked\");\n+        }\n+    }\n+\n+    \/**\n+     * Calls run(args[]).\n+     * exit(1) if the test fails.\n+     **\/\n+    public static void main(String args[]) throws Exception {\n+        if (args.length == 0) {\n+            throw new IllegalArgumentException(\"Argument is required for this\" + \" test\");\n+        }\n+\n+        final List<Path> credentialFiles = prepareTestFiles(args[0]);\n+\n+        RmiSslNoKeyStoreTest manager = new RmiSslNoKeyStoreTest();\n+        try {\n+            manager.run(args);\n+        } catch (RuntimeException r) {\n+            System.err.println(\"Test Failed: \" + r.getMessage());\n+            System.exit(1);\n+        } catch (Throwable t) {\n+            System.err.println(\"Test Failed: \" + t);\n+            t.printStackTrace();\n+            System.exit(2);\n+        }\n+        System.out.println(\"**** Test RmiSslNoKeyStoreTest Passed ****\");\n+\n+        grantFilesAccess(credentialFiles, AccessControl.EVERYONE);\n@@ -206,4 +164,2 @@\n-        final String defaultConf =\n-            getDefaultFileName(DefaultValues.CONFIG_FILE_NAME);\n-        final String confname =\n-            System.getProperty(PropertyNames.CONFIG_FILE_NAME,defaultConf);\n+        final String defaultConf = defaultFileNamePrefix + DefaultValues.CONFIG_FILE_NAME;\n+        final String confname = System.getProperty(PropertyNames.CONFIG_FILE_NAME, defaultConf);\n@@ -215,1 +171,5 @@\n-            try {props.load(fin);} finally {fin.close();}\n+            try {\n+                props.load(fin);\n+            } finally {\n+                fin.close();\n+            }\n@@ -219,5 +179,2 @@\n-        final String  useSslStr =\n-            props.getProperty(PropertyNames.USE_SSL,\n-                              DefaultValues.USE_SSL);\n-        final boolean useSsl =\n-            Boolean.valueOf(useSslStr).booleanValue();\n+        final String useSslStr = props.getProperty(PropertyNames.USE_SSL, DefaultValues.USE_SSL);\n+        final boolean useSsl = Boolean.valueOf(useSslStr).booleanValue();\n@@ -225,1 +182,1 @@\n-        log.debug(\"checkSslConfiguration\",PropertyNames.USE_SSL+\"=\"+useSsl);\n+        log.debug(\"checkSslConfiguration\", PropertyNames.USE_SSL + \"=\" + useSsl);\n@@ -227,2 +184,1 @@\n-            final String msg =\n-                PropertyNames.USE_SSL+\"=\"+useSsl+\", can't run test\";\n+            final String msg = PropertyNames.USE_SSL + \"=\" + useSsl + \", can't run test\";\n@@ -236,1 +192,1 @@\n-            log.debug(\"checkSslConfiguration\",\"Test configuration OK: \" + x);\n+            log.debug(\"checkSslConfiguration\", \"Test configuration OK: \" + x);\n@@ -249,0 +205,1 @@\n+     *\n@@ -251,1 +208,1 @@\n-    private String testConfiguration(File file,int port) {\n+    private String testConfiguration(File file, int port) {\n@@ -253,2 +210,2 @@\n-        final String path = (file==null)?null:file.getAbsolutePath();\n-        final String config = (path==null)?\"Default config file\":path;\n+        final String path = (file == null) ? null : file.getAbsolutePath();\n+        final String config = (path == null) ? \"Default config file\" : path;\n@@ -258,2 +215,1 @@\n-            System.out.println(\"*** Testing configuration (port=\"+\n-                               port + \"): \"+ path);\n+            System.out.println(\"*** Testing configuration (port=\" + port + \"): \" + path);\n@@ -262,3 +218,2 @@\n-            System.setProperty(\"com.sun.management.jmxremote.port\",\n-                               Integer.toString(port));\n-            if (path != null)\n+            System.setProperty(\"com.sun.management.jmxremote.port\", Integer.toString(port));\n+            if (path != null) {\n@@ -266,3 +221,3 @@\n-            else\n-                System.getProperties().\n-                    remove(\"com.sun.management.config.file\");\n+            } else {\n+                System.getProperties().remove(\"com.sun.management.config.file\");\n+            }\n@@ -270,4 +225,4 @@\n-            log.trace(\"testConfiguration\",\"com.sun.management.jmxremote.port=\"+port);\n-            if (path != null && log.isDebugOn())\n-                log.trace(\"testConfiguration\",\n-                          \"com.sun.management.config.file=\"+path);\n+            log.trace(\"testConfiguration\", \"com.sun.management.jmxremote.port=\" + port);\n+            if (path != null && log.isDebugOn()) {\n+                log.trace(\"testConfiguration\", \"com.sun.management.config.file=\" + path);\n+            }\n@@ -281,5 +236,3 @@\n-                final String err = \"Failed to initialize connector:\" +\n-                    \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                    ((path!=null)?\"\\n\\tcom.sun.management.config.file=\"+path:\n-                     \"\\n\\t\"+config) +\n-                    \"\\n\\tError is: \" + x;\n+                final String err = \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                        ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n+                        \"\\n\\tError is: \" + x;\n@@ -287,2 +240,2 @@\n-                log.trace(\"testConfiguration\",\"Expected failure: \" + err);\n-                log.debug(\"testConfiguration\",x);\n+                log.trace(\"testConfiguration\", \"Expected failure: \" + err);\n+                log.debug(\"testConfiguration\", x);\n@@ -292,1 +245,1 @@\n-                log.debug(\"testConfiguration\",x);\n+                log.debug(\"testConfiguration\", x);\n@@ -296,2 +249,1 @@\n-                JMXConnector cc =\n-                    JMXConnectorFactory.connect(cs.getAddress(), null);\n+                JMXConnector cc = JMXConnectorFactory.connect(cs.getAddress(), null);\n@@ -300,5 +252,3 @@\n-                final String err = \"Failed to initialize connector:\" +\n-                    \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                    ((path!=null)?\"\\n\\tcom.sun.management.config.file=\"+path:\n-                     \"\\n\\t\"+config) +\n-                    \"\\n\\tError is: \" + x;\n+                final String err = \"Failed to initialize connector:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                        ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n+                        \"\\n\\tError is: \" + x;\n@@ -306,2 +256,2 @@\n-                log.trace(\"testConfiguration\",\"Expected failure: \" + err);\n-                log.debug(\"testConfiguration\",x);\n+                log.trace(\"testConfiguration\", \"Expected failure: \" + err);\n+                log.debug(\"testConfiguration\", x);\n@@ -311,1 +261,1 @@\n-                log.debug(\"testConfiguration\",x);\n+                log.debug(\"testConfiguration\", x);\n@@ -317,3 +267,3 @@\n-                final String err = \"Failed to terminate: \"+x;\n-                log.trace(\"testConfiguration\",err);\n-                log.debug(\"testConfiguration\",x);\n+                final String err = \"Failed to terminate: \" + x;\n+                log.trace(\"testConfiguration\", err);\n+                log.debug(\"testConfiguration\", x);\n@@ -321,5 +271,3 @@\n-            final String err = \"Bootstrap should have failed:\" +\n-                \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                ((path!=null)?\"\\n\\tcom.sun.management.config.file=\"+path:\n-                 \"\\n\\t\"+config);\n-            log.trace(\"testConfiguration\",err);\n+            final String err = \"Bootstrap should have failed:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config);\n+            log.trace(\"testConfiguration\", err);\n@@ -328,8 +276,6 @@\n-            final String err = \"Failed to test bootstrap for:\" +\n-                \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n-                ((path!=null)?\"\\n\\tcom.sun.management.config.file=\"+path:\n-                 \"\\n\\t\"+config)+\n-                \"\\n\\tError is: \" + x;\n-\n-            log.trace(\"testConfiguration\",err);\n-            log.debug(\"testConfiguration\",x);\n+            final String err = \"Failed to test bootstrap for:\" + \"\\n\\tcom.sun.management.jmxremote.port=\" + port +\n+                    ((path != null) ? \"\\n\\tcom.sun.management.config.file=\" + path : \"\\n\\t\" + config) +\n+                    \"\\n\\tError is: \" + x;\n+\n+            log.trace(\"testConfiguration\", err);\n+            log.debug(\"testConfiguration\", x);\n@@ -343,2 +289,3 @@\n-     *     *ok.properties: bootstrap should succeed.\n-     *     *ko.properties: bootstrap or connection should fail.\n+     * *ok.properties: bootstrap should succeed.\n+     * *ko.properties: bootstrap or connection should fail.\n+     *\n@@ -349,2 +296,2 @@\n-        final String portStr = System.getProperty(\"rmi.port\",\"12424\");\n-        final int port       = Integer.parseInt(portStr);\n+        final String portStr = System.getProperty(\"rmi.port\", \"12424\");\n+        final int port = Integer.parseInt(portStr);\n@@ -352,1 +299,1 @@\n-        return testConfiguration(file,port+testPort++);\n+        return testConfiguration(file, port + testPort++);\n@@ -355,1 +302,0 @@\n-\n@@ -357,7 +303,1 @@\n-     * Tests the specified configuration files.\n-     * If args[] is not empty, each element in args[] is expected to be\n-     * a filename ending either by ok.properties or ko.properties.\n-     * Otherwise, the configuration files will be automatically determined\n-     * by looking at all *.properties files located in the directory\n-     * indicated by the System property \"test.src\".\n-     * @throws RuntimeException if the test fails.\n+     * Test a configuration file.\n@@ -365,5 +305,5 @@\n-    public void run(String args[]) {\n-        final String defaultKeyStore =\n-            getDefaultStoreName(DefaultValues.KEYSTORE);\n-        final String keyStore =\n-            System.getProperty(PropertyNames.KEYSTORE, defaultKeyStore);\n+    private void runConfigurationFile(String fileName) {\n+        String errStr = testConfigurationFile(fileName);\n+        if (errStr != null) {\n+            throw new RuntimeException(errStr);\n+        }\n@@ -371,1 +311,3 @@\n-        for (int i=0; i<args.length; i++) {\n+        if ((System.getProperty(PropertyNames.KEYSTORE) == null) &&\n+                (System.getProperty(PropertyNames.KEYSTORE_PASSWD) == null)) {\n+            try {\n@@ -373,4 +315,5 @@\n-            String errStr =testConfigurationFile(args[i]);\n-            if (errStr != null) {\n-                throw new RuntimeException(errStr);\n-            }\n+                \/\/ Specify the keystore, but don't specify the\n+                \/\/ password.\n+                \/\/\n+                System.setProperty(PropertyNames.KEYSTORE, KEY_STORE);\n+                log.trace(\"run\", PropertyNames.KEYSTORE + \"=\" + KEY_STORE);\n@@ -378,16 +321,3 @@\n-            if ((System.getProperty(PropertyNames.KEYSTORE) == null) &&\n-                (System.getProperty(PropertyNames.KEYSTORE_PASSWD) == null)) {\n-                try {\n-\n-                    \/\/ Specify the keystore, but don't specify the\n-                    \/\/ password.\n-                    \/\/\n-                    System.setProperty(PropertyNames.KEYSTORE,keyStore);\n-                    log.trace(\"run\",PropertyNames.KEYSTORE+\"=\"+keyStore);\n-\n-                    errStr =testConfigurationFile(args[i]);\n-                    if (errStr != null) {\n-                        throw new RuntimeException(errStr);\n-                    }\n-                } finally {\n-                    System.getProperties().remove(PropertyNames.KEYSTORE);\n+                errStr = testConfigurationFile(fileName);\n+                if (errStr != null) {\n+                    throw new RuntimeException(errStr);\n@@ -395,0 +325,2 @@\n+            } finally {\n+                System.getProperties().remove(PropertyNames.KEYSTORE);\n@@ -400,2 +332,4 @@\n-     * Calls run(args[]).\n-     * exit(1) if the test fails.\n+     * Finds all configuration files (*ok.properties and *ko.properties)\n+     * and tests them.\n+     *\n+     * @throws RuntimeException if the test fails.\n@@ -403,11 +337,8 @@\n-    public static void main(String args[]) {\n-        RmiSslNoKeyStoreTest manager = new RmiSslNoKeyStoreTest();\n-        try {\n-            manager.run(args);\n-        } catch (RuntimeException r) {\n-            System.err.println(\"Test Failed: \"+ r.getMessage());\n-            System.exit(1);\n-        } catch (Throwable t) {\n-            System.err.println(\"Test Failed: \"+ t);\n-            t.printStackTrace();\n-            System.exit(2);\n+    public void run(boolean useSsl) throws IOException {\n+        final File[] conf = findAllConfigurationFiles(useSsl);\n+        if ((conf == null) || (conf.length == 0)) {\n+            throw new RuntimeException(\"No configuration found\");\n+        }\n+\n+        for (int i = 0; i < conf.length; i++) {\n+            runConfigurationFile(conf[i].toPath().toString());\n@@ -415,1 +346,0 @@\n-        System.out.println(\"**** Test RmiSslNoKeyStoreTest Passed ****\");\n@@ -418,0 +348,19 @@\n+    \/**\n+     * Tests the specified configuration files.\n+     * If args[] is not empty, each element in args[] is expected to be\n+     * a filename ending either by ok.properties or ko.properties.\n+     * Otherwise, the configuration files will be automatically determined\n+     * by looking at all *.properties files located in the directory\n+     * indicated by the System property \"test.src\".\n+     *\n+     * @throws RuntimeException if the test fails.\n+     **\/\n+    public void run(String args[]) throws IOException {\n+        if (args.length == 1) {\n+            run(args[0].contains(\"ssl\"));\n+        } else {\n+            for (int i = 1; i < args.length; i++) {\n+                runConfigurationFile(args[i]);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiSslNoKeyStoreTest.java","additions":181,"deletions":232,"binary":false,"changes":413,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-#\n-# Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @summary Test RMI Bootstrap with SSL and no keystore.\n-# @bug 4932854\n-#\n-# @build TestLogger RmiSslNoKeyStoreTest\n-# @run shell\/timeout=300  RmiSslNoKeyStoreTest.sh\n-\n-# Define the Java class test name\n-TESTCLASS=\"RmiSslNoKeyStoreTest\"\n-export TESTCLASS\n-\n-# Source in utility shell script to generate and remove .properties and .acl files\n-. ${TESTSRC}\/GeneratePropertyPassword.sh\n-\n-generatePropertyPasswordFiles `ls ${TESTSRC}\/*_ssltest*.in`\n-\n-rm -rf ${TESTCLASSES}\/ssl\n-mkdir -p ${TESTCLASSES}\/ssl\n-cp -rf ${TESTSRC}\/ssl\/*store ${TESTCLASSES}\/ssl\n-chmod -R 777 ${TESTCLASSES}\/ssl\n-\n-DEBUGOPTIONS=\"\"\n-export DEBUGOPTIONS\n-\n-EXTRAOPTIONS=\"--add-exports jdk.management.agent\/jdk.internal.agent=ALL-UNNAMED \\\n- --add-exports jdk.management.agent\/sun.management.jmxremote=ALL-UNNAMED\"\n-export EXTRAOPTIONS\n-\n-# Call the common generic test\n-#\n-echo -------------------------------------------------------------\n-echo Launching test for `basename $0 .sh`\n-echo -------------------------------------------------------------\n-sh ${TESTSRC}\/..\/RunTest.sh ${DEBUGOPTIONS} ${EXTRAOPTIONS} ${TESTCLASS} \\\n-    ${TESTCLASSES}\/management_ssltest*.properties\n-result=$?\n-restoreFilePermissions `ls ${TESTSRC}\/*_ssltest*.in`\n-exit $result\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiSslNoKeyStoreTest.sh","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -0,0 +1,265 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @library \/test\/lib\n+ * *\/\n+\n+import jdk.test.lib.Platform;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryType;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class RmiTestBase {\n+    static final String SEP = System.getProperty(\"file.separator\");\n+    static final String SRC = System.getProperty(\"test.src\");\n+    static final String DEST = System.getProperty(\"test.classes\");\n+    static final String SRC_SSL = SRC + SEP + \"ssl\";\n+    static final String DEST_SSL = DEST + SEP + \"ssl\";\n+    static final String TEST_SRC = \"@TEST-SRC@\";\n+\n+    static final String defaultFileNamePrefix =\n+            System.getProperty(\"java\" + \".home\") + SEP + \"conf\" + SEP + \"management\" + SEP;\n+\n+    static final String defaultStoreNamePrefix = SRC + SEP + \"ssl\" + SEP;\n+\n+    \/**\n+     * A filter to find all filenames who match <prefix>*<suffix>.\n+     * Note that <prefix> and <suffix> can overlap.\n+     **\/\n+    static class FilenameFilterFactory {\n+        static FilenameFilter prefixSuffix(final String p, final String s) {\n+            return (dir, name) -> name.startsWith(p) && name.endsWith(s);\n+        }\n+    }\n+\n+    enum AccessControl {\n+        OWNER,\n+        EVERYONE,\n+    }\n+\n+    \/**\n+     * Default values for RMI configuration properties.\n+     **\/\n+    public interface DefaultValues {\n+        String PORT = \"0\";\n+        String CONFIG_FILE_NAME = \"management.properties\";\n+        String USE_SSL = \"true\";\n+        String USE_AUTHENTICATION = \"true\";\n+        String PASSWORD_FILE_NAME = \"jmxremote.password\";\n+        String ACCESS_FILE_NAME = \"jmxremote.access\";\n+        String KEYSTORE = \"keystore\";\n+        String KEYSTORE_PASSWD = \"password\";\n+        String TRUSTSTORE = \"truststore\";\n+        String TRUSTSTORE_PASSWD = \"trustword\";\n+        String SSL_NEED_CLIENT_AUTH = \"false\";\n+    }\n+\n+    \/**\n+     * Names of RMI configuration properties.\n+     **\/\n+    public interface PropertyNames {\n+        String PORT = \"com.sun.management.jmxremote.port\";\n+        String CONFIG_FILE_NAME = \"com.sun.management.config.file\";\n+        String USE_SSL = \"com.sun.management.jmxremote.ssl\";\n+        String USE_AUTHENTICATION = \"com.sun.management.jmxremote.authenticate\";\n+        String PASSWORD_FILE_NAME = \"com.sun.management.jmxremote.password.file\";\n+        String ACCESS_FILE_NAME = \"com.sun.management.jmxremote.access.file\";\n+        String INSTRUMENT_ALL = \"com.sun.management.instrumentall\";\n+        String CREDENTIALS = \"jmx.remote.credentials\";\n+        String KEYSTORE = \"javax.net.ssl.keyStore\";\n+        String KEYSTORE_PASSWD = \"javax.net.ssl.keyStorePassword\";\n+        String KEYSTORE_TYPE = \"javax.net.ssl.keyStoreType\";\n+        String TRUSTSTORE = \"javax.net.ssl.trustStore\";\n+        String TRUSTSTORE_PASSWD = \"javax.net.ssl.trustStorePassword\";\n+        String SSL_ENABLED_CIPHER_SUITES = \"com.sun.management.jmxremote.ssl.enabled.cipher.suites\";\n+        String SSL_ENABLED_PROTOCOLS = \"com.sun.management.jmxremote.ssl.enabled.protocols\";\n+        String SSL_NEED_CLIENT_AUTH = \"com.sun.management.jmxremote.ssl.need.client.auth\";\n+        String SSL_CLIENT_ENABLED_CIPHER_SUITES = \"javax.rmi.ssl.client.enabledCipherSuites\";\n+    }\n+\n+    \/**\n+     * Copy test artifacts to test folder.\n+     *\n+     * @param filenamePattern the filename pattern to look for\n+     * @return files who match the filename pattern\n+     * @throws IOException if error occurs\n+     *\/\n+    static List<Path> prepareTestFiles(String filenamePattern) throws IOException {\n+        copySsl();\n+        List<Path> files = Utils.findFiles(Paths.get(SRC), (dir, name) -> name.matches(filenamePattern));\n+\n+        final Function<String, String> removeSuffix = (s) -> s.substring(0, s.lastIndexOf(\".\"));\n+\n+        List<Path> propertyFiles =\n+                Utils.copyFiles(files, Paths.get(DEST), removeSuffix, StandardCopyOption.REPLACE_EXISTING);\n+\n+        \/\/ replace @TEST-SRC@ with the path of the current test folder\n+        if (Platform.isWindows()) {\n+            \/\/ On Windows, also replace forward slash or single backslash to double backslashes\n+            Utils.replaceFilesString(propertyFiles,\n+                    (s) -> s.replace(TEST_SRC, DEST).replaceAll(\"[\/\\\\\\\\]\", \"\\\\\\\\\\\\\\\\\"));\n+        } else {\n+            Utils.replaceFilesString(propertyFiles, (s) -> s.replace(TEST_SRC, DEST));\n+        }\n+\n+        grantFilesAccess(propertyFiles, AccessControl.OWNER);\n+\n+        return Collections.unmodifiableList(files);\n+    }\n+\n+    \/**\n+     * Grant file access.\n+     *\n+     * @param file   file to grant access\n+     * @param access user access or full access\n+     * @throws IOException if error occurs\n+     *\/\n+    static void grantAccess(Path file, AccessControl access) throws IOException {\n+        Set<String> attr = file.getFileSystem().supportedFileAttributeViews();\n+        if (attr.contains(\"posix\")) {\n+            String perms = access == AccessControl.OWNER ? \"rw-------\" : \"rwxrwxrwx\";\n+            Files.setPosixFilePermissions(file, PosixFilePermissions.fromString(perms));\n+        } else if (attr.contains(\"acl\")) {\n+            AclFileAttributeView view = Files.getFileAttributeView(file, AclFileAttributeView.class);\n+            List<AclEntry> acl = new ArrayList<>();\n+            for (AclEntry thisEntry : view.getAcl()) {\n+                if (access == AccessControl.OWNER) {\n+                    if (thisEntry.principal().getName().equals(view.getOwner().getName())) {\n+                        acl.add(Utils.allowAccess(thisEntry));\n+                    } else if (thisEntry.type() == AclEntryType.ALLOW) {\n+                        acl.add(Utils.revokeAccess(thisEntry));\n+                    } else {\n+                        acl.add(thisEntry);\n+                    }\n+                } else {\n+                    if (!thisEntry.principal().getName().contains(\"NULL SID\")\n+                            && thisEntry.type() != AclEntryType.ALLOW) {\n+                        acl.add(Utils.allowAccess(thisEntry));\n+                    } else {\n+                        acl.add(thisEntry);\n+                    }\n+                }\n+            }\n+            view.setAcl(acl);\n+        } else {\n+            throw new RuntimeException(\"Unsupported file attributes: \" + attr);\n+        }\n+    }\n+\n+    \/**\n+     * Grant files' access.\n+     *\n+     * @param files  files to grant access\n+     * @param access user access or full access\n+     * @throws IOException if error occurs\n+     *\/\n+    static void grantFilesAccess(List<Path> files, AccessControl access) throws IOException {\n+        for (Path thisFile : files) {\n+            grantAccess(thisFile, access);\n+        }\n+    }\n+\n+    \/**\n+     * Copy SSL files to test folder.\n+     *\n+     * @throws IOException\n+     *\/\n+    static void copySsl() throws IOException {\n+        Path sslSource = Paths.get(SRC_SSL);\n+        Path sslTarget = Paths.get(DEST_SSL);\n+\n+        List<Path> files = Arrays.stream(sslSource.toFile().listFiles()).map(File::toPath).collect(Collectors.toList());\n+        Utils.copyFiles(files, sslTarget, StandardCopyOption.REPLACE_EXISTING);\n+\n+        for (Path file : files) {\n+            grantAccess(sslTarget.resolve(file.getFileName()), AccessControl.EVERYONE);\n+        }\n+    }\n+\n+    \/**\n+     * Get all \"management*ok.properties\" files in the directory\n+     * indicated by the \"test.src\" management property.\n+     *\n+     * @param useSsl boolean that indicates if test uses SSL\n+     * @return configuration files\n+     **\/\n+    static File[] findConfigurationFilesOk(boolean useSsl) {\n+        String prefix = useSsl ? \"management_ssltest\" : \"management_test\";\n+        return findAllConfigurationFiles(prefix, \"ok.properties\");\n+    }\n+\n+    \/**\n+     * Get all \"management*ko.properties\" files in the directory\n+     * indicated by the \"test.src\" management property.\n+     *\n+     * @param useSsl boolean that indicates if test uses SSL\n+     * @return configuration files\n+     **\/\n+    static File[] findConfigurationFilesKo(boolean useSsl) {\n+        String prefix = useSsl ? \"management_ssltest\" : \"management_test\";\n+        return findAllConfigurationFiles(prefix, \"ko.properties\");\n+    }\n+\n+    \/**\n+     * Get all \"management*.properties\" files in the directory\n+     * indicated by the \"test.src\" management property.\n+     *\n+     * @param useSsl boolean that indicates if test uses SSL\n+     * @return configuration files\n+     **\/\n+    static File[] findAllConfigurationFiles(boolean useSsl) {\n+        String prefix = useSsl ? \"management_ssltest\" : \"management_test\";\n+        return findAllConfigurationFiles(prefix, \"properties\");\n+    }\n+\n+    \/**\n+     * Get all \"management*.properties\" files in the directory\n+     * indicated by the \"test.src\" management property.\n+     *\n+     * @param prefix filename prefix\n+     * @param suffix filename suffix\n+     * @return configuration files\n+     **\/\n+    static File[] findAllConfigurationFiles(String prefix, String suffix) {\n+        final File dir = new File(DEST);\n+        final FilenameFilter filter = FilenameFilterFactory.prefixSuffix(prefix, suffix);\n+        return dir.listFiles(filter);\n+    }\n+}\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiTestBase.java","additions":265,"deletions":0,"binary":false,"changes":265,"status":"added"},{"patch":"@@ -24,0 +24,9 @@\n+import java.io.*;\n+import java.nio.file.CopyOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.*;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n@@ -49,0 +58,137 @@\n+\n+    \/**\n+     * Return file directories that satisfy the specified filter.\n+     *\n+     * @param searchDirectory the base directory to search\n+     * @param filter          a filename filter\n+     * @return                file directories\n+     *\/\n+    public static List<Path> findFiles(Path searchDirectory,\n+            FilenameFilter filter) {\n+        return Arrays.stream(searchDirectory.toFile().listFiles(filter))\n+                .map(f -> f.toPath())\n+                .collect(Collectors.toList());\n+    }\n+\n+    \/**\n+     * Copy files to the target path.\n+     *\n+     * @param source         the paths to the files to copy\n+     * @param target         the path to the target files\n+     * @param filenameMapper mapper function applied to filenames\n+     * @param options        options specifying how the copy should be done\n+     * @return               the paths to the target files\n+     * @throws IOException   if error occurs\n+     *\/\n+    public static List<Path> copyFiles(List<Path> source, Path target,\n+            Function<String, String> filenameMapper,\n+            CopyOption... options) throws IOException {\n+        List<Path> result = new ArrayList<>();\n+\n+        if (!target.toFile().exists()) {\n+            Files.createDirectory(target);\n+        }\n+\n+        for (Path file : source) {\n+            if (!file.toFile().exists()) {\n+                continue;\n+            }\n+\n+            String baseName = file.getFileName().toString();\n+\n+            Path targetFile = target.resolve(filenameMapper.apply(baseName));\n+            Files.copy(file, targetFile, options);\n+            result.add(targetFile);\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * Copy files to the target path.\n+     *\n+     * @param source         the paths to the files to copy\n+     * @param target         the path to the target files\n+     * @param options        options specifying how the copy should be done\n+     * @return               the paths to the target files\n+     * @throws IOException   if error occurs\n+     *\/\n+    public static List<Path> copyFiles(List<Path> source, Path target,\n+            CopyOption... options) throws IOException {\n+        return copyFiles(source, target, (s) -> s, options);\n+    }\n+\n+    \/**\n+     * Return an ACL entry that revokes owner access.\n+     *\n+     * @param acl   original ACL entry to build from\n+     * @return      an ACL entry that revokes all access\n+     *\/\n+    public static AclEntry revokeAccess(AclEntry acl) {\n+        return buildAclEntry(acl, AclEntryType.DENY);\n+    }\n+\n+    \/**\n+     * Return an ACL entry that allow owner access.\n+     * @param acl   original ACL entry to build from\n+     * @return      an ACL entry that allows all access\n+     *\/\n+    public static AclEntry allowAccess(AclEntry acl) {\n+        return buildAclEntry(acl, AclEntryType.ALLOW);\n+    }\n+\n+    \/**\n+     * Build an ACL entry with a given ACL entry type.\n+     *\n+     * @param acl   original ACL entry to build from\n+     * @return      an ACL entry with a given ACL entry type\n+     *\/\n+    public static AclEntry buildAclEntry(AclEntry acl, AclEntryType type) {\n+        return AclEntry.newBuilder()\n+                .setType(type)\n+                .setPrincipal(acl.principal())\n+                .setPermissions(acl.permissions())\n+                .build();\n+    }\n+\n+    \/**\n+     * Replace file string by applying the given mapper function.\n+     *\n+     * @param source        the file to read\n+     * @param contentMapper the mapper function applied to file's content\n+     * @throws IOException  if an I\/O error occurs\n+     *\/\n+    public static void replaceFileString(Path source,\n+            Function<String, String> contentMapper) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        String lineSep = System.getProperty(\"line.separator\");\n+\n+        try (BufferedReader reader =\n+                new BufferedReader(new FileReader(source.toFile()))) {\n+\n+            String line;\n+\n+            \/\/ read all and replace all at once??\n+            while ((line = reader.readLine()) != null) {\n+                sb.append(contentMapper.apply(line))\n+                        .append(lineSep);\n+            }\n+        }\n+\n+        try (FileWriter writer = new FileWriter(source.toFile())) {\n+            writer.write(sb.toString());\n+        }\n+    }\n+\n+    \/**\n+     * Replace files' string by applying the given mapper function.\n+     *\n+     * @param source        the file to read\n+     * @param contentMapper the mapper function applied to files' content\n+     * @throws IOException  if an I\/O error occurs\n+     *\/\n+    public static void replaceFilesString(List<Path> source,\n+            Function<String, String> contentMapper) throws IOException {\n+        for (Path file : source) {\n+            replaceFileString(file, contentMapper);\n+        }\n+    }\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/Utils.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"modified"}]}