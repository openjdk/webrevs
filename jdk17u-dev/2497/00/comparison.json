{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,0 +137,76 @@\n+class RunExecutorWithMsgLoop {\n+public:\n+    static DWORD apply(const Executor& exec) {\n+        RunExecutorWithMsgLoop instance(exec);\n+\n+        UniqueHandle threadHandle = UniqueHandle(CreateThread(NULL, 0, worker,\n+                                    static_cast<LPVOID>(&instance), 0, NULL));\n+        if (threadHandle.get() == NULL) {\n+            JP_THROW(SysError(\"CreateThread() failed\", CreateThread));\n+        }\n+\n+        MSG msg;\n+        BOOL bRet;\n+        while((bRet = GetMessage(&msg, instance.hwnd, 0, 0 )) != 0) {\n+            if (bRet == -1) {\n+                JP_THROW(SysError(\"GetMessage() failed\", GetMessage));\n+            } else {\n+                TranslateMessage(&msg);\n+                DispatchMessage(&msg);\n+            }\n+        }\n+\n+        \/\/ Wait for worker thread to terminate to guarantee it will not linger\n+        \/\/ around after the thread running a message loop terminates.\n+        const DWORD res = ::WaitForSingleObject(threadHandle.get(), INFINITE);\n+        if (WAIT_FAILED ==  res) {\n+            JP_THROW(SysError(\"WaitForSingleObject() failed\",\n+                                                        WaitForSingleObject));\n+        }\n+\n+        LOG_TRACE(tstrings::any()\n+                            << \"Executor worker thread terminated. Exit code=\"\n+                            << instance.exitCode);\n+        return instance.exitCode;\n+    }\n+\n+private:\n+    RunExecutorWithMsgLoop(const Executor& v): exec(v) {\n+        exitCode = 1;\n+\n+        \/\/ Message-only window.\n+        hwnd = CreateWindowEx(0, _T(\"STATIC\"), _T(\"\"), 0, 0, 0, 0, 0,\n+                              HWND_MESSAGE, NULL, GetModuleHandle(NULL), NULL);\n+        if (!hwnd) {\n+            JP_THROW(SysError(\"CreateWindowEx() failed\", CreateWindowEx));\n+        }\n+    }\n+\n+    static DWORD WINAPI worker(LPVOID param) {\n+        static_cast<RunExecutorWithMsgLoop*>(param)->run();\n+        return 0;\n+    }\n+\n+    void run() {\n+        JP_TRY;\n+        exitCode = static_cast<DWORD>(exec.execAndWaitForExit());\n+        JP_CATCH_ALL;\n+\n+        JP_TRY;\n+        if (!PostMessage(hwnd, WM_QUIT, 0, 0)) {\n+            JP_THROW(SysError(\"PostMessage(WM_QUIT) failed\", PostMessage));\n+        }\n+        return;\n+        JP_CATCH_ALL;\n+\n+        \/\/ All went wrong, PostMessage() failed. Just terminate with error code.\n+        exit(1);\n+    }\n+\n+private:\n+    const Executor& exec;\n+    DWORD exitCode;\n+    HWND hwnd;\n+};\n+\n+\n@@ -183,1 +259,1 @@\n-        DWORD exitCode = static_cast<DWORD>(exec.execAndWaitForExit());\n+        DWORD exitCode = RunExecutorWithMsgLoop::apply(exec);\n","filename":"src\/jdk.jpackage\/windows\/native\/applauncher\/WinLauncher.cpp","additions":78,"deletions":2,"binary":false,"changes":80,"status":"modified"}]}