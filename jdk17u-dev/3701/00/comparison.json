{"files":[{"patch":"@@ -171,0 +171,2 @@\n+  PCIterateMarkAndPushClosure cl(this, PSParallelCompact::ref_processor());\n+\n@@ -172,0 +174,1 @@\n+    cl.do_klass(obj->klass());\n@@ -174,1 +177,0 @@\n-    PCIterateMarkAndPushClosure cl(this, PSParallelCompact::ref_processor());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.lang.reflect.Array;\n+\n@@ -39,1 +41,1 @@\n- * Test that verifies that classes are unloaded when they are no longer reachable.\n+ * Test that verifies that liveness of classes is correctly tracked.\n@@ -41,4 +43,6 @@\n- * The test creates a class loader, uses the loader to load a class and creates an instance\n- * of that class. The it nulls out all the references to the instance, class and class loader\n- * and tries to trigger class unloading. Then it verifies that the class is no longer\n- * loaded by the VM.\n+ * The test creates a class loader, uses the loader to load a class and creates\n+ * an instance related to that class.\n+ * 1. Then, it nulls out references to the class loader, triggers class\n+ *    unloading and verifies the class is *not* unloaded.\n+ * 2. Next, it nulls out references to the instance, triggers class unloading\n+ *    and verifies the class is unloaded.\n@@ -47,1 +51,0 @@\n-    private static String className = \"test.Empty\";\n@@ -50,1 +53,2 @@\n-       run();\n+       test_unload_instance_klass();\n+       test_unload_obj_array_klass();\n@@ -53,1 +57,2 @@\n-    private static void run() throws Exception {\n+    private static void test_unload_instance_klass() throws Exception {\n+        final String className = \"test.Empty\";\n@@ -59,2 +64,1 @@\n-        Class<?> c = cl.loadClass(className);\n-        Object o = c.newInstance();\n+        Object o = cl.loadClass(className).newInstance();\n@@ -68,1 +72,6 @@\n-        cl = null; c = null; o = null;\n+        cl = null;\n+        ClassUnloadCommon.triggerUnloading();\n+\n+        ClassUnloadCommon.failIf(!wb.isClassAlive(className), \"should still be live\");\n+\n+        o = null;\n@@ -70,0 +79,29 @@\n+\n+\n+        ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should have been unloaded\");\n+\n+        int unloadedRefcount = wb.getSymbolRefcount(loaderName);\n+        System.out.println(\"Refcount of symbol \" + loaderName + \" is \" + unloadedRefcount);\n+        ClassUnloadCommon.failIf(unloadedRefcount != (loadedRefcount - 1), \"Refcount must be decremented\");\n+    }\n+\n+    private static void test_unload_obj_array_klass() throws Exception {\n+        final WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+        ClassLoader cl = ClassUnloadCommon.newClassLoader();\n+        Object o = Array.newInstance(cl.loadClass(\"test.Empty\"), 1);\n+        final String className = o.getClass().getName();\n+\n+        ClassUnloadCommon.failIf(!wb.isClassAlive(className), \"should be live here\");\n+\n+        String loaderName = cl.getName();\n+        int loadedRefcount = wb.getSymbolRefcount(loaderName);\n+        System.out.println(\"Refcount of symbol \" + loaderName + \" is \" + loadedRefcount);\n+\n+        cl = null;\n+        ClassUnloadCommon.triggerUnloading();\n+        ClassUnloadCommon.failIf(!wb.isClassAlive(className), \"should still be live\");\n+\n+        o = null;\n+        ClassUnloadCommon.triggerUnloading();\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadTest.java","additions":49,"deletions":11,"binary":false,"changes":60,"status":"modified"}]}