{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -95,1 +95,1 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -100,3 +100,3 @@\n-  bool is_valid()       const { return ( 0 <= _encoding && _encoding <  number_of_registers); }\n-  bool is_volatile()    const { return ( 0 <= _encoding && _encoding <= 13 ); }\n-  bool is_nonvolatile() const { return (14 <= _encoding && _encoding <= 31 ); }\n+  constexpr bool is_valid()       const { return ( 0 <= _encoding && _encoding <  number_of_registers); }\n+  constexpr bool is_volatile()    const { return ( 0 <= _encoding && _encoding <= 13 ); }\n+  constexpr bool is_nonvolatile() const { return (14 <= _encoding && _encoding <= 31 ); }\n@@ -166,1 +166,1 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -170,2 +170,2 @@\n-  bool is_valid()       const { return (0 <= _encoding && _encoding <  number_of_registers); }\n-  bool is_nonvolatile() const { return (2 <= _encoding && _encoding <= 4 );  }\n+  constexpr bool is_valid()       const { return (0 <= _encoding && _encoding <  number_of_registers); }\n+  constexpr bool is_nonvolatile() const { return (2 <= _encoding && _encoding <= 4 );  }\n@@ -210,1 +210,1 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -215,1 +215,1 @@\n-  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n+  constexpr bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -282,1 +282,1 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -286,1 +286,1 @@\n-  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n+  constexpr bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -321,1 +321,1 @@\n-  int encoding()  const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -324,1 +324,1 @@\n-  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n+  constexpr bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n@@ -390,1 +390,1 @@\n-  int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n+  constexpr int encoding() const { assert(is_valid(), \"invalid register\"); return _encoding; }\n@@ -394,1 +394,1 @@\n-  bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n+  constexpr bool is_valid() const { return (0 <= _encoding && _encoding < number_of_registers); }\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"}]}