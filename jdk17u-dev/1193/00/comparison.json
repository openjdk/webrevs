{"files":[{"patch":"@@ -0,0 +1,237 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+\n+\/*\n+ * @test\n+ * @bug 8289511\n+ * @run testng\/othervm xpath.XPathExpChildTest\n+ * @summary Tests for XPath child axis specifier.\n+ *\/\n+public class XPathExpChildTest {\n+\n+    private static final String XML = \"\"\"\n+            <store>\n+               <book id=\"1\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"1\"\/>\n+                  <isbn>1234<\/isbn>\n+               <\/book>\n+               <book id=\"2\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"2\"\/>\n+                  <isbn>5678<\/isbn>\n+               <\/book>\n+            <\/store>\n+            \"\"\";\n+    private static final String AUTHOR_1 = \"author_1\";\n+    private static final String AUTHOR_2 = \"author_2\";\n+    private static final Document doc;\n+\n+    static {\n+        try {\n+            var builder =\n+                    DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            InputStream s = new ByteArrayInputStream(XML.getBytes());\n+            doc = builder.parse(s);\n+        } catch (Exception e) {\n+            System.out.println(\"Exception while initializing XML document\");\n+            throw new RuntimeException(e.getMessage());\n+        }\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath expression and expected result\n+     *\/\n+    @DataProvider(name = \"parameters\")\n+    public Object[][] getXPathExpression() {\n+        return new Object[][]{\n+                \/\/ abbreviated text\n+                {\"\/store\/book\/author\", AUTHOR_1},\n+                {\"\/child::store\/child::book\/child::author\", AUTHOR_1},\n+                {\"\/store\/child::book\/author\", AUTHOR_1},\n+\n+                \/\/ any nodes\n+                {\"\/store\/book\/child::*[2]\", AUTHOR_1},\n+                {\"\/store\/child::*[child::author]\/author\", AUTHOR_1},\n+                {\"\/store\/child::*[child::author][2]\/author\", AUTHOR_2},\n+                {\"\/store\/child::node()\/child::author\", AUTHOR_1},\n+                {\"\/store\/child::node()[child::author]\/author\", AUTHOR_1},\n+                {\"\/store\/child::node()[child::author][2]\/author\", AUTHOR_2},\n+\n+                \/\/ position\n+                {\"\/store\/child::book[position()=1]\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[last()]\/author\", AUTHOR_2},\n+\n+                \/\/ descendant\n+                {\"\/\/book\/child::*[2]\", AUTHOR_1},\n+                {\"\/\/child::*[child::author]\/author\", AUTHOR_1},\n+                {\"\/\/child::*[child::author][2]\/author\", AUTHOR_2},\n+                {\"\/\/child::node()\/child::author\", AUTHOR_1},\n+                {\"\/\/child::node()[child::author]\/author\", AUTHOR_1},\n+                {\"\/\/child::node()[child::author][2]\/author\", AUTHOR_2},\n+\n+                \/\/ parent node\n+                {\"\/\/child::book\/..\/child::book\/child::author\", AUTHOR_1},\n+\n+                \/\/ dot reference\n+                {\"\/\/child::book\/.\/child::author\", AUTHOR_1},\n+                {\"\/\/child::node()\/.\/child::author\", AUTHOR_1},\n+                {\"\/\/.\/.\/\/.\/child::author\", AUTHOR_1},\n+\n+                \/\/ attributes\n+                {\"\/store\/child::book[@id=1]\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[attribute::id=1]\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[@id]\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[@id=1][@lang='en']\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[@lang='en'][1]\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[child::isbn='1234']\/author\", AUTHOR_1},\n+                {\"\/store\/child::book[@lang='en' and \" +\n+                        \"child::isbn='1234']\/author\", AUTHOR_1},\n+                {\"\/store\/child::*[@lang='en'][2]\/author\", AUTHOR_2},\n+                {\"\/store\/child::node()[@id='1']\/author\", AUTHOR_1},\n+                {\"\/store\/child::node()[@lang='en'][2]\/author\", AUTHOR_2},\n+                {\"\/store\/child::*[child::author][child::title][@id='2']\/author\",\n+                        AUTHOR_2},\n+                {\"\/store\/child::*[child::author or child::ssn][@id='2']\/author\",\n+                        AUTHOR_2},\n+                {\"\/store\/child::*[child::*]\/author\", AUTHOR_1},\n+                {\"\/store\/child::*[attribute::*]\/author\", AUTHOR_1},\n+                {\"\/store\/*[*][*][*][*][*][*][*][*]\/author\", AUTHOR_1},\n+                {\"\/store\/*[@*][@*][@*][@*][@*][@*][@*][@*]\/author\", AUTHOR_1},\n+                {\"\/\/author[@*]\", AUTHOR_1},\n+\n+                \/\/ text node\n+                {\"\/store\/book[1]\/isbn\/child::text()\/..\/..\/author\", AUTHOR_1},\n+                {\"\/store\/book\/isbn[child::text()='5678']\/..\/author\", AUTHOR_2},\n+                {\"\/store\/book\/isbn[.='5678']\/..\/author\", AUTHOR_2},\n+\n+                \/\/ count child nodes\n+                {\"\/store\/book[count(.\/child::author)]\/author\", AUTHOR_1},\n+                {\"\/store\/book[count(child::author)]\/author\", AUTHOR_1},\n+                {\"\/store\/book[count(..\/child::book)]\/author\", AUTHOR_2},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath expressions that return zero children\n+     *\/\n+    @DataProvider(name = \"zeroChildrenExp\")\n+    public Object[][] getZeroChildrenExp() {\n+        return new Object[][]{\n+                {\"\/store\/book[3]\/author\"},\n+                {\"\/store\/book\/author\/ssn\"},\n+                {\"\/store\/child[book]\/author\"},\n+                {\"\/store\/child[@id='1']\/book\/author\"},\n+                {\"\/store\/child::*[@category]\/author\"},\n+                {\"\/\/author[*]\/..\/author\"},\n+                {\"\/\/title[@*]\/..\/author\"},\n+                {\"\/store\/book[-1]\/author\"},\n+                {\"\/store\/child:book\/author\"},\n+                {\"\/\/book[.='1']\/author\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides invalid XPath expression and expected exception\n+     *  to be thrown\n+     *\/\n+    @DataProvider(name = \"invalidExp\")\n+    public Object[][] getInvalidExp() {\n+        return new Object[][]{\n+                \/\/ XPathExpressionException\n+                {\"\/store\/*[child::author] and [child::title]\/author\",\n+                        XPathExpressionException.class},\n+                {\"\/\/book[@id='en'] and book[@lang='en']\/author\",\n+                        XPathExpressionException.class},\n+                {\"\/store\/book[child::count()]\/author\",\n+                        XPathExpressionException.class},\n+                {\"\/\/book[child::position()=1]\", XPathExpressionException.class},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies XPath child axis specifier.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"parameters\")\n+    void testXPathEvaluate(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        NodeList nl = (NodeList) xPath.evaluate(exp, doc,\n+                XPathConstants.NODESET);\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertEquals(nl.item(0).getNodeName(), node.getNodeName());\n+        Assert.assertEquals(nl.item(0).getNodeValue(), node.getNodeValue());\n+        Assert.assertEquals(nl.item(0).getAttributes(), node.getAttributes());\n+\n+        Assert.assertEquals(node.getNodeName() + \"_\" +\n+                        node.getAttributes().item(0).getNodeValue(),\n+                expected);\n+    }\n+\n+    \/**\n+     * Verifies no child nodes returned from the XPath expression.\n+     *\n+     * @param exp XPath expression\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"zeroChildrenExp\")\n+    void testZeroChildrenExp(String exp) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertNull(node);\n+    }\n+\n+    \/**\n+     * Verifies exception thrown for invalid expression.\n+     *\n+     * @param exp            XPath expression\n+     * @param throwableClass expected exception\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"invalidExp\")\n+    void testInvalidExp(String exp, Class throwableClass) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Assert.assertThrows(throwableClass,\n+                () -> ((NodeList) xPath.evaluate(exp, doc,\n+                        XPathConstants.NODESET)).item(0).getNodeName());\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpChildTest.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"}]}