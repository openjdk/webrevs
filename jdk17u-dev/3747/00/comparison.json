{"files":[{"patch":"@@ -26,2 +26,3 @@\n- * @bug 8167108 8266130 8282704\n- * @summary Stress test java.lang.Thread.stop() at thread exit.\n+ * @bug 8167108 8266130 8282704 8283467\n+ * @summary Stress test JVM\/TI StopThread() at thread exit.\n+ * @requires vm.jvmti\n@@ -29,1 +30,1 @@\n- * @run main\/othervm StopAtExit\n+ * @run main\/othervm\/native -agentlib:StopAtExit StopAtExit\n@@ -39,0 +40,1 @@\n+    private final static int JVMTI_ERROR_THREAD_NOT_ALIVE = 15;\n@@ -43,0 +45,2 @@\n+    native static int stopThread(StopAtExit thr, Throwable exception);\n+\n@@ -59,1 +63,1 @@\n-            \/\/ ignore because we're testing Thread.stop() which throws it\n+            \/\/ ignore because we're testing JVM\/TI StopThread() which throws it\n@@ -61,1 +65,1 @@\n-            \/\/ ignore because we're testing Thread.stop() which can cause it\n+            \/\/ ignore because we're testing JVM\/TI StopThread() which can cause it\n@@ -92,0 +96,2 @@\n+            Throwable myException = new ThreadDeath();\n+            int retCode;\n@@ -98,1 +104,1 @@\n-                \/\/ Thread.stop() calls will come in during thread exit.\n+                \/\/ JVM\/TI StopThread() calls will come in during thread exit.\n@@ -101,1 +107,12 @@\n-                    thread.stop();\n+                    retCode = stopThread(thread, myException);\n+\n+                    if (retCode == JVMTI_ERROR_THREAD_NOT_ALIVE) {\n+                        \/\/ Done with JVM\/TI StopThread() calls since\n+                        \/\/ thread is not alive.\n+                        break;\n+                    } else if (retCode != 0) {\n+                        throw new RuntimeException(\"thread \" + thread.getName()\n+                                                   + \": stopThread() \" +\n+                                                   \"retCode=\" + retCode +\n+                                                   \": unexpected value.\");\n+                    }\n@@ -104,1 +121,1 @@\n-                        \/\/ Done with Thread.stop() calls since\n+                        \/\/ Done with JVM\/TI StopThread() calls since\n@@ -112,1 +129,1 @@\n-                \/\/ Ignore because we're testing Thread.stop() which can\n+                \/\/ Ignore because we're testing JVM\/TI StopThread() which can\n@@ -123,3 +140,12 @@\n-            \/\/ This stop() call happens after the join() so it should do\n-            \/\/ nothing, but let's make sure.\n-            thread.stop();\n+            \/\/ This JVM\/TI StopThread() happens after the join() so it\n+            \/\/ should do nothing, but let's make sure.\n+            retCode = stopThread(thread, myException);\n+\n+            if (retCode != JVMTI_ERROR_THREAD_NOT_ALIVE) {\n+                throw new RuntimeException(\"thread \" + thread.getName()\n+                                           + \": stopThread() \" +\n+                                           \"retCode=\" + retCode +\n+                                           \": unexpected value; \" +\n+                                           \"expected JVMTI_ERROR_THREAD_NOT_ALIVE(\" +\n+                                           JVMTI_ERROR_THREAD_NOT_ALIVE + \").\");\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/StopAtExit.java","additions":38,"deletions":12,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv* jvmti = NULL;\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+JNIEXPORT jint JNICALL\n+Java_StopAtExit_stopThread(JNIEnv *jni, jclass cls, jthread thr, jobject exception) {\n+  return jvmti->StopThread(thr, exception);\n+}\n+\n+\n+\/** Agent library initialization. *\/\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  \/\/ create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ add specific capabilities for stoping thread\n+  jvmtiCapabilities stopCaps;\n+  memset(&stopCaps, 0, sizeof(stopCaps));\n+  stopCaps.can_signal_thread = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&stopCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/libStopAtExit.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}