{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"metaprogramming\/isSigned.hpp\"\n@@ -34,0 +33,2 @@\n+#include <type_traits>\n+\n@@ -46,1 +47,1 @@\n-  STATIC_ASSERT(IsSigned<T>::value == false);\n+  STATIC_ASSERT(std::is_signed<T>::value == false);\n@@ -91,1 +92,1 @@\n-  STATIC_ASSERT(IsSigned<T>::value == false);\n+  STATIC_ASSERT(std::is_signed<T>::value == false);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/counters.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_ISSIGNED_HPP\n-#define SHARE_METAPROGRAMMING_ISSIGNED_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-\n-#include <limits>\n-#include <type_traits>\n-\n-template<typename T>\n-struct IsSigned\n-  : public IntegralConstant<bool, std::numeric_limits<typename std::remove_cv<T>::type>::is_signed>\n-{};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISSIGNED_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isSigned.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/isSigned.hpp\"\n@@ -644,1 +643,1 @@\n-  using PI = std::conditional_t<IsSigned<I>::value, intptr_t, uintptr_t>;\n+  using PI = std::conditional_t<std::is_signed<I>::value, intptr_t, uintptr_t>;\n@@ -647,1 +646,1 @@\n-  STATIC_ASSERT(IsSigned<I>::value == IsSigned<AddendType>::value);\n+  STATIC_ASSERT(std::is_signed<I>::value == std::is_signed<AddendType>::value);\n@@ -886,1 +885,1 @@\n-                    (IsSigned<I>::value == IsSigned<D>::value)>::type>\n+                    (std::is_signed<I>::value == std::is_signed<D>::value)>::type>\n@@ -908,1 +907,1 @@\n-  using SI = std::conditional_t<IsSigned<I>::value, intptr_t, uintptr_t>;\n+  using SI = std::conditional_t<std::is_signed<I>::value, intptr_t, uintptr_t>;\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"metaprogramming\/isSigned.hpp\"\n@@ -51,1 +50,1 @@\n-  STATIC_ASSERT(!IsSigned<T>::value);\n+  STATIC_ASSERT(!std::is_signed<T>::value);\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isSigned.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsSignedTest: AllStatic {\n-  template <typename SignedType, typename UnsignedType>\n-  class TestIntegers: AllStatic {\n-    static const bool _signed_type_is_signed = IsSigned<SignedType>::value;\n-    STATIC_ASSERT(_signed_type_is_signed);\n-    static const bool _unsigned_type_is_unsigned = !IsSigned<UnsignedType>::value;\n-    STATIC_ASSERT(_unsigned_type_is_unsigned);\n-\n-    static const bool _cvsigned_type_is_signed = IsSigned<const volatile SignedType>::value;\n-    STATIC_ASSERT(_signed_type_is_signed);\n-    static const bool _cvunsigned_type_is_unsigned = !IsSigned<const volatile UnsignedType>::value;\n-    STATIC_ASSERT(_unsigned_type_is_unsigned);\n-  };\n-\n-  const TestIntegers<int8_t,  uint8_t>  TestByte;\n-  const TestIntegers<int16_t, uint16_t> TestShort;\n-  const TestIntegers<int32_t, uint32_t> TestInt;\n-  const TestIntegers<int64_t, uint64_t> TestLong;\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isSigned.cpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"metaprogramming\/isSigned.hpp\"\n@@ -32,0 +31,1 @@\n+#include <type_traits>\n@@ -36,1 +36,1 @@\n-  uint32_t limit = bits - (IsSigned<T>::value ? 1 : 0);\n+  uint32_t limit = bits - (std::is_signed<T>::value ? 1 : 0);\n@@ -59,1 +59,1 @@\n-  uint32_t number_of_leading_zeros = (IsSigned<T>::value ? 1 : 0);\n+  uint32_t number_of_leading_zeros = (std::is_signed<T>::value ? 1 : 0);\n@@ -81,1 +81,1 @@\n-  uint32_t number_of_leading_zeros = (IsSigned<T>::value ? 1 : 0);\n+  uint32_t number_of_leading_zeros = (std::is_signed<T>::value ? 1 : 0);\n@@ -100,1 +100,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_count_leading_zeros.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}