{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4087762\n+  @summary Sometimes click events are missing when you click the color components alternately.\n+  @key headful\n+  @library \/test\/jdk\/java\/awt\/regtesthelpers\n+  @build Util\n+  @run main ClickEventsTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class ClickEventsTest {\n+    static Frame frame;\n+    static ColorComponent redComponent;\n+    static ColorComponent blueComponent;\n+    static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ClickEventsTest::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        for (int i = 0; i < 10; i++) {\n+            redComponent.clickAndCheck();\n+            blueComponent.clickAndCheck();\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"ClickEventsTest\");\n+        redComponent = new ColorComponent(Color.RED);\n+        blueComponent = new ColorComponent(Color.BLUE);\n+\n+        frame.add(\"North\", redComponent);\n+        frame.add(\"South\", blueComponent);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static class ColorComponent extends Component {\n+        public Color myColor;\n+\n+        private final CyclicBarrier barrier = new CyclicBarrier(2);\n+\n+        private final MouseAdapter mouseAdapter = new MouseAdapter() {\n+            public void mouseClicked(MouseEvent event) {\n+                System.out.println(myColor + \" area clicked\");\n+                try {\n+                    barrier.await(1, TimeUnit.SECONDS);\n+                } catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        };\n+\n+        public ColorComponent(Color c) {\n+            myColor = c;\n+            addMouseListener(mouseAdapter);\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(200, 100);\n+        }\n+\n+        public void paint(Graphics g) {\n+            g.setColor(myColor);\n+            g.fillRect(0, 0, 200, 100);\n+        }\n+\n+        public void clickAndCheck() throws InterruptedException, BrokenBarrierException {\n+            barrier.reset();\n+            Util.clickOnComp(this, robot);\n+            try {\n+                barrier.await(1, TimeUnit.SECONDS);\n+            } catch (TimeoutException e) {\n+                throw new RuntimeException(myColor + \" was not clicked\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ClickEventsTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4219344\n+ * @summary tests that WINDOW_ACTIVATED events are generated properly\n+ * @key headful\n+ * @library \/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build Util\n+ * @run main WindowActivatedEventTest\n+ *\/\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Window;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowAdapter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class WindowActivatedEventTest {\n+\n+    static Robot robot;\n+    static Frame frame;\n+    static Dialog dialog;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            EventQueue.invokeAndWait(WindowActivatedEventTest::createAndShowGUI);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Util.clickOnComp(dialog, robot);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            for (int i = 0; i < 3 ; i++) {\n+                clickAndCheck(frame);\n+                clickAndCheck(dialog);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void clickAndCheck(Window windowToFocus)\n+            throws InterruptedException, InvocationTargetException {\n+        Window oppositeWindow = (windowToFocus == frame) ? dialog : frame;\n+\n+        System.out.println(\"Clicking on \" + windowToFocus);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (windowToFocus.isFocused() || !oppositeWindow.isFocused()) {\n+                throw new RuntimeException(\"%s isFocused %b, %s isFocused %b\".formatted(\n+                        windowToFocus.getName(), windowToFocus.isFocused(),\n+                        oppositeWindow.getName(), oppositeWindow.isFocused()\n+                ));\n+            }\n+        });\n+\n+        WindowEventLogger windowLogger = WindowEventLogger.getFromWindow(windowToFocus);\n+        WindowEventLogger oppositeWindowLogger = WindowEventLogger.getFromWindow(oppositeWindow);\n+\n+        windowLogger.resetCounters();\n+        oppositeWindowLogger.resetCounters();\n+\n+        Util.clickOnComp(windowToFocus, robot);\n+\n+        robot.delay(500);\n+\n+        int windowActivatedCount = windowLogger.activatedCount.get();\n+        int windowDeactivatedCount = windowLogger.deactivatedCount.get();\n+        int oppositeWindowActivatedCount = oppositeWindowLogger.activatedCount.get();\n+        int oppositeWindowDeactivatedCount = oppositeWindowLogger.deactivatedCount.get();\n+\n+        if (windowActivatedCount != 1\n+                || windowDeactivatedCount != 0\n+                || oppositeWindowActivatedCount != 0\n+                || oppositeWindowDeactivatedCount != 1) {\n+            throw new RuntimeException(\n+                    \"Invalid activated\/deactivated count: %s (%d\/%d) \/ %s (%d\/%d)\"\n+                    .formatted(\n+                            windowToFocus.getName(),\n+                            windowActivatedCount,\n+                            windowDeactivatedCount,\n+                            oppositeWindow.getName(),\n+                            oppositeWindowActivatedCount,\n+                            oppositeWindowDeactivatedCount\n+                    ));\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"frame WindowActivatedEventTest\");\n+        dialog = new Dialog(frame, \"dialog WindowActivatedEventTest\");\n+\n+        frame.addWindowListener(new WindowEventLogger());\n+        dialog.addWindowListener(new WindowEventLogger());\n+\n+        frame.setBounds(400, 0, 200, 200);\n+        frame.setVisible(true);\n+\n+        dialog.setBounds(400, 200, 200, 200);\n+        dialog.setVisible(true);\n+    }\n+\n+    private static class WindowEventLogger extends WindowAdapter {\n+        final AtomicInteger activatedCount = new AtomicInteger(0);\n+        final AtomicInteger deactivatedCount = new AtomicInteger(0);\n+\n+        public void windowActivated(WindowEvent e) {\n+            activatedCount.incrementAndGet();\n+            System.out.println(e);\n+        }\n+\n+        public void windowDeactivated(WindowEvent e) {\n+            deactivatedCount.incrementAndGet();\n+            System.out.println(e);\n+        }\n+\n+        public void resetCounters() {\n+            activatedCount.set(0);\n+            deactivatedCount.set(0);\n+        }\n+\n+        public static WindowEventLogger getFromWindow(Window window) {\n+            return (WindowEventLogger) Arrays\n+                    .stream(window.getWindowListeners())\n+                    .filter(listener -> listener instanceof WindowEventLogger)\n+                    .findFirst().get();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/WindowActivatedEventTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}