{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.awt.image.BufferedImage;\n@@ -32,0 +33,1 @@\n+import javax.imageio.ImageIO;\n@@ -102,7 +104,50 @@\n-                TKit.assertTrue(-1 == Files.mismatch(extractedExpectedIcon,\n-                        extractedActualIcon),\n-                        String.format(\n-                                \"Check icon file [%s] of %s launcher is a copy of source icon file [%s]\",\n-                                extractedActualIcon,\n-                                Optional.ofNullable(launcherName).orElse(\"main\"),\n-                                extractedExpectedIcon));\n+\n+                TKit.trace(String.format(\n+                        \"Check icon file [%s] of %s launcher is a copy of source icon file [%s]\",\n+                        extractedActualIcon,\n+                        Optional.ofNullable(launcherName).orElse(\"main\"),\n+                        extractedExpectedIcon));\n+\n+                if (Files.mismatch(extractedExpectedIcon, extractedActualIcon)\n+                        != -1) {\n+                    \/\/ On Windows11 .NET API extracting icons from executables\n+                    \/\/ produce slightly different output for the same icon.\n+                    \/\/ To workaround it, compare pixels of images and if the\n+                    \/\/ number of off pixels is below a threshold, assume\n+                    \/\/ equality.\n+                    BufferedImage expectedImg = ImageIO.read(\n+                            extractedExpectedIcon.toFile());\n+                    BufferedImage actualImg = ImageIO.read(\n+                            extractedActualIcon.toFile());\n+\n+                    int w = expectedImg.getWidth();\n+                    int h = expectedImg.getHeight();\n+\n+                    TKit.assertEquals(w, actualImg.getWidth(),\n+                            \"Check expected and actual icons have the same width\");\n+                    TKit.assertEquals(h, actualImg.getHeight(),\n+                            \"Check expected and actual icons have the same height\");\n+\n+                    int diffPixelCount = 0;\n+\n+                    for (int i = 0; i != w; ++i) {\n+                        for (int j = 0; j != h; ++j) {\n+                            int expectedRGB = expectedImg.getRGB(i, j);\n+                            int actualRGB = actualImg.getRGB(i, j);\n+\n+                            if (expectedRGB != actualRGB) {\n+                                TKit.trace(String.format(\n+                                        \"Images mismatch at [%d, %d] pixel\", i,\n+                                        j));\n+                                diffPixelCount++;\n+                            }\n+                        }\n+                    }\n+\n+                    double threshold = 0.1;\n+                    TKit.assertTrue(((double) diffPixelCount) \/ (w * h)\n+                            < threshold,\n+                            String.format(\n+                                    \"Check the number of mismatched pixels [%d] of [%d] is < [%f] threshold\",\n+                                    diffPixelCount, (w * h), threshold));\n+                }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":52,"deletions":7,"binary":false,"changes":59,"status":"modified"}]}