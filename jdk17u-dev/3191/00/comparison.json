{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @compile -source 1.7 -target 1.7 JdkUtils.java\n+ * @compile -source 1.8 -target 1.8 JdkUtils.java\n@@ -70,1 +70,0 @@\n-import jdk.test.lib.Platform;\n@@ -463,1 +462,1 @@\n-            return new int[] { 384, 571, 0 }; \/\/ 0 is no keysize specified\n+            return new int[] { 384, 521, 0 }; \/\/ 0 is no keysize specified\n@@ -720,1 +719,1 @@\n-                            expectedSigalg() + \", \" + signItem.certInfo.\n+                            expectedSigalg(signItem) + \", \" + signItem.certInfo.\n@@ -848,0 +847,1 @@\n+            if (line.contains(Test.WEAK_KEY_WARNING)) continue;\n@@ -1186,3 +1186,38 @@\n-            return (DEFAULT.equals(this.digestAlgorithm) ? this.digestAlgorithm\n-                    : \"SHA-256\").replace(\"-\", \"\") + \"with\" +\n-                    keyAlgorithm + (EC.equals(keyAlgorithm) ? \"DSA\" : \"\");\n+            return \"SHA256with\" + keyAlgorithm + (EC.equals(keyAlgorithm) ? \"DSA\" : \"\");\n+        }\n+\n+        private String expectedSigalg(SignItem signer) {\n+            if (!DEFAULT.equals(digestAlgorithm)) {\n+                return \"SHA256with\" + keyAlgorithm + (EC.equals(keyAlgorithm) ? \"DSA\" : \"\");\n+\n+            } else {\n+                \/\/ default algorithms documented for jarsigner here:\n+                \/\/ https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/specs\/man\/jarsigner.html#supported-algorithms\n+                \/\/ https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/specs\/man\/jarsigner.html#supported-algorithms\n+                int expectedKeySize = expectedKeySize();\n+                switch (keyAlgorithm) {\n+                    case DSA:\n+                        return \"SHA256withDSA\";\n+                    case RSA: {\n+                        if ((signer.jdkInfo.majorVersion >= 20 && expectedKeySize < 624)\n+                                || (signer.jdkInfo.majorVersion < 20 && expectedKeySize <= 3072)) {\n+                            return \"SHA256withRSA\";\n+                        } else if (expectedKeySize <= 7680) {\n+                            return \"SHA384withRSA\";\n+                        } else {\n+                            return \"SHA512withRSA\";\n+                        }\n+                    }\n+                    case EC: {\n+                        if (signer.jdkInfo.majorVersion < 20 && expectedKeySize < 384) {\n+                            return \"SHA256withECDSA\";\n+                        } else if (expectedKeySize < 512) {\n+                            return \"SHA384withECDSA\";\n+                        } else {\n+                            return \"SHA512withECDSA\";\n+                        }\n+                    }\n+                    default:\n+                        throw new RuntimeException(\"Unsupported\/expected key algorithm: \" + keyAlgorithm);\n+                }\n+            }\n@@ -1195,1 +1230,3 @@\n-            if (RSA.equals(keyAlgorithm) || DSA.equals(keyAlgorithm)) {\n+            if (RSA.equals(keyAlgorithm)) {\n+                return jdkInfo.majorVersion >= 20 ? 3072 : 2048;\n+            } else if (DSA.equals(keyAlgorithm)) {\n@@ -1198,1 +1235,1 @@\n-                return 256;\n+                return jdkInfo.majorVersion >= 20 ? 384 : 256;\n@@ -1394,1 +1431,3 @@\n-            return digestAlgorithm != null ? digestAlgorithm : \"SHA-256\";\n+            return digestAlgorithm != null\n+                    ? digestAlgorithm\n+                    : jdkInfo.majorVersion >= 20 ? \"SHA-384\" : \"SHA-256\";\n@@ -1543,1 +1582,1 @@\n-        s_values_add.accept(i -> i.certInfo.expectedSigalg());\n+        s_values_add.accept(i -> i.certInfo.expectedSigalg(i));\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java","additions":51,"deletions":12,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -151,0 +151,3 @@\n+    static final String WEAK_KEY_WARNING\n+            = \"This key size will be disabled in a future update.\";\n+\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/Test.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}