{"files":[{"patch":"@@ -423,0 +423,4 @@\n+    \/* Remembered Exception, we will throw it again if somebody\n+       calls getOutputStream after disconnect  or error *\/\n+    private Exception rememberedExceptionOut = null;\n+\n@@ -1452,0 +1456,8 @@\n+            if (rememberedExceptionOut != null) {\n+                if (rememberedExceptionOut instanceof RuntimeException) {\n+                    throw new RuntimeException(rememberedExceptionOut);\n+                } else {\n+                    throw getChainedException((IOException) rememberedExceptionOut);\n+                }\n+            }\n+\n@@ -1514,0 +1526,1 @@\n+            rememberedExceptionOut = e;\n@@ -1517,0 +1530,1 @@\n+            rememberedExceptionOut = e;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,254 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8314978\n+ * @summary Multiple server call from connection failing with expect100 in\n+ * getOutputStream\n+ * @library \/test\/lib\n+ * @run junit\/othervm HttpURLConnectionExpect100Test\n+ *\/\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.net.HttpURLConnection;\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class HttpURLConnectionExpect100Test {\n+\n+    private HttpServer server;\n+    private int port;\n+    static final String RESPONSE = \"This is default response.\";\n+\n+    @BeforeAll\n+    void setup() throws Exception {\n+        server = HttpServer.create();\n+        port = server.getPort();\n+    }\n+\n+    @AfterAll\n+    void teardown() throws Exception {\n+        server.close();\n+    }\n+\n+    @Test\n+    public void expect100ContinueHitCountTest() throws Exception {\n+        server.resetHitCount();\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .toURL();\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setRequestMethod(\"PUT\");\n+        \/\/send expect continue\n+        conn.setRequestProperty(\"Expect\", \"100-continue\");\n+        sendRequest(conn);\n+        getHeaderField(conn);\n+        assertEquals(1, server.getServerHitCount());\n+        \/\/ Server rejects the expect 100-continue request with 417 response\n+        assertEquals(417, conn.getResponseCode());\n+    }\n+\n+    @Test\n+    public void defaultRequestHitCountTest() throws Exception {\n+        server.resetHitCount();\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .toURL();\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setRequestMethod(\"PUT\");\n+        sendRequest(conn);\n+        getHeaderField(conn);\n+        assertEquals(1, server.getServerHitCount());\n+        assertEquals(200, conn.getResponseCode());\n+        try ( InputStream in = conn.getInputStream()) {\n+            byte[] data = in.readAllBytes();\n+            assertEquals(RESPONSE.length(), data.length);\n+        }\n+    }\n+\n+    private void sendRequest(final HttpURLConnection conn) throws Exception {\n+        conn.setDoOutput(true);\n+        conn.setFixedLengthStreamingMode(10);\n+        byte[] payload = new byte[10];\n+        try ( OutputStream os = conn.getOutputStream()) {\n+            os.write(payload);\n+            os.flush();\n+        } catch (IOException e) {\n+            \/\/ intentional, server will reject the expect 100\n+        }\n+    }\n+\n+    private void getHeaderField(final HttpURLConnection conn) {\n+        \/\/ Call getHeaderFiels in loop, this should not hit server.\n+        for (int i = 0; i < 5; i++) {\n+            System.out.println(\"Getting: field\" + i);\n+            conn.getHeaderField(\"field\" + i);\n+        }\n+    }\n+\n+    static class HttpServer extends Thread {\n+\n+        private final ServerSocket ss;\n+        private static HttpServer inst;\n+        private volatile int hitCount;\n+        private volatile boolean isRunning;\n+        private final int port;\n+\n+        private HttpServer() throws IOException {\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            ss = new ServerSocket();\n+            ss.bind(new InetSocketAddress(loopback, 0));\n+            port = ss.getLocalPort();\n+            isRunning = true;\n+        }\n+\n+        static HttpServer create() throws IOException {\n+            if (inst != null) {\n+                return inst;\n+            } else {\n+                inst = new HttpServer();\n+                inst.setDaemon(true);\n+                inst.start();\n+                return inst;\n+            }\n+        }\n+\n+        int getServerHitCount() {\n+            return hitCount;\n+        }\n+\n+        void resetHitCount() {\n+            hitCount = 0;\n+        }\n+\n+        int getPort() {\n+            return port;\n+        }\n+\n+        void close() {\n+            isRunning = false;\n+            if (ss != null && !ss.isClosed()) {\n+                try {\n+                    ss.close();\n+                } catch (IOException ex) {\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void run() {\n+            Socket client;\n+            try {\n+                while (isRunning) {\n+                    client = ss.accept();\n+                    System.out.println(client.getRemoteSocketAddress().toString());\n+                    hitCount++;\n+                    handleConnection(client);\n+                }\n+            } catch (IOException ex) {\n+                \/\/ throw exception only if isRunning is true\n+                if (isRunning) {\n+                    throw new RuntimeException(ex);\n+                }\n+            } finally {\n+                if (ss != null && !ss.isClosed()) {\n+                    try {\n+                        ss.close();\n+                    } catch (IOException ex) {\n+                        \/\/ignore\n+                    }\n+                }\n+            }\n+        }\n+\n+        private void handleConnection(Socket client) throws IOException {\n+            try ( BufferedReader in = new BufferedReader(\n+                new InputStreamReader(client.getInputStream()));\n+                PrintStream out = new PrintStream(client.getOutputStream())) {\n+                handle_connection(in, out);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+            } finally {\n+                try {\n+                    client.close();\n+                } catch (IOException e) {\n+                }\n+            }\n+        }\n+\n+        private void handle_connection(BufferedReader in, PrintStream out)\n+                throws IOException, InterruptedException {\n+            StringBuilder clientRequest = new StringBuilder();\n+            String line = null;\n+            do {\n+                line = in.readLine();\n+                clientRequest.append(line);\n+            } while (line != null && line.length() != 0);\n+            if (clientRequest.toString().contains(\"100-continue\")) {\n+                rejectExpect100Continue(out);\n+            } else {\n+                defaultResponse(out);\n+            }\n+        }\n+\n+        private void rejectExpect100Continue(PrintStream out) {\n+            out.print(\"HTTP\/1.1 417 Expectation Failed\\r\\n\");\n+            out.print(\"Server: Test-Server\\r\\n\");\n+            out.print(\"Connection: close\\r\\n\");\n+            out.print(\"Content-Length: 0\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.flush();\n+        }\n+\n+        private void defaultResponse(PrintStream out) {\n+            \/\/ send the 200 OK\n+            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.print(\"Server: Test-Server\\r\\n\");\n+            out.print(\"Connection: close\\r\\n\");\n+            out.print(\"Content-Length: \" + RESPONSE.length() + \"\\r\\n\\r\\n\");\n+            out.print(RESPONSE);\n+            out.flush();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpURLConnectionExpect100Test.java","additions":254,"deletions":0,"binary":false,"changes":254,"status":"added"}]}