{"files":[{"patch":"@@ -91,3 +91,0 @@\n-  \/\/ Node index of current thread.\n-  inline uint current_node_index() const;\n-\n@@ -113,0 +110,3 @@\n+  \/\/ Node index of current thread.\n+  inline uint current_node_index() const;\n+\n@@ -116,1 +116,2 @@\n-  inline HeapWord* attempt_allocation(size_t min_word_size,\n+  inline HeapWord* attempt_allocation(uint node_index,\n+                                      size_t min_word_size,\n@@ -122,1 +123,1 @@\n-  inline HeapWord* attempt_allocation_using_new_region(size_t word_size);\n+  inline HeapWord* attempt_allocation_using_new_region(uint node_index, size_t word_size);\n@@ -128,1 +129,1 @@\n-  inline HeapWord* attempt_allocation_force(size_t word_size);\n+  inline HeapWord* attempt_allocation_force(uint node_index, size_t word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-inline HeapWord* G1Allocator::attempt_allocation(size_t min_word_size,\n+inline HeapWord* G1Allocator::attempt_allocation(uint node_index,\n+                                                 size_t min_word_size,\n@@ -55,1 +56,0 @@\n-  uint node_index = current_node_index();\n@@ -65,2 +65,2 @@\n-inline HeapWord* G1Allocator::attempt_allocation_using_new_region(size_t word_size) {\n-  uint node_index = current_node_index();\n+inline HeapWord* G1Allocator::attempt_allocation_using_new_region(uint node_index, size_t word_size) {\n+\n@@ -84,2 +84,1 @@\n-inline HeapWord* G1Allocator::attempt_allocation_force(size_t word_size) {\n-  uint node_index = current_node_index();\n+inline HeapWord* G1Allocator::attempt_allocation_force(uint node_index, size_t word_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-HeapWord* G1CollectedHeap::attempt_allocation_slow(size_t word_size) {\n+HeapWord* G1CollectedHeap::attempt_allocation_slow(uint node_index, size_t word_size) {\n@@ -406,1 +406,1 @@\n-      result = _allocator->attempt_allocation(word_size, word_size, &actual_size);\n+      result = _allocator->attempt_allocation(node_index, word_size, word_size, &actual_size);\n@@ -415,1 +415,1 @@\n-        result = _allocator->attempt_allocation_using_new_region(word_size);\n+        result = _allocator->attempt_allocation_using_new_region(node_index, word_size);\n@@ -426,1 +426,1 @@\n-          result = _allocator->attempt_allocation_force(word_size);\n+          result = _allocator->attempt_allocation_force(node_index, word_size);\n@@ -486,1 +486,1 @@\n-    result = _allocator->attempt_allocation(word_size, word_size, &dummy);\n+    result = _allocator->attempt_allocation(node_index, word_size, word_size, &dummy);\n@@ -714,1 +714,4 @@\n-  HeapWord* result = _allocator->attempt_allocation(min_word_size, desired_word_size, actual_word_size);\n+  \/\/ Fix NUMA node association for the duration of this allocation\n+  const uint node_index = _allocator->current_node_index();\n+\n+  HeapWord* result = _allocator->attempt_allocation(node_index, min_word_size, desired_word_size, actual_word_size);\n@@ -718,1 +721,1 @@\n-    result = attempt_allocation_slow(desired_word_size);\n+    result = attempt_allocation_slow(node_index, desired_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-  HeapWord* attempt_allocation_slow(size_t word_size);\n+  HeapWord* attempt_allocation_slow(uint node_index, size_t word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}