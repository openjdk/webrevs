{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.module.ModuleFinder;\n+import java.lang.module.ModuleReader;\n+import java.lang.module.ModuleReference;\n@@ -44,0 +50,24 @@\n+    static final List<String> VM_OPTIONS = getInitialOptions();\n+\n+    \/*\n+     * Read jdk\/internal\/vm\/options resource from the runtime image.\n+     * If present, the runtime image was created with jlink --add-options and\n+     * the java launcher launches the application as if\n+     *   $ java @options <app>\n+     * The VM options listed in the jdk\/internal\/vm\/options resource file\n+     * are passed to the VM.\n+     *\/\n+    static List<String> getInitialOptions() {\n+        ModuleReference mref = ModuleFinder.ofSystem().find(\"java.base\").orElseThrow();\n+        try (ModuleReader reader = mref.open()) {\n+            InputStream in = reader.open(\"jdk\/internal\/vm\/options\").orElse(null);\n+            if (in != null) {\n+                \/\/ support the simplest form for now: whitespace-separated\n+                return List.of(new String(in.readAllBytes()).split(\"\\s\"));\n+            } else {\n+                return List.of();\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n@@ -86,2 +116,1 @@\n-        \/\/ $ java <runtime-arguments> -classpath <cpath> RuntimeArguments <expected>\n-\n+        \/\/ $ java <args> -classpath <cpath> RuntimeArguments <vm_options> <expected>\n@@ -92,1 +121,4 @@\n-            Stream.concat(options, expected.stream())\n+            \/\/ The runtime image may be created with jlink --add-options\n+            \/\/ The initial VM options will be included in the result\n+            \/\/ returned by VM.getRuntimeArguments()\n+            Stream.concat(options, Stream.concat(VM_OPTIONS.stream(), expected.stream()))\n","filename":"test\/jdk\/jdk\/internal\/misc\/VM\/RuntimeArguments.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"}]}