{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import java.util.Objects;\n@@ -639,1 +638,6 @@\n-        String[] as = Objects.requireNonNullElse(aliases, zeroAliases);\n+        String[] as =\n+            aliases == null ?\n+                zeroAliases :\n+                VM.isSystemDomainLoader(getClass().getClassLoader()) ?\n+                    aliases :\n+                    Arrays.copyOf(aliases, aliases.length);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8319817\n+ * @summary Check that aliases cannot be mutated\n+ * @run junit AliasesCopy\n+ *\/\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertIterableEquals;\n+\n+public class AliasesCopy {\n+    private static final Set<String> ALIASES_SET = Set.of(\"foo-alias\");\n+    private static final String[] ALIASES_ARRAY = ALIASES_SET.toArray(String[]::new);\n+\n+    @Test\n+    public void aliasesCopy() {\n+        final FooCharset cs = new FooCharset(ALIASES_ARRAY);\n+        ALIASES_ARRAY[0] = \"bar-alias\";\n+        assertIterableEquals(ALIASES_SET, cs.aliases());\n+    }\n+\n+    private static final class FooCharset extends Charset {\n+        private FooCharset(String[] aliases) {\n+            super(\"foo\", aliases);\n+        }\n+\n+        @Override\n+        public CharsetEncoder newEncoder() {\n+            throw new RuntimeException(\"not implemented\");\n+        }\n+\n+        @Override\n+        public CharsetDecoder newDecoder() {\n+            throw new RuntimeException(\"not implemented\");\n+        }\n+\n+        @Override\n+        public boolean contains(Charset cs) {\n+            throw new RuntimeException(\"not implemented\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/AliasesCopy.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}