{"files":[{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *  @test\n+ *  @bug 4817630\n+ *  @summary AncestorEvent ancestorAdded thrown at JFrame creation, not at show()\n+ *  @key headful\n+ *  @run main bug4817630\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.AncestorEvent;\n+import javax.swing.event.AncestorListener;\n+\n+public class bug4817630 {\n+\n+    JFrame fr;\n+\n+    volatile boolean ancestorAdded = false;\n+    volatile boolean passed = true;\n+\n+    public void init() {\n+        fr = new JFrame(\"bug4817630\");\n+        JLabel label = new JLabel(\"Label\");\n+\n+        label.addAncestorListener(new AncestorListener() {\n+                public void ancestorAdded(AncestorEvent e) {\n+                    if (!fr.isVisible()) {\n+                        setPassed(false);\n+                    }\n+                    synchronized (bug4817630.this) {\n+                        ancestorAdded = true;\n+                        bug4817630.this.notifyAll();\n+                    }\n+                }\n+                public void ancestorRemoved(AncestorEvent e) {\n+                }\n+                public void ancestorMoved(AncestorEvent e) {\n+                }\n+            });\n+\n+        fr.setLocationRelativeTo(null);\n+        fr.getContentPane().add(label);\n+        fr.pack();\n+        fr.setVisible(true);\n+    }\n+\n+    public void start() {\n+        try {\n+            synchronized (bug4817630.this) {\n+                while (!ancestorAdded) {\n+                    bug4817630.this.wait();\n+                }\n+            }\n+        } catch(Exception e) {\n+            throw new RuntimeException(\"Test failed because of \"\n+                    + e.getLocalizedMessage());\n+        }\n+    }\n+\n+    public void destroy() {\n+        if (fr != null) {\n+            fr.setVisible(false);\n+            fr.dispose();\n+        }\n+        if (!isPassed()) {\n+            throw new RuntimeException(\"ancestorAdded() method shouldn't be \"\n+                    + \"called before the frame is shown.\");\n+        }\n+    }\n+\n+    synchronized void setPassed(boolean passed) {\n+        this.passed = passed;\n+    }\n+\n+    synchronized boolean isPassed() {\n+        return passed;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        bug4817630 test = new bug4817630();\n+        try {\n+            SwingUtilities.invokeAndWait(test::init);\n+            test.start();\n+        } finally {\n+            SwingUtilities.invokeAndWait(test::destroy);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AncestorNotifier\/4817630\/bug4817630.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4191948\n+ * @summary BoxLayout doesn't ignore invisible components\n+ * @key headful\n+ * @run main bug4191948\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4191948 {\n+    JFrame frame;\n+    JPanel p;\n+    JButton foo1;\n+    JButton foo2;\n+    JButton foo3;\n+\n+    public void init() {\n+        frame = new JFrame(\"bug4191948\");\n+        p = new JPanel();\n+        p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));\n+        foo1 = (JButton)p.add(new JButton(\"Foo1\"));\n+        foo2 = (JButton)p.add(new JButton(\"Foo2\"));\n+        foo3 = (JButton)p.add(new JButton(\"Foo3\"));\n+\n+        foo2.setVisible(false);\n+        frame.setLocationRelativeTo(null);\n+        frame.setLayout(new BorderLayout());\n+        frame.add(p, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() {\n+        try {\n+            int totalWidth = p.getPreferredSize().width;\n+            int foo1Width = foo1.getPreferredSize().width;\n+            int foo2Width = foo2.getPreferredSize().width;\n+            int foo3Width = foo3.getPreferredSize().width;\n+            if (totalWidth >= (foo1Width + foo2Width + foo3Width)) {\n+                throw new RuntimeException(\"Panel is too wide\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.setVisible(false);\n+                frame.dispose();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        bug4191948 test = new bug4191948();\n+        SwingUtilities.invokeAndWait(test::init);\n+        SwingUtilities.invokeAndWait(test::start);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/BoxLayout\/4191948\/bug4191948.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4248723\n+ * @summary Tests that ComponentInputMap doesn't throw NPE when deserializing\n+ * @run main bug4248723\n+ *\/\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import javax.swing.ComponentInputMap;\n+import javax.swing.JButton;\n+import javax.swing.KeyStroke;\n+\n+public class bug4248723 {\n+    public static Object serializeAndDeserialize(Object toWrite)\n+            throws ClassNotFoundException, IOException {\n+        ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n+        ObjectOutputStream p = new ObjectOutputStream(ostream);\n+        p.writeObject(toWrite);\n+        p.flush();\n+        byte[] data = ostream.toByteArray();\n+        ostream.close();\n+\n+        ByteArrayInputStream istream = new ByteArrayInputStream(data);\n+        ObjectInputStream q = new ObjectInputStream(istream);\n+        Object retValue = q.readObject();\n+        istream.close();\n+        return retValue;\n+    }\n+\n+    public static void main(String[] argv) {\n+        ComponentInputMap cim = new ComponentInputMap(new JButton());\n+        cim.put(KeyStroke.getKeyStroke(\n+                KeyEvent.VK_B, InputEvent.CTRL_DOWN_MASK), \"A\");\n+        try {\n+            cim = (ComponentInputMap)serializeAndDeserialize(cim);\n+        } catch (ClassNotFoundException|IOException ignore) {\n+            \/\/ Should not cause test to fail so silently ignore these\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ComponentInputMap\/4248723\/bug4248723.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4297953\n+ * @summary Tests that DefaultBoundedRangeModel doesn't zero out the\n+ *          extent value when maximum changes\n+ * @run main bug4297953\n+ *\/\n+\n+import javax.swing.JScrollBar;\n+\n+public class bug4297953 {\n+    public static void main(String[] args)  {\n+        JScrollBar sb = new JScrollBar(JScrollBar.HORIZONTAL, 90, 10, 0, 100);\n+        sb.setMaximum(80);\n+        if (sb.getVisibleAmount() != 10) {\n+            throw new RuntimeException(\"Failed: extent is \" + sb.getVisibleAmount());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DefaultBoundedRangeModel\/4297953\/bug4297953.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4097723\n+ * @summary Tests that method DefaultButtonModel.getGroup() exists\n+ * @run main bug4097723\n+ *\/\n+\n+import javax.swing.ButtonGroup;\n+import javax.swing.DefaultButtonModel;\n+\n+public class bug4097723 {\n+    public static void main(String[] argv) {\n+        DefaultButtonModel dbm = new DefaultButtonModel();\n+        ButtonGroup group = new ButtonGroup();\n+        dbm.setGroup(group);\n+        ButtonGroup g = dbm.getGroup();\n+        if (g != group) {\n+            throw new RuntimeException(\"Failure: getGroup() returned wrong thing\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DefaultButtonModel\/4097723\/bug4097723.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}