{"files":[{"patch":"@@ -102,3 +102,4 @@\n-      jlong lo = (jint)Bytes::get_Java_u4(aligned_bcp + 1*jintSize);\n-      jlong hi = (jint)Bytes::get_Java_u4(aligned_bcp + 2*jintSize);\n-      jlong len = (aligned_bcp - bcp) + (3 + hi - lo + 1)*jintSize;\n+      \/\/ Promote calculation to 64 bits to do range checks, used by the verifier.\n+      int64_t lo = (int)Bytes::get_Java_u4(aligned_bcp + 1*jintSize);\n+      int64_t hi = (int)Bytes::get_Java_u4(aligned_bcp + 2*jintSize);\n+      int64_t len = (aligned_bcp - bcp) + (3 + hi - lo + 1)*jintSize;\n@@ -107,1 +108,1 @@\n-      return (len > 0 && len == (int)len) ? len : -1;\n+      return (len > 0 && len == (int)len) ? (int)len : -1;\n@@ -117,2 +118,3 @@\n-      jlong npairs = (jint)Bytes::get_Java_u4(aligned_bcp + jintSize);\n-      jlong len = (aligned_bcp - bcp) + (2 + 2*npairs)*jintSize;\n+      \/\/ Promote calculation to 64 bits to do range checks, used by the verifier.\n+      int64_t npairs = (int)Bytes::get_Java_u4(aligned_bcp + jintSize);\n+      int64_t len = (aligned_bcp - bcp) + (2 + 2*npairs)*jintSize;\n@@ -121,1 +123,1 @@\n-      return (len > 0 && len == (int)len) ? len : -1;\n+      return (len > 0 && len == (int)len) ? (int)len : -1;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ This test generates a npairs that overflows int so lookupswitch is an invalid bytecode\n+\n+public class LookupSwitchp1 version 50:0 {\n+\n+public static Method runLookup:\"()V\"\n+\tstack 4 locals 3\n+{\n+    iconst_0;\n+    bytecode 171; \/\/ lookupswitch\n+    bytecode 0,0; \/\/ padding\n+    bytecode 0,0,0,16; \/\/ default target == L17\n+    bytecode 0x80,0,0,0; \/\/ 0x80000000 npairs\n+    bytecode 0,0,0,0;    \/\/ one match-offset pair\n+    bytecode 0,0,0,16;   \/\/ also goes to target\n+    \/\/ incomplete npair table\n+  L17:\n+    iconst_0;\n+    ireturn;\n+}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/LookupSwitchp1.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ This test generates (high - lo) that overflows int so tableswitch is an invalid bytecode\n+\/\/ If treated as unsigned lo > high but the tableswitch operands are signed int.\n+\n+public class TableSwitchp1 version 50:0 {\n+\n+public static Method runTable:\"()V\"\n+\tstack 4 locals 3\n+{\n+    iconst_0;\n+    bytecode 170; \/\/ tableswitch\n+    bytecode 0,0; \/\/ padding\n+    bytecode 0,0,0,15; \/\/ default target == L16\n+    bytecode 0x80,0,0,0; \/\/ 0x80000000 low\n+    bytecode 0x7F,0xFF,0xFF,0xFF; \/\/ 0x7fffffff high\n+    \/\/ illegal empty table\n+  L16:\n+    iconst_0;\n+    ireturn;\n+}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TableSwitchp1.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/*\n+ * @test TestTableSwitch\n+ * @bug 8311583\n+ * @library \/test\/lib\n+ * @compile TableSwitchp1.jasm LookupSwitchp1.jasm\n+ * @run driver TestTableSwitch\n+ *\/\n+\n+public class TestTableSwitch {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            if (args[0].equals(\"runTable\")) {\n+                TableSwitchp1.runTable();\n+            } else {  \/\/ if (args[0].equals(\"runLookup\"))\n+                LookupSwitchp1.runLookup();\n+            }\n+        } else {\n+           ProcessBuilder pb = ProcessTools.createTestJvm(\"TestTableSwitch\", \"runTable\");\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldContain(\"java.lang.VerifyError: Bad instruction\");\n+           output.shouldHaveExitValue(1);\n+\n+           pb = ProcessTools.createTestJvm(\"TestTableSwitch\", \"runLookup\");\n+           output = new OutputAnalyzer(pb.start());\n+           output.shouldContain(\"java.lang.VerifyError: Bad instruction\");\n+           output.shouldHaveExitValue(1);\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestTableSwitch.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}