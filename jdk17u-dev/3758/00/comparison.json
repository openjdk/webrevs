{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+ * @summary InetAddress.isReachable is returning false for InetAdress 0.0.0.0 and ::0\n+ * @requires os.family != \"windows\"\n@@ -31,2 +33,0 @@\n- * @summary InetAddress.isReachable is returning false\n- *          for InetAdress 0.0.0.0 and ::0\n@@ -37,1 +37,0 @@\n-import java.net.Inet6Address;\n@@ -39,1 +38,0 @@\n-import java.net.NetworkInterface;\n@@ -41,2 +39,0 @@\n-import java.util.Collections;\n-import java.util.Iterator;\n@@ -48,3 +44,0 @@\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            return;\n-        }\n","filename":"test\/jdk\/java\/net\/Inet4Address\/PingThis.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/test\/lib\n@@ -29,0 +28,2 @@\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n@@ -36,7 +37,0 @@\n-    private static String osname;\n-\n-    static boolean isWindows() {\n-        if (osname == null)\n-            osname = System.getProperty(\"os.name\");\n-        return osname.contains(\"Windows\");\n-    }\n@@ -45,0 +39,1 @@\n+\n@@ -46,4 +41,0 @@\n-        if (isWindows()) {\n-            System.out.println(\"The test only run on non-Windows OS. Bye.\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/NoLoopbackPackets.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,3 @@\n- * @requires os.family == \"linux\"\n+ * @requires os.family == \"linux\" & !(os.version ~= \"3\\\\.10\\\\.0.*\")\n+ * @comment This test should only be run on Linux.\n+ *          The behavior under test is known NOT to work on Linux 3.10.0* kernels.\n@@ -151,12 +153,0 @@\n-        String os = System.getProperty(\"os.name\");\n-\n-        if (!os.equals(\"Linux\")) {\n-            throw new SkippedException(\"This test should be run only on Linux\");\n-        } else {\n-            String osVersion = System.getProperty(\"os.version\");\n-            String prefix = \"3.10.0\";\n-            if (osVersion.startsWith(prefix)) {\n-                throw new SkippedException(\n-                        String.format(\"The behavior under test is known NOT to work on '%s' kernels\", prefix));\n-            }\n-        }\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/PromiscuousIPv6.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+ * @summary Re-test IPv6 (and specifically MulticastSocket) with latest Linux & USAGI code\n+ * @requires os.family != \"windows\"\n@@ -30,1 +32,0 @@\n- * @summary Re-test IPv6 (and specifically MulticastSocket) with latest Linux & USAGI code\n@@ -40,1 +41,1 @@\n-    private static String osname;\n+\n@@ -53,6 +54,0 @@\n-    static boolean isWindows() {\n-        if (osname == null)\n-            osname = System.getProperty(\"os.name\");\n-        return osname.contains(\"Windows\");\n-    }\n-\n@@ -86,4 +81,0 @@\n-        if (isWindows()) {\n-            System.out.println(\"The test only run on non-Windows OS. Bye.\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetOutgoingIf.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires os.family == \"mac\"\n@@ -44,4 +45,0 @@\n-        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n-            System.out.println(\"Test only run on MAC. Exiting.\");\n-            return;\n-        }\n","filename":"test\/jdk\/java\/net\/ServerSocket\/AnotherSelectFdsLimit.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires os.family == \"mac\"\n@@ -38,1 +39,0 @@\n-import java.io.InputStream;\n@@ -75,6 +75,0 @@\n-        \/\/The bug 8021820 is a Mac specific and because of that test will pass on all\n-        \/\/other platforms\n-        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n-           return;\n-        }\n-\n","filename":"test\/jdk\/java\/net\/ServerSocket\/SelectFdsLimit.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}