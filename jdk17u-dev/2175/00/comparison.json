{"files":[{"patch":"@@ -102,0 +102,2 @@\n+  # nio tests' libCreationTimeHelper native needs -ldl linker flag\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libCreationTimeHelper := -ldl\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,6 @@\n-import java.nio.file.attribute.*;\n-import java.util.concurrent.TimeUnit;\n-import java.util.Set;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.GroupPrincipal;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n@@ -32,0 +35,2 @@\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n@@ -55,0 +60,1 @@\n+    private long    st_birthtime_nsec;\n@@ -148,1 +154,1 @@\n-            return FileTime.from(st_birthtime_sec, TimeUnit.SECONDS);\n+            return toFileTime(st_birthtime_sec, st_birthtime_nsec);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include <sys\/sysmacros.h> \/\/ makedev macros\n@@ -74,0 +75,100 @@\n+#if defined(__linux__)\n+\/\/ Account for the case where we compile on a system without statx\n+\/\/ support. We still want to ensure we can call statx at runtime\n+\/\/ if the runtime glibc version supports it (>= 2.28). We do this\n+\/\/ by defining binary compatible statx structs in this file and\n+\/\/ not relying on included headers.\n+\n+#ifndef __GLIBC__\n+\/\/ Alpine doesn't know these types, define them\n+typedef unsigned int       __uint32_t;\n+typedef unsigned short     __uint16_t;\n+typedef unsigned long int  __uint64_t;\n+#endif\n+\n+\/*\n+ * Timestamp structure for the timestamps in struct statx.\n+ *\/\n+struct my_statx_timestamp {\n+        int64_t   tv_sec;\n+        __uint32_t  tv_nsec;\n+        int32_t   __reserved;\n+};\n+\n+\/*\n+ * struct statx used by statx system call on >= glibc 2.28\n+ * systems\n+ *\/\n+struct my_statx\n+{\n+  __uint32_t stx_mask;\n+  __uint32_t stx_blksize;\n+  __uint64_t stx_attributes;\n+  __uint32_t stx_nlink;\n+  __uint32_t stx_uid;\n+  __uint32_t stx_gid;\n+  __uint16_t stx_mode;\n+  __uint16_t __statx_pad1[1];\n+  __uint64_t stx_ino;\n+  __uint64_t stx_size;\n+  __uint64_t stx_blocks;\n+  __uint64_t stx_attributes_mask;\n+  struct my_statx_timestamp stx_atime;\n+  struct my_statx_timestamp stx_btime;\n+  struct my_statx_timestamp stx_ctime;\n+  struct my_statx_timestamp stx_mtime;\n+  __uint32_t stx_rdev_major;\n+  __uint32_t stx_rdev_minor;\n+  __uint32_t stx_dev_major;\n+  __uint32_t stx_dev_minor;\n+  __uint64_t __statx_pad2[14];\n+};\n+\n+\/\/ statx masks, flags, constants\n+\n+#ifndef AT_SYMLINK_NOFOLLOW\n+#define AT_SYMLINK_NOFOLLOW 0x100\n+#endif\n+\n+#ifndef AT_STATX_SYNC_AS_STAT\n+#define AT_STATX_SYNC_AS_STAT 0x0000\n+#endif\n+\n+#ifndef AT_EMPTY_PATH\n+#define AT_EMPTY_PATH 0x1000\n+#endif\n+\n+#ifndef STATX_BASIC_STATS\n+#define STATX_BASIC_STATS 0x000007ffU\n+#endif\n+\n+#ifndef STATX_BTIME\n+#define STATX_BTIME 0x00000800U\n+#endif\n+\n+#ifndef STATX_TYPE\n+#define STATX_TYPE 0x00000001U\n+#endif\n+\n+#ifndef STATX_MODE\n+#define STATX_MODE 0x00000002U\n+#endif\n+\n+#ifndef STATX_ALL\n+#define STATX_ALL (STATX_BTIME | STATX_BASIC_STATS)\n+#endif\n+\n+#ifndef AT_FDCWD\n+#define AT_FDCWD -100\n+#endif\n+\n+#ifndef RTLD_DEFAULT\n+#define RTLD_DEFAULT RTLD_LOCAL\n+#endif\n+\n+#define NO_FOLLOW_SYMLINK 1\n+#define FOLLOW_SYMLINK 0\n+\n+#endif \/\/ __linux__\n+\n+\n@@ -120,1 +221,1 @@\n-#ifdef _DARWIN_FEATURE_64_BIT_INODE\n+#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(__linux__)\n@@ -123,0 +224,3 @@\n+#if defined(__linux__) \/\/ Linux has nsec granularity if supported\n+static jfieldID attrs_st_birthtime_nsec;\n+#endif\n@@ -146,0 +250,4 @@\n+#if defined(__linux__)\n+typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n+                       unsigned int mask, struct my_statx *restrict statxbuf);\n+#endif\n@@ -155,0 +263,3 @@\n+#if defined(__linux__)\n+static statx_func* my_statx_func = NULL;\n+#endif\n@@ -180,0 +291,7 @@\n+#if defined(__linux__)\n+static int statx_wrapper(int dirfd, const char *restrict pathname, int flags,\n+                         unsigned int mask, struct my_statx *restrict statxbuf) {\n+    return (*my_statx_func)(dirfd, pathname, flags, mask, statxbuf);\n+}\n+#endif\n+\n@@ -232,1 +350,1 @@\n-#ifdef _DARWIN_FEATURE_64_BIT_INODE\n+#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(__linux__)\n@@ -236,0 +354,4 @@\n+#if defined (__linux__) \/\/ Linux has nsec granularity\n+    attrs_st_birthtime_nsec = (*env)->GetFieldID(env, clazz, \"st_birthtime_nsec\", \"J\");\n+    CHECK_NULL_RETURN(attrs_st_birthtime_nsec, 0);\n+#endif\n@@ -317,0 +439,6 @@\n+#if defined(__linux__)\n+    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n+    if (my_statx_func != NULL) {\n+        capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_BIRTHTIME;\n+    }\n+#endif\n@@ -493,0 +621,27 @@\n+#if defined(__linux__)\n+\/**\n+ * Copy statx members into sun.nio.fs.UnixFileAttributes\n+ *\/\n+static void copy_statx_attributes(JNIEnv* env, struct my_statx* buf, jobject attrs) {\n+    (*env)->SetIntField(env, attrs, attrs_st_mode, (jint)buf->stx_mode);\n+    (*env)->SetLongField(env, attrs, attrs_st_ino, (jlong)buf->stx_ino);\n+    (*env)->SetIntField(env, attrs, attrs_st_nlink, (jint)buf->stx_nlink);\n+    (*env)->SetIntField(env, attrs, attrs_st_uid, (jint)buf->stx_uid);\n+    (*env)->SetIntField(env, attrs, attrs_st_gid, (jint)buf->stx_gid);\n+    (*env)->SetLongField(env, attrs, attrs_st_size, (jlong)buf->stx_size);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_sec, (jlong)buf->stx_atime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_sec, (jlong)buf->stx_mtime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_sec, (jlong)buf->stx_ctime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)buf->stx_btime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_nsec, (jlong)buf->stx_btime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_nsec, (jlong)buf->stx_atime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_nsec, (jlong)buf->stx_mtime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_nsec, (jlong)buf->stx_ctime.tv_nsec);\n+    \/\/ convert statx major:minor to dev_t using makedev\n+    dev_t dev = makedev(buf->stx_dev_major, buf->stx_dev_minor);\n+    dev_t rdev = makedev(buf->stx_rdev_major, buf->stx_rdev_minor);\n+    (*env)->SetLongField(env, attrs, attrs_st_dev, (jlong)dev);\n+    (*env)->SetLongField(env, attrs, attrs_st_rdev, (jlong)rdev);\n+}\n+#endif\n+\n@@ -496,1 +651,1 @@\n-static void prepAttributes(JNIEnv* env, struct stat64* buf, jobject attrs) {\n+static void copy_stat64_attributes(JNIEnv* env, struct stat64* buf, jobject attrs) {\n@@ -511,0 +666,1 @@\n+    \/\/ rely on default value of 0 for st_birthtime_nsec field on Darwin\n@@ -531,1 +687,17 @@\n-\n+#if defined(__linux__)\n+    struct my_statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n+        \/\/ statx was available, so return now\n+        return;\n+    }\n+#endif\n@@ -536,1 +708,1 @@\n-        prepAttributes(env, &buf, attrs);\n+        copy_stat64_attributes(env, &buf, attrs);\n@@ -546,0 +718,15 @@\n+#if defined(__linux__)\n+    struct my_statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_TYPE | STATX_MODE; \/\/ only want stx.mode\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf), err);\n+        if (err == 0) {\n+            return (jint)statx_buf.stx_mode;\n+        } else {\n+            return 0;\n+        }\n+    }\n+#endif\n@@ -561,1 +748,17 @@\n-\n+#if defined(__linux__)\n+    struct my_statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT | AT_SYMLINK_NOFOLLOW;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n+        \/\/ statx was available, so return now\n+        return;\n+    }\n+#endif\n@@ -566,1 +769,1 @@\n-        prepAttributes(env, &buf, attrs);\n+        copy_stat64_attributes(env, &buf, attrs);\n@@ -576,1 +779,18 @@\n-\n+#if defined(__linux__)\n+    struct my_statx statx_buf;\n+    int flags = AT_EMPTY_PATH | AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ statx supports FD use via dirfd iff pathname is an empty string and the\n+        \/\/ AT_EMPTY_PATH flag is specified in flags\n+        RESTARTABLE(statx_wrapper((int)fd, \"\", flags, mask, &statx_buf), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n+        \/\/ statx was available, so return now\n+        return;\n+    }\n+#endif\n@@ -581,1 +801,1 @@\n-        prepAttributes(env, &buf, attrs);\n+        copy_stat64_attributes(env, &buf, attrs);\n@@ -592,0 +812,20 @@\n+#if defined(__linux__)\n+    struct my_statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        if (((int)flag & AT_SYMLINK_NOFOLLOW) > 0) { \/\/ flag set in java code\n+            flags |= AT_SYMLINK_NOFOLLOW;\n+        }\n+        RESTARTABLE(statx_wrapper((int)dfd, path, flags, mask, &statx_buf), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n+        \/\/ statx was available, so return now\n+        return;\n+    }\n+#endif\n@@ -601,1 +841,1 @@\n-        prepAttributes(env, &buf, attrs);\n+        copy_stat64_attributes(env, &buf, attrs);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":250,"deletions":10,"binary":false,"changes":260,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8011536\n+ * @bug 8011536 8316304\n@@ -28,1 +28,1 @@\n- * @library ..\/..\n+ * @library ..\/.. \/test\/lib\n@@ -37,0 +37,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -84,0 +86,5 @@\n+        } else if (Platform.isLinux()) {\n+            \/\/ Creation time read depends on statx system call support\n+            supportsCreationTimeRead = CreationTimeHelper.linuxIsCreationTimeSupported();\n+            \/\/ Creation time updates are not supported on Linux\n+            supportsCreationTimeWrite = false;\n@@ -85,0 +92,1 @@\n+        System.out.println(\"supportsCreationTimeRead == \" + supportsCreationTimeRead);\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+public class CreationTimeHelper {\n+\n+    static {\n+        System.loadLibrary(\"CreationTimeHelper\");\n+    }\n+\n+    \/\/ Helper so as to determine 'statx' support on the runtime system\n+    static native boolean linuxIsCreationTimeSupported();\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTimeHelper.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include \"jni.h\"\n+#if defined(__linux__)\n+#include <dlfcn.h>\n+#endif\n+\n+\/\/ static native boolean linuxIsCreationTimeSupported()\n+JNIEXPORT jboolean JNICALL\n+Java_CreationTimeHelper_linuxIsCreationTimeSupported(JNIEnv *env, jclass cls)\n+{\n+#if defined(__linux__)\n+    void* statx_func = dlsym(RTLD_DEFAULT, \"statx\");\n+    return statx_func != NULL ? JNI_TRUE : JNI_FALSE;\n+#else\n+    return JNI_FALSE;\n+#endif\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/libCreationTimeHelper.c","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}