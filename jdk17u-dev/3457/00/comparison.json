{"files":[{"patch":"@@ -839,0 +839,1 @@\n+java\/awt\/Focus\/InactiveFocusRace.java 8023263 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4700276\n+ * @summary Peers process KeyEvents before KeyEventPostProcessors\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ConsumedKeyEventTest\n+*\/\n+\n+import java.awt.Canvas;\n+import java.awt.Component;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.KeyEventPostProcessor;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ConsumedKeyEventTest implements KeyEventPostProcessor {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This is a Windows-only test.\n+            When the test starts, you will see a Frame with two components in it,\n+            components look like colored rectangles, one of them is lightweight, one is heavyweight.\n+            Do the following:\n+            1. Click the mouse on the left component.\n+               If it isn't yellow after the click (that means it doesn't have focus), the test fails.\n+            2. Press and release ALT key.\n+               In the output window, the text should appear stating that those key events were consumed.\n+               If no output appears, the test fails.\n+            3. Press space bar. If system menu drops down, the test fails.\n+            4. Click the right rectangle.\n+               It should become red after the click. If it doesn't, it means that it didn't get the focus, and the test fails.\n+            5. Repeat steps 2. and 3.\n+            6. If the test didn't fail on any of the previous steps, the test passes.\"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ConsumedKeyEventTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 5)\n+                .columns(35)\n+                .testUI(ConsumedKeyEventTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+            addKeyEventPostProcessor((e) -> {\n+                System.out.println(\"postProcessor(\" + e + \")\");\n+                \/\/ consumes all ALT-events\n+                if (e.getKeyCode() == KeyEvent.VK_ALT) {\n+                    println(\"consumed \" + e);\n+                    e.consume();\n+                    return true;\n+                }\n+                return false;\n+        });\n+        FocusRequestor requestor = new FocusRequestor();\n+        Frame frame = new Frame(\"Main Frame\");\n+        frame.setLayout(new FlowLayout());\n+\n+        Canvas canvas = new CustomCanvas();\n+        canvas.addMouseListener(requestor);\n+        frame.add(canvas);\n+        canvas.requestFocus();\n+\n+        Component lwComp = new LWComponent();\n+        lwComp.addMouseListener(requestor);\n+        frame.add(lwComp);\n+\n+        frame.pack();\n+\n+        return frame;\n+    }\n+\n+    public boolean postProcessKeyEvent(KeyEvent e) {\n+        System.out.println(\"postProcessor(\" + e + \")\");\n+        \/\/ consumes all ALT-events\n+        if (e.getKeyCode() == KeyEvent.VK_ALT) {\n+            println(\"consumed \" + e);\n+            e.consume();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    static void println(String messageIn) {\n+        PassFailJFrame.log(messageIn);\n+    }\n+}\/\/ class ConsumedKeyEventTest\n+\n+class CustomCanvas extends Canvas {\n+    CustomCanvas() {\n+        super();\n+        setName(\"HWComponent\");\n+        setSize(100, 100);\n+        addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent fe) {\n+                repaint();\n+            }\n+\n+            public void focusLost(FocusEvent fe) {\n+                repaint();\n+            }\n+        });\n+    }\n+\n+    public void paint(Graphics g) {\n+        if (isFocusOwner()) {\n+            g.setColor(Color.YELLOW);\n+        } else {\n+            g.setColor(Color.GREEN);\n+        }\n+        g.fillRect(0, 0, 100, 100);\n+    }\n+\n+}\n+\n+class LWComponent extends Component {\n+    LWComponent() {\n+        super();\n+        setName(\"LWComponent\");\n+        addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent fe) {\n+                repaint();\n+            }\n+\n+            public void focusLost(FocusEvent fe) {\n+                repaint();\n+            }\n+        });\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(100, 100);\n+    }\n+\n+    public void paint(Graphics g) {\n+        if (isFocusOwner()) {\n+            g.setColor(Color.RED);\n+        } else {\n+            g.setColor(Color.BLACK);\n+        }\n+        g.fillRect(0, 0, 100, 100);\n+    }\n+\n+}\n+\n+class FocusRequestor extends MouseAdapter {\n+    static int counter = 0;\n+    public void mouseClicked(MouseEvent me) {\n+        System.out.println(\"mouseClicked on \" + me.getComponent().getName());\n+    }\n+    public void mousePressed(MouseEvent me) {\n+        System.out.println(\"mousePressed on \" + me.getComponent().getName());\n+        me.getComponent().requestFocus();\n+    }\n+    public void mouseReleased(MouseEvent me) {\n+        System.out.println(\"mouseReleased on \" + me.getComponent().getName());\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/ConsumedKeyEventTest.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4464723\n+ * @summary Tests simple KeyAdapter \/ KeyListener on an empty, focusable window\n+ * @key headful\n+ * @run main EmptyWindowKeyTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Frame;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.Robot;\n+\n+public class EmptyWindowKeyTest {\n+\n+    static volatile boolean passed1, passed2;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        MainFrame mainFrame = new MainFrame();\n+        mainFrame.setSize(50,50);\n+        mainFrame.addKeyListener(new KeyboardTracker());\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        if (!passed1 || !passed2) {\n+            throw new RuntimeException(\"KeyPress\/keyRelease not seen,\" +\n+                       \"passed1 \" + passed1 + \" passed2 \" + passed2);\n+        }\n+    }\n+\n+    static public class KeyboardTracker extends KeyAdapter {\n+        public KeyboardTracker() { }\n+        public void keyTyped(KeyEvent e) {}\n+\n+        public void keyPressed(KeyEvent e) {\n+            if (e.getKeyText(e.getKeyCode()).equals(\"A\")) {\n+                passed1 = true;\n+            }\n+        }\n+        public void keyReleased(KeyEvent e) {\n+            if (e.getKeyText(e.getKeyCode()).equals(\"A\")) {\n+                passed2 = true;\n+            }\n+        }\n+    }\n+\n+    static public class MainFrame extends Frame {\n+\n+        public MainFrame() {\n+            super();\n+            enableEvents(AWTEvent.KEY_EVENT_MASK);\n+            setVisible(true);\n+        }\n+\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/EmptyWindowKeyTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4697451\n+ * @summary Test that there is no race between focus component in inactive window and window activation\n+ * @key headful\n+ * @run main InactiveFocusRace\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.InputEvent;\n+\n+public class InactiveFocusRace {\n+\n+    static Frame activeFrame, inactiveFrame;\n+    Button activeButton, inactiveButton1, inactiveButton2;\n+    Semaphore sema;\n+    final static int TIMEOUT = 10000;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            InactiveFocusRace test = new InactiveFocusRace();\n+            test.init();\n+            test.start();\n+        } finally {\n+            if (activeFrame != null) {\n+                activeFrame.dispose();\n+            }\n+            if (inactiveFrame != null) {\n+                inactiveFrame.dispose();\n+            }\n+        }\n+    }\n+\n+    public void init() {\n+        activeButton = new Button(\"active button\");\n+        inactiveButton1 = new Button(\"inactive button1\");\n+        inactiveButton2 = new Button(\"inactive button2\");\n+        activeFrame = new Frame(\"Active frame\");\n+        inactiveFrame = new Frame(\"Inactive frame\");\n+        inactiveFrame.setLayout(new FlowLayout());\n+        activeFrame.add(activeButton);\n+        inactiveFrame.add(inactiveButton1);\n+        inactiveFrame.add(inactiveButton2);\n+        activeFrame.pack();\n+        activeFrame.setLocation(300, 10);\n+        inactiveFrame.pack();\n+        inactiveFrame.setLocation(300, 300);\n+        sema = new Semaphore();\n+\n+        inactiveButton1.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.err.println(\"Button 1 got focus\");\n+            }\n+        });\n+        inactiveButton2.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.err.println(\"Button2 got focus\");\n+                sema.raise();\n+            }\n+        });\n+        activeFrame.addWindowListener(new WindowAdapter() {\n+            public void windowActivated(WindowEvent e) {\n+                System.err.println(\"Window activated\");\n+                sema.raise();\n+            }\n+        });\n+    }\n+\n+    public void start() {\n+        Robot robot = null;\n+        try {\n+            robot = new Robot();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to create robot\");\n+        }\n+\n+        inactiveFrame.setVisible(true);\n+        activeFrame.setVisible(true);\n+\n+        \/\/ Wait for active frame to become active\n+        try {\n+            sema.doWait(TIMEOUT);\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Wait was interrupted\");\n+        }\n+        if (!sema.getState()) {\n+            throw new RuntimeException(\"Frame doesn't become active on show\");\n+        }\n+        sema.setState(false);\n+\n+        \/\/ press on second button in inactive frame\n+        Point loc = inactiveButton2.getLocationOnScreen();\n+        robot.mouseMove(loc.x+5, loc.y+5);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        \/\/ after all second button should be focus owner.\n+        try {\n+            sema.doWait(TIMEOUT);\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Wait was interrupted\");\n+        }\n+        if (!sema.getState()) {\n+            throw new RuntimeException(\"Button2 didn't become focus owner\");\n+        }\n+        Toolkit.getDefaultToolkit().sync();\n+        robot.waitForIdle();\n+        if (!(KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == inactiveButton2)) {\n+            throw new RuntimeException(\"Button2 should be the focus owner after all\");\n+        }\n+\n+    }\n+\n+}\n+\n+class Semaphore {\n+    boolean state = false;\n+    int waiting = 0;\n+    public Semaphore() {\n+    }\n+    public void doWait() throws InterruptedException {\n+        synchronized(this) {\n+            if (state) return;\n+            waiting++;\n+            wait();\n+            waiting--;\n+        }\n+    }\n+    public void doWait(int timeout) throws InterruptedException {\n+        synchronized(this) {\n+            if (state) return;\n+            waiting++;\n+            wait(timeout);\n+            waiting--;\n+        }\n+    }\n+    public void raise() {\n+        synchronized(this) {\n+            state = true;\n+            if (waiting > 0) {\n+                notifyAll();\n+            }\n+        }\n+    }\n+    public boolean getState() {\n+        synchronized(this) {\n+            return state;\n+        }\n+    }\n+    public void setState(boolean newState) {\n+        synchronized(this) {\n+            state = newState;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/InactiveFocusRace.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4688591\n+ * @summary Tab key hangs in Native Print Dialog on win32\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual InitialPrintDlgFocusTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.JobAttributes;\n+import java.awt.PageAttributes;\n+import java.awt.PrintJob;\n+import java.awt.Toolkit;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+\n+public class InitialPrintDlgFocusTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            After the tests starts you will see a frame titled \"PrintTest\".\n+            Press the \"Print\" button and the print dialog should appear.\n+            If you are able to transfer focus between components of the Print dialog\n+            using the TAB key, then the test passes else the test fails.\n+\n+            Note: close the Print dialog before clicking on \"Pass\" or \"Fail\" buttons.\"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"InitialPrintDlgFocusTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(InitialPrintDlgFocusTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        return new PrintTest();\n+\n+    }\n+}\n+\n+class PrintTest extends JFrame implements ActionListener {\n+\n+    JButton b;\n+    JobAttributes jbattrib;\n+    Toolkit tk ;\n+    PageAttributes pgattrib;\n+\n+    public PrintTest() {\n+        setTitle(\"PrintTest\");\n+        setSize(500, 400);\n+\n+        b = new JButton(\"Print\");\n+        jbattrib = new JobAttributes();\n+        tk = Toolkit.getDefaultToolkit();\n+        pgattrib = new PageAttributes();\n+        getContentPane().setLayout(new FlowLayout());\n+        getContentPane().add(b);\n+\n+        b.addActionListener(this);\n+\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        if(ae.getSource()==b)\n+            jbattrib.setDialog(JobAttributes.DialogType.NATIVE);\n+\n+        PrintJob pjob = tk.getPrintJob(this, \"Printing Test\",\n+                                       jbattrib, pgattrib);\n+\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/InitialPrintDlgFocusTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}