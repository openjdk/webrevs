{"files":[{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8337066\n- * @summary Test that MergeMem is skipped when looking for stores\n- * @compile -encoding UTF-8  TestAntiDependencyForPinnedLoads2.java\n- * @run main\/othervm -Xbatch -XX:-TieredCompilation\n- *                   -XX:CompileCommand=compileonly,java.lang.StringUTF16::reverse\n- *                   compiler.controldependency.TestAntiDependencyForPinnedLoads2\n- *\/\n-\n-package compiler.controldependency;\n-\n-public class TestAntiDependencyForPinnedLoads2 {\n-    public static void main(String[] args) {\n-        for(int i = 0; i < 50_000; i++) {\n-            String str = \"YYYY年MM月DD日\";\n-            StringBuffer strBuffer = new StringBuffer(str);\n-            String revStr = strBuffer.reverse().toString();\n-\n-            System.out.println(i + \": revStr: \" + revStr + \" str: \" + str + \" result literal: 日DD月MM年YYYY\");\n-            if (!revStr.equals(\"日DD月MM年YYYY\")) throw new InternalError(\"FAIL \" + i + \": revStr: \" + revStr + \" str: \" + str + \" result literal: 日DD月MM年YYYY\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/controldependency\/TestAntiDependencyForPinnedLoads2.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-import jdk.test.lib.Asserts;\n-\n@@ -27,2 +25,0 @@\n-import java.util.Arrays;\n-import java.util.HexFormat;\n@@ -56,1 +52,0 @@\n-        testEqualsByteArray();\n@@ -98,20 +93,0 @@\n-    private static void testEqualsByteArray() throws Exception {\n-        byte[] b1 = new byte[1];\n-        byte[] b11 = new byte[1];\n-        byte[] b2 = new byte[2];\n-\n-        expectPass(Assertion.EQBA, b1, b1);\n-        expectPass(Assertion.EQBA, b1, b11);\n-        expectPass(Assertion.EQBA, (byte[])null, (byte[])null);\n-        expectPass(Assertion.NEQBA, b1, b2);\n-        expectPass(Assertion.NEQBA, b1, (byte[])null);\n-        expectPass(Assertion.NEQBA, (byte[])null, b1);\n-\n-        expectFail(Assertion.EQBA, b1, b2);\n-        expectFail(Assertion.EQBA, (byte[])null, b1);\n-        expectFail(Assertion.EQBA, b1, (byte[])null);\n-        expectFail(Assertion.NEQBA, b1, b1);\n-        expectFail(Assertion.NEQBA, b1, b11);\n-        expectFail(Assertion.NEQBA, (byte[])null, (byte[])null);\n-    }\n-\n@@ -219,37 +194,0 @@\n-    private static void expectPass(Assertion assertion, byte[] b1, byte[] b2)\n-            throws Exception {\n-        if (assertion == Assertion.EQBA) {\n-            String msg = \"Expected \" + Assertion.asString(\"assertEqualsByteArray\",\n-                    Arrays.toString(b1), Arrays.toString(b2)) + \" to pass\";\n-            Asserts.assertEqualsByteArray(b1, b2, msg);\n-        } else {\n-            String msg = \"Expected \" + Assertion.asString(\"assertNotEqualsByteArray\",\n-                    Arrays.toString(b1), Arrays.toString(b2)) + \" to pass\";\n-            Asserts.assertNotEqualsByteArray(b1, b2, msg);\n-        }\n-    }\n-\n-    private static void expectFail(Assertion assertion, byte[] b1, byte[] b2)\n-            throws Exception {\n-        if (assertion == Assertion.EQBA) {\n-            try {\n-                Asserts.assertEqualsByteArray(b1, b2);\n-            } catch (RuntimeException e) {\n-                return;\n-            }\n-            throw new Exception(\"Expected \"\n-                    + Assertion.asString(\"assertEqualsByteArray\",\n-                    Arrays.toString(b1), Arrays.toString(b2))\n-                    + \" to throw a RuntimeException\");\n-        } else {\n-            try {\n-                Asserts.assertNotEqualsByteArray(b1, b2);\n-            } catch (RuntimeException e) {\n-                return;\n-            }\n-            throw new Exception(\"Expected \"\n-                    + Assertion.asString(\"assertNotEqualsByteArray\",\n-                    Arrays.toString(b1), Arrays.toString(b2))\n-                    + \" to throw a RuntimeException\");\n-        }\n-    }\n@@ -259,1 +197,1 @@\n-    LT, LTE, EQ, EQBA, NEQBA, GTE, GT, NE, NULL, NOTNULL, FALSE, TRUE;\n+    LT, LTE, EQ, GTE, GT, NE, NULL, NOTNULL, FALSE, TRUE;\n@@ -327,1 +265,1 @@\n-    public static String asString(String assertion, Object ... args) {\n+    private static String asString(String assertion, Object ... args) {\n","filename":"test\/lib-test\/jdk\/test\/lib\/AssertsTest.java","additions":3,"deletions":65,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.util.Arrays;\n-import java.util.HexFormat;\n@@ -239,58 +237,0 @@\n-    \/**\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @throws RuntimeException if the assertion is not true.\n-     * @see #assertEqualsByteArray(byte[], byte[], String)\n-     *\/\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertEqualsByteArray(lhs, rhs, null);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @throws RuntimeException if the assertion is not true.\n-     * @see #assertNotEqualsByteArray(byte[], byte[], String)\n-     *\/\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertNotEqualsByteArray(lhs, rhs, null);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption; {@code null} for a default message.\n-     * @throws RuntimeException if the assertion is not true.\n-     *\/\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (!Arrays.equals(lhs, rhs)) {\n-            msg = Objects.toString(msg, \"assertEqualsByteArray\")\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to equal \" + HexFormat.of().formatHex(rhs);\n-            fail(msg);\n-        }\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption; {@code null} for a default message.\n-     * @throws RuntimeException if the assertion is not true.\n-     *\/\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (Arrays.equals(lhs, rhs)) {\n-            msg = Objects.toString(msg, \"assertNotEqualsByteArray\")\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to not equal \" + HexFormat.of().formatHex(rhs);\n-            fail(msg);\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":1,"deletions":61,"binary":false,"changes":62,"status":"modified"}]}