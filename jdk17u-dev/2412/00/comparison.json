{"files":[{"patch":"@@ -240,1 +240,1 @@\n-<p>It is highly recommended to use the latest NSS version when running PKCS11 tests. Improper NSS version may lead to unexpected failures which are hard to diagnose. For example, sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04 with the default NSS version in the system. To run these tests correctly, the system property <code>test.nss.lib.paths<\/code> is required on Ubuntu 18.04 to specify the alternative NSS lib directories.<\/p>\n+<p>It is highly recommended to use the latest NSS version when running PKCS11 tests. Improper NSS version may lead to unexpected failures which are hard to diagnose. For example, sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04 with the default NSS version in the system. To run these tests correctly, the system property <<code>jdk.test.lib.artifacts.&lt;NAME&gt;<\/code> is required on Ubuntu 18.04 to specify the alternative NSS lib directories.The<code>&lt;NAME&gt;<\/code> component should be replaced with the name element of the appropriate <code>@Artifact<\/code> class. (See<code>test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java<\/code>)<\/p>\n@@ -243,1 +243,1 @@\n-    JTREG=&quot;JAVA_OPTIONS=-Dtest.nss.lib.paths=\/path\/to\/your\/latest\/NSS-libs&quot;<\/code><\/pre>\n+    JTREG=&quot;JAVA_OPTIONS=-Djdk.test.lib.artifacts.nsslib-linux_aarch64=\/path\/to\/NSS-libs&quot;<\/code><\/pre>\n","filename":"doc\/testing.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -539,2 +539,4 @@\n-correctly, the system property `test.nss.lib.paths` is required on Ubuntu 18.04\n-to specify the alternative NSS lib directories.\n+correctly, the system property `jdk.test.lib.artifacts.<NAME>` is required on\n+Ubuntu 18.04 to specify the alternative NSS lib directory. The `<NAME>`\n+component should be replaced with the name element of the appropriate\n+`@Artifact` class. (See `test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java`)\n@@ -546,1 +548,1 @@\n-    JTREG=\"JAVA_OPTIONS=-Dtest.nss.lib.paths=\/path\/to\/your\/latest\/NSS-libs\"\n+    JTREG=\"JAVA_OPTIONS=-Djdk.test.lib.artifacts.nsslib-linux_aarch64=\/path\/to\/NSS-libs\"\n","filename":"doc\/testing.md","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -657,6 +657,0 @@\n-sun\/security\/tools\/keytool\/NssTest.java                         8295343 linux-all\n-sun\/security\/pkcs11\/Signature\/TestRSAKeyLength.java             8295343 linux-all\n-sun\/security\/pkcs11\/rsa\/TestSignatures.java                     8295343 linux-all\n-sun\/security\/pkcs11\/rsa\/TestKeyPairGenerator.java               8295343 linux-all\n-sun\/security\/pkcs11\/rsa\/TestKeyFactory.java                     8295343 linux-all\n-sun\/security\/pkcs11\/KeyStore\/Basic.java                         8295343 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-import java.util.HashMap;\n@@ -260,3 +259,3 @@\n-        String[] nssLibDirs = getNssLibPaths(osid);\n-        if (nssLibDirs == null) {\n-            System.out.println(\"Warning: unsupported OS: \" + osid\n+        String nssLibDir = fetchNssLib(osid);\n+        if (nssLibDir == null) {\n+            throw new SkippedException(\"Warning: unsupported OS: \" + osid\n@@ -264,5 +263,0 @@\n-            return null;\n-        }\n-        if (nssLibDirs.length == 0) {\n-            System.out.println(\"Warning: NSS not supported on this platform, skipping test\");\n-            return null;\n@@ -271,11 +265,4 @@\n-        Path nssLibPath = null;\n-        for (String dir : nssLibDirs) {\n-            Path libPath = Paths.get(dir).resolve(System.mapLibraryName(library));\n-            if (Files.exists(libPath)) {\n-                nssLibPath = libPath;\n-                break;\n-            }\n-        }\n-        if (nssLibPath == null) {\n-            System.out.println(\"Warning: can't find NSS library on this machine, skipping test\");\n-            return null;\n+        String libraryName = System.mapLibraryName(library);\n+        Path libPath = Paths.get(nssLibDir).resolve(libraryName);\n+        if (!Files.exists(libPath)) {\n+            throw new SkippedException(\"NSS library \\\"\" + libraryName + \"\\\" was not found in \" + nssLibDir);\n@@ -283,1 +270,2 @@\n-        return nssLibPath;\n+\n+        return libPath;\n@@ -607,65 +595,0 @@\n-    \/\/ Location of the NSS libraries on each supported platform\n-    private static Map<String, String[]> getOsMap() {\n-        if (osMap != null) {\n-            return osMap;\n-        }\n-\n-        osMap = new HashMap<>();\n-        osMap.put(\"Linux-i386-32\", new String[]{\n-                \"\/usr\/lib\/i386-linux-gnu\/\",\n-                \"\/usr\/lib32\/\",\n-                \"\/usr\/lib\/\"});\n-        osMap.put(\"Linux-amd64-64\", new String[]{\n-                \"\/usr\/lib\/x86_64-linux-gnu\/\",\n-                \"\/usr\/lib\/x86_64-linux-gnu\/nss\/\",\n-                \"\/usr\/lib64\/\"});\n-        osMap.put(\"Linux-ppc64-64\", new String[]{\"\/usr\/lib64\/\"});\n-        osMap.put(\"Linux-ppc64le-64\", new String[]{\"\/usr\/lib64\/\"});\n-        osMap.put(\"Linux-s390x-64\", new String[]{\"\/usr\/lib64\/\"});\n-        osMap.put(\"Windows-x86-32\", new String[]{});\n-        osMap.put(\"Windows-amd64-64\", new String[]{});\n-        osMap.put(\"MacOSX-x86_64-64\", new String[]{});\n-        osMap.put(\"Linux-arm-32\", new String[]{\n-                \"\/usr\/lib\/arm-linux-gnueabi\/nss\/\",\n-                \"\/usr\/lib\/arm-linux-gnueabihf\/nss\/\"});\n-        osMap.put(\"Linux-aarch64-64\", new String[] {\n-                \"\/usr\/lib\/aarch64-linux-gnu\/\",\n-                \"\/usr\/lib\/aarch64-linux-gnu\/nss\/\",\n-                \"\/usr\/lib64\/\" });\n-        return osMap;\n-    }\n-\n-    private static String[] getNssLibPaths(String osId) {\n-        String[] preferablePaths = getPreferableNssLibPaths(osId);\n-        if (preferablePaths.length != 0) {\n-            return preferablePaths;\n-        } else {\n-            return getOsMap().get(osId);\n-        }\n-    }\n-\n-    private static String[] getPreferableNssLibPaths(String osId) {\n-        List<String> nssLibPaths = new ArrayList<>();\n-\n-        String customNssLibPaths = System.getProperty(\"test.nss.lib.paths\");\n-        if (customNssLibPaths == null) {\n-            \/\/ If custom local NSS lib path is not provided,\n-            \/\/ try to download NSS libs from artifactory\n-            String path = fetchNssLib(osId);\n-            if (path != null) {\n-                nssLibPaths.add(path);\n-            }\n-        } else {\n-            String[] paths = customNssLibPaths.split(\",\");\n-            for (String path : paths) {\n-                if (!path.endsWith(File.separator)) {\n-                    nssLibPaths.add(path + File.separator);\n-                } else {\n-                    nssLibPaths.add(path);\n-                }\n-            }\n-        }\n-\n-        return nssLibPaths.toArray(new String[0]);\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":10,"deletions":87,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -7,3 +7,5 @@\n-1. Specified by system property test.nss.lib.paths\n-System property test.nss.lib.paths can specify a set of absolute paths to\n-the local NSS library directories. The paths are separated by comma.\n+1. Specified by system property jdk.test.lib.artifacts.<NAME>\n+The system property, jdk.test.lib.artifacts.<NAME>, can specify an absolute path\n+to the local NSS library directory. The <NAME> component should be replaced with\n+the name element of the appropriate @Artifact class.\n+(See `test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java`)\n@@ -12,3 +14,2 @@\n-If the value of system property test.nss.lib.paths is not set, the tests will try\n-to download pre-built NSS libraries from artifactory server. Currently, the\n-tests only looks for libraries for Windows and MacOSX platforms on artifactory.\n+If the value of system property jdk.test.lib.artifacts.<NAME> is not set, the\n+tests will try to download pre-built NSS libraries from artifactory server.\n","filename":"test\/jdk\/sun\/security\/pkcs11\/README","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,4 @@\n-        Files.copy(dbPath.resolve(\"cert8.db\"), Paths.get(\"cert8.db\"));\n-        Files.copy(dbPath.resolve(\"key3.db\"), Paths.get(\"key3.db\"));\n-        Files.copy(dbPath.resolve(\"secmod.db\"), Paths.get(\"secmod.db\"));\n+        Path destDir = Path.of( \"tmpdb\");\n+        Files.createDirectory(destDir);\n+        Files.copy(dbPath.resolve(\"cert9.db\"), destDir.resolve(\"cert9.db\"));\n+        Files.copy(dbPath.resolve(\"key4.db\"), destDir.resolve(\"key4.db\"));\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/NssTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-nssArgs = \"configdir='.' certPrefix='' keyPrefix='' secmod='secmod.db'\"\n+nssArgs = \"configdir='sql:.\/tmpdb' certPrefix='' keyPrefix='' secmod='secmod.db'\"\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/p11-nss.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}