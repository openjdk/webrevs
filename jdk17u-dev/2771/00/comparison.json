{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestCDSVMCrash\n+ * @summary Verify that an exception is thrown when the VM crashes during executeAndLog\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run driver TestCDSVMCrash\n+ * @bug 8306583\n+ *\/\n+\n+ import jdk.test.lib.cds.CDSTestUtils;\n+ import jdk.test.lib.process.OutputAnalyzer;\n+ import jdk.test.lib.process.ProcessTools;\n+\n+ public class TestCDSVMCrash {\n+\n+     public static void main(String[] args) throws Exception {\n+         if (args.length == 1) {\n+             \/\/ This should guarantee to throw:\n+             \/\/ java.lang.OutOfMemoryError: Requested array size exceeds VM limit\n+             try {\n+                 Object[] oa = new Object[Integer.MAX_VALUE];\n+                 throw new Error(\"OOME not triggered\");\n+             } catch (OutOfMemoryError err) {\n+                 throw new Error(\"OOME didn't abort JVM!\");\n+             }\n+         }\n+         \/\/ else this is the main test\n+         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:+CrashOnOutOfMemoryError\",\n+                  \"-XX:-CreateCoredumpOnCrash\", \"-Xmx128m\", \"-Xshare:on\", TestCDSVMCrash.class.getName(),\"throwOOME\");\n+         OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+         \/\/ executeAndLog should throw an exception in the VM crashed\n+         try {\n+            CDSTestUtils.executeAndLog(pb, \"cds_vm_crash\");\n+            throw new Error(\"Expected VM to crash\");\n+         } catch(RuntimeException e) {\n+            if (!e.getMessage().equals(\"Hotspot crashed\")) {\n+              throw new Error(\"Expected message: Hotspot crashed\");\n+            }\n+         }\n+         int exitValue = output.getExitValue();\n+         if (0 == exitValue) {\n+             \/\/expecting a non zero value\n+             throw new Error(\"Expected to get non zero exit value\");\n+         }\n+        output.shouldContain(\"A fatal error has been detected by the Java Runtime Environment\");\n+        System.out.println(\"PASSED\");\n+     }\n+ }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/TestCDSVMCrash.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -619,0 +619,3 @@\n+        if (output.getExitValue() != 0 && output.getStdout().contains(\"A fatal error has been detected\")) {\n+          throw new RuntimeException(\"Hotspot crashed\");\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}