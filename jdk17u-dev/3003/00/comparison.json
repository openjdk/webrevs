{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,13 @@\n+import java.awt.BasicStroke;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Pageable;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n@@ -27,0 +40,12 @@\n+ * @key printer\n+ * @summary Prints a rectangle to show the imageable area of a\n+ *          12in x 14in custom paper size.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n+ * @run main\/manual CustomPaper 4355514\n+ *\/\n+\n+\/*\n+ * @test\n@@ -31,1 +56,5 @@\n- * @run main\/manual CustomPaper\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n+ * @run main\/manual CustomPaper 4385157\n@@ -33,0 +62,1 @@\n+public class CustomPaper implements Pageable, Printable {\n@@ -34,50 +64,4 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.geom.*;\n-\n-public class CustomPaper implements Pageable, Printable{\n-\n-  private static double PIXELS_PER_INCH = 72.0;\n-\n-  private PrinterJob printerJob;\n-  private PageFormat pageFormat;\n-\n-  CustomPaper(){\n-    printerJob = PrinterJob.getPrinterJob();\n-    createPageFormat();\n-  }\n-\n-  private void createPageFormat(){\n-    pageFormat = new PageFormat();\n-    Paper p = new Paper();\n-    double width   = 12.0*PIXELS_PER_INCH;\n-    double height  = 14.0*PIXELS_PER_INCH;\n-    double ix      = PIXELS_PER_INCH;\n-    double iy      = PIXELS_PER_INCH;\n-    double iwidth  = width  - 2.0*PIXELS_PER_INCH;\n-    double iheight = height - 2.0*PIXELS_PER_INCH;\n-    p.setSize(width, height);\n-    p.setImageableArea(ix, iy, iwidth, iheight);\n-    pageFormat.setPaper(p);\n-  }\n-\n-  public Printable getPrintable(int index){\n-    return this;\n-  }\n-\n-  public PageFormat getPageFormat(int index){\n-    return pageFormat;\n-  }\n-\n-  public int getNumberOfPages(){\n-    return 1;\n-  }\n-\n-  public void print(){\n-    if(printerJob.printDialog())\n-        {\n-      try{\n-        printerJob.setPageable(this);\n-        printerJob.print();\n-      }catch(Exception e){e.printStackTrace();}\n-    }\n+    private static final double PIXELS_PER_INCH = 72.0;\n+\n+    private final PrinterJob printerJob;\n+    private PageFormat pageFormat;\n@@ -85,14 +69,3 @@\n-  }\n-\n-  public int print(Graphics g, PageFormat pf, int pageIndex){\n-    if(pageIndex == 0){\n-        Graphics2D g2 = (Graphics2D)g;\n-        Rectangle2D r = new Rectangle2D.Double(pf.getImageableX(),\n-                                               pf.getImageableY(),\n-                                               pf.getImageableWidth(),\n-                                               pf.getImageableHeight());\n-      g2.setStroke(new BasicStroke(3.0f));\n-      g2.draw(r);\n-      return PAGE_EXISTS;\n-    }else{\n-      return NO_SUCH_PAGE;\n+    CustomPaper() {\n+        printerJob = PrinterJob.getPrinterJob();\n+        createPageFormat();\n@@ -100,23 +73,0 @@\n-  }\n-\n-  public static void main(String[] args){\n-\n-        String[] instructions =\n-        {\n-            \"You must have a printer that supports custom paper size of \",\n-            \"at least 12 x 14 inches to perform this test. It requires\",\n-            \"user interaction and you must have a 12 x 14 inch paper available.\",\n-            \" \",\n-            \"To test bug ID 4385157, click OK on print dialog box to print.\",\n-            \" \",\n-            \"To test bug ID 4355514, select the printer in the Print Setup dialog and add a \",\n-            \"custom paper size under Printer properties' Paper selection menu. \",\n-            \"Set the dimension  to width=12 inches and height=14 inches.\",\n-            \"Select this custom paper size before proceeding to print.\",\n-            \" \",\n-            \"Visual inspection of the one-page printout is needed. A passing\",\n-            \"test will print a rectangle of the imageable area which is approximately\",\n-            \"10 x 12 inches.\",\n-        };\n-        Sysout.createDialog( );\n-        Sysout.printInstructions( instructions );\n@@ -124,4 +74,11 @@\n-        CustomPaper pt = new CustomPaper();\n-        pt.print();\n-        \/\/System.exit (0);\n-  }\n+    private void createPageFormat() {\n+        pageFormat = new PageFormat();\n+        Paper p = new Paper();\n+        double width = 12.0 * PIXELS_PER_INCH;\n+        double height = 14.0 * PIXELS_PER_INCH;\n+        double iwidth = width - 2.0 * PIXELS_PER_INCH;\n+        double iheight = height - 2.0 * PIXELS_PER_INCH;\n+        p.setSize(width, height);\n+        p.setImageableArea(PIXELS_PER_INCH, PIXELS_PER_INCH, iwidth, iheight);\n+        pageFormat.setPaper(p);\n+    }\n@@ -129,1 +86,4 @@\n-}\n+    @Override\n+    public Printable getPrintable(int index) {\n+        return this;\n+    }\n@@ -131,0 +91,4 @@\n+    @Override\n+    public PageFormat getPageFormat(int index) {\n+        return pageFormat;\n+    }\n@@ -132,2 +96,4 @@\n-class Sysout {\n-   private static TestDialog dialog;\n+    @Override\n+    public int getNumberOfPages() {\n+        return 1;\n+    }\n@@ -135,6 +101,7 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    private void print() throws PrinterException {\n+        if (printerJob.printDialog()) {\n+            printerJob.setPageable(this);\n+            printerJob.print();\n+        } else {\n+            PassFailJFrame.forceFail(\"Printing canceled by user\");\n+        }\n@@ -143,7 +110,14 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    @Override\n+    public int print(Graphics g, PageFormat pf, int pageIndex) {\n+        if (pageIndex == 0) {\n+            Graphics2D g2 = (Graphics2D) g;\n+            Rectangle2D r = new Rectangle2D.Double(pf.getImageableX(),\n+                    pf.getImageableY(),\n+                    pf.getImageableWidth(),\n+                    pf.getImageableHeight());\n+            g2.setStroke(new BasicStroke(3.0f));\n+            g2.draw(r);\n+            return PAGE_EXISTS;\n+        } else {\n+            return NO_SUCH_PAGE;\n+        }\n@@ -152,0 +126,4 @@\n+    private static final String TOP = \"\"\"\n+         You must have a printer that supports custom paper size of\n+         at least 12 x 14 inches to perform this test. It requires\n+         user interaction and you must have a 12 x 14 inch paper available.\n@@ -153,4 +131,1 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        \"\"\";\n@@ -158,0 +133,1 @@\n+    private static final String BOTTOM = \"\"\"\n@@ -159,4 +135,4 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+         Visual inspection of the one-page printout is needed. A passing\n+         test will print a rectangle of the imageable area which is\n+         approximately 10 x 12 inches.\n+        \"\"\";\n@@ -164,79 +140,18 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n+    private static final String INSTRUCTIONS_4355514 = \"\"\"\n+         Select the printer in the Print Setup dialog and add a custom\n+         paper size under 'Printer properties' Paper selection menu.\n+         Set the dimension to width=12 inches and height=14 inches.\n+         Select this custom paper size before proceeding to print.\n+        \"\"\";\n+\n+    private static final String INSTRUCTIONS_4385157 = \"\"\"\n+         Click OK on print dialog box to print.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String instructions;\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -244,1 +159,24 @@\n- }\/\/ TestDialog  class\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Select a test by passing 4355514 or 4385157\");\n+        }\n+\n+        instructions = switch (args[0]) {\n+            case \"4355514\" -> TOP + INSTRUCTIONS_4355514 + BOTTOM;\n+            case \"4385157\" -> TOP + INSTRUCTIONS_4385157 + BOTTOM;\n+            default -> throw new RuntimeException(\"Unknown bugid \" + args[0] + \".\"\n+                    + \"Valid values: 4355514 or 4385157\");\n+        };\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"CustomPaper Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        CustomPaper pt = new CustomPaper();\n+        pt.print();\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/CustomPaper.java","additions":135,"deletions":197,"binary":false,"changes":332,"status":"modified"}]}