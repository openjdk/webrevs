{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,6 @@\n+import jdk.test.lib.RandomFactory;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -60,1 +66,1 @@\n- * @summary unit tests of FloatingDecimal\n+ * @summary unit tests of FloatingDecimal (use -Dseed=X to set PRANDOM seed)\n@@ -62,0 +68,2 @@\n+ * @library ..\n+ * @library \/test\/lib\n@@ -63,0 +71,1 @@\n+ * @build jdk.test.lib.RandomFactory\n@@ -64,1 +73,1 @@\n- * @run main TestFloatingDecimal\n+ * @run junit TestFloatingDecimal\n@@ -69,4 +78,1 @@\n-    private static enum ResultType {\n-        RESULT_EXCEPTION,\n-        RESULT_PRINT\n-    }\n+    private static final int NUM_RANDOM_TESTS = 100_000;\n@@ -74,16 +80,1 @@\n-    private static final ResultType RESULT_TYPE = ResultType.RESULT_PRINT;\n-    private static final int NUM_RANDOM_TESTS = 100000;\n-\n-    private static final Random RANDOM = new Random();\n-\n-    private static void result(String message) {\n-        switch (RESULT_TYPE) {\n-            case RESULT_EXCEPTION:\n-                throw new RuntimeException(message);\n-            case RESULT_PRINT:\n-                System.err.println(message);\n-                break;\n-            default:\n-                assert false;\n-        }\n-    }\n+    private static final Random RANDOM = RandomFactory.getRandom();\n@@ -95,1 +86,3 @@\n-            result(\"Test \"+test+\" expected \"+expected+\" but obtained \"+actual);\n+            System.err.println(\"Test \" + test +\n+                               \" expected \" + expected +\n+                               \" but obtained \" + actual);\n@@ -100,2 +93,2 @@\n-    private static int testAppendToDouble() {\n-        System.out.println(\"  testAppendToDouble\");\n+    @Test\n+    public void testAppendToDouble() {\n@@ -122,1 +115,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -125,2 +118,2 @@\n-    private static int testAppendToFloat() {\n-        System.out.println(\"  testAppendToFloat\");\n+    @Test\n+    public void testAppendToFloat() {\n@@ -147,1 +140,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -150,12 +143,2 @@\n-    private static int testAppendTo() {\n-        System.out.println(\"testAppendTo\");\n-        int failures = 0;\n-\n-        failures += testAppendToDouble();\n-        failures += testAppendToFloat();\n-\n-        return failures;\n-    }\n-\n-    private static int testParseDouble() {\n-        System.out.println(\"  testParseDouble\");\n+    @Test\n+    public void testParseDouble() {\n@@ -180,1 +163,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -183,2 +166,2 @@\n-    private static int testParseFloat() {\n-        System.out.println(\"  testParseFloat\");\n+    @Test\n+    public void testParseFloat() {\n@@ -203,11 +186,1 @@\n-        return failures;\n-    }\n-\n-    private static int testParse() {\n-        System.out.println(\"testParse\");\n-        int failures = 0;\n-\n-        failures += testParseDouble();\n-        failures += testParseFloat();\n-\n-        return failures;\n+        assertEquals(0, failures);\n@@ -216,2 +189,2 @@\n-    private static int testToJavaFormatStringDoubleFixed() {\n-        System.out.println(\"    testToJavaFormatStringDoubleFixed\");\n+    @Test\n+    public void testToJavaFormatStringDoubleFixed() {\n@@ -231,1 +204,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -234,2 +207,2 @@\n-    private static int testToJavaFormatStringDoubleRandom() {\n-        System.out.println(\"    testToJavaFormatStringDoubleRandom\");\n+    @Test\n+    public void testToJavaFormatStringDoubleRandom() {\n@@ -250,1 +223,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -253,10 +226,2 @@\n-    private static int testToJavaFormatStringDouble() {\n-        System.out.println(\"  testToJavaFormatStringDouble\");\n-        int failures = 0;\n-        failures += testToJavaFormatStringDoubleFixed();\n-        failures += testToJavaFormatStringDoubleRandom();\n-        return failures;\n-    }\n-\n-    private static int testToJavaFormatStringFloatFixed() {\n-        System.out.println(\"    testToJavaFormatStringFloatFixed\");\n+    @Test\n+    public void testToJavaFormatStringFloatFixed() {\n@@ -276,1 +241,1 @@\n-        return failures;\n+        assertEquals(0, failures);\n@@ -279,2 +244,2 @@\n-    private static int testToJavaFormatStringFloatRandom() {\n-        System.out.println(\"    testToJavaFormatStringFloatRandom\");\n+    @Test\n+    public void testToJavaFormatStringFloatRandom() {\n@@ -295,33 +260,1 @@\n-        return failures;\n-    }\n-\n-    private static int testToJavaFormatStringFloat() {\n-        System.out.println(\"  testToJavaFormatStringFloat\");\n-        int failures = 0;\n-\n-        failures += testToJavaFormatStringFloatFixed();\n-        failures += testToJavaFormatStringFloatRandom();\n-\n-        return failures;\n-    }\n-\n-    private static int testToJavaFormatString() {\n-        System.out.println(\"testToJavaFormatString\");\n-        int failures = 0;\n-\n-        failures += testToJavaFormatStringDouble();\n-        failures += testToJavaFormatStringFloat();\n-\n-        return failures;\n-    }\n-\n-    public static void main(String[] args) {\n-        int failures = 0;\n-\n-        failures += testAppendTo();\n-        failures += testParse();\n-        failures += testToJavaFormatString();\n-\n-        if (failures != 0) {\n-            throw new RuntimeException(\"\" + failures + \" failures while testing FloatingDecimal\");\n-        }\n+        assertEquals(0, failures);\n","filename":"test\/jdk\/jdk\/internal\/math\/FloatingDecimal\/TestFloatingDecimal.java","additions":41,"deletions":108,"binary":false,"changes":149,"status":"modified"}]}