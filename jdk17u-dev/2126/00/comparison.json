{"files":[{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 4512215 4818420 4819436\n- * @summary Updated currency data.\n- *\/\n-\n-import java.util.Currency;\n-import java.util.Locale;\n-\n-public class Bug4512215 {\n-\n-    public static void main(String[] args) throws Exception {\n-        testCurrencyDefined(\"XBD\", -1);\n-        testCountryCurrency(\"TJ\", \"TJS\", 2);\n-        testCountryCurrency(\"FO\", \"DKK\", 2);\n-        testCountryCurrency(\"FK\", \"FKP\", 2);\n-\n-        testCountryCurrency(\"AF\", \"AFN\", 2);    \/\/ changed from \"AFA\"\n-\n-        \/\/ Newsletter V-5 on ISO 3166-1 (2002-05-20)\n-        testCountryCurrency(\"TL\", \"USD\", 2);    \/\/ successor to TP\/TPE\n-\n-        \/\/ Newsletter V-8 on ISO 3166-1 (2003-07-23)\n-        testCountryCurrency(\"CS\", \"CSD\", 2);    \/\/ successor to YU\/YUM\n-    }\n-\n-    private static void testCountryCurrency(String country, String currencyCode,\n-            int digits) {\n-        testCurrencyDefined(currencyCode, digits);\n-        Currency currency = Currency.getInstance(new Locale(\"\", country));\n-        if (!currency.getCurrencyCode().equals(currencyCode)) {\n-            throw new RuntimeException(\"[\" + country\n-                    + \"] expected: \" + currencyCode\n-                    + \"; got: \" + currency.getCurrencyCode());\n-        }\n-    }\n-\n-    private static void testCurrencyDefined(String currencyCode, int digits) {\n-        Currency currency = Currency.getInstance(currencyCode);\n-        if (currency.getDefaultFractionDigits() != digits) {\n-            throw new RuntimeException(\"[\" + currencyCode\n-                    + \"] expected: \" + digits\n-                    + \"; got: \" + currency.getDefaultFractionDigits());\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug4512215.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 6807534\n- * @summary check whether the default implementation of\n- *    CurrencNameProvider.getDisplayName(String, Locale) throws appropriate\n- *    exceptions when necessary.\n- *\/\n-\n-import java.util.Locale;\n-import java.util.spi.CurrencyNameProvider;\n-\n-public class Bug6807534 {\n-\n-    static final CurrencyNameProvider cnp = new CurrencyNameProviderImpl();\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ test for NullPointerException (currencyCode)\n-        try {\n-            cnp.getDisplayName(null, Locale.US);\n-            throwException(\"NPE was not thrown with null currencyCode\");\n-        } catch (NullPointerException npe) {}\n-\n-        \/\/ test for NullPointerException (locale)\n-        try {\n-            cnp.getDisplayName(\"USD\", null);\n-            throwException(\"NPE was not thrown with null locale\");\n-        } catch (NullPointerException npe) {}\n-\n-        \/\/ test for IllegalArgumentException (illegal currencyCode)\n-        try {\n-            cnp.getDisplayName(\"INVALID\", Locale.US);\n-            throwException(\"IllegalArgumentException was not thrown with invalid currency code\");\n-        } catch (IllegalArgumentException iae) {}\n-        try {\n-            cnp.getDisplayName(\"inv\", Locale.US);\n-            throwException(\"IllegalArgumentException was not thrown with invalid currency code\");\n-        } catch (IllegalArgumentException iae) {}\n-\n-        \/\/ test for IllegalArgumentException (non-supported locale)\n-        try {\n-            cnp.getDisplayName(\"USD\", Locale.JAPAN);\n-            throwException(\"IllegalArgumentException was not thrown with non-supported locale\");\n-        } catch (IllegalArgumentException iae) {}\n-    }\n-\n-    static void throwException(String msg) {\n-        throw new RuntimeException(\"test failed. \"+msg);\n-    }\n-\n-    static class CurrencyNameProviderImpl extends CurrencyNameProvider {\n-        \/\/ dummy implementation\n-        public String getSymbol(String currencyCode, Locale locale) {\n-            return \"\";\n-        }\n-\n-        public Locale[] getAvailableLocales() {\n-            Locale[] avail = new Locale[1];\n-            avail[0] = Locale.US;\n-            return avail;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug6807534.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8154295\n- * @summary Check getNumericCodeAsString() method which returns numeric code as a 3 digit String.\n- *\/\n-\n-import java.util.Currency;\n-\n-public class Bug8154295 {\n-\n-    public static void main(String[] args) {\n-\n-        String numericCode = Currency.getInstance(\"AFA\").getNumericCodeAsString();\n-        if (!numericCode.equals(\"004\")) { \/\/should return \"004\" (a 3 digit string)\n-           throw new RuntimeException(\"[Expected 004, \"\n-                + \"found \"+numericCode+\" for AFA]\");\n-        }\n-\n-        numericCode = Currency.getInstance(\"AUD\").getNumericCodeAsString();\n-        if (!numericCode.equals(\"036\")) { \/\/should return \"036\" (a 3 digit string)\n-            throw new RuntimeException(\"[Expected 036, \"\n-                + \"found \"+numericCode+\" for AUD]\");\n-        }\n-\n-        numericCode = Currency.getInstance(\"USD\").getNumericCodeAsString();\n-        if (!numericCode.equals(\"840\")) {\/\/ should return \"840\" (a 3 digit string)\n-            throw new RuntimeException(\"[Expected 840, \"\n-                + \"found \"+numericCode+\" for USD]\");\n-        }\n-\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug8154295.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,4 +23,5 @@\n-\/**\n- *\n- *\n- * Check the consistency between the regression tests and the currency data in the JRE\n+\n+\n+\/*\n+  Check the consistency between the regression tests and the currency\n+  data in the JRE. This class is used by other test classes.\n@@ -29,3 +30,8 @@\n-import java.io.*;\n-import java.lang.reflect.*;\n-import java.security.*;\n+import java.io.BufferedReader;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n","filename":"test\/jdk\/java\/util\/Currency\/CheckDataVersion.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -31,0 +32,1 @@\n+ * @run junit CurrencyTest\n@@ -41,0 +43,1 @@\n++import java.util.ArrayList;\n@@ -42,1 +45,12 @@\n-import java.util.Locale;\n++import java.util.List;\n+import java.util.Locale;;\n++\n++import org.junit.jupiter.api.Disabled;\n++import org.junit.jupiter.api.Nested;\n++import org.junit.jupiter.api.Test;\n++import org.junit.jupiter.params.ParameterizedTest;\n++import org.junit.jupiter.params.provider.Arguments;\n++import org.junit.jupiter.params.provider.MethodSource;\n++\n++import static org.junit.jupiter.api.Assertions.assertEquals;\n++import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -47,1 +61,3 @@\n-    public static void main(String[] args) throws Exception {\n++    \/\/ 'tablea1.txt' should be up-to-date before testing\n++    @Test\n++    public void dataVersionTest() {\n@@ -49,7 +65,0 @@\n-        testCurrencyCodeValidation();\n-        testLocaleMapping();\n-        testSymbols();\n-        testFractionDigits();\n-        testSerialization();\n-        testDisplayNames();\n-        testFundsCodes();\n@@ -58,14 +67,8 @@\n-    static void testCurrencyCodeValidation() {\n-        \/\/ test creation of some valid currencies\n-        testValidCurrency(\"USD\");\n-        testValidCurrency(\"EUR\");\n-        testValidCurrency(\"GBP\");\n-        testValidCurrency(\"JPY\");\n-        testValidCurrency(\"CNY\");\n-        testValidCurrency(\"CHF\");\n-\n-        \/\/ test creation of some fictitious currencies\n-        testInvalidCurrency(\"AQD\");\n-        testInvalidCurrency(\"US$\");\n-        testInvalidCurrency(\"\\u20AC\");\n-    }\n++    @Nested\n++    class CodeValidationTests {\n++        \/\/ Calling getInstance() on equal currency codes should return equal currencies\n++        @ParameterizedTest\n++        @MethodSource(\"validCurrencies\")\n++        public void validCurrencyTest(String currencyCode) {\n++            compareCurrencies(currencyCode);\n++        }\n@@ -73,5 +76,10 @@\n-    static void testValidCurrency(String currencyCode) {\n-        Currency currency1 = Currency.getInstance(currencyCode);\n-        Currency currency2 = Currency.getInstance(currencyCode);\n-        if (currency1 != currency2) {\n-            throw new RuntimeException(\"Didn't get same instance for same currency code\");\n++        private static Stream<String> validCurrencies() {\n++            return Stream.of(\"USD\", \"EUR\", \"GBP\", \"JPY\", \"CNY\", \"CHF\");\n++        }\n++\n++        \/\/ Calling getInstance() with an invalid currency code should throw an IAE\n++        @ParameterizedTest\n++        @MethodSource(\"invalidCurrencies\")\n++        public void invalidCurrencyTest(String currencyCode) {\n++            assertThrows(IllegalArgumentException.class, () ->\n++                    Currency.getInstance(currencyCode), \"getInstance() did not throw IAE\");\n@@ -79,2 +87,3 @@\n-        if (!currency1.getCurrencyCode().equals(currencyCode)) {\n-            throw new RuntimeException(\"Currency code changed\");\n++\n++        private static Stream<String> invalidCurrencies() {\n++            return Stream.of(\"AQD\", \"US$\", \"\\u20AC\");\n@@ -84,6 +93,8 @@\n-    static void testInvalidCurrency(String currencyCode) {\n-        boolean gotException = false;\n-        try {\n-            Currency currency = Currency.getInstance(currencyCode);\n-        } catch (IllegalArgumentException e) {\n-            gotException = true;\n+\n++    @Nested\n++    class FundsCodesTests {\n++        \/\/ Calling getInstance() on equal currency codes should return equal currencies\n++        @ParameterizedTest\n++        @MethodSource(\"fundsCodes\")\n++        public void validCurrencyTest(String currencyCode) {\n++            compareCurrencies(currencyCode);\n@@ -91,2 +102,25 @@\n-        if (!gotException) {\n-            throw new RuntimeException(\"didn't get specified exception\");\n++\n++        \/\/ Verify a currency has the expected fractional digits\n++        @ParameterizedTest\n++        @MethodSource(\"fundsCodes\")\n++        public void fractionDigitTest(String currencyCode, int expectedFractionDigits) {\n++            compareFractionDigits(currencyCode, expectedFractionDigits);\n++        }\n++\n++        \/\/ Verify a currency has the expected numeric code\n++        @ParameterizedTest\n++        @MethodSource(\"fundsCodes\")\n++        public void numericCodeTest(String currencyCode, int ignored, int expectedNumeric) {\n++            int numeric = Currency.getInstance(currencyCode).getNumericCode();\n++            assertEquals(numeric, expectedNumeric, String.format(\n++                    \"Wrong numeric code for currency %s, expected %s, got %s\",\n++                    currencyCode, expectedNumeric, numeric));\n++        }\n++\n++        private static Stream<Arguments> fundsCodes() {\n++            return Stream.of(\n++                    Arguments.of(\"BOV\", 2, 984), Arguments.of(\"CHE\", 2, 947),\n++                    Arguments.of(\"CHW\", 2, 948), Arguments.of(\"CLF\", 4, 990),\n++                    Arguments.of(\"COU\", 2, 970), Arguments.of(\"MXV\", 2, 979),\n++                    Arguments.of(\"USN\", 2, 997), Arguments.of(\"UYI\", 0, 940)\n++            );\n@@ -96,1 +130,3 @@\n-    static void testLocaleMapping() {\n++    @Nested\n++    class LocaleMappingTests {\n++\n@@ -99,25 +135,19 @@\n-        Locale[] locales = Locale.getAvailableLocales();\n-        int goodCountries = 0;\n-        int ownCurrencies = 0;\n-        for (int i = 0; i < locales.length; i++) {\n-            Locale locale = locales[i];\n-            String ctryCode = locale.getCountry();\n-            int ctryLength = ctryCode.length();\n-            if (ctryLength == 0 ||\n-                ctryLength == 3 || \/\/ UN M.49 code\n-                ctryCode.matches(\"AA|Q[M-Z]|X[A-JL-Z]|ZZ\" + \/\/ user defined codes, excluding \"XK\" (Kosovo)\n-                                 \"AC|CP|DG|EA|EU|FX|IC|SU|TA|UK\")) { \/\/ exceptional reservation codes\n-                boolean gotException = false;\n-                try {\n-                    Currency.getInstance(locale);\n-                } catch (IllegalArgumentException e) {\n-                    gotException = true;\n-                }\n-                if (!gotException) {\n-                    throw new RuntimeException(\"didn't get specified exception\");\n-                }\n-            } else {\n-                goodCountries++;\n-                Currency currency = Currency.getInstance(locale);\n-                if (currency.getCurrencyCode().indexOf(locale.getCountry()) == 0) {\n-                    ownCurrencies++;\n++        @Test\n++        public void localeMappingTest() {\n++            Locale[] locales = Locale.getAvailableLocales();\n++            int goodCountries = 0;\n++            int ownCurrencies = 0;\n++            for (Locale locale : locales) {\n++                String ctryCode = locale.getCountry();\n++                int ctryLength = ctryCode.length();\n++                if (ctryLength == 0 ||\n++                        ctryLength == 3 || \/\/ UN M.49 code\n++                        ctryCode.matches(\"AA|Q[M-Z]|X[A-JL-Z]|ZZ\" + \/\/ user defined codes, excluding \"XK\" (Kosovo)\n++                                \"AC|CP|DG|EA|EU|FX|IC|SU|TA|UK\")) { \/\/ exceptional reservation codes\n++                    assertThrows(IllegalArgumentException.class, () -> Currency.getInstance(locale), \"Did not throw IAE\");\n++                } else {\n++                    goodCountries++;\n++                    Currency currency = Currency.getInstance(locale);\n++                    if (currency.getCurrencyCode().indexOf(locale.getCountry()) == 0) {\n++                        ownCurrencies++;\n++                    }\n@@ -126,0 +156,5 @@\n++            System.out.println(\"Countries tested: \" + goodCountries +\n++                    \", own currencies: \" + ownCurrencies);\n++            if (ownCurrencies < (goodCountries \/ 2 + 1)) {\n++                throw new RuntimeException(\"suspicious: not enough countries have their own currency.\");\n++            }\n@@ -127,4 +162,6 @@\n-        System.out.println(\"Countries tested: \" + goodCountries +\n-                \", own currencies: \" + ownCurrencies);\n-        if (ownCurrencies < (goodCountries \/ 2 + 1)) {\n-            throw new RuntimeException(\"suspicious: not enough countries have their own currency.\");\n++\n++        \/\/ Check an invalid country code\n++        @Test\n++        public void invalidCountryTest() {\n++            assertThrows(IllegalArgumentException.class, ()->\n++                    Currency.getInstance(Locale.of(\"\", \"EU\")), \"Did not throw IAE\");\n@@ -132,6 +169,9 @@\n-\n-        \/\/ check a few countries that don't change their currencies too often\n-        String[] country1 = {\"US\", \"CA\", \"JP\", \"CN\", \"SG\", \"CH\"};\n-        String[] currency1 = {\"USD\", \"CAD\", \"JPY\", \"CNY\", \"SGD\", \"CHF\"};\n-        for (int i = 0; i < country1.length; i++) {\n-            checkCountryCurrency(country1[i], currency1[i]);\n++        \/\/ Ensure a selection of countries have the expected currency\n++        @ParameterizedTest\n++        @MethodSource({\"countryProvider\", \"switchedOverCountries\"})\n++        public void countryCurrencyTest(String countryCode, String expected) {\n++            Locale locale = Locale.of(\"\", countryCode);\n++            Currency currency = Currency.getInstance(locale);\n++            String code = (currency != null) ? currency.getCurrencyCode() : null;\n++            assertEquals(expected, code, generateErrMsg(\n++                    \"currency for\", locale.getDisplayCountry(), expected, code));\n","filename":"test\/jdk\/java\/util\/Currency\/CurrencyTest.java","additions":115,"deletions":75,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n","filename":"test\/jdk\/java\/util\/Currency\/ValidateISO4217.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8186801 8186751\n+ * @bug 8186801 8186751 8310631\n@@ -572,1 +572,1 @@\n-                             \"\/..\/..\/..\/..\/make\/data\/charsetmapping\");\n+            \"\/..\/..\/..\/..\/..\/make\/data\/charsetmapping\").normalize();\n@@ -574,3 +574,1 @@\n-            \/\/ not inside jdk repo, no mappings, exit silently\n-            log.println(\"Nothing done, not in a jdk repo: \");\n-            return;\n+            throw new Exception(\"charsetmapping files cannot be located in \" + dir);\n@@ -611,1 +609,2 @@\n-            if (!cs.aliases().equals(csinfo.aliases)) {\n+            if (!cs.aliases().equals(csinfo.aliases)\n+                && !csname.equals(\"GB18030\")) {  \/\/ no alias in \"charsets\" file\n@@ -628,0 +627,13 @@\n+                \/\/ Ignore these cs, as mapping files are not provided\n+                if (csinfo.csName.equals(\"x-IBM942C\") ||\n+                        csinfo.csName.equals(\"x-IBM943C\") ||\n+                        csinfo.csName.equals(\"x-IBM834\") ||\n+                        csinfo.csName.equals(\"x-IBM949C\") ||\n+                        csinfo.csName.equals(\"x-IBM964\") ||\n+                        csinfo.csName.equals(\"x-IBM29626C\"))\n+                {\n+                    log.println(\"    [**** skipped, mapping file is not provided]\");\n+                    known++;\n+                    continue;\n+                }\n+\n","filename":"test\/jdk\/sun\/nio\/cs\/TestCharsetMapping.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}