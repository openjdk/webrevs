{"files":[{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4512215 4818420 4819436\n+ * @summary Updated currency data.\n+ *\/\n+\n+import java.util.Currency;\n+import java.util.Locale;\n+\n+public class Bug4512215 {\n+\n+    public static void main(String[] args) throws Exception {\n+        testCurrencyDefined(\"XBD\", -1);\n+        testCountryCurrency(\"TJ\", \"TJS\", 2);\n+        testCountryCurrency(\"FO\", \"DKK\", 2);\n+        testCountryCurrency(\"FK\", \"FKP\", 2);\n+\n+        testCountryCurrency(\"AF\", \"AFN\", 2);    \/\/ changed from \"AFA\"\n+\n+        \/\/ Newsletter V-5 on ISO 3166-1 (2002-05-20)\n+        testCountryCurrency(\"TL\", \"USD\", 2);    \/\/ successor to TP\/TPE\n+\n+        \/\/ Newsletter V-8 on ISO 3166-1 (2003-07-23)\n+        testCountryCurrency(\"CS\", \"CSD\", 2);    \/\/ successor to YU\/YUM\n+    }\n+\n+    private static void testCountryCurrency(String country, String currencyCode,\n+            int digits) {\n+        testCurrencyDefined(currencyCode, digits);\n+        Currency currency = Currency.getInstance(new Locale(\"\", country));\n+        if (!currency.getCurrencyCode().equals(currencyCode)) {\n+            throw new RuntimeException(\"[\" + country\n+                    + \"] expected: \" + currencyCode\n+                    + \"; got: \" + currency.getCurrencyCode());\n+        }\n+    }\n+\n+    private static void testCurrencyDefined(String currencyCode, int digits) {\n+        Currency currency = Currency.getInstance(currencyCode);\n+        if (currency.getDefaultFractionDigits() != digits) {\n+            throw new RuntimeException(\"[\" + currencyCode\n+                    + \"] expected: \" + digits\n+                    + \"; got: \" + currency.getDefaultFractionDigits());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug4512215.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 6807534\n+ * @summary check whether the default implementation of\n+ *    CurrencNameProvider.getDisplayName(String, Locale) throws appropriate\n+ *    exceptions when necessary.\n+ *\/\n+\n+import java.util.Locale;\n+import java.util.spi.CurrencyNameProvider;\n+\n+public class Bug6807534 {\n+\n+    static final CurrencyNameProvider cnp = new CurrencyNameProviderImpl();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ test for NullPointerException (currencyCode)\n+        try {\n+            cnp.getDisplayName(null, Locale.US);\n+            throwException(\"NPE was not thrown with null currencyCode\");\n+        } catch (NullPointerException npe) {}\n+\n+        \/\/ test for NullPointerException (locale)\n+        try {\n+            cnp.getDisplayName(\"USD\", null);\n+            throwException(\"NPE was not thrown with null locale\");\n+        } catch (NullPointerException npe) {}\n+\n+        \/\/ test for IllegalArgumentException (illegal currencyCode)\n+        try {\n+            cnp.getDisplayName(\"INVALID\", Locale.US);\n+            throwException(\"IllegalArgumentException was not thrown with invalid currency code\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            cnp.getDisplayName(\"inv\", Locale.US);\n+            throwException(\"IllegalArgumentException was not thrown with invalid currency code\");\n+        } catch (IllegalArgumentException iae) {}\n+\n+        \/\/ test for IllegalArgumentException (non-supported locale)\n+        try {\n+            cnp.getDisplayName(\"USD\", Locale.JAPAN);\n+            throwException(\"IllegalArgumentException was not thrown with non-supported locale\");\n+        } catch (IllegalArgumentException iae) {}\n+    }\n+\n+    static void throwException(String msg) {\n+        throw new RuntimeException(\"test failed. \"+msg);\n+    }\n+\n+    static class CurrencyNameProviderImpl extends CurrencyNameProvider {\n+        \/\/ dummy implementation\n+        public String getSymbol(String currencyCode, Locale locale) {\n+            return \"\";\n+        }\n+\n+        public Locale[] getAvailableLocales() {\n+            Locale[] avail = new Locale[1];\n+            avail[0] = Locale.US;\n+            return avail;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug6807534.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8154295\n+ * @summary Check getNumericCodeAsString() method which returns numeric code as a 3 digit String.\n+ *\/\n+\n+import java.util.Currency;\n+\n+public class Bug8154295 {\n+\n+    public static void main(String[] args) {\n+\n+        String numericCode = Currency.getInstance(\"AFA\").getNumericCodeAsString();\n+        if (!numericCode.equals(\"004\")) { \/\/should return \"004\" (a 3 digit string)\n+           throw new RuntimeException(\"[Expected 004, \"\n+                + \"found \"+numericCode+\" for AFA]\");\n+        }\n+\n+        numericCode = Currency.getInstance(\"AUD\").getNumericCodeAsString();\n+        if (!numericCode.equals(\"036\")) { \/\/should return \"036\" (a 3 digit string)\n+            throw new RuntimeException(\"[Expected 036, \"\n+                + \"found \"+numericCode+\" for AUD]\");\n+        }\n+\n+        numericCode = Currency.getInstance(\"USD\").getNumericCodeAsString();\n+        if (!numericCode.equals(\"840\")) {\/\/ should return \"840\" (a 3 digit string)\n+            throw new RuntimeException(\"[Expected 840, \"\n+                + \"found \"+numericCode+\" for USD]\");\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/Bug8154295.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}