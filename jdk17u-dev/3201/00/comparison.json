{"files":[{"patch":"@@ -721,1 +721,0 @@\n-javax\/swing\/PopupFactory\/6276087\/NonOpaquePopupMenuTest.java 8065099,8208565 macosx-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Romain Guy\n@@ -31,4 +30,10 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-import javax.swing.*;\n+import java.awt.Point;\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n@@ -39,1 +44,1 @@\n-public class NonOpaquePopupMenuTest extends JFrame {\n+public class NonOpaquePopupMenuTest {\n@@ -42,0 +47,1 @@\n+    private static JFrame frame;\n@@ -43,0 +49,2 @@\n+    private volatile static Point p;\n+    private volatile static Dimension size;\n@@ -44,2 +52,3 @@\n-    public NonOpaquePopupMenuTest() {\n-        getContentPane().setBackground(java.awt.Color.RED);\n+    private static void createUI() {\n+        frame = new JFrame();\n+        frame.getContentPane().setBackground(java.awt.Color.RED);\n@@ -50,1 +59,1 @@\n-        setJMenuBar(menuBar);\n+        frame.setJMenuBar(menuBar);\n@@ -55,3 +64,3 @@\n-        setSize(new Dimension(640, 480));\n-        setLocationRelativeTo(null);\n-        setVisible(true);\n+        frame.setSize(new Dimension(640, 480));\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n@@ -62,0 +71,2 @@\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n@@ -64,15 +75,6 @@\n-            System.out.println(lookAndFeelInfo.getClassName());\n-            if ( AQUALAF == lookAndFeelInfo.getClassName()) {\n-                System.out.println(\"This test scenario is not applicable for\" +\n-                        \" Aqua LookandFeel and hence skipping the validation\");\n-                continue;\n-            }\n-            setLookAndFeel(lookAndFeelInfo.getClassName());\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(250);\n-\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-\n-                @Override\n-                public void run() {\n-                    new NonOpaquePopupMenuTest();\n+            try {\n+                System.out.println(lookAndFeelInfo.getClassName());\n+                if ( AQUALAF == lookAndFeelInfo.getClassName()) {\n+                    System.out.println(\"This test scenario is not applicable for\" +\n+                            \" Aqua LookandFeel and hence skipping the validation\");\n+                    continue;\n@@ -80,1 +82,4 @@\n-            });\n+                robot.delay(1000);\n+                setLookAndFeel(lookAndFeelInfo.getClassName());\n+\n+                SwingUtilities.invokeAndWait(() -> createUI());\n@@ -82,1 +87,2 @@\n-            robot.waitForIdle();\n+                robot.waitForIdle();\n+                robot.delay(1000);\n@@ -84,4 +90,8 @@\n-            Point p = getMenuClickPoint();\n-            robot.mouseMove(p.x, p.y);\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    p = fileMenu.getLocationOnScreen();\n+                    size = fileMenu.getSize();\n+                });\n+                robot.mouseMove(p.x + size.width \/ 2, p.y + size.height \/ 2);\n+                robot.waitForIdle();\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -89,1 +99,1 @@\n-            robot.waitForIdle();\n+                robot.waitForIdle();\n@@ -91,2 +101,9 @@\n-            if (isParentOpaque()) {\n-                throw new RuntimeException(\"Popup menu parent is opaque\");\n+                if (isParentOpaque()) {\n+                    throw new RuntimeException(\"Popup menu parent is opaque\");\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n@@ -110,19 +127,0 @@\n-\n-    private static Point getMenuClickPoint() throws Exception {\n-        final Point[] result = new Point[1];\n-\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-\n-            @Override\n-            public void run() {\n-                Point p = fileMenu.getLocationOnScreen();\n-                Dimension size = fileMenu.getSize();\n-\n-                result[0] = new Point(p.x + size.width \/ 2,\n-                        p.y + size.height \/ 2);\n-            }\n-        });\n-\n-        return result[0];\n-\n-    }\n","filename":"test\/jdk\/javax\/swing\/PopupFactory\/6276087\/NonOpaquePopupMenuTest.java","additions":54,"deletions":56,"binary":false,"changes":110,"status":"modified"}]}