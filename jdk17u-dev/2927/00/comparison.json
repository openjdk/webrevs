{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,12 +24,0 @@\n-\/* @test\n- * @summary Unit test for formatter\n- * @bug 4906370 4962433 4973103 4989961 5005818 5031150 4970931 4989491 5002937\n- *      5005104 5007745 5061412 5055180 5066788 5088703 6317248 6318369 6320122\n- *      6344623 6369500 6534606 6282094 6286592 6476425 5063507 6469160 6476168\n- *      8059175 8204229\n- *\n- * @run shell\/timeout=240 Basic.sh\n- *\/\n-\n-import static java.lang.System.out;\n-\n@@ -48,4 +36,5 @@\n-        String s = \"'\" + fs + \"': \" + ex.getName() + \" not thrown\";\n-        if (first == null)\n-            setFirst(s);\n-        System.err.println(\"FAILED: \" + s);\n+        String message = \"'%s': %s not thrown\".formatted(fs, ex.getName());\n+        if (first == null) {\n+            setFirst(message);\n+        }\n+        System.err.printf(\"FAILED: %s%n\", message);\n@@ -56,4 +45,5 @@\n-        String s = \"'\" + fs + \"': Expected '\" + exp + \"', got '\" + got + \"'\";\n-        if (first == null)\n-            setFirst(s);\n-        System.err.println(\"FAILED: \" + s);\n+        String message = \"'%s': Expected '%s', got '%s'\".formatted(fs, exp, got);\n+        if (first == null) {\n+            setFirst(message);\n+        }\n+        System.err.printf(\"FAILED: %s%n\", message);\n@@ -72,1 +62,1 @@\n-        if (!exp.equals(got))\n+        if (!exp.equals(got)) {\n@@ -74,1 +64,1 @@\n-        else\n+        } else {\n@@ -76,0 +66,1 @@\n+        }\n@@ -97,1 +88,0 @@\n-\n@@ -100,5 +90,8 @@\n-        if (fail != 0)\n-            throw new RuntimeException((fail + pass) + \" tests: \"\n-                                       + fail + \" failure(s), first\", first);\n-        else\n-            out.println(\"all \" + (fail + pass) + \" tests passed\");\n+        if (fail != 0) {\n+            var tests_message = \"%d tests: %d failure(s)%n\".formatted(fail + pass, fail);\n+            var trace_message = \"Traceback of the first error located\";\n+            var message = \"%s %s\".formatted(tests_message, trace_message);\n+            throw new RuntimeException(message, first);\n+        } else {\n+            System.out.printf(\"All %d tests passed\", pass);\n+        }\n","filename":"test\/jdk\/java\/util\/Formatter\/Basic.java","additions":22,"deletions":29,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-#\n-# Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-EXTRAOPTS=\"--add-exports java.base\/jdk.internal.math=ALL-UNNAMED\"\n-LOCALEOPTS=\"-Djava.locale.providers=CLDR\"\n-${COMPILEJAVA}\/bin\/javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} ${EXTRAOPTS} -cp ${TESTSRC} -d . \\\n-    ${TESTSRC}\/Basic.java\n-\n-expectPass() {\n-  if [ $1 -eq 0 ]\n-  then echo \"--- passed as expected\"\n-  else\n-    echo \"--- failed\"\n-    exit $1\n-  fi\n-}\n-\n-runTest() {\n-  echo \"Testing:\" ${1}\n-  TZ=\"${1}\"; export TZ\n-  echo \"  \" $TZ\n-  ${TESTJAVA}\/bin\/java ${TESTVMOPTS} ${EXTRAOPTS} ${LOCALEOPTS} Basic\n-  expectPass $?\n-}\n-\n-runTest US\/Pacific\n-runTest Asia\/Novosibirsk\n-\n","filename":"test\/jdk\/java\/util\/Formatter\/Basic.sh","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import java.io.IOException;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+\/* @test\n+ * @summary Unit tests for formatter\n+ * @library \/test\/lib\n+ * @compile Basic.java\n+ * @compile BasicBoolean.java\n+ * @compile BasicBooleanObject.java\n+ * @compile BasicByte.java\n+ * @compile BasicByteObject.java\n+ * @compile BasicChar.java\n+ * @compile BasicCharObject.java\n+ * @compile BasicShort.java\n+ * @compile BasicShortObject.java\n+ * @compile BasicInt.java\n+ * @compile BasicIntObject.java\n+ * @compile BasicLong.java\n+ * @compile BasicLongObject.java\n+ * @compile BasicBigInteger.java\n+ * @compile BasicFloat.java\n+ * @compile BasicFloatObject.java\n+ * @compile BasicDouble.java\n+ * @compile BasicDoubleObject.java\n+ * @compile BasicBigDecimal.java\n+ * @compile BasicDateTime.java\n+ * @bug 4906370 4962433 4973103 4989961 5005818 5031150 4970931 4989491 5002937\n+ *      5005104 5007745 5061412 5055180 5066788 5088703 6317248 6318369 6320122\n+ *      6344623 6369500 6534606 6282094 6286592 6476425 5063507 6469160 6476168\n+ *      8059175 8204229\n+ *\n+ * @run junit BasicTestLauncher\n+ *\/\n+public class BasicTestLauncher {\n+    \/\/ Locale flag for testJVM\n+    private static final String JAVA_OPTS = \"-Djava.locale.providers=CLDR\";\n+    \/\/ Test class\n+    private static final String TEST_CLASS = \"Basic\";\n+\n+    \/**\n+     * Executes Formatter Basic tests\n+     * @param timeZone the time zone to run tests against\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"US\/Pacific\", \"Asia\/Novosibirsk\" })\n+    void testTimeZone(String timeZone) throws IOException{\n+        System.out.printf(\"$$$ Testing against %s!%n\", timeZone);\n+        OutputAnalyzer output = RunTest(timeZone);\n+        CheckTest(output);\n+        System.out.printf(\"$$$ %s passed as expected!%n\", timeZone);\n+    }\n+\n+    \/**\n+     * Creates and runs the testJVM process using Basic class\n+     * @param timeZone the time zone to be set in the testJVM environment\n+     *\/\n+    private static OutputAnalyzer RunTest(String timeZone) throws IOException{\n+        \/\/ Build and run Basic class with correct configuration\n+        ProcessBuilder pb = ProcessTools.createTestJvm(JAVA_OPTS, TEST_CLASS);\n+        pb.environment().put(\"TZ\", timeZone);\n+        Process process = pb.start();\n+        return new OutputAnalyzer(process);\n+    }\n+\n+    \/**\n+     * Validates if the testJVM process passed all tests\n+     * @param output is an Output Analyzer for the testJVM\n+     * @throws RuntimeException for all testJVM failures\n+     *\/\n+    private static void CheckTest(OutputAnalyzer output){\n+        output.shouldHaveExitValue(0)\n+                .reportDiagnosticSummary();\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicTestLauncher.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}