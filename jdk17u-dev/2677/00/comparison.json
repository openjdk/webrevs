{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.awt.Window;\n@@ -760,0 +761,10 @@\n+    private Window getMenuInvoker() {\n+        if (invoker instanceof Window menuInvoker) {\n+            return menuInvoker;\n+        } else {\n+            return invoker == null\n+                    ? null\n+                    : SwingUtilities.getWindowAncestor(invoker);\n+        }\n+    }\n+\n@@ -801,1 +812,1 @@\n-        if(b) {\n+        if (b) {\n@@ -803,0 +814,5 @@\n+\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuInvoker());\n+            }\n+\n@@ -807,1 +823,1 @@\n-        } else if(popup != null) {\n+        } else if (popup != null) {\n@@ -809,0 +825,5 @@\n+\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeededCleanUp(getMenuInvoker());\n+            }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1886,0 +1886,9 @@\n+    public boolean isRunningOnWayland() {\n+        return false;\n+    }\n+\n+    public void dismissPopupOnFocusLostIfNeeded(Window invoker) {}\n+\n+    public void dismissPopupOnFocusLostIfNeededCleanUp(Window invoker) {}\n+\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,9 @@\n-import static java.awt.RenderingHints.*;\n+\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n+\n@@ -31,1 +39,12 @@\n-import java.awt.image.*;\n+\n+import java.awt.Window;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.DataBufferByte;\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n@@ -37,0 +56,3 @@\n+import java.util.Arrays;\n+\n+import sun.awt.X11.XBaseWindow;\n@@ -494,0 +516,87 @@\n+\n+    private static volatile Boolean isOnWayland = null;\n+\n+    @SuppressWarnings(\"removal\")\n+    public static boolean isOnWayland() {\n+        Boolean result = isOnWayland;\n+        if (result == null) {\n+            synchronized (GTK_LOCK) {\n+                result = isOnWayland;\n+                if (result == null) {\n+                    isOnWayland\n+                            = result\n+                            = AccessController.doPrivileged(\n+                            (PrivilegedAction<Boolean>) () -> {\n+                                final String display =\n+                                        System.getenv(\"WAYLAND_DISPLAY\");\n+\n+                                return display != null\n+                                        && !display.trim().isEmpty();\n+                            }\n+                    );\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isRunningOnWayland() {\n+        return isOnWayland();\n+    }\n+\n+    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n+    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n+    \/\/ will not be detected.\n+    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n+    \/\/\n+    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n+    \/\/\n+    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n+    \/\/ transfer the focus away and don't dismiss the menu\n+    \/\/ (e.g. the window's own title or the area in the side dock without\n+    \/\/ application icons).\n+    private static final WindowFocusListener waylandWindowFocusListener;\n+\n+    static {\n+        if (isOnWayland()) {\n+            waylandWindowFocusListener = new WindowAdapter() {\n+                @Override\n+                public void windowLostFocus(WindowEvent e) {\n+                    Window window = e.getWindow();\n+                    window.removeWindowFocusListener(this);\n+\n+                    \/\/ AWT\n+                    XBaseWindow.ungrabInput();\n+\n+                    \/\/ Swing\n+                    window.dispatchEvent(new UngrabEvent(window));\n+                }\n+            };\n+        } else {\n+            waylandWindowFocusListener = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dismissPopupOnFocusLostIfNeeded(Window invoker) {\n+        if (!isOnWayland()\n+                || invoker == null\n+                || Arrays\n+                    .asList(invoker.getWindowFocusListeners())\n+                    .contains(waylandWindowFocusListener)\n+        ) {\n+            return;\n+        }\n+\n+        invoker.addWindowFocusListener(waylandWindowFocusListener);\n+    }\n+\n+    @Override\n+    public void dismissPopupOnFocusLostIfNeededCleanUp(Window invoker) {\n+        if (!isOnWayland() || invoker == null) {\n+            return;\n+        }\n+\n+        invoker.removeWindowFocusListener(waylandWindowFocusListener);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":111,"deletions":2,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,7 @@\n-import java.awt.*;\n-import sun.awt.*;\n-import java.util.*;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import sun.awt.SunToolkit;\n@@ -915,1 +919,1 @@\n-    static void ungrabInput() {\n+    public static void ungrabInput() {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XBaseWindow.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,7 @@\n-import java.awt.*;\n-import java.awt.peer.*;\n-import java.awt.event.*;\n-\n-import java.awt.image.BufferedImage;\n-import java.awt.geom.Point2D;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n@@ -35,0 +36,2 @@\n+\n+import sun.awt.SunToolkit;\n@@ -37,0 +40,2 @@\n+import javax.swing.SwingUtilities;\n+\n@@ -392,0 +397,10 @@\n+    protected Window getMenuTarget() {\n+        if (target instanceof Window targetWindow) {\n+            return targetWindow;\n+        } else {\n+            return target == null\n+                    ? null\n+                    : SwingUtilities.getWindowAncestor(target);\n+        }\n+    }\n+\n@@ -408,0 +423,3 @@\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuTarget());\n+            }\n@@ -424,0 +442,3 @@\n+        if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+            sunToolkit.dismissPopupOnFocusLostIfNeededCleanUp(getMenuTarget());\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XMenuWindow.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,16 @@\n-import java.awt.*;\n-import java.awt.peer.*;\n-import java.awt.event.*;\n-\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Event;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Rectangle;\n+import java.awt.Toolkit;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+\n+import java.awt.peer.PopupMenuPeer;\n@@ -33,0 +45,1 @@\n+import sun.awt.SunToolkit;\n@@ -128,0 +141,3 @@\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuTarget());\n+            }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XPopupMenuPeer.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"}]}