{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.invoke.VarHandle;\n@@ -40,1 +40,1 @@\n-\/* @test TestMetaspacePerfCountersSerial\n+\/* @test id=Serial-64\n@@ -43,0 +43,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -50,2 +51,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n@@ -54,1 +55,1 @@\n-\/* @test TestMetaspacePerfCountersParallel\n+\/* @test id=Parallel-64\n@@ -57,0 +58,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -64,2 +66,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n@@ -68,1 +70,1 @@\n-\/* @test TestMetaspacePerfCountersG1\n+\/* @test id=G1-64\n@@ -71,0 +73,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -78,2 +81,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n@@ -82,1 +85,1 @@\n-\/* @test TestMetaspacePerfCountersShenandoah\n+\/* @test id=Shenandoah-64\n@@ -85,0 +88,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -92,2 +96,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n@@ -95,0 +99,122 @@\n+\n+\/* @test id=Epsilon-64\n+ * @bug 8014659\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Serial-32\n+ * @bug 8014659\n+ * @requires vm.gc.Serial\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Parallel-32\n+ * @bug 8014659\n+ * @requires vm.gc.Parallel\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=G1-32\n+ * @bug 8014659\n+ * @requires vm.gc.G1\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Shenandoah-32\n+ * @bug 8014659\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\n+\/* @test id=Epsilon-32\n+ * @bug 8014659\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+class PerfCounterSnapshot {\n+    private static long getMinCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".minCapacity\").longValue();\n+    }\n+\n+    private static long getCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".capacity\").longValue();\n+    }\n+\n+    private static long getMaxCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".maxCapacity\").longValue();\n+    }\n+\n+    private static long getUsed(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".used\").longValue();\n+    }\n+\n+    public long minCapacity;\n+    public long maxCapacity;\n+    public long capacity;\n+    public long used;\n+\n+    public void get(String ns) throws Exception {\n+        minCapacity = getMinCapacity(ns);\n+        maxCapacity = getMaxCapacity(ns);\n+        used = getUsed(ns);\n+        capacity = getCapacity(ns);\n+    }\n+\n+    public boolean consistentWith(PerfCounterSnapshot other) {\n+        return (minCapacity == other.minCapacity) && (maxCapacity == other.maxCapacity) &&\n+            (used == other.used) && (capacity == other.capacity);\n+    }\n+}\n+\n@@ -98,1 +224,0 @@\n-    private static final List<GarbageCollectorMXBean> gcBeans = ManagementFactoryHelper.getGarbageCollectorMXBeans();\n@@ -116,26 +241,22 @@\n-        long gcCountBefore;\n-        long gcCountAfter;\n-        long minCapacity;\n-        long maxCapacity;\n-        long capacity;\n-        long used;\n-\n-        \/\/ The perf counter values are updated during GC and to be able to\n-        \/\/ do the assertions below we need to ensure that the values are from\n-        \/\/ the same GC cycle.\n-        do {\n-            gcCountBefore = currentGCCount();\n-\n-            minCapacity = getMinCapacity(ns);\n-            maxCapacity = getMaxCapacity(ns);\n-            capacity = getCapacity(ns);\n-            used = getUsed(ns);\n-\n-            gcCountAfter = currentGCCount();\n-            assertGTE(gcCountAfter, gcCountBefore);\n-        } while(gcCountAfter > gcCountBefore);\n-\n-        assertGTE(minCapacity, 0L);\n-        assertGTE(used, minCapacity);\n-        assertGTE(capacity, used);\n-        assertGTE(maxCapacity, capacity);\n+        PerfCounterSnapshot snap1 = new PerfCounterSnapshot();\n+        PerfCounterSnapshot snap2 = new PerfCounterSnapshot();\n+\n+        final int MaxAttempts = 10;\n+\n+        for (int attempts = 0; ; attempts++) {\n+            snap1.get(ns);\n+            VarHandle.fullFence();\n+            snap2.get(ns);\n+\n+            if (snap1.consistentWith(snap2)) {\n+              \/\/ Got a consistent snapshot for examination.\n+              break;\n+            } else if (attempts == MaxAttempts) {\n+              throw new Exception(\"Failed to get stable reading of metaspace performance counters after \" + attempts + \" tries\");\n+            }\n+        }\n+\n+        assertGTE(snap1.minCapacity, 0L);\n+        assertGTE(snap1.used, snap1.minCapacity);\n+        assertGTE(snap1.capacity, snap1.used);\n+        assertGTE(snap1.maxCapacity, snap1.capacity);\n@@ -155,1 +276,2 @@\n-        long before = getUsed(ns);\n+        PerfCounterSnapshot before = new PerfCounterSnapshot();\n+        before.get(ns);\n@@ -158,1 +280,2 @@\n-        long after = getUsed(ns);\n+        PerfCounterSnapshot after = new PerfCounterSnapshot();\n+        after.get(ns);\n@@ -160,1 +283,1 @@\n-        assertGT(after, before);\n+        assertGT(after.used, before.used);\n@@ -179,24 +302,0 @@\n-\n-    private static long getMinCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".minCapacity\").longValue();\n-    }\n-\n-    private static long getCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".capacity\").longValue();\n-    }\n-\n-    private static long getMaxCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".maxCapacity\").longValue();\n-    }\n-\n-    private static long getUsed(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".used\").longValue();\n-    }\n-\n-    private static long currentGCCount() {\n-        long gcCount = 0;\n-        for (GarbageCollectorMXBean bean : gcBeans) {\n-            gcCount += bean.getCollectionCount();\n-        }\n-        return gcCount;\n-    }\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":167,"deletions":68,"binary":false,"changes":235,"status":"modified"}]}