{"files":[{"patch":"@@ -189,1 +189,0 @@\n-java\/awt\/Mixing\/MixingOnDialog.java 8225777 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-  @library ..\/regtesthelpers\n-  @build Util\n@@ -36,1 +34,1 @@\n-\/**\n+\/*\n@@ -42,10 +40,12 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import javax.swing.*;\n-import test.java.awt.regtesthelpers.Util;\n-\n-\n-\n-public class MixingOnDialog\n-{\n-    static volatile boolean heavyClicked = false;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+import javax.swing.SwingUtilities;\n+\n+public class MixingOnDialog {\n@@ -53,0 +53,2 @@\n+    static Dialog d;\n+    static volatile Button heavy;\n@@ -54,2 +56,1 @@\n-    private static void init()\n-    {\n+    private static void init() {\n@@ -57,2 +58,2 @@\n-        final Dialog d = new Dialog((Frame)null, \"Button-JButton mix test\");\n-        final Button heavy = new Button(\"  Heavyweight Button  \");\n+        d = new Dialog((Frame)null, \"Button-JButton mix test\");\n+        heavy = new Button(\"  Heavyweight Button  \");\n@@ -62,15 +63,1 @@\n-        heavy.addActionListener(new java.awt.event.ActionListener()\n-                {\n-                    public void actionPerformed(java.awt.event.ActionEvent e) {\n-                        heavyClicked = true;\n-                    }\n-                }\n-                );\n-\n-        light.addActionListener(new java.awt.event.ActionListener()\n-                {\n-                    public void actionPerformed(java.awt.event.ActionEvent e) {\n-                        lightClicked = true;\n-                    }\n-                }\n-                );\n+        light.addActionListener(e -> lightClicked = true);\n@@ -79,2 +66,2 @@\n-        heavy.setBounds(30, 30, 200, 200);\n-        light.setBounds(10, 10, 50, 50);\n+        heavy.setBounds(230, 230, 200, 200);\n+        light.setBounds(210, 210, 50, 50);\n@@ -86,1 +73,1 @@\n-        d.setBounds(50, 50, 400, 400);\n+        d.setBounds(250, 250, 400, 400);\n@@ -88,0 +75,1 @@\n+    }\n@@ -89,0 +77,2 @@\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException, AWTException {\n+        SwingUtilities.invokeAndWait(MixingOnDialog::init);\n@@ -90,4 +80,4 @@\n-        Robot robot = Util.createRobot();\n-        robot.setAutoDelay(20);\n-\n-        Util.waitForIdle(robot);\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.waitForIdle();\n+        robot.delay(500);\n@@ -101,3 +91,3 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        Util.waitForIdle(robot);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n@@ -105,8 +95,1 @@\n-        \/\/ If the buttons are correctly mixed, the test sequence\n-        \/\/ is equal to the check sequence.\n-        if (lightClicked == true) {\n-            MixingOnDialog.pass();\n-        } else {\n-            MixingOnDialog.fail(\"The lightweight component left behind the heavyweight one.\");\n-        }\n-    }\/\/End  init()\n+        SwingUtilities.invokeAndWait(() -> d.dispose());\n@@ -114,38 +97,2 @@\n-\n-\n-    \/*****************************************************\n-     * Standard Test Machinery Section\n-     * DO NOT modify anything in this section -- it's a\n-     * standard chunk of code which has all of the\n-     * synchronisation necessary for the test harness.\n-     * By keeping it the same in all tests, it is easier\n-     * to read and understand someone else's test, as\n-     * well as insuring that all tests behave correctly\n-     * with the test harness.\n-     * There is a section following this for test-\n-     * classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    \/\/ Not sure about what happens if multiple of this test are\n-    \/\/  instantiated in the same VM.  Being static (and using\n-    \/\/  static vars), it aint gonna work.  Not worrying about\n-    \/\/  it for now.\n-    public static void main( String args[] ) throws InterruptedException\n-    {\n-        mainThread = Thread.currentThread();\n-        try\n-        {\n-            init();\n-        }\n-        catch( TestPassedException e )\n-        {\n-            \/\/The test passed, so just return from main and harness will\n-            \/\/ interepret this return as a pass\n-            return;\n+        if (!lightClicked) {\n+            throw new RuntimeException(\"The lightweight component left behind the heavyweight one.\");\n@@ -153,56 +100,0 @@\n-        \/\/At this point, neither test pass nor test fail has been\n-        \/\/ called -- either would have thrown an exception and ended the\n-        \/\/ test, so we know we have multiple threads.\n-\n-        \/\/Test involves other threads, so sleep and wait for them to\n-        \/\/ called pass() or fail()\n-        try\n-        {\n-            Thread.sleep( sleepTime );\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-        }\n-        catch (InterruptedException e)\n-        {\n-            \/\/The test harness may have interrupted the test.  If so, rethrow the exception\n-            \/\/ so that the harness gets it and deals with it.\n-            if( ! testGeneratedInterrupt ) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-\n-            if ( theTestPassed == false )\n-            {\n-                throw new RuntimeException( failureMessage );\n-            }\n-        }\n-\n-    }\/\/main\n-\n-    public static synchronized void setTimeoutTo( int seconds )\n-    {\n-        sleepTime = seconds * 1000;\n-    }\n-\n-    public static synchronized void pass()\n-    {\n-        System.out.println( \"The test passed.\" );\n-        System.out.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/first check if this is executing in main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/Still in the main thread, so set the flag just for kicks,\n-            \/\/ and throw a test passed exception which will be caught\n-            \/\/ and end the test.\n-            theTestPassed = true;\n-            throw new TestPassedException();\n-        }\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n-    }\/\/pass()\n-\n-    public static synchronized void fail()\n-    {\n-        \/\/test writer didn't specify why test failed, so give generic\n-        fail( \"it just plain failed! :-)\" );\n@@ -210,24 +101,0 @@\n-\n-    public static synchronized void fail( String whyFailed )\n-    {\n-        System.out.println( \"The test failed: \" + whyFailed );\n-        System.out.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/check if this called from main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException( whyFailed );\n-        }\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\/\/fail()\n-\n-}\/\/ class MixingOnDialog\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n-{\n","filename":"test\/jdk\/java\/awt\/Mixing\/MixingOnDialog.java","additions":36,"deletions":169,"binary":false,"changes":205,"status":"modified"}]}