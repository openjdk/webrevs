{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -353,2 +354,2 @@\n-  int64_t get_java_period() const { return _java_period_millis; };\n-  int64_t get_native_period() const { return _native_period_millis; };\n+  int64_t get_java_period() const { return Atomic::load(&_java_period_millis); };\n+  int64_t get_native_period() const { return Atomic::load(&_native_period_millis); };\n@@ -415,1 +416,1 @@\n-  _java_period_millis = period_millis;\n+  Atomic::store(&_java_period_millis, period_millis);\n@@ -420,1 +421,1 @@\n-  _native_period_millis = period_millis;\n+  Atomic::store(&_native_period_millis, period_millis);\n@@ -499,2 +500,11 @@\n-    const int64_t java_period_millis = _java_period_millis == 0 ? max_jlong : MAX2<int64_t>(_java_period_millis, 1);\n-    const int64_t native_period_millis = _native_period_millis == 0 ? max_jlong : MAX2<int64_t>(_native_period_millis, 1);\n+\n+    int64_t java_period_millis = get_java_period();\n+    java_period_millis = java_period_millis == 0 ? max_jlong : MAX2<int64_t>(java_period_millis, 1);\n+    int64_t native_period_millis = get_native_period();\n+    native_period_millis = native_period_millis == 0 ? max_jlong : MAX2<int64_t>(native_period_millis, 1);\n+\n+    \/\/ If both periods are max_jlong, it implies the sampler is in the process of\n+    \/\/ disenrolling. Loop back for graceful disenroll by means of the semaphore.\n+    if (java_period_millis == max_jlong && native_period_millis == max_jlong) {\n+      continue;\n+    }\n@@ -519,1 +529,1 @@\n-      os::naked_short_sleep(sleep_to_next);\n+      os::naked_sleep(sleep_to_next);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,3 @@\n+    \/\/ Please resist the temptation to speed up the test by decreasing\n+    \/\/ the period. It is explicity set to 1100 ms to provoke the 1000 ms\n+    \/\/ threshold in the JVM for os::naked_short_sleep().\n@@ -53,1 +56,1 @@\n-            rs.enable(NATIVE_EVENT).withPeriod(Duration.ofMillis(1));\n+            rs.enable(NATIVE_EVENT).withPeriod(Duration.ofMillis(1100));\n","filename":"test\/jdk\/jdk\/jfr\/event\/sampling\/TestNative.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}