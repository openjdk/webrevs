{"files":[{"patch":"@@ -555,0 +555,15 @@\n+  \/\/ Method::clear_jmethod_ids only sets the jmethod_ids to NULL without\n+  \/\/ releasing the memory for related JNIMethodBlocks and JNIMethodBlockNodes.\n+  \/\/ This is done intentionally because native code (e.g. JVMTI agent) holding\n+  \/\/ jmethod_ids may access them after the associated classes and class loader\n+  \/\/ are unloaded. The Java Native Interface Specification says \"method ID\n+  \/\/ does not prevent the VM from unloading the class from which the ID has\n+  \/\/ been derived. After the class is unloaded, the method or field ID becomes\n+  \/\/ invalid\". In real world usages, the native code may rely on jmethod_ids\n+  \/\/ being NULL after class unloading. Hence, it is unsafe to free the memory\n+  \/\/ from the VM side without knowing when native code is going to stop using\n+  \/\/ them.\n+  if (_jmethod_ids != NULL) {\n+    Method::clear_jmethod_ids(this);\n+  }\n+\n@@ -699,14 +714,1 @@\n-  \/\/ Method::clear_jmethod_ids only sets the jmethod_ids to NULL without\n-  \/\/ releasing the memory for related JNIMethodBlocks and JNIMethodBlockNodes.\n-  \/\/ This is done intentionally because native code (e.g. JVMTI agent) holding\n-  \/\/ jmethod_ids may access them after the associated classes and class loader\n-  \/\/ are unloaded. The Java Native Interface Specification says \"method ID\n-  \/\/ does not prevent the VM from unloading the class from which the ID has\n-  \/\/ been derived. After the class is unloaded, the method or field ID becomes\n-  \/\/ invalid\". In real world usages, the native code may rely on jmethod_ids\n-  \/\/ being NULL after class unloading. Hence, it is unsafe to free the memory\n-  \/\/ from the VM side without knowing when native code is going to stop using\n-  \/\/ them.\n-  if (_jmethod_ids != NULL) {\n-    Method::clear_jmethod_ids(this);\n-  }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2245,1 +2245,1 @@\n-  if (o == NULL || o == JNIMethodBlock::_free_method || !((Metadata*)o)->is_method()) {\n+  if (o == NULL || o == JNIMethodBlock::_free_method) {\n@@ -2248,1 +2248,6 @@\n-  return o;\n+  \/\/ Method should otherwise be valid. Assert for testing.\n+  assert(is_valid_method(o), \"should be valid jmethodid\");\n+  \/\/ If the method's class holder object is unreferenced, but not yet marked as\n+  \/\/ unloaded, we need to return NULL here too because after a safepoint, its memory\n+  \/\/ will be reclaimed.\n+  return o->method_holder()->is_loader_alive() ? o : NULL;\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}