{"files":[{"patch":"@@ -91,0 +91,4 @@\n+#if[FP]\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final $type$ RELATIVE_ROUNDING_ERROR = ($type$)0.000001;\n+#end[FP]\n@@ -150,0 +154,3 @@\n+#if[FP]\n+        assertReductionArraysEquals(r, rc, a, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -160,0 +167,1 @@\n+#end[FP]\n@@ -161,0 +169,17 @@\n+#if[FP]\n+\n+    static void assertReductionArraysEquals($type$[] r, $type$ rc, $type$[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            $type$ relativeError) {\n+        int i = 0;\n+        try {\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+        }\n+     }\n+#end[FP]\n@@ -172,0 +197,3 @@\n+#if[FP]\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -182,0 +210,1 @@\n+#end[FP]\n@@ -183,0 +212,18 @@\n+#if[FP]\n+\n+    static void assertReductionArraysEqualsMasked($type$[] r, $type$ rc, $type$[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            $type$ relativeError) {\n+        int i = 0;\n+        try {\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+        }\n+     }\n+#end[FP]\n@@ -1054,0 +1101,10 @@\n+#if[FP]\n+            withToString(\"$type$[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> ($type$)0.01 + (($type$)i \/ (i + 1)));\n+            }),\n+            withToString(\"$type$[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : ($type$)0.01 + (($type$)i \/ (i + 1)));\n+            }),\n+#end[FP]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}