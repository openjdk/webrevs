{"files":[{"patch":"@@ -94,1 +94,1 @@\n-void G1Allocator::reuse_retained_old_region(G1EvacuationInfo& evacuation_info,\n+void G1Allocator::reuse_retained_old_region(G1EvacuationInfo* evacuation_info,\n@@ -123,1 +123,1 @@\n-    evacuation_info.set_alloc_regions_used_before(retained_region->used());\n+    evacuation_info->set_alloc_regions_used_before(retained_region->used());\n@@ -127,1 +127,1 @@\n-void G1Allocator::init_gc_alloc_regions(G1EvacuationInfo& evacuation_info) {\n+void G1Allocator::init_gc_alloc_regions(G1EvacuationInfo* evacuation_info) {\n@@ -143,1 +143,1 @@\n-void G1Allocator::release_gc_alloc_regions(G1EvacuationInfo& evacuation_info) {\n+void G1Allocator::release_gc_alloc_regions(G1EvacuationInfo* evacuation_info) {\n@@ -149,2 +149,2 @@\n-  evacuation_info.set_allocation_regions(survivor_region_count +\n-                                         old_gc_alloc_region()->count());\n+  evacuation_info->set_allocation_regions(survivor_region_count +\n+                                          old_gc_alloc_region()->count());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  void reuse_retained_old_region(G1EvacuationInfo& evacuation_info,\n+  void reuse_retained_old_region(G1EvacuationInfo* evacuation_info,\n@@ -108,2 +108,2 @@\n-  void init_gc_alloc_regions(G1EvacuationInfo& evacuation_info);\n-  void release_gc_alloc_regions(G1EvacuationInfo& evacuation_info);\n+  void init_gc_alloc_regions(G1EvacuationInfo* evacuation_info);\n+  void release_gc_alloc_regions(G1EvacuationInfo* evacuation_info);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -982,1 +982,5 @@\n-void G1CollectedHeap::print_hrm_post_compaction() {\n+void G1CollectedHeap::print_heap_after_full_collection() {\n+  \/\/ Post collection region logging.\n+  \/\/ We should do this after we potentially resize the heap so\n+  \/\/ that all the COMMIT \/ UNCOMMIT events are generated before\n+  \/\/ the compaction events.\n@@ -1094,11 +1098,0 @@\n-void G1CollectedHeap::print_heap_after_full_collection(G1HeapTransition* heap_transition) {\n-  \/\/ Post collection logging.\n-  \/\/ We should do this after we potentially resize the heap so\n-  \/\/ that all the COMMIT \/ UNCOMMIT events are generated before\n-  \/\/ the compaction events.\n-  print_hrm_post_compaction();\n-  heap_transition->print();\n-  print_heap_after_gc();\n-  print_heap_regions();\n-}\n-\n@@ -2569,3 +2562,0 @@\n-  \/\/ This summary needs to be printed before incrementing total collections.\n-  rem_set()->print_periodic_summary_info(\"Before GC RS summary\", total_collections());\n-\n@@ -2604,3 +2594,0 @@\n-  \/\/ We are at the end of the GC. Total collections has already been increased.\n-  rem_set()->print_periodic_summary_info(\"After GC RS summary\", total_collections() - 1);\n-\n@@ -2620,3 +2607,0 @@\n-  \/\/ Print NUMA statistics.\n-  _numa->print_statistics();\n-\n@@ -2808,1 +2792,1 @@\n-void G1CollectedHeap::calculate_collection_set(G1EvacuationInfo& evacuation_info, double target_pause_time_ms) {\n+void G1CollectedHeap::calculate_collection_set(G1EvacuationInfo* evacuation_info, double target_pause_time_ms) {\n@@ -2811,1 +2795,1 @@\n-  evacuation_info.set_collectionset_regions(collection_set()->region_length() +\n+  evacuation_info->set_collectionset_regions(collection_set()->region_length() +\n@@ -2906,0 +2890,58 @@\n+G1HeapPrinterMark::G1HeapPrinterMark(G1CollectedHeap* g1h) : _g1h(g1h), _heap_transition(g1h) {\n+  \/\/ This summary needs to be printed before incrementing total collections.\n+  _g1h->rem_set()->print_periodic_summary_info(\"Before GC RS summary\", _g1h->total_collections());\n+  _g1h->print_heap_before_gc();\n+  _g1h->print_heap_regions();\n+}\n+\n+G1HeapPrinterMark::~G1HeapPrinterMark() {\n+  _g1h->policy()->print_age_table();\n+  \/\/ not (yet) in 17u: _g1h->rem_set()->print_coarsen_stats();\n+  \/\/ We are at the end of the GC. Total collections has already been increased.\n+  _g1h->rem_set()->print_periodic_summary_info(\"After GC RS summary\", _g1h->total_collections() - 1);\n+\n+  _heap_transition.print();\n+  _g1h->print_heap_regions();\n+  _g1h->print_heap_after_gc();\n+  \/\/ Print NUMA statistics.\n+  _g1h->numa()->print_statistics();\n+}\n+\n+G1JFRTracerMark::G1JFRTracerMark(STWGCTimer* timer, GCTracer* tracer) :\n+  _timer(timer), _tracer(tracer) {\n+\n+  _timer->register_gc_start();\n+  _tracer->report_gc_start(G1CollectedHeap::heap()->gc_cause(), _timer->gc_start());\n+  G1CollectedHeap::heap()->trace_heap_before_gc(_tracer);\n+}\n+\n+G1JFRTracerMark::~G1JFRTracerMark() {\n+  G1CollectedHeap::heap()->trace_heap_after_gc(_tracer);\n+  _timer->register_gc_end();\n+  _tracer->report_gc_end(_timer->gc_end(), _timer->time_partitions());\n+}\n+\n+class G1YoungGCJFRTracerMark : public G1JFRTracerMark {\n+  G1EvacuationInfo _evacuation_info;\n+\n+  G1NewTracer* tracer() const { return (G1NewTracer*)_tracer; }\n+\n+public:\n+\n+  G1EvacuationInfo* evacuation_info() { return &_evacuation_info; }\n+\n+  G1YoungGCJFRTracerMark(STWGCTimer* gc_timer_stw, G1NewTracer* gc_tracer_stw, GCCause::Cause cause) :\n+    G1JFRTracerMark(gc_timer_stw, gc_tracer_stw), _evacuation_info() { }\n+\n+  void report_pause_type(G1GCPauseType type) {\n+    tracer()->report_young_gc_pause(type);\n+  }\n+\n+  ~G1YoungGCJFRTracerMark() {\n+    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+\n+    tracer()->report_evacuation_info(&_evacuation_info);\n+    tracer()->report_tenuring_threshold(g1h->policy()->tenuring_threshold());\n+  }\n+};\n+\n@@ -2914,2 +2956,0 @@\n-  gc_tracer_report_gc_start();\n-\n@@ -2918,4 +2958,0 @@\n-  print_heap_before_gc();\n-  print_heap_regions();\n-  trace_heap_before_gc(_gc_tracer_stw);\n-\n@@ -2947,2 +2983,0 @@\n-    G1EvacuationInfo evacuation_info;\n-\n@@ -2962,0 +2996,2 @@\n+    \/\/ JFR\n+    G1YoungGCJFRTracerMark jtm(_gc_timer_stw, _gc_tracer_stw, gc_cause());\n@@ -2966,1 +3002,1 @@\n-    G1HeapTransition heap_transition(this);\n+    G1HeapPrinterMark hpm(this);\n@@ -2998,1 +3034,1 @@\n-        calculate_collection_set(evacuation_info, target_pause_time_ms);\n+        calculate_collection_set(jtm.evacuation_info(), target_pause_time_ms);\n@@ -3006,1 +3042,1 @@\n-        pre_evacuate_collection_set(evacuation_info, &per_thread_states);\n+        pre_evacuate_collection_set(jtm.evacuation_info(), &per_thread_states);\n@@ -3015,1 +3051,1 @@\n-        post_evacuate_collection_set(evacuation_info, &rdcqs, &per_thread_states);\n+        post_evacuate_collection_set(jtm.evacuation_info(), &rdcqs, &per_thread_states);\n@@ -3034,1 +3070,1 @@\n-        _gc_tracer_stw->report_young_gc_pause(collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark));\n+        jtm.report_pause_type(collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark));\n@@ -3052,1 +3088,0 @@\n-    heap_transition.print();\n@@ -3060,4 +3095,0 @@\n-    print_heap_after_gc();\n-    print_heap_regions();\n-    trace_heap_after_gc(_gc_tracer_stw);\n-\n@@ -3069,2 +3100,0 @@\n-\n-    gc_tracer_report_gc_end(concurrent_operation_is_full_mark, evacuation_info);\n@@ -3493,1 +3522,1 @@\n-void G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo& evacuation_info, G1ParScanThreadStateSet* per_thread_states) {\n+void G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo* evacuation_info, G1ParScanThreadStateSet* per_thread_states) {\n@@ -3759,1 +3788,1 @@\n-void G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo& evacuation_info,\n+void G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo* evacuation_info,\n@@ -3780,1 +3809,1 @@\n-  post_evacuate_cleanup_2(&_preserved_marks_set, rdcqs, &evacuation_info, per_thread_states->surviving_young_words());\n+  post_evacuate_cleanup_2(&_preserved_marks_set, rdcqs, evacuation_info, per_thread_states->surviving_young_words());\n@@ -3788,4 +3817,2 @@\n-  evacuation_info.set_collectionset_used_before(collection_set()->bytes_used_before());\n-  evacuation_info.set_bytes_used(_bytes_used_during_gc);\n-\n-  policy()->print_age_table();\n+  evacuation_info->set_collectionset_used_before(collection_set()->bytes_used_before());\n+  evacuation_info->set_bytes_used(_bytes_used_during_gc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":77,"deletions":50,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+  friend class G1HeapPrinterMark;\n@@ -307,4 +308,0 @@\n-  \/\/ If the HR printer is active, dump the state of the regions in the\n-  \/\/ heap after a compaction.\n-  void print_hrm_post_compaction();\n-\n@@ -532,1 +529,1 @@\n-  void print_heap_after_full_collection(G1HeapTransition* heap_transition);\n+  void print_heap_after_full_collection();\n@@ -802,1 +799,1 @@\n-  void calculate_collection_set(G1EvacuationInfo& evacuation_info, double target_pause_time_ms);\n+  void calculate_collection_set(G1EvacuationInfo* evacuation_info, double target_pause_time_ms);\n@@ -828,2 +825,2 @@\n-  void pre_evacuate_collection_set(G1EvacuationInfo& evacuation_info, G1ParScanThreadStateSet* pss);\n-  void post_evacuate_collection_set(G1EvacuationInfo& evacuation_info,\n+  void pre_evacuate_collection_set(G1EvacuationInfo* evacuation_info, G1ParScanThreadStateSet* pss);\n+  void post_evacuate_collection_set(G1EvacuationInfo* evacuation_info,\n@@ -1469,0 +1466,1 @@\n+\n@@ -1486,0 +1484,22 @@\n+\/\/ Scoped object that performs common pre- and post-gc heap printing operations.\n+class G1HeapPrinterMark : public StackObj {\n+  G1CollectedHeap* _g1h;\n+  G1HeapTransition _heap_transition;\n+\n+public:\n+  G1HeapPrinterMark(G1CollectedHeap* g1h);\n+  ~G1HeapPrinterMark();\n+};\n+\n+\/\/ Scoped object that performs common pre- and post-gc operations related to\n+\/\/ JFR events.\n+class G1JFRTracerMark : public StackObj {\n+protected:\n+  STWGCTimer* _timer;\n+  GCTracer* _tracer;\n+\n+public:\n+  G1JFRTracerMark(STWGCTimer* timer, GCTracer* tracer);\n+  ~G1JFRTracerMark();\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -174,3 +174,0 @@\n-  _heap->print_heap_before_gc();\n-  _heap->print_heap_regions();\n-\n@@ -232,1 +229,1 @@\n-  _heap->print_heap_after_full_collection(scope()->heap_transition());\n+  _heap->print_heap_after_full_collection();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,10 @@\n+G1FullGCJFRTracerMark::G1FullGCJFRTracerMark(STWGCTimer* timer, GCTracer* tracer)\n+  : G1JFRTracerMark(timer, tracer) {\n+\n+  G1CollectedHeap::heap()->pre_full_gc_dump(_timer);\n+}\n+\n+G1FullGCJFRTracerMark::~G1FullGCJFRTracerMark() {\n+  G1CollectedHeap::heap()->post_full_gc_dump(_timer);\n+}\n+\n@@ -41,0 +51,1 @@\n+    _tracer_mark(&_timer, &_tracer),\n@@ -43,1 +54,1 @@\n-    _heap_transition(_g1h),\n+    _heap_printer(_g1h),\n@@ -46,6 +57,1 @@\n-                                 (1 - MarkSweepDeadRatio \/ 100.0) * HeapRegion::GrainWords) {\n-  _timer.register_gc_start();\n-  _tracer.report_gc_start(_g1h->gc_cause(), _timer.gc_start());\n-  _g1h->pre_full_gc_dump(&_timer);\n-  _g1h->trace_heap_before_gc(&_tracer);\n-}\n+                                 (1 - MarkSweepDeadRatio \/ 100.0) * HeapRegion::GrainWords) { }\n@@ -59,4 +65,0 @@\n-  _g1h->trace_heap_after_gc(&_tracer);\n-  _g1h->post_full_gc_dump(&_timer);\n-  _timer.register_gc_end();\n-  _tracer.report_gc_end(_timer.gc_end(), _timer.time_partitions());\n@@ -81,4 +83,0 @@\n-G1HeapTransition* G1FullGCScope::heap_transition() {\n-  return &_heap_transition;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -42,0 +42,7 @@\n+class G1FullGCJFRTracerMark : public G1JFRTracerMark {\n+public:\n+\n+  G1FullGCJFRTracerMark(STWGCTimer* timer, GCTracer* tracer);\n+  ~G1FullGCJFRTracerMark();\n+};\n+\n@@ -53,0 +60,1 @@\n+  G1FullGCJFRTracerMark   _tracer_mark;\n@@ -55,1 +63,1 @@\n-  G1HeapTransition        _heap_transition;\n+  G1HeapPrinterMark       _heap_printer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}