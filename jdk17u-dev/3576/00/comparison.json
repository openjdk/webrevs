{"files":[{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary When dumping the CDS archive, try to load VM anonymous classes to make sure they\n- *          are handled properly. Note: these are not \"anonymous inner classes\" in the Java source code,\n- *          but rather classes that are not recorded in any ClassLoaderData::dictionary(),\n- *          such as classes that are generated for Lambda expressions.\n- *          See https:\/\/blogs.oracle.com\/jrose\/anonymous-classes-in-the-vm.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @run driver AnonVmClassesDuringDump\n- *\/\n-\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class AnonVmClassesDuringDump {\n-    public static String appClasses[] = {\n-        Hello.class.getName(),\n-    };\n-    public static String agentClasses[] = {\n-        AnonVmClassesDuringDumpTransformer.class.getName(),\n-    };\n-\n-    public static String cdsDiagnosticOption = \"-XX:+AllowArchivingWithJavaAgent\";\n-\n-    public static final boolean dynamicMode =\n-        Boolean.getBoolean(System.getProperty(\"test.dynamic.cds.archive\", \"false\"));\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"AnonVmClassesDuringDumpTransformer.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"AnonVmClassesDuringDumpTransformer.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"AnonVmClassesDuringDumpApp.jar\", appClasses);\n-\n-        TestCommon.testDump(appJar, TestCommon.list(Hello.class.getName()),\n-                            \"-javaagent:\" + agentJar,\n-                            \"-XX:+UnlockDiagnosticVMOptions\", cdsDiagnosticOption,\n-                            \/\/ Set the following property to see logs for dynamically generated classes\n-                            \/\/ in STDOUT\n-                            \"-Djava.lang.invoke.MethodHandle.DUMP_CLASS_FILES=true\");\n-\n-        String prefix = \".class.load. \";\n-        \/\/ class name pattern like the following:\n-        \/\/ jdk.internal.loader.BuiltinClassLoader$$Lambda$1\/1816757085\n-        \/\/ java.lang.invoke.LambdaForm$MH\/1585787493\n-        String class_pattern = \".*Lambda([a-z0-9$]+)\/([0-9]+).*\";\n-        String suffix = \".*source: shared objects file.*\";\n-        String pattern = prefix + class_pattern + suffix;\n-        \/\/ during run time, anonymous classes shouldn't be loaded from the archive\n-        TestCommon.run(\"-cp\", appJar,\n-            \"-XX:+UnlockDiagnosticVMOptions\", cdsDiagnosticOption, Hello.class.getName())\n-            .assertNormalExit(dynamicMode ?\n-                output -> output.shouldMatch(pattern) :\n-                output -> output.shouldNotMatch(pattern));\n-\n-        \/\/ inspect the archive and make sure no anonymous class is in there\n-        TestCommon.run(\"-cp\", appJar,\n-            \"-XX:+UnlockDiagnosticVMOptions\", cdsDiagnosticOption,\n-            \"-XX:+PrintSharedArchiveAndExit\", \"-XX:+PrintSharedDictionary\", Hello.class.getName())\n-            .assertNormalExit(dynamicMode ?\n-                output -> output.shouldMatch(pattern) :\n-                output -> output.shouldNotMatch(pattern));\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/AnonVmClassesDuringDump.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.Instrumentation;\n-import java.lang.instrument.IllegalClassFormatException;\n-import java.security.ProtectionDomain;\n-\n-public class AnonVmClassesDuringDumpTransformer implements ClassFileTransformer {\n-    public byte[] transform(ClassLoader loader, String name, Class<?> classBeingRedefined,\n-                            ProtectionDomain pd, byte[] buffer) throws IllegalClassFormatException {\n-        return null;\n-    }\n-\n-    private static Instrumentation savedInstrumentation;\n-\n-    public static void premain(String agentArguments, Instrumentation instrumentation) {\n-        System.out.println(\"ClassFileTransformer.premain() is called\");\n-        instrumentation.addTransformer(new AnonVmClassesDuringDumpTransformer(), \/*canRetransform=*\/true);\n-        savedInstrumentation = instrumentation;\n-\n-        \/\/ This will create a Lambda, which will result in some Anonymous VM Classes\n-        \/\/ being generated.\n-        \/\/\n-        \/\/ Look for something like these in the STDOUT:\n-        \/\/ ----------------\n-        \/\/ ClassFileTransformer.premain() is called\n-        \/\/ Dumping class files to DUMP_CLASS_FILES\/...\n-        \/\/ dump: DUMP_CLASS_FILES\/java\/lang\/invoke\/LambdaForm$MH000.class\n-        \/\/ dump: DUMP_CLASS_FILES\/java\/lang\/invoke\/LambdaForm$MH001.class\n-        \/\/ Invoked inside a Lambda\n-        \/\/ ----------------\n-        Runnable r = () -> {\n-            System.out.println(\"Invoked inside a Lambda\");\n-        };\n-        r.run();\n-    }\n-\n-    public static Instrumentation getInstrumentation() {\n-        return savedInstrumentation;\n-    }\n-\n-    public static void agentmain(String args, Instrumentation inst) throws Exception {\n-        premain(args, inst);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/AnonVmClassesDuringDumpTransformer.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-Manifest-Version: 1.0\n-Premain-Class: AnonVmClassesDuringDumpTransformer\n-Agent-Class: AnonVmClassesDuringDumpTransformer\n-Can-Retransform-Classes: true\n-Can-Redefine-Classes: true\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/AnonVmClassesDuringDumpTransformer.mf","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"}]}