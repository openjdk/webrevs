{"files":[{"patch":"@@ -2463,0 +2463,3 @@\n+        \/\/ Set the memory dependency of the LoadVector as early as possible.\n+        \/\/ Walk up the memory chain, and ignore any StoreVector that provably\n+        \/\/ does not have any memory dependency.\n@@ -2464,4 +2467,0 @@\n-        \/\/ Identify the memory dependency for the new loadVector node by\n-        \/\/ walking up through memory chain.\n-        \/\/ This is done to give flexibility to the new loadVector node so that\n-        \/\/ it can move above independent storeVector nodes.\n@@ -2470,2 +2469,2 @@\n-          int cmp = p1.cmp(p2);\n-          if (SWPointer::not_equal(cmp) || !SWPointer::comparable(cmp)) {\n+          if (p1.not_equal(p2)) {\n+            \/\/ Either Less or Greater -> provably no overlap between the two memory regions.\n@@ -2474,1 +2473,2 @@\n-            break; \/\/ dependent memory\n+            \/\/ No proof that there is no overlap. Stop here.\n+            break;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @requires vm.compiler2.enabled\n+ * @bug 8316679\n+ * @summary In SuperWord::output, LoadVector can be moved before StoreVector, but only if it is proven to be safe.\n+ * @key randomness\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestMovingLoadBeforeStore::test*\n+ *                   -Xbatch -XX:LoopUnrollLimit=100\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM\n+ *                   compiler.loopopts.superword.TestMovingLoadBeforeStore\n+ *\/\n+\n+package compiler.loopopts.superword;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class TestMovingLoadBeforeStore {\n+    static int RANGE = 1024*64;\n+\n+    private static final Random random = Utils.getRandomInstance();\n+\n+    public static void main(String[] strArr) {\n+        byte a[] = new byte[RANGE];\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] a_res = a.clone();\n+            ref1(a_ref, a_ref, i % 2);\n+            test1(a_res, a_res, i % 2);\n+            verify(\"a in test1\", a_ref, a_res, a);\n+        }\n+    }\n+\n+    static void verify(String name, byte[] ref, byte[] res, byte[] orig) {\n+        boolean fail = false;\n+        for (int j = 0; j < ref.length; j++) {\n+            if (ref[j] != res[j]) {\n+                System.out.println(\"Wrong: \" + j + \":\" + ref[j] + \" vs \" + res[j] + \" from \" + orig[j]);\n+                fail = true;\n+            }\n+        }\n+        if (fail) {\n+            throw new RuntimeException(\"wrong result for array \" + name);\n+        }\n+    }\n+\n+    static void test1(byte[] a, byte[] b, int inv) {\n+        for (int i = 0; i < RANGE-4; i+=4) {\n+            a[i + 0]++;\n+            a[i + 1]++;\n+            a[i + 2]++;\n+            a[i + 3]++;\n+            b[inv + i + 0]++;\n+            b[inv + i + 1]++;\n+            b[inv + i + 2]++;\n+            b[inv + i + 3]++;\n+        }\n+    }\n+\n+    static void ref1(byte[] a, byte[] b, int inv) {\n+        for (int i = 0; i < RANGE-4; i+=4) {\n+            a[i + 0]++;\n+            a[i + 1]++;\n+            a[i + 2]++;\n+            a[i + 3]++;\n+            b[inv + i + 0]++;\n+            b[inv + i + 1]++;\n+            b[inv + i + 2]++;\n+            b[inv + i + 3]++;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}