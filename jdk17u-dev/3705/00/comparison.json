{"files":[{"patch":"@@ -210,0 +210,16 @@\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224,\n+            new Algorithm(\"EC\", \"SHA3-224withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256,\n+            new Algorithm(\"EC\", \"SHA3-256withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384,\n+            new Algorithm(\"EC\", \"SHA3-384withECDSA\", \"Signature\")\n+        );\n+        algorithmsMap.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512,\n+            new Algorithm(\"EC\", \"SHA3-512withECDSA\", \"Signature\")\n+        );\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/JCEMapper.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-    private static MessageDigest getDigestInstance(String algorithmURI) throws XMLSignatureException {\n+    public static MessageDigest getDigestInstance(String algorithmURI) throws XMLSignatureException {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/MessageDigestAlgorithm.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,0 +497,12 @@\n+        algorithmHash.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224, SignatureECDSA.SignatureECDSASHA3_224.class\n+        );\n+        algorithmHash.put(\n+            XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256, SignatureECDSA.SignatureECDSASHA3_256.class\n+        );\n+        algorithmHash.put(\n+                XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384, SignatureECDSA.SignatureECDSASHA3_384.class\n+        );\n+        algorithmHash.put(\n+                XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512, SignatureECDSA.SignatureECDSASHA3_512.class\n+        );\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/SignatureAlgorithm.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -773,0 +773,40 @@\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP256r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.7\",\n+                        \"a9fb57dba1eea9bc3e660a909d838d726e3bf623d52620282013481d1f6e5377\",\n+                        \"7d5a0975fc2c3057eef67530417affe7fb8055c126dc5c6ce94a4b44f330b5d9\",\n+                        \"26dc5c6ce94a4b44f330b5d9bbd77cbf958416295cf7e1ce6bccdc18ff8c07b6\",\n+                        \"8bd2aeb9cb7e57cb2c4b482ffc81b7afb9de27e1e3bd23c23a4453bd9ace3262\",\n+                        \"547ef835c3dac4fd97f8461a14611dc9c27745132ded8e545c1d54c72f046997\",\n+                        \"a9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7\",\n+                        1)\n+        );\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP384r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.11\",\n+                        \"8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b412b1da197fb71123acd3a729901d1a71874700133107ec53\",\n+                        \"7bc382c63d8c150c3c72080ace05afa0c2bea28e4fb22787139165efba91f90f8aa5814a503ad4eb04a8c7dd22ce2826\",\n+                        \"04a8c7dd22ce28268b39b55416f0447c2fb77de107dcd2a62e880ea53eeb62d57cb4390295dbc9943ab78696fa504c11\",\n+                        \"1d1c64f068cf45ffa2a63a81b7c13f6b8847a3e77ef14fe3db7fcafe0cbd10e8e826e03436d646aaef87b2e247d4af1e\",\n+                        \"8abe1d7520f9c2a45cb1eb8e95cfd55262b70b29feec5864e19c054ff99129280e4646217791811142820341263c5315\",\n+                        \"8cb91e82a3386d280f5d6f7e50e641df152f7109ed5456b31f166e6cac0425a7cf3ab6af6b7fc3103b883202e9046565\",\n+                        1)\n+        );\n+\n+        ecCurveDefinitions.add(\n+                new ECCurveDefinition(\n+                        \"brainpoolP512r1 [RFC 5639]\",\n+                        \"1.3.36.3.3.2.8.1.1.13\",\n+                        \"aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca703308717d4d9b009bc66842aecda12ae6a380e62881ff2f2d82c68528aa6056583a48f3\",\n+                        \"7830a3318b603b89e2327145ac234cc594cbdd8d3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94ca\",\n+                        \"3df91610a83441caea9863bc2ded5d5aa8253aa10a2ef1c98b9ac8b57f1117a72bf2c7b9e7c1ac4d77fc94cadc083e67984050b75ebae5dd2809bd638016f723\",\n+                        \"81aee4bdd82ed9645a21322e9c4c6a9385ed9f70b5d916c1b43b62eef4d0098eff3b1f78e2d0d48d50d1687b93b97d5f7c6d5047406a5e688b352209bcb9f822\",\n+                        \"7dde385d566332ecc0eabfa9cf7822fdf209f70024a57b1aa000c55b881f8111b2dcde494a5f485e5bca4bd88a2763aed1ca2b2fa8f0540678cd1e0f3ad80892\",\n+                        \"aadd9db8dbe9c48b3fd4e6ae33c9fc07cb308db3b3c9d20ed6639cca70330870553e5c414ca92619418661197fac10471db1d381085ddaddb58796829ca90069\",\n+                        1)\n+        );\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/ECDSAUtils.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -69,2 +69,1 @@\n-        LOG.debug(\"Created SignatureRSA using {0} and provider {1}\",\n-            algorithmID, signatureAlgorithm.getProvider());\n+        LOG.debug(\"Created SignatureRSA using {0}\", algorithmID);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureBaseRSA.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -374,0 +374,104 @@\n+    \/**\n+     * Class SignatureECDSASHA3-224\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_224 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-224\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_224() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_224(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_224;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-256\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_256 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-256\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_256() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_256(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_256;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-384\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_384 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-384\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_384() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_384(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_384;\n+        }\n+    }\n+\n+    \/**\n+     * Class SignatureECDSASHA3-512\n+     *\n+     *\/\n+    public static class SignatureECDSASHA3_512 extends SignatureECDSA {\n+\n+        \/**\n+         * Constructor SignatureECDSASHA3-512\n+         *\n+         * @throws XMLSignatureException\n+         *\/\n+        public SignatureECDSASHA3_512() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureECDSASHA3_512(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        \/** {@inheritDoc} *\/\n+        @Override\n+        public String engineGetURI() {\n+            return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA3_512;\n+        }\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureECDSA.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -35,9 +35,1 @@\n-import com.sun.org.apache.xml.internal.security.keys.content.DEREncodedKeyValue;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyInfoReference;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyName;\n-import com.sun.org.apache.xml.internal.security.keys.content.KeyValue;\n-import com.sun.org.apache.xml.internal.security.keys.content.MgmtData;\n-import com.sun.org.apache.xml.internal.security.keys.content.PGPData;\n-import com.sun.org.apache.xml.internal.security.keys.content.RetrievalMethod;\n-import com.sun.org.apache.xml.internal.security.keys.content.SPKIData;\n-import com.sun.org.apache.xml.internal.security.keys.content.X509Data;\n+import com.sun.org.apache.xml.internal.security.keys.content.*;\n@@ -53,1 +45,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy;\n@@ -91,1 +82,1 @@\n-public class KeyInfo extends SignatureElementProxy {\n+public class KeyInfo extends ElementProxy {\n@@ -234,1 +225,3 @@\n-     * Method add\n+     * Method adds public key encoded as KeyValue. If public key type is not supported by KeyValue, then\n+     * DEREncodedKeyValue is used. If public key type is not supported by DEREncodedKeyValue, then\n+     * IllegalArgumentException is thrown.\n@@ -236,1 +229,1 @@\n-     * @param pk\n+     * @param pk public key to be added to KeyInfo\n@@ -238,2 +231,12 @@\n-    public void add(PublicKey pk) {\n-        this.add(new KeyValue(getDocument(), pk));\n+    public void add(PublicKey pk)  {\n+\n+        if (KeyValue.isSupportedKeyType(pk)) {\n+            this.add(new KeyValue(getDocument(), pk));\n+            return;\n+        }\n+\n+        try {\n+            this.add(new DEREncodedKeyValue(getDocument(), pk));\n+        } catch (XMLSecurityException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n@@ -775,0 +778,1 @@\n+\n@@ -1191,0 +1195,6 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public String getBaseNamespace() {\n+        return Constants.SignatureSpecNS;\n+    }\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/KeyInfo.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -44,1 +44,4 @@\n-    private static final String[] supportedKeyTypes = { \"RSA\", \"DSA\", \"EC\"};\n+    private static final String[] supportedKeyTypes = { \"RSA\", \"DSA\", \"EC\",\n+            \"DiffieHellman\", \"DH\", \"XDH\", \"X25519\", \"X448\",\n+            \"EdDSA\", \"Ed25519\", \"Ed448\",\n+            \"RSASSA-PSS\"};\n@@ -147,1 +150,0 @@\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/DEREncodedKeyValue.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n- *\n@@ -123,0 +122,14 @@\n+    \/**\n+     * Verifies that the XML KeyValue encoding is supported for the given key type. If the\n+     * encoding is supported, it returns true else false.\n+     *\n+     * @return true if the public key has a KeyValue encoding, false otherwise.\n+     *\/\n+    public static boolean isSupportedKeyType(PublicKey publicKey) {\n+\n+        return publicKey instanceof java.security.interfaces.DSAPublicKey\n+                || publicKey instanceof java.security.interfaces.RSAPublicKey\n+                || publicKey instanceof java.security.interfaces.ECPublicKey;\n+\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/KeyValue.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -94,0 +94,39 @@\n+    \/* Supported curve brainpoolP256r1 *\/\n+    private static final Curve BRAINPOOLP256R1 = initializeCurve(\n+            \"brainpoolP256r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.7\",\n+            \"A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377\",\n+            \"7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9\",\n+            \"26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6\",\n+            \"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262\",\n+            \"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997\",\n+            \"A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7\",\n+            1\n+    );\n+\n+    \/* Supported curve brainpoolP384r1 *\/\n+    private static final Curve BRAINPOOLP384R1 = initializeCurve(\n+            \"brainpoolP384r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.11\",\n+            \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53\",\n+            \"7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826\",\n+            \"04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11\",\n+            \"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E\",\n+            \"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315\",\n+            \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565\",\n+            1\n+    );\n+\n+    \/* Supported curve brainpoolP512r1 *\/\n+    private static final Curve BRAINPOOLP512R1 = initializeCurve(\n+            \"brainpoolP512r1 [RFC 5639]\",\n+            \"1.3.36.3.3.2.8.1.1.13\",\n+            \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3\",\n+            \"7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA\",\n+            \"3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723\",\n+            \"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822\",\n+            \"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892\",\n+            \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069\",\n+            1\n+    );\n+\n@@ -267,1 +306,7 @@\n-        } else {\n+        } else if (matchCurve(params, BRAINPOOLP256R1)) {\n+            match = BRAINPOOLP256R1;\n+        } else if (matchCurve(params, BRAINPOOLP384R1)) {\n+            match = BRAINPOOLP384R1;\n+        } else if (matchCurve(params, BRAINPOOLP512R1)) {\n+            match = BRAINPOOLP512R1;\n+        }else {\n@@ -335,0 +380,6 @@\n+        } else if (oid.equals(BRAINPOOLP256R1.getObjectId())) {\n+            return BRAINPOOLP256R1;\n+        } else if (oid.equals(BRAINPOOLP384R1.getObjectId())) {\n+            return BRAINPOOLP384R1;\n+        } else if (oid.equals(BRAINPOOLP512R1.getObjectId())) {\n+            return BRAINPOOLP512R1;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/keyvalues\/ECKeyValue.java","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1,198 +1,198 @@\n-#\r\n-#\r\n-#    Licensed to the Apache Software Foundation (ASF) under one\r\n-#    or more contributor license agreements. See the NOTICE file\r\n-#    distributed with this work for additional information\r\n-#    regarding copyright ownership. The ASF licenses this file\r\n-#    to you under the Apache License, Version 2.0 (the\r\n-#    \"License\"); you may not use this file except in compliance\r\n-#    with the License. You may obtain a copy of the License at\r\n-#\r\n-#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\r\n-#\r\n-#    Unless required by applicable law or agreed to in writing,\r\n-#    software distributed under the License is distributed on an\r\n-#    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-#    KIND, either express or implied. See the License for the\r\n-#    specific language governing permissions and limitations\r\n-#    under the License.\r\n-#\r\n-#\r\n-\r\n-algorithm.alreadyRegistered = URI {0} wurde bereits an die Klasse {1} gebunden\r\n-algorithm.classDoesNotExist = Kann URI {0} nicht f\\u00fcr Klasse {1} registrieren weil sie nicht existiert\r\n-algorithm.ClassDoesNotExist = Klasse {0} existiert nicht\r\n-algorithm.extendsWrongClass = Kann URI {0} nicht f\\u00fcr Klasse {1} registrieren weil sie nicht von {2} abgeleitet ist\r\n-algorithms.CannotUseAlgorithmParameterSpecOnDSA = AlgorithmParameterSpec kann nicht f\\u00fcr DSA Signaturen benutzt werden.\r\n-algorithms.CannotUseAlgorithmParameterSpecOnRSA = AlgorithmParameterSpec kann nicht f\\u00fcr RSA Signaturen benutzt werden.\r\n-algorithms.CannotUseSecureRandomOnMAC = SecureRandom kann nicht f\\u00fcr MAC's angewandt werden.\r\n-algorithms.HMACOutputLengthMax = HMACOutputLength darf nicht grosser als {0} sein\r\n-algorithms.HMACOutputLengthMin = HMACOutputLength darf nicht kleiner als {0} sein\r\n-algorithms.HMACOutputLengthOnlyForHMAC = Die HMACOutputLength kann nur bei HMAC integrit\\u00e4ts Algorithmen angegeben werden\r\n-algorithms.MissingRSAPSSParams = RSAPSSParams is a required Element for http:\/\/www.w3.org\/2007\/05\/xmldsig-more#rsa-pss\r\n-algorithms.NoSuchAlgorithm = Der Algorithmus {0} ist nicht verf\\u00fcgbar.\r\n-algorithms.NoSuchAlgorithm = Der Algorithmus {0} ist nicht verf\\u00fcgbar. Original Nachricht war\\: {1}\r\n-algorithms.NoSuchMap = Algorithmus URI \"{0}\" konnte auf keinen JCE Algorithmus gemappt werden\r\n-algorithms.NoSuchProvider = Der angegebene Provider {0} existiert nicht. Original Nachricht war\\: {1}\r\n-algorithms.operationOnlyVerification = Ein \\u00f6ffentlicher Schl\\u00fcssel (public key) kann nur zur Verifizierung einer Signatur verwendet werden.\r\n-algorithms.WrongKeyForThisOperation = Der angegebene Schl\\u00fcssel-Typ kann nicht f\\u00fcr diese Operation verwendet werden. Angegeben wurde {0} aber ein {1} wird ben\\u00f6tigt.\r\n-attributeValueIllegal = Das Attribut {0} hat den Wert {1} muss aber {2} sein.\r\n-c14n.Canonicalizer.Exception = Fehler w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\r\n-c14n.Canonicalizer.IllegalNode = Unzul\\u00e4ssiger NodeType {0}, NodeName lautete {1}\r\n-c14n.Canonicalizer.NoSuchCanonicalizer = Kein Kanonisierer mit dem URI {0} gefunden\r\n-c14n.Canonicalizer.ParserConfigurationException = ParserConfigurationException w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\r\n-c14n.Canonicalizer.RelativeNamespace = Das Element {0} hat einen relativen Namespace: {1}=\"{2}\"\r\n-c14n.Canonicalizer.SAXException = SAXException w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\r\n-c14n.Canonicalizer.TraversalNotSupported = Das DOM Dokument unterst\\u00fctzt keine Traversal {0}\r\n-c14n.Canonicalizer.UnsupportedEncoding = Nicht unterst\\u00fctzte Kodierung {0}\r\n-c14n.Canonicalizer.UnsupportedOperation = Der Kanonisierer unterst\\u00fctzt diese Operation nicht\r\n-c14n.XMLUtils.circumventBug2650forgotten = Die Baumstruktur wurde nicht vorbereitet f\\u00fcr die Kanonisierung mit XMLUtils\\#circumventBug2650(Document)\r\n-certificate.noSki.lowVersion = Das Zertifikat dard kein SubjectKeyIdentifier enthalten da es nur ein X509v{0} ist\r\n-certificate.noSki.notOctetString = Der SubjectKeyIdentifier des Zertifikates ist kein \"OctetString\"\r\n-certificate.noSki.null = Das Zertifikat enth\\u00e4lt kein SubjectKeyIdentifier\r\n-defaultNamespaceCannotBeSetHere = Standard Namespace kann hier nicht gesetzt werden\r\n-ElementProxy.nullElement = Kann keinen ElementProxy aus einem null Argument erzeugen\r\n-empty = {0}\r\n-encryption.algorithmCannotBeUsedForEncryptedData = encryption.algorithmCannotBeUsedForEncryptedData {0}\r\n-encryption.algorithmCannotEatInitParams = encryption.algorithmCannotEatInitParams\r\n-encryption.algorithmCannotEncryptDecrypt = encryption.algorithmCannotEncryptDecrypt\r\n-encryption.algorithmCannotWrapUnWrap = encryption.algorithmCannotWrapUnWrap\r\n-encryption.ExplicitKeySizeMismatch = Das xenc\\:KeySize Element fordert eine Schl\\u00fcssel-L\\u00e4nge von {0} bits aber der Algorithmus besitzt {1} bits\r\n-encryption.nonceLongerThanDecryptedPlaintext = Das angegebene \"Nonce\" ist l\\u00e4nger als der verf\\u00fcgbare Plaintext.\r\n-encryption.RSAOAEP.dataHashWrong = Falscher Hash-Wert\r\n-encryption.RSAOAEP.dataStartWrong = Falscher Start Input {0}\r\n-encryption.RSAOAEP.dataTooShort = Zu wenig Input\r\n-encryption.RSAPKCS15.blockTruncated = Block abgeschnitten\r\n-encryption.RSAPKCS15.noDataInBlock = Im Block sind keine Daten enthalten\r\n-encryption.RSAPKCS15.unknownBlockType = Unbekannter Block Typ\r\n-encryption.nokey = Es ist kein verschl\\u00fcsselungs Schl\\u00fcssel geladen und es konnte kein Schl\\u00fcssel mit Hilfe der \"key resolvers\" gefunden werden.\r\n-endorsed.jdk1.4.0 = Leider scheint niemand unsere Installations-Anleitung zu lesen, deshalb m\\u00fcssen wir es \\u00fcber die Exception machen\\: Du hast den \"endorsing\" Mechanismus vom JDK 1.4 nicht richtig angewandt. Schaue unter <http\\:\/\/xml.apache.org\/security\/Java\/installation.html> nach wie man das Problem l\\u00f6st.\r\n-errorMessages.InvalidDigestValueException = Ung\\u00fcltige Signatur\\: Referen-Validierung fehlgeschlagen.\r\n-errorMessages.InvalidSignatureValueException = Ung\\u00fcltige Signatur\\: Core Validierung fehlgeschlagen.\r\n-errorMessages.IOException = Datei oder Resource kann nicht gelesen werden.\r\n-errorMessages.MissingKeyFailureException = Verifizierung fehlgeschlagen, weil der \\u00f6ffentliche Schl\\u00fcssel (public key) nicht verf\\u00fcgbar ist. Resourcen via addResource() hinzuf\\u00fcgen und erneut versuchen.\r\n-errorMessages.MissingResourceFailureException = Verifizierung fehlgeschlagen, weil Resourcen nicht verf\\u00fcgbar sind. Resourcen via addResource() hinzuf\\u00fcgen und erneut versuchen.\r\n-errorMessages.NoSuchAlgorithmException = Unbekannter Algorithmus {0}\r\n-errorMessages.NotYetImplementedException = Funktionalit\\u00e4t noch nicht implementiert.\r\n-errorMessages.XMLSignatureException = Verifizierung aus unbekanntem Grund fehlgeschlagen.\r\n-decoding.divisible.four = It should be divisible by four\r\n-decoding.general = Fehler beim Decodieren\r\n-FileKeyStorageImpl.addToDefaultFromRemoteNotImplemented = Methode addToDefaultFromRemote() wurde noch nicht implementiert.\r\n-FileKeyStorageImpl.NoCert.Context = Kein X509-Zertifikat mit Kontext {0} gefunden\r\n-FileKeyStorageImpl.NoCert.IssNameSerNo = Kein X509-Zertifikat mit IssuerName {0} und serial number {1} gefunden\r\n-FileKeyStorageImpl.NoCert.SubjName = Kein X509-Zertifikat mit SubjectName {0} gefunden\r\n-generic.dontHaveConstructionElement = Konstruktions-Element fehlt\r\n-generic.EmptyMessage = {0}\r\n-generic.NotYetImplemented = {0} Leider noch nicht implementiert ;-((\r\n-java.security.InvalidKeyException = Ung\\u00fcltiger Schl\\u00fcssel\r\n-java.security.NoSuchProviderException = Unbekannter oder nicht unterst\\u00fctzter Provider\r\n-java.security.UnknownKeyType = Unbekannter oder nicht unterst\\u00fctzter Schl\\u00fcssel-Typ {0}\r\n-KeyInfo.error = Error loading Key Info\r\n-KeyInfo.needKeyResolver = Es m\\u00fcssen mehrere KeyResolver registriert sein\r\n-KeyInfo.nokey = Kann keinen Schl\\u00fcssel aus {0} gewinnen\r\n-KeyInfo.noKey = Kann keinen \\u00f6ffentlichen Schl\\u00fcssel finden\r\n-KeyInfo.wrongNumberOfObject = Ben\\u00f6tige {0} keyObjects\r\n-KeyInfo.wrongUse = Dieses Objekt wird verwendet, um {0} zu gewinnen\r\n-keyResolver.alreadyRegistered = Die Klasse {1} wurde bereits registriert f\\u00fcr {0}\r\n-KeyResolver.needStorageResolver = Es wird ein StorageResolver ben\\u00f6tigt um ein Zertifikat aus {0} zu holen\r\n-KeyResoverSpiImpl.cannotGetCert = Cannot get the Certificate that include or in {1} in implement class {0}\r\n-KeyResoverSpiImpl.elementGeneration = Cannot make {1} element in implement class {0}\r\n-KeyResoverSpiImpl.getPoublicKey = Cannot get the public key from implement class {0}\r\n-KeyResoverSpiImpl.InvalidElement = Cannot set (2) Element in implement class {0}\r\n-KeyResoverSpiImpl.keyStore = KeyStorage Fehler in der implementierenden Klasse {0}\r\n-KeyResoverSpiImpl.need.Element = Es wird der Typ {1} ben\\u00f6tigt in der implementierenden Klasse {0}\r\n-KeyResoverSpiImpl.wrongCRLElement = Cannot make CRL from {1} in implement class {0}\r\n-KeyResoverSpiImpl.wrongKeyObject =  Need {1} type of KeyObject for generation Element in implement class{0}\r\n-KeyResoverSpiImpl.wrongNumberOfObject = Need {1} keyObject in implement class {0}\r\n-KeyStore.alreadyRegistered = Klasse {0} bereits registriert f\\u00fcr {1}\r\n-KeyStore.register = {1} type class register error in class {0}\r\n-KeyStore.registerStore.register = Registrierungsfehler f\\u00fcr Typ {0}\r\n-KeyValue.IllegalArgument = Kann kein {0} aus {1} erzeugen\r\n-namespacePrefixAlreadyUsedByOtherURI = Namespace {0} wird bereits von einer anderen URI {1} gebraucht\r\n-notYetInitialized = Das Modul {0} ist noch nicht initialisiert\r\n-prefix.AlreadyAssigned = Sie binden den Prefix {0} an den Namespace {1} aber er ist bereits an {2} zugewiesen\r\n-signature.Canonicalizer.UnknownCanonicalizer = Unbekannter Kanonisierer. Kein Handler installiert f\\u00fcr URI {0}\r\n-signature.DSA.invalidFormat = Ung\\u00fcltige ASN.1 Kodierung der DSA Signatur\r\n-signature.Generation.signBeforeGetValue = Es muss zuerst XMLSignature.sign(java.security.PrivateKey) aufgerufen werden\r\n-signature.Reference.ForbiddenResolver = Der \"Resolver\" {0} ist bei aktivierter \"secure validation\" nicht erlaubt\r\n-signature.Reference.NoDigestMethod = A Signature Reference Element must contain a DigestMethod child\r\n-signature.Reference.NoDigestValue = A Signature Reference Element must contain a DigestValue child\r\n-signature.signatureAlgorithm = Der Algorithmus {0} ist bei aktivierter \"secure validation\" nicht erlaubt\r\n-signature.signaturePropertyHasNoTarget = Das Target Attribut der SignatureProperty muss gesetzt sein\r\n-signature.tooManyReferences = Das Manifest enth\\u00e4lt {0} Referenzen, bei aktivierter \"secure validation\" sind aber maximal {1} erlaubt\r\n-signature.tooManyTransforms = Die Referenz enth\\u00e4lt {0} Transformationen, bei aktivierter \"secure validation\" sind aber maximal {1} erlaubt\r\n-signature.Transform.ErrorDuringTransform = W\\u00e4hrend der Transformation {0} trat eine {1} auf.\r\n-signature.Transform.ForbiddenTransform = Die Transformation {0} ist bei aktivierter \"secure validation\" nicht erlaubt\r\n-signature.Transform.NotYetImplemented = Transform {0} noch nicht implementiert\r\n-signature.Transform.NullPointerTransform = Null pointer als URI \\u00fcbergeben. Programmierfehler?\r\n-signature.Transform.UnknownTransform = Unbekannte Transformation. Kein Handler installiert f\\u00fcr URI {0}\r\n-signature.Util.BignumNonPositive = bigInteger.signum() muss positiv sein\r\n-signature.Util.NonTextNode = Keine Text Node\r\n-signature.Util.TooManyChilds = Zu viele Kind-Elemente vom Typ {0} in {1}\r\n-signature.Verification.certificateError = Zertifikatsfehler\r\n-signature.Verification.IndexOutOfBounds = Index {0} illegal. Es sind nur {1} Referenzen vorhanden\r\n-signature.Verification.internalError = Interner Fehler\r\n-signature.Verification.InvalidDigestOrReference = Ung\\u00fcltiger Digest Wert der Referenz {0}\r\n-signature.Verification.InvalidElement = Current Node {0} is not permitted in this location in the Signature\r\n-signature.Verification.keyStore = \\u00d6ffnen des KeyStore fehlgeschlagen\r\n-signature.Verification.MissingID = Element mit der ID {0} nicht gefunden\r\n-signature.Verification.MissingResources = Kann die externe Resource {0} nicht aufl\\u00f6sen\r\n-signature.Verification.MultipleIDs = Mehrere Elemente mit der ID {0} gefunden\r\n-signature.Verification.NoSignatureElement = Input Dokument enth\\u00e4lt kein {0} Element mit dem Namespace {1}\r\n-signature.Verification.Reference.NoInput = Die Referenz f\\u00fcr den URI {0} hat keinen XMLSignatureInput erhalten.\r\n-signature.Verification.SignatureError = Signatur Fehler\r\n-signature.XMLSignatureInput.MissingConstuctor = Kann aus der Klasse {0} keinen XMLSignatureInput erzeugen\r\n-signature.XMLSignatureInput.SerializeDOM = Input mit einem DOM Dokument initialisiert. Muss mit C14N serialisiert werden\r\n-transform.Init.IllegalContextArgument = Unzul\\u00e4ssiges Kontext Argument der Klasse {0}. Muss String, org.w3c.dom.NodeList oder java.io.InputStream sein.\r\n-transform.init.NotInitialized =\r\n-transform.init.wrongURI = Initialisiert mit dem falschen URI. Das sollte nie passieren. Die Transformation implementiert {0} aber {1} wurde bei der Instantiierung verwendet.\r\n-utils.Base64.IllegalBitlength = Ung\\u00fcltige Byte-L\\u00e4nge; Muss ein vielfaches von 4 sein\r\n-utils.resolver.noClass = Keinen Resolver f\\u00fcr URI {0} und Base {1} gefunden\r\n-xml.WrongContent = Kann {0} nicht finden in {1}\r\n-xml.WrongElement = Kann kein {0} aus einem {1} Element erzeugen\r\n-xpath.funcHere.documentsDiffer = Der XPath ist nicht im selben Dokument wie der Kontext Node\r\n-xpath.funcHere.noXPathContext = Versuch einer XPath-Evaluierung welcher die Funktion here() benutzt aber der XPath ist nicht innerhalb eines ds\\:XPath Elements. XPath \\: {0}\r\n-signature.Transform.node = Aktuelle Node\\: {0}\r\n-signature.Transform.nodeAndType = Aktuelle Node\\: {0}, Typ\\: {1}\r\n-signature.XMLSignatureInput.nodesetReference = Das Node-Set der Referenz konnte nicht konvertieren werden\r\n-transform.envelopedSignatureTransformNotInSignatureElement = Enveloped Transform konnte kein Signatur Element finden\r\n-Base64Decoding = Fehler bei der Decodierung\r\n-secureProcessing.MaximumAllowedTransformsPerReference = Die Referenz enth\\u00e4lt {0} Transformationen. Es sind aber maximal {1} erlaubt. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedTransformsPerReference\" erh\\u00f6ht werden.\r\n-secureProcessing.MaximumAllowedReferencesPerManifest = Das Manifest enh\\u00e4lt {0} Referenzen. Es sind aber maximal {1} erlaubt. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedReferencesPerManifest\" erh\\u00f6ht werden.\r\n-secureProcessing.DoNotThrowExceptionForManifests = Signatur-Manifests werden nicht unterst\\u00fctzt. Das werfen dieser Exception kann durch das Konfigurations-Property \"DoNotThrowExceptionForManifests\" verhindert werden.\r\n-secureProcessing.AllowMD5Algorithm = Vom Einsatz des MD5 Algorithmus wird strengstens abgeraten. Trotzdem kann er \\u00fcber das Konfigurations-Property \"AllowMD5Algorithm\" erlaubt werden.\r\n-secureProcessing.AllowNotSameDocumentReferences = Externe Referenzen gefunden. Die Verarbeitung von externen Referenzen ist standardm\\u00e4ssig ausgeschaltet. Es kann \\u00fcber das Konfigurations-Property \"AllowNotSameDocumentReferences\" aktiviert werden.\r\n-secureProcessing.MaximumAllowedXMLStructureDepth = Die Maximum erlaubte Dokumenten-Tiefe von ({0}) wurde erreicht. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedXMLStructureDepth\" erh\\u00f6ht werden.\r\n-secureProcessing.inputStreamLimitReached = Maximal erlaubte Anzahl bytes ({0}) erreicht.\r\n-stax.duplicateActions=Doppelte Actions sind nicht erlaubt.\r\n-stax.missingSecurityProperties = SecurityProperties darf nicht null sein\\!\r\n-stax.noOutputAction = Keine ausgehenden \"Actions\" definiert.\r\n-stax.noKey = Kein Schl\\u00fcssel geladen und es konnte kein Schl\\u00fcssel gefunden werden f\\u00fcr {0}\r\n-stax.keyNotFound = Schl\\u00fcssel nicht gefunden.\r\n-stax.unsupportedKeyValue = Kein oder ung\\u00fcltiger KeyValue.\r\n-stax.emptyReferenceURI = Referenz enth\\u00e4lt kein URI Attribut.\r\n-stax.encryption.unprocessedReferences = Es wurden nicht alle Verschl\\u00fcsselungs-Referenzen verarbeitet...\r\n-stax.signature.unprocessedReferences = Es wurden nicht alle Signatur-Referenzen verarbeitet...\r\n-stax.unsupportedToken = {0} nicht unterst\\u00fctzt.\r\n-stax.xmlStructureSizeExceeded = Maximal erlaubte ({0}) XML-Struktur Tiefe erreicht.\r\n-stax.unexpectedXMLEvent = Unerwarteter StAX-Event\\: {0}\r\n-stax.encryption.noEncAlgo = xenc\\:EncryptedKey enth\\u00e4lt kein xenc\\:EncryptionMethod\/@Algorithm.\r\n-stax.encryption.noCipherValue = EncryptedKey enth\\u00e4lt kein xenc\\:CipherData\/xenc\\:CipherValue.\r\n-stax.unsecuredMessage = Ungesicherte Nachricht. Weder ein Signatur- noch ein EncryptedData- Element wurde gefunden.\r\n-stax.signature.signedInfoMissing = SignedInfo Element fehlt.\r\n-stax.signature.signatureMethodMissing = Signature method fehlt.\r\n-stax.signature.canonicalizationMethodMissing = Signature canonicalization method fehlt.\r\n-stax.signature.signatureValueMissing = Signature value fehlt.\r\n-stax.signature.publicKeyOrCertificateMissing = Weder ein Zertifikat noch ein public-key wurde konfiguriert.\r\n-stax.encryption.encryptionKeyMissing = Kein Schl\\u00fcssel f\\u00fcr die Verschl\\u00fcsselung wurde konfiguriert.\r\n-stax.unsupportedKeyTransp = Der public-key Algorithmus ist zu kurz um den symmetrischen Schl\\u00fcssel zu verschl\\u00fcsseln.\r\n-stax.recursiveKeyReference = Rekursive Schl\\u00fcssel referenzierung detektiert.\r\n-stax.ecParametersNotSupported = ECParameters werden nicht unterst\\u00fctzt.\r\n-stax.namedCurveMissing = NamedCurve fehlt.\r\n-stax.encryption.securePartNotFound = Part zum Verschl\\u00fcsseln nicht gefunden: {0}\r\n-stax.signature.securePartNotFound = Part zum Signieren nicht gefunden: {0}\r\n-stax.multipleSignaturesNotSupported = Mehrere Signaturen werden nicht unterstützt.\r\n-stax.signature.keyNameMissing = KeyName nicht konfiguriert.\r\n-stax.keyNotFoundForName = Kein Schl\\u00fcssel für Schl\\u00fcsselname konfiguriert: {0}\r\n-stax.keyTypeNotSupported = Key vom Typ {0} nicht f\\u00fcr einen Key-Namenssuche unterst\\u00fctzt\r\n-stax.idsetbutnotgenerated = An Id attribute is specified, but Id generation is disabled\r\n+#\n+#\n+#    Licensed to the Apache Software Foundation (ASF) under one\n+#    or more contributor license agreements. See the NOTICE file\n+#    distributed with this work for additional information\n+#    regarding copyright ownership. The ASF licenses this file\n+#    to you under the Apache License, Version 2.0 (the\n+#    \"License\"); you may not use this file except in compliance\n+#    with the License. You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing,\n+#    software distributed under the License is distributed on an\n+#    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+#    KIND, either express or implied. See the License for the\n+#    specific language governing permissions and limitations\n+#    under the License.\n+#\n+#\n+\n+algorithm.alreadyRegistered = URI {0} wurde bereits an die Klasse {1} gebunden\n+algorithm.classDoesNotExist = Kann URI {0} nicht f\\u00fcr Klasse {1} registrieren weil sie nicht existiert\n+algorithm.ClassDoesNotExist = Klasse {0} existiert nicht\n+algorithm.extendsWrongClass = Kann URI {0} nicht f\\u00fcr Klasse {1} registrieren weil sie nicht von {2} abgeleitet ist\n+algorithms.CannotUseAlgorithmParameterSpecOnDSA = AlgorithmParameterSpec kann nicht f\\u00fcr DSA Signaturen benutzt werden.\n+algorithms.CannotUseAlgorithmParameterSpecOnRSA = AlgorithmParameterSpec kann nicht f\\u00fcr RSA Signaturen benutzt werden.\n+algorithms.CannotUseSecureRandomOnMAC = SecureRandom kann nicht f\\u00fcr MAC's angewandt werden.\n+algorithms.HMACOutputLengthMax = HMACOutputLength darf nicht grosser als {0} sein\n+algorithms.HMACOutputLengthMin = HMACOutputLength darf nicht kleiner als {0} sein\n+algorithms.HMACOutputLengthOnlyForHMAC = Die HMACOutputLength kann nur bei HMAC integrit\\u00e4ts Algorithmen angegeben werden\n+algorithms.MissingRSAPSSParams = RSAPSSParams is a required Element for http:\/\/www.w3.org\/2007\/05\/xmldsig-more#rsa-pss\n+algorithms.NoSuchAlgorithmNoEx = Der Algorithmus {0} ist nicht verf\\u00fcgbar.\n+algorithms.NoSuchAlgorithm = Der Algorithmus {0} ist nicht verf\\u00fcgbar. Original Nachricht war\\: {1}\n+algorithms.NoSuchMap = Algorithmus URI \"{0}\" konnte auf keinen JCE Algorithmus gemappt werden\n+algorithms.NoSuchProvider = Der angegebene Provider {0} existiert nicht. Original Nachricht war\\: {1}\n+algorithms.operationOnlyVerification = Ein \\u00f6ffentlicher Schl\\u00fcssel (public key) kann nur zur Verifizierung einer Signatur verwendet werden.\n+algorithms.WrongKeyForThisOperation = Der angegebene Schl\\u00fcssel-Typ kann nicht f\\u00fcr diese Operation verwendet werden. Angegeben wurde {0} aber ein {1} wird ben\\u00f6tigt.\n+attributeValueIllegal = Das Attribut {0} hat den Wert {1} muss aber {2} sein.\n+c14n.Canonicalizer.Exception = Fehler w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\n+c14n.Canonicalizer.IllegalNode = Unzul\\u00e4ssiger NodeType {0}, NodeName lautete {1}\n+c14n.Canonicalizer.NoSuchCanonicalizer = Kein Kanonisierer mit dem URI {0} gefunden\n+c14n.Canonicalizer.ParserConfigurationException = ParserConfigurationException w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\n+c14n.Canonicalizer.RelativeNamespace = Das Element {0} hat einen relativen Namespace: {1}=\"{2}\"\n+c14n.Canonicalizer.SAXException = SAXException w\\u00e4hrend der Kanonisierung\\:  Original Nachricht war {0}\n+c14n.Canonicalizer.TraversalNotSupported = Das DOM Dokument unterst\\u00fctzt keine Traversal {0}\n+c14n.Canonicalizer.UnsupportedEncoding = Nicht unterst\\u00fctzte Kodierung {0}\n+c14n.Canonicalizer.UnsupportedOperation = Der Kanonisierer unterst\\u00fctzt diese Operation nicht\n+c14n.XMLUtils.circumventBug2650forgotten = Die Baumstruktur wurde nicht vorbereitet f\\u00fcr die Kanonisierung mit XMLUtils\\#circumventBug2650(Document)\n+certificate.noSki.lowVersion = Das Zertifikat dard kein SubjectKeyIdentifier enthalten da es nur ein X509v{0} ist\n+certificate.noSki.notOctetString = Der SubjectKeyIdentifier des Zertifikates ist kein \"OctetString\"\n+certificate.noSki.null = Das Zertifikat enth\\u00e4lt kein SubjectKeyIdentifier\n+defaultNamespaceCannotBeSetHere = Standard Namespace kann hier nicht gesetzt werden\n+ElementProxy.nullElement = Kann keinen ElementProxy aus einem null Argument erzeugen\n+empty = {0}\n+encryption.algorithmCannotBeUsedForEncryptedData = encryption.algorithmCannotBeUsedForEncryptedData {0}\n+encryption.algorithmCannotEatInitParams = encryption.algorithmCannotEatInitParams\n+encryption.algorithmCannotEncryptDecrypt = encryption.algorithmCannotEncryptDecrypt\n+encryption.algorithmCannotWrapUnWrap = encryption.algorithmCannotWrapUnWrap\n+encryption.ExplicitKeySizeMismatch = Das xenc\\:KeySize Element fordert eine Schl\\u00fcssel-L\\u00e4nge von {0} bits aber der Algorithmus besitzt {1} bits\n+encryption.nonceLongerThanDecryptedPlaintext = Das angegebene \"Nonce\" ist l\\u00e4nger als der verf\\u00fcgbare Plaintext.\n+encryption.RSAOAEP.dataHashWrong = Falscher Hash-Wert\n+encryption.RSAOAEP.dataStartWrong = Falscher Start Input {0}\n+encryption.RSAOAEP.dataTooShort = Zu wenig Input\n+encryption.RSAPKCS15.blockTruncated = Block abgeschnitten\n+encryption.RSAPKCS15.noDataInBlock = Im Block sind keine Daten enthalten\n+encryption.RSAPKCS15.unknownBlockType = Unbekannter Block Typ\n+encryption.nokey = Es ist kein verschl\\u00fcsselungs Schl\\u00fcssel geladen und es konnte kein Schl\\u00fcssel mit Hilfe der \"key resolvers\" gefunden werden.\n+endorsed.jdk1.4.0 = Leider scheint niemand unsere Installations-Anleitung zu lesen, deshalb m\\u00fcssen wir es \\u00fcber die Exception machen\\: Du hast den \"endorsing\" Mechanismus vom JDK 1.4 nicht richtig angewandt. Schaue unter <http\\:\/\/xml.apache.org\/security\/Java\/installation.html> nach wie man das Problem l\\u00f6st.\n+errorMessages.InvalidDigestValueException = Ung\\u00fcltige Signatur\\: Referen-Validierung fehlgeschlagen.\n+errorMessages.InvalidSignatureValueException = Ung\\u00fcltige Signatur\\: Core Validierung fehlgeschlagen.\n+errorMessages.IOException = Datei oder Resource kann nicht gelesen werden.\n+errorMessages.MissingKeyFailureException = Verifizierung fehlgeschlagen, weil der \\u00f6ffentliche Schl\\u00fcssel (public key) nicht verf\\u00fcgbar ist. Resourcen via addResource() hinzuf\\u00fcgen und erneut versuchen.\n+errorMessages.MissingResourceFailureException = Verifizierung fehlgeschlagen, weil Resourcen nicht verf\\u00fcgbar sind. Resourcen via addResource() hinzuf\\u00fcgen und erneut versuchen.\n+errorMessages.NoSuchAlgorithmException = Unbekannter Algorithmus {0}\n+errorMessages.NotYetImplementedException = Funktionalit\\u00e4t noch nicht implementiert.\n+errorMessages.XMLSignatureException = Verifizierung aus unbekanntem Grund fehlgeschlagen.\n+decoding.divisible.four = It should be divisible by four\n+decoding.general = Fehler beim Decodieren\n+FileKeyStorageImpl.addToDefaultFromRemoteNotImplemented = Methode addToDefaultFromRemote() wurde noch nicht implementiert.\n+FileKeyStorageImpl.NoCert.Context = Kein X509-Zertifikat mit Kontext {0} gefunden\n+FileKeyStorageImpl.NoCert.IssNameSerNo = Kein X509-Zertifikat mit IssuerName {0} und serial number {1} gefunden\n+FileKeyStorageImpl.NoCert.SubjName = Kein X509-Zertifikat mit SubjectName {0} gefunden\n+generic.dontHaveConstructionElement = Konstruktions-Element fehlt\n+generic.EmptyMessage = {0}\n+generic.NotYetImplemented = {0} Leider noch nicht implementiert ;-((\n+java.security.InvalidKeyException = Ung\\u00fcltiger Schl\\u00fcssel\n+java.security.NoSuchProviderException = Unbekannter oder nicht unterst\\u00fctzter Provider\n+java.security.UnknownKeyType = Unbekannter oder nicht unterst\\u00fctzter Schl\\u00fcssel-Typ {0}\n+KeyInfo.error = Error loading Key Info\n+KeyInfo.needKeyResolver = Es m\\u00fcssen mehrere KeyResolver registriert sein\n+KeyInfo.nokey = Kann keinen Schl\\u00fcssel aus {0} gewinnen\n+KeyInfo.noKey = Kann keinen \\u00f6ffentlichen Schl\\u00fcssel finden\n+KeyInfo.wrongNumberOfObject = Ben\\u00f6tige {0} keyObjects\n+KeyInfo.wrongUse = Dieses Objekt wird verwendet, um {0} zu gewinnen\n+keyResolver.alreadyRegistered = Die Klasse {1} wurde bereits registriert f\\u00fcr {0}\n+KeyResolver.needStorageResolver = Es wird ein StorageResolver ben\\u00f6tigt um ein Zertifikat aus {0} zu holen\n+KeyResoverSpiImpl.cannotGetCert = Cannot get the Certificate that include or in {1} in implement class {0}\n+KeyResoverSpiImpl.elementGeneration = Cannot make {1} element in implement class {0}\n+KeyResoverSpiImpl.getPoublicKey = Cannot get the public key from implement class {0}\n+KeyResoverSpiImpl.InvalidElement = Cannot set (2) Element in implement class {0}\n+KeyResoverSpiImpl.keyStore = KeyStorage Fehler in der implementierenden Klasse {0}\n+KeyResoverSpiImpl.need.Element = Es wird der Typ {1} ben\\u00f6tigt in der implementierenden Klasse {0}\n+KeyResoverSpiImpl.wrongCRLElement = Cannot make CRL from {1} in implement class {0}\n+KeyResoverSpiImpl.wrongKeyObject =  Need {1} type of KeyObject for generation Element in implement class{0}\n+KeyResoverSpiImpl.wrongNumberOfObject = Need {1} keyObject in implement class {0}\n+KeyStore.alreadyRegistered = Klasse {0} bereits registriert f\\u00fcr {1}\n+KeyStore.register = {1} type class register error in class {0}\n+KeyStore.registerStore.register = Registrierungsfehler f\\u00fcr Typ {0}\n+KeyValue.IllegalArgument = Kann kein {0} aus {1} erzeugen\n+namespacePrefixAlreadyUsedByOtherURI = Namespace {0} wird bereits von einer anderen URI {1} gebraucht\n+notYetInitialized = Das Modul {0} ist noch nicht initialisiert\n+prefix.AlreadyAssigned = Sie binden den Prefix {0} an den Namespace {1} aber er ist bereits an {2} zugewiesen\n+signature.Canonicalizer.UnknownCanonicalizer = Unbekannter Kanonisierer. Kein Handler installiert f\\u00fcr URI {0}\n+signature.DSA.invalidFormat = Ung\\u00fcltige ASN.1 Kodierung der DSA Signatur\n+signature.Generation.signBeforeGetValue = Es muss zuerst XMLSignature.sign(java.security.PrivateKey) aufgerufen werden\n+signature.Reference.ForbiddenResolver = Der \"Resolver\" {0} ist bei aktivierter \"secure validation\" nicht erlaubt\n+signature.Reference.NoDigestMethod = A Signature Reference Element must contain a DigestMethod child\n+signature.Reference.NoDigestValue = A Signature Reference Element must contain a DigestValue child\n+signature.signatureAlgorithm = Der Algorithmus {0} ist bei aktivierter \"secure validation\" nicht erlaubt\n+signature.signaturePropertyHasNoTarget = Das Target Attribut der SignatureProperty muss gesetzt sein\n+signature.tooManyReferences = Das Manifest enth\\u00e4lt {0} Referenzen, bei aktivierter \"secure validation\" sind aber maximal {1} erlaubt\n+signature.tooManyTransforms = Die Referenz enth\\u00e4lt {0} Transformationen, bei aktivierter \"secure validation\" sind aber maximal {1} erlaubt\n+signature.Transform.ErrorDuringTransform = W\\u00e4hrend der Transformation {0} trat eine {1} auf.\n+signature.Transform.ForbiddenTransform = Die Transformation {0} ist bei aktivierter \"secure validation\" nicht erlaubt\n+signature.Transform.NotYetImplemented = Transform {0} noch nicht implementiert\n+signature.Transform.NullPointerTransform = Null pointer als URI \\u00fcbergeben. Programmierfehler?\n+signature.Transform.UnknownTransform = Unbekannte Transformation. Kein Handler installiert f\\u00fcr URI {0}\n+signature.Util.BignumNonPositive = bigInteger.signum() muss positiv sein\n+signature.Util.NonTextNode = Keine Text Node\n+signature.Util.TooManyChilds = Zu viele Kind-Elemente vom Typ {0} in {1}\n+signature.Verification.certificateError = Zertifikatsfehler\n+signature.Verification.IndexOutOfBounds = Index {0} illegal. Es sind nur {1} Referenzen vorhanden\n+signature.Verification.internalError = Interner Fehler\n+signature.Verification.InvalidDigestOrReference = Ung\\u00fcltiger Digest Wert der Referenz {0}\n+signature.Verification.InvalidElement = Current Node {0} is not permitted in this location in the Signature\n+signature.Verification.keyStore = \\u00d6ffnen des KeyStore fehlgeschlagen\n+signature.Verification.MissingID = Element mit der ID {0} nicht gefunden\n+signature.Verification.MissingResources = Kann die externe Resource {0} nicht aufl\\u00f6sen\n+signature.Verification.MultipleIDs = Mehrere Elemente mit der ID {0} gefunden\n+signature.Verification.NoSignatureElement = Input Dokument enth\\u00e4lt kein {0} Element mit dem Namespace {1}\n+signature.Verification.Reference.NoInput = Die Referenz f\\u00fcr den URI {0} hat keinen XMLSignatureInput erhalten.\n+signature.Verification.SignatureError = Signatur Fehler\n+signature.XMLSignatureInput.MissingConstuctor = Kann aus der Klasse {0} keinen XMLSignatureInput erzeugen\n+signature.XMLSignatureInput.SerializeDOM = Input mit einem DOM Dokument initialisiert. Muss mit C14N serialisiert werden\n+transform.Init.IllegalContextArgument = Unzul\\u00e4ssiges Kontext Argument der Klasse {0}. Muss String, org.w3c.dom.NodeList oder java.io.InputStream sein.\n+transform.init.NotInitialized =\n+transform.init.wrongURI = Initialisiert mit dem falschen URI. Das sollte nie passieren. Die Transformation implementiert {0} aber {1} wurde bei der Instantiierung verwendet.\n+utils.Base64.IllegalBitlength = Ung\\u00fcltige Byte-L\\u00e4nge; Muss ein vielfaches von 4 sein\n+utils.resolver.noClass = Keinen Resolver f\\u00fcr URI {0} und Base {1} gefunden\n+xml.WrongContent = Kann {0} nicht finden in {1}\n+xml.WrongElement = Kann kein {0} aus einem {1} Element erzeugen\n+xpath.funcHere.documentsDiffer = Der XPath ist nicht im selben Dokument wie der Kontext Node\n+xpath.funcHere.noXPathContext = Versuch einer XPath-Evaluierung welcher die Funktion here() benutzt aber der XPath ist nicht innerhalb eines ds\\:XPath Elements. XPath \\: {0}\n+signature.Transform.node = Aktuelle Node\\: {0}\n+signature.Transform.nodeAndType = Aktuelle Node\\: {0}, Typ\\: {1}\n+signature.XMLSignatureInput.nodesetReference = Das Node-Set der Referenz konnte nicht konvertieren werden\n+transform.envelopedSignatureTransformNotInSignatureElement = Enveloped Transform konnte kein Signatur Element finden\n+Base64Decoding = Fehler bei der Decodierung\n+secureProcessing.MaximumAllowedTransformsPerReference = Die Referenz enth\\u00e4lt {0} Transformationen. Es sind aber maximal {1} erlaubt. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedTransformsPerReference\" erh\\u00f6ht werden.\n+secureProcessing.MaximumAllowedReferencesPerManifest = Das Manifest enh\\u00e4lt {0} Referenzen. Es sind aber maximal {1} erlaubt. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedReferencesPerManifest\" erh\\u00f6ht werden.\n+secureProcessing.DoNotThrowExceptionForManifests = Signatur-Manifests werden nicht unterst\\u00fctzt. Das werfen dieser Exception kann durch das Konfigurations-Property \"DoNotThrowExceptionForManifests\" verhindert werden.\n+secureProcessing.AllowMD5Algorithm = Vom Einsatz des MD5 Algorithmus wird strengstens abgeraten. Trotzdem kann er \\u00fcber das Konfigurations-Property \"AllowMD5Algorithm\" erlaubt werden.\n+secureProcessing.AllowNotSameDocumentReferences = Externe Referenzen gefunden. Die Verarbeitung von externen Referenzen ist standardm\\u00e4ssig ausgeschaltet. Es kann \\u00fcber das Konfigurations-Property \"AllowNotSameDocumentReferences\" aktiviert werden.\n+secureProcessing.MaximumAllowedXMLStructureDepth = Die Maximum erlaubte Dokumenten-Tiefe von ({0}) wurde erreicht. Die Limite kann \\u00fcber das Konfigurations-Property \"MaximumAllowedXMLStructureDepth\" erh\\u00f6ht werden.\n+secureProcessing.inputStreamLimitReached = Maximal erlaubte Anzahl bytes ({0}) erreicht.\n+stax.duplicateActions=Doppelte Actions sind nicht erlaubt.\n+stax.missingSecurityProperties = SecurityProperties darf nicht null sein\\!\n+stax.noOutputAction = Keine ausgehenden \"Actions\" definiert.\n+stax.noKey = Kein Schl\\u00fcssel geladen und es konnte kein Schl\\u00fcssel gefunden werden f\\u00fcr {0}\n+stax.keyNotFound = Schl\\u00fcssel nicht gefunden.\n+stax.unsupportedKeyValue = Kein oder ung\\u00fcltiger KeyValue.\n+stax.emptyReferenceURI = Referenz enth\\u00e4lt kein URI Attribut.\n+stax.encryption.unprocessedReferences = Es wurden nicht alle Verschl\\u00fcsselungs-Referenzen verarbeitet...\n+stax.signature.unprocessedReferences = Es wurden nicht alle Signatur-Referenzen verarbeitet...\n+stax.unsupportedToken = {0} nicht unterst\\u00fctzt.\n+stax.xmlStructureSizeExceeded = Maximal erlaubte ({0}) XML-Struktur Tiefe erreicht.\n+stax.unexpectedXMLEvent = Unerwarteter StAX-Event\\: {0}\n+stax.encryption.noEncAlgo = xenc\\:EncryptedKey enth\\u00e4lt kein xenc\\:EncryptionMethod\/@Algorithm.\n+stax.encryption.noCipherValue = EncryptedKey enth\\u00e4lt kein xenc\\:CipherData\/xenc\\:CipherValue.\n+stax.unsecuredMessage = Ungesicherte Nachricht. Weder ein Signatur- noch ein EncryptedData- Element wurde gefunden.\n+stax.signature.signedInfoMissing = SignedInfo Element fehlt.\n+stax.signature.signatureMethodMissing = Signature method fehlt.\n+stax.signature.canonicalizationMethodMissing = Signature canonicalization method fehlt.\n+stax.signature.signatureValueMissing = Signature value fehlt.\n+stax.signature.publicKeyOrCertificateMissing = Weder ein Zertifikat noch ein public-key wurde konfiguriert.\n+stax.encryption.encryptionKeyMissing = Kein Schl\\u00fcssel f\\u00fcr die Verschl\\u00fcsselung wurde konfiguriert.\n+stax.unsupportedKeyTransp = Der public-key Algorithmus ist zu kurz um den symmetrischen Schl\\u00fcssel zu verschl\\u00fcsseln.\n+stax.recursiveKeyReference = Rekursive Schl\\u00fcssel referenzierung detektiert.\n+stax.ecParametersNotSupported = ECParameters werden nicht unterst\\u00fctzt.\n+stax.namedCurveMissing = NamedCurve fehlt.\n+stax.encryption.securePartNotFound = Part zum Verschl\\u00fcsseln nicht gefunden: {0}\n+stax.signature.securePartNotFound = Part zum Signieren nicht gefunden: {0}\n+stax.multipleSignaturesNotSupported = Mehrere Signaturen werden nicht unterstützt.\n+stax.signature.keyNameMissing = KeyName nicht konfiguriert.\n+stax.keyNotFoundForName = Kein Schl\\u00fcssel für Schl\\u00fcsselname konfiguriert: {0}\n+stax.keyTypeNotSupported = Key vom Typ {0} nicht f\\u00fcr einen Key-Namenssuche unterst\\u00fctzt\n+stax.idsetbutnotgenerated = An Id attribute is specified, but Id generation is disabled\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/resource\/xmlsecurity_de.properties","additions":198,"deletions":198,"binary":false,"changes":396,"status":"modified"},{"patch":"@@ -212,0 +212,17 @@\n+\n+    \/**Signature - SHA3-224withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_224 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\";\n+\n+    \/**Signature - SHA3-256withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_256 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\";\n+\n+    \/**Signature - SHA3-384withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_384 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\";\n+\n+    \/**Signature - SHA3-512withECDSA *\/\n+    public static final String ALGO_ID_SIGNATURE_ECDSA_SHA3_512 =\n+            \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\";\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/XMLSignature.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+    \/** The 2021 xmldsig-more URL for Internet Engineering Task Force (IETF) algorithms **\/\n+    public static final String XML_DSIG_NS_MORE_21_04 = \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#\";\n+\n@@ -147,0 +150,3 @@\n+    \/** Tag of Element Salt **\/\n+    public static final String _TAG_SALT = \"Salt\";\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/Constants.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -515,0 +515,3 @@\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2001\/04\/xmldsig-more\", \"rfc4051\");\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#\", \"rfc6931\");\n+        setNamespacePrefix(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#\", \"rfc9231\");\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/ElementProxy.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        } else if (\"RSA\".equals(algorithm)) {\n+        } else if (\"RSA\".equals(algorithm) || \"RSASSA-PSS\".equals(algorithm)) {\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyInfoFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,0 +244,27 @@\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (!(obj instanceof KeyValue)) {\n+                return false;\n+            }\n+            \/\/ This equality test allows RSA keys that have different\n+            \/\/ algorithms (ex: RSA and RSASSA-PSS) to be equal as long\n+            \/\/ as the key is the same.\n+            try {\n+                PublicKey otherKey = ((KeyValue)obj).getPublicKey();\n+                if (!(otherKey instanceof RSAPublicKey)) {\n+                    return false;\n+                }\n+                RSAPublicKey otherRSAKey = (RSAPublicKey)otherKey;\n+                RSAPublicKey rsaKey = (RSAPublicKey)getPublicKey();\n+                return rsaKey.getPublicExponent().equals(\n+                            otherRSAKey.getPublicExponent())\n+                        && rsaKey.getModulus().equals(otherRSAKey.getModulus());\n+            } catch (KeyException ke) {\n+                \/\/ no practical way to determine if the keys are equal\n+                return false;\n+            }\n+        }\n@@ -372,0 +399,36 @@\n+        private static final Curve BRAINPOOLP256R1 = initializeCurve(\n+                \"brainpoolP256r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.7\",\n+                \"A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377\",\n+                \"7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9\",\n+                \"26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6\",\n+                \"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262\",\n+                \"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997\",\n+                \"A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7\",\n+                1\n+        );\n+\n+        private static final Curve BRAINPOOLP384R1 = initializeCurve(\n+                \"brainpoolP384r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.11\",\n+                \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53\",\n+                \"7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826\",\n+                \"04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11\",\n+                \"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E\",\n+                \"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315\",\n+                \"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565\",\n+                1\n+        );\n+\n+        private static final Curve BRAINPOOLP512R1 = initializeCurve(\n+                \"brainpoolP512r1 [RFC 5639]\",\n+                \"1.3.36.3.3.2.8.1.1.13\",\n+                \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3\",\n+                \"7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA\",\n+                \"3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723\",\n+                \"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822\",\n+                \"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892\",\n+                \"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069\",\n+                1\n+        );\n+\n@@ -451,0 +514,6 @@\n+            } else if (matchCurve(params, BRAINPOOLP256R1)) {\n+                match = BRAINPOOLP256R1;\n+            } else if (matchCurve(params, BRAINPOOLP384R1)) {\n+                match = BRAINPOOLP384R1;\n+            } else if (matchCurve(params, BRAINPOOLP512R1)) {\n+                match = BRAINPOOLP512R1;\n@@ -488,1 +557,1 @@\n-            namedCurveElem.setAttributeNS(\"http:\/\/www.w3.org\/2000\/xmlns\/\",\n+            ecKeyValueElem.setAttributeNS(\"http:\/\/www.w3.org\/2000\/xmlns\/\",\n@@ -558,0 +627,6 @@\n+            } else if (oid.equals(BRAINPOOLP256R1.getObjectId())) {\n+                return BRAINPOOLP256R1;\n+            } else if (oid.equals(BRAINPOOLP384R1.getObjectId())) {\n+                return BRAINPOOLP384R1;\n+            } else if (oid.equals(BRAINPOOLP512R1.getObjectId())) {\n+                return BRAINPOOLP512R1;\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyValue.java","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -103,0 +103,8 @@\n+    static final String ECDSA_SHA3_224 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\";\n+    static final String ECDSA_SHA3_256 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\";\n+    static final String ECDSA_SHA3_384 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\";\n+    static final String ECDSA_SHA3_512 =\n+        \"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\";\n@@ -244,0 +252,8 @@\n+        } else if (alg.equals(ECDSA_SHA3_224)) {\n+            return new SHA3_224withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_256)) {\n+            return new SHA3_256withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_384)) {\n+            return new SHA3_384withECDSA(smElem);\n+        } else if (alg.equals(ECDSA_SHA3_512)) {\n+            return new SHA3_512withECDSA(smElem);\n@@ -1163,0 +1179,88 @@\n+    static final class SHA3_224withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_224withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_224withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_224;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-224withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-224withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_256withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_256withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_256withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_256;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-256withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-256withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_384withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_384withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_384withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_384;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-384withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-384withECDSA\";\n+        }\n+    }\n+\n+    static final class SHA3_512withECDSA extends AbstractECDSASignatureMethod {\n+        SHA3_512withECDSA(AlgorithmParameterSpec params)\n+                throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_512withECDSA(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return ECDSA_SHA3_512;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-512withECDSAinP1363Format\";\n+        }\n+        @Override\n+        String getJCAFallbackAlgorithm() {\n+            return \"SHA3-512withECDSA\";\n+        }\n+    }\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureMethod.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -348,0 +348,8 @@\n+        }  else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_224)) {\n+            return new DOMSignatureMethod.SHA3_224withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_256)) {\n+            return new DOMSignatureMethod.SHA3_256withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_384)) {\n+            return new DOMSignatureMethod.SHA3_384withECDSA(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.ECDSA_SHA3_512)) {\n+            return new DOMSignatureMethod.SHA3_512withECDSA(params);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXMLSignatureFactory.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-        \/\/ Apache Santuario XML Security for Java, version 3.0.3\n+        \/\/ Apache Santuario XML Security for Java, version 3.0.5\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/XMLDSigRI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Apache Santuario v3.0.3\n+## Apache Santuario v3.0.5\n@@ -214,1 +214,1 @@\n-Copyright 1999-2023 The Apache Software Foundation\n+Copyright 1999-2024 The Apache Software Foundation\n@@ -226,1 +226,1 @@\n-copyright (c) 2021, Oracle and\/or its affiliates.\n+copyright (c) 2021, 2023, Oracle and\/or its affiliates.\n","filename":"src\/java.xml.crypto\/share\/legal\/santuario.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      8046724 8079693 8177334 8205507 8210736 8217878 8241306 8305972\n+ *      8046724 8079693 8177334 8205507 8210736 8217878 8241306 8305972 8344137\n@@ -102,0 +102,1 @@\n+            ecdsaSha3_224, ecdsaSha3_256, ecdsaSha3_384, ecdsaSha3_512,\n@@ -308,0 +309,4 @@\n+        test_create_signature_enveloping_p256_sha3_224();\n+        test_create_signature_enveloping_p256_sha3_256();\n+        test_create_signature_enveloping_p256_sha3_384();\n+        test_create_signature_enveloping_p256_sha3_512();\n@@ -562,0 +567,4 @@\n+        ecdsaSha3_224 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-224\", null);\n+        ecdsaSha3_256 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-256\", null);\n+        ecdsaSha3_384 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-384\", null);\n+        ecdsaSha3_512 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2021\/04\/xmldsig-more#ecdsa-sha3-512\", null);\n@@ -895,0 +904,28 @@\n+    static void test_create_signature_enveloping_p256_sha3_224() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_224.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_224, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_256() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_256.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_256, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_384() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_384.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_384, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_p256_sha3_512() throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-p256-sha3_512.xml\");\n+        test_create_signature_enveloping(sha1, ecdsaSha3_512, p256ki,\n+                getECPrivateKey(\"P256\"), kvks, false, true);\n+        System.out.println();\n+    }\n+\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/GenerationTests.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.XMLUtils;\n+\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n+import java.security.KeyPairGenerator;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n+\n+\/**\n+ * @test\n+ * @bug 8344137\n+ * @summary check RSASSA-PSS key\n+ * @library \/test\/lib\n+ * @modules java.xml.crypto\n+ *\/\n+public class PSS {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        var doc = XMLUtils.string2doc(\"<a><b>Text<\/b>Raw<\/a>\");\n+        var kpg = KeyPairGenerator.getInstance(\"RSASSA-PSS\");\n+        kpg.initialize(2048);\n+        var keyPair = kpg.generateKeyPair();\n+\n+        var pspec = new PSSParameterSpec(\"SHA-384\", \"MGF1\",\n+                MGF1ParameterSpec.SHA512, 48,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        var signed = XMLUtils.signer(keyPair.getPrivate(), keyPair.getPublic())\n+                .dm(DigestMethod.SHA384)\n+                .sm(SignatureMethod.RSA_PSS, new RSAPSSParameterSpec(pspec))\n+                .sign(doc);\n+\n+        Asserts.assertTrue(XMLUtils.validator().validate(signed));\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/PSS.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,0 +201,1 @@\n+        Map<String, Object> props = new HashMap<>();\n@@ -250,0 +251,5 @@\n+        public Signer prop(String name, Object o) {\n+            props.put(name, o);\n+            return this;\n+        }\n+\n@@ -257,1 +263,1 @@\n-                    new DOMSignContext(privateKey, newDocument));\n+                    withProps(new DOMSignContext(privateKey, newDocument)));\n@@ -267,1 +273,2 @@\n-            FAC.newXMLSignature(buildSignedInfo(ref.toString()), buildKeyInfo()).sign(ctxt);\n+            FAC.newXMLSignature(buildSignedInfo(ref.toString()), buildKeyInfo())\n+                    .sign(withProps(ctxt));\n@@ -278,1 +285,1 @@\n-                    new DOMSignContext(privateKey, newDocument.getDocumentElement()));\n+                    withProps(new DOMSignContext(privateKey, newDocument.getDocumentElement())));\n@@ -293,1 +300,1 @@\n-                    .sign(new DOMSignContext(privateKey, newDocument));\n+                    .sign(withProps(new DOMSignContext(privateKey, newDocument)));\n@@ -311,1 +318,1 @@\n-                    .sign(new DOMSignContext(privateKey, newDocument));\n+                    .sign(withProps(new DOMSignContext(privateKey, newDocument)));\n@@ -328,1 +335,1 @@\n-                    .sign(new DOMSignContext(privateKey, newDocument));\n+                    .sign(withProps(new DOMSignContext(privateKey, newDocument)));\n@@ -332,0 +339,8 @@\n+        \/\/ Add props to a context\n+        private DOMSignContext withProps(DOMSignContext ctxt) {\n+            for (var e : props.entrySet()) {\n+                ctxt.setProperty(e.getKey(), e.getValue());\n+            }\n+            return ctxt;\n+        }\n+\n@@ -429,0 +444,1 @@\n+        Map<String, Object> props = new HashMap<>();\n@@ -444,0 +460,5 @@\n+        public Validator prop(String name, Object o) {\n+            props.put(name, o);\n+            return this;\n+        }\n+\n@@ -474,1 +495,2 @@\n-                            .unmarshalXMLSignature(valContext).validate(valContext);\n+                            .unmarshalXMLSignature(valContext)\n+                            .validate(withProps(valContext));\n@@ -480,0 +502,8 @@\n+        \/\/ Add props to a context\n+        private DOMValidateContext withProps(DOMValidateContext ctxt) {\n+            for (var e : props.entrySet()) {\n+                ctxt.setProperty(e.getKey(), e.getValue());\n+            }\n+            return ctxt;\n+        }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/XMLUtils.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"}]}