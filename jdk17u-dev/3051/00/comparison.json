{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-        new OutputAnalyzer(pb.start())\n-            .shouldHaveExitValue(0);\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n@@ -46,1 +46,2 @@\n-        pb = ProcessTools.createNativeTestProcessBuilder(\"invoke\", \"test_native_overflow\");\n+        pb = ProcessTools.createNativeTestProcessBuilder(\"invoke\",\n+                                                         \"test_java_overflow_initial\");\n@@ -48,2 +49,2 @@\n-        new OutputAnalyzer(pb.start())\n-            .shouldHaveExitValue(0);\n+        output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/StackGuardPages\/TestStackGuardPages.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Stack guard pages should be installed correctly and removed when thread is detached for native threads\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @compile DoOverflow.java\n+ * @run main\/native TestStackGuardPagesNative\n+ *\/\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\n+public class TestStackGuardPagesNative {\n+    public static void main(String args[]) throws Exception {\n+\n+        ProcessBuilder pb = ProcessTools.createNativeTestProcessBuilder(\"invoke\", \"test_native_overflow\");\n+        pb.environment().put(\"CLASSPATH\", Utils.TEST_CLASS_PATH);\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createNativeTestProcessBuilder(\"invoke\", \"test_native_overflow_initial\");\n+        pb.environment().put(\"CLASSPATH\", Utils.TEST_CLASS_PATH);\n+        output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/StackGuardPages\/TestStackGuardPagesNative.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,4 +56,5 @@\n-static int _last_si_code = -1;\n-static int _failures = 0;\n-static int _rec_count = 0;\n-static int _kp_rec_count = 0;\n+static volatile int _last_si_code = -1;\n+static volatile int _failures = 0;\n+static volatile int _rec_count = 0; \/\/ Number of allocations to hit stack guard page\n+static volatile int _kp_rec_count = 0; \/\/ Kept record of rec_count, for retrying\n+static int _peek_value = 0; \/\/ Used for accessing memory to cause SIGSEGV\n@@ -76,1 +77,1 @@\n-    altstack = malloc(SIGSTKSZ);\n+    altstack = (char*)malloc(SIGSTKSZ);\n@@ -119,1 +120,2 @@\n-void *run_java_overflow (void *p) {\n+\/\/ Call DoOverflow::`method` on JVM\n+void call_method_on_jvm(const char* method) {\n@@ -125,1 +127,1 @@\n-  res = (*_jvm)->AttachCurrentThread(_jvm, (void**)&env, NULL);\n+  res = (*_jvm)->AttachCurrentThread(_jvm, (void **)&env, NULL);\n@@ -131,1 +133,1 @@\n-  class_id = (*env)->FindClass (env, \"DoOverflow\");\n+  class_id = (*env)->FindClass(env, \"DoOverflow\");\n@@ -137,1 +139,1 @@\n-  method_id = (*env)->GetStaticMethodID(env, class_id, \"printIt\", \"()V\");\n+  method_id = (*env)->GetStaticMethodID(env, class_id, method, \"()V\");\n@@ -139,1 +141,1 @@\n-    fprintf(stderr, \"Test ERROR. Can't find method DoOverflow.printIt\\n\");\n+    fprintf(stderr, \"Test ERROR. Can't find method DoOverflow.%s\\n\", method);\n@@ -144,0 +146,5 @@\n+}\n+\n+void *run_java_overflow (void *p) {\n+  volatile int res;\n+  call_method_on_jvm(\"printIt\");\n@@ -154,1 +161,1 @@\n-  int *p = alloca(sizeof(int));\n+  volatile int *p = NULL;\n@@ -156,2 +163,5 @@\n-      _rec_count ++;\n-      do_overflow();\n+    for(;;) {\n+      _rec_count++;\n+      p = (int*)alloca(128);\n+      _peek_value = p[0]; \/\/ Peek\n+    }\n@@ -164,5 +174,1 @@\n-  JNIEnv *env;\n-  jclass class_id;\n-  jmethodID method_id;\n-  int res;\n-\n+  volatile int res;\n@@ -170,20 +176,1 @@\n-\n-  res = (*_jvm)->AttachCurrentThread(_jvm, (void **)&env, NULL);\n-  if (res != JNI_OK) {\n-    fprintf(stderr, \"Test ERROR. Can't attach to current thread\\n\");\n-    exit(7);\n-  }\n-\n-  class_id = (*env)->FindClass (env, \"DoOverflow\");\n-  if (class_id == NULL) {\n-    fprintf(stderr, \"Test ERROR. Can't load class DoOverflow\\n\");\n-    exit(7);\n-  }\n-\n-  method_id = (*env)->GetStaticMethodID (env, class_id, \"printAlive\", \"()V\");\n-  if (method_id == NULL) {\n-    fprintf(stderr, \"Test ERROR. Can't find method DoOverflow.printAlive\\n\");\n-    exit(7);\n-  }\n-\n-  (*env)->CallStaticVoidMethod (env, class_id, method_id, NULL);\n+  call_method_on_jvm(\"printAlive\");\n@@ -243,0 +230,1 @@\n+  fprintf(stderr, \"       invoke test_java_overflow_initial\\n\");\n@@ -244,0 +232,10 @@\n+  fprintf(stderr, \"       invoke test_native_overflow_initial\\n\");\n+}\n+\n+void init_thread_or_die(pthread_t *thr, pthread_attr_t *thread_attr) {\n+  size_t stack_size = get_java_stacksize();\n+  if (pthread_attr_init(thread_attr) != 0 ||\n+      pthread_attr_setstacksize(thread_attr, stack_size) != 0) {\n+    printf(\"Failed to set stacksize. Exiting test.\\n\");\n+    exit(0);\n+  }\n@@ -286,1 +284,0 @@\n-  size_t stack_size = get_java_stacksize();\n@@ -290,2 +287,5 @@\n-  pthread_attr_init(&thread_attr);\n-  pthread_attr_setstacksize(&thread_attr, stack_size);\n+  if (argc < 2) {\n+    fprintf(stderr, \"No test selected\");\n+    usage();\n+    exit(7);\n+  }\n@@ -293,1 +293,1 @@\n-  if (argc > 1 && strcmp(argv[1], \"test_java_overflow\") == 0) {\n+  if (strcmp(argv[1], \"test_java_overflow_initial\") == 0) {\n@@ -295,0 +295,1 @@\n+    printf(\"Testing stack guard page behaviour for initial thread\\n\");\n@@ -296,0 +297,8 @@\n+    run_java_overflow(NULL);\n+    \/\/ This test crash on error\n+    exit(0);\n+  }\n+\n+  if (strcmp(argv[1], \"test_java_overflow\") == 0) {\n+    init_thread_or_die(&thr, &thread_attr);\n+    printf(\"\\nTesting JAVA_OVERFLOW\\n\");\n@@ -301,2 +310,0 @@\n-    printf(\"Testing stack guard page behaviour for initial thread\\n\");\n-    run_java_overflow(NULL);\n@@ -307,1 +314,1 @@\n-  if (argc > 1 && strcmp(argv[1], \"test_native_overflow\") == 0) {\n+  if (strcmp(argv[1], \"test_native_overflow_initial\") == 0) {\n@@ -309,0 +316,1 @@\n+    printf(\"Testing stack guard page behaviour for initial thread\\n\");\n@@ -310,0 +318,8 @@\n+    run_native_overflow(NULL);\n+\n+    exit((_failures > 0) ? 1 : 0);\n+  }\n+\n+  if (strcmp(argv[1], \"test_native_overflow\") == 0) {\n+    init_thread_or_die(&thr, &thread_attr);\n+    printf(\"\\nTesting NATIVE_OVERFLOW\\n\");\n@@ -311,0 +327,1 @@\n+\n@@ -314,3 +331,0 @@\n-    printf(\"Testing stack guard page behaviour for initial thread\\n\");\n-    run_native_overflow(NULL);\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/StackGuardPages\/exeinvoke.c","additions":63,"deletions":49,"binary":false,"changes":112,"status":"modified"}]}