{"files":[{"patch":"@@ -460,1 +460,1 @@\n-            int height = 22;\n+            int height = comboBox.getBorder() == null ? 22 : comboBox.getHeight();\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaComboBoxUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.BorderFactory;\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8300269\n+ * @summary This test verifies the issue: Can't see the selected JComboBox\n+ *          item if it has a titled border.\n+ * @run main JComboBoxWithTitledBorderTest\n+ *\/\n+public class JComboBoxWithTitledBorderTest {\n+    private static final String[] comboStrings =\n+            {\"First\", \"Second\", \"Third\", \"Fourth\"};\n+    private static JFrame frame;\n+    private static JComboBox<String> combo;\n+    private static Robot robot;\n+\n+    public static void main(String[] argv) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                .map(LookAndFeelInfo::getClassName)\n+                .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            \/\/ Skip GTK L&F because pressing ENTER after editing JComboBox\n+            \/\/ doesn't change text and resets to starting text instead.\n+            if (laf.equals(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\")) {\n+                continue;\n+            }\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                System.out.println(\"Setting LAF: \" + laf);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createAndShowGUI(laf);\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                mouseClick(combo);\n+\n+                hitKeys(KeyEvent.VK_RIGHT, KeyEvent.VK_BACK_SPACE,\n+                        KeyEvent.VK_ENTER);\n+                String item = (String) combo.getSelectedItem();\n+                System.out.println(\"Current item: \" + item);\n+                \/\/ Deletes the last character of the combo item and check\n+                \/\/ whether its getting reflected in item. Bug JDK-8300269: It's\n+                \/\/ not getting reflected in case of AquaLookAndFeel.\n+                if (\"Firs\".equals(item)) {\n+                    System.out.println(\"Test Passed for \" + laf);\n+                } else {\n+                    captureScreen();\n+                    throw new RuntimeException(\"Test Failed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(\n+                        JComboBoxWithTitledBorderTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    private static void mouseClick(JComponent jComponent) throws Exception {\n+        final AtomicReference<Point> loc = new AtomicReference<>();\n+        SwingUtilities\n+                .invokeAndWait(() -> loc.set(jComponent.getLocationOnScreen()));\n+        final Point location = loc.get();\n+        robot.mouseMove(location.x + 25, location.y + 5);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static void createAndShowGUI(final String laf) {\n+        frame = new JFrame(\"JComboBox with Titled Border test\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\n+        JPanel panel = new JPanel();\n+        combo = new JComboBox<>(comboStrings);\n+        combo.setEditable(true);\n+\n+        \/\/ Create a titled border for the ComboBox with the LAF name as title.\n+        String[] lafStrings = laf.split(\"[.]\");\n+        combo.setBorder(BorderFactory.createTitledBorder(\n+                lafStrings[lafStrings.length - 1]));\n+        panel.add(combo);\n+        frame.getContentPane().add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported LAF: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static void captureScreen() {\n+        try {\n+            final Rectangle screenBounds = new Rectangle(\n+                    Toolkit.getDefaultToolkit().getScreenSize());\n+            ImageIO.write(robot.createScreenCapture(screenBounds),\n+                    \"png\", new File(\"failScreen.png\"));\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/JComboBoxWithTitledBorderTest.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}