{"files":[{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_DECAY_HPP\n-#define SHARE_METAPROGRAMMING_DECAY_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/removeCV.hpp\"\n-#include \"metaprogramming\/removeReference.hpp\"\n-\n-\/\/ This trait trims the type from CV qualifiers and references.\n-\/\/ This trait provides a subset of the functionality of std::decay;\n-\/\/ array types and function types are not supported here.\n-\n-template <typename T>\n-struct Decay: AllStatic {\n-  typedef typename RemoveCV<typename RemoveReference<T>::type>::type type;\n-};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_DECAY_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/decay.hpp","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n-#define SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-\n-\/\/ This metafunction returns true iff the type T (irrespective of CV qualifiers)\n-\/\/ is a floating point type.\n-\n-template <typename T> struct IsFloatingPoint: public FalseType {};\n-\n-template <> struct IsFloatingPoint<float>: public TrueType {};\n-template <> struct IsFloatingPoint<const float>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile float>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile float>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<double>: public TrueType {};\n-template <> struct IsFloatingPoint<const double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile double>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const long double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile long double>: public TrueType {};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isFloatingPoint.hpp","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/decay.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"metaprogramming\/isFloatingPoint.hpp\"\n@@ -428,1 +426,1 @@\n-    typedef typename OopOrNarrowOopInternal<typename Decay<T>::type>::type type;\n+    typedef typename OopOrNarrowOopInternal<std::decay_t<T>>::type type;\n@@ -1085,1 +1083,1 @@\n-                    IsFloatingPoint<T>::value)); \/\/ not allowed primitive type\n+                    std::is_floating_point<T>::value)); \/\/ not allowed primitive type\n@@ -1091,2 +1089,2 @@\n-    typedef typename Decay<P>::type DecayedP;\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedP = std::decay_t<P>;\n+    using DecayedT = std::decay_t<T>;\n@@ -1105,1 +1103,1 @@\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedT = std::decay_t<T>;\n@@ -1116,1 +1114,1 @@\n-    typedef typename Decay<P>::type DecayedP;\n+    using DecayedP = std::decay_t<P>;\n@@ -1119,1 +1117,1 @@\n-                                 typename Decay<T>::type>::type DecayedT;\n+                                 std::decay_t<T>>::type DecayedT;\n@@ -1133,1 +1131,1 @@\n-                                 typename Decay<T>::type>::type DecayedT;\n+                                 std::decay_t<T>>::type DecayedT;\n@@ -1145,2 +1143,2 @@\n-    typedef typename Decay<P>::type DecayedP;\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedP = std::decay_t<P>;\n+    using DecayedT = std::decay_t<T>;\n@@ -1160,1 +1158,1 @@\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedT = std::decay_t<T>;\n@@ -1178,2 +1176,2 @@\n-    typedef typename Decay<P>::type DecayedP;\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedP = std::decay_t<P>;\n+    using DecayedT = std::decay_t<T>;\n@@ -1190,1 +1188,1 @@\n-    typedef typename Decay<T>::type DecayedT;\n+    using DecayedT = std::decay_t<T>;\n@@ -1205,2 +1203,2 @@\n-                    IsFloatingPoint<T>::value)); \/\/ arraycopy allows type erased void elements\n-    typedef typename Decay<T>::type DecayedT;\n+                    std::is_floating_point<T>::value)); \/\/ arraycopy allows type erased void elements\n+    using DecayedT = std::decay_t<T>;\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/decay.hpp\"\n-#include \"metaprogramming\/isSame.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class TestDecay: AllStatic {\n-  class A: AllStatic {};\n-\n-  typedef const volatile A cvA;\n-  typedef const volatile A& cvAref;\n-  typedef const volatile A* cvAptr;\n-  typedef const volatile A* const volatile cvAptrcv;\n-  typedef A& Aref;\n-\n-  typedef Decay<cvAref>::type rr_cvAref;\n-  static const bool decay_cvAref_is_A = IsSame<rr_cvAref, A>::value;\n-  STATIC_ASSERT(decay_cvAref_is_A);\n-\n-  typedef Decay<cvAptrcv>::type rr_cvAptrcv;\n-  static const bool decay_cvAptrcv_is_cvAptr = IsSame<rr_cvAptrcv, cvAptr>::value;\n-  STATIC_ASSERT(decay_cvAptrcv_is_cvAptr);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_decay.cpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isFloatingPoint.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsFloatingPointTest: AllStatic {\n-  STATIC_ASSERT(IsFloatingPoint<float>::value);\n-  STATIC_ASSERT(IsFloatingPoint<double>::value);\n-  STATIC_ASSERT(IsFloatingPoint<long double>::value);\n-\n-  STATIC_ASSERT(IsFloatingPoint<double const>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<double&>::value);\n-\n-  STATIC_ASSERT(!IsFloatingPoint<int>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<unsigned int>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<signed int>::value);\n-\n-  class A: AllStatic {};\n-  STATIC_ASSERT(!IsFloatingPoint<A>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<A*>::value);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isFloatingPoint.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}