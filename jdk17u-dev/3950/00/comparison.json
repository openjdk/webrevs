{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4052440 8000273 8062588 8210406\n+ * @bug 4052440 8000273 8062588 8210406 8356040\n@@ -34,1 +34,1 @@\n- * @run main\/othervm -Djava.locale.providers=JRE,SPI LocaleNameProviderTest\n+ * @run junit\/othervm -Djava.locale.providers=JRE,SPI LocaleNameProviderTest\n@@ -37,0 +37,1 @@\n+import java.util.ArrayList;\n@@ -41,0 +42,1 @@\n+import java.util.ResourceBundle;\n@@ -44,0 +46,4 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,3 +56,32 @@\n-    public static void main(String[] s) {\n-        new LocaleNameProviderTest();\n-    }\n+    private static final LocaleNameProviderImpl LNP = new LocaleNameProviderImpl();\n+\n+    \/*\n+     * This is not an exhaustive test. Such a test would require iterating (1000x1000)+\n+     * inputs. Instead, we check against Japanese lang locales which guarantees\n+     * we will run into cases where the CLDR is not the preferred provider as the\n+     * SPI has defined variants of the Japanese locale (E.g. osaka).\n+     * See LocaleNameProviderImpl and LocaleNames ResourceBundle.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource\n+    void checkAvailLocValidityTest(Locale target, Locale test, ResourceBundle rb,\n+                                   boolean jreSupports, boolean spiSupports) {\n+        \/\/ codes\n+        String lang = test.getLanguage();\n+        String ctry = test.getCountry();\n+        String vrnt = test.getVariant();\n+\n+        \/\/ the localized name\n+        String langresult = test.getDisplayLanguage(target);\n+        String ctryresult = test.getDisplayCountry(target);\n+        String vrntresult = test.getDisplayVariant(target);\n+\n+        \/\/ provider's name (if any)\n+        String providerslang = null;\n+        String providersctry = null;\n+        String providersvrnt = null;\n+        if (spiSupports) {\n+            providerslang = LNP.getDisplayLanguage(lang, target);\n+            providersctry = LNP.getDisplayCountry(ctry, target);\n+            providersvrnt = LNP.getDisplayVariant(vrnt, target);\n+        }\n@@ -54,4 +89,19 @@\n-    LocaleNameProviderTest() {\n-        checkAvailLocValidityTest();\n-        variantFallbackTest();\n-    }\n+        \/\/ JRE's name\n+        String jreslang = null;\n+        String jresctry = null;\n+        String jresvrnt = null;\n+        if (!lang.isEmpty()) {\n+            try {\n+                jreslang = rb.getString(lang);\n+            } catch (MissingResourceException mre) {}\n+        }\n+        if (!ctry.isEmpty()) {\n+            try {\n+                jresctry = rb.getString(ctry);\n+            } catch (MissingResourceException mre) {}\n+        }\n+        if (!vrnt.isEmpty()) {\n+            try {\n+                jresvrnt = rb.getString(\"%%\"+vrnt);\n+            } catch (MissingResourceException mre) {}\n+        }\n@@ -59,6 +109,7 @@\n-    void checkAvailLocValidityTest() {\n-        LocaleNameProviderImpl lnp = new LocaleNameProviderImpl();\n-        Locale[] availloc = Locale.getAvailableLocales();\n-        Locale[] testloc = availloc.clone();\n-        List<Locale> jreimplloc = Arrays.asList(LocaleProviderAdapter.forJRE().getLocaleNameProvider().getAvailableLocales());\n-        List<Locale> providerloc = Arrays.asList(lnp.getAvailableLocales());\n+        checkValidity(target, jreslang, providerslang, langresult,\n+            jreSupports && jreslang != null);\n+        checkValidity(target, jresctry, providersctry, ctryresult,\n+            jreSupports && jresctry != null);\n+        checkValidity(target, jresvrnt, providersvrnt, vrntresult,\n+            jreSupports && jresvrnt != null);\n+    }\n@@ -66,1 +117,11 @@\n-        for (Locale target: availloc) {\n+    public static List<Arguments> checkAvailLocValidityTest() {\n+        var args = new ArrayList<Arguments>();\n+        Locale[] availloc = Arrays.stream(Locale.getAvailableLocales())\n+                .filter(l -> l.getLanguage().equals(\"ja\"))\n+                .toArray(Locale[]::new);\n+        List<Locale> jreimplloc = Arrays.stream(LocaleProviderAdapter.forJRE().getLocaleNameProvider().getAvailableLocales())\n+                .filter(l -> l.getLanguage().equals(\"ja\"))\n+                .toList();\n+        List<Locale> providerloc = Arrays.asList(LNP.getAvailableLocales());\n+\n+        for (Locale target : availloc) {\n@@ -68,1 +129,1 @@\n-            OpenListResourceBundle rb = ((ResourceBundleBasedAdapter)LocaleProviderAdapter.forJRE()).getLocaleData().getLocaleNames(target);\n+            OpenListResourceBundle rb = ((ResourceBundleBasedAdapter) LocaleProviderAdapter.forJRE()).getLocaleData().getLocaleNames(target);\n@@ -70,51 +131,3 @@\n-\n-            for (Locale test: testloc) {\n-                \/\/ codes\n-                String lang = test.getLanguage();\n-                String ctry = test.getCountry();\n-                String vrnt = test.getVariant();\n-\n-                \/\/ the localized name\n-                String langresult = test.getDisplayLanguage(target);\n-                String ctryresult = test.getDisplayCountry(target);\n-                String vrntresult = test.getDisplayVariant(target);\n-\n-                \/\/ provider's name (if any)\n-                String providerslang = null;\n-                String providersctry = null;\n-                String providersvrnt = null;\n-                if (providerloc.contains(target)) {\n-                    providerslang = lnp.getDisplayLanguage(lang, target);\n-                    providersctry = lnp.getDisplayCountry(ctry, target);\n-                    providersvrnt = lnp.getDisplayVariant(vrnt, target);\n-                }\n-\n-                \/\/ JRE's name\n-                String jreslang = null;\n-                String jresctry = null;\n-                String jresvrnt = null;\n-                if (!lang.equals(\"\")) {\n-                    try {\n-                        jreslang = rb.getString(lang);\n-                    } catch (MissingResourceException mre) {}\n-                }\n-                if (!ctry.equals(\"\")) {\n-                    try {\n-                        jresctry = rb.getString(ctry);\n-                    } catch (MissingResourceException mre) {}\n-                }\n-                if (!vrnt.equals(\"\")) {\n-                    try {\n-                        jresvrnt = rb.getString(\"%%\"+vrnt);\n-                    } catch (MissingResourceException mre) {}\n-                }\n-\n-                System.out.print(\"For key: \"+lang+\" \");\n-                checkValidity(target, jreslang, providerslang, langresult,\n-                    jreSupportsTarget && jreslang != null);\n-                System.out.print(\"For key: \"+ctry+\" \");\n-                checkValidity(target, jresctry, providersctry, ctryresult,\n-                    jreSupportsTarget && jresctry != null);\n-                System.out.print(\"For key: \"+vrnt+\" \");\n-                checkValidity(target, jresvrnt, providersvrnt, vrntresult,\n-                    jreSupportsTarget && jresvrnt != null);\n+            boolean providerSupportsTarget = providerloc.contains(target);\n+            for (Locale test : availloc) {\n+                args.add(Arguments.of(target, test, rb, jreSupportsTarget, providerSupportsTarget));\n@@ -123,0 +136,1 @@\n+        return args;\n@@ -125,0 +139,1 @@\n+    @Test\n@@ -146,1 +161,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/LocaleNameProviderTest.java","additions":85,"deletions":70,"binary":false,"changes":155,"status":"modified"}]}