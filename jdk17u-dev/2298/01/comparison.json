{"files":[{"patch":"@@ -1705,1 +1705,1 @@\n-void ShenandoahHeap::set_gc_state_all_threads() {\n+void ShenandoahHeap::propagate_gc_state_to_java_threads() {\n@@ -1716,1 +1716,1 @@\n-void ShenandoahHeap::set_gc_state_mask(uint mask, bool value) {\n+void ShenandoahHeap::set_gc_state(uint mask, bool value) {\n@@ -1724,1 +1724,1 @@\n-  set_gc_state_mask(MARKING, in_progress);\n+  set_gc_state(MARKING, in_progress);\n@@ -1730,1 +1730,1 @@\n-  set_gc_state_mask(EVACUATION, in_progress);\n+  set_gc_state(EVACUATION, in_progress);\n@@ -1742,1 +1742,1 @@\n-  set_gc_state_mask(WEAK_ROOTS, cond);\n+  set_gc_state(WEAK_ROOTS, cond);\n@@ -1860,1 +1860,1 @@\n-  set_gc_state_mask(HAS_FORWARDED, cond);\n+  set_gc_state(HAS_FORWARDED, cond);\n@@ -1903,1 +1903,1 @@\n-  set_gc_state_mask(UPDATEREFS, in_progress);\n+  set_gc_state(UPDATEREFS, in_progress);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -292,1 +292,2 @@\n-  void set_gc_state_mask(uint mask, bool value);\n+  \/\/ This updates the singlular, global gc state. This must happen on a safepoint.\n+  void set_gc_state(uint mask, bool value);\n@@ -296,2 +297,8 @@\n-  void set_gc_state_all_threads();\n-  bool has_gc_state_changed() { return _gc_state_changed; }\n+\n+  \/\/ This copies the global gc state into a thread local variable for java threads.\n+  \/\/ It is primarily intended to support quick access at barriers.\n+  void propagate_gc_state_to_java_threads();\n+\n+  \/\/ This is public to support assertions that the state hasn't been changed off of\n+  \/\/ a safepoint and that any changes were propagated to java threads after the safepoint.\n+  bool has_gc_state_changed() const { return _gc_state_changed; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+    assert(thread->is_Java_thread(), \"GC state is only synchronized to java threads\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -71,1 +71,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -77,1 +77,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -83,1 +83,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -89,1 +89,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -95,1 +95,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n@@ -101,1 +101,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -622,1 +622,1 @@\n-  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+  ShenandoahHeap::heap()->propagate_gc_state_to_java_threads();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}