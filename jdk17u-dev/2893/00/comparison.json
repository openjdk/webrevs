{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -71,1 +73,2 @@\n-    static private volatile boolean testFailed, eventsReceived, threadsStarted;\n+    static private volatile boolean testFailed;\n+    static private CountDownLatch eventsReceivedLatch;\n@@ -82,3 +85,1 @@\n-        eventsReceived = false;\n-        threadsStarted = false;\n-\n+        eventsReceivedLatch = new CountDownLatch(1);\n@@ -114,2 +115,4 @@\n-                    \/\/ handle events until all threads started and all expected events received\n-                    while (!(threadsStarted && eventsReceived)) {\n+                    boolean isConnected = true;\n+                    boolean allEventsReceived = false;\n+                    \/\/ handle events until debuggee is disconnected\n+                    while (isConnected) {\n@@ -133,2 +136,4 @@\n-                            \/\/ handle ClassPrepareEvent\n-                            if (event instanceof ClassPrepareEvent) {\n+                            if (event instanceof VMDeathEvent || event instanceof VMDisconnectEvent) {\n+                                log.display(\"eventHandler got \" + event);\n+                                isConnected = false;\n+                            } else  if (event instanceof ClassPrepareEvent) {\n@@ -198,5 +203,14 @@\n-                                              \/\/ Check that all expected ClassPrepareEvent are received\n-                                              eventsReceived = true;\n-                                              for (int i = 0; i < checkedTypes.length; i++) {\n-                                                   if (checkedTypes[i][2] == \"0\")\n-                                                       eventsReceived = false;\n+                                              \/\/ Check that all expected ClassPrepareEvent(s) are received.\n+                                              if (!allEventsReceived) {\n+                                                  allEventsReceived = true;\n+                                                  for (int i = 0; i < checkedTypes.length; i++) {\n+                                                      \/\/ checkedTypes[i][2] is \"0\" initially,\n+                                                      \/\/ \"1\" after corresponding ClassPrepareEvent is received.\n+                                                      if (checkedTypes[i][2] == \"0\") {\n+                                                          allEventsReceived = false;\n+                                                          break;\n+                                                      }\n+                                                  }\n+                                                  if (allEventsReceived) {\n+                                                      eventsReceivedLatch.countDown();\n+                                                  }\n@@ -219,1 +233,3 @@\n-                        eventSet.resume();\n+                        if (isConnected) {\n+                            eventSet.resume();\n+                        }\n@@ -260,3 +276,0 @@\n-            \/\/ notify EventHandler that all threads started\n-            threadsStarted = true;\n-\n@@ -265,6 +278,4 @@\n-                  eventHandler.join(eventTimeout);\n-                  if (eventHandler.isAlive()) {\n-                      log.complain(\"FAILURE 20: Timeout for waiting event was exceeded\");\n-                      eventHandler.interrupt();\n-                      testFailed = true;\n-                  }\n+                if (!eventsReceivedLatch.await(eventTimeout, TimeUnit.MILLISECONDS)) {\n+                    log.complain(\"FAILURE 20: Timeout waiting for all events was exceeded\");\n+                    testFailed = true;\n+                }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareEvent\/referenceType\/refType001.java","additions":34,"deletions":23,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -75,1 +77,2 @@\n-    static private volatile boolean testFailed, eventsReceived, threadsStarted;\n+    static private volatile boolean testFailed;\n+    static private CountDownLatch eventsReceivedLatch;\n@@ -86,2 +89,1 @@\n-        eventsReceived = false;\n-        threadsStarted = false;\n+        eventsReceivedLatch = new CountDownLatch(1);\n@@ -134,2 +136,4 @@\n-                    \/\/ handle events until all threads started and all expected events received\n-                    while (!(threadsStarted && eventsReceived)) {\n+                    boolean isConnected = true;\n+                    boolean allEventsReceived = false;\n+                    \/\/ handle events until debuggee is disconnected\n+                    while (isConnected) {\n@@ -153,2 +157,4 @@\n-                            \/\/ handle ClassPrepareEvent\n-                            if (event instanceof ClassPrepareEvent) {\n+                            if (event instanceof VMDeathEvent || event instanceof VMDisconnectEvent) {\n+                                log.display(\"eventHandler got \" + event);\n+                                isConnected = false;\n+                            } else  if (event instanceof ClassPrepareEvent) {\n@@ -227,6 +233,14 @@\n-                                          \/\/ Check that all expected ClassPrepareEvent are received\n-                                          eventsReceived = true;\n-                                          for (int i = 0; i < checkedThreads.length; i++) {\n-                                               if (checkedThreads[i][2] == \"0\") {\n-                                                    eventsReceived = false;\n-                                               }\n+                                          \/\/ Check that all expected ClassPrepareEvent(s) are received.\n+                                          if (!allEventsReceived) {\n+                                              allEventsReceived = true;\n+                                              for (int i = 0; i < checkedThreads.length; i++) {\n+                                                  \/\/ checkedTypes[i][2] is \"0\" initially,\n+                                                  \/\/ \"1\" after corresponding ClassPrepareEvent is received.\n+                                                  if (checkedThreads[i][2] == \"0\") {\n+                                                      allEventsReceived = false;\n+                                                      break;\n+                                                   }\n+                                              }\n+                                              if (allEventsReceived) {\n+                                                  eventsReceivedLatch.countDown();\n+                                              }\n@@ -243,1 +257,3 @@\n-                        eventSet.resume();\n+                        if (isConnected) {\n+                            eventSet.resume();\n+                        }\n@@ -283,3 +299,0 @@\n-            \/\/ notify EventHandler that all threads started\n-            threadsStarted = true;\n-\n@@ -288,6 +301,4 @@\n-                  eventHandler.join(eventTimeout);\n-                  if (eventHandler.isAlive()) {\n-                      log.complain(\"FAILURE 20: Timeout for waiting event was exceeded\");\n-                      eventHandler.interrupt();\n-                      testFailed = true;\n-                  }\n+                if (!eventsReceivedLatch.await(eventTimeout, TimeUnit.MILLISECONDS)) {\n+                    log.complain(\"FAILURE 20: Timeout waiting for all events was exceeded\");\n+                    testFailed = true;\n+                }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareEvent\/thread\/thread001.java","additions":34,"deletions":23,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+        pipe.println(COMMAND_QUIT);\n@@ -172,1 +173,0 @@\n-            elThread.isConnected = false;\n@@ -183,1 +183,0 @@\n-        pipe.println(COMMAND_QUIT);\n@@ -198,1 +197,0 @@\n-        public volatile boolean isConnected = true;\n@@ -202,0 +200,1 @@\n+                boolean isConnected = true;\n@@ -208,2 +207,2 @@\n-                            if (event instanceof VMDeathEvent) {\n-                                tot_res = FAILED;\n+                            if (event instanceof VMDeathEvent || event instanceof VMDisconnectEvent) {\n+                                log.display(\"EventListener: got \" + event);\n@@ -211,6 +210,1 @@\n-                                log.complain(\"TEST FAILED: unexpected VMDeathEvent\");\n-                            } else if (event instanceof VMDisconnectEvent) {\n-                                tot_res = FAILED;\n-                                isConnected = false;\n-                                log.complain(\"TEST FAILED: unexpected VMDisconnectEvent\");\n-                            } else\n+                            } else {\n@@ -219,3 +213,2 @@\n-                        }\n-                        if (isConnected) {\n-                            eventSet.resume();\n+                                eventSet.resume();\n+                            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/threadDeathRequests\/thrdeathreq001.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"}]}