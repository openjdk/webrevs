{"files":[{"patch":"@@ -37,7 +37,0 @@\n-import javax.net.ssl.*;\n-import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.security.GeneralSecurityException;\n-import java.util.List;\n-import java.util.ArrayList;\n@@ -45,0 +38,1 @@\n+import java.util.List;\n@@ -46,3 +40,1 @@\n-public class NoDesRC4CiphSuite {\n-\n-    private static final boolean DEBUG = false;\n+public class NoDesRC4CiphSuite extends AbstractDisableCipherSuites {\n@@ -50,2 +42,0 @@\n-    private static final byte RECTYPE_HS = 0x16;\n-    private static final byte HSMSG_CLIHELLO = 0x01;\n@@ -84,2 +74,0 @@\n-    private static final ByteBuffer CLIOUTBUF =\n-            ByteBuffer.wrap(\"Client Side\".getBytes());\n@@ -91,0 +79,1 @@\n+        NoDesRC4CiphSuite test = new NoDesRC4CiphSuite();\n@@ -93,3 +82,3 @@\n-        allGood &= testDefaultCase(DES_CS_LIST);\n-        allGood &= testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DES_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DES_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DES_CS_LIST_NAMES);\n@@ -98,3 +87,3 @@\n-        allGood &= testDefaultCase(RC4_CS_LIST);\n-        allGood &= testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n-        allGood &= testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(RC4_CS_LIST);\n+        allGood &= test.testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n@@ -108,238 +97,0 @@\n-\n-    \/**\n-     * Create an engine with the default set of cipher suites enabled and make\n-     * sure none of the disabled suites are present in the client hello.\n-     *\n-     * @param disabledSuiteIds the {@code List} of disabled cipher suite IDs\n-     *      to be checked for.\n-     *\n-     * @return true if the test passed (No disabled suites), false otherwise\n-     *\/\n-    private static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n-            throws Exception {\n-        System.err.println(\"\\nTest: Default SSLEngine suite set\");\n-        SSLEngine ssle = makeEngine();\n-        if (DEBUG) {\n-            listCiphers(\"Suite set upon creation\", ssle);\n-        }\n-        SSLEngineResult clientResult;\n-        ByteBuffer cTOs = makeClientBuf(ssle);\n-        clientResult = ssle.wrap(CLIOUTBUF, cTOs);\n-        if (DEBUG) {\n-            dumpResult(\"ClientHello: \", clientResult);\n-        }\n-        cTOs.flip();\n-        boolean foundSuite = areSuitesPresentCH(cTOs, disabledSuiteIds);\n-        if (foundSuite) {\n-            System.err.println(\"FAIL: Found disabled suites!\");\n-            return false;\n-        } else {\n-            System.err.println(\"PASS: No disabled suites found.\");\n-            return true;\n-        }\n-    }\n-\n-    \/**\n-     * Create an engine and set only disabled cipher suites.\n-     * The engine should not create the client hello message since the only\n-     * available suites to assert in the client hello are disabled ones.\n-     *\n-     * @param disabledSuiteNames an array of cipher suite names that\n-     *      should be disabled cipher suites.\n-     *\n-     * @return true if the engine throws SSLHandshakeException during client\n-     *      hello creation, false otherwise.\n-     *\/\n-    private static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n-            throws Exception {\n-        System.err.println(\n-                \"\\nTest: SSLEngine configured with only disabled suites\");\n-        try {\n-            SSLEngine ssle = makeEngine();\n-            ssle.setEnabledCipherSuites(disabledSuiteNames);\n-            if (DEBUG) {\n-                listCiphers(\"Suite set upon creation\", ssle);\n-            }\n-            SSLEngineResult clientResult;\n-            ByteBuffer cTOs = makeClientBuf(ssle);\n-            clientResult = ssle.wrap(CLIOUTBUF, cTOs);\n-            if (DEBUG) {\n-                dumpResult(\"ClientHello: \", clientResult);\n-            }\n-            cTOs.flip();\n-        } catch (SSLHandshakeException shse) {\n-            System.err.println(\"PASS: Caught expected exception: \" + shse);\n-            return true;\n-        }\n-        System.err.println(\"FAIL: Expected SSLHandshakeException not thrown\");\n-        return false;\n-    }\n-\n-    \/**\n-     * Create an engine and add some disabled suites to the default\n-     * set of cipher suites.  Make sure none of the disabled suites show up\n-     * in the client hello even though they were explicitly added.\n-     *\n-     * @param disabledSuiteNames an array of cipher suite names that\n-     *      should be disabled cipher suites.\n-     * @param disabledIds the {@code List} of disabled cipher suite IDs\n-     *      to be checked for.\n-     *\n-     * @return true if the test passed (No disabled suites), false otherwise\n-     *\/\n-    private static boolean testEngAddDisabled(String[] disabledNames,\n-            List<Integer> disabledIds) throws Exception {\n-        System.err.println(\"\\nTest: SSLEngine with disabled suites added\");\n-        SSLEngine ssle = makeEngine();\n-\n-        \/\/ Add disabled suites to the existing engine's set of enabled suites\n-        String[] initialSuites = ssle.getEnabledCipherSuites();\n-        String[] plusDisSuites = Arrays.copyOf(initialSuites,\n-                initialSuites.length + disabledNames.length);\n-        System.arraycopy(disabledNames, 0, plusDisSuites,\n-                initialSuites.length, disabledNames.length);\n-        ssle.setEnabledCipherSuites(plusDisSuites);\n-\n-        if (DEBUG) {\n-            listCiphers(\"Suite set upon creation\", ssle);\n-        }\n-        SSLEngineResult clientResult;\n-        ByteBuffer cTOs = makeClientBuf(ssle);\n-        clientResult = ssle.wrap(CLIOUTBUF, cTOs);\n-        if (DEBUG) {\n-            dumpResult(\"ClientHello: \", clientResult);\n-        }\n-        cTOs.flip();\n-        boolean foundDisabled = areSuitesPresentCH(cTOs, disabledIds);\n-        if (foundDisabled) {\n-            System.err.println(\"FAIL: Found disabled suites!\");\n-            return false;\n-        } else {\n-            System.err.println(\"PASS: No disabled suites found.\");\n-            return true;\n-        }\n-    }\n-\n-    private static SSLEngine makeEngine() throws GeneralSecurityException {\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n-        ctx.init(null, null, null);\n-        return ctx.createSSLEngine();\n-    }\n-\n-    private static ByteBuffer makeClientBuf(SSLEngine ssle) {\n-        ssle.setUseClientMode(true);\n-        ssle.setNeedClientAuth(false);\n-        SSLSession sess = ssle.getSession();\n-        ByteBuffer cTOs = ByteBuffer.allocateDirect(sess.getPacketBufferSize());\n-        return cTOs;\n-    }\n-\n-    private static void listCiphers(String prefix, SSLEngine ssle) {\n-        System.err.println(prefix + \"\\n---------------\");\n-        String[] suites = ssle.getEnabledCipherSuites();\n-        for (String suite : suites) {\n-            System.err.println(suite);\n-        }\n-        System.err.println(\"---------------\");\n-    }\n-\n-    \/**\n-     * Walk a TLS 1.2 or earlier ClientHello looking for any of the suites\n-     * in the suiteIdList.\n-     *\n-     * @param clientHello a ByteBuffer containing the ClientHello message as\n-     *      a complete TLS record.  The position of the buffer should be\n-     *      at the first byte of the TLS record header.\n-     * @param suiteIdList a List of integer values corresponding to\n-     *      TLS cipher suite identifiers.\n-     *\n-     * @return true if at least one of the suites in {@code suiteIdList}\n-     * is found in the ClientHello's cipher suite list\n-     *\n-     * @throws IOException if the data in the {@code clientHello}\n-     *      buffer is not a TLS handshake message or is not a client hello.\n-     *\/\n-    private static boolean areSuitesPresentCH(ByteBuffer clientHello,\n-            List<Integer> suiteIdList) throws IOException {\n-        byte val;\n-\n-        \/\/ Process the TLS Record\n-        val = clientHello.get();\n-        if (val != RECTYPE_HS) {\n-            throw new IOException(\n-                    \"Not a handshake record, type = \" + val);\n-        }\n-\n-        \/\/ Just skip over the version and length\n-        clientHello.position(clientHello.position() + 4);\n-\n-        \/\/ Check the handshake message type\n-        val = clientHello.get();\n-        if (val != HSMSG_CLIHELLO) {\n-            throw new IOException(\n-                    \"Not a ClientHello handshake message, type = \" + val);\n-        }\n-\n-        \/\/ Skip over the length\n-        clientHello.position(clientHello.position() + 3);\n-\n-        \/\/ Skip over the protocol version (2) and random (32);\n-        clientHello.position(clientHello.position() + 34);\n-\n-        \/\/ Skip past the session ID (variable length <= 32)\n-        int len = Byte.toUnsignedInt(clientHello.get());\n-        if (len > 32) {\n-            throw new IOException(\"Session ID is too large, len = \" + len);\n-        }\n-        clientHello.position(clientHello.position() + len);\n-\n-        \/\/ Finally, we are at the cipher suites.  Walk the list and place them\n-        \/\/ into a List.\n-        int csLen = Short.toUnsignedInt(clientHello.getShort());\n-        if (csLen % 2 != 0) {\n-            throw new IOException(\"CipherSuite length is invalid, len = \" +\n-                    csLen);\n-        }\n-        int csCount = csLen \/ 2;\n-        List<Integer> csSuiteList = new ArrayList<>(csCount);\n-        log(\"Found following suite IDs in hello:\");\n-        for (int i = 0; i < csCount; i++) {\n-            int curSuite = Short.toUnsignedInt(clientHello.getShort());\n-            log(String.format(\"Suite ID: 0x%04x\", curSuite));\n-            csSuiteList.add(curSuite);\n-        }\n-\n-        \/\/ Now check to see if any of the suites passed in match what is in\n-        \/\/ the suite list.\n-        boolean foundMatch = false;\n-        for (Integer cs : suiteIdList) {\n-            if (csSuiteList.contains(cs)) {\n-                System.err.format(\"Found match for suite ID 0x%04x\\n\", cs);\n-                foundMatch = true;\n-                break;\n-            }\n-        }\n-\n-        \/\/ We don't care about the rest of the ClientHello message.\n-        \/\/ Rewind and return whether we found a match or not.\n-        clientHello.rewind();\n-        return foundMatch;\n-    }\n-\n-    private static void dumpResult(String str, SSLEngineResult result) {\n-        System.err.println(\"The format of the SSLEngineResult is: \\n\" +\n-            \"\\t\\\"getStatus() \/ getHandshakeStatus()\\\" +\\n\" +\n-            \"\\t\\\"bytesConsumed() \/ bytesProduced()\\\"\\n\");\n-        HandshakeStatus hsStatus = result.getHandshakeStatus();\n-        System.err.println(str + result.getStatus() + \"\/\" + hsStatus + \", \" +\n-            result.bytesConsumed() + \"\/\" + result.bytesProduced() + \" bytes\");\n-        if (hsStatus == HandshakeStatus.FINISHED) {\n-            System.err.println(\"\\t...ready for application data\");\n-        }\n-    }\n-\n-    private static void log(String str) {\n-        if (DEBUG) {\n-            System.err.println(str);\n-        }\n-    }\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NoDesRC4CiphSuite.java","additions":9,"deletions":258,"binary":false,"changes":267,"status":"modified"}]}