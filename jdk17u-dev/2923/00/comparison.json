{"files":[{"patch":"@@ -988,1 +988,3 @@\n-        st->print_cr(\"%s\", envvar);\n+        st->print(\"%s\", envvar);\n+        \/\/ Use separate cr() printing to avoid unnecessary buffer operations that might cause truncation.\n+        st->cr();\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271003\n+ * @summary CLASSPATH env variable setting should not be truncated in a hs err log.\n+ * @library \/test\/lib\n+ * @run driver ClassPathEnvVar\n+ *\/\n+import java.io.File;\n+import java.util.Map;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ClassPathEnvVar {\n+    private static final String pathSep = File.pathSeparator;\n+    private static final String sep = File.separator;\n+    private static final String classPathEnv = \"CLASSPATH\";\n+    private static final String endPath = \"end-path\";\n+\n+    public static void main(String[] args) throws Exception {\n+        OutputAnalyzer output = runCrasher().shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+                                             .shouldNotHaveExitValue(0);\n+\n+        checkErrorLog(output);\n+\n+    }\n+    private static OutputAnalyzer runCrasher() throws Exception {\n+        ProcessBuilder pb =\n+            ProcessTools.createJavaProcessBuilder(\"-XX:-CreateCoredumpOnCrash\",\n+                                                  \"-XX:ErrorHandlerTest=14\",\n+                                                  \"-XX:+ErrorFileToStdout\");\n+\n+        \/\/ Obtain the CLASSPATH setting and expand it to more than 2000 chars.\n+        Map<String, String> envMap = pb.environment();\n+        String cp = envMap.get(classPathEnv);\n+        if (cp == null) {\n+            cp = \"this\" + sep + \"is\" + sep + \"dummy\" + sep + \"path\";\n+        }\n+        while (cp.length() < 2000) {\n+            cp += pathSep + cp;\n+        }\n+        cp += pathSep + endPath;\n+        envMap.put(classPathEnv, cp);\n+\n+        return new OutputAnalyzer(pb.start());\n+    }\n+\n+    private static void checkErrorLog(OutputAnalyzer output) throws Exception {\n+        String classPathLine = output.firstMatch(\"CLASSPATH=.*\");\n+\n+        if (classPathLine == null) {\n+            throw new RuntimeException(\"CLASSPATH setting not found in hs err log.\");\n+        }\n+\n+        \/\/ Check if the CLASSPATH line has been truncated.\n+        if (!classPathLine.endsWith(endPath)) {\n+            throw new RuntimeException(\"CLASSPATH was truncated in the hs err log.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ClassPathEnvVar.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}