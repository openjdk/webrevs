{"files":[{"patch":"@@ -143,1 +143,7 @@\n-    extra_save_slots_per_neon_register = slots_per_neon_register - save_slots_per_register\n+    extra_save_slots_per_neon_register = slots_per_neon_register - save_slots_per_register,\n+    neon_vl = 16,\n+    \/\/ VLmax: The maximum sve vector length is determined by the hardware\n+    \/\/ sve_vl_min <= VLmax <= sve_vl_max.\n+    sve_vl_min = 16,\n+    \/\/ Maximum supported vector length across all CPUs\n+    sve_vl_max = 256\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"register_aarch64.hpp\"\n@@ -403,3 +404,0 @@\n-    if (UseSVE > 0) {\n-      _initial_sve_vector_length = get_current_sve_vector_length();\n-    }\n@@ -411,0 +409,16 @@\n+  if (UseSVE > 0) {\n+    int vl = get_current_sve_vector_length();\n+    if (vl < 0) {\n+      warning(\"Unable to get SVE vector length on this system. \"\n+              \"Disabling SVE. Specify -XX:UseSVE=0 to shun this warning.\");\n+      FLAG_SET_DEFAULT(UseSVE, 0);\n+    } else if ((vl == 0) || ((vl % FloatRegisterImpl::sve_vl_min) != 0) || !is_power_of_2(vl)) {\n+      warning(\"Detected SVE vector length (%d) should be a power of two and a multiple of %d. \"\n+              \"Disabling SVE. Specify -XX:UseSVE=0 to shun this warning.\",\n+              vl, FloatRegisterImpl::sve_vl_min);\n+      FLAG_SET_DEFAULT(UseSVE, 0);\n+    } else {\n+      _initial_sve_vector_length = vl;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"}]}