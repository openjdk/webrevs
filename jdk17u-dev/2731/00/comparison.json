{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-    private static boolean isExcludedSpacingMark(int cp) {\n+    static boolean isExcludedSpacingMark(int cp) {\n@@ -157,1 +157,1 @@\n-               cp >= 0x1062 && cp <= 0x106D ||\n+               cp >= 0x1067 && cp <= 0x106D ||\n@@ -167,1 +167,1 @@\n-    private static int getType(int cp) {\n+    static int getType(int cp) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Grapheme.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,388 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7071819 8221431 8239383\n- * @summary tests Unicode Extended Grapheme support\n- * @library \/lib\/testlibrary\/java\/lang\n- * @run testng GraphemeTest\n- *\/\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.fail;\n-\n-public class GraphemeTest {\n-\n-    @Test\n-    public static void testGraphemeBreakProperty() throws Throwable {\n-        testProps(UCDFiles.GRAPHEME_BREAK_PROPERTY);\n-    }\n-\n-    @Test\n-    public static void testEmojiData() throws Throwable {\n-        testProps(UCDFiles.EMOJI_DATA);\n-    }\n-\n-    private static void testProps(Path path) throws IOException {\n-        Files.lines(path)\n-            .map( ln -> ln.replaceFirst(\"#.*\", \"\") )\n-            .filter( ln -> ln.length() != 0 )\n-            .forEach(ln -> {\n-                    String[] strs = ln.split(\"\\\\s+\");\n-                    int off = strs[0].indexOf(\"..\");\n-                    int cp0, cp1;\n-                    String expected = strs[2];\n-                    if (off != -1) {\n-                        cp0 = Integer.parseInt(strs[0], 0, off, 16);\n-                        cp1 = Integer.parseInt(strs[0], off + 2, strs[0].length(), 16);\n-                    } else {\n-                        cp0 = cp1 = Integer.parseInt(strs[0], 16);\n-                    }\n-                    for (int cp = cp0; cp <=  cp1; cp++) {\n-                        \/\/ Ignore Emoji* for now (only interested in Extended_Pictographic)\n-                        if (expected.startsWith(\"Emoji\")) {\n-                            continue;\n-                        }\n-\n-                        \/\/ NOTE:\n-                        \/\/ #tr29 \"plus a few General_Category = Spacing_Mark needed for\n-                        \/\/ canonical equivalence.\"\n-                        \/\/ For \"extended grapheme clusters\" support, there is no\n-                        \/\/ need actually to diff \"extend\" and \"spackmark\" given GB9, GB9a.\n-                        if (!expected.equals(types[getType(cp)])) {\n-                            if (\"Extend\".equals(expected) &&\n-                                \"SpacingMark\".equals(types[getType(cp)]))\n-                                System.out.printf(\"[%x]  [%s][%d] -> [%s]%n\",\n-                                    cp, expected, Character.getType(cp), types[getType(cp)]);\n-                            else\n-                                fail(String.format(\n-                                    \"cp=[%x], expeced:[%s] result:[%s]%n\",\n-                                    cp, expected, types[getType(cp)]));\n-                        }\n-                    }\n-                });\n-    }\n-\n-    private static final String[] types = {\n-        \"Other\", \"CR\", \"LF\", \"Control\", \"Extend\", \"ZWJ\", \"Regional_Indicator\",\n-        \"Prepend\", \"SpacingMark\",\n-        \"L\", \"V\", \"T\", \"LV\", \"LVT\",\n-        \"Extended_Pictographic\" };\n-\n-    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-    \/\/ from java.util.regex.Grapheme.java\n-    \/\/ types\n-    private static final int OTHER = 0;\n-    private static final int CR = 1;\n-    private static final int LF = 2;\n-    private static final int CONTROL = 3;\n-    private static final int EXTEND = 4;\n-    private static final int ZWJ = 5;\n-    private static final int RI = 6;\n-    private static final int PREPEND = 7;\n-    private static final int SPACINGMARK = 8;\n-    private static final int L = 9;\n-    private static final int V = 10;\n-    private static final int T = 11;\n-    private static final int LV = 12;\n-    private static final int LVT = 13;\n-    private static final int EXTENDED_PICTOGRAPHIC = 14;\n-\n-    private static final int FIRST_TYPE = 0;\n-    private static final int LAST_TYPE = 14;\n-\n-    private static boolean[][] rules;\n-    static {\n-        rules = new boolean[LAST_TYPE + 1][LAST_TYPE + 1];\n-        \/\/ GB 999 Any + Any  -> default\n-        for (int i = FIRST_TYPE; i <= LAST_TYPE; i++)\n-            for (int j = FIRST_TYPE; j <= LAST_TYPE; j++)\n-                rules[i][j] = true;\n-        \/\/ GB 6 L x (L | V | LV | VT)\n-        rules[L][L] = false;\n-        rules[L][V] = false;\n-        rules[L][LV] = false;\n-        rules[L][LVT] = false;\n-        \/\/ GB 7 (LV | V) x (V | T)\n-        rules[LV][V] = false;\n-        rules[LV][T] = false;\n-        rules[V][V] = false;\n-        rules[V][T] = false;\n-        \/\/ GB 8 (LVT | T) x T\n-        rules[LVT][T] = false;\n-        rules[T][T] = false;\n-        \/\/ GB 9 x (Extend|ZWJ)\n-        \/\/ GB 9a x Spacing Mark\n-        \/\/ GB 9b Prepend x\n-        for (int i = FIRST_TYPE; i <= LAST_TYPE; i++) {\n-            rules[i][EXTEND] = false;\n-            rules[i][ZWJ] = false;\n-            rules[i][SPACINGMARK] = false;\n-            rules[PREPEND][i] = false;\n-        }\n-        \/\/ GB 4  (Control | CR | LF) +\n-        \/\/ GB 5  + (Control | CR | LF)\n-        for (int i = FIRST_TYPE; i <= LAST_TYPE; i++)\n-            for (int j = CR; j <= CONTROL; j++) {\n-                rules[i][j] = true;\n-                rules[j][i] = true;\n-            }\n-        \/\/ GB 3 CR x LF\n-        rules[CR][LF] = false;\n-        \/\/ GB 11 Exended_Pictographic x (Extend|ZWJ)\n-        rules[EXTENDED_PICTOGRAPHIC][EXTEND] = false;\n-        rules[EXTENDED_PICTOGRAPHIC][ZWJ] = false;\n-    }\n-\n-    \/\/ Hangul syllables\n-    private static final int SYLLABLE_BASE = 0xAC00;\n-    private static final int LCOUNT = 19;\n-    private static final int VCOUNT = 21;\n-    private static final int TCOUNT = 28;\n-    private static final int NCOUNT = VCOUNT * TCOUNT; \/\/ 588\n-    private static final int SCOUNT = LCOUNT * NCOUNT; \/\/ 11172\n-\n-    \/\/ #tr29: SpacingMark exceptions: The following (which have\n-    \/\/ General_Category = Spacing_Mark and would otherwise be included)\n-    \/\/ are specifically excluded\n-    private static boolean isExcludedSpacingMark(int cp) {\n-       return  cp == 0x102B || cp == 0x102C || cp == 0x1038 ||\n-               cp >= 0x1062 && cp <= 0x1064 ||\n-               cp >= 0x1062 && cp <= 0x106D ||\n-               cp == 0x1083 ||\n-               cp >= 0x1087 && cp <= 0x108C ||\n-               cp == 0x108F ||\n-               cp >= 0x109A && cp <= 0x109C ||\n-               cp == 0x1A61 || cp == 0x1A63 || cp == 0x1A64 ||\n-               cp == 0xAA7B || cp == 0xAA7D;\n-    }\n-\n-    @SuppressWarnings(\"fallthrough\")\n-    private static int getType(int cp) {\n-        if (isExtendedPictographic(cp)) {\n-            return EXTENDED_PICTOGRAPHIC;\n-        }\n-\n-        int type = Character.getType(cp);\n-        switch(type) {\n-        case Character.CONTROL:\n-            if (cp == 0x000D)\n-                return CR;\n-            if (cp == 0x000A)\n-                return LF;\n-            return CONTROL;\n-        case Character.UNASSIGNED:\n-            \/\/ NOTE: #tr29 lists \"Unassigned and Default_Ignorable_Code_Point\" as Control\n-            \/\/ but GraphemeBreakTest.txt lists u+0378\/reserved-0378 as \"Other\"\n-            \/\/ so type it as \"Other\" to make the test happy\n-            if (cp == 0x0378)\n-                return OTHER;\n-\n-        case Character.LINE_SEPARATOR:\n-        case Character.PARAGRAPH_SEPARATOR:\n-        case Character.SURROGATE:\n-            return CONTROL;\n-        case Character.FORMAT:\n-            if (cp == 0x200C ||\n-                cp >= 0xE0020 && cp <= 0xE007F)\n-                return EXTEND;\n-            if (cp == 0x200D)\n-                return ZWJ;\n-            if (cp >= 0x0600 && cp <= 0x0605 ||\n-                cp == 0x06DD || cp == 0x070F || cp == 0x08E2 ||\n-                cp == 0x110BD || cp == 0x110CD)\n-                return PREPEND;\n-            return CONTROL;\n-        case Character.NON_SPACING_MARK:\n-        case Character.ENCLOSING_MARK:\n-            \/\/ NOTE:\n-            \/\/ #tr29 \"plus a few General_Category = Spacing_Mark needed for\n-            \/\/ canonical equivalence.\"\n-            \/\/ but for \"extended grapheme clusters\" support, there is no\n-            \/\/ need actually to diff \"extend\" and \"spackmark\" given GB9, GB9a\n-            return EXTEND;\n-        case  Character.COMBINING_SPACING_MARK:\n-            if (isExcludedSpacingMark(cp))\n-                return OTHER;\n-            \/\/ NOTE:\n-            \/\/ 0x11720 and 0x11721 are mentioned in #tr29 as\n-            \/\/ OTHER_LETTER but it appears their category has been updated to\n-            \/\/ COMBING_SPACING_MARK already (verified in ver.8)\n-            return SPACINGMARK;\n-        case Character.OTHER_SYMBOL:\n-            if (cp >= 0x1F1E6 && cp <= 0x1F1FF)\n-                return RI;\n-            return OTHER;\n-        case Character.MODIFIER_LETTER:\n-        case Character.MODIFIER_SYMBOL:\n-            \/\/ WARNING:\n-            \/\/ not mentioned in #tr29 but listed in GraphemeBreakProperty.txt\n-            if (cp == 0xFF9E || cp == 0xFF9F ||\n-                cp >= 0x1F3FB && cp <= 0x1F3FF)\n-                return EXTEND;\n-            return OTHER;\n-        case Character.OTHER_LETTER:\n-            if (cp == 0x0E33 || cp == 0x0EB3)\n-                return SPACINGMARK;\n-            \/\/ hangul jamo\n-            if (cp >= 0x1100 && cp <= 0x11FF) {\n-                if (cp <= 0x115F)\n-                    return L;\n-                if (cp <= 0x11A7)\n-                    return V;\n-                return T;\n-            }\n-            \/\/ hangul syllables\n-            int sindex = cp - SYLLABLE_BASE;\n-            if (sindex >= 0 && sindex < SCOUNT) {\n-\n-                if (sindex % TCOUNT == 0)\n-                    return LV;\n-                return LVT;\n-            }\n-            \/\/  hangul jamo_extended A\n-            if (cp >= 0xA960 && cp <= 0xA97C)\n-                return L;\n-            \/\/  hangul jamo_extended B\n-            if (cp >= 0xD7B0 && cp <= 0xD7C6)\n-                return V;\n-            if (cp >= 0xD7CB && cp <= 0xD7FB)\n-                return T;\n-\n-            \/\/ Prepend\n-            switch (cp) {\n-                case 0x0D4E:\n-                case 0x111C2:\n-                case 0x111C3:\n-                case 0x1193F:\n-                case 0x11941:\n-                case 0x11A3A:\n-                case 0x11A84:\n-                case 0x11A85:\n-                case 0x11A86:\n-                case 0x11A87:\n-                case 0x11A88:\n-                case 0x11A89:\n-                case 0x11D46:\n-                    return PREPEND;\n-            }\n-        }\n-        return OTHER;\n-    }\n-\n-    \/\/ from generated java.util.regex.EmojiData.java\n-    static boolean isExtendedPictographic(int cp) {\n-        return\n-                cp == 0x00A9 ||\n-                cp == 0x00AE ||\n-                cp == 0x203C ||\n-                cp == 0x2049 ||\n-                cp == 0x2122 ||\n-                cp == 0x2139 ||\n-               (cp >= 0x2194 && cp <= 0x2199) ||\n-                cp == 0x21A9 ||\n-                cp == 0x21AA ||\n-                cp == 0x231A ||\n-                cp == 0x231B ||\n-                cp == 0x2328 ||\n-                cp == 0x2388 ||\n-                cp == 0x23CF ||\n-               (cp >= 0x23E9 && cp <= 0x23F3) ||\n-               (cp >= 0x23F8 && cp <= 0x23FA) ||\n-                cp == 0x24C2 ||\n-                cp == 0x25AA ||\n-                cp == 0x25AB ||\n-                cp == 0x25B6 ||\n-                cp == 0x25C0 ||\n-               (cp >= 0x25FB && cp <= 0x25FE) ||\n-               (cp >= 0x2600 && cp <= 0x2605) ||\n-               (cp >= 0x2607 && cp <= 0x2612) ||\n-               (cp >= 0x2614 && cp <= 0x2685) ||\n-               (cp >= 0x2690 && cp <= 0x2705) ||\n-               (cp >= 0x2708 && cp <= 0x2712) ||\n-                cp == 0x2714 ||\n-                cp == 0x2716 ||\n-                cp == 0x271D ||\n-                cp == 0x2721 ||\n-                cp == 0x2728 ||\n-                cp == 0x2733 ||\n-                cp == 0x2734 ||\n-                cp == 0x2744 ||\n-                cp == 0x2747 ||\n-                cp == 0x274C ||\n-                cp == 0x274E ||\n-               (cp >= 0x2753 && cp <= 0x2755) ||\n-                cp == 0x2757 ||\n-               (cp >= 0x2763 && cp <= 0x2767) ||\n-               (cp >= 0x2795 && cp <= 0x2797) ||\n-                cp == 0x27A1 ||\n-                cp == 0x27B0 ||\n-                cp == 0x27BF ||\n-                cp == 0x2934 ||\n-                cp == 0x2935 ||\n-               (cp >= 0x2B05 && cp <= 0x2B07) ||\n-                cp == 0x2B1B ||\n-                cp == 0x2B1C ||\n-                cp == 0x2B50 ||\n-                cp == 0x2B55 ||\n-                cp == 0x3030 ||\n-                cp == 0x303D ||\n-                cp == 0x3297 ||\n-                cp == 0x3299 ||\n-               (cp >= 0x1F000 && cp <= 0x1F0FF) ||\n-               (cp >= 0x1F10D && cp <= 0x1F10F) ||\n-                cp == 0x1F12F ||\n-               (cp >= 0x1F16C && cp <= 0x1F171) ||\n-                cp == 0x1F17E ||\n-                cp == 0x1F17F ||\n-                cp == 0x1F18E ||\n-               (cp >= 0x1F191 && cp <= 0x1F19A) ||\n-               (cp >= 0x1F1AD && cp <= 0x1F1E5) ||\n-               (cp >= 0x1F201 && cp <= 0x1F20F) ||\n-                cp == 0x1F21A ||\n-                cp == 0x1F22F ||\n-               (cp >= 0x1F232 && cp <= 0x1F23A) ||\n-               (cp >= 0x1F23C && cp <= 0x1F23F) ||\n-               (cp >= 0x1F249 && cp <= 0x1F3FA) ||\n-               (cp >= 0x1F400 && cp <= 0x1F53D) ||\n-               (cp >= 0x1F546 && cp <= 0x1F64F) ||\n-               (cp >= 0x1F680 && cp <= 0x1F6FF) ||\n-               (cp >= 0x1F774 && cp <= 0x1F77F) ||\n-               (cp >= 0x1F7D5 && cp <= 0x1F7FF) ||\n-               (cp >= 0x1F80C && cp <= 0x1F80F) ||\n-               (cp >= 0x1F848 && cp <= 0x1F84F) ||\n-               (cp >= 0x1F85A && cp <= 0x1F85F) ||\n-               (cp >= 0x1F888 && cp <= 0x1F88F) ||\n-               (cp >= 0x1F8AE && cp <= 0x1F8FF) ||\n-               (cp >= 0x1F90C && cp <= 0x1F93A) ||\n-               (cp >= 0x1F93C && cp <= 0x1F945) ||\n-               (cp >= 0x1F947 && cp <= 0x1FAFF) ||\n-               (cp >= 0x1FC00 && cp <= 0x1FFFD);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/regex\/GraphemeTest.java","additions":0,"deletions":388,"binary":false,"changes":388,"status":"deleted"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7071819 8221431 8239383 8273430\n+ * @summary tests Unicode Extended Grapheme support\n+ * @library \/lib\/testlibrary\/java\/lang\n+ * @build java.base\/java.util.regex.GraphemeTestAccessor\n+ * @run testng GraphemeTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n+import static org.testng.Assert.assertFalse;\n+import java.util.regex.GraphemeTestAccessor;\n+\n+public class GraphemeTest {\n+\n+    @Test\n+    public static void testGraphemeBreakProperty() throws Throwable {\n+        testProps(UCDFiles.GRAPHEME_BREAK_PROPERTY);\n+    }\n+\n+    @Test\n+    public static void testEmojiData() throws Throwable {\n+        testProps(UCDFiles.EMOJI_DATA);\n+    }\n+\n+    @Test\n+    public static void testExcludedSpacingMarks() {\n+        assertFalse(GraphemeTestAccessor.isExcludedSpacingMark(0x1065));\n+        assertFalse(GraphemeTestAccessor.isExcludedSpacingMark(0x1066));\n+    }\n+\n+    private static void testProps(Path path) throws IOException {\n+        Files.lines(path)\n+                .map(ln -> ln.replaceFirst(\"#.*\", \"\"))\n+                .filter(ln -> ln.length() != 0)\n+                .forEach(ln -> {\n+                    String[] strs = ln.split(\"\\\\s+\");\n+                    int off = strs[0].indexOf(\"..\");\n+                    int cp0, cp1;\n+                    String expected = strs[2];\n+                    if (off != -1) {\n+                        cp0 = Integer.parseInt(strs[0], 0, off, 16);\n+                        cp1 = Integer.parseInt(strs[0], off + 2, strs[0].length(), 16);\n+                    } else {\n+                        cp0 = cp1 = Integer.parseInt(strs[0], 16);\n+                    }\n+                    for (int cp = cp0; cp <= cp1; cp++) {\n+                        \/\/ Ignore Emoji* for now (only interested in Extended_Pictographic)\n+                        if (expected.startsWith(\"Emoji\")) {\n+                            continue;\n+                        }\n+\n+                        \/\/ NOTE:\n+                        \/\/ #tr29 \"plus a few General_Category = Spacing_Mark needed for\n+                        \/\/ canonical equivalence.\"\n+                        \/\/ For \"extended grapheme clusters\" support, there is no\n+                        \/\/ need actually to diff \"extend\" and \"spackmark\" given GB9, GB9a.\n+                        if (!expected.equals(types[GraphemeTestAccessor.getType(cp)])) {\n+                            if (\"Extend\".equals(expected) &&\n+                                    \"SpacingMark\".equals(types[GraphemeTestAccessor.getType(cp)]))\n+                                System.out.printf(\"[%x]  [%s][%d] -> [%s]%n\",\n+                                        cp, expected, Character.getType(cp), types[GraphemeTestAccessor.getType(cp)]);\n+                            else\n+                                fail(String.format(\n+                                        \"cp=[%x], expeced:[%s] result:[%s]%n\",\n+                                        cp, expected, types[GraphemeTestAccessor.getType(cp)]));\n+                        }\n+                    }\n+                });\n+    }\n+\n+    private static final String[] types = {\n+            \"Other\", \"CR\", \"LF\", \"Control\", \"Extend\", \"ZWJ\", \"Regional_Indicator\",\n+            \"Prepend\", \"SpacingMark\",\n+            \"L\", \"V\", \"T\", \"LV\", \"LVT\",\n+            \"Extended_Pictographic\"};\n+}\n+\n","filename":"test\/jdk\/java\/util\/regex\/whitebox\/GraphemeTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.util.regex;\n+\n+public class GraphemeTestAccessor {\n+\n+    public static boolean isExcludedSpacingMark(int cp) {\n+        return Grapheme.isExcludedSpacingMark(cp);\n+    }\n+\n+    public static int getType(int cp) {\n+        return Grapheme.getType(cp);\n+    }\n+}\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/util\/regex\/whitebox\/java.base\/java\/util\/regex\/GraphemeTestAccessor.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"}]}