{"files":[{"patch":"@@ -2865,0 +2865,1 @@\n+    MutexLocker throttle_ml(UseThreadsLockThrottleLock ? ThreadsLockThrottle_lock : NULL);\n@@ -2867,1 +2868,1 @@\n-    MutexLocker mu(Threads_lock);\n+    MutexLocker ml(Threads_lock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2113,0 +2113,4 @@\n+                                                                            \\\n+  product(bool, UseThreadsLockThrottleLock, true, DIAGNOSTIC,               \\\n+          \"Use an extra lock during Thread start and exit to alleviate\"     \\\n+          \"contention on Threads_lock.\")                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+Monitor* ThreadsLockThrottle_lock     = NULL;\n@@ -278,0 +279,1 @@\n+  def(ThreadsLockThrottle_lock     , PaddedMonitor, nonleaf,     false, _safepoint_check_always);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+extern Monitor* ThreadsLockThrottle_lock;        \/\/ used by Thread start\/exit to reduce competition for Threads_lock,\n+                                                 \/\/ so a VM thread calling a safepoint is prioritized\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3548,1 +3548,3 @@\n-  { MonitorLocker ml(Threads_lock);\n+  {\n+    MutexLocker throttle_ml(UseThreadsLockThrottleLock ? ThreadsLockThrottle_lock : NULL);\n+    MonitorLocker ml(Threads_lock);\n@@ -3581,1 +3583,1 @@\n-  } \/\/ unlock Threads_lock\n+  } \/\/ unlock Threads_lock and ThreadsLockThrottle_lock\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}