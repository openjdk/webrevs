{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1201,2 +1201,2 @@\n-    __ ldrb(rscratch1, Address(op->klass()->as_register(),\n-                               InstanceKlass::init_state_offset()));\n+    __ lea(rscratch1, Address(op->klass()->as_register(), InstanceKlass::init_state_offset()));\n+    __ ldarb(rscratch1, rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1412,1 +1412,2 @@\n-  ldrb(scratch, Address(klass, InstanceKlass::init_state_offset()));\n+  lea(scratch, Address(klass, InstanceKlass::init_state_offset()));\n+  ldarb(scratch, scratch);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -952,0 +952,1 @@\n+    __ membar(MacroAssembler::Membar_mask_bits(MacroAssembler::LoadLoad | MacroAssembler::LoadStore), Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3881,0 +3881,1 @@\n+  __ membar(MacroAssembler::Membar_mask_bits(MacroAssembler::LoadLoad | MacroAssembler::LoadStore), Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2294,0 +2294,1 @@\n+    \/\/ acquire barrier included in membar_storestore() which follows the allocation immediately.\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n@@ -2032,2 +2032,2 @@\n-  Label L_fallthrough;\n-  if (L_fast_path == NULL) {\n+  Label L_check_thread, L_fallthrough;\n+  if (L_fast_path == nullptr) {\n@@ -2041,0 +2041,1 @@\n+  \/\/ acquire by cmp-branch-isync if fully_initialized\n@@ -2042,1 +2043,3 @@\n-  beq(CCR0, *L_fast_path);\n+  bne(CCR0, L_check_thread);\n+  isync();\n+  b(*L_fast_path);\n@@ -2045,0 +2048,1 @@\n+  bind(L_check_thread);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2014, 2024, Red Hat Inc. All rights reserved.\n@@ -1015,0 +1015,1 @@\n+    __ membar(MacroAssembler::LoadLoad | MacroAssembler::LoadStore);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -349,0 +349,1 @@\n+  membar(MacroAssembler::LoadLoad | MacroAssembler::LoadStore);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2378,0 +2378,1 @@\n+    \/\/ init_state needs acquire, but S390 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3103,1 +3103,2 @@\n-  \/\/ Fast path check: class is fully initialized\n+  \/\/ Fast path check: class is fully initialized.\n+  \/\/ init_state needs acquire, but S390 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1606,0 +1606,1 @@\n+    \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4267,1 +4267,2 @@\n-  \/\/ Fast path check: class is fully initialized\n+  \/\/ Fast path check: class is fully initialized.\n+  \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3939,2 +3939,6 @@\n-  \/\/ make sure klass is initialized & doesn't have finalizer\n-  \/\/ make sure klass is fully initialized\n+  \/\/ make sure klass is initialized\n+  \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n+#ifdef _LP64\n+  assert(VM_Version::supports_fast_class_init_checks(), \"must support fast class initialization checks\");\n+  __ clinit_barrier(rcx, r15_thread, nullptr \/*L_fast_path*\/, &slow_case);\n+#else\n@@ -3943,0 +3947,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3936,1 +3936,1 @@\n-  _init_state = (u1)state;\n+  Atomic::release_store(&_init_state, (u1) state);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,6 +543,6 @@\n-  bool is_loaded() const                   { return _init_state >= loaded; }\n-  bool is_linked() const                   { return _init_state >= linked; }\n-  bool is_initialized() const              { return _init_state == fully_initialized; }\n-  bool is_not_initialized() const          { return _init_state <  being_initialized; }\n-  bool is_being_initialized() const        { return _init_state == being_initialized; }\n-  bool is_in_error_state() const           { return _init_state == initialization_error; }\n+  bool is_loaded() const                   { return init_state() >= loaded; }\n+  bool is_linked() const                   { return init_state() >= linked; }\n+  bool is_initialized() const              { return init_state() == fully_initialized; }\n+  bool is_not_initialized() const          { return init_state() <  being_initialized; }\n+  bool is_being_initialized() const        { return init_state() == being_initialized; }\n+  bool is_in_error_state() const           { return init_state() == initialization_error; }\n@@ -550,1 +550,2 @@\n-  ClassState  init_state()                 { return (ClassState)_init_state; }\n+  ClassState  init_state() const           { return (ClassState) Atomic::load_acquire(&_init_state); }\n+  const char* init_state_name() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3080,1 +3080,1 @@\n-                                    T_BYTE, MemNode::unordered);\n+                                    T_BYTE, MemNode::acquire);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2806,1 +2806,1 @@\n-    Node* inst = make_load(nullptr, insp, TypeInt::UBYTE, T_BOOLEAN, MemNode::unordered);\n+    Node* inst = make_load(nullptr, insp, TypeInt::UBYTE, T_BOOLEAN, MemNode::acquire);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}