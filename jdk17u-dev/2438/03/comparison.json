{"files":[{"patch":"@@ -29,0 +29,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -32,12 +33,12 @@\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=8\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=32\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=64\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=128\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=256\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=8\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=32\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=64\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=128\n- * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=256\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=8\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=16\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=32\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=64\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=128\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:+ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=256\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=8\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=16\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=32\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=64\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=128\n+ * @run main\/othervm gc.TestObjectAlignment -Xmx20M -XX:-ExplicitGCInvokesConcurrent -XX:ObjectAlignmentInBytes=256\n@@ -50,4 +51,0 @@\n-  private static boolean runsOn32bit() {\n-    return System.getProperty(\"sun.arch.data.model\").equals(\"32\");\n-  }\n-\n@@ -55,4 +52,0 @@\n-    if (runsOn32bit()) {\n-      \/\/ 32 bit VMs do not allow setting ObjectAlignmentInBytes, so there is nothing to test. We still get called.\n-      return;\n-    }\n","filename":"test\/hotspot\/jtreg\/gc\/TestObjectAlignment.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -39,1 +39,8 @@\n- *\n+ *\/\n+\n+\/**\n+ * @test TestAlignment\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"64\"\n+ * @summary Check Epsilon TLAB options with unusual object alignment\n+ * @bug 8212177\n@@ -42,1 +49,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n@@ -47,1 +54,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestAlignment.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,1 +51,8 @@\n- *\n+ *\/\n+\n+\/**\n+ * @test TestMaxTLAB\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"64\"\n+ * @summary Check EpsilonMaxTLAB options\n+ * @bug 8212177\n@@ -55,1 +62,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n@@ -61,1 +68,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n@@ -67,1 +74,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n@@ -73,1 +80,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:ObjectAlignmentInBytes=16\n+ *                   -XX:ObjectAlignmentInBytes=16\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestMaxTLAB.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @requires vm.debug\n@@ -132,1 +133,0 @@\n-            \"-XX:+IgnoreUnrecognizedVMOptions\", \/\/ G1VerifyBitmaps is develop only.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+IgnoreUnrecognizedVMOptions -XX:+UseLargePages gc.g1.TestLargePageUseForAuxMemory\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseLargePages gc.g1.TestLargePageUseForAuxMemory\n@@ -39,0 +39,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -40,0 +42,1 @@\n+import java.util.Collections;\n@@ -44,1 +47,0 @@\n-import jtreg.SkippedException;\n@@ -47,0 +49,2 @@\n+import jtreg.SkippedException;\n+\n@@ -109,0 +113,9 @@\n+    static List<String> getOpts(long heapsize, boolean largePageEnabled) {\n+        return List.of(\"-XX:+UseG1GC\",\n+                       \"-XX:G1HeapRegionSize=\" + HEAP_REGION_SIZE,\n+                       \"-Xmx\" + heapsize,\n+                       \"-Xlog:pagesize,gc+init,gc+heap+coops=debug\",\n+                       \"-XX:\" + (largePageEnabled ? \"+\" : \"-\") + \"UseLargePages\",\n+                       \"-version\");\n+    }\n+\n@@ -113,0 +126,1 @@\n+\n@@ -114,8 +128,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                   \"-XX:G1HeapRegionSize=\" + HEAP_REGION_SIZE,\n-                                                   \"-Xmx\" + heapsize,\n-                                                   \"-Xlog:pagesize,gc+init,gc+heap+coops=debug\",\n-                                                   \"-XX:+UseLargePages\",\n-                                                   \"-XX:+IgnoreUnrecognizedVMOptions\",  \/\/ there is no ObjectAlignmentInBytes in 32 bit builds\n-                                                   \"-XX:ObjectAlignmentInBytes=8\",\n-                                                   \"-version\");\n+        pb = ProcessTools.createJavaProcessBuilder(getOpts(heapsize, true));\n@@ -135,8 +142,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                   \"-XX:G1HeapRegionSize=\" + HEAP_REGION_SIZE,\n-                                                   \"-Xmx\" + heapsize,\n-                                                   \"-Xlog:pagesize\",\n-                                                   \"-XX:-UseLargePages\",\n-                                                   \"-XX:+IgnoreUnrecognizedVMOptions\",  \/\/ there is no ObjectAlignmentInBytes in 32 bit builds\n-                                                   \"-XX:ObjectAlignmentInBytes=8\",\n-                                                   \"-version\");\n+        pb = ProcessTools.createJavaProcessBuilder(getOpts(heapsize, false));\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        -XX:+IgnoreUnrecognizedVMOptions -XX:+UseLargePages gc.g1.TestLargePageUseForHeap\n+        -XX:+UseLargePages gc.g1.TestLargePageUseForHeap\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops gc.metaspace.TestMetaspaceMemoryPool\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:MaxMetaspaceSize=60m gc.metaspace.TestMetaspaceMemoryPool\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers gc.metaspace.TestMetaspaceMemoryPool\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:CompressedClassSpaceSize=60m gc.metaspace.TestMetaspaceMemoryPool\n+ * @run main\/othervm -XX:-UseCompressedOops gc.metaspace.TestMetaspaceMemoryPool\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:MaxMetaspaceSize=60m gc.metaspace.TestMetaspaceMemoryPool\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers gc.metaspace.TestMetaspaceMemoryPool\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:CompressedClassSpaceSize=60m gc.metaspace.TestMetaspaceMemoryPool\n@@ -45,0 +45,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspaceMemoryPool.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\/* @test TestMetaspacePerfCountersSerial\n+\/* @test id=Serial-64\n@@ -43,0 +43,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -50,2 +51,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n@@ -54,1 +55,1 @@\n-\/* @test TestMetaspacePerfCountersParallel\n+\/* @test id=Parallel-64\n@@ -57,0 +58,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -64,2 +66,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n@@ -68,1 +70,1 @@\n-\/* @test TestMetaspacePerfCountersG1\n+\/* @test id=G1-64\n@@ -71,0 +73,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -78,2 +81,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n@@ -82,1 +85,1 @@\n-\/* @test TestMetaspacePerfCountersShenandoah\n+\/* @test id=Shenandoah-64\n@@ -85,0 +88,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -92,2 +96,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n@@ -95,0 +99,87 @@\n+\n+\/* @test id=Epsilon-64\n+ * @bug 8014659\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Serial-32\n+ * @bug 8014659\n+ * @requires vm.gc.Serial\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseSerialGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Parallel-32\n+ * @bug 8014659\n+ * @requires vm.gc.Parallel\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseParallelGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=G1-32\n+ * @bug 8014659\n+ * @requires vm.gc.G1\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\/* @test id=Shenandoah-32\n+ * @bug 8014659\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n+\n+\/* @test id=Epsilon-32\n+ * @bug 8014659\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.bits == \"32\"\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":103,"deletions":12,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -42,2 +43,15 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n+ * @run main\/othervm -Xlog:class+load,class+unload=trace -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n+ * @run main\/othervm -Xlog:class+load,class+unload=trace -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n+ *\/\n+\n+\/* @test TestPerfCountersAndMemoryPools\n+ * @bug 8023476\n+ * @library \/test\/lib \/\n+ * @requires vm.gc.Serial\n+ * @requires vm.bits == \"32\"\n+ * @summary Tests that a MemoryPoolMXBeans and PerfCounters for metaspace\n+ *          report the same data.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -Xlog:class+load,class+unload=trace -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestPerfCountersAndMemoryPools.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,0 +43,19 @@\n+ \/*\n+ * @test id=default-debug\n+ * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.debug\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n+ *      -XX:+ShenandoahVerify -XX:+ShenandoahVerifyOptoBarriers\n+ *      TestVerifyJCStress\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact\n+ *      -XX:+ShenandoahVerify -XX:+ShenandoahVerifyOptoBarriers\n+ *      TestVerifyJCStress\n+ *\/\n+\n@@ -47,0 +66,1 @@\n+ * @requires !vm.debug\n@@ -52,1 +72,1 @@\n- *      -XX:+ShenandoahVerify -XX:+IgnoreUnrecognizedVMOptions -XX:+ShenandoahVerifyOptoBarriers\n+ *      -XX:+ShenandoahVerify\n@@ -57,1 +77,1 @@\n- *      -XX:+ShenandoahVerify -XX:+IgnoreUnrecognizedVMOptions -XX:+ShenandoahVerifyOptoBarriers\n+ *      -XX:+ShenandoahVerify\n@@ -70,1 +90,1 @@\n- *      -XX:+ShenandoahVerify -XX:+IgnoreUnrecognizedVMOptions -XX:+ShenandoahVerifyOptoBarriers\n+ *      -XX:+ShenandoahVerify\n@@ -72,0 +92,8 @@\n+ *\/\n+\n+\/*\n+ * @test id=iu-c1\n+ * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n@@ -75,1 +103,1 @@\n- *      -XX:+ShenandoahVerify -XX:+IgnoreUnrecognizedVMOptions -XX:TieredStopAtLevel=1\n+ *      -XX:+ShenandoahVerify -XX:TieredStopAtLevel=1\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyJCStress.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -32,1 +32,9 @@\n- * @run driver TestSelectiveBarrierFlags -Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+ShenandoahVerifyOptoBarriers\n+ *\/\n+\n+ \/* @test\n+ * @summary Test selective barrier enabling works, by aggressively compiling HelloWorld with combinations\n+ *          of barrier flags\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @run driver TestSelectiveBarrierFlags -Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation -XX:+ShenandoahVerifyOptoBarriers\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}