{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.file.Paths;\n@@ -63,1 +62,0 @@\n-import jdk.test.lib.artifacts.ArtifactResolverException;\n@@ -243,4 +241,0 @@\n-        if (libPath == null) {\n-            return null;\n-        }\n-\n@@ -260,6 +254,1 @@\n-        Path nssLibPath = fetchNssLib(osid, libraryName);\n-        if (nssLibPath == null) {\n-            throw new SkippedException(\"Warning: unsupported OS: \" + osid\n-                    + \", please initialize NSS library location, skipping test\");\n-        }\n-        return nssLibPath;\n+        return fetchNssLib(osid, libraryName);\n@@ -670,1 +659,1 @@\n-    private static Path fetchNssLib(String osId, Path libraryName) {\n+    private static Path fetchNssLib(String osId, Path libraryName) throws IOException {\n@@ -695,1 +684,1 @@\n-                return null;\n+                throw new SkippedException(\"Unsupported OS: \" + osId);\n@@ -699,18 +688,3 @@\n-    private static Path fetchNssLib(Class<?> clazz, Path libraryName) {\n-        Path path = null;\n-        try {\n-            Path p = ArtifactResolver.resolve(clazz).entrySet().stream()\n-                    .findAny().get().getValue();\n-            path = findNSSLibrary(p, libraryName);\n-        } catch (ArtifactResolverException | IOException e) {\n-            Throwable cause = e.getCause();\n-            if (cause == null) {\n-                System.out.println(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\");\n-            } else {\n-                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n-                        + \"\\nPlease make sure the artifact is available.\", e);\n-            }\n-        }\n-        Policy.setPolicy(null); \/\/ Clear the policy created by JIB if any\n-        return path;\n+    private static Path fetchNssLib(Class<?> clazz, Path libraryName) throws IOException {\n+        Path p = ArtifactResolver.fetchOne(clazz);\n+        return findNSSLibrary(p, libraryName);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        if ((LIBPATH == null) || (!loadNSPR(LIBPATH))) {\n+        if (!loadNSPR(LIBPATH)) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecmodTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jtreg.SkippedException;\n@@ -85,13 +84,3 @@\n-            if (opensslPath != null) {\n-                \/\/ if the current version of openssl is available, perform all\n-                \/\/ keytool <-> openssl interop tests\n-                generateInitialKeystores(opensslPath);\n-                testWithJavaCommands();\n-                testWithOpensslCommands(opensslPath);\n-            } else {\n-                String exMsg = \"Can't find the version: \"\n-                        + OpensslArtifactFetcher.getTestOpensslBundleVersion()\n-                        + \" of openssl binary on this machine, please install\"\n-                        + \" and set openssl path with property 'test.openssl.path'\";\n-                throw new SkippedException(exMsg);\n-            }\n+            generateInitialKeystores(opensslPath);\n+            testWithJavaCommands();\n+            testWithOpensslCommands(opensslPath);\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jtreg.SkippedException;\n+\n@@ -62,0 +64,32 @@\n+    \/**\n+     * Retrieve an artifact\/library\/file from a repository or local file system.\n+     * <p>\n+     * Artifacts are defined with the {@link jdk.test.lib.artifacts.Artifact}\n+     * annotation.\n+     * <p>\n+     * If you have a local version of a dependency that you want to use, you can\n+     * specify that by setting the system property:\n+     * <code>jdk.test.lib.artifacts.ARTIFACT_NAME<\/code>. Where ARTIFACT_NAME\n+     * is the name field of the Artifact annotation.\n+     * <p>\n+     * Generally, tests that use this method should be run with <code>make test<\/code>.\n+     * However, tests can also be run with <code>jtreg<\/code> but you must have a\n+     * local copy of the artifact and the system property must be set as specified\n+     * above.\n+     *\n+     * @param klass a class annotated with {@link jdk.test.lib.artifacts.Artifact}\n+     * @return the local path to the artifact. If the artifact is a compressed\n+     * file that gets unpacked, this path will point to the root\n+     * directory of the uncompressed file(s).\n+     * @throws SkippedException thrown if the artifact cannot be found\n+     *\/\n+    public static Path fetchOne(Class<?> klass) {\n+        try {\n+            return ArtifactResolver.resolve(klass).entrySet().stream()\n+                    .findAny().get().getValue();\n+        } catch (ArtifactResolverException e) {\n+            Artifact artifact = klass.getAnnotation(Artifact.class);\n+            throw new SkippedException(\"Cannot find the artifact \" + artifact.name(), e);\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import java.io.File;\n-\n@@ -33,1 +31,1 @@\n-import jdk.test.lib.artifacts.ArtifactResolverException;\n+import jtreg.SkippedException;\n@@ -53,0 +51,1 @@\n+     * @throws SkippedException if a valid version of OpenSSL cannot be found\n@@ -79,1 +78,10 @@\n-        return verifyOpensslVersion(path, OPENSSL_BUNDLE_VERSION) ? path : null;\n+\n+        if (!verifyOpensslVersion(path, OPENSSL_BUNDLE_VERSION)) {\n+            String exMsg = \"Can't find the version: \"\n+                    + OpensslArtifactFetcher.getTestOpensslBundleVersion()\n+                    + \" of openssl binary on this machine, please install\"\n+                    + \" and set openssl path with property 'test.openssl.path'\";\n+            throw new SkippedException(exMsg);\n+        } else {\n+            return path;\n+        }\n@@ -115,17 +123,3 @@\n-        String path = null;\n-        try {\n-            path = ArtifactResolver.resolve(clazz).entrySet().stream()\n-                    .findAny().get().getValue() + File.separator + \"openssl\"\n-                    + File.separator + \"bin\" + File.separator + \"openssl\";\n-            System.out.println(\"path: \" + path);\n-        } catch (ArtifactResolverException e) {\n-            Throwable cause = e.getCause();\n-            if (cause == null) {\n-                System.out.println(\"Cannot resolve artifact, \"\n-                        + \"please check if JIB jar is present in classpath.\");\n-            } else {\n-                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n-                        + \"\\nPlease make sure the artifact is available.\", e);\n-            }\n-        }\n-        return path;\n+        return ArtifactResolver.fetchOne(clazz)\n+            .resolve(\"openssl\").resolve(\"bin\").resolve(\"openssl\")\n+                .toString();\n","filename":"test\/lib\/jdk\/test\/lib\/security\/OpensslArtifactFetcher.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"}]}