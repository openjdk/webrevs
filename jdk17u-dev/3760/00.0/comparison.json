{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,1 @@\n+import static sun.net.util.ProxyUtil.copyProxy;\n@@ -943,1 +944,1 @@\n-        instProxy = p;\n+        instProxy = copyProxy(p);\n@@ -1258,1 +1259,1 @@\n-                        p = it.next();\n+                        p = copyProxy(it.next());\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.util.function.BiPredicate;\n@@ -51,0 +52,1 @@\n+import static jdk.internal.net.http.common.Utils.copyProxy;\n@@ -131,9 +133,1 @@\n-        if (isWebSocket) {\n-            \/\/ WebSocket determines and sets the proxy itself\n-            this.proxy = ((HttpRequestImpl) request).proxy;\n-        } else {\n-            if (ps != null)\n-                this.proxy = retrieveProxy(ps, uri);\n-            else\n-                this.proxy = null;\n-        }\n+        this.proxy = retrieveProxy(request, ps, uri);\n@@ -160,1 +154,5 @@\n-        return new HttpRequestImpl(uri, method, other, mayHaveBody);\n+        if (uri.getScheme().equalsIgnoreCase(other.uri.getScheme()) &&\n+                uri.getRawAuthority().equals(other.uri.getRawAuthority())) {\n+            return new HttpRequestImpl(uri, method, other, mayHaveBody, Optional.empty());\n+        }\n+        return new HttpRequestImpl(uri, method, other, mayHaveBody, Optional.of(Utils.ALLOWED_REDIRECT_HEADERS));\n@@ -180,0 +178,8 @@\n+        this(uri, method, other, mayHaveBody, Optional.empty());\n+    }\n+\n+    private HttpRequestImpl(URI uri,\n+                            String method,\n+                            HttpRequestImpl other,\n+                            boolean mayHaveBody,\n+                            Optional<BiPredicate<String, String>> redirectHeadersFilter) {\n@@ -181,2 +187,4 @@\n-        this.method = method == null? \"GET\" : method;\n-        this.userHeaders = other.userHeaders;\n+        this.method = method == null ? \"GET\" : method;\n+        HttpHeaders userHeaders = redirectHeadersFilter.isPresent() ?\n+                HttpHeaders.of(other.userHeaders.map(), redirectHeadersFilter.get()) : other.userHeaders;\n+        this.userHeaders = userHeaders;\n@@ -298,8 +306,6 @@\n-    \/** Retrieves the proxy, from the given ProxySelector, if there is one. *\/\n-    private static Proxy retrieveProxy(ProxySelector ps, URI uri) {\n-        Proxy proxy = null;\n-        List<Proxy> pl = ps.select(uri);\n-        if (!pl.isEmpty()) {\n-            Proxy p = pl.get(0);\n-            if (p.type() == Proxy.Type.HTTP)\n-                proxy = p;\n+    \/** Retrieves a copy of the proxy either from the given {@link HttpRequest} or {@link ProxySelector}, if there is one. *\/\n+    private static Proxy retrieveProxy(HttpRequest request, ProxySelector ps, URI uri) {\n+\n+        \/\/ WebSocket determines and sets the proxy itself\n+        if (request instanceof HttpRequestImpl requestImpl && requestImpl.isWebSocket) {\n+            return requestImpl.proxy;\n@@ -307,1 +313,14 @@\n-        return proxy;\n+\n+        \/\/ Try to find a matching one from the `ProxySelector`\n+        if (ps != null) {\n+            List<Proxy> pl = ps.select(uri);\n+            if (!pl.isEmpty()) {\n+                Proxy p = pl.get(0);\n+                if (p.type() == Proxy.Type.HTTP) {\n+                    return copyProxy(p);\n+                }\n+            }\n+        }\n+\n+        return null;\n+\n@@ -323,1 +342,1 @@\n-        this.proxy = proxy;\n+        this.proxy = copyProxy(proxy);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpRequestImpl.java","additions":42,"deletions":23,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import java.net.Proxy;\n@@ -154,0 +155,12 @@\n+    private static final Set<String> DISALLOWED_REDIRECT_HEADERS_SET = getDisallowedRedirectHeaders();\n+\n+    private static Set<String> getDisallowedRedirectHeaders() {\n+        Set<String> headers = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        headers.addAll(Set.of(\"Authorization\", \"Cookie\", \"Origin\", \"Referer\", \"Host\"));\n+\n+        return Collections.unmodifiableSet(headers);\n+    }\n+\n+    public static final BiPredicate<String, String>\n+            ALLOWED_REDIRECT_HEADERS = (header, unused) -> !DISALLOWED_REDIRECT_HEADERS_SET.contains(header);\n+\n@@ -276,0 +289,11 @@\n+    \/**\n+     * Creates a new {@link Proxy} instance for the given proxy iff it is\n+     * neither null, {@link Proxy#NO_PROXY Proxy.NO_PROXY}, nor already a\n+     * {@code Proxy} instance.\n+     *\/\n+    public static Proxy copyProxy(Proxy proxy) {\n+        return proxy == null || proxy.getClass() == Proxy.class\n+                ? proxy\n+                : new Proxy(proxy.type(), proxy.address());\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -263,2 +263,3 @@\n-                \/\/ The test server does not support PROXY305 properly\n-                if (authType == DigestEchoServer.HttpAuthType.PROXY305) continue;\n+                \/\/ The test server does not support PROXY305 or SERVER307 properly\n+                if (authType == DigestEchoServer.HttpAuthType.PROXY305 ||\n+                    authType == DigestEchoServer.HttpAuthType.SERVER307) continue;\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoClient.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}