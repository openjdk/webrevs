{"files":[{"patch":"@@ -29,1 +29,2 @@\n-#include \"metaprogramming\/removeExtent.hpp\"\n+\n+#include <type_traits>\n@@ -34,1 +35,1 @@\n-  typedef typename RemoveExtent<T>::type ItemT;\n+  using ItemT = std::remove_extent_t<T>;\n","filename":"src\/hotspot\/share\/gc\/z\/zSafeDelete.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_REMOVEEXTENT_HPP\n-#define SHARE_METAPROGRAMMING_REMOVEEXTENT_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-template <typename T> struct RemoveExtent: AllStatic { typedef T type; };\n-\n-template <typename T> struct RemoveExtent<T[]>: AllStatic { typedef T type; };\n-template <typename T, size_t S> struct RemoveExtent<T[S]>: AllStatic { typedef T type; };\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_REMOVEEXTENT_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/removeExtent.hpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/removeExtent.hpp\"\n-#include \"metaprogramming\/isSame.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class RemoveExtentTest {\n-  class A: AllStatic {};\n-\n-  typedef A* Aptr;\n-  typedef A Aarr[];\n-  typedef A Aarr10[10];\n-  typedef const A cA;\n-  typedef const A* cAptr;\n-  typedef const A cAarr[];\n-  typedef const A cAarr10[10];\n-\n-  typedef RemoveExtent<Aptr>::type ra_Aptr;\n-  static const bool ra_Aptr_is_Aptr = IsSame<ra_Aptr, Aptr>::value;\n-  STATIC_ASSERT(ra_Aptr_is_Aptr);\n-\n-  typedef RemoveExtent<Aarr>::type ra_Aarr;\n-  static const bool ra_Aarr_is_A = IsSame<ra_Aarr, A>::value;\n-  STATIC_ASSERT(ra_Aarr_is_A);\n-\n-  typedef RemoveExtent<Aarr10>::type ra_Aarr10;\n-  static const bool ra_Aarr10_is_A = IsSame<ra_Aarr10, A>::value;\n-  STATIC_ASSERT(ra_Aarr10_is_A);\n-\n-  typedef RemoveExtent<cAptr>::type ra_cAptr;\n-  static const bool ra_cAptr_is_cAptr = IsSame<ra_cAptr, cAptr>::value;\n-  STATIC_ASSERT(ra_cAptr_is_cAptr);\n-\n-  typedef RemoveExtent<cAarr>::type ra_cAarr;\n-  static const bool ra_cAarr_is_cA = IsSame<ra_cAarr, cA>::value;\n-  STATIC_ASSERT(ra_cAarr_is_cA);\n-\n-  typedef RemoveExtent<cAarr10>::type ra_cAarr10;\n-  static const bool ra_cAarr10_is_cA = IsSame<ra_cAarr10, cA>::value;\n-  STATIC_ASSERT(ra_cAarr10_is_cA);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_removeExtent.cpp","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"}]}