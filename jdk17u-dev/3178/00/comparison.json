{"files":[{"patch":"@@ -58,0 +58,1 @@\n+import javax.accessibility.AccessibleValue;\n@@ -2077,1 +2078,1 @@\n-        implements Serializable, Accessible, AccessibleComponent {\n+        implements Serializable, Accessible, AccessibleComponent, AccessibleValue {\n@@ -2171,1 +2172,0 @@\n-\n@@ -2205,0 +2205,37 @@\n+        @Override\n+        public AccessibleValue getAccessibleValue() {\n+            return this;\n+        }\n+\n+        @Override\n+        public Number getCurrentAccessibleValue() {\n+            return (getPageIndex() == parent.getSelectedIndex() ?\n+                    Integer.valueOf(1) : Integer.valueOf(0));\n+        }\n+\n+        @Override\n+        public boolean setCurrentAccessibleValue(Number n) {\n+            if (getPageIndex() != parent.getSelectedIndex()) {\n+                if (n.intValue() != 0) {\n+                    \/\/ Set current page selected\n+                    parent.setSelectedIndex(getPageIndex());\n+                }\n+            } else {\n+                if (n.intValue() == 0) {\n+                    \/\/ Can not \"deselect\" because what page should i select instead?\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public Number getMinimumAccessibleValue() {\n+            return Integer.valueOf(0);\n+        }\n+\n+        @Override\n+        public Number getMaximumAccessibleValue() {\n+            return Integer.valueOf(1);\n+        }\n+\n@@ -2371,1 +2408,1 @@\n-        public AccessibleIcon [] getAccessibleIcon() {\n+        public AccessibleIcon[] getAccessibleIcon() {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTabbedPane.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.accessibility.AccessibleValue;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+\n+\/**\n+ * @test\n+ * @bug 8283387\n+ * @summary [macos] a11y : Screen magnifier does not show selected Tab\n+ *          JTabbedPane accessible children had no AccessibleValue manipulation API\n+ *          Testing this API since it was added in the fix for 8283387\n+ * @run main AccessibleTabbedPaneTest\n+ *\/\n+\n+public class AccessibleTabbedPaneTest {\n+    public static void main(String[] args) {\n+        JTabbedPane pane = new JTabbedPane();\n+        JPanel p1, p2, p3;\n+        p1 = new JPanel();\n+        p2 = new JPanel();\n+        p3 = new JPanel();\n+        pane.add(\"One\", p1);\n+        pane.add(\"Two\", p2);\n+        pane.add(\"Three\", p3);\n+        for (int i = 0; i < pane.getAccessibleContext().getAccessibleChildrenCount(); i++) {\n+            if (pane.getAccessibleContext()\n+                    .getAccessibleChild(i)\n+                    .getAccessibleContext()\n+                    .getAccessibleValue() == null) {\n+                throw new RuntimeException(\"Test failed, accessible value for tab \"+ i + \" is null\");\n+            }\n+        }\n+        AccessibleValue p2a = pane.getAccessibleContext()\n+                                  .getAccessibleChild(1)\n+                                  .getAccessibleContext()\n+                                  .getAccessibleValue();\n+        \/\/ Select second tab using a11y API.\n+        if (p2a.setCurrentAccessibleValue(1)) {\n+            if (pane.getSelectedIndex() != 1) {\n+                throw new RuntimeException(\"Can not change tab selection using a11y API\");\n+            }\n+        }\n+\n+        \/\/ Try to deselect it - that should not be allowed\n+        if (p2a.setCurrentAccessibleValue(0)) {\n+            throw new RuntimeException(\"We should not be able to deselect \"\n+                    + \"currently selected tab via a11y API\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JTabbedPane\/AccessibleTabbedPaneTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}