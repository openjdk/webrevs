{"files":[{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8278312\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient \/test\/jdk\/java\/net\/httpclient\/http2\/server\n+ * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters Http2Handler\n+ *          jdk.test.lib.net.IPSupport\n+ *          Http2TestExchange\n+ *\n+ * @modules java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ *          java.logging\n+ *          java.base\/sun.net.www.http\n+ *          java.base\/sun.net.www\n+ *          java.base\/sun.net\n+ *\n+ * @run main\/othervm SANTest\n+ * @summary Update SimpleSSLContext keystore to use SANs for localhost IP addresses\n+ *\/\n+\n+import com.sun.net.httpserver.*;\n+\n+import java.util.concurrent.*;\n+import java.io.*;\n+import java.net.*;\n+import java.net.http.*;\n+import java.nio.charset.StandardCharsets;\n+import javax.net.ssl.*;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.test.lib.net.IPSupport;\n+\n+\/*\n+ * Will fail if the testkeys file belonging to SimpleSSLContext\n+ * does not have SAN entries for 127.0.0.1 or ::1\n+ *\/\n+public class SANTest implements HttpServerAdapters {\n+\n+    static SSLContext ctx;\n+\n+    static HttpServer getHttpsServer(InetSocketAddress addr, Executor exec, SSLContext ctx) throws Exception {\n+        HttpsServer server = HttpsServer.create(addr, 0);\n+        server.setExecutor(exec);\n+        server.setHttpsConfigurator(new HttpsConfigurator (ctx));\n+        return server;\n+    }\n+\n+    static final boolean hasIPv4 = IPSupport.hasIPv4();\n+    static final boolean hasIPv6 = IPSupport.hasIPv6();\n+\n+    static HttpTestServer initServer(boolean h2, InetAddress addr, SSLContext ctx,\n+                String sni, ExecutorService e) throws Exception {\n+        HttpTestServer s = null;\n+        InetSocketAddress ia = new InetSocketAddress (addr, 0);\n+        if ((addr instanceof Inet4Address) && !hasIPv4)\n+                return null;\n+        if ((addr instanceof Inet6Address) && !hasIPv6)\n+                return null;\n+\n+        if (!h2) {\n+            s = HttpTestServer.of(getHttpsServer(ia, e, ctx));\n+            HttpTestHandler h = new HttpTestEchoHandler();\n+            s.addHandler(h, \"\/test1\");\n+            s.start();\n+            return s;\n+        } else {\n+            s = HttpTestServer.of(new Http2TestServer(addr, sni, true, 0, e,\n+                        10, null, ctx, false));\n+            HttpTestHandler h = new HttpTestEchoHandler();\n+            s.addHandler(h, \"\/test1\");\n+            s.start();\n+            return s;\n+        }\n+    }\n+\n+    public static void main (String[] args) throws Exception {\n+        \/\/ Http\/1.1 servers\n+        HttpTestServer h1s1 = null;\n+        HttpTestServer h1s2 = null;\n+\n+        \/\/ Http\/2 servers\n+        HttpTestServer h2s1 = null;\n+        HttpTestServer h2s2 = null;\n+\n+        ExecutorService executor=null;\n+        try {\n+            System.out.print (\"SANTest: \");\n+            ctx = new SimpleSSLContext().get();\n+            executor = Executors.newCachedThreadPool();\n+\n+            InetAddress l1 = InetAddress.getByName(\"::1\");\n+            InetAddress l2 = InetAddress.getByName(\"127.0.0.1\");\n+\n+            h1s1 = initServer(false, l1, ctx, \"::1\", executor);\n+            h1s2 = initServer(false, l2, ctx, \"127.0.0.1\", executor);\n+\n+            h2s1 = initServer(true, l1, ctx, \"::1\", executor);\n+            h2s2 = initServer(true, l2, ctx, \"127.0.0.1\", executor);\n+\n+            test(\"127.0.0.1\", h1s2);\n+            test(\"::1\", h1s1);\n+            testNew(\"127.0.0.1\", h2s2, executor);\n+            testNew(\"::1\", h2s1, executor);\n+            System.out.println (\"OK\");\n+        } finally {\n+            if (h1s1 != null)\n+                h1s1.stop();\n+            if (h1s2 != null)\n+                h1s2.stop();\n+            if (h2s1 != null)\n+                h2s1.stop();\n+            if (h2s2 != null)\n+                h2s2.stop();\n+            if (executor != null)\n+                executor.shutdown ();\n+        }\n+    }\n+\n+    static void test (String host, HttpTestServer server) throws Exception {\n+        if (server == null)\n+            return;\n+        int port = server.getAddress().getPort();\n+        String body = \"Yellow world\";\n+        URL url = URIBuilder.newBuilder()\n+                 .scheme(\"https\")\n+                 .host(host)\n+                 .port(port)\n+                 .path(\"\/test1\/foo.txt\")\n+                 .toURL();\n+        System.out.println(\"URL = \" + url);\n+        HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n+        System.out.println(\"urlc = \" + urlc);\n+        if (urlc instanceof HttpsURLConnection) {\n+            HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n+            urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n+        }\n+\n+        urlc.setRequestMethod(\"POST\");\n+        urlc.setDoOutput(true);\n+\n+        OutputStream os = urlc.getOutputStream();\n+        os.write(body.getBytes(StandardCharsets.ISO_8859_1));\n+        os.close();\n+        InputStream is = urlc.getInputStream();\n+        byte[] vv = is.readAllBytes();\n+        String ff = new String(vv, StandardCharsets.ISO_8859_1);\n+        System.out.println(\"resp = \" + ff);\n+        if (!ff.equals(body))\n+            throw new RuntimeException();\n+        is.close();\n+    }\n+\n+    static void testNew (String host, HttpTestServer server, Executor exec) throws Exception {\n+        if (server == null)\n+            return;\n+        int port = server.getAddress().getPort();\n+        String body = \"Red and Yellow world\";\n+        URI uri = URIBuilder.newBuilder()\n+                 .scheme(\"https\")\n+                 .host(host)\n+                 .port(port)\n+                 .path(\"\/test1\/foo.txt\")\n+                 .build();\n+\n+        HttpClient client = HttpClient.newBuilder()\n+                .sslContext(ctx)\n+                .executor(exec)\n+                .build();\n+        HttpRequest req = HttpRequest.newBuilder(uri)\n+                .version(HttpClient.Version.HTTP_2)\n+                .POST(HttpRequest.BodyPublishers.ofString(body))\n+                .build();\n+\n+        HttpResponse<String> resp = client.send(req, HttpResponse.BodyHandlers.ofString());\n+        System.out.println(\"resp = \" + resp.body());\n+        if (!resp.body().equals(body))\n+            throw new RuntimeException();\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SANTest.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -127,0 +127,14 @@\n+    public Http2TestServer(String serverName,\n+                           boolean secure,\n+                           int port,\n+                           ExecutorService exec,\n+                           int backlog,\n+                           Properties properties,\n+                           SSLContext context,\n+                           boolean supportsHTTP11)\n+        throws Exception\n+    {\n+        this(InetAddress.getLoopbackAddress(), serverName, secure, port, exec,\n+                backlog, properties, context, supportsHTTP11);\n+    }\n+\n@@ -137,0 +151,1 @@\n+     * @param localAddr local address to bind to\n@@ -149,1 +164,2 @@\n-    public Http2TestServer(String serverName,\n+    public Http2TestServer(InetAddress localAddr,\n+                           String serverName,\n@@ -166,1 +182,1 @@\n-            server = initSecure(port, backlog);\n+            server = initSecure(localAddr, port, backlog);\n@@ -239,1 +255,1 @@\n-    final ServerSocket initSecure(int port, int backlog) throws Exception {\n+    final ServerSocket initSecure(InetAddress localAddr, int port, int backlog) throws Exception {\n@@ -246,1 +262,1 @@\n-        se.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), backlog);\n+        se.bind(new InetSocketAddress(localAddr, 0), backlog);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServer.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"filename":"test\/lib\/jdk\/test\/lib\/net\/testkeys","binary":true,"status":"modified"}]}