{"files":[{"patch":"@@ -26,1 +26,1 @@\n-import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.invoke.VarHandle;\n@@ -186,0 +186,35 @@\n+class PerfCounterSnapshot {\n+    private static long getMinCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".minCapacity\").longValue();\n+    }\n+\n+    private static long getCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".capacity\").longValue();\n+    }\n+\n+    private static long getMaxCapacity(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".maxCapacity\").longValue();\n+    }\n+\n+    private static long getUsed(String ns) throws Exception {\n+        return PerfCounters.findByName(ns + \".used\").longValue();\n+    }\n+\n+    public long minCapacity;\n+    public long maxCapacity;\n+    public long capacity;\n+    public long used;\n+\n+    public void get(String ns) throws Exception {\n+        minCapacity = getMinCapacity(ns);\n+        maxCapacity = getMaxCapacity(ns);\n+        used = getUsed(ns);\n+        capacity = getCapacity(ns);\n+    }\n+\n+    public boolean consistentWith(PerfCounterSnapshot other) {\n+        return (minCapacity == other.minCapacity) && (maxCapacity == other.maxCapacity) &&\n+            (used == other.used) && (capacity == other.capacity);\n+    }\n+}\n+\n@@ -189,1 +224,0 @@\n-    private static final List<GarbageCollectorMXBean> gcBeans = ManagementFactoryHelper.getGarbageCollectorMXBeans();\n@@ -207,26 +241,22 @@\n-        long gcCountBefore;\n-        long gcCountAfter;\n-        long minCapacity;\n-        long maxCapacity;\n-        long capacity;\n-        long used;\n-\n-        \/\/ The perf counter values are updated during GC and to be able to\n-        \/\/ do the assertions below we need to ensure that the values are from\n-        \/\/ the same GC cycle.\n-        do {\n-            gcCountBefore = currentGCCount();\n-\n-            minCapacity = getMinCapacity(ns);\n-            maxCapacity = getMaxCapacity(ns);\n-            capacity = getCapacity(ns);\n-            used = getUsed(ns);\n-\n-            gcCountAfter = currentGCCount();\n-            assertGTE(gcCountAfter, gcCountBefore);\n-        } while(gcCountAfter > gcCountBefore);\n-\n-        assertGTE(minCapacity, 0L);\n-        assertGTE(used, minCapacity);\n-        assertGTE(capacity, used);\n-        assertGTE(maxCapacity, capacity);\n+        PerfCounterSnapshot snap1 = new PerfCounterSnapshot();\n+        PerfCounterSnapshot snap2 = new PerfCounterSnapshot();\n+\n+        final int MaxAttempts = 10;\n+\n+        for (int attempts = 0; ; attempts++) {\n+            snap1.get(ns);\n+            VarHandle.fullFence();\n+            snap2.get(ns);\n+\n+            if (snap1.consistentWith(snap2)) {\n+              \/\/ Got a consistent snapshot for examination.\n+              break;\n+            } else if (attempts == MaxAttempts) {\n+              throw new Exception(\"Failed to get stable reading of metaspace performance counters after \" + attempts + \" tries\");\n+            }\n+        }\n+\n+        assertGTE(snap1.minCapacity, 0L);\n+        assertGTE(snap1.used, snap1.minCapacity);\n+        assertGTE(snap1.capacity, snap1.used);\n+        assertGTE(snap1.maxCapacity, snap1.capacity);\n@@ -246,1 +276,2 @@\n-        long before = getUsed(ns);\n+        PerfCounterSnapshot before = new PerfCounterSnapshot();\n+        before.get(ns);\n@@ -249,1 +280,2 @@\n-        long after = getUsed(ns);\n+        PerfCounterSnapshot after = new PerfCounterSnapshot();\n+        after.get(ns);\n@@ -251,1 +283,1 @@\n-        assertGT(after, before);\n+        assertGT(after.used, before.used);\n@@ -270,24 +302,0 @@\n-\n-    private static long getMinCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".minCapacity\").longValue();\n-    }\n-\n-    private static long getCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".capacity\").longValue();\n-    }\n-\n-    private static long getMaxCapacity(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".maxCapacity\").longValue();\n-    }\n-\n-    private static long getUsed(String ns) throws Exception {\n-        return PerfCounters.findByName(ns + \".used\").longValue();\n-    }\n-\n-    private static long currentGCCount() {\n-        long gcCount = 0;\n-        for (GarbageCollectorMXBean bean : gcBeans) {\n-            gcCount += bean.getCollectionCount();\n-        }\n-        return gcCount;\n-    }\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":63,"deletions":55,"binary":false,"changes":118,"status":"modified"}]}