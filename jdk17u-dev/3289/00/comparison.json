{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,8 @@\n-import java.awt.*;\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n+import java.awt.AWTException;\n+import java.awt.EventQueue;\n+import java.awt.Point;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n@@ -33,1 +40,0 @@\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n@@ -35,4 +41,11 @@\n- * @library \/lib\/client ..\/\n- * @library \/java\/awt\/patchlib\n- * @build java.desktop\/java.awt.Helper\n- * @build ExtendedRobot SystemTrayIconHelper\n+ * @library\n+ *          \/java\/awt\/patchlib\n+ *          \/java\/awt\/TrayIcon\n+ *          \/lib\/client\n+ *          \/test\/lib\n+ * @build\n+ *          java.desktop\/java.awt.Helper\n+ *          jdk.test.lib.Platform\n+ *          jtreg.SkippedException\n+ *          ExtendedRobot\n+ *          SystemTrayIconHelper\n@@ -47,3 +60,4 @@\n-    boolean actionPerformed = false;\n-    Object actionLock = new Object();\n-    String actionCommand = null;\n+    volatile boolean actionPerformed = false;\n+    volatile String actionCommand = null;\n+    final Object actionLock = new Object();\n+\n@@ -53,19 +67,23 @@\n-        if (! SystemTray.isSupported()) {\n-            System.out.println(\"SystemTray not supported on the platform under test. \" +\n-                    \"Marking the test passed\");\n-        } else {\n-            if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\n-                System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n-                        \"in Windows 7, which is behavior by default.\\n\" +\n-                        \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n-                        \"\\\"Always show all icons and notifications on the taskbar\\\" true to \" +\n-                        \"avoid this problem. Or change behavior only for Java SE tray icon \" +\n-                        \"and rerun test.\");\n-            } else  if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"mac\")){\n-                isMacOS = true;\n-            } else if (SystemTrayIconHelper.isOel7orLater()) {\n-                System.out.println(\"OEL 7 doesn't support double click in \" +\n-                        \"systray. Skipped\");\n-                return;\n-            }\n-            new ActionCommand().doTest();\n+        if (Platform.isOnWayland()) {\n+            \/\/ The current robot implementation does not support\n+            \/\/ clicking in the system tray area.\n+            throw new SkippedException(\"Skipped on Wayland\");\n+        }\n+\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"SystemTray is not supported on this platform.\");\n+        }\n+\n+        if (Platform.isWindows()) {\n+            System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n+                    \"in Windows 7, which is behavior by default.\\n\" +\n+                    \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n+                    \"\\\"Always show all icons and notifications on the taskbar\\\" true to \" +\n+                    \"avoid this problem. Or change behavior only for Java SE tray icon \" +\n+                    \"and rerun test.\");\n+        } else if (Platform.isOSX()){\n+            isMacOS = true;\n+        } else if (SystemTrayIconHelper.isOel7orLater()) {\n+            System.out.println(\"OEL 7 doesn't support double click in \" +\n+                    \"systray. Skipped\");\n+            throw new SkippedException(\"Skipped on OEL 7+\");\n@@ -73,0 +91,1 @@\n+        new ActionCommand().doTest();\n@@ -98,1 +117,1 @@\n-            if (! \"Sample Command\".equals(icon.getActionCommand()))\n+            if (!\"Sample Command\".equals(icon.getActionCommand()))\n@@ -120,1 +139,1 @@\n-        if (! actionPerformed) {\n+        if (!actionPerformed) {\n@@ -128,1 +147,1 @@\n-        if (! actionPerformed) {\n+        if (!actionPerformed) {\n@@ -143,1 +162,1 @@\n-        robot.mouseMove(0, 0);\n+        robot.mouseMove(100, 0);\n@@ -152,1 +171,1 @@\n-        if (! actionPerformed) {\n+        if (!actionPerformed) {\n@@ -160,1 +179,1 @@\n-        if (! actionPerformed) {\n+        if (!actionPerformed) {\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ActionCommand\/ActionCommand.java","additions":54,"deletions":35,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n@@ -40,4 +43,11 @@\n- * @library \/java\/awt\/patchlib\n- * @library \/lib\/client ..\/\n- * @build java.desktop\/java.awt.Helper\n- * @build ExtendedRobot SystemTrayIconHelper\n+ * @library\n+ *          \/java\/awt\/patchlib\n+ *          \/java\/awt\/TrayIcon\n+ *          \/lib\/client\n+ *          \/test\/lib\n+ * @build\n+ *          java.desktop\/java.awt.Helper\n+ *          jdk.test.lib.Platform\n+ *          jtreg.SkippedException\n+ *          ExtendedRobot\n+ *          SystemTrayIconHelper\n@@ -51,2 +61,4 @@\n-    boolean actionPerformed = false;\n-    Object actionLock = new Object();\n+\n+    volatile boolean actionPerformed = false;\n+    final Object actionLock = new Object();\n+\n@@ -58,3 +70,3 @@\n-        InputEvent.BUTTON1_MASK,\n-        InputEvent.BUTTON2_MASK,\n-        InputEvent.BUTTON3_MASK\n+        InputEvent.BUTTON1_DOWN_MASK,\n+        InputEvent.BUTTON2_DOWN_MASK,\n+        InputEvent.BUTTON3_DOWN_MASK\n@@ -69,0 +81,6 @@\n+        if (Platform.isOnWayland()) {\n+            \/\/ The current robot implementation does not support\n+            \/\/ clicking in the system tray area.\n+            throw new SkippedException(\"Skipped on Wayland\");\n+        }\n+\n@@ -70,2 +88,7 @@\n-            System.out.println(\"SystemTray not supported on the platform \"\n-                    + \"under test. Marking the test passed\");\n+            throw new SkippedException(\"SystemTray is not supported on this platform.\");\n+        }\n+\n+        if (Platform.isOSX()) {\n+            isMacOS = true;\n+        } else if (Platform.isWindows()) {\n+            isWinOS = true;\n@@ -73,9 +96,1 @@\n-            String osName = System.getProperty(\"os.name\").toLowerCase();\n-            if (osName.startsWith(\"mac\")) {\n-                isMacOS = true;\n-            } else if (osName.startsWith(\"win\")) {\n-                isWinOS = true;\n-            } else {\n-                isOelOS = SystemTrayIconHelper.isOel7orLater();\n-            }\n-            new TrayIconMouseTest().doTest();\n+            isOelOS = SystemTrayIconHelper.isOel7orLater();\n@@ -83,0 +98,1 @@\n+        new TrayIconMouseTest().doTest();\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconMouseTest\/TrayIconMouseTest.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,3 @@\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n@@ -29,2 +32,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -40,1 +41,0 @@\n- * @author Shashidhara Veerabhadraiah (shashidhara.veerabhadraiah@oracle.com)\n@@ -42,4 +42,11 @@\n- * @library \/java\/awt\/patchlib\n- * @library \/lib\/client ..\/\n- * @build java.desktop\/java.awt.Helper\n- * @build ExtendedRobot SystemTrayIconHelper\n+ * @library\n+ *          \/java\/awt\/patchlib\n+ *          \/java\/awt\/TrayIcon\n+ *          \/lib\/client\n+ *          \/test\/lib\n+ * @build\n+ *          java.desktop\/java.awt.Helper\n+ *          jdk.test.lib.Platform\n+ *          jtreg.SkippedException\n+ *          ExtendedRobot\n+ *          SystemTrayIconHelper\n@@ -53,1 +60,1 @@\n-    boolean actionPerformed = false;\n+    volatile boolean actionPerformed = false;\n@@ -56,0 +63,6 @@\n+        if (Platform.isOnWayland()) {\n+            \/\/ The current robot implementation does not support\n+            \/\/ clicking in the system tray area.\n+            throw new SkippedException(\"Skipped on Wayland\");\n+        }\n+\n@@ -57,11 +70,10 @@\n-            System.out.println(\"SystemTray not supported on the platform under test. \" +\n-                    \"Marking the test passed\");\n-        } else {\n-            if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\"))\n-                System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n-                        \"in Windows 7\/10, which is behavior by default.\\n\" +\n-                        \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n-                        \"\\\"Always show all icons and notifications on the taskbar\\\" true \" +\n-                        \"to avoid this problem. Or change behavior only for Java SE \" +\n-                        \"tray icon.\");\n-            new TrayIconPopupClickTest().doTest();\n+            throw new SkippedException(\"SystemTray is not supported on this platform.\");\n+        }\n+\n+        if (Platform.isWindows()) {\n+            System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n+                    \"in Windows 7\/10, which is behavior by default.\\n\" +\n+                    \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n+                    \"\\\"Always show all icons and notifications on the taskbar\\\" true \" +\n+                    \"to avoid this problem. Or change behavior only for Java SE \" +\n+                    \"tray icon.\");\n@@ -69,0 +81,2 @@\n+\n+        new TrayIconPopupClickTest().doTest();\n@@ -92,7 +106,1 @@\n-        icon.getActionCommand();\n-        icon.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                actionPerformed = true;\n-            }\n-        });\n+        icon.addActionListener(e -> actionPerformed = true);\n@@ -102,1 +110,0 @@\n-\n@@ -109,1 +116,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -111,1 +118,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -116,1 +123,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -118,1 +125,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconPopup\/TrayIconPopupClickTest.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,16 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n+import java.awt.AWTException;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n@@ -32,1 +46,0 @@\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n@@ -34,4 +47,11 @@\n- * @library \/java\/awt\/patchlib\n- * @library \/lib\/client ..\/\n- * @build java.desktop\/java.awt.Helper\n- * @build ExtendedRobot SystemTrayIconHelper\n+ * @library\n+ *          \/java\/awt\/patchlib\n+ *          \/java\/awt\/TrayIcon\n+ *          \/lib\/client\n+ *          \/test\/lib\n+ * @build\n+ *          java.desktop\/java.awt.Helper\n+ *          jdk.test.lib.Platform\n+ *          jtreg.SkippedException\n+ *          ExtendedRobot\n+ *          SystemTrayIconHelper\n@@ -46,2 +66,3 @@\n-    boolean actionPerformed = false;\n-    Object actionLock = new Object();\n+    volatile boolean actionPerformed = false;\n+    final Object actionLock = new Object();\n+\n@@ -54,0 +75,6 @@\n+        if (Platform.isOnWayland()) {\n+            \/\/ The current robot implementation does not support\n+            \/\/ clicking in the system tray area.\n+            throw new SkippedException(\"Skipped on Wayland\");\n+        }\n+\n@@ -55,11 +82,10 @@\n-            System.out.println(\"SystemTray not supported on the platform under test. \" +\n-                    \"Marking the test passed\");\n-        } else {\n-            if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\"))\n-                System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n-                        \"in Windows 7, which is behavior by default.\\n\" +\n-                        \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n-                        \"\\\"Always show all icons and notifications on the taskbar\\\" true \" +\n-                        \"to avoid this problem. Or change behavior only for Java SE \" +\n-                        \"tray icon.\");\n-            new TrayIconPopupTest().doTest();\n+            throw new SkippedException(\"SystemTray is not supported on this platform.\");\n+        }\n+\n+        if (Platform.isWindows()) {\n+            System.err.println(\"Test can fail if the icon hides to a tray icons pool \" +\n+                    \"in Windows 7, which is behavior by default.\\n\" +\n+                    \"Set \\\"Right mouse click\\\" -> \\\"Customize notification icons\\\" -> \" +\n+                    \"\\\"Always show all icons and notifications on the taskbar\\\" true \" +\n+                    \"to avoid this problem. Or change behavior only for Java SE \" +\n+                    \"tray icon.\");\n@@ -67,0 +93,1 @@\n+        new TrayIconPopupTest().doTest();\n@@ -131,1 +158,1 @@\n-        robot.mousePress(InputEvent.BUTTON3_MASK);\n+        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n@@ -133,1 +160,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON3_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n@@ -137,1 +164,1 @@\n-        robot.mousePress(InputEvent.BUTTON3_MASK);\n+        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n@@ -139,1 +166,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON3_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconPopup\/TrayIconPopupTest.java","additions":52,"deletions":25,"binary":false,"changes":77,"status":"modified"}]}