{"files":[{"patch":"@@ -149,0 +149,45 @@\n+struct AtomicCmpxchg1ByteStressSupport {\n+  char _default_val;\n+  int  _base;\n+  char _array[7+32+7];\n+\n+  AtomicCmpxchg1ByteStressSupport() : _default_val(0x7a), _base(7), _array{} {}\n+\n+  void validate(char val, char val2, int index) {\n+    for (int i = 0; i < 7; i++) {\n+      EXPECT_EQ(_array[i], _default_val);\n+    }\n+    for (int i = 7; i < (7+32); i++) {\n+      if (i == index) {\n+        EXPECT_EQ(_array[i], val2);\n+      } else {\n+        EXPECT_EQ(_array[i], val);\n+      }\n+    }\n+    for (int i = 0; i < 7; i++) {\n+      EXPECT_EQ(_array[i], _default_val);\n+    }\n+  }\n+\n+  void test_index(int index) {\n+    char one = 1;\n+    Atomic::cmpxchg(&_array[index], _default_val, one);\n+    validate(_default_val, one, index);\n+\n+    Atomic::cmpxchg(&_array[index], one, _default_val);\n+    validate(_default_val, _default_val, index);\n+  }\n+\n+  void test() {\n+    memset(_array, _default_val, sizeof(_array));\n+    for (int i = _base; i < (_base+32); i++) {\n+      test_index(i);\n+    }\n+  }\n+};\n+\n+TEST(AtomicCmpxchg1Byte, stress) {\n+  AtomicCmpxchg1ByteStressSupport support;\n+  support.test();\n+}\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_atomic.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}