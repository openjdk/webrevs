{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,6 @@\n-  @author das@sparc.spb.su area=awt.print\n-  @run main\/manual=yesno ConstrainedPrintingTest\n+  @library \/test\/lib\n+  @library \/javax\/accessibility\/manual\n+  @build lib.ManualTestFrame\n+  @build lib.TestResult\n+  @build jtreg.SkippedException\n+  @run main\/manual ConstrainedPrintingTest\n@@ -33,67 +37,34 @@\n-\/\/ Note there is no @ in front of test above.  This is so that the\n-\/\/  harness will not mistake this file as a test file.  It should\n-\/\/  only see the html file as a test file. (the harness runs all\n-\/\/  valid test files, so it would run this test twice if this file\n-\/\/  were valid as well as the html file.)\n-\/\/ Also, note the area= after Your Name in the author tag.  Here, you\n-\/\/  should put which functional area the test falls in.  See the\n-\/\/  AWT-core home page -> test areas and\/or -> AWT team  for a list of\n-\/\/  areas.\n-\/\/ There are several places where ManualYesNoTest appear.  It is\n-\/\/  recommended that these be changed by a global search and replace,\n-\/\/  such as  ESC-%  in xemacs.\n-\n-\n-\n-\/**\n- * ConstrainedPrintingTest.java\n- *\n- * summary: verify that child components can draw only inside their\n- *          visible bounds\n- *\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-\n-\n-\/\/Manual tests should run as applet tests if possible because they\n-\/\/ get their environments cleaned up, including AWT threads, any\n-\/\/ test created threads, and any system resources used by the test\n-\/\/ such as file descriptors.  (This is normally not a problem as\n-\/\/ main tests usually run in a separate VM, however on some platforms\n-\/\/ such as the Mac, separate VMs are not possible and non-applet\n-\/\/ tests will cause problems).  Also, you don't have to worry about\n-\/\/ synchronisation stuff in Applet tests the way you do in main\n-\/\/ tests...\n-\n-\n-public class ConstrainedPrintingTest implements ActionListener\n- {\n-   \/\/Declare things used in the test, like buttons and labels here\n-    final Frame frame = new Frame(\"PrintTest\");\n-    final Button button = new Button(\"Print\");\n-    final Panel panel = new Panel();\n-    final Component testComponent = new Component() {\n-        public void paint(Graphics g) {\n-            ConstrainedPrintingTest.paintOutsideBounds(this, g, Color.green);\n-        }\n-        public Dimension getPreferredSize() {\n-            return new Dimension(100, 100);\n-        }\n-    };\n-    final Canvas testCanvas = new Canvas() {\n-        public void paint(Graphics g) {\n-            ConstrainedPrintingTest.paintOutsideBounds(this, g, Color.red);\n-            \/\/ The frame is sized so that only the upper part of\n-            \/\/ the canvas is visible. We draw on the lower part,\n-            \/\/ so that we can verify that the output is clipped\n-            \/\/ by the parent container bounds.\n-            Dimension panelSize = panel.getSize();\n-            Rectangle b = getBounds();\n-            g.setColor(Color.red);\n-            g.setClip(null);\n-            for (int i = panelSize.height - b.y; i < b.height; i+= 10) {\n-                g.drawLine(0, i, b.width, i);\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.JobAttributes;\n+import java.awt.PageAttributes;\n+import java.awt.Panel;\n+import java.awt.PrintJob;\n+import java.awt.Rectangle;\n+import java.awt.print.PrinterJob;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javax.swing.JEditorPane;\n+import jtreg.SkippedException;\n+import lib.ManualTestFrame;\n+import lib.TestResult;\n+\n+public class ConstrainedPrintingTest {\n+\n+    public static void createTestUI() {\n+        Frame frame = new Frame(\"PrintTest\");\n+        Button button = new Button(\"Print\");\n+        Panel panel = new Panel();\n+        Component testComponent = new Component() {\n+            public void paint(Graphics g) {\n+                ConstrainedPrintingTest.paintOutsideBounds(this, g, Color.green);\n@@ -101,12 +72,40 @@\n-        }\n-        public Dimension getPreferredSize() {\n-            return new Dimension(100, 100);\n-        }\n-    };\n-\n-   public void init()\n-    {\n-      \/\/Create instructions for the user here, as well as set up\n-      \/\/ the environment -- set the layout manager, add buttons,\n-      \/\/ etc.\n-        button.addActionListener(this);\n+            public Dimension getPreferredSize() {\n+                return new Dimension(100, 100);\n+            }\n+        };\n+\n+        Canvas testCanvas = new Canvas() {\n+            public void paint(Graphics g) {\n+                ConstrainedPrintingTest.paintOutsideBounds(this, g, Color.red);\n+                \/\/ The frame is sized so that only the upper part of\n+                \/\/ the canvas is visible. We draw on the lower part,\n+                \/\/ so that we can verify that the output is clipped\n+                \/\/ by the parent container bounds.\n+                Dimension panelSize = panel.getSize();\n+                Rectangle b = getBounds();\n+                g.setColor(Color.red);\n+                g.setClip(null);\n+                for (int i = panelSize.height - b.y; i < b.height; i+= 10) {\n+                    g.drawLine(0, i, b.width, i);\n+                }\n+            }\n+            public Dimension getPreferredSize() {\n+                return new Dimension(100, 100);\n+            }\n+        };\n+\n+        button.addActionListener((actionEvent) -> {\n+            PageAttributes pa = new PageAttributes();\n+            pa.setPrinterResolution(36);\n+            PrintJob pjob = frame.getToolkit().getPrintJob(frame, \"NewTest\",\n+                    new JobAttributes(), pa);\n+            if (pjob != null) {\n+                Graphics pg = pjob.getGraphics();\n+                if (pg != null) {\n+                    pg.translate(20, 20);\n+                    frame.printAll(pg);\n+                    pg.dispose();\n+                }\n+                pjob.end();\n+            }\n+        });\n@@ -125,20 +124,1 @@\n-\n-      String[] instructions =\n-       {\n-         \"1.Look at the frame titled \\\"PrintTest\\\". If you see green or\",\n-         \"  red lines on the white area below the \\\"Print\\\" button, the\",\n-         \"  test fails. Otherwise go to step 2.\",\n-         \"2.Press \\\"Print\\\" button. The print dialog will appear. Select\",\n-         \"  a printer and proceed. Look at the output. If you see multiple\",\n-         \"  lines outside of the frame bounds or in the white area below\",\n-         \"  the image of the \\\"Print\\\" button, the test fails. Otherwise\",\n-         \"  the test passes.\"\n-       };\n-      Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-   public void start ()\n-    {\n-      \/\/Get things going.  Request focus, set size, et cetera\n-\n+        frame.setLocationRelativeTo(null);\n@@ -146,36 +126,0 @@\n-\n-      \/\/What would normally go into main() will probably go here.\n-      \/\/Use System.out.println for diagnostic messages that you want\n-      \/\/ to read after the test is done.\n-      \/\/Use Sysout.println for messages you want the tester to read.\n-\n-    }\/\/ start()\n-\n-   \/\/The rest of this class is the actions which perform the test...\n-\n-   \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-   \/\/Sysout.println (\"Something Happened!\");\n-\n-    public void stop() {\n-        frame.setVisible(false);\n-    }\n-\n-    public void destroy() {\n-        frame.dispose();\n-    }\n-\n-    public void actionPerformed(ActionEvent e) {\n-        PageAttributes pa = new PageAttributes();\n-        pa.setPrinterResolution(36);\n-        PrintJob pjob = frame.getToolkit().getPrintJob(frame, \"NewTest\",\n-                                                       new JobAttributes(),\n-                                                       pa);\n-        if (pjob != null) {\n-            Graphics pg = pjob.getGraphics();\n-            if (pg != null) {\n-                pg.translate(20, 20);\n-                frame.printAll(pg);\n-                pg.dispose();\n-            }\n-            pjob.end();\n-        }\n@@ -206,6 +150,2 @@\n-    public static void main(String[] args) {\n-        ConstrainedPrintingTest c = new ConstrainedPrintingTest();\n-\n-        c.init();\n-        c.start();\n-    }\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, IOException {\n@@ -213,135 +153,4 @@\n- }\/\/ class ConstrainedPrintingTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -349,4 +158,23 @@\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        String instruction = \"\"\"\n+                1.Look at the frame titled \"PrintTest\". If you see green or,\n+                red lines on the white area below the \"Print\" button, the,\n+                test fails. Otherwise go to step 2.,\n+                2.Press \"Print\" button. The print dialog will appear.\n+                Select, a printer and proceed. Look at the output.\n+                If you see multiple, lines outside of the frame bounds\n+                or in the white area below, the image of the \"Print\"\n+                button, the test fails. Otherwise,the test passes.\n+                \"\"\";\n+        Consumer<JEditorPane> testInstProvider = e -> {\n+            e.setContentType(\"text\/plain\");\n+            e.setText(instruction);\n+        };\n+\n+        Supplier<TestResult> resultSupplier = ManualTestFrame.showUI(\n+                \"Tests ConstrainedPrintingTest\",\n+                \"Wait until the Test UI is seen\", testInstProvider);\n+        EventQueue.invokeAndWait(ConstrainedPrintingTest::createTestUI);\n+\n+        \/\/this will block until user decision to pass or fail the test\n+        TestResult  testResult = resultSupplier.get();\n+        ManualTestFrame.handleResult(testResult,\"ConstrainedPrintingTest\");\n@@ -354,0 +182,1 @@\n+}\n@@ -355,1 +184,0 @@\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/PrintJob\/ConstrainedPrintingTest\/ConstrainedPrintingTest.java","additions":112,"deletions":284,"binary":false,"changes":396,"status":"modified"}]}