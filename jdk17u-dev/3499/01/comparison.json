{"files":[{"patch":"@@ -495,0 +495,2 @@\n+java\/awt\/Dialog\/FileDialogUserFilterTest.java 8001142 generic-all\n+\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Event;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Window;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4058370\n+ * @summary Test to verify Modality of Dialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogModalityTest\n+ *\/\n+\n+public class DialogModalityTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. When the test is running, there will be a Frame, a Modal Dialog\n+                   and a Window that is Modal Dialog's parent.\n+                2. Verify that it is impossible to bring up the menu in Frame before\n+                   closing the Modal Dialog.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Window> initialize() {\n+        Frame f = new Frame(\"Parent Frame\");\n+        DialogTest dlg = new DialogTest(f, \"Modal Dialog\");\n+        f.add(new Button(\"push me\"));\n+        f.setSize(200, 200);\n+        f.setLocation(210, 1);\n+        dlg.setBounds(210, 203, 200, 200);\n+        return List.of(f, dlg);\n+    }\n+}\n+\n+class DialogTest extends Dialog {\n+    Button closeButton;\n+    Frame parent;\n+\n+    public DialogTest(Frame parent, String title) {\n+        this(parent, title, true);\n+    }\n+\n+    public DialogTest(Frame parent, String title, boolean modal) {\n+        super(parent, title, modal);\n+        this.parent = parent;\n+        setLayout(new BorderLayout());\n+        Panel buttonPanel = new Panel();\n+        closeButton = new Button(\"Close\");\n+        buttonPanel.add(closeButton);\n+        add(\"Center\", buttonPanel);\n+        pack();\n+    }\n+\n+    public boolean action(Event e, Object arg) {\n+        if (e.target == closeButton) {\n+            Dialog dialog = null;\n+            Component c = (Component) e.target;\n+\n+            while (c != null && !(c instanceof Dialog)) {\n+                c = c.getParent();\n+            }\n+\n+            if (c != null) {\n+                dialog = (Dialog) c;\n+            }\n+\n+            if (dialog == null) {\n+                return false;\n+            }\n+\n+            dialog.setVisible(false);\n+            dialog.dispose();\n+            return true;\n+        }\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogModalityTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+\n+\/*\n+ * @test\n+ * @bug 4172302\n+ * @summary Test to make sure non-resizable Dialogs can be resized with the\n+ *          setSize() method.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogResizeTest2\n+ *\/\n+\n+public class DialogResizeTest2 {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This tests the programmatic resizability of non-resizable Dialogs\n+                Even when a Dialog is set to be non-resizable, it should be\n+                programmatically resizable using the setSize() method.\n+\n+                1. Initially the Dialog will be resizable.  Try using the \\\\\"Smaller\\\\\"\n+                   and \\\\\"Larger\\\\\" buttons to verify that the Dialog resizes correctly\n+                2. Then, click the \\\\\"Toggle\\\\\" button to make the Dialog non-resizable\n+                3. Again, verify that clicking the \\\\\"Larger\\\\\" and \\\\\"Smaller\\\\\" buttons\n+                    causes the Dialog to get larger and smaller.  If the Dialog does\n+                    not change size, or does not re-layout correctly, the test FAILS\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Parent Frame\");\n+        frame.add(new Button(\"Button\"));\n+        frame.setSize(100, 100);\n+        new dlg(frame).setVisible(true);\n+        return frame;\n+    }\n+\n+    static class dlg extends Dialog {\n+        public dlg(Frame f_) {\n+            super(f_, \"Dialog\", false);\n+            setSize(200, 200);\n+            Button bLarger = new Button(\"Larger\");\n+            bLarger.addActionListener(e -> setSize(400, 400));\n+            Button bSmaller = new Button(\"Smaller\");\n+            bSmaller.addActionListener(e -> setSize(200, 100));\n+            Button bCheck = new Button(\"Resizable?\");\n+            bCheck.addActionListener(e -> {\n+                if (isResizable()) {\n+                    PassFailJFrame.log(\"Dialog is resizable\");\n+                } else {\n+                    PassFailJFrame.log(\"Dialog is not resizable\");\n+                }\n+            });\n+            Button bToggle = new Button(\"Toggle\");\n+            bToggle.addActionListener(e -> {\n+                if (isResizable()) {\n+                    setResizable(false);\n+                    PassFailJFrame.log(\"Dialog is now not resizable\");\n+                } else {\n+                    setResizable(true);\n+                    PassFailJFrame.log(\"Dialog is now resizable\");\n+                }\n+            });\n+            setLayout(new GridLayout(1, 4));\n+            add(bSmaller);\n+            add(bLarger);\n+            add(bCheck);\n+            add(bToggle);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogResizeTest2.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Event;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.TextField;\n+import java.io.File;\n+import java.io.FilenameFilter;\n+\n+\/*\n+ * @test\n+ * @bug 4293697 4416433 4417139 4409600\n+ * @summary Test to verify that user filter always gets called on changing the\n+ *          directory in FileDialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogUserFilterTest\n+ *\/\n+\n+public class FileDialogUserFilterTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                        1. Enter a mask into the <filter> field, a directory into\n+                           the <directory> field (or leave the default values).\n+                        2. Then click the <Load> button, file dialog will appear.\n+                           Output of the user filter will be shown in the output\n+                           area. Enter several different directories to the file dialog\n+                           via double-clicking on the directory list. The output\n+                           area should show some filtering output on each directory\n+                           change. If any output was only given on dialog startup,\n+                           the test is FAILED.\n+                        3. Look at the list of files accepted by the filter.\n+                           If some files do not match the filter,\n+                           the test is FAILED.\n+                        4. Open dialog with an empty filter.\n+                           Enter some directories with a lot of files (like \/usr\/bin).\n+                           If dialog crashes the test is FAILED.\n+                           Enter the directory that contain files and other directories.\n+                           If the directories are shown in the files box along with files\n+                           then the test is FAILED.\n+                        5. Click in checkbox 'do not use filter', make it checked.\n+                           Open dialog, enter the directory with some files.\n+                           If no files is shown in the File list box (while you are sure\n+                           there are some files there) the test is FAILED\n+                           Otherwise it is PASSED.\"\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(new DialogFilterTest())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class DialogFilterTest extends Frame implements FilenameFilter {\n+    FileDialog fd;\n+    static TextField tfDirectory = new TextField();\n+    static TextField tfFile = new TextField();\n+    static TextField tfFilter = new TextField();\n+    static Checkbox useFilterCheck = new Checkbox(\"do not use filter\");\n+\n+    public DialogFilterTest() {\n+        setTitle(\"File Dialog User Filter test\");\n+        add(\"North\", new Button(\"Load\"));\n+        Panel p = new Panel();\n+        p.setLayout(new GridBagLayout());\n+        addRow(p, new Label(\"directory:\", Label.RIGHT), tfDirectory);\n+        addRow(p, new Label(\"file:\", Label.RIGHT), tfFile);\n+        addRow(p, new Label(\"filter:\", Label.RIGHT), tfFilter);\n+        addRow(p, new Label(\"\"), useFilterCheck);\n+        tfFilter.setText(\".java\");\n+        tfDirectory.setText(\".\");\n+        add(\"Center\", p);\n+        setSize(300, 200);\n+    }\n+\n+    static void addRow(Container cont, Component c1, Component c2) {\n+        GridBagLayout gbl = (GridBagLayout) cont.getLayout();\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.fill = GridBagConstraints.BOTH;\n+        cont.add(c1);\n+        gbl.setConstraints(c1, c);\n+\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        c.weightx = 1.0;\n+        cont.add(c2);\n+        gbl.setConstraints(c2, c);\n+    }\n+\n+    public boolean accept(File dir, String name) {\n+        System.out.println(\"File \" + dir + \" String \" + name);\n+        if (fd.getMode() == FileDialog.LOAD) {\n+            return name.lastIndexOf(tfFilter.getText()) > 0;\n+        }\n+        return true;\n+    }\n+\n+    public boolean action(Event evt, Object what) {\n+        boolean load = \"Load\".equals(what);\n+\n+        if (load || \"Save\".equals(what)) {\n+            fd = new FileDialog(new Frame(), null,\n+                    load ? FileDialog.LOAD : FileDialog.SAVE);\n+            fd.setDirectory(tfDirectory.getText());\n+            fd.setFile(tfFile.getText());\n+            if (!useFilterCheck.getState()) {\n+                fd.setFilenameFilter(this);\n+            }\n+            fd.setVisible(true);\n+            tfDirectory.setText(fd.getDirectory());\n+            tfFile.setText(fd.getFile());\n+\n+            return true;\n+        }\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogUserFilterTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4048664 4065506 4122094 4171979\n+ * @summary Test if Dialog can be successfully hidden, see that no other app\n+ *          comes to front, see if hide + dispose causes assertion failure\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HideDialogTest\n+ *\/\n+\n+public class HideDialogTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. A Frame should appear with a \"test\" button in it\n+                2. Click on the \"test\" button. A Dialog will appear with a \"dismiss\" button\n+                   and a \"dismiss-with-dispose\" button\n+                3. First, click on the \"dismiss-with-dispose\" button. Verify that\n+                   no assertion failure appears.\n+                4. Now, click on the \"dismiss\" button. The Dialog should go away.\n+                5. Repeat from (2) 10-20 times.\n+                6. When the dialog goes away check that the frame window does not briefly\n+                   get obscured by another app or repaint it's entire area. There should be\n+                   no flicker at all in areas obscured by the dialog. (4065506 4122094)\n+                   If there is the test fails.\n+                7. If the Dialog is successfully hidden each time, the test passed.  If the\n+                   Dialog did not hide, the test failed (4048664).\n+\n+                NOTE: When the dialog does not go away (meaning the bug has manifested itself),\n+                the \"dismiss-with-dispose\" button can be used to get rid of it.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(new MyFrame())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class MyDialog extends Dialog {\n+    public MyDialog(Frame f) {\n+        super(f, \"foobar\", true);\n+        setSize(200, 200);\n+        setLayout(new BorderLayout());\n+        Panel p = new Panel();\n+        p.setLayout(new FlowLayout(FlowLayout.CENTER));\n+        Button okButton;\n+        okButton = new Button(\"dismiss\");\n+        p.add(okButton);\n+        okButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                System.out.println(\"Calling setVisible(false)\");\n+                setVisible(false);\n+            }\n+        });\n+        Button newButton;\n+        p.add(newButton = new Button(\"dismiss-with-dispose\"));\n+        newButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                System.out.println(\"Calling setVisible(false) + dispose()\");\n+                setVisible(false);\n+                dispose();\n+            }\n+        });\n+        add(\"South\", p);\n+        pack();\n+    }\n+}\n+\n+class MyFrame extends Frame implements ActionListener {\n+    public MyFrame() {\n+        super();\n+        setSize(600, 400);\n+        setTitle(\"HideDialogTest\");\n+        setLayout(new BorderLayout());\n+        Panel toolbar = new Panel();\n+        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT));\n+        Button testButton = new Button(\"test\");\n+        testButton.addActionListener(this);\n+        toolbar.add(testButton);\n+        add(\"North\", toolbar);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String s = e.getActionCommand();\n+        if (s.equals(\"test\")) {\n+            System.out.println(\"Begin test\");\n+            MyDialog d = new MyDialog(this);\n+            d.setVisible(true);\n+            System.out.println(\"End test\");\n+        }\n+    }\n+\n+    public void paint(Graphics g) {\n+        for (int i = 0; i < 10; i++) {\n+            g.setColor(Color.red);\n+            g.fillRect(0, 0, 2000, 2000);\n+            g.setColor(Color.blue);\n+            g.fillRect(0, 0, 2000, 2000);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/HideDialogTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+\n+\/*\n+ * @test\n+ * @bug 4078176\n+ * @summary Test to verify Modal dialogs don't act modal if addNotify()\n+ *          is called before setModal(true).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ModalDialogTest\n+ *\/\n+\n+public class ModalDialogTest implements ActionListener {\n+    public boolean modal = true;\n+    Button closeBtn = new Button(\"Close me\");\n+    Button createBtn = new Button(\"Create Dialog\");\n+    Button createNewBtn = new Button(\"Create Modal Dialog\");\n+    Button lastBtn = new Button(\"Show Last Dialog\");\n+    Dialog dialog;\n+    Dialog newDialog;\n+    Frame testFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Use 'Modal' checkbox to select which dialog you're\n+                   going to create - modal or non-modal.\n+                   (this checkbox affects only new created dialog but\n+                   not existing one)\n+                2. Use 'Create Dialog' button to create a dialog.\n+                   If you have selected 'Modal' checkbox then dialog has to\n+                   be created modal - you can make sure of that clicking\n+                   on any other control (i.e. 'Modal' checkbox) - they\n+                   should not work.\n+                3. Use 'Show Last Dialog' button to bring up last\n+                   created dialog - to make sure that if you show\/hide\n+                   modal dialog several times it stays modal.\n+                4. On the appearing dialog there are two buttons:\n+                   'Close Me' which closes the dialog,\n+                   and 'Create Modal Dialog' which creates one more\n+                   MODAL dialog just to make sure that\n+                   in situation with two modal dialogs all is fine.\n+                5. If created modal dialogs are really modal\n+                   (which means that they blocks the calling app)\n+                   then test is PASSED, otherwise it's FAILED.\"\n+                                 \"\"\";\n+        ModalDialogTest test = new ModalDialogTest();\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(test.initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public Frame initialize() {\n+        testFrame = new Frame(\"Parent Frame\");\n+        Frame frame = new Frame(\"Modal Dialog test\");\n+        Panel panel = new Panel();\n+        panel.setLayout(new BorderLayout());\n+\n+        createBtn.addActionListener(this);\n+        createNewBtn.addActionListener(this);\n+        closeBtn.addActionListener(this);\n+        lastBtn.addActionListener(this);\n+        panel.add(\"Center\", createBtn);\n+        panel.add(\"South\", lastBtn);\n+        Checkbox cb = new Checkbox(\"Modal\", modal);\n+        cb.addItemListener(new ItemListener() {\n+            public void itemStateChanged(ItemEvent e) {\n+                modal = ((Checkbox) e.getSource()).getState();\n+            }\n+        });\n+        panel.add(\"North\", cb);\n+        panel.setSize(200, 100);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getSource() == createBtn) {\n+            if (dialog != null) {\n+                dialog.dispose();\n+            }\n+            dialog = new Dialog(testFrame, \"Modal Dialog\");\n+            dialog.add(\"North\", closeBtn);\n+            dialog.add(\"South\", createNewBtn);\n+            createBtn.setEnabled(false);\n+            dialog.pack();\n+            dialog.setModal(modal);\n+            dialog.setVisible(true);\n+        } else if (e.getSource() == closeBtn && dialog != null) {\n+            createBtn.setEnabled(true);\n+            dialog.setVisible(false);\n+        } else if (e.getSource() == lastBtn && dialog != null) {\n+            dialog.setVisible(true);\n+        } else if (e.getSource() == createNewBtn && newDialog == null) {\n+            newDialog = new Dialog(testFrame, \"New Modal Dialog\");\n+            Button clsBtn = new Button(\"Close Me\");\n+            clsBtn.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    newDialog.dispose();\n+                    newDialog = null;\n+                }\n+            });\n+            newDialog.add(\"North\", clsBtn);\n+            newDialog.pack();\n+            newDialog.setModal(true);\n+            newDialog.setVisible(true);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}