{"files":[{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4614881\n+ * @summary Ensure that client decorated frames can be brought to the front\n+ *          via mouse click on the title pane.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4614881\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Toolkit;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+\n+public class bug4614881 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Select a native window so that it obscures the client decorated frame.\n+        Select the decorated frame by clicking on the title pane.\n+        If the decorated frame is brought to the front, then test passes else fails.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4614881 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(bug4614881::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        Toolkit.getDefaultToolkit().setDynamicLayout(true);\n+        JFrame.setDefaultLookAndFeelDecorated(true);\n+        JDialog.setDefaultLookAndFeelDecorated(true);\n+        final JFrame frame = new JFrame(\"4614881 - Decorated Frame\");\n+        frame.setSize(600, 400);\n+        frame.setResizable(false);\n+        frame.getContentPane().setLayout(new FlowLayout());\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/bug4614881.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4211052\n+ * @requires (os.family == \"windows\")\n+ * @summary\n+ *     This test checks if menu items lay out correctly when their\n+ *     ComponentOrientation property is set to RIGHT_TO_LEFT.\n+ *     The tester is asked to compare left-to-right and\n+ *     right-to-left menus and judge whether they are mirror images of each\n+ *     other.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RightLeftOrientation\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.ComponentOrientation;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.Icon;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.KeyStroke;\n+import javax.swing.LookAndFeel;\n+import javax.swing.SwingConstants;\n+import javax.swing.UIManager;\n+\n+public class RightLeftOrientation {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        A menu bar is shown containing a menu for each look and feel.\n+        A disabled menu means that the look and feel is not available for\n+        testing in this environment.\n+        Every effort should be made to run this test\n+        in an environment that covers all look and feels.\n+\n+        Each menu is divided into two halves. The upper half is oriented\n+        left-to-right and the lower half is oriented right-to-left.\n+        For each menu, ensure that the lower half mirrors the upper half.\n+\n+        Note that when checking the positioning of the sub-menus, it\n+        helps to position the frame away from the screen edges.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"RightLeftOrientation Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(RightLeftOrientation::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"RightLeftOrientation\");\n+        JMenuBar menuBar = new JMenuBar();\n+\n+        menuBar.add(createMenu(\"javax.swing.plaf.metal.MetalLookAndFeel\",\n+                                \"Metal\"));\n+        menuBar.add(createMenu(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\",\n+                                \"Motif\"));\n+        menuBar.add(createMenu(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\",\n+                                \"Windows\"));\n+\n+        frame.setJMenuBar(menuBar);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+\n+    static JMenu createMenu(String laf, String name) {\n+        JMenu menu = new JMenu(name);\n+        try {\n+            LookAndFeel save = UIManager.getLookAndFeel();\n+            UIManager.setLookAndFeel(laf);\n+            addMenuItems(menu, ComponentOrientation.LEFT_TO_RIGHT);\n+            menu.addSeparator();\n+            addMenuItems(menu, ComponentOrientation.RIGHT_TO_LEFT);\n+            UIManager.setLookAndFeel(save);\n+        } catch (Exception e) {\n+            menu = new JMenu(name);\n+            menu.setEnabled(false);\n+        }\n+        return menu;\n+    }\n+\n+    static void addMenuItems(JMenu menu, ComponentOrientation o) {\n+\n+        JMenuItem menuItem;\n+\n+        menuItem = new JMenuItem(\"Menu Item\");\n+        menuItem.setComponentOrientation(o);\n+        menu.add(menuItem);\n+\n+        menuItem = new JMenuItem(\"Text trails icon\", new MyMenuItemIcon());\n+        menuItem.setComponentOrientation(o);\n+        menu.add(menuItem);\n+\n+        menuItem = new JMenuItem(\"Text leads icon\", new MyMenuItemIcon());\n+        menuItem.setComponentOrientation(o);\n+        menuItem.setHorizontalTextPosition(SwingConstants.LEADING);\n+        menu.add(menuItem);\n+\n+        menuItem = new JRadioButtonMenuItem(\"Radio Button Menu Item\");\n+        menuItem.setComponentOrientation(o);\n+        menuItem.setSelected(true);\n+        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_1, ActionEvent.ALT_MASK));\n+        menu.add(menuItem);\n+\n+        menuItem = new JCheckBoxMenuItem(\"Check box Menu Item\");\n+        menuItem.setComponentOrientation(o);\n+        menuItem.setSelected(true);\n+        menuItem.setFont( new Font(\"Serif\",Font.PLAIN, 24) );\n+        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_2, ActionEvent.ALT_MASK));\n+        menu.add(menuItem);\n+\n+        menuItem = new JMenu(\"Sub Menu\");\n+        menuItem.setComponentOrientation(o);\n+        menuItem.add(new JMenuItem(\"Sub Menu One\")).setComponentOrientation(o);\n+        menuItem.add(new JMenuItem(\"Sub Menu Two\")).setComponentOrientation(o);\n+        menu.add(menuItem);\n+    }\n+\n+\n+    private static class MyMenuItemIcon implements Icon {\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            Color oldColor = g.getColor();\n+            g.setColor(Color.orange);\n+            g.fill3DRect(x, y, getIconWidth(), getIconHeight(), true);\n+            g.setColor(oldColor);\n+        }\n+        public int getIconWidth() { return 15; }\n+        public int getIconHeight() { return 15; }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/RightLeftOrientation.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4729669\n+ * @summary 1.4 REGRESSION: Text edge of different types of JMenuItems are not aligned\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4729669\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.ComponentOrientation;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.Icon;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.KeyStroke;\n+\n+import java.util.List;\n+\n+public class bug4729669 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Two windows should appear: Left-to-right and Right-to-left.\n+        Check that text on all the menu items of all menus\n+        is properly vertically aligned.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4729669 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(bug4729669::createTestUI)\n+                .position(PassFailJFrame.Position.TOP_LEFT_CORNER)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static List<JFrame> createTestUI() {\n+        JFrame f1 = MenuItemTest.doMenuItemTest(true);\n+        f1.setLocation(300, 300);\n+        JFrame f2 = MenuItemTest.doMenuItemTest(false);\n+        f2.setLocation(500, 300);\n+        return List.of(f1, f2);\n+    }\n+}\n+\n+class MenuItemTest {\n+    public static JFrame doMenuItemTest(boolean isLeft) {\n+        JMenu menu = new JMenu(\"View\");\n+        menu.setMnemonic('V');\n+\n+        menu.add(new JMenuItem(\"Refresh\"));\n+        menu.add(new JMenuItem(\"Customize...\"));\n+        menu.add(new JCheckBoxMenuItem(\"Show Toolbar\"));\n+        menu.addSeparator();\n+        menu.add(new JRadioButtonMenuItem(\"List\"));\n+        menu.add(new JRadioButtonMenuItem(\"Icons\"));\n+        JRadioButtonMenuItem rm2 = new JRadioButtonMenuItem(\"And icon.\");\n+        rm2.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,\n+                                                  KeyEvent.SHIFT_MASK));\n+        menu.add(rm2);\n+        JRadioButtonMenuItem mi3 = new JRadioButtonMenuItem(\"Radio w\/icon\");\n+\n+        Icon myIcon = new Icon() { \/\/ 10 pixel red\n+            public void paintIcon(Component c, Graphics g, int x, int y) {\n+                Color color = g.getColor();\n+                g.setColor(Color.RED);\n+                g.fillRect(x, y, 10, 10);\n+                g.setColor(color);\n+            }\n+\n+            public int getIconWidth() {\n+                return 10;\n+            }\n+\n+            public int getIconHeight() {\n+                return 10;\n+            }\n+        };\n+\n+        Icon myIcon2 = new Icon() { \/\/ 15 pixel green\n+            public void paintIcon(Component c, Graphics g, int x, int y) {\n+                Color color = g.getColor();\n+                g.setColor(Color.GREEN);\n+                g.fillRect(x, y, 15, 10);\n+                g.setColor(color);\n+            }\n+\n+            public int getIconWidth() {\n+                return 15;\n+            }\n+\n+            public int getIconHeight() {\n+                return 10;\n+            }\n+        };\n+\n+        rm2.setIcon(myIcon2);\n+\n+        mi3.setIcon(myIcon);\n+        menu.add(mi3);\n+        menu.add(new JMenuItem(myIcon2));\n+\n+        final JMenu menu2 = new JMenu(\"No nothing\");\n+        menu2.add(\"One\").addActionListener(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                PassFailJFrame.log(\"menu.width = \" + menu2.getPopupMenu().getWidth());\n+            }\n+        });\n+        menu2.add(\"Two\").addActionListener(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                PassFailJFrame.log(\"menu.width = \" + menu2.getPopupMenu().getWidth());\n+            }\n+        });\n+        menu2.add(\"Threeee\").addActionListener(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                PassFailJFrame.log(\"menu.width = \" + menu2.getPopupMenu().getWidth());\n+            }\n+        });\n+\n+        JMenuItem mi4 = new JMenuItem(\"Item with icon\");\n+        mi4.setIcon(myIcon);\n+        menu.addSeparator();\n+        menu.add(mi4);\n+        String title = \"Menu Item Test \" + (isLeft ? \"(Left-to-right)\" : \"(Right-to-left)\");\n+        JFrame frame = new JFrame(title);\n+\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.add(menu);\n+        menuBar.add(menu2);\n+\n+        JMenu someIcons = new JMenu(\"Some icons\");\n+        JMenuItem imi1 = new JMenuItem(\"Icon!\");\n+        imi1.setIcon(myIcon);\n+        someIcons.add(imi1);\n+        JMenuItem imi2 = new JMenuItem(\"Wide icon!\");\n+        imi2.setIcon(myIcon2);\n+        someIcons.add(imi2);\n+        someIcons.add(new JCheckBoxMenuItem(\"CheckBox\"));\n+        someIcons.add(new JRadioButtonMenuItem(\"RadioButton\"));\n+        menuBar.add(someIcons);\n+        frame.setJMenuBar(menuBar);\n+        ComponentOrientation co = (isLeft ?\n+                ComponentOrientation.LEFT_TO_RIGHT :\n+                ComponentOrientation.RIGHT_TO_LEFT);\n+        frame.applyComponentOrientation(co);\n+        frame.setSize(300, 300);\n+        int frameX = isLeft ? 0 : 600;\n+        frame.setLocation(frameX, 20);\n+        return frame;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/bug4729669.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"}]}