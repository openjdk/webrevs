{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4530087\n+ * @summary Test if double-clicking causes ActionEvent on underlying button\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BadActionEventTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class BadActionEventTest implements ActionListener {\n+    private static Button showBtn;\n+    private static Button listBtn;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            1) Click on 'Show File Dialog' to bring up the FileDialog window.\n+            (If necessary, change to a directory with files (not just directories) in it.)\n+            2) Move the FileDialog so that one of the file names (again, a file, NOT a directory) in the list is\n+            directly over the 'ActionListener' button.\n+            3) Double-click on the file name over the button. The FileDialog will disappear.\n+            4) If the 'ActionListener' button receives an ActionEvent, the test fails and a\n+            message to that effect will be printed.\n+            Otherwise, the test passes.\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(45)\n+            .testUI(BadActionEventTest::createUI)\n+            .logArea(2)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"BadActionEventTest\");\n+        frame.setLayout(new GridLayout(1, 2));\n+        frame.setSize(400, 200);\n+        showBtn = new Button(\"Show File Dialog\");\n+        listBtn = new Button(\"ActionListener\");\n+        showBtn.setSize(200, 200);\n+        listBtn.setSize(200, 200);\n+        showBtn.addActionListener(new BadActionEventTest());\n+        listBtn.addActionListener(new BadActionEventTest());\n+        frame.add(showBtn);\n+        frame.add(listBtn);\n+        return frame;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getSource() == showBtn) {\n+            FileDialog fd = new FileDialog(new Frame());\n+            fd.setVisible(true);\n+        } else if (e.getSource() == listBtn) {\n+            listBtn.setBackground(Color.red);\n+            listBtn.setLabel(\"TEST FAILS!\");\n+            PassFailJFrame.log(\"*TEST FAILS!* ActionListener got ActionEvent! *TEST FAILS!*\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Button\/BadActionEventTest\/BadActionEventTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4178123\n+ * @summary Verifies that the Arc2D.contains(point) methods work correctly.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual Arc2DHitTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.geom.Arc2D;\n+\n+public class Arc2DHitTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            This test displays an arc figure and lets the user click on it.\n+            The arc will initially be drawn in red and only when the user clicks\n+            within the arc in the window it will be redrawn into green otherwise\n+            it should stay red.\n+\n+            For convenience, the point being tested is drawn in black.  Note\n+            that rounding in the arc rendering routines may cause points near\n+            the boundary of the arc to render incorrectly.  Allow for a pixel\n+            or two of leeway near the boundary.\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(initialize())\n+            .build()\n+            .awaitAndCheck();\n+    }\n+    private static Frame initialize() {\n+        Frame f = new Frame(\"Arc2DHitTest\");\n+        ArcHitPanel panel = new ArcHitPanel();\n+        f.add(panel);\n+        f.setSize(300, 250);\n+        return f;\n+    }\n+}\n+\n+class ArcHitPanel extends Panel {\n+    private Arc2D arc;\n+    private Point hit;\n+    public ArcHitPanel() {\n+        arc = new Arc2D.Float(10, 10, 100, 100, 0, 120, Arc2D.PIE);\n+        this.addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                hit = e.getPoint();\n+                repaint();\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D) g;\n+        g2.setColor(Color.white);\n+        g2.fill(g2.getClipBounds());\n+        g2.setColor((hit != null && arc.contains(hit))\n+            ? Color.green : Color.red);\n+        g2.fill(arc);\n+        if (hit != null) {\n+            g2.setColor(Color.black);\n+            g2.fillRect(hit.x, hit.y, 1, 1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/geom\/Arc2D\/Arc2DHitTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4197746\n+ * @summary Verifies that the getBounds2D method of Arc2D returns the\n+ *          correct result.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BoundsBug\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.Shape;\n+import java.awt.geom.Arc2D;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.geom.GeneralPath;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+\n+public class BoundsBug {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            This test displays three figures and draws the outline of their\n+            bounding boxes. The bounding boxes should correctly encompass\n+            the 3 figures.\n+\n+            This test also paints two highlight rectangles at the ends of the\n+            angular extents of the arc. The two highlights should correctly\n+            appear at the outer circumference of the arc where the radii lines\n+            from its center intersect that circumference.\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(initialize())\n+            .build()\n+            .awaitAndCheck();\n+    }\n+    private static Frame initialize() {\n+        Frame f = new Frame(\"BoundsBug\");\n+        ArcPanel panel = new ArcPanel();\n+        f.add(panel);\n+        f.setSize(300, 250);\n+        return f;\n+    }\n+}\n+\n+class ArcPanel extends Panel {\n+    protected void drawPoint(Graphics2D g2, Point2D p) {\n+        g2.setColor(Color.green);\n+        g2.fill(new Rectangle2D.Double(p.getX() - 5, p.getY() - 5, 10, 10));\n+    }\n+\n+    protected void drawShapeAndBounds(Graphics2D g2, Shape s) {\n+        g2.setColor(Color.orange);\n+        g2.fill(s);\n+        g2.setColor(Color.black);\n+        g2.draw(s);\n+\n+        Rectangle2D r = s.getBounds2D();\n+        g2.setColor(Color.gray);\n+        g2.draw(r);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D)g;\n+        g2.setColor(Color.white);\n+        g2.fill(g.getClipBounds());\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+            RenderingHints.VALUE_ANTIALIAS_ON);\n+\n+        \/\/ Create some interesting shapes.\n+        Ellipse2D ellipse = new Ellipse2D.Float(20, 40, 60, 80);\n+        Arc2D arc = new Arc2D.Float(60, 40, 100, 120,\n+            -30, -40, Arc2D.PIE);\n+        GeneralPath path = new GeneralPath(GeneralPath.WIND_EVEN_ODD);\n+        path.moveTo(0, 0);\n+        path.lineTo(75, -25);\n+        path.lineTo(25, 75);\n+        path.lineTo(0, 25);\n+        path.lineTo(100, 50);\n+        path.lineTo(50, 0);\n+        path.lineTo(25, 50);\n+        path.closePath();\n+        \/\/ Now draw them and their bounds rectangles.\n+        drawShapeAndBounds(g2, ellipse);\n+        drawShapeAndBounds(g2, arc);\n+        drawPoint(g2, arc.getStartPoint());\n+        drawPoint(g2, arc.getEndPoint());\n+        g2.translate(180, 65);\n+        drawShapeAndBounds(g2, path);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/geom\/Arc2D\/BoundsBug.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4183373\n+ * @summary Verifies that the translated Area objects display correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual Translate\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.CardLayout;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Area;\n+import java.awt.geom.Rectangle2D;\n+\n+public class Translate {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            This test displays two sets of rectangular figures. The two sets\n+            should be displayed one on top of the other and should be lined\n+            up vertically with each other. If the two sets of figures are\n+            not directly above and below each other then the test fails\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(35)\n+            .testUI(initialize())\n+            .build()\n+            .awaitAndCheck();\n+    }\n+    private static Frame initialize() {\n+        Frame f = new Frame(\"Translate\");\n+        TranslatePanel panel = new TranslatePanel();\n+        f.add(panel);\n+        f.setSize(300, 250);\n+        return f;\n+    }\n+}\n+\n+class TranslatePanel extends Panel {\n+    private static Image bufferedImage;\n+    private static Area a1, a2, a3;\n+\n+    public TranslatePanel() {\n+        a1 = new Area(new Rectangle2D.Double(20.0, 20.0, 60.0, 60.0));\n+\n+        a2 = new Area((Area) a1.clone());\n+        a2.subtract(new Area(new Rectangle2D.Double(30.0, 30.0, 40.0, 40.0)));\n+\n+        a3 = new Area((Area) a2.clone());\n+        a3.add(new Area(new Rectangle2D.Double(40.0, 40.0, 20.0, 20.0)));\n+\n+        AffineTransform at2 = new AffineTransform();\n+        at2.translate(100.0, 0.0);\n+        a2.transform(at2);\n+\n+        AffineTransform at3 = new AffineTransform();\n+        at3.translate(200.0, 0.0);\n+        a3.transform(at3);\n+    }\n+    private void paintRects(Graphics2D g2) {\n+        Rectangle clip = g2.getClipBounds();\n+        g2.setColor(Color.white);\n+        g2.fillRect(clip.x, clip.y, clip.width, clip.height);\n+        g2.setPaint(Color.red);\n+        g2.fill(a1);\n+        g2.setPaint(Color.yellow);\n+        g2.fill(a2);\n+        g2.setPaint(Color.blue);\n+        g2.fill(a3);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        if (bufferedImage == null) {\n+            bufferedImage = createImage(300, 100);\n+            Graphics big = bufferedImage.getGraphics();\n+            \/\/ Notice that if you remove the translate() call, it works fine.\n+            big.translate(-1, -1);\n+            big.setClip(1, 1, 300, 100);\n+            paintRects((Graphics2D)big);\n+            big.translate(1, 1);\n+        }\n+        paintRects((Graphics2D)g);\n+        g.drawImage(bufferedImage, 1, 100, this);\n+        g.setColor(Color.black);\n+        g.drawString(\"From offscreen image (with translate):\", 10, 95);\n+        g.drawString(\" (should line up with rectangles above)\", 10, 110);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/geom\/Area\/Translate.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}