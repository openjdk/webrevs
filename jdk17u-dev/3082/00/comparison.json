{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -369,0 +369,2 @@\n+    private int savedBlinkRate = 0;\n+    private boolean isBlinkRateSaved = false;\n@@ -382,1 +384,13 @@\n-                setVisible(true);\n+                if (isBlinkRateSaved) {\n+                    setBlinkRate(savedBlinkRate);\n+                    savedBlinkRate = 0;\n+                    isBlinkRateSaved = false;\n+                }\n+            } else {\n+                if (getBlinkRate() != 0) {\n+                    if (!isBlinkRateSaved) {\n+                        savedBlinkRate = getBlinkRate();\n+                        isBlinkRateSaved = true;\n+                    }\n+                    setBlinkRate(0);\n+                }\n@@ -384,0 +398,1 @@\n+            setVisible(true);\n@@ -1034,0 +1049,3 @@\n+        if (rate < 0) {\n+            throw new IllegalArgumentException(\"Invalid blink rate: \" + rate);\n+        }\n@@ -1035,2 +1053,8 @@\n-            if (flasher == null) {\n-                flasher = new Timer(rate, handler);\n+            if (component.isEditable()) {\n+                if (flasher == null) {\n+                    flasher = new Timer(rate, handler);\n+                }\n+                flasher.setDelay(rate);\n+            } else {\n+                savedBlinkRate = rate;\n+                isBlinkRateSaved = true;\n@@ -1038,1 +1062,0 @@\n-            flasher.setDelay(rate);\n@@ -1045,0 +1068,4 @@\n+            if (component.isEditable() && isBlinkRateSaved) {\n+                savedBlinkRate = 0;\n+                isBlinkRateSaved = false;\n+            }\n@@ -1056,0 +1083,3 @@\n+        if (isBlinkRateSaved) {\n+            return savedBlinkRate;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/DefaultCaret.java","additions":35,"deletions":5,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -717,2 +717,0 @@\n-javax\/swing\/text\/DefaultCaret\/HidingSelection\/HidingSelectionTest.java 8194048 windows-all\n-javax\/swing\/text\/DefaultCaret\/HidingSelection\/MultiSelectionTest.java 8213562 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,10 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextField;\n+import javax.swing.MenuSelectionManager;\n+import javax.swing.SwingUtilities;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -27,1 +35,0 @@\n-import java.awt.image.BufferedImage;\n@@ -42,1 +49,0 @@\n-    private static Rectangle bounds;\n@@ -70,5 +76,0 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            bounds = field2.getBounds();\n-            bounds.setLocation(field2.getLocationOnScreen());\n-        });\n-        BufferedImage nosel = robot.createScreenCapture(bounds);\n@@ -78,3 +79,0 @@\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        BufferedImage sel = robot.createScreenCapture(bounds);\n@@ -92,1 +90,1 @@\n-        if (!biEqual(robot.createScreenCapture(bounds), sel)) {\n+        if (!field2.getCaret().isSelectionVisible()) {\n@@ -101,1 +99,1 @@\n-        if (!biEqual(robot.createScreenCapture(bounds), nosel)) {\n+        if (field2.getCaret().isSelectionVisible()) {\n@@ -122,1 +120,1 @@\n-        if (biEqual(robot.createScreenCapture(bounds), nosel)) {\n+        if (!field2.getCaret().isSelectionVisible()) {\n@@ -127,8 +125,0 @@\n-        SwingUtilities.invokeAndWait(anotherWindow::selectAll);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (biEqual(robot.createScreenCapture(bounds), sel)) {\n-            throw new RuntimeException(\n-                \"Test fails: selection ownership is lost selection is shown\");\n-        }\n-\n@@ -138,15 +128,0 @@\n-\n-    static boolean biEqual(BufferedImage i1, BufferedImage i2) {\n-        if (i1.getWidth() == i2.getWidth() &&\n-                                         i1.getHeight() == i2.getHeight()) {\n-            for (int x = 0; x < i1.getWidth(); x++) {\n-                for (int y = 0; y < i1.getHeight(); y++) {\n-                    if (i1.getRGB(x, y) != i2.getRGB(x, y)) {\n-                        return false;\n-                    }\n-                }\n-            }\n-            return true;\n-        }\n-        return false;\n-    }\n","filename":"test\/jdk\/javax\/swing\/text\/DefaultCaret\/HidingSelection\/HidingSelectionTest.java","additions":14,"deletions":39,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,10 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextField;\n+import javax.swing.MenuSelectionManager;\n+import javax.swing.SwingUtilities;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -27,1 +35,0 @@\n-import java.awt.image.BufferedImage;\n@@ -43,1 +50,0 @@\n-    private static Rectangle bounds;\n@@ -50,17 +56,18 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            frame = new JFrame();\n-            field1 = new JTextField(\"field1                       \");\n-            field2 = new JTextField(\"field2                       \");\n-            field1.setEditable(false);\n-            field2.setEditable(false);\n-            frame.getContentPane().setLayout(new FlowLayout());\n-            frame.getContentPane().add(field1);\n-            frame.getContentPane().add(field2);\n-            JMenuBar menuBar = new JMenuBar();\n-            menu = new JMenu(\"menu\");\n-            menu.add(new JMenuItem(\"item\"));\n-            menuBar.add(menu);\n-            frame.setJMenuBar(menuBar);\n-            frame.pack();\n-            frame.setVisible(true);\n-        });\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                field1 = new JTextField(\"field1                       \");\n+                field2 = new JTextField(\"field2                       \");\n+                field1.setEditable(false);\n+                field2.setEditable(false);\n+                frame.getContentPane().setLayout(new FlowLayout());\n+                frame.getContentPane().add(field1);\n+                frame.getContentPane().add(field2);\n+                JMenuBar menuBar = new JMenuBar();\n+                menu = new JMenu(\"menu\");\n+                menu.add(new JMenuItem(\"item\"));\n+                menuBar.add(menu);\n+                frame.setJMenuBar(menuBar);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n@@ -68,8 +75,3 @@\n-        Robot robot = new Robot();\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        SwingUtilities.invokeAndWait(() -> {\n-            bounds = field2.getBounds();\n-            bounds.setLocation(field2.getLocationOnScreen());\n-        });\n-        BufferedImage nosel = robot.createScreenCapture(bounds);\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(200);\n@@ -77,5 +79,4 @@\n-        SwingUtilities.invokeAndWait(field2::requestFocus);\n-        SwingUtilities.invokeAndWait(field2::selectAll);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        BufferedImage sel = robot.createScreenCapture(bounds);\n+            SwingUtilities.invokeAndWait(field2::requestFocus);\n+            SwingUtilities.invokeAndWait(field2::selectAll);\n+            robot.waitForIdle();\n+            robot.delay(200);\n@@ -83,31 +84,13 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            menuLoc = menu.getLocationOnScreen();\n-            menuLoc.translate(10, 10);\n-        });\n-        robot.mouseMove(menuLoc.x, menuLoc.y);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.delay(50);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (!biEqual(robot.createScreenCapture(bounds), sel)) {\n-            throw new RuntimeException(\"Test fails: menu hides selection\");\n-        }\n-\n-        SwingUtilities.invokeAndWait(\n-                      MenuSelectionManager.defaultManager()::clearSelectedPath);\n-        SwingUtilities.invokeAndWait(field1::requestFocus);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (!biEqual(robot.createScreenCapture(bounds), sel)) {\n-            throw new RuntimeException(\n-                    \"Test fails: focus lost hides single selection\");\n-        }\n-\n-        SwingUtilities.invokeAndWait(field1::selectAll);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (!biEqual(robot.createScreenCapture(bounds), nosel)) {\n-            throw new RuntimeException(\n-                    \"Test fails: focus lost doesn't hide selection upon multi selection\");\n-        }\n+            SwingUtilities.invokeAndWait(() -> {\n+                menuLoc = menu.getLocationOnScreen();\n+                menuLoc.translate(10, 10);\n+            });\n+            robot.mouseMove(menuLoc.x, menuLoc.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(50);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (!field2.getCaret().isSelectionVisible()) {\n+                throw new RuntimeException(\"Test fails: menu hides selection\");\n+            }\n@@ -115,7 +98,9 @@\n-        SwingUtilities.invokeAndWait(field2::requestFocus);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (!biEqual(robot.createScreenCapture(bounds), sel)) {\n-            throw new RuntimeException(\n-                    \"Test fails: focus gain hides selection upon multi selection\");\n-        }\n+            SwingUtilities.invokeAndWait(\n+                    MenuSelectionManager.defaultManager()::clearSelectedPath);\n+            SwingUtilities.invokeAndWait(field1::requestFocus);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (field2.getSelectedText() == null || field2.getSelectedText().length() == 0) {\n+                throw new RuntimeException(\n+                        \"Test fails: focus lost hides single selection\");\n+            }\n@@ -123,20 +108,7 @@\n-        SwingUtilities.invokeAndWait(field2::requestFocus);\n-        robot.waitForIdle();\n-        SwingUtilities.invokeAndWait(() ->{\n-            frame2 = new JFrame();\n-            Point loc = frame.getLocationOnScreen();\n-            loc.translate(0, frame.getHeight());\n-            frame2.setLocation(loc);\n-            anotherWindow = new JTextField(\"textField3\");\n-            frame2.add(anotherWindow);\n-            frame2.pack();\n-            frame2.setVisible(true);\n-        });\n-        robot.waitForIdle();\n-        SwingUtilities.invokeAndWait(anotherWindow::requestFocus);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (biEqual(robot.createScreenCapture(bounds), nosel)) {\n-            throw new RuntimeException(\n-                    \"Test fails: switch window hides selection\");\n-        }\n+            SwingUtilities.invokeAndWait(field1::selectAll);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (field2.getCaret().isSelectionVisible()) {\n+                throw new RuntimeException(\n+                        \"Test fails: focus lost doesn't hide selection upon multi selection\");\n+            }\n@@ -144,7 +116,7 @@\n-        SwingUtilities.invokeAndWait(anotherWindow::selectAll);\n-        robot.waitForIdle();\n-        robot.delay(200);\n-        if (biEqual(robot.createScreenCapture(bounds), sel)) {\n-            throw new RuntimeException(\n-                \"Test fails: selection ownership is lost selection is shown\");\n-        }\n+            SwingUtilities.invokeAndWait(field2::requestFocus);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (!field2.getCaret().isSelectionVisible()) {\n+                throw new RuntimeException(\n+                        \"Test fails: focus gain hides selection upon multi selection\");\n+            }\n@@ -152,3 +124,20 @@\n-        SwingUtilities.invokeLater(frame2::dispose);\n-        SwingUtilities.invokeLater(frame::dispose);\n-    }\n+            SwingUtilities.invokeAndWait(field2::requestFocus);\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame2 = new JFrame();\n+                Point loc = frame.getLocationOnScreen();\n+                loc.translate(0, frame.getHeight());\n+                frame2.setLocation(loc);\n+                anotherWindow = new JTextField(\"textField3\");\n+                frame2.add(anotherWindow);\n+                frame2.pack();\n+                frame2.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(anotherWindow::requestFocus);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (!field2.getCaret().isSelectionVisible()) {\n+                throw new RuntimeException(\n+                        \"Test fails: switch window hides selection\");\n+            }\n@@ -156,9 +145,10 @@\n-    static boolean biEqual(BufferedImage i1, BufferedImage i2) {\n-        if (i1.getWidth() == i2.getWidth() &&\n-                                         i1.getHeight() == i2.getHeight()) {\n-            for (int x = 0; x < i1.getWidth(); x++) {\n-                for (int y = 0; y < i1.getHeight(); y++) {\n-                    if (i1.getRGB(x, y) != i2.getRGB(x, y)) {\n-                        return false;\n-                    }\n-                }\n+            SwingUtilities.invokeAndWait(anotherWindow::selectAll);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (field2.getCaret().isSelectionVisible()) {\n+                throw new RuntimeException(\n+                        \"Test fails: selection ownership is lost selection is shown\");\n+            }\n+        } finally {\n+            if (frame2 != null) {\n+                SwingUtilities.invokeLater(frame2::dispose);\n@@ -166,1 +156,1 @@\n-            return true;\n+            SwingUtilities.invokeLater(frame::dispose);\n@@ -168,1 +158,0 @@\n-        return false;\n","filename":"test\/jdk\/javax\/swing\/text\/DefaultCaret\/HidingSelection\/MultiSelectionTest.java","additions":103,"deletions":114,"binary":false,"changes":217,"status":"modified"}]}