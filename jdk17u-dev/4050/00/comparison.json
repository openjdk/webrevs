{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+        ProductionLimiter.resetTimer();\n@@ -120,10 +121,11 @@\n-            System.out.print(\"[\" + LocalTime.now() + \"] |\");\n-            String name = \"Test_\" + counter;\n-            Pair<IRNode, IRNode> irTree = generateIRTree(name);\n-            System.out.printf(\" %8d |\", counter);\n-            long maxWaitTime = TimeUnit.MINUTES.toMillis(MINUTES_TO_WAIT);\n-            double generationTime = System.currentTimeMillis() - start;\n-            System.out.printf(\" %8.0f |\", generationTime);\n-            start = System.currentTimeMillis();\n-            Thread generatorThread = new Thread(() -> {\n-                for (TestsGenerator generator : generators) {\n+            try {\n+                System.out.print(\"[\" + LocalTime.now() + \"] |\");\n+                String name = \"Test_\" + counter;\n+                Pair<IRNode, IRNode> irTree = generateIRTree(name);\n+                System.out.printf(\" %8d |\", counter);\n+                long maxWaitTime = TimeUnit.MINUTES.toMillis(MINUTES_TO_WAIT);\n+                double generationTime = System.currentTimeMillis() - start;\n+                System.out.printf(\" %8.0f |\", generationTime);\n+                start = System.currentTimeMillis();\n+                Thread generatorThread = new Thread(() -> {\n+                    for (TestsGenerator generator : generators) {\n@@ -131,0 +133,7 @@\n+                    }\n+                });\n+                generatorThread.start();\n+                try {\n+                    generatorThread.join(maxWaitTime);\n+                } catch (InterruptedException ie) {\n+                    throw new Error(\"Test generation interrupted: \" + ie, ie);\n@@ -132,15 +141,9 @@\n-            });\n-            generatorThread.start();\n-            try {\n-                generatorThread.join(maxWaitTime);\n-            } catch (InterruptedException ie) {\n-                throw new Error(\"Test generation interrupted: \" + ie, ie);\n-            }\n-            if (generatorThread.isAlive()) {\n-                \/\/ maxTime reached, so, proceed to next test generation\n-                generatorThread.interrupt();\n-            } else {\n-                double runningTime = System.currentTimeMillis() - start;\n-                System.out.printf(\" %8.0f |%n\", runningTime);\n-                if (runningTime < maxWaitTime) {\n-                    ++counter;\n+                if (generatorThread.isAlive()) {\n+                    \/\/ maxTime reached, so, proceed to next test generation\n+                    generatorThread.interrupt();\n+                } else {\n+                    double runningTime = System.currentTimeMillis() - start;\n+                    System.out.printf(\" %8.0f |%n\", runningTime);\n+                    if (runningTime < maxWaitTime) {\n+                        ++counter;\n+                    }\n@@ -148,0 +151,5 @@\n+            } catch (RuntimeException ignored) {\n+                \/\/ Generation failures happen due to nature of fuzzing test generators,\n+                \/\/ such errors are ignored.\n+                System.out.println(\"Test_\" + counter + \" ignored, generation failed due to \" +\n+                        ignored.getMessage());\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/Automatic.java","additions":34,"deletions":26,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,4 @@\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n@@ -30,0 +34,2 @@\n+    private static Instant limitInstant;\n+\n@@ -47,0 +53,18 @@\n+\n+        if (Instant.now().isAfter(limitInstant)) {\n+            long paramsLimitSeconds = ProductionParams.productionLimitSeconds.value();\n+            Duration elapsed = Duration.between(limitInstant.minusSeconds(paramsLimitSeconds), Instant.now());\n+            String elapsedStr = String.format(\"%d:%02d:%02d\",\n+                    elapsed.toHoursPart(), elapsed.toMinutesPart(), elapsed.toSecondsPart());\n+\n+            Duration timeLimit = Duration.ofSeconds(paramsLimitSeconds);\n+            String timeLimitStr = String.format(\"%d:%02d:%02d\",\n+                            timeLimit.toHoursPart(), timeLimit.toMinutesPart(), timeLimit.toSecondsPart());\n+\n+            throw new RuntimeException(String.format(\"A test generation took %s while limit is %s\",\n+                        elapsedStr, timeLimitStr));\n+        }\n+    }\n+\n+    public static void resetTimer() {\n+        limitInstant = Instant.now().plusSeconds(ProductionParams.productionLimitSeconds.value());\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/ProductionLimiter.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    public static Option<Integer> productionLimitSeconds = null;\n@@ -84,0 +85,1 @@\n+        productionLimitSeconds = optionResolver.addIntegerOption(\"production-limit-seconds\", 600, \"Limit the time a test generation may take\");\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/ProductionParams.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}