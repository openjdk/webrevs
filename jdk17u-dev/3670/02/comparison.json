{"files":[{"patch":"@@ -211,0 +211,5 @@\n+        @Override\n+        protected void onSubscribed() {\n+            exchange.registerResponseSubscriber(this);\n+        }\n+\n@@ -462,1 +467,0 @@\n-        registerResponseSubscriber(bs);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -349,1 +349,0 @@\n-        registerResponseSubscriber(subscriber);\n@@ -1661,0 +1660,5 @@\n+        @Override\n+        protected void onSubscribed() {\n+            registerResponseSubscriber(this);\n+        }\n+\n@@ -1664,1 +1668,1 @@\n-                Stream.this.unregisterResponseSubscriber(this);\n+                unregisterResponseSubscriber(this);\n@@ -1671,1 +1675,1 @@\n-            Stream.this.unregisterResponseSubscriber(this);\n+            unregisterResponseSubscriber(this);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.concurrent.CompletableFuture;\n@@ -38,0 +39,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -65,0 +67,1 @@\n+    final ReentrantLock subscriptionLock = new ReentrantLock();\n@@ -103,0 +106,1 @@\n+        assert completed.get();\n@@ -109,1 +113,2 @@\n-            synchronized (this) {\n+            subscriptionLock.lock();\n+            try {\n@@ -113,0 +118,2 @@\n+            } finally {\n+                subscriptionLock.unlock();\n@@ -130,0 +137,9 @@\n+    \/**\n+     * Called right before the userSubscriber::onSubscribe is called.\n+     * @apiNote\n+     * This method may be used by subclasses to perform cleanup\n+     * related actions after a subscription has been succesfully\n+     * accepted.\n+     *\/\n+    protected void onSubscribed() { }\n+\n@@ -172,1 +188,2 @@\n-        synchronized (this) {\n+        subscriptionLock.lock();\n+        try {\n@@ -174,0 +191,1 @@\n+                onSubscribed();\n@@ -177,5 +195,1 @@\n-                \/\/ could be already subscribed and completed\n-                \/\/ if an unexpected error occurred before the actual\n-                \/\/ subscription - though that's not supposed\n-                \/\/ happen.\n-                assert completed.get();\n+                subscription.cancel();\n@@ -183,0 +197,2 @@\n+        } finally {\n+            subscriptionLock.unlock();\n@@ -188,0 +204,1 @@\n+        assert subscribed.get();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/HttpBodySubscriberWrapper.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8245462 8229822 8254786\n+ * @bug 8245462 8229822 8254786 8297075 8297149\n","filename":"test\/jdk\/java\/net\/httpclient\/CancelRequestTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8294916\n+ * @bug 8294916 8297075 8297149\n","filename":"test\/jdk\/java\/net\/httpclient\/CancelStreamedBodyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}