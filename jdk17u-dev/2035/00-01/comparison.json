{"files":[{"patch":"@@ -66,21 +66,0 @@\n-  \/\/ This code is used by And nodes too, but some conversions are\n-  \/\/ only valid for the actual Mul nodes.\n-  uint op = Opcode();\n-  bool real_mul = (op == Op_MulI) || (op == Op_MulL) ||\n-                  (op == Op_MulF) || (op == Op_MulD);\n-\n-  \/\/ Convert \"(-a)*(-b)\" into \"a*b\".\n-  if (real_mul && in1->is_Sub() && in2->is_Sub()) {\n-    if (phase->type(in1->in(1))->is_zero_type() &&\n-        phase->type(in2->in(1))->is_zero_type()) {\n-      set_req(1, in1->in(2));\n-      set_req(2, in2->in(2));\n-      PhaseIterGVN* igvn = phase->is_IterGVN();\n-      if (igvn) {\n-        igvn->_worklist.push(in1);\n-        igvn->_worklist.push(in2);\n-      }\n-      progress = this;\n-    }\n-  }\n-\n@@ -131,0 +110,1 @@\n+  uint op = Opcode();\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-                if (name.compareTo(ACCESSIBLE_CARET_PROPERTY) == 0) {\n+                if (name.equals(ACCESSIBLE_CARET_PROPERTY)) {\n@@ -122,1 +122,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_TEXT_PROPERTY) == 0) {\n+                } else if (name.equals(ACCESSIBLE_TEXT_PROPERTY)) {\n@@ -124,1 +124,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_SELECTION_PROPERTY) == 0) {\n+                } else if (name.equals(ACCESSIBLE_SELECTION_PROPERTY)) {\n@@ -126,1 +126,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_TABLE_MODEL_CHANGED) == 0) {\n+                } else if (name.equals(ACCESSIBLE_TABLE_MODEL_CHANGED)) {\n@@ -135,1 +135,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY) == 0 ) {\n+                } else if (name.equals(ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY)) {\n@@ -152,1 +152,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_STATE_PROPERTY) == 0) {\n+                } else if (name.equals(ACCESSIBLE_STATE_PROPERTY)) {\n@@ -187,1 +187,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_NAME_PROPERTY) == 0) {\n+                } else if (name.equals(ACCESSIBLE_NAME_PROPERTY)) {\n@@ -192,1 +192,1 @@\n-                } else if (name.compareTo(ACCESSIBLE_VALUE_PROPERTY) == 0) {\n+                } else if (name.equals(ACCESSIBLE_VALUE_PROPERTY)) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessible.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2950,1 +2950,1 @@\n-            if (name.compareTo(\"model\") == 0) {\n+            if (name.equals(\"model\")) {\n@@ -2960,1 +2960,1 @@\n-            } else if (name.compareTo(\"selectionModel\") == 0) {\n+            } else if (name.equals(\"selectionModel\")) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6774,1 +6774,1 @@\n-            if (name.compareTo(\"model\") == 0) {\n+            if (name.equals(\"model\")) {\n@@ -6784,1 +6784,1 @@\n-            } else if (name.compareTo(\"selectionModel\") == 0) {\n+            } else if (name.equals(\"selectionModel\")) {\n@@ -6815,1 +6815,1 @@\n-            } else if (name.compareTo(\"columnModel\") == 0) {\n+            } else if (name.equals(\"columnModel\")) {\n@@ -6829,1 +6829,1 @@\n-            } else if (name.compareTo(\"tableCellEditor\") == 0) {\n+            } else if (name.equals(\"tableCellEditor\")) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @key randomness\n- * @bug 8274060\n- * @summary Test broken transformation (-a) & (-b) = a & b does not happen\n- *\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=\"dontinline,TestNegAnd::test*\" TestNegAnd\n- *\n- *\/\n-\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.Asserts;\n-\n-public class TestNegAnd {\n-    private static final Random random = Utils.getRandomInstance();\n-    \/\/ Enough cycles to ensure test methods are JIT-ed\n-    private static final int TEST_COUNT = 20_000;\n-\n-    private static int testInt(int a, int b) {\n-        return (-a) & (-b);\n-    }\n-    private static long testLong(long a, long b) {\n-        return (-a) & (-b);\n-    }\n-\n-    private static void runIntTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            int a = random.nextInt();\n-            int b = random.nextInt();\n-            int expected = (-a) & (-b);\n-            int res = testInt(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    private static void runLongTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            long a = random.nextLong();\n-            long b = random.nextLong();\n-            long expected = (-a) & (-b);\n-            long res = testLong(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        runIntTests();\n-        runLongTests();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestNegAnd.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @key randomness\n- * @bug 8273454\n- * @summary Test transformation (-a)*(-b) = a*b\n- *\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=\"dontinline,TestNegMultiply::test*\" TestNegMultiply\n- *\n- *\/\n-\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.Asserts;\n-\n-public class TestNegMultiply {\n-    private static final Random random = Utils.getRandomInstance();\n-    \/\/ Enough cycles to ensure test methods are JIT-ed\n-    private static final int TEST_COUNT = 20_000;\n-\n-    private static int testInt(int a, int b) {\n-        return (-a) * (-b);\n-    }\n-    private static long testLong(long a, long b) {\n-        return (-a) * (-b);\n-    }\n-    private static float testFloat(float a, float b) {\n-        return (-a) * (-b);\n-    }\n-    private static double testDouble(double a, double b) {\n-        return (-a) * (-b);\n-    }\n-\n-    private static void runIntTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            int a = random.nextInt();\n-            int b = random.nextInt();\n-            int expected = (-a) * (-b);\n-            int res = testInt(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    private static void runLongTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            long a = random.nextLong();\n-            long b = random.nextLong();\n-            long expected = (-a) * (-b);\n-            long res = testLong(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    private static void runFloatTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            float a = random.nextFloat();\n-            float b = random.nextFloat();\n-            float expected = (-a) * (-b);\n-            float res = testFloat(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    private static void runDoubleTests() {\n-        for (int index = 0; index < TEST_COUNT; index ++) {\n-            double a = random.nextDouble();\n-            double b = random.nextDouble();\n-            double expected = (-a) * (-b);\n-            double res = testDouble(a, b);\n-            Asserts.assertEQ(res, expected);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        runIntTests();\n-        runLongTests();\n-        runFloatTests();\n-        runDoubleTests();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestNegMultiply.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"}]}