{"files":[{"patch":"@@ -1,39 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-\/\/IETF\/\/DTD HTML\/\/EN\">\n-<!--\n-  Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n-  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-  This code is free software; you can redistribute it and\/or modify it\n-  under the terms of the GNU General Public License version 2 only, as\n-  published by the Free Software Foundation.\n-\n-  This code is distributed in the hope that it will be useful, but WITHOUT\n-  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-  version 2 for more details (a copy is included in the LICENSE file that\n-  accompanied this code).\n-\n-  You should have received a copy of the GNU General Public License version\n-  2 along with this work; if not, write to the Free Software Foundation,\n-  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-  or visit www.oracle.com if you need additional information or have any\n-  questions.\n--->\n-<html>\n-  <head>\n-    <title>CopyAreaSpeed<\/title>\n-  <\/head>\n-\n-  <body>\n-      <h1>CopyAreaSpeed<\/h1>\n-      <hr>\n-      <address><a href=\"mailto:thanh@eng.sun.com\">Thanh Nguyen<\/a><\/address>\n-<!-- Created: Mon Jan 11 16:13:29 PST 1999 -->\n-<!-- hhmts start -->\n-Last modified: Tue Jan 19 16:18:37 PST 1999\n-<!-- hhmts end -->\n-      <APPLET CODE=\"CopyAreaSpeed.class\" WIDTH=200 HEIGHT=300><\/APPLET>\n-  <\/body>\n-<\/html>\n","filename":"test\/jdk\/sun\/java2d\/loops\/CopyAreaSpeed.html","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,11 @@\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import javax.swing.JFrame;\n+import javax.swing.JOptionPane;\n+\n+import java.util.Date;\n+\n@@ -30,1 +41,3 @@\n- * @run applet\/manual=done CopyAreaSpeed.html\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CopyAreaSpeed\n@@ -33,7 +46,18 @@\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.*;\n-\n-public class CopyAreaSpeed extends Applet implements Runnable {\n-    int top = 0;\n+public class CopyAreaSpeed {\n+    public static void main(String args[]) throws Exception {\n+        String instructions = \"\"\"\n+                    This test prints out the time it takes for a certain amount\n+                    of copyArea calls to be completed. Because the performance\n+                    measurement is relative, this code only provides a benchmark\n+                    to run with different releases to compare the outcomes.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .rows(5)\n+                .columns(35)\n+                .testUI(CopyAreaSpeed::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -41,1 +65,6 @@\n-    public void init() {\n+    public static JFrame initialize() {\n+        JFrame frame = new JFrame(\"Copy Area Test\");\n+        frame.add(new CopyAreaSpeedTest());\n+        frame.setSize(300, 320);\n+        frame.setVisible(true);\n+        return frame;\n@@ -43,0 +72,5 @@\n+}\n+\n+class CopyAreaSpeedTest extends Container implements Runnable {\n+    int top = 0;\n+    public static String result;\n@@ -44,2 +78,1 @@\n-    public CopyAreaSpeed()\n-    {\n+    public CopyAreaSpeedTest() {\n@@ -47,8 +80,0 @@\n-        String[] instructions =\n-        {\n-            \"This test prints out the time it takes for a certain amount \",\n-            \"of copyArea calls to be completed. Because the performance \",\n-            \"measurement is relative, this code only provides a benchmark \",\n-            \"to run with different releases to compare the outcomes.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n@@ -56,4 +81,0 @@\n-        Button bt = new Button(\"Hello\");\n-        bt.setBounds(50, 10, 50, 22);\n-        bt.setVisible(false);\n-        add(bt);\n@@ -62,2 +83,1 @@\n-    public void update(Graphics g)\n-    {\n+    public void update(Graphics g) {\n@@ -67,3 +87,2 @@\n-    public void paint(Graphics g)\n-    {\n-        synchronized(this) {\n+    public void paint(Graphics g) {\n+        synchronized (this) {\n@@ -81,2 +100,2 @@\n-                }               \/* endif *\/\n-            }                   \/\/ endfor\n+                }\n+            }\n@@ -89,1 +108,1 @@\n-        return te-ts;\n+        return te - ts;\n@@ -92,2 +111,1 @@\n-    public void run()\n-    {\n+    public void run() {\n@@ -103,1 +121,1 @@\n-                synchronized(this) {\n+                synchronized (this) {\n@@ -114,1 +132,1 @@\n-            } catch(Exception ex) {\n+            } catch (Exception ex) {\n@@ -119,13 +137,5 @@\n-        Sysout.println(\"copyArea X \"+loops+\" = \"+ millsec(start, end) + \" msec\");\n-    }\n-\n-    public static void main(String args[]) {\n-        Frame frm = new Frame(\"CopyAreaSpeed\");\n-        frm.add(new CopyAreaSpeed());\n-        frm.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent ev) {\n-                System.exit(0);\n-            }\n-        });\n-        frm.setSize(500, 500);\n-        frm.show();\n+        Graphics g = getGraphics();\n+        g.setFont(getFont());\n+        g.setColor(Color.black);\n+        result = \"copyArea X \" + loops + \" = \" + millsec(start, end) + \" msec\";\n+        JOptionPane.showMessageDialog(null, result);\n@@ -134,135 +144,0 @@\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.show();\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.show();\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"South\", messageText);\n-\n-        pack();\n-\n-        show();\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                   int posOfSpace = remainingStr.\n-                   lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                   if( posOfSpace <= 0 ) {\n-                       posOfSpace = maxStringLength - 1;\n-                   }\n-\n-                   printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                   remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                else \/\/else just print\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/sun\/java2d\/loops\/CopyAreaSpeed.java","additions":59,"deletions":184,"binary":false,"changes":243,"status":"modified"}]}