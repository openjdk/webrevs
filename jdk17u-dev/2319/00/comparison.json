{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-            channel.connect();\n+            channel.connect(launcher.getJdwpPort());\n","filename":"test\/hotspot\/jtreg\/serviceability\/jdwp\/AllModulesCommandTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-import java.io.IOException;\n-import java.net.ServerSocket;\n@@ -28,1 +26,1 @@\n-import jdk.test.lib.Utils;\n+import jdk.test.lib.JDWP;\n@@ -58,1 +56,1 @@\n-    private static int jdwpPort = -1;\n+    private int jdwpPort = -1;\n@@ -120,1 +118,1 @@\n-        return \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=\" + getJdwpPort();\n+        return \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0\";\n@@ -124,1 +122,1 @@\n-     * Find an available port for the JDWP session\n+     * Gets JDWP port debuggee is listening on.\n@@ -128,5 +126,2 @@\n-    public static int getJdwpPort() {\n-        if (jdwpPort == -1) {\n-            jdwpPort = findFreePort();\n-            assertFalse(jdwpPort == -1, \"Can not find vailbale port for JDWP\");\n-        }\n+    public int getJdwpPort() {\n+        assertFalse(jdwpPort == -1, \"JDWP port is not detected\");\n@@ -136,8 +131,0 @@\n-    private static int findFreePort() {\n-        try (ServerSocket socket = new ServerSocket(0)) {\n-            return socket.getLocalPort();\n-        } catch (IOException e) {\n-        }\n-        return -1;\n-    }\n-\n@@ -155,0 +142,6 @@\n+        if (jdwpPort == -1) {\n+            JDWP.ListenAddress addr = JDWP.parseListenAddress(line);\n+            if (addr != null) {\n+                jdwpPort = Integer.parseInt(addr.address());\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/serviceability\/jdwp\/DebuggeeLauncher.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n-    public void connect() throws IOException {\n-        sock = new Socket(\"localhost\", DebuggeeLauncher.getJdwpPort());\n+    public void connect(int jdwpPort) throws IOException {\n+        sock = new Socket(\"localhost\", jdwpPort);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jdwp\/JdwpChannel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.JDWP;\n@@ -40,1 +41,0 @@\n-import java.util.ArrayList;\n@@ -45,2 +45,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -79,1 +77,0 @@\n-    private static Pattern listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(\\\\d+)\\\\b\");\n@@ -85,4 +82,3 @@\n-            Matcher m = listenRegexp.matcher(s);\n-            if (m.find()) {\n-                \/\/ m.group(1) is transport, m.group(2) is port\n-                return Integer.parseInt(m.group(2));\n+            JDWP.ListenAddress addr = JDWP.parseListenAddress(s);\n+            if (addr != null) {\n+                return Integer.parseInt(addr.address());\n","filename":"test\/jdk\/com\/sun\/jdi\/JdwpAllowTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -46,0 +44,2 @@\n+\n+import jdk.test.lib.JDWP;\n@@ -98,3 +98,0 @@\n-    \/* warm-up predicate for debuggee *\/\n-    private static Pattern listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(.+)\\\\b\");\n-\n@@ -102,2 +99,2 @@\n-        Matcher m = listenRegexp.matcher(line);\n-        if (!m.matches()) {\n+        JDWP.ListenAddress addr = JDWP.parseListenAddress(line);\n+        if (addr == null) {\n@@ -106,2 +103,1 @@\n-        \/\/ address is 2nd group\n-        address = m.group(2);\n+        address = addr.address();\n","filename":"test\/jdk\/com\/sun\/jdi\/RunToExit.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.JDWP;\n@@ -27,1 +28,0 @@\n-import jdk.test.lib.util.Pair;\n@@ -131,1 +131,1 @@\n-                    Launcher::parseListenAddress :\n+                    JDWP::parseListenAddress :\n@@ -143,1 +143,1 @@\n-        private static Pair<String, String> parseLaunchEchoListenAddress(String debuggeeOutput) {\n+        private static JDWP.ListenAddress parseLaunchEchoListenAddress(String debuggeeOutput) {\n@@ -147,14 +147,1 @@\n-                return new Pair<String, String>(m.group(1), m.group(2));\n-            }\n-            return null;\n-        }\n-\n-        \/**\n-         * Parses debuggee output to get listening transport and address, printed by `launch=echo`.\n-         * Returns null if the string specified does not contain required info.\n-         *\/\n-        private static Pair<String, String> parseListenAddress(String debuggeeOutput) {\n-            Pattern listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(.+)\\\\b\");\n-            Matcher m = listenRegexp.matcher(debuggeeOutput);\n-            if (m.find()) {\n-                return new Pair<String, String>(m.group(1), m.group(2));\n+                return new JDWP.ListenAddress(m.group(1), m.group(2));\n@@ -167,2 +154,2 @@\n-    private Debuggee(ProcessBuilder pb, String name, Function<String, Pair<String, String>> addressDetector) {\n-        String[] debuggeeListen = new String[2];\n+    private Debuggee(ProcessBuilder pb, String name, Function<String, JDWP.ListenAddress> addressDetector) {\n+        JDWP.ListenAddress[] listenAddress = new JDWP.ListenAddress[1];\n@@ -173,7 +160,2 @@\n-                        Pair<String, String> addr = addressDetector.apply(s);\n-                        if (addr != null) {\n-                            debuggeeListen[0] = addr.first;\n-                            debuggeeListen[1] = addr.second;\n-                            return true;\n-                        }\n-                        return false;\n+                        listenAddress[0] = addressDetector.apply(s);\n+                        return listenAddress[0] != null;\n@@ -182,2 +164,2 @@\n-            transport = debuggeeListen[0];\n-            address = debuggeeListen[1];\n+            transport = listenAddress[0].transport();\n+            address = listenAddress[0].address();\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":10,"deletions":28,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class JDWP {\n+\n+    public record ListenAddress(String transport, String address) {\n+    }\n+\n+    \/\/ lazy initialized\n+    private static Pattern listenRegexp;\n+\n+    \/**\n+     * Parses debuggee output to get listening transport and address.\n+     * Returns null if the string specified does not contain required info.\n+     *\/\n+    public static ListenAddress parseListenAddress(String debuggeeOutput) {\n+        if (listenRegexp == null) {\n+            listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(.+)\\\\b\");\n+        }\n+        Matcher m = listenRegexp.matcher(debuggeeOutput);\n+        if (m.find()) {\n+            return new ListenAddress(m.group(1), m.group(2));\n+        }\n+        return null;\n+    }\n+\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/JDWP.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}