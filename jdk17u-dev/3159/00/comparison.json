{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n@@ -31,1 +32,1 @@\n- * @run main\/othervm CreationTime\n+ * @run main\/othervm\/native CreationTime\n@@ -40,1 +41,1 @@\n- * @run main\/native CreationTime .\n+ * @run main\/othervm\/native CreationTime .\n@@ -54,2 +55,0 @@\n-    private static final java.io.PrintStream err = System.err;\n-\n@@ -81,8 +80,3 @@\n-            System.out.println(\"creationTime.toMillis() == \" + creationTime.toMillis());\n-            \/\/ If the file system doesn't support birth time, then skip this test\n-            if (creationTime.toMillis() == 0) {\n-                throw new SkippedException(\"birth time not support for: \" + file);\n-            } else {\n-                err.println(\"File creation time reported as: \" + creationTime);\n-                throw new RuntimeException(\"Expected to be close to: \" + now);\n-            }\n+            System.err.println(\"creationTime.toMillis() == \" + creationTime.toMillis());\n+            System.err.println(\"File creation time reported as: \" + creationTime);\n+            throw new RuntimeException(\"Expected to be close to: \" + now);\n@@ -107,1 +101,6 @@\n-            supportsCreationTimeRead = CreationTimeHelper.linuxIsCreationTimeSupported();\n+            try {\n+                supportsCreationTimeRead = CreationTimeHelper.\n+                        linuxIsCreationTimeSupported(file.toAbsolutePath().toString());\n+            } catch (Throwable e) {\n+                supportsCreationTimeRead = false;\n+            }\n@@ -122,1 +121,3 @@\n-            if (!current.equals(creationTime))\n+            if (!current.equals(creationTime)) {\n+                System.err.println(\"current = \" + current);\n+                System.err.println(\"creationTime = \" + creationTime);\n@@ -124,0 +125,1 @@\n+            }\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n@@ -23,0 +24,1 @@\n+\n@@ -30,1 +32,1 @@\n-    static native boolean linuxIsCreationTimeSupported();\n+    static native boolean linuxIsCreationTimeSupported(String file);\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTimeHelper.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n@@ -24,0 +25,1 @@\n+#include <stdbool.h>\n@@ -25,0 +27,4 @@\n+#include <stdio.h>\n+#include <string.h>\n+#include <sys\/types.h>\n+#include <sys\/stat.h>\n@@ -26,0 +32,21 @@\n+#ifndef STATX_BASIC_STATS\n+#define STATX_BASIC_STATS 0x000007ffU\n+#endif\n+#ifndef STATX_BTIME\n+#define STATX_BTIME 0x00000800U\n+#endif\n+#ifndef RTLD_DEFAULT\n+#define RTLD_DEFAULT RTLD_LOCAL\n+#endif\n+#ifndef AT_SYMLINK_NOFOLLOW\n+#define AT_SYMLINK_NOFOLLOW 0x100\n+#endif\n+#ifndef AT_FDCWD\n+#define AT_FDCWD -100\n+#endif\n+\n+#ifndef __GLIBC__\n+\/\/ Alpine doesn't know these types, define them\n+typedef unsigned int       __uint32_t;\n+typedef unsigned short     __uint16_t;\n+typedef unsigned long int  __uint64_t;\n@@ -28,0 +55,44 @@\n+\/*\n+ * Timestamp structure for the timestamps in struct statx.\n+ *\/\n+struct my_statx_timestamp {\n+        int64_t   tv_sec;\n+        __uint32_t  tv_nsec;\n+        int32_t   __reserved;\n+};\n+\n+\/*\n+ * struct statx used by statx system call on >= glibc 2.28\n+ * systems\n+ *\/\n+struct my_statx\n+{\n+  __uint32_t stx_mask;\n+  __uint32_t stx_blksize;\n+  __uint64_t stx_attributes;\n+  __uint32_t stx_nlink;\n+  __uint32_t stx_uid;\n+  __uint32_t stx_gid;\n+  __uint16_t stx_mode;\n+  __uint16_t __statx_pad1[1];\n+  __uint64_t stx_ino;\n+  __uint64_t stx_size;\n+  __uint64_t stx_blocks;\n+  __uint64_t stx_attributes_mask;\n+  struct my_statx_timestamp stx_atime;\n+  struct my_statx_timestamp stx_btime;\n+  struct my_statx_timestamp stx_ctime;\n+  struct my_statx_timestamp stx_mtime;\n+  __uint32_t stx_rdev_major;\n+  __uint32_t stx_rdev_minor;\n+  __uint32_t stx_dev_major;\n+  __uint32_t stx_dev_minor;\n+  __uint64_t __statx_pad2[14];\n+};\n+\n+typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n+                       unsigned int mask, struct my_statx *restrict statxbuf);\n+\n+static statx_func* my_statx_func = NULL;\n+#endif  \/\/#defined(__linux__)\n+\n@@ -30,2 +101,1 @@\n-Java_CreationTimeHelper_linuxIsCreationTimeSupported(JNIEnv *env, jclass cls)\n-{\n+Java_CreationTimeHelper_linuxIsCreationTimeSupported(JNIEnv *env, jclass cls, jstring file) {\n@@ -33,2 +103,36 @@\n-    void* statx_func = dlsym(RTLD_DEFAULT, \"statx\");\n-    return statx_func != NULL ? JNI_TRUE : JNI_FALSE;\n+    struct my_statx stx = {0};\n+    int ret, atflag = AT_SYMLINK_NOFOLLOW;\n+    unsigned int mask = STATX_BASIC_STATS | STATX_BTIME;\n+\n+    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n+    if (my_statx_func == NULL) {\n+        return false;\n+    }\n+\n+    if (file == NULL) {\n+        printf(\"input file error!\\n\");\n+        return JNI_FALSE;\n+    }\n+    const char *utfChars = (*env)->GetStringUTFChars(env, file, NULL);\n+    if (utfChars == NULL) {\n+        printf(\"jstring convert to char array error!\\n\");\n+        return JNI_FALSE;\n+    }\n+\n+    ret = my_statx_func(AT_FDCWD, utfChars, atflag, mask, &stx);\n+\n+    if (file != NULL && utfChars != NULL) {\n+        (*env)->ReleaseStringUTFChars(env, file, utfChars);\n+    }\n+\n+    if (ret != 0) {\n+        return JNI_FALSE;\n+    }\n+\n+    \/\/ On some systems where statx is available but birth time might still not\n+    \/\/ be supported as it's file system specific. The only reliable way to\n+    \/\/ check for supported or not is looking at the filled in STATX_BTIME bit\n+    \/\/ in the returned statx buffer mask.\n+    if ((stx.stx_mask & STATX_BTIME) != 0)\n+        return JNI_TRUE;\n+    return JNI_FALSE;\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/libCreationTimeHelper.c","additions":108,"deletions":4,"binary":false,"changes":112,"status":"modified"}]}