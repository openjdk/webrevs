{"files":[{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.security.Security;\n+import java.util.List;\n+\n+\/*\n+ * @test id=Server\n+ * @bug 8301379\n+ * @summary Verify that Java will not negotiate disabled cipher suites when the\n+ * other side of the connection requests them.\n+ *\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server true\n+ *\/\n+\n+\/*\n+ * @test id=Client\n+ * @bug 8301379\n+ * @summary Verify that Java will not negotiate disabled cipher suites when the\n+ * other side of the connection requests them.\n+ *\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm TLSWontNegotiateDisabledCipherAlgos server false\n+ *\/\n+\n+\n+public class TLSWontNegotiateDisabledCipherAlgos {\n+\n+    public static void main(String [] args) throws Exception {\n+        boolean useDisabledAlgo = Boolean.parseBoolean(args[1]);\n+        if (useDisabledAlgo) {\n+            Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+        }\n+\n+        if (args[0].equals(\"server\")) {\n+            try (TLSServer server = new TLSServer(useDisabledAlgo)) {\n+                List<String> command = List.of(\n+                        Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+                        \"TLSWontNegotiateDisabledCipherAlgos\",\n+                        \"client\",\n+                        Boolean.toString(!useDisabledAlgo),\n+                        Integer.toString(server.getListeningPort())\n+                );\n+                ProcessBuilder builder = new ProcessBuilder(command);\n+                Process p = builder.inheritIO().start();\n+                server.run();\n+                p.destroy();\n+            }\n+        } else if (args[0].equals(\"client\")) {\n+            try (TLSClient client = new TLSClient(Integer.parseInt(args[2]), useDisabledAlgo)) {\n+                client.run();\n+            }\n+        }\n+    }\n+\n+    private static class TLSClient extends SSLContextTemplate implements AutoCloseable {\n+        private final SSLSocket socket;\n+\n+        public TLSClient(int portNumber, boolean useDisableAlgo) throws Exception {\n+            SSLContext context = createClientSSLContext();\n+            socket = (SSLSocket)context.getSocketFactory().createSocket(\"localhost\", portNumber);\n+            if (useDisableAlgo) {\n+                socket.setEnabledCipherSuites(DisabledAlgorithms.DISABLED_CIPHERSUITES);\n+            }\n+        }\n+\n+        public void run() throws IOException {\n+            try {\n+                socket.getOutputStream().write(\"SECRET MESSAGE\".getBytes(StandardCharsets.UTF_8));\n+                throw new RuntimeException(\"SSL handshake completed successfully.\");\n+            } catch (SSLHandshakeException exc) {\n+                if (!exc.getMessage().equals(\"Received fatal alert: handshake_failure\")) {\n+                    throw new RuntimeException(\"Expected handshake_failure message. Got: \"\n+                            + \"\\\"\" + exc.getMessage() + \"\\\" message.\", exc);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            socket.close();\n+        }\n+    }\n+\n+    private static class TLSServer extends SSLContextTemplate implements AutoCloseable {\n+        private SSLServerSocket serverSocket;\n+\n+        public TLSServer(boolean useDisableAlgo) throws Exception {\n+            SSLContext ctx = createServerSSLContext();\n+            serverSocket = (SSLServerSocket) ctx.getServerSocketFactory().createServerSocket(0);\n+            if (useDisableAlgo) {\n+                serverSocket.setEnabledCipherSuites(DisabledAlgorithms.DISABLED_CIPHERSUITES);\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            serverSocket.close();\n+        }\n+\n+        public int getListeningPort() {\n+            return serverSocket.getLocalPort();\n+        }\n+\n+        public void run() throws IOException {\n+            try (Socket clientSocket = serverSocket.accept()) {\n+                try {\n+                    byte[] bytes = clientSocket.getInputStream().readAllBytes();\n+                    throw new RuntimeException(\"The expected SSLHandshakeException was not thrown.\");\n+                } catch (SSLHandshakeException exc) {\n+                    if (!exc.getMessage().contains(\"no cipher suites in common\")) {\n+                        throw exc;\n+                    } else {\n+                        System.out.println(\"Success: The connection could not be negotiated (as expected.)\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/ciphersuites\/TLSWontNegotiateDisabledCipherAlgos.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}