{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -38,1 +39,0 @@\n-import java.security.NoSuchAlgorithmException;\n@@ -48,0 +48,9 @@\n+\/*\n+ * This test verifies that setEnabledProtocols() does not override the\n+ * jdk.tls.disabledAlgorithms property. Both the client and server throw\n+ * an exception when creating a handshake context.\n+ *\n+ * In the TLSWontNegotiateDisabledCipherAlgoos test, one side of the connection\n+ * disables the cipher suites and the other side enables them and verifies\n+ * that the handshake cannot complete successfully.\n+ *\/\n@@ -50,12 +59,7 @@\n-    private static final String pathToStores = \"..\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n-    private static final String passwd = \"passphrase\";\n-\n-    private static final String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-\n-    private static final String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    public static final SSLContextTemplate.Cert[] CERTIFICATES = {\n+            SSLContextTemplate.Cert.EE_DSA_SHA1_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA224_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA256_1024,\n+            SSLContextTemplate.Cert.CA_ECDSA_SECP256R1,\n+            SSLContextTemplate.Cert.CA_RSA_2048\n+    };\n@@ -64,46 +68,46 @@\n-    private static final String[] disabled_ciphersuites\n-        = new String[] {\n-        \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n-        \"SSL_RSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n-        \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n-        \"SSL_RSA_WITH_RC4_128_MD5\",\n-        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-        \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-        \"SSL_RSA_WITH_NULL_MD5\",\n-        \"SSL_RSA_WITH_NULL_SHA\",\n-        \"TLS_RSA_WITH_NULL_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n-        \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n-        \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n-        \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n-        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-        \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n-        \"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n-        \"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n-        \"SSL_DH_anon_WITH_DES_CBC_SHA\",\n-        \"SSL_DH_anon_WITH_RC4_128_MD5\",\n-        \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n-        \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n-        \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n-        \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n-        \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_anon_WITH_NULL_SHA\",\n-        \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n-        \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n-        \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\"\n+    public static final String[] DISABLED_CIPHERSUITES\n+            = new String[]{\n+            \"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDHE_RSA_WITH_RC4_128_SHA\",\n+            \"SSL_RSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_RC4_128_SHA\",\n+            \"TLS_ECDH_RSA_WITH_RC4_128_SHA\",\n+            \"SSL_RSA_WITH_RC4_128_MD5\",\n+            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n+            \"SSL_RSA_WITH_NULL_MD5\",\n+            \"SSL_RSA_WITH_NULL_SHA\",\n+            \"TLS_RSA_WITH_NULL_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_NULL_SHA\",\n+            \"TLS_ECDHE_ECDSA_WITH_NULL_SHA\",\n+            \"TLS_ECDH_RSA_WITH_NULL_SHA\",\n+            \"TLS_ECDHE_RSA_WITH_NULL_SHA\",\n+            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+            \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\",\n+            \"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5\",\n+            \"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA\",\n+            \"SSL_DH_anon_WITH_DES_CBC_SHA\",\n+            \"SSL_DH_anon_WITH_RC4_128_MD5\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_256_CBC_SHA\",\n+            \"TLS_DH_anon_WITH_AES_256_CBC_SHA256\",\n+            \"TLS_DH_anon_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_NULL_SHA\",\n+            \"TLS_ECDH_anon_WITH_RC4_128_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\"\n@@ -117,5 +121,0 @@\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n@@ -129,1 +128,1 @@\n-                checkFailure(disabled_ciphersuites);\n+                checkFailure(DISABLED_CIPHERSUITES);\n@@ -139,1 +138,1 @@\n-                checkSuccess(disabled_ciphersuites);\n+                checkSuccess(DISABLED_CIPHERSUITES);\n@@ -152,1 +151,1 @@\n-        try (SSLServer server = SSLServer.init(ciphersuites)) {\n+        try (SSLServer server = new SSLServer(ciphersuites)) {\n@@ -160,1 +159,1 @@\n-                try (SSLClient client = SSLClient.init(port, ciphersuite)) {\n+                try (SSLClient client = new SSLClient(port, ciphersuite)) {\n@@ -187,1 +186,1 @@\n-        try (SSLServer server = SSLServer.init(ciphersuites)) {\n+        try (SSLServer server = new SSLServer(ciphersuites)) {\n@@ -195,1 +194,1 @@\n-                try (SSLClient client = SSLClient.init(port, ciphersuite)) {\n+                try (SSLClient client = new SSLClient(port, ciphersuite)) {\n@@ -234,1 +233,2 @@\n-    static class SSLServer implements Runnable, AutoCloseable {\n+    static class SSLServer extends SSLContextTemplate implements Runnable, AutoCloseable {\n+\n@@ -242,1 +242,13 @@\n-        private SSLServer(SSLServerSocket ssocket) {\n+        private SSLServer(String[] ciphersuites) throws Exception {\n+            SSLContext context = createSSLContext(null,\n+                    DisabledAlgorithms.CERTIFICATES, getServerContextParameters());\n+            SSLServerSocketFactory ssf = context.getServerSocketFactory();\n+            SSLServerSocket ssocket = (SSLServerSocket)\n+                    ssf.createServerSocket(0);\n+\n+            if (ciphersuites != null) {\n+                System.out.println(\"Server: enable cipher suites: \"\n+                        + java.util.Arrays.toString(ciphersuites));\n+                ssocket.setEnabledCipherSuites(ciphersuites);\n+            }\n+\n@@ -276,2 +288,2 @@\n-                                    + \"because socket was closed, \"\n-                                    + \"please ignore it\");\n+                                + \"because socket was closed, \"\n+                                + \"please ignore it\");\n@@ -322,16 +334,0 @@\n-\n-        static SSLServer init(String[] ciphersuites)\n-                throws IOException {\n-            SSLServerSocketFactory ssf = (SSLServerSocketFactory)\n-                    SSLServerSocketFactory.getDefault();\n-            SSLServerSocket ssocket = (SSLServerSocket)\n-                    ssf.createServerSocket(0);\n-\n-            if (ciphersuites != null) {\n-                System.out.println(\"Server: enable cipher suites: \"\n-                        + java.util.Arrays.toString(ciphersuites));\n-                ssocket.setEnabledCipherSuites(ciphersuites);\n-            }\n-\n-            return new SSLServer(ssocket);\n-        }\n@@ -340,1 +336,1 @@\n-    static class SSLClient implements AutoCloseable {\n+    static class SSLClient extends SSLContextTemplate implements AutoCloseable {\n@@ -344,1 +340,11 @@\n-        private SSLClient(SSLSocket socket) {\n+        private SSLClient(int port, String ciphersuite) throws Exception {\n+            SSLContext context = createSSLContext(DisabledAlgorithms.CERTIFICATES,\n+                    null, getClientContextParameters());\n+            SSLSocketFactory ssf = context.getSocketFactory();\n+            SSLSocket socket = (SSLSocket) ssf.createSocket(\"localhost\", port);\n+\n+            if (ciphersuite != null) {\n+                System.out.println(\"Client: enable cipher suite: \"\n+                        + ciphersuite);\n+                socket.setEnabledCipherSuites(new String[]{ciphersuite});\n+            }\n@@ -384,22 +390,0 @@\n-\n-        static SSLClient init(int port)\n-                throws NoSuchAlgorithmException, IOException {\n-            return init(port, null);\n-        }\n-\n-        static SSLClient init(int port, String ciphersuite)\n-                throws NoSuchAlgorithmException, IOException {\n-            SSLContext context = SSLContext.getDefault();\n-            SSLSocketFactory ssf = (SSLSocketFactory)\n-                    context.getSocketFactory();\n-            SSLSocket socket = (SSLSocket) ssf.createSocket(\"localhost\", port);\n-\n-            if (ciphersuite != null) {\n-                System.out.println(\"Client: enable cipher suite: \"\n-                        + ciphersuite);\n-                socket.setEnabledCipherSuites(new String[] { ciphersuite });\n-            }\n-\n-            return new SSLClient(socket);\n-        }\n-\n@@ -407,2 +391,0 @@\n-\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/ciphersuites\/DisabledAlgorithms.java","additions":99,"deletions":117,"binary":false,"changes":216,"status":"modified"}]}