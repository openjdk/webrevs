{"files":[{"patch":"@@ -1481,1 +1481,2 @@\n-  \/\/         final_correction = canonicalized_correction + limit_correction\n+  \/\/         (v) final_correction = canonicalized_correction + limit_correction\n+  \/\/\n@@ -1487,0 +1488,15 @@\n+  \/\/     However, we need to be careful that (v) does not over- or underflow.\n+  \/\/     We know that:\n+  \/\/         canonicalized_correction = stride - 1\n+  \/\/     and\n+  \/\/         limit_correction <= stride + 1\n+  \/\/     and thus\n+  \/\/         canonicalized_correction + limit_correction <= 2 * stride\n+  \/\/     To prevent an over- or underflow of (v), we must ensure that\n+  \/\/         2 * stride <= max_int\n+  \/\/     which can safely be checked without over- or underflow with\n+  \/\/         (vi) stride != min_int AND abs(stride) <= max_int \/ 2\n+  \/\/\n+  \/\/     We could try to further optimize the cases where (vi) does not hold but given that such large strides are\n+  \/\/     very uncommon and the loop would only run for a very few iterations anyway, we simply bail out if (vi) fails.\n+  \/\/\n@@ -1517,0 +1533,4 @@\n+  \/\/ Check (vi) and bail out if the stride is too big.\n+  if (stride_con == min_signed_integer(iv_bt) || (ABS(stride_con) > max_signed_integer(iv_bt) \/ 2)) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,1 +306,2 @@\n-    static final String acceptString = \"*\/*\";\n+    static final String acceptString =\n+        \"text\/html, image\/gif, image\/jpeg, *\/*; q=0.2\";\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -809,2 +808,2 @@\n-                    InetSocketAddress sa = new InetSocketAddress(\n-                            InetAddress.getLoopbackAddress(), 0);\n+                    InetAddress loopback = InetAddress.getLoopbackAddress();\n+                    InetSocketAddress sa = new InetSocketAddress(loopback, 0);\n@@ -816,1 +815,1 @@\n-                        https.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+                        https.setHttpsConfigurator(new TestServerConfigurator(loopback, sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/HttpServerAdapters.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}