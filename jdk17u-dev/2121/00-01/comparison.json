{"files":[{"patch":"@@ -59,1 +59,1 @@\n- *        jdk.test.lib.net.IPSupport\n+ *        ReferenceTracker jdk.test.lib.net.IPSupport\n@@ -120,5 +120,0 @@\n-            if (https2_Server.getAddress().getAddress().isLoopbackAddress()) {\n-                \/\/ h2 over HTTPS, use the short form of the host, in the request URI\n-                arguments.add(Arguments.of(new URI(\"https:\/\/localhost:\" +\n-                        https2_Server.getAddress().getPort() + \"\/\")));\n-            }\n@@ -140,1 +135,1 @@\n-    public void testConnReuse(final URI requestURI) throws Exception {\n+    public void testConnReuse(final URI requestURI) throws Throwable {\n@@ -145,19 +140,44 @@\n-        final HttpClient client = builder.build();\n-        String clientConnAddr = null;\n-        for (int i = 1; i <= 5; i++) {\n-            System.out.println(\"Issuing request(\" + i + \") \" + req);\n-            final HttpResponse<String> resp = client.send(req, BodyHandlers.ofString());\n-            assertEquals(200, resp.statusCode(), \"unexpected response code\");\n-            final String respBody = resp.body();\n-            System.out.println(\"Server side handler responded to a request from \" + respBody);\n-            assertNotEquals(Handler.UNKNOWN_CLIENT_ADDR, respBody,\n-                    \"server handler couldn't determine client address in request\");\n-            if (i == 1) {\n-                \/\/ for the first request we just keep track of the client connection address\n-                \/\/ that got used for this request\n-                clientConnAddr = respBody;\n-            } else {\n-                \/\/ verify that the client connection used to issue the request is the same\n-                \/\/ as the previous request's client connection\n-                assertEquals(clientConnAddr, respBody, \"HttpClient unexpectedly used a\" +\n-                        \" different connection for request(\" + i + \")\");\n+        final ReferenceTracker tracker = ReferenceTracker.INSTANCE;\n+        Throwable testFailure = null;\n+        HttpClient client = tracker.track(builder.build());\n+        try {\n+            String clientConnAddr = null;\n+            for (int i = 1; i <= 5; i++) {\n+                System.out.println(\"Issuing request(\" + i + \") \" + req);\n+                final HttpResponse<String> resp = client.send(req, BodyHandlers.ofString());\n+                assertEquals(200, resp.statusCode(), \"unexpected response code\");\n+                final String respBody = resp.body();\n+                System.out.println(\"Server side handler responded to a request from \" + respBody);\n+                assertNotEquals(Handler.UNKNOWN_CLIENT_ADDR, respBody,\n+                        \"server handler couldn't determine client address in request\");\n+                if (i == 1) {\n+                    \/\/ for the first request we just keep track of the client connection address\n+                    \/\/ that got used for this request\n+                    clientConnAddr = respBody;\n+                } else {\n+                    \/\/ verify that the client connection used to issue the request is the same\n+                    \/\/ as the previous request's client connection\n+                    assertEquals(clientConnAddr, respBody, \"HttpClient unexpectedly used a\" +\n+                            \" different connection for request(\" + i + \")\");\n+                }\n+            }\n+        } catch (Throwable t) {\n+            testFailure = t;\n+        } finally {\n+            \/\/ dereference the client to allow the tracker to verify the resources\n+            \/\/ have been released\n+            client = null;\n+            \/\/ wait for the client to be shutdown\n+            final AssertionError trackerFailure = tracker.check(2000);\n+            if (testFailure != null) {\n+                if (trackerFailure != null) {\n+                    \/\/ add the failure reported by the tracker as a suppressed\n+                    \/\/ exception and throw the original test failure\n+                    testFailure.addSuppressed(trackerFailure);\n+                }\n+                throw testFailure;\n+            }\n+            if (trackerFailure != null) {\n+                \/\/ the test itself didn't fail but the tracker check failed.\n+                \/\/ fail the test with this exception\n+                throw trackerFailure;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ConnectionReuseTest.java","additions":46,"deletions":26,"binary":false,"changes":72,"status":"modified"}]}