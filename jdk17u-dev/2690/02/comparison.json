{"files":[{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -365,1 +364,1 @@\n-  typedef typename Conditional<std::is_const<Storage>::value, const Block*, Block*>::type BlockPtr;\n+  using BlockPtr = std::conditional_t<std::is_const<Storage>::value, const Block*, Block*>;\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include <type_traits>\n+\n@@ -170,3 +172,1 @@\n-  typedef typename Conditional<is_const,\n-                               const OopStorage*,\n-                               OopStorage*>::type StoragePtr;\n+  using StoragePtr = std::conditional_t<is_const, const OopStorage*, OopStorage*>;\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageParState.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -34,0 +33,2 @@\n+#include <type_traits>\n+\n@@ -59,1 +60,1 @@\n-    typedef typename Conditional<is_const, const Block*, Block*>::type BlockPtr;\n+    using BlockPtr = std::conditional_t<is_const, const Block*, Block*>;\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageParState.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_CONDITIONAL_HPP\n-#define SHARE_METAPROGRAMMING_CONDITIONAL_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-\/\/ This trait evaluates its typedef called \"type\" to TrueType iff the condition\n-\/\/ is true. Otherwise it evaluates to FalseType.\n-\n-template <bool condition, typename TrueType, typename FalseType>\n-struct Conditional: AllStatic {\n-  typedef TrueType type;\n-};\n-\n-template <typename TrueType, typename FalseType>\n-struct Conditional<false, TrueType, FalseType>: AllStatic {\n-  typedef FalseType type;\n-};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_CONDITIONAL_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/conditional.hpp","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -49,1 +48,1 @@\n-  typedef typename Conditional<needs_oop_compress, narrowOop, oop>::type type;\n+  using type = std::conditional_t<needs_oop_compress, narrowOop, oop>;\n@@ -76,3 +75,3 @@\n-    typedef typename Conditional<\n-      HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n-      typename HeapOopType<decorators>::type, T>::type type;\n+    using type = std::conditional_t<HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n+                                    typename HeapOopType<decorators>::type,\n+                                    T>;\n@@ -1114,3 +1113,3 @@\n-    typedef typename Conditional<HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n-                                 typename OopOrNarrowOop<T>::type,\n-                                 std::decay_t<T>>::type DecayedT;\n+    using DecayedT = std::conditional_t<HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n+                                        typename OopOrNarrowOop<T>::type,\n+                                        std::decay_t<T>>;\n@@ -1128,3 +1127,3 @@\n-    typedef typename Conditional<HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n-                                 typename OopOrNarrowOop<T>::type,\n-                                 std::decay_t<T>>::type DecayedT;\n+    using DecayedT = std::conditional_t<HasDecorator<decorators, INTERNAL_VALUE_IS_OOP>::value,\n+                                        typename OopOrNarrowOop<T>::type,\n+                                        std::decay_t<T>>;\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -628,1 +627,1 @@\n-  typedef typename Conditional<IsPointer<D>::value, ptrdiff_t, D>::type I;\n+  using I = std::conditional_t<IsPointer<D>::value, ptrdiff_t, D>;\n@@ -635,1 +634,1 @@\n-  typedef typename Conditional<IsPointer<D>::value, ptrdiff_t, D>::type I;\n+  using I = std::conditional_t<IsPointer<D>::value, ptrdiff_t, D>;\n@@ -647,2 +646,2 @@\n-  typedef typename Conditional<IsSigned<I>::value, intptr_t, uintptr_t>::type PI;\n-  typedef typename Conditional<IsPointer<D>::value, PI, D>::type AddendType;\n+  using PI = std::conditional_t<IsSigned<I>::value, intptr_t, uintptr_t>;\n+  using AddendType = std::conditional_t<IsPointer<D>::value, PI, D>;\n@@ -911,1 +910,1 @@\n-  using SI = typename Conditional<IsSigned<I>::value, intptr_t, uintptr_t>::type;\n+  using SI = std::conditional_t<IsSigned<I>::value, intptr_t, uintptr_t>;\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -56,1 +55,1 @@\n-  typedef typename Conditional<(sizeof(T) < sizeof(unsigned)), unsigned, T>::type P;\n+  using P = std::conditional_t<(sizeof(T) < sizeof(unsigned)), unsigned, T>;\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/conditional.hpp\"\n@@ -570,3 +569,1 @@\n-  typedef typename Conditional<is_const,\n-                               const OopStorage,\n-                               OopStorage>::type Storage;\n+  using Storage = std::conditional_t<is_const, const OopStorage, OopStorage>;\n@@ -795,3 +792,1 @@\n-  typedef typename Conditional<is_const,\n-                               const OopStorage,\n-                               OopStorage>::type Storage;\n+  using Storage = std::conditional_t<is_const, const OopStorage, OopStorage>;\n@@ -895,3 +890,1 @@\n-  typedef typename Conditional<is_const,\n-                               const OopStorage,\n-                               OopStorage>::type Storage;\n+  using Storage = std::conditional_t<is_const, const OopStorage, OopStorage>;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/conditional.hpp\"\n-#include \"metaprogramming\/isSame.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class ConditionalTest {\n-  class A: AllStatic {};\n-  class B: AllStatic {};\n-\n-  typedef Conditional<true, A, B>::type A_B_if_true;\n-  static const bool A_B_if_true_is_A = IsSame<A_B_if_true, A>::value;\n-  static const bool A_B_if_true_is_B = IsSame<A_B_if_true, B>::value;\n-  STATIC_ASSERT(A_B_if_true_is_A);\n-  STATIC_ASSERT(!A_B_if_true_is_B);\n-\n-  typedef Conditional<false, A, B>::type A_B_if_false;\n-  static const bool A_B_if_false_is_A = IsSame<A_B_if_false, A>::value;\n-  static const bool A_B_if_false_is_B = IsSame<A_B_if_false, B>::value;\n-  STATIC_ASSERT(!A_B_if_false_is_A);\n-  STATIC_ASSERT(A_B_if_false_is_B);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_conditional.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"}]}