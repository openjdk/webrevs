{"files":[{"patch":"@@ -137,0 +137,3 @@\n+java\/awt\/Focus\/TestDisabledAutoTransfer.java 8159871 macosx-all,windows-all\n+java\/awt\/Focus\/TestDisabledAutoTransferSwing.java 6962362 windows-all\n+java\/awt\/Focus\/ActivateOnProperAppContextTest.java 8136516 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,245 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+* @test\n+* @bug 6385277\n+* @key headful\n+* @summary   Tests that activation happens on correct AppContext.\n+* @modules java.desktop\/sun.awt\n+* @run main ActivateOnProperAppContextTest\n+*\/\n+\n+import sun.awt.AppContext;\n+import sun.awt.SunToolkit;\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.InputEvent;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class ActivateOnProperAppContextTest {\n+    static Robot robot;\n+    SunToolkit toolkit;\n+\n+    ThreadGroup threadGroup = new ThreadGroup(\"Test_Thread_Group\");\n+    AppContext appContext;\n+    Frame frame;\n+    volatile boolean passed = true;\n+    AtomicBoolean cond = new AtomicBoolean(false);\n+\n+    public static void main(String[] args) throws Exception {\n+        ActivateOnProperAppContextTest app = new ActivateOnProperAppContextTest();\n+        robot = new Robot();\n+        app.start();\n+    }\n+\n+    public void start() {\n+        toolkit = (SunToolkit)Toolkit.getDefaultToolkit();\n+\n+        Runnable runnable = new Runnable() {\n+                public void run() {\n+                    test();\n+\n+                    synchronized (cond) {\n+                        cond.set(true);\n+                        cond.notifyAll();\n+                    }\n+                }\n+            };\n+\n+        Thread thread = new Thread(threadGroup, runnable, \"Test Thread\");\n+\n+        synchronized (cond) {\n+\n+            thread.start();\n+\n+            while (!cond.get()) {\n+                try {\n+                    cond.wait();\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        if (passed) {\n+            System.out.println(\"Test passed.\");\n+        } else {\n+            throw new TestFailedException(\"Test failed!\");\n+        }\n+    }\n+\n+    void test() {\n+        appContext = SunToolkit.createNewAppContext();\n+        System.out.println(\"Created new AppContext: \" + appContext);\n+\n+        frame = new Frame(\"ActivateOnProperAppContextTest Frame\") {\n+                public boolean isActive() {\n+                    verifyAppContext(\"Frame.isActive()\");\n+                    return super.isActive();\n+                }\n+                public boolean isFocused() {\n+                    verifyAppContext(\"Frame.isFocused()\");\n+                    return super.isFocused();\n+                }\n+                public boolean isFocusable() {\n+                    verifyAppContext(\"Frame.isFocusable()\");\n+                    return super.isFocusable();\n+                }\n+                public Window getOwner() {\n+                    verifyAppContext(\"Frame.getOwner()\");\n+                    return super.getOwner();\n+                }\n+                public boolean isEnabled() {\n+                    verifyAppContext(\"Frame.isEnabled()\");\n+                    return super.isEnabled();\n+                }\n+                public boolean isVisible() {\n+                    verifyAppContext(\"Frame.isVisible()\");\n+                    return super.isVisible();\n+                }\n+                public Container getParent() {\n+                    verifyAppContext(\"Frame.getParent()\");\n+                    return super.getParent();\n+                }\n+                public Cursor getCursor() {\n+                    verifyAppContext(\"Frame.getCursor()\");\n+                    return super.getCursor();\n+                }\n+                public Point getLocation() {\n+                    verifyAppContext(\"Frame.getLocation()\");\n+                    return super.getLocation();\n+                }\n+                public Point getLocationOnScreen() {\n+                    verifyAppContext(\"Frame.getLocationOnScreen()\");\n+                    return super.getLocationOnScreen();\n+                }\n+            };\n+        Window window = new Window(frame) {\n+                public boolean isFocused() {\n+                    verifyAppContext(\"Window.isFocused()\");\n+                    return super.isFocused();\n+                }\n+                public boolean isFocusable() {\n+                    verifyAppContext(\"Window.isFocusable()\");\n+                    return super.isFocusable();\n+                }\n+                public Window getOwner() {\n+                    verifyAppContext(\"Window.getOwner()\");\n+                    return super.getOwner();\n+                }\n+                public boolean isEnabled() {\n+                    verifyAppContext(\"Window.isEnabled()\");\n+                    return super.isEnabled();\n+                }\n+                public boolean isVisible() {\n+                    verifyAppContext(\"Window.isVisible()\");\n+                    return super.isVisible();\n+                }\n+                public Container getParent() {\n+                    verifyAppContext(\"Window.getParent()\");\n+                    return super.getParent();\n+                }\n+                public Cursor getCursor() {\n+                    verifyAppContext(\"Window.getCursor()\");\n+                    return super.getCursor();\n+                }\n+                public Point getLocation() {\n+                    verifyAppContext(\"Window.getLocation()\");\n+                    return super.getLocation();\n+                }\n+                public Point getLocationOnScreen() {\n+                    verifyAppContext(\"Window.getLocationOnScreen()\");\n+                    return super.getLocationOnScreen();\n+                }\n+            };\n+        Button button = new Button(\"button\");\n+        Label label = new Label(\"label\");\n+\n+        window.setLayout(new FlowLayout());\n+        window.add(button);\n+        window.add(label);\n+        window.setLocation(800, 0);\n+        window.pack();\n+        window.setVisible(true);\n+\n+        frame.setBounds(800, 100, 100, 50);\n+        frame.setVisible(true);\n+\n+        toolkit.realSync();\n+\n+        \/*\n+         * When the label is clicked in the window some of\n+         * the owner's public method get called.\n+         *\/\n+        clickOn(label);\n+    }\n+\n+    void verifyAppContext(String methodName) {\n+        AppContext ac = AppContext.getAppContext();\n+        println(methodName + \" called on AppContext: \" + ac);\n+\n+        if (ac != appContext) {\n+            passed = false;\n+            System.err.println(\"Test failed: \" + methodName + \" is called on wrong AppContext!\");\n+            Thread.dumpStack();\n+        }\n+    }\n+\n+    void clickOn(Component c) {\n+        Point p = c.getLocationOnScreen();\n+        Dimension d = c.getSize();\n+\n+        robot.mouseMove(p.x + (int)(d.getWidth()\/2), p.y + (int)(d.getHeight()\/2));\n+\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(20);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        toolkit.realSync();\n+    }\n+\n+    void println(final String msg) {\n+        SunToolkit.executeOnEventHandlerThread(frame, new Runnable() {\n+                public void run() {\n+                    System.out.println(msg);\n+                }\n+            });\n+    }\n+}\n+\n+class TestFailedException extends RuntimeException {\n+    TestFailedException(String msg) {\n+        super(msg);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/ActivateOnProperAppContextTest.java","additions":245,"deletions":0,"binary":false,"changes":245,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4402942\n+ * @summary After deactivation and activation of frame, focus should be restored correctlty\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual KillFocusTest\n+*\/\n+\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+\n+public class KillFocusTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+         After starting the test you should see \\\"Test Frame\\\"\n+         with the \\\"Click me\\\" text field.\n+         Click on this text field and try to type something in it.\n+         Make sure that the field receives focus and you can enter text in it.\n+         Click on any non-java window.\n+         Click on \\\"Click me\\\" text field to return focus to it\n+         If the caret is in the text field and you are able to type\n+         in it then press pass else press fail.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"KillFocusTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(KillFocusTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+\n+        Frame frame = new Frame(\"KillFocusTest Frame\");\n+        TextField textField = new TextField(\"Click me\", 10);\n+        textField.addFocusListener(new FocusListener() {\n+            public void focusGained(FocusEvent fe) {\n+                PassFailJFrame.log(\"Focus gained\");\n+            }\n+            public void focusLost(FocusEvent fe) {\n+                PassFailJFrame.log(\"Focus lost\");\n+            }\n+        });\n+        frame.add(textField);\n+        frame.setSize(200, 100);\n+        return frame;\n+    }\n+\n+\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/KillFocusTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 6180261\n+ * @summary Test that auto-transfer doesn't happen when there are pending focus requests\n+ * @key headful\n+ * @run main TestDisabledAutoTransfer\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class TestDisabledAutoTransfer {\n+    static Frame frame;\n+    static Robot robot;\n+    Button b1;\n+    Button desired;\n+    AtomicBoolean focused = new AtomicBoolean();\n+    ActionListener mover;\n+    volatile Point loc;\n+    volatile Dimension dim;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        try {\n+            TestDisabledAutoTransfer test = new TestDisabledAutoTransfer();\n+            test.createTestUI();\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test.doTest();\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+\n+    public void createTestUI() {\n+        frame = new Frame(\"TestDisabledAutoTransfer\");\n+        frame.setLayout(new FlowLayout());\n+        desired = new Button(\"Desired\");\n+        FocusAdapter watcher = new FocusAdapter() {\n+                public void focusGained(FocusEvent e) {\n+                    synchronized(focused) {\n+                        focused.set(true);\n+                    }\n+                }\n+            };\n+        b1 = new Button(\"Press to disable\");\n+        mover = new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                desired.requestFocus();\n+                    ((Component)e.getSource()).setEnabled(false);\n+                }\n+            };\n+        b1.addFocusListener(watcher);\n+        desired.addFocusListener(watcher);\n+        frame.add(b1);\n+        Button misc = new Button(\"Next\");\n+        frame.add(misc);\n+        misc.addFocusListener(watcher);\n+        frame.add(desired);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+\n+    }\n+\n+    public void doTest() {\n+\n+        loc = b1.getLocationOnScreen();\n+        dim = b1.getSize();\n+        robot.mouseMove(loc.x + dim.width \/ 2, loc.y + dim.height \/ 2);\n+        robot.waitForIdle();\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        b1.requestFocus();\n+\n+        try {\n+            synchronized(focused) {\n+                if (!focused.get()) {\n+                    focused.wait(1000);\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+\n+        if (!focused.get()) {\n+            throw new RuntimeException(\"b1 didn't get focus\");\n+        }\n+        focused.set(false);\n+\n+        b1.addActionListener(mover);\n+        robot.mouseMove(loc.x + dim.width \/ 2, loc.y + dim.height \/ 2);\n+        robot.waitForIdle();\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+\n+        try {\n+            synchronized(focused) {\n+                if (!focused.get()) {\n+                    focused.wait(1000);\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+\n+        if (!focused.get()) {\n+            throw new RuntimeException(\"none got focus\");\n+        }\n+\n+        if (!desired.isFocusOwner()) {\n+            throw new RuntimeException(\"desired didn't get focus\");\n+        }\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Focus\/TestDisabledAutoTransfer.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 6180261\n+ * @summary Test that auto-transfer doesn't happen when there are pending focus requests\n+ * @key headful\n+ * @run main TestDisabledAutoTransferSwing\n+*\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class TestDisabledAutoTransferSwing {\n+    static JFrame frame;\n+    static Robot robot;\n+    JButton b1;\n+    JButton desired;\n+    AtomicBoolean focused = new AtomicBoolean();\n+    ActionListener mover;\n+    volatile Point loc;\n+    volatile Dimension dim;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        try {\n+            TestDisabledAutoTransferSwing test = new TestDisabledAutoTransferSwing();\n+            SwingUtilities.invokeAndWait(() -> {\n+                test.createTestUI();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test.doTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void createTestUI() {\n+        frame = new JFrame(\"TestDisabledAutoTransferSwing\");\n+        frame.setLayout (new FlowLayout ());\n+        desired = new JButton(\"Desired\");\n+        FocusAdapter watcher = new FocusAdapter() {\n+                public void focusGained(FocusEvent e) {\n+                    synchronized(focused) {\n+                        focused.set(true);\n+                    }\n+                }\n+            };\n+        b1 = new JButton(\"Press to disable\");\n+        mover = new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    desired.requestFocus();\n+                    ((Component)e.getSource()).setEnabled(false);\n+                }\n+            };\n+        b1.addFocusListener(watcher);\n+        desired.addFocusListener(watcher);\n+        frame.add(b1);\n+        JButton misc = new JButton(\"Next\");\n+        frame.add(misc);\n+        misc.addFocusListener(watcher);\n+        frame.add(desired);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+\n+    }\n+\n+    public void doTest() throws Exception {\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            loc = b1.getLocationOnScreen();\n+            dim = b1.getSize();\n+        });\n+        robot.mouseMove(loc.x + dim.width \/ 2, loc.y + dim.height \/ 2);\n+        robot.waitForIdle();\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(() -> {\n+            b1.requestFocus();\n+        });\n+\n+        try {\n+            synchronized(focused) {\n+                if (!focused.get()) {\n+                    focused.wait(2000);\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+\n+        if (!focused.get()) {\n+            throw new RuntimeException(\"b1 didn't get focus\");\n+        }\n+        focused.set(false);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            b1.addActionListener(mover);\n+        });\n+        robot.mouseMove(loc.x + dim.width \/ 2, loc.y + dim.height \/ 2);\n+        robot.waitForIdle();\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+\n+        try {\n+            synchronized(focused) {\n+                if (!focused.get()) {\n+                    focused.wait(2000);\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+\n+        if (!focused.get()) {\n+            throw new RuntimeException(\"none got focus\");\n+        }\n+\n+        if (!desired.isFocusOwner()) {\n+            throw new RuntimeException(\"desired didn't get focus\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/TestDisabledAutoTransferSwing.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}