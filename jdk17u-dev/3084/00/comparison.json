{"files":[{"patch":"@@ -876,1 +876,1 @@\n-    BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libnativeStack.c\n+    BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libnativeStack.c exeGetCreatedJavaVMs.c\n@@ -1514,0 +1514,1 @@\n+    BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeGetCreatedJavaVMs := -ljvm -lpthread\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3530,1 +3530,9 @@\n-volatile int vm_created = 0;\n+enum VM_Creation_State {\n+  NOT_CREATED = 0,\n+  IN_PROGRESS,  \/\/ Most JNI operations are permitted during this phase to\n+                \/\/ allow for initialization actions by libraries and agents.\n+  COMPLETE\n+};\n+\n+volatile VM_Creation_State vm_created = NOT_CREATED;\n+\n@@ -3599,1 +3607,1 @@\n-  if (Atomic::xchg(&vm_created, 1) == 1) {\n+  if (Atomic::xchg(&vm_created, IN_PROGRESS) != NOT_CREATED) {\n@@ -3612,2 +3620,0 @@\n-  assert(vm_created == 1, \"vm_created is true during the creation\");\n-\n@@ -3630,1 +3636,1 @@\n-    \/* thread is thread_in_vm here *\/\n+    \/\/ thread is thread_in_vm here\n@@ -3633,0 +3639,2 @@\n+    \/\/ mark creation complete for other JNI ops\n+    Atomic::release_store(&vm_created, COMPLETE);\n@@ -3697,1 +3705,2 @@\n-    Atomic::release_store(&vm_created, 0);\n+    assert(vm_created == IN_PROGRESS, \"must be\");\n+    Atomic::release_store(&vm_created, NOT_CREATED);\n@@ -3726,1 +3735,1 @@\n-  if (vm_created == 1) {\n+  if (vm_created == COMPLETE) {\n@@ -3746,1 +3755,1 @@\n-  if (vm_created == 0) {\n+  if (vm_created == NOT_CREATED) {\n@@ -3770,1 +3779,1 @@\n-  vm_created = 0;\n+  vm_created = NOT_CREATED;\n@@ -3907,1 +3916,2 @@\n-  if (vm_created == 0) {\n+  if (vm_created == NOT_CREATED) {\n+    \/\/ Not sure how we could possibly get here.\n@@ -3920,1 +3930,2 @@\n-  if (vm_created == 0) {\n+  if (vm_created == NOT_CREATED) {\n+    \/\/ Not sure how we could possibly get here.\n@@ -3983,1 +3994,1 @@\n-  if (vm_created == 0) {\n+  if (vm_created == NOT_CREATED) {\n@@ -4034,2 +4045,3 @@\n-  if (vm_created == 0) {\n-  HOTSPOT_JNI_ATTACHCURRENTTHREADASDAEMON_RETURN((uint32_t) JNI_ERR);\n+  if (vm_created == NOT_CREATED) {\n+    \/\/ Not sure how we could possibly get here.\n+    HOTSPOT_JNI_ATTACHCURRENTTHREADASDAEMON_RETURN((uint32_t) JNI_ERR);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @requires os.family != \"Windows\"\n+ * @run driver TestGetCreatedJavaVMs\n+ *\/\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\n+public class TestGetCreatedJavaVMs {\n+    public static void main(String args[]) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createNativeTestProcessBuilder(\"GetCreatedJavaVMs\");\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.shouldHaveExitValue(0);\n+        output.reportDiagnosticSummary();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/getCreatedJavaVMs\/TestGetCreatedJavaVMs.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* This code tests concurrent creation of and then attach to a JVM.\n+ * Two threads race to create the JVM, the loser then checks GetCreatedJavaVMs\n+ * and attaches to the returned JVM. Prior to the fix this could crash as the\n+ * JVM is not fully initialized.\n+ *\/\n+#include \"jni.h\"\n+#include <string.h>\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#define NUM_THREADS 2\n+\n+void *thread_runner(void *threadid) {\n+  int tid;\n+  tid = (int)(intptr_t)threadid;\n+\n+  JavaVM *vm;\n+  JNIEnv *env = 0;\n+\n+  JavaVMInitArgs vm_args;\n+  JavaVMOption options[0];\n+  vm_args.version = JNI_VERSION_1_2;\n+  vm_args.nOptions = 0;\n+  vm_args.options = options;\n+  vm_args.ignoreUnrecognized = JNI_FALSE;\n+\n+  printf(\"[%d] BEGIN JNI_CreateJavaVM\\n\", tid);\n+  jint create_res = JNI_CreateJavaVM(&vm, (void **)&env, &vm_args);\n+  printf(\"[%d] END JNI_CreateJavaVM\\n\", tid);\n+\n+  if (create_res != JNI_OK) {\n+    printf(\"[%d] Error creating JVM: %d\\n\", tid, create_res);\n+    if (create_res == JNI_EEXIST) {\n+      jsize count;\n+      printf(\"[%d] BEGIN JNI_GetCreatedJavaVMs\\n\", tid);\n+      jint get_res = JNI_GetCreatedJavaVMs(&vm, 1, &count);\n+      printf(\"[%d] END JNI_GetCreatedJavaVMs\\n\", tid);\n+\n+      if (get_res != JNI_OK) {\n+        printf(\"[%d] Error obtaining created VMs: %d\\n\", tid, get_res);\n+        pthread_exit(NULL);\n+      } else {\n+        printf(\"[%d] Obtained %d created VMs\\n\", tid, count);\n+      }\n+      if (count > 0) {\n+        printf(\"[%d] BEGIN AttachCurrentThread\\n\", tid);\n+        get_res = (*vm)->AttachCurrentThread(vm, (void **)&env, NULL);\n+        printf(\"[%d] END AttachCurrentThread - %s\\n\", tid,\n+               (get_res == JNI_OK ? \"succeeded\" : \"failed\"));\n+        if (get_res == JNI_OK) {\n+          (*vm)->DetachCurrentThread(vm);\n+        }\n+      }\n+      pthread_exit(NULL);\n+    } else {\n+      pthread_exit(NULL);\n+    }\n+  } else {\n+    printf(\"[%d] Created a JVM\\n\", tid);\n+  }\n+\n+  pthread_exit(NULL);\n+}\n+\n+int main (int argc, char* argv[]) {\n+  pthread_t threads[NUM_THREADS];\n+  for (int i = 0; i < NUM_THREADS; i++ ) {\n+    printf(\"[*] Creating thread %d\\n\", i);\n+    int status = pthread_create(&threads[i], NULL, thread_runner, (void *)(intptr_t)i);\n+    if (status != 0) {\n+      printf(\"[*] Error creating thread %d - %d\\n\", i, status);\n+      exit(-1);\n+    }\n+  }\n+  for (int i = 0; i < NUM_THREADS; i++ ) {\n+    pthread_join(threads[i], NULL);\n+  }\n+  return 0;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/getCreatedJavaVMs\/exeGetCreatedJavaVMs.c","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}