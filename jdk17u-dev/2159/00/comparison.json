{"files":[{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4454304\n+ * @summary On Solaris, TextArea triggers MouseEntered when the mouse is inside the component\n+ * @run main MouseEnterExitTest\n+ *\/\n+public class MouseEnterExitTest {\n+\n+    private static Frame frame;\n+\n+    private volatile static boolean entered = false;\n+    private volatile static boolean exited = false;\n+    private volatile static boolean passed = true;\n+\n+    private volatile static Point compAt;\n+    private volatile static Dimension compSize;\n+\n+    private static final MouseListener mouseListener = new MouseAdapter() {\n+        @Override\n+        public void mouseEntered(MouseEvent e) {\n+            System.out.println(\n+                \"MouseEntered component \" + e.getSource().getClass().getName());\n+            if (entered) {\n+                passed = false;\n+            }\n+            entered = true;\n+            exited = false;\n+        }\n+\n+        @Override\n+        public void mouseExited(MouseEvent e) {\n+            System.out.println(\n+                \"MouseExited component \" + e.getSource().getClass().getName());\n+            if (exited) {\n+                passed = false;\n+            }\n+            entered = false;\n+            exited = true;\n+        }\n+    };\n+\n+    private static void initializeGUI() {\n+        frame = new Frame(\"MouseEnterExitTest\");\n+        frame.setLayout(new FlowLayout());\n+        List list = new List(4);\n+        for (int i = 0; i < 10; i++) {\n+            list.add(\"item \" + i);\n+        }\n+        list.addMouseListener(mouseListener);\n+        frame.add(list);\n+\n+        TextArea textArea = new TextArea(\"TextArea\", 10, 20);\n+        textArea.addMouseListener(mouseListener);\n+        frame.add(textArea);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            EventQueue.invokeAndWait(MouseEnterExitTest::initializeGUI);\n+            robot.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = frame.getLocationOnScreen();\n+                compSize = frame.getSize();\n+            });\n+            compAt.y += compSize.getHeight() \/ 2;\n+            int xr = compAt.x + compSize.width + 1;\n+            for (int i = compAt.x - 5; (i < xr) && passed; i++) {\n+                robot.mouseMove(i, compAt.y);\n+            }\n+\n+            if (!passed || entered || !exited) {\n+                throw new RuntimeException(\n+                    \"MouseEnterExitTest FAILED. MouseEntered\/MouseExited \"\n+                        + \"not properly triggered. Please see the log\");\n+            }\n+            System.out.println(\"Test PASSED\");\n+        } finally {\n+            EventQueue.invokeAndWait(MouseEnterExitTest::disposeFrame);\n+        }\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEnterExitTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}