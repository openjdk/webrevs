{"files":[{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6502052\n+ * @summary Menu cells must resize if font changes (XToolkit)\n+ * @requires os.family == \"linux\"\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CellsResize\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuComponent;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.Toolkit;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class CellsResize {\n+    private static Frame frame;\n+    private static MenuBar menuBar;\n+    private static PopupMenu popupMenu;\n+    private static Menu barSubMenu;\n+    private static Menu popupSubMenu;\n+    private static boolean fontMultiplied = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Open all nested menus in menu bar.\n+                2. Click on \"popup-menu\" button to show popup-menus.\n+                3. Open all nested menus in popup-menu.\n+                4. Click on \"big-font\" button (to make all menus have a\n+                    bigger font).\n+                5. Open all nested menus again (as described in 1, 2, 3).\n+                6. If all menu items use a bigger font now and their labels fit\n+                into menu-item size, press \"pass\", otherwise press \"fail\".\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(CellsResize::createUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI () {\n+        if (!checkToolkit()) {\n+            new RuntimeException(\"Toolkit check failed.\");\n+        }\n+        frame = new Frame(\"MenuBar Cell Resize Test\");\n+\n+        popupMenu = new PopupMenu();\n+        popupMenu.add(createMenu(false));\n+\n+        frame.add(popupMenu);\n+\n+        menuBar = new MenuBar();\n+        menuBar.add(createMenu(true));\n+\n+        frame.setMenuBar(menuBar);\n+\n+        Button bp = new Button(\"popup-menu\");\n+        bp.addMouseListener(new MouseAdapter() {\n+            public void mouseReleased(MouseEvent e) {\n+                popupMenu.show(e.getComponent(), e.getX(), e.getY());\n+            }\n+        });\n+\n+        Button bf = new Button(\"big-font\");\n+        bf.addMouseListener(new MouseAdapter() {\n+            public void mouseReleased(MouseEvent e) {\n+                bigFont();\n+            }\n+        });\n+\n+        Panel panel = new Panel();\n+        panel.setLayout(new GridLayout(2, 1));\n+        panel.add(bp);\n+        panel.add(bf);\n+\n+        frame.add(panel);\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+\n+    static boolean checkToolkit() {\n+        String toolkitName = Toolkit.getDefaultToolkit().getClass().getName();\n+        return toolkitName.equals(\"sun.awt.X11.XToolkit\");\n+    }\n+\n+    static Menu createMenu(boolean bar) {\n+        Menu menu1 = new Menu(\"Menu-1\");\n+        Menu menu11 = new Menu(\"Menu-11\");\n+        menu1.add(menu11);\n+        if (bar) {\n+            barSubMenu = menu11;\n+        } else {\n+            popupSubMenu = menu11;\n+        }\n+        menu11.add(new MenuItem(\"MenuItem\"));\n+        return menu1;\n+    }\n+\n+    static void bigFont() {\n+        if (fontMultiplied) {\n+            return;\n+        } else {\n+            fontMultiplied = true;\n+        }\n+\n+        multiplyFont(barSubMenu, 7);\n+        multiplyFont(popupSubMenu, 7);\n+\n+        \/\/ NOTE: if previous two are moved below following\n+        \/\/ two, they get their font multiplied twice.\n+\n+        multiplyFont(menuBar, 5);\n+        multiplyFont(popupMenu, 5);\n+    }\n+\n+    static void multiplyFont(MenuComponent comp, int times) {\n+        Font font = comp.getFont();\n+        float size = font.getSize() * times;\n+        comp.setFont(font.deriveFont(size));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/CellsResize.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4275848\n+ * @summary Tests that MenuBar is painted correctly after its submenu is removed\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuBarRemoveMenuTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MenuBarRemoveMenuTest implements ActionListener {\n+    private static MenuBar menubar;\n+    private static Button removeButton;\n+    private static Button addButton;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Press \"Remove menu\" button. If you see that both menus\n+                disappeared, the test failed. Otherwise try to add and remove\n+                menu several times to verify that the test passed. Every time\n+                you press \"Remove menu\" button only one menu should go away.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(MenuBarRemoveMenuTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame();\n+        menubar = new MenuBar();\n+        removeButton = new Button(\"Remove menu\");\n+        addButton = new Button(\"Add menu\");\n+        removeButton.addActionListener(new MenuBarRemoveMenuTest());\n+        addButton.addActionListener(new MenuBarRemoveMenuTest());\n+        addButton.setEnabled(false);\n+        menubar.add(new Menu(\"menu\"));\n+        menubar.add(new Menu(\"menu\"));\n+        frame.setMenuBar(menubar);\n+        frame.setLayout(new GridLayout(1, 2));\n+        frame.add(removeButton);\n+        frame.add(addButton);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getSource() == removeButton) {\n+            menubar.remove(0);\n+            removeButton.setEnabled(false);\n+            addButton.setEnabled(true);\n+        } else {\n+            menubar.add(new Menu(\"menu\"));\n+            removeButton.setEnabled(true);\n+            addButton.setEnabled(false);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/MenuBarRemoveMenu\/MenuBarRemoveMenuTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5005194\n+ * @summary Frame.remove(getMenuBar()) throws NPE if the frame doesn't\n+ *       have a menu bar\n+ * @key headful\n+ * @run main MenuNPE\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+\n+public class MenuNPE {\n+    private static Frame frame;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            frame = new Frame(\"Menu NPE\");\n+            MenuBar menuBar = new MenuBar();\n+            Menu menu1 = new Menu(\"Menu 01\");\n+            MenuItem menuLabel = new MenuItem(\"Item 01\");\n+            menu1.add(menuLabel);\n+            menuBar.add(menu1);\n+            frame.setMenuBar(menuBar);\n+            frame.setSize(200, 200);\n+            frame.setVisible(true);\n+            frame.validate();\n+            frame.remove(frame.getMenuBar());\n+            frame.remove(frame.getMenuBar());\n+            System.out.println(\"Test passed.\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/MenuNPE\/MenuNPE.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4105881\n+ * @summary Sets the menu bar while frame window is hidden, then shows\n+    frame again\n+ * @key headful\n+ * @run main SetMBarWhenHidden\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.Rectangle;\n+\n+\/\/ test case for 4105881: FRAME.SETSIZE() DOESN'T WORK FOR SOME SOLARIS WITH\n+\/\/ JDK115+CASES ON\n+public class SetMBarWhenHidden {\n+    private static Frame f;\n+    private static Rectangle startBounds;\n+    private static Rectangle endBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                f = new Frame(\"Set MenuBar When Hidden Test\");\n+                Menu file;\n+                Menu edit;\n+                MenuBar menubar = new MenuBar();\n+                file = new Menu(\"File\");\n+                menubar.add(file);\n+                edit = new Menu(\"Edit\");\n+                menubar.add(edit);\n+                edit.setEnabled(false);\n+                f.setMenuBar(menubar);\n+                f.setSize(200, 200);\n+                startBounds = f.getBounds();\n+                System.out.println(\"About to call setVisible(false)\");\n+                f.setVisible(false);\n+                System.out.println(\"About to call setSize(500, 500)\");\n+                f.setSize(500, 500);\n+                \/\/ create a new menubar and add\n+                MenuBar menubar1 = new MenuBar();\n+                menubar1.add(file);\n+                menubar1.add(edit);\n+                System.out.println(\"About to call setMenuBar\");\n+                f.setMenuBar(menubar1);\n+                System.out.println(\"About to call setVisible(true)\");\n+                f.setVisible(true);\n+                endBounds = f.getBounds();\n+            });\n+            if (startBounds.getHeight() > endBounds.getHeight() &&\n+                startBounds.getWidth() > endBounds.getWidth()) {\n+                throw new RuntimeException(\"Test failed. Frame size didn't \" +\n+                        \"change.\\nStart: \" + startBounds + \"\\n\" +\n+                        \"End: \" + endBounds);\n+            } else {\n+                System.out.println(\"Test passed.\\nStart: \" + startBounds +\n+                        \"\\nEnd: \" + endBounds);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/SetMBarWhenHidden\/SetMBarWhenHidden.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}