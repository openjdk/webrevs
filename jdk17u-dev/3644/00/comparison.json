{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,2 +250,2 @@\n-        ClassPrepareEvent event = (ClassPrepareEvent) eventIterator.next();\n-        debuggeeClass = event.referenceType();\n+        ClassPrepareEvent cpEvent = (ClassPrepareEvent) eventIterator.next();\n+        debuggeeClass = cpEvent.referenceType();\n@@ -374,1 +374,1 @@\n-            getEventSet();\n+            getEventSetForThreadStartDeath(\"thread\" + i);\n@@ -376,2 +376,3 @@\n-            if ( !(eventIterator.nextEvent() instanceof ThreadStartEvent)) {\n-                 log3(\"ERROR: new event is not ThreadStartEvent\");\n+            Event event = eventIterator.nextEvent();\n+            if (!(event instanceof ThreadStartEvent)) {\n+                log3(\"ERROR: new event is not ThreadStartEvent: \" + event);\n@@ -380,1 +381,1 @@\n-                log2(\"......got : instanceof ThreadStartEvent\");\n+                log2(\"......got : instanceof ThreadStartEvent: \" + event);\n@@ -421,2 +422,0 @@\n-\/\/            tsr.addThreadFilter(mainThread);\n-            tsr.addCountFilter(1);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy008.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -340,0 +340,4 @@\n+        \/\/ Filter out any carrier thread that starts while running the test.\n+        if (event.toString().contains(\"ForkJoinPool\"))\n+            return true;\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/EventFilters.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,0 +168,1 @@\n+                    log2(\"Got ThreadStartEvent for '\" + evt.thread().name());\n@@ -174,0 +175,1 @@\n+                    log2(\"Got ThreadDeathEvent for '\" + evt.thread().name());\n@@ -180,0 +182,1 @@\n+                log2(\"Did't get ThreadStartEvent or ThreadDeathEvent: \" + event);\n@@ -191,1 +194,2 @@\n-        getEventSet();\n+        while (true) {\n+            getEventSet();\n@@ -193,5 +197,5 @@\n-        Event event = eventIterator.nextEvent();\n-        if (event instanceof BreakpointEvent) {\n-            bpEvent = (BreakpointEvent) event;\n-            return;\n-        }\n+            Event event = eventIterator.nextEvent();\n+            if (event instanceof BreakpointEvent) {\n+                bpEvent = (BreakpointEvent) event;\n+                return;\n+            }\n@@ -199,1 +203,7 @@\n-        throw new JDITestRuntimeException(\"** event '\" + event + \"' IS NOT a breakpoint **\");\n+            if (EventFilters.filtered(event)) {\n+                \/\/ We filter out spurious ThreadStartEvents\n+                continue;\n+            }\n+\n+            throw new JDITestRuntimeException(\"** event '\" + event + \"' IS NOT a breakpoint **\");\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/JDIBase.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"}]}