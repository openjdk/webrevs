{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -34,1 +36,3 @@\n- *      -XX:-UseGCOverheadLimit\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n@@ -44,0 +48,2 @@\n+\n+import jdk.test.whitebox.WhiteBox;\n@@ -45,1 +51,0 @@\n-import nsk.share.gc.Algorithms;\n@@ -48,2 +53,0 @@\n-import nsk.share.gc.gp.GarbageProducer;\n-import nsk.share.gc.gp.GarbageUtils;\n@@ -90,1 +93,0 @@\n-        GarbageProducer gp = GarbageUtils.getArrayProducers().get(0);\n@@ -101,15 +103,10 @@\n-                try {\n-                    refq = new ReferenceQueue();\n-                    alive = new int[3];\n-                    wrong = new int[3];\n-                    for (int j = 0; j < RANGE; j++) {\n-                        holder[j] = new CircularLinkedList();\n-                        holder[j].addNelements(300);\n-                        wr[j] = new WeakReference(holder[j], refq);\n-                        sr[j] = new SoftReference(holder[j], refq);\n-                        phr[j] = new PhantomReference(holder[j], refq);\n-                    }\n-                } catch (OutOfMemoryError oome) {\n-                    \/\/ we should just skip the test\n-                    \/\/ the other thread could eat all memory\n-                    continue;\n+\n+                refq = new ReferenceQueue();\n+                alive = new int[3];\n+                wrong = new int[3];\n+                for (int j = 0; j < RANGE; j++) {\n+                    holder[j] = new CircularLinkedList();\n+                    holder[j].addNelements(300);\n+                    wr[j] = new WeakReference(holder[j], refq);\n+                    sr[j] = new SoftReference(holder[j], refq);\n+                    phr[j] = new PhantomReference(holder[j], refq);\n@@ -137,1 +134,2 @@\n-                Algorithms.eatMemory(stresser);\n+                \/\/ WB.fullGC() is guaranteed to clear all kinds of weak references.\n+                WhiteBox.getWhiteBox().fullGC();\n@@ -141,2 +139,0 @@\n-                \/\/ At this point OOME was thrown and accordingly to spec\n-                \/\/ all weak refs should be processed\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/ReferencesGC\/ReferencesGC.java","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"}]}