{"files":[{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key printer\n+ * @bug 6255196\n+ * @summary  Verifies the function of methods edit(java.io.File file) and\n+ *           print(java.io.File file)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual EditAndPrintTest\n+ *\/\n+\n+import java.awt.Desktop;\n+import java.awt.Desktop.Action;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JPanel;\n+\n+public class EditAndPrintTest extends JPanel {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            This test tries to edit and print a directory, which will expectedly raise IOException.\n+            Then this test would edit and print a .txt file, which should be successful.\n+            After test execution close the editor if it was launched by test.\n+            If you see any EXCEPTION messages in the output press FAIL.\n+            \"\"\";\n+\n+    public EditAndPrintTest() {\n+        if (!Desktop.isDesktopSupported()) {\n+            PassFailJFrame.log(\"Class java.awt.Desktop is not supported on \" +\n+                    \"current platform. Further testing will not be performed\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        Desktop desktop = Desktop.getDesktop();\n+\n+        if (!desktop.isSupported(Action.PRINT) && !desktop.isSupported(Action.EDIT)) {\n+            PassFailJFrame.log(\"Neither EDIT nor PRINT actions are supported. Nothing to test.\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        \/*\n+         * Part 1: print or edit a directory, which should throw an IOException.\n+         *\/\n+        File userHome = new File(System.getProperty(\"user.home\"));\n+        try {\n+            if (desktop.isSupported(Action.EDIT)) {\n+                PassFailJFrame.log(\"Trying to edit \" + userHome);\n+                desktop.edit(userHome);\n+                PassFailJFrame.log(\"No exception has been thrown for editing \" +\n+                        \"directory \" + userHome.getPath());\n+                PassFailJFrame.log(\"Test failed.\");\n+            } else {\n+                PassFailJFrame.log(\"Action EDIT is unsupported.\");\n+            }\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"Expected IOException is caught.\");\n+        }\n+\n+        try {\n+            if (desktop.isSupported(Action.PRINT)) {\n+                PassFailJFrame.log(\"Trying to print \" + userHome);\n+                desktop.print(userHome);\n+                PassFailJFrame.log(\"No exception has been thrown for printing \" +\n+                        \"directory \" + userHome.getPath());\n+                PassFailJFrame.log(\"Test failed.\");\n+            } else {\n+                PassFailJFrame.log(\"Action PRINT is unsupported.\\n\");\n+            }\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"Expected IOException is caught.\");\n+        }\n+\n+        \/*\n+         * Part 2: print or edit a normal .txt file, which may succeed if there\n+         * is associated application to print or edit the given file. It fails\n+         * otherwise.\n+         *\/\n+        \/\/ Create a temp .txt file for test.\n+        String testFilePath = System.getProperty(\"java.io.tmpdir\") + File.separator + \"JDIC-test.txt\";\n+        File testFile = null;\n+        try {\n+            PassFailJFrame.log(\"Creating temporary file.\");\n+            testFile = File.createTempFile(\"JDIC-test\", \".txt\", new File(System.getProperty(\"java.io.tmpdir\")));\n+            testFile.deleteOnExit();\n+            FileWriter writer = new FileWriter(testFile);\n+            writer.write(\"This is a temp file used to test print() method of Desktop.\");\n+            writer.flush();\n+            writer.close();\n+        } catch (java.io.IOException ioe){\n+            PassFailJFrame.log(\"EXCEPTION: \" + ioe.getMessage());\n+            PassFailJFrame.forceFail(\"Failed to create temp file for testing.\");\n+        }\n+\n+        try {\n+            if (desktop.isSupported(Action.EDIT)) {\n+                PassFailJFrame.log(\"Try to edit \" + testFile);\n+                desktop.edit(testFile);\n+                PassFailJFrame.log(\"Succeed.\");\n+            }\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+\n+        try {\n+            if (desktop.isSupported(Action.PRINT)) {\n+                PassFailJFrame.log(\"Trying to print \" + testFile);\n+                desktop.print(testFile);\n+                PassFailJFrame.log(\"Succeed.\");\n+            }\n+        } catch (IOException e) {\n+            PassFailJFrame.log(\"EXCEPTION: \" + e.getMessage());\n+        }\n+    }\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Edit and Print test\")\n+                .splitUI(EditAndPrintTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(60)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Desktop\/EditAndPrintTest\/EditAndPrintTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4100188\n+ * @key headful\n+ * @summary Make sure that TextFields contain all of,\n+ * and exactly, the text that was entered into them.\n+ * @run main GetTextTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class GetTextTest extends Frame implements ActionListener {\n+    private final String s = \"test string\";\n+    private volatile String ac;\n+    private TextField t;\n+    private Point location;\n+    private Dimension size;\n+\n+    public void setupGUI() {\n+        setLayout(new FlowLayout(FlowLayout.LEFT));\n+\n+        t = new TextField(s, 32);\n+        add(new Label(\"Hit <CR> after text\"));\n+        add(t);\n+        t.addActionListener(this);\n+        setLocationRelativeTo(null);\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        ac = evt.getActionCommand();\n+    }\n+\n+    public void performTest() throws AWTException, InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            location = t.getLocationOnScreen();\n+            size = t.getSize();\n+        });\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(1000);\n+        robot.waitForIdle();\n+        robot.mouseMove(location.x + size.width - 3, location.y + (size.height \/ 2));\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(1000);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_ENTER);\n+        robot.keyRelease(KeyEvent.VK_ENTER);\n+        robot.delay(1000);\n+        if (!s.equals(ac)) {\n+            throw new RuntimeException(\"Action command should be the same as text field content\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        GetTextTest test = new GetTextTest();\n+        EventQueue.invokeAndWait(test::setupGUI);\n+        try {\n+            test.performTest();\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/GetTextTest\/GetTextTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4222122\n+ * @summary TextField.setEchoCharacter() seems to be broken\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetEchoCharTest3\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class SetEchoCharTest3 extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+             Type in the text field and \"*\" characters should echo.\n+             If only one \"*\" echoes and then the system beeps after\n+             the second character is typed, then press Fail, otherwise press Pass.\n+             \"\"\";\n+    public SetEchoCharTest3() {\n+        setLayout(new FlowLayout());\n+        add(new Label(\"Enter text:\"));\n+        TextField tf = new TextField(15);\n+        tf.setEchoChar('*');\n+        add(tf);\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Set Echo Char Test 3\")\n+                .testUI(SetEchoCharTest3::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/SetEchoCharTest3\/SetEchoCharTest3.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}