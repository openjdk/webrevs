{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -127,3 +128,0 @@\n-import java.io.*;\n-import java.security.*;\n-import java.nio.*;\n@@ -132,1 +130,1 @@\n-public class SSLEngineAlpnTest {\n+public class SSLEngineAlpnTest extends SSLEngineTemplate {\n@@ -150,1 +148,0 @@\n-    private static boolean hasServerAPs; \/\/ whether server APs are present\n@@ -153,32 +150,0 @@\n-    private final SSLContext sslc;\n-\n-    private SSLEngine clientEngine;     \/\/ client Engine\n-    private ByteBuffer clientOut;       \/\/ write side of clientEngine\n-    private ByteBuffer clientIn;        \/\/ read side of clientEngine\n-\n-    private SSLEngine serverEngine;     \/\/ server Engine\n-    private ByteBuffer serverOut;       \/\/ write side of serverEngine\n-    private ByteBuffer serverIn;        \/\/ read side of serverEngine\n-\n-    \/*\n-     * For data transport, this example uses local ByteBuffers.  This\n-     * isn't really useful, but the purpose of this example is to show\n-     * SSLEngine concepts, not how to do network transport.\n-     *\/\n-    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n-    private ByteBuffer sTOc;            \/\/ \"reliable\" transport server->client\n-\n-    \/*\n-     * The following is to set up the keystores.\n-     *\/\n-    private static final String pathToStores = \"..\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n-    private static final String passwd = \"passphrase\";\n-\n-    private static final String keyFilename\n-            = System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + keyStoreFile;\n-    private static final String trustFilename\n-            = System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + trustStoreFile;\n@@ -201,1 +166,0 @@\n-        hasServerAPs = !args[0].equals(\"UNUSED\"); \/\/ are server APs being used?\n@@ -204,1 +168,1 @@\n-        SSLEngineAlpnTest test = new SSLEngineAlpnTest(args[3]);\n+        SSLEngineAlpnTest test = new SSLEngineAlpnTest();\n@@ -218,29 +182,2 @@\n-    \/*\n-     * Create an initialized SSLContext to use for these tests.\n-     *\/\n-    public SSLEngineAlpnTest(String expectedAP) throws Exception {\n-\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        KeyStore ts = KeyStore.getInstance(\"JKS\");\n-\n-        char[] passphrase = \"passphrase\".toCharArray();\n-\n-        ks.load(new FileInputStream(keyFilename), passphrase);\n-        ts.load(new FileInputStream(trustFilename), passphrase);\n-\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(ks, passphrase);\n-\n-        KeyManager [] kms = kmf.getKeyManagers();\n-        if (!(kms[0] instanceof X509ExtendedKeyManager)) {\n-            throw new Exception(\"kms[0] not X509ExtendedKeyManager\");\n-        }\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(ts);\n-\n-        SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n-\n-        sslCtx.init(kms, tmf.getTrustManagers(), null);\n-\n-        sslc = sslCtx;\n+    public SSLEngineAlpnTest() throws Exception {\n+        super();\n@@ -293,2 +230,1 @@\n-        createSSLEngines(serverAPs, callbackAP, clientAPs);\n-        createBuffers();\n+        configureSSLEngines(serverAPs, callbackAP, clientAPs);\n@@ -314,1 +250,1 @@\n-            runDelegatedTasks(clientResult, clientEngine);\n+            runDelegatedTasks(clientEngine);\n@@ -319,1 +255,1 @@\n-            runDelegatedTasks(serverResult, serverEngine);\n+            runDelegatedTasks(serverEngine);\n@@ -329,1 +265,1 @@\n-            runDelegatedTasks(clientResult, clientEngine);\n+            runDelegatedTasks(clientEngine);\n@@ -334,1 +270,1 @@\n-            runDelegatedTasks(serverResult, serverEngine);\n+            runDelegatedTasks(serverEngine);\n@@ -406,1 +342,1 @@\n-    private void createSSLEngines(String[] serverAPs, String callbackAP,\n+    private void configureSSLEngines(String[] serverAPs, String callbackAP,\n@@ -412,1 +348,0 @@\n-        serverEngine = sslc.createSSLEngine();\n@@ -457,1 +392,0 @@\n-        clientEngine = sslc.createSSLEngine(\"client\", 80);\n@@ -472,54 +406,0 @@\n-    \/*\n-     * Create and size the buffers appropriately.\n-     *\/\n-    private void createBuffers() {\n-\n-        \/*\n-         * We'll assume the buffer sizes are the same\n-         * between client and server.\n-         *\/\n-        SSLSession session = clientEngine.getSession();\n-        int appBufferMax = session.getApplicationBufferSize();\n-        int netBufferMax = session.getPacketBufferSize();\n-\n-        \/*\n-         * We'll make the input buffers a bit bigger than the max needed\n-         * size, so that unwrap()s following a successful data transfer\n-         * won't generate BUFFER_OVERFLOWS.\n-         *\n-         * We'll use a mix of direct and indirect ByteBuffers for\n-         * tutorial purposes only.  In reality, only use direct\n-         * ByteBuffers when they give a clear performance enhancement.\n-         *\/\n-        clientIn = ByteBuffer.allocate(appBufferMax + 50);\n-        serverIn = ByteBuffer.allocate(appBufferMax + 50);\n-\n-        cTOs = ByteBuffer.allocateDirect(netBufferMax);\n-        sTOc = ByteBuffer.allocateDirect(netBufferMax);\n-\n-        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n-        serverOut = ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes());\n-    }\n-\n-    \/*\n-     * If the result indicates that we have outstanding tasks to do,\n-     * go ahead and run them in this thread.\n-     *\/\n-    private static void runDelegatedTasks(SSLEngineResult result,\n-            SSLEngine engine) throws Exception {\n-\n-        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n-            Runnable runnable;\n-            while ((runnable = engine.getDelegatedTask()) != null) {\n-                log(\"\\trunning delegated task...\");\n-                runnable.run();\n-            }\n-            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n-            if (hsStatus == HandshakeStatus.NEED_TASK) {\n-                throw new Exception(\n-                        \"handshake shouldn't need additional tasks\");\n-            }\n-            log(\"\\tnew HandshakeStatus: \" + hsStatus);\n-        }\n-    }\n-\n@@ -530,19 +410,0 @@\n-    \/*\n-     * Simple check to make sure everything came across as expected.\n-     *\/\n-    private static void checkTransfer(ByteBuffer a, ByteBuffer b)\n-            throws Exception {\n-        a.flip();\n-        b.flip();\n-\n-        if (!a.equals(b)) {\n-            throw new Exception(\"Data didn't transfer cleanly\");\n-        } else {\n-            log(\"\\tData transferred cleanly\");\n-        }\n-\n-        a.position(a.limit());\n-        b.position(b.limit());\n-        a.limit(a.capacity());\n-        b.limit(b.capacity());\n-    }\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLEngineAlpnTest.java","additions":12,"deletions":151,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *\n+ * @library \/javax\/net\/ssl\/templates\n@@ -58,7 +58,1 @@\n-public class DisabledShortDSAKeys {\n-\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n+public class DisabledShortDSAKeys extends SSLContextTemplate {\n@@ -66,1 +60,1 @@\n-    \/*\n+     \/*\n@@ -73,52 +67,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDDjCCAs2gAwIBAgIJAO5\/hbm1ByJOMAkGByqGSM44BAMwHzELMAkGA1UEBhMC\\n\" +\n-        \"VVMxEDAOBgNVBAoTB0V4YW1wbGUwHhcNMTYwMjE2MDQzNTQ2WhcNMzcwMTI2MDQz\\n\" +\n-        \"NTQ2WjAfMQswCQYDVQQGEwJVUzEQMA4GA1UEChMHRXhhbXBsZTCCAbgwggEsBgcq\\n\" +\n-        \"hkjOOAQBMIIBHwKBgQC4aSK8nBYdWJtuBkz6yoDyjZnNuGFSpDmx1ggKpLpcnPuw\\n\" +\n-        \"YKAbUhqdYhZtaIqQ4aO0T1ZS\/HuOM0zvddnMUidFNX3RUvDkvdD\/JYOnjqzCm+xW\\n\" +\n-        \"U0NFuPHZdapQY5KFk3ugkqZpHLY1StZbu0qugZOZjbBOMwB7cHAbMDuVpEr8DQIV\\n\" +\n-        \"AOi+ig+h3okFbWEE9MztiI2+DqNrAoGBAKh2EZbuWU9NoHglhVzfDUoz8CeyW6W6\\n\" +\n-        \"rUZuIOQsjWaYOeRPWX0UVAGq9ykIOfamEpurKt4H8ge\/pHaL9iazJjonMHOXG12A\\n\" +\n-        \"0lALsMDGv22zVaJzXjOBvdPzc87opr0LIVgHASKOcDYjsICKNYPlS2cL3MJoD+bj\\n\" +\n-        \"NAR67b90VBbEA4GFAAKBgQCGrkRp2tdj2mZF7Qz0tO6p3xSysbEfN6QZxOJYPTvM\\n\" +\n-        \"yIYfLV9Yoy7XaRd\/mCpJo\/dqmsZMzowtyi+u+enuVpOLKiq\/lyCktL+xUzZAjLT+\\n\" +\n-        \"9dafHlS1wR3pDSa1spo9xTEi4Ff\/DQDHcdGalBxSXX\/UdRtSecIYAp5\/fkt3QZ5v\\n\" +\n-        \"0aOBkTCBjjAdBgNVHQ4EFgQUX4qbP5PgBx1J8BJ8qEgfoKVLSnQwTwYDVR0jBEgw\\n\" +\n-        \"RoAUX4qbP5PgBx1J8BJ8qEgfoKVLSnShI6QhMB8xCzAJBgNVBAYTAlVTMRAwDgYD\\n\" +\n-        \"VQQKEwdFeGFtcGxlggkA7n+FubUHIk4wDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8E\\n\" +\n-        \"BAMCAgQwCQYHKoZIzjgEAwMwADAtAhUAkr5bINXyy\/McAx6qwhb6r0\/QJUgCFFUP\\n\" +\n-        \"CZokA4\/NqJIgq8ThpTQAE8SB\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICUjCCAhGgAwIBAgIJAIiDrs\/4W8rtMAkGByqGSM44BAMwHzELMAkGA1UEBhMC\\n\" +\n-        \"VVMxEDAOBgNVBAoTB0V4YW1wbGUwHhcNMTYwMjE2MDQzNTQ2WhcNMzUxMTAzMDQz\\n\" +\n-        \"NTQ2WjA5MQswCQYDVQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTEYMBYGA1UEAwwP\\n\" +\n-        \"d3d3LmV4YW1wbGUuY29tMIHwMIGoBgcqhkjOOAQBMIGcAkEAs6A0p3TysTtVXGSv\\n\" +\n-        \"ThR\/8GHpbL49KyWRJBMIlmLc5jl\/wxJgnL1t07p4YTOEa6ecyTFos04Z8n2GARmp\\n\" +\n-        \"zYlUywIVAJLDcf4JXhZbguRFSQdWwWhZkh+LAkBLCzh3Xvpmc\/5CDqU+QHqDcuSk\\n\" +\n-        \"5B8+ZHaHRi2KQ00ejilpF2qZpW5JdHe4m3Pggh0MIuaAGX+leM4JKlnObj14A0MA\\n\" +\n-        \"AkAYb+DYlFgStFhF1ip7rFzY8K6i\/3ellkXI2umI\/XVwxUQTHSlk5nFOep5Dfzm9\\n\" +\n-        \"pADJwuSe1qGHsHB5LpMZPVpto4GEMIGBMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgPo\\n\" +\n-        \"MB0GA1UdDgQWBBT8nsFyccF4q1dtpWE1dkNK5UiXtTAfBgNVHSMEGDAWgBRfips\/\\n\" +\n-        \"k+AHHUnwEnyoSB+gpUtKdDAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIG\\n\" +\n-        \"CCsGAQUFBwMDMAkGByqGSM44BAMDMAAwLQIUIcIlxpIwaZXdpMC+U076unR1Mp8C\\n\" +\n-        \"FQCD\/NE8O0xwq57nwFfp7tUvUHYMMA==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8, key size is 512 bits.\n-    static String targetPrivateKey =\n-        \"MIHGAgEAMIGoBgcqhkjOOAQBMIGcAkEAs6A0p3TysTtVXGSvThR\/8GHpbL49KyWR\\n\" +\n-        \"JBMIlmLc5jl\/wxJgnL1t07p4YTOEa6ecyTFos04Z8n2GARmpzYlUywIVAJLDcf4J\\n\" +\n-        \"XhZbguRFSQdWwWhZkh+LAkBLCzh3Xvpmc\/5CDqU+QHqDcuSk5B8+ZHaHRi2KQ00e\\n\" +\n-        \"jilpF2qZpW5JdHe4m3Pggh0MIuaAGX+leM4JKlnObj14BBYCFHB2Wek2g5hpNj5y\\n\" +\n-        \"RQfCc6CFO0dv\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -142,2 +84,2 @@\n-        SSLContext context = generateSSLContext(null, targetCertStr,\n-                                            targetPrivateKey);\n+        SSLContext context = createSSLContext(null,\n+                new Cert[]{Cert.CA_DSA_512}, getServerContextParameters());\n@@ -181,1 +123,2 @@\n-        SSLContext context = generateSSLContext(trustedCertStr, null, null);\n+        SSLContext context = createSSLContext(new Cert[]{Cert.CA_DSA_1024},\n+                null, getClientContextParameters());\n@@ -218,64 +161,3 @@\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-            String keyCertStr, String keySpecStr) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"DSA Export Signer\", trusedCert);\n-        }\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"DSA\");\n-            DSAPrivateKey priKey =\n-                    (DSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = null;\n-            if (trusedCert != null) {\n-                chain = new Certificate[2];\n-                chain[0] = keyCert;\n-                chain[1] = trusedCert;\n-            } else {\n-                chain = new Certificate[1];\n-                chain[0] = keyCert;\n-            }\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(enabledProtocol, tmAlgorithm, \"NewSunX509\");\n@@ -284,0 +166,4 @@\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(enabledProtocol, tmAlgorithm, \"NewSunX509\");\n+    }\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/DisabledShortDSAKeys.java","additions":15,"deletions":129,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+ *\n+ * @library \/javax\/net\/ssl\/templates\n@@ -40,2 +42,0 @@\n-import java.net.*;\n-import java.util.*;\n@@ -45,7 +45,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.util.Base64;\n@@ -54,1 +47,1 @@\n-public class ShortRSAKey512 {\n+public class ShortRSAKey512 extends SSLContextTemplate {\n@@ -69,51 +62,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTEwODE5MDE1MjE5WhcNMzIwNzI5MDE1MjE5WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n-        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAM8orG08DtF98TMSscjGsidd1ZoN4jiDpi8U\\n\" +\n-        \"ICz+9dMm1qM1d7O2T+KH3\/mxyox7Rc2ZVSCaUD0a3CkhPMnlAx8V4u0H+E9sqso6\\n\" +\n-        \"iDW3JpOyzMExvZiRgRG\/3nvp55RMIUV4vEHOZ1QbhuqG4ebN0Vz2DkRft7+flthf\\n\" +\n-        \"vDld6f5JAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLl81dnfp0wDrv0OJ1sxlWzH83Xh\\n\" +\n-        \"MGMGA1UdIwRcMFqAFLl81dnfp0wDrv0OJ1sxlWzH83XhoT+kPTA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n-        \"BQADgYEALlgaH1gWtoBZ84EW8Hu6YtGLQ\/L9zIFmHonUPZwn3Pr\/\/icR9Sqhc3\/l\\n\" +\n-        \"pVTxOINuFHLRz4BBtEylzRIOPzK3tg8XwuLb1zd0db90x3KBCiAL6E6cklGEPwLe\\n\" +\n-        \"XYMHDn9eDsaq861Tzn6ZwzMgw04zotPMoZN0mVd\/3Qca8UJFucE=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICNDCCAZ2gAwIBAgIBDDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTExMTA3MTM1NTUyWhcNMzEwNzI1MTM1NTUyWjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n-        \"BAMTCWxvY2FsaG9zdDBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQC3Pb49OSPfOD2G\\n\" +\n-        \"HSXFCFx1GJEZfqG9ZUf7xuIi\/ra5dLjPGAaoY5QF2QOa8VnOriQCXDfyXHxsuRnE\\n\" +\n-        \"OomxL7EVAgMBAAGjeDB2MAsGA1UdDwQEAwID6DAdBgNVHQ4EFgQUXNCJK3\/dtCIc\\n\" +\n-        \"xb+zlA\/JINlvs\/MwHwYDVR0jBBgwFoAUuXzV2d+nTAOu\/Q4nWzGVbMfzdeEwJwYD\\n\" +\n-        \"VR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAzANBgkqhkiG9w0B\\n\" +\n-        \"AQQFAAOBgQB2qIDUxA2caMPpGtUACZAPRUtrGssCINIfItETXJZCx\/cRuZ5sP4D9\\n\" +\n-        \"N1acoNDn0hCULe3lhXAeTC9NZ97680yJzregQMV5wATjo1FGsKY30Ma+sc\/nfzQW\\n\" +\n-        \"+h\/7RhYtoG0OTsiaDCvyhI6swkNJzSzrAccPY4+ZgU8HiDLzZTmM3Q==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8, key size is 512 bits.\n-    static String targetPrivateKey =\n-        \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n-        \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n-        \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n-        \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n-        \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n-        \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n-        \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n-        \"3fnqsTgaUs4=\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -137,2 +79,2 @@\n-        SSLContext context = generateSSLContext(null, targetCertStr,\n-                                            targetPrivateKey);\n+        SSLContext context = createSSLContext(null,\n+                new Cert[]{Cert.EE_RSA_MD5_512}, getServerContextParameters());\n@@ -177,1 +119,2 @@\n-        SSLContext context = generateSSLContext(trustedCertStr, null, null);\n+        SSLContext context = createSSLContext(new Cert[]{Cert.CA_RSA_MD5_512},\n+                null, getClientContextParameters());\n@@ -200,0 +143,10 @@\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n+    }\n+\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n+    }\n+\n@@ -210,66 +163,0 @@\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-            String keyCertStr, String keySpecStr) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-        }\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = null;\n-            if (trusedCert != null) {\n-                chain = new Certificate[2];\n-                chain[0] = keyCert;\n-                chain[1] = trusedCert;\n-            } else {\n-                chain = new Certificate[1];\n-                chain[0] = keyCert;\n-            }\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/ShortRSAKey512.java","additions":18,"deletions":131,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -73,1 +74,1 @@\n-public class ShortRSAKeyGCM {\n+public class ShortRSAKeyGCM extends SSLContextTemplate {\n@@ -88,51 +89,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTEwODE5MDE1MjE5WhcNMzIwNzI5MDE1MjE5WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n-        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAM8orG08DtF98TMSscjGsidd1ZoN4jiDpi8U\\n\" +\n-        \"ICz+9dMm1qM1d7O2T+KH3\/mxyox7Rc2ZVSCaUD0a3CkhPMnlAx8V4u0H+E9sqso6\\n\" +\n-        \"iDW3JpOyzMExvZiRgRG\/3nvp55RMIUV4vEHOZ1QbhuqG4ebN0Vz2DkRft7+flthf\\n\" +\n-        \"vDld6f5JAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLl81dnfp0wDrv0OJ1sxlWzH83Xh\\n\" +\n-        \"MGMGA1UdIwRcMFqAFLl81dnfp0wDrv0OJ1sxlWzH83XhoT+kPTA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n-        \"BQADgYEALlgaH1gWtoBZ84EW8Hu6YtGLQ\/L9zIFmHonUPZwn3Pr\/\/icR9Sqhc3\/l\\n\" +\n-        \"pVTxOINuFHLRz4BBtEylzRIOPzK3tg8XwuLb1zd0db90x3KBCiAL6E6cklGEPwLe\\n\" +\n-        \"XYMHDn9eDsaq861Tzn6ZwzMgw04zotPMoZN0mVd\/3Qca8UJFucE=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICNDCCAZ2gAwIBAgIBDDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTExMTA3MTM1NTUyWhcNMzEwNzI1MTM1NTUyWjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n-        \"BAMTCWxvY2FsaG9zdDBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQC3Pb49OSPfOD2G\\n\" +\n-        \"HSXFCFx1GJEZfqG9ZUf7xuIi\/ra5dLjPGAaoY5QF2QOa8VnOriQCXDfyXHxsuRnE\\n\" +\n-        \"OomxL7EVAgMBAAGjeDB2MAsGA1UdDwQEAwID6DAdBgNVHQ4EFgQUXNCJK3\/dtCIc\\n\" +\n-        \"xb+zlA\/JINlvs\/MwHwYDVR0jBBgwFoAUuXzV2d+nTAOu\/Q4nWzGVbMfzdeEwJwYD\\n\" +\n-        \"VR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAzANBgkqhkiG9w0B\\n\" +\n-        \"AQQFAAOBgQB2qIDUxA2caMPpGtUACZAPRUtrGssCINIfItETXJZCx\/cRuZ5sP4D9\\n\" +\n-        \"N1acoNDn0hCULe3lhXAeTC9NZ97680yJzregQMV5wATjo1FGsKY30Ma+sc\/nfzQW\\n\" +\n-        \"+h\/7RhYtoG0OTsiaDCvyhI6swkNJzSzrAccPY4+ZgU8HiDLzZTmM3Q==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8, key size is 512 bits.\n-    static String targetPrivateKey =\n-        \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n-        \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n-        \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n-        \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n-        \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n-        \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n-        \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n-        \"3fnqsTgaUs4=\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -156,2 +106,2 @@\n-        SSLContext context = generateSSLContext(null, targetCertStr,\n-                                            targetPrivateKey);\n+        SSLContext context = createSSLContext(null, new Cert[]{Cert.EE_RSA_MD5_512},\n+                getServerContextParameters());\n@@ -195,1 +145,2 @@\n-        SSLContext context = generateSSLContext(trustedCertStr, null, null);\n+       SSLContext context = createSSLContext(new Cert[]{Cert.CA_RSA_MD5_512},\n+                null, getClientContextParameters());\n@@ -229,64 +180,3 @@\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-            String keyCertStr, String keySpecStr) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-        }\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                    (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = null;\n-            if (trusedCert != null) {\n-                chain = new Certificate[2];\n-                chain[0] = keyCert;\n-                chain[1] = trusedCert;\n-            } else {\n-                chain = new Certificate[1];\n-                chain[0] = keyCert;\n-            }\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n@@ -295,0 +185,4 @@\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n+    }\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/ShortRSAKeyGCM.java","additions":14,"deletions":120,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -49,1 +50,0 @@\n-import java.net.*;\n@@ -54,2 +54,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n@@ -58,3 +56,0 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n@@ -62,1 +57,1 @@\n-public class SignatureAlgorithms {\n+public class SignatureAlgorithms extends SSLContextTemplate {\n@@ -77,125 +72,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key (DSA) used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDYTCCAyGgAwIBAgIJAK8\/gw6zg\/DPMAkGByqGSM44BAMwOzELMAkGA1UEBhMC\\n\" +\n-        \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n-        \"MB4XDTE1MTIwMzEzNTIyNVoXDTM2MTExMjEzNTIyNVowOzELMAkGA1UEBhMCVVMx\\n\" +\n-        \"DTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNlMIIB\\n\" +\n-        \"uDCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG4X+uxu5V\\n\" +\n-        \"b3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2eBfUv\/hJ\\n\" +\n-        \"cLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNAqAB9PO5Y\\n\" +\n-        \"zKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAaor8iURd82\\n\" +\n-        \"b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I81drnN0Y\\n\" +\n-        \"lyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVXW+SEGADC\\n\" +\n-        \"J1+z8uqP3lIB6ltdgOiV\/GQDgYUAAoGBAOXRppuJSGdt6AiZkb81P1DCUgIUlZFI\\n\" +\n-        \"J9GxWrjbbHDmGllMwPNhK6dU7LJKJJuYVPW+95rUGlSJEjRqSlHuyHkNb6e3e7qx\\n\" +\n-        \"tmx1\/oIyq+oLult50hBS7uBvLLR0JbIKjBzzkudL8Rjze4G\/Wq7KDM2T1JOP49tW\\n\" +\n-        \"eocCvaC8h8uQo4GtMIGqMB0GA1UdDgQWBBT17HcqLllsqnZzP+kElcGcBGmubjBr\\n\" +\n-        \"BgNVHSMEZDBigBT17HcqLllsqnZzP+kElcGcBGmubqE\/pD0wOzELMAkGA1UEBhMC\\n\" +\n-        \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n-        \"ggkArz+DDrOD8M8wDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwCQYHKoZI\\n\" +\n-        \"zjgEAwMvADAsAhQ6Y1I6LtIEBMqNo8o6GIe4LLEJuwIUbVQUKi8tvtWyRoxm8AFV\\n\" +\n-        \"0axJYUU=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String[] targetCertStr = {\n-        \/\/ DSA-SHA1\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDKTCCAumgAwIBAgIJAOy5c0b+8stFMAkGByqGSM44BAMwOzELMAkGA1UEBhMC\\n\" +\n-        \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n-        \"MB4XDTE1MTIwMzEzNTIyNVoXDTM1MDgyMDEzNTIyNVowTzELMAkGA1UEBhMCVVMx\\n\" +\n-        \"DTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVzdCBTZXJpdmNlMRIw\\n\" +\n-        \"EAYDVQQDDAlsb2NhbGhvc3QwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA8f5v4ZIx\\n\" +\n-        \"fopLuNcNF6\/NzjrgMUbhf67G7lVvdTjKGxTwDxy4fiDCKfov8gOSZlDs3TMLSNGy\\n\" +\n-        \"IZVIywURNOrXQXf2kfZ4F9S\/+Elwt8GciMES1WpX90TErzwe6XaxniZCKFDiKyw+\\n\" +\n-        \"XuGyuhL0RZiJydfSg0CoAH087ljMpt+kvtMCFQDXdZbjyuWfZQ\/8toCC2fMqGpw2\\n\" +\n-        \"0wKBgQDdG\/QaKtNsBqivyJRF3zZvkWUNN684JO6rtkil9lVXfSd5LtwFg163qb\/f\\n\" +\n-        \"\/hx9SVtuuqFuognYj4jzV2uc3RiXI3gqS7ERwHo5PB9aQhSPqu89oJCsEfxDbXds\\n\" +\n-        \"Orcce1g1o\/w6h5BTJVdb5IQYAMInX7Py6o\/eUgHqW12A6JX8ZAOBhAACgYB+zYqn\\n\" +\n-        \"jJwG4GZpBIN\/6qhzbp0flChsV+Trlu0SL0agAQzb6XdI\/4JnO87Pgbxaxh3VNAj3\\n\" +\n-        \"3+Ghr1NLBuBfTKzJ4j9msWT3EpLupkMyNtXvBYM0iyMrll67lSjMdv++wLEw35Af\\n\" +\n-        \"\/bzVcjGyA5Q0i0cuEzDmHTVfi0OydynbwSLxtKNjMGEwCwYDVR0PBAQDAgPoMB0G\\n\" +\n-        \"A1UdDgQWBBQXJI8AxM0qsYCbbkIMuI5zJ+nMEDAfBgNVHSMEGDAWgBT17HcqLlls\\n\" +\n-        \"qnZzP+kElcGcBGmubjASBgNVHREBAf8ECDAGhwR\/AAABMAkGByqGSM44BAMDLwAw\\n\" +\n-        \"LAIUXgyJ0xll4FrZAKXi8bj7Kiz+SA4CFH9WCSZIBYA9lmJkiTgRS7iM\/6IC\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ DSA-SHA224\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDLzCCAuugAwIBAgIJAOy5c0b+8stGMAsGCWCGSAFlAwQDATA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2UwHhcNMTUxMjAzMTU0NDM5WhcNMzUwODIwMTU0NDM5WjBPMQswCQYDVQQGEwJV\\n\" +\n-        \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n-        \"EjAQBgNVBAMMCWxvY2FsaG9zdDCCAbcwggEsBgcqhkjOOAQBMIIBHwKBgQDx\/m\/h\\n\" +\n-        \"kjF+iku41w0Xr83OOuAxRuF\/rsbuVW91OMobFPAPHLh+IMIp+i\/yA5JmUOzdMwtI\\n\" +\n-        \"0bIhlUjLBRE06tdBd\/aR9ngX1L\/4SXC3wZyIwRLValf3RMSvPB7pdrGeJkIoUOIr\\n\" +\n-        \"LD5e4bK6EvRFmInJ19KDQKgAfTzuWMym36S+0wIVANd1luPK5Z9lD\/y2gILZ8yoa\\n\" +\n-        \"nDbTAoGBAN0b9Boq02wGqK\/IlEXfNm+RZQ03rzgk7qu2SKX2VVd9J3ku3AWDXrep\\n\" +\n-        \"v9\/+HH1JW266oW6iCdiPiPNXa5zdGJcjeCpLsRHAejk8H1pCFI+q7z2gkKwR\/ENt\\n\" +\n-        \"d2w6txx7WDWj\/DqHkFMlV1vkhBgAwidfs\/Lqj95SAepbXYDolfxkA4GEAAKBgA81\\n\" +\n-        \"CJKEv+pwiqYgxtw\/9rkQ9748WP3mKrEC06kjUG+94\/Z9dQloNFFfj6LiO1bymc5l\\n\" +\n-        \"6QIR8XCi4Po3N80K3+WxhBGFhY+RkVWTh43JV8epb41aH2qiWErarBwBGEh8LyGT\\n\" +\n-        \"i30db+Nkz2gfvyz9H\/9T0jmYgfLEOlMCusali1qHo2MwYTALBgNVHQ8EBAMCA+gw\\n\" +\n-        \"HQYDVR0OBBYEFBqSP0S4+X+zOCTEnlp2hbAjV\/W5MB8GA1UdIwQYMBaAFPXsdyou\\n\" +\n-        \"WWyqdnM\/6QSVwZwEaa5uMBIGA1UdEQEB\/wQIMAaHBH8AAAEwCwYJYIZIAWUDBAMB\\n\" +\n-        \"AzEAMC4CFQChiRaOnAnsCSJFwdpK22jSxU\/mhQIVALgLbj\/G39+1Ej8UuSWnEQyU\\n\" +\n-        \"4DA+\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ DSA-SHA256\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDLTCCAuugAwIBAgIJAOy5c0b+8stHMAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2UwHhcNMTUxMjAzMTU0NjUxWhcNMzUwODIwMTU0NjUxWjBPMQswCQYDVQQGEwJV\\n\" +\n-        \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n-        \"EjAQBgNVBAMMCWxvY2FsaG9zdDCCAbcwggEsBgcqhkjOOAQBMIIBHwKBgQDx\/m\/h\\n\" +\n-        \"kjF+iku41w0Xr83OOuAxRuF\/rsbuVW91OMobFPAPHLh+IMIp+i\/yA5JmUOzdMwtI\\n\" +\n-        \"0bIhlUjLBRE06tdBd\/aR9ngX1L\/4SXC3wZyIwRLValf3RMSvPB7pdrGeJkIoUOIr\\n\" +\n-        \"LD5e4bK6EvRFmInJ19KDQKgAfTzuWMym36S+0wIVANd1luPK5Z9lD\/y2gILZ8yoa\\n\" +\n-        \"nDbTAoGBAN0b9Boq02wGqK\/IlEXfNm+RZQ03rzgk7qu2SKX2VVd9J3ku3AWDXrep\\n\" +\n-        \"v9\/+HH1JW266oW6iCdiPiPNXa5zdGJcjeCpLsRHAejk8H1pCFI+q7z2gkKwR\/ENt\\n\" +\n-        \"d2w6txx7WDWj\/DqHkFMlV1vkhBgAwidfs\/Lqj95SAepbXYDolfxkA4GEAAKBgEF7\\n\" +\n-        \"2qiYxGrjX4KCOy0k5nK\/RYlgLy4gYDChihQpiaa+fbA5JOBOxPWsh7rdtmJuDrEJ\\n\" +\n-        \"keacU223+DIhOKC49fa+EvhLNqo6U1oPn8n\/yvBsvvnWkcynw5KfNzaLlaPmzugh\\n\" +\n-        \"v9xl\/GhyZNAXc1QUcW3C+ceHVNrKnkfbTKZz5eRSo2MwYTALBgNVHQ8EBAMCA+gw\\n\" +\n-        \"HQYDVR0OBBYEFNMkPrt40oO9Dpy+bcbQdEvOlNlyMB8GA1UdIwQYMBaAFPXsdyou\\n\" +\n-        \"WWyqdnM\/6QSVwZwEaa5uMBIGA1UdEQEB\/wQIMAaHBH8AAAEwCwYJYIZIAWUDBAMC\\n\" +\n-        \"Ay8AMCwCFCvA2QiKSe\/n+6GqSYQwgQ\/zL5M9AhQfSiuWdMJKWpgPJKakvzhBUbMb\\n\" +\n-        \"vA==\\n\" +\n-        \"-----END CERTIFICATE-----\"};\n-\n-    \/\/ Private key in the format of PKCS#8, key size is 1024 bits.\n-    static String[] targetPrivateKey = {\n-        \/\/ For cert DSA-SHA1\n-        \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n-        \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n-        \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n-        \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n-        \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n-        \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n-        \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUOiB7J\/lrFrNduQ8nDNTe8VspoAI=\",\n-\n-        \/\/ For cert DSA-SHA224\n-        \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n-        \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n-        \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n-        \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n-        \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n-        \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n-        \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUOj9F5mxWd9W1tiLSdsOAt8BUBzE=\",\n-\n-        \/\/ For cert DSA-SHA256\n-        \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n-        \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n-        \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n-        \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n-        \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n-        \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n-        \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUQ2WGgg+OO39Aujj0e4lM4pP4\/9g=\"};\n-\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -212,0 +82,6 @@\n+    private final Cert[] SERVER_CERTS = {\n+            SSLContextTemplate.Cert.EE_DSA_SHA1_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA224_1024,\n+            SSLContextTemplate.Cert.EE_DSA_SHA256_1024,\n+    };\n+\n@@ -219,3 +95,1 @@\n-\n-        SSLContext context = generateSSLContext(\n-                null, targetCertStr, targetPrivateKey);\n+        SSLContext context = createSSLContext(null, SERVER_CERTS, getServerContextParameters());\n@@ -263,1 +137,1 @@\n-        SSLContext context = generateSSLContext(trustedCertStr, null, null);\n+        SSLContext context = createSSLContext(new Cert[]{Cert.CA_DSA_SHA1_1024}, null, getClientContextParameters());\n@@ -346,67 +220,4 @@\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-            String[] keyCertStrs, String[] keySpecStrs) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"DSA Signer\", trusedCert);\n-        }\n-\n-        if (keyCertStrs != null && keyCertStrs.length != 0) {\n-            for (int i = 0; i < keyCertStrs.length; i++) {\n-                String keyCertStr = keyCertStrs[i];\n-                String keySpecStr = keySpecStrs[i];\n-\n-                \/\/ generate the private key.\n-                PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n-                KeyFactory kf = KeyFactory.getInstance(\"DSA\");\n-                DSAPrivateKey priKey =\n-                        (DSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-                \/\/ generate certificate chain\n-                is = new ByteArrayInputStream(keyCertStr.getBytes());\n-                Certificate keyCert = cf.generateCertificate(is);\n-                is.close();\n-\n-                Certificate[] chain = null;\n-                if (trusedCert != null) {\n-                    chain = new Certificate[2];\n-                    chain[0] = keyCert;\n-                    chain[1] = trusedCert;\n-                } else {\n-                    chain = new Certificate[1];\n-                    chain[0] = keyCert;\n-                }\n-\n-                \/\/ import the key entry.\n-                ks.setKeyEntry(\"DSA Entry \" + i, priKey, passphrase, chain);\n-            }\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        if (keyCertStrs != null && keyCertStrs.length != 0) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n+    }\n@@ -414,1 +225,3 @@\n-        return ctx;\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(\"TLSv1.2\", tmAlgorithm, \"NewSunX509\");\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/SignatureAlgorithms.java","additions":18,"deletions":205,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -430,0 +430,28 @@\n+        CA_RSA_MD5_512 ( \/\/ for ShortRSAKeys512 and ShortRSAKeyGCM tests\n+                \"RSA\",\n+                \/\/ Signature Algorithm: md5WithRSAEncryption\n+                \/\/ Issuer: C = US, O = Java, OU = SunJSSE Test Serivce\n+                \/\/ Validity\n+                \/\/     Not Before: Aug 19 01:52:19 2011 GMT\n+                \/\/     Not After : Jul 29 01:52:19 2032 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     B9:7C:D5:D9:DF:A7:4C:03:AE:FD:0E:27:5B:31:95:6C:C7:F3:75:E1\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+                \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+                \"MTEwODE5MDE1MjE5WhcNMzIwNzI5MDE1MjE5WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+                \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n+                \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAM8orG08DtF98TMSscjGsidd1ZoN4jiDpi8U\\n\" +\n+                \"ICz+9dMm1qM1d7O2T+KH3\/mxyox7Rc2ZVSCaUD0a3CkhPMnlAx8V4u0H+E9sqso6\\n\" +\n+                \"iDW3JpOyzMExvZiRgRG\/3nvp55RMIUV4vEHOZ1QbhuqG4ebN0Vz2DkRft7+flthf\\n\" +\n+                \"vDld6f5JAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLl81dnfp0wDrv0OJ1sxlWzH83Xh\\n\" +\n+                \"MGMGA1UdIwRcMFqAFLl81dnfp0wDrv0OJ1sxlWzH83XhoT+kPTA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n+                \"BQADgYEALlgaH1gWtoBZ84EW8Hu6YtGLQ\/L9zIFmHonUPZwn3Pr\/\/icR9Sqhc3\/l\\n\" +\n+                \"pVTxOINuFHLRz4BBtEylzRIOPzK3tg8XwuLb1zd0db90x3KBCiAL6E6cklGEPwLe\\n\" +\n+                \"XYMHDn9eDsaq861Tzn6ZwzMgw04zotPMoZN0mVd\/3Qca8UJFucE=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"\"\n+        ),\n+\n@@ -480,0 +508,30 @@\n+        CA_DSA_512(\n+                \"DSA\",\n+                \/\/ dsaWithSHA1, 512 bits\n+                \/\/ Validity\n+                \/\/     Not Before: Feb 16 04:35:46 2016 GMT\n+                \/\/     Not After : Nov  3 04:35:46 2035 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/    5F:8A:9B:3F:93:E0:07:1D:49:F0:12:7C:A8:48:1F:A0:A5:4B:4A:74\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICUjCCAhGgAwIBAgIJAIiDrs\/4W8rtMAkGByqGSM44BAMwHzELMAkGA1UEBhMC\\n\" +\n+                \"VVMxEDAOBgNVBAoTB0V4YW1wbGUwHhcNMTYwMjE2MDQzNTQ2WhcNMzUxMTAzMDQz\\n\" +\n+                \"NTQ2WjA5MQswCQYDVQQGEwJVUzEQMA4GA1UECgwHRXhhbXBsZTEYMBYGA1UEAwwP\\n\" +\n+                \"d3d3LmV4YW1wbGUuY29tMIHwMIGoBgcqhkjOOAQBMIGcAkEAs6A0p3TysTtVXGSv\\n\" +\n+                \"ThR\/8GHpbL49KyWRJBMIlmLc5jl\/wxJgnL1t07p4YTOEa6ecyTFos04Z8n2GARmp\\n\" +\n+                \"zYlUywIVAJLDcf4JXhZbguRFSQdWwWhZkh+LAkBLCzh3Xvpmc\/5CDqU+QHqDcuSk\\n\" +\n+                \"5B8+ZHaHRi2KQ00ejilpF2qZpW5JdHe4m3Pggh0MIuaAGX+leM4JKlnObj14A0MA\\n\" +\n+                \"AkAYb+DYlFgStFhF1ip7rFzY8K6i\/3ellkXI2umI\/XVwxUQTHSlk5nFOep5Dfzm9\\n\" +\n+                \"pADJwuSe1qGHsHB5LpMZPVpto4GEMIGBMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgPo\\n\" +\n+                \"MB0GA1UdDgQWBBT8nsFyccF4q1dtpWE1dkNK5UiXtTAfBgNVHSMEGDAWgBRfips\/\\n\" +\n+                \"k+AHHUnwEnyoSB+gpUtKdDAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIG\\n\" +\n+                \"CCsGAQUFBwMDMAkGByqGSM44BAMDMAAwLQIUIcIlxpIwaZXdpMC+U076unR1Mp8C\\n\" +\n+                \"FQCD\/NE8O0xwq57nwFfp7tUvUHYMMA==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIHGAgEAMIGoBgcqhkjOOAQBMIGcAkEAs6A0p3TysTtVXGSvThR\/8GHpbL49KyWR\\n\" +\n+                \"JBMIlmLc5jl\/wxJgnL1t07p4YTOEa6ecyTFos04Z8n2GARmpzYlUywIVAJLDcf4J\\n\" +\n+                \"XhZbguRFSQdWwWhZkh+LAkBLCzh3Xvpmc\/5CDqU+QHqDcuSk5B8+ZHaHRi2KQ00e\\n\" +\n+                \"jilpF2qZpW5JdHe4m3Pggh0MIuaAGX+leM4JKlnObj14BBYCFHB2Wek2g5hpNj5y\\n\" +\n+                \"RQfCc6CFO0dv\"\n+        ),\n+\n@@ -561,0 +619,174 @@\n+        CA_DSA_SHA1_1024( \/\/ for SignatureAlgorithms test\n+                \"DSA\",\n+                \/\/ Signature Algorithm: dsaWithSHA1\n+                \/\/ Validity\n+                \/\/   Not Before: Dec  3 13:52:25 2015 GMT\n+                \/\/   Not After : Nov 12 13:52:25 2036 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     F5:EC:77:2A:2E:59:6C:AA:76:73:3F:E9:04:95:C1:9C:04:69:AE:6E\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDYTCCAyGgAwIBAgIJAK8\/gw6zg\/DPMAkGByqGSM44BAMwOzELMAkGA1UEBhMC\\n\" +\n+                \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n+                \"MB4XDTE1MTIwMzEzNTIyNVoXDTM2MTExMjEzNTIyNVowOzELMAkGA1UEBhMCVVMx\\n\" +\n+                \"DTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNlMIIB\\n\" +\n+                \"uDCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG4X+uxu5V\\n\" +\n+                \"b3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2eBfUv\/hJ\\n\" +\n+                \"cLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNAqAB9PO5Y\\n\" +\n+                \"zKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAaor8iURd82\\n\" +\n+                \"b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I81drnN0Y\\n\" +\n+                \"lyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVXW+SEGADC\\n\" +\n+                \"J1+z8uqP3lIB6ltdgOiV\/GQDgYUAAoGBAOXRppuJSGdt6AiZkb81P1DCUgIUlZFI\\n\" +\n+                \"J9GxWrjbbHDmGllMwPNhK6dU7LJKJJuYVPW+95rUGlSJEjRqSlHuyHkNb6e3e7qx\\n\" +\n+                \"tmx1\/oIyq+oLult50hBS7uBvLLR0JbIKjBzzkudL8Rjze4G\/Wq7KDM2T1JOP49tW\\n\" +\n+                \"eocCvaC8h8uQo4GtMIGqMB0GA1UdDgQWBBT17HcqLllsqnZzP+kElcGcBGmubjBr\\n\" +\n+                \"BgNVHSMEZDBigBT17HcqLllsqnZzP+kElcGcBGmubqE\/pD0wOzELMAkGA1UEBhMC\\n\" +\n+                \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n+                \"ggkArz+DDrOD8M8wDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwCQYHKoZI\\n\" +\n+                \"zjgEAwMvADAsAhQ6Y1I6LtIEBMqNo8o6GIe4LLEJuwIUbVQUKi8tvtWyRoxm8AFV\\n\" +\n+                \"0axJYUU=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"\"\n+        ),\n+\n+        EE_DSA_SHA1_1024( \/\/ for SignatureAlgorithms test\n+                \"DSA\",\n+                \/\/ Signature Algorithm: dsaWithSHA1\n+                \/\/ Validity\n+                \/\/    Not Before: Dec  3 13:52:25 2015 GMT\n+                \/\/    Not After : Aug 20 13:52:25 2035 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/    F5:EC:77:2A:2E:59:6C:AA:76:73:3F:E9:04:95:C1:9C:04:69:AE:6E\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDKTCCAumgAwIBAgIJAOy5c0b+8stFMAkGByqGSM44BAMwOzELMAkGA1UEBhMC\\n\" +\n+                \"VVMxDTALBgNVBAoTBEphdmExHTAbBgNVBAsTFFN1bkpTU0UgVGVzdCBTZXJpdmNl\\n\" +\n+                \"MB4XDTE1MTIwMzEzNTIyNVoXDTM1MDgyMDEzNTIyNVowTzELMAkGA1UEBhMCVVMx\\n\" +\n+                \"DTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVzdCBTZXJpdmNlMRIw\\n\" +\n+                \"EAYDVQQDDAlsb2NhbGhvc3QwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA8f5v4ZIx\\n\" +\n+                \"fopLuNcNF6\/NzjrgMUbhf67G7lVvdTjKGxTwDxy4fiDCKfov8gOSZlDs3TMLSNGy\\n\" +\n+                \"IZVIywURNOrXQXf2kfZ4F9S\/+Elwt8GciMES1WpX90TErzwe6XaxniZCKFDiKyw+\\n\" +\n+                \"XuGyuhL0RZiJydfSg0CoAH087ljMpt+kvtMCFQDXdZbjyuWfZQ\/8toCC2fMqGpw2\\n\" +\n+                \"0wKBgQDdG\/QaKtNsBqivyJRF3zZvkWUNN684JO6rtkil9lVXfSd5LtwFg163qb\/f\\n\" +\n+                \"\/hx9SVtuuqFuognYj4jzV2uc3RiXI3gqS7ERwHo5PB9aQhSPqu89oJCsEfxDbXds\\n\" +\n+                \"Orcce1g1o\/w6h5BTJVdb5IQYAMInX7Py6o\/eUgHqW12A6JX8ZAOBhAACgYB+zYqn\\n\" +\n+                \"jJwG4GZpBIN\/6qhzbp0flChsV+Trlu0SL0agAQzb6XdI\/4JnO87Pgbxaxh3VNAj3\\n\" +\n+                \"3+Ghr1NLBuBfTKzJ4j9msWT3EpLupkMyNtXvBYM0iyMrll67lSjMdv++wLEw35Af\\n\" +\n+                \"\/bzVcjGyA5Q0i0cuEzDmHTVfi0OydynbwSLxtKNjMGEwCwYDVR0PBAQDAgPoMB0G\\n\" +\n+                \"A1UdDgQWBBQXJI8AxM0qsYCbbkIMuI5zJ+nMEDAfBgNVHSMEGDAWgBT17HcqLlls\\n\" +\n+                \"qnZzP+kElcGcBGmubjASBgNVHREBAf8ECDAGhwR\/AAABMAkGByqGSM44BAMDLwAw\\n\" +\n+                \"LAIUXgyJ0xll4FrZAKXi8bj7Kiz+SA4CFH9WCSZIBYA9lmJkiTgRS7iM\/6IC\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n+                \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n+                \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n+                \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n+                \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n+                \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n+                \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUOiB7J\/lrFrNduQ8nDNTe8VspoAI=\"\n+        ),\n+\n+        EE_DSA_SHA224_1024( \/\/ for SignatureAlgorithms test\n+                \"DSA\",\n+                \/\/ Signature Algorithm: dsa_with_SHA224\n+                \/\/ Validity\n+                \/\/   Not Before: Dec  3 15:44:39 2015 GMT\n+                \/\/   Not After : Aug 20 15:44:39 2035 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/   F5:EC:77:2A:2E:59:6C:AA:76:73:3F:E9:04:95:C1:9C:04:69:AE:6E\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDLzCCAuugAwIBAgIJAOy5c0b+8stGMAsGCWCGSAFlAwQDATA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2UwHhcNMTUxMjAzMTU0NDM5WhcNMzUwODIwMTU0NDM5WjBPMQswCQYDVQQGEwJV\\n\" +\n+                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n+                \"EjAQBgNVBAMMCWxvY2FsaG9zdDCCAbcwggEsBgcqhkjOOAQBMIIBHwKBgQDx\/m\/h\\n\" +\n+                \"kjF+iku41w0Xr83OOuAxRuF\/rsbuVW91OMobFPAPHLh+IMIp+i\/yA5JmUOzdMwtI\\n\" +\n+                \"0bIhlUjLBRE06tdBd\/aR9ngX1L\/4SXC3wZyIwRLValf3RMSvPB7pdrGeJkIoUOIr\\n\" +\n+                \"LD5e4bK6EvRFmInJ19KDQKgAfTzuWMym36S+0wIVANd1luPK5Z9lD\/y2gILZ8yoa\\n\" +\n+                \"nDbTAoGBAN0b9Boq02wGqK\/IlEXfNm+RZQ03rzgk7qu2SKX2VVd9J3ku3AWDXrep\\n\" +\n+                \"v9\/+HH1JW266oW6iCdiPiPNXa5zdGJcjeCpLsRHAejk8H1pCFI+q7z2gkKwR\/ENt\\n\" +\n+                \"d2w6txx7WDWj\/DqHkFMlV1vkhBgAwidfs\/Lqj95SAepbXYDolfxkA4GEAAKBgA81\\n\" +\n+                \"CJKEv+pwiqYgxtw\/9rkQ9748WP3mKrEC06kjUG+94\/Z9dQloNFFfj6LiO1bymc5l\\n\" +\n+                \"6QIR8XCi4Po3N80K3+WxhBGFhY+RkVWTh43JV8epb41aH2qiWErarBwBGEh8LyGT\\n\" +\n+                \"i30db+Nkz2gfvyz9H\/9T0jmYgfLEOlMCusali1qHo2MwYTALBgNVHQ8EBAMCA+gw\\n\" +\n+                \"HQYDVR0OBBYEFBqSP0S4+X+zOCTEnlp2hbAjV\/W5MB8GA1UdIwQYMBaAFPXsdyou\\n\" +\n+                \"WWyqdnM\/6QSVwZwEaa5uMBIGA1UdEQEB\/wQIMAaHBH8AAAEwCwYJYIZIAWUDBAMB\\n\" +\n+                \"AzEAMC4CFQChiRaOnAnsCSJFwdpK22jSxU\/mhQIVALgLbj\/G39+1Ej8UuSWnEQyU\\n\" +\n+                \"4DA+\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n+                \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n+                \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n+                \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n+                \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n+                \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n+                \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUOj9F5mxWd9W1tiLSdsOAt8BUBzE=\"\n+        ),\n+\n+        EE_DSA_SHA256_1024( \/\/ for SignatureAlgorithms test\n+                \"DSA\",\n+                \/\/ Signature Algorithm: dsa_with_SHA256\n+                \/\/ Validity\n+                \/\/   Not Before: Dec  3 15:46:51 2015 GMT\n+                \/\/   Not After : Aug 20 15:46:51 2035 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/   F5:EC:77:2A:2E:59:6C:AA:76:73:3F:E9:04:95:C1:9C:04:69:AE:6E\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDLTCCAuugAwIBAgIJAOy5c0b+8stHMAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2UwHhcNMTUxMjAzMTU0NjUxWhcNMzUwODIwMTU0NjUxWjBPMQswCQYDVQQGEwJV\\n\" +\n+                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n+                \"EjAQBgNVBAMMCWxvY2FsaG9zdDCCAbcwggEsBgcqhkjOOAQBMIIBHwKBgQDx\/m\/h\\n\" +\n+                \"kjF+iku41w0Xr83OOuAxRuF\/rsbuVW91OMobFPAPHLh+IMIp+i\/yA5JmUOzdMwtI\\n\" +\n+                \"0bIhlUjLBRE06tdBd\/aR9ngX1L\/4SXC3wZyIwRLValf3RMSvPB7pdrGeJkIoUOIr\\n\" +\n+                \"LD5e4bK6EvRFmInJ19KDQKgAfTzuWMym36S+0wIVANd1luPK5Z9lD\/y2gILZ8yoa\\n\" +\n+                \"nDbTAoGBAN0b9Boq02wGqK\/IlEXfNm+RZQ03rzgk7qu2SKX2VVd9J3ku3AWDXrep\\n\" +\n+                \"v9\/+HH1JW266oW6iCdiPiPNXa5zdGJcjeCpLsRHAejk8H1pCFI+q7z2gkKwR\/ENt\\n\" +\n+                \"d2w6txx7WDWj\/DqHkFMlV1vkhBgAwidfs\/Lqj95SAepbXYDolfxkA4GEAAKBgEF7\\n\" +\n+                \"2qiYxGrjX4KCOy0k5nK\/RYlgLy4gYDChihQpiaa+fbA5JOBOxPWsh7rdtmJuDrEJ\\n\" +\n+                \"keacU223+DIhOKC49fa+EvhLNqo6U1oPn8n\/yvBsvvnWkcynw5KfNzaLlaPmzugh\\n\" +\n+                \"v9xl\/GhyZNAXc1QUcW3C+ceHVNrKnkfbTKZz5eRSo2MwYTALBgNVHQ8EBAMCA+gw\\n\" +\n+                \"HQYDVR0OBBYEFNMkPrt40oO9Dpy+bcbQdEvOlNlyMB8GA1UdIwQYMBaAFPXsdyou\\n\" +\n+                \"WWyqdnM\/6QSVwZwEaa5uMBIGA1UdEQEB\/wQIMAaHBH8AAAEwCwYJYIZIAWUDBAMC\\n\" +\n+                \"Ay8AMCwCFCvA2QiKSe\/n+6GqSYQwgQ\/zL5M9AhQfSiuWdMJKWpgPJKakvzhBUbMb\\n\" +\n+                \"vA==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAPH+b+GSMX6KS7jXDRevzc464DFG\\n\" +\n+                \"4X+uxu5Vb3U4yhsU8A8cuH4gwin6L\/IDkmZQ7N0zC0jRsiGVSMsFETTq10F39pH2\\n\" +\n+                \"eBfUv\/hJcLfBnIjBEtVqV\/dExK88Hul2sZ4mQihQ4issPl7hsroS9EWYicnX0oNA\\n\" +\n+                \"qAB9PO5YzKbfpL7TAhUA13WW48rln2UP\/LaAgtnzKhqcNtMCgYEA3Rv0GirTbAao\\n\" +\n+                \"r8iURd82b5FlDTevOCTuq7ZIpfZVV30neS7cBYNet6m\/3\/4cfUlbbrqhbqIJ2I+I\\n\" +\n+                \"81drnN0YlyN4KkuxEcB6OTwfWkIUj6rvPaCQrBH8Q213bDq3HHtYNaP8OoeQUyVX\\n\" +\n+                \"W+SEGADCJ1+z8uqP3lIB6ltdgOiV\/GQEFgIUQ2WGgg+OO39Aujj0e4lM4pP4\/9g=\"\n+        ),\n+\n+        EE_RSA_MD5_512 ( \/\/ for ShortRSAKeys512 and ShortRSAKeyGCM tests\n+                \"RSA\",\n+                \/\/ md5WithRSAEncryption\n+                \/\/ Validity\n+                \/\/     Not Before: Nov  7 13:55:52 2011 GMT\n+                \/\/     Not After : Jul 25 13:55:52 2031 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     B9:7C:D5:D9:DF:A7:4C:03:AE:FD:0E:27:5B:31:95:6C:C7:F3:75:E1\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICNDCCAZ2gAwIBAgIBDDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+                \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+                \"MTExMTA3MTM1NTUyWhcNMzEwNzI1MTM1NTUyWjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+                \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n+                \"BAMTCWxvY2FsaG9zdDBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQC3Pb49OSPfOD2G\\n\" +\n+                \"HSXFCFx1GJEZfqG9ZUf7xuIi\/ra5dLjPGAaoY5QF2QOa8VnOriQCXDfyXHxsuRnE\\n\" +\n+                \"OomxL7EVAgMBAAGjeDB2MAsGA1UdDwQEAwID6DAdBgNVHQ4EFgQUXNCJK3\/dtCIc\\n\" +\n+                \"xb+zlA\/JINlvs\/MwHwYDVR0jBBgwFoAUuXzV2d+nTAOu\/Q4nWzGVbMfzdeEwJwYD\\n\" +\n+                \"VR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAzANBgkqhkiG9w0B\\n\" +\n+                \"AQQFAAOBgQB2qIDUxA2caMPpGtUACZAPRUtrGssCINIfItETXJZCx\/cRuZ5sP4D9\\n\" +\n+                \"N1acoNDn0hCULe3lhXAeTC9NZ97680yJzregQMV5wATjo1FGsKY30Ma+sc\/nfzQW\\n\" +\n+                \"+h\/7RhYtoG0OTsiaDCvyhI6swkNJzSzrAccPY4+ZgU8HiDLzZTmM3Q==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n+                \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n+                \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n+                \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n+                \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n+                \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n+                \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n+                \"3fnqsTgaUs4=\"\n+        ),\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLContextTemplate.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"modified"}]}