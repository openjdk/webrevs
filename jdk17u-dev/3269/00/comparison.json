{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,2 +247,2 @@\n-            iis.read(((DataBufferByte)tile.getDataBuffer()).getData(),\n-                     0, height*sm.getScanlineStride());\n+            iis.readFully(((DataBufferByte)tile.getDataBuffer()).getData(),\n+                          0, height*sm.getScanlineStride());\n@@ -283,1 +283,1 @@\n-                iis.read(buf, 0, len);\n+                iis.readFully(buf, 0, len);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/wbmp\/WBMPImageReader.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug     8266435\n+ * @summary Test verifies that WBMPImageReader doesnt truncate\n+ *          the stream and reads it fully\n+ * @run     main WBMPStreamTruncateTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import javax.imageio.ImageIO;\n+import javax.imageio.stream.ImageInputStreamImpl;\n+\n+public class WBMPStreamTruncateTest\n+{\n+    static final int LIMIT = 100;\n+    static final int width = 100;\n+    static final int height = 100;\n+    public static void main(String[] args) throws IOException\n+    {\n+        String sep = System.getProperty(\"file.separator\");\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String filePath = dir+sep;\n+        BufferedImage srcImage = new\n+                BufferedImage(width, height, BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g = (Graphics2D) srcImage.getGraphics();\n+        g.setBackground(Color.WHITE);\n+        g.fillRect(0, 0, srcImage.getWidth(), srcImage.getHeight());\n+        g.dispose();\n+        \/\/ create WBMP image\n+        File imageFile = File.\n+                createTempFile(\"test\", \".wbmp\", new File(filePath));\n+        imageFile.deleteOnExit();\n+        ImageIO.write(srcImage, \"wbmp\", imageFile);\n+        BufferedImage testImg =\n+                ImageIO.read(new LimitedImageInputStream(imageFile, LIMIT));\n+        for (int x = 0; x < testImg.getWidth(); ++x)\n+        {\n+            for (int y = 0; y < testImg.getHeight(); ++y)\n+            {\n+                int i1 = testImg.getRGB(x, y);\n+                int i2 = srcImage.getRGB(x, y);\n+                if (i1 != i2)\n+                {\n+                    throw new RuntimeException(\"Stream is decoded only until \"\n+                    + \"the limit specified\");\n+                }\n+            }\n+        }\n+    }\n+\n+    static class LimitedImageInputStream extends ImageInputStreamImpl\n+    {\n+        private final RandomAccessFile raf;\n+        private final int limit;\n+\n+        public LimitedImageInputStream(File file, int limit)\n+                throws FileNotFoundException\n+        {\n+            raf = new RandomAccessFile(file, \"r\");\n+            this.limit = limit;\n+        }\n+\n+        @Override\n+        public int read() throws IOException\n+        {\n+            return raf.read();\n+        }\n+\n+        @Override\n+        public int read(byte[] b, int off, int len) throws IOException\n+        {\n+            return raf.read(b, off, Math.min(limit, len));\n+        }\n+\n+        @Override\n+        public void close() throws IOException\n+        {\n+            super.close();\n+            raf.close();\n+        }\n+\n+        @Override\n+        public void seek(long pos) throws IOException\n+        {\n+            super.seek(pos);\n+            raf.seek(pos);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/wbmp\/WBMPStreamTruncateTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}