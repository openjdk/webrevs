{"files":[{"patch":"@@ -13,1 +13,1 @@\n-    \n+\n@@ -15,1 +15,1 @@\n-    \n+\n@@ -19,1 +19,1 @@\n-        \n+\n@@ -23,1 +23,1 @@\n-    \n+\n@@ -32,1 +32,1 @@\n-   \n+\n@@ -39,1 +39,1 @@\n-The simplest form of testing provides a single `@Test` annotated method which the framework will invoke as part of the testing. The test method has no or well-defined arguments that the framework can automatically provide. \n+The simplest form of testing provides a single `@Test` annotated method which the framework will invoke as part of the testing. The test method has no or well-defined arguments that the framework can automatically provide.\n@@ -60,1 +60,1 @@\n- \n+\n@@ -63,1 +63,1 @@\n-An IR verification cannot always be performed. For example, a JTreg test could be run with _-Xint_ or not a debug build (_-XX:+PrintIdeal_ and _-XX:+PrintOptoAssembly_ are debug build flags). But also CI tier testing could add additional JTreg VM and Javaoptions flags which could make an IR rule unstable. \n+An IR verification cannot always be performed. For example, a JTreg test could be run with _-Xint_ or not a debug build (_-XX:+PrintIdeal_ and _-XX:+PrintOptoAssembly_ are debug build flags). But also CI tier testing could add additional JTreg VM and Javaoptions flags which could make an IR rule unstable.\n@@ -65,1 +65,1 @@\n-In general, the framework will only perform IR verification if the used VM flags allow a C2 compilation and if non-critical additional JTreg VM and Javaoptions are provided (see whiteflag list in [TestFramework](.\/TestFramework.java)). The user test code, however, can specify any flags which still allow an IR verification to be performed if a C2 compilation is done (expected flags by user defined `@IR` annotations). \n+In general, the framework will only perform IR verification if the used VM flags allow a C2 compilation and if non-critical additional JTreg VM and Javaoptions are provided (see whiteflag list in [TestFramework](.\/TestFramework.java)). The user test code, however, can specify any flags which still allow an IR verification to be performed if a C2 compilation is done (expected flags by user defined `@IR` annotations).\n@@ -93,0 +93,1 @@\n+- `-DReportStdout=true`: Print the standard output of the test VM.\n@@ -102,1 +103,1 @@\n-- `-TestCompilationTimeout=20`: Change the default waiting time (default: 10s) for a compilation of a normal `@Test` annotated method.\n+- `-DTestCompilationTimeout=20`: Change the default waiting time (default: 10s) for a compilation of a normal `@Test` annotated method.\n@@ -104,2 +105,3 @@\n-- `-DIgnoreCompilerControls=false`: Ignore all compiler controls applied in the framework. This includes any compiler control annotations (`@DontCompile`, `@DontInline`, `@ForceCompile`, `@ForceInline`, `@ForceCompileStaticInitializer`), the exclusion of `@Run` and `@Check` methods from compilation, and the directive to not inline `@Test` annotated methods.\n-\n+- `-DIgnoreCompilerControls=true`: Ignore all compiler controls applied in the framework. This includes any compiler control annotations (`@DontCompile`, `@DontInline`, `@ForceCompile`, `@ForceInline`, `@ForceCompileStaticInitializer`), the exclusion of `@Run` and `@Check` methods from compilation, and the directive to not inline `@Test` annotated methods.\n+- `-DExcludeRandom=true`: Randomly exclude some methods from compilation.\n+- `-DPreferCommandLineFlags=true`: Prefer flags set via the command line over flags specified by the tests.\n@@ -111,1 +113,1 @@\n-1. Warm the test up for a predefined number of times (default 2000). This can also be adapted for all tests by using `testFrameworkobject.setDefaultWarmup(100)` or for individual tests with an additional [@Warmup](.\/Warmup.java) annotation. \n+1. Warm the test up for a predefined number of times (default 2000). This can also be adapted for all tests by using `testFrameworkobject.setDefaultWarmup(100)` or for individual tests with an additional [@Warmup](.\/Warmup.java) annotation.\n@@ -119,2 +121,2 @@\n-More information about the internals and the workflow of the framework can be found in the Javadocs of [TestFramework](.\/TestFramework.java).  \n- \n+More information about the internals and the workflow of the framework can be found in the Javadocs of [TestFramework](.\/TestFramework.java).\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"}]}