{"files":[{"patch":"@@ -73,0 +73,1 @@\n+    private boolean allPermEntryFound = false;\n@@ -131,1 +132,1 @@\n-        Hashtable<String, Vector<String>> processedPermissions = null;\n+        Hashtable<String, Vector<String>> processedPermissions = new Hashtable<>();\n@@ -194,0 +195,10 @@\n+            \/*\n+             * This catches while processing the \"javax.crypto.CryptoAllPermission\"\n+             * entry, but the \"processedPermissions\" Hashtable already contains\n+             * an entry for \"javax.crypto.CryptoPermission\".\n+             *\/\n+            if (!processedPermissions.isEmpty()) {\n+                throw new ParsingException(st.lineno(), \"Inconsistent policy\");\n+            }\n+            allPermEntryFound = true;\n+\n@@ -501,2 +512,9 @@\n-        if (processedPermissions == null) {\n-            processedPermissions = new Hashtable<String, Vector<String>>();\n+        \/*\n+         * This catches while processing a \"javax.crypto.CryptoPermission\" entry, but\n+         * \"javax.crypto.CryptoAllPermission\" entry already exists.\n+         *\/\n+        if (allPermEntryFound) {\n+            return false;\n+        }\n+\n+        if (processedPermissions.isEmpty()) {\n@@ -509,4 +527,0 @@\n-        if (processedPermissions.containsKey(CryptoAllPermission.ALG_NAME)) {\n-            return false;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPolicyParser.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8286779\n+ * @summary Test limited\/default_local.policy containing inconsistent entries\n+ * @run main\/manual InconsistentEntries\n+ *\/\n+import javax.crypto.*;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.Security;\n+\n+public class InconsistentEntries {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"***********************************************************\");\n+        System.out.println(\"\/\/ This is a manual test to test a custom \\\"default_local.policy\\\" containing inconsistent entries\");\n+        System.out.println(\"\/\/ under a new subfolder \\\"$JAVA_HOME\/conf\/security\/policy\\\" directory.\");\n+        System.out.println(\"\/\/ This test fails when the policy directory \\\"testlimited\\\" or the policy \\\"default_local.policy\");\n+        System.out.println(\"\/\/ does not exist or is empty.\");\n+        System.out.println(\"\/\/ - Create a new subfolder \\\"testlimited\\\" under \\\"$JAVA_HOME\/conf\/security\/policy\\\"\");\n+        System.out.println(\"\/\/ - Place the custom \\\"default_local.policy\\\" under \\\"testlimited\\\" directory\");\n+        System.out.println(\"\/\/ - default_local.policy contains:\");\n+        System.out.println(\"\/\/   grant {\");\n+        System.out.println(\"\/\/       permission javax.crypto.CryptoAllPermission;\");\n+        System.out.println(\"\/\/       permission javax.crypto.CryptoPermission \\\"DES\\\", 64;\");\n+        System.out.println(\"\/\/   };\");\n+        System.out.println(\"***********************************************************\");\n+\n+        String JAVA_HOME = System.getProperty(\"java.home\");\n+        String FS = System.getProperty(\"file.separator\");\n+        Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                FS + \"policy\" + FS + \"testlimited\");\n+        if (!Files.exists(testlimited)) {\n+            throw new RuntimeException(\"custom policy subdirectory: testlimited does not exist\");\n+        }\n+\n+        File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n+                FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n+        if (testpolicy.length() == 0) {\n+            throw new RuntimeException(\"policy: default_local.policy does not exist or is empty\");\n+        }\n+\n+        Security.setProperty(\"crypto.policy\", \"testlimited\");\n+\n+        try {\n+            int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n+            throw new RuntimeException(\"Should fail due to inconsistent entries in policy file\");\n+        } catch (ExceptionInInitializerError e) {\n+            e.printStackTrace();\n+            System.out.println(\"Test completed successfully\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}