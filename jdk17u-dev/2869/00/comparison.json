{"files":[{"patch":"@@ -127,1 +127,4 @@\n-\n+            if (data.length < 3 || (data[1] & 0xFF) != 0x7E && (data[1] & 0xFF) != 0x7F ) {\n+                \/\/ Not enough data to determine SysEx type or SysEx type is not supported\n+                return;\n+            }\n@@ -132,0 +135,3 @@\n+                    if (data.length < 4) {\n+                        return;\n+                    }\n@@ -135,15 +141,21 @@\n-                    case 0x08:  \/\/ MIDI Tuning Standard\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01:  \/\/ BULK TUNING DUMP\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n-                            SoftTuning tuning = synth.getTuning(new Patch(0,\n-                                    data[5] & 0xFF));\n-                            tuning.load(data);\n-                            break;\n-                        }\n-                        case 0x04:  \/\/ KEY-BASED TUNING DUMP\n-                        case 0x05:  \/\/ SCALE\/OCTAVE TUNING DUMP, 1 byte format\n-                        case 0x06:  \/\/ SCALE\/OCTAVE TUNING DUMP, 2 byte format\n-                        case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (NON REAL-TIME)\n+                        case 0x08:  \/\/ MIDI Tuning Standard\n+                            if (data.length < 5) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ BULK TUNING DUMP\n+                                {\n+                                    if (data.length < 6) {\n+                                        break;\n+                                    }\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n+                                    SoftTuning tuning = synth.getTuning(new Patch(0,\n+                                            data[5] & 0xFF));\n+                                    tuning.load(data);\n+                                    break;\n+                                }\n+                                case 0x04:  \/\/ KEY-BASED TUNING DUMP\n+                                case 0x05:  \/\/ SCALE\/OCTAVE TUNING DUMP, 1 byte format\n+                                case 0x06:  \/\/ SCALE\/OCTAVE TUNING DUMP, 2 byte format\n+                                case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (NON REAL-TIME)\n@@ -151,8 +163,11 @@\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n-                            SoftTuning tuning = synth.getTuning(new Patch(\n-                                    data[5] & 0xFF, data[6] & 0xFF));\n-                            tuning.load(data);\n-                            break;\n-                        }\n-                        case 0x08:  \/\/ scale\/octave tuning 1-byte form (Non\n+                                {\n+                                    if (data.length < 7) {\n+                                        break;\n+                                    }\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n+                                    SoftTuning tuning = synth.getTuning(new Patch(\n+                                            data[5] & 0xFF, data[6] & 0xFF));\n+                                    tuning.load(data); \/\/ Check inside!\n+                                    break;\n+                                }\n+                                case 0x08:  \/\/ scale\/octave tuning 1-byte form (Non\n@@ -160,1 +175,1 @@\n-                        case 0x09:  \/\/ scale\/octave tuning 2-byte form (Non\n+                                case 0x09:  \/\/ scale\/octave tuning 2-byte form (Non\n@@ -162,47 +177,17 @@\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n-                            SoftTuning tuning = new SoftTuning(data);\n-                            int channelmask = (data[5] & 0xFF) * 16384\n-                                    + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n-                            SoftChannel[] channels = synth.channels;\n-                            for (int i = 0; i < channels.length; i++)\n-                                if ((channelmask & (1 << i)) != 0)\n-                                    channels[i].tuning = tuning;\n-                            break;\n-                        }\n-                        default:\n-                            break;\n-                        }\n-                        break;\n-                    case 0x09:  \/\/ General Midi Message\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01:  \/\/ General Midi 1 On\n-                            synth.setGeneralMidiMode(1);\n-                            reset();\n-                            break;\n-                        case 0x02:  \/\/ General Midi Off\n-                            synth.setGeneralMidiMode(0);\n-                            reset();\n-                            break;\n-                        case 0x03:  \/\/ General MidI Level 2 On\n-                            synth.setGeneralMidiMode(2);\n-                            reset();\n-                            break;\n-                        default:\n-                            break;\n-                        }\n-                        break;\n-                    case 0x0A: \/\/ DLS Message\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01:  \/\/ DLS On\n-                            if (synth.getGeneralMidiMode() == 0)\n-                                synth.setGeneralMidiMode(1);\n-                            synth.voice_allocation_mode = 1;\n-                            reset();\n-                            break;\n-                        case 0x02:  \/\/ DLS Off\n-                            synth.setGeneralMidiMode(0);\n-                            synth.voice_allocation_mode = 0;\n-                            reset();\n+                                {\n+                                    if (data.length < 8) {\n+                                        break;\n+                                    }\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n+                                    SoftTuning tuning = new SoftTuning(data);\n+                                    int channelmask = (data[5] & 0xFF) * 16384\n+                                            + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n+                                    SoftChannel[] channels = synth.channels;\n+                                    for (int i = 0; i < channels.length; i++)\n+                                        if ((channelmask & (1 << i)) != 0)\n+                                            channels[i].tuning = tuning;\n+                                    break;\n+                                }\n+                                default:\n+                                    break;\n+                            }\n@@ -210,2 +195,21 @@\n-                        case 0x03:  \/\/ DLS Static Voice Allocation Off\n-                            synth.voice_allocation_mode = 0;\n+                        case 0x09:  \/\/ General Midi Message\n+                            if (data.length < 5) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ General Midi 1 On\n+                                    synth.setGeneralMidiMode(1);\n+                                    reset();\n+                                    break;\n+                                case 0x02:  \/\/ General Midi Off\n+                                    synth.setGeneralMidiMode(0);\n+                                    reset();\n+                                    break;\n+                                case 0x03:  \/\/ General MidI Level 2 On\n+                                    synth.setGeneralMidiMode(2);\n+                                    reset();\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n@@ -213,2 +217,26 @@\n-                        case 0x04:  \/\/ DLS Static Voice Allocation On\n-                            synth.voice_allocation_mode = 1;\n+                        case 0x0A: \/\/ DLS Message\n+                            if (data.length < 5) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ DLS On\n+                                    if (synth.getGeneralMidiMode() == 0)\n+                                        synth.setGeneralMidiMode(1);\n+                                    synth.voice_allocation_mode = 1;\n+                                    reset();\n+                                    break;\n+                                case 0x02:  \/\/ DLS Off\n+                                    synth.setGeneralMidiMode(0);\n+                                    synth.voice_allocation_mode = 0;\n+                                    reset();\n+                                    break;\n+                                case 0x03:  \/\/ DLS Static Voice Allocation Off\n+                                    synth.voice_allocation_mode = 0;\n+                                    break;\n+                                case 0x04:  \/\/ DLS Static Voice Allocation On\n+                                    synth.voice_allocation_mode = 1;\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n@@ -216,0 +244,1 @@\n+\n@@ -218,5 +247,0 @@\n-                        }\n-                        break;\n-\n-                    default:\n-                        break;\n@@ -231,0 +255,3 @@\n+                    if (data.length < 4) {\n+                        return;\n+                    }\n@@ -234,29 +261,3 @@\n-                    case 0x04: \/\/ Device Control\n-\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01: \/\/ Master Volume\n-                        case 0x02: \/\/ Master Balane\n-                        case 0x03: \/\/ Master fine tuning\n-                        case 0x04: \/\/ Master coarse tuning\n-                            int val = (data[5] & 0x7F)\n-                                    + ((data[6] & 0x7F) * 128);\n-                            if (subid2 == 0x01)\n-                                setVolume(val);\n-                            else if (subid2 == 0x02)\n-                                setBalance(val);\n-                            else if (subid2 == 0x03)\n-                                setFineTuning(val);\n-                            else if (subid2 == 0x04)\n-                                setCoarseTuning(val);\n-                            break;\n-                        case 0x05: \/\/ Global Parameter Control\n-                            int ix = 5;\n-                            int slotPathLen = (data[ix++] & 0xFF);\n-                            int paramWidth = (data[ix++] & 0xFF);\n-                            int valueWidth = (data[ix++] & 0xFF);\n-                            int[] slotPath = new int[slotPathLen];\n-                            for (int i = 0; i < slotPathLen; i++) {\n-                                int msb = (data[ix++] & 0xFF);\n-                                int lsb = (data[ix++] & 0xFF);\n-                                slotPath[i] = msb * 128 + lsb;\n+                        case 0x04: \/\/ Device Control\n+                            if (data.length < 5) {\n+                                break;\n@@ -264,12 +265,52 @@\n-                            int paramCount = (data.length - 1 - ix)\n-                                    \/ (paramWidth + valueWidth);\n-                            long[] params = new long[paramCount];\n-                            long[] values = new long[paramCount];\n-                            for (int i = 0; i < paramCount; i++) {\n-                                values[i] = 0;\n-                                for (int j = 0; j < paramWidth; j++)\n-                                    params[i] = params[i] * 128\n-                                            + (data[ix++] & 0xFF);\n-                                for (int j = 0; j < valueWidth; j++)\n-                                    values[i] = values[i] * 128\n-                                            + (data[ix++] & 0xFF);\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Master Volume\n+                                case 0x02: \/\/ Master Balane\n+                                case 0x03: \/\/ Master fine tuning\n+                                case 0x04: \/\/ Master coarse tuning\n+                                    if (data.length < 7) {\n+                                        break;\n+                                    }\n+                                    int val = (data[5] & 0x7F)\n+                                            + ((data[6] & 0x7F) * 128);\n+                                    if (subid2 == 0x01)\n+                                        setVolume(val);\n+                                    else if (subid2 == 0x02)\n+                                        setBalance(val);\n+                                    else if (subid2 == 0x03)\n+                                        setFineTuning(val);\n+                                    else if (subid2 == 0x04)\n+                                        setCoarseTuning(val);\n+                                    break;\n+                                case 0x05: \/\/ Global Parameter Control\n+                                    if (data.length < 6) {\n+                                        break;\n+                                    }\n+                                    int ix = 5;\n+                                    int slotPathLen = (data[ix++] & 0xFF);\n+                                    if (data.length < slotPathLen * 2 + 8) {\n+                                        break;\n+                                    }\n+                                    int paramWidth = (data[ix++] & 0xFF);\n+                                    int valueWidth = (data[ix++] & 0xFF);\n+                                    int[] slotPath = new int[slotPathLen];\n+                                    for (int i = 0; i < slotPathLen; i++) {\n+                                        int msb = (data[ix++] & 0xFF);\n+                                        int lsb = (data[ix++] & 0xFF);\n+                                        slotPath[i] = msb * 128 + lsb;\n+                                    }\n+                                    int paramCount = (data.length - 1 - ix)\n+                                            \/ (paramWidth + valueWidth);\n+                                    if (paramCount < 1) {\n+                                        break;\n+                                    }\n+                                    long[] params = new long[paramCount];\n+                                    long[] values = new long[paramCount];\n+                                    for (int i = 0; i < paramCount; i++) {\n+                                        values[i] = 0;\n+                                        for (int j = 0; j < paramWidth; j++)\n+                                            params[i] = params[i] * 128\n+                                                    + (data[ix++] & 0xFF);\n+                                        for (int j = 0; j < valueWidth; j++)\n+                                            values[i] = values[i] * 128\n+                                                    + (data[ix++] & 0xFF);\n@@ -277,0 +318,5 @@\n+                                    }\n+                                    globalParameterControlChange(slotPath, params, values);\n+                                    break;\n+                                default:\n+                                    break;\n@@ -278,3 +324,0 @@\n-                            globalParameterControlChange(slotPath, params, values);\n-                            break;\n-                        default:\n@@ -282,2 +325,0 @@\n-                        }\n-                        break;\n@@ -285,17 +326,23 @@\n-                    case 0x08:  \/\/ MIDI Tuning Standard\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x02:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n-                            SoftTuning tuning = synth.getTuning(new Patch(0,\n-                                    data[5] & 0xFF));\n-                            tuning.load(data);\n-                            SoftVoice[] voices = synth.getVoices();\n-                            for (int i = 0; i < voices.length; i++)\n-                                if (voices[i].active)\n-                                    if (voices[i].tuning == tuning)\n-                                        voices[i].updateTuning(tuning);\n-                            break;\n-                        }\n-                        case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n+                        case 0x08:  \/\/ MIDI Tuning Standard\n+                            if (data.length < 5) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x02:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n+                                    if (data.length < 6) {\n+                                        break;\n+                                    }\n+                                    SoftTuning tuning = synth.getTuning(new Patch(0,\n+                                            data[5] & 0xFF));\n+                                    tuning.load(data);\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if (voices[i].tuning == tuning)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n+                                }\n+                                case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n@@ -303,13 +350,16 @@\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n-                            SoftTuning tuning = synth.getTuning(new Patch(\n-                                    data[5] & 0xFF, data[6] & 0xFF));\n-                            tuning.load(data);\n-                            SoftVoice[] voices = synth.getVoices();\n-                            for (int i = 0; i < voices.length; i++)\n-                                if (voices[i].active)\n-                                    if (voices[i].tuning == tuning)\n-                                        voices[i].updateTuning(tuning);\n-                            break;\n-                        }\n-                        case 0x08:  \/\/ scale\/octave tuning 1-byte form\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n+                                    if (data.length < 7) {\n+                                        break;\n+                                    }\n+                                    SoftTuning tuning = synth.getTuning(new Patch(\n+                                            data[5] & 0xFF, data[6] & 0xFF));\n+                                    tuning.load(data);\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if (voices[i].tuning == tuning)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n+                                }\n+                                case 0x08:  \/\/ scale\/octave tuning 1-byte form\n@@ -317,1 +367,1 @@\n-                        case 0x09:  \/\/ scale\/octave tuning 2-byte form\n+                                case 0x09:  \/\/ scale\/octave tuning 2-byte form\n@@ -319,32 +369,21 @@\n-                        {\n-                            \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n-                            SoftTuning tuning = new SoftTuning(data);\n-                            int channelmask = (data[5] & 0xFF) * 16384\n-                                    + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n-                            SoftChannel[] channels = synth.channels;\n-                            for (int i = 0; i < channels.length; i++)\n-                                if ((channelmask & (1 << i)) != 0)\n-                                    channels[i].tuning = tuning;\n-                            SoftVoice[] voices = synth.getVoices();\n-                            for (int i = 0; i < voices.length; i++)\n-                                if (voices[i].active)\n-                                    if ((channelmask & (1 << (voices[i].channel))) != 0)\n-                                        voices[i].updateTuning(tuning);\n-                            break;\n-                        }\n-                        default:\n-                            break;\n-                        }\n-                        break;\n-                    case 0x09:  \/\/ Control Destination Settings\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01: \/\/ Channel Pressure\n-                        {\n-                            int[] destinations = new int[(data.length - 7) \/ 2];\n-                            int[] ranges = new int[(data.length - 7) \/ 2];\n-                            int ix = 0;\n-                            for (int j = 6; j < data.length - 1; j += 2) {\n-                                destinations[ix] = data[j] & 0xFF;\n-                                ranges[ix] = data[j + 1] & 0xFF;\n-                                ix++;\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n+                                    if (data.length < 8) {\n+                                        break;\n+                                    }\n+                                    SoftTuning tuning = new SoftTuning(data);\n+                                    int channelmask = (data[5] & 0xFF) * 16384\n+                                            + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n+                                    SoftChannel[] channels = synth.channels;\n+                                    for (int i = 0; i < channels.length; i++)\n+                                        if ((channelmask & (1 << i)) != 0)\n+                                            channels[i].tuning = tuning;\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if ((channelmask & (1 << (voices[i].channel))) != 0)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n+                                }\n+                                default:\n+                                    break;\n@@ -352,4 +391,0 @@\n-                            int channel = data[5] & 0xFF;\n-                            SoftChannel softchannel = synth.channels[channel];\n-                            softchannel.mapChannelPressureToDestination(\n-                                    destinations, ranges);\n@@ -357,10 +392,3 @@\n-                        }\n-                        case 0x02: \/\/ Poly Pressure\n-                        {\n-                            int[] destinations = new int[(data.length - 7) \/ 2];\n-                            int[] ranges = new int[(data.length - 7) \/ 2];\n-                            int ix = 0;\n-                            for (int j = 6; j < data.length - 1; j += 2) {\n-                                destinations[ix] = data[j] & 0xFF;\n-                                ranges[ix] = data[j + 1] & 0xFF;\n-                                ix++;\n+                        case 0x09:  \/\/ Control Destination Settings\n+                            if (data.length < 5) {\n+                                break;\n@@ -368,15 +396,62 @@\n-                            int channel = data[5] & 0xFF;\n-                            SoftChannel softchannel = synth.channels[channel];\n-                            softchannel.mapPolyPressureToDestination(\n-                                    destinations, ranges);\n-                            break;\n-                        }\n-                        case 0x03: \/\/ Control Change\n-                        {\n-                            int[] destinations = new int[(data.length - 7) \/ 2];\n-                            int[] ranges = new int[(data.length - 7) \/ 2];\n-                            int ix = 0;\n-                            for (int j = 7; j < data.length - 1; j += 2) {\n-                                destinations[ix] = data[j] & 0xFF;\n-                                ranges[ix] = data[j + 1] & 0xFF;\n-                                ix++;\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Channel Pressure\n+                                {\n+                                    if (data.length < 8) {\n+                                        break;\n+                                    }\n+                                    int[] destinations = new int[(data.length - 6) \/ 2];\n+                                    int[] ranges = new int[(data.length - 6) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 6; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    softchannel.mapChannelPressureToDestination(\n+                                            destinations, ranges);\n+                                    break;\n+                                }\n+                                case 0x02: \/\/ Poly Pressure\n+                                {\n+                                    if (data.length < 8) {\n+                                        break;\n+                                    }\n+                                    int[] destinations = new int[(data.length - 6) \/ 2];\n+                                    int[] ranges = new int[(data.length - 6) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 6; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    softchannel.mapPolyPressureToDestination(\n+                                            destinations, ranges);\n+                                    break;\n+                                }\n+                                case 0x03: \/\/ Control Change\n+                                {\n+                                    if (data.length < 8) {\n+                                        break;\n+                                    }\n+                                    int[] destinations = new int[(data.length - 7) \/ 2];\n+                                    int[] ranges = new int[(data.length - 7) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 7; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    int control = data[6] & 0xFF;\n+                                    softchannel.mapControlToDestination(control,\n+                                            destinations, ranges);\n+                                    break;\n+                                }\n+                                default:\n+                                    break;\n@@ -384,8 +459,0 @@\n-                            int channel = data[5] & 0xFF;\n-                            SoftChannel softchannel = synth.channels[channel];\n-                            int control = data[6] & 0xFF;\n-                            softchannel.mapControlToDestination(control,\n-                                    destinations, ranges);\n-                            break;\n-                        }\n-                        default:\n@@ -393,2 +460,0 @@\n-                        }\n-                        break;\n@@ -396,13 +461,20 @@\n-                    case 0x0A:  \/\/ Key Based Instrument Control\n-                    {\n-                        subid2 = data[4] & 0xFF;\n-                        switch (subid2) {\n-                        case 0x01: \/\/ Basic Message\n-                            int channel = data[5] & 0xFF;\n-                            int keynumber = data[6] & 0xFF;\n-                            SoftChannel softchannel = synth.channels[channel];\n-                            for (int j = 7; j < data.length - 1; j += 2) {\n-                                int controlnumber = data[j] & 0xFF;\n-                                int controlvalue = data[j + 1] & 0xFF;\n-                                softchannel.controlChangePerNote(keynumber,\n-                                        controlnumber, controlvalue);\n+                        case 0x0A:  \/\/ Key Based Instrument Control\n+                        {\n+                            if (data.length < 8 || (data[4] & 0xFF) != 0x01) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Basic Message\n+                                    int channel = data[5] & 0xFF;\n+                                    int keynumber = data[6] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    for (int j = 7; j < data.length - 1; j += 2) {\n+                                        int controlnumber = data[j] & 0xFF;\n+                                        int controlvalue = data[j + 1] & 0xFF;\n+                                        softchannel.controlChangePerNote(keynumber,\n+                                                controlnumber, controlvalue);\n+                                    }\n+                                    break;\n+                                default:\n+                                    break;\n@@ -411,0 +483,1 @@\n+                        }\n@@ -413,5 +486,0 @@\n-                        }\n-                        break;\n-                    }\n-                    default:\n-                        break;\n@@ -421,1 +489,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftMainMixer.java","additions":315,"deletions":248,"binary":false,"changes":563,"status":"modified"},{"patch":"@@ -92,0 +92,4 @@\n+        if (data.length < 2) {\n+            return;\n+        }\n+\n@@ -93,0 +97,4 @@\n+            if (data.length < 4) {\n+                return;\n+            }\n+\n@@ -96,0 +104,3 @@\n+                if (data.length < 5) {\n+                    break;\n+                }\n@@ -103,1 +114,0 @@\n-                    name = new String(data, 6, 16, US_ASCII);\n@@ -105,0 +115,4 @@\n+                    if (data.length < 128 * 3 + r) {\n+                        break;\n+                    }\n+                    name = new String(data, 6, 16, US_ASCII);\n@@ -118,0 +132,3 @@\n+                    if (data.length < 7) {\n+                        break;\n+                    }\n@@ -120,0 +137,3 @@\n+                    if (data.length < ll * 4 + r) {\n+                        break;\n+                    }\n@@ -135,0 +155,3 @@\n+                    if (data.length < 407) {\n+                        break;\n+                    }\n@@ -152,0 +175,3 @@\n+                    if (data.length < 35) {\n+                        break;\n+                    }\n@@ -166,0 +192,3 @@\n+                    if (data.length < 47) {\n+                        break;\n+                    }\n@@ -180,0 +209,3 @@\n+                    if (data.length < 8) {\n+                        break;\n+                    }\n@@ -181,0 +213,3 @@\n+                    if (data.length < ll * 4 + 8) {\n+                        break;\n+                    }\n@@ -196,0 +231,3 @@\n+                    if (data.length < 20) {\n+                        break;\n+                    }\n@@ -207,0 +245,3 @@\n+                    if (data.length < 32) {\n+                        break;\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftTuning.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.sound.sampled.AudioInputStream;\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Clip;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.UnsupportedAudioFileException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\/*\n+ * @test\n+ * @key sound\n+ * @bug 8282578\n+ * @summary AIOOBE in javax.sound.sampled.Clip\n+ * @run main EmptySysExMessageTest\n+ *\/\n+\n+public class EmptySysExMessageTest {\n+    public static void main(String[] args) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String name = \"zerosysex.mid\";\n+        try {\n+            readAudioFile(dir + sep + name);\n+        } catch (Throwable t) {\n+            throw new RuntimeException(\"Invalid file \" + name\n+                    + \" caused unexpected exception during read: \"\n+                    + t + System.lineSeparator());\n+        }\n+    }\n+\n+    static void readAudioFile(String name) throws IOException {\n+        File soundFile = new File(name);\n+        Path path = Paths.get(soundFile.getAbsolutePath());\n+        byte[] samples = Files.readAllBytes(path);\n+\n+        try {\n+            AudioInputStream audioInputStream =\n+                    AudioSystem.getAudioInputStream(new ByteArrayInputStream(samples));\n+            try (Clip clip = AudioSystem.getClip()) {\n+                clip.open(audioInputStream);\n+                clip.start();\n+                Thread.sleep(1000);\n+                clip.stop();\n+            }\n+        } catch (UnsupportedAudioFileException\n+                 | LineUnavailableException\n+                 | IOException\n+                 | InterruptedException\n+                 | IllegalArgumentException\n+                 | IllegalStateException\n+                 | SecurityException expected) {\n+            \/\/ Do nothing, these types of exception are expected on invalid file\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/midi\/SysexMessage\/EmptySysExMessageTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"filename":"test\/jdk\/javax\/sound\/midi\/SysexMessage\/zerosysex.mid","binary":true,"status":"added"}]}