{"files":[{"patch":"@@ -38,3 +38,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -59,2 +56,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -83,1 +78,0 @@\n-import java.util.stream.Stream;\n@@ -85,1 +79,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -87,1 +80,0 @@\n-import static java.lang.System.arraycopy;\n@@ -89,0 +81,1 @@\n+import static java.lang.System.err;\n@@ -93,0 +86,1 @@\n+import static org.testng.Assert.assertFalse;\n@@ -181,1 +175,1 @@\n-    static final void printFailedTests(ITestContext context) {\n+    static void printFailedTests(ITestContext context) {\n@@ -184,1 +178,1 @@\n-                .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+                .collect(Collectors.toMap(CancelRequestTest::name, ITestResult::getThrowable));\n@@ -191,3 +185,3 @@\n-            FAILURES.entrySet().forEach((e) -> {\n-                out.printf(\"\\t%s: %s%n\", e.getKey(), e.getValue());\n-                e.getValue().printStackTrace(out);\n+            FAILURES.forEach((key, value) -> {\n+                out.printf(\"\\t%s: %s%n\", key, value);\n+                value.printStackTrace(out);\n@@ -329,1 +323,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                assertEquals(body, String.join(\"\", BODY.split(\"\\\\|\")));\n@@ -350,1 +344,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                assertEquals(body, String.join(\"\", BODY.split(\"\\\\|\")));\n@@ -357,1 +351,1 @@\n-                assertEquals(response.isDone(), true);\n+                assertTrue(response.isDone());\n@@ -359,5 +353,13 @@\n-                assertTrue(CancellationException.class.isAssignableFrom(wrapped.getClass()));\n-                Throwable cause = wrapped.getCause();\n-                out.println(\"CancellationException cause: \" + x);\n-                assertTrue(IOException.class.isAssignableFrom(cause.getClass()));\n-                if (cause instanceof HttpConnectTimeoutException) {\n+                Throwable cause = wrapped;\n+                if (mayInterruptIfRunning) {\n+                    assertTrue(CancellationException.class.isAssignableFrom(wrapped.getClass()),\n+                            \"Unexpected exception: \" + wrapped);\n+                    cause = wrapped.getCause();\n+                    out.println(\"CancellationException cause: \" + x);\n+                    if (cause instanceof HttpConnectTimeoutException) {\n+                        cause.printStackTrace(out);\n+                        throw new RuntimeException(\"Unexpected timeout exception\", cause);\n+                    }\n+                }\n+                if (!IOException.class.isInstance(cause)) {\n+                    out.println(\"Unexpected cause: \" + cause.getClass());\n@@ -365,1 +367,0 @@\n-                    throw new RuntimeException(\"Unexpected timeout exception\", cause);\n@@ -367,0 +368,1 @@\n+                assertTrue(IOException.class.isAssignableFrom(cause.getClass()));\n@@ -377,2 +379,2 @@\n-            assertEquals(response.isDone(), true);\n-            assertEquals(response.isCancelled(), false);\n+            assertTrue(response.isDone());\n+            assertFalse(response.isCancelled());\n@@ -380,2 +382,2 @@\n-            assertEquals(cf2.isDone(), true);\n-            assertEquals(cf2.isCancelled(), false);\n+            assertTrue(cf2.isDone());\n+            assertFalse(cf2.isCancelled());\n@@ -384,1 +386,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 1000,\n@@ -391,0 +393,2 @@\n+        assert client != null;\n+        \/\/if (!sameClient) client.close();\n@@ -407,1 +411,1 @@\n-            Iterable<byte[]> iterable = new Iterable<byte[]>() {\n+            Iterable<byte[]> iterable = new Iterable<>() {\n@@ -442,1 +446,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                assertEquals(body, String.join(\"\", BODY.split(\"\\\\|\")));\n@@ -463,1 +467,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                assertEquals(body, String.join(\"\", BODY.split(\"\\\\|\")));\n@@ -470,1 +474,1 @@\n-                assertEquals(response.isDone(), true);\n+                assertTrue(response.isDone());\n@@ -489,2 +493,2 @@\n-            assertEquals(response.isDone(), true);\n-            assertEquals(response.isCancelled(), false);\n+            assertTrue(response.isDone());\n+            assertFalse(response.isCancelled());\n@@ -492,2 +496,2 @@\n-            assertEquals(cf2.isDone(), true);\n-            assertEquals(cf2.isCancelled(), false);\n+            assertTrue(cf2.isDone());\n+            assertFalse(cf2.isCancelled());\n@@ -496,1 +500,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 1000,\n@@ -503,0 +507,2 @@\n+        assert client != null;\n+        \/\/if (!sameClient) client.close();\n@@ -518,0 +524,1 @@\n+            var uriStr = uri + \"\/post\/req=\" + i;\n@@ -520,1 +527,2 @@\n-                out.printf(\"%s Interrupting main from: %s (%s)\", now(), current, uri);\n+                out.printf(\"%s Interrupting main from: %s (%s)%n\", now(), current, uriStr);\n+                err.printf(\"%s Interrupting main from: %s (%s)%n\", now(), current, uriStr);\n@@ -531,1 +539,1 @@\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n+            HttpRequest req = HttpRequest.newBuilder(URI.create(uriStr))\n@@ -537,0 +545,1 @@\n+                out.println(\"Sending: \" + uriStr);\n@@ -541,1 +550,1 @@\n-\n+            out.println(uriStr + \": got result or exception\");\n@@ -543,1 +552,1 @@\n-                out.println(\"Got expected exception: \" + failed);\n+                out.println(uriStr + \": Got expected exception: \" + failed);\n@@ -545,0 +554,1 @@\n+                out.println(uriStr + \": got IOException: \" + failed);\n@@ -549,2 +559,2 @@\n-                if (interruptingThread.get() == main) {\n-                    out.println(\"Accepting IOException: \" + failed);\n+                if (interruptingThread.isDone() && interruptingThread.get() == main) {\n+                    out.println(uriStr + \": Accepting IOException: \" + failed);\n@@ -553,0 +563,1 @@\n+                    out.println(uriStr + \": unexpected exception: \" + failed);\n@@ -556,1 +567,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                out.println(uriStr + \": unexpected exception: \" + failed);\n@@ -558,0 +569,4 @@\n+            } else {\n+                assert failed == null;\n+                out.println(uriStr + \": got body: \" + body);\n+                assertEquals(body, String.join(\"\", BODY.split(\"\\\\|\")));\n@@ -559,0 +574,1 @@\n+            out.println(\"next iteration\");\n@@ -560,1 +576,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 2000,\n@@ -567,0 +583,2 @@\n+        assert client != null;\n+        \/\/if (!sameClient) client.close();\n","filename":"test\/jdk\/java\/net\/httpclient\/CancelRequestTest.java","additions":62,"deletions":44,"binary":false,"changes":106,"status":"modified"}]}