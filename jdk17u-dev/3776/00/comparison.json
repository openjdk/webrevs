{"files":[{"patch":"@@ -205,1 +205,0 @@\n-            SunFontManager.getInstance().deRegisterBadFont(fileFont);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFontStrike.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -503,1 +503,0 @@\n-        invalidateJavaScaler(env, scaler, NULL);\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/freetypeScaler.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.awt.GraphicsEnvironment;\n@@ -33,0 +34,2 @@\n+import java.util.HashMap;\n+import java.util.Map;\n@@ -36,1 +39,1 @@\n- * @bug 8328896\n+ * @bug 8328896 8357672\n@@ -52,0 +55,57 @@\n+    static class Key {\n+        int fontSize;\n+        double scale;\n+        boolean fm;\n+        String str;\n+\n+\n+        Key(int fs, double sc, boolean f, String s) {\n+            fontSize = fs;\n+            scale = sc;\n+            fm = f;\n+            str = s;\n+        }\n+\n+        public boolean equals(Object o) {\n+           return\n+               (o instanceof Key k) &&\n+                this.fontSize == k.fontSize &&\n+                this.scale == k.scale &&\n+                this.fm == k.fm &&\n+                this.str.equals(k.str);\n+        }\n+\n+        public int hashCode() {\n+           return fontSize + (int)scale + (fm ? 1 : 0) + str.hashCode();\n+        }\n+    }\n+\n+    static class Value {\n+        int height;\n+        double strBounds;\n+        Rectangle pixelBounds;\n+        Rectangle2D visualBounds;\n+\n+        Value(int h, double sb, Rectangle pb, Rectangle2D vb) {\n+            height = h;\n+            strBounds = sb;\n+            pixelBounds = pb;\n+            visualBounds = vb;\n+        }\n+\n+        public boolean equals(Object o) {\n+           return\n+               (o instanceof Value v) &&\n+                this.height == v.height &&\n+                this.strBounds == v.strBounds &&\n+                this.pixelBounds.equals(v.pixelBounds) &&\n+                this.visualBounds.equals(v.visualBounds);\n+        }\n+\n+        public int hashCode() {\n+           return height + (int)strBounds + pixelBounds.hashCode() + visualBounds.hashCode();\n+        }\n+    }\n+\n+    static Map<Key, Value> metricsMap = new HashMap<Key, Value>();\n+\n@@ -53,0 +113,14 @@\n+        Font[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();\n+        for (Font f : fonts) {\n+            font = f.deriveFont(Font.PLAIN, 12);\n+            System.out.println(\"Test font : \" + font);\n+            if (font.canDisplayUpTo(testString) != -1) {\n+                System.out.println(\"Skipping since cannot display test string\");\n+                continue;\n+            }\n+            metricsMap = new HashMap<Key, Value>();\n+            testFont();\n+        }\n+    }\n+\n+    static void testFont() {\n@@ -58,5 +132,5 @@\n-        runTests();\n-        test(5_000_000, 10_000, false, testString, false);\n-        test(5_000_000, 10_000, true, testString, false);\n-        test(0, 0.00000001, false, testString, false);\n-        runTests();\n+        runTests(true, false);\n+        test(5_000_000, 10_000, false, testString, false, false, false);\n+        test(5_000_000, 10_000, true, testString, false, false, false);\n+        test(0, 0.00000001, false, testString, false, false, false);\n+        runTests(false, true);\n@@ -69,1 +143,1 @@\n-    static void runTests() {\n+    static void runTests(boolean add, boolean check) {\n@@ -73,1 +147,1 @@\n-                    test(fontSize, scale, fm, testString, true);\n+                    test(fontSize, scale, fm, testString, true, add, check);\n@@ -79,1 +153,2 @@\n-    static void test(int size, double scale, boolean fm, String str, boolean checkAll) {\n+    static void test(int size, double scale, boolean fm, String str,\n+                     boolean checkAll, boolean add, boolean check) {\n@@ -117,0 +192,17 @@\n+\n+        Key k = null;\n+        Value v = null;\n+        if (add || check) {\n+             k = new Key(size, scale, fm, str);\n+             v = new Value(height, width, pixelBounds, visualBounds);\n+        }\n+        if (add) {\n+             metricsMap.put(k, v);\n+        }\n+        if (check) {\n+            Value vmap = metricsMap.get(k);\n+            if (!v.equals(vmap)) {\n+               failed = true;\n+               System.out.println(\"Values differ\");\n+            }\n+        }\n","filename":"test\/jdk\/java\/awt\/FontMetrics\/ExtremeFontSizeTest.java","additions":102,"deletions":10,"binary":false,"changes":112,"status":"modified"}]}