{"files":[{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n-#define SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-\n-\/\/ This metafunction returns true iff the type T (irrespective of CV qualifiers)\n-\/\/ is a floating point type.\n-\n-template <typename T> struct IsFloatingPoint: public FalseType {};\n-\n-template <> struct IsFloatingPoint<float>: public TrueType {};\n-template <> struct IsFloatingPoint<const float>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile float>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile float>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<double>: public TrueType {};\n-template <> struct IsFloatingPoint<const double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile double>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const long double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile long double>: public TrueType {};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISFLOATINGPOINT_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isFloatingPoint.hpp","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\n-#ifndef SHARE_METAPROGRAMMING_ISINTEGRAL_HPP\n-#define SHARE_METAPROGRAMMING_ISINTEGRAL_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-#include \"metaprogramming\/isSigned.hpp\"\n-#include \"metaprogramming\/removeCV.hpp\"\n-#include <limits>\n-\n-\/\/ This metafunction returns true iff the type T (irrespective of CV qualifiers)\n-\/\/ is an integral type. Note that this is false for enums.\n-\n-template<typename T>\n-struct IsIntegral\n-  : public IntegralConstant<bool, std::numeric_limits<typename RemoveCV<T>::type>::is_integer>\n-{};\n-\n-\/\/ This metafunction returns true iff the type T (irrespective of CV qualifiers)\n-\/\/ is a signed integral type. Note that this is false for enums.\n-\n-template<typename T>\n-struct IsSignedIntegral\n-  : public IntegralConstant<bool, IsIntegral<T>::value && IsSigned<T>::value>\n-{};\n-\n-\/\/ This metafunction returns true iff the type T (irrespective of CV qualifiers)\n-\/\/ is an unsigned integral type. Note that this is false for enums.\n-\n-template<typename T>\n-struct IsUnsignedIntegral\n-  : public IntegralConstant<bool, IsIntegral<T>::value && !IsSigned<T>::value>\n-{};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISINTEGRAL_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isIntegral.hpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -34,2 +34,0 @@\n-#include \"metaprogramming\/isFloatingPoint.hpp\"\n-#include \"metaprogramming\/isIntegral.hpp\"\n@@ -1084,2 +1082,2 @@\n-                   (IsPointer<T>::value || IsIntegral<T>::value) ||\n-                    IsFloatingPoint<T>::value)); \/\/ not allowed primitive type\n+                   (IsPointer<T>::value || std::is_integral<T>::value) ||\n+                    std::is_floating_point<T>::value)); \/\/ not allowed primitive type\n@@ -1204,2 +1202,2 @@\n-                   (IsSame<T, void>::value || IsIntegral<T>::value) ||\n-                    IsFloatingPoint<T>::value)); \/\/ arraycopy allows type erased void elements\n+                   (IsSame<T, void>::value || std::is_integral<T>::value) ||\n+                    std::is_floating_point<T>::value)); \/\/ arraycopy allows type erased void elements\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/isIntegral.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"metaprogramming\/isSigned.hpp\"\n@@ -511,1 +511,1 @@\n-  typename EnableIf<IsIntegral<T>::value || IsPointer<T>::value>::type>\n+  typename EnableIf<std::is_integral<T>::value || IsPointer<T>::value>::type>\n@@ -563,1 +563,1 @@\n-  typename EnableIf<IsIntegral<T>::value>::type>\n+  typename EnableIf<std::is_integral<T>::value>::type>\n@@ -628,1 +628,1 @@\n-  STATIC_ASSERT(IsPointer<D>::value || IsIntegral<D>::value);\n+  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n@@ -635,1 +635,1 @@\n-  STATIC_ASSERT(IsPointer<D>::value || IsIntegral<D>::value);\n+  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n@@ -644,2 +644,2 @@\n-  STATIC_ASSERT(IsPointer<D>::value || IsIntegral<D>::value);\n-  STATIC_ASSERT(IsIntegral<I>::value);\n+  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n+  STATIC_ASSERT(std::is_integral<I>::value);\n@@ -887,2 +887,2 @@\n-  typename EnableIf<IsIntegral<I>::value &&\n-                    IsIntegral<D>::value &&\n+  typename EnableIf<std::is_integral<I>::value &&\n+                    std::is_integral<D>::value &&\n@@ -905,1 +905,1 @@\n-  typename EnableIf<IsIntegral<I>::value && (sizeof(I) <= sizeof(P*))>::type>\n+  typename EnableIf<std::is_integral<I>::value && (sizeof(I) <= sizeof(P*))>::type>\n@@ -980,1 +980,1 @@\n-  typename EnableIf<IsIntegral<T>::value>::type>\n+  typename EnableIf<std::is_integral<T>::value>::type>\n@@ -1115,1 +1115,1 @@\n-  typename EnableIf<IsIntegral<T>::value>::type>\n+  typename EnableIf<std::is_integral<T>::value>::type>\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/isIntegral.hpp\"\n@@ -35,0 +34,2 @@\n+#include <type_traits>\n+\n@@ -50,1 +51,1 @@\n-  STATIC_ASSERT(IsIntegral<T>::value);\n+  STATIC_ASSERT(std::is_integral<T>::value);\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isFloatingPoint.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsFloatingPointTest: AllStatic {\n-  STATIC_ASSERT(IsFloatingPoint<float>::value);\n-  STATIC_ASSERT(IsFloatingPoint<double>::value);\n-  STATIC_ASSERT(IsFloatingPoint<long double>::value);\n-\n-  STATIC_ASSERT(IsFloatingPoint<double const>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<double&>::value);\n-\n-  STATIC_ASSERT(!IsFloatingPoint<int>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<unsigned int>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<signed int>::value);\n-\n-  class A: AllStatic {};\n-  STATIC_ASSERT(!IsFloatingPoint<A>::value);\n-  STATIC_ASSERT(!IsFloatingPoint<A*>::value);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isFloatingPoint.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isIntegral.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsIntegralTest: AllStatic {\n-  class A: AllStatic {};\n-\n-  static const bool ii_voidptr = IsIntegral<void*>::value;\n-  STATIC_ASSERT(!ii_voidptr);\n-\n-  static const bool ii_Aptr = IsIntegral<A*>::value;\n-  STATIC_ASSERT(!ii_Aptr);\n-\n-  static const bool ii_cAptr = IsIntegral<const A*>::value;\n-  STATIC_ASSERT(!ii_cAptr);\n-\n-  static const bool ii_vAptr = IsIntegral<volatile A*>::value;\n-  STATIC_ASSERT(!ii_vAptr);\n-\n-  static const bool ii_Avptr = IsIntegral<A* volatile>::value;\n-  STATIC_ASSERT(!ii_Avptr);\n-\n-  static const bool ii_intptrt = IsIntegral<intptr_t>::value;\n-  STATIC_ASSERT(ii_intptrt);\n-\n-  static const bool ii_char = IsIntegral<char>::value;\n-  STATIC_ASSERT(ii_char);\n-\n-  static const bool ii_cintptrt = IsIntegral<const intptr_t>::value;\n-  STATIC_ASSERT(ii_cintptrt);\n-\n-  static const bool ii_vintptrt = IsIntegral<volatile intptr_t>::value;\n-  STATIC_ASSERT(ii_vintptrt);\n-\n-  static const bool ii_cvintptrt = IsIntegral<const volatile intptr_t>::value;\n-  STATIC_ASSERT(ii_cvintptrt);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isIntegral.cpp","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"}]}