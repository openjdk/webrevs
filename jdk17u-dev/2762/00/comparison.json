{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,9 @@\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import jdk.internal.org.objectweb.asm.ClassReader;\n+import jdk.internal.org.objectweb.asm.ClassVisitor;\n+import jdk.internal.org.objectweb.asm.FieldVisitor;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n+\n@@ -43,1 +52,1 @@\n-    native static void check(int i, Class cls);\n+    native static void check(Class cls, String[] expectedFields);\n@@ -55,11 +64,11 @@\n-            check(0, Class.forName(InnerClass1.class.getName()));\n-            check(1, Class.forName(InnerInterface.class.getName()));\n-            check(2, Class.forName(InnerClass2.class.getName()));\n-            check(3, Class.forName(OuterClass1.class.getName()));\n-            check(4, Class.forName(OuterClass2.class.getName()));\n-            check(5, Class.forName(OuterClass3.class.getName()));\n-            check(6, Class.forName(OuterInterface1.class.getName()));\n-            check(7, Class.forName(OuterInterface2.class.getName()));\n-            check(8, Class.forName(OuterClass4.class.getName()));\n-            check(9, Class.forName(OuterClass5.class.getName()));\n-        } catch (ClassNotFoundException e) {\n+            check(Class.forName(InnerClass1.class.getName()));\n+            check(Class.forName(InnerInterface.class.getName()));\n+            check(Class.forName(InnerClass2.class.getName()));\n+            check(Class.forName(OuterClass1.class.getName()));\n+            check(Class.forName(OuterClass2.class.getName()));\n+            check(Class.forName(OuterClass3.class.getName()));\n+            check(Class.forName(OuterInterface1.class.getName()));\n+            check(Class.forName(OuterInterface2.class.getName()));\n+            check(Class.forName(OuterClass4.class.getName()));\n+            check(Class.forName(OuterClass5.class.getName()));\n+        } catch (Exception e) {\n@@ -71,0 +80,42 @@\n+\n+    static void check(Class cls) throws Exception {\n+        FieldExplorer explorer = new FieldExplorer(cls);\n+        List<String> fields = explorer.get();\n+        check(cls, fields.toArray(new String[0]));\n+    }\n+\n+    \/\/ helper class to get list of the class fields\n+    \/\/ in the order they appear in the class file\n+    static class FieldExplorer extends ClassVisitor {\n+        private final Class cls;\n+        private List<String> fieldNameAndSig = new ArrayList<>();\n+        private FieldExplorer(Class cls) {\n+            super(Opcodes.ASM7);\n+            this.cls = cls;\n+        }\n+\n+        @Override\n+        public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\n+            System.out.println(\"  field '\" + name + \"', type = \" + descriptor);\n+            fieldNameAndSig.add(name);\n+            fieldNameAndSig.add(descriptor);\n+            return super.visitField(access, name, descriptor, signature, value);\n+        }\n+\n+        private InputStream getClassBytes() throws Exception {\n+            String clsName = cls.getName();\n+            String clsPath = clsName.replace('.', '\/') + \".class\";\n+            return cls.getClassLoader().getResourceAsStream(clsPath);\n+        }\n+\n+        \/\/ each field is represented by 2 Strings in the list: name and type descriptor\n+        public List<String> get() throws Exception {\n+            System.out.println(\"Class \" + cls.getName());\n+            try (InputStream classBytes = getClassBytes()) {\n+                ClassReader classReader = new ClassReader(classBytes);\n+                classReader.accept(this, 0);\n+            }\n+            return fieldNameAndSig;\n+        }\n+    }\n+\n@@ -122,0 +173,1 @@\n+\/\/ class with multiple fields to verify correctness of the field order\n@@ -124,0 +176,4 @@\n+    String fld_s1 = \"str\";\n+    int fld_i2 = 2;\n+    String fld_s2 = \"str2\";\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007.java","additions":69,"deletions":13,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,3 @@\n- *     The test checks if the function returns the expected list of fields.\n- *     That is the field list contains only directly declared (not inherited)\n- *     fields.\n+ *     The test checks if the function returns the expected list of fields:\n+ *         - the list contains only directly declared (not inherited) fields;\n+ *         - fields are returned in the order they occur in the class file.\n@@ -48,0 +48,1 @@\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007\/TestDescription.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,11 +36,0 @@\n-typedef struct {\n-    const char *name;\n-    const char *sig;\n-} fld_info;\n-\n-typedef struct {\n-    const char *name;\n-    jint fcount;\n-    fld_info *flds;\n-} class_info;\n-\n@@ -49,50 +38,17 @@\n-static jboolean printdump = JNI_FALSE;\n-\n-static fld_info f0[] = {\n-    { \"fld_1\", \"Ljava\/lang\/String;\" }\n-};\n-\n-static fld_info f1[] = {\n-    { \"fld_n1\", \"I\" }\n-};\n-\n-static fld_info f2[] = {\n-    { \"fld_n2\", \"I\" }\n-};\n-\n-static fld_info f4[] = {\n-    { \"fld_o2\", \"I\" }\n-};\n-\n-static fld_info f5[] = {\n-    { \"fld_o3\", \"I\" }\n-};\n-\n-static fld_info f6[] = {\n-    { \"fld_i1\", \"I\" }\n-};\n-\n-static fld_info f7[] = {\n-    { \"fld_i2\", \"I\" }\n-};\n-\n-static fld_info f8[] = {\n-    { \"fld_i2\", \"I\" }\n-};\n-\n-static fld_info f9[] = {\n-    { \"fld_i1\", \"I\" }\n-};\n-\n-static class_info classes[] = {\n-    { \"InnerClass1\", 1, f0 },\n-    { \"InnerInterface\", 1, f1 },\n-    { \"InnerClass2\", 1, f2 },\n-    { \"OuterClass1\", 0, NULL },\n-    { \"OuterClass2\", 1, f4 },\n-    { \"OuterClass3\", 1, f5 },\n-    { \"OuterInterface1\", 1, f6 },\n-    { \"OuterInterface2\", 1, f7 },\n-    { \"OuterClass4\", 1, f8 },\n-    { \"OuterClass5\", 1, f9 }\n-};\n+\n+\n+\/\/ compares 'value' with jobject_arr[index]\n+static bool equals_str(JNIEnv *env, const char *value, jobjectArray jobject_arr, jint index) {\n+    jstring jstr = (jstring)env->GetObjectArrayElement(jobject_arr, index);\n+    const char* utf = env->GetStringUTFChars(jstr, NULL);\n+    bool res = false;\n+    if (utf != NULL) {\n+        res = strcmp(value, utf) == 0;\n+        env->ReleaseStringUTFChars(jstr, utf);\n+    } else {\n+        printf(\"GetStringUTFChars failed\\n\");\n+        result = STATUS_FAILED;\n+    }\n+    env->DeleteLocalRef(jstr);\n+    return res;\n+}\n@@ -114,4 +70,0 @@\n-    if (options != NULL && strcmp(options, \"printdump\") == 0) {\n-        printdump = JNI_TRUE;\n-    }\n-\n@@ -128,1 +80,1 @@\n-Java_nsk_jvmti_GetClassFields_getclfld007_check(JNIEnv *env, jclass cls, jint i, jclass clazz) {\n+Java_nsk_jvmti_GetClassFields_getclfld007_check(JNIEnv *env, jclass cls, jclass clazz, jobjectArray fieldArr) {\n@@ -132,1 +84,1 @@\n-    char *name, *sig, *generic;\n+    char *name, *sig;\n@@ -137,0 +89,1 @@\n+        fflush(0);\n@@ -141,3 +94,2 @@\n-    if (printdump == JNI_TRUE) {\n-        printf(\">>> %s:\\n\", classes[i].name);\n-    }\n+    \/\/ fieldArr contains 2 elements for each field\n+    jint field_count = env->GetArrayLength(fieldArr) \/ 2;\n@@ -147,2 +99,3 @@\n-        printf(\"(GetClassFields#%d) unexpected error: %s (%d)\\n\",\n-               i, TranslateError(err), err);\n+        printf(\"GetClassFields unexpected error: %s (%d)\\n\",\n+               TranslateError(err), err);\n+        fflush(0);\n@@ -153,3 +106,3 @@\n-    if (fcount != classes[i].fcount) {\n-        printf(\"(%d) wrong number of fields: %d, expected: %d\\n\",\n-               i, fcount, classes[i].fcount);\n+    if (fcount != field_count) {\n+        printf(\"wrong number of fields: %d, expected: %d\\n\",\n+               fcount, field_count);\n@@ -160,21 +113,18 @@\n-            printf(\"(%d:%d) fieldID = null\\n\", i, j);\n-        } else {\n-            err = jvmti->GetFieldName(clazz, fields[j],\n-                &name, &sig, &generic);\n-            if (err != JVMTI_ERROR_NONE) {\n-                printf(\"(GetFieldName#%d:%d) unexpected error: %s (%d)\\n\",\n-                       i, j, TranslateError(err), err);\n-            } else {\n-                if (printdump == JNI_TRUE) {\n-                    printf(\">>>   [%d]: %s, sig = \\\"%s\\\"\\n\", j, name, sig);\n-                }\n-                if ((j < classes[i].fcount) &&\n-                       (name == NULL || sig == NULL ||\n-                        strcmp(name, classes[i].flds[j].name) != 0 ||\n-                        strcmp(sig, classes[i].flds[j].sig) != 0)) {\n-                    printf(\"(%d:%d) wrong field: \\\"%s%s\\\"\", i, j, name, sig);\n-                    printf(\", expected: \\\"%s%s\\\"\\n\",\n-                           classes[i].flds[j].name, classes[i].flds[j].sig);\n-                    result = STATUS_FAILED;\n-                }\n-            }\n+            printf(\"(%d) fieldID = null\\n\", j);\n+            result = STATUS_FAILED;\n+            continue;\n+        }\n+        err = jvmti->GetFieldName(clazz, fields[j], &name, &sig, NULL);\n+        if (err != JVMTI_ERROR_NONE) {\n+            printf(\"(GetFieldName#%d) unexpected error: %s (%d)\\n\",\n+                   j, TranslateError(err), err);\n+            result = STATUS_FAILED;\n+            continue;\n+        }\n+        printf(\">>>   [%d]: %s, sig = \\\"%s\\\"\\n\", j, name, sig);\n+        if ((j < field_count) &&\n+               (name == NULL || sig == NULL ||\n+                !equals_str(env, name, fieldArr, j * 2) ||\n+                !equals_str(env, sig, fieldArr, j * 2 + 1))) {\n+            printf(\"(%d) wrong field: \\\"%s%s\\\"\", j, name, sig);\n+            result = STATUS_FAILED;\n@@ -182,0 +132,2 @@\n+        jvmti->Deallocate((unsigned char *)name);\n+        jvmti->Deallocate((unsigned char *)sig);\n@@ -183,0 +135,1 @@\n+    fflush(0);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007\/getclfld007.cpp","additions":50,"deletions":97,"binary":false,"changes":147,"status":"modified"}]}