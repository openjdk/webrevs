{"files":[{"patch":"@@ -0,0 +1,214 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.event.MouseMotionListener;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4613903\n+ * @summary verifies that mouse events are not dispatched during drag\n+ * @key headful\n+ * @run main MouseEventAfterStartDragTest\n+ *\/\n+\n+public final class MouseEventAfterStartDragTest implements AWTEventListener {\n+    final Frame frame = new Frame();\n+    volatile Point srcPoint;\n+    volatile Dimension d;\n+    volatile MouseEvent lastMouseEvent = null;\n+    volatile boolean passed = true;\n+    final DragSource dragSource = DragSource.getDefaultDragSource();\n+    final Transferable transferable = new StringSelection(\"TEXT\");\n+\n+    final MouseMotionListener mouseMotionListener = new MouseMotionAdapter() {\n+        public void mouseDragged(MouseEvent e) {\n+            System.out.println(\"mouseDragged: \" + e\n+                    + \", hash:\" + e.hashCode());\n+            if (lastMouseEvent != null && !e.equals(lastMouseEvent)) {\n+                System.out.println(\"Unexpected: \" + e\n+                        + \", hash:\" + e.hashCode());\n+                passed = false;\n+            }\n+        }\n+    };\n+\n+    final DragSourceListener dragSourceListener = new DragSourceAdapter() {\n+        public void dragDropEnd(DragSourceDragEvent dsde) {\n+            System.out.println(\"dragDropEnd: \" + dsde);\n+            lastMouseEvent = null;\n+        }\n+    };\n+\n+    final DragGestureListener dragGestureListener = new DragGestureListener() {\n+        public void dragGestureRecognized(DragGestureEvent dge) {\n+            System.out.println(\"dragGestureRecognized: \" + dge);\n+            Object[] events = dge.toArray();\n+            Object lastEvent = events[events.length - 1];\n+            if (lastEvent instanceof MouseEvent) {\n+                lastMouseEvent = (MouseEvent) lastEvent;\n+            }\n+            System.out.println(\"The last mouse event: \" + lastMouseEvent\n+                    + \", hash:\" + lastMouseEvent.hashCode());\n+            dge.startDrag(null, transferable, dragSourceListener);\n+        }\n+    };\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+    volatile Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"awt.dnd.drag.threshold\", \"0\");\n+        MouseEventAfterStartDragTest app = new MouseEventAfterStartDragTest();\n+        try {\n+            app.createAndShowGUI();\n+            app.test();\n+        } finally {\n+            app.dispose();\n+        }\n+    }\n+\n+    public void createAndShowGUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame.setTitle(\"Test frame\");\n+            frame.setBounds(100, 100, 200, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.addMouseMotionListener(mouseMotionListener);\n+            dragSource.createDefaultDragGestureRecognizer(frame, DnDConstants.ACTION_COPY_OR_MOVE,\n+                    dragGestureListener);\n+\n+            frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void test() throws Exception {\n+        final Robot robot = new Robot();\n+        robot.setAutoDelay(45);\n+        robot.waitForIdle();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            srcPoint = frame.getLocationOnScreen();\n+            d = frame.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, srcPoint, frame)) {\n+            System.err.println(\"WARNING: Couldn't locate source frame.\");\n+            return;\n+        }\n+\n+        final Point dstPoint = new Point(srcPoint);\n+        dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+        if (!pointInComponent(robot, dstPoint, frame)) {\n+            System.err.println(\"WARNING: Couldn't locate target frame.\");\n+            return;\n+        }\n+\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.delay(250);\n+        System.out.println(\"srcPoint = \" + srcPoint);\n+        for (; !srcPoint.equals(dstPoint);\n+                srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            System.out.println(\"srcPoint = \" + srcPoint);\n+        }\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        System.out.println(\"done\");\n+        robot.waitForIdle();\n+        robot.delay(MOUSE_RELEASE_TIMEOUT);\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+\n+    public void dispose() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component) e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+            throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/MouseEventAfterStartDragTest\/MouseEventAfterStartDragTest.java","additions":214,"deletions":0,"binary":false,"changes":214,"status":"added"}]}