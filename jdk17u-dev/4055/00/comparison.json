{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-    int invocation = 1;\n@@ -94,6 +93,9 @@\n-            OutputStream os = t.getResponseBody();\n-            PrintStream p = new PrintStream (os);\n-            p.println (\"<h2>Directory listing for: \" + path+ \"<\/h2>\");\n-            p.println (\"<ul>\");\n-            for (int i=0; i<list.length; i++) {\n-                p.println (\"<li><a href=\\\"\"+list[i]+\"\\\">\"+list[i]+\"<\/a><\/li>\");\n+            try (final OutputStream os = t.getResponseBody();\n+                 final PrintStream p = new PrintStream (os)) {\n+                p.println(\"<h2>Directory listing for: \" + path + \"<\/h2>\");\n+                p.println(\"<ul>\");\n+                for (int i = 0; i < list.length; i++) {\n+                    p.println(\"<li><a href=\\\"\" + list[i] + \"\\\">\" + list[i] + \"<\/a><\/li>\");\n+                }\n+                p.println(\"<\/ul><p><hr>\");\n+                p.flush();\n@@ -101,3 +103,0 @@\n-            p.println (\"<\/ul><p><hr>\");\n-            p.flush();\n-            p.close();\n@@ -112,2 +111,0 @@\n-            OutputStream os = t.getResponseBody();\n-            FileInputStream fis = new FileInputStream (f);\n@@ -115,1 +112,2 @@\n-            try {\n+            try (final OutputStream os = t.getResponseBody();\n+                 final FileInputStream fis = new FileInputStream (f)) {\n@@ -125,2 +123,0 @@\n-            fis.close();\n-            os.close();\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FileServerHandler.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -24,13 +24,0 @@\n-\/*\n- * @test\n- * @bug 6270015\n- * @library \/test\/lib\n- * @build jdk.test.lib.Asserts\n- *        jdk.test.lib.Utils\n- *        jdk.test.lib.net.SimpleSSLContext\n- *        jdk.test.lib.net.URIBuilder\n- * @run main\/othervm Test12\n- * @run main\/othervm -Djava.net.preferIPv6Addresses=true Test12\n- * @summary Light weight HTTP server\n- *\/\n-\n@@ -41,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -52,3 +41,12 @@\n-\/* basic http\/s connectivity test\n- * Tests:\n- *      - same as Test1, but in parallel\n+\/*\n+ * @test\n+ * @bug 6270015 8359477\n+ * @summary Light weight HTTP server - basic http\/s connectivity test, same as Test1,\n+ *          but in parallel\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.net.URIBuilder\n+ * @run main\/othervm Test12\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true Test12\n@@ -56,1 +54,0 @@\n-\n@@ -64,2 +61,0 @@\n-    static boolean fail = false;\n-\n@@ -69,1 +64,0 @@\n-        ExecutorService executor=null;\n@@ -72,0 +66,1 @@\n+        final ExecutorService executor = Executors.newCachedThreadPool();\n@@ -83,1 +78,0 @@\n-            executor = Executors.newCachedThreadPool();\n@@ -93,1 +87,1 @@\n-            Runner r[] = new Runner[8];\n+            final Runner[] r = new Runner[8];\n@@ -102,3 +96,10 @@\n-            start (r);\n-            join (r);\n-            System.out.println (\"OK\");\n+            \/\/ submit the tasks\n+            final List<Future<Void>> futures = new ArrayList<>();\n+            for (Runner runner : r) {\n+                futures.add(executor.submit(runner));\n+            }\n+            \/\/ wait for the tasks' completion\n+            for (Future<Void> f : futures) {\n+                f.get();\n+            }\n+            System.out.println (\"All \" + futures.size() + \" tasks completed successfully\");\n@@ -106,1 +107,1 @@\n-            if (s1 != null)\n+            if (s1 != null) {\n@@ -108,1 +109,2 @@\n-            if (s2 != null)\n+            }\n+            if (s2 != null) {\n@@ -110,2 +112,22 @@\n-            if (executor != null)\n-                executor.shutdown ();\n+            }\n+            boolean terminated = executor.isTerminated();\n+            if (!terminated) {\n+                executor.shutdown();\n+                boolean interrupted = false;\n+                while (!terminated) {\n+                    try {\n+                        terminated = executor.awaitTermination(1L, TimeUnit.DAYS);\n+                    } catch (InterruptedException e) {\n+                        if (!interrupted) {\n+                            executor.shutdownNow();\n+                            interrupted = true;\n+                        }\n+                    }\n+                }\n+                if (interrupted) {\n+                    Thread.currentThread().interrupt();\n+                }\n+            }\n+            \/\/ it's OK to delete these files since the server side handlers\n+            \/\/ serving these files have completed (guaranteed by the completion of Executor.close())\n+            System.out.println(\"deleting \" + smallFilePath);\n@@ -113,0 +135,1 @@\n+            System.out.println(\"deleting \" + largeFilePath);\n@@ -117,16 +140,1 @@\n-    static void start (Runner[] x) {\n-        for (int i=0; i<x.length; i++) {\n-            x[i].start();\n-        }\n-    }\n-\n-    static void join (Runner[] x) {\n-        for (int i=0; i<x.length; i++) {\n-            try {\n-                x[i].join();\n-            } catch (InterruptedException e) {}\n-        }\n-    }\n-\n-\n-    static class Runner extends Thread {\n+    static class Runner implements Callable<Void> {\n@@ -139,1 +147,1 @@\n-        Runner (boolean fixedLen, String protocol, int port, Path filePath) {\n+        Runner(boolean fixedLen, String protocol, int port, Path filePath) {\n@@ -146,43 +154,20 @@\n-        public void run () {\n-            try {\n-                URL url = URIBuilder.newBuilder()\n-                          .scheme(protocol)\n-                          .loopback()\n-                          .port(port)\n-                          .path(\"\/\" + filePath.getFileName())\n-                          .toURL();\n-                HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n-                if (urlc instanceof HttpsURLConnection) {\n-                    HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n-                    urlcs.setHostnameVerifier (new HostnameVerifier () {\n-                        public boolean verify (String s, SSLSession s1) {\n-                            return true;\n-                        }\n-                    });\n-                    urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n-                }\n-                byte [] buf = new byte [4096];\n-\n-                if (fixedLen) {\n-                    urlc.setRequestProperty (\"XFixed\", \"yes\");\n-                }\n-                InputStream is = urlc.getInputStream();\n-                File temp = File.createTempFile (\"Test1\", null);\n-                temp.deleteOnExit();\n-                OutputStream fout = new BufferedOutputStream (new FileOutputStream(temp));\n-                int c, count = 0;\n-                while ((c=is.read(buf)) != -1) {\n-                    count += c;\n-                    fout.write (buf, 0, c);\n-                }\n-                is.close();\n-                fout.close();\n-\n-                if (count != filePath.toFile().length()) {\n-                    throw new RuntimeException (\"wrong amount of data returned\");\n-                }\n-                assertFileContentsEqual(filePath, temp.toPath());\n-                temp.delete();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-                fail = true;\n+        @Override\n+        public Void call() throws Exception {\n+            final URL url = URIBuilder.newBuilder()\n+                      .scheme(protocol)\n+                      .loopback()\n+                      .port(port)\n+                      .path(\"\/\" + filePath.getFileName())\n+                      .toURL();\n+            final HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n+            if (urlc instanceof HttpsURLConnection) {\n+                HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n+                urlcs.setHostnameVerifier (new HostnameVerifier () {\n+                    public boolean verify (String s, SSLSession s1) {\n+                        return true;\n+                    }\n+                });\n+                urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n+            }\n+            if (fixedLen) {\n+                urlc.setRequestProperty (\"XFixed\", \"yes\");\n@@ -190,0 +175,15 @@\n+            final Path temp = Files.createTempFile(Path.of(\".\"), \"Test12\", null);\n+            final long numReceived;\n+            try (InputStream is = urlc.getInputStream();\n+                 OutputStream fout = new BufferedOutputStream(new FileOutputStream(temp.toFile()))) {\n+                numReceived = is.transferTo(fout);\n+            }\n+            System.out.println(\"received \" + numReceived + \" response bytes for \" + url);\n+            final long expected = filePath.toFile().length();\n+            if (numReceived != expected) {\n+                throw new RuntimeException (\"expected \" + expected + \" bytes, but received \"\n+                        + numReceived);\n+            }\n+            assertFileContentsEqual(filePath, temp);\n+            Files.delete(temp);\n+            return null;\n@@ -192,1 +192,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test12.java","additions":89,"deletions":90,"binary":false,"changes":179,"status":"modified"}]}