{"files":[{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+\/*\n+ * @test\n+ * @bug 4724007\n+ * @key headful\n+ * @summary Tests that KeyTyped events are fired for the Delete key\n+ *          and that no extraneous characters are entered as a result.\n+ *\/\n+\n+public class DeleteKeyTyped {\n+    private static Frame frame;\n+    private static TextField tf;\n+\n+    private static boolean deleteKeyTypedReceived = false;\n+    private static final String ORIGINAL = \"0123456789\";\n+    private static final String SUCCESS = \"123456789\";\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(100);\n+\n+            EventQueue.invokeAndWait(DeleteKeyTyped::createTestUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ Move cursor to start of TextField\n+            robot.keyPress(KeyEvent.VK_HOME);\n+            robot.keyRelease(KeyEvent.VK_HOME);\n+            robot.waitForIdle();\n+            robot.delay(50);\n+\n+            \/\/ Press and release Delete\n+            robot.keyPress(KeyEvent.VK_DELETE);\n+            robot.keyRelease(KeyEvent.VK_DELETE);\n+            robot.waitForIdle();\n+            robot.delay(50);\n+\n+            EventQueue.invokeAndWait(DeleteKeyTyped::testDeleteKeyEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new Frame();\n+        tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        frame.setSize(300, 100);\n+        frame.setVisible(true);\n+        tf.requestFocusInWindow();\n+\n+        tf.addKeyListener(new KeyListener() {\n+            @Override\n+            public void keyPressed(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            @Override\n+            public void keyTyped(KeyEvent evt) {\n+                printKey(evt);\n+                int keychar = evt.getKeyChar();\n+                if (keychar == 127) { \/\/ Delete character is 127 or \\u007F\n+                    deleteKeyTypedReceived = true;\n+                }\n+            }\n+\n+            @Override\n+            public void keyReleased(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            private void printKey(KeyEvent evt) {\n+                switch(evt.getID()) {\n+                    case KeyEvent.KEY_TYPED:\n+                    case KeyEvent.KEY_PRESSED:\n+                    case KeyEvent.KEY_RELEASED:\n+                        break;\n+                    default:\n+                        System.out.println(\"Other Event\");\n+                        return;\n+                }\n+\n+                System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+                        \"KeyChar: \" + evt.getKeyChar() + \" = \" + (int) evt.getKeyChar() +\n+                        \"   KeyCode: \" + evt.getKeyCode() +\n+                        \"   Modifiers: \" + evt.getModifiersEx());\n+\n+                if (evt.isActionKey()) {\n+                    System.out.println(\"Action Key\");\n+                }\n+\n+                System.out.println(\"keyText= \" + KeyEvent.getKeyText(evt.getKeyCode()) + \"\\n\");\n+            }\n+        });\n+    }\n+\n+    private static void testDeleteKeyEvent() {\n+        if (deleteKeyTypedReceived) {\n+            if (tf.getText().equals(SUCCESS)) {\n+                System.out.println(\"Test PASSED\");\n+            } else {\n+                System.out.println(\"Test FAILED: wrong string\");\n+                throw new RuntimeException(\"The test failed: wrong string:  \" +\n+                        tf.getText());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/DeleteKeyTyped.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4734408\n+ * @summary Tests that KeyTyped events are fired for the Escape key\n+ *          and that no extraneous characters are entered as a result.\n+ *\/\n+\n+public class EscapeKeyTyped {\n+    private static Frame frame;\n+    private static TextField tf;\n+\n+    private static final String ORIGINAL = \"0123456789\";\n+    private static boolean escapeKeyTypedReceived = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(30);\n+\n+            EventQueue.invokeAndWait(EscapeKeyTyped::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ Press and release Escape\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+            robot.delay(20);\n+\n+            EventQueue.invokeAndWait(EscapeKeyTyped::testEscKeyEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame();\n+        tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        frame.setSize(300, 100);\n+        frame.setVisible(true);\n+        tf.requestFocusInWindow();\n+\n+        tf.addKeyListener(new KeyListener() {\n+            @Override\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+                int keychar = e.getKeyChar();\n+                if (keychar == 27) { \/\/ Escape character is 27 or \\u0021\n+                    escapeKeyTypedReceived = true;\n+                }\n+            }\n+\n+            @Override\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            private void printKey(KeyEvent evt) {\n+                switch (evt.getID()) {\n+                    case KeyEvent.KEY_TYPED:\n+                    case KeyEvent.KEY_PRESSED:\n+                    case KeyEvent.KEY_RELEASED:\n+                        break;\n+                    default:\n+                        System.out.println(\"Other Event\");\n+                        return;\n+                }\n+\n+                System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+                        \"KeyChar: \" + evt.getKeyChar() + \" = \" + (int) evt.getKeyChar() +\n+                        \"   KeyCode: \" + evt.getKeyCode() +\n+                        \"   Modifiers: \" + evt.getModifiersEx());\n+\n+                if (evt.isActionKey()) {\n+                    System.out.println(\"Action Key\");\n+                }\n+\n+                System.out.println(\"keyText= \" + KeyEvent.getKeyText(evt.getKeyCode()) + \"\\n\");\n+            }\n+        });\n+    }\n+\n+    private static void testEscKeyEvent() {\n+        if (escapeKeyTypedReceived) {\n+            if (tf.getText().equals(ORIGINAL)) {\n+                System.out.println(\"Test PASSED\");\n+            } else {\n+                System.out.println(\"Test FAILED: wrong string\");\n+                throw new RuntimeException(\"The test failed: wrong string:  \" +\n+                        tf.getText());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/EscapeKeyTyped.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4965227\n+ * @requires (os.family == \"linux\")\n+ * @summary tests that Shift+F10 during Window show doesn't cause deadlock- Linux only\n+ *\/\n+\n+public class ShiftF10Test {\n+    private static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(10);\n+\n+            EventQueue.invokeLater(() -> {\n+                frame = new Frame(\"Deadlocking one\");\n+                frame.setSize(100, 100);\n+                frame.setVisible(true);\n+            });\n+\n+            for (int i = 0; i < 250; i++) {\n+                robot.keyPress(KeyEvent.VK_SHIFT);\n+                robot.keyPress(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_SHIFT);\n+                robot.delay(10);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test Failed due to following error: \", e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/ShiftF10Test.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.ContainerAdapter;\n+import java.awt.event.ContainerEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4028904\n+ * @summary Tests whether System.out.println(ContainerEvent e)\n+ *          yields incorrect display or not.\n+ *\/\n+\n+public class ContainerEventChildTest {\n+    private static Frame frame;\n+    private static String com1, com2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame();\n+                Panel outerPanel = new Panel();\n+                Panel innerPanel = new Panel();\n+                Button b = new Button(\"Panel Button\");\n+\n+                innerPanel.addContainerListener(new ContainerAdapter() {\n+                    public void componentAdded(ContainerEvent e) {\n+                        String str1 = e.toString();\n+                        String str2 = (e.getChild()).toString();\n+\n+                        \/\/ extracting child values from ContainerEvent i.e., \"e\" and \"e.getChild()\"\n+                        com1 = str1.substring(str1.indexOf(\"child\") + 6, str1.indexOf(\"]\"));\n+                        com2 = str2.substring(str2.indexOf(\"[\") + 1, str2.indexOf(\",\"));\n+\n+                        System.out.println(\"e : \" + com1);\n+                        System.out.println(\"e.getChild() : \" + com2);\n+\n+                        \/\/ comparing the child values between \"e\" and \"e.getChild()\"\n+                        \/\/ if child value of \"e\" equals null and child values between\n+                        \/\/ \"e\" and \"e.getChild()\" are not equal then throws exception\n+                        if (com1.equals(\"null\") && !(com1.equals(com2))) {\n+                            System.out.println(\"unequal\");\n+                            throw new RuntimeException(\"Test Failed e.toString returns false value\");\n+                        } else {\n+                            System.out.println(\"Test Passed - e and e.getChild() are same\");\n+                        }\n+                    }\n+                });\n+                innerPanel.add(b);\n+                outerPanel.add(innerPanel);\n+                frame.add(outerPanel);\n+                frame.setVisible(true);\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/OtherEvents\/ContainerEventChildTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.IllegalComponentStateException;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.TextEvent;\n+import java.awt.event.TextListener;\n+\n+\/*\n+ * @test\n+ * @bug 4503516\n+ * @key headful\n+ * @summary TextEvent behaves differently across platforms, especially Solaris.\n+ *          Following testcase is used to test whether an initial TextEvent\n+ *          is triggered when a TextArea or TextField is initially added to UI.\n+ *\/\n+\n+public class InitialTextEventTest implements TextListener {\n+    private static Frame frame;\n+    private static TextField textField;\n+    private static TextArea textArea;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+\n+            InitialTextEventTest textEventObj = new InitialTextEventTest();\n+            EventQueue.invokeAndWait(textEventObj::createUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(textEventObj::testInitialTextEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void createUI() {\n+        frame = new Frame();\n+        frame.setTitle(\"Text Event Test\");\n+        frame.setLayout(new FlowLayout());\n+\n+        textField = new TextField(\"TextField\");\n+        textArea = new TextArea(\"TextArea\", 5, 10);\n+\n+        textField.addTextListener(this);\n+        textArea.addTextListener(this);\n+\n+        frame.add(textField);\n+        frame.add(textArea);\n+\n+        frame.setBackground(Color.red);\n+        frame.setSize(500,200);\n+        frame.setVisible(true);\n+    }\n+\n+    private void testInitialTextEvent() {\n+        Point pt;\n+        boolean drawn = false;\n+        while (!drawn) {\n+            try {\n+                pt = textArea.getLocationOnScreen();\n+                System.out.println(\"On-Screen Location on Text Area: \" + pt);\n+                pt = textField.getLocationOnScreen();\n+                System.out.println(\"On-Screen Location on Text Field: \" + pt);\n+            } catch (IllegalComponentStateException icse) {\n+                try {\n+                    Thread.sleep(50);\n+                } catch (InterruptedException ignored) {}\n+                continue;\n+            }\n+            drawn = true;\n+        }\n+    }\n+\n+    @Override\n+    public void textValueChanged(TextEvent e) {\n+        System.out.println(\"text event paramString: \" + e.paramString());\n+        System.out.println(\"text event changed on: \" + e.getSource().getClass().getName());\n+        throw new RuntimeException(\"InitialTextEventTest FAILED\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/TextEvent\/InitialTextEventTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}