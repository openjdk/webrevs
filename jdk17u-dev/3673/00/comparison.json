{"files":[{"patch":"@@ -358,0 +358,1 @@\n+    private final WeakReference<HttpClientImpl> implRef;\n@@ -401,0 +402,1 @@\n+    private final AtomicBoolean isStarted = new AtomicBoolean();\n@@ -458,0 +460,1 @@\n+        implRef = new WeakReference<>(this);\n@@ -507,1 +510,6 @@\n-        selmgr.start();\n+        try {\n+            selmgr.start();\n+        } catch (Throwable t) {\n+            isStarted.set(true);\n+            throw t;\n+        }\n@@ -702,0 +710,1 @@\n+        final Reference<?> implRef;\n@@ -703,0 +712,1 @@\n+        final AtomicBoolean isStarted;\n@@ -712,0 +722,1 @@\n+                          Reference<?> implRef,\n@@ -713,0 +724,1 @@\n+                          AtomicBoolean isStarted,\n@@ -722,0 +734,1 @@\n+            this.implRef = implRef;\n@@ -723,0 +736,1 @@\n+            this.isStarted = isStarted;\n@@ -753,0 +767,4 @@\n+        public boolean isImplementationReferenced() {\n+            return !implRef.refersTo(null);\n+        }\n+        \/\/ The selector is considered alive if it's not yet started\n@@ -754,1 +772,1 @@\n-        public boolean isSelectorAlive() { return isAlive.get(); }\n+        public boolean isSelectorAlive() { return isAlive.get() || !isStarted.get(); }\n@@ -771,0 +789,1 @@\n+                implRef,\n@@ -772,0 +791,1 @@\n+                isStarted,\n@@ -1147,1 +1167,2 @@\n-            owner.isAlive.set(true);\n+            owner.isAlive.set(true);   \/\/ goes back to false when run exits\n+            owner.isStarted.set(true); \/\/ never goes back to false\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+        \/\/ Whether the implementation of the facade\n+        \/\/ is still referenced\n+        boolean isImplementationReferenced();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/OperationTrackers.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.time.Duration;\n@@ -106,1 +107,1 @@\n-                \"outstanding operations or unreleased resources\", false);\n+                \"outstanding operations or unreleased resources\", true);\n@@ -213,0 +214,3 @@\n+        long waitStart = System.nanoTime();\n+        long waited = 0;\n+        long toWait = Math.min(graceDelayMs, Math.max(delay, 1));\n@@ -220,1 +224,2 @@\n-                    Thread.sleep(Math.min(graceDelayMs, Math.max(delay, 1)));\n+                    waited += toWait;\n+                    Thread.sleep(toWait);\n@@ -224,1 +229,6 @@\n-            } else break;\n+            } else {\n+                System.out.println(\"No outstanding HTTP operations remaining after \"\n+                        + i + \"\/\" + count + \" iterations and \" + waited + \"\/\" + graceDelayMs\n+                        + \" ms, (wait\/iteration \" + toWait + \" ms)\");\n+                break;\n+            }\n@@ -226,0 +236,1 @@\n+        long duration = Duration.ofNanos(System.nanoTime() - waitStart).toMillis();\n@@ -232,1 +243,2 @@\n-            System.out.println(\"PASSED: No \" + description + \" found in \" + tracker.getName());\n+            System.out.println(\"PASSED: No \" + description + \" found in \"\n+                    + tracker.getName() + \" in \" + duration + \" ms\");\n@@ -236,2 +248,3 @@\n-                printThreads(\"Some selector manager threads are still alive: \", System.out);\n-                printThreads(\"Some selector manager threads are still alive: \", System.err);\n+                var msg = \"Selector manager threads are still alive for \" + tracker.getName() + \": \";\n+                printThreads(msg, System.out);\n+                printThreads(msg, System.err);\n@@ -239,0 +252,2 @@\n+            System.out.println(\"AssertionError: Found some \" + description + \" in \"\n+                    + tracker.getName() + \" after \" + duration + \" ms, waited \" + waited + \" ms\");\n","filename":"test\/jdk\/java\/net\/httpclient\/ReferenceTracker.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8203771 8218546\n+ * @bug 8203771 8218546 8297200\n@@ -45,0 +45,1 @@\n+import jdk.internal.net.http.common.OperationTrackers.Tracker;\n@@ -303,0 +304,5 @@\n+    static void throwIfNotNull(Throwable throwable) throws Exception {\n+        if (throwable instanceof Exception ex) throw ex;\n+        if (throwable instanceof Error e) throw e;\n+    }\n+\n@@ -309,1 +315,1 @@\n-        out.println(\"\\n--- Starting \");\n+        out.println(\"\\n--- Starting test \" + now());\n@@ -321,0 +327,2 @@\n+        Tracker tracker = null;\n+        Throwable thrown = null;\n@@ -323,1 +331,1 @@\n-                if (!sameClient || client == null)\n+                if (!sameClient || client == null) {\n@@ -325,0 +333,2 @@\n+                    tracker = TRACKER.getTracker(client);\n+                }\n@@ -364,0 +374,2 @@\n+            } catch (Throwable x) {\n+                thrown = x;\n@@ -368,2 +380,5 @@\n-                    var error = TRACKER.check(500);\n-                    if (error != null) throw error;\n+                    var error = TRACKER.check(tracker, 500);\n+                    if (error != null) {\n+                        if (thrown != null) error.addSuppressed(thrown);\n+                        throw error;\n+                    }\n@@ -372,0 +387,1 @@\n+            throwIfNotNull(thrown);\n@@ -381,1 +397,1 @@\n-        out.println(\"\\n--- Starting \");\n+        out.println(\"\\n--- Starting testHomeMadeIllegalHeader \" + now());\n@@ -385,1 +401,2 @@\n-\n+        Tracker tracker = TRACKER.getTracker(client);\n+        Throwable thrown = null;\n@@ -432,0 +449,2 @@\n+        } catch (Throwable x) {\n+            thrown = x;\n@@ -436,2 +455,5 @@\n-                var error = TRACKER.check(500);\n-                if (error != null) throw error;\n+                var error = TRACKER.check(tracker, 500);\n+                if (error != null) {\n+                    if (thrown != null) error.addSuppressed(thrown);\n+                    throw error;\n+                }\n@@ -440,0 +462,1 @@\n+        throwIfNotNull(thrown);\n@@ -442,0 +465,2 @@\n+\n+\n@@ -443,2 +468,4 @@\n-    void testAsync(String uriString, String headerNameAndValue, boolean sameClient) {\n-        out.println(\"\\n--- Starting \");\n+    void testAsync(String uriString, String headerNameAndValue, boolean sameClient)\n+            throws Exception\n+    {\n+        out.println(\"\\n--- Starting testAsync \" + now());\n@@ -455,0 +482,2 @@\n+        Tracker tracker = null;\n+        Throwable thrown = null;\n@@ -457,1 +486,1 @@\n-                if (!sameClient || client == null)\n+                if (!sameClient || client == null) {\n@@ -459,0 +488,2 @@\n+                    tracker = TRACKER.getTracker(client);\n+                }\n@@ -501,0 +532,2 @@\n+            } catch (Throwable x) {\n+                thrown = x;\n@@ -505,2 +538,5 @@\n-                    var error = TRACKER.check(500);\n-                    if (error != null) throw error;\n+                    var error = TRACKER.check(tracker, 500);\n+                    if (error != null) {\n+                        if (thrown != null) error.addSuppressed(thrown);\n+                        throw error;\n+                    }\n@@ -509,0 +545,1 @@\n+            throwIfNotNull(thrown);\n@@ -519,0 +556,1 @@\n+        out.println(\"--- Starting setup \" + now());\n@@ -548,0 +586,1 @@\n+        out.println(\"\\n--- Teardown \" + now());\n@@ -554,1 +593,2 @@\n-        AssertionError fail = TRACKER.check(500);\n+        AssertionError fail = TRACKER.check(2500);\n+        out.println(\"--- Stopping servers \" + now());\n","filename":"test\/jdk\/java\/net\/httpclient\/SpecialHeadersTest.java","additions":55,"deletions":15,"binary":false,"changes":70,"status":"modified"}]}