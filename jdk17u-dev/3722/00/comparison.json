{"files":[{"patch":"@@ -311,1 +311,1 @@\n-            result[j>>2] = (result[j>>2] << 8) | seed[j];\n+            result[j>>2] = (result[j>>2] << 8) | (seed[j] & 0xFF);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @bug 8282144\n+ * @bug 8282144 8294509\n@@ -39,0 +39,5 @@\n+        testLongs();\n+        testInts();\n+    }\n+\n+    private static void testLongs() {\n@@ -59,0 +64,21 @@\n+    private static void testInts() {\n+        RandomGenerator rng = RandomGeneratorFactory.of(\"L64X128MixRandom\").create(42);\n+\n+        for (int i = 1; i < 8; i++) {\n+            byte[] seed = new byte[i];\n+\n+            for (int j = 0; j < 10; j++) {\n+                rng.nextBytes(seed);\n+\n+                int[] existing = RandomSupport.convertSeedBytesToInts(seed, 1, 1);\n+                int[] testing = convertSeedBytesToIntsFixed(seed, 1, 1);\n+\n+                for (int k = 0; k < existing.length; k++) {\n+                    if (existing[k] != testing[k]) {\n+                        throw new RuntimeException(\"convertSeedBytesToInts incorrect\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n@@ -71,0 +97,13 @@\n+\n+    public static int[] convertSeedBytesToIntsFixed(byte[] seed, int n, int z) {\n+        final int[] result = new int[n];\n+        final int m = Math.min(seed.length, n << 2);\n+\n+        \/\/ Distribute seed bytes into the words to be formed.\n+        for (int j = 0; j < m; j++) {\n+            result[j >> 2] = (result[j >> 2] << 8) | (seed[j] & 0xff);\n+        }\n+\n+        return result;\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Random\/T8282144.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}