{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -225,0 +227,2 @@\n+    private List<String> crossChkWarnings = new ArrayList<>();\n+\n@@ -1072,0 +1076,1 @@\n+            crossCheckEntries(jarName);\n@@ -1106,0 +1111,137 @@\n+    private void crossCheckEntries(String jarName) throws Exception {\n+        Set<String> locEntries = new HashSet<>();\n+\n+        try (JarFile jarFile = new JarFile(jarName);\n+             JarInputStream jis = new JarInputStream(\n+                     Files.newInputStream(Path.of(jarName)))) {\n+\n+            Manifest cenManifest = jarFile.getManifest();\n+            Manifest locManifest = jis.getManifest();\n+            compareManifest(cenManifest, locManifest);\n+\n+            JarEntry locEntry;\n+            while ((locEntry = jis.getNextJarEntry()) != null) {\n+                String entryName = locEntry.getName();\n+                locEntries.add(entryName);\n+\n+                JarEntry cenEntry = jarFile.getJarEntry(entryName);\n+                if (cenEntry == null) {\n+                    crossChkWarnings.add(String.format(rb.getString(\n+                            \"entry.1.present.when.reading.jarinputstream.but.missing.via.jarfile\"),\n+                            entryName));\n+                    continue;\n+                }\n+\n+                try {\n+                    readEntry(jis);\n+                } catch (SecurityException e) {\n+                    crossChkWarnings.add(String.format(rb.getString(\n+                            \"signature.verification.failed.on.entry.1.when.reading.via.jarinputstream\"),\n+                            entryName));\n+                    continue;\n+                }\n+\n+                try (InputStream cenInputStream = jarFile.getInputStream(cenEntry)) {\n+                    if (cenInputStream == null) {\n+                        crossChkWarnings.add(String.format(rb.getString(\n+                                \"entry.1.present.in.jarfile.but.unreadable\"),\n+                                entryName));\n+                        continue;\n+                    } else {\n+                        try {\n+                            readEntry(cenInputStream);\n+                        } catch (SecurityException e) {\n+                            crossChkWarnings.add(String.format(rb.getString(\n+                                    \"signature.verification.failed.on.entry.1.when.reading.via.jarfile\"),\n+                                    entryName));\n+                            continue;\n+                        }\n+                    }\n+                }\n+\n+                compareSigners(cenEntry, locEntry);\n+            }\n+\n+            jarFile.stream()\n+                    .map(JarEntry::getName)\n+                    .filter(n -> !locEntries.contains(n) && !n.equals(JarFile.MANIFEST_NAME))\n+                    .forEach(n -> crossChkWarnings.add(String.format(rb.getString(\n+                            \"entry.1.present.when.reading.jarfile.but.missing.via.jarinputstream\"), n)));\n+        }\n+    }\n+\n+    private void readEntry(InputStream is) throws IOException {\n+        is.transferTo(OutputStream.nullOutputStream());\n+    }\n+\n+    private void compareManifest(Manifest cenManifest, Manifest locManifest) {\n+        if (cenManifest == null) {\n+            crossChkWarnings.add(rb.getString(\n+                    \"manifest.missing.when.reading.jarfile\"));\n+            return;\n+        }\n+        if (locManifest == null) {\n+            crossChkWarnings.add(rb.getString(\n+                    \"manifest.missing.when.reading.jarinputstream\"));\n+            return;\n+        }\n+\n+        Attributes cenMainAttrs = cenManifest.getMainAttributes();\n+        Attributes locMainAttrs = locManifest.getMainAttributes();\n+\n+        for (Object key : cenMainAttrs.keySet()) {\n+            Object cenValue = cenMainAttrs.get(key);\n+            Object locValue = locMainAttrs.get(key);\n+\n+            if (locValue == null) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"manifest.attribute.1.present.when.reading.jarfile.but.missing.via.jarinputstream\"),\n+                        key));\n+            } else if (!cenValue.equals(locValue)) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"manifest.attribute.1.differs.jarfile.value.2.jarinputstream.value.3\"),\n+                        key, cenValue, locValue));\n+            }\n+        }\n+\n+        for (Object key : locMainAttrs.keySet()) {\n+            if (!cenMainAttrs.containsKey(key)) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"manifest.attribute.1.present.when.reading.jarinputstream.but.missing.via.jarfile\"),\n+                        key));\n+            }\n+        }\n+    }\n+\n+    private void compareSigners(JarEntry cenEntry, JarEntry locEntry) {\n+        CodeSigner[] cenSigners = cenEntry.getCodeSigners();\n+        CodeSigner[] locSigners = locEntry.getCodeSigners();\n+\n+        boolean cenHasSigners = cenSigners != null;\n+        boolean locHasSigners = locSigners != null;\n+\n+        if (cenHasSigners && locHasSigners) {\n+            if (!Arrays.equals(cenSigners, locSigners)) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"codesigners.different.for.entry.1.when.reading.jarfile.and.jarinputstream\"),\n+                        cenEntry.getName()));\n+            }\n+        } else if (cenHasSigners) {\n+            crossChkWarnings.add(String.format(rb.getString(\n+                    \"entry.1.is.signed.in.jarfile.but.is.not.signed.in.jarinputstream\"),\n+                    cenEntry.getName()));\n+        } else if (locHasSigners) {\n+            crossChkWarnings.add(String.format(rb.getString(\n+                    \"entry.1.is.signed.in.jarinputstream.but.is.not.signed.in.jarfile\"),\n+                    locEntry.getName()));\n+        }\n+    }\n+\n+    private void displayCrossChkWarnings() {\n+        System.out.println();\n+        \/\/ First is a summary warning\n+        System.out.println(rb.getString(\"jar.contains.internal.inconsistencies.result.in.different.contents.via.jarfile.and.jarinputstream\"));\n+        \/\/ each warning message with prefix \"- \"\n+        crossChkWarnings.forEach(warning -> System.out.println(\"- \" + warning));\n+    }\n+\n@@ -1332,0 +1474,3 @@\n+            if (!crossChkWarnings.isEmpty()) {\n+                displayCrossChkWarnings();\n+            }\n@@ -1339,0 +1484,3 @@\n+            if (!crossChkWarnings.isEmpty()) {\n+                displayCrossChkWarnings();\n+            }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -327,0 +327,28 @@\n+        {\"manifest.missing.when.reading.jarfile\",\n+                \"Manifest is missing when reading via JarFile\"},\n+        {\"manifest.missing.when.reading.jarinputstream\",\n+                \"Manifest is missing when reading via JarInputStream\"},\n+        {\"manifest.attribute.1.present.when.reading.jarfile.but.missing.via.jarinputstream\",\n+                \"Manifest main attribute %s is present when reading via JarFile but missing when reading via JarInputStream\"},\n+        {\"manifest.attribute.1.present.when.reading.jarinputstream.but.missing.via.jarfile\",\n+                \"Manifest main attribute %s is present when reading via JarInputStream but missing when reading via JarFile\"},\n+        {\"manifest.attribute.1.differs.jarfile.value.2.jarinputstream.value.3\",\n+                \"Manifest main attribute %1$s differs: JarFile value = %2$s, JarInputStream value = %3$s\"},\n+        {\"entry.1.present.when.reading.jarinputstream.but.missing.via.jarfile\",\n+                \"Entry %s is present when reading via JarInputStream but missing when reading via JarFile\"},\n+        {\"entry.1.present.when.reading.jarfile.but.missing.via.jarinputstream\",\n+                \"Entry %s is present when reading via JarFile but missing when reading via JarInputStream\"},\n+        {\"entry.1.present.in.jarfile.but.unreadable\",\n+                \"Entry %s is present in JarFile but unreadable\"},\n+        {\"codesigners.different.for.entry.1.when.reading.jarfile.and.jarinputstream\",\n+                \"Code signers are different for entry %s when reading from JarFile and JarInputStream\"},\n+        {\"entry.1.is.signed.in.jarfile.but.is.not.signed.in.jarinputstream\",\n+                \"Entry %s is signed in JarFile but is not signed in JarInputStream\"},\n+        {\"entry.1.is.signed.in.jarinputstream.but.is.not.signed.in.jarfile\",\n+                \"Entry %s is signed in JarInputStream but is not signed in JarFile\"},\n+        {\"jar.contains.internal.inconsistencies.result.in.different.contents.via.jarfile.and.jarinputstream\",\n+                \"This JAR file contains internal inconsistencies that may result in different contents when reading via JarFile and JarInputStream:\"},\n+        {\"signature.verification.failed.on.entry.1.when.reading.via.jarinputstream\",\n+                \"Signature verification failed on entry %s when reading via JarInputStream\"},\n+        {\"signature.verification.failed.on.entry.1.when.reading.via.jarfile\",\n+                \"Signature verification failed on entry %s when reading via JarFile\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1299,0 +1299,7 @@\n+.B internalInconsistenciesDetected\n+This JAR contains internal inconsistencies detected during verification\n+that may result in different contents when reading via JarFile\n+and JarInputStream.\n+.RS\n+.RE\n+.TP\n","filename":"src\/jdk.jartool\/share\/man\/jarsigner.1","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8339280\n+ * @summary Test that jarsigner -verify emits a warning when the filename of\n+ *     an entry in the LOC is changed\n+ * @library \/test\/lib\n+ * @run junit VerifyJarEntryName\n+ *\/\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.FileOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import jdk.test.lib.SecurityTools;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class VerifyJarEntryName {\n+\n+    private static final Path ORIGINAL_JAR = Path.of(\"test.jar\");\n+    private static final Path MODIFIED_JAR = Path.of(\"modified_test.jar\");\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(ORIGINAL_JAR.toFile());\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n+            zos.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME));\n+            zos.write(\"Manifest-Version: 1.0\\nCreated-By: Test\\n\".\n+                    getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+\n+            \/\/ Add hello.txt file\n+            ZipEntry textEntry = new ZipEntry(\"hello.txt\");\n+            zos.putNextEntry(textEntry);\n+            zos.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+        }\n+\n+        SecurityTools.keytool(\"-genkeypair -keystore ks -storepass changeit \"\n+                + \"-alias mykey -keyalg rsa -dname CN=me \");\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \"\n+                        + ORIGINAL_JAR + \" mykey\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    @BeforeEach\n+    void cleanup() throws Exception {\n+        Files.deleteIfExists(MODIFIED_JAR);\n+    }\n+\n+    \/*\n+     * Modify a single byte in \"MANIFEST.MF\" filename in LOC, and\n+     * validate that jarsigner -verify emits a warning message.\n+     *\/\n+    @Test\n+    void verifyManifestEntryName() throws Exception {\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"META-INF\/MANIFEST.MF\");\n+        SecurityTools.jarsigner(\"-verify -verbose \" + MODIFIED_JAR)\n+                .shouldContain(\"This JAR file contains internal \" +\n+                        \"inconsistencies that may result in different \" +\n+                        \"contents when reading via JarFile and JarInputStream:\")\n+                .shouldContain(\"- Manifest is missing when \" +\n+                        \"reading via JarInputStream\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    \/*\n+     * Modify a single byte in signature filename in LOC, and\n+     * validate that jarsigner -verify emits a warning message.\n+     *\/\n+    @Test\n+    void verifySignatureEntryName() throws Exception {\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"META-INF\/MYKEY.SF\");\n+        SecurityTools.jarsigner(\"-verify -verbose \" + MODIFIED_JAR)\n+                .shouldContain(\"This JAR file contains internal \" +\n+                        \"inconsistencies that may result in different \" +\n+                        \"contents when reading via JarFile and JarInputStream:\")\n+                .shouldContain(\"- Entry XETA-INF\/MYKEY.SF is present when reading \" +\n+                        \"via JarInputStream but missing when reading via JarFile\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    \/*\n+     * Validate that jarsigner -verify on a valid JAR works without\n+     * emitting warnings about internal inconsistencies.\n+     *\/\n+    @Test\n+    void verifyOriginalJar() throws Exception {\n+        SecurityTools.jarsigner(\"-verify -verbose \" + ORIGINAL_JAR)\n+                .shouldNotContain(\"This JAR file contains internal \" +\n+                        \"inconsistencies that may result in different contents when \" +\n+                        \"reading via JarFile and JarInputStream:\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private void modifyJarEntryName(Path origJar, Path modifiedJar,\n+            String entryName) throws Exception {\n+        byte[] jarBytes = Files.readAllBytes(origJar);\n+        byte[] entryNameBytes = entryName.getBytes(StandardCharsets.UTF_8);\n+        int pos = 0;\n+        try {\n+            while (!Arrays.equals(jarBytes, pos, pos + entryNameBytes.length,\n+                    entryNameBytes, 0, entryNameBytes.length)) pos++;\n+        } catch (ArrayIndexOutOfBoundsException ignore) {\n+            fail(entryName + \" is not present in the JAR\");\n+        }\n+        jarBytes[pos] = 'X';\n+        Files.write(modifiedJar, jarBytes);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}