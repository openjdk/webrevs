{"files":[{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+\n+import javax.swing.JButton;\n+\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 8142861 8143062 8147016\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ * @summary Check if multiresolution image behaves properly\n+ *         on HiDPI + non-HiDPI display pair.\n+ * @run main\/manual MultiDisplayTest\n+ *\/\n+\n+public class MultiDisplayTest {\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+             The test requires two-display configuration, where\n+\n+             - 1st display is operating in HiDPI mode;\n+             - 2nd display is non-HiDPI.\n+\n+             In other cases please simply push \"Pass\".\n+\n+             To run test please push \"Start\".\n+\n+             Then drag parent \/ child to different displays and check\n+             that the proper image is shown for every window\n+             (must be \"black 1x\" for non-HiDPI and \"blue 2x\" for HiDPI).\n+\n+             Please try to drag both parent and child,\n+             do it fast several times and check if no artefacts occur.\n+\n+             Try to switch display resolution (high to low and back).\n+\n+             For Mac OS X please check also the behavior for\n+             translucent windows appearing on the 2nd (non-active) display\n+             and Mission Control behavior.\n+\n+             Close the Child & Parent windows.\n+\n+             In case if no issues occur please push \"Pass\", otherwise \"Fail\".\n+            \"\"\";\n+\n+    private static final int W = 200;\n+    private static final int H = 200;\n+\n+    private static final BaseMultiResolutionImage IMG =\n+        new BaseMultiResolutionImage(new BufferedImage[]{\n+        generateImage(1, Color.BLACK), generateImage(2, Color.BLUE)});\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!checkOS()) {\n+            throw new SkippedException(\"Invalid OS.\" +\n+                    \"Please run test on either Windows or MacOS\");\n+        }\n+        PassFailJFrame\n+                .builder()\n+                .title(\"MultiDisplayTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .splitUIBottom(MultiDisplayTest::createAndShowGUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JButton createAndShowGUI() {\n+        JButton b = new JButton(\"Start\");\n+        b.addActionListener(e -> {\n+            ParentFrame p = new ParentFrame();\n+            new ChildDialog(p);\n+        });\n+        return b;\n+    }\n+\n+    private static boolean checkOS() {\n+        return Platform.isWindows() || Platform.isOSX();\n+    }\n+\n+    private static BufferedImage generateImage(int scale, Color c) {\n+        BufferedImage image = new BufferedImage(\n+            scale * W, scale * H, BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.getGraphics();\n+        g.setColor(c);\n+        g.fillRect(0, 0, scale * W, scale * H);\n+\n+        g.setColor(Color.WHITE);\n+        Font f = g.getFont();\n+        g.setFont(new Font(f.getName(), Font.BOLD, scale * 48));\n+        g.drawChars((scale + \"X\").toCharArray(), 0, 2,\n+                scale * W \/ 2, scale * H \/ 2);\n+        return image;\n+    }\n+\n+    private static class ParentFrame extends Frame {\n+        public ParentFrame() {\n+            addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowClosing(WindowEvent e) { dispose(); }\n+            });\n+            setSize(W, H);\n+            setLocation(50, 50);\n+            setTitle(\"parent\");\n+            setResizable(false);\n+            setVisible(true);\n+        }\n+\n+        @Override\n+        public void paint(Graphics gr) {\n+            gr.drawImage(IMG, 0, 0, this);\n+        }\n+    }\n+\n+    private static class ChildDialog extends Dialog {\n+        public ChildDialog(Frame f) {\n+            super(f);\n+            addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowClosing(WindowEvent e) { dispose(); }\n+            });\n+            setSize(W, H);\n+            setTitle(\"child\");\n+            setResizable(false);\n+            setModal(true);\n+            setVisible(true);\n+        }\n+\n+        @Override\n+        public void paint(Graphics gr) {\n+            gr.drawImage(IMG, 0, 0, this);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/MultiDisplayTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -1,62 +0,0 @@\n-<!--\n- Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<head>\n-<title> MultiDisplayTest <\/title>\n-<\/head>\n-<body>\n-<applet code=\"MultiDisplayTest.class\" width=100 height=30><\/applet>\n-\n-This test is for OS X or Windows only.\n-For other OSes please simply push \"Pass\".\n-\n-The test requires two-display configuration, where\n-\n-- 1st display is operating in HiDPI mode;\n-- 2nd display is non-HiDPI.\n-\n-In other cases please simply push \"Pass\".\n-\n-\n-To run test please push \"Start\".\n-\n-Then drag parent \/ child to different displays and check\n-that the proper image is shown for every window\n-(must be \"black 1x\" for non-HiDPI and \"blue 2x\" for HiDPI).\n-\n-Please try to drag both parent and child,\n-do it fast several times and check if no artefacts occur.\n-\n-Try to switch display resolution (high to low and back).\n-\n-For Mac OS X please check also the behavior for\n-translucent windows appearing on the 2nd (non-active) display\n-and Mission Control behavior.\n-\n-Close the windows.\n-\n-In case if no issues occur please push \"Pass\", otherwise \"Fail\".\n-\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/MultiDisplayTest\/MultiDisplayTest.html","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,145 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n-  @test\n-  @bug 8142861 8143062 8147016\n-  @summary Check if multiresolution image behaves properly\n-           on HiDPI + non-HiDPI display pair.\n-  @author a.stepanov\n-  @library \/test\/lib\n-  @build jdk.test.lib.Platform\n-  @run applet\/manual=yesno MultiDisplayTest.html\n-*\/\n-\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.*;\n-\n-import jdk.test.lib.Platform;\n-\n-public class MultiDisplayTest extends Applet {\n-\n-    private static final int W = 200, H = 200;\n-\n-    private static final BaseMultiResolutionImage IMG =\n-        new BaseMultiResolutionImage(new BufferedImage[]{\n-        generateImage(1, Color.BLACK), generateImage(2, Color.BLUE)});\n-\n-    private static boolean checkOS() {\n-        return Platform.isWindows() || Platform.isOSX();\n-    }\n-\n-    public void init() { this.setLayout(new BorderLayout()); }\n-\n-    public void start() {\n-\n-        Button b = new Button(\"Start\");\n-        b.setEnabled(checkOS());\n-\n-        b.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-\n-                ParentFrame p = new ParentFrame();\n-                new ChildDialog(p);\n-            }\n-        });\n-\n-        add(b, BorderLayout.CENTER);\n-\n-        validate();\n-        setVisible(true);\n-    }\n-\n-\n-    private static BufferedImage generateImage(int scale, Color c) {\n-\n-        BufferedImage image = new BufferedImage(\n-            scale * W, scale * H, BufferedImage.TYPE_INT_RGB);\n-        Graphics g = image.getGraphics();\n-        g.setColor(c);\n-        g.fillRect(0, 0, scale * W, scale * H);\n-\n-        g.setColor(Color.WHITE);\n-        Font f = g.getFont();\n-        g.setFont(new Font(f.getName(), Font.BOLD, scale * 48));\n-        g.drawChars((scale + \"X\").toCharArray(), 0, 2, scale * W \/ 2, scale * H \/ 2);\n-\n-        return image;\n-    }\n-\n-    private static class ParentFrame extends Frame {\n-\n-        public ParentFrame() {\n-            EventQueue.invokeLater(this::CreateUI);\n-        }\n-\n-        private void CreateUI() {\n-\n-            addWindowListener(new WindowAdapter() {\n-                @Override\n-                public void windowClosing(WindowEvent e) { dispose(); }\n-            });\n-            setSize(W, H);\n-            setLocation(50, 50);\n-            setTitle(\"parent\");\n-            setResizable(false);\n-            setVisible(true);\n-        }\n-\n-        @Override\n-        public void paint(Graphics gr) {\n-            gr.drawImage(IMG, 0, 0, this);\n-        }\n-    }\n-\n-    private static class ChildDialog extends Dialog {\n-\n-        public ChildDialog(Frame f) {\n-            super(f);\n-            EventQueue.invokeLater(this::CreateUI);\n-        }\n-\n-        private void CreateUI() {\n-\n-            addWindowListener(new WindowAdapter() {\n-                @Override\n-                public void windowClosing(WindowEvent e) { dispose(); }\n-            });\n-            setSize(W, H);\n-            setTitle(\"child\");\n-            setResizable(false);\n-            setModal(true);\n-            setVisible(true);\n-        }\n-\n-        @Override\n-        public void paint(Graphics gr) {\n-            gr.drawImage(IMG, 0, 0, this);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/MultiDisplayTest\/MultiDisplayTest.java","additions":0,"deletions":145,"binary":false,"changes":145,"status":"deleted"}]}