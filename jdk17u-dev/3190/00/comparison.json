{"files":[{"patch":"@@ -28,2 +28,1 @@\n-import java.security.spec.ECGenParameterSpec;\n-import java.security.spec.NamedParameterSpec;\n+import java.security.spec.*;\n@@ -40,1 +39,1 @@\n-    private Signature signer;\n+    private static Signature signer;\n@@ -43,1 +42,1 @@\n-    private int messageLength;\n+    private static int messageLength;\n@@ -45,2 +44,2 @@\n-    @Param({\"secp256r1\", \"secp384r1\", \"secp521r1\", \"Ed25519\", \"Ed448\"})\n-    private String curveName;\n+    @Param({\"secp256r1\", \"secp384r1\", \"secp521r1\"})\n+    private String algorithm;\n@@ -48,5 +47,1 @@\n-    private byte[] message;\n-\n-    record CurveSpec(String curveName, String signName) {\n-        \/\/ blank\n-    }\n+    private static byte[] message;\n@@ -59,1 +54,1 @@\n-        String signName = switch (curveName) {\n+        String signName = switch (algorithm) {\n@@ -63,2 +58,0 @@\n-            case \"Ed25519\" -> \"Ed25519\";\n-            case \"Ed448\" -> \"Ed448\";\n@@ -68,7 +61,5 @@\n-        KeyPair kp;\n-        if (curveName.startsWith(\"secp\")) {\n-            AlgorithmParameters params =\n-                    AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n-            params.init(new ECGenParameterSpec(curveName));\n-            ECGenParameterSpec ecParams =\n-                    params.getParameterSpec(ECGenParameterSpec.class);\n+        AlgorithmParameters params =\n+                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+        params.init(new ECGenParameterSpec(algorithm));\n+        ECGenParameterSpec ecParams =\n+                params.getParameterSpec(ECGenParameterSpec.class);\n@@ -76,11 +67,4 @@\n-            KeyPairGenerator kpg =\n-                    KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n-            kpg.initialize(ecParams);\n-            kp = kpg.generateKeyPair();\n-        } else {\n-            KeyPairGenerator kpg =\n-                    KeyPairGenerator.getInstance(curveName, \"SunEC\");\n-            NamedParameterSpec spec = new NamedParameterSpec(curveName);\n-            kpg.initialize(spec);\n-            kp = kpg.generateKeyPair();\n-        }\n+        KeyPairGenerator kpg =\n+                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n+        kpg.initialize(ecParams);\n+        KeyPair kp = kpg.generateKeyPair();\n@@ -97,0 +81,115 @@\n+\n+    public static class EdDSA extends Signatures {\n+        @Param({\"Ed25519\", \"Ed448\"})\n+        private String algorithm;\n+\n+        @Setup\n+        public void setup() throws Exception {\n+            message = new byte[messageLength];\n+            (new Random(System.nanoTime())).nextBytes(message);\n+\n+            KeyPairGenerator kpg =\n+                    KeyPairGenerator.getInstance(algorithm, \"SunEC\");\n+            NamedParameterSpec spec = new NamedParameterSpec(algorithm);\n+            kpg.initialize(spec);\n+            KeyPair kp = kpg.generateKeyPair();\n+\n+            signer = Signature.getInstance(algorithm, \"SunEC\");\n+            signer.initSign(kp.getPrivate());\n+        }\n+    }\n+\n+    public static class DSA extends Signatures {\n+        @Param({\"SHA256withDSA\", \"SHA384withDSA\", \"SHA512withDSA\"})\n+        private String algorithm;\n+\n+        @Setup\n+        public void setup() throws Exception {\n+            message = new byte[messageLength];\n+            (new Random(System.nanoTime())).nextBytes(message);\n+\n+            int keyLength = switch (algorithm) {\n+                case \"SHA256withDSA\" -> 2048;\n+                case \"SHA384withDSA\" -> 3072;\n+                case \"SHA512withDSA\" -> 3072;\n+                default -> throw new RuntimeException();\n+            };\n+\n+            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\");\n+            kpg.initialize(keyLength);\n+            KeyPair kp = kpg.generateKeyPair();\n+\n+            signer = Signature.getInstance(algorithm);\n+            signer.initSign(kp.getPrivate());\n+        }\n+    }\n+\n+    public static class RSA extends Signatures {\n+        @Param({\"SHA256withRSA\", \"SHA384withRSA\", \"SHA512withRSA\"})\n+        private String algorithm;\n+\n+        @Setup\n+        public void setup() throws Exception {\n+            message = new byte[messageLength];\n+            (new Random(System.nanoTime())).nextBytes(message);\n+\n+            int keyLength = switch (algorithm) {\n+                case \"SHA256withRSA\" -> 2048;\n+                case \"SHA384withRSA\" -> 3072;\n+                case \"SHA512withRSA\" -> 4096;\n+                default -> throw new RuntimeException();\n+            };\n+\n+            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+            kpg.initialize(keyLength);\n+            KeyPair kp = kpg.generateKeyPair();\n+\n+            signer = Signature.getInstance(algorithm);\n+            signer.initSign(kp.getPrivate());\n+        }\n+    }\n+\n+    public static class RSASSAPSS extends Signatures {\n+        @Param({\"SHA256\", \"SHA384\", \"SHA512\"})\n+        private String algorithm;\n+\n+        @Setup\n+        public void setup() throws Exception {\n+            message = new byte[messageLength];\n+            (new Random(System.nanoTime())).nextBytes(message);\n+\n+            int keyLength = switch (algorithm) {\n+               case \"SHA256\" -> 2048;\n+               case \"SHA384\" -> 3072;\n+               case \"SHA512\" -> 4096;\n+               default -> throw new RuntimeException();\n+            };\n+\n+            PSSParameterSpec spec = switch (algorithm) {\n+               case \"SHA256\" ->\n+                       new PSSParameterSpec(\n+                               \"SHA-256\", \"MGF1\",\n+                               MGF1ParameterSpec.SHA256,\n+                               32, PSSParameterSpec.TRAILER_FIELD_BC);\n+               case \"SHA384\" ->\n+                       new PSSParameterSpec(\n+                               \"SHA-384\", \"MGF1\",\n+                               MGF1ParameterSpec.SHA384,\n+                               48, PSSParameterSpec.TRAILER_FIELD_BC);\n+               case \"SHA512\" ->\n+                        new PSSParameterSpec(\n+                               \"SHA-512\", \"MGF1\",\n+                               MGF1ParameterSpec.SHA512,\n+                               64, PSSParameterSpec.TRAILER_FIELD_BC);\n+               default -> throw new RuntimeException();\n+            };\n+\n+            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSASSA-PSS\");\n+            kpg.initialize(keyLength);\n+            KeyPair kp = kpg.generateKeyPair();\n+\n+            signer = Signature.getInstance(\"RSASSA-PSS\");\n+            signer.setParameter(spec);\n+            signer.initSign(kp.getPrivate());\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":131,"deletions":32,"binary":false,"changes":163,"status":"modified"}]}