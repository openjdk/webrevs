{"files":[{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4549069\n+ * @summary  Tests if javax.swing.text.AbstractDocument.BranchElement.getEndOffset() throws AIOOBE\n+ * @key headful\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import javax.swing.JFrame;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.DefaultStyledDocument;\n+import javax.swing.undo.UndoManager;\n+\n+public class bug4549069 {\n+    static Timer timer;\n+    static volatile Point p;\n+\n+    static JFrame f;\n+    static JTextArea jta;\n+    static UndoManager um;\n+    static Robot robot;\n+\n+    public static void main(String[] argv) throws Exception {\n+        robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4549069\");\n+                f.addWindowListener(new TestStateListener());\n+\n+                jta = new JTextArea();\n+                um = new UndoManager();\n+                jta.setDocument(new DefaultStyledDocument());\n+                jta.getDocument().addUndoableEditListener(um);\n+\n+                String text = \"Press Ctrl-Z (undo) to get\\n\" +\n+                        \"a stacktrace U shouldn't XX\\n\";\n+                jta.setText(text);\n+\n+                jta.addKeyListener(new KeyAdapter() {\n+                    public void keyPressed(KeyEvent e) {\n+                        if (um.canUndo()) {\n+                            um.undo();\n+                        }\n+                    }\n+                });\n+\n+                f.getContentPane().add(jta);\n+                f.pack();\n+                f.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+        } finally {\n+            if (f != null) {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    f.dispose();\n+                });\n+            }\n+        }\n+    }\n+\n+    static class TestStateListener extends WindowAdapter {\n+        public void windowOpened(WindowEvent ev) {\n+            timer = new Timer();\n+            timer.schedule(new RobotTask(), 1000);\n+        }\n+    }\n+\n+    static class RobotTask extends TimerTask {\n+        public void run() {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    p = jta.getLocationOnScreen();\n+                });\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Could not get location\");\n+\n+            }\n+            robot.mouseMove(p.x, p.y);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.waitForIdle();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractDocument\/bug4549069.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4185537\n+ * @summary  javax.swing.text.AbstractWriter: TOTAL REWRITE COMPLETE.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import javax.swing.text.AbstractWriter;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.DefaultStyledDocument;\n+import javax.swing.text.Document;\n+\n+public class bug4185537 {\n+    static char[] chars = {'a', 'b', 'c', 'd', 'e'};\n+    static StringWriter wr = new StringWriter();\n+\n+    public static void main(String[] argv) {\n+        DefaultStyledDocument doc = new DefaultStyledDocument();\n+\n+        SimpleWriter sw = new SimpleWriter(wr, doc, 5, 200);\n+        sw.test_getWriter();\n+\n+        if (sw.getStartOffset() != 5) {\n+            throw new RuntimeException(\"getStartOffset fails...\");\n+        }\n+        if (sw.getEndOffset() != 205) {\n+            throw new RuntimeException(\"getEndOffset fails...\");\n+        }\n+\n+        sw.setLineSeparator(\"+\");\n+        if (!sw.getLineSeparator().equals(\"+\")) {\n+            throw new RuntimeException(\"Doesn't set line separator correctly...\");\n+        }\n+        sw.test_writeLineSeparator();\n+\n+        sw.test_write_output();\n+        sw.test_CurrentLineLength();\n+        sw.test_getLineLength();\n+        sw.test_getIndentLevel();\n+        sw.test_CanWrapLines();\n+        if (!wr.toString().equals(\"+abcde\")) {\n+            throw new RuntimeException(\"Test fails...\");\n+        }\n+        try {\n+            wr.close();\n+        } catch (Exception e) {\n+            System.out.println(\"Exception...\");\n+        }\n+    }\n+\n+    static class SimpleWriter extends AbstractWriter {\n+\n+        public SimpleWriter(Writer w, Document d, int pos, int len) {\n+            super(w, d, pos, len);\n+        }\n+\n+        void test_writeLineSeparator() {\n+            try {\n+                writeLineSeparator();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(\"writeLineSeparator fails...\");\n+            }\n+        }\n+\n+        void test_getWriter() {\n+            if (getWriter() != wr) throw new RuntimeException(\"Writer gets incorrect...\");\n+        }\n+\n+        void test_CurrentLineLength() {\n+            setCurrentLineLength(0);\n+            if (getCurrentLineLength() != 0) throw new RuntimeException(\"Doesn't set CurrentLineLength...\");\n+            if (!isLineEmpty()) {\n+                throw new RuntimeException(\"isLineEmpty() should return false...\");\n+            }\n+        }\n+\n+        void test_getLineLength() {\n+            setLineLength(80);\n+            if (getLineLength() != 80) {\n+                throw new RuntimeException(\"Default line length doesn't set...\");\n+            }\n+        }\n+\n+        void test_CanWrapLines() {\n+            setCanWrapLines(true);\n+            if (!getCanWrapLines()) {\n+                throw new RuntimeException(\"Doesn't set wrapping lines correctly\");\n+            }\n+        }\n+\n+        void test_getIndentLevel() {\n+            incrIndent();\n+            if (getIndentLevel() != 1) {\n+                throw new RuntimeException(\"getIndentLevel() fails...\");\n+            }\n+        }\n+\n+        void test_write_output() {\n+            try {\n+                write(chars, 0, 3);\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"write(char[], int, int): unexpected IOException...\");\n+            }\n+            try {\n+                output(chars, 3, 2);\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"output(char[], int, int): unexpected IOException...\");\n+            }\n+        }\n+\n+        public void write() throws IOException, BadLocationException {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractWriter\/bug4185537.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4240870 4240855\n+ * @summary Tests that DefaultTableCellRenderer overrides following methods:\n+ *          validate()\n+ *          revalidate()\n+ *          repaint(long, int, int, int, int)\n+ *          repaint(Rectangle)\n+ *          firePropertyChange(String, Object, Object)\n+ *          firePropertyChange(String, boolean, boolean)\n+ *\/\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import javax.swing.table.DefaultTableCellRenderer;\n+\n+public class bug4240870 {\n+    public static void main(String[] argv) {\n+        \/\/ Test overridden public methods using reflection\n+        String methodName = null;\n+        try {\n+            Class clazz = Class.forName(\n+                    \"javax.swing.table.DefaultTableCellRenderer\");\n+            Class[] noArgs = {};\n+            methodName = \"validate\";\n+            clazz.getDeclaredMethod(methodName, noArgs);\n+            methodName = \"revalidate\";\n+            clazz.getDeclaredMethod(methodName, noArgs);\n+\n+            Class[] args1 = {long.class, int.class, int.class,\n+                    int.class, int.class};\n+            methodName = \"repaint\";\n+            clazz.getDeclaredMethod(methodName, args1);\n+            Class[] args2 = {Class.forName(\"java.awt.Rectangle\")};\n+            methodName = \"repaint\";\n+            clazz.getDeclaredMethod(methodName, args2);\n+\n+            Class objectClass = Class.forName(\"java.lang.Object\");\n+            Class stringClass = Class.forName(\"java.lang.String\");\n+            Class[] args3 = {stringClass, objectClass, objectClass};\n+            methodName = \"firePropertyChange\";\n+            clazz.getDeclaredMethod(methodName, args3);\n+            Class[] args4 = {stringClass, boolean.class, boolean.class};\n+            clazz.getDeclaredMethod(methodName, args4);\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"Failed: \" + methodName + \" not overridden\");\n+        } catch (ClassNotFoundException e) {\n+        }\n+\n+        \/\/ test protected firePropertyChange(String, Object, Object)\n+        Renderer r = new Renderer();\n+        r.addPropertyChangeListener(new Listener());\n+        r.test();\n+    }\n+\n+    static class Renderer extends DefaultTableCellRenderer {\n+        public void test() {\n+            super.firePropertyChange(\"text\", \"old_text\", \"new_text\");\n+            super.firePropertyChange(\"stuff\", \"old_stuff\", \"new_stuff\");\n+        }\n+    }\n+\n+    static class Listener implements PropertyChangeListener {\n+        public void propertyChange(PropertyChangeEvent e) {\n+            if (!e.getPropertyName().equals(\"text\")) {\n+                throw new RuntimeException(\"Failed: firePropertyChange not overridden\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DefaultTableCellRenderer\/bug4240870.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4243927\n+ * @summary Tests that methods getAccessibleChild() and getAccessibleAt()\n+ *          of class JTableHeader.AccessibleJTableHeader do not throw NPE\n+ *\/\n+\n+import javax.accessibility.AccessibleComponent;\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.table.JTableHeader;\n+import javax.swing.table.TableColumn;\n+\n+public class bug4243927 {\n+    public static void main(String[] argv) {\n+        JTableHeader header = new JTableHeader();\n+        header.getColumnModel().addColumn(new TableColumn(0));\n+\n+        AccessibleContext c = header.getAccessibleContext();\n+        c.getAccessibleChild(0);\n+        ((AccessibleComponent)c).getAccessibleAt(new java.awt.Point(0,0));\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/bug4243927.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4736093\n+ * @requires (os.family == \"windows\")\n+ * @summary REGRESSION: Menu and controls shortcuts are not visible in Win L&F in jdk1.4.1\n+ * @modules java.desktop\/com.sun.java.swing.plaf.windows\n+ * @key headful\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.MenuElement;\n+import javax.swing.MenuSelectionManager;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;\n+\n+public class bug4736093 {\n+    static volatile boolean passed = true;\n+    static volatile boolean done = false;\n+    static volatile boolean winlaf = true;\n+    static JFrame mainFrame = null;\n+    static Robot robo;\n+\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            robo = new Robot();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+                } catch (Exception ex) {\n+                    winlaf = false;\n+                }\n+\n+                if (winlaf && WindowsLookAndFeel.isMnemonicHidden()) {\n+                    mainFrame = new JFrame(\"Bug 4736093\");\n+                    mainFrame.addWindowListener(new TestStateListener());\n+                    mainFrame.setSize(200, 400);\n+                    mainFrame.setLocationRelativeTo(null);\n+                    mainFrame.setVisible(true);\n+                } else {\n+                    System.out.println(\"Test is not for this system. Passed.\");\n+                }\n+            });\n+\n+            robo.waitForIdle();\n+            robo.delay(1000);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                        mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void addMenuBar() {\n+        JMenuBar mbar = new JMenuBar();\n+        JMenu menu = new JMenu(\"File\");\n+        for (int i = 1; i < 5; i++) {\n+            menu.add(new JMenuItem(\"Menu Item \" + i));\n+        }\n+        mbar.add(menu);\n+        mainFrame.setJMenuBar(mbar);\n+    }\n+\n+\n+    public static void checkForMnemonics(boolean expected) {\n+        if (expected != WindowsLookAndFeel.isMnemonicHidden()) {\n+            passed = false;\n+        }\n+    }\n+\n+    public static class TestStateListener extends WindowAdapter {\n+        public void windowOpened(WindowEvent ev) {\n+            try {\n+                new Thread(new RobotThread()).start();\n+            } catch (Exception ex) {\n+                throw new RuntimeException(\"Thread Exception\");\n+            }\n+        }\n+    }\n+\n+    public static class RobotThread implements Runnable {\n+        public void run() {\n+            MenuElement[] path;\n+            int altKey = java.awt.event.KeyEvent.VK_ALT;\n+            robo.setAutoDelay(3000); \/\/ 3 seconds delay\n+            robo.waitForIdle();\n+\n+            robo.keyPress(altKey);\n+            robo.delay(1000);\n+\n+            checkForMnemonics(false); \/\/ mnemonics should appear on press\n+            robo.keyRelease(altKey);\n+            robo.delay(1000);\n+\n+            checkForMnemonics(true); \/\/ and disappear on release\n+            robo.keyPress(java.awt.event.KeyEvent.VK_ESCAPE);\n+            robo.keyRelease(java.awt.event.KeyEvent.VK_ESCAPE);\n+            robo.delay(1000);\n+\n+            addMenuBar();\n+            robo.delay(1000);\n+\n+            robo.keyPress(altKey);\n+            robo.delay(1000);\n+\n+            checkForMnemonics(false); \/\/ mnemonics should appear on press\n+            robo.keyRelease(altKey);\n+            robo.delay(1000);\n+\n+            checkForMnemonics(false); \/\/ and stay appeared in selected menu\n+            path = MenuSelectionManager.defaultManager().getSelectedPath();\n+            if (path.length == 0) {\n+                passed = false; \/\/ menu should be selected\n+            }\n+            robo.delay(1000);\n+\n+            robo.keyPress(altKey);\n+            robo.delay(1000);\n+\n+            checkForMnemonics(true); \/\/ and only now disappear\n+            path = MenuSelectionManager.defaultManager().getSelectedPath();\n+            if (path.length != 0) {\n+                passed = false; \/\/ menu should be deselected\n+            }\n+            robo.keyRelease(altKey);\n+            done = true;\n+            robo.delay(1000);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/LookAndFeel\/bug4736093.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}