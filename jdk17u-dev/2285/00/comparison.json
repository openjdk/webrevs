{"files":[{"patch":"@@ -125,0 +125,2 @@\n+        long systemTotal = getTotalMemorySize0();\n+        assert(systemTotal > 0);\n@@ -127,1 +129,1 @@\n-        if (subsMem >= getTotalMemorySize0()) {\n+        if (subsMem >= systemTotal) {\n@@ -145,1 +147,9 @@\n-        return subsystem.getMemoryAndSwapLimit();\n+        long totalSystemMemSwap = getTotalMemorySize0() + getTotalSwapSize0();\n+        assert(totalSystemMemSwap > 0);\n+        \/\/ Catch the cgroup memory and swap limit exceeding host physical swap\n+        \/\/ and memory. Treat this case as unlimited.\n+        long subsSwapMem = subsystem.getMemoryAndSwapLimit();\n+        if (subsSwapMem >= totalSystemMemSwap) {\n+            return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n+        }\n+        return subsSwapMem;\n@@ -188,0 +198,1 @@\n+    private static native long getTotalSwapSize0();\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <sys\/sysinfo.h>\n@@ -46,0 +47,12 @@\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_platform_CgroupMetrics_getTotalSwapSize0\n+  (JNIEnv *env, jclass ignored)\n+{\n+    struct sysinfo si;\n+    int retval = sysinfo(&si);\n+    if (retval < 0) {\n+         return 0; \/\/ syinfo failed, treat as no swap\n+    }\n+    return (jlong)si.totalswap;\n+}\n","filename":"src\/java.base\/linux\/native\/libjava\/CgroupMetrics.c","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.function.Consumer;\n@@ -99,0 +100,1 @@\n+            testOSMXBeanIgnoresSwapLimitExceedingPhysical();\n@@ -100,0 +102,1 @@\n+            testMetricsSwapExceedingPhysical();\n@@ -186,0 +189,7 @@\n+        Consumer<OutputAnalyzer> noOp = o -> {};\n+        testOperatingSystemMXBeanAwareness(memoryAllocation, expectedMemory, swapAllocation, expectedSwap, false, noOp);\n+    }\n+\n+    private static void testOperatingSystemMXBeanAwareness(String memoryAllocation, String expectedMemory,\n+            String swapAllocation, String expectedSwap, boolean addCgroupMounts,\n+            Consumer<OutputAnalyzer> additionalMatch) throws Exception {\n@@ -194,0 +204,1 @@\n+            .addJavaOpts(\"-esa\")\n@@ -231,0 +242,1 @@\n+        additionalMatch.accept(out);\n@@ -233,1 +245,0 @@\n-\n@@ -242,0 +253,29 @@\n+    private static void testOSMXBeanIgnoresSwapLimitExceedingPhysical()\n+            throws Exception {\n+        long totalSwap = wb.hostPhysicalSwap() + wb.hostPhysicalMemory();\n+        String expectedSwap = Long.valueOf(totalSwap).toString();\n+        String hostMaxMem = getHostMaxMemory();\n+        String badMem = hostMaxMem + \"0\";\n+        final String badSwap = expectedSwap + \"0\";\n+        testOperatingSystemMXBeanAwareness(badMem, hostMaxMem, badSwap, expectedSwap, false, o -> {\n+            o.shouldNotContain(\"Metrics.getMemoryAndSwapLimit() == \" + badSwap);\n+        });\n+    }\n+\n+    private static void testMetricsSwapExceedingPhysical()\n+            throws Exception {\n+        Common.logNewTestCase(\"Metrics ignore container swap memory limit exceeding physical\");\n+        long totalSwap = wb.hostPhysicalSwap() + wb.hostPhysicalMemory();\n+        String expectedSwap = Long.valueOf(totalSwap).toString();\n+        final String badSwap = expectedSwap + \"0\";\n+        String badMem = getHostMaxMemory() + \"0\";\n+        DockerRunOptions opts = Common.newOpts(imageName)\n+            .addJavaOpts(\"-XshowSettings:system\")\n+            .addDockerOpts(\"--memory\", badMem)\n+            .addDockerOpts(\"--memory-swap\", badSwap);\n+\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldContain(\"Memory Limit: Unlimited\");\n+        out.shouldContain(\"Memory & Swap Limit: Unlimited\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}