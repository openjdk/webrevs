{"files":[{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4741926\n+ * @summary JFormattedTextField\/JSpinner always consumes certain key events\n+ * @key headful\n+ * @run main bug4741926\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Date;\n+import javax.swing.AbstractAction;\n+import javax.swing.InputMap;\n+import javax.swing.JComponent;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4741926 {\n+\n+    static MyFormattedTextField ftf;\n+    static JFrame fr;\n+    static Robot robot;\n+    static volatile boolean passed_enter = false;\n+    static volatile boolean passed_escape = false;\n+    static volatile boolean ftfFocused = false;\n+    static volatile boolean keyProcessed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+                ftf = new MyFormattedTextField();\n+                ftf.setValue(\"JFormattedTextField\");\n+                JPanel p = (JPanel) fr.getContentPane();\n+                p.add(ftf);\n+                ftf.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        ftfFocused = true;\n+                    }\n+                });\n+                InputMap map = p.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);\n+\n+                map.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),\n+                        \"enter-action\");\n+                p.getActionMap().put(\"enter-action\", new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        passed_enter = true;\n+                        keyProcessed = true;\n+                    }\n+                });\n+                map.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),\n+                        \"escape-action\");\n+                p.getActionMap().put(\"escape-action\", new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        passed_escape = true;\n+                        keyProcessed = true;\n+                    }\n+                });\n+                fr.pack();\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test();\n+            if (!(passed_enter && passed_escape)) {\n+                throw new RuntimeException(\"JFormattedTextField consume \" +\n+                        \"Enter\/Escape key event\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void test() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            ftf.requestFocus();\n+        });\n+        robot.delay(500);\n+        doTest(KeyEvent.VK_ENTER);\n+        doTest(KeyEvent.VK_ESCAPE);\n+    }\n+\n+    static void doTest(int keyCode) throws InterruptedException {\n+        keyProcessed = false;\n+        KeyEvent key = new KeyEvent(ftf, KeyEvent.KEY_PRESSED,\n+                                    new Date().getTime(), 0,\n+                                    keyCode,\n+                                    KeyEvent.CHAR_UNDEFINED);\n+        ftf.processKey(key);\n+    }\n+\n+    static class MyFormattedTextField extends JFormattedTextField {\n+        public void processKey(KeyEvent e) {\n+            processKeyEvent(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4741926.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4863121\n+ * @summary JFormattedTextField's NotifyAction should invoke invalidEdit if\n+   commit fails\n+ * @key headful\n+ * @run main bug4863121\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.text.Format;\n+import java.text.DecimalFormat;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4863121 {\n+\n+    static TestFormattedTextField ftf;\n+    static JFrame fr;\n+    static Robot robot;\n+\n+    private static volatile boolean focused = false;\n+    private static volatile boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+                ftf = new TestFormattedTextField(new DecimalFormat(\"####\"));\n+                ftf.setText(\"q\");\n+                fr.getContentPane().add(ftf);\n+\n+                ftf.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        focused = true;\n+                    }\n+                });\n+                fr.pack();\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                ftf.requestFocus();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            if (!passed) {\n+                throw new RuntimeException(\"JFormattedTextField's NotifyAction \" +\n+                        \"should invoke invalidEdit if commit fails\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static class TestFormattedTextField extends JFormattedTextField {\n+        public TestFormattedTextField(Format f) {\n+            super(f);\n+        }\n+        protected void invalidEdit() {\n+            passed = true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4863121.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4886538\n+ * @summary JFormattedTextField not returning correct value (class)\n+ * @run main bug4886538\n+ *\/\n+\n+import javax.swing.JFormattedTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.DefaultFormatterFactory;\n+\n+public class bug4886538 {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ test default display formatter\n+        TestFormattedTextField field = new TestFormattedTextField(0.0);\n+        field.setFormatter(((DefaultFormatterFactory) field.\n+                getFormatterFactory()).getDisplayFormatter());\n+        field.setText(\"10\");\n+        field.commitEdit();\n+\n+        Object dblValue = field.getValue();\n+        if (!(dblValue instanceof Double)) {\n+            throw new RuntimeException(\"The JFormattedTextField's value \" +\n+                    \"should be instanceof Double\");\n+        }\n+\n+        \/\/ test default editor formatter\n+        field = new TestFormattedTextField(0.0);\n+        field.setFormatter(((DefaultFormatterFactory) field.\n+                getFormatterFactory()).getEditFormatter());\n+        field.setText(\"10\");\n+        field.commitEdit();\n+\n+        dblValue = field.getValue();\n+        if (!(dblValue instanceof Double)) {\n+            throw new RuntimeException(\"The JFormattedTextField's value \" +\n+                    \"should be instanceof Double\");\n+        }\n+\n+    }\n+\n+    static class TestFormattedTextField extends JFormattedTextField {\n+        public TestFormattedTextField(Object value) {\n+            super(value);\n+        }\n+        public void setFormatter(JFormattedTextField.AbstractFormatter formatter) {\n+            super.setFormatter(formatter);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4886538.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4123919\n+ * @requires (os.family == \"windows\")\n+ * @summary JPopupMenu.isPopupTrigger() under a different L&F.\n+ * @key headful\n+ * @run main bug4123919\n+ *\/\n+\n+import javax.swing.JLabel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.UIManager;\n+import javax.swing.SwingUtilities;\n+import java.awt.event.MouseEvent;\n+import java.util.Date;\n+\n+public class bug4123919 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JPopupMenu popup = new JPopupMenu(\"Test\");\n+        JLabel lb = new JLabel();\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        SwingUtilities.updateComponentTreeUI(lb);\n+        SwingUtilities.updateComponentTreeUI(popup);\n+        if (!popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_PRESSED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" MotifLookAndFeel when mouse pressed...\");\n+        }\n+        if (popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_RELEASED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" MotifLookAndFeel when mouse released...\");\n+        }\n+\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        SwingUtilities.updateComponentTreeUI(lb);\n+        SwingUtilities.updateComponentTreeUI(popup);\n+\n+        if (popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_PRESSED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" WindowsLookAndFeel when mouse pressed...\");\n+        }\n+        if (!popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_RELEASED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" WindowsLookAndFeel when mouse released...\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4123919.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4197019\n+ * @key headful\n+ * @run main bug4197019\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Polygon;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.Action;\n+import javax.swing.AbstractAction;\n+import javax.swing.Icon;\n+import javax.swing.JMenuItem;\n+import javax.swing.JMenu;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4197019 {\n+    static volatile JMenuItem mi1;\n+    static volatile JMenuItem mi2;\n+    static volatile Icon i2;\n+    static volatile boolean isPassed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JMenu fileMenu = new JMenu(\"File\");\n+            JPopupMenu p = new JPopupMenu();\n+            Icon i = new ArrowIcon();\n+            Action a = new TestAction(\"Test\", i);\n+            mi1 = fileMenu.add(a);\n+            mi2 = p.add(a);\n+\n+            i2 = new SquareIcon();\n+            a.putValue(Action.SMALL_ICON, i2);\n+\n+            isPassed = (mi2.getIcon() != i2) || (mi1.getIcon() != i2) ||\n+                    (mi1.getIcon() != mi2.getIcon());\n+        });\n+        if (isPassed) {\n+            throw new RuntimeException(\"Failed bug test 4197019\");\n+        }\n+    }\n+\n+    private static class TestAction extends AbstractAction {\n+        public TestAction(String s, Icon i) {\n+            super(s,i);\n+        }\n+        public void actionPerformed(ActionEvent e) {\n+\n+        }\n+    }\n+\n+    private static class ArrowIcon implements Icon {\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            Polygon p = new Polygon();\n+            p.addPoint(x, y);\n+            p.addPoint(x+getIconWidth(), y+getIconHeight()\/2);\n+            p.addPoint(x, y+getIconHeight());\n+            g.fillPolygon(p);\n+\n+        }\n+        public int getIconWidth() { return 4; }\n+        public int getIconHeight() { return 8; }\n+    } \/\/ End class MenuArrowIcon\n+\n+    private static class SquareIcon implements Icon {\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            g.setColor(Color.red);\n+            g.fill3DRect(x,y,4,8,true);\n+        }\n+        public int getIconWidth() { return 8; }\n+        public int getIconHeight() { return 8; }\n+    } \/\/ End class MenuArrowIcon\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4197019.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}