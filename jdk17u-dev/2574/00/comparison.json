{"files":[{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.lang.reflect.Field;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8276036 8277213 8277441\n+ * @summary test for the value of full_count in the message of insufficient codecache\n+ * @library \/test\/lib\n+ *\/\n+public class CodeCacheFullCountTest {\n+    public static void main(String args[]) throws Throwable {\n+        if (args.length == 1) {\n+            wasteCodeCache();\n+        } else {\n+            runTest();\n+        }\n+    }\n+\n+    public static void wasteCodeCache()  throws Exception {\n+        URL url = CodeCacheFullCountTest.class.getProtectionDomain().getCodeSource().getLocation();\n+\n+        for (int i = 0; i < 500; i++) {\n+            ClassLoader cl = new MyClassLoader(url);\n+            refClass(cl.loadClass(\"SomeClass\"));\n+        }\n+    }\n+\n+    public static void runTest() throws Throwable {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:ReservedCodeCacheSize=2496k\", \"-XX:-UseCodeCacheFlushing\", \"CodeCacheFullCountTest\", \"WasteCodeCache\");\n+        OutputAnalyzer oa = ProcessTools.executeProcess(pb);\n+        oa.shouldHaveExitValue(0);\n+        String stdout = oa.getStdout();\n+\n+        Pattern pattern = Pattern.compile(\"full_count=(\\\\d)\");\n+        Matcher stdoutMatcher = pattern.matcher(stdout);\n+        if (stdoutMatcher.find()) {\n+            int fullCount = Integer.parseInt(stdoutMatcher.group(1));\n+            if (fullCount != 1) {\n+                throw new RuntimeException(\"the value of full_count is wrong.\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"codecache shortage did not occur.\");\n+        }\n+    }\n+\n+    private static void refClass(Class clazz) throws Exception {\n+        Field name = clazz.getDeclaredField(\"NAME\");\n+        name.setAccessible(true);\n+        name.get(null);\n+    }\n+\n+    private static class MyClassLoader extends URLClassLoader {\n+        public MyClassLoader(URL url) {\n+            super(new URL[]{url}, null);\n+        }\n+        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+            try {\n+                return super.loadClass(name, resolve);\n+            } catch (ClassNotFoundException e) {\n+                return Class.forName(name, resolve, CodeCacheFullCountTest.class.getClassLoader());\n+            }\n+        }\n+    }\n+}\n+\n+abstract class Foo {\n+    public abstract int foo();\n+}\n+\n+class Foo1 extends Foo {\n+    private int a;\n+    public int foo() { return a; }\n+}\n+\n+class Foo2 extends Foo {\n+    private int a;\n+    public int foo() { return a; }\n+}\n+\n+class Foo3 extends Foo {\n+    private int a;\n+    public int foo() { return a; }\n+}\n+\n+class Foo4 extends Foo {\n+    private int a;\n+    public int foo() { return a; }\n+}\n+\n+class SomeClass {\n+    static final String NAME = \"name\";\n+\n+    static {\n+        int res =0;\n+        Foo[] foos = new Foo[] { new Foo1(), new Foo2(), new Foo3(), new Foo4() };\n+        for (int i = 0; i < 100000; i++) {\n+            res = foos[i % foos.length].foo();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CodeCacheFullCountTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}