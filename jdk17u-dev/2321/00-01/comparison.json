{"files":[{"patch":"@@ -246,0 +246,9 @@\n+\n+                if (!bufferComponent.isOpaque()) {\n+                    final SunGraphics2D g2d = (SunGraphics2D) bsg;\n+                    final Color oldBg = g2d.getBackground();\n+                    g2d.setBackground(paintingComponent.getBackground());\n+                    g2d.clearRect(x, y, w, h);\n+                    g2d.setBackground(oldBg);\n+                }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, BELLSOFT. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n@@ -92,1 +92,0 @@\n-            \"-XX:CompileOnly=\" + className + \"::main\",\n@@ -95,1 +94,1 @@\n-            \"-XX:+PrintAssembly\",\n+            \"-XX:CompileCommand=option,\" + className + \"::main,bool,PrintAssembly,true\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestFarJump.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -574,2 +574,0 @@\n-javax\/management\/remote\/mandatory\/notif\/NotifReconnectDeadlockTest.java 8042215 generic-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4189198\n+ * @key headful\n+ * @summary updateClient should post a PaintEvent\n+ *\/\n+\n+public class RepaintTest {\n+    private static volatile Frame frame;\n+    private static volatile Label label;\n+    private static volatile Point frameLoc;\n+\n+    private static final int FRAME_DIM = 100;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Repaint Tester\");\n+                frame.setSize(FRAME_DIM, FRAME_DIM);\n+                label = new Label(\"Hi\");\n+                frame.add(label);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                label.setBackground(Color.GREEN);\n+                label.repaint();\n+                frameLoc = frame.getLocationOnScreen();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color expectedColor = robot.getPixelColor(frameLoc.x + FRAME_DIM \/ 2,\n+                                                      frameLoc.y + FRAME_DIM \/ 2);\n+            if (!Color.GREEN.equals(expectedColor)) {\n+                throw new RuntimeException(\"Test Failed! \\n\" +\n+                        \"PaintEvent was not triggered: \");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                   frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/RepaintTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 4166809\n+ * @summary Make sure NPE is thrown when calling\n+ *     Graphics.drawString(null, int, int)\n+ * @run main DrawNullStringTest\n+ *\/\n+import java.awt.image.BufferedImage;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+\n+public class DrawNullStringTest {\n+    static String s = null;\n+    static boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            BufferedImage img = new BufferedImage(100, 100,\n+                                                  BufferedImage.TYPE_INT_RGB);\n+            Graphics g = (Graphics)(img.getGraphics());\n+            try {\n+                g.drawString(s, 30, 30);\n+            } catch (NullPointerException npe) {\n+                System.out.println(\"NPE thrown - test passes\");\n+                passed = true;\n+            }\n+\n+            if (passed == false) {\n+                throw new Error(\"No Exception was thrown - should be an NPE\");\n+            }\n+        });\n+    }\n+\n+ }\/\/ class DrawNullStringTest\n","filename":"test\/jdk\/java\/awt\/Graphics\/DrawNullStringTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4746122\n+ * @key headful\n+ * @summary Checks getGraphics doesn't throw NullPointerExcepton for invalid colors and font.\n+ * @run main GetGraphicsTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+public class GetGraphicsTest extends Frame {\n+    public Color getBackground() {\n+        return null;\n+    }\n+    public Color getForeground() {\n+        return null;\n+    }\n+    public Font getFont() {\n+        return null;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        GetGraphicsTest test = new GetGraphicsTest();\n+        Graphics g = test.getGraphics();\n+    }\n+}\/\/ class GetGraphicsTest\n","filename":"test\/jdk\/java\/awt\/Graphics\/GetGraphicsTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4930685\n+  @summary Test effect of GridBagConstraints on padding \/ layout\n+  @key headful\n+  @run main GridBagLayoutButtonsOverlapTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridBagLayout;\n+import java.awt.GridBagConstraints;\n+\n+public class GridBagLayoutButtonsOverlapTest {\n+    public static GridBagLayout gridbag;\n+    public static GridBagConstraints c;\n+    public static Button b1;\n+    public static Button b2;\n+    public static Button b4;\n+    public static Button b5;\n+    public static Button b6;\n+    public static Button b7;\n+    public static Button b8;\n+    public static Button b9;\n+    public static Button b10;\n+    public static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                createUI();\n+                test();\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+\n+    public static void createUI() {\n+        frame = new Frame();\n+        gridbag = new GridBagLayout();\n+        GridBagConstraints c = new GridBagConstraints();\n+        frame.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\n+        frame.setLayout(gridbag);\n+        c.fill = GridBagConstraints.BOTH;\n+        c.weightx = 1.0;\n+        b1 = makeButton(\"button1\", gridbag, c);\n+        b2 = makeButton(\"button2\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        b4 = makeButton(\"button4\", gridbag, c);\n+\n+        c.weightx = 0.0;\n+        b5 = makeButton(\"button5\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.RELATIVE;\n+        b6 = makeButton(\"button6\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        b7 = makeButton(\"button7\", gridbag, c);\n+\n+        c.gridwidth = 1;\n+        c.gridheight = 2;\n+        c.weighty = 1.0;\n+        b8 = makeButton(\"button8\", gridbag, c);\n+\n+        c.weighty = 0.0;\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        c.gridheight = 1;\n+        b9 = makeButton(\"button9\", gridbag, c);\n+        b10 = makeButton(\"button10\", gridbag, c);\n+    }\n+\n+    public static void test() {\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+\n+        int b1Corner = b1.getLocation().y + b1.getHeight();\n+        int b5Corner = b5.getLocation().y;\n+        if (b1Corner > b5Corner) { \/\/they are equals each other in best case\n+            throw new RuntimeException(\"Buttons are overlapped when container is small enough\");\n+        }\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    protected static Button makeButton(String name,\n+                                 GridBagLayout gridbag,\n+                                 GridBagConstraints c) {\n+        Button button = new Button(name);\n+        gridbag.setConstraints(button, c);\n+        frame.add(button);\n+        return button;\n+    }\n+\n+}\/\/ class\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/GridBagLayoutButtonsOverlapTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5055696\n+  @summary REGRESSION: GridBagLayout throws ArrayIndexOutOfBoundsExceptions\n+  @key headful\n+  @run main GridBagLayoutOutOfBoundsTest\n+*\/\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridBagLayout;\n+import java.awt.GridBagConstraints;\n+import java.awt.Panel;\n+\n+public class GridBagLayoutOutOfBoundsTest {\n+    final static int L=2;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                frame = new Frame(\"GridBagLayoutOutOfBoundsTestFrame\");\n+                frame.validate();\n+                GridBagLayout layout = new GridBagLayout();\n+                frame.setLayout(layout);\n+                GridBagConstraints gridBagConstraints;\n+\n+                Button[] mb = new Button[L];\n+                for (int i = 0; i<L; i++){\n+                    mb[i] = new Button(\"\"+i);\n+                }\n+                for (int i = 0; i<mb.length; i++){\n+                    gridBagConstraints = new GridBagConstraints();\n+                    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n+                    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;\n+                    frame.add(mb[i], gridBagConstraints);\n+                }\n+                frame.setVisible(true);\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/GridBagLayoutOutOfBoundsTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,2 +88,9 @@\n-        PassFailJFrame passFailJFrame = new PassFailJFrame(\"TrayIcon \" +\n-                \"Test Instructions\", INSTRUCTIONS, 8, 25, 85);\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"TrayIcon Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(8)\n+                .rows(25)\n+                .columns(70)\n+                .screenCapture()\n+                .build();\n+\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconScalingTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+\/*\n+ * @test\n+ * @bug 4724007\n+ * @key headful\n+ * @summary Tests that KeyTyped events are fired for the Delete key\n+ *          and that no extraneous characters are entered as a result.\n+ *\/\n+\n+public class DeleteKeyTyped {\n+    private static Frame frame;\n+    private static TextField tf;\n+\n+    private static boolean deleteKeyTypedReceived = false;\n+    private static final String ORIGINAL = \"0123456789\";\n+    private static final String SUCCESS = \"123456789\";\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(100);\n+\n+            EventQueue.invokeAndWait(DeleteKeyTyped::createTestUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ Move cursor to start of TextField\n+            robot.keyPress(KeyEvent.VK_HOME);\n+            robot.keyRelease(KeyEvent.VK_HOME);\n+            robot.waitForIdle();\n+            robot.delay(50);\n+\n+            \/\/ Press and release Delete\n+            robot.keyPress(KeyEvent.VK_DELETE);\n+            robot.keyRelease(KeyEvent.VK_DELETE);\n+            robot.waitForIdle();\n+            robot.delay(50);\n+\n+            EventQueue.invokeAndWait(DeleteKeyTyped::testDeleteKeyEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new Frame();\n+        tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        frame.setSize(300, 100);\n+        frame.setVisible(true);\n+        tf.requestFocusInWindow();\n+\n+        tf.addKeyListener(new KeyListener() {\n+            @Override\n+            public void keyPressed(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            @Override\n+            public void keyTyped(KeyEvent evt) {\n+                printKey(evt);\n+                int keychar = evt.getKeyChar();\n+                if (keychar == 127) { \/\/ Delete character is 127 or \\u007F\n+                    deleteKeyTypedReceived = true;\n+                }\n+            }\n+\n+            @Override\n+            public void keyReleased(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            private void printKey(KeyEvent evt) {\n+                switch(evt.getID()) {\n+                    case KeyEvent.KEY_TYPED:\n+                    case KeyEvent.KEY_PRESSED:\n+                    case KeyEvent.KEY_RELEASED:\n+                        break;\n+                    default:\n+                        System.out.println(\"Other Event\");\n+                        return;\n+                }\n+\n+                System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+                        \"KeyChar: \" + evt.getKeyChar() + \" = \" + (int) evt.getKeyChar() +\n+                        \"   KeyCode: \" + evt.getKeyCode() +\n+                        \"   Modifiers: \" + evt.getModifiersEx());\n+\n+                if (evt.isActionKey()) {\n+                    System.out.println(\"Action Key\");\n+                }\n+\n+                System.out.println(\"keyText= \" + KeyEvent.getKeyText(evt.getKeyCode()) + \"\\n\");\n+            }\n+        });\n+    }\n+\n+    private static void testDeleteKeyEvent() {\n+        if (deleteKeyTypedReceived) {\n+            if (tf.getText().equals(SUCCESS)) {\n+                System.out.println(\"Test PASSED\");\n+            } else {\n+                System.out.println(\"Test FAILED: wrong string\");\n+                throw new RuntimeException(\"The test failed: wrong string:  \" +\n+                        tf.getText());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/DeleteKeyTyped.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4734408\n+ * @summary Tests that KeyTyped events are fired for the Escape key\n+ *          and that no extraneous characters are entered as a result.\n+ *\/\n+\n+public class EscapeKeyTyped {\n+    private static Frame frame;\n+    private static TextField tf;\n+\n+    private static final String ORIGINAL = \"0123456789\";\n+    private static boolean escapeKeyTypedReceived = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(30);\n+\n+            EventQueue.invokeAndWait(EscapeKeyTyped::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ Press and release Escape\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+            robot.delay(20);\n+\n+            EventQueue.invokeAndWait(EscapeKeyTyped::testEscKeyEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame();\n+        tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        frame.setSize(300, 100);\n+        frame.setVisible(true);\n+        tf.requestFocusInWindow();\n+\n+        tf.addKeyListener(new KeyListener() {\n+            @Override\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+                int keychar = e.getKeyChar();\n+                if (keychar == 27) { \/\/ Escape character is 27 or \\u0021\n+                    escapeKeyTypedReceived = true;\n+                }\n+            }\n+\n+            @Override\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            private void printKey(KeyEvent evt) {\n+                switch (evt.getID()) {\n+                    case KeyEvent.KEY_TYPED:\n+                    case KeyEvent.KEY_PRESSED:\n+                    case KeyEvent.KEY_RELEASED:\n+                        break;\n+                    default:\n+                        System.out.println(\"Other Event\");\n+                        return;\n+                }\n+\n+                System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+                        \"KeyChar: \" + evt.getKeyChar() + \" = \" + (int) evt.getKeyChar() +\n+                        \"   KeyCode: \" + evt.getKeyCode() +\n+                        \"   Modifiers: \" + evt.getModifiersEx());\n+\n+                if (evt.isActionKey()) {\n+                    System.out.println(\"Action Key\");\n+                }\n+\n+                System.out.println(\"keyText= \" + KeyEvent.getKeyText(evt.getKeyCode()) + \"\\n\");\n+            }\n+        });\n+    }\n+\n+    private static void testEscKeyEvent() {\n+        if (escapeKeyTypedReceived) {\n+            if (tf.getText().equals(ORIGINAL)) {\n+                System.out.println(\"Test PASSED\");\n+            } else {\n+                System.out.println(\"Test FAILED: wrong string\");\n+                throw new RuntimeException(\"The test failed: wrong string:  \" +\n+                        tf.getText());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/EscapeKeyTyped.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4965227\n+ * @requires (os.family == \"linux\")\n+ * @summary tests that Shift+F10 during Window show doesn't cause deadlock- Linux only\n+ *\/\n+\n+public class ShiftF10Test {\n+    private static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(10);\n+\n+            EventQueue.invokeLater(() -> {\n+                frame = new Frame(\"Deadlocking one\");\n+                frame.setSize(100, 100);\n+                frame.setVisible(true);\n+            });\n+\n+            for (int i = 0; i < 250; i++) {\n+                robot.keyPress(KeyEvent.VK_SHIFT);\n+                robot.keyPress(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_F10);\n+                robot.keyRelease(KeyEvent.VK_SHIFT);\n+                robot.delay(10);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test Failed due to following error: \", e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/ShiftF10Test.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+ * @test\n+ * @bug 4992908\n+ * @key headful\n+ * @summary Need way to get location of MouseEvent in screen coordinates\n+ *\/\n+\n+\/\/ The test consists of several parts:\n+\/\/ 1. create MouseEvent with new Ctor and checking get(X|Y)OnScreen(),\n+\/\/ getLocationOnScreen(), get(X|Y), getPoint().\n+\/\/ 2. create MouseEvent with old Ctor and checking get(X|Y)OnScreen(),\n+\/\/ getLocationOnScreen(),  get(X|Y), getPoint() .\n+\n+public class MouseEventAbsoluteCoordsTest implements MouseListener {\n+    private static Frame frame;\n+    private static Robot robot;\n+\n+    private static Point mousePositionOnScreen = new Point(200, 200);\n+    private static final Point mousePosition = new Point(100, 100);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            MouseEventAbsoluteCoordsTest cordsTest =\n+                    new MouseEventAbsoluteCoordsTest();\n+            cordsTest.createTestUI();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void createTestUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"MouseEvent Test Frame\");\n+            frame.setSize(200, 200);\n+            frame.setLocation(300, 400);\n+            frame.addMouseListener(this);\n+            frame.setVisible(true);\n+        });\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        \/\/ use new MouseEvent's Ctor with user-defined absolute\n+        \/\/ coordinates\n+        System.out.println(\"Stage MOUSE_PRESSED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_PRESSED);\n+\n+        System.out.println(\"Stage MOUSE_RELEASED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_RELEASED);\n+\n+        System.out.println(\"Stage MOUSE_CLICKED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_CLICKED);\n+\n+        \/\/ call syncLocation to get correct on-screen frame position\n+        syncLocationToWindowManager();\n+\n+        \/\/ now we gonna use old MouseEvent's Ctor thus absolute\n+        \/\/ position calculates as frame's location + relative coords\n+        \/\/ of the event.\n+        EventQueue.invokeAndWait(() -> mousePositionOnScreen = new Point(\n+                frame.getLocationOnScreen().x + mousePosition.x,\n+                frame.getLocationOnScreen().y + mousePosition.y));\n+\n+        System.out.println(\"Stage MOUSE_PRESSED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_PRESSED);\n+\n+        System.out.println(\"Stage MOUSE_RELEASED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_RELEASED);\n+\n+        System.out.println(\"Stage MOUSE_CLICKED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_CLICKED);\n+    }\n+\n+    private static void syncLocationToWindowManager() {\n+        Toolkit.getDefaultToolkit().sync();\n+        try {\n+            Thread.sleep(500);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public void mousePressed(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    @Override\n+    public void mouseExited(MouseEvent e) {\n+        System.out.println(\"mouse exited\");\n+    };\n+\n+    @Override\n+    public void mouseReleased(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    @Override\n+    public void mouseEntered(MouseEvent e) {\n+        System.out.println(\"mouse entered\");\n+    };\n+\n+    @Override\n+    public void mouseClicked(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    public void postMouseEventNewCtor(int MouseEventType) {\n+        MouseEvent mouseEvt = new MouseEvent(frame,\n+                                       MouseEventType,\n+                                       System.currentTimeMillis(),\n+                                       MouseEvent.BUTTON1_DOWN_MASK,\n+                                       mousePosition.x, mousePosition.y,\n+                                       mousePositionOnScreen.x,\n+                                       mousePositionOnScreen.y,\n+                                       1,\n+                                       false,\n+                                       MouseEvent.NOBUTTON\n+                                       );\n+        frame.dispatchEvent(mouseEvt);\n+    }\n+\n+    public void postMouseEventOldCtor(int MouseEventType) {\n+        MouseEvent oldMouseEvt = new MouseEvent(frame,\n+                                          MouseEventType,\n+                                          System.currentTimeMillis(),\n+                                          MouseEvent.BUTTON1_DOWN_MASK,\n+                                          mousePosition.x, mousePosition.y,\n+                                          1,\n+                                          false,\n+                                          MouseEvent.NOBUTTON\n+                                          );\n+        frame.dispatchEvent(oldMouseEvt);\n+    }\n+\n+    public void checkEventAbsolutePosition(MouseEvent evt, String message) {\n+        if (evt.getXOnScreen() != mousePositionOnScreen.x ||\n+            evt.getYOnScreen() != mousePositionOnScreen.y ||\n+            !evt.getLocationOnScreen().equals( mousePositionOnScreen)) {\n+                System.out.println(\"evt.location = \"+evt.getLocationOnScreen());\n+                System.out.println(\"mouse.location = \"+mousePositionOnScreen);\n+                throw new RuntimeException(\"get(X|Y)OnScreen() or getPointOnScreen() work incorrectly\");\n+        }\n+\n+        if (evt.getX() != mousePosition.x ||\n+            evt.getY() != mousePosition.y ||\n+            !evt.getPoint().equals( mousePosition)) {\n+            throw new RuntimeException(\"get(X|Y)() or getPoint() work incorrectly\");\n+        }\n+        System.out.println(message);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEventAbsoluteCoordsTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.ContainerAdapter;\n+import java.awt.event.ContainerEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4028904\n+ * @summary Tests whether System.out.println(ContainerEvent e)\n+ *          yields incorrect display or not.\n+ *\/\n+\n+public class ContainerEventChildTest {\n+    private static Frame frame;\n+    private static String com1, com2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame();\n+                Panel outerPanel = new Panel();\n+                Panel innerPanel = new Panel();\n+                Button b = new Button(\"Panel Button\");\n+\n+                innerPanel.addContainerListener(new ContainerAdapter() {\n+                    public void componentAdded(ContainerEvent e) {\n+                        String str1 = e.toString();\n+                        String str2 = (e.getChild()).toString();\n+\n+                        \/\/ extracting child values from ContainerEvent i.e., \"e\" and \"e.getChild()\"\n+                        com1 = str1.substring(str1.indexOf(\"child\") + 6, str1.indexOf(\"]\"));\n+                        com2 = str2.substring(str2.indexOf(\"[\") + 1, str2.indexOf(\",\"));\n+\n+                        System.out.println(\"e : \" + com1);\n+                        System.out.println(\"e.getChild() : \" + com2);\n+\n+                        \/\/ comparing the child values between \"e\" and \"e.getChild()\"\n+                        \/\/ if child value of \"e\" equals null and child values between\n+                        \/\/ \"e\" and \"e.getChild()\" are not equal then throws exception\n+                        if (com1.equals(\"null\") && !(com1.equals(com2))) {\n+                            System.out.println(\"unequal\");\n+                            throw new RuntimeException(\"Test Failed e.toString returns false value\");\n+                        } else {\n+                            System.out.println(\"Test Passed - e and e.getChild() are same\");\n+                        }\n+                    }\n+                });\n+                innerPanel.add(b);\n+                outerPanel.add(innerPanel);\n+                frame.add(outerPanel);\n+                frame.setVisible(true);\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/OtherEvents\/ContainerEventChildTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4418155\n+ * @key headful\n+ * @summary Checks Undecorated Frame repaints when shrinking\n+ *\/\n+\n+public class UndecoratedShrink extends Frame {\n+    private static boolean passed = false;\n+    private static UndecoratedShrink frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new UndecoratedShrink();\n+                frame.setUndecorated(true);\n+                frame.setSize(100, 100);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setSize(50, 50);\n+                frame.repaint();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test Fails.\" +\n+                        \" Frame does not get repainted\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        passed = true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/OtherEvents\/UndecoratedShrink.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.IllegalComponentStateException;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.TextEvent;\n+import java.awt.event.TextListener;\n+\n+\/*\n+ * @test\n+ * @bug 4503516\n+ * @key headful\n+ * @summary TextEvent behaves differently across platforms, especially Solaris.\n+ *          Following testcase is used to test whether an initial TextEvent\n+ *          is triggered when a TextArea or TextField is initially added to UI.\n+ *\/\n+\n+public class InitialTextEventTest implements TextListener {\n+    private static Frame frame;\n+    private static TextField textField;\n+    private static TextArea textArea;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+\n+            InitialTextEventTest textEventObj = new InitialTextEventTest();\n+            EventQueue.invokeAndWait(textEventObj::createUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(textEventObj::testInitialTextEvent);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void createUI() {\n+        frame = new Frame();\n+        frame.setTitle(\"Text Event Test\");\n+        frame.setLayout(new FlowLayout());\n+\n+        textField = new TextField(\"TextField\");\n+        textArea = new TextArea(\"TextArea\", 5, 10);\n+\n+        textField.addTextListener(this);\n+        textArea.addTextListener(this);\n+\n+        frame.add(textField);\n+        frame.add(textArea);\n+\n+        frame.setBackground(Color.red);\n+        frame.setSize(500,200);\n+        frame.setVisible(true);\n+    }\n+\n+    private void testInitialTextEvent() {\n+        Point pt;\n+        boolean drawn = false;\n+        while (!drawn) {\n+            try {\n+                pt = textArea.getLocationOnScreen();\n+                System.out.println(\"On-Screen Location on Text Area: \" + pt);\n+                pt = textField.getLocationOnScreen();\n+                System.out.println(\"On-Screen Location on Text Field: \" + pt);\n+            } catch (IllegalComponentStateException icse) {\n+                try {\n+                    Thread.sleep(50);\n+                } catch (InterruptedException ignored) {}\n+                continue;\n+            }\n+            drawn = true;\n+        }\n+    }\n+\n+    @Override\n+    public void textValueChanged(TextEvent e) {\n+        System.out.println(\"text event paramString: \" + e.paramString());\n+        System.out.println(\"text event changed on: \" + e.getSource().getClass().getName());\n+        throw new RuntimeException(\"InitialTextEventTest FAILED\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/TextEvent\/InitialTextEventTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,2 +101,7 @@\n-        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test Instruction\" +\n-                \"Frame\", info, 10, 10, 45);\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"Test Instructions Frame\")\n+                .instructions(info)\n+                .testTimeOut(10)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+    private static final String N2_STR = \"N2\";\n@@ -43,12 +44,20 @@\n-        userRoot = Preferences.userRoot();\n-        ncla = new NodeChangeListenerAdd();\n-        userRoot.addNodeChangeListener(ncla);\n-        \/\/Should initiate a node added event\n-        addNode();\n-        \/\/ Should not initiate a node added event\n-        addNode();\n-        \/\/Should initate a child removed event\n-        removeNode();\n-\n-        if (failed) {\n-            throw new RuntimeException(\"Failed\");\n+        try {\n+            userRoot = Preferences.userRoot();\n+            \/\/ Make sure test node is not present before test\n+            clearPrefs();\n+\n+            ncla = new NodeChangeListenerAdd();\n+            userRoot.addNodeChangeListener(ncla);\n+            \/\/Should initiate a node added event\n+            addNode();\n+            \/\/ Should not initiate a node added event\n+            addNode();\n+            \/\/Should initate a child removed event\n+            removeNode();\n+\n+            if (failed) {\n+                throw new RuntimeException(\"Failed\");\n+            }\n+        } finally {\n+            \/\/ Make sure test node is not present after the test\n+            clearPrefs();\n@@ -60,1 +69,1 @@\n-        N2 = userRoot.node(\"N2\");\n+        N2 = userRoot.node(N2_STR);\n@@ -62,12 +71,1 @@\n-        int passItr = -1;\n-\n-        for (int i = 0; i < SLEEP_ITRS; i++) {\n-            System.out.print(\"addNode sleep iteration \" + i + \"...\");\n-            Thread.sleep(3000);\n-            System.out.println(\"done.\");\n-            if (ncla.getAddNumber() == 1) {\n-                passItr = i;\n-                break;\n-            }\n-        }\n-        checkPassItr(passItr, \"addNode()\");\n+        checkAndSleep(1, \"addNode\");\n@@ -80,1 +78,2 @@\n-        int passItr = -1;\n+        checkAndSleep(0, \"removeNode\");\n+    }\n@@ -82,0 +81,6 @@\n+    \/* Check for the expected value in the listener (1 after addNode(), 0 after removeNode()).\n+     * Sleep a few extra times in a loop, if needed, for debugging purposes, to\n+     * see if the event gets delivered late.\n+     *\/\n+    private static void checkAndSleep(int expectedListenerVal, String methodName) throws InterruptedException {\n+        int expectedItr = -1; \/\/ iteration in which the expected value was retrieved from the listener, or -1 if never\n@@ -83,1 +88,1 @@\n-            System.out.print(\"removeNode sleep iteration \" + i + \"...\");\n+            System.out.print(methodName + \" sleep iteration \" + i + \"...\");\n@@ -86,2 +91,2 @@\n-            if (ncla.getAddNumber() == 0) {\n-                passItr = i;\n+            if (ncla.getAddNumber() == expectedListenerVal) {\n+                expectedItr = i;\n@@ -91,2 +96,0 @@\n-        checkPassItr(passItr, \"removeNode()\");\n-    }\n@@ -94,5 +97,1 @@\n-    \/* If the listener wasn't notified on iteration 0, throw a RuntimeException\n-     * with some contextual information\n-     *\/\n-    private static void checkPassItr(int itr, String methodName) {\n-        if (itr == 0) {\n+        if (expectedItr == 0) {\n@@ -102,2 +101,2 @@\n-            if (itr == -1) {\n-                throw new RuntimeException(\"Failed in \" + methodName + \" - change listener never notified\");\n+            if (expectedItr == -1) {\n+                System.out.println(\"Failed in \" + methodName + \" - change listener never notified\");\n@@ -105,1 +104,15 @@\n-                throw new RuntimeException(\"Failed in \" + methodName + \" - listener notified on iteration \" + itr);\n+                System.out.println(\"Failed in \" + methodName + \" - listener notified on iteration \" + expectedItr);\n+            }\n+        }\n+    }\n+\n+    \/* Check if the node already exists in userRoot, and remove it if so. *\/\n+    private static void clearPrefs() throws BackingStoreException {\n+        if (userRoot.nodeExists(N2_STR)) {\n+            System.out.println(\"Node \" + N2_STR + \" already\/still exists; clearing\");\n+            Preferences clearNode = userRoot.node(N2_STR);\n+            userRoot.flush();\n+            clearNode.removeNode();\n+            userRoot.flush();\n+            if (userRoot.nodeExists(N2_STR)) {\n+                throw new RuntimeException(\"Unable to clear pre-existing node.\" + (failed ? \" Also, the test failed\" : \"\"));\n","filename":"test\/jdk\/java\/util\/prefs\/AddNodeChangeListener.java","additions":53,"deletions":40,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,4 @@\n-        Thread.sleep(100); \/\/ let pass the first client open notif if there is\n+        \/\/ Sleeping here was an attempt to avoid seeing an initial notification.\n+        \/\/ This does not work, but does not matter.\n+        \/\/ Thread.sleep(100);\n+\n@@ -103,0 +106,1 @@\n+                System.out.println(\"Calling sendNotifications\");\n@@ -108,1 +112,1 @@\n-                    lock.wait(10);\n+                    lock.wait(1000); \/\/ sleep as no point in constant notifications\n@@ -146,1 +150,1 @@\n-                \/\/ treat the client notif to know the end\n+                System.out.println(\"handleNotification: \" + n);\n@@ -149,1 +153,1 @@\n-\n+                        \/\/ Expected: [type=jmx.remote.connection.opened][message=Reconnected to server]\n@@ -162,1 +166,1 @@\n-                System.out.println(\">>> Do sleep to make reconnection.\");\n+                System.out.println(\">>> sleeping in NotificationListener to force reconnection.\");\n@@ -173,1 +177,3 @@\n-    private static final long serverTimeout = 1000;\n+    \/\/ serverTimeout increased to avoid occasional problems with initial connect.\n+    \/\/ Not using Utils.adjustTimeout to avoid accidentally making it too long.\n+    private static final long serverTimeout = 2000;\n@@ -176,1 +182,1 @@\n-    private static String clientState = null;\n+    private volatile static String clientState = null;\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotifReconnectDeadlockTest.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4741926\n+ * @summary JFormattedTextField\/JSpinner always consumes certain key events\n+ * @key headful\n+ * @run main bug4741926\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Date;\n+import javax.swing.AbstractAction;\n+import javax.swing.InputMap;\n+import javax.swing.JComponent;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4741926 {\n+\n+    static MyFormattedTextField ftf;\n+    static JFrame fr;\n+    static Robot robot;\n+    static volatile boolean passed_enter = false;\n+    static volatile boolean passed_escape = false;\n+    static volatile boolean ftfFocused = false;\n+    static volatile boolean keyProcessed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+                ftf = new MyFormattedTextField();\n+                ftf.setValue(\"JFormattedTextField\");\n+                JPanel p = (JPanel) fr.getContentPane();\n+                p.add(ftf);\n+                ftf.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        ftfFocused = true;\n+                    }\n+                });\n+                InputMap map = p.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);\n+\n+                map.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),\n+                        \"enter-action\");\n+                p.getActionMap().put(\"enter-action\", new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        passed_enter = true;\n+                        keyProcessed = true;\n+                    }\n+                });\n+                map.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),\n+                        \"escape-action\");\n+                p.getActionMap().put(\"escape-action\", new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        passed_escape = true;\n+                        keyProcessed = true;\n+                    }\n+                });\n+                fr.pack();\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test();\n+            if (!(passed_enter && passed_escape)) {\n+                throw new RuntimeException(\"JFormattedTextField consume \" +\n+                        \"Enter\/Escape key event\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void test() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            ftf.requestFocus();\n+        });\n+        robot.delay(500);\n+        doTest(KeyEvent.VK_ENTER);\n+        doTest(KeyEvent.VK_ESCAPE);\n+    }\n+\n+    static void doTest(int keyCode) throws InterruptedException {\n+        keyProcessed = false;\n+        KeyEvent key = new KeyEvent(ftf, KeyEvent.KEY_PRESSED,\n+                                    new Date().getTime(), 0,\n+                                    keyCode,\n+                                    KeyEvent.CHAR_UNDEFINED);\n+        ftf.processKey(key);\n+    }\n+\n+    static class MyFormattedTextField extends JFormattedTextField {\n+        public void processKey(KeyEvent e) {\n+            processKeyEvent(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4741926.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4863121\n+ * @summary JFormattedTextField's NotifyAction should invoke invalidEdit if\n+   commit fails\n+ * @key headful\n+ * @run main bug4863121\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.text.Format;\n+import java.text.DecimalFormat;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4863121 {\n+\n+    static TestFormattedTextField ftf;\n+    static JFrame fr;\n+    static Robot robot;\n+\n+    private static volatile boolean focused = false;\n+    private static volatile boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+                ftf = new TestFormattedTextField(new DecimalFormat(\"####\"));\n+                ftf.setText(\"q\");\n+                fr.getContentPane().add(ftf);\n+\n+                ftf.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        focused = true;\n+                    }\n+                });\n+                fr.pack();\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                ftf.requestFocus();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            if (!passed) {\n+                throw new RuntimeException(\"JFormattedTextField's NotifyAction \" +\n+                        \"should invoke invalidEdit if commit fails\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static class TestFormattedTextField extends JFormattedTextField {\n+        public TestFormattedTextField(Format f) {\n+            super(f);\n+        }\n+        protected void invalidEdit() {\n+            passed = true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4863121.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4886538\n+ * @summary JFormattedTextField not returning correct value (class)\n+ * @run main bug4886538\n+ *\/\n+\n+import javax.swing.JFormattedTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.DefaultFormatterFactory;\n+\n+public class bug4886538 {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ test default display formatter\n+        TestFormattedTextField field = new TestFormattedTextField(0.0);\n+        field.setFormatter(((DefaultFormatterFactory) field.\n+                getFormatterFactory()).getDisplayFormatter());\n+        field.setText(\"10\");\n+        field.commitEdit();\n+\n+        Object dblValue = field.getValue();\n+        if (!(dblValue instanceof Double)) {\n+            throw new RuntimeException(\"The JFormattedTextField's value \" +\n+                    \"should be instanceof Double\");\n+        }\n+\n+        \/\/ test default editor formatter\n+        field = new TestFormattedTextField(0.0);\n+        field.setFormatter(((DefaultFormatterFactory) field.\n+                getFormatterFactory()).getEditFormatter());\n+        field.setText(\"10\");\n+        field.commitEdit();\n+\n+        dblValue = field.getValue();\n+        if (!(dblValue instanceof Double)) {\n+            throw new RuntimeException(\"The JFormattedTextField's value \" +\n+                    \"should be instanceof Double\");\n+        }\n+\n+    }\n+\n+    static class TestFormattedTextField extends JFormattedTextField {\n+        public TestFormattedTextField(Object value) {\n+            super(value);\n+        }\n+        public void setFormatter(JFormattedTextField.AbstractFormatter formatter) {\n+            super.setFormatter(formatter);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/bug4886538.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.MouseInfo;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8187759\n+ * @summary Test to check if JFrame background is refreshed in Linux.\n+ * @requires (os.family == \"linux\")\n+ * @run main JFrameBackgroundRefreshTest\n+ *\/\n+\n+public class JFrameBackgroundRefreshTest {\n+    public static JFrame frame;\n+    private static final BufferedImage test = generateImage();\n+    private static Point p = new Point();\n+    private static Robot robot;\n+    private static JFrame whiteFrame;\n+    private static Point frameLocation;\n+    private static int frameCenterX, frameCenterY, awayX, awayY;\n+    private static int imageCenterX, imageCenterY;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    JFrameBackgroundRefreshTest.initialize();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameLocation = whiteFrame.getLocationOnScreen();\n+                frameCenterX = frameLocation.x + whiteFrame.getWidth() \/ 2;\n+                frameCenterY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                awayX = frameLocation.x + whiteFrame.getWidth() + 100;\n+                awayY = frameLocation.y + whiteFrame.getHeight() \/ 2;\n+                imageCenterX = p.x + test.getWidth() \/ 2;\n+                imageCenterY = p.y + test.getHeight() \/ 2;\n+            });\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            robot.mouseMove(imageCenterX, imageCenterY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            moveMouseSlowly(frameCenterX, frameCenterY);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            moveMouseSlowly(awayX, awayY);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            Rectangle screenCaptureRect = new Rectangle(frameCenterX - 50,\n+                    frameCenterY - 50, 100, 100);\n+            BufferedImage bufferedImage = robot.createScreenCapture(screenCaptureRect);\n+\n+            if (!compareImages(bufferedImage)) {\n+                try {\n+                    ImageIO.write(bufferedImage, \"png\",\n+                            new File(\"FailureImage.png\"));\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+                throw new RuntimeException(\"Test Failed!\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (whiteFrame != null) {\n+                    whiteFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void moveMouseSlowly( int targetX, int targetY) {\n+        Point currentMousePos = MouseInfo.getPointerInfo().getLocation();\n+        int currentX = currentMousePos.x;\n+        int currentY = currentMousePos.y;\n+        int deltaX = targetX - currentX;\n+        int deltaY = targetY - currentY;\n+        int steps = 50;\n+        double stepX = (double) deltaX \/ steps;\n+        double stepY = (double) deltaY \/ steps;\n+        for (int i = 1; i <= steps; i++) {\n+            int nextX = currentX + (int) Math.round(i * stepX);\n+            int nextY = currentY + (int) Math.round(i * stepY);\n+            robot.mouseMove(nextX, nextY);\n+            robot.delay(10);\n+        }\n+        robot.mouseMove(targetX, targetY);\n+    }\n+\n+    private static boolean compareImages(BufferedImage bufferedImage) {\n+        int sampleRGB = bufferedImage.getRGB(0,0);\n+        for (int x = 0; x < bufferedImage.getWidth(); x++) {\n+            for (int y = 0; y < bufferedImage.getHeight(); y++) {\n+                if (bufferedImage.getRGB(x, y) != sampleRGB) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void initialize() throws Exception {\n+        frame = new JFrame(\"JFrame Background refresh test\");\n+        whiteFrame = new JFrame(\"White Frame\");\n+        robot = new Robot();\n+        whiteFrame.setSize(200, 200);\n+        whiteFrame.setBackground(Color.WHITE);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setUndecorated(true);\n+        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n+        frame.setBackground(new Color(0, 0, 0, 0));\n+        frame.setContentPane(new TranslucentPane());\n+        frame.addMouseMotionListener(new MouseDragListener());\n+        whiteFrame.setLocationRelativeTo(null);\n+        whiteFrame.setVisible(true);\n+        frame.setVisible(true);\n+        frame.setAlwaysOnTop(true);\n+    }\n+    private static class MouseDragListener extends MouseAdapter {\n+        @Override\n+        public void mouseMoved(MouseEvent e) {\n+            p = e.getPoint();\n+            frame.repaint();\n+        }\n+    }\n+\n+    \/** Capture an image of any component **\/\n+    private static BufferedImage getImage(Component c) {\n+        if (c == null) {\n+            return null;\n+        }\n+        BufferedImage image = new BufferedImage(c.getWidth(),\n+                c.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        c.printAll(g);\n+        g.dispose();\n+        return image;\n+    }\n+\n+    \/** Generates a dummy image to be painted on the frame **\/\n+    private static BufferedImage generateImage() {\n+        JLabel label = new JLabel(\"test\");\n+        label.setFont(new Font(\"Arial\", Font.BOLD, 24));\n+        label.setSize(label.getPreferredSize());\n+        return getImage(label);\n+    }\n+\n+    public static class TranslucentPane extends JPanel {\n+        public TranslucentPane() {\n+            setOpaque(false);\n+        }\n+        @Override\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            Graphics2D g2d = (Graphics2D) g.create();\n+            g2d.setColor(new Color(0,0,0,0));\n+            g2d.fillRect(0, 0, getWidth(), getHeight());\n+            g2d.drawImage(test, p.x, p.y, this);\n+            g2d.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/JFrameBackgroundRefreshTest.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JInternalFrame;\n+\n+\/*\n+ * @test\n+ * @bug 4212562\n+ * @summary To check if StackOverflow occurs if foreground is set to null.\n+ *\/\n+\n+public class bug4212562 {\n+    public static void main(String[] args) {\n+        try {\n+            JInternalFrame jif = new JInternalFrame();\n+            jif.getContentPane().setForeground(null);\n+            jif.getForeground();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Following exception occurred\" +\n+                    \" when getForeground() was called\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4212562.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4123919\n+ * @requires (os.family == \"windows\")\n+ * @summary JPopupMenu.isPopupTrigger() under a different L&F.\n+ * @key headful\n+ * @run main bug4123919\n+ *\/\n+\n+import javax.swing.JLabel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.UIManager;\n+import javax.swing.SwingUtilities;\n+import java.awt.event.MouseEvent;\n+import java.util.Date;\n+\n+public class bug4123919 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JPopupMenu popup = new JPopupMenu(\"Test\");\n+        JLabel lb = new JLabel();\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        SwingUtilities.updateComponentTreeUI(lb);\n+        SwingUtilities.updateComponentTreeUI(popup);\n+        if (!popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_PRESSED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" MotifLookAndFeel when mouse pressed...\");\n+        }\n+        if (popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_RELEASED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" MotifLookAndFeel when mouse released...\");\n+        }\n+\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        SwingUtilities.updateComponentTreeUI(lb);\n+        SwingUtilities.updateComponentTreeUI(popup);\n+\n+        if (popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_PRESSED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" WindowsLookAndFeel when mouse pressed...\");\n+        }\n+        if (!popup.isPopupTrigger(new MouseEvent(lb, MouseEvent.MOUSE_RELEASED,\n+                (new Date()).getTime(), MouseEvent.BUTTON3_MASK, 10, 10, 1, true))) {\n+            throw new RuntimeException(\"JPopupMenu.isPopupTrigger() fails on\" +\n+                    \" WindowsLookAndFeel when mouse released...\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4123919.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4197019\n+ * @key headful\n+ * @run main bug4197019\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Polygon;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.Action;\n+import javax.swing.AbstractAction;\n+import javax.swing.Icon;\n+import javax.swing.JMenuItem;\n+import javax.swing.JMenu;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4197019 {\n+    static volatile JMenuItem mi1;\n+    static volatile JMenuItem mi2;\n+    static volatile Icon i2;\n+    static volatile boolean isPassed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JMenu fileMenu = new JMenu(\"File\");\n+            JPopupMenu p = new JPopupMenu();\n+            Icon i = new ArrowIcon();\n+            Action a = new TestAction(\"Test\", i);\n+            mi1 = fileMenu.add(a);\n+            mi2 = p.add(a);\n+\n+            i2 = new SquareIcon();\n+            a.putValue(Action.SMALL_ICON, i2);\n+\n+            isPassed = (mi2.getIcon() != i2) || (mi1.getIcon() != i2) ||\n+                    (mi1.getIcon() != mi2.getIcon());\n+        });\n+        if (isPassed) {\n+            throw new RuntimeException(\"Failed bug test 4197019\");\n+        }\n+    }\n+\n+    private static class TestAction extends AbstractAction {\n+        public TestAction(String s, Icon i) {\n+            super(s,i);\n+        }\n+        public void actionPerformed(ActionEvent e) {\n+\n+        }\n+    }\n+\n+    private static class ArrowIcon implements Icon {\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            Polygon p = new Polygon();\n+            p.addPoint(x, y);\n+            p.addPoint(x+getIconWidth(), y+getIconHeight()\/2);\n+            p.addPoint(x, y+getIconHeight());\n+            g.fillPolygon(p);\n+\n+        }\n+        public int getIconWidth() { return 4; }\n+        public int getIconHeight() { return 8; }\n+    } \/\/ End class MenuArrowIcon\n+\n+    private static class SquareIcon implements Icon {\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            g.setColor(Color.red);\n+            g.fill3DRect(x,y,4,8,true);\n+        }\n+        public int getIconWidth() { return 8; }\n+        public int getIconHeight() { return 8; }\n+    } \/\/ End class MenuArrowIcon\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4197019.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4265784 4267291\n+ * @summary Tests work of TAB key in JTextArea\n+ * @key headful\n+ * @run main bug4265784\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class bug4265784 {\n+    static JFrame frame;\n+    static JTextArea ta;\n+    static volatile Point p;\n+    static volatile int pos;\n+    static volatile int pos1;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4265784\");\n+                ta = new JTextArea();\n+                frame.getContentPane().add(ta);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = ta.getLocationOnScreen();\n+            });\n+            robot.mouseMove(p.x + 10, p.y + 10);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pos = ta.getCaretPosition();\n+            });\n+            System.out.println(pos);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pos1 = ta.getCaretPosition();\n+            });\n+            System.out.println(pos1);\n+            if (pos == pos1) {\n+                throw new RuntimeException(\"TAB ignored\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/bug4265784.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4207383\n+ * @summary This tests, in a round about manner, that SwingGraphics does\n+ *          not wrongly translate the original graphics when disposed. While\n+ *          this test seems rather ugly, it was possible to get this to happen\n+ *          in real world apps. This test is really only valid for 1.1.x.\n+ * @key headful\n+ * @run main TranslateTest\n+ *\/\n+\n+import java.io.File;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.ComponentUI;\n+import javax.imageio.ImageIO;\n+\n+public class TranslateTest {\n+    static JFrame frame;\n+    static volatile Point pt;\n+    static volatile Dimension dim;\n+    static final int WIDTH = 200;\n+    static final int HEIGHT = 200;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"TranslateTest\");\n+\n+                \/\/ paintComponent() triggers create swing graphics which will\n+                \/\/ be invoked on child.\n+                MyPanel panel = new MyPanel();\n+                panel.setPreferredSize(new Dimension(WIDTH, HEIGHT));\n+                frame.getContentPane().add(panel);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                panel.test();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = frame.getLocationOnScreen();\n+                dim = frame.getSize();\n+            });\n+            BufferedImage img = robot.createScreenCapture(\n+                                    new Rectangle(pt.x + dim.width \/ 2,\n+                                                  pt.y + dim.height \/ 2,\n+                                                  WIDTH \/ 2, HEIGHT \/ 2));\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            Color c = new Color(img.getRGB(img.getWidth() \/ 2, img.getHeight() \/ 2));\n+            if (c.getRed() < 250) {\n+                ImageIO.write(img, \"png\", new File(\"image.png\"));\n+                System.out.println(\"Color \" + c);\n+                throw new RuntimeException(\"Translated Color is not red\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+\n+    static class MyPanel extends JPanel {\n+        int            state;\n+        Graphics       realG;\n+        Image          image;\n+\n+        public void test() {\n+            image = createImage(TranslateTest.WIDTH, TranslateTest.HEIGHT);\n+            Graphics g = image.getGraphics();\n+            g.setClip(0, 0, TranslateTest.WIDTH, TranslateTest.HEIGHT);\n+            realG = g;\n+            state = 1;\n+            paintComponent(g);\n+            state = 3;\n+            paintComponent(g);\n+            state = 4;\n+        }\n+\n+\n+        public void paint(Graphics g) {\n+            if (state == 0) {\n+                test();\n+            }\n+            super.paint(g);\n+        }\n+\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+        }\n+\n+        public void updateUI() {\n+            setUI(new ComponentUI() {\n+                public void paint(Graphics g, JComponent c) {\n+                    if (state == 1) {\n+                        \/\/ g is the first SwingGraphics, when it is disposed\n+                        \/\/ translateX\/translateY will be wrong\n+                        \/\/System.out.println(\"FIRST:\" + g);\n+                        g.translate(100, 100);\n+                        state = 2;\n+                        paintComponent(realG);\n+                    }\n+                    else if (state == 2) {\n+                        \/\/ g is the first SwingGraphics, when it is disposed\n+                        \/\/ translateX\/translateY will be wrong\n+                        g.translate(100, 100);\n+                        \/\/System.out.println(\"Second:\" + g);\n+                    }\n+                    else if (state == 3) {\n+                        \/\/ g should be the same as the first, with the wrong\n+                        \/\/ translate.\n+                        \/\/ otherG should be the second graphics, again with\n+                        \/\/ the wrong translation, disposing the second will\n+                        \/\/ cause g to be translated to -100, -100, which\n+                        \/\/ should not happen.\n+                        Graphics otherG = g.create(0, 0, 100, 100);\n+                        \/\/System.out.println(\"THIRD:\" + g);\n+                        otherG.dispose();\n+                        g.setColor(Color.red);\n+                        \/\/System.out.println(\"LAST: \" + g);\n+                        g.fillRect(100, 100, 100, 100);\n+                    }\n+                    else if (state == 4) {\n+                        g.drawImage(image, 0, 0, null);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingGraphics\/TranslateTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.Action;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.Caret;\n+import javax.swing.text.Element;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.html.HTMLDocument;\n+import javax.swing.text.html.HTMLEditorKit;\n+import java.awt.event.ActionEvent;\n+import java.io.StringReader;\n+\n+\/*\n+ * @test\n+ * @bug 4253334\n+ * @summary Tests that bold attribute unsets properly\n+ *\/\n+\n+public class bug4253334 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JEditorPane ep = new JEditorPane();\n+        ep.setEditable(true);\n+        ep.setContentType(\"text\/html\");\n+\n+        HTMLEditorKit kit = (HTMLEditorKit)ep.getEditorKit();\n+        HTMLDocument doc = (HTMLDocument)kit.createDefaultDocument();\n+        ep.setDocument(doc);\n+        String text = \"<html><body>somesampletext<\/body><\/html>\";\n+        kit.read(new StringReader(text), doc, 0);\n+\n+        \/\/ make some text bold & italic\n+        MutableAttributeSet attrs = new SimpleAttributeSet();\n+        StyleConstants.setBold(attrs, true);\n+        StyleConstants.setItalic(attrs, true);\n+        doc.setCharacterAttributes(3, 9, attrs, false);\n+\n+        Action[] as = kit.getActions();\n+        Action boldAction = null;\n+\n+        for (Action a : as) {\n+            String s = (String) (a.getValue(Action.NAME));\n+            if (s.equals(\"font-bold\")) {\n+                boldAction = a;\n+            }\n+        }\n+        Caret caret = ep.getCaret();\n+        ActionEvent event = new ActionEvent(ep, ActionEvent.ACTION_PERFORMED,\n+                                            \"font-bold\");\n+        caret.setDot(3);\n+        caret.moveDot(7);\n+        boldAction.actionPerformed(event);\n+        caret.setDot(7);\n+        caret.moveDot(12);\n+        boldAction.actionPerformed(event);\n+\n+        Element elem = doc.getCharacterElement(9);\n+        AttributeSet at = elem.getAttributes();\n+        if (StyleConstants.isBold(at)) {\n+            throw new RuntimeException(\"Test Failed: bold attribute set\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/StyledEditorKit\/bug4253334.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.Document;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.StyledEditorKit;\n+\n+\/*\n+ * @test\n+ * @bug 4329418\n+ * @key headful\n+ * @summary Tests if setCharacterAttributes() is maintained\n+ *          after return in J(Editor\/Text)Pane\n+ *\/\n+\n+public class bug4329418 {\n+    private static JFrame jf;\n+    private static StyledEditorKit sek;\n+\n+    private static volatile boolean passed = false;\n+    private static final int FONT_SIZE = 36;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+\n+            SwingUtilities.invokeAndWait(bug4329418::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            robot.delay(300);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\" +\n+                        \" setCharacterAttributes() does not work correctly\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (jf != null) {\n+                    jf.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        jf = new JFrame(\"setCharacterAttributes Test\");\n+        sek = new StyledEditorKit();\n+        JEditorPane jep = new JEditorPane();\n+        jep.setEditorKit(sek);\n+\n+        MutableAttributeSet attrs = sek.getInputAttributes();\n+        StyleConstants.setFontSize(attrs, FONT_SIZE);\n+\n+        jep.addKeyListener(new KeyAdapter() {\n+            public void keyReleased(KeyEvent e) {\n+                MutableAttributeSet attrs = sek.getInputAttributes();\n+                passed = (StyleConstants.getFontSize(attrs) == FONT_SIZE);\n+            }\n+        });\n+\n+        jep.setText(\"aaa\");\n+        Document doc = jep.getDocument();\n+        jep.setCaretPosition(doc.getLength());\n+\n+        jf.getContentPane().add(jep);\n+        jf.setLocationRelativeTo(null);\n+        jf.setSize(200, 200);\n+        jf.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/StyledEditorKit\/bug4329418.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFormattedTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.MaskFormatter;\n+import java.text.ParseException;\n+\n+\/*\n+ * @test\n+ * @bug 4739057\n+ * @summary replaceSelection() method fails on JFormattedTextField\n+ *\/\n+\n+public class bug4739057 {\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            MaskFormatter formatter;\n+            try {\n+                formatter = new MaskFormatter(\"(###) ###-####\");\n+            } catch (ParseException e) {\n+                throw new RuntimeException(e);\n+            }\n+            formatter.setPlaceholderCharacter('#');\n+            JFormattedTextField textField = new JFormattedTextField(formatter);\n+            textField.replaceSelection(\"12345\");\n+            if (!textField.getText().equals(\"(123) 45#-####\")) {\n+                throw new RuntimeException(\"Test Failed! replaceSelection() didn't replace text properly\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/bug4739057.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFormattedTextField;\n+import javax.swing.text.NumberFormatter;\n+import java.text.DecimalFormat;\n+\n+\/*\n+ * @test\n+ * @bug 4763466\n+ * @summary JFormattedTextField and the - sign\n+ *\/\n+\n+public class bug4763466 {\n+\n+    public static void main(String[] args) throws Exception {\n+        DecimalFormat decimalFormat = new DecimalFormat(\"##0.00\");\n+        NumberFormatter textFormatter = new NumberFormatter(decimalFormat);\n+        textFormatter.setAllowsInvalid(false);\n+        textFormatter.setValueClass(Double.class);\n+\n+        JFormattedTextField ftf = new JFormattedTextField(textFormatter);\n+        ftf.setCaretPosition(0);\n+        ftf.setValue((double) -1);\n+\n+        if (ftf.getCaretPosition() == 0) {\n+            throw new RuntimeException(\"Test Failed. Caret position shouldn't be 0\" +\n+                    \" as the sign is literal\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/bug4763466.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4322891\n+ * @summary  Tests if image map receives correct coordinates.\n+ * @key headful\n+ * @run main bug4322891\n+*\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.HyperlinkEvent;\n+import javax.swing.event.HyperlinkListener;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+public class bug4322891 {\n+\n+    private boolean finished = false;\n+    private static boolean passed = false;\n+    private static Robot robot;\n+    private static JFrame f;\n+    private static JEditorPane jep;\n+    private static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            bug4322891 test = new bug4322891();\n+            SwingUtilities.invokeAndWait(test::init);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = jep.getLocationOnScreen();\n+            });\n+            robot.mouseMove(p.x, p.y);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            for (int i = 1; i < 30; i++) {\n+                robot.mouseMove(p.x + i, p.y + i);\n+                robot.waitForIdle();\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        String text = \"<img src=\\\"aaa\\\" height=100 width=100 usemap=\\\"#mymap\\\">\" +\n+                      \"<map name=\\\"mymap\\\">\" +\n+                      \"<area href=\\\"aaa\\\" shape=rect coords=\\\"0,0,100,100\\\">\" +\n+                      \"<\/map>\";\n+\n+        f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        jep.addHyperlinkListener(new HyperlinkListener() {\n+                                    public void hyperlinkUpdate(HyperlinkEvent e) {\n+                                        passed = true;\n+                                    }\n+                                });\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/Map\/bug4322891.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4476002\n+ * @summary  Verifies JEditorPane: <ol> list numbers do not pick up color of the list text\n+ * @key headful\n+ * @run main bug4476002\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4476002 {\n+\n+    private static boolean passed = true;\n+    private static JLabel htmlComponent;\n+\n+    private static Robot robot;\n+    private static JFrame mainFrame;\n+    private static volatile Point p;\n+    private static volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                String htmlText =\n+                    \"<html><head><style>\" +\n+                    \"OL { list-style-type: disc; color: red }\" +\n+                    \"<\/style><\/head>\" +\n+                    \"<body><ol><li>wwwww<\/li><\/ol><\/body><\/html>\";\n+\n+                mainFrame = new JFrame(\"bug4476002\");\n+\n+                htmlComponent = new JLabel(htmlText);\n+                mainFrame.getContentPane().add(htmlComponent);\n+\n+                mainFrame.pack();\n+                mainFrame.setLocationRelativeTo(null);\n+                mainFrame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = htmlComponent.getLocationOnScreen();\n+                d = htmlComponent.getSize();\n+            });\n+            int x0 = p.x;\n+            int y = p.y + d.height\/2;\n+\n+            for (int x = x0; x < x0 + d.width; x++) {\n+                if (robot.getPixelColor(x, y).equals(Color.black)) {\n+                    passed = false;\n+                    break;\n+                }\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/bug4476002.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4412522\n+ * @summary  Tests if HTML that has comments inside of tables is rendered correctly\n+ * @key headful\n+ * @run main bug4412522\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4412522 {\n+\n+    private static boolean passed = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+    private static Robot robot;\n+\n+    public void init() {\n+\n+        String text =\n+                \"<html><head><table border>\" +\n+                \"<tr><td>first cell<\/td><td>second cell<\/td><\/tr>\" +\n+                \"<tr><!-- this is a comment --><td>row heading<\/td><\/tr>\" +\n+                \"<\/table><\/body><\/html>\";\n+\n+        JFrame f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+\n+    public static void main(String args[]) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4412522 test = new bug4412522();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            int tableWidth = 0;\n+            int cellsWidth = 0;\n+\n+            while (!(v instanceof javax.swing.text.html.ParagraphView)) {\n+\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                String viewName = v.getClass().getName();\n+                if (viewName.endsWith(\"TableView\")) {\n+                    tableWidth = r.getBounds().width;\n+                }\n+\n+                if (viewName.endsWith(\"CellView\")) {\n+                    cellsWidth = r.getBounds().x + r.getBounds().width;\n+                }\n+\n+                v = v.getView(n - 1);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+            }\n+\n+            passed = ((tableWidth - cellsWidth) > 10);\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4412522.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4690812\n+ * @summary  Tests if tables are correctly formatted in some cases\n+ * @key headful\n+ * @run main bug4690812\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4690812 {\n+\n+    private static boolean passed = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+\n+    public void init() {\n+\n+        String text =\n+            \"<table cellpadding=0 cellspacing=0 border=0 width=100%>\" +\n+            \"<tr><td width=100%>a<\/td><td><\/td><\/tr>\" +\n+            \"<tr><td width=100%>something<\/td>\" +\n+            \"<td width=1><img src=\\\"file:\/a.jpg\\\" width=1 height=1><\/td><\/tr>\" +\n+            \"<\/table>\";\n+\n+        JFrame f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        Robot robot = new Robot();\n+        bug4690812 test = new bug4690812();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            int tableHeight = 0;\n+            while (!(v instanceof javax.swing.text.html.ParagraphView)) {\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                v = v.getView(n - 1);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+            }\n+            \/\/ left column in the second table row should have width == 1\n+            passed = (r.getBounds().width == 1) ? true : false;\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4690812.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.text.Document;\n+import javax.swing.text.Element;\n+import javax.swing.text.html.FormView;\n+\n+\/*\n+ * @test\n+ * @bug 4210307 4210308\n+ * @summary Tests that FormView button text is internationalized\n+ *\/\n+\n+public class bug4210307 {\n+    private static final String RESET_PROPERTY = \"TEST RESET\";\n+    private static final String SUBMIT_PROPERTY = \"TEST SUBMIT\";\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            Object oldReset = UIManager.put(\"FormView.resetButtonText\",\n+                    RESET_PROPERTY);\n+            Object oldSubmit = UIManager.put(\"FormView.submitButtonText\",\n+                    SUBMIT_PROPERTY);\n+\n+            try {\n+                JEditorPane ep = new JEditorPane(\"text\/html\",\n+                        \"<html><input type=\\\"submit\\\"><\/html>\");\n+                Document doc = ep.getDocument();\n+                Element elem = findInputElement(doc.getDefaultRootElement());\n+                TestView view = new TestView(elem);\n+                view.test(SUBMIT_PROPERTY);\n+\n+                ep = new JEditorPane(\"text\/html\",\n+                        \"<html><input type=\\\"reset\\\"><\/html>\");\n+                doc = ep.getDocument();\n+                elem = findInputElement(doc.getDefaultRootElement());\n+                view = new TestView(elem);\n+                view.test(RESET_PROPERTY);\n+            } finally {\n+                UIManager.put(\"FormView.resetButtonText\", oldReset);\n+                UIManager.put(\"FormView.submitButtonText\", oldSubmit);\n+            }\n+        });\n+    }\n+\n+    private static Element findInputElement(Element root) {\n+        for (int i = 0; i < root.getElementCount(); i++) {\n+            Element elem = root.getElement(i);\n+            if (elem.getName().equals(\"input\")) {\n+                return elem;\n+            } else {\n+                Element e = findInputElement(elem);\n+                if (e != null) return e;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static class TestView extends FormView {\n+        public TestView(Element elem) {\n+            super(elem);\n+        }\n+\n+        public void test(String caption) {\n+            JButton comp = (JButton) createComponent();\n+            if (!comp.getText().equals(caption)) {\n+                throw new RuntimeException(\"Failed: '\" + comp.getText() +\n+                        \"' instead of `\" + caption + \"'\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/bug4210307.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.html.HTMLEditorKit;\n+import java.awt.Component;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4839739\n+ * @key headful\n+ * @summary Tests if JEditorPane works correctly with HTML comments.\n+ *\/\n+\n+public class bug4839739 {\n+\n+    private static JFrame jFrame;\n+    private static JEditorPane jep;\n+    private static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(50);\n+\n+            SwingUtilities.invokeAndWait(bug4839739::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> p = jep.getLocationOnScreen());\n+            robot.delay(200);\n+\n+            robot.mouseMove(p.x + 20, p.y + 20);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.delay(300);\n+\n+            Component comp = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n+            if (!(comp instanceof JEditorPane)) {\n+                throw new RuntimeException(\"Test failed.\" +\n+                        \" JEditorPane doesn't work as expected with HTML comments\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (jFrame != null) {\n+                    jFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        String text = \"<html><head><body><!-- some comment -->\" +\n+                \"some always visible text<\/body><\/html>\";\n+\n+        jFrame = new JFrame(\"JEditorPane With HTML\");\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+        jFrame.getContentPane().add(jep);\n+        jFrame.setSize(200,200);\n+        jFrame.setLocationRelativeTo(null);\n+        jFrame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/bug4839739.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,5 +24,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -30,1 +30,4 @@\n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n@@ -32,1 +35,0 @@\n-import java.nio.file.FileSystem;\n@@ -35,1 +37,3 @@\n-import java.util.List;\n+import java.nio.file.attribute.FileTime;\n+import java.time.Instant;\n+import java.util.HashSet;\n@@ -37,0 +41,4 @@\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n@@ -38,0 +46,3 @@\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -39,1 +50,0 @@\n-import static java.lang.String.format;\n@@ -46,2 +56,1 @@\n- * @requires (os.family == \"linux\") | (os.family == \"mac\")\n- * @run testng\/manual TestLocOffsetFromZip64EF\n+ * @run junit TestLocOffsetFromZip64EF\n@@ -51,7 +60,21 @@\n-    private static final String ZIP_FILE_NAME = \"LargeZipTest.zip\";\n-    \/\/ File that will be created with a size greater than 0xFFFFFFFF\n-    private static final String LARGE_FILE_NAME = \"LargeZipEntry.txt\";\n-    \/\/ File that will be created with a size less than 0xFFFFFFFF\n-    private static final String SMALL_FILE_NAME = \"SmallZipEntry.txt\";\n-    \/\/ The size (4GB) of the large file to be created\n-    private static final long LARGE_FILE_SIZE = 4L * 1024L * 1024L * 1024L;\n+    private static final String ZIP_FILE_NAME = \"LocOffsetFromZip64.zip\";\n+\n+    \/\/ Size of the data block of a Zip64 extended information field with long\n+    \/\/ fields for 'uncompressed size', 'compressed size' and 'local header offset'\n+    private static short ZIP64_DATA_SIZE = (short) Long.BYTES \/\/ Uncompressed size\n+            + Long.BYTES     \/\/ Compressed size\n+            + Long.BYTES;    \/\/ Loc offset\n+\n+    \/\/ Size of the extra field header\n+    private static short EXTRA_HEADER_SIZE = Short.BYTES \/\/ tag\n+            + Short.BYTES; \/\/ data size\n+\n+    \/\/ Size of a Zip64 extended information field including the header\n+    private static final int ZIP64_SIZE = EXTRA_HEADER_SIZE + ZIP64_DATA_SIZE;\n+\n+    \/\/ The Zip64 Magic value for 32-bit fields\n+    private static final int ZIP64_MAGIC_VALUE = 0XFFFFFFFF;\n+    \/\/ The 'unknown' tag, see APPNOTE.txt\n+    private static final short UNKNOWN_TAG = (short) 0x9902;\n+    \/\/ The 'Zip64 extended information' tag, see APPNOTE.txt\n+    private static final short ZIP64_TAG = (short) 0x1;\n@@ -61,0 +84,1 @@\n+     *\n@@ -63,1 +87,1 @@\n-    @BeforeClass\n+    @BeforeEach\n@@ -65,1 +89,0 @@\n-        System.out.println(\"In setup\");\n@@ -67,1 +90,0 @@\n-        createFiles();\n@@ -75,1 +97,1 @@\n-    @AfterClass\n+    @AfterEach\n@@ -77,1 +99,0 @@\n-        System.out.println(\"In cleanup\");\n@@ -79,15 +100,0 @@\n-        Files.deleteIfExists(Path.of(LARGE_FILE_NAME));\n-        Files.deleteIfExists(Path.of(SMALL_FILE_NAME));\n-    }\n-\n-    \/**\n-     * Create a Zip file that will result in the an Zip64 Extra (EXT) header\n-     * being added to the CEN entry in order to find the LOC offset for\n-     * SMALL_FILE_NAME.\n-     *\/\n-    public static void createZipWithZip64Ext() {\n-        System.out.println(\"Executing zip...\");\n-        List<String> commands = List.of(\"zip\", \"-0\", ZIP_FILE_NAME,\n-                LARGE_FILE_NAME, SMALL_FILE_NAME);\n-        Result rc = run(new ProcessBuilder(commands));\n-        rc.assertSuccess();\n@@ -97,1 +103,1 @@\n-     * DataProvider used to verify that a Zip file that contains a Zip64 Extra\n+     * MethodSource used to verify that a Zip file that contains a Zip64 Extra\n@@ -100,8 +106,7 @@\n-    @DataProvider(name = \"zipInfoTimeMap\")\n-    protected Object[][] zipInfoTimeMap() {\n-        return new Object[][]{\n-                {Map.of()},\n-                {Map.of(\"zipinfo-time\", \"False\")},\n-                {Map.of(\"zipinfo-time\", \"true\")},\n-                {Map.of(\"zipinfo-time\", \"false\")}\n-        };\n+    static Stream<Map<String, String>> zipInfoTimeMap() {\n+        return Stream.of(\n+                Map.of(),\n+                Map.of(\"zipinfo-time\", \"False\"),\n+                Map.of(\"zipinfo-time\", \"true\"),\n+                Map.of(\"zipinfo-time\", \"false\")\n+        );\n@@ -115,1 +120,2 @@\n-    @Test(dataProvider = \"zipInfoTimeMap\")\n+    @ParameterizedTest\n+    @MethodSource(\"zipInfoTimeMap\")\n@@ -117,0 +123,2 @@\n+        Set<String> entries = new HashSet<>();\n+\n@@ -124,0 +132,1 @@\n+                        entries.add(file.getFileName().toString());\n@@ -131,0 +140,2 @@\n+        \/\/ Sanity check that ZIP file had the expected entries\n+        assertEquals(Set.of(\"entry\", \"entry2\", \"entry3\"), entries);\n@@ -142,2 +153,0 @@\n-        }\n-    }\n@@ -145,11 +154,3 @@\n-    \/**\n-     * Create the files that will be added to the ZIP file\n-     * @throws IOException if there is a problem  creating the files\n-     *\/\n-    private static void createFiles() throws IOException {\n-        try (RandomAccessFile file = new RandomAccessFile(LARGE_FILE_NAME, \"rw\")\n-        ) {\n-            System.out.printf(\"Creating %s%n\", LARGE_FILE_NAME);\n-            file.setLength(LARGE_FILE_SIZE);\n-            System.out.printf(\"Creating %s%n\", SMALL_FILE_NAME);\n-            Files.writeString(Path.of(SMALL_FILE_NAME), \"Hello\");\n+            \/\/ Sanity check that ZIP file had the expected entries\n+            assertEquals(zip.stream().map(ZipEntry::getName).collect(Collectors.toSet()),\n+                    Set.of(\"entry\", \"entry2\", \"entry3\"));\n@@ -160,3 +161,16 @@\n-     * Utility method to execute a ProcessBuilder command\n-     * @param pb ProcessBuilder to execute\n-     * @return The Result(s) from the ProcessBuilder execution\n+     * This produces a ZIP with similar features as the one created by 'Info-ZIP' which\n+     * caused 'Extended timestamp' parsing to fail before JDK-8255380.\n+     *\n+     * The issue was sensitive to the ordering of 'Info-ZIP extended timestamp' fields and\n+     * 'Zip64 extended information' fields. ZipOutputStream and 'Info-ZIP' order these differently.\n+     *\n+     * ZipFileSystem tried to read the Local file header while parsing the extended timestamp,\n+     * but if the Zip64 extra field was not read yet, ZipFileSystem would incorrecly try to read\n+     * the Local File header from offset 0xFFFFFFFF.\n+     *\n+     * This method creates a ZIP file which includes a CEN with the following features:\n+     *\n+     * - Its extra field has a 'Info-ZIP extended timestamp' field followed by a\n+     *   'Zip64 extended information' field.\n+     * - The sizes and offset fields values of the CEN are set to 0xFFFFFFFF (Zip64 magic values)\n+     *\n@@ -164,9 +178,3 @@\n-    private static Result run(ProcessBuilder pb) {\n-        Process p;\n-        System.out.printf(\"Running: %s%n\", pb.command());\n-        try {\n-            p = pb.start();\n-        } catch (IOException e) {\n-            throw new RuntimeException(\n-                    format(\"Couldn't start process '%s'\", pb.command()), e);\n-        }\n+    public void createZipWithZip64Ext() throws IOException {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        try (ZipOutputStream zo = new ZipOutputStream(out)) {\n@@ -174,7 +182,19 @@\n-        String output;\n-        try {\n-            output = toString(p.getInputStream(), p.getErrorStream());\n-        } catch (IOException e) {\n-            throw new RuntimeException(\n-                    format(\"Couldn't read process output '%s'\", pb.command()), e);\n-        }\n+            ZipEntry e = new ZipEntry(\"entry\");\n+            \/\/ Add an entry, make it STORED and empty to simplify parsing\n+            e.setMethod(ZipEntry.STORED);\n+            e.setSize(0);\n+            e.setCrc(0);\n+            zo.putNextEntry(e);\n+\n+            \/\/ Add an additional entry as a sanity check that we can navigate past the first\n+            ZipEntry e2 = new ZipEntry(\"entry2\");\n+            e2.setMethod(ZipEntry.STORED);\n+            e2.setSize(0);\n+            e2.setCrc(0);\n+            zo.putNextEntry(e2);\n+\n+            \/\/ For good measure, add a third, DEFLATED entry with some content\n+            ZipEntry e3 = new ZipEntry(\"entry3\");\n+            e3.setMethod(ZipEntry.DEFLATED);\n+            zo.putNextEntry(e3);\n+            zo.write(\"Hello\".getBytes(StandardCharsets.UTF_8));\n@@ -182,5 +202,14 @@\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(\n-                    format(\"Process hasn't finished '%s'\", pb.command()), e);\n+            zo.closeEntry(); \/\/ At this point, all LOC headers are written.\n+\n+            \/\/ We want the first CEN entry to have two extra fields:\n+            \/\/ 1: A 'Info-Zip extended timestamp' extra field, generated by ZipOutputStream\n+            \/\/       when the following date fields are set:\n+            e.setLastModifiedTime(FileTime.from(Instant.now()));\n+            e.setLastAccessTime(FileTime.from(Instant.now()));\n+\n+            \/\/ 2: An opaque extra field, right-sized for a Zip64 extended field,\n+            \/\/    to be updated below\n+            byte[] zip64 = makeOpaqueExtraField();\n+            e.setExtra(zip64);\n+\n+            zo.finish(); \/\/ Write out CEN and END records\n@@ -188,1 +217,7 @@\n-        return new Result(p.exitValue(), output);\n+\n+        byte[] zip = out.toByteArray();\n+\n+        \/\/ ZIP now has the right structure, but we need to update the CEN to Zip64 format\n+        updateToZip64(zip);\n+        \/\/ Write the ZIP to disk\n+        Files.write(Path.of(ZIP_FILE_NAME), zip);\n@@ -192,5 +227,4 @@\n-     * Utility Method for combining the output from a ProcessBuilder invocation\n-     * @param in1 ProccessBuilder.getInputStream\n-     * @param in2 ProcessBuilder.getErrorStream\n-     * @return The ProcessBuilder output\n-     * @throws IOException if an error occurs\n+     * Returns an opaque extra field with the tag 'unknown', which makes ZipEntry.setExtra ignore it.\n+     * The returned field has the expected field and data size of a Zip64 extended information field\n+     * including the fields 'uncompressed size' (8 bytes), 'compressed size' (8 bytes) and\n+     * 'local header offset' (8 bytes).\n@@ -198,6 +232,8 @@\n-    static String toString(InputStream in1, InputStream in2) throws IOException {\n-        try (ByteArrayOutputStream dst = new ByteArrayOutputStream();\n-             InputStream concatenated = new SequenceInputStream(in1, in2)) {\n-            concatenated.transferTo(dst);\n-            return new String(dst.toByteArray(), StandardCharsets.UTF_8);\n-        }\n+    private static byte[] makeOpaqueExtraField() {\n+        byte[] zip64 = new byte[ZIP64_SIZE];\n+        ByteBuffer buffer = ByteBuffer.wrap(zip64).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ Using the 'unknown' tag makes ZipEntry.setExtra ignore it\n+        buffer.putShort(UNKNOWN_TAG);\n+        \/\/ Data size\n+        buffer.putShort(ZIP64_DATA_SIZE);\n+        return zip64;\n@@ -207,1 +243,1 @@\n-     * Utility class used to hold the results from  a ProcessBuilder execution\n+     * Update the CEN record to Zip64 format\n@@ -209,3 +245,1 @@\n-    static class Result {\n-        final int ec;\n-        final String output;\n+    private static void updateToZip64(byte[] bytes) throws IOException {\n@@ -213,8 +247,23 @@\n-        private Result(int ec, String output) {\n-            this.ec = ec;\n-            this.output = output;\n-        }\n-        Result assertSuccess() {\n-            assertTrue(ec == 0, \"Expected ec 0, got: \", ec, \" , output [\", output, \"]\");\n-            return this;\n-        }\n+        ByteBuffer buffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n+\n+        \/\/ Look up CEN offset from the End of central directory header\n+        int cenOff = getCenOffet(buffer);\n+\n+        \/\/ Read name, extra field and comment lengths from CEN\n+        short nlen = buffer.getShort(cenOff + ZipFile.CENNAM);\n+        short elen = buffer.getShort(cenOff + ZipFile.CENEXT);\n+\n+        \/\/ Update CEN sizes and loc offset to 0xFFFFFFFF, meaning\n+        \/\/ actual values should be read from the Zip64 field\n+        buffer.putInt(cenOff + ZipFile.CENLEN, ZIP64_MAGIC_VALUE);\n+        buffer.putInt(cenOff + ZipFile.CENSIZ, ZIP64_MAGIC_VALUE);\n+        buffer.putInt(cenOff + ZipFile.CENOFF, ZIP64_MAGIC_VALUE);\n+\n+        \/\/ Offset of the extra fields\n+        int extraOff = cenOff + ZipFile.CENHDR + nlen;\n+\n+        \/\/ Position at the start of the Zip64 extra field\n+        int zip64ExtraOff = extraOff + elen - ZIP64_SIZE;\n+\n+        \/\/ Update tag \/ Header ID to be the actual Zip64 tag instead of the 'unknown'\n+        buffer.putShort(zip64ExtraOff, ZIP64_TAG);\n@@ -222,7 +271,6 @@\n-    static void assertTrue(boolean cond, Object ... failedArgs) {\n-        if (cond)\n-            return;\n-        StringBuilder sb = new StringBuilder();\n-        for (Object o : failedArgs)\n-            sb.append(o);\n-        Assert.fail(sb.toString());\n+\n+    \/**\n+     * Look up the CEN offset field from the End of central directory header\n+     *\/\n+    private static int getCenOffet(ByteBuffer buffer) {\n+        return buffer.getInt(buffer.capacity() - ZipFile.ENDHDR + ZipFile.ENDOFF);\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestLocOffsetFromZip64EF.java","additions":165,"deletions":117,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+\n+import static java.awt.RenderingHints.KEY_ANTIALIASING;\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_ANTIALIAS_ON;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n+\n+\/*\n+ * @test\n+ * @bug 4357180\n+ * @key headful\n+ * @summary When both KEY_ANTIALIASING and KEY_TEXT_ANTIALIASING hints\n+ *          were turned on, java aborts with EXCEPTION_ACCESS_VIOLATION\n+ *          at attempt to draw characters in Hebrew or Arabic.\n+ *          This could happen immediately or after several draws,\n+ *          depending on th locale and platform. This test draws\n+ *          large number of characters that are among this range repeatedly.\n+ *\/\n+\n+public class DoubleAntialiasTest extends Panel {\n+    private static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame();\n+                frame.setTitle(\"DoubleAntialiasTest\");\n+                frame.add(new DoubleAntialiasTest());\n+                frame.pack();\n+                frame.setSize(500, 500);\n+                frame.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Following exception occurred\" +\n+                    \" when testing Antialiasing Rendering hints: \", e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                 if (frame != null) {\n+                     frame.dispose();\n+                 }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D) g;\n+        int y = 50;\n+        for (int i = 0; i < 2; i++) {\n+            int k = 5;\n+            for (int j = 0x500; j < 0x700; j++) {\n+                g2.setRenderingHint(KEY_TEXT_ANTIALIASING,\n+                                    VALUE_TEXT_ANTIALIAS_ON);\n+                g2.setRenderingHint(KEY_ANTIALIASING,\n+                                    VALUE_ANTIALIAS_ON);\n+                g2.drawString(String.valueOf((char) j), (5 + k), y);\n+                k = k + 15;\n+            }\n+            k = 5;\n+            y += 50;\n+            for (int j = 0x700; j > 0x500; j--) {\n+                g2.setRenderingHint(KEY_TEXT_ANTIALIASING,\n+                                    VALUE_TEXT_ANTIALIAS_ON);\n+                g2.setRenderingHint(KEY_ANTIALIASING,\n+                                    VALUE_ANTIALIAS_ON);\n+                g2.drawString(String.valueOf((char) j), (5 + k), y);\n+                k = k + 15;\n+            }\n+            y += 50;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/awt\/font\/DoubleAntialiasTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -560,1 +560,1 @@\n-     * method to return true and allow any flags.\n+     * method to return true or false and allow or reject any flags.\n@@ -566,2 +566,3 @@\n-        if (System.getenv(\"TEST_VM_FLAGLESS\") != null) {\n-            return \"\" + result;\n+        String flagless = System.getenv(\"TEST_VM_FLAGLESS\");\n+        if (flagless != null) {\n+            return \"\" + \"true\".equalsIgnoreCase(flagless);\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}