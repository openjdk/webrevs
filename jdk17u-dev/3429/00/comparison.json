{"files":[{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6391547\n+ * @summary Test if the JTextField's cursor is changed when there is a modal dialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BlockedWindowTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Cursor;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+class MyDialog extends Dialog implements ActionListener {\n+    MyDialog(Frame owner) {\n+        super(owner, \"Modal dialog\", true);\n+        setBounds(owner.getX() + 150, owner.getY() + 150, 100, 100);\n+        setLayout(new BorderLayout());\n+        Button b = new Button(\"Close\");\n+        add(b, \"South\");\n+        b.addActionListener(this);\n+        setVisible(true);\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        setVisible(false);\n+        this.dispose();\n+    }\n+}\n+\n+class MyFrame extends Frame implements ActionListener {\n+    Dialog d;\n+\n+    public MyFrame() {\n+        super(\"ManualYesNoTest\");\n+        Button b = new Button(\"Click here\");\n+        TextField tf = new TextField(\"A text field\");\n+        b.addActionListener(this);\n+        setLayout(new BorderLayout());\n+        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+        add(b, \"South\");\n+        add(tf, \"North\");\n+        setSize(300, 300);\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        d = new MyDialog(this);\n+    }\n+}\n+\n+public class BlockedWindowTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Verify that the hand cursor is displayed over the window and\n+                text cursor over TextField.\n+                Click the button in the window to display a modal dialog.\n+                Verify that default cursor is displayed over the window\n+                and over TextField now.\n+                Then close modal dialog and verify that hand cursor is\n+                displayed over window and text cursor over TextField.\n+                If so, press PASS, else press FAIL.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(BlockedWindowTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static MyFrame createUI() {\n+        MyFrame f = new MyFrame();\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/BlockedWindowTest\/BlockedWindowTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5097531\n+ * @summary Make sure the cursor updates correctly under certain\n+ *          circumstances even when the EDT is busy\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CursorUpdateTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+public class CursorUpdateTest {\n+    final static String progress = \"|\/-\\\\\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Check the following:\n+                1. Cursor must be crosshair when hovering the mouse over the\n+                    blue square.\n+                2. Crosshair cursor must not flicker.\n+                3. The cursor must be \"I-beam\" when hovering the mouse over the\n+                    button.\n+                4. Click the button - it will display \"Busy\" message and a\n+                    rotating bar for 5 seconds. The cursor must change to\n+                    hourglass.\n+                5. (Windows only) While the cursor is on the button, press Alt.\n+                    The cursor must change to normal shape. Pressing Alt again\n+                    must revert it back to I-beam.\n+                6. Move the mouse out of the button and back onto it. The cursor\n+                    must update correctly (hourglass over the button, normal\n+                    over the frame) even when the button displays \"busy\".\n+                    Do not try to check (1) or (5) when the button displays\n+                    \"Busy\" - this is not required.\n+                Pass if all the steps are as behave as described. Otherwise,\n+                fail this test.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(CursorUpdateTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame();\n+        f.setLayout(new FlowLayout());\n+        Button b = new Button(\"Button\");\n+        f.add(b);\n+        b.setCursor(new Cursor(Cursor.TEXT_CURSOR));\n+        Component c = new MyComponent();\n+        f.add(c);\n+        c.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));\n+        b.addActionListener(e -> {\n+            String oldLabel = b.getLabel();\n+            Cursor oldCursor = b.getCursor();\n+            b.setCursor(new Cursor(Cursor.WAIT_CURSOR));\n+            try {\n+                for (int i = 0; i < 50; i++) {\n+                    b.setLabel(\"Busy \" + progress.charAt(i % 4));\n+                    Thread.sleep(100);\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+            b.setCursor(oldCursor);\n+            b.setLabel(oldLabel);\n+        });\n+        return f;\n+    }\n+}\n+\n+class MyComponent extends Component {\n+    public void paint(Graphics g) {\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, getSize().width, getSize().height);\n+    }\n+\n+    public MyComponent() {\n+        setBackground(Color.blue);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(100, 100);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/CursorUpdateTest\/CursorUpdateTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4174035 4106384 4205805\n+ * @summary Test for functionality of Custom Cursor\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CustomCursorTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class CustomCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test is for switching between a custom cursor and the\n+                system cursor.\n+\n+                1. Click on the test window panel to change from the default\n+                    system cursor to the custom red square cursor\n+                2. Verify that the square cursor shows when the panel is clicked\n+                3. Verify that the square cursor is colored red\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(CustomCursorTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        JFrame f = new JFrame(\"Custom Cursor Test\");\n+        CustomCursorPanel c = null;\n+        try {\n+            c = new CustomCursorPanel();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        f.setIconImage(c.getImage());\n+        f.getContentPane().add(c);\n+        f.setSize(400, 400);\n+        return f;\n+    }\n+}\n+\n+class CustomCursorPanel extends Panel {\n+    Toolkit toolkit = Toolkit.getDefaultToolkit();\n+    Image image;\n+    Cursor cursor;\n+    boolean flip = false;\n+\n+    public CustomCursorPanel() throws IOException {\n+        generateRedSquareCursor();\n+\n+        image = toolkit.getImage(System.getProperty(\"test.classes\", \".\")\n+                + java.io.File.separator + \"square_cursor.gif\");\n+\n+        setBackground(Color.green);\n+        cursor = toolkit.createCustomCursor(image, new Point(0, 0), \"custom\");\n+\n+        JLabel c = (JLabel) add(new JLabel(\"click to switch between \" +\n+                \"red square and default cursors\"));\n+        c.setBackground(Color.white);\n+        c.setForeground(Color.red);\n+\n+        addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                if (!flip) {\n+                    setCursor(cursor);\n+                    flip = true;\n+                } else {\n+                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n+                    flip = false;\n+                }\n+            }\n+        });\n+    }\n+\n+    public Image getImage() {\n+        return image;\n+    }\n+\n+    private static void generateRedSquareCursor() throws IOException {\n+        Path p = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        BufferedImage bImg = new BufferedImage(35, 34, TYPE_INT_ARGB);\n+        Graphics2D cg = bImg.createGraphics();\n+        cg.setColor(Color.RED);\n+        cg.fillRect(0, 0, 35, 34);\n+        ImageIO.write(bImg, \"png\", new File(p + java.io.File.separator +\n+                \"square_cursor.gif\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/CustomCursorTest\/CustomCursorTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4114073\n+ * @summary Test for setCursor in a JPanel when added to a JFrame's contentPane\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual JPanelCursorTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+import javax.swing.border.BevelBorder;\n+\n+public class JPanelCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test checks for setCursor in a JPanel when added to a\n+                JFrame's contentPane.\n+\n+                1. Verify that the cursor in the left side of the test window\n+                    is a default cursor.\n+                2. Verify that the cursor changes to the crosshair cursor when\n+                    pointing over the button.\n+                3. Verify that the cursor changes to the hand cursor when in\n+                    the right side of the splitpane (and not on the button).\n+\n+                If true, then pass the test. Otherwise, fail this test.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(JPanelCursorTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createUI() {\n+        JFrame frame = new JFrame();\n+\n+        JSplitPane j = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\n+        ExtJComponent pane = new ExtJComponent();\n+\n+        CursorBugPanel panel = new CursorBugPanel();\n+\n+        j.setLeftComponent(pane);\n+        j.setRightComponent(panel);\n+        j.setContinuousLayout(true);\n+\n+        frame.getContentPane().add(\"Center\", j);\n+        pane.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));\n+        frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n+        frame.pack();\n+        return frame;\n+    }\n+}\n+\n+class ExtJComponent extends JComponent {\n+    public ExtJComponent() {\n+        super();\n+        setOpaque(true);\n+        setBackground(Color.green);\n+        setForeground(Color.red);\n+        setBorder(new BevelBorder(BevelBorder.RAISED));\n+    }\n+    public void paintComponent(Graphics g) {\n+        g.drawString(\"Default\", 20, 30);\n+    }\n+    public Dimension getPreferredSize() {\n+        return new Dimension(100, 100);\n+    }\n+}\n+\n+class CursorBugPanel extends JPanel {\n+    public CursorBugPanel () {\n+        \/\/ BUG: fails to set cursor for panel\n+        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+\n+        \/\/ Create a button\n+        JButton button = new JButton(\"Crosshair\");\n+\n+        \/\/ Sets cursor for button, no problem\n+        button.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\n+        add(button);\n+    }\n+\n+    public void paintComponent(Graphics g) {\n+        g.drawString(\"Hand\", 20, 60);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/JPanelCursorTest\/JPanelCursorTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4160080\n+ * @summary Test setCursor() on lightweight components when event is generated\n+ *          by a button\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetCursorTest\n+ *\/\n+\n+import java.awt.Cursor;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+\n+public class SetCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test checks for the behavior of setCursor() when called in\n+                a JFrame's JButton action event.\n+\n+                1. Click the \"OK\" button in the test window.\n+                2. Verify that the cursor changes to the waiting cursor instead\n+                    of the default system cursor.\n+\n+                If true, then pass the test. Otherwise, fail this test.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(SetCursorTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static myFrame createUI() {\n+        myFrame f = new myFrame();\n+        return f;\n+    }\n+}\n+\n+class myFrame extends JFrame {\n+    public myFrame() {\n+        super(\"SetCursor With Button Test\");\n+        setSize(200, 200);\n+\n+        final JPanel p = new JPanel();\n+        final JButton okButton = new JButton(\"OK\");\n+        okButton.addActionListener(e ->\n+                setCursor(new Cursor(Cursor.WAIT_CURSOR)));\n+\n+        p.add(okButton);\n+        getContentPane().add(p);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/SetCursorTest\/SetCursorTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}