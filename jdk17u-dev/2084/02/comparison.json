{"files":[{"patch":"@@ -169,5 +169,0 @@\n-  inline size_t thread_count() const {\n-    MallocMemorySnapshot* s = const_cast<MallocMemorySnapshot*>(this);\n-    return s->by_type(mtThreadStack)->malloc_count();\n-  }\n-\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -194,0 +194,1 @@\n+  _thread_count = ThreadStackTracker::thread_count();\n","filename":"src\/hotspot\/share\/services\/memBaseline.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+  size_t                 _thread_count;\n@@ -89,1 +90,1 @@\n-    _instance_class_count(0), _array_class_count(0),\n+    _instance_class_count(0), _array_class_count(0), _thread_count(0),\n@@ -176,1 +177,1 @@\n-    return _malloc_memory_snapshot.thread_count();\n+    return _thread_count;\n@@ -185,0 +186,1 @@\n+    _thread_count = 0;\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+  ThreadCritical tc;\n@@ -53,1 +54,0 @@\n-    ThreadCritical tc;\n@@ -55,1 +55,0 @@\n-    _thread_count ++;\n@@ -60,1 +59,0 @@\n-      ThreadCritical tc;\n@@ -66,0 +64,1 @@\n+  _thread_count++;\n@@ -71,0 +70,1 @@\n+  ThreadCritical tc;\n@@ -72,1 +72,0 @@\n-    ThreadCritical tc;\n@@ -74,1 +73,0 @@\n-    _thread_count--;\n@@ -79,1 +77,0 @@\n-      ThreadCritical tc;\n@@ -86,0 +83,1 @@\n+  _thread_count--;\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary run NMT baseline, create threads and verify output from summary.diff\n+ * @author Evgeny Ignatenko\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary SummaryDiffThreadCount\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class SummaryDiffThreadCount {\n+    public static void main(String args[]) throws Exception {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        OutputAnalyzer output;\n+        \/\/ Grab my own PID.\n+        String pid = Long.toString(ProcessTools.getProcessId());\n+\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"baseline=true\"});\n+        pb.start().waitFor();\n+\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Baseline taken\");\n+\n+        \/\/ Creating 10 threads.\n+        for (int i = 0; i < 10; i++) {\n+            new Thread(()-> {\n+                while (true) { continue; }\n+            }).start();\n+        }\n+\n+        \/\/ Running \"jcmd <pid> VM.native_memory summary.diff\" and checking for five new threads reported.\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"summary.diff\"});\n+        output = new OutputAnalyzer(pb.start());\n+\n+        \/\/ Trailing '+' is needed to check that NMT now reports that now we have more threads than it\n+        \/\/ was during the baseline.\n+        output.shouldMatch(\"thread #\\\\d+ \\\\+\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummaryDiffThreadCount.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}