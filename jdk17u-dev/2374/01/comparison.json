{"files":[{"patch":"@@ -1,1 +1,1 @@\n-File-Date: 2023-05-11\n+File-Date: 2023-08-02\n@@ -47647,0 +47647,9 @@\n+Subtag: blasl\n+Description: Black American Sign Language dialect\n+Added: 2023-07-31\n+Prefix: ase\n+Prefix: sgn-ase\n+Comments: Black American Sign Language (BASL) or Black Sign Variation\n+  (BSV) is a dialect of American Sign Language (ASL)\n+%%\n+Type: variant\n","filename":"make\/data\/lsrdata\/language-subtag-registry.txt","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,855 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary test ISO639-2 language codes\n- * @library \/java\/text\/testlib\n- * @compile -encoding ascii Bug4175998Test.java\n- * @run main Bug4175998Test\n- * @bug 4175998\n- *\/\n-\n-\/*\n- *\n- *\n- * (C) Copyright IBM Corp. 1998 - All Rights Reserved\n- *\n- * The original version of this source code and documentation is\n- * copyrighted and owned by IBM. These materials are provided\n- * under terms of a License Agreement between IBM and Sun.\n- * This technology is protected by multiple US and International\n- * patents. This notice and attribution to IBM may not be removed.\n- *\n- *\/\n-\n-import java.util.*;\n-\n-\/**\n- *  Bug4175998Test verifies that the following bug has been fixed:\n- *  Bug 4175998 - The java.util.Locale.getISO3Language() returns wrong result for a locale with\n- *           language code 'ta'(Tamil).\n- *\/\n-public class Bug4175998Test extends IntlTest {\n-    public static void main(String[] args) throws Exception {\n-        new Bug4175998Test().run(args);\n-        \/\/generateTables();    \/\/uncomment this to regenerate data tables\n-    }\n-\n-    public void testIt() throws Exception {\n-        boolean bad = false;\n-        for (int i = 0; i < CODES.length; i++) {\n-            final String[] localeCodes = CODES[i];\n-            final Locale l = new Locale(localeCodes[0], \"\");\n-            final String iso3 = l.getISO3Language();\n-            if (!iso3.equals(localeCodes[1]) \/*&& !iso3.equals(localeCodes[2])*\/) {\n-                logln(\"Locale(\"+l+\") returned bad ISO3 language code.\"\n-                        +\"   Got '\"+iso3+\"' instead of '\"+localeCodes[1]+\"'\"\/*+\" or '\"+localeCodes[2]+\"'\"*\/);\n-                bad = true;\n-            }\n-        }\n-        if (bad) {\n-            errln(\"Bad ISO3 language codes detected.\");\n-        }\n-    }\n-\n-     private static final String[][] CODES = {\n-        {\"pt\",\"por\",\"por\"},\n-        {\"eu\",\"eus\",\"baq\"},\n-        {\"ps\",\"pus\",\"pus\"},\n-        {\"et\",\"est\",\"est\"},\n-        {\"ka\",\"kat\",\"geo\"},\n-        {\"es\",\"spa\",\"spa\"},\n-        {\"eo\",\"epo\",\"epo\"},\n-        {\"en\",\"eng\",\"eng\"},\n-        {\"pl\",\"pol\",\"pol\"},\n-        {\"el\",\"ell\",\"gre\"},\n-        {\"uz\",\"uzb\",\"uzb\"},\n-        {\"jv\",\"jav\",\"jav\"},\n-        {\"ur\",\"urd\",\"urd\"},\n-        {\"uk\",\"ukr\",\"ukr\"},\n-        {\"ug\",\"uig\",\"uig\"},\n-        {\"zu\",\"zul\",\"zul\"},\n-        {\"ja\",\"jpn\",\"jpn\"},\n-        {\"or\",\"ori\",\"ori\"},\n-        {\"om\",\"orm\",\"orm\"},\n-        {\"zh\",\"zho\",\"chi\"},\n-        {\"tw\",\"twi\",\"twi\"},\n-        {\"de\",\"deu\",\"ger\"},\n-        {\"oc\",\"oci\",\"oci\"},\n-        {\"za\",\"zha\",\"zha\"},\n-        {\"tt\",\"tat\",\"tat\"},\n-        {\"iu\",\"iku\",\"iku\"},\n-        {\"ts\",\"tso\",\"tso\"},\n-        {\"it\",\"ita\",\"ita\"},\n-        {\"tr\",\"tur\",\"tur\"},\n-        {\"da\",\"dan\",\"dan\"},\n-        {\"is\",\"isl\",\"ice\"},\n-        {\"to\",\"ton\",\"ton\"},\n-        {\"tl\",\"tgl\",\"tgl\"},\n-        {\"tk\",\"tuk\",\"tuk\"},\n-        {\"ik\",\"ipk\",\"ipk\"},\n-        {\"ti\",\"tir\",\"tir\"},\n-        {\"th\",\"tha\",\"tha\"},\n-        {\"tg\",\"tgk\",\"tgk\"},\n-        {\"te\",\"tel\",\"tel\"},\n-        {\"cy\",\"cym\",\"wel\"},\n-        {\"ie\",\"ile\",\"ile\"},\n-        {\"id\",\"ind\",\"ind\"},\n-        {\"ta\",\"tam\",\"tam\"},\n-        {\"ia\",\"ina\",\"ina\"},\n-        {\"cs\",\"ces\",\"cze\"},\n-        {\"yo\",\"yor\",\"yor\"},\n-        {\"no\",\"nor\",\"nor\"},\n-        {\"co\",\"cos\",\"cos\"},\n-        {\"nl\",\"nld\",\"dut\"},\n-        {\"yi\",\"yid\",\"yid\"},\n-        {\"hy\",\"hye\",\"arm\"},\n-        {\"sw\",\"swa\",\"swa\"},\n-        {\"ne\",\"nep\",\"nep\"},\n-        {\"sv\",\"swe\",\"swe\"},\n-        {\"su\",\"sun\",\"sun\"},\n-        {\"hu\",\"hun\",\"hun\"},\n-        {\"na\",\"nau\",\"nau\"},\n-        {\"sr\",\"srp\",\"scc\"},\n-        {\"ca\",\"cat\",\"cat\"},\n-        {\"sq\",\"sqi\",\"alb\"},\n-        {\"hr\",\"hrv\",\"scr\"},\n-        {\"so\",\"som\",\"som\"},\n-        {\"sn\",\"sna\",\"sna\"},\n-        {\"sm\",\"smo\",\"smo\"},\n-        {\"sl\",\"slv\",\"slv\"},\n-        {\"sk\",\"slk\",\"slo\"},\n-        {\"si\",\"sin\",\"sin\"},\n-        {\"hi\",\"hin\",\"hin\"},\n-        {\"my\",\"mya\",\"bur\"},\n-        {\"sd\",\"snd\",\"snd\"},\n-        {\"he\",\"heb\",\"heb\"},\n-        {\"sa\",\"san\",\"san\"},\n-        {\"mt\",\"mlt\",\"mlt\"},\n-        {\"ms\",\"msa\",\"may\"},\n-        {\"ha\",\"hau\",\"hau\"},\n-        {\"mr\",\"mar\",\"mar\"},\n-        {\"br\",\"bre\",\"bre\"},\n-        {\"mo\",\"mol\",\"mol\"},\n-        {\"bo\",\"bod\",\"tib\"},\n-        {\"mn\",\"mon\",\"mon\"},\n-        {\"bn\",\"ben\",\"ben\"},\n-        {\"ml\",\"mal\",\"mal\"},\n-        {\"mk\",\"mkd\",\"mac\"},\n-        {\"xh\",\"xho\",\"xho\"},\n-        {\"mi\",\"mri\",\"mao\"},\n-        {\"bi\",\"bis\",\"bis\"},\n-        {\"bh\",\"bih\",\"bih\"},\n-        {\"mg\",\"mlg\",\"mlg\"},\n-        {\"bg\",\"bul\",\"bul\"},\n-        {\"rw\",\"kin\",\"kin\"},\n-        {\"be\",\"bel\",\"bel\"},\n-        {\"ru\",\"rus\",\"rus\"},\n-        {\"gu\",\"guj\",\"guj\"},\n-        {\"ba\",\"bak\",\"bak\"},\n-        {\"ro\",\"ron\",\"rum\"},\n-        {\"rm\",\"roh\",\"roh\"},\n-        {\"gn\",\"grn\",\"grn\"},\n-        {\"az\",\"aze\",\"aze\"},\n-        {\"ay\",\"aym\",\"aym\"},\n-        {\"gd\",\"gla\",\"gla\"},\n-        {\"lv\",\"lav\",\"lav\"},\n-        {\"lt\",\"lit\",\"lit\"},\n-        {\"ga\",\"gle\",\"gle\"},\n-        {\"as\",\"asm\",\"asm\"},\n-        {\"ar\",\"ara\",\"ara\"},\n-        {\"wo\",\"wol\",\"wol\"},\n-        {\"ln\",\"lin\",\"lin\"},\n-        {\"am\",\"amh\",\"amh\"},\n-        {\"fy\",\"fry\",\"fry\"},\n-        {\"af\",\"afr\",\"afr\"},\n-        {\"qu\",\"que\",\"que\"},\n-        {\"ab\",\"abk\",\"abk\"},\n-        {\"la\",\"lat\",\"lat\"},\n-        {\"aa\",\"aar\",\"aar\"},\n-        {\"fr\",\"fra\",\"fre\"},\n-        {\"fo\",\"fao\",\"fao\"},\n-        {\"fj\",\"fij\",\"fij\"},\n-        {\"fi\",\"fin\",\"fin\"},\n-        {\"ky\",\"kir\",\"kir\"},\n-        {\"ku\",\"kur\",\"kur\"},\n-        {\"fa\",\"fas\",\"per\"},\n-        {\"ks\",\"kas\",\"kas\"},\n-        {\"vo\",\"vol\",\"vol\"},\n-        {\"ko\",\"kor\",\"kor\"},\n-        {\"kn\",\"kan\",\"kan\"},\n-        {\"kk\",\"kaz\",\"kaz\"},\n-        {\"vi\",\"vie\",\"vie\"},\n-    };\n-\n-\/*\n-    The following code was used to generate the table above from the two ISO standards.\n-    It matches the language names (not the codes) from both standards to associate\n-    the two and three letter codes.\n-\n-    private static final String ISO639 = \"d:\\\\temp\\\\iso639.txt\";\n-    private static final String ISO6392 = \"d:\\\\temp\\\\iso-639-2.txt\";\n-    private static void generateTables() {\n-        try {\n-            BufferedReader ISO639File = new BufferedReader(new FileReader(ISO639));\n-            Hashtable i639 = new Hashtable();\n-            for (String line = ISO639File.readLine(); line != null; line = ISO639File.readLine()) {\n-                if (!line.startsWith(\"#\")) {\n-                    final int ndx = line.indexOf(' ');\n-                    final String arg1 = line.substring(0, ndx);\n-                    final int ndx2 = line.indexOf(' ', ndx+1);\n-                    final String arg2 = line.substring(ndx+1, ndx2 < 0 ? line.length() : ndx2);\n-                    i639.put(arg1, arg2);\n-                }\n-            }\n-\n-            BufferedReader ISO6392File = new BufferedReader(new FileReader(ISO6392));\n-            Hashtable i6392 = new Hashtable();\n-            for (String line = ISO6392File.readLine(); line != null; line = ISO6392File.readLine()) {\n-                final int ndx = line.indexOf(' ');\n-                final int ndx2 = line.indexOf(' ', ndx+1);\n-                int ndx3 = line.indexOf(' ', ndx2+1);\n-                if (ndx3 < 0) ndx3 = line.length();\n-                final String arg1 = line.substring(0, ndx);\n-                final String arg2 = line.substring(ndx+1, ndx2);\n-                final String arg3 = line.substring(ndx2+1, ndx3);\n-                i6392.put(arg3, new ISO6392Entry(arg1, arg2));\n-            }\n-\n-            Enumeration keys = i639.keys();\n-            while (keys.hasMoreElements()) {\n-                final Object key = keys.nextElement();\n-                final Object name = i639.get(key);\n-                final Object value = i6392.get(name);\n-\n-                if (value != null) {\n-                    System.out.print(\"{\");\n-                    System.out.print(\"\\\"\"+key+\"\\\",\");\n-                    System.out.print(value);\n-                    System.out.println(\"},\");\n-                }\n-            }\n-        } catch (Exception e) {\n-            System.out.println(e);\n-        }\n-    }\n-\n-\n-    private static final class ISO6392Entry {\n-        public final String code;\n-        public final String name;\n-        public ISO6392Entry(String code, String name) {\n-            this.code = code;\n-            this.name = name;\n-        }\n-        public String toString() {\n-            return \"\\\"\"+code+\"\\\",\\\"\"+name+\"\\\"\";\n-        }\n-\n-    }\n-*\/\n-\n-}\n-\n-\/*\n-\n-data from ftp:\/\/dkuug.dk on March 4, 1999\n-verified by http:\/\/www.triacom.com\/archive\/iso639-2.en.html\n-\n-iso 639 data\n-aa Afar\n-ab Abkhazian\n-af Afrikaans\n-am Amharic\n-ar Arabic\n-as Assamese\n-ay Aymara\n-az Azerbaijani\n-ba Bashkir\n-be Belarussian\n-bg Bulgarian\n-bh Bihari\n-bi Bislama\n-bn Bengali\n-bo Tibetan\n-br Breton\n-ca Catalan\n-co Corsican\n-cs Czech\n-cy Welsh\n-da Danish\n-de German\n-dz Bhutani\n-el Greek\n-en English\n-eo Esperanto\n-es Spanish\n-et Estonian\n-eu Basque\n-fa Persian\n-fi Finnish\n-fj Fijian\n-fo Faroese\n-fr French\n-fy Frisian\n-ga Irish\n-gd Gaelic\n-gl Galician\n-gn Guarani\n-gu Gujarati\n-ha Hausa\n-he Hebrew\n-hi Hindi\n-hr Croatian\n-hu Hungarian\n-hy Armenian\n-ia Interlingua\n-id Indonesian\n-ie Interlingue\n-ik Inupiak\n-is Icelandic\n-it Italian\n-iu Inuktitut\n-ja Japanese\n-jw Javanese\n-ka Georgian\n-kk Kazakh\n-kl Greenlandic\n-km Cambodian\n-kn Kannada\n-ko Korean\n-ks Kashmiri\n-ku Kurdish\n-ky Kirghiz\n-la Latin\n-ln Lingala\n-lo Laothian\n-lt Lithuanian\n-lv Latvian\n-mg Malagasy\n-mi Maori\n-mk Macedonian\n-ml Malayalam\n-mn Mongolian\n-mo Moldavian\n-mr Marathi\n-ms Malay\n-mt Maltese\n-my Burmese\n-na Nauru\n-ne Nepali\n-nl Dutch\n-no Norwegian\n-oc Occitan\n-om Oromo\n-or Oriya\n-pa Punjabi\n-pl Polish\n-ps Pushto\n-pt Portuguese\n-qu Quechua\n-rm Raeto-Romance\n-rn Kirundi\n-ro Romanian\n-ru Russian\n-rw Kinyarwanda\n-sa Sanskrit\n-sd Sindhi\n-sg Sangho\n-sh Croatian (Serbo)\n-si Sinhalese\n-sk Slovak\n-sl Slovenian\n-sm Samoan\n-sn Shona\n-so Somali\n-sq Albanian\n-sr Serbian\n-ss Siswati\n-st Sesotho\n-su Sundanese\n-sv Swedish\n-sw Swahili\n-ta Tamil\n-te Telugu\n-tg Tajik\n-th Thai\n-ti Tigrinya\n-tk Turkmen\n-tl Tagalog\n-tn Setswana\n-to Tonga\n-tr Turkish\n-ts Tsonga\n-tt Tatar\n-tw Twi\n-ug Uighur\n-uk Ukrainian\n-ur Urdu\n-uz Uzbek\n-vi Vietnamese\n-vo Volapuk\n-wo Wolof\n-xh Xhosa\n-yi Yiddish\n-yo Yoruba\n-za Zhuang\n-zh Chinese\n-zu Zulu\n-\n-ISO 639-2 data\n-\n-aar aar Afar\n-abk abk Abkhazian\n-ace ace Achinese\n-ach ach Acoli\n-ada ada Adangme\n-afa afa Afro-Asiatic (Other)\n-afh afh Afrihili\n-afr afr Afrikaans\n-aka aka Akan\n-akk akk Akkadian\n-ale ale Aleut\n-alg alg Algonquian languages\n-amh amh Amharic\n-ang ang English-Old (ca. 450-1100)\n-apa apa Apache languages\n-ara ara Arabic\n-arc arc Aramaic\n-arn arn Araucanian\n-arp arp Arapaho\n-art art Artificial (Other)\n-arw arw Arawak\n-asm asm Assamese\n-ath ath Athapascan languages\n-aus aus Australian languages\n-ava ava Avaric\n-ave ave Avestan\n-awa awa Awadhi\n-aym aym Aymara\n-aze aze Azerbaijani\n-bad bad Banda\n-bai bai Bamileke languages\n-bak bak Bashkir\n-bal bal Baluchi\n-bam bam Bambara\n-ban ban Balinese\n-bas bas Basa\n-bat bat Baltic (Other)\n-bej bej Beja\n-bel bel Belarussian\n-bem bem Bemba\n-ben ben Bengali\n-ber ber Berber (Other)\n-bho bho Bhojpuri\n-bih bih Bihari\n-bik bik Bikol\n-bin bin Bini\n-bis bis Bislama\n-bla bla Siksika\n-bnt bnt Bantu (Other)\n-bod tib Tibetan\n-bra bra Braj\n-bre bre Breton\n-btk btk Batak (Indonesia)\n-bua bua Buriat\n-bug bug Buginese\n-bul bul Bulgarian\n-cad cad Caddo\n-cai cai Central-American-Indian (Other)\n-car car Carib\n-cat cat Catalan\n-cau cau Caucasian (Other)\n-ceb ceb Cebuano\n-cel cel Celtic (Other)\n-ces cze Czech\n-cha cha Chamorro\n-chb chb Chibcha\n-che che Chechen\n-chg chg Chagatai\n-chk chk Chuukese\n-chm chm Mari\n-chn chn Chinook-jargon\n-cho cho Choctaw\n-chp chp Chipewyan\n-chr chr Cherokee\n-chu chu Church-Slavic\n-chv chv Chuvash\n-chy chy Cheyenne\n-cmc cmc Chamic languages\n-cop cop Coptic\n-cor cor Cornish\n-cos cos Corsican\n-cpe cpe Creoles-and-pidgins-English-based (Other)\n-cpf cpf Creoles-and-pidgins-French-based (Other)\n-cpp cpp Creoles-and-pidgins-Portuguese-based (Other)\n-cre cre Cree\n-crp crp Creoles-and-pidgins (Other)\n-cus cus Cushitic (Other)\n-cym wel Welsh\n-dak dak Dakota\n-dan dan Danish\n-day day Dayak\n-del del Delaware\n-den den Slave (Athapascan)\n-deu ger German\n-dgr dgr Dogrib\n-din din Dinka\n-div div Divehi\n-doi doi Dogri\n-dra dra Dravidian (Other)\n-dua dua Duala\n-dum dum Dutch-Middle (ca. 1050-1350)\n-dyu dyu Dyula\n-dzo dzo Dzongkha\n-efi efi Efik\n-egy egy Egyptian (Ancient)\n-eka eka Ekajuk\n-ell gre Greek Modern (post 1453)\n-elx elx Elamite\n-eng eng English\n-enm enm English-Middle (1100-1500)\n-epo epo Esperanto\n-est est Estonian\n-eus baq Basque\n-ewe ewe Ewe\n-ewo ewo Ewondo\n-fan fan Fang\n-fao fao Faroese\n-fas per Persian\n-fat fat Fanti\n-fij fij Fijian\n-fin fin Finnish\n-fiu fiu Finno-Ugrian (Other)\n-fon fon Fon\n-fra fre French\n-frm frm French-Middle (ca. 1400-1600)\n-fro fro French-Old (842-ca. 1400)\n-fry fry Frisian\n-ful ful Fulah\n-fur fur Friulian\n-gaa gaa Ga\n-gay gay Gayo\n-gba gba Gbaya\n-gem gem Germanic (Other)\n-gez gez Geez\n-gil gil Gilbertese\n-gdh gae Gaelic\n-gai iri Irish\n-glg glg Gallegan\n-glv glv Manx\n-gmh gmh German-Middle High (ca. 1050-1500)\n-goh goh German-Old High (ca. 750-1050)\n-gon gon Gondi\n-gor gor Gorontalo\n-got got Gothic\n-grb grb Grebo\n-grc grc Greek-Ancient (to 1453)\n-grn grn Guarani\n-guj guj Gujarati\n-gwi gwi Gwich'in\n-hai hai Haida\n-hau hau Hausa\n-haw haw Hawaiian\n-heb heb Hebrew\n-her her Herero\n-hil hil Hiligaynon\n-him him Himachali\n-hin hin Hindi\n-hit hit Hittite\n-hmn hmn Hmong\n-hmo hmo Hiri Motu\n-hrv scr Croatian\n-hun hun Hungarian\n-hup hup Hupa\n-hye arm Armenian\n-iba iba Iban\n-ibo ibo Igbo\n-ijo ijo Ijo\n-iku iku Inuktitut\n-ile ile Interlingue\n-ilo ilo Iloko\n-ina ina Interlingua (International Auxilary Language Association)\n-inc inc Indic (Other)\n-ind ind Indonesian\n-ine ine Indo-European (Other)\n-ipk ipk Inupiak\n-ira ira Iranian (Other)\n-iro iro Iroquoian languages\n-isl ice Icelandic\n-ita ita Italian\n-jaw jav Javanese\n-jpn jpn Japanese\n-jpr jpr Judeo-Persian\n-jrb jrb Judeo-Arabic\n-kaa kaa Kara-Kalpak\n-kab kab Kabyle\n-kac kac Kachin\n-kal kal Kalaallisut\n-kam kam Kamba\n-kan kan Kannada\n-kar kar Karen\n-kas kas Kashmiri\n-kat geo Georgian\n-kau kau Kanuri\n-kaw kaw Kawi\n-kaz kaz Kazakh\n-kha kha Khasi\n-khi khi Khoisan (Other)\n-khm khm Khmer\n-kho kho Khotanese\n-kik kik Kikuyu\n-kin kin Kinyarwanda\n-kir kir Kirghiz\n-kmb kmb Kimbundu\n-kok kok Konkani\n-kom kom Komi\n-kon kon Kongo\n-kor kor Korean\n-kos kos Kosraean\n-kpe kpe Kpelle\n-kro kro Kru\n-kru kru Kurukh\n-kua kua Kuanyama\n-kum kum Kumyk\n-kur kur Kurdish\n-kut kut Kutenai\n-lad lad Ladino\n-lah lah Lahnda\n-lam lam Lamba\n-lao lao Lao\n-lat lat Latin\n-lav lav Latvian\n-lez lez Lezghian\n-lin lin Lingala\n-lit lit Lithuanian\n-lol lol Mongo\n-loz loz Lozi\n-ltz ltz Letzeburgesch\n-lua lua Luba-Lulua\n-lub lub Luba-Katanga\n-lug lug Ganda\n-lui lui Luiseno\n-lun lun Lunda\n-luo luo Luo (Kenya and Tanzania)\n-lus lus Lushai\n-mad mad Madurese\n-mag mag Magahi\n-mah mah Marshall\n-mai mai Maithili\n-mak mak Makasar\n-mal mal Malayalam\n-man man Mandingo\n-map map Austronesian (Other)\n-mar mar Marathi\n-mas mas Masai\n-mdr mdr Mandar\n-men men Mende\n-mga mga Irish-Middle (900-1200)\n-mic mic Micmac\n-min min Minangkabau\n-mis mis Miscellaneous languages\n-mkd mac Macedonian\n-mkh mkh Mon-Khmer (Other)\n-mlg mlg Malagasy\n-mlt mlt Maltese\n-mni mni Manipuri\n-mno mno Manobo languages\n-moh moh Mohawk\n-mol mol Moldavian\n-mon mon Mongolian\n-mos mos Mossi\n-mri mao Maori\n-msa may Malay\n-mul mul Multiple languages\n-mun mun Munda languages\n-mus mus Creek\n-mwr mwr Marwari\n-mya bur Burmese\n-myn myn Mayan languages\n-nah nah Nahuatl\n-nai nai North American Indian (Other)\n-nau nau Nauru\n-nav nav Navajo\n-nbl nbl Ndebele, South\n-nde nde Ndebele, North\n-ndo ndo Ndonga\n-nep nep Nepali\n-new new Newari\n-nia nia Nias\n-nic nic Niger-Kordofanian (Other)\n-niu niu Niuean\n-nld dut Dutch\n-non non Norse, Old\n-nor nor Norwegian\n-nso nso Sohto, Northern\n-nub nub Nubian languages\n-nya nya Nyanja\n-nym nym Nyamwezi\n-nyn nyn Nyankole\n-nyo nyo Nyoro\n-nzi nzi Nzima\n-oci oci Occitan (post 1500)\n-oji oji Ojibwa\n-ori ori Oriya\n-orm orm Oromo\n-osa osa Osage\n-oss oss Ossetic\n-ota ota Turkish, Ottoman (1500-1928)\n-oto oto Otomian languages\n-paa paa Papuan (Other)\n-pag pag Pangasinan\n-pal pal Pahlavi\n-pam pam Pampanga\n-pan pan Panjabi\n-pap pap Papiamento\n-pau pau Palauan\n-peo peo Persian, Old (ca. 600-400 B.C.)\n-phi phi Philippine (Other)\n-phn phn Phoenician\n-pli pli Pali\n-pol pol Polish\n-pon pon Pohnpeian\n-por por Portuguese\n-pra pra Prakrit languages\n-pro pro Proven\\u00E7al, Old (to 1500)\n-pus pus Pushto\n-qaa-qtz qaa-qtz Reserved for local use\n-que que Quechua\n-raj raj Rajasthani\n-rap rap Rapanui\n-rar rar Rarotongan\n-roa roa Romance (Other)\n-roh roh Raeto-Romance\n-rom rom Romany\n-ron rum Romanian\n-run run Rundi\n-rus rus Russian\n-sad sad Sandawe\n-sag sag Sango\n-sah sah Yakut\n-sai sai South American Indian (Other)\n-sal sal Salishan languages\n-sam sam Samaritan Aramaic\n-san san Sanskrit\n-sas sas Sasak\n-sat sat Santali\n-sco sco Scots\n-sel sel Selkup\n-sem sem Semitic (Other)\n-sga sga Irish-Old (to 900)\n-shn shn Shan\n-sid sid Sidamo\n-sin sin Sinhalese\n-sio sio Siouan languages\n-sit sit Sino-Tibetan (Other)\n-sla sla Slavic (Other)\n-slk slo Slovak\n-slv slv Slovenian\n-smi smi Sami languages\n-smo smo Samoan\n-sna sna Shona\n-snd snd Sindhi\n-snk snk Soninke\n-sog sog Sogdian\n-som som Somali\n-son son Songhai\n-sot sot Sotho Southern\n-spa spa Spanish\n-sqi alb Albanian\n-srd srd Sardinian\n-srp scc Serbian\n-srr srr Serer\n-ssa ssa Nilo-Saharan (Other)\n-ssw ssw Swati\n-suk suk Sukuma\n-sun sun Sundanese\n-sus sus Susu\n-sux sux Sumerian\n-swa swa Swahili\n-swe swe Swedish\n-syr syr Syriac\n-tah tah Tahitian\n-tai tai Tai (Other)\n-tam tam Tamil\n-tat tat Tatar\n-tel tel Telugu\n-tem tem Timne\n-ter ter Tereno\n-tet tet Tetum\n-tgk tgk Tajik\n-tgl tgl Tagalog\n-tha tha Thai\n-tig tig Tigre\n-tir tir Tigrinya\n-tiv tiv Tiv\n-tkl tkl Tokelau\n-tli tli Tlingit\n-tmh tmh Tamashek\n-tog tog Tonga (Nyasa)\n-ton ton Tonga (Tonga Islands)\n-tpi tpi Tok Pisin\n-tsi tsi Tsimshian\n-tsn tsn Tswana\n-tso tso Tsonga\n-tuk tuk Turkmen\n-tum tum Tumbuka\n-tur tur Turkish\n-tut tut Altaic\n-tvl tvl Tuvalu\n-twi twi Twi\n-tyv tyv Tuvinian\n-uga uga Ugaritic\n-uig uig Uighur\n-ukr ukr Ukrainian\n-umb umb Umbundu\n-und und Undetermined\n-urd urd Urdu\n-uzb uzb Uzbek\n-vai vai Vai\n-ven ven Venda\n-vie vie Vietnamese\n-vol vol Volapuk\n-vot vot Votic\n-wak wak Wakashan\n-wal wal Walamo\n-war war Waray\n-was was Washo\n-wen wen Sorbian\n-wol wol Wolof\n-xho xho Xhosa\n-yao yao Yao\n-yap yap Yapese\n-yid yid Yiddish\n-yor yor Yoruba\n-ypk ypk Yupik\n-zap zap Zapotec\n-zen zen Zenaga\n-zha zha Zhuang\n-zho chi Chinese\n-znd znd Zande\n-zul zul Zulu\n-zun zun Zuni\n-\n-*\/\n","filename":"test\/jdk\/java\/util\/Locale\/Bug4175998Test.java","additions":0,"deletions":855,"binary":false,"changes":855,"status":"deleted"},{"patch":"@@ -1,122 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8001562\n- * @summary Verify that getAvailableLocales() in locale sensitive services\n- *     classes return compatible set of locales as in JDK7.\n- * @modules jdk.localedata\n- * @run main Bug8001562\n- *\/\n-\n-import java.text.BreakIterator;\n-import java.text.Collator;\n-import java.text.DateFormat;\n-import java.text.DateFormatSymbols;\n-import java.text.DecimalFormatSymbols;\n-import java.text.NumberFormat;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.stream.Collectors;\n-\n-public class Bug8001562 {\n-\n-    static final List<String> jdk7availTags = List.of(\n-            \"ar\", \"ar-AE\", \"ar-BH\", \"ar-DZ\", \"ar-EG\", \"ar-IQ\", \"ar-JO\", \"ar-KW\",\n-            \"ar-LB\", \"ar-LY\", \"ar-MA\", \"ar-OM\", \"ar-QA\", \"ar-SA\", \"ar-SD\", \"ar-SY\",\n-            \"ar-TN\", \"ar-YE\", \"be\", \"be-BY\", \"bg\", \"bg-BG\", \"ca\", \"ca-ES\", \"cs\",\n-            \"cs-CZ\", \"da\", \"da-DK\", \"de\", \"de-AT\", \"de-CH\", \"de-DE\", \"de-LU\", \"el\",\n-            \"el-CY\", \"el-GR\", \"en\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-IE\", \"en-IN\",\n-            \"en-MT\", \"en-NZ\", \"en-PH\", \"en-SG\", \"en-US\", \"en-ZA\", \"es\", \"es-AR\",\n-            \"es-BO\", \"es-CL\", \"es-CO\", \"es-CR\", \"es-DO\", \"es-EC\", \"es-ES\", \"es-GT\",\n-            \"es-HN\", \"es-MX\", \"es-NI\", \"es-PA\", \"es-PE\", \"es-PR\", \"es-PY\", \"es-SV\",\n-            \"es-US\", \"es-UY\", \"es-VE\", \"et\", \"et-EE\", \"fi\", \"fi-FI\", \"fr\", \"fr-BE\",\n-            \"fr-CA\", \"fr-CH\", \"fr-FR\", \"fr-LU\", \"ga\", \"ga-IE\", \"he\", \"he-IL\",\n-            \"hi-IN\", \"hr\", \"hr-HR\", \"hu\", \"hu-HU\", \"id\", \"id-ID\", \"is\", \"is-IS\",\n-            \"it\", \"it-CH\", \"it-IT\", \"ja\", \"ja-JP\",\n-            \"ja-JP-u-ca-japanese-x-lvariant-JP\", \"ko\", \"ko-KR\", \"lt\", \"lt-LT\", \"lv\",\n-            \"lv-LV\", \"mk\", \"mk-MK\", \"ms\", \"ms-MY\", \"mt\", \"mt-MT\", \"nl\", \"nl-BE\",\n-            \"nl-NL\", \"no\", \"no-NO\", \"no-NO-x-lvariant-NY\", \"pl\", \"pl-PL\", \"pt\",\n-            \"pt-BR\", \"pt-PT\", \"ro\", \"ro-RO\", \"ru\", \"ru-RU\", \"sk\", \"sk-SK\", \"sl\",\n-            \"sl-SI\", \"sq\", \"sq-AL\", \"sr\", \"sr-BA\", \"sr-CS\", \"sr-Latn\", \"sr-Latn-BA\",\n-            \"sr-Latn-ME\", \"sr-Latn-RS\", \"sr-ME\", \"sr-RS\", \"sv\", \"sv-SE\", \"th\",\n-            \"th-TH\", \"th-TH-u-nu-thai-x-lvariant-TH\", \"tr\", \"tr-TR\", \"uk\", \"uk-UA\",\n-            \"vi\", \"vi-VN\", \"zh\", \"zh-CN\", \"zh-HK\", \"zh-SG\", \"zh-TW\");\n-    static List<Locale> jdk7availLocs;\n-\n-    static {\n-        jdk7availLocs = jdk7availTags.stream()\n-                .map(Locale::forLanguageTag)\n-                .collect(Collectors.toList());\n-    }\n-\n-    public static void main(String[] args) {\n-        List<Locale> avail = Arrays.asList(BreakIterator.getAvailableLocales());\n-        diffLocale(BreakIterator.class, avail);\n-\n-        avail = Arrays.asList(Collator.getAvailableLocales());\n-        diffLocale(Collator.class, avail);\n-\n-        avail = Arrays.asList(DateFormat.getAvailableLocales());\n-        diffLocale(DateFormat.class, avail);\n-\n-        avail = Arrays.asList(DateFormatSymbols.getAvailableLocales());\n-        diffLocale(DateFormatSymbols.class, avail);\n-\n-        avail = Arrays.asList(DecimalFormatSymbols.getAvailableLocales());\n-        diffLocale(DecimalFormatSymbols.class, avail);\n-\n-        avail = Arrays.asList(NumberFormat.getAvailableLocales());\n-        diffLocale(NumberFormat.class, avail);\n-\n-        avail = Arrays.asList(Locale.getAvailableLocales());\n-        diffLocale(Locale.class, avail);\n-    }\n-\n-    static void diffLocale(Class<?> c, List<Locale> locs) {\n-        String diff = \"\";\n-\n-        System.out.printf(\"Only in target locales (%s.getAvailableLocales()): \", c.getSimpleName());\n-        for (Locale l : locs) {\n-            if (!jdk7availLocs.contains(l)) {\n-                diff += \"\\\"\" + l.toLanguageTag() + \"\\\", \";\n-            }\n-        }\n-        System.out.println(diff);\n-        diff = \"\";\n-\n-        System.out.printf(\"Only in JDK7 (%s.getAvailableLocales()): \", c.getSimpleName());\n-        for (Locale l : jdk7availLocs) {\n-            if (!locs.contains(l)) {\n-                diff += \"\\\"\" + l.toLanguageTag() + \"\\\", \";\n-            }\n-        }\n-        System.out.println(diff);\n-\n-        if (diff.length() > 0) {\n-            throw new RuntimeException(\"Above locale(s) were not included in the target available locales\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8001562.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8008577 8138613\n- * @summary Check whether CLDR locale provider adapter is enabled by default\n- * @compile -XDignore.symbol.file Bug8008577.java\n- * @modules java.base\/sun.util.locale.provider\n- * @run main Bug8008577\n- *\/\n-\n-import java.util.Arrays;\n-import java.util.List;\n-import sun.util.locale.provider.LocaleProviderAdapter;\n-\n-public class Bug8008577 {\n-\n-    static final LocaleProviderAdapter.Type[] expected = {\n-        LocaleProviderAdapter.Type.CLDR,\n-        LocaleProviderAdapter.Type.JRE,\n-    };\n-\n-    public static void main(String[] args) {\n-        List<LocaleProviderAdapter.Type> types = LocaleProviderAdapter.getAdapterPreference();\n-        List<LocaleProviderAdapter.Type> expectedList = Arrays.asList(expected);\n-        if (!types.equals(expectedList)) {\n-            throw new RuntimeException(\"Default locale provider adapter list is incorrect\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8008577.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8025703\n- * @summary Verify implementation for Locale matching.\n- * @run main Bug8025703\n- *\/\n-\n-import java.util.*;\n-import java.util.Locale.LanguageRange;\n-\n-public class Bug8025703 {\n-\n-    public static void main(String[] args) {\n-        boolean err = false;\n-\n-        String[][] mappings = {{\"ilw\", \"gal\"},\n-                               {\"meg\", \"cir\"},\n-                               {\"pcr\", \"adx\"},\n-                               {\"xia\", \"acn\"},\n-                               {\"yos\", \"zom\"}};\n-\n-        for (int i = 0; i < mappings.length; i++) {\n-            List<LanguageRange> got = LanguageRange.parse(mappings[i][0]);\n-            ArrayList<LanguageRange> expected = new ArrayList<>();\n-            expected.add(new LanguageRange(mappings[i][0], 1.0));\n-            expected.add(new LanguageRange(mappings[i][1], 1.0));\n-\n-            if (!expected.equals(got)) {\n-                err = true;\n-                System.err.println(\"Incorrect language ranges. \");\n-                for (LanguageRange lr : expected) {\n-                    System.err.println(\"  Expected: range=\"\n-                        + lr.getRange() + \", weight=\" + lr.getWeight());\n-                }\n-                for (LanguageRange lr : got) {\n-                    System.err.println(\"  Got:      range=\"\n-                        + lr.getRange() + \", weight=\" + lr.getWeight());\n-                }\n-            }\n-        }\n-\n-        if (err) {\n-            throw new RuntimeException(\"Failed.\");\n-        }\n-    }\n-\n-}\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8025703.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8026766\n- * @summary Confirm that LanguageRange.toString() returns an expected result.\n- * @run main Bug8026766\n- *\/\n-\n-import java.util.Locale.LanguageRange;\n-\n-public class Bug8026766 {\n-\n-    public static void main(String[] args) {\n-        LanguageRange lr1 = new LanguageRange(\"ja\", 1.0);\n-        LanguageRange lr2 = new LanguageRange(\"fr\", 0.0);\n-\n-        if (!lr1.toString().equals(\"ja\") ||\n-            !lr2.toString().equals(\"fr;q=0.0\")) {\n-            throw new RuntimeException(\"LanguageRange.toString() returned an unexpected result.\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8026766.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8032842 8175539\n- * @summary Checks that the filterTags() and lookup() methods\n- *          preserve the case of matching language tag(s).\n- *          Before 8032842 fix these methods return the matching\n- *          language tag(s) in lowercase.\n- *          Also, checks the filterTags() to return only unique\n- *          (ignoring case considerations) matching tags.\n- *\n- *\/\n-\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Locale.FilteringMode;\n-import java.util.Locale.LanguageRange;\n-\n-public class Bug8032842 {\n-\n-    public static void main(String[] args) {\n-\n-        \/\/ test filterBasic() for preserving the case of matching tags for\n-        \/\/ the language range '*', with no duplicates in the matching tags\n-        testFilter(\"*\", List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\",\n-                \"JA-JP\", \"en-GB\"),\n-                List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\", \"JA-JP\"),\n-                FilteringMode.AUTOSELECT_FILTERING);\n-\n-        \/\/ test filterBasic() for preserving the case of matching tags for\n-        \/\/ basic ranges other than *, with no duplicates in the matching tags\n-        testFilter(\"mtm-RU, en-GB\", List.of(\"En-Gb\", \"mTm-RU\", \"en-US\",\n-                \"en-latn\", \"en-GB\"),\n-                List.of(\"mTm-RU\", \"En-Gb\"), FilteringMode.AUTOSELECT_FILTERING);\n-\n-        \/\/ test filterExtended() for preserving the case of matching tags for\n-        \/\/ the language range '*', with no duplicates in the matching tags\n-        testFilter(\"*\", List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"hi-IN\",\n-                \"ja-Latn-JP\", \"JA-JP\"),\n-                List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\", \"JA-JP\"),\n-                FilteringMode.EXTENDED_FILTERING);\n-\n-        \/\/ test filterExtended() for preserving the case of matching tags for\n-        \/\/ extended ranges other than *, with no duplicates in the matching tags\n-        testFilter(\"*-ch;q=0.5, *-Latn;q=0.4\", List.of(\"fr-CH\", \"de-Ch\",\n-                \"en-latn\", \"en-US\", \"en-Latn\"),\n-                List.of(\"fr-CH\", \"de-Ch\", \"en-latn\"),\n-                FilteringMode.EXTENDED_FILTERING);\n-\n-        \/\/ test lookupTag() for preserving the case of matching tag\n-        testLookup(\"*-ch;q=0.5\", List.of(\"en\", \"fR-cH\"), \"fR-cH\");\n-\n-    }\n-\n-    public static void testFilter(String ranges, List<String> tags,\n-            List<String> expected, FilteringMode mode) {\n-        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n-        List<String> actual = Locale.filterTags(priorityList, tags, mode);\n-        if (!actual.equals(expected)) {\n-            throw new RuntimeException(\"[filterTags() failed for the language\"\n-                    + \" range: \" + ranges + \", Expected: \" + expected\n-                    + \", Found: \" + actual + \"]\");\n-        }\n-    }\n-\n-    public static void testLookup(String ranges, List<String> tags,\n-            String expected) {\n-        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n-        String actual = Locale.lookupTag(priorityList, tags);\n-        if (!actual.equals(expected)) {\n-            throw new RuntimeException(\"[lookupTag() failed for the language\"\n-                    + \" range: \" + ranges + \", Expected: \" + expected\n-                    + \", Found: \" + actual + \"]\");\n-        }\n-    }\n-\n-}\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8032842.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8008577 8138613\n+ * @summary Check whether CLDR locale provider adapter is enabled by default\n+ * @compile -XDignore.symbol.file ExpectedAdapterTypes.java\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit ExpectedAdapterTypes\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+import org.junit.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ExpectedAdapterTypes {\n+\n+    static final LocaleProviderAdapter.Type[] expected = {\n+        LocaleProviderAdapter.Type.CLDR,\n+        LocaleProviderAdapter.Type.JRE,\n+    };\n+\n+    \/**\n+     * This test ensures LocaleProviderAdapter.getAdapterPreference() returns\n+     * the correct preferred adapter types. This test should fail whenever a change is made\n+     * to the implementation and the expected list is not updated accordingly.\n+     *\/\n+    @Test\n+    public void correctAdapterListTest() {\n+        List<LocaleProviderAdapter.Type> actualTypes = LocaleProviderAdapter.getAdapterPreference();\n+        List<LocaleProviderAdapter.Type> expectedTypes = Arrays.asList(expected);\n+        assertEquals(actualTypes, expectedTypes, String.format(\"getAdapterPreference() \" +\n+                \"returns: %s, but the expected adapter list returns: %s\", actualTypes, expectedTypes));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/ExpectedAdapterTypes.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run junit ISO3166\n@@ -31,0 +32,1 @@\n+\n@@ -38,1 +40,3 @@\n-public class Bug8071929 {\n+import org.junit.jupiter.api.Test;\n+\n+public class ISO3166 {\n@@ -81,1 +85,2 @@\n-    private static void checkISO3166_1_Alpha2ObsoleteCodes() {\n+    @Test\n+    public void checkISO3166_1_Alpha2ObsoleteCodes() {\n@@ -94,1 +99,2 @@\n-    private static void checkISO3166_3Codes() {\n+    @Test\n+    public void checkISO3166_3Codes() {\n@@ -105,1 +111,2 @@\n-    private static void checkISO3166_1_Alpha3Codes() {\n+    @Test\n+    public void checkISO3166_1_Alpha3Codes() {\n@@ -116,1 +123,2 @@\n-    private static void checkISO3166_1_Alpha2Codes() {\n+    @Test\n+    public void checkISO3166_1_Alpha2Codes() {\n@@ -142,7 +150,0 @@\n-\n-    public static void main(String[] args) {\n-        checkISO3166_1_Alpha2ObsoleteCodes();\n-        checkISO3166_1_Alpha2Codes();\n-        checkISO3166_1_Alpha3Codes();\n-        checkISO3166_3Codes();\n-    }\n","filename":"test\/jdk\/java\/util\/Locale\/ISO3166.java","additions":14,"deletions":13,"binary":false,"changes":27,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8071929.java","status":"renamed"},{"patch":"@@ -0,0 +1,297 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test ISO639-2 language codes\n+ * @library \/java\/text\/testlib\n+ * @compile -encoding ascii ISO639.java\n+ * @bug 4175998 8303917\n+ * @run junit ISO639\n+ *\/\n+\n+\/*\n+ *\n+ *\n+ * (C) Copyright IBM Corp. 1998 - All Rights Reserved\n+ *\n+ * The original version of this source code and documentation is\n+ * copyrighted and owned by IBM. These materials are provided\n+ * under terms of a License Agreement between IBM and Sun.\n+ * This technology is protected by multiple US and International\n+ * patents. This notice and attribution to IBM may not be removed.\n+ *\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ISO639 {\n+\n+    \/**\n+     * This test verifies for a given locale created from the ISO639 2-letter code,\n+     * the correct ISO639 3-letter code is returned when calling getISO3Language().\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"expectedISO639Codes\")\n+    public void ISO3LetterTest(String ISO2, String expectedISO3) {\n+        Locale loc = new Locale(ISO2);\n+        String actualISO3 = loc.getISO3Language();\n+        assertEquals(actualISO3, expectedISO3,\n+                String.format(\"The Locale '%s' returned a bad ISO3 language code. \" +\n+                        \"Got '%s' instead of '%s'\", loc, actualISO3, expectedISO3));\n+    }\n+\n+    \/\/ expectedISO639Codes generated from https:\/\/www.loc.gov\/standards\/iso639-2\/ISO-639-2_utf-8.txt\n+    \/\/ on March 9th, 2023.\n+    private static Stream<Arguments> expectedISO639Codes() {\n+        return Stream.of(\n+             Arguments.of(\"aa\",\"aar\",\"aar\"),\n+             Arguments.of(\"ab\",\"abk\",\"abk\"),\n+             Arguments.of(\"af\",\"afr\",\"afr\"),\n+             Arguments.of(\"ak\",\"aka\",\"aka\"),\n+             Arguments.of(\"sq\",\"sqi\",\"alb\"),\n+             Arguments.of(\"am\",\"amh\",\"amh\"),\n+             Arguments.of(\"ar\",\"ara\",\"ara\"),\n+             Arguments.of(\"an\",\"arg\",\"arg\"),\n+             Arguments.of(\"hy\",\"hye\",\"arm\"),\n+             Arguments.of(\"as\",\"asm\",\"asm\"),\n+             Arguments.of(\"av\",\"ava\",\"ava\"),\n+             Arguments.of(\"ae\",\"ave\",\"ave\"),\n+             Arguments.of(\"ay\",\"aym\",\"aym\"),\n+             Arguments.of(\"az\",\"aze\",\"aze\"),\n+             Arguments.of(\"ba\",\"bak\",\"bak\"),\n+             Arguments.of(\"bm\",\"bam\",\"bam\"),\n+             Arguments.of(\"eu\",\"eus\",\"baq\"),\n+             Arguments.of(\"be\",\"bel\",\"bel\"),\n+             Arguments.of(\"bn\",\"ben\",\"ben\"),\n+             Arguments.of(\"bh\",\"bih\",\"bih\"),\n+             Arguments.of(\"bi\",\"bis\",\"bis\"),\n+             Arguments.of(\"bs\",\"bos\",\"bos\"),\n+             Arguments.of(\"br\",\"bre\",\"bre\"),\n+             Arguments.of(\"bg\",\"bul\",\"bul\"),\n+             Arguments.of(\"my\",\"mya\",\"bur\"),\n+             Arguments.of(\"ca\",\"cat\",\"cat\"),\n+             Arguments.of(\"ch\",\"cha\",\"cha\"),\n+             Arguments.of(\"ce\",\"che\",\"che\"),\n+             Arguments.of(\"zh\",\"zho\",\"chi\"),\n+             Arguments.of(\"cu\",\"chu\",\"chu\"),\n+             Arguments.of(\"cv\",\"chv\",\"chv\"),\n+             Arguments.of(\"kw\",\"cor\",\"cor\"),\n+             Arguments.of(\"co\",\"cos\",\"cos\"),\n+             Arguments.of(\"cr\",\"cre\",\"cre\"),\n+             Arguments.of(\"cs\",\"ces\",\"cze\"),\n+             Arguments.of(\"da\",\"dan\",\"dan\"),\n+             Arguments.of(\"dv\",\"div\",\"div\"),\n+             Arguments.of(\"nl\",\"nld\",\"dut\"),\n+             Arguments.of(\"dz\",\"dzo\",\"dzo\"),\n+             Arguments.of(\"en\",\"eng\",\"eng\"),\n+             Arguments.of(\"eo\",\"epo\",\"epo\"),\n+             Arguments.of(\"et\",\"est\",\"est\"),\n+             Arguments.of(\"ee\",\"ewe\",\"ewe\"),\n+             Arguments.of(\"fo\",\"fao\",\"fao\"),\n+             Arguments.of(\"fj\",\"fij\",\"fij\"),\n+             Arguments.of(\"fi\",\"fin\",\"fin\"),\n+             Arguments.of(\"fr\",\"fra\",\"fre\"),\n+             Arguments.of(\"fy\",\"fry\",\"fry\"),\n+             Arguments.of(\"ff\",\"ful\",\"ful\"),\n+             Arguments.of(\"ka\",\"kat\",\"geo\"),\n+             Arguments.of(\"de\",\"deu\",\"ger\"),\n+             Arguments.of(\"gd\",\"gla\",\"gla\"),\n+             Arguments.of(\"ga\",\"gle\",\"gle\"),\n+             Arguments.of(\"gl\",\"glg\",\"glg\"),\n+             Arguments.of(\"gv\",\"glv\",\"glv\"),\n+             Arguments.of(\"el\",\"ell\",\"gre\"),\n+             Arguments.of(\"gn\",\"grn\",\"grn\"),\n+             Arguments.of(\"gu\",\"guj\",\"guj\"),\n+             Arguments.of(\"ht\",\"hat\",\"hat\"),\n+             Arguments.of(\"ha\",\"hau\",\"hau\"),\n+             Arguments.of(\"he\",\"heb\",\"heb\"),\n+             Arguments.of(\"hz\",\"her\",\"her\"),\n+             Arguments.of(\"hi\",\"hin\",\"hin\"),\n+             Arguments.of(\"ho\",\"hmo\",\"hmo\"),\n+             Arguments.of(\"hr\",\"hrv\",\"hrv\"),\n+             Arguments.of(\"hu\",\"hun\",\"hun\"),\n+             Arguments.of(\"ig\",\"ibo\",\"ibo\"),\n+             Arguments.of(\"is\",\"isl\",\"ice\"),\n+             Arguments.of(\"io\",\"ido\",\"ido\"),\n+             Arguments.of(\"ii\",\"iii\",\"iii\"),\n+             Arguments.of(\"iu\",\"iku\",\"iku\"),\n+             Arguments.of(\"ie\",\"ile\",\"ile\"),\n+             Arguments.of(\"ia\",\"ina\",\"ina\"),\n+             Arguments.of(\"id\",\"ind\",\"ind\"),\n+             Arguments.of(\"ik\",\"ipk\",\"ipk\"),\n+             Arguments.of(\"it\",\"ita\",\"ita\"),\n+             Arguments.of(\"jv\",\"jav\",\"jav\"),\n+             Arguments.of(\"ja\",\"jpn\",\"jpn\"),\n+             Arguments.of(\"kl\",\"kal\",\"kal\"),\n+             Arguments.of(\"kn\",\"kan\",\"kan\"),\n+             Arguments.of(\"ks\",\"kas\",\"kas\"),\n+             Arguments.of(\"kr\",\"kau\",\"kau\"),\n+             Arguments.of(\"kk\",\"kaz\",\"kaz\"),\n+             Arguments.of(\"km\",\"khm\",\"khm\"),\n+             Arguments.of(\"ki\",\"kik\",\"kik\"),\n+             Arguments.of(\"rw\",\"kin\",\"kin\"),\n+             Arguments.of(\"ky\",\"kir\",\"kir\"),\n+             Arguments.of(\"kv\",\"kom\",\"kom\"),\n+             Arguments.of(\"kg\",\"kon\",\"kon\"),\n+             Arguments.of(\"ko\",\"kor\",\"kor\"),\n+             Arguments.of(\"kj\",\"kua\",\"kua\"),\n+             Arguments.of(\"ku\",\"kur\",\"kur\"),\n+             Arguments.of(\"lo\",\"lao\",\"lao\"),\n+             Arguments.of(\"la\",\"lat\",\"lat\"),\n+             Arguments.of(\"lv\",\"lav\",\"lav\"),\n+             Arguments.of(\"li\",\"lim\",\"lim\"),\n+             Arguments.of(\"ln\",\"lin\",\"lin\"),\n+             Arguments.of(\"lt\",\"lit\",\"lit\"),\n+             Arguments.of(\"lb\",\"ltz\",\"ltz\"),\n+             Arguments.of(\"lu\",\"lub\",\"lub\"),\n+             Arguments.of(\"lg\",\"lug\",\"lug\"),\n+             Arguments.of(\"mk\",\"mkd\",\"mac\"),\n+             Arguments.of(\"mh\",\"mah\",\"mah\"),\n+             Arguments.of(\"ml\",\"mal\",\"mal\"),\n+             Arguments.of(\"mi\",\"mri\",\"mao\"),\n+             Arguments.of(\"mr\",\"mar\",\"mar\"),\n+             Arguments.of(\"ms\",\"msa\",\"may\"),\n+             Arguments.of(\"mg\",\"mlg\",\"mlg\"),\n+             Arguments.of(\"mt\",\"mlt\",\"mlt\"),\n+             Arguments.of(\"mn\",\"mon\",\"mon\"),\n+             Arguments.of(\"na\",\"nau\",\"nau\"),\n+             Arguments.of(\"nv\",\"nav\",\"nav\"),\n+             Arguments.of(\"nr\",\"nbl\",\"nbl\"),\n+             Arguments.of(\"nd\",\"nde\",\"nde\"),\n+             Arguments.of(\"ng\",\"ndo\",\"ndo\"),\n+             Arguments.of(\"ne\",\"nep\",\"nep\"),\n+             Arguments.of(\"nn\",\"nno\",\"nno\"),\n+             Arguments.of(\"nb\",\"nob\",\"nob\"),\n+             Arguments.of(\"no\",\"nor\",\"nor\"),\n+             Arguments.of(\"ny\",\"nya\",\"nya\"),\n+             Arguments.of(\"oc\",\"oci\",\"oci\"),\n+             Arguments.of(\"oj\",\"oji\",\"oji\"),\n+             Arguments.of(\"or\",\"ori\",\"ori\"),\n+             Arguments.of(\"om\",\"orm\",\"orm\"),\n+             Arguments.of(\"os\",\"oss\",\"oss\"),\n+             Arguments.of(\"pa\",\"pan\",\"pan\"),\n+             Arguments.of(\"fa\",\"fas\",\"per\"),\n+             Arguments.of(\"pi\",\"pli\",\"pli\"),\n+             Arguments.of(\"pl\",\"pol\",\"pol\"),\n+             Arguments.of(\"pt\",\"por\",\"por\"),\n+             Arguments.of(\"ps\",\"pus\",\"pus\"),\n+             Arguments.of(\"qu\",\"que\",\"que\"),\n+             Arguments.of(\"rm\",\"roh\",\"roh\"),\n+             Arguments.of(\"ro\",\"ron\",\"rum\"),\n+             Arguments.of(\"rn\",\"run\",\"run\"),\n+             Arguments.of(\"ru\",\"rus\",\"rus\"),\n+             Arguments.of(\"sg\",\"sag\",\"sag\"),\n+             Arguments.of(\"sa\",\"san\",\"san\"),\n+             Arguments.of(\"si\",\"sin\",\"sin\"),\n+             Arguments.of(\"sk\",\"slk\",\"slo\"),\n+             Arguments.of(\"sl\",\"slv\",\"slv\"),\n+             Arguments.of(\"se\",\"sme\",\"sme\"),\n+             Arguments.of(\"sm\",\"smo\",\"smo\"),\n+             Arguments.of(\"sn\",\"sna\",\"sna\"),\n+             Arguments.of(\"sd\",\"snd\",\"snd\"),\n+             Arguments.of(\"so\",\"som\",\"som\"),\n+             Arguments.of(\"st\",\"sot\",\"sot\"),\n+             Arguments.of(\"es\",\"spa\",\"spa\"),\n+             Arguments.of(\"sc\",\"srd\",\"srd\"),\n+             Arguments.of(\"sr\",\"srp\",\"srp\"),\n+             Arguments.of(\"ss\",\"ssw\",\"ssw\"),\n+             Arguments.of(\"su\",\"sun\",\"sun\"),\n+             Arguments.of(\"sw\",\"swa\",\"swa\"),\n+             Arguments.of(\"sv\",\"swe\",\"swe\"),\n+             Arguments.of(\"ty\",\"tah\",\"tah\"),\n+             Arguments.of(\"ta\",\"tam\",\"tam\"),\n+             Arguments.of(\"tt\",\"tat\",\"tat\"),\n+             Arguments.of(\"te\",\"tel\",\"tel\"),\n+             Arguments.of(\"tg\",\"tgk\",\"tgk\"),\n+             Arguments.of(\"tl\",\"tgl\",\"tgl\"),\n+             Arguments.of(\"th\",\"tha\",\"tha\"),\n+             Arguments.of(\"bo\",\"bod\",\"tib\"),\n+             Arguments.of(\"ti\",\"tir\",\"tir\"),\n+             Arguments.of(\"to\",\"ton\",\"ton\"),\n+             Arguments.of(\"tn\",\"tsn\",\"tsn\"),\n+             Arguments.of(\"ts\",\"tso\",\"tso\"),\n+             Arguments.of(\"tk\",\"tuk\",\"tuk\"),\n+             Arguments.of(\"tr\",\"tur\",\"tur\"),\n+             Arguments.of(\"tw\",\"twi\",\"twi\"),\n+             Arguments.of(\"ug\",\"uig\",\"uig\"),\n+             Arguments.of(\"uk\",\"ukr\",\"ukr\"),\n+             Arguments.of(\"ur\",\"urd\",\"urd\"),\n+             Arguments.of(\"uz\",\"uzb\",\"uzb\"),\n+             Arguments.of(\"ve\",\"ven\",\"ven\"),\n+             Arguments.of(\"vi\",\"vie\",\"vie\"),\n+             Arguments.of(\"vo\",\"vol\",\"vol\"),\n+             Arguments.of(\"cy\",\"cym\",\"wel\"),\n+             Arguments.of(\"wa\",\"wln\",\"wln\"),\n+             Arguments.of(\"wo\",\"wol\",\"wol\"),\n+             Arguments.of(\"xh\",\"xho\",\"xho\"),\n+             Arguments.of(\"yi\",\"yid\",\"yid\"),\n+             Arguments.of(\"yo\",\"yor\",\"yor\"),\n+             Arguments.of(\"za\",\"zha\",\"zha\"),\n+             Arguments.of(\"zu\",\"zul\",\"zul\")\n+        );\n+    }\n+\n+    @Test\n+    @Disabled(\"For updating expected ISO data, NOT an actual test\")\n+    public void getISOData() {\n+        \/\/ Remove @Disabled to generate new ISO Data\n+        generateTables();\n+    }\n+\n+    private static final String ISO639 = \"ISO-639-2_utf-8.txt\";\n+    private static void generateTables() {\n+        try {\n+            BufferedReader ISO639File = new BufferedReader(new FileReader(ISO639));\n+            for (String line = ISO639File.readLine(); line != null; line = ISO639File.readLine()) {\n+                String[] tokens= line.split(\"\\\\|\");\n+                String iso639_1 = tokens[2];\n+                String iso639_2B = tokens[1];\n+                String iso639_2T = tokens[0];\n+                if (iso639_1.isEmpty()){\n+                    continue; \/\/ Skip if not both a 639-1 and 639-2 code\n+                }\n+                if (iso639_2B.isEmpty()){\n+                    iso639_2B = iso639_2T; \/\/ Default 639\/B to 639\/T if empty\n+                }\n+                System.out.printf(\"\"\"\n+                        Arguments.of(\"%s\",\"%s\",\"%s\"),\n+                        \"\"\", iso639_1, iso639_2B, iso639_2T);\n+            }\n+        } catch (Exception e) {\n+            System.out.println(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/ISO639.java","additions":297,"deletions":0,"binary":false,"changes":297,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8001562\n+ * @summary Verify that getAvailableLocales() in locale sensitive services\n+ * classes return compatible set of locales as in JDK7.\n+ * @modules jdk.localedata\n+ * @run junit JDK7LocaleServiceDiffs\n+ *\/\n+\n+import java.text.BreakIterator;\n+import java.text.Collator;\n+import java.text.DateFormat;\n+import java.text.DateFormatSymbols;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class JDK7LocaleServiceDiffs {\n+\n+    static final List<String> jdk7availTags = List.of(\n+            \"ar\", \"ar-AE\", \"ar-BH\", \"ar-DZ\", \"ar-EG\", \"ar-IQ\", \"ar-JO\", \"ar-KW\",\n+            \"ar-LB\", \"ar-LY\", \"ar-MA\", \"ar-OM\", \"ar-QA\", \"ar-SA\", \"ar-SD\", \"ar-SY\",\n+            \"ar-TN\", \"ar-YE\", \"be\", \"be-BY\", \"bg\", \"bg-BG\", \"ca\", \"ca-ES\", \"cs\",\n+            \"cs-CZ\", \"da\", \"da-DK\", \"de\", \"de-AT\", \"de-CH\", \"de-DE\", \"de-LU\", \"el\",\n+            \"el-CY\", \"el-GR\", \"en\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-IE\", \"en-IN\",\n+            \"en-MT\", \"en-NZ\", \"en-PH\", \"en-SG\", \"en-US\", \"en-ZA\", \"es\", \"es-AR\",\n+            \"es-BO\", \"es-CL\", \"es-CO\", \"es-CR\", \"es-DO\", \"es-EC\", \"es-ES\", \"es-GT\",\n+            \"es-HN\", \"es-MX\", \"es-NI\", \"es-PA\", \"es-PE\", \"es-PR\", \"es-PY\", \"es-SV\",\n+            \"es-US\", \"es-UY\", \"es-VE\", \"et\", \"et-EE\", \"fi\", \"fi-FI\", \"fr\", \"fr-BE\",\n+            \"fr-CA\", \"fr-CH\", \"fr-FR\", \"fr-LU\", \"ga\", \"ga-IE\", \"he\", \"he-IL\",\n+            \"hi-IN\", \"hr\", \"hr-HR\", \"hu\", \"hu-HU\", \"id\", \"id-ID\", \"is\", \"is-IS\",\n+            \"it\", \"it-CH\", \"it-IT\", \"ja\", \"ja-JP\",\n+            \"ja-JP-u-ca-japanese-x-lvariant-JP\", \"ko\", \"ko-KR\", \"lt\", \"lt-LT\", \"lv\",\n+            \"lv-LV\", \"mk\", \"mk-MK\", \"ms\", \"ms-MY\", \"mt\", \"mt-MT\", \"nl\", \"nl-BE\",\n+            \"nl-NL\", \"no\", \"no-NO\", \"no-NO-x-lvariant-NY\", \"pl\", \"pl-PL\", \"pt\",\n+            \"pt-BR\", \"pt-PT\", \"ro\", \"ro-RO\", \"ru\", \"ru-RU\", \"sk\", \"sk-SK\", \"sl\",\n+            \"sl-SI\", \"sq\", \"sq-AL\", \"sr\", \"sr-BA\", \"sr-CS\", \"sr-Latn\", \"sr-Latn-BA\",\n+            \"sr-Latn-ME\", \"sr-Latn-RS\", \"sr-ME\", \"sr-RS\", \"sv\", \"sv-SE\", \"th\",\n+            \"th-TH\", \"th-TH-u-nu-thai-x-lvariant-TH\", \"tr\", \"tr-TR\", \"uk\", \"uk-UA\",\n+            \"vi\", \"vi-VN\", \"zh\", \"zh-CN\", \"zh-HK\", \"zh-SG\", \"zh-TW\");\n+    static List<Locale> jdk7availLocs;\n+\n+    static {\n+        jdk7availLocs = jdk7availTags.stream()\n+                .map(Locale::forLanguageTag)\n+                .collect(Collectors.toList());\n+    }\n+\n+    \/**\n+     * This test compares the locales returned by getAvailableLocales() from a\n+     * locale sensitive service to the available JDK7 locales. If the locales from\n+     * a locale sensitive service are found to not contain a JDK7 available tag,\n+     * the test will fail.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"serviceProvider\")\n+    public void compatibleLocalesTest(Class<?> c, List<Locale> locs) {\n+        diffLocale(c, locs);\n+    }\n+\n+    static void diffLocale(Class<?> c, List<Locale> locs) {\n+        String diff = \"\";\n+\n+        System.out.printf(\"Only in target locales (%s.getAvailableLocales()): \", c.getSimpleName());\n+        for (Locale l : locs) {\n+            if (!jdk7availLocs.contains(l)) {\n+                diff += \"\\\"\" + l.toLanguageTag() + \"\\\", \";\n+            }\n+        }\n+        System.out.println(diff);\n+        diff = \"\";\n+\n+        System.out.printf(\"Only in JDK7 (%s.getAvailableLocales()): \", c.getSimpleName());\n+        for (Locale l : jdk7availLocs) {\n+            if (!locs.contains(l)) {\n+                diff += \"\\\"\" + l.toLanguageTag() + \"\\\", \";\n+            }\n+        }\n+        System.out.println(diff);\n+\n+        if (diff.length() > 0) {\n+            throw new RuntimeException(\"Above locale(s) were not included in the target available locales\");\n+        }\n+    }\n+\n+    private static Stream<Arguments> serviceProvider() {\n+        return Stream.of(\n+                Arguments.of(BreakIterator.class, Arrays.asList(BreakIterator.getAvailableLocales())),\n+                Arguments.of(Collator.class, Arrays.asList(Collator.getAvailableLocales())),\n+                Arguments.of(DateFormat.class, Arrays.asList(DateFormat.getAvailableLocales())),\n+                Arguments.of(DateFormatSymbols.class, Arrays.asList(DateFormatSymbols.getAvailableLocales())),\n+                Arguments.of(DecimalFormatSymbols.class, Arrays.asList(DecimalFormatSymbols.getAvailableLocales())),\n+                Arguments.of(NumberFormat.class, Arrays.asList(NumberFormat.getAvailableLocales())),\n+                Arguments.of(Locale.class, Arrays.asList(Locale.getAvailableLocales()))\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/JDK7LocaleServiceDiffs.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8026766\n+ * @summary Confirm that LanguageRange.toString() returns an expected result.\n+ * @run junit LRToString\n+ *\/\n+\n+import java.util.Locale.LanguageRange;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LRToString {\n+\n+    \/**\n+     * This test ensures that the output of LanguageRange.toString()\n+     * returns an expected result, that is, the weight is hidden if it is\n+     * equal to 1.0.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ranges\")\n+    public void toStringTest(String range, double weight) {\n+        LanguageRange lr = new LanguageRange(range, weight);\n+        String expected = weight == 1.0\n+                ? range\n+                : range+\";q=\"+weight;\n+        assertEquals(lr.toString(), expected);\n+    }\n+\n+    private static Stream<Arguments> ranges() {\n+        return Stream.of(\n+                Arguments.of(\"ja\", 1.0),\n+                Arguments.of(\"de\", 0.5),\n+                Arguments.of(\"fr\", 0.0)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LRToString.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8040211 8191404 8203872 8222980 8225435 8241082 8242010 8247432\n- *      8258795 8267038 8287180 8302512 8304761 8306031 8308021\n+ * @bug 8025703 8040211 8191404 8203872 8222980 8225435 8241082 8242010 8247432\n+ *      8258795 8267038 8287180 8302512 8304761 8306031 8308021 8313702\n@@ -29,1 +29,1 @@\n- *          (LSR Revision: 2023-05-11) with Locale and Locale.LanguageRange\n+ *          (LSR Revision: 2023-08-02) with Locale and Locale.LanguageRange\n@@ -48,3 +48,3 @@\n-        + \" en-gb-oed, gti, iba, jks, kdz, kjh, kmb, koj, kru, ksp, kwq, kxe, kzk, lgs, lii, lmm, lsb, lsc, lsn, lsv, lsw, lvi, mtm,\"\n-        + \" ngv, nns, ola, oyb, pat, phr, plu, pnd, pub, rib, rnb, rsn, scv, snz, sqx, suj, szy, taj, tdg, tjj, tjp, tpn, tvx,\"\n-        + \" umi, uss, uth, ysm, zko, wkr;q=0.9, ar-hyw;q=0.8, yug;q=0.5, gfx;q=0.4\";\n+        + \" en-gb-oed, gti, iba, ilw, jks, kdz, kjh, kmb, koj, kru, ksp, kwq, kxe, kzk, lgs, lii, lmm, lsb, lsc, lsn, lsv, lsw, lvi, meg, mtm,\"\n+        + \" ngv, nns, ola, oyb, pat, pcr, phr, plu, pnd, pub, rib, rnb, rsn, scv, snz, sqx, suj, szy, taj, tdg, tjj, tjp, tpn, tvx,\"\n+        + \" umi, uss, uth, xia, yos, ysm, zko, wkr;q=0.9, ar-hyw;q=0.8, yug;q=0.5, gfx;q=0.4\";\n@@ -105,0 +105,2 @@\n+            new LanguageRange(\"ilw\", 1.0),\n+            new LanguageRange(\"gal\", 1.0),\n@@ -143,0 +145,2 @@\n+            new LanguageRange(\"meg\", 1.0),\n+            new LanguageRange(\"cir\", 1.0),\n@@ -157,0 +161,2 @@\n+            new LanguageRange(\"pcr\", 1.0),\n+            new LanguageRange(\"adx\", 1.0),\n@@ -191,0 +197,4 @@\n+            new LanguageRange(\"xia\", 1.0),\n+            new LanguageRange(\"acn\", 1.0),\n+            new LanguageRange(\"yos\", 1.0),\n+            new LanguageRange(\"zom\", 1.0),\n","filename":"test\/jdk\/java\/util\/Locale\/LanguageSubtagRegistryTest.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8032842 8175539\n+ * @summary Checks that the filterTags() and lookup() methods\n+ *          preserve the case of matching language tag(s).\n+ *          Before 8032842 fix these methods return the matching\n+ *          language tag(s) in lowercase.\n+ *          Also, checks the filterTags() to return only unique\n+ *          (ignoring case considerations) matching tags.\n+ * @run junit PreserveTagCase\n+ *\/\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Locale.FilteringMode;\n+import java.util.Locale.LanguageRange;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PreserveTagCase {\n+\n+    \/**\n+     * This test ensures that Locale.filterTags() preserves the case of matching\n+     * language tag(s).\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"filterProvider\")\n+    public static void testFilterTags(String ranges, List<String> tags,\n+                                  List<String> expected, FilteringMode mode) {\n+        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n+        List<String> actual = Locale.filterTags(priorityList, tags, mode);\n+        assertEquals(actual, expected, String.format(\"[filterTags() failed for \" +\n+                \"the language range: %s, Expected: %s, Found: %s]\", ranges, expected, actual));\n+    }\n+\n+    \/**\n+     * This test ensures that Locale.lookupTag() preserves the case of matching\n+     * language tag(s).\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"lookupProvider\")\n+    public static void testLookupTag(String ranges, List<String> tags,\n+                                  String expected) {\n+        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n+        String actual = Locale.lookupTag(priorityList, tags);\n+        assertEquals(actual, expected, String.format(\"[lookupTags() failed for \" +\n+                \"the language range: %s, Expected: %s, Found: %s]\", ranges, expected, actual));\n+    }\n+\n+    private static Stream<Arguments> filterProvider() {\n+        return Stream.of(\n+                \/\/ test filterBasic() for preserving the case of matching tags for\n+                \/\/ the language range '*', with no duplicates in the matching tags\n+                Arguments.of(\"*\",\n+                        List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\", \"JA-JP\", \"en-GB\"),\n+                        List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\", \"JA-JP\"),\n+                        FilteringMode.AUTOSELECT_FILTERING),\n+                \/\/ test filterBasic() for preserving the case of matching tags for\n+                \/\/ basic ranges other than *, with no duplicates in the matching tags\n+                Arguments.of(\"mtm-RU, en-GB\",\n+                        List.of(\"En-Gb\", \"mTm-RU\", \"en-US\", \"en-latn\", \"en-GB\"),\n+                        List.of(\"mTm-RU\", \"En-Gb\"),\n+                        FilteringMode.AUTOSELECT_FILTERING),\n+                \/\/ test filterExtended() for preserving the case of matching tags for\n+                \/\/ the language range '*', with no duplicates in the matching tags\n+                Arguments.of(\"*\",\n+                        List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"hi-IN\", \"ja-Latn-JP\", \"JA-JP\"),\n+                        List.of(\"de-CH\", \"hi-in\", \"En-GB\", \"ja-Latn-JP\", \"JA-JP\"),\n+                        FilteringMode.EXTENDED_FILTERING),\n+                \/\/ test filterExtended() for preserving the case of matching tags for\n+                \/\/ extended ranges other than *, with no duplicates in the matching tags\n+                Arguments.of(\"*-ch;q=0.5, *-Latn;q=0.4\",\n+                        List.of(\"fr-CH\", \"de-Ch\", \"en-latn\", \"en-US\", \"en-Latn\"),\n+                        List.of(\"fr-CH\", \"de-Ch\", \"en-latn\"),\n+                        FilteringMode.EXTENDED_FILTERING)\n+        );\n+    }\n+\n+    private static Stream<Arguments> lookupProvider() {\n+        return Stream.of(\n+                \/\/ test lookupTag() for preserving the case of matching tag\n+                Arguments.of(\"*-ch;q=0.5\", List.of(\"en\", \"fR-cH\"), \"fR-cH\"),\n+                Arguments.of(\"*-Latn;q=0.4\", List.of(\"en\", \"fR-LATn\"), \"fR-LATn\")\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/PreserveTagCase.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}