{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include <assert.h>\n@@ -88,1 +89,5 @@\n-    if (readFully (fdin, c, sizeof(*c)) == -1) {\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 5);\n+#endif\n+\n+    if (readFully (fdin, c, sizeof(*c)) != sizeof(*c)) {\n@@ -92,1 +97,1 @@\n-    if (readFully (fdin, &sp, sizeof(sp)) == -1) {\n+    if (readFully (fdin, &sp, sizeof(sp)) != sizeof(sp)) {\n@@ -101,1 +106,1 @@\n-    if (readFully (fdin, buf, bufsize) == -1) {\n+    if (readFully (fdin, buf, bufsize) != bufsize) {\n@@ -138,5 +143,8 @@\n-    int r, fdin, fdout;\n-\n-    r = sscanf (argv[1], \"%d:%d\", &fdin, &fdout);\n-    if (r == 2 && fcntl(fdin, F_GETFD) != -1) {\n-        fstat(fdin, &buf);\n+    int r, fdinr, fdinw, fdout;\n+\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 4);\n+#endif\n+    r = sscanf (argv[1], \"%d:%d:%d\", &fdinr, &fdinw, &fdout);\n+    if (r == 3 && fcntl(fdinr, F_GETFD) != -1 && fcntl(fdinw, F_GETFD) != -1) {\n+        fstat(fdinr, &buf);\n@@ -148,1 +156,12 @@\n-    initChildStuff (fdin, fdout, &c);\n+    \/\/ Close the writing end of the pipe we use for reading from the parent.\n+    \/\/ We have to do this before we start reading from the parent to avoid\n+    \/\/ blocking in the case the parent exits before we finished reading from it.\n+    close(fdinw); \/\/ Deliberately ignore errors (see https:\/\/lwn.net\/Articles\/576478\/).\n+    initChildStuff (fdinr, fdout, &c);\n+    \/\/ Now set the file descriptor for the pipe's writing end to -1\n+    \/\/ for the case that somebody tries to close it again.\n+    assert(c.childenv[1] == fdinw);\n+    c.childenv[1] = -1;\n+    \/\/ The file descriptor for reporting errors back to our parent we got on the command\n+    \/\/ line should be the same like the one in the ChildStuff struct we've just read.\n+    assert(c.fail[1] == fdout);\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -493,1 +493,1 @@\n-    char *buf, buf1[16];\n+    char *buf, buf1[(3 * 11) + 3]; \/\/ \"%d:%d:%d\\0\"\n@@ -500,1 +500,1 @@\n-    snprintf(buf1, sizeof(buf1), \"%d:%d\", c->childenv[0], c->fail[1]);\n+    snprintf(buf1, sizeof(buf1), \"%d:%d:%d\", c->childenv[0], c->childenv[1], c->fail[1]);\n@@ -537,1 +537,1 @@\n-                fcntl(c->fds[i], F_SETFD, flags & (~1));\n+                fcntl(c->fds[i], F_SETFD, flags & (~FD_CLOEXEC));\n@@ -548,0 +548,4 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 1);\n+#endif\n+\n@@ -563,4 +567,14 @@\n-    write(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n-    write(c->childenv[1], (char *)c, sizeof(*c));\n-    write(c->childenv[1], (char *)&sp, sizeof(sp));\n-    write(c->childenv[1], buf, bufsize);\n+    if (writeFully(c->childenv[1], (char *)&magic, sizeof(magic)) != sizeof(magic)) { \/\/ magic number first\n+        return -1;\n+    }\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 2);\n+#endif\n+    if (writeFully(c->childenv[1], (char *)c, sizeof(*c)) != sizeof(*c) ||\n+        writeFully(c->childenv[1], (char *)&sp, sizeof(sp)) != sizeof(sp) ||\n+        writeFully(c->childenv[1], buf, bufsize) != bufsize) {\n+        return -1;\n+    }\n+    \/* We're done. Let jspwanhelper know he can't expect any more data from us. *\/\n+    close(c->childenv[1]);\n+    c->childenv[1] = -1;\n@@ -568,0 +582,3 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 3);\n+#endif\n@@ -620,0 +637,2 @@\n+    \/\/ Reset errno to protect against bogus error messages\n+    errno = 0;\n@@ -718,1 +737,0 @@\n-            assert(errnum == CHILD_IS_ALIVE);\n@@ -720,3 +738,2 @@\n-                \/* Should never happen since the first thing the spawn\n-                 * helper should do is to send an alive ping to the parent,\n-                 * before doing any subsequent work. *\/\n+                \/* This can happen if the spawn helper encounters an error\n+                 * before or during the handshake with the parent. *\/\n@@ -758,2 +775,6 @@\n-    closeSafely(childenv[0]);\n-    closeSafely(childenv[1]);\n+    \/* We use 'c->childenv' here rather than 'childenv' because 'spawnChild()' might have\n+     * already closed 'c->childenv[1]' and signaled this by setting 'c->childenv[1]' to '-1'.\n+     * Otherwise 'c->childenv' and 'childenv' are the same because we just copied 'childenv'\n+     * to 'c->childenv' (with 'copyPipe()') before calling 'startChild()'. *\/\n+    closeSafely(c->childenv[0]);\n+    closeSafely(c->childenv[1]);\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,8 +39,0 @@\n-ssize_t\n-restartableWrite(int fd, const void *buf, size_t count)\n-{\n-    ssize_t result;\n-    RESTARTABLE(write(fd, buf, count), result);\n-    return result;\n-}\n-\n@@ -166,0 +158,40 @@\n+\/*\n+ * Writes nbyte bytes from buf into file descriptor fd,\n+ * The write operation is retried in case of EINTR or partial writes.\n+ *\n+ * Returns number of bytes written (normally nbyte).\n+ * In case of write errors, returns -1 and sets errno.\n+ *\/\n+ssize_t\n+writeFully(int fd, const void *buf, size_t nbyte)\n+{\n+#ifdef DEBUG\n+\/* This code is only used in debug builds for testing truncated writes\n+ * during the handshake with the spawn helper for MODE_POSIX_SPAWN.\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+    const char* env = getenv(\"JTREG_JSPAWNHELPER_PROTOCOL_TEST\");\n+    if (env != NULL && atoi(env) == 99 && nbyte == sizeof(ChildStuff)) {\n+        printf(\"posix_spawn: truncating write of ChildStuff struct\\n\");\n+        fflush(stdout);\n+        nbyte = nbyte \/ 2;\n+    }\n+#endif\n+    ssize_t remaining = nbyte;\n+    for (;;) {\n+        ssize_t n = write(fd, buf, remaining);\n+        if (n > 0) {\n+            remaining -= n;\n+            if (remaining <= 0)\n+                return nbyte;\n+            \/* We were interrupted in the middle of writing the bytes.\n+             * Unlikely, but possible. *\/\n+            buf = (void *) (((char *)buf) + n);\n+        } else if (n == -1 && errno == EINTR) {\n+            \/* Retry *\/\n+        } else {\n+            return -1;\n+        }\n+    }\n+}\n+\n@@ -213,1 +245,1 @@\n-    if (mode == MODE_CLONE || mode == MODE_VFORK) {\n+    if (mode == MODE_VFORK) {\n@@ -324,1 +356,3 @@\n-        restartableWrite(fail_pipe_fd, &code, sizeof(code));\n+        if (writeFully(fail_pipe_fd, &code, sizeof(code)) != sizeof(code)) {\n+            goto WhyCantJohnnyExec;\n+        }\n@@ -327,0 +361,3 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 6);\n+#endif\n@@ -393,1 +430,1 @@\n-        restartableWrite(fail_pipe_fd, &errnum, sizeof(errnum));\n+        writeFully(fail_pipe_fd, &errnum, sizeof(errnum));\n@@ -399,0 +436,17 @@\n+\n+#ifdef DEBUG\n+\/* This method is only used in debug builds for testing MODE_POSIX_SPAWN\n+ * in the light of abnormal program termination of either the parent JVM\n+ * or the newly created jspawnhelper child process during the execution of\n+ * Java_java_lang_ProcessImpl_forkAndExec().\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+void jtregSimulateCrash(pid_t child, int stage) {\n+    const char* env = getenv(\"JTREG_JSPAWNHELPER_PROTOCOL_TEST\");\n+    if (env != NULL && atoi(env) == stage) {\n+        printf(\"posix_spawn:%d\\n\", child);\n+        fflush(stdout);\n+        _exit(stage);\n+    }\n+}\n+#endif\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":66,"deletions":12,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,0 @@\n-#define MODE_CLONE 4\n@@ -131,1 +130,1 @@\n-ssize_t restartableWrite(int fd, const void *buf, size_t count);\n+ssize_t writeFully(int fd, const void *buf, size_t count);\n@@ -152,0 +151,10 @@\n+#ifdef DEBUG\n+\/* This method is only used in debug builds for testing MODE_POSIX_SPAWN\n+ * in the light of abnormal program termination of either the parent JVM\n+ * or the newly created jspawnhelper child process during the execution of\n+ * Java_java_lang_ProcessImpl_forkAndExec().\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+void jtregSimulateCrash(pid_t child, int stage);\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.h","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,237 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307990\n+ * @requires (os.family == \"linux\") | (os.family == \"aix\")\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 JspawnhelperProtocol\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JspawnhelperProtocol {\n+    \/\/ Timout in seconds\n+    private static final int TIMEOUT = 60;\n+    \/\/ Base error code to communicate various error states from the parent process to the top-level test\n+    private static final int ERROR = 10;\n+    private static final String[] CMD = { \"pwd\" };\n+    private static final String ENV_KEY = \"JTREG_JSPAWNHELPER_PROTOCOL_TEST\";\n+\n+    private static void parentCode(String arg) throws IOException, InterruptedException {\n+        System.out.println(\"Recursively executing 'JspawnhelperProtocol \" + arg + \"'\");\n+        Process p = null;\n+        try {\n+            p = Runtime.getRuntime().exec(CMD);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            System.exit(ERROR);\n+        }\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            System.out.println(\"Child process timed out\");\n+            System.exit(ERROR + 1);\n+        }\n+        if (p.exitValue() == 0) {\n+            String pwd = p.inputReader().readLine();\n+            String realPwd = Path.of(\"\").toAbsolutePath().toString();\n+            if (!realPwd.equals(pwd)) {\n+                System.out.println(\"Child process returned '\" + pwd + \"' (expected '\" + realPwd + \"')\");\n+                System.exit(ERROR + 2);\n+            }\n+            System.out.println(\"  Successfully executed '\" + CMD[0] + \"'\");\n+            System.exit(0);\n+        } else {\n+            System.out.println(\"  Failed to executed '\" + CMD[0] + \"' (exitValue=\" + p.exitValue() + \")\");\n+            System.exit(ERROR + 3);\n+        }\n+    }\n+\n+    private static void normalExec() throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"normalExec\");\n+        pb.inheritIO();\n+        Process p = pb.start();\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Parent process timed out\");\n+        }\n+        if (p.exitValue() != 0) {\n+            throw new Exception(\"Parent process exited with \" + p.exitValue());\n+        }\n+    }\n+\n+    private static void simulateCrashInChild(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateCrashInChild\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        boolean foundCrashInfo = false;\n+        try (BufferedReader br = p.inputReader()) {\n+            String line = br.readLine();\n+            while (line != null) {\n+                System.out.println(line);\n+                if (line.equals(\"posix_spawn:0\")) {\n+                    foundCrashInfo = true;\n+                }\n+                line = br.readLine();\n+            }\n+        }\n+        if (!foundCrashInfo) {\n+            throw new Exception(\"Wrong output from child process\");\n+        }\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Parent process timed out\");\n+        }\n+\n+        int ret = p.exitValue();\n+        if (ret == 0) {\n+            throw new Exception(\"Expected error during child execution\");\n+        }\n+        System.out.println(\"Parent exit code: \" + ret);\n+    }\n+\n+    private static void simulateCrashInParent(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateCrashInParent\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        String line = null;\n+        try (BufferedReader br = p.inputReader()) {\n+            line = br.readLine();\n+            while (line != null && !line.startsWith(\"posix_spawn:\")) {\n+                System.out.println(line);\n+                line = br.readLine();\n+            }\n+        }\n+        if (line == null) {\n+            throw new Exception(\"Wrong output from parent process\");\n+        }\n+        System.out.println(line);\n+        long childPid = Integer.parseInt(line.substring(line.indexOf(':') + 1));\n+\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Parent process timed out\");\n+        }\n+\n+        Optional<ProcessHandle> oph = ProcessHandle.of(childPid);\n+        if (!oph.isEmpty()) {\n+            ProcessHandle ph = oph.get();\n+            try {\n+                \/\/ Give jspawnhelper a chance to exit gracefully\n+                ph.onExit().get(TIMEOUT, TimeUnit.SECONDS);\n+            } catch (TimeoutException te) {\n+                Optional<String> cmd = ph.info().command();\n+                if (cmd.isPresent() && cmd.get().endsWith(\"jspawnhelper\")) {\n+                    throw new Exception(\"jspawnhelper still alive after parent Java process terminated\");\n+                }\n+            }\n+        }\n+        int ret = p.exitValue();\n+        if (ret != stage) {\n+            throw new Exception(\"Expected exit code \" + stage + \" but got \" + ret);\n+        }\n+        System.out.println(\"Parent exit code: \" + ret);\n+    }\n+\n+    private static void simulateTruncatedWriteInParent(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateTruncatedWriteInParent\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        BufferedReader br = p.inputReader();\n+        String line = br.readLine();\n+        while (line != null && !line.startsWith(\"posix_spawn:\")) {\n+            System.out.println(line);\n+            line = br.readLine();\n+        }\n+        if (line == null) {\n+            throw new Exception(\"Wrong output from parent process\");\n+        }\n+        System.out.println(line);\n+\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Parent process timed out\");\n+        }\n+        line = br.readLine();\n+        while (line != null) {\n+            System.out.println(line);\n+            line = br.readLine();\n+        }\n+\n+        int ret = p.exitValue();\n+        if (ret != ERROR) {\n+            throw new Exception(\"Expected exit code \" + ERROR + \" but got \" + ret);\n+        }\n+        System.out.println(\"Parent exit code: \" + ret);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ This test works as follows:\n+        \/\/  - jtreg executes the test class `JspawnhelperProtocol` without arguments.\n+        \/\/    This is the initial \"grandparent\" process.\n+        \/\/  - For each sub-test (i.e. `normalExec()`, `simulateCrashInParent()` and\n+        \/\/    `simulateCrashInChild()`), a new sub-process (called the \"parent\") will be\n+        \/\/    forked which executes `JspawnhelperProtocol` recursively with a corresponding\n+        \/\/    command line argument.\n+        \/\/  - The forked `JspawnhelperProtocol` process (i.e. the \"parent\") runs\n+        \/\/    `JspawnhelperProtocol::parentCode()` which forks off yet another sub-process\n+        \/\/    (called the \"child\").\n+        \/\/  - The sub-tests in the \"grandparent\" check that various abnormal program\n+        \/\/    terminations in the \"parent\" or the \"child\" process are handled gracefully and\n+        \/\/    don't lead to deadlocks or zombie processes.\n+        if (args.length > 0) {\n+            \/\/ Entry point for recursive execution in the \"parent\" process\n+            parentCode(args[0]);\n+        } else {\n+            \/\/ Main test entry for execution from jtreg\n+            normalExec();\n+            simulateCrashInParent(1);\n+            simulateCrashInParent(2);\n+            simulateCrashInParent(3);\n+            simulateCrashInChild(4);\n+            simulateCrashInChild(5);\n+            simulateCrashInChild(6);\n+            simulateTruncatedWriteInParent(99);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"}]}