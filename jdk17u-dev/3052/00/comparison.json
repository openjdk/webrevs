{"files":[{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.dnd.DragSource;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+\/*\n+  @test\n+  @bug 4407057\n+  @summary tests that deserialized DragSource has a non-null flavor map\n+  @key headful\n+  @run main DragSourceSerializationTest\n+*\/\n+\n+public class DragSourceSerializationTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            final DragSource dragSource = DragSource.getDefaultDragSource();\n+\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ObjectOutputStream    oos  = new ObjectOutputStream(baos);\n+            oos.writeObject(dragSource);\n+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+            final DragSource copy = (DragSource)ois.readObject();\n+            if (copy.getFlavorMap() == null) {\n+                throw new RuntimeException(\"getFlavorMap() returns null\");\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragSourceSerializationTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.GridLayout;\n+import java.awt.Robot;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Dimension;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JList;\n+\n+\/*\n+  @test\n+  @bug 4388802\n+  @summary tests that a drag can be initiated with MOUSE_MOVED event\n+  @key headful\n+  @run main DragTriggerEventTest\n+*\/\n+\n+public class DragTriggerEventTest {\n+\n+    volatile JFrame frame;\n+    volatile JList list;\n+    volatile DropTargetPanel panel;\n+    volatile Point srcPoint;\n+    volatile Rectangle cellBounds;\n+    volatile Point dstPoint;\n+    volatile Dimension d;\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    volatile boolean mouse1Pressed = false;\n+    volatile boolean ctrlPressed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        DragTriggerEventTest test = new DragTriggerEventTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        list = new JList(new String[] {\"one\", \"two\", \"three\", \"four\"});\n+        list.setDragEnabled(true);\n+        panel = new DropTargetPanel();\n+\n+        frame = new JFrame();\n+        frame.setTitle(\"DragTriggerEventTest\");\n+        frame.setLocation(200, 200);\n+        frame.getContentPane().setLayout(new GridLayout(2, 1));\n+        frame.getContentPane().add(list);\n+        frame.getContentPane().add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot;\n+        robot = new Robot();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = list.getLocationOnScreen();\n+            cellBounds = list.getCellBounds(0, 0);\n+        });\n+\n+        srcPoint.translate(cellBounds.x + cellBounds.width \/ 2,\n+                           cellBounds.y + cellBounds.height \/ 2);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dstPoint = panel.getLocationOnScreen();\n+            d = panel.getSize();\n+        });\n+        dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        for (int delay = 32; delay < 10000 && !panel.getResult(); delay *= 2) {\n+            System.err.println(\"attempt to drag with delay \" + delay);\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            mouse1Pressed = true;\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            mouse1Pressed = false;\n+\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            ctrlPressed = true;\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            mouse1Pressed = true;\n+\n+            Point p = new Point(srcPoint);\n+            while (!p.equals(dstPoint)) {\n+                p.translate(sign(dstPoint.x - p.x),\n+                            sign(dstPoint.y - p.y));\n+                robot.mouseMove(p.x, p.y);\n+                robot.delay(delay);\n+            }\n+        }\n+        if (mouse1Pressed) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        }\n+        if (ctrlPressed) {\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (!panel.getResult()) {\n+                throw new RuntimeException(\"The test failed.\");\n+            }\n+        });\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+}\n+\n+class DropTargetPanel extends JPanel implements DropTargetListener {\n+\n+    private boolean passed = false;\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        passed = true;\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {\n+        passed = true;\n+    }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        passed = true;\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {\n+        passed = true;\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        passed = true;\n+        dtde.rejectDrop();\n+    }\n+\n+    public boolean getResult() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragTriggerEventTest.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+  @test\n+  @bug 4896462\n+  @summary tests that drop action is computed correctly\n+  @key headful\n+  @run main DropActionChangeTest\n+*\/\n+\n+public class DropActionChangeTest extends JFrame implements AWTEventListener {\n+    Robot robot;\n+    Frame frame;\n+    Panel panel;\n+    private volatile boolean failed;\n+    private volatile boolean dropEnd;\n+    private volatile Component clickedComponent;\n+    private final Object LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 2000;\n+\n+    public static void main(String[] args) throws Exception {\n+        DropActionChangeTest test = new DropActionChangeTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+\n+        setSize (200,200);\n+        setTitle(\"DropActionChangeTest\");\n+        setVisible(true);\n+        validate();\n+\n+        frame = new Frame(\"Empty Frame with Panel\");\n+        panel = new Panel();\n+        frame.add(panel);\n+        frame.setBounds(300, 300, 300, 300);\n+        failed = false;\n+\n+        final DragSourceListener dsl = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent e) {\n+                System.err.println(\"DragSourseListener.dragDropEnd(): \" +\n+                        \"drop action=\" + e.getDropAction());\n+                if (e.getDropAction() != DnDConstants.ACTION_MOVE) {\n+                    System.err.println(\"FAILURE: wrong drop action:\" + e.getDropAction());\n+                    failed = true;\n+                }\n+                synchronized (LOCK) {\n+                    dropEnd = true;\n+                    LOCK.notifyAll();\n+                }\n+            }\n+        };\n+\n+        DragGestureListener dgl = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, new StringSelection(\"test\"), dsl);\n+            }\n+        };\n+\n+        new DragSource().createDefaultDragGestureRecognizer(panel,\n+                DnDConstants.ACTION_COPY_OR_MOVE, dgl);\n+\n+        DropTargetListener dtl = new DropTargetAdapter() {\n+            public void dragEnter(DropTargetDragEvent e) {\n+                System.err.println(\"DropTargetListener.dragEnter(): \" +\n+                        \"user drop action=\" + e.getDropAction());\n+                e.acceptDrag(e.getDropAction());\n+            }\n+\n+            public void dragOver(DropTargetDragEvent e) {\n+                e.acceptDrag(e.getDropAction());\n+            }\n+            public void drop(DropTargetDropEvent e) {\n+                System.err.println(\"DropTargetListener.drop(): \" +\n+                        \"user drop action=\" + e.getDropAction());\n+                e.acceptDrop(e.getDropAction());\n+                e.dropComplete(true);\n+            }\n+        };\n+\n+        new DropTarget(panel, dtl);\n+\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() {\n+        try {\n+            robot = new Robot();\n+\n+            Point startPoint = panel.getLocationOnScreen();\n+            startPoint.translate(50, 50);\n+\n+            if (!pointInComponent(robot, startPoint, panel)) {\n+                System.err.println(\"WARNING: Couldn't locate source panel\");\n+                return;\n+            }\n+\n+\n+            Point medPoint = new Point(startPoint.x + (DragSource.getDragThreshold()+10)*2,\n+                                       startPoint.y);\n+            Point endPoint = new Point(startPoint.x + (DragSource.getDragThreshold()+10)*4,\n+                                       startPoint.y);\n+\n+            synchronized (LOCK) {\n+                robot.keyPress(KeyEvent.VK_CONTROL);\n+                robot.mouseMove(startPoint.x, startPoint.y);\n+                robot.mousePress(InputEvent.BUTTON1_MASK);\n+                Util.doDrag(robot, startPoint, medPoint);\n+                robot.keyRelease(KeyEvent.VK_CONTROL);\n+                Util.doDrag(robot, medPoint, endPoint);\n+                robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+                LOCK.wait(DROP_COMPLETION_TIMEOUT);\n+            }\n+            if (!dropEnd) {\n+                System.err.println(\"DragSourseListener.dragDropEnd() was not called, returning\");\n+                return;\n+            }\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"wrong drop action!\");\n+        }\n+\n+        System.err.println(\"test passed!\");\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n+\n+\n+class Util {\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public static void doDrag(Robot robot, Point startPoint, Point endPoint) {\n+       for (Point p = new Point(startPoint); !p.equals(endPoint);\n+                p.translate(Util.sign(endPoint.x - p.x),\n+                            Util.sign(endPoint.y - p.y))) {\n+           robot.mouseMove(p.x, p.y);\n+           try {\n+               Thread.sleep(100);\n+           } catch (InterruptedException e) {\n+             e.printStackTrace();\n+           }\n+       }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropActionChangeTest.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"},{"patch":"@@ -0,0 +1,253 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4357930\n+  @summary tests that dropActionChanged() is not invoked if the drop gesture\n+           is not modified.\n+  @key headful\n+  @run main DropActionChangedTest\n+*\/\n+\n+public class DropActionChangedTest {\n+\n+    volatile Frame frame;\n+    volatile DragSourcePanel dragSourcePanel;\n+    volatile DropTargetPanel dropTargetPanel;\n+\n+    public static void main(String[] args) throws Exception {\n+        DropActionChangedTest test = new DropActionChangedTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        dragSourcePanel = new DragSourcePanel();\n+        dropTargetPanel = new DropTargetPanel();\n+\n+        frame = new Frame();\n+        frame.setTitle(\"DropTargetAddNotifyNPETest\");\n+        frame.setLocation(200, 200);\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(dragSourcePanel);\n+        frame.add(dropTargetPanel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.delay(2000);\n+        robot.mouseMove(250, 250);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.delay(1000);\n+        for (int y = 250; y < 350; y+=5) {\n+                robot.mouseMove(250, y);\n+                robot.delay(100);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        if (dropTargetPanel.isDropActionChangedTriggered()) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 Transferable,\n+                                                 DragGestureListener,\n+                                                 DragSourceListener {\n+    private final DataFlavor dataflavor =\n+        new DataFlavor(Button.class, \"DragSourceButton\");\n+\n+    public DragSourceButton() {\n+        this(\"DragSourceButton\");\n+    }\n+\n+    public DragSourceButton(String str) {\n+        super(str);\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        Object retObj = null;\n+\n+        ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+        ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+        ooStream.writeObject(this);\n+\n+        ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(baiStream);\n+        try {\n+            retObj = ois.readObject();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(e.toString());\n+        }\n+\n+        return retObj;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+\n+    public DragSourcePanel() {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton());\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+    private boolean dropActionChangedTriggered = false;\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        add(comp);\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {\n+        dropActionChangedTriggered = true;\n+        throw new RuntimeException(\"dropActionChanged triggered\");\n+    }\n+\n+    public boolean isDropActionChangedTriggered() {\n+        return dropActionChangedTriggered;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropActionChangedTest.java","additions":253,"deletions":0,"binary":false,"changes":253,"status":"added"},{"patch":"@@ -0,0 +1,356 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4484996\n+  @summary Tests that drop doesn't take too much time on Win 95\/98.\n+  @key headful\n+  @run main DropPerformanceTest\n+*\/\n+\n+public class DropPerformanceTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    public static final int DROP_COMPLETION_TIMEOUT = 4000;\n+    public static final int TIME_THRESHOLD = 40000;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    final Frame frame = new Frame();\n+    Robot robot = null;\n+    DropTargetPanel dtpanel = null;\n+    DragSourcePanel dspanel = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        DropPerformanceTest test = new DropPerformanceTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            dspanel = new DragSourcePanel();\n+\n+            frame.setTitle(\"DropPerformanceTest Drop Source Frame\");\n+            frame.setLocation(100, 200);\n+            frame.add(dspanel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point sourcePoint = dspanel.getLocationOnScreen();\n+            Dimension d = dspanel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                                       sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+            Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(DropPerformanceTest.CODE_FAILURE);\n+        }\n+\n+        System.exit(DropPerformanceTest.CODE_OK);\n+    } \/\/ run()\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void init() {\n+        dtpanel = new DropTargetPanel();\n+\n+        frame.setTitle(\"Drop Target Frame\");\n+        frame.setLocation(250, 200);\n+        frame.add(dtpanel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private void launchChildVM() {\n+        try {\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point p = dtpanel.getLocationOnScreen();\n+            Dimension d = dtpanel.getSize();\n+\n+            String javaPath = System.getProperty(\"java.home\", \"\");\n+            String command = javaPath + File.separator + \"bin\" +\n+                File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+                \" DropPerformanceTest \" +\n+                p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+            Process process = Runtime.getRuntime().exec(command);\n+            returnCode = process.waitFor();\n+            InputStream errorStream = process.getErrorStream();\n+            int count = errorStream.available();\n+            if (count > 0) {\n+                byte[] b = new byte[count];\n+                errorStream.read(b);\n+                System.err.println(\"========= Child VM System.err ========\");\n+                System.err.print(new String(b));\n+                System.err.println(\"======================================\");\n+            }\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+        switch (returnCode) {\n+            case CODE_NOT_RETURNED:\n+                System.err.println(\"Child VM: failed to start\");\n+                break;\n+            case CODE_OK:\n+                System.err.println(\"Child VM: normal termination\");\n+                break;\n+            case CODE_FAILURE:\n+                System.err.println(\"Child VM: abnormal termination\");\n+                break;\n+        }\n+        if (returnCode != CODE_OK) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+\n+    public void start() {\n+        launchChildVM();\n+        System.err.println(\"Drop consumed \" + dtpanel.getDropTime() + \" milliseconds\");\n+        if (dtpanel.getDropTime() > TIME_THRESHOLD) {\n+            throw new RuntimeException(\"The test failed: drop took too much time\");\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends JButton\n+                              implements Transferable, Serializable,\n+                                         DragGestureListener, DragSourceListener {\n+\n+    public DataFlavor dataflavor = new DataFlavor(DragSourceButton.class, \"Source\");\n+\n+    DragSourceButton(String str) {\n+        super(str);\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY, this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\n+        Object ret = null;\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(this);\n+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        try {\n+            ret = (DragSourceButton)ois.readObject();\n+        } catch (ClassNotFoundException cannotHappen) {\n+            return null;\n+        }\n+        return ret;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(100, 50);\n+\n+    public DragSourcePanel() {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton(\"Drag me\"));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(100, 50);\n+    private long dropTime = 0;\n+\n+    public DropTargetPanel() {\n+        setBackground(Color.green);\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public long getDropTime() {\n+        return dropTime;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        Transferable t = dtde.getTransferable();\n+        DataFlavor[] dfs = t.getTransferDataFlavors();\n+\n+        long before = System.currentTimeMillis();\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Object obj = null;\n+            try {\n+                obj = t.getTransferData(dfs[0]);\n+            } catch (IOException ioe) {\n+                dtc.dropComplete(false);\n+                return;\n+            } catch (UnsupportedFlavorException ufe) {\n+                dtc.dropComplete(false);\n+                return;\n+            }\n+\n+            if (obj != null) {\n+                Component comp = (Component)obj;\n+                add(comp);\n+            }\n+        }\n+\n+        long after = System.currentTimeMillis();\n+        dropTime = after - before;\n+\n+        synchronized (this) {\n+            notifyAll();\n+        }\n+\n+        dtc.dropComplete(true);\n+        validate();\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropPerformanceTest.java","additions":356,"deletions":0,"binary":false,"changes":356,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+\n+\/*\n+  @test\n+  @bug 4462285\n+  @summary tests that DropTarget.addNotify doesn't throw NPE if peer hierarchy\n+           is incomplete\n+  @key headful\n+  @run main DropTargetAddNotifyNPETest\n+*\/\n+\n+public class DropTargetAddNotifyNPETest {\n+\n+    volatile Component component1;\n+    volatile Component component2;\n+    volatile Frame frame;\n+    volatile DropTargetListener dtListener;\n+    volatile DropTarget dropTarget1;\n+    volatile DropTarget dropTarget2;\n+\n+    public static void main(String[] args) throws Exception {\n+        DropTargetAddNotifyNPETest test = new DropTargetAddNotifyNPETest();\n+        EventQueue.invokeAndWait(() -> {\n+            test.init();\n+            if (test.frame != null) {\n+                test.frame.dispose();\n+            }\n+        });\n+    }\n+\n+    public void init() {\n+        component1 = new LWComponent();\n+        component2 = new LWComponent();\n+        frame = new Frame(\"DropTargetAddNotifyNPETest\");\n+        dtListener = new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.rejectDrop();\n+            }\n+        };\n+        dropTarget1 = new DropTarget(component1, dtListener);\n+        dropTarget2 = new DropTarget(component2, dtListener);\n+\n+        frame.add(component2);\n+        component1.addNotify();\n+        component2.addNotify();\n+    }\n+}\n+\n+class LWComponent extends Component {}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetAddNotifyNPETest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.datatransfer.SystemFlavorMap;\n+import java.awt.dnd.DropTarget;\n+\n+\/*\n+  @test\n+  @bug 4785476\n+  @summary tests that DropTarget.setFlavorMap(null) works properly\n+  @key headful\n+  @run main DropTargetNullFlavorMapTest\n+*\/\n+public class DropTargetNullFlavorMapTest {\n+\n+    public static void main(String[] args) {\n+        DropTargetNullFlavorMapTest test = new DropTargetNullFlavorMapTest();\n+        test.init();\n+    }\n+\n+    public void init() {\n+        final DropTarget dropTarget = new DropTarget();\n+\n+        if (!SystemFlavorMap.getDefaultFlavorMap().equals(dropTarget.getFlavorMap())) {\n+            System.err.println(\"Default flavor map: \" + SystemFlavorMap.getDefaultFlavorMap());\n+            System.err.println(\"DropTarget's flavor map: \" + dropTarget.getFlavorMap());\n+            throw new RuntimeException(\"Incorrect flavor map.\");\n+        }\n+\n+        Thread.currentThread().setContextClassLoader(new ClassLoader() {});\n+\n+        dropTarget.setFlavorMap(null);\n+\n+        if (!SystemFlavorMap.getDefaultFlavorMap().equals(dropTarget.getFlavorMap())) {\n+            System.err.println(\"Default flavor map: \" + SystemFlavorMap.getDefaultFlavorMap());\n+            System.err.println(\"DropTarget's flavor map: \" + dropTarget.getFlavorMap());\n+            throw new RuntimeException(\"Incorrect flavor map.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetNullFlavorMapTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}