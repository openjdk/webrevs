{"files":[{"patch":"@@ -67,0 +67,1 @@\n+                .executionEngine(Presets.TEST_DEFAULT_EXECUTION)\n","filename":"test\/langtools\/jdk\/jshell\/AnalyzeSnippetTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,2 @@\n-                    .start(\"--no-startup\");\n+                    .start(\"--no-startup\",\n+                           \"--execution\", Presets.TEST_DEFAULT_EXECUTION);\n","filename":"test\/langtools\/jdk\/jshell\/CustomInputToolBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.net.InetAddress;\n@@ -35,15 +34,2 @@\n-    String standardListenSpec() {\n-        String loopback = InetAddress.getLoopbackAddress().getHostAddress();\n-        return \"jdi:hostname(\" + loopback + \")\";\n-    }\n-\n-    String standardLaunchSpec() {\n-        return \"jdi:launch(true)\";\n-    }\n-\n-    String standardJdiSpec() {\n-        return \"jdi\";\n-    }\n-\n-    String standardSpecs() {\n-        return \"5(\" + standardListenSpec() + \"), 6(\" + standardLaunchSpec() + \"), 7(\" + standardJdiSpec() + \")\";\n+    String alwaysPassingSpec() {\n+        return \"5(local)\";\n","filename":"test\/langtools\/jdk\/jshell\/ExecutionControlTestBase.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,3 +132,1 @@\n-        pm.put(\"2\", standardListenSpec());\n-        pm.put(\"3\", standardLaunchSpec());\n-        pm.put(\"4\", standardJdiSpec());\n+        pm.put(\"2\", \"local\");\n@@ -162,3 +160,1 @@\n-                log.contains(\"Success failover -- 2 = \" + standardListenSpec())\n-                || log.contains(\"Success failover -- 3 = \" + standardLaunchSpec())\n-                || log.contains(\"Success failover -- 4 = \" + standardJdiSpec()),\n+                log.contains(\"Success failover -- 2 = local\"),\n","filename":"test\/langtools\/jdk\/jshell\/FailOverDirectExecutionControlTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-                    + standardSpecs()));\n+                    + alwaysPassingSpec()));\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlDyingLaunchTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-                        + standardSpecs()));\n+                        + alwaysPassingSpec()));\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlHangingLaunchTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-                        + standardSpecs()));\n+                        + alwaysPassingSpec()));\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlHangingListenTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-                + standardSpecs()));\n+                + alwaysPassingSpec()));\n","filename":"test\/langtools\/jdk\/jshell\/FailOverExecutionControlTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-                .err(new PrintStream(errStream));\n+                .err(new PrintStream(errStream))\n+                .executionEngine(Presets.TEST_DEFAULT_EXECUTION);\n","filename":"test\/langtools\/jdk\/jshell\/IdGeneratorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,3 @@\n-        JShell js = JShell.create();\n+        JShell js = JShell.builder()\n+                          .executionEngine(Presets.TEST_DEFAULT_EXECUTION)\n+                          .build();\n@@ -195,1 +197,2 @@\n-                .err(new PrintStream(errStream));\n+                .err(new PrintStream(errStream))\n+                .executionEngine(Presets.TEST_DEFAULT_EXECUTION);\n","filename":"test\/langtools\/jdk\/jshell\/KullaTesting.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.InetAddress;\n+import java.util.*;\n+\n+public class Presets {\n+    public static final String TEST_DEFAULT_EXECUTION;\n+    public static final String TEST_STANDARD_EXECUTION;\n+\n+    static {\n+        String loopback = InetAddress.getLoopbackAddress().getHostAddress();\n+\n+        TEST_DEFAULT_EXECUTION = \"failover:0(jdi:hostname(\" + loopback + \")),\" +\n+                                 \"1(jdi:launch(true)), 2(jdi), 3(local)\";\n+        TEST_STANDARD_EXECUTION = \"failover:0(jdi:hostname(\" + loopback + \")),\" +\n+                                  \"1(jdi:launch(true)), 2(jdi)\";\n+    }\n+\n+    public static String[] addExecutionIfMissing(String[] args) {\n+        if (Arrays.stream(args).noneMatch(Presets::remoteRelatedOption)) {\n+            List<String> augmentedArgs = new ArrayList<>();\n+\n+            augmentedArgs.add(\"--execution\");\n+            augmentedArgs.add(Presets.TEST_DEFAULT_EXECUTION);\n+            augmentedArgs.addAll(List.of(args));\n+\n+            return augmentedArgs.toArray(s -> new String[s]);\n+        }\n+\n+        return args;\n+    }\n+\n+    private static boolean remoteRelatedOption(String option) {\n+        return \"--execution\".equals(option) ||\n+               \"--add-modules\".equals(option) ||\n+               option.startsWith(\"-R\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/Presets.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -296,1 +296,1 @@\n-        testRawRun(locale, args);\n+        testRawRun(locale, Presets.addExecutionIfMissing(args));\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                    .start(args);\n+                    .start(Presets.addExecutionIfMissing(args));\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-        test(\n+        test(new String[] {\"--execution\", Presets.TEST_STANDARD_EXECUTION},\n","filename":"test\/langtools\/jdk\/jshell\/ToolReloadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,2 @@\n-                        .run(\"--no-startup\");\n+                        .run(\"--no-startup\",\n+                             \"--execution\", Presets.TEST_DEFAULT_EXECUTION);\n","filename":"test\/langtools\/jdk\/jshell\/UITesting.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}