{"files":[{"patch":"@@ -342,1 +342,1 @@\n-    private static native boolean initXrandrExtension();\n+    private static native boolean initXrandrExtension(boolean useOldConfigDisplayMode);\n@@ -359,2 +359,3 @@\n-            xrandrExtSupported =\n-                Boolean.valueOf(initXrandrExtension());\n+            boolean useOldConfigDisplayMode =\n+                    Boolean.getBoolean(\"awt.x11useOldConfigDisplayMode\");\n+            xrandrExtSupported = initXrandrExtension(useOldConfigDisplayMode);\n@@ -362,1 +363,1 @@\n-        return xrandrExtSupported.booleanValue();\n+        return xrandrExtSupported;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -67,0 +67,7 @@\n+#define MAX_DISPLAY_MODES 256\n+typedef struct {\n+    unsigned int width;\n+    unsigned int height;\n+    jint refresh;\n+} DisplayMode;\n+\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/awt_GraphicsEnv.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+#include <math.h>\n@@ -79,0 +80,2 @@\n+static Bool useNewConfigDisplayMode = True;\n+\n@@ -1503,0 +1506,14 @@\n+typedef void (*XRRSetScreenSizeType)(Display *dpy, Window window,\n+                                     int width, int height,\n+                                     int mmWidth, int mmHeight);\n+\n+typedef Status (*XRRSetCrtcConfigType)(Display *dpy,\n+                                       XRRScreenResources *resources,\n+                                       RRCrtc crtc,\n+                                       Time timestamp,\n+                                       int x, int y,\n+                                       RRMode mode,\n+                                       Rotation rotation,\n+                                       RROutput *outputs,\n+                                       int noutputs);\n+\n@@ -1518,0 +1535,2 @@\n+static XRRSetScreenSizeType              awt_XRRSetScreenSize;\n+static XRRSetCrtcConfigType              awt_XRRSetCrtcConfig;\n@@ -1595,0 +1614,2 @@\n+    LOAD_XRANDR_FUNC(XRRSetScreenSize);\n+    LOAD_XRANDR_FUNC(XRRSetCrtcConfig);\n@@ -1695,1 +1716,1 @@\n- * Signature: ()Z\n+ * Signature: (Z)Z\n@@ -1699,1 +1720,1 @@\n-    (JNIEnv *env, jclass x11gd)\n+    (JNIEnv *env, jclass x11gd, jboolean useOldConfigDisplayMode)\n@@ -1715,0 +1736,2 @@\n+    useNewConfigDisplayMode = !useOldConfigDisplayMode;\n+\n@@ -1719,0 +1742,293 @@\n+\/\/ ---------------------------------------------------\n+\/\/ display mode change via XRRSetCrtcConfig\n+\/\/ ---------------------------------------------------\n+#if !defined(NO_XRANDR)\n+static jint refreshRateFromModeInfo(const XRRModeInfo *modeInfo) {\n+    if (!modeInfo->hTotal || !modeInfo->vTotal) {\n+        return 0;\n+    }\n+\n+    double vTotal = modeInfo->vTotal;\n+\n+    if (modeInfo->modeFlags & RR_Interlace) {\n+        vTotal \/= 2;\n+    }\n+\n+    if (modeInfo->modeFlags & RR_DoubleScan) {\n+        vTotal *= 2;\n+    }\n+\n+    return (jint) round((double) modeInfo->dotClock \/ (vTotal * (double) modeInfo->hTotal));\n+}\n+\n+static inline Bool isLandscapeOrientation(XRRCrtcInfo* info) {\n+    if (!info) {\n+        return True;\n+    }\n+    return info->rotation == RR_Rotate_0 || info->rotation == RR_Rotate_180;\n+}\n+\n+static Bool xrrGetInfoForScreen(XRRScreenResources *res,\n+                                int screen,\n+                                XRRCrtcInfo **outCrtcInfo,\n+                                XRROutputInfo **outOutputInfo) {\n+    if (!res) {\n+        return False;\n+    }\n+\n+    int screenX = 0;\n+    int screenY = 0;\n+\n+    if (usingXinerama) {\n+        int nscreens = 0;\n+        XineramaScreenInfo *screens = XineramaQueryScreens(awt_display, &nscreens);\n+\n+        if (!screens) {\n+            return False;\n+        }\n+\n+        if (screen >= nscreens) {\n+            XFree(screens);\n+            return False;\n+        }\n+\n+        XineramaScreenInfo xScreenInfo = screens[screen];\n+\n+        screenX = xScreenInfo.x_org;\n+        screenY= xScreenInfo.y_org;\n+\n+        XFree(screens);\n+    }\n+\n+    for (int i = 0; i < res->noutput; ++i) {\n+        XRROutputInfo *output = awt_XRRGetOutputInfo(awt_display, res, res->outputs[i]);\n+        if (!output) {\n+            continue;\n+        }\n+        if (output->connection == RR_Connected && output->crtc) {\n+            \/\/ output is connected and has an active mode\n+            XRRCrtcInfo *crtcInfo = awt_XRRGetCrtcInfo(awt_display, res, output->crtc);\n+            if (crtcInfo) {\n+                if (crtcInfo->mode != None\n+                    && crtcInfo->x == screenX\n+                    && crtcInfo->y == screenY) {\n+                    if (outCrtcInfo) {\n+                        *outCrtcInfo = crtcInfo;\n+                    } else {\n+                        awt_XRRFreeCrtcInfo(crtcInfo);\n+                    }\n+                    if (outOutputInfo) {\n+                        *outOutputInfo = output;\n+                    } else {\n+                        awt_XRRFreeOutputInfo(output);\n+                    }\n+                    return True;\n+                }\n+                awt_XRRFreeCrtcInfo(crtcInfo);\n+            }\n+        }\n+        awt_XRRFreeOutputInfo(output);\n+    }\n+\n+    return False;\n+}\n+\n+static jobject xrrGetCurrentDisplayMode(JNIEnv* env, int screen) {\n+    XRRScreenResources *res = awt_XRRGetScreenResources(awt_display, DefaultRootWindow(awt_display));\n+    if (!res) {\n+        return NULL;\n+    }\n+\n+    XRRCrtcInfo* currentCrtcInfo = NULL;\n+    if (!xrrGetInfoForScreen(res, screen, &currentCrtcInfo, NULL)) {\n+        goto cleanup;\n+    }\n+\n+    if (!currentCrtcInfo || currentCrtcInfo->mode == None) {\n+        goto cleanup;\n+    }\n+\n+    for (int i = 0; i < res->nmode; ++i) {\n+        if (res->modes[i].id == currentCrtcInfo->mode) {\n+            XRRModeInfo mode = res->modes[i];\n+            DisplayMode dm = {\n+                    mode.width,\n+                    mode.height,\n+                    refreshRateFromModeInfo(&mode)\n+            };\n+\n+            Bool isLandscape =  isLandscapeOrientation(currentCrtcInfo);\n+\n+            jint resultWidth = isLandscape ? (jint)  dm.width : (jint) dm.height;\n+            jint resultHeight = isLandscape ? (jint)  dm.height : (jint) dm.width;\n+\n+            jobject displayMode = X11GD_CreateDisplayMode(env,\n+                                                          resultWidth,\n+                                                          resultHeight,\n+                                                          BIT_DEPTH_MULTI,\n+                                                          dm.refresh);\n+\n+            awt_XRRFreeCrtcInfo(currentCrtcInfo);\n+            awt_XRRFreeScreenResources(res);\n+\n+            return displayMode;\n+        }\n+    }\n+\n+    cleanup:\n+        if (currentCrtcInfo) {\n+            awt_XRRFreeCrtcInfo(currentCrtcInfo);\n+        }\n+        awt_XRRFreeScreenResources(res);\n+    return NULL;\n+}\n+\n+static Bool isUniqueDisplayMode(DisplayMode seen[], int count, unsigned int width, unsigned int height, int refresh) {\n+    for (int i = 0; i < count; ++i) {\n+        if (seen[i].width == width &&\n+            seen[i].height == height &&\n+            seen[i].refresh == refresh) {\n+            return False;\n+        }\n+    }\n+    return True;\n+}\n+\n+static void xrrEnumDisplayModes(JNIEnv *env, jobject arrayList, jint screen) {\n+    XRRScreenResources *res = awt_XRRGetScreenResources(awt_display, DefaultRootWindow(awt_display));\n+    if (!res) {\n+        return;\n+    }\n+\n+    XRRCrtcInfo *crtcInfo = NULL;\n+    XRROutputInfo *outputInfo = NULL;\n+    if (!xrrGetInfoForScreen(res, screen, &crtcInfo, &outputInfo)) {\n+        goto cleanup;\n+    }\n+\n+    DisplayMode seenModes[MAX_DISPLAY_MODES];\n+    int seenCount = 0;\n+\n+    Bool isLandscape = isLandscapeOrientation(crtcInfo);\n+\n+    for (int i = 0; i < outputInfo->nmode; ++i) {\n+        RRMode mode_id = outputInfo->modes[i];\n+\n+        for (int j = 0; j < res->nmode; ++j) {\n+            if (res->modes[j].id == mode_id) {\n+                XRRModeInfo mode = res->modes[j];\n+                jint rr = refreshRateFromModeInfo(&mode);\n+\n+                \/\/ The refresh rate is stored as an integer in Java, so we need to round the double value.\n+                \/\/ Because of this rounding, duplicate modes may appear. We only keep the first one encountered.\n+                if (isUniqueDisplayMode(seenModes, seenCount, mode.width, mode.height, rr)) {\n+                    seenModes[seenCount++] = (DisplayMode) {\n+                            mode.width,\n+                            mode.height,\n+                            rr\n+                    };\n+                    X11GD_AddDisplayMode(env, arrayList,\n+                                         isLandscape ? (jint) mode.width : (jint) mode.height,\n+                                         isLandscape ? (jint) mode.height : (jint) mode.width,\n+                                         BIT_DEPTH_MULTI,\n+                                         rr);\n+                    if ((*env)->ExceptionCheck(env)) {\n+                        goto cleanup;\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    cleanup:\n+        if (outputInfo) {\n+            awt_XRRFreeOutputInfo(outputInfo);\n+        }\n+        if (crtcInfo) {\n+            awt_XRRFreeCrtcInfo(crtcInfo);\n+        }\n+        awt_XRRFreeScreenResources(res);\n+}\n+\n+static void xrrChangeDisplayMode(jint screen, jint width, jint height, jint refreshRate) {\n+    Drawable root = DefaultRootWindow(awt_display);\n+\n+\n+    XRRScreenResources *res = awt_XRRGetScreenResources(awt_display, root);\n+    if (!res) {\n+        return;\n+    }\n+\n+    XRRCrtcInfo *crtcInfo = NULL;\n+    XRROutputInfo *outputInfo = NULL;\n+\n+    if (!xrrGetInfoForScreen(res, screen, &crtcInfo, &outputInfo)) {\n+        goto cleanup;\n+    }\n+\n+    RRMode new_mode = None;\n+\n+    Bool isLandscape = isLandscapeOrientation(crtcInfo);\n+\n+    for (int i = 0; i < res->nmode; ++i) {\n+        XRRModeInfo mode = res->modes[i];\n+        jint rr = refreshRateFromModeInfo(&mode);\n+\n+        Bool matchW = (isLandscape ? mode.width : mode.height) == (unsigned int) width;\n+        Bool matchH = (isLandscape ? mode.height : mode.width) == (unsigned int) height;\n+\n+        if (matchW && matchH && rr == refreshRate) {\n+            for (int j = 0; j < outputInfo->nmode; ++j) {\n+                if (mode.id == outputInfo->modes[j]) {\n+                    \/\/ belongs to our output\n+                    new_mode = mode.id;\n+                    break;\n+                }\n+            }\n+            if (new_mode != None) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (new_mode == None) {\n+        goto cleanup;\n+    }\n+\n+    awt_XRRSetCrtcConfig (awt_display, res, outputInfo->crtc, CurrentTime,\n+                          0, 0, None, RR_Rotate_0, NULL, 0);\n+\n+    int resultMmWidth = outputInfo->mm_width\n+                        ? (int) outputInfo->mm_width\n+                        : DisplayWidthMM(awt_display, DefaultScreen(awt_display));\n+\n+    int resultMmHeight = outputInfo->mm_height\n+                         ? (int) outputInfo->mm_height\n+                         : XDisplayHeightMM(awt_display, DefaultScreen(awt_display));\n+\n+    awt_XRRSetScreenSize(awt_display, root,\n+                         width, height,\n+                         resultMmWidth, resultMmHeight);\n+\n+    Status s = awt_XRRSetCrtcConfig(awt_display, res, outputInfo->crtc,\n+                         CurrentTime,\n+                         crtcInfo->x, crtcInfo->y,\n+                         new_mode, crtcInfo->rotation,\n+                         crtcInfo->outputs, crtcInfo->noutput);\n+\n+    cleanup:\n+        if (crtcInfo) {\n+            awt_XRRFreeCrtcInfo(crtcInfo);\n+        }\n+        if (outputInfo) {\n+            awt_XRRFreeOutputInfo(outputInfo);\n+        }\n+        awt_XRRFreeScreenResources(res);\n+}\n+#endif\n+\n+\/\/ ---------------------------------------------------\n+\/\/ display mode change via XRRSetCrtcConfig\n+\/\/ ---------------------------------------------------\n+\n@@ -1731,1 +2047,0 @@\n-    XRRScreenConfiguration *config;\n@@ -1734,0 +2049,9 @@\n+    if (useNewConfigDisplayMode) {\n+        AWT_LOCK();\n+        displayMode = xrrGetCurrentDisplayMode(env, screen);\n+        AWT_FLUSH_UNLOCK();\n+        return displayMode;\n+    }\n+\n+    XRRScreenConfiguration *config;\n+\n@@ -1784,1 +2108,6 @@\n-    AWT_LOCK();\n+    if (useNewConfigDisplayMode) {\n+        AWT_LOCK();\n+        xrrEnumDisplayModes(env, arrayList, screen);\n+        AWT_FLUSH_UNLOCK();\n+        return;\n+    }\n@@ -1834,0 +2163,9 @@\n+    if (useNewConfigDisplayMode) {\n+        AWT_LOCK();\n+        XGrabServer(awt_display);\n+        xrrChangeDisplayMode(screen, width, height, refreshRate);\n+        XUngrabServer(awt_display);\n+        AWT_FLUSH_UNLOCK();\n+        return;\n+    }\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":342,"deletions":4,"binary":false,"changes":346,"status":"modified"}]}