{"files":[{"patch":"@@ -285,0 +285,3 @@\n+        Rectangle bounds = table.getBounds();\n+        bounds.x = bounds.y = 0;\n+\n@@ -306,1 +309,1 @@\n-            if (!((table.getBounds()).intersects(clip))) {\n+            if (!(bounds.intersects(clip))) {\n@@ -309,0 +312,1 @@\n+\n@@ -398,2 +402,0 @@\n-        Rectangle bounds = table.getBounds();\n-        bounds.x = bounds.y = 0;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TablePrintable.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8257810\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary  Verifies if all pages are printed if scrollRectToVisible is set.\n+ * @run main\/manual PrintAllPagesTest\n+ *\/\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PrinterException;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableModel;\n+import javax.swing.WindowConstants;\n+\n+public class PrintAllPagesTest {\n+    static JFrame f;\n+    static JTable table;\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+         Note: You must have a printer installed for this test.\n+         If printer is not available, the test passes automatically.\n+\n+         A JTable with 1000 rows and a print dialog will be shown.\n+         If only 1 page is printed,\n+         then press fail else press pass.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        if (pj.getPrintService() == null) {\n+            System.out.println(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(INSTRUCTIONS);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            printAllPagesTest();\n+            \/\/ add the test frame to dispose\n+            PassFailJFrame.addTestWindow(f);\n+\n+            \/\/ Arrange the test instruction frame and test frame side by side\n+            PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n+            f.setVisible(true);\n+\n+            boolean ret;\n+            try {\n+                ret = table.print();\n+            } catch (PrinterException ex) {\n+                ret = false;\n+            }\n+            if (!ret) {\n+                PassFailJFrame.forceFail(\"Printing cancelled\/failed\");\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+\n+    private static void printAllPagesTest() {\n+        TableModel dataModel = new AbstractTableModel() {\n+            @Override\n+            public int getColumnCount() {\n+                return 10;\n+            }\n+\n+            @Override\n+            public int getRowCount() {\n+                return 1000;\n+            }\n+\n+            @Override\n+            public Object getValueAt(int row, int col) {\n+                return Integer.valueOf(0 == col ? row + 1 : row * col);\n+            }\n+        };\n+        table = new JTable(dataModel);\n+        JScrollPane scrollpane = new JScrollPane(table);\n+        table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1,\n+                0, false));\n+\n+        f = new JFrame(\"Table test\");\n+        f.add(scrollpane);\n+        f.setSize(500, 400);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/PrintAllPagesTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}