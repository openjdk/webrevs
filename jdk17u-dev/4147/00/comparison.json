{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.font.GlyphVector;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4255072\n+ * @summary Display the outline of a GlyphVector that has overlapping 'O' characters in it.\n+ *          The places where the strokes of the characters cross should be filled in.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestOutline\n+ *\/\n+\n+public final class TestOutline extends JPanel {\n+    Shape outline;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Two overlapping 'O' characters should appear. Pass the test if\n+                the places where the strokes of the characters cross is filled in.\n+                Fail it if these places are not filled in.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestOutline Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .splitUI(TestOutline::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 250);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, getWidth(), getHeight());\n+\n+        if (outline == null) {\n+            outline = createLayout(g2d);\n+        }\n+\n+        g2d.setColor(Color.BLACK);\n+        g2d.fill(outline);\n+    }\n+\n+    private Shape createLayout(Graphics2D g2d) {\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 144);\n+        GlyphVector gv = font.createGlyphVector(g2d.getFontRenderContext(), \"OO\");\n+        gv.performDefaultLayout();\n+        Point2D pt = gv.getGlyphPosition(1);\n+        double delta = -pt.getX() \/ 2.0;\n+        pt.setLocation(pt.getX() + delta, pt.getY());\n+        gv.setGlyphPosition(1, pt);\n+\n+        pt = gv.getGlyphPosition(2);\n+        pt.setLocation(pt.getX() + delta, pt.getY());\n+        gv.setGlyphPosition(2, pt);\n+\n+        Rectangle2D bounds = gv.getLogicalBounds();\n+        Rectangle d = getBounds();\n+        float x = (float) ((d.width - bounds.getWidth()) \/ 2 + bounds.getX());\n+        float y = (float) ((d.height - bounds.getHeight()) \/ 2 - bounds.getY());\n+        System.out.println(\"loc: \" + x + \", \" + y);\n+        return gv.getOutline(x, y);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/TestOutline.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.NumericShaper;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+import java.util.HashMap;\n+\n+\/*\n+ * @test\n+ * @bug 4210199\n+ * @summary Draw a string with mixed ASCII digits and different scripts, applying\n+ *          different kinds of numeric shapers. Verify that the proper digits are affected.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ShaperTest\n+ *\/\n+\n+public class ShaperTest extends Panel {\n+    private static final String fontName = Font.DIALOG;\n+    private final TextLayout[][] layouts;\n+    private final String[] titles;\n+    private static final String text =\n+            \"-123 (English) 456.00 (Arabic) \\u0641\\u0642\\u0643 -789 (Thai) \\u0e01\\u0e33 01.23\";\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                A line of text containing mixed numeric and other text is drawn four times\n+                (Depending on the font\/platform, some of the other text may not be visible).\n+\n+                There are four runs of digits, '-123' at the front of the text, '456.00' after\n+                English text, '-789' after Arabic text, and '01.23' after Thai text.\n+\n+                In the first line, all four runs of digits should be present as ASCII digits.\n+\n+                In the second line, all four runs of digits should be Arabic digits\n+                (they may not be visible if the font does not support Arabic).\n+\n+                In the third line, the initial run of digits (-123) and the one following the\n+                Arabic text (-789) should be Arabic, while the others should be ASCII.\n+\n+                In the fourth line, only the digits following the Arabic text (-789) should be Arabic,\n+                and the others should be ASCII.\n+\n+                Pass the test if this is true.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"ShaperTest Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(ShaperTest::createUI)\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"ShaperTest Test UI\");\n+        frame.add(new ShaperTest());\n+        frame.setSize(600, 400);\n+        return frame;\n+    }\n+\n+    void dumpChars(char[] chars) {\n+        for (int i = 0; i < chars.length; ++i) {\n+            char c = chars[i];\n+            if (c < 0x7f) {\n+                System.out.print(c);\n+            } else {\n+                String n = Integer.toHexString(c);\n+                n = \"0000\".substring(n.length()) + n;\n+                System.out.print(\"0x\" + n);\n+            }\n+        }\n+    }\n+\n+    private ShaperTest() {\n+        setBackground(Color.WHITE);\n+        setForeground(Color.BLACK);\n+\n+        Font textfont = new Font(fontName, Font.PLAIN, 12);\n+        PassFailJFrame.log(\"asked for: \" + fontName + \" and got: \" + textfont.getFontName());\n+        setFont(textfont);\n+\n+        Font font = new Font(fontName, Font.PLAIN, 18);\n+        PassFailJFrame.log(\"asked for: \" + fontName + \" and got: \" + font.getFontName());\n+\n+        FontRenderContext frc = new FontRenderContext(null, false, false);\n+\n+        layouts = new TextLayout[5][2];\n+\n+        HashMap<AttributedCharacterIterator.Attribute, Object> map = new HashMap<>();\n+        map.put(TextAttribute.FONT, font);\n+        layouts[0][0] = new TextLayout(text, map, frc);\n+        AttributedCharacterIterator iter = new AttributedString(text, map).getIterator();\n+        layouts[0][1] = new LineBreakMeasurer(iter, frc).nextLayout(Float.MAX_VALUE);\n+\n+        NumericShaper arabic = NumericShaper.getShaper(NumericShaper.ARABIC);\n+        map.put(TextAttribute.NUMERIC_SHAPING, arabic);\n+        layouts[1][0] = new TextLayout(text, map, frc);\n+        iter = new AttributedString(text, map).getIterator();\n+        layouts[1][1] = new LineBreakMeasurer(iter, frc).nextLayout(Float.MAX_VALUE);\n+\n+        NumericShaper contextualArabic = NumericShaper.getContextualShaper(NumericShaper.ARABIC, NumericShaper.ARABIC);\n+        map.put(TextAttribute.NUMERIC_SHAPING, contextualArabic);\n+        layouts[2][0] = new TextLayout(text, map, frc);\n+        iter = new AttributedString(text, map).getIterator();\n+        layouts[2][1] = new LineBreakMeasurer(iter, frc).nextLayout(Float.MAX_VALUE);\n+\n+        NumericShaper contextualArabicASCII = NumericShaper.getContextualShaper(NumericShaper.ARABIC);\n+        map.put(TextAttribute.NUMERIC_SHAPING, contextualArabicASCII);\n+        layouts[3][0] = new TextLayout(text, map, frc);\n+        iter = new AttributedString(text, map).getIterator();\n+        layouts[3][1] = new LineBreakMeasurer(iter, frc).nextLayout(Float.MAX_VALUE);\n+\n+        NumericShaper contextualAll = NumericShaper.getContextualShaper(NumericShaper.ALL_RANGES);\n+        map.put(TextAttribute.NUMERIC_SHAPING, contextualAll);\n+        layouts[4][0] = new TextLayout(text, map, frc);\n+        iter = new AttributedString(text, map).getIterator();\n+        layouts[4][1] = new LineBreakMeasurer(iter, frc).nextLayout(Float.MAX_VALUE);\n+\n+        titles = new String[]{\n+                \"plain -- all digits ASCII\",\n+                \"Arabic -- all digits Arabic\",\n+                \"contextual Arabic default Arabic -- only leading digits and digits following Arabic text are Arabic\",\n+                \"contextual Arabic default ASCII -- only digits following Arabic text are Arabic\",\n+                \"contextual all default ASCII -- leading digits english, others correspond to context\"\n+        };\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        float x = 5;\n+        float y = 5;\n+\n+        for (int i = 0; i < layouts.length; ++i) {\n+            y += 18;\n+            g2d.drawString(titles[i], x, y);\n+            y += 4;\n+\n+            for (int j = 0; j < 2; ++j) {\n+                y += layouts[i][j].getAscent();\n+                layouts[i][j].draw(g2d, x, y);\n+                y += layouts[i][j].getDescent() + layouts[i][j].getLeading();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/NumericShaper\/ShaperTest.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.RenderingHints;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 6320502\n+ * @summary Display laid out text which substitutes invisible glyphs correctly.\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @run main\/manual TestGASPHint\n+ *\/\n+\n+public class TestGASPHint extends JPanel {\n+    private static final String text = \"\\u0905\\u0901\\u0917\\u094d\\u0930\\u0947\\u091c\\u093c\\u0940\";\n+    private static final Font font = getPhysicalFontForText(text, Font.PLAIN, 36);\n+\n+    public static void main(String[] args) throws Exception {\n+        if (font == null) {\n+            throw new jtreg.SkippedException(\"No Devanagari font found. Test Skipped\");\n+        }\n+\n+        final String INSTRUCTIONS = \"\"\"\n+                A short piece of Devanagari text should appear without any\n+                artifacts. In particular there should be no \"empty rectangles\"\n+                representing the missing glyph.\n+\n+                If the above condition is true, press Pass, else Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestGASPHint Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(32)\n+                .splitUI(TestGASPHint::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 200);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, getWidth(), getHeight());\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                             RenderingHints.VALUE_TEXT_ANTIALIAS_GASP);\n+\n+        g2d.setFont(font);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(text, 10, 50);\n+    }\n+\n+    \/*\n+     * Searches the available system fonts for a font which can display all the\n+     * glyphs in the input text correctly. Returns null, if not found.\n+     *\/\n+    private static Font getPhysicalFontForText(String text, int style, int size) {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        String[] names = ge.getAvailableFontFamilyNames();\n+\n+        for (String n : names) {\n+            switch (n.toLowerCase()) {\n+                case \"dialog\":\n+                case \"dialoginput\":\n+                case \"serif\":\n+                case \"sansserif\":\n+                case \"monospaced\":\n+                    break;\n+                default:\n+                    Font f = new Font(n, style, size);\n+                    if (f.canDisplayUpTo(text) == -1) {\n+                        return f;\n+                    }\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestGASPHint.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedString;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4221422\n+ * @summary Display several TextLayouts with various selections.\n+ *          All the selections should be between non-italic and italic text,\n+ *          and the top and bottom of the selection region should be horizontal.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestSelection\n+ *\/\n+\n+public final class TestSelection extends JPanel {\n+    private static final float MARGIN = 20;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Several TextLayouts are displayed along with selections.\n+                The selection regions should have horizontal top and bottom segments.\n+\n+                If above condition is true, press Pass else Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestSelection Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .splitUI(TestSelection::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 300);\n+    }\n+\n+    private float drawSelectionAndLayout(Graphics2D g2d,\n+                                         TextLayout layout,\n+                                         float y,\n+                                         int selStart,\n+                                         int selLimit) {\n+        Color selectionColor = Color.PINK;\n+        Color textColor = Color.BLACK;\n+\n+        y += layout.getAscent();\n+\n+        g2d.translate(MARGIN, y);\n+        Shape hl = layout.getLogicalHighlightShape(selStart, selLimit);\n+        g2d.setColor(selectionColor);\n+        g2d.fill(hl);\n+        g2d.setColor(textColor);\n+        layout.draw(g2d, 0, 0);\n+        g2d.translate(-MARGIN, -y);\n+\n+        y += layout.getDescent() + layout.getLeading() + 10;\n+        return y;\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        String text = \"Hello world\";\n+\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, getWidth(), getHeight());\n+\n+        AttributedString attrStr = new AttributedString(text);\n+\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+\n+        final int midPoint = text.indexOf('w');\n+        final int selStart = midPoint \/ 2;\n+        final int selLimit = text.length() - selStart;\n+        final Font italic = new Font(Font.SANS_SERIF, Font.ITALIC, 24);\n+\n+        float y = MARGIN;\n+\n+        attrStr.addAttribute(TextAttribute.FONT, italic, 0, midPoint);\n+        TextLayout layout = new TextLayout(attrStr.getIterator(), frc);\n+\n+        y = drawSelectionAndLayout(g2d, layout, y, selStart - 1, selLimit);\n+        y = drawSelectionAndLayout(g2d, layout, y, selStart, selLimit);\n+        y = drawSelectionAndLayout(g2d, layout, y, selStart + 1, selLimit);\n+\n+        attrStr = new AttributedString(text);\n+        attrStr.addAttribute(TextAttribute.FONT,\n+                             italic, midPoint, text.length());\n+        layout = new TextLayout(attrStr.getIterator(), frc);\n+\n+        y = drawSelectionAndLayout(g2d, layout, y, selStart, selLimit);\n+\n+        attrStr = new AttributedString(text);\n+        attrStr.addAttribute(TextAttribute.FONT, italic, 0, midPoint);\n+        attrStr.addAttribute(TextAttribute.SIZE, 48f, midPoint, text.length());\n+        layout = new TextLayout(attrStr.getIterator(), frc);\n+\n+        y = drawSelectionAndLayout(g2d, layout, y, selStart, selLimit);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestSelection.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 6426360\n+ * @summary Display a TextLayout with strikethrough at a number of\n+ *          different offsets relative to the pixel grid.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestStrikethrough\n+ *\/\n+\n+public class TestStrikethrough extends JPanel {\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Display text with strikethrough at a number of different positions.\n+\n+                Press Fail if any line is missing a strikethrough else press Pass.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestStrikethrough Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .splitUI(TestStrikethrough::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 120);\n+    }\n+\n+    @Override\n+    public void paint(Graphics aContext) {\n+        Graphics2D g2d = (Graphics2D) aContext;\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, getWidth(), getHeight());\n+\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 9);\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+        String str = \"Where is the strikethrough?\";\n+        AttributedString as = new AttributedString(str);\n+        as.addAttribute(TextAttribute.FONT, font);\n+        as.addAttribute(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON);\n+        AttributedCharacterIterator aci = as.getIterator();\n+        TextLayout tl = new TextLayout(aci, frc);\n+        float delta = (float) (Math.ceil(tl.getAscent() + tl.getDescent() + tl.getLeading()) + .1);\n+        float y = delta - .1f;\n+        g2d.setColor(Color.BLACK);\n+        for (int i = 0; i < 11; ++i) {\n+            tl.draw(g2d, 10f, y);\n+            y += delta;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestStrikethrough.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}