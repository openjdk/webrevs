{"files":[{"patch":"@@ -0,0 +1,769 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @requires (os.family != \"linux\")\n+ * @bug 4119609 4149812 4136116 4171960 4170095 4294016 4343272\n+ * @summary  This test verifies that java.awt objects are being garbage\n+ * collected correctly. That is, it ensures that unneeded\n+ * references (such as JNI global refs or refs in static arrays)\n+ * do not remain after the object is disposed.\n+ * @run main\/othervm ComponentLeakTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.CardLayout;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxGroup;\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.LayoutManager;\n+import java.awt.List;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+public class ComponentLeakTest {\n+\n+    public static void main(String[] args) {\n+        final int iter = 5;\n+\n+        for(int count = 0; count < iter; count++) {\n+            MainFrame f = new MainFrame();\n+            MainWindow w = new MainWindow(f);\n+            MainDialog d = new MainDialog(f);\n+            TestFileDialog fd = new TestFileDialog(f, \"TestFileDialog\");\n+            fd.addNotify(); \/\/ fd.show() hangs\n+\n+            fd.dispose();\n+            d.dispose();\n+            w.dispose();\n+            f.dispose();\n+        }\n+\n+        \/\/ Test layout managers\n+        Frame border = new Frame();\n+        border.setLayout(new BorderLayout());\n+        Frame card = new Frame();\n+        card.setLayout(new CardLayout());\n+        Frame flow = new Frame();\n+        flow.setLayout(new FlowLayout());\n+        Frame gridBag = new Frame();\n+        gridBag.setLayout(new GridBagLayout());\n+        Frame grid = new Frame();\n+        grid.setLayout(new GridLayout(1, 2));\n+\n+        for (int count = 0; count < iter; count++) {\n+            border.add(new BorderTestButton(\"BorderTest\"),\n+                    BorderLayout.WEST);\n+            border.add(new BorderTestButton(\"BorderTest\"),\n+                    BorderLayout.EAST);\n+            card.add(new CardTestButton(\"CardTest\"), \"card0\");\n+            card.add(new CardTestButton(\"CardTest\"), \"card1\");\n+            flow.add(new FlowTestButton());\n+            flow.add(new FlowTestButton());\n+            gridBag.add(new GridBagTestButton(), new GridBagConstraints());\n+            gridBag.add(new GridBagTestButton(), new GridBagConstraints());\n+            grid.add(new GridTestButton());\n+            grid.add(new GridTestButton());\n+\n+            border.removeAll();\n+            card.removeAll();\n+            flow.removeAll();\n+            gridBag.removeAll();\n+            grid.removeAll();\n+        }\n+\n+        gc(5);\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException ie) {\n+        }\n+\n+        freeReferences();\n+        reportLeaks();\n+        System.err.println(\"Test passed.\");\n+    }\n+\n+    public static void initWindow(Window w) {\n+        w.setSize(600, 400);\n+        w.setLayout(new FlowLayout());\n+\n+        \/\/ peered components\n+        w.add(new TestButton(\"Button\"));\n+        w.add(new TestCanvas());\n+        w.add(new TestCheckbox(\"Checkbox\", true));\n+        TestChoice choice = new TestChoice();\n+        choice.add(\"Choice 1\");\n+        choice.add(\"Choice Two\");\n+        w.add(choice);\n+        w.add(new TestLabel(\"Label\"));\n+        TestList list = new TestList();\n+        list.add(\"List 1\");\n+        list.add(\"List Two\");\n+        w.add(list);\n+        w.add(new TestScrollbar(Scrollbar.VERTICAL));\n+        w.add(new TestScrollbar(Scrollbar.HORIZONTAL));\n+        TestScrollPane scrollpane = new TestScrollPane();\n+        scrollpane.add(new TestButton(\"Button in a scrollpane\"));\n+        w.add(scrollpane);\n+        w.add(new TestTextArea(\"TextArea\", 3, 30));\n+        w.add(new TestTextField(\"TextField\"));\n+\n+        \/\/ nested components\n+        TestPanel panel1 = new TestPanel();\n+        panel1.setLayout(new FlowLayout());\n+        panel1.setBackground(Color.red);\n+        w.add(panel1);\n+\n+        panel1.add(new TestButton(\"level 2\"));\n+\n+        Panel panel2 = new Panel();\n+        panel2.setLayout(new FlowLayout());\n+        panel2.setBackground(Color.green);\n+        panel1.add(panel2);\n+\n+        panel2.add(new TestButton(\"level 3\"));\n+\n+        w.add(new TestLightweight(\"Lightweight\"));\n+    }\n+\n+    private static ReferenceQueue queue = new ReferenceQueue();\n+    private static Map<Reference, String> refs = new HashMap<Reference, String>();\n+\n+    public static void register(Object obj) {\n+        PhantomReference ref = new PhantomReference(obj, queue);\n+        refs.put(ref, obj.getClass().getName());\n+    }\n+\n+    private static void gc() {\n+        System.gc();\n+        try {\n+            Thread.sleep(100);\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Test was interrupted\");\n+        }\n+    }\n+\n+    private static void gc(int num) {\n+        for (; num > 0; num--) {\n+            gc();\n+        }\n+    }\n+\n+    public static void freeReferences() {\n+        System.err.println(\"Total references: \" + refs.size());\n+        boolean wasFreed = false;\n+        do {\n+            Object[] arr = new Object[2000];\n+            gc(5);\n+            Reference ref = null;\n+            wasFreed = false;\n+            while ((ref = queue.poll()) != null) {\n+                refs.remove(ref);\n+                wasFreed = true;\n+                gc();\n+            }\n+        } while (wasFreed);\n+    }\n+\n+    public static void reportLeaks() {\n+        for (Reference ref : refs.keySet()) {\n+            System.err.println(\"Leaked \" + refs.get(ref));\n+        }\n+\n+        if (refs.size() > 0) {\n+            throw new RuntimeException(\"Some references remained: \" + refs.size());\n+        }\n+    }\n+}\n+\n+class TestFrame extends Frame {\n+    public TestFrame() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestFrame(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestWindow extends Window {\n+    public TestWindow(Frame owner) {\n+        super(owner);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestWindow(Window owner) {\n+        super(owner);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestDialogL extends Dialog {\n+    public TestDialogL(Frame owner) {\n+        super(owner);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Frame owner, boolean modal) {\n+        super(owner, modal);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Frame owner, String title) {\n+        super(owner, title);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Frame owner, String title, boolean modal) {\n+        super(owner, title, modal);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Dialog owner) {\n+        super(owner);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Dialog owner, String title) {\n+        super(owner, title);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestDialogL(Dialog owner, String title, boolean modal) {\n+        super(owner, title, modal);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestFileDialog extends FileDialog {\n+    public TestFileDialog(Frame parent) {\n+        super(parent);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestFileDialog(Frame parent, String title) {\n+        super(parent, title);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestFileDialog(Frame parent, String title, int mode) {\n+        super(parent, title, mode);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestButton extends Button {\n+    public TestButton() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestCanvas extends Canvas {\n+    int width = 100;\n+    int height = 100;\n+\n+    public TestCanvas() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestCanvas(GraphicsConfiguration config) {\n+        super(config);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(Color.blue);\n+        g.fillRoundRect(10, 10, 50, 50, 15, 30);\n+        g.setColor(Color.red);\n+        g.fillOval(70, 70, 25, 25);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(width, height);\n+    }\n+}\n+\n+class TestCheckbox extends Checkbox {\n+    public TestCheckbox() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestCheckbox(String label) {\n+        super(label);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestCheckbox(String label, boolean state) {\n+        super(label, state);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestCheckbox(String label, boolean state, CheckboxGroup group) {\n+        super(label, state, group);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestCheckbox(String label, CheckboxGroup group, boolean state) {\n+        super(label, group, state);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestChoice extends Choice {\n+    public TestChoice() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestLabel extends Label {\n+    public TestLabel() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestLabel(String text) {\n+        super(text);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestLabel(String text, int align) {\n+        super(text, align);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestList extends List {\n+    public TestList() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestList(int rows) {\n+        super(rows);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestList(int rows, boolean multipleMode) {\n+        super(rows, multipleMode);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestScrollbar extends Scrollbar {\n+    public TestScrollbar() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestScrollbar(int orientation) {\n+        super(orientation);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestScrollbar(int orient, int val, int visible, int min, int max) {\n+        super(orient, val, visible, min, max);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestScrollPane extends ScrollPane {\n+    public TestScrollPane() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestScrollPane(int policy) {\n+        super(policy);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestTextField extends TextField {\n+    public TestTextField() {\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextField(String text) {\n+        super(text);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextField(int columns) {\n+        super(columns);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextField(String text, int columns) {\n+        super(text, columns);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestTextArea extends TextArea {\n+    public TestTextArea() {\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextArea(String text) {\n+        super(text);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextArea(int rows, int columns) {\n+        super(rows, columns);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextArea(String text, int rows, int columns) {\n+        super(text, rows, columns);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestTextArea(String text, int rows, int columns, int bars) {\n+        super(text, rows, columns, bars);\n+        ComponentLeakTest.register(this);\n+        requestFocus();\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+\n+class TestPanel extends Panel {\n+    public TestPanel() {\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+\n+    public TestPanel(LayoutManager layout) {\n+        super(layout);\n+        ComponentLeakTest.register(this);\n+        setDropTarget(new TestDropTarget(this));\n+    }\n+}\n+class TestMenu extends Menu {\n+    public TestMenu() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestMenu(String label) {\n+        super(label);\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestMenu(String label, boolean tearOff) {\n+        super(label, tearOff);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class TestMenuItem extends MenuItem {\n+    public TestMenuItem() {\n+        ComponentLeakTest.register(this);\n+    }\n+    public TestMenuItem(String label) {\n+        super(label);\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestMenuItem(String label, MenuShortcut s) {\n+        super(label, s);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class TestMenuBar extends MenuBar {\n+    public TestMenuBar() {\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class TestPopupMenu extends PopupMenu {\n+    public TestPopupMenu() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestPopupMenu(String label) {\n+        super(label);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class TestCheckboxMenuItem extends CheckboxMenuItem {\n+    public TestCheckboxMenuItem() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestCheckboxMenuItem(String label) {\n+        super(label);\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public TestCheckboxMenuItem(String label, boolean state) {\n+        super(label, state);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class BorderTestButton extends Button {\n+    public BorderTestButton() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public BorderTestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class CardTestButton extends Button {\n+    public CardTestButton() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public CardTestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class FlowTestButton extends Button {\n+    public FlowTestButton() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public FlowTestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class GridBagTestButton extends Button {\n+    public GridBagTestButton() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public GridBagTestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class GridTestButton extends Button {\n+    public GridTestButton() {\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public GridTestButton(String title) {\n+        super(title);\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class TestLightweight extends Component {\n+    String label;\n+    int width = 100;\n+    int height = 30;\n+\n+    public TestLightweight(String label) {\n+        this.label = label;\n+        ComponentLeakTest.register(this);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(Color.orange);\n+        g.fillRect(0, 0, d.width, d.height);\n+        g.setColor(Color.black);\n+        int x = 5;\n+        int y = (d.height - 5);\n+        g.drawString(label, x, y);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(width,height);\n+    }\n+}\n+\n+class TestDropTarget extends DropTarget {\n+    public TestDropTarget(Component comp) {\n+        super(comp, new DropTargetListener() {\n+            public void dragEnter(DropTargetDragEvent dtde) {}\n+            public void dragOver(DropTargetDragEvent dtde) {}\n+            public void dropActionChanged(DropTargetDragEvent dtde) {}\n+            public void dragExit(DropTargetEvent dte) {}\n+            public void drop(DropTargetDropEvent dtde) {}\n+        });\n+        ComponentLeakTest.register(this);\n+    }\n+}\n+\n+class MainWindow extends TestWindow {\n+    public MainWindow(Frame f) {\n+        super(f);\n+        ComponentLeakTest.initWindow(this);\n+        setVisible(true);\n+\n+        TestPopupMenu popup = new TestPopupMenu(\"hi\");\n+        add(popup);\n+        popup.show(this, 5, 5);\n+    }\n+}\n+\n+class MainDialog extends TestDialogL {\n+    public MainDialog(Frame f) {\n+        super(f, \"MainDialog\", false);\n+        ComponentLeakTest.initWindow(this);\n+        setVisible(true);\n+\n+        TestPopupMenu popup = new TestPopupMenu(\"hi\");\n+        add(popup);\n+        popup.show(this, 5, 5);\n+    }\n+}\n+\n+class MainFrame extends TestFrame {\n+    public MainFrame(){\n+        super(\"Component Leak Test MainFrame\");\n+\n+        ComponentLeakTest.initWindow(this);\n+\n+        TestMenu menu = new TestMenu(\"Print\");\n+        TestMenu menu2 = new TestMenu(\"File\");\n+        TestMenu menu3 = new TestMenu(\"Edit\");\n+        TestMenu menu4 = new TestMenu(\"ReallyReallyReallyReallyReallyReallyReallyReally\" +\n+                \"ReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyLong\");\n+        menu2.setFont(new Font(\"SansSerif\", Font.BOLD, 20));\n+        menu2.setEnabled(false);\n+        menu3.setFont(new Font(\"Monospaced\", Font.ITALIC, 18));\n+        menu3.setEnabled(false);\n+        menu4.setEnabled(false);\n+        TestMenuItem itemPrinter  = new TestMenuItem(\"foobar\");\n+        TestMenuItem itemScreen  = new TestMenuItem(\"baz\");\n+        TestCheckboxMenuItem itemCheck = new TestCheckboxMenuItem(\"yep\");\n+        menu.add(itemPrinter);\n+        menu.add(itemScreen);\n+        menu.add(itemCheck);\n+        TestMenuBar menuBar = new TestMenuBar();\n+        menuBar.add( menu );\n+        menuBar.add( menu2 );\n+        menuBar.add( menu3 );\n+        menuBar.add( menu4 );\n+        setMenuBar(menuBar);\n+\n+        setVisible(true);\n+\n+        TestPopupMenu popup = new TestPopupMenu(\"hi\");\n+        add(popup);\n+        popup.show(this, 5, 5);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ComponentLeakTest\/ComponentLeakTest.java","additions":769,"deletions":0,"binary":false,"changes":769,"status":"added"},{"patch":"@@ -0,0 +1,354 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4146452\n+ * @summary Tests serialization of peered and lightweight Components.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ComponentSerializationTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import javax.swing.JPanel;\n+\n+public class ComponentSerializationTest extends JPanel {\n+    private MainFrame mf;\n+    private MainWindow mw;\n+    private MainDialog md;\n+    private MainFileDialog mfd;\n+    private static final String INSTRUCTIONS = \"\"\"\n+        A Frame, a Window, and a Dialog should appear. From the Frame's\n+        \"Serialize\" menu, select \"Serialize!\". Another Frame, Window, and\n+        Dialog should appear exactly on top of the existing ones. The state\n+        and functionality of the two sets of Windows should be identical. If\n+        any errors or exceptions appear in the log area, or if the second set of\n+        Windows is different from the first, the test fails. Otherwise, the\n+        test passes.\n+    \"\"\";\n+\n+    private static final ArrayList<Window> toDispose = new ArrayList<>();\n+\n+    public ComponentSerializationTest() {\n+        mf = new MainFrame();\n+        toDispose.add(mf);\n+        mw = new MainWindow(mf);\n+        toDispose.add(mw);\n+        md = new MainDialog(mf);\n+        toDispose.add(md);\n+        mfd = new MainFileDialog(mf);\n+        toDispose.add(mfd);\n+    }\n+\n+    public static void main(String[] argc) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Component Serialization Test\")\n+                .splitUI(ComponentSerializationTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+        for (Window w : toDispose) {\n+            if (w != null) {\n+                EventQueue.invokeAndWait(w::dispose);\n+            }\n+        }\n+    }\n+\n+    private void initWindow(Window w) {\n+        w.setSize(600, 400);\n+        w.setLayout(new FlowLayout());\n+\n+        \/\/ peered components\n+        w.add(new Button(\"Button\"));\n+        w.add(new TestCanvas());\n+        w.add(new Checkbox(\"Checkbox\", true));\n+        Choice choice = new Choice();\n+        choice.add(\"Choice 1\");\n+        choice.add(\"Choice Two\");\n+        w.add(choice);\n+        w.add(new Label(\"Label\"));\n+        List list = new List();\n+        list.add(\"List 1\");\n+        list.add(\"List Two\");\n+        w.add(list);\n+        w.add(new Scrollbar(Scrollbar.VERTICAL));\n+        w.add(new Scrollbar(Scrollbar.HORIZONTAL));\n+        ScrollPane scrollpane = new ScrollPane();\n+        scrollpane.add(new Button(\"Button in a scrollpane\"));\n+        w.add(scrollpane);\n+        w.add(new TextArea(\"TextArea\", 3, 30));\n+        w.add(new TextField(\"TextField\"));\n+\n+        \/\/ nested components\n+        Panel panel1 = new Panel();\n+        panel1.setLayout(new FlowLayout());\n+        panel1.setBackground(Color.red);\n+        w.add(panel1);\n+\n+        panel1.add(new Button(\"level 2\"));\n+\n+        Panel panel2 = new Panel();\n+        panel2.setLayout(new FlowLayout());\n+        panel2.setBackground(Color.green);\n+        panel1.add(panel2);\n+\n+        panel2.add(new Button(\"level 3\"));\n+\n+        \/\/ lightweight components\n+        w.add(new LWButton(\"LWbutton\") );\n+\n+        \/\/ overlapping components\n+        w.add(new ZOrderPanel());\n+    }\n+\n+    class MainWindow extends Window {\n+        public MainWindow(Frame f) {\n+            super(f);\n+            initWindow(this);\n+            setLocation(650, 0);\n+            setVisible(true);\n+        }\n+    }\n+\n+    class MainDialog extends Dialog {\n+        public MainDialog(Frame f) {\n+            super(f, \"MainDialog\", false);\n+            initWindow(this);\n+            setLocation(0, 450);\n+            setVisible(true);\n+        }\n+    }\n+\n+    class MainFileDialog extends FileDialog {\n+        public MainFileDialog(Frame f) {\n+            super(f, \"MainFileDialog\", FileDialog.SAVE);\n+            setLocation(650, 450);\n+            addNotify();\n+        }\n+    }\n+\n+    class MainFrame extends Frame {\n+        public MainFrame() {\n+            super(\"ComponentSerializationTest\");\n+            initWindow(this);\n+\n+            Menu menu = new Menu(\"Serialize\");\n+            Menu menu2 = new Menu(\"File\");\n+            Menu menu3 = new Menu(\"Edit\");\n+            Menu menu4 = new Menu(\"ReallyReallyReallyReallyReallyReallyReallyReally\" +\n+                    \"ReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyLong\");\n+            menu2.setFont(new Font(\"SansSerif\", Font.BOLD, 20));\n+            menu2.setEnabled(false);\n+            menu3.setFont(new Font(\"Monospaced\", Font.ITALIC, 18));\n+            menu3.setEnabled(false);\n+            menu4.setEnabled(false);\n+            MenuItem itemSerialize  = new MenuItem(\"Serialize!\");\n+            CheckboxMenuItem itemCheck  = new CheckboxMenuItem(\"Check me\");\n+            menu.add(itemSerialize);\n+            menu.add(itemCheck);\n+            MenuBar menuBar = new MenuBar();\n+            menuBar.add(menu);\n+            menuBar.add(menu2);\n+            menuBar.add(menu3);\n+            menuBar.add(menu4);\n+            setMenuBar(menuBar);\n+\n+            itemSerialize.addActionListener(new ActionSerialize());\n+\n+            setLocation(0, 0);\n+            setVisible(true);\n+        }\n+    }\n+\n+    class ActionSerialize implements ActionListener {\n+        public void actionPerformed(ActionEvent ev) {\n+            Frame f2 = null;\n+            Window w2 = null;\n+            Dialog d2 = null;\n+            FileDialog fd2 = null;\n+\n+            try {\n+                FileOutputStream fos = new FileOutputStream(\"tmp\");\n+                ObjectOutputStream oos = new ObjectOutputStream(fos);\n+                oos.writeObject(mf);\n+                oos.writeObject(mw);\n+                oos.writeObject(md);\n+                oos.writeObject(mfd);\n+                oos.flush();\n+\n+                FileInputStream fis = new FileInputStream(\"tmp\");\n+                ObjectInputStream ois = new ObjectInputStream(fis);\n+                f2 = (Frame)ois.readObject();\n+                w2 = (Window)ois.readObject();\n+                d2 = (Dialog)ois.readObject();\n+                fd2= (FileDialog)ois.readObject();\n+            } catch (Exception e) {\n+                PassFailJFrame.log(e.getMessage());\n+            }\n+\n+            if (f2 == null || w2 == null || d2 == null || fd2 == null) {\n+                PassFailJFrame.log(\"ERROR: one of the components was not deserialized.\");\n+                PassFailJFrame.log(\"frame = \" + f2);\n+                PassFailJFrame.log(\"window = \" + w2);\n+                PassFailJFrame.log(\"dialog = \" + d2);\n+                PassFailJFrame.log(\"file dalog = \" + fd2);\n+            }\n+\n+            if (f2 != null) {\n+                toDispose.add(f2);\n+                f2.setVisible(true);\n+            }\n+            if (w2 != null) {\n+                toDispose.add(w2);\n+                w2.setVisible(true);\n+            }\n+            if (d2 != null) {\n+                toDispose.add(d2);\n+                d2.setVisible(true);\n+            }\n+            if (fd2 != null) {\n+                toDispose.add(fd2);\n+                fd2.addNotify();\n+            }\n+        }\n+    }\n+\n+    class LWButton extends Component {\n+        String label;\n+        int width = 100;\n+        int height = 30;\n+\n+        public LWButton(String label) {\n+            super();\n+            this.label = label;\n+        }\n+\n+        public void paint(Graphics g) {\n+            Dimension d = getSize();\n+            g.setColor(Color.orange);\n+            g.fillRect(0, 0, d.width, d.height);\n+            g.setColor(Color.black);\n+            int x = 5;\n+            int y = (d.height - 5);\n+            g.drawString(label, x, y);\n+        }\n+\n+        public Dimension getPreferredSize()     {\n+            return new Dimension(width, height);\n+        }\n+    }\n+\n+    class TestCanvas extends Canvas {\n+        int width = 100;\n+        int height = 100;\n+\n+        public void paint(Graphics g) {\n+            g.setColor(Color.blue);\n+            g.fillRoundRect(10, 10, 50, 50, 15, 30);\n+            g.setColor(Color.red);\n+            g.fillOval(70, 70, 25, 25);\n+        }\n+        public Dimension getPreferredSize() {\n+            return new Dimension(width, height);\n+        }\n+    }\n+\n+    class ZOrderPanel extends Panel {\n+        public ZOrderPanel() {\n+            setLayout(null);\n+\n+            Component first, second, third, fourth;\n+\n+            show();\n+            first = makeBox(\"Second\", Color.blue, -1);\n+            second = makeBox(\"First\", Color.yellow, 0);\n+            fourth = makeBox(\"Fourth\", Color.red, 2);\n+            third = makeBox(\"Third\", Color.green, 3);\n+            remove(third);\n+            add(third, 2);\n+            validate();\n+            add(new LWButton(\"LWButton\"), 0);\n+        }\n+\n+        public Dimension preferredSize() {\n+            return new Dimension(260, 80);\n+        }\n+\n+        public void layout() {\n+            int i, n;\n+            Insets ins = insets();\n+            n = countComponents();\n+            for (i = n - 1; i >= 0; i--) {\n+                Component p = getComponent(i);\n+                p.reshape(ins.left + 40 * i, ins.top + 5 * i, 60, 60);\n+            }\n+        }\n+\n+        public Component makeBox(String s, Color c, int index) {\n+            Label l = new Label(s);\n+            l.setBackground(c);\n+            l.setAlignment(Label.RIGHT);\n+            add(l, index);\n+            validate();\n+            return l;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ComponentSerializationTest\/ComponentSerializationTest.java","additions":354,"deletions":0,"binary":false,"changes":354,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4783989\n+  @summary  get(Preferred|Minimum|Maximum)Size() must not return a reference.\n+  The object copy of Dimension class needed.\n+  @key headful\n+  @run main GetSizesTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class GetSizesTest extends Frame {\n+    Button b;\n+\n+    public static void main(final String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        GetSizesTest app = new GetSizesTest();\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                app.init();\n+                app.start();\n+            } finally {\n+                app.dispose();\n+            }\n+        });\n+    }\n+\n+    public void init() {\n+        b = new Button(\"button\");\n+        add(b);\n+    }\n+\n+    public void start () {\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        validate();\n+\n+        System.out.println(\"Test set for Container (Frame).\");\n+\n+        Dimension dimPref = getPreferredSize();\n+        dimPref.setSize(101, 101);\n+        if (getPreferredSize().equals(new Dimension(101, 101))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimPref);\n+        }\n+        System.out.println(\"getPreferredSize() Passed.\");\n+\n+        Dimension dimMin = getMinimumSize();\n+        dimMin.setSize(101, 101);\n+        if (getMinimumSize().equals(new Dimension(101, 101))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimMin);\n+        }\n+        System.out.println(\"getMinimumSize() Passed.\");\n+\n+        Dimension dimMax = getMaximumSize();\n+        dimMax.setSize(101, 101);\n+        if (getMaximumSize().equals(new Dimension(101, 101))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimMax);\n+        }\n+        System.out.println(\"getMaximumSize() Passed.\");\n+\n+        System.out.println(\"Test set for Component (Button).\");\n+\n+        dimPref = b.getPreferredSize();\n+        dimPref.setSize(33, 33);\n+        if (b.getPreferredSize().equals(new Dimension(33, 33))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimPref);\n+        }\n+        System.out.println(\"getPreferredSize() Passed.\");\n+\n+        dimMin = b.getMinimumSize();\n+        dimMin.setSize(33, 33);\n+        if (b.getMinimumSize().equals(new Dimension(33, 33))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimMin);\n+        }\n+        System.out.println(\"getMinimumSize() Passed.\");\n+\n+        dimMax = b.getMaximumSize();\n+        dimMax.setSize(33, 33);\n+        if (b.getMaximumSize().equals(new Dimension(33, 33))) {\n+            throw new RuntimeException(\"Test Failed for: \" + dimMax);\n+        }\n+        System.out.println(\"getMaximumSize() Passed.\");\n+        System.out.println(\"GetSizesTest Succeeded.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/MinMaxSizeDefensive\/GetSizesTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4059430\n+ * @summary Test for component z-ordering consistency\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ZOrderTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.List;\n+\n+public class ZOrderTest {\n+    public final static String INSTRUCTIONS = \"\"\"\n+            The ZOrderTest creates two frames.\n+            - Frame 1 has components added to an intermediate panel\n+            - Frame 2 has components added directly to the frame itself\n+            Verify that the components are in the correct z-order. Lower numbered\n+            components should overlap higher numbered ones (e.g. component zero should\n+            appear on top of component one).\n+            Both frames should have the same component ordering, and this ordering should\n+            be the same on all supported operating systems.\n+            \"\"\";\n+\n+    public static void main(String [] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Component ZOrder Test\")\n+                .testUI(ZOrderTest::makeFrames)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static List<Frame> makeFrames() {\n+        Frame frame, frame2;\n+\n+        \/\/ test adding components to panel on a frame\n+        frame = new Frame(\"ZOrderTest(1) for 4059430\");\n+        frame.pack();\n+        frame.show();\n+        Panel panel = new ZOrderPanel();\n+        frame.setBounds(0, 0, 500, 350);\n+        frame.setLayout(new GridLayout());\n+        frame.add(panel);\n+        doTest(panel);\n+\n+        \/\/ test adding components directly to frame\n+        frame2 = new ZOrderTestFrame(\"ZOrderTest(2) for 4059430\");\n+        frame2.pack();\n+        frame2.show();\n+        frame2.setBounds(80, 80, 500, 350);\n+        doTest(frame2);\n+\n+        return List.of(frame, frame2);\n+    }\n+\n+    \/*\n+     * This tests various boundary conditions with z-ordering\n+     *  - inserting at the top of the z-order\n+     *  - inserting at the bottom of the z-order\n+     *  - inserting in the middle of the z-order\n+     *\/\n+    private static void doTest(Container cont) {\n+        Component compZero, compOne, compTwo, compThree, compFour;\n+\n+        compZero = makeBox(cont, \"Comp One\", Color.blue, -1);\n+        \/\/ insert on top\n+        compOne = makeBox(cont, \"Comp Zero\", Color.yellow, 0);\n+        \/\/ put at the back\n+        compThree = makeBox(cont, \"Comp Three\", Color.red, 2);\n+        \/\/ insert in last position\n+        compTwo = makeBox(cont, \"Comp Two\", Color.green, 3);\n+        \/\/ swap compTwo and compThree to correct positions\n+        cont.remove(compTwo);\n+        cont.add(compTwo, 2);\n+        \/\/ one more test of adding to the end\n+        compFour = makeBox(cont, \"Comp Four\", Color.magenta, -1);\n+        \/\/ re-validate so components cascade into proper place\n+        cont.validate();\n+    }\n+\n+    private static Component makeBox(Container cont, String s, Color c, int index) {\n+        Label l = new Label(s);\n+        l.setBackground(c);\n+        l.setAlignment(Label.RIGHT);\n+        if (index == -1) {\n+            cont.add(l); \/\/ semantically equivalent to -1, but why not test this too\n+        } else {\n+            cont.add(l, index);\n+        }\n+        cont.validate();\n+        return l;\n+    }\n+\n+    \/**\n+     * Cascades components across the container so\n+     * that they overlap, demonstrating their z-ordering\n+     *\/\n+    static void doCascadeLayout(Container cont) {\n+        int i, n;\n+        Insets ins = cont.insets();\n+        n = cont.countComponents();\n+        for (i = n - 1; i >= 0; i--) {\n+            Component comp = cont.getComponent(i);\n+            comp.reshape(ins.left + 75 * i, ins.top + 30 * i, 100, 100);\n+        }\n+    }\n+}\n+\n+class ZOrderPanel extends Panel {\n+    public void layout() {\n+        ZOrderTest.doCascadeLayout(this);\n+    }\n+}\n+\n+class ZOrderTestFrame extends Frame\n+{\n+    public ZOrderTestFrame(String title) {\n+        super(title);\n+    }\n+\n+    public void layout() {\n+        ZOrderTest.doCascadeLayout(this);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ZOrderTest\/ZOrderTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}