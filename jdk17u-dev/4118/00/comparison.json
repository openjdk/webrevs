{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import org.openjdk.jmh.infra.ThreadParams;\n@@ -52,1 +53,1 @@\n-    @Param(\"100\")\n+    @Param(\"100\") \/\/ Will be expanded to at least the number of threads used\n@@ -62,1 +63,3 @@\n-    public void prepare() {\n+    public void prepare(ThreadParams params) {\n+        capacity = Math.max(params.getThreadCount(), capacity);\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/ProducerConsumer.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import org.openjdk.jmh.infra.ThreadParams;\n@@ -46,1 +47,1 @@\n-    @Param(\"100\")\n+    @Param(\"100\") \/\/ Will be expanded to at least the number of threads used\n@@ -62,1 +63,3 @@\n-    public void setup() {\n+    public void setup(ThreadParams params) {\n+        capacity = Math.max(params.getThreadCount(), capacity);\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Queues.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}