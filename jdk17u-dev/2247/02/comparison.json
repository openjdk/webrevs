{"files":[{"patch":"@@ -96,1 +96,1 @@\n- *     private static List<Window> createTestUI() {\n+ *     private static Window createTestUI() {\n@@ -99,1 +99,1 @@\n- *         return List.of(testUI);\n+ *         return testUI;\n@@ -111,0 +111,4 @@\n+ * The {@code Builder.testUI} methods accept interfaces which create one window\n+ * or a list of windows if the test needs multiple windows,\n+ * or directly a single window, an array of windows or a list of windows.\n+ * <p>\n@@ -147,1 +151,1 @@\n-public class PassFailJFrame {\n+public final class PassFailJFrame {\n@@ -266,1 +270,1 @@\n-        if (builder.windowCreator != null) {\n+        if (builder.windowListCreator != null) {\n@@ -268,1 +272,4 @@\n-                    builder.testWindows = builder.windowCreator.createTestUI());\n+                    builder.testWindows = builder.windowListCreator.createTestUI());\n+            if (builder.testWindows == null) {\n+                throw new IllegalStateException(\"Window list creator returned null list\");\n+            }\n@@ -272,0 +279,3 @@\n+            if (builder.testWindows.isEmpty()) {\n+                throw new IllegalStateException(\"Window list is empty\");\n+            }\n@@ -282,2 +292,0 @@\n-\n-                    windowList.forEach(w -> w.setVisible(true));\n@@ -288,1 +296,0 @@\n-                window.setVisible(true);\n@@ -293,0 +300,1 @@\n+        showAllWindows();\n@@ -373,1 +381,1 @@\n-        windowList.add(frame);\n+        addTestWindow(frame);\n@@ -404,1 +412,1 @@\n-     * Creates one or more windows for test UI.\n+     * Creates a test UI window.\n@@ -408,0 +416,13 @@\n+        \/**\n+         * Creates a window for test UI.\n+         * This method is called by the framework on the EDT.\n+         * @return a test UI window\n+         *\/\n+        Window createTestUI();\n+    }\n+\n+    \/**\n+     * Creates a list of test UI windows.\n+     *\/\n+    @FunctionalInterface\n+    public interface WindowListCreator {\n@@ -411,1 +432,1 @@\n-         * @return a list of windows.\n+         * @return a list of test UI windows\n@@ -427,2 +448,7 @@\n-         * that were passed to the framework via\n-         * {@link Builder#testUI(WindowCreator) testUI} method.\n+         * that were passed to the framework via the\n+         * {@link Builder#testUI(Window...) testUI(Window...)} method or\n+         * that were created with {@code WindowCreator}\n+         * or {@code WindowListCreator} which were passed via\n+         * {@link Builder#testUI(WindowCreator) testUI(WindowCreator)} or\n+         * {@link Builder#testUI(WindowListCreator) testUI(WindowListCreator)}\n+         * correspondingly.\n@@ -802,0 +828,23 @@\n+    \/**\n+     * Displays all the windows in {@code windowList}.\n+     *\n+     * @throws InterruptedException if the thread is interrupted while\n+     *              waiting for the event dispatch thread to finish running\n+     *              the {@link #showUI() showUI}\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              the event dispatch thread executes {@code showUI}\n+     *\/\n+    private static void showAllWindows()\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(PassFailJFrame::showUI);\n+    }\n+\n+    \/**\n+     * Displays all the windows in {@code windowList}; it has to be called on\n+     * the EDT &mdash; use {@link #showAllWindows() showAllWindows} to ensure it.\n+     *\/\n+    private static synchronized void showUI() {\n+        windowList.forEach(w -> w.setVisible(true));\n+    }\n+\n+\n@@ -844,1 +893,1 @@\n-        private WindowCreator windowCreator;\n+        private WindowListCreator windowListCreator;\n@@ -880,0 +929,51 @@\n+        \/**\n+         * Adds a {@code WindowCreator} which the framework will use\n+         * to create the test UI window.\n+         *\n+         * @param windowCreator a {@code WindowCreator}\n+         *              to create the test UI window\n+         * @return this builder\n+         * @throws IllegalArgumentException if {@code windowCreator} is {@code null}\n+         * @throws IllegalStateException if a window creator\n+         *              or a list of test windows is already set\n+         *\/\n+        public Builder testUI(WindowCreator windowCreator) {\n+            if (windowCreator == null) {\n+                throw new IllegalArgumentException(\"The window creator can't be null\");\n+            }\n+\n+            checkWindowsLists();\n+\n+            this.windowListCreator = () -> List.of(windowCreator.createTestUI());\n+            return this;\n+        }\n+\n+        \/**\n+         * Adds a {@code WindowListCreator} which the framework will use\n+         * to create a list of test UI windows.\n+         *\n+         * @param windowListCreator a {@code WindowListCreator}\n+         *              to create test UI windows\n+         * @return this builder\n+         * @throws IllegalArgumentException if {@code windowListCreator} is {@code null}\n+         * @throws IllegalStateException if a window creator\n+         *              or a list of test windows is already set\n+         *\/\n+        public Builder testUI(WindowListCreator windowListCreator) {\n+            if (windowListCreator == null) {\n+                throw new IllegalArgumentException(\"The window list creator can't be null\");\n+            }\n+\n+            checkWindowsLists();\n+\n+            this.windowListCreator = windowListCreator;\n+            return this;\n+        }\n+\n+        \/**\n+         * Adds an already created test UI window.\n+         * The window is positioned and shown automatically.\n+         *\n+         * @param window a test UI window\n+         * @return this builder\n+         *\/\n@@ -884,0 +984,6 @@\n+        \/**\n+         * Adds an array of already created test UI windows.\n+         *\n+         * @param windows an array of test UI windows\n+         * @return this builder\n+         *\/\n@@ -888,1 +994,11 @@\n-        public Builder testUI(List<Window> windows) {\n+        \/**\n+         * Adds a list of already created test UI windows.\n+         *\n+         * @param windows a list of test UI windows\n+         * @return this builder\n+         * @throws IllegalArgumentException if {@code windows} is {@code null}\n+         *              or the list contains {@code null}\n+         * @throws IllegalStateException if a window creator\n+         *              or a list of test windows is already set\n+         *\/\n+        public Builder testUI(List<? extends Window> windows) {\n@@ -894,1 +1010,1 @@\n-                throw new IllegalArgumentException(\"The windows list can't contain null\");\n+                throw new IllegalArgumentException(\"The list of windows can't contain null\");\n@@ -897,3 +1013,2 @@\n-            if (windowCreator != null) {\n-                throw new IllegalStateException(\"windowCreator is already set\");\n-            }\n+            checkWindowsLists();\n+\n@@ -904,3 +1019,9 @@\n-        public Builder testUI(WindowCreator windowCreator) {\n-            if (windowCreator == null) {\n-                throw new IllegalArgumentException(\"The window creator can't be null\");\n+        \/**\n+         * Verifies the state of window list and window creator.\n+         *\n+         * @throws IllegalStateException if a windows list creator\n+         *              or a list of test windows is already set\n+         *\/\n+        private void checkWindowsLists() {\n+            if (windowListCreator != null) {\n+                throw new IllegalStateException(\"Window list creator is already set\");\n@@ -909,1 +1030,1 @@\n-                throw new IllegalStateException(\"testWindows are already set\");\n+                throw new IllegalStateException(\"The list of test windows is already set\");\n@@ -911,2 +1032,0 @@\n-            this.windowCreator = windowCreator;\n-            return this;\n@@ -954,1 +1073,1 @@\n-                && (testWindows != null || windowCreator != null)) {\n+                && (testWindows != null || windowListCreator != null)) {\n@@ -960,1 +1079,1 @@\n-                if (testWindows == null && windowCreator == null) {\n+                if (testWindows == null && windowListCreator == null) {\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":146,"deletions":27,"binary":false,"changes":173,"status":"modified"}]}