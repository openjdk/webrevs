{"files":[{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_ISPOINTER_HPP\n-#define SHARE_METAPROGRAMMING_ISPOINTER_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-\n-\/\/ This metafunction returns true iff the type T is (irrespective of CV qualifiers)\n-\/\/ a pointer type.\n-\n-template <typename T> class IsPointer: public FalseType {};\n-\n-template <typename T> class IsPointer<T*>: public TrueType {};\n-template <typename T> class IsPointer<T* const>: public TrueType {};\n-template <typename T> class IsPointer<T* volatile>: public TrueType {};\n-template <typename T> class IsPointer<T* const volatile>: public TrueType {};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISPOINTER_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isPointer.hpp","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"metaprogramming\/isPointer.hpp\"\n@@ -1080,1 +1079,1 @@\n-                   (IsPointer<T>::value || std::is_integral<T>::value) ||\n+                   (std::is_pointer<T>::value || std::is_integral<T>::value) ||\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"metaprogramming\/isPointer.hpp\"\n@@ -509,1 +508,1 @@\n-  typename EnableIf<std::is_integral<T>::value || IsPointer<T>::value>::type>\n+  typename EnableIf<std::is_integral<T>::value || std::is_pointer<T>::value>::type>\n@@ -626,2 +625,2 @@\n-  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n-  using I = std::conditional_t<IsPointer<D>::value, ptrdiff_t, D>;\n+  STATIC_ASSERT(std::is_pointer<D>::value || std::is_integral<D>::value);\n+  using I = std::conditional_t<std::is_pointer<D>::value, ptrdiff_t, D>;\n@@ -633,2 +632,2 @@\n-  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n-  using I = std::conditional_t<IsPointer<D>::value, ptrdiff_t, D>;\n+  STATIC_ASSERT(std::is_pointer<D>::value || std::is_integral<D>::value);\n+  using I = std::conditional_t<std::is_pointer<D>::value, ptrdiff_t, D>;\n@@ -642,1 +641,1 @@\n-  STATIC_ASSERT(IsPointer<D>::value || std::is_integral<D>::value);\n+  STATIC_ASSERT(std::is_pointer<D>::value || std::is_integral<D>::value);\n@@ -647,1 +646,1 @@\n-  using AddendType = std::conditional_t<IsPointer<D>::value, PI, D>;\n+  using AddendType = std::conditional_t<std::is_pointer<D>::value, PI, D>;\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+#include <type_traits>\n+\n@@ -502,1 +504,1 @@\n-    if (!HaveDeletables<IsPointer<VALUE>::value, EVALUATE_FUNC>::\n+    if (!HaveDeletables<std::is_pointer<VALUE>::value, EVALUATE_FUNC>::\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isPointer.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsPointerTest: AllStatic {\n-  class A: AllStatic {};\n-\n-  static const bool ip_voidptr = IsPointer<void*>::value;\n-  STATIC_ASSERT(ip_voidptr);\n-\n-  static const bool ip_Aptr = IsPointer<A*>::value;\n-  STATIC_ASSERT(ip_Aptr);\n-\n-  static const bool ip_cAptr = IsPointer<const A*>::value;\n-  STATIC_ASSERT(ip_cAptr);\n-\n-  static const bool ip_vAptr = IsPointer<volatile A*>::value;\n-  STATIC_ASSERT(ip_vAptr);\n-\n-  static const bool ip_Avptr = IsPointer<A* volatile>::value;\n-  STATIC_ASSERT(ip_Avptr);\n-\n-  static const bool ip_intptrt = IsPointer<intptr_t>::value;\n-  STATIC_ASSERT(!ip_intptrt);\n-\n-  static const bool ip_char = IsPointer<char>::value;\n-  STATIC_ASSERT(!ip_char);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isPointer.cpp","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"}]}