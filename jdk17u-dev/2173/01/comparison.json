{"files":[{"patch":"@@ -422,1 +422,1 @@\n-    CFLAGS_OS_DEF_JVM=\"-DLINUX\"\n+    CFLAGS_OS_DEF_JVM=\"-DLINUX -D_FILE_OFFSET_BITS=64\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,0 +185,2 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n+\n@@ -447,1 +449,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -454,1 +456,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -474,2 +476,2 @@\n-  struct stat64 st;\n-  ret = stat64(LinuxAttachListener::path(), &st);\n+  struct stat st;\n+  ret = stat(LinuxAttachListener::path(), &st);\n@@ -514,1 +516,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -516,1 +518,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -521,1 +523,1 @@\n-    RESTARTABLE(::stat64(fn, &st), ret);\n+    RESTARTABLE(::stat(fn, &st), ret);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2746,0 +2746,2 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n+\n@@ -4993,1 +4995,1 @@\n-  int fd = ::open64(path, oflag, mode);\n+  int fd = ::open(path, oflag, mode);\n@@ -4998,3 +5000,3 @@\n-    struct stat64 buf64;\n-    int ret = ::fstat64(fd, &buf64);\n-    int st_mode = buf64.st_mode;\n+    struct stat buf;\n+    int ret = ::fstat(fd, &buf);\n+    int st_mode = buf.st_mode;\n@@ -5037,1 +5039,1 @@\n-  return ::open64(path, oflags, S_IREAD | S_IWRITE);\n+  return ::open(path, oflags, S_IREAD | S_IWRITE);\n@@ -5042,1 +5044,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)0, SEEK_CUR);\n+  return (jlong)::lseek(fd, (off64_t)0, SEEK_CUR);\n@@ -5047,1 +5049,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)offset, SEEK_SET);\n+  return (jlong)::lseek(fd, (off64_t)offset, SEEK_SET);\n@@ -5056,1 +5058,1 @@\n-  struct stat64 buf64;\n+  struct stat buf;\n@@ -5058,2 +5060,2 @@\n-  if (::fstat64(fd, &buf64) >= 0) {\n-    mode = buf64.st_mode;\n+  if (::fstat(fd, &buf) >= 0) {\n+    mode = buf.st_mode;\n@@ -5068,1 +5070,1 @@\n-  if ((cur = ::lseek64(fd, 0L, SEEK_CUR)) == -1) {\n+  if ((cur = ::lseek(fd, 0L, SEEK_CUR)) == -1) {\n@@ -5070,1 +5072,1 @@\n-  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n+  } else if ((end = ::lseek(fd, 0L, SEEK_END)) == -1) {\n@@ -5072,1 +5074,1 @@\n-  } else if (::lseek64(fd, cur, SEEK_SET) == -1) {\n+  } else if (::lseek(fd, cur, SEEK_SET) == -1) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,0 +282,1 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n@@ -723,1 +724,1 @@\n-  return (jlong) BSD_ONLY(::lseek) NOT_BSD(::lseek64)(fd, offset, whence);\n+  return (jlong) ::lseek(fd, offset, whence);\n@@ -731,1 +732,1 @@\n-   return BSD_ONLY(::ftruncate) NOT_BSD(::ftruncate64)(fd, length);\n+   return ::ftruncate(fd, length);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\/\/ non-Posix functionality. For example, the use of lseek64 and ftruncate64.\n+\/\/ non-Posix functionality.\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}