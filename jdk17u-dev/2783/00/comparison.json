{"files":[{"patch":"@@ -243,0 +243,1 @@\n+            o.setWrappedStream (new FixedLengthOutputStream (this, ros, contentLen));\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8304963\n+ * @summary Connection should be reusable after HEAD request\n+ * @library \/test\/lib\n+ * @run junit HeadKeepAlive\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.logging.SimpleFormatter;\n+import java.util.logging.StreamHandler;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class HeadKeepAlive\n+{\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    @Test\n+    void test() throws IOException, InterruptedException {\n+        HttpServer httpServer = startHttpServer();\n+        int port = httpServer.getAddress().getPort();\n+        try {\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/firstCall\")\n+                .toURLUnchecked();\n+            HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            uc.setRequestMethod(\"HEAD\");\n+            int responseCode = uc.getResponseCode();\n+            assertEquals(200, responseCode, \"First request should succeed\");\n+\n+            URL url2 = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(port)\n+                    .path(\"\/secondCall\")\n+                    .toURLUnchecked();\n+            HttpURLConnection uc2 = (HttpURLConnection)url2.openConnection(Proxy.NO_PROXY);\n+            uc2.setRequestMethod(\"HEAD\");\n+            responseCode = uc2.getResponseCode();\n+            assertEquals(200, responseCode, \"Second request should reuse connection\");\n+        } finally {\n+            httpServer.stop(0);\n+        }\n+    }\n+\n+    \/**\n+     * Http Server\n+     *\/\n+    HttpServer startHttpServer() throws IOException {\n+        Handler outHandler = new StreamHandler(System.out,\n+                                 new SimpleFormatter());\n+        outHandler.setLevel(Level.FINEST);\n+        LOGGER.setLevel(Level.FINEST);\n+        LOGGER.addHandler(outHandler);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        httpServer.createContext(\"\/\", new MyHandler());\n+        httpServer.start();\n+        return httpServer;\n+    }\n+\n+    class MyHandler implements HttpHandler {\n+\n+        volatile int port1;\n+        @Override\n+        public void handle(HttpExchange t) throws IOException {\n+            String path = t.getRequestURI().getPath();\n+            if (path.equals(\"\/firstCall\")) {\n+                port1 = t.getRemoteAddress().getPort();\n+                System.out.println(\"First connection on client port = \" + port1);\n+                \/\/ send response\n+                t.sendResponseHeaders(200, -1);\n+                \/\/ the connection should still be reusable\n+            } else if (path.equals(\"\/secondCall\")) {\n+                int port2 = t.getRemoteAddress().getPort();\n+                System.out.println(\"Second connection on client port = \" + port2);\n+                if (port1 == port2) {\n+                    t.sendResponseHeaders(200, -1);\n+                } else {\n+                    t.sendResponseHeaders(500, -1);\n+                }\n+            }\n+            t.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/HeadKeepAlive.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}