{"files":[{"patch":"@@ -158,0 +158,3 @@\n+                        \"alt BACK_SPACE\", null,\n+                        \"ctrl W\", null,\n+                        \"alt DELETE\", null,\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaKeyBindings.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8358813\n+ * @summary Password fields' InputMap should not include any word-related action.\n+ *\n+ * @run main PasswordFieldInputMapWordTest\n+ *\/\n+\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import javax.swing.InputMap;\n+import javax.swing.JComponent;\n+import javax.swing.JPasswordField;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.text.DefaultEditorKit;\n+\n+public class PasswordFieldInputMapWordTest {\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing LAF: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (setLookAndFeel(laf)) {\n+                    runTest();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static boolean setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+            return true;\n+        } catch (UnsupportedLookAndFeelException e) {\n+            System.err.println(\"Skipping unsupported look and feel:\");\n+            e.printStackTrace();\n+            return false;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static int[] inputMapConditions = new int[] {\n+            JComponent.WHEN_IN_FOCUSED_WINDOW,\n+            JComponent.WHEN_FOCUSED,\n+            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT\n+    };\n+\n+    \/**\n+     * These are all the actions with \"word\" in their field name.\n+     *\/\n+    static Collection<String> wordActions = Set.of(\n+            DefaultEditorKit.deleteNextWordAction,\n+            DefaultEditorKit.deletePrevWordAction,\n+            DefaultEditorKit.beginWordAction,\n+            DefaultEditorKit.endWordAction,\n+            DefaultEditorKit.selectionBeginWordAction,\n+            DefaultEditorKit.selectionEndWordAction,\n+            DefaultEditorKit.previousWordAction,\n+            DefaultEditorKit.nextWordAction,\n+            DefaultEditorKit.selectionPreviousWordAction,\n+            DefaultEditorKit.selectionNextWordAction\n+    );\n+\n+    private static void runTest() {\n+        JPasswordField field = new JPasswordField();\n+\n+        boolean testPassed = true;\n+        for (int condition : inputMapConditions) {\n+            InputMap inputMap = field.getInputMap(condition);\n+            if (inputMap.allKeys() == null) {\n+                continue;\n+            }\n+            for (KeyStroke keyStroke : inputMap.allKeys()) {\n+                Object actionBinding = inputMap.get(keyStroke);\n+                if (wordActions.contains(actionBinding)) {\n+                    if (testPassed) {\n+                        System.err.println(\"The following inputs\/actions should not be available in a JPasswordField:\");\n+                    }\n+                    System.err.println(inputMap.get(keyStroke) + \" (try typing \" + keyStroke + \")\");\n+                    testPassed = false;\n+                }\n+            }\n+        }\n+\n+        if (!testPassed) {\n+            throw new RuntimeException(\"One or more input\/action binding was observed for a JPasswordField.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPasswordField\/PasswordFieldInputMapWordTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}