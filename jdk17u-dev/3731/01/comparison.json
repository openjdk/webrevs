{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,2 +149,4 @@\n-            int offset = property.indexOf(\"ssl\");\n-            if (offset != -1 && property.indexOf(\"sslctx\", offset) != -1) {\n+            \/\/ remove first occurrence of \"sslctx\" since\n+            \/\/ it interferes with search for \"ssl\"\n+            String modified = property.replaceFirst(\"sslctx\", \"\");\n+            if (modified.contains(\"ssl\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8350582\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates\n+ * @summary Correct the parsing of the ssl value in javax.net.debug\n+ * @run junit DebugPropertyValuesTest\n+ *\/\n+\n+\/\/ A test to verify debug output for different javax.net.debug scenarios\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DebugPropertyValuesTest extends SSLSocketTemplate {\n+\n+    private static final Path LOG_FILE = Path.of(\"logging.conf\");\n+    private static final HashMap<String, List<String>> debugMessages = new HashMap<>();\n+\n+    static {\n+        debugMessages.put(\"handshake\",\n+                List.of(\"Produced ClientHello handshake message\",\n+                        \"supported_versions\"));\n+        debugMessages.put(\"keymanager\", List.of(\"choosing key:\"));\n+        debugMessages.put(\"packet\", List.of(\"Raw write\"));\n+        debugMessages.put(\"plaintext\", List.of(\"Plaintext before ENCRYPTION\"));\n+        debugMessages.put(\"record\", List.of(\"handshake, length =\", \"WRITE:\"));\n+        debugMessages.put(\"session\", List.of(\"Session initialized:\"));\n+        debugMessages.put(\"sslctx\", List.of(\"trigger seeding of SecureRandom\"));\n+        debugMessages.put(\"ssl\", List.of(\"jdk.tls.keyLimits:\"));\n+        debugMessages.put(\"trustmanager\", List.of(\"adding as trusted certificates\"));\n+        debugMessages.put(\"verbose\", List.of(\"Ignore unsupported cipher suite:\"));\n+        debugMessages.put(\"handshake-expand\",\n+                List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                        \"\\\"message\\\".*: \\\"Produced ClientHello handshake message\"));\n+        debugMessages.put(\"record-expand\",\n+                List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                        \"\\\"message\\\".*: \\\"READ: TLSv1.2 application_data\"));\n+        debugMessages.put(\"help\",\n+                List.of(\"print the help messages\",\n+                        \"debugging can be widened with:\"));\n+        debugMessages.put(\"javax.net.debug\",\n+                List.of(\"properties: Initial security property:\",\n+                        \"certpath: Cert path validation succeeded\"));\n+        debugMessages.put(\"logger\",\n+                List.of(\"FINE: adding as trusted certificates\",\n+                        \"FINE: WRITE: TLSv1.3 application_data\"));\n+    }\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        Files.writeString(LOG_FILE, \".level = ALL\\n\" +\n+                \"handlers= java.util.logging.ConsoleHandler\\n\" +\n+                \"java.util.logging.ConsoleHandler.level = ALL\\n\");\n+    }\n+\n+    private static Stream<Arguments> patternMatches() {\n+        return Stream.of(\n+                \/\/ all should print everything\n+                Arguments.of(List.of(\"-Djavax.net.debug=all\"),\n+                        List.of(\"handshake\", \"keymanager\", \"packet\",\n+                                \"plaintext\", \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ ssl should print most details except verbose details\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl\"),\n+                        List.of(\"handshake\", \"keymanager\",\n+                                \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ allow expand option for more verbose output\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,handshake,expand\"),\n+                        List.of(\"handshake\", \"handshake-expand\", \"keymanager\",\n+                                \"record\", \"session\", \"record-expand\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ filtering on record option, with expand\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record,expand\"),\n+                        List.of(\"handshake\", \"handshake-expand\", \"keymanager\",\n+                                \"record\", \"record-expand\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ this test is equivalent to ssl:record mode\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,record\"),\n+                        List.of(\"handshake\", \"keymanager\", \"record\",\n+                                \"session\", \"ssl\", \"sslctx\",\n+                                \"trustmanager\", \"verbose\")),\n+                \/\/ example of test where no \"ssl\" value is passed\n+                \/\/ handshake debugging with verbose mode\n+                \/\/ only verbose gets printed. Needs fixing (JDK-8044609)\n+                Arguments.of(List.of(\"-Djavax.net.debug=handshake:verbose\"),\n+                        List.of(\"verbose\")),\n+                \/\/ another example of test where no \"ssl\" value is passed\n+                Arguments.of(List.of(\"-Djavax.net.debug=record\"),\n+                        List.of(\"record\")),\n+                \/\/ ignore bad sub-option. treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,typo\"),\n+                        List.of(\"handshake\", \"keymanager\",\n+                                \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ ssltypo contains \"ssl\". Treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n+                        List.of(\"handshake\", \"keymanager\",\n+                                \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ plaintext is valid for record option\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record:plaintext\"),\n+                        List.of(\"handshake\", \"keymanager\", \"plaintext\",\n+                                \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\"),\n+                        List.of(\"handshake\", \"keymanager\", \"record\", \"session\",\n+                                \"ssl\", \"sslctx\", \"trustmanager\", \"verbose\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:sslctx\"),\n+                        List.of(\"handshake\", \"keymanager\", \"record\", \"session\",\n+                                \"ssl\", \"sslctx\", \"trustmanager\", \"verbose\")),\n+                \/\/ help message test. Should exit without running test\n+                Arguments.of(List.of(\"-Djavax.net.debug=help\"),\n+                        List.of(\"help\")),\n+                \/\/ add in javax.net.debug sanity test\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\",\n+                                \"-Djava.security.debug=all\"),\n+                        List.of(\"handshake\", \"javax.net.debug\", \"keymanager\",\n+                                \"record\", \"session\", \"ssl\", \"sslctx\",\n+                                \"trustmanager\", \"verbose\")),\n+                \/\/ empty invokes System.Logger use\n+                Arguments.of(List.of(\"-Djavax.net.debug\",\n+                        \"-Djava.util.logging.config.file=\" + LOG_FILE),\n+                        List.of(\"handshake\", \"keymanager\", \"logger\", \"packet\",\n+                                \"plaintext\", \"record\", \"session\", \"ssl\",\n+                                \"sslctx\", \"trustmanager\", \"verbose\"))\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"patternMatches\")\n+    public void checkDebugOutput(List<String> params,\n+                                 List<String> expected) throws Exception {\n+\n+        List<String> args = new ArrayList<>(params);\n+        args.add(\"DebugPropertyValuesTest\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(args);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+        for (String s : debugMessages.keySet()) {\n+            for (String output : debugMessages.get(s)) {\n+                if (expected.contains(s)) {\n+                    outputAnalyzer.shouldMatch(output);\n+                } else {\n+                    outputAnalyzer.shouldNotMatch(output);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValuesTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}