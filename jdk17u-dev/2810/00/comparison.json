{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -9,2 +9,1 @@\n-import javax.imageio.ImageIO;\n-import java.io.File;\n+import java.util.function.Consumer;\n@@ -15,1 +14,0 @@\n-import java.nio.file.Files;\n@@ -17,0 +15,1 @@\n+import javax.swing.JEditorPane;\n@@ -25,0 +24,10 @@\n+\n+        Consumer<JEditorPane> testInstructionProvider = e -> {\n+            try {\n+                e.setContentType(\"text\/html\");\n+                e.setPage(SwingSetTest.class.getResource(args[0] + \".html\"));\n+            } catch (IOException exception) {\n+                exception.printStackTrace();\n+            }\n+        };\n+\n@@ -28,1 +37,2 @@\n-                SwingSetTest.class.getResource(args[0] + \".html\"));\n+                testInstructionProvider);\n+\n@@ -40,0 +50,1 @@\n+\n@@ -42,16 +53,1 @@\n-        if (result != null) {\n-            System.err.println(\"Failure reason: \\n\" + result.getFailureDescription());\n-            if (result.getScreenCapture() != null) {\n-                File screenDump = new File(System.getProperty(\"test.classes\") + separator + args[0] + \".png\");\n-                System.err.println(\"Saving screen image to \" + screenDump.getAbsolutePath());\n-                ImageIO.write(result.getScreenCapture(), \"png\", screenDump);\n-            }\n-            Throwable e = result.getException();\n-            if (e != null) {\n-                throw new RuntimeException(e);\n-            } else {\n-                if (!result.getStatus()) throw new RuntimeException(\"Test failed!\");\n-            }\n-        } else {\n-            throw new RuntimeException(\"No result returned!\");\n-        }\n+        ManualTestFrame.handleResult(result, args[0]);\n@@ -59,1 +55,2 @@\n-}\n\\ No newline at end of file\n+}\n+\n","filename":"test\/jdk\/javax\/accessibility\/manual\/SwingSetTest.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+@test\n+@key headful\n+@summary manual test for accessibility JProgressBar\n+@run main\/manual TestJProgressBarAccessibility\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JProgressBar;\n+import javax.swing.SwingUtilities;\n+\n+import lib.ManualTestFrame;\n+import lib.TestResult;\n+\n+public class TestJProgressBarAccessibility {\n+\n+    private static JFrame frame;\n+    private static volatile int value = 10;\n+    private static final String instruction = \"\"\"\n+            Aim : Check whether JProgressBar value is read in case of VoiceOver or\n+            Screen magnifier shows the magnified value in case of Screen magnifier is enabled\n+            1) Move the mouse pointer over the JProgressBar and if you\n+            hear the JProgressBar value in case of VoiceOver then the test pass else fail.\n+            2) Move the mouse pointer over the JProgressBar and if you see the magnified value\n+            when Screen magnifier is enabled then the test pass else fail.\n+            \"\"\";\n+\n+    private static void createTestUI() throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame(\"Test JProgressBar accessibility\");\n+            JProgressBar progressBar = new JProgressBar();\n+            progressBar.setValue(value);\n+            progressBar.setStringPainted(true);\n+\n+            progressBar.addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseClicked(MouseEvent e) {\n+                    super.mouseClicked(e);\n+                    if ( value == 100) {\n+                        value = 0;\n+                    } else {\n+                        value += 5;\n+                    }\n+                    progressBar.setValue(value);\n+                }\n+            });\n+\n+            AccessibleContext accessibleContext =\n+                    progressBar.getAccessibleContext();\n+            accessibleContext.setAccessibleName(\"JProgressBar accessibility name\");\n+            accessibleContext.setAccessibleDescription(\"Jprogress accessibility \" +\n+                    \"description\");\n+\n+            frame.getContentPane().add(progressBar, BorderLayout.CENTER);\n+\n+            frame.setSize(200,200);\n+            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, IOException {\n+\n+        Consumer<JEditorPane> testInstProvider = e -> {\n+            e.setContentType(\"text\/plain\");\n+            e.setText(instruction);\n+        };\n+\n+        Supplier<TestResult> resultSupplier = ManualTestFrame.showUI(\n+                \"JProgressBar \" +\n+                        \"Accessibility Test\", \"Wait until the Test UI is \" +\n+                        \"seen\", testInstProvider);\n+\n+        \/\/ Create and show TestUI\n+        createTestUI();\n+\n+        \/\/this will block until user decision to pass or fail the test\n+        TestResult  testResult = resultSupplier.get();\n+        ManualTestFrame.handleResult(testResult,\"TestJProgressBarAccessibility\");\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/accessibility\/manual\/TestJProgressBarAccessibility.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -23,0 +23,1 @@\n+\n@@ -25,3 +26,0 @@\n-import javax.swing.JEditorPane;\n-import javax.swing.JPanel;\n-import javax.swing.JScrollPane;\n@@ -31,1 +29,4 @@\n-import java.net.URL;\n+import java.util.function.Consumer;\n+import javax.swing.JEditorPane;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n@@ -38,1 +39,1 @@\n-    DescriptionPane(URL instructions) throws IOException {\n+    DescriptionPane(Consumer<JEditorPane> instructions) {\n@@ -41,2 +42,1 @@\n-        editorPane.setContentType(\"text\/html\");\n-        editorPane.setPage(instructions);\n+        instructions.accept(editorPane);\n@@ -54,0 +54,1 @@\n+\n","filename":"test\/jdk\/javax\/accessibility\/manual\/lib\/DescriptionPane.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,7 +25,0 @@\n-import javax.swing.BorderFactory;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n-import javax.swing.JSplitPane;\n-import javax.swing.JTextArea;\n-import javax.swing.border.BevelBorder;\n@@ -35,0 +28,1 @@\n+import java.io.File;\n@@ -37,1 +31,0 @@\n-import java.net.URL;\n@@ -39,0 +32,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -42,0 +36,9 @@\n+import javax.imageio.ImageIO;\n+import javax.swing.BorderFactory;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+import javax.swing.JTextArea;\n+import javax.swing.border.BevelBorder;\n@@ -43,1 +46,4 @@\n-import static java.awt.BorderLayout.*;\n+import static java.awt.BorderLayout.CENTER;\n+import static java.awt.BorderLayout.NORTH;\n+import static java.awt.BorderLayout.SOUTH;\n+import static java.io.File.separator;\n@@ -54,1 +60,3 @@\n-    private ManualTestFrame(String testName, String headerText, URL instructions, Consumer<TestResult> listener) throws IOException {\n+    private ManualTestFrame(String testName, String headerText,\n+                            Consumer<JEditorPane> instructions,\n+                            Consumer<TestResult> listener) throws IOException {\n@@ -127,3 +135,4 @@\n-     * @param testName\n-     * @param headerText\n-     * @param instructions\n+     *\n+     * @param testName     name of the testcase\n+     * @param headerText   information to the user to wait for the test frame.\n+     * @param instructions test instruction for the user\n@@ -131,2 +140,2 @@\n-     * @throws InterruptedException\n-     * @throws InvocationTargetException\n+     * @throws InterruptedException      exception\n+     * @throws InvocationTargetException exception\n@@ -134,1 +143,3 @@\n-    public static Supplier<TestResult> showUI(String testName, String headerText, URL instructions)\n+    public static Supplier<TestResult> showUI(String testName,\n+                                              String headerText,\n+                                              Consumer<JEditorPane> instructions)\n@@ -151,1 +162,6 @@\n-                latch.await();\n+                int timeout = Integer.getInteger(\"timeout\", 10);\n+                System.out.println(\"timeout value : \" + timeout);\n+                if (!latch.await(timeout, TimeUnit.MINUTES)) {\n+                    throw new RuntimeException(\"Timeout : User failed to \" +\n+                            \"take decision on the test result.\");\n+                }\n@@ -159,0 +175,28 @@\n+    \/**\n+     * Checks the TestResult after user interacted with the manual TestFrame\n+     * and the test UI.\n+     *\n+     * @param result   Instance of the TestResult\n+     * @param testName name of the testcase\n+     * @throws IOException exception\n+     *\/\n+    public static void handleResult(TestResult result, String testName) throws IOException {\n+        if (result != null) {\n+            System.err.println(\"Failure reason: \\n\" + result.getFailureDescription());\n+            if (result.getScreenCapture() != null) {\n+                File screenDump = new File(System.getProperty(\"test.classes\") + separator + testName + \".png\");\n+                System.err.println(\"Saving screen image to \" + screenDump.getAbsolutePath());\n+                ImageIO.write(result.getScreenCapture(), \"png\", screenDump);\n+            }\n+            Throwable e = result.getException();\n+            if (e != null) {\n+                throw new RuntimeException(e);\n+            } else {\n+                if (!result.getStatus())\n+                    throw new RuntimeException(\"Test failed!\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"No result returned!\");\n+        }\n+    }\n+\n@@ -160,0 +204,1 @@\n+\n","filename":"test\/jdk\/javax\/accessibility\/manual\/lib\/ManualTestFrame.java","additions":63,"deletions":18,"binary":false,"changes":81,"status":"modified"}]}