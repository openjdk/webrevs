{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-class DatagramDispatcher extends NativeDispatcher {\n+class DatagramDispatcher extends UnixDispatcher {\n@@ -59,1 +59,1 @@\n-        FileDispatcherImpl.close0(fd);\n+        close0(fd);\n@@ -63,1 +63,1 @@\n-        FileDispatcherImpl.preClose0(fd);\n+        preClose0(fd);\n@@ -67,1 +67,1 @@\n-        FileDispatcherImpl.dup0(fd1, fd2);\n+        dup0(fd1, fd2);\n@@ -81,0 +81,3 @@\n+\n+    static native void dup0(FileDescriptor fd1, FileDescriptor fd2)\n+        throws IOException;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/DatagramDispatcher.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-        init();\n@@ -107,8 +106,0 @@\n-    void preClose(FileDescriptor fd) throws IOException {\n-        preClose0(fd);\n-    }\n-\n-    void dup(FileDescriptor fd1, FileDescriptor fd2) throws IOException {\n-        dup0(fd1, fd2);\n-    }\n-\n@@ -181,8 +172,0 @@\n-    \/\/ Shared with SocketDispatcher and DatagramDispatcher but\n-    \/\/ NOT used by FileDispatcherImpl\n-    static native void close0(FileDescriptor fd) throws IOException;\n-\n-    static native void preClose0(FileDescriptor fd) throws IOException;\n-\n-    static native void dup0(FileDescriptor fd1, FileDescriptor fd2) throws IOException;\n-\n@@ -194,3 +177,0 @@\n-\n-    static native void init();\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-class SocketDispatcher extends NativeDispatcher {\n+class SocketDispatcher extends UnixDispatcher {\n@@ -62,1 +62,1 @@\n-        return FileDispatcherImpl.write0(fd, address, len);\n+        return write0(fd, address, len);\n@@ -66,1 +66,1 @@\n-        return FileDispatcherImpl.writev0(fd, address, len);\n+        return writev0(fd, address, len);\n@@ -70,1 +70,1 @@\n-        FileDispatcherImpl.close0(fd);\n+        close0(fd);\n@@ -74,1 +74,1 @@\n-        FileDispatcherImpl.preClose0(fd);\n+        preClose0(fd);\n@@ -85,0 +85,6 @@\n+    static native int write0(FileDescriptor fd, long address, int len)\n+        throws IOException;\n+\n+    static native long writev0(FileDescriptor fd, long address, int len)\n+        throws IOException;\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SocketDispatcher.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch;\n+\n+import java.io.FileDescriptor;\n+import java.io.IOException;\n+\n+abstract class UnixDispatcher extends NativeDispatcher {\n+\n+    void close(FileDescriptor fd) throws IOException {\n+        close0(fd);\n+    }\n+\n+    void preClose(FileDescriptor fd) throws IOException {\n+        preClose0(fd);\n+    }\n+\n+    static native void close0(FileDescriptor fd) throws IOException;\n+\n+    static native void preClose0(FileDescriptor fd) throws IOException;\n+\n+    static native void init();\n+\n+    static {\n+        IOUtil.load();\n+        init();\n+    }\n+}\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDispatcher.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,0 +118,9 @@\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_DatagramDispatcher_dup0(JNIEnv* env, jclass clazz,\n+    jobject fdo1, jobject fdo2)\n+{\n+    if (dup2(fdval(env, fdo1), fdval(env, fdo2)) < 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"dup2 failed\");\n+    }\n+}\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/DatagramDispatcher.c","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -66,16 +66,0 @@\n-static int preCloseFD = -1;     \/* File descriptor to which we dup other fd's\n-                                   before closing them for real *\/\n-\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_FileDispatcherImpl_init(JNIEnv *env, jclass cl)\n-{\n-    int sp[2];\n-    if (socketpair(PF_UNIX, SOCK_STREAM, 0, sp) < 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"socketpair failed\");\n-        return;\n-    }\n-    preCloseFD = sp[0];\n-    close(sp[1]);\n-}\n-\n@@ -301,1 +285,0 @@\n-\n@@ -310,25 +293,0 @@\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_FileDispatcherImpl_close0(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    jint fd = fdval(env, fdo);\n-    closeFileDescriptor(env, fd);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_FileDispatcherImpl_preClose0(JNIEnv *env, jclass clazz, jobject fdo)\n-{\n-    jint fd = fdval(env, fdo);\n-    if (preCloseFD >= 0) {\n-        if (dup2(preCloseFD, fd) < 0)\n-            JNU_ThrowIOExceptionWithLastError(env, \"dup2 failed\");\n-    }\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_FileDispatcherImpl_dup0(JNIEnv *env, jobject this, jobject fdo1, jobject fdo2)\n-{\n-    if (dup2(fdval(env, fdo1), fdval(env, fdo2)) < 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"dup2 failed\");\n-    }\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,19 @@\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_SocketDispatcher_write0(JNIEnv *env, jclass clazz,\n+                                        jobject fdo, jlong address, jint len)\n+{\n+    jint fd = fdval(env, fdo);\n+    void *buf = (void *)jlong_to_ptr(address);\n+\n+    return convertReturnVal(env, write(fd, buf, len), JNI_FALSE);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_SocketDispatcher_writev0(JNIEnv *env, jclass clazz,\n+                                         jobject fdo, jlong address, jint len)\n+{\n+    jint fd = fdval(env, fdo);\n+    struct iovec *iov = (struct iovec *)jlong_to_ptr(address);\n+    return convertLongReturnVal(env, writev(fd, iov, len), JNI_FALSE);\n+}\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/SocketDispatcher.c","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+\n+#include \"sun_nio_ch_UnixDispatcher.h\"\n+\n+static int preCloseFD = -1;     \/* File descriptor to which we dup other fd's\n+                                   before closing them for real *\/\n+\n+static void closeFileDescriptor(JNIEnv *env, int fd) {\n+    if (fd != -1) {\n+        int result = close(fd);\n+        if (result < 0)\n+            JNU_ThrowIOExceptionWithLastError(env, \"Close failed\");\n+    }\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_UnixDispatcher_init(JNIEnv *env, jclass clazz)\n+{\n+    int sp[2];\n+    if (socketpair(PF_UNIX, SOCK_STREAM, 0, sp) < 0) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"socketpair failed\");\n+        return;\n+    }\n+    preCloseFD = sp[0];\n+    close(sp[1]);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_UnixDispatcher_close0(JNIEnv *env, jclass clazz, jobject fdo)\n+{\n+    jint fd = fdval(env, fdo);\n+    closeFileDescriptor(env, fd);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_UnixDispatcher_preClose0(JNIEnv *env, jclass clazz, jobject fdo)\n+{\n+    jint fd = fdval(env, fdo);\n+    if (preCloseFD >= 0) {\n+        if (dup2(preCloseFD, fd) < 0)\n+            JNU_ThrowIOExceptionWithLastError(env, \"dup2 failed\");\n+    }\n+}\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDispatcher.c","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}