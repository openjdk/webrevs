{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1699,0 +1699,3 @@\n+        \/\/ sort the map of module name to the class name of the generated SystemModules class\n+        List<Map.Entry<String, String>> systemModulesMap = map.entrySet()\n+                .stream().sorted(Map.Entry.comparingByKey()).toList();\n@@ -1765,1 +1768,1 @@\n-        for (String moduleName : sorted(map.keySet())) {\n+        for (Map.Entry<String,String> entry : systemModulesMap) {\n@@ -1768,1 +1771,1 @@\n-            mv.visitLdcInsn(moduleName);\n+            mv.visitLdcInsn(entry.getKey());\n@@ -1788,1 +1791,1 @@\n-        for (String className : sorted(map.values())) {\n+        for (Map.Entry<String,String> entry : systemModulesMap) {\n@@ -1791,1 +1794,1 @@\n-            mv.visitLdcInsn(className.replace('\/', '.'));\n+            mv.visitLdcInsn(entry.getValue().replace('\/', '.'));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.util.FileUtils;\n+\n+import static jdk.test.lib.process.ProcessTools.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8322809\n+ * @library \/test\/lib\n+ * @modules jdk.compiler jdk.jlink\n+ * @build jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.process.ProcessTools\n+ *        jdk.test.lib.util.FileUtils\n+ *        ModuleMainClassTest\n+ * @run junit ModuleMainClassTest\n+ *\/\n+\n+public class ModuleMainClassTest {\n+    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static final Path SRC_DIR = Path.of(TEST_SRC, \"src\");\n+    private static final Path MODS_DIR = Path.of(\"mods\");\n+    private static final Path JMODS_DIR = Path.of(\"jmods\");\n+\n+    private static final Path IMAGE = Path.of(\"image\");\n+\n+    \/\/ the module names are sorted by the plugin and so these names cover\n+    \/\/ the cases that are before and after the elements of `jdk.*` modules\n+    \/\/ with main classes\n+    private static String[] modules = new String[] {\"com.foo\", \"net.foo\"};\n+\n+    private static boolean hasJmods() {\n+        if (!Files.exists(Paths.get(JAVA_HOME, \"jmods\"))) {\n+            System.err.println(\"Test skipped. NO jmods directory\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @BeforeAll\n+    public static void compileAll() throws Throwable {\n+        if (!hasJmods()) return;\n+\n+        for (String mn : modules) {\n+            Path msrc = SRC_DIR.resolve(mn);\n+            assertTrue(CompilerUtils.compile(msrc, MODS_DIR,\n+                    \"--module-source-path\", SRC_DIR.toString(),\n+                    \"--add-exports\", \"java.base\/jdk.internal.module=\" + mn));\n+        }\n+\n+        if (Files.exists(IMAGE)) {\n+            FileUtils.deleteFileTreeUnchecked(IMAGE);\n+        }\n+\n+        \/\/ create JMOD files\n+        Files.createDirectories(JMODS_DIR);\n+        Stream.of(modules).forEach(mn ->\n+                assertTrue(jmod(\"create\",\n+                        \"--class-path\", MODS_DIR.resolve(mn).toString(),\n+                        \"--main-class\", mn + \".Main\",\n+                        JMODS_DIR.resolve(mn + \".jmod\").toString()) == 0)\n+        );\n+\n+        \/\/ the run-time image created will have 4 modules with main classes\n+        createImage(IMAGE, \"com.foo\");\n+    }\n+\n+    @Test\n+    public void testComFoo() throws Exception {\n+        if (!hasJmods()) return;\n+\n+        Path java = IMAGE.resolve(\"bin\").resolve(\"java\");\n+        assertTrue(executeProcess(java.toString(),\n+                \"-m\", \"com.foo\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue() == 0);\n+    }\n+\n+    @Test\n+    public void testNetFoo() throws Exception {\n+        if (!hasJmods()) return;\n+\n+        Path java = IMAGE.resolve(\"bin\").resolve(\"java\");\n+        assertTrue(executeProcess(java.toString(),\n+                \"-m\", \"net.foo\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue() == 0);\n+    }\n+\n+    static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+        .orElseThrow(() -> new RuntimeException(\"jlink tool not found\"));\n+\n+    static final ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+        .orElseThrow(() -> new RuntimeException(\"jmod tool not found\"));\n+\n+    private static void createImage(Path outputDir, String... modules) throws Throwable {\n+        assertTrue(JLINK_TOOL.run(System.out, System.out,\n+                \"--output\", outputDir.toString(),\n+                \"--add-modules\", Arrays.stream(modules).collect(Collectors.joining(\",\")),\n+                \"--module-path\", JMODS_DIR.toString()) == 0);\n+    }\n+\n+    private static int jmod(String... options) {\n+        System.out.println(\"jmod \" + Arrays.asList(options));\n+        return JMOD_TOOL.run(System.out, System.out, options);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/ModuleMainClassTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.foo;\n+\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleFinder;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Sanity test if SystemModules pre-resolved at link-time for com.foo\n+ * with main class is loaded properly.\n+ *\/\n+public class Main {\n+    public static void main(String... args) throws Exception {\n+        ModuleDescriptor md = Main.class.getModule().getDescriptor();\n+        System.out.println(md);\n+\n+        checkMainClass(\"com.foo\", \"com.foo.Main\");\n+        checkMainClass(\"net.foo\", \"net.foo.Main\");\n+        \/*\n+        Stream.of(\"jdk.httpserver\", \"jdk.jfr\").forEach(mn ->\n+                ModuleFinder.ofSystem().find(mn).get().descriptor().mainClass()\n+                            .orElseThrow(() -> new RuntimeException(mn + \" no main class\"))\n+        );\n+        *\/\n+    }\n+\n+    static void checkMainClass(String mn, String mainClass) {\n+        String cn = ModuleFinder.ofSystem().find(mn).get().descriptor().mainClass().get();\n+        if (!cn.equals(mainClass)) {\n+            throw new RuntimeException(\"Mismatched main class of module \" + mn + \": \" + cn + \" expected: \" + mainClass);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/com.foo\/com\/foo\/Main.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module com.foo {\n+    requires jdk.httpserver;\n+    requires net.foo;\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/com.foo\/module-info.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-module jdk.test {\n+module net.foo {\n+    requires jdk.jfr;\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/net.foo\/module-info.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/runtime\/modules\/ModuleStress\/src\/jdk.test\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package net.foo;\n+\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleFinder;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Sanity test if SystemModules pre-resolved at link-time for net.foo\n+ * with main class is loaded properly.\n+ *\/\n+public class Main {\n+    public static void main(String... args) throws Exception {\n+        ModuleDescriptor md = Main.class.getModule().getDescriptor();\n+        System.out.println(md);\n+\n+        checkMainClass(\"com.foo\", \"com.foo.Main\");\n+        checkMainClass(\"net.foo\", \"net.foo.Main\");\n+        \/*\n+        Stream.of(\"jdk.httpserver\", \"jdk.jfr\").forEach(mn ->\n+                ModuleFinder.ofSystem().find(mn).get().descriptor().mainClass()\n+                        .orElseThrow(() -> new RuntimeException(mn + \" no main class\"))\n+        );\n+        *\/\n+    }\n+\n+    static void checkMainClass(String mn, String mainClass) {\n+        String cn = ModuleFinder.ofSystem().find(mn).get().descriptor().mainClass().get();\n+        if (!cn.equals(mainClass)) {\n+            throw new RuntimeException(\"Mismatched main class of module \" + mn + \": \" + cn + \" expected: \" + mainClass);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/net.foo\/net\/foo\/Main.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}