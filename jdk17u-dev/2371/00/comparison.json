{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,1 @@\n+        private final Platform platform;\n@@ -90,1 +91,1 @@\n-        DefaultExecutableImage(Path home, Set<String> modules) {\n+        DefaultExecutableImage(Path home, Set<String> modules, Platform p) {\n@@ -98,0 +99,1 @@\n+            this.platform = p;\n@@ -130,0 +132,5 @@\n+\n+        @Override\n+        public Platform getTargetPlatform() {\n+            return platform;\n+        }\n@@ -136,1 +143,1 @@\n-    private Platform targetPlatform;\n+    private Platform platform;\n@@ -151,0 +158,5 @@\n+    @Override\n+    public Platform getTargetPlatform() {\n+        return platform;\n+    }\n+\n@@ -161,1 +173,1 @@\n-            this.targetPlatform = Platform.toPlatform(value);\n+            this.platform = Platform.parsePlatform(value);\n@@ -477,1 +489,1 @@\n-        return targetPlatform == Platform.WINDOWS;\n+        return platform.os() == Platform.OperatingSystem.WINDOWS;\n@@ -512,1 +524,1 @@\n-        return new DefaultExecutableImage(root, modules);\n+        return new DefaultExecutableImage(root, modules, platform);\n@@ -554,1 +566,4 @@\n-            return new DefaultExecutableImage(root, retrieveModules(root));\n+            \/\/ It may be possible to extract the platform info from the given image.\n+            \/\/ --post-process-path is a hidden option and pass unknown platform for now.\n+            \/\/ --generate-cds-archive plugin cannot be used with --post-process-path option.\n+            return new DefaultExecutableImage(root, retrieveModules(root), Platform.UNKNOWN);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.tools.jlink.internal.Platform;\n@@ -77,0 +78,9 @@\n+\n+    \/**\n+     * Gets the platform of the image.\n+     *\n+     * @return {@code Platform} object representing the platform of the image\n+     *\/\n+    public default Platform getTargetPlatform() {\n+        return Platform.UNKNOWN;\n+    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/ImageBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,7 @@\n+\n+    \/**\n+     * The Platform of the image.\n+     *\n+     * @return Platform\n+     *\/\n+    public Platform getTargetPlatform();\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ExecutableImage.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImagePluginStack.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import jdk.tools.jlink.plugin.ResourcePoolModule;\n-\n@@ -34,6 +32,1 @@\n-public enum Platform {\n-    WINDOWS,\n-    LINUX,\n-    MACOS,\n-    AIX,\n-    UNKNOWN;\n+public record Platform(OperatingSystem os, Architecture arch) {\n@@ -41,3 +34,20 @@\n-    \/**\n-     * Returns the {@code Platform} derived from the target platform\n-     * in the {@code ModuleTarget} attribute.\n+    public enum OperatingSystem {\n+        WINDOWS,\n+        LINUX,\n+        MACOS,\n+        AIX,\n+        UNKNOWN;\n+    }\n+\n+    public enum Architecture {\n+        X86,\n+        x64,\n+        ARM,\n+        AARCH64,\n+        UNKNOWN;\n+    }\n+\n+    public static final Platform UNKNOWN = new Platform(OperatingSystem.UNKNOWN, Architecture.UNKNOWN);\n+\n+    \/*\n+     * Returns the {@code Platform} based on the platformString of the form <operating system>-<arch>.\n@@ -45,1 +55,1 @@\n-    public static Platform toPlatform(String targetPlatform) {\n+    public static Platform parsePlatform(String platformString) {\n@@ -47,1 +57,2 @@\n-        int index = targetPlatform.indexOf(\"-\");\n+        String archName;\n+        int index = platformString.indexOf(\"-\");\n@@ -49,1 +60,2 @@\n-            osName = targetPlatform;\n+            osName = platformString;\n+            archName = \"UNKNOWN\";\n@@ -51,1 +63,2 @@\n-            osName = targetPlatform.substring(0, index);\n+            osName = platformString.substring(0, index);\n+            archName = platformString.substring(index + 1);\n@@ -53,0 +66,1 @@\n+        OperatingSystem os;\n@@ -54,1 +68,1 @@\n-            return Platform.valueOf(osName.toUpperCase(Locale.ENGLISH));\n+            os = OperatingSystem.valueOf(osName.toUpperCase(Locale.ENGLISH));\n@@ -56,1 +70,1 @@\n-            return Platform.UNKNOWN;\n+            os = OperatingSystem.UNKNOWN;\n@@ -58,0 +72,2 @@\n+        Architecture arch = toArch(archName);\n+        return new Platform(os, arch);\n@@ -61,1 +77,1 @@\n-     * Returns the {@code Platform} to which the given module is target to.\n+     * @return true is it's a 64-bit platform\n@@ -63,7 +79,55 @@\n-    public static Platform getTargetPlatform(ResourcePoolModule module) {\n-        String targetPlatform = module.targetPlatform();\n-        if (targetPlatform != null) {\n-            return toPlatform(targetPlatform);\n-        } else {\n-            return Platform.UNKNOWN;\n-        }\n+    public boolean is64Bit() {\n+        return (arch() == Platform.Architecture.x64 ||\n+                arch() == Platform.Architecture.AARCH64);\n+    }\n+\n+    \/**\n+     * Returns the runtime {@code Platform}.\n+     *\/\n+    public static Platform runtime() {\n+        return new Platform(runtimeOS(), runtimeArch());\n+    }\n+\n+    \/**\n+     * Returns a {@code String} representation of a {@code Platform} in the format of <os>-<arch>\n+     *\/\n+    @Override\n+    public String toString() {\n+        return os.toString().toLowerCase() + \"-\" + arch.toString().toLowerCase();\n+    }\n+\n+    \/**\n+     * Returns the runtime {@code Platform.OperatingSystem}.\n+     *\/\n+    private static OperatingSystem runtimeOS() {\n+        String osName = System.getProperty(\"os.name\").substring(0, 3).toLowerCase();\n+        OperatingSystem os = switch (osName) {\n+            case \"win\" -> OperatingSystem.WINDOWS;\n+            case \"lin\" -> OperatingSystem.LINUX;\n+            case \"mac\" -> OperatingSystem.MACOS;\n+            case \"aix\" -> OperatingSystem.AIX;\n+            default    -> OperatingSystem.UNKNOWN;\n+        };\n+        return os;\n+    }\n+\n+    \/**\n+     * Returns the runtime {@code Platform.Architechrure}.\n+     *\/\n+    private static Architecture runtimeArch() {\n+        String archName = System.getProperty(\"os.arch\");\n+        return toArch(archName);\n+    }\n+\n+    \/**\n+     * Returns the {@code Platform.Architecture} based on the archName.\n+     *\/\n+    private static Architecture toArch(String archName) {\n+        Architecture arch = switch (archName) {\n+            case \"x86\"             -> Architecture.X86;\n+            case \"amd64\", \"x86_64\" -> Architecture.x64;\n+            case \"arm\"             -> Architecture.ARM;\n+            case \"aarch64\"         -> Architecture.AARCH64;\n+            default                -> Architecture.UNKNOWN;\n+        };\n+        return arch;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Platform.java","additions":90,"deletions":26,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.tools.jlink.internal.plugins;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+import jdk.tools.jlink.internal.ExecutableImage;\n+import jdk.tools.jlink.internal.Platform;\n+import jdk.tools.jlink.internal.PostProcessor;\n+import jdk.tools.jlink.plugin.PluginException;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+\n+\/**\n+ *\n+ * CDS plugin\n+ *\/\n+public final class CDSPlugin extends AbstractPlugin implements PostProcessor {\n+    private static final String NAME = \"generate-cds-archive\";\n+    private Platform targetPlatform;\n+    private Platform runtimePlatform;\n+\n+    public CDSPlugin() {\n+        super(NAME);\n+    }\n+\n+\n+    private String javaExecutableName() {\n+        if (targetPlatform.os() == Platform.OperatingSystem.WINDOWS) {\n+            return \"java.exe\";\n+        } else {\n+            return \"java\";\n+        }\n+    }\n+\n+    private void generateCDSArchive(ExecutableImage image, boolean noCoops) {\n+        List<String> javaCmd = new ArrayList<String>();\n+        Path javaPath = image.getHome().resolve(\"bin\").resolve(javaExecutableName());\n+        if (!Files.exists(javaPath)) {\n+            throw new PluginException(\"Cannot find java executable at: \" + javaPath.toString());\n+        }\n+        javaCmd.add(javaPath.toString());\n+        javaCmd.add(\"-Xshare:dump\");\n+        String archiveMsg = \"CDS\";\n+        if (noCoops) {\n+            javaCmd.add(\"-XX:-UseCompressedOops\");\n+            archiveMsg += \"-NOCOOPS\";\n+        }\n+        ProcessBuilder builder = new ProcessBuilder(javaCmd);\n+        int status = -1;\n+        try {\n+            Process p = builder.inheritIO().start();\n+            status = p.waitFor();\n+        } catch (InterruptedException | IOException e) {\n+            throw new PluginException(e);\n+        }\n+\n+        if (status != 0) {\n+            throw new PluginException(\"Failed creating \" + archiveMsg + \" archive!\");\n+        }\n+    }\n+\n+    @Override\n+    public List<String> process(ExecutableImage image) {\n+        targetPlatform = image.getTargetPlatform();\n+        runtimePlatform = Platform.runtime();\n+\n+        if (!targetPlatform.equals(runtimePlatform)) {\n+            throw new PluginException(\"Cannot generate CDS archives: target image platform \" +\n+                    targetPlatform.toString() + \" is different from runtime platform \" +\n+                    runtimePlatform.toString());\n+        }\n+\n+        Path classListPath = image.getHome().resolve(\"lib\").resolve(\"classlist\");\n+        if (Files.exists(classListPath)) {\n+            generateCDSArchive(image,false);\n+\n+            if (targetPlatform.is64Bit()) {\n+                generateCDSArchive(image,true);\n+            }\n+            System.out.println(\"Created CDS archive successfully\");\n+        } else {\n+            throw new PluginException(\"Cannot generate CDS archives: classlist not found: \" +\n+                                      classListPath.toString());\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Category getType() {\n+        return Category.PROCESSOR;\n+    }\n+\n+    @Override\n+    public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+        return in;\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/CDSPlugin.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,2 +248,3 @@\n-        Platform platform = Platform.getTargetPlatform(module);\n-        switch (platform) {\n+        String targetPlatform = module.targetPlatform();\n+        Platform platform = Platform.parsePlatform(targetPlatform);\n+        switch (platform.os()) {\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,7 @@\n+\n+generate-cds-archive.description=\\\n+CDS plugin: generate cds archives if the runtime image supports CDS feature.\\n\\\n+\n+generate-cds-archive.usage=\\\n+\\  --generate-cds-archive    Generate CDS archives if the runtime image supports CDS feature.\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,2 @@\n-        jdk.tools.jlink.internal.plugins.VendorVersionPlugin;\n+        jdk.tools.jlink.internal.plugins.VendorVersionPlugin,\n+        jdk.tools.jlink.internal.plugins.CDSPlugin;\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.*;\n+\n+import tests.Helper;\n+\n+\/* @test\n+ * @bug 8264322\n+ * @summary Test the --generate-cds-archive plugin\n+ * @requires vm.cds\n+ * @library ..\/..\/lib\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.*\n+ * @run main CDSPluginTest\n+ *\/\n+\n+public class CDSPluginTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+\n+        Helper helper = Helper.newHelper();\n+        if (helper == null) {\n+            System.err.println(\"Test not run\");\n+            return;\n+        }\n+\n+        var module = \"cds\";\n+        helper.generateDefaultJModule(module);\n+        var image = helper.generateDefaultImage(new String[] { \"--generate-cds-archive\" },\n+                                                module)\n+            .assertSuccess();\n+\n+        String subDir;\n+        String sep = File.separator;\n+        if (Platform.isWindows()) {\n+            subDir = \"bin\" + sep;\n+        } else {\n+            subDir = \"lib\" + sep;\n+        }\n+        subDir += \"server\" + sep;\n+        helper.checkImage(image, module, null, null,\n+                          new String[] { subDir + \"classes.jsa\", subDir + \"classes_nocoops.jsa\" });\n+\n+       \/\/ Simulate different platforms between current runtime and target image.\n+       if (Platform.isLinux()) {\n+           System.out.println(\"---- Test different platforms scenario ----\");\n+           String jlinkPath = JDKToolFinder.getJDKTool(\"jlink\");\n+           String[] cmd = {jlinkPath, \"--add-modules\", \"java.base,java.logging\",\n+                           \"-J-Dos.name=windows\", \"--generate-cds-archive\",\n+                           \"--output\", System.getProperty(\"test.classes\") + sep + module + \"-tmp\"};\n+           StringBuilder cmdLine = new StringBuilder();\n+           for (String s : cmd) {\n+               cmdLine.append(s).append(' ');\n+           }\n+           System.out.println(\"Command line: [\" + cmdLine.toString() + \"]\");\n+           ProcessBuilder pb = new ProcessBuilder(cmd);\n+           OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+           System.out.println(\"    stdout: \" + out.getStdout());\n+           out.shouldMatch(\"Error: Cannot generate CDS archives: target image platform linux-.*is different from runtime platform windows-.*\");\n+           out.shouldHaveExitValue(1);\n+       }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}