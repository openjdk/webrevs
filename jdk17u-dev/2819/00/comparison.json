{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -54,0 +53,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -76,0 +76,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -302,1 +303,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -56,1 +57,1 @@\n- *        DigestEchoServer\n+ *        DigestEchoServer jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -134,1 +135,1 @@\n-            sserver1.setHttpsConfigurator(new HttpsConfigurator(context));\n+            sserver1.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), context));\n","filename":"test\/jdk\/java\/net\/httpclient\/AuthFilterCacheTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -54,1 +55,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -63,0 +63,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -270,1 +272,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/ConcurrentResponses.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -46,1 +47,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -55,0 +55,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -203,1 +205,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/CustomResponseSubscriber.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n- * @modules java.net.http\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestServerConfigurator\n+ * @modules java.net.http\/jdk.internal.net.http.common\n@@ -29,2 +31,0 @@\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.SimpleSSLContext\n@@ -37,1 +37,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -52,0 +51,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -151,1 +152,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/ExpectContinue.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -23,2 +23,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -26,0 +24,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -63,1 +62,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -72,0 +70,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -178,1 +177,1 @@\n-            sserver1.setHttpsConfigurator(new HttpsConfigurator(context));\n+            sserver1.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), context));\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRedirectTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -23,2 +23,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -26,0 +24,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -54,1 +53,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -65,0 +63,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -141,1 +140,1 @@\n-            sserver1.setHttpsConfigurator(new HttpsConfigurator(context));\n+            sserver1.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), context));\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpSlowServerTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -46,1 +47,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -56,0 +56,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -192,1 +194,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/ImmutableFlowItems.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -23,2 +23,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -64,1 +62,1 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -85,0 +83,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -1014,1 +1013,1 @@\n-            sserver1.setHttpsConfigurator(new HttpsConfigurator(context));\n+            sserver1.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), context));\n","filename":"test\/jdk\/java\/net\/httpclient\/LargeHandshakeTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -23,2 +23,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -26,0 +24,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -41,1 +40,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -54,1 +52,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -67,0 +64,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -139,1 +137,1 @@\n-            sserver1.setHttpsConfigurator(new HttpsConfigurator(context));\n+            sserver1.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), context));\n","filename":"test\/jdk\/java\/net\/httpclient\/LargeResponseTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -53,0 +52,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -114,1 +115,1 @@\n-        httpsServer.setHttpsConfigurator(new HttpsConfigurator(ctx));\n+        httpsServer.setHttpsConfigurator(new TestServerConfigurator(addr.getAddress(), ctx));\n","filename":"test\/jdk\/java\/net\/httpclient\/LightWeightHttpServer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ *        jdk.httpclient.test.lib.common.TestServerConfigurator\n@@ -49,1 +50,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -61,0 +61,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -210,1 +212,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/MappingResponseSubscriber.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * @modules java.net.http\n+ * @modules java.net.http\/jdk.internal.net.http.common\n@@ -65,1 +65,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n@@ -69,1 +69,1 @@\n- * @build jdk.test.lib.net.SimpleSSLContext\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestServerConfigurator\n","filename":"test\/jdk\/java\/net\/httpclient\/RequestBodyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+\/\/ for jdk\/httpclient\/test\/lib\/* classes\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n+};\n+\n@@ -55,0 +60,2 @@\n+\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n","filename":"test\/jdk\/java\/net\/httpclient\/RequestBodyTest.policy","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -801,2 +800,2 @@\n-                    InetSocketAddress sa = new InetSocketAddress(\n-                            InetAddress.getLoopbackAddress(), 0);\n+                    InetAddress loopback = InetAddress.getLoopbackAddress();\n+                    InetSocketAddress sa = new InetSocketAddress(loopback, 0);\n@@ -808,1 +807,1 @@\n-                        https.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+                        https.setHttpsConfigurator(new TestServerConfigurator(loopback, sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/HttpServerAdapters.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.httpclient.test.lib.common;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.net.ssl.SNIHostName;\n+import javax.net.ssl.SNIMatcher;\n+import javax.net.ssl.SNIServerName;\n+import javax.net.ssl.StandardConstants;\n+\n+import jdk.internal.net.http.common.Logger;\n+import jdk.internal.net.http.common.Utils;\n+\n+\/**\n+ * A (server side) SNI host name matcher. Implementation is based on the expectations set in\n+ * section 3 of RFC-6066.\n+ * A server can be configured with an instance of this class.\n+ * <p>\n+ * The RFC states:\n+ * {@code\n+ * Currently, the only server names supported are DNS hostnames; however, this does not imply\n+ * any dependency of TLS on DNS,\n+ * ....\n+ * TLS MAY treat provided server names as opaque data and pass the names and types to the application.\n+ * }\n+ * <p>\n+ * The implementation in this class doesn't mandate the configured\/recognized SNI host name as DNS\n+ * resolvable. However, the {@code ServerNameMatcher} can be configured to treat the SNI host name\n+ * as DNS resolvable by passing {@code true} to the {@code attemptDNSResolution} parameter of\n+ * the {@link #ServerNameMatcher(boolean, String) constructor}\n+ *\/\n+public class ServerNameMatcher extends SNIMatcher {\n+\n+    private final Logger debug;\n+    private final boolean attemptDNSResolution;\n+    private final Set<String> recognizedSNINames;\n+\n+    \/**\n+     * Creates a ServerNameMatcher which recognizes the passed {@code recognizedSNIName}\n+     *\n+     * @param recognizedSNIName The SNI host name\n+     *\/\n+    public ServerNameMatcher(final String recognizedSNIName) {\n+        this(false, recognizedSNIName);\n+    }\n+\n+    \/**\n+     * Creates a ServerNameMatcher which recognizes the passed SNI host name\n+     * If {@code attemptDNSResolution} is {@code true}, then when\n+     * {@link #matches(SNIServerName) matching} a client requested SNI name against the server\n+     * recognized SNI name, the implementation will, as a last resort do a DNS resolution of the\n+     * client requested SNI name and the server recognized SNI name and compare them to\n+     * try and find a match. If {@code attemptDNSResolution} is false, then no DNS resolution is\n+     * attempted and instead the SNI names are literally compared.\n+     *\n+     * @param attemptDNSResolution If true then a DNS resolution will be attempted during\n+     *                             {@link #matches(SNIServerName) SNI matching}\n+     * @param recognizedSNIName    SNI host name\n+     *\/\n+    public ServerNameMatcher(final boolean attemptDNSResolution,\n+                             final String recognizedSNIName) {\n+        super(StandardConstants.SNI_HOST_NAME);\n+        Objects.requireNonNull(recognizedSNIName);\n+        this.debug = Utils.getDebugLogger(() -> \"SNIMatcher\");\n+        this.recognizedSNINames = Set.of(recognizedSNIName);\n+        this.attemptDNSResolution = attemptDNSResolution;\n+    }\n+\n+    \/**\n+     * @param clientRequestedSNI the SNI name requested by the client\n+     *                           {@return true if the {@code clientRequestedSNI} is recognized by\n+     *                           the server. false otherwise}\n+     *\/\n+    @Override\n+    public boolean matches(final SNIServerName clientRequestedSNI) {\n+        Objects.requireNonNull(clientRequestedSNI);\n+        if (!SNIHostName.class.isInstance(clientRequestedSNI)) {\n+            if (debug.on()) {\n+                debug.log(\"SNI match (against \" + recognizedSNINames + \")\" +\n+                        \" failed - not a SNIHostName: \" + clientRequestedSNI);\n+            }\n+            \/\/ we only support SNIHostName type\n+            return false;\n+        }\n+        final String requestedName = ((SNIHostName) clientRequestedSNI).getAsciiName();\n+        if (recognizedSNINames.contains(requestedName)) {\n+            if (debug.on()) {\n+                debug.log(\"SNI match (against \" + recognizedSNINames + \") passed: \"\n+                        + clientRequestedSNI);\n+            }\n+            return true;\n+        }\n+        if (attemptDNSResolution) {\n+            final boolean res = matchesAfterDNSResolution(requestedName);\n+            if (debug.on()) {\n+                debug.log(\"SNI match (against \" + recognizedSNINames + \") \"\n+                        + (res ? \"passed\" : \"failed\") + \": \" + clientRequestedSNI);\n+            }\n+            return res;\n+        }\n+        if (debug.on()) {\n+            debug.log(\"SNI match (against \" + recognizedSNINames + \") failed: \" + clientRequestedSNI);\n+        }\n+        return false;\n+    }\n+\n+    private boolean matchesAfterDNSResolution(final String clientRequestedSNI) {\n+        final InetAddress clientRequestedAddr;\n+        try {\n+            clientRequestedAddr = InetAddress.getByName(clientRequestedSNI);\n+        } catch (IOException e) {\n+            return false;\n+        }\n+        for (final String recognizedSNIName : recognizedSNINames) {\n+            final InetAddress serverRecognizedAddr;\n+            try {\n+                serverRecognizedAddr = InetAddress.getByName(recognizedSNIName);\n+            } catch (IOException e) {\n+                \/\/ try next\n+                continue;\n+            }\n+            if (serverRecognizedAddr.equals(clientRequestedAddr)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/ServerNameMatcher.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.httpclient.test.lib.common;\n+\n+import java.net.InetAddress;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.List;\n+\n+import javax.net.ssl.SNIMatcher;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLParameters;\n+\n+import com.sun.net.httpserver.HttpsConfigurator;\n+import com.sun.net.httpserver.HttpsParameters;\n+\n+\/**\n+ * A {@link HttpsConfigurator} that can be used with the HTTP1 test server over HTTPS.\n+ * This configurator {@link #configure(HttpsParameters) configures} the server's\n+ * {@link HttpsParameters} with the necessary {@link SSLParameters} including a\n+ * {@link SNIMatcher}\n+ *\/\n+public final class TestServerConfigurator extends HttpsConfigurator {\n+\n+    private final InetAddress serverAddr;\n+\n+    \/**\n+     * Creates a Https configuration, with the given {@link SSLContext}.\n+     *\n+     * @param serverAddr the address to which the server is bound\n+     * @param context    the {@code SSLContext} to use for this configurator\n+     * @throws NullPointerException if no {@code SSLContext} supplied\n+     *\/\n+    public TestServerConfigurator(final InetAddress serverAddr, final SSLContext context) {\n+        super(context);\n+        this.serverAddr = serverAddr;\n+    }\n+\n+    @Override\n+    public void configure(final HttpsParameters params) {\n+        final SSLParameters sslParams = getSSLContext().getDefaultSSLParameters();\n+        @SuppressWarnings(\"removal\") final SecurityManager sm = System.getSecurityManager();\n+        final String hostname;\n+        if (sm == null) {\n+            hostname = serverAddr.getHostName();\n+        } else {\n+            final PrivilegedAction<String> action = () -> serverAddr.getHostName();\n+            hostname = AccessController.doPrivileged(action);\n+        }\n+        final List<SNIMatcher> sniMatchers = List.of(new ServerNameMatcher(hostname));\n+        sslParams.setSNIMatchers(sniMatchers);\n+        \/\/ configure the server with these custom SSLParameters\n+        params.setSSLParameters(sslParams);\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/TestServerConfigurator.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -28,3 +28,3 @@\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.net.http\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestServerConfigurator\n+ * @modules java.net.http\/jdk.internal.net.http.common\n@@ -37,1 +37,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -40,0 +39,1 @@\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -157,1 +157,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/HandshakeUrlEncodingTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @modules java.net.http\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.TestServerConfigurator\n+ * @modules java.net.http\/jdk.internal.net.http.common\n@@ -37,1 +37,0 @@\n-import com.sun.net.httpserver.HttpsConfigurator;\n@@ -50,0 +49,2 @@\n+\n+import jdk.httpclient.test.lib.common.TestServerConfigurator;\n@@ -175,1 +176,1 @@\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsTestServer.setHttpsConfigurator(new TestServerConfigurator(sa.getAddress(), sslContext));\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WSHandshakeExceptionTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}