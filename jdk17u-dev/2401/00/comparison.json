{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 4166809\n+ * @summary Make sure NPE is thrown when calling\n+ *     Graphics.drawString(null, int, int)\n+ * @run main DrawNullStringTest\n+ *\/\n+import java.awt.image.BufferedImage;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+\n+public class DrawNullStringTest {\n+    static String s = null;\n+    static boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            BufferedImage img = new BufferedImage(100, 100,\n+                                                  BufferedImage.TYPE_INT_RGB);\n+            Graphics g = (Graphics)(img.getGraphics());\n+            try {\n+                g.drawString(s, 30, 30);\n+            } catch (NullPointerException npe) {\n+                System.out.println(\"NPE thrown - test passes\");\n+                passed = true;\n+            }\n+\n+            if (passed == false) {\n+                throw new Error(\"No Exception was thrown - should be an NPE\");\n+            }\n+        });\n+    }\n+\n+ }\/\/ class DrawNullStringTest\n","filename":"test\/jdk\/java\/awt\/Graphics\/DrawNullStringTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4746122\n+ * @summary Checks getGraphics doesn't throw NullPointerExcepton for invalid colors and font.\n+ * @run main GetGraphicsTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+public class GetGraphicsTest extends Frame {\n+    public Color getBackground() {\n+        return null;\n+    }\n+    public Color getForeground() {\n+        return null;\n+    }\n+    public Font getFont() {\n+        return null;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        GetGraphicsTest test = new GetGraphicsTest();\n+        Graphics g = test.getGraphics();\n+    }\n+}\/\/ class GetGraphicsTest\n","filename":"test\/jdk\/java\/awt\/Graphics\/GetGraphicsTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4930685\n+  @summary Test effect of GridBagConstraints on padding \/ layout\n+  @key headful\n+  @run main GridBagLayoutButtonsOverlapTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridBagLayout;\n+import java.awt.GridBagConstraints;\n+\n+public class GridBagLayoutButtonsOverlapTest {\n+    public static GridBagLayout gridbag;\n+    public static GridBagConstraints c;\n+    public static Button b1;\n+    public static Button b2;\n+    public static Button b4;\n+    public static Button b5;\n+    public static Button b6;\n+    public static Button b7;\n+    public static Button b8;\n+    public static Button b9;\n+    public static Button b10;\n+    public static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                createUI();\n+                test();\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+\n+    public static void createUI() {\n+        frame = new Frame();\n+        gridbag = new GridBagLayout();\n+        GridBagConstraints c = new GridBagConstraints();\n+        frame.setFont(new Font(Font.DIALOG, Font.PLAIN, 14));\n+        frame.setLayout(gridbag);\n+        c.fill = GridBagConstraints.BOTH;\n+        c.weightx = 1.0;\n+        b1 = makeButton(\"button1\", gridbag, c);\n+        b2 = makeButton(\"button2\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        b4 = makeButton(\"button4\", gridbag, c);\n+\n+        c.weightx = 0.0;\n+        b5 = makeButton(\"button5\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.RELATIVE;\n+        b6 = makeButton(\"button6\", gridbag, c);\n+\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        b7 = makeButton(\"button7\", gridbag, c);\n+\n+        c.gridwidth = 1;\n+        c.gridheight = 2;\n+        c.weighty = 1.0;\n+        b8 = makeButton(\"button8\", gridbag, c);\n+\n+        c.weighty = 0.0;\n+        c.gridwidth = GridBagConstraints.REMAINDER;\n+        c.gridheight = 1;\n+        b9 = makeButton(\"button9\", gridbag, c);\n+        b10 = makeButton(\"button10\", gridbag, c);\n+    }\n+\n+    public static void test() {\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+\n+        int b1Corner = b1.getLocation().y + b1.getHeight();\n+        int b5Corner = b5.getLocation().y;\n+        if (b1Corner > b5Corner) { \/\/they are equals each other in best case\n+            throw new RuntimeException(\"Buttons are overlapped when container is small enough\");\n+        }\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    protected static Button makeButton(String name,\n+                                 GridBagLayout gridbag,\n+                                 GridBagConstraints c) {\n+        Button button = new Button(name);\n+        gridbag.setConstraints(button, c);\n+        frame.add(button);\n+        return button;\n+    }\n+\n+}\/\/ class\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/GridBagLayoutButtonsOverlapTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5055696\n+  @summary REGRESSION: GridBagLayout throws ArrayIndexOutOfBoundsExceptions\n+  @key headful\n+  @run main GridBagLayoutOutOfBoundsTest\n+*\/\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridBagLayout;\n+import java.awt.GridBagConstraints;\n+import java.awt.Panel;\n+\n+public class GridBagLayoutOutOfBoundsTest {\n+    final static int L=2;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                frame = new Frame(\"GridBagLayoutOutOfBoundsTestFrame\");\n+                frame.validate();\n+                GridBagLayout layout = new GridBagLayout();\n+                frame.setLayout(layout);\n+                GridBagConstraints gridBagConstraints;\n+\n+                Button[] mb = new Button[L];\n+                for (int i = 0; i<L; i++){\n+                    mb[i] = new Button(\"\"+i);\n+                }\n+                for (int i = 0; i<mb.length; i++){\n+                    gridBagConstraints = new GridBagConstraints();\n+                    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n+                    gridBagConstraints.gridheight = GridBagConstraints.REMAINDER;\n+                    frame.add(mb[i], gridBagConstraints);\n+                }\n+                frame.setVisible(true);\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/GridBagLayoutOutOfBoundsTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}