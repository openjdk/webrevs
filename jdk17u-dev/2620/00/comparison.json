{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,7 @@\n-import static java.util.Calendar.*;\n+import java.util.stream.Stream;\n+\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Calendar.ERA;\n+import static java.util.Calendar.FEBRUARY;\n+import static java.util.Calendar.LONG;\n+import static java.util.Calendar.YEAR;\n@@ -40,1 +46,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n@@ -94,13 +99,12 @@\n-            throws Throwable{\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(Utils.TEST_CLASS_PATH)\n-                .addToolArg(\"-Djdk.calendar.japanese.supplemental.era=\" + property)\n-                .addToolArg(\"SupplementalJapaneseEraTest\");\n-        for (String para: javaParam) {\n-            launcher.addToolArg(para);\n-        }\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                .getExitValue();\n+            throws Throwable {\n+        List<String> params = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASS_PATH,\n+                \"-Djdk.calendar.japanese.supplemental.era=\" + property,\n+                \"SupplementalJapaneseEraTest\");\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(params.stream(), javaParam.stream()).toList());\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n+\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTestRun.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n@@ -181,16 +180,12 @@\n-            String param1, String param2, String param3) throws Throwable{\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(Utils.TEST_CLASS_PATH)\n-                .addToolArg(\"-Djava.util.logging.config.class=LocaleProviders$LogConfig\")\n-                .addToolArg(\"-Djava.locale.providers=\" + prefList)\n-                .addToolArg(\"--add-exports=java.base\/sun.util.locale.provider=ALL-UNNAMED\")\n-                .addToolArg(\"LocaleProviders\")\n-                .addToolArg(methodName)\n-                .addToolArg(param1)\n-                .addToolArg(param2)\n-                .addToolArg(param3);\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                .getExitValue();\n+            String param1, String param2, String param3) throws Throwable {\n+\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASS_PATH,\n+                \"-Djava.util.logging.config.class=LocaleProviders$LogConfig\",\n+                \"-Djava.locale.providers=\" + prefList,\n+                \"--add-exports=java.base\/sun.util.locale.provider=ALL-UNNAMED\",\n+                \"LocaleProviders\", methodName, param1, param2, param3);\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersRun.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,9 +87,7 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(cp)\n-                .addToolArg(\"MissingResourceCauseTest\");\n-\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                .getExitValue();\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", cp,\n+                \"MissingResourceCauseTest\");\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/Control\/MissingResourceCauseTestRun.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.Utils;\n@@ -136,11 +137,9 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-p\")\n-                .addToolArg(mp)\n-                .addToolArg(\"-m\")\n-                .addToolArg(mn);\n-        localeList.forEach(launcher::addToolArg);\n-\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                                   .getExitValue();\n+        List<String> args = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-p\", mp,\n+                \"-m\", mn);\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(args.stream(), localeList.stream()).toList());\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n@@ -164,10 +163,10 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(cp)\n-                .addToolArg(\"-p\")\n-                .addToolArg(mp)\n-                .addToolArg(\"-m\")\n-                .addToolArg(mn);\n-        localeList.forEach(launcher::addToolArg);\n+        List<String> args = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", cp,\n+                \"-p\", mp,\n+                \"-m\", mn);\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(args.stream(), localeList.stream()).toList());\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n@@ -175,2 +174,0 @@\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                                   .getExitValue();\n@@ -201,9 +198,10 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-Djava.locale.useOldISOCodes=true\")\n-                .addToolArg(\"-p\")\n-                .addToolArg(mp)\n-                .addToolArg(\"-m\")\n-                .addToolArg(mn);\n-        localeList.forEach(launcher::addToolArg);\n+        List<String> args = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-Djava.locale.useOldISOCodes=true\",\n+                \"-p\", mp,\n+                \"-m\", mn);\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(args.stream(), localeList.stream()).toList());\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n@@ -211,2 +209,0 @@\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                .getExitValue();\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/ModuleTestUtil.java","additions":31,"deletions":35,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,10 +74,7 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(Utils.TEST_CLASSES)\n-                .addToolArg(\"Main\")\n-                .addToolArg(Utils.TEST_CLASSES);\n-\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                                   .getExitValue();\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASSES,\n+                \"Main\", Utils.TEST_CLASSES);\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/layer\/LayerTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.util.stream.Stream;\n@@ -76,14 +77,10 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(Utils.TEST_CLASSES)\n-                .addToolArg(\"--module-path\")\n-                .addToolArg(MODS_DIR.toString())\n-                .addToolArg(\"--add-modules\")\n-                .addToolArg(\"bundles\")\n-                .addToolArg(\"Main\");\n-        LOCALE_LIST.forEach(launcher::addToolArg);\n-\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                                   .getExitValue();\n+        List<String> args = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASSES,\n+                \"--module-path\", MODS_DIR.toString(),\n+                \"--add-modules\", \"bundles\",\n+                \"Main\");\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(args.stream(), LOCALE_LIST.stream()).toList());\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n@@ -96,13 +93,9 @@\n-        launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\")\n-                .addToolArg(\"-cp\")\n-                .addToolArg(Utils.TEST_CLASSES)\n-                .addToolArg(\"--module-path\")\n-                .addToolArg(MODS_DIR.toString())\n-                .addToolArg(\"--add-modules\")\n-                .addToolArg(\"bundles\")\n-                .addToolArg(\"--add-opens\")\n-                .addToolArg(\"bundles\/jdk.test.internal.resources=ALL-UNNAMED\")\n-                .addToolArg(\"Main\");\n-        LOCALE_LIST.forEach(launcher::addToolArg);\n+        List<String> argsWithOpens = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASSES,\n+                \"--module-path\", MODS_DIR.toString(),\n+                \"--add-modules\", \"bundles\",\n+                \"--add-opens\", \"bundles\/jdk.test.internal.resources=ALL-UNNAMED\",\n+                \"Main\");\n+        pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(argsWithOpens.stream(), LOCALE_LIST.stream()).toList());\n@@ -110,2 +103,2 @@\n-        exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                               .getExitValue();\n+        \/\/ Evaluate process status\n+        exitCode = ProcessTools.executeCommand(pb).getExitValue();\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/unnamed\/UnNamedTest.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.util.stream.Stream;\n@@ -46,0 +47,1 @@\n+\n@@ -331,6 +333,5 @@\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-        launcher.addToolArg(\"-ea\")\n-                .addToolArg(\"-esa\");\n-        argsList.forEach(launcher::addToolArg);\n-\n-        return ProcessTools.executeCommand(launcher.getCommand()).getExitValue();\n+        \/\/ Build process (with VM flags)\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(Stream.of(\"-ea\", \"-esa\"), argsList.stream()).toList());\n+        \/\/ Evaluate process status\n+        return ProcessTools.executeCommand(pb).getExitValue();\n@@ -338,1 +339,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/visibility\/VisibilityTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+\n@@ -34,1 +35,0 @@\n-import java.util.List;\n@@ -40,0 +40,1 @@\n+\n@@ -42,0 +43,1 @@\n+\n@@ -49,1 +51,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(List.of(\"CustomTzIDCheckDST\", \"runTZTest\"));\n+            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"CustomTzIDCheckDST\", \"runTZTest\");\n","filename":"test\/jdk\/java\/util\/TimeZone\/CustomTzIDCheckDST.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,11 +69,9 @@\n-            JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n-            launcher.addToolArg(\"-Djava.security.manager\")\n-                    .addToolArg(\"-Djava.security.debug=access,failure,policy\")\n-                    .addToolArg(\"-ea\")\n-                    .addToolArg(\"-esa\")\n-                    .addToolArg(\"-cp\")\n-                    .addToolArg(jarPath)\n-                    .addToolArg(\"TimeZoneDatePermissionCheck\");\n-\n-            int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                    .getExitValue();\n+            \/\/ Build process (with VM flags)\n+            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                    \"-Djava.security.manager\",\n+                    \"-Djava.security.debug=access,failure,policy\",\n+                    \"-ea\", \"-esa\",\n+                    \"-cp\", jarPath,\n+                    \"TimeZoneDatePermissionCheck\");\n+            \/\/ Evaluate process status\n+            int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneDatePermissionCheckRun.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+ * @key randomness\n+ * @library \/test\/lib\n@@ -32,1 +34,0 @@\n- * @key randomness\n@@ -53,1 +54,0 @@\n-import java.util.Arrays;\n@@ -66,0 +66,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -77,1 +79,3 @@\n-            ProcessBuilder pb = new ProcessBuilder(javaChildArgs);\n+            \/\/ Build process (with VM flags)\n+            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                    javaChildArgs);\n@@ -154,3 +158,0 @@\n-    private static final String javaExe =\n-        System.getProperty(\"java.home\") +\n-        File.separator + \"bin\" + File.separator + \"java\";\n@@ -164,4 +165,2 @@\n-    private static final List<String> javaChildArgs =\n-        Arrays.asList(new String[]\n-            { javaExe, \"-classpath\", classpath,\n-              \"LoggingDeadlock2$JavaChild\"});\n+   private static final List<String> javaChildArgs = List.of(\n+       \"-classpath\", classpath, \"LoggingDeadlock2$JavaChild\");\n","filename":"test\/jdk\/java\/util\/logging\/LoggingDeadlock2.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.nio.file.Paths;\n@@ -164,5 +163,1 @@\n-        String javaHome = System.getProperty(\"java.home\");\n-        String java = Paths.get(javaHome, \"bin\", \"java\").toString();\n-        String[] cmd = { java, \"-jar\", zipFile.getName() };\n-        ProcessBuilder pb = new ProcessBuilder(cmd);\n-        OutputAnalyzer a = ProcessTools.executeProcess(pb);\n+        OutputAnalyzer a = ProcessTools.executeTestJvm(\"-jar\", zipFile.getName());\n","filename":"test\/jdk\/java\/util\/zip\/EntryCount64k.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}