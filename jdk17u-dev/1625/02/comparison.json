{"files":[{"patch":"@@ -29,3 +29,0 @@\n-import java.io.FileInputStream;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n@@ -33,0 +30,1 @@\n+import java.security.PrivilegedAction;\n@@ -57,0 +55,2 @@\n+import sun.awt.util.ThreadGroupUtils;\n+\n@@ -207,1 +207,1 @@\n-\n+    @SuppressWarnings(\"removal\")\n@@ -211,4 +211,8 @@\n-            Thread thr = new Thread(null, new PrinterChangeListener(),\n-                                    \"PrinterListener\", 0, false);\n-            thr.setDaemon(true);\n-            thr.start();\n+            AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n+                Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n+                                        new PrinterChangeListener(),\n+                                        \"PrinterListener\", 0, false);\n+                thr.setContextClassLoader(null);\n+                thr.setDaemon(true);\n+                return thr;\n+            }).start();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -44,0 +46,2 @@\n+import sun.awt.util.ThreadGroupUtils;\n+\n@@ -84,0 +88,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -90,4 +95,8 @@\n-            Thread thr = new Thread(null, new PrinterChangeListener(),\n-                                    \"PrinterListener\", 0, false);\n-            thr.setDaemon(true);\n-            thr.start();\n+            AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n+                Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n+                                        new PrinterChangeListener(),\n+                                        \"PrinterListener\", 0, false);\n+                thr.setContextClassLoader(null);\n+                thr.setDaemon(true);\n+                return thr;\n+            }).start();\n@@ -96,4 +105,8 @@\n-            Thread remThr = new Thread(null, new RemotePrinterChangeListener(),\n-                                       \"RemotePrinterListener\", 0, false);\n-            remThr.setDaemon(true);\n-            remThr.start();\n+            AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n+                Thread thr = new Thread(ThreadGroupUtils.getRootThreadGroup(),\n+                                        new RemotePrinterChangeListener(),\n+                                        \"RemotePrinterListener\", 0, false);\n+                thr.setContextClassLoader(null);\n+                thr.setDaemon(true);\n+                return thr;\n+            }).start();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import javax.print.DocFlavor;\n+import javax.print.PrintServiceLookup;\n+\n+\/**\n+ * @test\n+ * @bug 8273831\n+ * @summary Tests custom class loader cleanup\n+ *\/\n+public final class FlushCustomClassLoader {\n+\n+    public static void main(String[] args) throws Exception {\n+        Reference<ClassLoader> loader = getLoader(\"testMethod\");\n+\n+        int attempt = 0;\n+        while (loader.get() != null) {\n+            if (++attempt > 10) {\n+                throw new RuntimeException(\"Too many attempts: \" + attempt);\n+            }\n+            System.gc();\n+            Thread.sleep(1000);\n+            System.out.println(\"Not freed, attempt: \" + attempt);\n+        }\n+    }\n+\n+    public static void testMethod() {\n+        DocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;\n+        PrintServiceLookup.lookupPrintServices(flavor, null);\n+    }\n+\n+    private static Reference<ClassLoader> getLoader(String m) throws Exception {\n+        \/*\n+         * The print services are stored per the AppContext, and each AppContext\n+         * caches the \"current\" class loader during creation.\n+         * see javax.print.PrintServiceLookup.\n+         *\n+         * To prevent AppContext from cache our test loader we force AppContext\n+         * creation early by the invokeAndWait.\n+         * The \"EventQueue.invokeAndWait(() -> {});\" can be removed when the\n+         * AppContext usage will be deleted in the PrintServiceLookup\n+         *\/\n+        EventQueue.invokeAndWait(() -> {});\n+\n+        URL url = FlushCustomClassLoader.class.getProtectionDomain()\n+                                              .getCodeSource().getLocation();\n+        URLClassLoader loader = new URLClassLoader(new URL[]{url}, null);\n+\n+        Thread ct = Thread.currentThread();\n+        ct.setContextClassLoader(loader);\n+        Class<?> cls = Class.forName(\"FlushCustomClassLoader\", true, loader);\n+        cls.getDeclaredMethod(m).invoke(null);\n+        ct.setContextClassLoader(null);\n+        loader.close();\n+        return new WeakReference<>(loader);\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/PrintServiceLookup\/FlushCustomClassLoader.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}