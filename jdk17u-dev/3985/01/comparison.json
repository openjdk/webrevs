{"files":[{"patch":"@@ -463,0 +463,1 @@\n+java\/awt\/ScrollPane\/ScrollPaneEventType.java 8296516 macosx-all\n@@ -504,2 +505,0 @@\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java 8029249 macosx-all\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java 8029249 macosx-all\n@@ -709,1 +708,1 @@\n-javax\/swing\/JFileChooser\/6798062\/bug6798062.java 8146446 windows-all\n+javax\/swing\/JFileChooser\/bug6798062.java 8146446 windows-all\n@@ -828,1 +827,1 @@\n-javax\/swing\/JTabbedPane\/4666224\/bug4666224.java 8144124  macosx-all\n+javax\/swing\/JTabbedPane\/bug4666224.java 8144124  macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4152524\n+ * @summary ScrollPane AS_NEEDED always places scrollbars first time component\n+ *          is laid out\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneAsNeededTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.ScrollPane;\n+\n+public class ScrollPaneAsNeededTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. You will see a frame titled 'ScrollPane as needed'\n+                   of minimum possible size in the middle of the screen.\n+                2. If for the first resize of frame(using mouse) to\n+                   a very big size(may be, to half the area of the screen)\n+                   the scrollbars(any - horizontal, vertical or both)\n+                   appear, click FAIL else, click PASS.\n+                                           \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneAsNeededTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame f = new Frame(\"ScrollPane as needed\");\n+        f.setLayout(new BorderLayout());\n+        ScrollPane sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+        sp.add(new Button(\"TEST\"));\n+        f.add(\"Center\", sp);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneAsNeededTest.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4100671\n+ * @summary removing and adding back ScrollPane component does not work\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneComponentTest\n+ *\/\n+\n+import java.awt.Adjustable;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ScrollPaneComponentTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Notice the scrollbars (horizontal and vertical)\n+                   in the Frame titled 'ScrollPane Component Test'\n+                2. Click the button labeled 'Remove and add back\n+                   ScrollPane Contents'\n+                3. If the Scrollbars (horizontal or vertical or both)\n+                   disappears in the Frame, then press FAIL, else press PASS.\n+                                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneComponentTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame fr = new Frame(\"ScrollPane Component Test\");\n+        fr.setLayout(new BorderLayout());\n+        ScrollTester test = new ScrollTester();\n+\n+        fr.add(test);\n+        fr.pack();\n+        fr.setSize(200, 200);\n+\n+        Adjustable vadj = test.pane.getVAdjustable();\n+        Adjustable hadj = test.pane.getHAdjustable();\n+        vadj.setUnitIncrement(5);\n+        hadj.setUnitIncrement(5);\n+        return fr;\n+    }\n+}\n+\n+class Box extends Component {\n+    public Dimension getPreferredSize() {\n+        System.out.println(\"asked for size\");\n+        return new Dimension(300, 300);\n+    }\n+\n+    public void paint(Graphics gr) {\n+        super.paint(gr);\n+        gr.setColor(Color.red);\n+        gr.drawLine(5, 5, 295, 5);\n+        gr.drawLine(295, 5, 295, 295);\n+        gr.drawLine(295, 295, 5, 295);\n+        gr.drawLine(5, 295, 5, 5);\n+        System.out.println(\"Painted!!\");\n+    }\n+}\n+\n+class ScrollTester extends Panel {\n+    public ScrollPane pane;\n+    private final Box child;\n+\n+    class Handler implements ActionListener {\n+        public void actionPerformed(ActionEvent e) {\n+            System.out.println(\"Removing scrollable component\");\n+            pane.remove(child);\n+            System.out.println(\"Adding back scrollable component\");\n+            pane.add(child);\n+            System.out.println(\"Done Adding back scrollable component\");\n+        }\n+    }\n+\n+    public ScrollTester() {\n+        pane = new ScrollPane();\n+        pane.setSize(200, 200);\n+        child = new Box();\n+        pane.add(child);\n+        setLayout(new BorderLayout());\n+        Button changeScrollContents = new Button(\"Remove and add back ScrollPane Contents\");\n+        changeScrollContents.setBackground(Color.red);\n+        changeScrollContents.addActionListener(new Handler());\n+        add(\"North\", changeScrollContents);\n+        add(\"Center\", pane);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneComponentTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4075484\n+ * @summary Tests that events of different types are generated for the\n+ *          corresponding scroll actions.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneEventType\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.ScrollPane;\n+import java.awt.event.AdjustmentListener;\n+\n+public class ScrollPaneEventType {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. This test verifies that when user performs some scrolling operation on\n+                   ScrollPane the correct AdjustmentEvent is being generated.\n+                2. To test this, press on:\n+                   - scrollbar's arrows and verify that UNIT event is generated,\n+                   - scrollbar's grey area(non-thumb) and verify that BLOCK event is\n+                    generated,\n+                   - drag scrollbar's thumb and verify that TRACK event is generated\n+                   If you see correct events for both scroll bars then test is PASSED.\n+                   Otherwise it is FAILED.\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneEventType::initialize)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"ScrollPane event type test\");\n+        frame.setLayout(new BorderLayout());\n+        ScrollPane pane = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+        pane.add(new Button(\"press\") {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(1000, 1000);\n+            }\n+        });\n+\n+        AdjustmentListener listener = e -> PassFailJFrame.log(e.toString());\n+        pane.getHAdjustable().addAdjustmentListener(listener);\n+        pane.getVAdjustable().addAdjustmentListener(listener);\n+        frame.add(pane);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneEventType.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4117404\n+ * @summary Tests that child component is always at least large as scrollpane\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneSize\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Insets;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.util.List;\n+\n+public class ScrollPaneSize {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Three frames representing the three different ScrollPane scrollbar\n+                   policies will appear.\n+                2. Verify that when you resize the windows, the child component in the\n+                   scrollpane always expands to fill the scrollpane. The scrollpane\n+                   background is colored red to show any improper bleed through.\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(ScrollPaneSize::initialize)\n+                .positionTestUIRightColumn()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static List<Frame> initialize() {\n+        return List.of(new ScrollFrame(\"SCROLLBARS_AS_NEEDED\", ScrollPane.SCROLLBARS_AS_NEEDED),\n+                new ScrollFrame(\"SCROLLBARS_ALWAYS\", ScrollPane.SCROLLBARS_ALWAYS),\n+                new ScrollFrame(\"SCROLLBARS_NEVER\", ScrollPane.SCROLLBARS_NEVER));\n+    }\n+}\n+\n+class ScrollFrame extends Frame {\n+    ScrollFrame(String title, int policy) {\n+        super(title);\n+        setLayout(new GridLayout(1, 1));\n+        ScrollPane c = new ScrollPane(policy);\n+        c.setBackground(Color.red);\n+        Panel panel = new TestPanel();\n+        c.add(panel);\n+        add(c);\n+        pack();\n+        Dimension size = panel.getPreferredSize();\n+        Insets insets = getInsets();\n+        setSize(size.width + 45 + insets.right + insets.left,\n+                size.height + 20 + insets.top + insets.bottom);\n+    }\n+}\n+\n+class TestPanel extends Panel {\n+    TestPanel() {\n+        setLayout(new FlowLayout());\n+        setBackground(Color.white);\n+\n+        Button b1, b2, b3;\n+        add(b1 = new Button(\"Button1\"));\n+        add(b2 = new Button(\"Button2\"));\n+        add(b3 = new Button(\"Button3\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneSize.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094581\n+ * @summary ScrollPane does not refresh properly when child is just smaller than viewport\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPanechildViewportTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ScrollPanechildViewportTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click \"Slightly Large\" and ensure scrollbars are VISIBLE\n+                2. Click \"Slightly Small\" and ensure there are NO scrollbars\n+                3. Click \"Smaller\" and ensure there are NO scrollbars\n+                4. If everything is ok, click PASS, else click FAIL.\n+                                          \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPanechildViewportTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        return new Test();\n+    }\n+}\n+\n+class Test extends Frame implements ActionListener {\n+    Button b1, b2, b3;\n+    MyPanel p;\n+    int state; \/\/ 0 = slightly large, 1 = slightly smaller, 2 = smaller\n+\n+    public Test() {\n+        ScrollPane sp = new ScrollPane();\n+        p = new MyPanel();\n+        p.setBackground(Color.yellow);\n+        state = 1;\n+        sp.add(p);\n+        add(sp, \"Center\");\n+\n+        Panel p1 = new Panel();\n+        b1 = new Button(\"Slightly Large\");\n+        b1.addActionListener(this);\n+        p1.add(b1);\n+        b2 = new Button(\"Slightly Small\");\n+        b2.addActionListener(this);\n+        p1.add(b2);\n+        b3 = new Button(\"Smaller\");\n+        b3.addActionListener(this);\n+        p1.add(b3);\n+\n+        add(p1, \"South\");\n+\n+        setSize(400, 200);\n+        \/\/added to test to move test frame away from instructions\n+        setLocation(0, 350);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        Object source = e.getSource();\n+\n+        \/\/ set size to small and re-validate the panel to get correct size of\n+        \/\/ scrollpane viewport without scrollbars\n+\n+        state = 2;\n+        p.invalidate();\n+        validate();\n+\n+        Dimension pd = ((ScrollPane) p.getParent()).getViewportSize();\n+\n+        if (source.equals(b1)) {\n+            p.setBackground(Color.green);\n+            state = 0;\n+        } else if (source.equals(b2)) {\n+            p.setBackground(Color.yellow);\n+            state = 1;\n+        } else if (source.equals(b3)) {\n+            p.setBackground(Color.red);\n+            state = 2;\n+        }\n+\n+        p.invalidate();\n+        validate();\n+        System.out.println(\"Panel Size = \" + p.getSize());\n+        System.out.println(\"ScrollPane Viewport Size = \" + pd);\n+        System.out.println(\" \");\n+    }\n+\n+    class MyPanel extends Panel {\n+        public Dimension getPreferredSize() {\n+            Dimension d = null;\n+            Dimension pd = ((ScrollPane) getParent()).getViewportSize();\n+            switch (state) {\n+                case 0 -> {\n+                    d = new Dimension(pd.width + 2, pd.height + 2);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+                case 1 -> {\n+                    d = new Dimension(pd.width - 2, pd.height - 2);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+                case 2 -> {\n+                    d = new Dimension(50, 50);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+            }\n+            return d;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPanechildViewportTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileFilterDescription.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileFilterDescription\/FileFilterDescription.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug6798062.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/swing\/JFileChooser\/6798062\/bug6798062.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug6726866.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/swing\/JInternalFrame\/6726866\/bug6726866.java","status":"renamed"}]}