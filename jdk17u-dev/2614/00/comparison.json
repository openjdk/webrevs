{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main ThreadCountLimit\n+ * @run main\/othervm -Xmx1g ThreadCountLimit\n@@ -39,1 +39,0 @@\n-    private final int index;\n@@ -42,2 +41,1 @@\n-    Worker(int index, CountDownLatch startSignal) {\n-      this.index = index;\n+    Worker(CountDownLatch startSignal) {\n@@ -49,4 +47,0 @@\n-      if ((index % 250) == 0) {\n-        System.out.println(\"INFO: thread \" + index + \" waiting to start\");\n-      }\n-\n@@ -56,13 +50,1 @@\n-        throw new Error(\"Unexpected: \" + e);\n-      }\n-\n-      setName(String.valueOf(index));\n-\n-      Thread.yield();\n-\n-      if (index != Integer.parseInt(getName())) {\n-        throw new Error(\"setName\/getName failed!\");\n-      }\n-\n-      if ((index % 250) == 0) {\n-        System.out.println(\"INFO: thread \" + getName() + \" working\");\n+        throw new Error(\"Unexpected\", e);\n@@ -77,0 +59,10 @@\n+    boolean reachedTimeLimit = false;\n+    boolean reachedNativeOOM = false;\n+    int countAtTimeLimit = -1;\n+    int countAtNativeOOM = -1;\n+\n+    \/\/ This is dangerous loop: it depletes system resources,\n+    \/\/ so doing additional things there that may end up allocating\n+    \/\/ Java\/native memory risks failing the VM prematurely.\n+    \/\/ Avoid doing unnecessary calls, printouts, etc.\n+\n@@ -81,1 +73,1 @@\n-        Worker w = new Worker(count, startSignal);\n+        Worker w = new Worker(startSignal);\n@@ -88,2 +80,2 @@\n-          \/\/ Windows path or a system with very large ulimit\n-          System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS + \" ms, with \" + count + \" threads created\");\n+          reachedTimeLimit = true;\n+          countAtTimeLimit = count;\n@@ -96,2 +88,2 @@\n-        long end = System.currentTimeMillis();\n-        System.out.println(\"INFO: reached this process thread count limit at \" + count + \" [\" + (end - start) + \" ms]\");\n+        reachedNativeOOM = true;\n+        countAtNativeOOM = count;\n@@ -110,1 +102,12 @@\n-      throw new Error(\"Unexpected: \" + e);\n+      throw new Error(\"Unexpected\", e);\n+    }\n+\n+    \/\/ Now that all threads have joined, we are away from dangerous\n+    \/\/ VM state and have enough memory to perform any other things.\n+    if (reachedTimeLimit) {\n+       \/\/ Windows path or a system with very large ulimit\n+       System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS +\n+                          \" ms, with \" + countAtTimeLimit + \" threads created\");\n+    } else if (reachedNativeOOM) {\n+       System.out.println(\"INFO: reached this process thread count limit with \" +\n+                           countAtNativeOOM + \" threads created\");\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/ThreadCountLimit.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"}]}