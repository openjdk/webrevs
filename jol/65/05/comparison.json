{"files":[{"patch":"@@ -319,0 +319,83 @@\n+    <profiles>\n+        <profile>\n+            <id>zgc-tests<\/id>\n+            <activation>\n+                <jdk>[17,)<\/jdk>\n+            <\/activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins<\/groupId>\n+                        <artifactId>maven-surefire-plugin<\/artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>test-zgc<\/id>\n+                                <phase>test<\/phase>\n+                                <goals>\n+                                    <goal>test<\/goal>\n+                                <\/goals>\n+                                <configuration>\n+                                    <argLine>-XX:+UseZGC<\/argLine>\n+                                    <forkCount>4<\/forkCount>\n+                                    <reuseForks>true<\/reuseForks>\n+                                <\/configuration>\n+                            <\/execution>\n+                            <execution>\n+                                <id>test-zgc-align16<\/id>\n+                                <phase>test<\/phase>\n+                                <goals>\n+                                    <goal>test<\/goal>\n+                                <\/goals>\n+                                <configuration>\n+                                    <argLine>-XX:+UseZGC -XX:ObjectAlignmentInBytes=16<\/argLine>\n+                                    <forkCount>4<\/forkCount>\n+                                    <reuseForks>true<\/reuseForks>\n+                                <\/configuration>\n+                            <\/execution>\n+                        <\/executions>\n+                    <\/plugin>\n+                <\/plugins>\n+            <\/build>\n+        <\/profile>\n+        <profile>\n+            <id>generational-zgc-tests<\/id>\n+            <activation>\n+                <jdk>21<\/jdk>\n+            <\/activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins<\/groupId>\n+                        <artifactId>maven-surefire-plugin<\/artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>test-generational-zgc<\/id>\n+                                <phase>test<\/phase>\n+                                <goals>\n+                                    <goal>test<\/goal>\n+                                <\/goals>\n+                                <configuration>\n+                                    <argLine>-XX:+UseZGC -XX:+ZGenerational<\/argLine>\n+                                    <forkCount>4<\/forkCount>\n+                                    <reuseForks>true<\/reuseForks>\n+                                <\/configuration>\n+                            <\/execution>\n+                            <execution>\n+                                <id>test-generational-zgc-align16<\/id>\n+                                <phase>test<\/phase>\n+                                <goals>\n+                                    <goal>test<\/goal>\n+                                <\/goals>\n+                                <configuration>\n+                                    <argLine>-XX:+UseZGC -XX:+ZGenerational -XX:ObjectAlignmentInBytes=16<\/argLine>\n+                                    <forkCount>4<\/forkCount>\n+                                    <reuseForks>true<\/reuseForks>\n+                                <\/configuration>\n+                            <\/execution>\n+                        <\/executions>\n+                    <\/plugin>\n+                <\/plugins>\n+            <\/build>\n+        <\/profile>\n+    <\/profiles>\n+\n","filename":"jol-core\/pom.xml","additions":83,"deletions":0,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+    private final boolean isZGC;\n@@ -95,0 +96,2 @@\n+        isZGC = VMOptions.isGenerationalZGCEnabled();\n+\n@@ -122,0 +125,2 @@\n+        isZGC = VMOptions.isGenerationalZGCEnabled();\n+\n@@ -648,1 +653,1 @@\n-            return address;\n+            return isZGC ? ZGCAddress.uncolorize(address) : address;\n@@ -664,1 +669,1 @@\n-            return address;\n+            return isZGC ? ZGCAddress.uncolorize(address) : address;\n@@ -680,1 +685,1 @@\n-            return address;\n+            return isZGC ? ZGCAddress.uncolorize(address) : address;\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/HotspotUnsafe.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -70,0 +70,5 @@\n+    public static boolean isGenerationalZGCEnabled() {\n+        return ManagementFactory.getGarbageCollectorMXBeans().stream()\n+                .anyMatch(bean -> \"ZGC Minor Cycles\".equals(bean.getName()));\n+    }\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/VMOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.vm;\n+\n+\/**\n+ * Utility class for normalizing ZGC addresses by removing color bits\n+ *\n+ * @see <a href=\"https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/gc\/z\/zAddress.hpp\">Layout description<\/a>\n+ *\/\n+class ZGCAddress {\n+    private static final long REMAPPED_BITS_MASK = 0b1111L << 12;\n+    private static final long CLEAR_UNUSED_BITS_MASK = (1L << 46) - 1;\n+    private static final long COLOR_BITS_COUNT = 16;\n+    private static final boolean IS_ARM64 = \"aarch64\".equals(System.getProperty(\"os.arch\"));\n+\n+    static long uncolorize(long address) {\n+        return IS_ARM64 ? uncolorizeAarch(address) : uncolorizeNonAarch(address);\n+    }\n+\n+    private static long uncolorizeNonAarch(long address) {\n+        int shift = Long.numberOfTrailingZeros(address & REMAPPED_BITS_MASK) + 1;\n+        return (address >> shift) & CLEAR_UNUSED_BITS_MASK;\n+    }\n+\n+    private static long uncolorizeAarch(long address) {\n+        return (address >> COLOR_BITS_COUNT) & CLEAR_UNUSED_BITS_MASK;\n+    }\n+\n+    private ZGCAddress() {}\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/ZGCAddress.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.vm;\n+\n+import org.junit.Test;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Optional;\n+\n+import static org.apache.commons.lang3.StringUtils.substringAfter;\n+import static org.junit.Assert.assertEquals;\n+\n+public class HotspotUnsafeTest {\n+    @Test\n+    public void testAlignment(){\n+        assertEquals(expectedAlignment(), VM.current().objectAlignment());\n+    }\n+\n+    private int expectedAlignment() {\n+        Optional<String> alignmentProperty = ManagementFactory.getRuntimeMXBean().getInputArguments().stream()\n+                .filter(arg -> arg.contains(\"-XX:ObjectAlignmentInBytes\"))\n+                .findAny();\n+        return alignmentProperty\n+                .map(alignment -> Integer.parseInt(substringAfter(alignment, \"=\")))\n+                .orElse(8);\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/vm\/HotspotUnsafeTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.vm;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ZGCAddressTest {\n+    @Test\n+    public void testGenerationalZGCAddressUncolorize() {\n+        final long[] coloredAddresses;\n+        if (\"aarch64\".equals(System.getProperty(\"os.arch\"))) {\n+            coloredAddresses = new long[] {\n+                \/\/ remapped bits inverted, no address and color overlap\n+                0b00100100_00000000_00000000_00111011_10100110_10111000_11100101_00010000L,\n+                0b00100100_00000000_00000000_00111011_10100110_10111000_11010101_00010000L,\n+                0b00100100_00000000_00000000_00111011_10100110_10111000_10110101_00010000L,\n+                0b00100100_00000000_00000000_00111011_10100110_10111000_01110101_00010000L\n+            };\n+        } else {\n+            coloredAddresses = new long[] {\n+                0b00100100_00000000_00000000_00111011_10100110_10111000_10000101_00010000L,\n+                0b00010010_00000000_00000000_00011101_11010011_01011100_01000101_00010000L,\n+                0b00001001_00000000_00000000_00001110_11101001_10101110_00100101_00010000L,\n+                0b00000100_10000000_00000000_00000111_01110100_11010111_00010101_00010000L,\n+            };\n+        }\n+\n+        for (long address : coloredAddresses) {\n+            assertEquals(\n+                    0b100100_00000000_00000000_00111011_10100110_10111000L,\n+                    ZGCAddress.uncolorize(address)\n+            );\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/vm\/ZGCAddressTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}