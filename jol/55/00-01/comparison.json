{"files":[{"patch":"@@ -47,2 +47,2 @@\n-            heapdump-boxes: Read a heap dump and look for data that looks duplicated, focusing on boxes\n-       heapdump-duplicates: Read a heap dump and look for data that looks duplicated\n+            heapdump-boxes: Read a heap dump and look for duplicate primitive boxes\n+       heapdump-duplicates: Read a heap dump and look for probable duplicates\n@@ -51,1 +51,1 @@\n-          heapdump-strings: Read a heap dump and look for data that looks duplicated, focusing on Strings\n+          heapdump-strings: Read a heap dump and look for duplicate Strings\n@@ -89,0 +89,53 @@\n+#### \"internals-estimates\"\n+\n+This is like `internals`, but simulate the layout in different VM modes. The tools would group similar layouts together,\n+and sort by instance size, descending.\n+\n+    % java -jar jol-cli\/target\/jol-cli.jar internals-estimates java.lang.Integer\n+    # VM mode: 64 bits\n+    # Compressed references (oops): 3-bit shift\n+    # Compressed class pointers: 3-bit shift\n+    # Object alignment: 8 bytes\n+    #                       ref, bool, byte, char, shrt,  int,  flt,  lng,  dbl\n+    # Field sizes:            4,    1,    1,    2,    2,    4,    4,    8,    8\n+    # Array element sizes:    4,    1,    1,    2,    2,    4,    4,    8,    8\n+    # Array base offsets:    16,   16,   16,   16,   16,   16,   16,   16,   16\n+\n+    ***** Hotspot Layout Simulation (JDK 8, 64-bit model, NO compressed references, NO compressed classes, 8-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 15, 64-bit model, NO compressed references, NO compressed classes, 8-byte aligned)\n+\n+    java.lang.Integer object internals:\n+    OFF  SZ   TYPE DESCRIPTION               VALUE\n+      0   8        (object header: mark)     N\/A\n+      8   8        (object header: class)    N\/A\n+     16   4    int Integer.value             N\/A\n+     20   4        (object alignment gap)\n+    Instance size: 24 bytes\n+    Space losses: 0 bytes internal + 4 bytes external = 4 bytes total\n+\n+    ***** Hotspot Layout Simulation (JDK 8, 64-bit model, compressed references, compressed classes, 8-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 8, 64-bit model, compressed references, compressed classes, 16-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 15, 64-bit model, compressed references, compressed classes, 8-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 15, 64-bit model, compressed references, compressed classes, 16-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 15, 64-bit model, NO compressed references, compressed classes, 8-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 15, 64-bit model, NO compressed references, compressed classes, 16-byte aligned)\n+\n+    java.lang.Integer object internals:\n+    OFF  SZ   TYPE DESCRIPTION               VALUE\n+      0   8        (object header: mark)     N\/A\n+      8   4        (object header: class)    N\/A\n+     12   4    int Integer.value             N\/A\n+    Instance size: 16 bytes\n+    Space losses: 0 bytes internal + 0 bytes external = 0 bytes total\n+\n+    ***** Hotspot Layout Simulation (JDK 99, 64-bit model, Lilliput (ultimate target), NO compressed references, compressed classes, 8-byte aligned)\n+    ***** Hotspot Layout Simulation (JDK 99, 64-bit model, Lilliput (ultimate target), compressed references, compressed classes, 8-byte aligned)\n+\n+    java.lang.Integer object internals:\n+    OFF  SZ   TYPE DESCRIPTION               VALUE\n+      0   1        (object header: mark)     N\/A\n+      1   3        (object header: class)    N\/A\n+      4   4    int Integer.value             N\/A\n+    Instance size: 8 bytes\n+    Space losses: 0 bytes internal + 0 bytes external = 0 bytes total\n+\n@@ -516,2 +569,0 @@\n-If you don't have the access to JDK Bug System, submit the bug report at [Issues](https:\/\/github.com\/openjdk\/jol\/issues) here, and wait for maintainers to pick that up.\n-\n","filename":"README.md","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -61,9 +61,0 @@\n-    static final Class<?>[] PRIMITIVE_CACHE_CLASSES = {\n-            Short.class,\n-            Character.class,\n-            Integer.class,\n-            Float.class,\n-            Long.class,\n-            Double.class\n-    };\n-\n@@ -77,1 +68,1 @@\n-        return \"Read a heap dump and look for data that looks duplicated, focusing on primitive boxes\";\n+        return \"Read a heap dump and look for duplicate primitive boxes\";\n@@ -156,5 +147,0 @@\n-\n-        for (Class<?> cl : PRIMITIVE_CACHE_CLASSES) {\n-            BoxVisitor v = visitors.get(cl);\n-            v.printOut(out);\n-        }\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpBoxes.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        return \"Read a heap dump and look for data that looks duplicated\";\n+        return \"Read a heap dump and look for probable duplicates\";\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpDuplicates.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        return \"Read a heap dump and look for data that looks duplicated, focusing on Strings\";\n+        return \"Read a heap dump and look for duplicate Strings\";\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpStrings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}