{"files":[{"patch":"@@ -330,0 +330,6 @@\n+        <dependency>\n+            <groupId>com.approvaltests<\/groupId>\n+            <artifactId>approvaltests<\/artifactId>\n+            <version>13.4.0<\/version>\n+            <scope>test<\/scope>\n+        <\/dependency>\n","filename":"jol-core\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-    FieldData data() {\n+    \/\/ TODO: This is public to let LJV access it. Figure out a cleaner way to do this without extending the API surface.\n+    public FieldData data() {\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/FieldLayout.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+\/**\n+ * Represents direction of graph layout. Corresponds to possible values of rankdir command in Graphviz.\n+ *\/\n+public enum Direction {\n+    \/**\n+     * draws from bottom to top\n+     *\/\n+    BT,\n+    \/**\n+     * draws from left to right\n+     *\/\n+    LR,\n+    \/**\n+     * draws from top to bottom (the default value)\n+     *\/\n+    TB,\n+    \/**\n+     * draws from right to left\n+     *\/\n+    RL\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/Direction.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.openjdk.jol.ljv.nodes.ArrayNode;\n+import org.openjdk.jol.ljv.nodes.Node;\n+import org.openjdk.jol.ljv.nodes.ObjectNode;\n+\n+import java.util.IdentityHashMap;\n+\n+public class GraphvizVisualization implements Visualization {\n+    private final StringBuilder out = new StringBuilder();\n+    private final LJV ljv;\n+    private final IdentityHashMap<Object, String> alreadyDrawnObjectsIds = new IdentityHashMap<>();\n+    private boolean alreadyDrawnNull;\n+\n+    public GraphvizVisualization(LJV ljv) {\n+        this.ljv = ljv;\n+    }\n+\n+    @Override\n+    public boolean alreadyVisualized(Object obj) {\n+        if (obj == null) {\n+            return alreadyDrawnNull;\n+        }\n+\n+        return alreadyDrawnObjectsIds.containsKey(obj);\n+    }\n+\n+    @Override\n+    public void diagramBegin() {\n+        out.setLength(0); \/\/ Clearing String Builder before starting new DOT\n+        out.append(\"digraph Java {\\n\")\n+                .append(\"\\trankdir=\\\"\")\n+                .append(ljv.getDirection())\n+                .append(\"\\\";\\n\")\n+                .append(\"\\tnode[shape=plaintext]\\n\");\n+    }\n+\n+    @Override\n+    public String diagramEnd() {\n+        out.append(\"}\\n\");\n+        return out.toString();\n+    }\n+\n+    @Override\n+    public void visitNull() {\n+        if (!alreadyDrawnNull) {\n+            out.append(\"\\t\").append(dotName(null)).append(\"[label=\\\"null\\\"\").append(\", shape=plaintext];\\n\");\n+            alreadyDrawnNull = true;\n+        }\n+    }\n+\n+    @Override\n+    public void visitArrayBegin(ArrayNode arrayNode) {\n+        out.append(\"\\t\")\n+                .append(dotName(arrayNode.getValue()))\n+                .append(\"[label=<\\n\");\n+\n+        if (arrayNode.areValuesPrimitive()) {\n+            out.append(\"\\t\\t<table border='0' cellborder='1' cellspacing='0'>\\n\");\n+        } else {\n+            out.append(\"\\t\\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\\n\");\n+        }\n+\n+        out.append(\"\\t\\t\\t<tr>\\n\");\n+    }\n+\n+    @Override\n+    public void visitArrayElement(ArrayNode arrayNode, String element, int elementIndex) {\n+        out.append(\"\\t\\t\\t\\t<td\");\n+        if (!arrayNode.areValuesPrimitive()) {\n+            out.append(\" port=\\\"f\").append(elementIndex).append(\"\\\"\");\n+        }\n+        out.append(ljv.getArrayElementAttributes(arrayNode.getValue(), elementIndex))\n+                .append(\">\");\n+\n+        \/\/ If array element is treated as primitive - than filling array cell with value\n+        \/\/ Otherwise cell will be empty, but arrow-connected with object it is containing\n+        if (arrayNode.areValuesPrimitive()) {\n+            out.append(Quote.quote(element));\n+        }\n+\n+        out.append(\"<\/td>\\n\");\n+    }\n+\n+    @Override\n+    public void visitArrayElementObjectConnection(Object array, int elementIndex, Object obj) {\n+        out.append(\"\\t\")\n+                .append(dotName(array))\n+                .append(\":f\")\n+                .append(elementIndex)\n+                .append(\" -> \")\n+                .append(dotName(obj))\n+                .append(\"[label=\\\"\")\n+                .append(elementIndex)\n+                .append(\"\\\",fontsize=12];\\n\");\n+    }\n+\n+\n+    @Override\n+    public void visitArrayEnd(Object array) {\n+        out.append(\"\\t\\t\\t<\/tr>\\n\\t\\t<\/table>\\n\\t>];\\n\");\n+    }\n+\n+    @Override\n+    public void visitObjectBegin(ObjectNode objectNode) {\n+        out.append(\"\\t\")\n+                .append(dotName(objectNode.getValue()))\n+                .append(\"[label=<\\n\")\n+                .append(\"\\t\\t<table border='0' cellborder='1' cellspacing='0'>\\n\");\n+\n+        \/\/ Adding header row with object class name\n+        out.append(\"\\t\\t\\t<tr>\\n\");\n+        if (objectNode.getPrimitiveFieldsNum() > 0) {\n+            out.append(\"\\t\\t\\t\\t<td rowspan='\")\n+                    .append(objectNode.getPrimitiveFieldsNum() + 1)\n+                    .append(\"'>\");\n+        } else {\n+            out.append(\"\\t\\t\\t\\t<td>\");\n+        }\n+        out.append(objectNode.getClassName())\n+                .append(\"<\/td>\\n\\t\\t\\t<\/tr>\\n\");\n+    }\n+\n+    @Override\n+    public void visitObjectPrimitiveField(String fieldName, String fieldValueStr) {\n+        out.append(\"\\t\\t\\t<tr>\\n\\t\\t\\t\\t<td>\");\n+        if (ljv.isShowFieldNamesInLabels()) {\n+            out.append(fieldName).append(\": \");\n+        }\n+        out.append(Quote.quote(fieldValueStr));\n+        out.append(\"<\/td>\\n\\t\\t\\t<\/tr>\\n\");\n+    }\n+\n+    @Override\n+    public void visitObjectFieldRelationWithNonPrimitiveObject(Object obj, Node childNode, String ljvFieldAttributes) {\n+        out.append(\"\\t\")\n+                .append(dotName(obj))\n+                .append(\" -> \")\n+                .append(dotName(childNode.getValue()))\n+                .append(\"[label=\\\"\")\n+                .append(childNode.getName())\n+                .append(\"\\\",fontsize=12\")\n+                .append(ljvFieldAttributes.isEmpty() ? \"\" : \",\" + ljvFieldAttributes)\n+                .append(\"];\\n\");\n+    }\n+\n+    @Override\n+    public void visitObjectEnd(Object obj) {\n+        out.append(\"\\t\\t<\/table>\\n\\t>\");\n+\n+        String cabs = ljv.getObjectAttributes(obj);\n+        if (!cabs.isEmpty()) {\n+            out.append(\",\").append(cabs);\n+        }\n+        out.append(\"];\\n\");\n+    }\n+\n+    private String compIfAbsent(Object obj) {\n+        String value = alreadyDrawnObjectsIds.get(obj);\n+        if (value == null) {\n+            String newValue = \"n\" + (alreadyDrawnObjectsIds.size() + 1);\n+            alreadyDrawnObjectsIds.put(obj, newValue);\n+            value = newValue;\n+        }\n+        return value;\n+    }\n+\n+    private String dotName(Object obj) {\n+        return obj == null ? \"NULL\" : compIfAbsent(obj);\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/GraphvizVisualization.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.openjdk.jol.ljv.nodes.Node;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+\n+public interface Introspection {\n+\n+    Node parseGraph(Object obj, String name, boolean isPrimitive, Field field);\n+\n+    List<Node> getChildren(Object obj);\n+\n+    String getObjClassName(Object obj, boolean useToStringAsClassName);\n+\n+    Field[] getObjFields(Object obj);\n+\n+    int countObjectPrimitiveFields(Object obj);\n+\n+    boolean hasPrimitiveFields(Object obj);\n+\n+    boolean objectFieldIsPrimitive(Field field, Object obj);\n+\n+    boolean canBeConvertedToString(Object obj);\n+\n+    boolean canTreatObjAsPrimitive(Object obj);\n+\n+    boolean canTreatObjAsArrayOfPrimitives(Object obj);\n+\n+    boolean canTreatClassAsPrimitive(Class<?> cz);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/Introspection.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.openjdk.jol.ljv.nodes.*;\n+import org.openjdk.jol.info.FieldLayout;\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.util.ObjectUtils;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+public class IntrospectionWithReflectionAPI implements Introspection {\n+    private final IdentityHashMap<Object, ObjectNode> alreadyVisitedObjects = new IdentityHashMap<>();\n+    protected final LJV ljv;\n+\n+    public IntrospectionWithReflectionAPI(LJV ljv) {\n+        this.ljv = ljv;\n+    }\n+\n+    @Override\n+    public Node parseGraph(Object obj, String name, boolean isPrimitive, Field field) {\n+        if (isPrimitive) {\n+            return new PrimitiveNode(obj, name);\n+        }\n+        if (obj == null) {\n+            return new NullNode(null, name);\n+        }\n+        ObjectNode oldNode = alreadyVisitedObjects.get(obj);\n+        if (oldNode != null) {\n+            ObjectNode objectNode = new ObjectNode(oldNode);\n+            objectNode.setName(name);\n+            if (field != null) {\n+                objectNode.setAttributes(ljv.getFieldAttributes(field, obj));\n+            }\n+            return objectNode;\n+        }\n+\n+        if (obj.getClass().isArray()) {\n+            ArrayNode arrayNode = new ArrayNode(obj, name, canTreatObjAsArrayOfPrimitives(obj), getArrayContent(obj));\n+            if (field != null) {\n+                arrayNode.setAttributes(ljv.getFieldAttributes(field, obj));\n+            }\n+            return arrayNode;\n+        }\n+\n+        ObjectNode objectNode = new ObjectNode(obj, name,\n+                getObjClassName(obj, false),\n+                countObjectPrimitiveFields(obj), null,\n+                \"\");\n+        alreadyVisitedObjects.put(obj, objectNode);\n+        if (field != null) {\n+            objectNode.setAttributes(ljv.getFieldAttributes(field, obj));\n+        }\n+        objectNode.setChildren(getChildren(obj));\n+        return objectNode;\n+    }\n+\n+    @Override\n+    public List<Node> getChildren(Object obj) {\n+        List<Node> result = new ArrayList<>();\n+\n+        Field[] fields = getObjFields(obj);\n+\n+        for (Field field : fields) {\n+            if (!(Modifier.isStatic(field.getModifiers())) && !ljv.canIgnoreField(field)\n+            ) {\n+                Node node = parseGraph(ObjectUtils.value(obj, field), field.getName(),\n+                        objectFieldIsPrimitive(field, obj), field);\n+                if (node != null) result.add(node);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private List<Node> getArrayContent(Object obj) {\n+        List<Node> result = new ArrayList<>();\n+        int len = Array.getLength(obj);\n+        for (int i = 0; i < len; i++) {\n+            Object ref = Array.get(obj, i);\n+            result.add(parseGraph(ref, getObjClassName(ref, false), false, null));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean canBeConvertedToString(Object obj) {\n+        Method[] ms = obj.getClass().getMethods();\n+        for (Method m : ms) {\n+            if (m.getName().equals(\"toString\") && m.getDeclaringClass() != Object.class) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String getObjClassName(Object obj, boolean useToStringAsClassName) {\n+        if (obj == null)\n+            return \"\";\n+\n+        Class<?> c = obj.getClass();\n+        if (useToStringAsClassName && canBeConvertedToString(obj))\n+            return Quote.quote(obj.toString());\n+        else {\n+            String name = c.getName();\n+            if (!ljv.isShowPackageNamesInClasses() || c.getPackage() == ljv.getClass().getPackage()) {\n+                \/\/- Strip away everything before the last .\n+                name = name.substring(name.lastIndexOf('.') + 1);\n+\n+                if (!ljv.isQualifyNestedClassNames())\n+                    name = name.substring(name.lastIndexOf('$') + 1);\n+            }\n+            return name;\n+        }\n+    }\n+\n+    @Override\n+    public int countObjectPrimitiveFields(Object obj) {\n+        int size = 0;\n+        Field[] fields = getObjFields(obj);\n+        for (Field field : fields) {\n+            if (objectFieldIsPrimitive(field, obj)) {\n+                size++;\n+            }\n+        }\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean hasPrimitiveFields(Object obj) {\n+        return countObjectPrimitiveFields(obj) > 0;\n+    }\n+\n+    @Override\n+    public boolean objectFieldIsPrimitive(Field field, Object obj) {\n+        if (!ljv.canIgnoreField(field)) {\n+            \/\/- The order of these statements matters. It is not correct\n+            \/\/- to return true if field.getType( ).isPrimitive( )\n+            Object val = ObjectUtils.value(obj, field);\n+            \/\/- Just calling ljv.canTreatAsPrimitive is not adequate --\n+            \/\/- val will be wrapped as a Boolean or Character, etc. if we\n+            \/\/- are dealing with a truly primitive type.\n+            return field.getType().isPrimitive() || canTreatObjAsPrimitive(val);\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public Field[] getObjFields(Object obj) {\n+        Class<?> cls = obj.getClass();\n+\n+        SortedSet<FieldLayout> fieldLayouts = ClassLayout.parseClass(cls).fields();\n+        ArrayList<Field> res = new ArrayList<>();\n+        for (FieldLayout layout : fieldLayouts) {\n+            Field f = layout.data().refField();\n+            if (ljv.isIgnoreNullValuedFields()) {\n+                if (ObjectUtils.value(obj, f) == null) {\n+                    continue;\n+                }\n+            }\n+            res.add(f);\n+        }\n+        return res.toArray(new Field[0]);\n+    }\n+\n+\n+    @Override\n+    public boolean canTreatClassAsPrimitive(Class<?> cz) {\n+        if (cz == null || cz.isPrimitive())\n+            return true;\n+\n+        if (cz.isArray())\n+            return false;\n+\n+        do {\n+            if (ljv.isTreatsAsPrimitive(cz)\n+                    || ljv.isTreatsAsPrimitive(cz.getPackage())\n+            )\n+                return true;\n+\n+            if (cz == Object.class)\n+                return false;\n+\n+            Class<?>[] ifs = cz.getInterfaces();\n+            for (Class<?> anIf : ifs)\n+                if (canTreatClassAsPrimitive(anIf))\n+                    return true;\n+\n+            cz = cz.getSuperclass();\n+        } while (cz != null);\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean canTreatObjAsPrimitive(Object obj) {\n+        return obj == null || canTreatClassAsPrimitive(obj.getClass());\n+    }\n+\n+    @Override\n+    public boolean canTreatObjAsArrayOfPrimitives(Object obj) {\n+        Class<?> c = obj.getClass();\n+        if (c.getComponentType().isPrimitive()) {\n+            return true;\n+        }\n+\n+        for (int i = 0, len = Array.getLength(obj); i < len; i++) {\n+            if (!canTreatObjAsPrimitive(Array.get(obj, i))) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/IntrospectionWithReflectionAPI.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,425 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.openjdk.jol.ljv.nodes.Node;\n+import org.openjdk.jol.ljv.provider.ArrayElementAttributeProvider;\n+import org.openjdk.jol.ljv.provider.FieldAttributesProvider;\n+import org.openjdk.jol.ljv.provider.ObjectAttributesProvider;\n+import org.openjdk.jol.ljv.provider.impl.*;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.*;\n+\n+\/**\n+ * Lightweight Java Visualizer.\n+ *\/\n+public final class LJV {\n+    private final List<ObjectAttributesProvider> objectAttributesProviders = new ArrayList<>();\n+    private final List<FieldAttributesProvider> fieldAttributesProviders = new ArrayList<>();\n+    private final List<ArrayElementAttributeProvider> arrayElementAttributeProviders = new ArrayList<>();\n+    private final Set<Object> pretendPrimitiveSet = new HashSet<>();\n+    private final Set<Object> ignoreSet = new HashSet<>();\n+    private final List<Object> roots = new ArrayList<>();\n+    private Direction direction = Direction.TB;\n+\n+    public LJV setDirection(Direction direction) {\n+        this.direction = direction;\n+        return this;\n+    }\n+\n+    public Direction getDirection() {\n+        return direction;\n+    }\n+\n+    private enum Options {\n+        \/**\n+         * Allow private, protected and package-access fields to be shown.\n+         * This is only possible if the security manager allows\n+         * <code>ReflectPermission(\"suppressAccessChecks\")<\/code> permission.\n+         * This is usually the case when running from an application, but\n+         * not from an applet or servlet.\n+         *\/\n+        IGNOREPRIVATEFIELDS,\n+        \/**\n+         * Toggle whether to display the class name in the label for an\n+         * object (false, the default) or to use the result of calling\n+         * toString (true).\n+         *\/\n+        USETOSTRINGASCLASSNAME,\n+        \/**\n+         * Toggle whether to display qualified nested class names in the\n+         * label for an object from the same package as LJV (true) or\n+         * to display an abbreviated name (false, the default).\n+         *\/\n+        QUALIFYNESTEDCLASSNAMES,\n+        SHOWPACKAGENAMESINCLASSES,\n+        \/**\n+         * Toggle whether or not to include the field name in the label for an\n+         * object.  This is currently all-or-nothing.  TODO: allow this to be\n+         * set on a per-class basis.\n+         *\/\n+        SHOWFIELDNAMESINLABELS,\n+        \/**\n+         * Toggle whether to ignore fields with null values\n+         *\/\n+        IGNORENULLVALUEDFIELDS,\n+    }\n+\n+    private final EnumSet<Options> oSet = EnumSet.of(Options.SHOWFIELDNAMESINLABELS);\n+\n+    \/**\n+     * Set the DOT attributes for a class.  This allows you to change the\n+     * appearance of certain nodes in the output, but requires that you\n+     * know something about dot attributes.  Simple attributes are, e.g.,\n+     * \"color=red\".\n+     *\n+     * @param cz     class to set attribute for.\n+     * @param attrib DOT attributes for a class.\n+     * @return current LJV object\n+     *\/\n+    public LJV addClassAttribute(Class<?> cz, String attrib) {\n+        objectAttributesProviders.add(new FixedValueClassAttributes(cz, attrib));\n+        return this;\n+    }\n+\n+    public LJV addObjectAttributesProvider(ObjectAttributesProvider provider) {\n+        objectAttributesProviders.add(Objects.requireNonNull(provider));\n+        return this;\n+    }\n+\n+    public String getObjectAttributes(Object o) {\n+        StringBuilder sb = new StringBuilder();\n+        String loopDelimit = \"\";\n+        for (ObjectAttributesProvider elem : objectAttributesProviders) {\n+            String tmp = elem.getAttribute(o);\n+            if ((tmp != null) && !tmp.isEmpty()) {\n+                sb.append(loopDelimit);\n+                sb.append(tmp);\n+                loopDelimit = \",\";\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    \/**\n+     * Set the DOT attributes for a specific field. This allows you to\n+     * change the appearance of certain edges in the output, but requires\n+     * that you know something about dot attributes.  Simple attributes\n+     * are, e.g., \"color=blue\".\n+     *\n+     * @param field  field to set attributes to\n+     * @param attrib field attributes\n+     * @return this\n+     *\/\n+    public LJV addFieldAttribute(Field field, String attrib) {\n+        this.fieldAttributesProviders.add(new FixedFieldAttributesProvider(field, attrib));\n+        return this;\n+    }\n+\n+    public LJV addFieldAttributesProvider(FieldAttributesProvider provider) {\n+        this.fieldAttributesProviders.add(provider);\n+        return this;\n+    }\n+\n+    public String getFieldAttributes(Field field, Object value) {\n+        StringBuilder sb = new StringBuilder();\n+        String loopDelimit = \"\";\n+        for (FieldAttributesProvider elem : fieldAttributesProviders) {\n+            String tmp = elem.getAttribute(field, value);\n+            if ((tmp != null) && !tmp.isEmpty()) {\n+                sb.append(loopDelimit);\n+                sb.append(tmp);\n+                loopDelimit = \",\";\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    \/**\n+     * Set the DOT attributes for all fields with this name.\n+     *\n+     * @param field  field name to set attributes to\n+     * @param attrib attributes\n+     * @return current ljv object\n+     *\/\n+    public LJV addFieldAttribute(String field, String attrib) {\n+        this.fieldAttributesProviders.add(new FixedFieldNameAttributesProvider(field, attrib));\n+        return this;\n+    }\n+\n+    \/**\n+     * Do not display this field.\n+     *\n+     * @param field field to ignore\n+     * @return this\n+     *\/\n+    public LJV addIgnoreField(Field field) {\n+        this.ignoreSet.add(field);\n+        return this;\n+    }\n+\n+    \/**\n+     * Do not display any fields with this name.\n+     *\n+     * @param field field name to ignore\n+     * @return this\n+     *\/\n+    public LJV addIgnoreField(String field) {\n+        this.ignoreSet.add(field);\n+        return this;\n+    }\n+\n+    \/**\n+     * Do not display any fields from this class.\n+     *\n+     * @param cz class to ignore fields\n+     * @return this\n+     *\/\n+    public LJV addIgnoreFields(Class<?> cz) {\n+        Field[] fs = cz.getDeclaredFields();\n+        for (Field f : fs) this.addIgnoreField(f);\n+        return this;\n+    }\n+\n+    \/**\n+     * Do not display any fields with this type.\n+     *\n+     * @param cz type of fields to ignore\n+     * @return this\n+     *\/\n+    public LJV addIgnoreClass(Class<?> cz) {\n+        this.ignoreSet.add(cz);\n+        return this;\n+    }\n+\n+    \/**\n+     * Do not display any fields that have a type from this package.\n+     *\n+     * @param pk package that contains classes of fields that will not be displayed\n+     * @return this\n+     *\/\n+    public LJV addIgnorePackage(Package pk) {\n+        this.ignoreSet.add(pk);\n+        return this;\n+    }\n+\n+    public boolean canIgnoreField(Field field) {\n+        return Modifier.isStatic(field.getModifiers()) ||\n+                        ignoreSet.contains(field) ||\n+                        ignoreSet.contains(field.getName()) ||\n+                        ignoreSet.contains(field.getType()) ||\n+                        ignoreSet.contains(field.getType().getPackage());\n+    }\n+\n+    public LJV addArrayElementAttributeProvider(ArrayElementAttributeProvider provider) {\n+        arrayElementAttributeProviders.add(Objects.requireNonNull(provider));\n+        return this;\n+    }\n+\n+    \/**\n+     * Enable highlighting array elements that was changed since previous run of ljv.\n+     *\n+     * @return current ljv object\n+     *\/\n+    public LJV highlightChangingArrayElements() {\n+        addArrayElementAttributeProvider(new ChangingArrayElementHighlighter());\n+        return this;\n+    }\n+\n+    \/**\n+     * Enable highlighting of new objects that appeared since previous run of ljv.\n+     *\n+     * @return current ljv object\n+     *\/\n+    public LJV highlightNewObjects() {\n+        addObjectAttributesProvider(new NewObjectHighlighter());\n+        return this;\n+    }\n+\n+    public String getArrayElementAttributes(Object array, int index) {\n+        StringBuilder sb = new StringBuilder();\n+        String loopDelimit = \"\";\n+        for (ArrayElementAttributeProvider elem : arrayElementAttributeProviders) {\n+            String tmp = elem.getAttribute(array, index);\n+            if ((tmp != null) && !tmp.isEmpty()) {\n+                sb.append(loopDelimit);\n+                sb.append(tmp);\n+                loopDelimit = \" \";\n+            }\n+        }\n+        String result = sb.toString();\n+        if (!result.isEmpty()) {\n+            return \" \" + result;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    List<Object> getRoots() {\n+        return roots;\n+    }\n+\n+    \/**\n+     * Treat objects of this class as primitives; i.e., {@code toString}\n+     * is called on the object, and the result displayed in the label like\n+     * a primitive field.\n+     *\n+     * @param cz Class of objects to be treated as primitives\n+     * @return this\n+     *\/\n+    public LJV setTreatAsPrimitive(Class<?> cz) {\n+        this.pretendPrimitiveSet.add(cz);\n+        return this;\n+    }\n+\n+    public boolean isTreatsAsPrimitive(Class<?> cz) {\n+        return pretendPrimitiveSet.contains(cz);\n+    }\n+\n+    \/**\n+     * Treat objects from this package as primitives; i.e.,\n+     * {@code toString} is called on the object, and the result displayed\n+     * in the label like a primitive field.\n+     *\n+     * @param pk Package with classes to treated as primitive\n+     * @return this\n+     *\/\n+    public LJV setTreatAsPrimitive(Package pk) {\n+        this.pretendPrimitiveSet.add(pk);\n+        return this;\n+    }\n+\n+    public boolean isTreatsAsPrimitive(Package pk) {\n+        return pretendPrimitiveSet.contains(pk);\n+    }\n+\n+    private void setOption(boolean flag, Options option) {\n+        if (flag) {\n+            oSet.add(option);\n+        } else {\n+            oSet.remove(option);\n+        }\n+    }\n+\n+    public LJV setIgnorePrivateFields(boolean ignorePrivateFields) {\n+        setOption(ignorePrivateFields, Options.IGNOREPRIVATEFIELDS);\n+        return this;\n+    }\n+\n+    public boolean isIgnorePrivateFields() {\n+        return oSet.contains(Options.IGNOREPRIVATEFIELDS);\n+    }\n+\n+    public LJV setShowFieldNamesInLabels(boolean showFieldNamesInLabels) {\n+        setOption(showFieldNamesInLabels, Options.SHOWFIELDNAMESINLABELS);\n+        return this;\n+    }\n+\n+    public boolean isShowFieldNamesInLabels() {\n+        return oSet.contains(Options.SHOWFIELDNAMESINLABELS);\n+    }\n+\n+    public LJV setQualifyNestedClassNames(boolean qualifyNestedClassNames) {\n+        setOption(qualifyNestedClassNames, Options.QUALIFYNESTEDCLASSNAMES);\n+        return this;\n+    }\n+\n+    public boolean isQualifyNestedClassNames() {\n+        return oSet.contains(Options.QUALIFYNESTEDCLASSNAMES);\n+    }\n+\n+\n+    public LJV setShowPackageNamesInClasses(boolean showPackageNamesInClasses) {\n+        setOption(showPackageNamesInClasses, Options.SHOWPACKAGENAMESINCLASSES);\n+        return this;\n+    }\n+\n+    public boolean isShowPackageNamesInClasses() {\n+        return oSet.contains(Options.SHOWPACKAGENAMESINCLASSES);\n+    }\n+\n+    \/**\n+     * Toggle whether to ignore fields with null values.\n+     *\n+     * @param ignoreNullValuedFields {@code true}, if we want to hide the fields with null values.\n+     * @return this\n+     *\/\n+    public LJV setIgnoreNullValuedFields(boolean ignoreNullValuedFields) {\n+        setOption(ignoreNullValuedFields, Options.IGNORENULLVALUEDFIELDS);\n+        return this;\n+    }\n+\n+    public boolean isIgnoreNullValuedFields() {\n+        return oSet.contains(Options.IGNORENULLVALUEDFIELDS);\n+    }\n+\n+\n+    \/**\n+     * add an Object to {@code roots}\n+     *\n+     * @param root New root object to visialize\n+     * @return this\n+     *\/\n+    public LJV addRoot(Object root) {\n+        this.roots.add(root);\n+        return this;\n+    }\n+\n+    \/**\n+     * Create a graph of the object rooted at {@code obj}.\n+     *\n+     * @param obj object to be visualized\n+     * @return String representation containing DOT commands to build the graph\n+     *\/\n+    public String drawGraph(Object obj) {\n+        addRoot(obj);\n+        return drawGraph();\n+    }\n+\n+    \/**\n+     * roots {@code roots} references counts can be visualized\n+     *\n+     * @return String representation containing DOT commands to build the graph\n+     *\/\n+    public String drawGraph() {\n+        Visualization visualizer = new GraphvizVisualization(this);\n+        visualizer.diagramBegin();\n+\n+        for (Object obj : getRoots()) {\n+            if (visualizer.alreadyVisualized(obj)) continue;\n+            Node root = parseGraph(obj);\n+            root.visit(visualizer);\n+        }\n+\n+        return visualizer.diagramEnd();\n+    }\n+\n+    private Node parseGraph(Object obj) {\n+        Introspection introspection = new IntrospectionWithReflectionAPI(this);\n+        return introspection.parseGraph(obj, introspection.getObjClassName(obj, false), false, null);\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/LJV.java","additions":425,"deletions":0,"binary":false,"changes":425,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+public final class Quote {\n+\n+    private Quote() {\n+\n+    }\n+\n+    private static final String quotable = \"\\\"<>{}|\";\n+\n+    private static final String canAppearUnquotedInLabelChars = \" $&*@#!-+()^%;[],;.=\";\n+\n+    private static boolean canAppearUnquotedInLabel(char c) {\n+        return canAppearUnquotedInLabelChars.indexOf(c) != -1 ||\n+                Character.isLetter(c) || Character.isDigit(c);\n+    }\n+\n+    public static String quote(String s) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0, n = s.length(); i < n; i++) {\n+            char c = s.charAt(i);\n+            if (quotable.indexOf(c) != -1) {\n+                sb.append('\\\\').append(c);\n+            } else {\n+                if (canAppearUnquotedInLabel(c)) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append(\"\\\\\\\\0u\").append(Integer.toHexString(c));\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/Quote.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.openjdk.jol.ljv.nodes.ArrayNode;\n+import org.openjdk.jol.ljv.nodes.Node;\n+import org.openjdk.jol.ljv.nodes.ObjectNode;\n+\n+public interface Visualization {\n+    void diagramBegin();\n+\n+    String diagramEnd();\n+\n+    boolean alreadyVisualized(Object obj);\n+\n+    void visitNull();\n+\n+    void visitArrayBegin(ArrayNode arrayNode);\n+\n+    void visitArrayElement(ArrayNode arrayNode, String element, int elementIndex);\n+\n+    void visitArrayElementObjectConnection(Object array, int elementIndex, Object obj);\n+\n+    void visitArrayEnd(Object array);\n+\n+    void visitObjectBegin(ObjectNode objectNode);\n+\n+    void visitObjectPrimitiveField(String fieldName, String fieldValueStr);\n+\n+    void visitObjectEnd(Object obj);\n+\n+    void visitObjectFieldRelationWithNonPrimitiveObject(Object obj, Node childNode, String ljvFieldAttributes);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/Visualization.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.nodes;\n+\n+import org.openjdk.jol.ljv.Visualization;\n+\n+import java.lang.reflect.Array;\n+import java.util.List;\n+\n+public class ArrayNode extends Node {\n+\n+    private final boolean valuesArePrimitive;\n+    private final List<Node> content;\n+\n+    public ArrayNode(Object obj, String name, boolean valuesArePrimitive, List<Node> content) {\n+        super(obj, name);\n+        this.valuesArePrimitive = valuesArePrimitive;\n+        this.content = content;\n+    }\n+\n+    public boolean areValuesPrimitive() {\n+        return valuesArePrimitive;\n+    }\n+\n+    @Override\n+    public void visit(Visualization v) {\n+        int len = Array.getLength(getValue());\n+        v.visitArrayBegin(this);\n+        for (int i = 0; i < len; ++i) {\n+            Object element = Array.get(getValue(), i);\n+            v.visitArrayElement(this, String.valueOf(element), i);\n+        }\n+        v.visitArrayEnd(getValue());\n+        if (valuesArePrimitive) return;\n+        \/\/ Generating DOTs for array object elements and creating connection\n+        for (int i = 0; i < len; ++i) {\n+            Node node = content.get(i);\n+            if (node instanceof NullNode) {\n+                continue;\n+            }\n+            if (!v.alreadyVisualized(node.getValue())) {\n+                node.visit(v);\n+            }\n+            v.visitArrayElementObjectConnection(getValue(), i, node.getValue());\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/nodes\/ArrayNode.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.nodes;\n+\n+import org.openjdk.jol.ljv.Visualization;\n+\n+import java.util.HashMap;\n+\n+public abstract class Node {\n+\n+    private final Object value;\n+    private String name;\n+    private String attributes;\n+\n+    public Node(Object obj, String name) {\n+        this.value = obj;\n+        this.name = name;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setAttributes(String attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public String getAttributes() {\n+        return attributes;\n+    }\n+\n+    abstract public void visit(Visualization v);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/nodes\/Node.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.nodes;\n+\n+import org.openjdk.jol.ljv.Visualization;\n+\n+public class NullNode extends Node {\n+\n+    public NullNode(Object obj, String name) {\n+        super(obj, name);\n+    }\n+\n+    @Override\n+    public void visit(Visualization v) {\n+        v.visitNull();\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/nodes\/NullNode.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.nodes;\n+\n+import org.openjdk.jol.ljv.Visualization;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class ObjectNode extends Node {\n+\n+    private final String className;\n+    private final int primitiveFieldsNum;\n+    private List<Node> children;\n+\n+    public ObjectNode(Object obj, String name, String className, int primitiveFieldsNum, List<Node> children,\n+                      String attributes) {\n+        super(obj, name);\n+        this.className = className;\n+        this.primitiveFieldsNum = primitiveFieldsNum;\n+        this.children = children;\n+        this.setAttributes(attributes);\n+    }\n+\n+    public ObjectNode(ObjectNode node) {\n+        super(node.getValue(), node.getName());\n+        this.setAttributes(node.getAttributes());\n+        this.className = node.getClassName();\n+        this.primitiveFieldsNum = node.getPrimitiveFieldsNum();\n+        this.children = node.getChildren();\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public int getPrimitiveFieldsNum() {\n+        return primitiveFieldsNum;\n+    }\n+\n+    public List<Node> getChildren() {\n+        return children;\n+    }\n+\n+    public void setChildren(List<Node> children) {\n+        this.children = children;\n+    }\n+\n+    @Override\n+    public void visit(Visualization v) {\n+        v.visitObjectBegin(this);\n+        \/\/ First processing only primitive fields\n+        for (Node node : children) {\n+            if (node instanceof PrimitiveNode) {\n+                node.visit(v);\n+            }\n+        }\n+        v.visitObjectEnd(getValue());\n+        \/\/ Next, processing non-primitive objects and making relations with them\n+        for (Node node : children) {\n+            if (node instanceof PrimitiveNode) {\n+                continue;\n+            }\n+            if (!v.alreadyVisualized(node.getValue())) {\n+                node.visit(v);\n+            }\n+            String attributes = node.getAttributes();\n+            if (attributes == null) attributes = \"\";\n+            v.visitObjectFieldRelationWithNonPrimitiveObject(getValue(), node, attributes);\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/nodes\/ObjectNode.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.nodes;\n+\n+import org.openjdk.jol.ljv.Visualization;\n+\n+public class PrimitiveNode extends Node {\n+\n+    public PrimitiveNode(Object obj, String name) {\n+        super(obj, name);\n+    }\n+\n+    @Override\n+    public void visit(Visualization v) {\n+        v.visitObjectPrimitiveField(getName(), String.valueOf(getValue()));\n+    }\n+\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/nodes\/PrimitiveNode.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider;\n+\n+public interface ArrayElementAttributeProvider {\n+    String getAttribute(Object array, int index);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/ArrayElementAttributeProvider.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider;\n+\n+import java.lang.reflect.Field;\n+\n+\/**\n+ * Provides DOT attributes (color, font etc.) for a given field.\n+ *\/\n+public interface FieldAttributesProvider {\n+    \/**\n+     * Get map of attributes.\n+     *\n+     * @param field Field information\n+     * @param val   Field value\n+     * @return Map of attribute values\n+     *\/\n+    String getAttribute(Field field, Object val);\n+\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/FieldAttributesProvider.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider;\n+\n+public enum NodeType {\n+    \/**\n+     * Array node.\n+     *\/\n+    ARRAY,\n+    \/**\n+     * Non-primitive object. If a value of a field, then it is represented as an arrow.\n+     *\/\n+    REFERENCE,\n+    \/**\n+     * Primitive field of an object.\n+     *\/\n+    PRIMITIVE,\n+    \/**\n+     * Null reference. We always draw it as a separate node, we do not deduplicate nulls.\n+     *\/\n+    NULL_REFERENCE,\n+    \/**\n+     * Hidden node.\n+     *\/\n+    IGNORE\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/NodeType.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider;\n+\n+public interface NodeTypeProvider {\n+    NodeType getNodeType(Object object, Object parentObject);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/NodeTypeProvider.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider;\n+\n+\/**\n+ * Provides DOT attributes (color, font etc.) for a given object.\n+ *\/\n+public interface ObjectAttributesProvider {\n+    \/**\n+     * Get map of attributes.\n+     *\n+     * @param o Object\n+     * @return Map of attribute values\n+     *\/\n+    String getAttribute(Object o);\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/ObjectAttributesProvider.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.openjdk.jol.ljv.provider.ArrayElementAttributeProvider;\n+\n+import java.lang.reflect.Array;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class ChangingArrayElementHighlighter implements ArrayElementAttributeProvider {\n+    public static final String HIGHLIGHT = \"bgcolor=\\\"yellow\\\"\";\n+\n+    Map<Object, Object> refCopy = new IdentityHashMap<>();\n+\n+    Object cloneArray(Object arr) {\n+        int length = Array.getLength(arr);\n+        Class<?> componentType = arr.getClass().getComponentType();\n+        Object newArray = Array.newInstance(componentType, length);\n+        System.arraycopy(arr, 0, newArray, 0, length);\n+        return newArray;\n+    }\n+\n+    private Object compIfAbsent(Object array) {\n+        Object value = refCopy.get(array);\n+        if (value == null) {\n+            Object newValue = cloneArray(array);\n+            refCopy.put(array, newValue);\n+            value = newValue;\n+        }\n+        return value;\n+    }\n+\n+    @Override\n+    public String getAttribute(Object array, int index) {\n+        if (!array.getClass().isArray()) {\n+            throw new IllegalStateException();\n+        }\n+\n+        Object copy = compIfAbsent(array);\n+        Object newValue = Array.get(array, index);\n+        if (!Objects.equals(newValue, Array.get(copy, index))) {\n+            Array.set(copy, index, newValue);\n+            return HIGHLIGHT;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/ChangingArrayElementHighlighter.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.openjdk.jol.ljv.provider.FieldAttributesProvider;\n+\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+\n+public class FixedFieldAttributesProvider implements FieldAttributesProvider {\n+    private final Field field;\n+    private final String attributes;\n+\n+    public FixedFieldAttributesProvider(Field field, String attributes) {\n+        this.field = Objects.requireNonNull(field);\n+        this.attributes = Objects.requireNonNull(attributes);\n+    }\n+\n+    @Override\n+    public String getAttribute(Field field, Object val) {\n+        if (this.field.equals(field)) {\n+            return attributes;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/FixedFieldAttributesProvider.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.openjdk.jol.ljv.provider.FieldAttributesProvider;\n+\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+\n+public class FixedFieldNameAttributesProvider implements FieldAttributesProvider {\n+    private final String fieldName;\n+    private final String attributes;\n+\n+    public FixedFieldNameAttributesProvider(String fieldName, String attributes) {\n+        this.fieldName = Objects.requireNonNull(fieldName);\n+        this.attributes = Objects.requireNonNull(attributes);\n+    }\n+\n+    @Override\n+    public String getAttribute(Field field, Object val) {\n+        if (this.fieldName.equals(field.getName())) {\n+            return attributes;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/FixedFieldNameAttributesProvider.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.openjdk.jol.ljv.provider.ObjectAttributesProvider;\n+\n+import java.util.Objects;\n+\n+public class FixedValueClassAttributes implements ObjectAttributesProvider {\n+\n+    private final Class<?> aClass;\n+    private final String attributes;\n+\n+    public FixedValueClassAttributes(Class<?> aClass, String values) {\n+        this.aClass = Objects.requireNonNull(aClass);\n+        this.attributes = Objects.requireNonNull(values);\n+    }\n+\n+    @Override\n+    public String getAttribute(Object o) {\n+        if (aClass.equals(o.getClass())) {\n+            return attributes;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/FixedValueClassAttributes.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.openjdk.jol.ljv.provider.ObjectAttributesProvider;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+\n+public class NewObjectHighlighter implements ObjectAttributesProvider {\n+    public static final String HIGHLIGHT = \"style=filled,fillcolor=yellow\";\n+\n+    private final Map<Object, Object> known = new IdentityHashMap<>();\n+    private final Object dummy = new Object();\n+\n+    @Override\n+    public String getAttribute(Object o) {\n+        if (known.put(o, dummy) == null) {\n+            return HIGHLIGHT;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/NewObjectHighlighter.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+public class ArrayItem {\n+    public ArrayItem[] prev;\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/ArrayItem.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+public class Example {\n+    private Integer i1 = 42;\n+    private Integer i2 = 42;\n+    private Integer i3 = 2020;\n+    private Integer i4 = 2020;\n+    private String s1 = \"HelloWorld\";\n+    private String s2 = \"HELL O\";\n+    private String s3 = \"HelloWorld\";\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/Example.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+\/**\n+ * @author Ivan Ponomarev\n+ *\/\n+public class HashCodeCollision {\n+\n+    public List<String> genCollisionString(Integer amount) {\n+        List<String> result = new ArrayList<>();\n+        for (int i = 0; i < amount; i++) {\n+            StringBuilder val = new StringBuilder();\n+            int mask = 1;\n+            do {\n+                val.append((i & mask) > 0 ? \"BB\" : \"Aa\");\n+                mask *= 2;\n+            } while (mask < amount);\n+            result.add(val.toString());\n+        }\n+        return result;\n+    }\n+\n+    @Test\n+    public void testCollisions() {\n+        for (int number = 1; number < 101; number++) {\n+            List<String> strings = genCollisionString(number);\n+            Set<String> deduplicated = new HashSet<>(strings);\n+            \/\/All strings are unique\n+            assertEquals(number, deduplicated.size());\n+            int hashCode = strings.get(0).hashCode();\n+            for (int i = 1; i < strings.size(); i++) {\n+                \/\/All strings have the same hash code\n+                assertEquals(hashCode, strings.get(i).hashCode());\n+            }\n+        }\n+    }\n+}\n+\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/HashCodeCollision.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,371 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+import org.junit.Test;\n+import org.approvaltests.Approvals;\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.info.FieldLayout;\n+import org.openjdk.jol.ljv.provider.ObjectAttributesProvider;\n+import org.openjdk.jol.util.ObjectUtils;\n+\n+import java.lang.reflect.Field;\n+import java.util.*;\n+\n+import static org.junit.Assume.assumeTrue;\n+\n+\n+public class LJVTest extends VersionGuardedTest {\n+    @Test\n+    public void stringIsNotAPrimitiveType() {\n+        assumeTrue(is11());\n+        String actualGraph = new LJV().drawGraph(\"Hello\");\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void objectArraysHoldReferencesPrimitiveArraysHoldValues() {\n+        assumeTrue(is11());\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(String.class)\n+                .setIgnorePrivateFields(false)\n+                .drawGraph(\n+                        new Object[]{new String[]{\"a\", \"b\", \"c\"}, new int[]{1, 2, 3}}\n+                );\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void assignmentDoesNotCreateANewObject() {\n+        assumeTrue(is11());\n+        String x = \"Hello\";\n+        String y = x;\n+        String actual_graph = new LJV().drawGraph(new Object[]{x, y});\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void assignmentWithNewCreateANewObject() {\n+        assumeTrue(is11());\n+        String x = \"Hello\";\n+        String y = new String(x);\n+        String actual_graph = new LJV().drawGraph(new Object[]{x, y});\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void stringIntern() {\n+        assumeTrue(is11());\n+        String x = \"Hello\";\n+        String y = \"Hello\";\n+        String actual_graph = new LJV().drawGraph(new Object[]{x, y.intern()});\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void multiDimensionalArrays() {\n+        assumeTrue(is11());\n+        String actual_graph = new LJV().drawGraph(new int[4][5]);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void reversedMultiDimensionalArrays() {\n+        assumeTrue(is11());\n+        String actual_graph = new LJV().setDirection(Direction.LR).drawGraph(new int[4][5]);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void cyclicalStructuresClassesWithAndWithoutAToStringAndWithoutContext() {\n+        assumeTrue(is11());\n+        Node n1 = new Node(\"A\");\n+        n1.level = 1;\n+        AnotherNode n2 = new AnotherNode(\"B\");\n+        n2.level = 2;\n+        AnotherNode n3 = new AnotherNode(\"C\");\n+        n3.level = 2;\n+\n+        n1.left = n2;\n+        n1.right = n3;\n+        n1.right.left = n1;\n+        n1.right.right = n1;\n+        String actual_graph = new LJV()\n+                .addFieldAttribute(\"left\", \"color=red,fontcolor=red\")\n+                .addFieldAttribute(\"right\", \"color=blue,fontcolor=blue\")\n+                .addClassAttribute(Node.class, \"color=pink,style=filled\")\n+                .addIgnoreField(\"level\")\n+                .setTreatAsPrimitive(String.class)\n+                .setShowFieldNamesInLabels(false)\n+                .drawGraph(n1);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void paulsExample() {\n+        assumeTrue(is11());\n+        ArrayList<Object> a = new ArrayList<>();\n+        a.add(new Person(\"Albert\", Gender.MALE, 35));\n+        a.add(new Person(\"Betty\", Gender.FEMALE, 20));\n+        a.add(new java.awt.Point(100, -100));\n+\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(String.class)\n+                .setTreatAsPrimitive(Gender.class)\n+                .addIgnoreField(\"hash\")\n+                .addIgnoreField(\"count\")\n+                .addIgnoreField(\"offset\")\n+                .drawGraph(a);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void multipleRoots() {\n+        assumeTrue(is11());\n+        ArrayList<Object> a = new ArrayList<>();\n+        Person p = new Person(\"Albert\", Gender.MALE, 35);\n+        Person p2 = new Person(\"Albert\", Gender.MALE, 35);\n+        String actual_graph = new LJV().addRoot(p).addRoot(p).addRoot(p).addRoot(p2).drawGraph();\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        assumeTrue(is11());\n+        String actualGraph = new LJV().drawGraph(null);\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void testMultiNull() {\n+        assumeTrue(is11());\n+        String actualGraph = new LJV().addRoot(null).addRoot(null).drawGraph();\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void testMixedNullsAndNotNulls() {\n+        assumeTrue(is11());\n+        String actualGraph = new LJV().addRoot(null)\n+                .addRoot(new Object()).addRoot(new Object()).addRoot(null).drawGraph();\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void treeMap() {\n+        assumeTrue(is11());\n+        TreeMap<String, Integer> map = new TreeMap<>();\n+\n+        map.put(\"one\", 1);\n+        map.put(\"two\", 2);\n+        map.put(\"three\", 3);\n+        map.put(\"four\", 4);\n+        map.put(\"F\", 4);\n+        map.put(\"G\", 4);\n+        map.put(\"H\", 4);\n+        map.put(\"J\", 4);\n+\n+\n+        String actualGraph = new LJV()\n+                .setIgnoreNullValuedFields(true)\n+                .setTreatAsPrimitive(Integer.class)\n+                .setTreatAsPrimitive(String.class)\n+                .addObjectAttributesProvider(new ObjectAttributesProvider() {\n+                    @Override\n+                    public String getAttribute(Object o) {\n+                        return LJVTest.this.redBlack(o);\n+                    }\n+                })\n+                .drawGraph(map);\n+        Approvals.verify(actualGraph);\n+    }\n+\n+\n+    private String redBlack(Object o) {\n+        Set<Field> colorFields = new HashSet<>();\n+        for (FieldLayout field : ClassLayout.parseClass(o.getClass()).fields()) {\n+            Field f = field.data().refField();\n+            if (\"color\".equals(f.getName()) && f.getType().equals(boolean.class)) {\n+                colorFields.add(f);\n+            }\n+        }\n+\n+        if (colorFields.isEmpty()) {\n+            return \"\";\n+        } else {\n+            Field colorField = colorFields.iterator().next();\n+            boolean b = (boolean) ObjectUtils.value(o, colorField);\n+            return b ? \"color=black\" : \"color=red\";\n+        }\n+    }\n+\n+\n+    @Test\n+    public void linkedHashMap() {\n+        assumeTrue(is11());\n+        LinkedHashMap<String, Integer> map = new LinkedHashMap<>();\n+        map.put(\"one\", 1);\n+        map.put(\"two\", 2);\n+        map.put(\"three\", 3);\n+        map.put(\"four\", 4);\n+\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(String.class)\n+                .setTreatAsPrimitive(Integer.class)\n+                .setIgnoreNullValuedFields(true)\n+                .drawGraph(map);\n+\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void hashMap() {\n+        assumeTrue(is11());\n+        HashMap<String, Integer> map = new HashMap<>();\n+        map.put(\"one\", 1);\n+        map.put(\"two\", 2);\n+        map.put(\"three\", 3);\n+        map.put(\"four\", 4);\n+\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(String.class)\n+                .setTreatAsPrimitive(Integer.class)\n+                .setIgnoreNullValuedFields(true)\n+                .drawGraph(map);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void hashMapCollision2() {\n+        assumeTrue(is11());\n+        List<String> collisionString = new HashCodeCollision().genCollisionString(8);\n+        HashMap<String, Integer> map = new HashMap<>();\n+\n+        for (int i = 0; i < collisionString.size(); i++) {\n+            map.put(collisionString.get(i), i);\n+        }\n+\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(String.class)\n+                .setTreatAsPrimitive(Integer.class)\n+                .drawGraph(map);\n+\n+        Approvals.verify(actual_graph);\n+    }\n+\n+\n+    @Test\n+    public void wrappedObjects() {\n+        assumeTrue(is11());\n+        String actual_graph = new LJV().drawGraph(new Example());\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void linkedList() {\n+        assumeTrue(is11());\n+        LinkedList<Integer> linkedList = new LinkedList<>();\n+        linkedList.add(1);\n+        linkedList.add(42);\n+        linkedList.add(21);\n+\n+        String actual_graph = new LJV()\n+                .setTreatAsPrimitive(Integer.class)\n+                .addFieldAttribute(\"next\", \"color=red,fontcolor=red\")\n+                .addFieldAttribute(\"prev\", \"color=blue,fontcolor=blue\")\n+                .addFieldAttribute(\"first\", \"color=red,fontcolor=red\")\n+                .addFieldAttribute(\"last\", \"color=red,fontcolor=red\")\n+                .drawGraph(linkedList);\n+        Approvals.verify(actual_graph);\n+    }\n+\n+    @Test\n+    public void testArrayWithHighlighting() {\n+        assumeTrue(is11());\n+        LJV ljv = new LJV()\n+                .setTreatAsPrimitive(Integer.class)\n+                .highlightChangingArrayElements();\n+        Deque<Integer> arrayDeque = new ArrayDeque<>(4);\n+        arrayDeque.add(1);\n+        arrayDeque.add(2);\n+        arrayDeque.add(3);\n+        ljv.drawGraph(arrayDeque);\n+        arrayDeque.poll();\n+        arrayDeque.poll();\n+        Approvals.verify(ljv.drawGraph(arrayDeque));\n+    }\n+\n+    @Test\n+    public void testNewObjectsHighlighting() {\n+        assumeTrue(is11());\n+        LJV ljv = new LJV()\n+                .setTreatAsPrimitive(Integer.class)\n+                .setTreatAsPrimitive(String.class)\n+                .setIgnoreNullValuedFields(true)\n+                .addIgnoreField(\"color\")\n+                .highlightNewObjects();\n+\n+        Map<String, Integer> map = new TreeMap<>();\n+        map.put(\"one\", 1);\n+        map.put(\"two\", 2);\n+        map.put(\"three\", 3);\n+        ljv.drawGraph(map);\n+        map.put(\"four\", 4);\n+        Approvals.verify(ljv.drawGraph(map));\n+    }\n+\n+    @Test\n+    public void arrayWithFieldAttribute() {\n+        assumeTrue(is11());\n+        String actualGraph = new LJV()\n+                .addFieldAttribute(\"value\", \"color=red,fontcolor=red\")\n+                .drawGraph(\"Hello\");\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void twoObjectsLinksToOneArray() {\n+        assumeTrue(is11());\n+        int[] arr = {1, 2, 3};\n+        A x = new A(arr);\n+        B y = new B(arr);\n+        String actualGraph = new LJV()\n+                .addFieldAttribute(\"a\", \"color=blue,fontcolor=red\")\n+                .addFieldAttribute(\"b\", \"color=yellow,fontcolor=green\")\n+                .addRoot(x).addRoot(y)\n+                .drawGraph();\n+        Approvals.verify(actualGraph);\n+    }\n+\n+    @Test\n+    public void arrayItemLinksToArray() {\n+        assumeTrue(is11());\n+        ArrayItem child = new ArrayItem();\n+        ArrayItem[] array = {child};\n+        child.prev = array;\n+        String actualGraph = new LJV().drawGraph(array);\n+        Approvals.verify(actualGraph);\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/LJVTest.java","additions":371,"deletions":0,"binary":false,"changes":371,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+class Node {\n+    String name;\n+    int level;\n+    AnotherNode left, right;\n+\n+    public Node(String n) {\n+        name = n;\n+    }\n+\n+    public String toString() {\n+        return \"\";\n+    }\n+}\n+\n+class AnotherNode {\n+    String name;\n+    int level;\n+    Node left, right;\n+\n+    public AnotherNode(String n) {\n+        name = n;\n+    }\n+\n+    public String toString() {\n+        return \"\";\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/Node.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+class A {\n+    public A(int[] a) {\n+        this.a = a;\n+    }\n+\n+    int[] a;\n+}\n+\n+class B {\n+    public B(int[] b) {\n+        this.b = b;\n+    }\n+\n+    int[] b;\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/ObjectsWithArray.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+public class PackageSettings {\n+    public static final String UseApprovalSubdirectory = \"approvals\";\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/PackageSettings.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+enum Gender {\n+    MALE,\n+    FEMALE,\n+    OTHER,\n+}\n+\n+class Person {\n+    private String name;\n+    private Gender gender;\n+    private int age;\n+\n+    public Person(String n, Gender g, int a) {\n+        setName(n);\n+        setGender(g);\n+        setAge(a);\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public Gender getGender() {\n+        return gender;\n+    }\n+\n+    public void setGender(Gender gender) {\n+        this.gender = gender;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/Person.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv;\n+\n+public class VersionGuardedTest {\n+    int VERSION = getVersion();\n+\n+    public boolean is11() {\n+        return VERSION == 11;\n+    }\n+\n+    static int getVersion() {\n+\/\/        Java 8 or lower: 1.6.0_23, 1.7.0, 1.7.0_80, 1.8.0_211\n+\/\/        Java 9 or higher: 9.0.1, 11.0.4, 12, 12.0.1\n+        String version = \"-1\";\n+        String fullVersion = System.getProperty(\"java.version\");\n+        if (fullVersion.startsWith(\"1.\")) {\n+            version = fullVersion.substring(2, 3);\n+        } else {\n+            int dotPos = fullVersion.indexOf(\".\");\n+            if (dotPos != -1) {\n+                version = fullVersion.substring(0, dotPos);\n+            }\n+        }\n+        return Integer.parseInt(version);\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/VersionGuardedTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>ArrayItem<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2 -> n1[label=\"prev\",fontsize=12];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.arrayItemLinksToArray.approved.txt","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"value\",fontsize=12,color=red,fontcolor=red];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.arrayWithFieldAttribute.approved.txt","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn1:f1 -> n2[label=\"1\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.assignmentDoesNotCreateANewObject.approved.txt","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4 -> n3[label=\"value\",fontsize=12];\n+\tn1:f1 -> n4[label=\"1\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.assignmentWithNewCreateANewObject.approved.txt","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>A<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=pink,style=filled];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>AnotherNode<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>B<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>null<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"left\",fontsize=12,color=red,fontcolor=red];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>AnotherNode<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>C<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3 -> n1[label=\"left\",fontsize=12,color=red,fontcolor=red];\n+\tn3 -> n1[label=\"right\",fontsize=12,color=blue,fontcolor=blue];\n+\tn1 -> n3[label=\"right\",fontsize=12,color=blue,fontcolor=blue];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.cyclicalStructuresClassesWithAndWithoutAToStringAndWithoutContext.approved.txt","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='5'>HashMap<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>threshold: 12<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>loadFactor: 0.75<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t\t<td port=\"f4\"><\/td>\n+\t\t\t\t<td port=\"f5\"><\/td>\n+\t\t\t\t<td port=\"f6\"><\/td>\n+\t\t\t\t<td port=\"f7\"><\/td>\n+\t\t\t\t<td port=\"f8\"><\/td>\n+\t\t\t\t<td port=\"f9\"><\/td>\n+\t\t\t\t<td port=\"f10\"><\/td>\n+\t\t\t\t<td port=\"f11\"><\/td>\n+\t\t\t\t<td port=\"f12\"><\/td>\n+\t\t\t\t<td port=\"f13\"><\/td>\n+\t\t\t\t<td port=\"f14\"><\/td>\n+\t\t\t\t<td port=\"f15\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 3149078<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: four<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2:f6 -> n3[label=\"6\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 110183<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: one<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2:f7 -> n4[label=\"7\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 115277<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: two<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 110338829<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: three<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5 -> n6[label=\"next\",fontsize=12];\n+\tn2:f13 -> n5[label=\"13\",fontsize=12];\n+\tn1 -> n2[label=\"table\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.hashMap.approved.txt","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,194 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='8'>HashMap<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>keySet: null<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>values: null<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 8<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 8<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>threshold: 12<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>loadFactor: 0.75<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>entrySet: null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t\t<td port=\"f4\"><\/td>\n+\t\t\t\t<td port=\"f5\"><\/td>\n+\t\t\t\t<td port=\"f6\"><\/td>\n+\t\t\t\t<td port=\"f7\"><\/td>\n+\t\t\t\t<td port=\"f8\"><\/td>\n+\t\t\t\t<td port=\"f9\"><\/td>\n+\t\t\t\t<td port=\"f10\"><\/td>\n+\t\t\t\t<td port=\"f11\"><\/td>\n+\t\t\t\t<td port=\"f12\"><\/td>\n+\t\t\t\t<td port=\"f13\"><\/td>\n+\t\t\t\t<td port=\"f14\"><\/td>\n+\t\t\t\t<td port=\"f15\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: AaAaAa<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: BBAaAa<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: AaBBAa<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: BBBBAa<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn7[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: AaAaBB<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn8[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: BBAaBB<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 5<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn9[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: AaBBBB<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 6<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn10[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='5'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 1952488608<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: BBBBBB<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 7<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>next: null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn9 -> n10[label=\"next\",fontsize=12];\n+\tn8 -> n9[label=\"next\",fontsize=12];\n+\tn7 -> n8[label=\"next\",fontsize=12];\n+\tn6 -> n7[label=\"next\",fontsize=12];\n+\tn5 -> n6[label=\"next\",fontsize=12];\n+\tn4 -> n5[label=\"next\",fontsize=12];\n+\tn3 -> n4[label=\"next\",fontsize=12];\n+\tn2:f0 -> n3[label=\"0\",fontsize=12];\n+\tn1 -> n2[label=\"table\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.hashMapCollision2.approved.txt","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='6'>LinkedHashMap<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>threshold: 12<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>loadFactor: 0.75<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>accessOrder: false<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t\t<td port=\"f4\"><\/td>\n+\t\t\t\t<td port=\"f5\"><\/td>\n+\t\t\t\t<td port=\"f6\"><\/td>\n+\t\t\t\t<td port=\"f7\"><\/td>\n+\t\t\t\t<td port=\"f8\"><\/td>\n+\t\t\t\t<td port=\"f9\"><\/td>\n+\t\t\t\t<td port=\"f10\"><\/td>\n+\t\t\t\t<td port=\"f11\"><\/td>\n+\t\t\t\t<td port=\"f12\"><\/td>\n+\t\t\t\t<td port=\"f13\"><\/td>\n+\t\t\t\t<td port=\"f14\"><\/td>\n+\t\t\t\t<td port=\"f15\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 3149078<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: four<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 110338829<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: three<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 115277<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: two<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5 -> n4[label=\"next\",fontsize=12];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 110183<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: one<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn6 -> n5[label=\"after\",fontsize=12];\n+\tn5 -> n6[label=\"before\",fontsize=12];\n+\tn5 -> n4[label=\"after\",fontsize=12];\n+\tn4 -> n5[label=\"before\",fontsize=12];\n+\tn4 -> n3[label=\"after\",fontsize=12];\n+\tn3 -> n4[label=\"before\",fontsize=12];\n+\tn2:f6 -> n3[label=\"6\",fontsize=12];\n+\tn2:f7 -> n6[label=\"7\",fontsize=12];\n+\tn2:f13 -> n5[label=\"13\",fontsize=12];\n+\tn1 -> n2[label=\"table\",fontsize=12];\n+\tn1 -> n6[label=\"head\",fontsize=12];\n+\tn1 -> n3[label=\"tail\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.linkedHashMap.approved.txt","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>LinkedList<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>item: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>prev: null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>item: 42<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Node<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>item: 21<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>next: null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4 -> n3[label=\"prev\",fontsize=12,color=blue,fontcolor=blue];\n+\tn3 -> n4[label=\"next\",fontsize=12,color=red,fontcolor=red];\n+\tn3 -> n2[label=\"prev\",fontsize=12,color=blue,fontcolor=blue];\n+\tn2 -> n3[label=\"next\",fontsize=12,color=red,fontcolor=red];\n+\tn1 -> n2[label=\"first\",fontsize=12,color=red,fontcolor=red];\n+\tn1 -> n4[label=\"last\",fontsize=12,color=red,fontcolor=red];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.linkedList.approved.txt","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f1 -> n3[label=\"1\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f2 -> n4[label=\"2\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f3 -> n5[label=\"3\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.multiDimensionalArrays.approved.txt","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Person<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 35<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>65<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>98<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>114<\/td>\n+\t\t\t\t<td>116<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn1 -> n2[label=\"name\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Gender<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>ordinal: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>77<\/td>\n+\t\t\t\t<td>65<\/td>\n+\t\t\t\t<td>76<\/td>\n+\t\t\t\t<td>69<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5 -> n6[label=\"value\",fontsize=12];\n+\tn4 -> n5[label=\"name\",fontsize=12];\n+\tn1 -> n4[label=\"gender\",fontsize=12];\n+\tn7[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Person<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 35<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn7 -> n2[label=\"name\",fontsize=12];\n+\tn7 -> n4[label=\"gender\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.multipleRoots.approved.txt","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>a<\/td>\n+\t\t\t\t<td>b<\/td>\n+\t\t\t\t<td>c<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>1<\/td>\n+\t\t\t\t<td>2<\/td>\n+\t\t\t\t<td>3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f1 -> n3[label=\"1\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.objectArraysHoldReferencesPrimitiveArraysHoldValues.approved.txt","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>ArrayList<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t\t<td port=\"f4\"><\/td>\n+\t\t\t\t<td port=\"f5\"><\/td>\n+\t\t\t\t<td port=\"f6\"><\/td>\n+\t\t\t\t<td port=\"f7\"><\/td>\n+\t\t\t\t<td port=\"f8\"><\/td>\n+\t\t\t\t<td port=\"f9\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Person<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 35<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>name: Albert<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>gender: MALE<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2:f0 -> n3[label=\"0\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Person<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 20<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>name: Betty<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>gender: FEMALE<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2:f1 -> n4[label=\"1\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Point<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>x: 100<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>y: -100<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2:f2 -> n5[label=\"2\",fontsize=12];\n+\tn1 -> n2[label=\"elementData\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.paulsExample.approved.txt","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+digraph Java {\n+\trankdir=\"LR\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t\t<td port=\"f2\"><\/td>\n+\t\t\t\t<td port=\"f3\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f1 -> n3[label=\"1\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f2 -> n4[label=\"2\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t\t<td>0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1:f3 -> n5[label=\"3\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.reversedMultiDimensionalArrays.approved.txt","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0' cellpadding='9'>\n+\t\t\t<tr>\n+\t\t\t\t<td port=\"f0\"><\/td>\n+\t\t\t\t<td port=\"f1\"><\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn1:f0 -> n2[label=\"0\",fontsize=12];\n+\tn1:f1 -> n2[label=\"1\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.stringIntern.approved.txt","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"value\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.stringIsNotAPrimitiveType.approved.txt","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>ArrayDeque<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>head: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>tail: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td bgcolor=\"yellow\">null<\/td>\n+\t\t\t\t<td bgcolor=\"yellow\">null<\/td>\n+\t\t\t\t<td>3<\/td>\n+\t\t\t\t<td>null<\/td>\n+\t\t\t\t<td>null<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"elements\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.testArrayWithHighlighting.approved.txt","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tNULL[label=\"null\", shape=plaintext];\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>Object<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>Object<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.testMixedNullsAndNotNulls.approved.txt","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tNULL[label=\"null\", shape=plaintext];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.testMultiNull.approved.txt","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>TreeMap<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: three<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: one<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: four<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,style=filled,fillcolor=yellow];\n+\tn4 -> n3[label=\"parent\",fontsize=12];\n+\tn3 -> n4[label=\"left\",fontsize=12];\n+\tn3 -> n2[label=\"parent\",fontsize=12];\n+\tn2 -> n3[label=\"left\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: two<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5 -> n2[label=\"parent\",fontsize=12];\n+\tn2 -> n5[label=\"right\",fontsize=12];\n+\tn1 -> n2[label=\"root\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.testNewObjectsHighlighting.approved.txt","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tNULL[label=\"null\", shape=plaintext];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.testNull.approved.txt","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>TreeMap<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>size: 8<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>modCount: 8<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: true<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: four<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=black];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: false<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: G<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=red];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: true<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: F<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=black];\n+\tn4 -> n3[label=\"parent\",fontsize=12];\n+\tn3 -> n4[label=\"left\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: true<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: H<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=black];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: false<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: J<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 4<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=red];\n+\tn6 -> n5[label=\"parent\",fontsize=12];\n+\tn5 -> n6[label=\"right\",fontsize=12];\n+\tn5 -> n3[label=\"parent\",fontsize=12];\n+\tn3 -> n5[label=\"right\",fontsize=12];\n+\tn3 -> n2[label=\"parent\",fontsize=12];\n+\tn2 -> n3[label=\"left\",fontsize=12];\n+\tn7[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: false<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: three<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=red];\n+\tn8[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: true<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: one<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 1<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=black];\n+\tn8 -> n7[label=\"parent\",fontsize=12];\n+\tn7 -> n8[label=\"left\",fontsize=12];\n+\tn9[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='4'>Entry<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>color: true<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>key: two<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>,color=black];\n+\tn9 -> n7[label=\"parent\",fontsize=12];\n+\tn7 -> n9[label=\"right\",fontsize=12];\n+\tn7 -> n2[label=\"parent\",fontsize=12];\n+\tn2 -> n7[label=\"right\",fontsize=12];\n+\tn1 -> n2[label=\"root\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.treeMap.approved.txt","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>A<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>1<\/td>\n+\t\t\t\t<td>2<\/td>\n+\t\t\t\t<td>3<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"a\",fontsize=12,color=blue,fontcolor=red];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>B<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn3 -> n2[label=\"b\",fontsize=12,color=yellow,fontcolor=green];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.twoObjectsLinksToOneArray.approved.txt","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>Example<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Integer<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 42<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n2[label=\"i1\",fontsize=12];\n+\tn1 -> n2[label=\"i2\",fontsize=12];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Integer<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2020<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n3[label=\"i3\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Integer<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>value: 2020<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn1 -> n4[label=\"i4\",fontsize=12];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>101<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t\t<td>87<\/td>\n+\t\t\t\t<td>111<\/td>\n+\t\t\t\t<td>114<\/td>\n+\t\t\t\t<td>108<\/td>\n+\t\t\t\t<td>100<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn5 -> n6[label=\"value\",fontsize=12];\n+\tn1 -> n5[label=\"s1\",fontsize=12];\n+\tn7[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn8[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>72<\/td>\n+\t\t\t\t<td>69<\/td>\n+\t\t\t\t<td>76<\/td>\n+\t\t\t\t<td>76<\/td>\n+\t\t\t\t<td>32<\/td>\n+\t\t\t\t<td>79<\/td>\n+\t\t\t<\/tr>\n+\t\t<\/table>\n+\t>];\n+\tn7 -> n8[label=\"value\",fontsize=12];\n+\tn1 -> n7[label=\"s2\",fontsize=12];\n+\tn1 -> n5[label=\"s3\",fontsize=12];\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/approvals\/LJVTest.wrappedObjects.approved.txt","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.junit.Test;\n+import org.junit.Assert;\n+import org.openjdk.jol.ljv.VersionGuardedTest;\n+\n+import static org.junit.Assume.assumeTrue;\n+import static org.openjdk.jol.ljv.provider.impl.ChangingArrayElementHighlighter.HIGHLIGHT;\n+\n+public class ChangingArrayElementHighlighterTest extends VersionGuardedTest {\n+\n+    ChangingArrayElementHighlighter provider = new ChangingArrayElementHighlighter();\n+\n+    @Test\n+    public void checksChangedElements() {\n+        assumeTrue(is11());\n+        int[] arr = new int[]{1, 2, 3};\n+        for (int i = 0; i < arr.length; i++) {\n+\n+            Assert.assertEquals(\"\", provider.getAttribute(arr, i));\n+        }\n+        arr[0] = 2;\n+        arr[2] = 4;\n+\n+        Assert.assertEquals(HIGHLIGHT, provider.getAttribute(arr, 0));\n+        Assert.assertEquals(\"\", provider.getAttribute(arr, 1));\n+        Assert.assertEquals(HIGHLIGHT, provider.getAttribute(arr, 2));\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/ChangingArrayElementHighlighterTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.ljv.provider.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jol.ljv.VersionGuardedTest;\n+\n+import static org.junit.Assume.assumeTrue;\n+import static org.openjdk.jol.ljv.provider.impl.NewObjectHighlighter.HIGHLIGHT;\n+\n+public class NewObjectHighlighterTest extends VersionGuardedTest {\n+    @Test\n+    public void newObjectsAreHighlighted() {\n+        assumeTrue(is11());\n+        Object o1 = new Object();\n+        Object o2 = new Object();\n+        NewObjectHighlighter highlighter = new NewObjectHighlighter();\n+        Assert.assertEquals(HIGHLIGHT, highlighter.getAttribute(o1));\n+        Assert.assertEquals(HIGHLIGHT, highlighter.getAttribute(o2));\n+        Assert.assertEquals(\"\", highlighter.getAttribute(o1));\n+    }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/ljv\/provider\/impl\/NewObjectHighlighterTest.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}