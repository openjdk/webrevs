{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.jol.util.Multimap;\n@@ -54,2 +55,4 @@\n-    private final Multiset<ClassData> classCounts;\n-    private final Map<Long, ClassData> classDatas;\n+    private final Multimap<Long, FieldData> classFields;\n+    private final Multiset<Long> classCounts;\n+    private final Multiset<ClassData> arrayCounts;\n+    private final Map<Long, Long> classSupers;\n@@ -79,1 +82,3 @@\n-        this.classDatas = new HashMap<>();\n+        this.classFields = new Multimap<>();\n+        this.arrayCounts = new Multiset<>();\n+        this.classSupers = new HashMap<>();\n@@ -177,0 +182,37 @@\n+        \/\/ Post-process supers: merge all fields datas up the class hierarchy.\n+        Map<Long, ClassData> classDatas = new HashMap<>();\n+\n+        for (Long klassId : classFields.keys()) {\n+            ClassData cd = new ClassData(classNames.get(klassId));\n+\n+            Long id = klassId;\n+            while (id != null) {\n+                cd.addSuperClass(classNames.get(id));\n+                for (FieldData fd : classFields.get(id)) {\n+                    cd.addField(fd);\n+                }\n+                id = classSupers.get(id);\n+            }\n+            classDatas.put(klassId, cd);\n+        }\n+\n+        \/\/ Fix up superclasses for HotspotLayouter to work well.\n+        for (Long klassId : classDatas.keySet()) {\n+            Long key = classSupers.get(klassId);\n+            if (key != null) {\n+                ClassData superCd = classDatas.get(key);\n+                ClassData thisCd = classDatas.get(klassId);\n+                thisCd.addSuperClassData(superCd);\n+            }\n+        }\n+\n+        \/\/ Compute final class counts.\n+        Multiset<ClassData> finalClassCounts = new Multiset<>();\n+        for (ClassData cd : arrayCounts.keys()) {\n+            finalClassCounts.add(cd, arrayCounts.count(cd));\n+        }\n+        for (Long id : classDatas.keySet()) {\n+            ClassData cd = classDatas.get(id);\n+            finalClassCounts.add(cd, classCounts.count(id));\n+        }\n+\n@@ -181,1 +223,1 @@\n-        return classCounts;\n+        return finalClassCounts;\n@@ -244,1 +286,1 @@\n-        classCounts.add(new ClassData(typeString + \"[]\", typeString, elements));\n+        arrayCounts.add(new ClassData(typeString + \"[]\", typeString, elements));\n@@ -266,1 +308,1 @@\n-        classCounts.add(new ClassData(name, \"Object\", elements));\n+        arrayCounts.add(new ClassData(name, \"Object\", elements));\n@@ -274,1 +316,1 @@\n-        classCounts.add(classDatas.get(klassID));\n+        classCounts.add(klassID);\n@@ -291,3 +333,0 @@\n-        ClassData cd = new ClassData(name);\n-        cd.addSuperClass(name);\n-\n@@ -297,3 +336,2 @@\n-        ClassData superCd = classDatas.get(superKlassID);\n-        if (superCd != null) {\n-            cd.merge(superCd);\n+        if (superKlassID != 0 && classSupers.put(klassID, superKlassID) != null) {\n+            throw new HeapDumpException(\"Format error: duplicate class \" + name);\n@@ -331,1 +369,1 @@\n-            cd.addField(FieldData.create(name, strings.get(index), getTypeString(type)));\n+            classFields.put(klassID, FieldData.create(name, strings.get(index), getTypeString(type)));\n@@ -338,2 +376,0 @@\n-        classDatas.put(klassID, cd);\n-\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/heap\/HeapDumpReader.java","additions":52,"deletions":16,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -375,10 +375,0 @@\n-    \/**\n-     * Merge this class data with the super-class class data\n-     *\n-     * @param superClassData super class data\n-     *\/\n-    public void merge(ClassData superClassData) {\n-        fields.addAll(superClassData.fields);\n-        classNames.addAll(0, superClassData.classNames);\n-    }\n-\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassData.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,5 @@\n-        return Collections.unmodifiableList(map.get(k));\n+        if (map.containsKey(k)) {\n+            return Collections.unmodifiableList(map.get(k));\n+        } else {\n+            return Collections.emptyList();\n+        }\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/util\/Multimap.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}