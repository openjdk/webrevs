{"files":[{"patch":"@@ -146,0 +146,5 @@\n+        <dependency>\n+            <groupId>junit<\/groupId>\n+            <artifactId>junit<\/artifactId>\n+            <scope>test<\/scope>\n+        <\/dependency>\n","filename":"jol-cli\/pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.ArrayList;\n@@ -54,0 +55,4 @@\n+        OptionSpec<String> optFactory = parser.accepts(\"factory\",\n+                \"Fully-qualified factory class name. Factory must implement a factory method with the signature: public static <T> T newInstance(java.lang.Class<T>)\")\n+            .withRequiredArg().ofType(String.class).describedAs(\"factoryClass\");\n+\n@@ -57,0 +62,1 @@\n+        Class<?> factoryClass = null;\n@@ -70,0 +76,4 @@\n+\n+            if (set.has(optFactory)) {\n+                factoryClass = ClassUtils.loadClass(optFactory.value(set));\n+            }\n@@ -79,1 +89,1 @@\n-                runWith(ClassUtils.loadClass(klassName));\n+                runWith(factoryClass, ClassUtils.loadClass(klassName));\n@@ -86,1 +96,39 @@\n-    protected Object tryInstantiate(Class<?> klass) throws Exception {\n+    protected Object tryInstantiate(Class<?> factoryClass, Class<?> klass) throws Exception {\n+\n+        List<Throwable> suppressed = new ArrayList<>();\n+\n+        if (factoryClass != null) {\n+            try {\n+                Object o =\n+                    factoryClass\n+                        .getMethod(\"newInstance\", Class.class)\n+                        .invoke(null, klass);\n+\n+                if (o == null) {\n+                    throw new UnsupportedOperationException(\n+                        factoryClass.getTypeName()\n+                            + \"#newInstance(Class) does not support creating \"\n+                            + klass.getTypeName());\n+                }\n+\n+                if (!o.getClass().equals(klass)) {\n+                    throw new ClassCastException(\n+                        factoryClass.getTypeName()\n+                            + \"#newInstance(Class) failed to create \"\n+                            + klass.getTypeName()\n+                            + \". Instead created \"\n+                            + o.getClass().getTypeName());\n+                }\n+\n+                System.out.println(\n+                    \"Instantiated the sample instance via \"\n+                        + factoryClass.getTypeName()\n+                        + \".newInstance(Class)\");\n+                System.out.println();\n+                return o;\n+            } catch (Exception e) {\n+                \/\/ Fall-through, let's try something else.\n+                suppressed.add(e);\n+            }\n+        }\n+\n@@ -97,0 +145,1 @@\n+            suppressed.add(e);\n@@ -117,0 +166,1 @@\n+                suppressed.add(e);\n@@ -120,1 +170,7 @@\n-        throw new InstantiationException(\"No matching (default) constructor, and no other constructor work.\");\n+        InstantiationException e = new InstantiationException(\"No matching (default) constructor, and no other constructor work.\");\n+\n+        for (Throwable t : suppressed) {\n+            e.addSuppressed(t);\n+        }\n+\n+        throw e;\n@@ -135,1 +191,1 @@\n-    protected abstract void runWith(Class<?> klass) throws Exception;\n+    protected abstract void runWith(Class<?> factoryClass, Class<?> klass) throws Exception;\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ClasspathedOperation.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public void runWith(Class<?> klass) throws Exception {\n+    public void runWith(Class<?> factoryClass, Class<?> klass) throws Exception {\n@@ -50,1 +50,1 @@\n-            Object o = tryInstantiate(klass);\n+            Object o = tryInstantiate(factoryClass, klass);\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectExternals.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public void runWith(Class<?> klass) throws Exception {\n+    public void runWith(Class<?> factoryClass, Class<?> klass) throws Exception {\n@@ -50,1 +50,1 @@\n-            Object o = tryInstantiate(klass);\n+            Object o = tryInstantiate(factoryClass, klass);\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectFootprint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public void runWith(Class<?> klass) throws Exception {\n+    public void runWith(Class<?> factoryClass, Class<?> klass) throws Exception {\n@@ -50,1 +50,1 @@\n-            Object o = tryInstantiate(klass);\n+            Object o = tryInstantiate(factoryClass, klass);\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectInternals.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    protected void runWith(Class<?> klass) {\n+    protected void runWith(Class<?> factoryClass, Class<?> klass) {\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectInternalsEstimates.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+package org.openjdk.jol.operations;\n+\n+import org.junit.Test;\n+\n+import java.util.Objects;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+\/** Tests for {@link ClasspathedOperation}. *\/\n+public final class ClasspathedOperationTest {\n+\n+    @Test\n+    public void testTryInstantiate() throws Exception {\n+\n+        final ClasspathedOperation classpathedOperation = new ClasspathedOperation() {\n+            @Override\n+            public String label() {\n+                return \"test\";\n+            }\n+\n+            @Override\n+            public String description() {\n+                return \"test\";\n+            }\n+\n+            @Override\n+            protected void runWith(final Class<?> factoryClass, final Class<?> klass) throws Exception {\n+              throw new UnsupportedOperationException();\n+            }\n+        };\n+\n+        \/\/ Falls back to constructor if factory fails:\n+        assertNotNull(classpathedOperation.tryInstantiate(null, Object.class));\n+        assertNotNull(classpathedOperation.tryInstantiate(Object.class, Object.class));\n+        assertNotNull(classpathedOperation.tryInstantiate(TestFactory.class, Object.class));\n+\n+        try {\n+            classpathedOperation.tryInstantiate(null, RequiresFactory.class);\n+            fail(\"Instantiated \" + RequiresFactory.class.getSimpleName() + \" without factory.\");\n+        } catch (final Exception e) {\n+           \/\/ Expected.\n+        }\n+\n+        try {\n+            classpathedOperation.tryInstantiate(InvalidFactory.class, RequiresFactory.class);\n+            fail(\"Instantiated \" + RequiresFactory.class.getSimpleName() + \" without valid factory.\");\n+        } catch (final Exception e) {\n+            \/\/ Expected.\n+        }\n+\n+        \/\/ Factory is used.\n+        Object o = classpathedOperation.tryInstantiate(TestFactory.class, RequiresFactory.class);\n+        assertNotNull(o);\n+        assertTrue(o instanceof RequiresFactory);\n+    }\n+\n+    public static final class RequiresFactory {\n+       public RequiresFactory(final Object object) {\n+           Objects.requireNonNull(object);\n+       }\n+    }\n+\n+    public static final class TestFactory {\n+        public static <T> T newInstance(final Class<T> klass) {\n+            if (RequiresFactory.class.equals(klass)) {\n+                return klass.cast(new RequiresFactory(new Object()));\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    public static final class InvalidFactory {\n+\n+        public static <T> T newInstance(final Class<T> klass) {\n+            \/\/ Always creates objects, but lies and claims they are of type T.\n+            return (T) new Object();\n+        }\n+    }\n+}\n","filename":"jol-cli\/src\/test\/java\/org\/openjdk\/jol\/operations\/ClasspathedOperationTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}