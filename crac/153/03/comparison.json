{"files":[{"patch":"@@ -1378,0 +1378,4 @@\n+  if (!backing_store_file_name) {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.test.lib.crac.CracTestArg;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -32,0 +34,1 @@\n+import java.time.Duration;\n@@ -41,1 +44,2 @@\n- * @run driver\/timeout=30 jdk.test.lib.crac.CracTest\n+ * @run driver\/timeout=30 jdk.test.lib.crac.CracTest false\n+ * @run driver\/timeout=30 jdk.test.lib.crac.CracTest true\n@@ -45,0 +49,4 @@\n+\n+    @CracTestArg(0)\n+    boolean perfDisableSharedMem;\n+\n@@ -48,0 +56,6 @@\n+        builder.captureOutput(true);\n+        if (perfDisableSharedMem) {\n+            builder.vmOption(\"-XX:+PerfDisableSharedMem\");\n+        } else {\n+            builder.vmOption(\"-XX:-PerfDisableSharedMem\");\n+        }\n@@ -53,7 +67,6 @@\n-        long start = System.nanoTime();\n-        while (!perfdata.toFile().exists()) {\n-            if (System.nanoTime() - start > TimeUnit.SECONDS.toNanos(10)) {\n-                throw new IllegalStateException(\"Perf data file did not appear within time limit in the checkpointed process: \" + perfdata);\n-            }\n-            \/\/noinspection BusyWait\n-            Thread.sleep(10);\n+        if (perfDisableSharedMem) {\n+            Thread.sleep(100);\n+            assertFalse(perfdata.toFile().exists(), \"Perf data file exists although we run with -XX:+PerfDisableSharedMem\");\n+        } else {\n+            waitForFile(perfdata);\n+            checkMapped(pid, perfdata.toString());\n@@ -61,1 +74,0 @@\n-        checkMapped(pid, perfdata.toString());\n@@ -68,0 +80,1 @@\n+        builder.clearVmOptions();\n@@ -69,8 +82,0 @@\n-        start = System.nanoTime();\n-        while (!perfdata.toFile().exists()) {\n-            if (System.nanoTime() - start > TimeUnit.SECONDS.toNanos(10)) {\n-                throw new IllegalStateException(\"Perf data file did not appear within time limit in the restored process: \" + perfdata);\n-            }\n-            \/\/noinspection BusyWait\n-            Thread.sleep(10);\n-        }\n@@ -80,4 +85,10 @@\n-        checkMapped(pidString, perfdata.toString());\n-        builder.runJcmd(pidString, \"PerfCounter.print\")\n-                .shouldHaveExitValue(0)\n-                .shouldContain(\"sun.perfdata.size=\");\n+        if (perfDisableSharedMem) {\n+            Thread.sleep(100);\n+            assertFalse(perfdata.toFile().exists(), \"Perf data file exists although we run with -XX:+PerfDisableSharedMem\");\n+        } else {\n+            waitForFile(perfdata);\n+            checkMapped(pidString, perfdata.toString());\n+            builder.runJcmd(pidString, \"PerfCounter.print\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"sun.perfdata.size=\");\n+        }\n@@ -87,0 +98,14 @@\n+        OutputAnalyzer out = restored.outputAnalyzer();\n+        out.stderrShouldBeEmpty();\n+        out.stdoutShouldBeEmpty();\n+    }\n+\n+    private static void waitForFile(Path perfdata) throws InterruptedException {\n+        long start = System.nanoTime();\n+        while (!perfdata.toFile().exists()) {\n+            if (System.nanoTime() - start > TimeUnit.SECONDS.toNanos(10)) {\n+                throw new IllegalStateException(\"Perf data file did not appear within time limit in the checkpointed process: \" + perfdata);\n+            }\n+            \/\/noinspection BusyWait\n+            Thread.sleep(10);\n+        }\n","filename":"test\/jdk\/jdk\/crac\/PerfMemoryRestoreTest.java","additions":46,"deletions":21,"binary":false,"changes":67,"status":"modified"}]}