{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.io.FileDescriptor;\n@@ -41,0 +42,1 @@\n+    private long stopPipe;\n@@ -54,0 +56,18 @@\n+    @Override\n+    protected void stop() throws IOException {\n+        super.stop();\n+        stopPipe = IOUtil.makePipe(true);\n+        int err = EPoll.ctl(epfd, EPOLL_CTL_ADD, (int)(stopPipe >> 32), EPOLLIN | EPOLLONESHOT);\n+        if (err != 0) {\n+            throw new IOException(\"epoll_ctl failed: \" + err);\n+        }\n+        IOUtil.write1((int) stopPipe, (byte) 0);\n+    }\n+\n+    @Override\n+    protected void closeFds() throws IOException {\n+        Poller.nd.close(IOUtil.newFD((int) (stopPipe >> 32)));\n+        Poller.nd.close(IOUtil.newFD((int) stopPipe));\n+        super.closeFds();\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollPoller.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -38,0 +39,1 @@\n+    private long stopPipe;\n@@ -51,0 +53,18 @@\n+    @Override\n+    protected void stop() throws IOException {\n+        super.stop();\n+        stopPipe = IOUtil.makePipe(true);\n+        int err = KQueue.register(kqfd, (int)(stopPipe >> 32), EVFILT_READ, (EV_ADD|EV_ONESHOT));\n+        if (err != 0) {\n+            throw new IOException(\"kqueue_register failed: \" + err);\n+        }\n+        IOUtil.write1((int) stopPipe, (byte) 0);\n+    }\n+\n+    @Override\n+    protected void closeFds() throws IOException {\n+        Poller.nd.close(IOUtil.newFD((int) (stopPipe >> 32)));\n+        Poller.nd.close(IOUtil.newFD((int) stopPipe));\n+        super.closeFds();\n+    }\n+\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueuePoller.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.FileDescriptor;\n@@ -28,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -32,4 +34,1 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.*;\n@@ -38,0 +37,4 @@\n+import jdk.internal.crac.JDKResource;\n+import jdk.internal.crac.Core;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n@@ -45,0 +48,2 @@\n+    static final NativeDispatcher nd = new SocketDispatcher();\n+\n@@ -58,0 +63,1 @@\n+    private volatile boolean stop = false;\n@@ -126,0 +132,12 @@\n+    \/**\n+     * Implementation is expected to override this method adding wakeup\n+     * code for the thread (natively) waiting in {@link #poll(int)}.\n+     *\/\n+    protected void stop() throws IOException {\n+        stop = true;\n+    }\n+\n+    protected void closeFds() throws IOException {\n+        nd.close(IOUtil.newFD(fdVal()));\n+    }\n+\n@@ -242,1 +260,1 @@\n-            for (;;) {\n+            while (!stop) {\n@@ -263,1 +281,1 @@\n-            for (;;) {\n+            while (!stop) {\n@@ -269,1 +287,3 @@\n-                polled = poll(0);\n+                if (!stop) {\n+                    polled = poll(0);\n+                }\n@@ -291,1 +311,1 @@\n-    private static class Pollers {\n+    private static class Pollers implements JDKResource {\n@@ -294,1 +314,1 @@\n-        private final Poller masterPoller;\n+        private Poller masterPoller;\n@@ -297,0 +317,1 @@\n+        private final List<Thread> threads = new ArrayList<>();\n@@ -299,1 +320,1 @@\n-        private Executor executor;\n+        private ExecutorService executor;\n@@ -344,0 +365,2 @@\n+\n+            Core.Priority.EPOLLSELECTOR.getContext().register(this);\n@@ -440,0 +463,1 @@\n+                threads.add(thread);\n@@ -444,0 +468,56 @@\n+\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            for (int i = 0; i < readPollers.length; i++) {\n+                if (masterPoller != null) {\n+                    masterPoller.wakeup(readPollers[i].fdVal());\n+                }\n+                readPollers[i].stop();\n+            }\n+            for (int i = 0; i < writePollers.length; i++) {\n+                if (masterPoller != null) {\n+                    masterPoller.wakeup(writePollers[i].fdVal());\n+                }\n+                writePollers[i].stop();\n+            }\n+            if (masterPoller != null) {\n+                masterPoller.stop();\n+            }\n+            if (executor != null) {\n+                executor.shutdownNow();\n+                if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {\n+                    throw new TimeoutException(\"Poller executor did not complete\");\n+                }\n+            }\n+            for (Thread t : threads) {\n+                t.interrupt();\n+                t.join();\n+            }\n+            threads.clear();\n+            for (int i = 0; i < readPollers.length; i++) {\n+                readPollers[i].closeFds();\n+                readPollers[i] = null;\n+            }\n+            for (int i = 0; i < writePollers.length; i++) {\n+                writePollers[i].closeFds();\n+                writePollers[i] = null;\n+            }\n+            if (masterPoller != null) {\n+                masterPoller.closeFds();\n+                masterPoller = null;\n+            }\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            if (pollerMode == Mode.VTHREAD_POLLERS) {\n+                masterPoller = provider.readPoller(false);\n+            }\n+            for (int i = 0; i < readPollers.length; i++) {\n+                readPollers[i] = provider.readPoller(pollerMode == Mode.VTHREAD_POLLERS);\n+            }\n+            for (int i = 0; i < writePollers.length; i++) {\n+                writePollers[i] = provider.writePoller(pollerMode == Mode.VTHREAD_POLLERS);\n+            }\n+            start();\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Poller.java","additions":90,"deletions":10,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.nio.ByteBuffer;\n+\n@@ -40,0 +42,1 @@\n+    private PipeImpl stopPipe;\n@@ -47,0 +50,18 @@\n+    @Override\n+    protected void stop() throws IOException {\n+        super.stop();\n+        stopPipe = new PipeImpl(DefaultSelectorProvider.get(), true, false);\n+        int err = WEPoll.ctl(handle, EPOLL_CTL_ADD, stopPipe.source().getFDVal(), EPOLLIN | EPOLLONESHOT);\n+        if (err != 0) {\n+            throw new IOException(\"epoll_ctl failed: \" + err);\n+        }\n+        stopPipe.sink().write(ByteBuffer.allocate(1).put((byte) 0).flip());\n+    }\n+\n+    @Override\n+    protected void closeFds() throws IOException {\n+        stopPipe.source().close();\n+        stopPipe.sink().close();\n+        WEPoll.close(handle);\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollPoller.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/**\n+ * @test id=SYSTEM_THREADS\n+ * @library \/test\/lib\n+ * @build PollerTest\n+ * @run driver\/timeout=10 jdk.test.lib.crac.CracTest false SYSTEM_THREADS\n+ * @run driver\/timeout=10 jdk.test.lib.crac.CracTest true SYSTEM_THREADS\n+ *\/\n+\/**\n+ * @test id=VTHREAD_POLLERS\n+ * @requires os.family == \"linux\" | os.family == \"mac\"\n+ * @library \/test\/lib\n+ * @build PollerTest\n+ * @run driver\/timeout=10 jdk.test.lib.crac.CracTest false VTHREAD_POLLERS\n+ * @run driver\/timeout=10 jdk.test.lib.crac.CracTest true VTHREAD_POLLERS\n+ *\/\n+public class PollerTest implements CracTest {\n+    @CracTestArg(0)\n+    boolean checkpointVirtual;\n+\n+    @CracTestArg(1)\n+    String pollerMode;\n+\n+    @Override\n+    public void test() throws Exception {\n+        new CracBuilder()\n+                .engine(CracEngine.SIMULATE)\n+                .javaOption(\"jdk.pollerMode\", pollerMode)\n+                .startCheckpoint().waitForSuccess();\n+    }\n+\n+    @FunctionalInterface\n+    interface ThrowingRunnable {\n+        public void run() throws Exception;\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        execInVirtual(this::useSockets);\n+        if (checkpointVirtual) {\n+            execInVirtual(Core::checkpointRestore);\n+        } else {\n+            Core.checkpointRestore();\n+        }\n+        execInVirtual(this::useSockets);\n+    }\n+\n+    public void execInVirtual(ThrowingRunnable runnable) throws Exception {\n+        AtomicReference<Exception> ex = new AtomicReference<>();\n+        Thread.startVirtualThread(() -> {\n+            try {\n+                runnable.run();\n+            } catch (Exception e) {\n+                ex.set(e);\n+            }\n+        }).join();\n+        if (ex.get() != null) {\n+            throw ex.get();\n+        }\n+    }\n+\n+    private void useSockets() throws IOException, InterruptedException {\n+        ServerSocket serverSocket = new ServerSocket(0, 50, InetAddress.getLoopbackAddress());\n+        Thread serverThread = Thread.startVirtualThread(() -> {\n+            try {\n+                Socket socket = serverSocket.accept();\n+                socket.close();\n+                \/\/ the socket leaks in here but for some reason it does not leave the FD open\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        Socket clientSocket = new Socket(InetAddress.getLoopbackAddress(), serverSocket.getLocalPort());\n+        clientSocket.close();\n+        serverSocket.close();\n+        serverThread.join();\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/PollerTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}