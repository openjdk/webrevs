{"files":[{"patch":"@@ -102,1 +102,1 @@\n-    --override-methods=summary\n+    --override-methods=summary --syntax-highlight\n","filename":"make\/Docs.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,0 +457,1 @@\n+JCOV_MODULES := @JCOV_MODULES@\n@@ -851,0 +852,1 @@\n+STATIC_JDK_IMAGE_SUBDIR := static-jdk\n@@ -855,0 +857,1 @@\n+STATIC_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(STATIC_JDK_IMAGE_SUBDIR)\n@@ -934,0 +937,1 @@\n+STATIC_JDK_BUNDLE_NAME := static-jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n@@ -944,0 +948,1 @@\n+STATIC_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(STATIC_JDK_BUNDLE_NAME)\n","filename":"make\/autoconf\/spec.gmk.template","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+      aotCodeCache.cpp \\\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,0 +132,2 @@\n+    decl(FPHP,          fphp,          9)     \\\n+    decl(ASIMDHP,       asimdhp,       10)    \\\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-  static void set_features_string();\n+  static void set_cpu_info_string();\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,3 +64,1 @@\n-#ifdef _LP64\n-\/\/ stack if compiled for unix and LP64. To pass stack overflow tests we need\n-\/\/ 20 shadow pages.\n+\/\/ stack if compiled for unix. To pass stack overflow tests we need 20 shadow pages.\n@@ -72,4 +70,0 @@\n-#else\n-#define DEFAULT_STACK_SHADOW_PAGES (4 DEBUG_ONLY(+5))\n-#define MIN_STACK_SHADOW_PAGES DEFAULT_STACK_SHADOW_PAGES\n-#endif \/\/ _LP64\n@@ -82,4 +76,0 @@\n-#ifdef _LP64\n-#else\n-define_pd_global(bool, VMContinuations, false);\n-#endif\n@@ -207,1 +197,9 @@\n-      \"CPU features are missing\")\n+      \"CPU features are missing\")                                           \\\n+                                                                            \\\n+  product(int, X86ICacheSync, -1, DIAGNOSTIC,                               \\\n+             \"Select the X86 ICache sync mechanism: -1 = auto-select; \"     \\\n+             \"0 = none (dangerous); 1 = CLFLUSH loop; 2 = CLFLUSHOPT loop; \"\\\n+             \"3 = CLWB loop; 4 = single CPUID; 5 = single SERIALIZE. \"      \\\n+             \"Explicitly selected mechanism will fail at startup if \"       \\\n+             \"hardware does not support it.\")                               \\\n+             range(-1, 5)\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -87,2 +87,0 @@\n-#ifdef _LP64\n-\n@@ -111,1 +109,0 @@\n-#endif\n@@ -131,1 +128,0 @@\n-#if defined(_LP64)\n@@ -150,1 +146,0 @@\n-#endif\n@@ -175,1 +170,1 @@\n-    \/\/ LP64: rcx and rdx are first and second argument registers on windows\n+    \/\/ rcx and rdx are first and second argument registers on windows\n@@ -178,4 +173,0 @@\n-#ifdef _LP64\n-#else\n-    __ movptr(rbp, Address(rsp, 8)); \/\/ cpuid_info address\n-#endif\n@@ -442,1 +433,0 @@\n-#if defined(_LP64)\n@@ -477,1 +467,0 @@\n-#endif\n@@ -551,1 +540,0 @@\n-#ifdef _LP64\n@@ -554,1 +542,0 @@\n-#endif\n@@ -580,1 +567,0 @@\n-#ifdef _LP64\n@@ -583,1 +569,0 @@\n-#endif\n@@ -624,1 +609,0 @@\n-#ifdef _LP64\n@@ -627,1 +611,0 @@\n-#endif\n@@ -652,1 +635,0 @@\n-#ifdef _LP64\n@@ -655,1 +637,0 @@\n-#endif\n@@ -711,1 +692,0 @@\n-#ifdef _LP64\n@@ -714,4 +694,0 @@\n-#else\n-    __ movptr(rax, Address(rsp, 16)); \/\/ CPUID leaf\n-    __ movptr(rsi, Address(rsp, 20)); \/\/ register array address\n-#endif\n@@ -758,1 +734,1 @@\n-    \/\/ LP64: rcx and rdx are first and second argument registers on windows\n+    \/\/ rcx and rdx are first and second argument registers on windows\n@@ -761,4 +737,0 @@\n-#ifdef _LP64\n-#else\n-    __ movptr(rbp, Address(rsp, 8)); \/\/ cpuid_info address\n-#endif\n@@ -1324,2 +1296,2 @@\n-  LP64_ONLY(_supports_atomic_getset8 = true);\n-  LP64_ONLY(_supports_atomic_getadd8 = true);\n+  _supports_atomic_getset8 = true;\n+  _supports_atomic_getadd8 = true;\n@@ -1333,1 +1305,0 @@\n-#ifdef _LP64\n@@ -1342,2 +1313,0 @@\n-#endif\n-#ifdef AMD64\n@@ -1356,2 +1325,0 @@\n-#endif\n-#ifdef _LP64\n@@ -1367,1 +1334,0 @@\n-#endif\n@@ -1532,0 +1498,24 @@\n+  assert(supports_cpuid(), \"Always present\");\n+  assert(supports_clflush(), \"Always present\");\n+  if (X86ICacheSync == -1) {\n+    \/\/ Auto-detect, choosing the best performant one that still flushes\n+    \/\/ the cache. We could switch to CPUID\/SERIALIZE (\"4\"\/\"5\") going forward.\n+    if (supports_clwb()) {\n+      FLAG_SET_ERGO(X86ICacheSync, 3);\n+    } else if (supports_clflushopt()) {\n+      FLAG_SET_ERGO(X86ICacheSync, 2);\n+    } else {\n+      FLAG_SET_ERGO(X86ICacheSync, 1);\n+    }\n+  } else {\n+    if ((X86ICacheSync == 2) && !supports_clflushopt()) {\n+      vm_exit_during_initialization(\"CPU does not support CLFLUSHOPT, unable to use X86ICacheSync=2\");\n+    }\n+    if ((X86ICacheSync == 3) && !supports_clwb()) {\n+      vm_exit_during_initialization(\"CPU does not support CLWB, unable to use X86ICacheSync=3\");\n+    }\n+    if ((X86ICacheSync == 5) && !supports_serialize()) {\n+      vm_exit_during_initialization(\"CPU does not support SERIALIZE, unable to use X86ICacheSync=5\");\n+    }\n+  }\n+\n@@ -1533,1 +1523,1 @@\n-  int res = jio_snprintf(\n+  int cpu_info_size = jio_snprintf(\n@@ -1538,2 +1528,0 @@\n-  assert(res > 0, \"not enough temporary space allocated\");\n-  insert_features_names(buf + res, sizeof(buf) - res);\n@@ -1541,1 +1529,8 @@\n-  _features_string = os::strdup(buf);\n+  assert(cpu_info_size > 0, \"not enough temporary space allocated\");\n+  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n+\n+  _cpu_info_string = os::strdup(buf);\n+\n+  _features_string = extract_features_string(_cpu_info_string,\n+                                             strnlen(_cpu_info_string, sizeof(buf)),\n+                                             cpu_info_size);\n@@ -1625,1 +1620,0 @@\n-#ifdef _LP64\n@@ -1636,6 +1630,0 @@\n-#else\n-  if (UseAdler32Intrinsics) {\n-    warning(\"Adler32Intrinsics not available on this CPU.\");\n-    FLAG_SET_DEFAULT(UseAdler32Intrinsics, false);\n-  }\n-#endif\n@@ -1665,1 +1653,0 @@\n-#ifdef _LP64\n@@ -1681,7 +1668,0 @@\n-#else\n-  \/\/ No support currently for ChaCha20 intrinsics on 32-bit platforms\n-  if (UseChaCha20Intrinsics) {\n-      warning(\"ChaCha20 intrinsics are not available on this CPU.\");\n-      FLAG_SET_DEFAULT(UseChaCha20Intrinsics, false);\n-  }\n-#endif \/\/ _LP64\n@@ -1691,1 +1671,0 @@\n-#ifdef _LP64\n@@ -1696,3 +1675,1 @@\n-  } else\n-#endif\n-   if (UseDilithiumIntrinsics) {\n+  } else if (UseDilithiumIntrinsics) {\n@@ -1727,1 +1704,1 @@\n-  if (supports_sha() LP64_ONLY(|| (supports_avx2() && supports_bmi2()))) {\n+  if (supports_sha() || (supports_avx2() && supports_bmi2())) {\n@@ -1754,2 +1731,0 @@\n-#ifdef _LP64\n-  \/\/ These are only supported on 64-bit\n@@ -1760,3 +1735,1 @@\n-  } else\n-#endif\n-  if (UseSHA512Intrinsics) {\n+  } else if (UseSHA512Intrinsics) {\n@@ -1767,1 +1740,0 @@\n-#ifdef _LP64\n@@ -1772,3 +1744,1 @@\n-  } else\n-#endif\n-   if (UseSHA3Intrinsics) {\n+  } else if (UseSHA3Intrinsics) {\n@@ -1796,4 +1766,0 @@\n-#ifdef _LP64\n-#else\n-  int min_vector_size = 0;\n-#endif\n@@ -1824,1 +1790,1 @@\n-      int nreg = 2 LP64_ONLY(+2);\n+      int nreg = 4;\n@@ -1837,1 +1803,0 @@\n-#ifdef _LP64\n@@ -1842,3 +1807,1 @@\n-  } else\n-#endif\n-  if (UsePoly1305Intrinsics) {\n+  } else if (UsePoly1305Intrinsics) {\n@@ -1849,1 +1812,0 @@\n-#ifdef _LP64\n@@ -1854,3 +1816,1 @@\n-  } else\n-#endif\n-  if (UseIntPolyIntrinsics) {\n+  } else if (UseIntPolyIntrinsics) {\n@@ -1861,1 +1821,0 @@\n-#ifdef _LP64\n@@ -1877,32 +1836,0 @@\n-#else\n-  if (UseMultiplyToLenIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseMultiplyToLenIntrinsic)) {\n-      warning(\"multiplyToLen intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseMultiplyToLenIntrinsic, false);\n-  }\n-  if (UseMontgomeryMultiplyIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseMontgomeryMultiplyIntrinsic)) {\n-      warning(\"montgomeryMultiply intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseMontgomeryMultiplyIntrinsic, false);\n-  }\n-  if (UseMontgomerySquareIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseMontgomerySquareIntrinsic)) {\n-      warning(\"montgomerySquare intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseMontgomerySquareIntrinsic, false);\n-  }\n-  if (UseSquareToLenIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseSquareToLenIntrinsic)) {\n-      warning(\"squareToLen intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseSquareToLenIntrinsic, false);\n-  }\n-  if (UseMulAddIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseMulAddIntrinsic)) {\n-      warning(\"mulAdd intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseMulAddIntrinsic, false);\n-  }\n-#endif \/\/ _LP64\n@@ -2185,1 +2112,0 @@\n-#ifdef _LP64\n@@ -2202,14 +2128,0 @@\n-#else\n-  if (UseVectorizedMismatchIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseVectorizedMismatchIntrinsic)) {\n-      warning(\"vectorizedMismatch intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseVectorizedMismatchIntrinsic, false);\n-  }\n-  if (UseVectorizedHashCodeIntrinsic) {\n-    if (!FLAG_IS_DEFAULT(UseVectorizedHashCodeIntrinsic)) {\n-      warning(\"vectorizedHashCode intrinsic is not available in 32-bit VM\");\n-    }\n-    FLAG_SET_DEFAULT(UseVectorizedHashCodeIntrinsic, false);\n-  }\n-#endif \/\/ _LP64\n@@ -2364,1 +2276,0 @@\n-#ifdef _LP64\n@@ -2383,1 +2294,0 @@\n-#endif\n@@ -2687,1 +2597,0 @@\n-#if defined(_LP64)\n@@ -2691,1 +2600,0 @@\n-#endif\n@@ -2709,2 +2617,0 @@\n-\n-#if defined(_LP64)\n@@ -2713,1 +2619,1 @@\n-#endif\n+\n@@ -2756,1 +2662,1 @@\n-  LP64_ONLY(Assembler::precompute_instructions();)\n+  Assembler::precompute_instructions();\n@@ -3523,1 +3429,0 @@\n-#ifdef _LP64\n@@ -3528,1 +3433,0 @@\n-#endif\n@@ -3700,1 +3604,1 @@\n-  int nreg = 2 LP64_ONLY(+2);\n+  int nreg = 4;\n@@ -3856,4 +3760,0 @@\n-#ifdef _LP64\n-#else\n-        return 320;\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":47,"deletions":147,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -716,1 +716,1 @@\n-  LP64_ONLY(static void clear_apx_test_state());\n+  static void clear_apx_test_state();\n@@ -927,1 +927,1 @@\n-    return LP64_ONLY(true) NOT_LP64(false); \/\/ not implemented on x86_32\n+    return true;\n@@ -932,1 +932,1 @@\n-    return LP64_ONLY(true) NOT_LP64(false); \/\/ not implemented on x86_32\n+    return true;\n@@ -967,4 +967,0 @@\n-#ifdef _LP64\n-#else\n-  static bool supports_clflush() { return  ((_features & CPU_FLUSH) != 0); }\n-#endif \/\/ _LP64\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -134,2 +135,0 @@\n-\/\/ for timer info max values which include all bits\n-#define ALL_64_BITS CONST64(0xFFFFFFFFFFFFFFFF)\n@@ -372,1 +371,1 @@\n-    void* p = ::malloc(16*M);\n+    void* p = permit_forbidden_function::malloc(16*M);\n@@ -374,1 +373,1 @@\n-    ::free(p);\n+    permit_forbidden_function::free(p);\n@@ -908,1 +907,1 @@\n-  info_ptr->max_value = ALL_64_BITS;\n+  info_ptr->max_value = all_bits_jlong;\n@@ -1404,1 +1403,1 @@\n-  vmembk_t* p = (vmembk_t*) ::malloc(sizeof(vmembk_t));\n+  vmembk_t* p = (vmembk_t*) permit_forbidden_function::malloc(sizeof(vmembk_t));\n@@ -1433,1 +1432,1 @@\n-      ::free(p0);\n+      permit_forbidden_function::free(p0);\n@@ -2576,1 +2575,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n@@ -2583,1 +2582,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -117,3 +117,0 @@\n-\/\/ for timer info max values which include all bits\n-#define ALL_64_BITS CONST64(0xFFFFFFFFFFFFFFFF)\n-\n@@ -818,1 +815,1 @@\n-  info_ptr->max_value = ALL_64_BITS;\n+  info_ptr->max_value = all_bits_jlong;\n@@ -2429,1 +2426,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n@@ -2436,1 +2433,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -146,5 +146,0 @@\n-#define MAX_SECS 100000000\n-\n-\/\/ for timer info max values which include all bits\n-#define ALL_64_BITS CONST64(0xFFFFFFFFFFFFFFFF)\n-\n@@ -1690,1 +1685,1 @@\n-          debug_only(VMNativeEntryWrapper vew;)\n+          DEBUG_ONLY(VMNativeEntryWrapper vew;)\n@@ -4599,1 +4594,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtThread);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, mtThread);\n@@ -4607,1 +4602,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtThread);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, mtThread);\n@@ -5159,1 +5154,1 @@\n-    return ((jlong)sys_time + (jlong)user_time) * (1000000000 \/ clock_tics_per_sec);\n+    return ((jlong)sys_time + (jlong)user_time) * (1000000000 \/ os::Posix::clock_tics_per_second());\n@@ -5161,1 +5156,1 @@\n-    return (jlong)user_time * (1000000000 \/ clock_tics_per_sec);\n+    return (jlong)user_time * (1000000000 \/ os::Posix::clock_tics_per_second());\n@@ -5166,1 +5161,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n@@ -5173,1 +5168,1 @@\n-  info_ptr->max_value = ALL_64_BITS;       \/\/ will not wrap in less than 64 bits\n+  info_ptr->max_value = all_bits_jlong;    \/\/ will not wrap in less than 64 bits\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -496,1 +497,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool exec) {\n@@ -498,1 +499,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec);\n+  char* extra_base = os::reserve_memory(extra_size, mem_tag, exec);\n@@ -947,1 +948,1 @@\n-  ALLOW_C_FUNCTION(::exit, ::exit(num);)\n+  permit_forbidden_function::exit(num);\n@@ -951,1 +952,1 @@\n-  ALLOW_C_FUNCTION(::_exit, ::_exit(num);)\n+  permit_forbidden_function::_exit(num);\n@@ -1008,1 +1009,1 @@\n-  ALLOW_C_FUNCTION(::realpath, char* p = ::realpath(filename, nullptr);)\n+  char* p = permit_forbidden_function::realpath(filename, nullptr);\n@@ -1016,1 +1017,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n+    permit_forbidden_function::free(p); \/\/ *not* os::free\n@@ -1025,1 +1026,1 @@\n-      ALLOW_C_FUNCTION(::realpath, p = ::realpath(filename, outbuf);)\n+      p = permit_forbidden_function::realpath(filename, outbuf);\n@@ -1351,0 +1352,4 @@\n+int os::Posix::clock_tics_per_second() {\n+  return clock_tics_per_sec;\n+}\n+\n@@ -1498,3 +1503,0 @@\n-\/\/ for timer info max values which include all bits\n-#define ALL_64_BITS CONST64(0xFFFFFFFFFFFFFFFF)\n-\n@@ -1503,1 +1505,1 @@\n-  info_ptr->max_value = ALL_64_BITS;\n+  info_ptr->max_value = all_bits_jlong;\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,3 @@\n+  \/\/ clock ticks per second of the system\n+  static int clock_tics_per_second();\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, mtInternal);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-debug_only(static bool signal_sets_initialized = false);\n+DEBUG_ONLY(static bool signal_sets_initialized = false);\n@@ -1565,1 +1565,1 @@\n-  debug_only(signal_sets_initialized = true);\n+  DEBUG_ONLY(signal_sets_initialized = true);\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -115,3 +116,0 @@\n-\/\/ for timer info max values which include all bits\n-#define ALL_64_BITS CONST64(-1)\n-\n@@ -1243,1 +1241,1 @@\n-    info_ptr->max_value = ALL_64_BITS;\n+    info_ptr->max_value = all_bits_jlong;\n@@ -1247,1 +1245,1 @@\n-    julong max_counter = (julong)ALL_64_BITS;\n+    julong max_counter = (julong)all_bits_jlong;\n@@ -1252,1 +1250,1 @@\n-    info_ptr->max_value = ALL_64_BITS;\n+    info_ptr->max_value = all_bits_jlong;\n@@ -3065,1 +3063,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n@@ -3126,1 +3124,1 @@\n-                                                  bytes_to_release, CALLER_PC);\n+                                                  bytes_to_release, CALLER_PC, mtNone);\n@@ -3144,1 +3142,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3146,1 +3144,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3286,1 +3284,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MemTag mem_tag = mtNone) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MemTag mem_tag) {\n@@ -3300,1 +3298,1 @@\n-                                         os::reserve_memory(extra_size, false, mem_tag);\n+                                         os::reserve_memory(extra_size, mem_tag);\n@@ -3317,1 +3315,1 @@\n-                                     os::attempt_reserve_memory_at(aligned_base, size, false, mem_tag);\n+                                     os::attempt_reserve_memory_at(aligned_base, size, mem_tag);\n@@ -3326,1 +3324,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool exec) {\n@@ -3328,1 +3326,1 @@\n-  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/);\n+  return map_or_reserve_memory_aligned(size, alignment, -1\/* file_desc *\/, mem_tag);\n@@ -4407,1 +4405,1 @@\n-    ALLOW_C_FUNCTION(::exit, ::exit(exit_code);)\n+    permit_forbidden_function::exit(exit_code);\n@@ -4409,1 +4407,1 @@\n-    ALLOW_C_FUNCTION(::_exit, ::_exit(exit_code);)\n+    permit_forbidden_function::_exit(exit_code);\n@@ -4886,1 +4884,1 @@\n-  info_ptr->max_value = ALL_64_BITS;        \/\/ the max value -- all 64 bits\n+  info_ptr->max_value = all_bits_jlong;     \/\/ the max value -- all 64 bits\n@@ -4893,1 +4891,1 @@\n-  info_ptr->max_value = ALL_64_BITS;        \/\/ the max value -- all 64 bits\n+  info_ptr->max_value = all_bits_jlong;     \/\/ the max value -- all 64 bits\n@@ -5205,1 +5203,1 @@\n-  ALLOW_C_FUNCTION(::_fullpath, char* p = ::_fullpath(nullptr, filename, 0);)\n+  char* p = permit_forbidden_function::_fullpath(nullptr, filename, 0);\n@@ -5213,1 +5211,1 @@\n-    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n+    permit_forbidden_function::free(p); \/\/ *not* os::free\n@@ -5261,1 +5259,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1234,0 +1234,1 @@\n+    bool found_invalid = false;\n@@ -1257,4 +1258,9 @@\n-              \/\/ The class must be from boot loader append path which consists of\n-              \/\/ -Xbootclasspath\/a and jvmti appended entries.\n-              assert(loader == nullptr, \"sanity\");\n-              classpath_index = i;\n+              if (loader != nullptr) {\n+                \/\/ Probably loaded by jdk\/internal\/loader\/ClassLoaders$BootClassLoader. Don't archive\n+                \/\/ such classes.\n+                ik->set_shared_classpath_index(-1);\n+                ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n+                found_invalid = true;\n+              } else {\n+                classpath_index = i;\n+              }\n@@ -1271,1 +1277,1 @@\n-      if (classpath_index >= 0) {\n+      if (classpath_index >= 0 || found_invalid) {\n@@ -1278,0 +1284,4 @@\n+    if (found_invalid) {\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -722,1 +722,0 @@\n-  template(createArchivedObjects,                           \"createArchivedObjects\")                              \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"gc\/g1\/g1ConcurrentMarkThread.inline.hpp\"\n@@ -41,1 +42,0 @@\n-#include \"gc\/g1\/g1ConcurrentMarkThread.inline.hpp\"\n@@ -47,1 +47,1 @@\n-#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n+#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -95,1 +95,1 @@\n-#include \"gc\/shared\/workerPolicy.hpp\"\n+#include \"gc\/shared\/workerPolicy.hpp\"\n@@ -1234,1 +1234,2 @@\n-                                             preferred_page_size);\n+                                             preferred_page_size,\n+                                             mtGC);\n@@ -2116,1 +2117,1 @@\n-void G1CollectedHeap::print_on(outputStream* st) const {\n+void G1CollectedHeap::print_heap_on(outputStream* st) const {\n@@ -2118,1 +2119,1 @@\n-  st->print(\" %-20s\", \"garbage-first heap\");\n+  st->print(\"%-20s\", \"garbage-first heap\");\n@@ -2125,1 +2126,3 @@\n-  st->print(\"  region size %zuK, \", G1HeapRegion::GrainBytes \/ K);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"region size %zuK, \", G1HeapRegion::GrainBytes \/ K);\n@@ -2135,1 +2138,1 @@\n-    st->print(\"  remaining free region(s) on each NUMA node: \");\n+    st->print(\"remaining free region(s) on each NUMA node: \");\n@@ -2143,1 +2146,0 @@\n-  MetaspaceUtils::print_on(st);\n@@ -2157,1 +2159,1 @@\n-  print_on(st);\n+  print_heap_on(st);\n@@ -2164,2 +2166,3 @@\n-void G1CollectedHeap::print_on_error(outputStream* st) const {\n-  print_extended_on(st);\n+void G1CollectedHeap::print_gc_on(outputStream* st) const {\n+  \/\/ Print the per-region information.\n+  print_regions_on(st);\n@@ -2175,1 +2178,1 @@\n-    _cm->print_on_error(st);\n+    _cm->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"gc\/g1\/g1CardTable.hpp\"\n+#include \"gc\/g1\/g1CardTable.hpp\"\n@@ -1320,1 +1320,1 @@\n-  void print_on(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n@@ -1322,1 +1322,1 @@\n-  void print_on_error(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/g1\/g1ConcurrentRefine.hpp\"\n+#include \"gc\/g1\/g1ConcurrentRefine.hpp\"\n@@ -522,1 +522,1 @@\n-  if (num_regions > available()) {\n+  if (num_regions > (num_free_regions() + available())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-void PSParallelCompact::print_on_error(outputStream* st) {\n-  _mark_bitmap.print_on_error(st);\n+void PSParallelCompact::print_on(outputStream* st) {\n+  _mark_bitmap.print_on(st);\n@@ -250,1 +250,2 @@\n-                                             page_sz);\n+                                             page_sz,\n+                                             mtGC);\n@@ -1647,1 +1648,1 @@\n-  debug_only(verify_forward();)\n+  DEBUG_ONLY(verify_forward();)\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -835,15 +835,9 @@\n-  st->print(\" %-10s\", name());\n-\n-  st->print(\" total %zuK, used %zuK\",\n-            capacity()\/K, used()\/K);\n-  st->print_cr(\" [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n-               p2i(_virtual_space.low_boundary()),\n-               p2i(_virtual_space.high()),\n-               p2i(_virtual_space.high_boundary()));\n-\n-  st->print(\"  eden\");\n-  eden()->print_on(st);\n-  st->print(\"  from\");\n-  from()->print_on(st);\n-  st->print(\"  to  \");\n-  to()->print_on(st);\n+  st->print(\"%-10s\", name());\n+\n+  st->print(\" total %zuK, used %zuK \", capacity() \/ K, used() \/ K);\n+  _virtual_space.print_space_boundaries_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  eden()->print_on(st, \"eden \");\n+  from()->print_on(st, \"from \");\n+  to()->print_on(st, \"to   \");\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/gcLocker.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -34,1 +34,1 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/shared\/gcLocker.hpp\"\n@@ -39,1 +39,1 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -48,1 +48,0 @@\n-#include \"memory\/resourceArea.hpp\"\n@@ -62,0 +61,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -114,1 +114,6 @@\n-  heap->print_on(&st);\n+  {\n+    StreamAutoIndentor indentor(&st, 1);\n+    heap->print_heap_on(&st);\n+    MetaspaceUtils::print_on(&st);\n+  }\n+\n@@ -166,2 +171,4 @@\n-    ResourceMark rm;\n-    print_on(&ls);\n+\n+    StreamAutoIndentor indentor(&ls, 1);\n+    print_heap_on(&ls);\n+    MetaspaceUtils::print_on(&ls);\n@@ -180,2 +187,4 @@\n-    ResourceMark rm;\n-    print_on(&ls);\n+\n+    StreamAutoIndentor indentor(&ls, 1);\n+    print_heap_on(&ls);\n+    MetaspaceUtils::print_on(&ls);\n@@ -189,1 +198,4 @@\n-void CollectedHeap::print() const { print_on(tty); }\n+void CollectedHeap::print() const {\n+  print_heap_on(tty);\n+  print_gc_on(tty);\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  debug_only(static void check_for_valid_allocation_state();)\n+  DEBUG_ONLY(static void check_for_valid_allocation_state();)\n@@ -446,4 +446,5 @@\n-  \/\/ Print heap information on the given outputStream.\n-  virtual void print_on(outputStream* st) const = 0;\n-  \/\/ The default behavior is to call print_on() on tty.\n-  virtual void print() const;\n+  \/\/ Print heap information.\n+  virtual void print_heap_on(outputStream* st) const = 0;\n+\n+  \/\/ Print additional information about the GC that is not included in print_heap_on().\n+  virtual void print_gc_on(outputStream* st) const = 0;\n@@ -451,1 +452,2 @@\n-  virtual void print_on_error(outputStream* st) const = 0;\n+  \/\/ The default behavior is to call print_heap_on() and print_gc_on() on tty.\n+  virtual void print() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -282,1 +282,0 @@\n-  _page_allocator->reset_statistics(_id);\n@@ -863,1 +862,1 @@\n-  stat_heap()->at_mark_start(_page_allocator->stats(this));\n+  stat_heap()->at_mark_start(_page_allocator->update_and_stats(this));\n@@ -1216,1 +1215,1 @@\n-  stat_heap()->at_mark_start(_page_allocator->stats(this));\n+  stat_heap()->at_mark_start(_page_allocator->update_and_stats(this));\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-  st->print(\"Partition %u\", _numa_id);\n+  st->print(\"Partition %u \", _numa_id);\n@@ -1163,1 +1163,1 @@\n-  streamIndentor indentor(st, 1);\n+  StreamAutoIndentor indentor(st, 1);\n@@ -1171,1 +1171,1 @@\n-void ZPartition::print_extended_on_error(outputStream* st) const {\n+void ZPartition::print_cache_extended_on(outputStream* st) const {\n@@ -1174,2 +1174,1 @@\n-  streamIndentor indentor(st, 1);\n-\n+  StreamAutoIndentor indentor(st, 1);\n@@ -1376,2 +1375,5 @@\n-ZPageAllocatorStats ZPageAllocator::stats(ZGeneration* generation) const {\n-  ZLocker<ZLock> locker(&_lock);\n+void ZPageAllocator::update_collection_stats(ZGenerationId id) {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"Should be at safepoint\");\n+\n+#ifdef ASSERT\n+  size_t total_used = 0;\n@@ -1379,0 +1381,13 @@\n+  ZPartitionIterator iter(&_partitions);\n+  for (ZPartition* partition; iter.next(&partition);) {\n+    total_used += partition->_used;\n+  }\n+\n+  assert(total_used == _used, \"Must be consistent %zu == %zu\", total_used, _used);\n+#endif\n+\n+  _collection_stats[(int)id]._used_high = _used;\n+  _collection_stats[(int)id]._used_low = _used;\n+}\n+\n+ZPageAllocatorStats ZPageAllocator::stats_inner(ZGeneration* generation) const {\n@@ -1393,17 +1408,4 @@\n-void ZPageAllocator::reset_statistics(ZGenerationId id) {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"Should be at safepoint\");\n-#ifdef ASSERT\n-  {\n-    \/\/ We may free without safepoint synchronization, take the lock to get\n-    \/\/ consistent values.\n-    ZLocker<ZLock> locker(&_lock);\n-    size_t total_used = 0;\n-\n-    ZPartitionIterator iter(&_partitions);\n-    for (ZPartition* partition; iter.next(&partition);) {\n-      total_used += partition->_used;\n-    }\n-\n-    assert(total_used == _used, \"Must be consistent at safepoint %zu == %zu\", total_used, _used);\n-  }\n-#endif\n+ZPageAllocatorStats ZPageAllocator::stats(ZGeneration* generation) const {\n+  ZLocker<ZLock> locker(&_lock);\n+  return stats_inner(generation);\n+}\n@@ -1411,2 +1413,2 @@\n-  \/\/ Read once, we may have concurrent writers.\n-  const size_t used = Atomic::load(&_used);\n+ZPageAllocatorStats ZPageAllocator::update_and_stats(ZGeneration* generation) {\n+  ZLocker<ZLock> locker(&_lock);\n@@ -1414,2 +1416,2 @@\n-  _collection_stats[(int)id]._used_high = used;\n-  _collection_stats[(int)id]._used_low = used;\n+  update_collection_stats(generation->id());\n+  return stats_inner(generation);\n@@ -2394,5 +2396,0 @@\n-void ZPageAllocator::print_on(outputStream* st) const {\n-  ZLocker<ZLock> lock(&_lock);\n-  print_on_inner(st);\n-}\n-\n@@ -2409,24 +2406,1 @@\n-void ZPageAllocator::print_extended_on_error(outputStream* st) const {\n-  st->print_cr(\"ZMappedCache:\");\n-\n-  streamIndentor indentor(st, 1);\n-\n-  if (!try_lock_on_error(&_lock)) {\n-    \/\/ We can't print without taking the lock since printing the contents of\n-    \/\/ the cache requires iterating over the nodes in the cache's tree, which\n-    \/\/ is not thread-safe.\n-    st->print_cr(\"<Skipped>\");\n-\n-    return;\n-  }\n-\n-  \/\/ Print each partition's cache content\n-  ZPartitionConstIterator iter = partition_iterator();\n-  for (const ZPartition* partition; iter.next(&partition);) {\n-    partition->print_extended_on_error(st);\n-  }\n-\n-  _lock.unlock();\n-}\n-\n-void ZPageAllocator::print_on_error(outputStream* st) const {\n+void ZPageAllocator::print_usage_on(outputStream* st) const {\n@@ -2439,1 +2413,1 @@\n-  \/\/ Print information even though we have not successfully taken the lock.\n+  \/\/ Print information even though we may not have successfully taken the lock.\n@@ -2441,1 +2415,5 @@\n-  print_on_inner(st);\n+\n+  print_total_usage_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  print_partition_usage_on(st);\n@@ -2448,3 +2426,2 @@\n-void ZPageAllocator::print_on_inner(outputStream* st) const {\n-  \/\/ Print total usage\n-  st->print(\"ZHeap\");\n+void ZPageAllocator::print_total_usage_on(outputStream* st) const {\n+  st->print(\"ZHeap \");\n@@ -2454,0 +2431,1 @@\n+}\n@@ -2455,4 +2433,1 @@\n-  \/\/ Print per-partition\n-\n-  streamIndentor indentor(st, 1);\n-\n+void ZPageAllocator::print_partition_usage_on(outputStream* st) const {\n@@ -2460,1 +2435,2 @@\n-    \/\/ The summary printing is redundant if we only have one partition\n+    \/\/ Partition usage is redundant if we only have one partition. Only\n+    \/\/ print the cache.\n@@ -2465,0 +2441,1 @@\n+  \/\/ Print all partitions\n@@ -2471,0 +2448,23 @@\n+void ZPageAllocator::print_cache_extended_on(outputStream* st) const {\n+  st->print_cr(\"ZMappedCache:\");\n+\n+  StreamAutoIndentor indentor(st, 1);\n+\n+  if (!try_lock_on_error(&_lock)) {\n+    \/\/ We can't print without taking the lock since printing the contents of\n+    \/\/ the cache requires iterating over the nodes in the cache's tree, which\n+    \/\/ is not thread-safe.\n+    st->print_cr(\"<Skipped>\");\n+\n+    return;\n+  }\n+\n+  \/\/ Print each partition's cache content\n+  ZPartitionConstIterator iter = partition_iterator();\n+  for (const ZPartition* partition; iter.next(&partition);) {\n+    partition->print_cache_extended_on(st);\n+  }\n+\n+  _lock.unlock();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  void print_extended_on_error(outputStream* st) const;\n+  void print_cache_extended_on(outputStream* st) const;\n@@ -238,1 +238,2 @@\n-  void print_on_inner(outputStream* st) const;\n+  void update_collection_stats(ZGenerationId id);\n+  ZPageAllocatorStats stats_inner(ZGeneration* generation) const;\n@@ -265,2 +266,1 @@\n-\n-  void reset_statistics(ZGenerationId id);\n+  ZPageAllocatorStats update_and_stats(ZGeneration* generation);\n@@ -286,4 +286,0 @@\n-  void print_on(outputStream* st) const;\n-  void print_extended_on_error(outputStream* st) const;\n-  void print_on_error(outputStream* st) const;\n-\n@@ -291,0 +287,5 @@\n+\n+  void print_usage_on(outputStream* st) const;\n+  void print_total_usage_on(outputStream* st) const;\n+  void print_partition_usage_on(outputStream* st) const;\n+  void print_cache_extended_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  debug_only(static intx _locking_thread_id;)\n+  DEBUG_ONLY(static intx _locking_thread_id;)\n@@ -66,1 +66,1 @@\n-    debug_only(_locking_thread_id = os::current_thread_id());\n+    DEBUG_ONLY(_locking_thread_id = os::current_thread_id());\n@@ -69,1 +69,1 @@\n-    debug_only(_locking_thread_id = -1);\n+    DEBUG_ONLY(_locking_thread_id = -1);\n@@ -72,1 +72,1 @@\n-  debug_only(static bool current_thread_has_lock();)\n+  DEBUG_ONLY(static bool current_thread_has_lock();)\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-    debug_only(VMNativeEntryWrapper __vew;)\n+    DEBUG_ONLY(VMNativeEntryWrapper __vew;)\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+const char* Abstract_VM_Version::_cpu_info_string = \"\";\n@@ -342,0 +343,13 @@\n+const char* Abstract_VM_Version::extract_features_string(const char* cpu_info_string,\n+                                                         size_t cpu_info_string_len,\n+                                                         size_t features_offset) {\n+  assert(features_offset <= cpu_info_string_len, \"\");\n+  if (features_offset < cpu_info_string_len) {\n+    assert(cpu_info_string[features_offset + 0] == ',', \"\");\n+    assert(cpu_info_string[features_offset + 1] == ' ', \"\");\n+    return cpu_info_string + features_offset + 2; \/\/ skip initial \", \"\n+  } else {\n+    return \"\"; \/\/ empty\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+  static const char* _cpu_info_string;\n+\n@@ -133,0 +135,6 @@\n+  static const char* cpu_info_string() { return _cpu_info_string; }\n+  static void insert_features_names(char* buf, size_t buflen, const char* features_names[]);\n+  static const char* extract_features_string(const char* cpu_info_string,\n+                                             size_t cpu_info_string_len,\n+                                             size_t features_offset);\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -339,1 +339,0 @@\n-        matches_property_suffix(property_suffix, ADDOPENS, ADDOPENS_LEN) ||\n@@ -350,0 +349,1 @@\n+          matches_property_suffix(property_suffix, ADDOPENS, ADDOPENS_LEN) ||\n@@ -3917,5 +3917,0 @@\n-\n-    if (!FLAG_IS_DEFAULT(UseVectorStubs) && UseVectorStubs) {\n-      warning(\"Disabling UseVectorStubs since EnableVectorSupport is turned off.\");\n-    }\n-    FLAG_SET_DEFAULT(UseVectorStubs, false);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -710,0 +710,3 @@\n+  product(bool, PrintVMInfoAtExit, false, DIAGNOSTIC,                       \\\n+          \"Executes the VM.info diagnostic command at exit\")                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -148,2 +148,2 @@\n-  oop           _vm_result;    \/\/ oop result is GC-preserved\n-  Metadata*     _vm_result_2;  \/\/ non-oop result\n+  oop           _vm_result_oop;       \/\/ oop result is GC-preserved\n+  Metadata*     _vm_result_metadata;  \/\/ non-oop result\n@@ -701,2 +701,2 @@\n-  bool java_suspend();\n-  bool java_resume();\n+  bool java_suspend(bool register_vthread_SR);\n+  bool java_resume(bool register_vthread_SR);\n@@ -713,2 +713,2 @@\n-  inline void set_carrier_thread_suspended();\n-  inline void clear_carrier_thread_suspended();\n+  inline bool set_carrier_thread_suspended();\n+  inline bool clear_carrier_thread_suspended();\n@@ -717,1 +717,1 @@\n-    return _carrier_thread_suspended;\n+    return Atomic::load(&_carrier_thread_suspended);\n@@ -787,2 +787,2 @@\n-  oop  vm_result() const                         { return _vm_result; }\n-  void set_vm_result  (oop x)                    { _vm_result   = x; }\n+  oop  vm_result_oop() const                     { return _vm_result_oop; }\n+  void set_vm_result_oop(oop x)                  { _vm_result_oop   = x; }\n@@ -790,1 +790,1 @@\n-  void set_vm_result_2  (Metadata* x)            { _vm_result_2   = x; }\n+  void set_vm_result_metadata(Metadata* x)       { _vm_result_metadata = x; }\n@@ -856,2 +856,2 @@\n-  static ByteSize vm_result_offset()             { return byte_offset_of(JavaThread, _vm_result); }\n-  static ByteSize vm_result_2_offset()           { return byte_offset_of(JavaThread, _vm_result_2); }\n+  static ByteSize vm_result_oop_offset()         { return byte_offset_of(JavaThread, _vm_result_oop); }\n+  static ByteSize vm_result_metadata_offset()    { return byte_offset_of(JavaThread, _vm_result_metadata); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -80,0 +81,1 @@\n+#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -120,1 +122,1 @@\n-  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n+  int result = permit_forbidden_function::vsnprintf(buf, len, fmt, args);\n@@ -244,1 +246,1 @@\n-  debug_only(Thread::check_for_dangling_thread_pointer(thread);)\n+  DEBUG_ONLY(Thread::check_for_dangling_thread_pointer(thread);)\n@@ -599,1 +601,1 @@\n-  strcpy(dup_str, str);\n+  memcpy(dup_str, str, size + 1);\n@@ -657,1 +659,1 @@\n-  ALLOW_C_FUNCTION(::malloc, void* const outer_ptr = ::malloc(outer_size);)\n+  void* const outer_ptr = permit_forbidden_function::malloc(outer_size);\n@@ -724,1 +726,1 @@\n-    ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(header, new_outer_size);)\n+    void* const new_outer_ptr = permit_forbidden_function::realloc(header, new_outer_size);\n@@ -752,1 +754,1 @@\n-    ALLOW_C_FUNCTION(::realloc, rc = ::realloc(memblock, size);)\n+    rc = permit_forbidden_function::realloc(memblock, size);\n@@ -780,1 +782,1 @@\n-  ALLOW_C_FUNCTION(::free, ::free(old_outer_ptr);)\n+  permit_forbidden_function::free(old_outer_ptr);\n@@ -1169,1 +1171,1 @@\n-  st->print(\" %s\", VM_Version::features_string());\n+  st->print(\" %s\", VM_Version::cpu_info_string());\n@@ -1552,0 +1554,1 @@\n+    fclose(file);\n@@ -1969,1 +1972,1 @@\n-char* os::reserve_memory(size_t bytes, bool executable, MemTag mem_tag) {\n+char* os::reserve_memory(size_t bytes, MemTag mem_tag, bool executable) {\n@@ -1980,1 +1983,1 @@\n-char* os::attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MemTag mem_tag) {\n+char* os::attempt_reserve_memory_at(char* addr, size_t bytes, MemTag mem_tag, bool executable) {\n@@ -2186,1 +2189,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, mtNone);\n@@ -2254,0 +2257,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_uncommit_memory and record_virtual_memory_uncommit because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_commit_memory and record_virtual_memory_commit.\n+\/\/ We assume that there is some external synchronization that prevents a region from being uncommitted\n+\/\/ before it is finished being committed.\n@@ -2276,0 +2284,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_release_memory and record_virtual_memory_release because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_reserve_memory and record_virtual_memory_reserve.\n+\/\/ We assume that there is some external synchronization that prevents a region from being released\n+\/\/ before it is finished being reserved.\n@@ -2362,2 +2375,2 @@\n-                           char *addr, size_t bytes, bool read_only,\n-                           bool allow_exec, MemTag mem_tag) {\n+                           char *addr, size_t bytes, MemTag mem_tag,\n+                            bool read_only, bool allow_exec) {\n@@ -2401,1 +2414,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  reserve_memory(size_t bytes, MemTag mem_tag, bool executable = false);\n@@ -465,1 +465,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, MemTag mem_tag, bool executable = false);\n@@ -469,1 +469,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, MemTag mem_tag, bool executable = false);\n@@ -523,2 +523,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag = mtNone);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag);\n@@ -526,1 +526,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag);\n@@ -531,2 +531,2 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false, MemTag mem_tag = mtNone);\n+                           char *addr, size_t bytes, MemTag mem_tag, bool read_only = false,\n+                           bool allow_exec = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-  nonstatic_field(JavaThread,                  _scopedValueCache,                              OopHandle)                             \\\n+  nonstatic_field(JavaThread,                  _scopedValueCache,                              OopHandle)                            \\\n@@ -609,2 +609,0 @@\n-  nonstatic_field(JavaThread,                  _vm_result,                                    oop)                                   \\\n-  nonstatic_field(JavaThread,                  _vm_result_2,                                  Metadata*)                             \\\n@@ -707,0 +705,1 @@\n+     static_field(Abstract_VM_Version,         _cpu_info_string,                              const char*)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -420,1 +421,2 @@\n-  Universe::heap()->print_on(output());\n+  Universe::heap()->print_heap_on(output());\n+  MetaspaceUtils::print_on(output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -384,2 +384,0 @@\n-\/\/ Historical.\n-#define debug_only(code) code\n@@ -390,1 +388,0 @@\n-#define debug_only(code)\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,0 +179,1 @@\n+protected:\n@@ -189,2 +190,1 @@\n-class StreamAutoIndentor : public StackObj {\n-  outputStream* const _os;\n+class StreamAutoIndentor : public streamIndentor {\n@@ -194,3 +194,3 @@\n-  StreamAutoIndentor(outputStream* os) :\n-    _os(os), _old(os->set_autoindent(true)) {}\n-  ~StreamAutoIndentor() { _os->set_autoindent(_old); }\n+  StreamAutoIndentor(outputStream* os, int indentation = 0) :\n+    streamIndentor(os, indentation), _old(os->set_autoindent(true)) {}\n+  ~StreamAutoIndentor() { _str->set_autoindent(_old); }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-     * open and ready to supply input data. Typically this stream\n+     * open and ready to supply input data. This stream\n@@ -121,4 +121,3 @@\n-     * the host environment or user. In case this stream is wrapped\n-     * in a {@link java.io.InputStreamReader}, {@link Console#charset()}\n-     * should be used for the charset, or consider using\n-     * {@link Console#reader()}.\n+     * the host environment or user. Applications should use the encoding\n+     * specified by the {@link ##stdin.encoding stdin.encoding} property\n+     * to convert input bytes to character data.\n@@ -126,2 +125,11 @@\n-     * @see Console#charset()\n-     * @see Console#reader()\n+     * @apiNote\n+     * The typical approach to read character data is to wrap {@code System.in}\n+     * within an {@link java.io.InputStreamReader InputStreamReader} or other object\n+     * that handles character encoding. After this is done, subsequent reading should\n+     * use only the wrapper object; operating directly on {@code System.in} results\n+     * in unspecified behavior.\n+     * <p>\n+     * For handling interactive input, consider using {@link Console}.\n+     *\n+     * @see Console\n+     * @see ##stdin.encoding stdin.encoding\n@@ -583,2 +591,7 @@\n-     *     <td>Character encoding name derived from the host environment and\/or\n-     *     the user's settings. Setting this system property has no effect.<\/td><\/tr>\n+     *     <td>Character encoding name derived from the host environment and\n+     *     the user's settings. Setting this system property on the command line\n+     *     has no effect.<\/td><\/tr>\n+     * <tr><th scope=\"row\">{@systemProperty stdin.encoding}<\/th>\n+     *     <td>Character encoding name for {@link System#in System.in}.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -588,2 +601,2 @@\n-     *     The Java runtime can be started with the system property set to {@code UTF-8},\n-     *     starting it with the property set to another value leads to undefined behavior.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -592,2 +605,2 @@\n-     *     The Java runtime can be started with the system property set to {@code UTF-8},\n-     *     starting it with the property set to another value leads to undefined behavior.\n+     *     The Java runtime can be started with the system property set to {@code UTF-8}.\n+     *     Starting it with the property set to another value results in unspecified behavior.\n@@ -653,1 +666,1 @@\n-     *     {@code COMPAT} leads to unspecified behavior.\n+     *     {@code COMPAT} results in unspecified behavior.\n@@ -2039,0 +2052,3 @@\n+            public int classFileVersion(Class<?> clazz) {\n+                return clazz.getClassFileVersion();\n+            }\n@@ -2094,3 +2110,0 @@\n-            public void addOpensToAllUnnamed(Module m, Set<String> concealedPackages, Set<String> exportedPackages) {\n-                m.implAddOpensToAllUnnamed(concealedPackages, exportedPackages);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-     *   queue = ReferenceQueue.NULL; next = this.\n+     *   queue = ReferenceQueue.NULL_QUEUE; next = this.\n@@ -86,1 +86,1 @@\n-     *   queue = ReferenceQueue.NULL.\n+     *   queue = ReferenceQueue.NULL_QUEUE.\n@@ -168,2 +168,2 @@\n-     *        dequeued: ReferenceQueue.NULL\n-     *    unregistered: ReferenceQueue.NULL\n+     *        dequeued: ReferenceQueue.NULL_QUEUE\n+     *    unregistered: ReferenceQueue.NULL_QUEUE\n@@ -239,1 +239,1 @@\n-        if (q != ReferenceQueue.NULL) q.enqueue(this);\n+        if (q != ReferenceQueue.NULL_QUEUE) q.enqueue(this);\n@@ -313,0 +313,1 @@\n+    \/\/ Called from JVM when loading an AOT cache\n@@ -314,0 +315,4 @@\n+        runtimeSetup();\n+    }\n+\n+    private static void runtimeSetup() {\n@@ -557,1 +562,1 @@\n-        this.queue = (queue == null) ? ReferenceQueue.NULL : queue;\n+        this.queue = (queue == null) ? ReferenceQueue.NULL_QUEUE : queue;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    static final ReferenceQueue<Object> NULL = new Null();\n+    static final ReferenceQueue<Object> NULL_QUEUE = new Null();\n@@ -77,1 +77,1 @@\n-        if ((queue == NULL) || (queue == ENQUEUED)) {\n+        if ((queue == NULL_QUEUE) || (queue == ENQUEUED)) {\n@@ -99,1 +99,1 @@\n-            r.queue = NULL;\n+            r.queue = NULL_QUEUE;\n@@ -268,1 +268,1 @@\n-                    \/\/ already dequeued: r.queue == NULL; ->\n+                    \/\/ already dequeued: r.queue == NULL_QUEUE; ->\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,4 +382,0 @@\n-     * If the stream argument is {@code true}, this creates a\n-     * stream socket. If the stream argument is {@code false}, it\n-     * creates a datagram socket.\n-     * <p>\n@@ -391,2 +387,0 @@\n-     * <p>\n-     * If a UDP socket is used, TCP\/IP related socket options will not apply.\n@@ -396,2 +390,1 @@\n-     * @param      stream   a {@code boolean} indicating whether this is\n-     *                      a stream socket or a datagram socket.\n+     * @param      stream   must be true, false is not allowed.\n@@ -399,4 +392,6 @@\n-     * @throws     IllegalArgumentException if the port parameter is outside\n-     *             the specified range of valid port values, which is between\n-     *             0 and 65535, inclusive.\n-     * @deprecated Use {@link DatagramSocket} instead for UDP transport.\n+     * @throws     IllegalArgumentException if the stream parameter is {@code false}\n+     *             or if the port parameter is outside the specified range of valid\n+     *             port values, which is between 0 and 65535, inclusive.\n+     * @deprecated The {@code stream} parameter provided a way in early JDK releases\n+     *             to create a {@code Socket} that used a datagram socket. This feature\n+     *             no longer exists. Instead use {@link DatagramSocket} for datagram sockets.\n@@ -416,4 +411,0 @@\n-     * If the stream argument is {@code true}, this creates a\n-     * stream socket. If the stream argument is {@code false}, it\n-     * creates a datagram socket.\n-     * <p>\n@@ -425,2 +416,0 @@\n-     * <p>\n-     * If UDP socket is used, TCP\/IP related socket options will not apply.\n@@ -430,2 +419,1 @@\n-     * @param      stream    if {@code true}, create a stream socket;\n-     *                       otherwise, create a datagram socket.\n+     * @param      stream    must be true, false is not allowed.\n@@ -433,3 +421,3 @@\n-     * @throws     IllegalArgumentException if the port parameter is outside\n-     *             the specified range of valid port values, which is between\n-     *             0 and 65535, inclusive.\n+     * @throws     IllegalArgumentException if the stream parameter is {@code false}\n+     *             or if the port parameter is outside the specified range of valid\n+     *             port values, which is between 0 and 65535, inclusive.\n@@ -437,1 +425,3 @@\n-     * @deprecated Use {@link DatagramSocket} instead for UDP transport.\n+     * @deprecated The {@code stream} parameter provided a way in early JDK releases\n+     *             to create a {@code Socket} that used a datagram socket. This feature\n+     *             no longer exists. Instead use {@link DatagramSocket} for datagram sockets.\n@@ -458,0 +448,4 @@\n+        if (!stream) {\n+            throw new IllegalArgumentException(\n+                    \"Socket constructor does not support creation of datagram sockets\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-     * Creates either a stream or a datagram socket.\n+     * Creates a stream socket.\n@@ -126,3 +126,5 @@\n-     * The {@link Socket} constructors to create a datagram socket\n-     * are deprecated for removal. This method will be re-specified\n-     * in a future release to not support creating datagram sockets.\n+     * The {@code stream} parameter provided a way in early JDK releases\n+     * to create a {@link Socket} that used a datagram socket.\n+     * The Socket API no longer provides a way to do this, so the\n+     * {@code create} method will always be called with a {@code stream}\n+     * value of {@code true}.\n@@ -130,2 +132,1 @@\n-     * @param      stream   if {@code true}, create a stream socket;\n-     *                      otherwise, create a datagram socket.\n+     * @param      stream   must be {@code true}.\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketImpl.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-    private static JavaIOFilePermissionAccess javaIOFilePermissionAccess;\n@@ -304,14 +303,0 @@\n-    @SuppressWarnings(\"removal\")\n-    public static JavaIOFilePermissionAccess getJavaIOFilePermissionAccess() {\n-        var access = javaIOFilePermissionAccess;\n-        if (access == null) {\n-            ensureClassInitialized(FilePermission.class);\n-            access = javaIOFilePermissionAccess;\n-        }\n-        return access;\n-    }\n-\n-    public static void setJavaIOFilePermissionAccess(JavaIOFilePermissionAccess jiofpa) {\n-        javaIOFilePermissionAccess = jiofpa;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -279,0 +279,1 @@\n+        jdk.incubator.vector,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        this.fd = Net.serverSocket(true);\n+        this.fd = Net.serverSocket();\n@@ -107,1 +107,1 @@\n-                FileDescriptor newfd = Net.serverSocket(true);\n+                FileDescriptor newfd = Net.serverSocket();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        this.fd = Net.socket(true);\n+        this.fd = Net.socket();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,2 +104,0 @@\n-    \/\/ set by SocketImpl.create, protected by stateLock\n-    private boolean stream;\n@@ -467,2 +465,2 @@\n-            fd = Net.serverSocket(true);\n-            Runnable closer = closerFor(fd, true);\n+            fd = Net.serverSocket();\n+            Runnable closer = closerFor(fd);\n@@ -490,0 +488,3 @@\n+        if (!stream) {\n+            throw new IOException(\"Datagram socket creation not supported\");\n+        }\n@@ -495,2 +496,1 @@\n-                assert stream;\n-                fd = Net.serverSocket(true);\n+                fd = Net.serverSocket();\n@@ -498,1 +498,1 @@\n-                fd = Net.socket(stream);\n+                fd = Net.socket();\n@@ -500,1 +500,1 @@\n-            Runnable closer = closerFor(fd, stream);\n+            Runnable closer = closerFor(fd);\n@@ -502,1 +502,0 @@\n-            this.stream = stream;\n@@ -693,2 +692,0 @@\n-            if (!stream)\n-                throw new SocketException(\"Not a stream socket\");\n@@ -804,1 +801,1 @@\n-        Runnable closer = closerFor(newfd, true);\n+        Runnable closer = closerFor(newfd);\n@@ -807,1 +804,0 @@\n-            nsi.stream = true;\n@@ -1227,18 +1223,8 @@\n-    private static Runnable closerFor0(FileDescriptor fd, boolean stream) {\n-        if (stream) {\n-            return () -> {\n-                try {\n-                    nd.close(fd);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-            };\n-        } else {\n-            return () -> {\n-                try {\n-                    nd.close(fd);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-            };\n-        }\n+    private static Runnable closerFor0(FileDescriptor fd) {\n+        return () -> {\n+            try {\n+                nd.close(fd);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe);\n+            }\n+        };\n@@ -1247,1 +1233,1 @@\n-    private static Runnable closerFor(FileDescriptor fd, boolean stream) {\n+    private static Runnable closerFor(FileDescriptor fd) {\n@@ -1258,1 +1244,1 @@\n-        return closerFor0(fd, stream);\n+        return closerFor0(fd);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":19,"deletions":33,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-            this.fd = Net.serverSocket(family, true);\n+            this.fd = Net.serverSocket(family);\n@@ -775,1 +775,1 @@\n-                newFd = Net.serverSocket(family, true);\n+                newFd = Net.serverSocket(family);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,2 @@\n-                EventInstrumentation ei = new EventInstrumentation(clazz.getSuperclass(), oldBytes, traceId, jdkClass, false);\n+                ClassInspector c = new ClassInspector(clazz.getSuperclass(), oldBytes, jdkClass);\n+                EventInstrumentation ei = new EventInstrumentation(c, traceId, false);\n@@ -109,3 +110,3 @@\n-            EventInstrumentation ei = new EventInstrumentation(superClass, oldBytes, traceId, bootClassLoader, true);\n-            eventName = ei.getEventName();\n-            if (!JVMSupport.shouldInstrument(bootClassLoader,  ei.getEventName())) {\n+            ClassInspector c = new ClassInspector(superClass, oldBytes, bootClassLoader);\n+            eventName = c.getEventName();\n+            if (!JVMSupport.shouldInstrument(bootClassLoader,  c.getEventName())) {\n@@ -122,1 +123,1 @@\n-                if (!mr.isEnabled(ei.getEventName()) && !ei.isEnabled() || !ei.isRegistered()) {\n+                if (!mr.isEnabled(c.getEventName()) && !c.isEnabled() || !c.isRegistered()) {\n@@ -127,1 +128,1 @@\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.INFO, \"Adding \" + (forceInstrumentation ? \"forced \" : \"\") + \"instrumentation for event type \" + eventName + \" during initial class load\");\n+            EventInstrumentation ei = new EventInstrumentation(c, traceId, true);\n@@ -129,1 +130,2 @@\n-            Bytecode.log(ei.getClassName() + \"(\" + traceId + \")\", bytes);\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.INFO, \"Adding \" + (forceInstrumentation ? \"forced \" : \"\") + \"instrumentation for event type \" + eventName + \" during initial class load\");\n+            Bytecode.log(c.getClassName() + \"(\" + traceId + \")\", bytes);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -79,0 +79,5 @@\n+compiler\/c2\/TestVerifyConstraintCasts.java 8355574 generic-all\n+\n+compiler\/c2\/irTests\/TestFloat16ScalarOperations.java 8355708 linux-aarch64\n+compiler\/c2\/irTests\/MulHFNodeIdealizationTests.java 8355708 linux-aarch64\n+\n@@ -106,1 +111,0 @@\n-runtime\/handshake\/HandshakeSuspendExitTest.java 8294313 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+java\/awt\/Graphics\/SmallPrimitives.java 8047070 macosx-all,linux-all\n@@ -150,0 +151,2 @@\n+java\/awt\/List\/KeyEventsTest\/KeyEventsTest.java 8201307 linux-all\n+java\/awt\/Paint\/ListRepaint.java 8201307 linux-all\n@@ -191,0 +194,3 @@\n+java\/awt\/datatransfer\/ClipboardPerformanceTest.java 8029022 windows-all\n+java\/awt\/datatransfer\/HTMLTransferConsoleOutputTest.java 8237254 macosx-all\n+java\/awt\/datatransfer\/ImageTransferCrashTest.java 8237253 macosx-all\n@@ -259,0 +265,3 @@\n+java\/awt\/Clipboard\/PasteNullToTextComponentsTest.java 8234140 macosx-all,windows-all\n+java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java 8234140 macosx-all\n+java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java 8234140 macosx-all\n@@ -260,0 +269,4 @@\n+java\/awt\/Clipboard\/ClipboardSecurity.java 8054809 macosx-all\n+java\/awt\/Clipboard\/GetAltContentsTest\/SystemClipboardTest.java 8234140 macosx-all\n+java\/awt\/Clipboard\/ImageTransferTest.java 8030710 generic-all\n+java\/awt\/Clipboard\/NoDataConversionFailureTest.java 8234140 macosx-all\n@@ -444,0 +457,2 @@\n+java\/awt\/ScrollPane\/ScrollPositionTest.java 8040070 linux-all\n+java\/awt\/ScrollPane\/ScrollPaneEventType.java 8296516 macosx-all\n@@ -464,0 +479,1 @@\n+java\/awt\/GridBagLayout\/ComponentShortage.java 8355280 windows-all,linux-all\n@@ -474,0 +490,1 @@\n+java\/awt\/Graphics2D\/CopyAreaOOB.java 8343106 macosx-aarch64\n@@ -481,2 +498,0 @@\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java 8029249 macosx-all\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java 8029249 macosx-all\n@@ -687,1 +702,1 @@\n-javax\/swing\/JFileChooser\/6798062\/bug6798062.java 8146446 windows-all\n+javax\/swing\/JFileChooser\/bug6798062.java 8146446 windows-all\n@@ -736,1 +751,0 @@\n-java\/util\/logging\/LoggingDeadlock5.java       8354424 generic-all\n@@ -781,0 +795,2 @@\n+java\/foreign\/TestBufferStackStress.java                         8350455 macosx-all\n+\n@@ -787,1 +803,1 @@\n-javax\/swing\/JTabbedPane\/4666224\/bug4666224.java 8144124  macosx-all\n+javax\/swing\/JTabbedPane\/bug4666224.java 8144124  macosx-all\n@@ -803,0 +819,1 @@\n+java\/awt\/font\/GlyphVector\/TestGlyphVectorLayout.java 8354987 generic-all\n@@ -808,0 +825,2 @@\n+java\/awt\/TextComponent\/CorrectTextComponentSelectionTest.java 8237220 macosx-all\n+java\/awt\/TextComponent\/SelectionAndCaretColor.java 7017622 linux-all\n@@ -817,0 +836,1 @@\n+java\/awt\/List\/ListScrollbarCursorTest.java 8066410 generic-all\n@@ -821,0 +841,2 @@\n+java\/awt\/Menu\/MenuVisibilityTest.java 8161110 macosx-all\n+java\/awt\/Modal\/NativeDialogToFrontBackTest.java 7188049 windows-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"}]}