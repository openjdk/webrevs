{"files":[{"patch":"@@ -65,0 +65,1 @@\n+    -tag crac:cmopt:'CRaC:' \\\n","filename":"make\/Docs.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -834,0 +834,2 @@\n+USE_CRIU_CRAC:=@USE_CRIU_CRAC@\n+\n","filename":"make\/autoconf\/spec.gmk.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,0 +160,4 @@\n+ifneq ($(call check-jvm-feature, cpu_feature_active), true)\n+  JVM_CFLAGS_FEATURES += -DINCLUDE_CPU_FEATURE_ACTIVE=0\n+endif\n+\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,0 +206,13 @@\n+# Build checkpoint\/restore exec library\n+################################################################################\n+\n+# CFLAGS_windows from make\/autoconf\/flags-cflags.m4#FLAGS_SETUP_CFLAGS_HELPER\n+$(eval $(call SetupJdkLibrary, BUILD_LIBCREXEC, \\\n+    NAME := crexec, \\\n+    LINK_TYPE := C++, \\\n+    EXTRA_HEADER_DIRS := libjvm, \\\n+    CXXFLAGS := $(CXXFLAGS_JDKLIB) -DCRLIB_IS_IMPL, \\\n+    CXXFLAGS_windows := -D_WINDOWS -DWIN32, \\\n+    LDFLAGS := $(LDFLAGS_JDKLIB), \\\n+))\n+TARGETS += $(BUILD_LIBCREXEC)\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -67,0 +67,4 @@\n+  struct CPUFeaturesBinary {};\n+  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n+  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  static bool ignore_cpu_features() { return true; }\n@@ -193,0 +197,3 @@\n+  \/\/ No _features_names[] available on this CPU.\n+  static void insert_features_names(char* buf, size_t buflen, uint64_t features = _features) {}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -417,0 +417,4 @@\n+  struct CPUFeaturesBinary {};\n+  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n+  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  static bool ignore_cpu_features() { return true; }\n@@ -588,0 +592,3 @@\n+  \/\/ No _features_names[] available on this CPU.\n+  static void insert_features_names(char* buf, size_t buflen, unsigned long features[] = _features) {}\n+\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -185,0 +185,14 @@\n+  product(ccstr, CPUFeatures, nullptr, \"CPU feature set, \"                  \\\n+      \"use -XX:CPUFeatures=0xnumber with -XX:CRaCCheckpointTo when you \"    \\\n+      \"get an error during -XX:CRaCRestoreFrom on a different machine; \"    \\\n+      \"-XX:CPUFeatures=native is the default; \"                             \\\n+      \"-XX:CPUFeatures=ignore will disable the CPU features check; \"        \\\n+      \"-XX:CPUFeatures=generic is compatible but not as slow as 0\")         \\\n+                                                                            \\\n+  product(bool, ShowCPUFeatures, false, \"Show features of this CPU \"        \\\n+      \"to be possibly used for the -XX:CPUFeatures=0xnumber option\")        \\\n+                                                                            \\\n+  product(bool, IgnoreCPUFeatures, false, RESTORE_SETTABLE | EXPERIMENTAL,  \\\n+      \"Do not refuse to run after -XX:CRaCRestoreFrom finds out some \"      \\\n+      \"CPU features are missing\")                                           \\\n+                                                                            \\\n@@ -191,2 +205,2 @@\n-             range(-1, 5)                                                   \\\n-                                                                            \\\n+             range(-1, 5)\n+\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -43,0 +44,7 @@\n+#if INCLUDE_CPU_FEATURE_ACTIVE\n+# if defined(__clang__) && defined(__STRICT_ANSI__)\n+\/\/ clang <stdbool.h> is missing this definition compared to gcc\n+#  define _Bool bool\n+# endif\n+# include <sys\/platform\/x86.h>\n+#endif\n@@ -49,0 +57,3 @@\n+uint64_t VM_Version::_glibc_features;\n+uint64_t VM_Version::_features_saved;\n+uint64_t VM_Version::_glibc_features_saved;\n@@ -51,1 +62,2 @@\n-const char* VM_Version::_features_names[] = { CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n+const char* VM_Version::      _features_names[] = {   CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n+const char* VM_Version::_glibc_features_names[] = { GLIBC_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n@@ -85,2 +97,11 @@\n-  assert ((!Universe::is_fully_initialized() || (_features & CPU_FLUSH) != 0), \"clflush should be available\");\n-  return true;\n+  if (!Universe::is_fully_initialized()) {\n+    return true;\n+  }\n+  if ((_features & CPU_FLUSH) != 0) {\n+    return true;\n+  }\n+  if (FLAG_IS_DEFAULT(CPUFeatures)) {\n+    vm_exit_during_initialization(\"clflush should be available\");\n+  }\n+  vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires FLUSH flag to be set: \" UINT64_FORMAT_X, CPU_FLUSH));\n+  return false;\n@@ -833,1 +854,178 @@\n-void VM_Version::get_processor_features() {\n+uint64_t VM_Version::CPUFeatures_parse(const char *str, uint64_t &glibc_features) {\n+  glibc_features = _glibc_features;\n+#ifndef LINUX\n+  _ignore_glibc_not_using = true;\n+  return _features;\n+#endif\n+  if (str == nullptr || strcmp(str, \"native\") == 0) {\n+    return _features;\n+  }\n+  if (strcmp(str, \"ignore\") == 0) {\n+    _ignore_glibc_not_using = true;\n+    return _features;\n+  }\n+  glibc_features = 0;\n+  if (strcmp(str, \"generic\") == 0) {\n+    \/\/ 32-bit x86 cannot rely on anything.\n+    return 0\n+#ifdef AMD64\n+      \/\/ The following options are all in \/proc\/cpuinfo of one of the first 64-bit CPUs - Atom D2700 (and Opteron 1352): https:\/\/superuser.com\/q\/1572306\/1015048\n+      | CPU_SSE \/\/ enabled in 'gcc -Q --help=target', used by OpenJDK\n+      | CPU_SSE2 \/\/ enabled in 'gcc -Q --help=target', required by OpenJDK\n+      | CPU_FXSR \/\/ enabled in 'gcc -Q --help=target', not used by OpenJDK\n+      | CPU_MMX \/\/ enabled in 'gcc -Q --help=target', used only by 32-bit x86 OpenJDK\n+      | CPU_TSC \/\/ not used by gcc, used by OpenJDK\n+      | CPU_CX8 \/\/ gcc detects it to set cpu \"pentium\" (=32-bit only), used by OpenJDK\n+      | CPU_CMOV \/\/ gcc detects it to set cpu \"pentiumpro\" (=32-bit only), used by OpenJDK\n+      | CPU_FLUSH \/\/ =\"clflush\" in cpuinfo, not used by gcc, required by OpenJDK\n+      \/\/ GLIBC_MOVBE is disabled in 'gcc -Q --help=target' and for example i7-720QM does not support it\n+      \/\/ GLIBC_LAHFSAHF is disabled in 'gcc -Q --help=target' and \"Early Intel Pentium 4 CPUs with Intel 64 support ... lacked the LAHF and SAHF instructions\"\n+#endif\n+    ;\n+  }\n+  char *endptr;\n+  errno = 0;\n+  uint64_t retval;\n+  unsigned long long ull = strtoull(str, &endptr, 0);\n+  retval = ull;\n+  if (!errno && *endptr == ',' && retval == ull) {\n+    ull = strtoull(endptr + 1, &endptr, 0);\n+    glibc_features = ull;\n+    if (!errno && !*endptr && glibc_features == ull) {\n+      return retval;\n+    }\n+  }\n+  vm_exit_during_initialization(err_msg(\"VM option 'CPUFeatures=%s' must be of the form: 0xnum,0xnum\", str));\n+  return -1;\n+}\n+\n+bool VM_Version::_ignore_glibc_not_using = false;\n+#ifdef LINUX\n+const char VM_Version::glibc_prefix[] = \":glibc.cpu.hwcaps=\";\n+const size_t VM_Version::glibc_prefix_len = strlen(glibc_prefix);\n+\n+bool VM_Version::glibc_env_set(char *disable_str) {\n+#define TUNABLES_NAME \"GLIBC_TUNABLES\"\n+#define REEXEC_NAME \"HOTSPOT_GLIBC_TUNABLES_REEXEC\"\n+  char *env_val = disable_str;\n+  const char *env = getenv(TUNABLES_NAME);\n+  if (env && (strcmp(env, env_val) == 0 || (!INCLUDE_CPU_FEATURE_ACTIVE && getenv(REEXEC_NAME)))) {\n+    if (!INCLUDE_CPU_FEATURE_ACTIVE) {\n+      if (ShowCPUFeatures) {\n+        tty->print_cr(\"Environment variable already set, glibc CPU_FEATURE_ACTIVE is unavailable - re-exec suppressed: \" TUNABLES_NAME \"=%s\", env);\n+      }\n+      return true;\n+    }\n+  }\n+  {\n+    ResourceMark rm;\n+    size_t env_buf_size = strlen(disable_str) + (!env ? 0 : strlen(env) + 100);\n+    char *env_buf = NEW_RESOURCE_ARRAY(char, env_buf_size);\n+    if (env) {\n+      if (ShowCPUFeatures) {\n+        tty->print_cr(\"Original environment variable: \" TUNABLES_NAME \"=%s\", env);\n+      }\n+      const char *hwcaps = strstr(env, glibc_prefix + 1 \/* skip ':' *\/);\n+      if (!hwcaps) {\n+        strcpy(env_buf, env);\n+        strcat(env_buf, disable_str);\n+      } else {\n+        const char *colon = strchr(hwcaps, ':');\n+        if (!colon) {\n+          strcpy(env_buf, env);\n+          strcat(env_buf, disable_str + glibc_prefix_len);\n+        } else {\n+          int err = jio_snprintf(env_buf, env_buf_size, \"%.*s%s%s\", (int)(colon - env), env, disable_str + glibc_prefix_len, colon);\n+          assert(err >= 0 && (unsigned) err < env_buf_size, \"internal error: \" TUNABLES_NAME \" buffer overflow\");\n+        }\n+      }\n+      env_val = env_buf;\n+    }\n+    if (ShowCPUFeatures) {\n+      tty->print_cr(\"Re-exec of java with new environment variable: \" TUNABLES_NAME \"=%s\", env_val);\n+    }\n+    if (setenv(TUNABLES_NAME, env_val, 1)) {\n+      vm_exit_during_initialization(err_msg(\"setenv \" TUNABLES_NAME \" error: %m\"));\n+    }\n+  }\n+\n+  if (getenv(REEXEC_NAME)) {\n+    vm_exit_during_initialization(err_msg(\"internal error: \" TUNABLES_NAME \"=%s failed and \" REEXEC_NAME \" is set\", disable_str));\n+  }\n+  if (setenv(REEXEC_NAME, \"1\", 1)) {\n+    vm_exit_during_initialization(err_msg(\"setenv \" REEXEC_NAME \" error: %m\"));\n+  }\n+#undef REEXEC_NAME\n+  return false;\n+}\n+\n+void VM_Version::glibc_reexec() {\n+  char *buf = nullptr;\n+  size_t buf_allocated = 0;\n+  size_t buf_used = 0;\n+#define CMDLINE \"\/proc\/self\/cmdline\"\n+  int fd = open(CMDLINE, O_RDONLY);\n+  if (fd == -1)\n+    vm_exit_during_initialization(err_msg(\"Cannot open \" CMDLINE \": %m\"));\n+  ssize_t got;\n+  do {\n+    if (buf_used == buf_allocated) {\n+      buf_allocated = MAX2(size_t(4096), 2 * buf_allocated);\n+      buf = (char *)os::realloc(buf, buf_allocated, mtOther);\n+      if (buf == nullptr)\n+        vm_exit_during_initialization(err_msg(CMDLINE \" reading failed allocating %zu bytes\", buf_allocated));\n+    }\n+    got = read(fd, buf + buf_used, buf_allocated - buf_used);\n+    if (got == -1)\n+      vm_exit_during_initialization(err_msg(\"Cannot read \" CMDLINE \": %m\"));\n+    buf_used += got;\n+  } while (got);\n+  if (close(fd))\n+    vm_exit_during_initialization(err_msg(\"Cannot close \" CMDLINE \": %m\"));\n+  char **argv = nullptr;\n+  size_t argv_allocated = 0;\n+  size_t argv_used = 0;\n+  char *s = buf;\n+  while (s <= buf + buf_used) {\n+    if (argv_used == argv_allocated) {\n+      argv_allocated = MAX2(size_t(256), 2 * argv_allocated);\n+      argv = (char **)os::realloc(argv, argv_allocated * sizeof(*argv), mtOther);\n+      if (argv == nullptr)\n+        vm_exit_during_initialization(err_msg(CMDLINE \" reading failed allocating %zu pointers\", argv_allocated));\n+    }\n+    if (s == buf + buf_used) {\n+      break;\n+    }\n+    argv[argv_used++] = s;\n+    s += strnlen(s, buf + buf_used - s);\n+    if (s == buf + buf_used)\n+      vm_exit_during_initialization(\"Missing end of string zero while parsing \" CMDLINE);\n+    ++s;\n+  }\n+  argv[argv_used] = nullptr;\n+#undef CMDLINE\n+\n+#define EXEC \"\/proc\/self\/exe\"\n+  execv(EXEC, argv);\n+  vm_exit_during_initialization(err_msg(\"Cannot re-execute \" EXEC \": %m\"));\n+#undef EXEC\n+}\n+\n+\/\/ Returns whether we should have got set a GLIBC_TUNABLES environment variables but did not get any.\n+bool VM_Version::glibc_not_using() {\n+  if (_ignore_glibc_not_using)\n+    return true;\n+\n+  uint64_t       features_expected =   MAX_CPU - 1;\n+  uint64_t glibc_features_expected = MAX_GLIBC - 1;\n+  if (!INCLUDE_CPU_FEATURE_ACTIVE) {\n+          features_expected =       _features;\n+    glibc_features_expected = _glibc_features;\n+  }\n+  uint64_t shouldnotuse_CPU   =       features_expected & ~      _features;\n+  uint64_t shouldnotuse_GLIBC = glibc_features_expected & ~_glibc_features;\n+\n+#ifndef ASSERT\n+  if (!shouldnotuse_CPU && !shouldnotuse_GLIBC)\n+    return true;\n+#endif\n@@ -835,0 +1033,232 @@\n+  \/\/ glibc: sysdeps\/x86\/get-isa-level.h:\n+  \/\/ glibc: if (CPU_FEATURE_USABLE_P (cpu_features, CMOV)\n+  \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, CX8)\n+  \/\/ glibc:     && CPU_FEATURE_CPU_P (cpu_features, FPU)\n+  \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, FXSR)\n+  \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, MMX)\n+  \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSE)\n+  \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSE2))\n+  \/\/ glibc:     isa_level = GNU_PROPERTY_X86_ISA_1_BASELINE;\n+  if ((_features & CPU_CMOV) &&\n+      (_features & CPU_CX8) &&\n+      \/\/ FPU is always present on i686+: (_features & CPU_FPU) &&\n+      (_features & CPU_SSE2)) {\n+    \/\/ These cannot be disabled by GLIBC_TUNABLES.\n+    if (shouldnotuse_CPU & (CPU_FXSR | CPU_MMX | CPU_SSE)) {\n+      assert(!(shouldnotuse_CPU & CPU_SSE2), \"CPU_SSE2 in both _features and shouldnotuse_CPU cannot happen\");\n+      \/\/ FIXME: The choice should be based on glibc impact, not the feature age.\n+      \/\/ CX8 is i586+, CMOV is i686+ 1995+, SSE2 is 2000+\n+      shouldnotuse_CPU |= CPU_SSE2;\n+    }\n+    if ((_features & CPU_FXSR) &&\n+        (_features & CPU_MMX) &&\n+        (_features & CPU_SSE)) {\n+      \/\/ glibc: if (CPU_FEATURE_USABLE_P (cpu_features, CMPXCHG16B)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, LAHF64_SAHF64)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, POPCNT)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSE3)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSSE3)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSE4_1)\n+      \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, SSE4_2))\n+      \/\/ glibc:     isa_level |= GNU_PROPERTY_X86_ISA_1_V2;\n+      if ((_features & CPU_POPCNT) &&\n+          (_features & CPU_SSSE3) &&\n+          (_features & CPU_SSE4_1) &&\n+          (_features & CPU_SSE4_2)) {\n+        if ((shouldnotuse_CPU & CPU_SSE3) ||\n+            (shouldnotuse_GLIBC & (GLIBC_CMPXCHG16 | GLIBC_LAHFSAHF))) {\n+          assert(!(shouldnotuse_CPU & CPU_SSE4_2), \"CPU_SSE4_2 in both _features and shouldnotuse_CPU cannot happen\");\n+          \/\/ POPCNT is 2007+, SSSE3 is 2006+, SSE4_1 is 2007+, SSE4_2 is 2008+.\n+          shouldnotuse_CPU |= CPU_SSE4_2;\n+        }\n+        if ((_features & CPU_SSE3) &&\n+            (_glibc_features & GLIBC_CMPXCHG16) &&\n+            (_glibc_features & GLIBC_LAHFSAHF)) {\n+          \/\/ glibc: if (CPU_FEATURE_USABLE_P (cpu_features, AVX)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, AVX2)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, BMI1)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, BMI2)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, F16C)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, FMA)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, LZCNT)\n+          \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, MOVBE))\n+          \/\/ glibc:     isa_level |= GNU_PROPERTY_X86_ISA_1_V3;\n+          if ((_features & CPU_AVX) &&\n+              (_features & CPU_AVX2) &&\n+              (_features & CPU_BMI1) &&\n+              (_features & CPU_BMI2) &&\n+              (_features & CPU_FMA) &&\n+              (_features & CPU_LZCNT) &&\n+              (_glibc_features & GLIBC_MOVBE)) {\n+            if (shouldnotuse_GLIBC & GLIBC_F16C) {\n+              assert(!(shouldnotuse_GLIBC & GLIBC_MOVBE), \"GLIBC_MOVBE in both _glibc_features and shouldnotuse_GLIBC cannot happen\");\n+              \/\/ FMA is 2012+, AVX2+BMI1+BMI2+LZCNT are 2013+, MOVBE is 2015+\n+              shouldnotuse_GLIBC |= GLIBC_MOVBE;\n+            }\n+            if (_glibc_features & GLIBC_F16C) {\n+              \/\/ glibc: if (CPU_FEATURE_USABLE_P (cpu_features, AVX512F)\n+              \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, AVX512BW)\n+              \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, AVX512CD)\n+              \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, AVX512DQ)\n+              \/\/ glibc:     && CPU_FEATURE_USABLE_P (cpu_features, AVX512VL))\n+              \/\/ glibc:   isa_level |= GNU_PROPERTY_X86_ISA_1_V4;\n+              \/\/ All these flags are supported by disable() below.\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+#define PASTE_TOKENS3(x, y, z) PASTE_TOKENS(x, PASTE_TOKENS(y, z))\n+  enum kind { KIND_CPU = 0, KIND_GLIBC, KIND_COUNT };\n+\n+  static const size_t tunables_size_max = 17;\n+  \/\/ 64 is # of bits in uint64_t VM_Version::_glibc_features.\n+  char disable_str[KIND_COUNT * 64 * (1\/*','*\/ + 1\/*'-'*\/ + tunables_size_max) + 1\/*'\\0'*\/];\n+  strcpy(disable_str, glibc_prefix);\n+  char *disable_end = disable_str + glibc_prefix_len;\n+  auto disable = [&](enum kind kind, uint64_t value, const char *tunables) {\n+    size_t remains = disable_str + sizeof(disable_str) - disable_end;\n+    guarantee(2 + strlen(tunables) < remains, \"internal error: disable_str overflow\");\n+    *disable_end++ = ',';\n+    *disable_end++ = '-';\n+    disable_end = stpcpy(disable_end, tunables);\n+  };\n+\n+#ifdef ASSERT\n+  uint64_t handled[KIND_COUNT] = { 0 };\n+#endif\n+  auto shouldnotuse_handled = [&](enum kind kind, uint64_t value, const char *kindstr, const char *tunables) {\n+    assert(strlen(tunables) <= tunables_size_max, \"Too long string %s\", tunables);\n+    assert((handled[kind] & value) == 0, \"already used %s_%s\", kindstr, tunables);\n+    DEBUG_ONLY(handled[kind] |= value);\n+  };\n+#define EXCESSIVE_HANDLED(kind, tunables) shouldnotuse_handled(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, tunables), STR(kind), STR(tunables))\n+\n+#if INCLUDE_CPU_FEATURE_ACTIVE\n+# define FEATURE_ACTIVE(tunables) CPU_FEATURE_ACTIVE(tunables)\n+#else\n+# define FEATURE_ACTIVE(tunables) true\n+#endif\n+\n+  const uint64_t shouldnotuseval[KIND_COUNT] = { shouldnotuse_CPU, shouldnotuse_GLIBC };\n+  auto shouldnotuse = [&](enum kind kind, uint64_t value, const char *kindstr, const char *tunables, bool feature_active) {\n+    shouldnotuse_handled(kind, value, kindstr, tunables);\n+    if ((shouldnotuseval[kind] & value) != 0 && feature_active) {\n+      disable(kind, value, tunables);\n+    }\n+  };\n+#define EXCESSIVE(kind, tunables) \\\n+    shouldnotuse(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, tunables), STR(kind), STR(tunables), FEATURE_ACTIVE(tunables))\n+\n+  EXCESSIVE(CPU  , AVX     );\n+  EXCESSIVE(CPU  , CX8     );\n+  EXCESSIVE(CPU  , FMA     );\n+  EXCESSIVE(CPU  , RTM     );\n+  EXCESSIVE(CPU  , AVX2    );\n+  EXCESSIVE(CPU  , BMI1    );\n+  EXCESSIVE(CPU  , BMI2    );\n+  EXCESSIVE(CPU  , CMOV    );\n+  EXCESSIVE(CPU  , ERMS    );\n+  EXCESSIVE(CPU  , SSE2    );\n+  EXCESSIVE(CPU  , LZCNT   );\n+  EXCESSIVE(CPU  , SSSE3   );\n+  EXCESSIVE(CPU  , POPCNT  );\n+  EXCESSIVE(CPU  , SSE4_1  );\n+  EXCESSIVE(CPU  , SSE4_2  );\n+  EXCESSIVE(CPU  , AVX512F );\n+  EXCESSIVE(CPU  , AVX512CD);\n+  EXCESSIVE(CPU  , AVX512BW);\n+  EXCESSIVE(CPU  , AVX512DQ);\n+  EXCESSIVE(CPU  , AVX512ER);\n+  EXCESSIVE(CPU  , AVX512PF);\n+  EXCESSIVE(CPU  , AVX512VL);\n+  EXCESSIVE(GLIBC, IBT     );\n+  EXCESSIVE(GLIBC, FMA4    );\n+  EXCESSIVE(GLIBC, MOVBE   );\n+  EXCESSIVE(GLIBC, SHSTK   );\n+  EXCESSIVE(GLIBC, XSAVE   );\n+  EXCESSIVE(GLIBC, OSXSAVE );\n+  EXCESSIVE(GLIBC, HTT     );\n+#undef EXCESSIVE\n+#undef EXCESSIVE3\n+\n+#ifdef ASSERT\n+  \/\/ These cannot be disabled by GLIBC_TUNABLES interface.\n+#define GLIBC_UNSUPPORTED(kind, hotspot) EXCESSIVE_HANDLED(kind, hotspot)\n+  GLIBC_UNSUPPORTED(CPU  , 3DNOW_PREFETCH   );\n+  GLIBC_UNSUPPORTED(CPU  , SSE4A            );\n+  GLIBC_UNSUPPORTED(CPU  , TSC              );\n+  GLIBC_UNSUPPORTED(CPU  , TSCINV_BIT       );\n+  GLIBC_UNSUPPORTED(CPU  , TSCINV           );\n+  GLIBC_UNSUPPORTED(CPU  , AES              );\n+  GLIBC_UNSUPPORTED(CPU  , CLMUL            );\n+  GLIBC_UNSUPPORTED(CPU  , ADX              );\n+  GLIBC_UNSUPPORTED(CPU  , SHA              );\n+  GLIBC_UNSUPPORTED(CPU  , VZEROUPPER       );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VPOPCNTDQ );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VPCLMULQDQ);\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VAES      );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VNNI      );\n+  GLIBC_UNSUPPORTED(CPU  , FLUSH            );\n+  GLIBC_UNSUPPORTED(CPU  , FLUSHOPT         );\n+  GLIBC_UNSUPPORTED(CPU  , CLWB             );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VBMI2     );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_VBMI      );\n+  GLIBC_UNSUPPORTED(CPU  , HV               );\n+  GLIBC_UNSUPPORTED(CPU  , SSE3             );\n+  GLIBC_UNSUPPORTED(CPU  , SERIALIZE        );\n+  GLIBC_UNSUPPORTED(CPU  , RDTSCP           );\n+  GLIBC_UNSUPPORTED(CPU  , RDPID            );\n+  GLIBC_UNSUPPORTED(CPU  , FSRM             );\n+  GLIBC_UNSUPPORTED(CPU  , GFNI             );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_BITALG    );\n+  GLIBC_UNSUPPORTED(CPU  , F16C             );\n+  GLIBC_UNSUPPORTED(CPU  , PKU              );\n+  GLIBC_UNSUPPORTED(CPU  , OSPKE            );\n+  GLIBC_UNSUPPORTED(CPU  , CET_IBT          );\n+  GLIBC_UNSUPPORTED(CPU  , CET_SS           );\n+  GLIBC_UNSUPPORTED(CPU  , AVX512_IFMA      );\n+  GLIBC_UNSUPPORTED(CPU  , AVX_IFMA         );\n+  GLIBC_UNSUPPORTED(CPU  , APX_F            );\n+  GLIBC_UNSUPPORTED(CPU  , SHA512           );\n+  \/\/ These are handled as an exception above.\n+  GLIBC_UNSUPPORTED(CPU  , FXSR             );\n+  GLIBC_UNSUPPORTED(CPU  , MMX              );\n+  GLIBC_UNSUPPORTED(CPU  , SSE              );\n+  GLIBC_UNSUPPORTED(CPU  , HT               );\n+  GLIBC_UNSUPPORTED(GLIBC, CMPXCHG16        );\n+  GLIBC_UNSUPPORTED(GLIBC, LAHFSAHF         );\n+  GLIBC_UNSUPPORTED(GLIBC, F16C             );\n+#undef GLIBC_UNSUPPORTED\n+\n+  auto check_kind = [&](enum kind kind, const char *kindstr, uint64_t mask) {\n+    if (handled[kind] != mask) {\n+      vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of some %s_* 0x%\" PRIx64 \" != full 0x%\" PRIx64, kindstr, handled[kind], mask));\n+    }\n+  };\n+#define CHECK_KIND(kind) check_kind(PASTE_TOKENS(KIND_, kind), STR(kind), PASTE_TOKENS(MAX_, kind) - 1)\n+  CHECK_KIND(CPU  );\n+  CHECK_KIND(GLIBC);\n+#undef CHECK_KIND\n+#endif \/\/ ASSERT\n+\n+  *disable_end = 0;\n+  if (disable_end == disable_str + glibc_prefix_len)\n+    return true;\n+  if (glibc_env_set(disable_str))\n+    return true;\n+  return false;\n+}\n+#endif \/\/LINUX\n+\n+void VM_Version::print_using_features_cr() {\n+  if (_ignore_glibc_not_using) {\n+    tty->print_cr(\"CPU features are being kept intact as requested by -XX:CPUFeatures=ignore\");\n+  } else {\n+    tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, _features, _glibc_features);\n+  }\n+}\n+\n+void VM_Version::get_processor_features_hardware() {\n@@ -839,0 +1269,1 @@\n+  _glibc_features = 0;\n@@ -855,0 +1286,1 @@\n+    LINUX_ONLY(_glibc_features = _cpuid_info.glibc_flags();)\n@@ -867,0 +1299,6 @@\n+  if (ShowCPUFeatures) {\n+    tty->print_cr(\"This machine's CPU features are: -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, _features, _glibc_features);\n+  }\n+}\n+\n+void VM_Version::get_processor_features_hotspot() {\n@@ -869,0 +1307,2 @@\n+    if (!FLAG_IS_DEFAULT(CPUFeatures))\n+      vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires SSE2 flag to be set: \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, CPU_SSE2, (uint64_t)0));\n@@ -1088,0 +1528,1 @@\n+\n@@ -1089,1 +1530,1 @@\n-  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size, _features_names);\n+  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n@@ -2058,0 +2499,73 @@\n+\/\/ Print the feature names as \" = feat1, ..., featN\\n\";\n+void VM_Version::missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n+  tty->print(\"; missing features of this CPU are \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X \" =\", features_missing, glibc_features_missing);\n+  char buf[512] = \"\";\n+  \/\/ insert_features_names() does crash for undefined too high-numbered features.\n+  insert_features_names(buf, sizeof(buf)          ,       features_missing & (  MAX_CPU - 1));\n+  char *s = buf + strlen(buf);\n+  insert_features_names(s  , buf + sizeof(buf) - s, glibc_features_missing & (MAX_GLIBC - 1));\n+  tty->print_cr(\n+    \"%s\\n\"\n+    \"If you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\",\n+    \/* + 1 to skip the first ','. *\/\n+    buf + 1);\n+}\n+\n+static_assert(sizeof(VM_Version::CPUFeaturesBinary) == 2 * 8, \"unexpected sizeof\");\n+bool VM_Version::cpu_features_binary(VM_Version::CPUFeaturesBinary *data) {\n+  data->cpu = _features;\n+  data->glibc = _glibc_features;\n+  return true;\n+}\n+\n+bool VM_Version::cpu_features_binary_check(const CPUFeaturesBinary *data) {\n+  assert(CPUFeatures == nullptr, \"This should only be called on restore and CPUFeatures is not restore-settable\");\n+\n+  if (!data) {\n+    return false;\n+  }\n+\n+  if (ShowCPUFeatures) {\n+    tty->print_cr(\"This snapshot's stored CPU features are: -XX:CPUFeatures=0x%\" PRIx64 \",0x%\" PRIx64, data->cpu, data->glibc);\n+  }\n+\n+  uint64_t   CPUFeatures_x64 = data->cpu;\n+  uint64_t GLIBCFeatures_x64 = data->glibc;\n+\n+  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n+  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n+\n+  \/\/ Workaround JDK-8311164: CPU_HT is set randomly on hybrid CPUs like Alder Lake.\n+  features_missing &= ~CPU_HT;\n+\n+  if (features_missing || glibc_features_missing) {\n+    tty->print(\n+      \"You have to specify -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X\n+      \" together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X,\n+      CPUFeatures_x64 & _features, GLIBCFeatures_x64 & _glibc_features,\n+      CPUFeatures_x64, GLIBCFeatures_x64);\n+    missing_features(features_missing, glibc_features_missing);\n+    if (!IgnoreCPUFeatures) {\n+      return false;\n+    }\n+  }\n+\n+        _features_saved =       _features;\n+  _glibc_features_saved = _glibc_features;\n+\n+        _features =   CPUFeatures_x64;\n+  _glibc_features = GLIBCFeatures_x64;\n+\n+  if (ShowCPUFeatures && !CRaCRestoreFrom) {\n+    print_using_features_cr();\n+  }\n+\n+#ifdef LINUX\n+  \/\/ glibc_not_using() has done setenv(TUNABLES_NAME) and it expects us to re-exec ourselves.\n+  \/\/ But we were only checking the cpufeatures file before restoring the process so we ignore the result.\n+  glibc_not_using();\n+#endif\n+\n+  return true;\n+}\n+\n@@ -2105,1 +2619,42 @@\n-  get_processor_features();\n+\n+  assert(      _features == 0,       \"_features should be zero at startup\");\n+  assert(_glibc_features == 0, \"_glibc_features should be zero at startup\");\n+  get_processor_features_hardware();\n+\n+  assert(!CPUFeatures == FLAG_IS_DEFAULT(CPUFeatures), \"CPUFeatures parsing\");\n+\n+  uint64_t GLIBCFeatures_x64;\n+  uint64_t   CPUFeatures_x64 = CPUFeatures_parse(CPUFeatures, GLIBCFeatures_x64);\n+\n+  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n+  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n+\n+  \/\/ Workaround JDK-8311164: CPU_HT is set randomly on hybrid CPUs like Alder Lake.\n+  features_missing &= ~CPU_HT;\n+\n+  if (features_missing || glibc_features_missing) {\n+    tty->print(\n+      \"Specified -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X\n+      \"; this machine's CPU features are \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X,\n+      CPUFeatures_x64, GLIBCFeatures_x64,\n+      _features, _glibc_features);\n+    missing_features(features_missing, glibc_features_missing);\n+    vm_exit_during_initialization();\n+  }\n+\n+        _features_saved =       _features;\n+  _glibc_features_saved = _glibc_features;\n+\n+        _features =   CPUFeatures_x64;\n+  _glibc_features = GLIBCFeatures_x64;\n+\n+  if (ShowCPUFeatures && !CRaCRestoreFrom) {\n+    print_using_features_cr();\n+  }\n+\n+#ifdef LINUX\n+  if (!glibc_not_using())\n+    glibc_reexec();\n+#endif\n+\n+  get_processor_features_hotspot();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":561,"deletions":6,"binary":false,"changes":567,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -86,1 +87,2 @@\n-                        : 2,\n+                        : 1,\n+               movbe    : 1,\n@@ -90,1 +92,1 @@\n-                        : 1,\n+               xsave    : 1,\n@@ -157,1 +159,3 @@\n-                            : 23;\n+                            : 7,\n+               fma4         : 1,\n+                            : 15;\n@@ -428,0 +432,21 @@\n+    MAX_CPU = CPU_SHA512 << 1\n+  };\n+\n+  \/* Tracking of a CPU feature for glibc *\/ \\\n+  enum Glibc_Feature_Flag : uint64_t {\n+#define GLIBC_FEATURE_FLAGS(decl) \\\n+    decl(FMA4,              \"fma4\",               0) \\\n+    decl(MOVBE,             \"movbe\",              1) \\\n+    decl(OSXSAVE,           \"osxsave\",            2) \\\n+    decl(IBT,               \"ibt\",                3) \\\n+    decl(SHSTK,             \"shstk\",              4) \/* Also known as cet_ss *\/ \\\n+    decl(XSAVE,             \"xsave\",              5) \\\n+    decl(CMPXCHG16,         \"cmpxchg16\",          6) \/* Also known in cpuinfo as cx16 and in glibc as cmpxchg16b *\/ \\\n+    decl(LAHFSAHF,          \"lahfsahf\",           7) \/* Also known in cpuinfo as lahf_lm and in glibc as lahf64_sahf64 *\/ \\\n+    decl(F16C,              \"f16c\",               8) \\\n+    decl(HTT,               \"htt\",                9) \/* hotspot calls it 'ht' but it is affected by threads_per_core() *\/\n+\n+#define DECLARE_GLIBC_FEATURE_FLAG(id, name, bit) GLIBC_##id = (1ULL << bit),\n+    GLIBC_FEATURE_FLAGS(DECLARE_GLIBC_FEATURE_FLAG)\n+#undef DECLARE_GLIBC_FEATURE_FLAG\n+    MAX_GLIBC = GLIBC_HTT << 1\n@@ -430,0 +455,5 @@\n+  \/\/ glibc feature flags.\n+  static uint64_t _glibc_features;\n+\n+  static uint64_t _features_saved, _glibc_features_saved;\n+\n@@ -431,0 +461,1 @@\n+  static const char* _glibc_features_names[];\n@@ -570,0 +601,23 @@\n+#ifdef LINUX\n+    uint64_t glibc_flags() const {\n+      uint64_t result = 0;\n+      if (std_cpuid1_ecx.bits.movbe != 0)\n+        result |= GLIBC_MOVBE;\n+      if (std_cpuid1_ecx.bits.osxsave != 0)\n+        result |= GLIBC_OSXSAVE;\n+      if (std_cpuid1_ecx.bits.xsave != 0)\n+        result |= GLIBC_XSAVE;\n+      if (std_cpuid1_ecx.bits.cmpxchg16 != 0)\n+        result |= GLIBC_CMPXCHG16;\n+      if (std_cpuid1_ecx.bits.f16c != 0)\n+        result |= GLIBC_F16C;\n+      if (ext_cpuid1_ecx.bits.fma4 != 0)\n+        result |= GLIBC_FMA4;\n+      if (ext_cpuid1_ecx.bits.LahfSahf != 0)\n+        result |= GLIBC_LAHFSAHF;\n+      if (std_cpuid1_edx.bits.ht != 0)\n+        result |= GLIBC_HTT;\n+      return result;\n+    }\n+#endif \/\/LINUX\n+\n@@ -606,0 +660,17 @@\n+  static void get_processor_features_hardware();\n+  static void get_processor_features_hotspot();\n+\n+  static uint64_t CPUFeatures_parse(const char *str, uint64_t &glibc_features);\n+#ifdef LINUX\n+  static bool glibc_not_using();\n+  static bool glibc_env_set(char *disable_str);\n+  \/*[[noreturn]]*\/ static void glibc_reexec();\n+  \/\/ C++17: Make glibc_prefix and glibc_prefix_len constexpr.\n+  static const char glibc_prefix[];\n+  static const size_t glibc_prefix_len;\n+#endif \/\/LINUX\n+  \/\/ C++17: Make _ignore_glibc_not_using inline.\n+  static bool _ignore_glibc_not_using;\n+  static void print_using_features_cr();\n+  \/*[[noreturn]]*\/ static void missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n+\n@@ -653,0 +724,7 @@\n+  static void insert_features_names(char* buf, size_t buflen, uint64_t features = _features) {\n+    Abstract_VM_Version::insert_features_names(buf, buflen, _features_names, features);\n+  }\n+  static void insert_glibc_features_names(char* buf, size_t buflen, uint64_t glibc_features) {\n+    Abstract_VM_Version::insert_features_names(buf, buflen, _glibc_features_names, glibc_features);\n+  }\n+\n@@ -655,0 +733,7 @@\n+  struct CPUFeaturesBinary {\n+    uint64_t cpu, glibc;\n+  };\n+  static bool cpu_features_binary(CPUFeaturesBinary *data);\n+  static bool cpu_features_binary_check(const CPUFeaturesBinary *data);\n+  static bool ignore_cpu_features() { return _ignore_glibc_not_using; }\n+  static void restore_check(const char* str, const char* msg_prefix);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":88,"deletions":3,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -922,0 +922,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -863,0 +863,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2017, 2022, Azul Systems, Inc. All rights reserved.\n@@ -26,0 +27,1 @@\n+#include \"classfile\/classLoader.hpp\"\n@@ -68,0 +70,1 @@\n+#include \"services\/writeableFlags.hpp\"\n@@ -87,0 +90,1 @@\n+# include <arpa\/inet.h>\n@@ -91,1 +95,0 @@\n-# include <sys\/stat.h>\n@@ -94,0 +97,1 @@\n+# include <sys\/sysmacros.h>\n@@ -111,1 +115,0 @@\n-# include <fcntl.h>\n@@ -120,0 +123,1 @@\n+# include <libgen.h>\n@@ -213,0 +217,4 @@\n+static int cached_pid = 0;\n+\n+static int clock_tics_per_sec = 100;\n+\n@@ -512,0 +520,5 @@\n+void os::Linux::initialize_processor_count() {\n+  set_processor_count((int) sysconf(_SC_NPROCESSORS_CONF));\n+  assert(processor_count() > 0, \"linux error\");\n+}\n+\n@@ -513,1 +526,1 @@\n-  set_processor_count((int)sysconf(_SC_NPROCESSORS_CONF));\n+  initialize_processor_count();\n@@ -526,1 +539,0 @@\n-  assert(processor_count() > 0, \"linux error\");\n@@ -1515,0 +1527,1 @@\n+\n@@ -1516,1 +1529,8 @@\n-  return ::getpid();\n+  \/\/ GLIBC < 2.25 caches pid in ::getpid(); we need to be able to reset this\n+  \/\/ on CRaC restore, therefore we will use our own caching.\n+  return cached_pid ? cached_pid : syscall(SYS_getpid);\n+}\n+\n+void os::reset_cached_process_id() {\n+  cached_pid = 0;\n+  cached_pid = current_process_id();\n@@ -4379,0 +4399,3 @@\n+  cached_pid = current_process_id();\n+\n+  clock_tics_per_sec = checked_cast<int>(sysconf(_SC_CLK_TCK));\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -101,0 +102,1 @@\n+static jlong restore_time_count = 0;\n@@ -876,0 +878,4 @@\n+bool os::is_path_absolute(const char *path) {\n+  return (path && '\/' == path[0]);\n+}\n+\n@@ -898,0 +904,8 @@\n+int os::mkdir(const char *path) {\n+  return ::mkdir(path, 0700);\n+}\n+\n+int os::rmdir(const char *path) {\n+  return ::rmdir(path);\n+}\n+\n@@ -1318,0 +1332,4 @@\n+  initialize_time_counters();\n+}\n+\n+void os::Posix::initialize_time_counters(void) {\n@@ -1319,0 +1337,5 @@\n+  restore_time_count = initial_time_count;\n+}\n+\n+void os::Posix::reset_time_counters(void) {\n+  restore_time_count = javaTimeNanos();\n@@ -1476,1 +1499,1 @@\n-  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec);\n+  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec) + crac::monotonic_time_offset();\n@@ -1502,0 +1525,4 @@\n+jlong os::elapsed_counter_since_restore() {\n+  return os::javaTimeNanos() - restore_time_count;\n+}\n+\n@@ -2026,0 +2053,4 @@\n+int os::execv(const char *path, const char *argv[]) {\n+  return ::execv(path, (char * const *)argv);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+  static void initialize_time_counters(void);\n+  static void reset_time_counters(void);\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2020, 2021, Azul Systems, Inc. All rights reserved.\n@@ -33,0 +34,1 @@\n+\/\/#include \"os_linux.inline.hpp\"\n@@ -43,0 +45,4 @@\n+#ifdef LINUX\n+#include \"perfMemory_linux.hpp\"\n+#endif \/\/LINUX\n+\n@@ -1341,0 +1347,83 @@\n+\n+#ifdef LINUX\n+bool PerfMemoryLinux::checkpoint() {\n+  if (!backing_store_file_name) {\n+    return true;\n+  }\n+\n+  void *anon = ::mmap(nullptr, PerfMemory::capacity(), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (anon == MAP_FAILED) {\n+    tty->print_cr(\"Cannot allocate new memory for perfdata: %s\", os::strerror(errno));\n+    return false;\n+  }\n+  \/\/ Note: we might be losing updates that happen between this copy and mremap\n+  \/\/ TODO: consider acquiring PeriodicTask_lock around this\n+  memcpy(anon, PerfMemory::start(), PerfMemory::used());\n+  if (mremap(anon, PerfMemory::capacity(), PerfMemory::capacity(), MREMAP_FIXED | MREMAP_MAYMOVE, PerfMemory::start()) == MAP_FAILED) {\n+    tty->print_cr(\"Cannot remap perfdata memory as anonymous: %s\", os::strerror(errno));\n+    if (munmap(anon, PerfMemory::capacity())) {\n+      tty->print_cr(\"Cannot unmap unused private perfdata memory: %s\", os::strerror(errno));\n+    }\n+    return false;\n+  }\n+\n+  remove_file(backing_store_file_name);\n+  \/\/ We cannot keep the filename because some C\/R engines might not preserve PID numbers\n+  \/\/ Also, username might change.\n+  FREE_C_HEAP_ARRAY(char, backing_store_file_name);\n+  backing_store_file_name = nullptr;\n+\n+  return true;\n+}\n+\n+bool PerfMemoryLinux::restore() {\n+  assert(backing_store_file_name == nullptr, \"Should be nil'ed on checkpoint\");\n+  \/\/ With -XX:-UsePerfData the capacity is zero\n+  if (PerfDisableSharedMem || PerfMemory::capacity() == 0) {\n+    return true;\n+  }\n+  int vmid = os::current_process_id();\n+  char* user_name = get_user_name(geteuid());\n+  if (!user_name) {\n+    return false;\n+  }\n+  char* dirname = get_user_tmp_dir(user_name, vmid, -1);\n+  if (!make_user_tmp_dir(dirname)) {\n+    return false;\n+  }\n+  backing_store_file_name = get_sharedmem_filename(dirname, vmid, -1);\n+\n+  int fd;\n+  RESTARTABLE(::open(backing_store_file_name, O_RDWR|O_CREAT|O_NOFOLLOW, S_IRUSR|S_IWUSR), fd);\n+  if (fd == OS_ERR) {\n+    tty->print_cr(\"Cannot open shared perfdata file: %s\", os::strerror(errno));\n+    return false;\n+  }\n+\n+  if (::ftruncate(fd, PerfMemory::capacity())) {\n+    tty->print_cr(\"Cannot restore (ftruncate) perfdata file size: %s\", os::strerror(errno));\n+    ::close(fd);\n+    return false;\n+  }\n+\n+  void* shared = ::mmap(nullptr, PerfMemory::capacity(), PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);\n+  if (MAP_FAILED == shared) {\n+    tty->print_cr(\"cannot mmap shared perfdata file: %s\", os::strerror(errno));\n+    ::close(fd);\n+    return false;\n+  }\n+  ::close(fd);\n+\n+  \/\/ Here is another place where we might lose the update\n+  memcpy(shared, PerfMemory::start(), PerfMemory::used());\n+  if (::mremap(shared, PerfMemory::capacity(), PerfMemory::capacity(), MREMAP_FIXED | MREMAP_MAYMOVE, PerfMemory::start()) == MAP_FAILED) {\n+    tty->print_cr(\"Cannot remap shared perfdata: %s\", os::strerror(errno));\n+    if (munmap(shared, PerfMemory::capacity())) {\n+      tty->print_cr(\"Cannot unmap the shared memory: %s\", os::strerror(errno));\n+    }\n+    return false;\n+  }\n+\n+  return true;\n+}\n+#endif \/\/LINUX\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":89,"deletions":0,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-static sigset_t unblocked_sigs, vm_sigs, preinstalled_sigs;\n+static sigset_t unblocked_sigs, blocked_sigs, vm_sigs, preinstalled_sigs;\n@@ -1181,1 +1181,1 @@\n-      const pid_t me = getpid();\n+      const pid_t me = os::current_process_id();\n@@ -1550,0 +1550,15 @@\n+\n+  sigemptyset(&blocked_sigs);\n+\/\/ RESTORE_SIGNAL is used only on Linux, other platform don't send this\n+#ifdef LINUX\n+  \/\/ The signal is used with default crexec library, other CRaCEngines might use\n+  \/\/ signals in a different way and having this signal blocked could interfere.\n+  const char *signal_engines[] = { \"criu\", \"criuengine\", \"sim\", \"simengine\", \"pause\", \"pauseengine\", nullptr };\n+  for (int i = 0; signal_engines[i] != nullptr; ++i) {\n+    if (strcmp(CRaCEngine, signal_engines[i]) == 0) {\n+      sigaddset(&blocked_sigs, RESTORE_SIGNAL);\n+      break;\n+    }\n+  }\n+#endif\n+\n@@ -1560,0 +1575,5 @@\n+static sigset_t* blocked_signals() {\n+  assert(signal_sets_initialized, \"Not initialized\");\n+  return &blocked_sigs;\n+}\n+\n@@ -1577,0 +1597,1 @@\n+  pthread_sigmask(SIG_BLOCK, blocked_signals(), nullptr);\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -823,0 +824,1 @@\n+static jlong restore_performance_count;\n@@ -830,1 +832,0 @@\n-\n@@ -835,0 +836,5 @@\n+jlong os::elapsed_counter_since_restore() {\n+  LARGE_INTEGER count;\n+  QueryPerformanceCounter(&count);\n+  return count.QuadPart - restore_performance_count;\n+}\n@@ -1114,0 +1120,1 @@\n+  restore_performance_count = initial_performance_count;\n@@ -1116,0 +1123,9 @@\n+void os::win32::reset_performance_counters() {\n+  LARGE_INTEGER count;\n+  QueryPerformanceFrequency(&count);\n+  \/\/ Until we perform a real C\/R on Windows this is safe, performance frequency\n+  \/\/ should be the same. With real C\/R the counters will be probably incomparable.\n+  assert(performance_frequency == count.QuadPart, \"Performance frequency changed\");\n+  QueryPerformanceCounter(&count);\n+  restore_performance_count = count.QuadPart;\n+}\n@@ -1555,0 +1571,27 @@\n+\/\/ NOTE: is_path_absolute() function implementation is mostly a copy from FileSystemSupport_md.c\n+\/\/ WinAPI has PathIsRelative() function for this purpose, however it causes linkage to Shlwapi.dll.\n+static int prefixLength(const char* path) {\n+    assert(1 == strlen(os::file_separator()), \"the file separator must be a single-char, not a string\");\n+    char c0, c1;\n+\n+    int n = (int)strlen(path);\n+    if (n == 0) return 0;\n+    c0 = path[0];\n+    c1 = (n > 1) ? path[1] : 0;\n+    if (c0 == *os::file_separator()) {\n+        if (c1 == *os::file_separator()) return 2;      \/* Absolute UNC pathname \"\\\\\\\\foo\" *\/\n+        return 1;                       \/* Drive-relative \"\\\\foo\" *\/\n+    }\n+    if (::isalpha(c0) && (c1 == ':')) {\n+        if ((n > 2) && (path[2] == *os::file_separator()))\n+            return 3;           \/* Absolute local pathname \"z:\\\\foo\" *\/\n+        return 2;                       \/* Directory-relative \"z:foo\" *\/\n+    }\n+    return 0;                   \/* Completely relative *\/\n+}\n+\n+bool os::is_path_absolute(const char *path) {\n+  int pl = prefixLength(path);\n+  return (((pl == 2) && (path[0] == *os::file_separator())) || (pl == 3));\n+}\n+\n@@ -3885,0 +3928,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n@@ -4672,0 +4718,25 @@\n+int os::mkdir(const char *path) {\n+  errno_t err;\n+  wchar_t* wide_path = wide_abs_unc_path(path, err);\n+  if (wide_path == nullptr) {\n+    errno = err;\n+    return -1;\n+  }\n+  int res = _wmkdir(wide_path);\n+  os::free(wide_path);\n+  return res;\n+}\n+\n+int os::rmdir(const char *path) {\n+  errno_t err;\n+  wchar_t* wide_path = wide_abs_unc_path(path, err);\n+  if (wide_path == nullptr) {\n+    errno = err;\n+    return -1;\n+  }\n+  int res = _wrmdir(wide_path);\n+  os::free(wide_path);\n+  return res;\n+}\n+\n+\n@@ -5675,0 +5746,4 @@\n+int os::execv(const char *path, const char *argv[]) {\n+  return _execv(path, argv);\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -762,0 +762,12 @@\n+GrowableArray<int> ClassLoader::get_classpath_entry_fds() {\n+  GrowableArray<int> fds;\n+  assert(Thread::current()->is_VM_thread(), \"should be called from VM op\");\n+  \/\/ we don't use mutexes here because it is called from VM op\n+  for (ClassPathEntry *entry = first_append_entry(); entry != nullptr; entry = entry->next()) {\n+    if (entry->is_jar_file()) {\n+      fds.append(((ClassPathZipEntry *) entry)->get_fd());\n+    }\n+  }\n+  return fds;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -741,0 +741,4 @@\n+  template(jdk_internal_crac_mirror_Core,          \"jdk\/internal\/crac\/mirror\/Core\")                               \\\n+  template(checkpointRestoreInternal_name,         \"checkpointRestoreInternal\")                                   \\\n+  template(checkpointRestoreInternal_signature,    \"(J)Ljava\/lang\/String;\")                                       \\\n+                                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"gc\/g1\/g1UncommitRegionTask.hpp\"\n@@ -1032,0 +1033,4 @@\n+  virtual void finish_collection() override {\n+    G1UncommitRegionTask::finish_collection();\n+  }\n+\n@@ -1326,0 +1331,4 @@\n+\n+  void after_restore(void) override {\n+    _hrm.after_restore();\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -69,1 +69,3 @@\n-  _regions(), _heap_mapper(nullptr),\n+  _regions(),\n+  _max_available_regions(0),\n+  _heap_mapper(nullptr),\n@@ -88,0 +90,2 @@\n+  _max_available_regions = (uint) (CRaCMaxHeapSizeBeforeCheckpoint == 0 ? _regions.length() :\n+    CRaCMaxHeapSizeBeforeCheckpoint \/ G1HeapRegion::GrainBytes);\n@@ -92,0 +96,4 @@\n+void G1HeapRegionManager::after_restore() {\n+  _max_available_regions = (uint) _regions.length();\n+}\n+\n@@ -133,1 +141,3 @@\n-  expand_exact(candidate, num_regions, G1CollectedHeap::heap()->workers());\n+  if (!expand_exact(candidate, num_regions, G1CollectedHeap::heap()->workers())) {\n+    return nullptr;\n+  }\n@@ -164,0 +174,4 @@\n+  assert(_committed_map.num_active() + _committed_map.num_inactive() + num_regions <= _max_available_regions,\n+    \"Expanding over the limit: %d active, %d inactive, %d requested, limit %d\",\n+    _committed_map.num_active(), _committed_map.num_inactive(), num_regions, _max_available_regions);\n+\n@@ -342,2 +356,5 @@\n-    uint to_expand = MIN2(num_regions - expanded, regions.length());\n-    expand(regions.start(), to_expand, pretouch_workers);\n+    uint to_expand = MIN3(num_regions - expanded, regions.length(),\n+      _max_available_regions - _committed_map.num_active() - _committed_map.num_inactive());\n+    if (to_expand > 0) {\n+      expand(regions.start(), to_expand, pretouch_workers);\n+    }\n@@ -367,1 +384,1 @@\n-void G1HeapRegionManager::expand_exact(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n+bool G1HeapRegionManager::expand_exact(uint start, uint num_regions, WorkerThreads* pretouch_workers) {\n@@ -386,0 +403,6 @@\n+      \/\/ Fail if we're over the limits (were not able to just reactivate)\n+      if (_committed_map.num_active() + _committed_map.num_inactive() + (i - start) + 1 > _max_available_regions) {\n+        log_debug(gc)(\"Cannot expand to regions %u - %u: active %u, inactive %u, max %u\", start, end,\n+         _committed_map.num_active(),  _committed_map.num_inactive(), _max_available_regions);\n+        return false;\n+      }\n@@ -393,0 +416,1 @@\n+  return true;\n@@ -399,4 +423,12 @@\n-    for (uint i = 0; i < reserved_length(); i++) {\n-      if (is_available(i)) {\n-        \/\/ Already in use continue\n-        continue;\n+    if (_committed_map.num_active() + _committed_map.num_inactive() >= _max_available_regions) {\n+      \/\/ We have to use existing inactive region, cannot allocate new one\n+      \/\/ while we have inactive.\n+      for (uint i = 0; i < reserved_length(); i++) {\n+        if (!_committed_map.inactive(i)) {\n+          continue;\n+        }\n+        expand_candidate = i;\n+        if (is_on_preferred_index(expand_candidate, preferred_index)) {\n+          \/\/ We have found a candidate on the preferred node, break.\n+          break;\n+        }\n@@ -404,5 +436,13 @@\n-      \/\/ Always save the candidate so we can expand later on.\n-      expand_candidate = i;\n-      if (is_on_preferred_index(expand_candidate, preferred_index)) {\n-        \/\/ We have found a candidate on the preferred node, break.\n-        break;\n+    }\n+    if (expand_candidate == UINT_MAX) {\n+      for (uint i = 0; i < reserved_length(); i++) {\n+        if (is_available(i)) {\n+          \/\/ Already in use continue\n+          continue;\n+        }\n+        \/\/ Always save the candidate so we can expand later on.\n+        expand_candidate = i;\n+        if (is_on_preferred_index(expand_candidate, preferred_index)) {\n+          \/\/ We have found a candidate on the preferred node, break.\n+          break;\n+        }\n@@ -415,0 +455,1 @@\n+    log_debug(gc)(\"No regions left\");\n@@ -417,0 +458,1 @@\n+  log_debug(gc)(\"Candidate is %u\", expand_candidate);\n@@ -418,2 +460,1 @@\n-  expand_exact(expand_candidate, 1, nullptr);\n-  return 1;\n+  return expand_exact(expand_candidate, 1, nullptr) ? 1 : 0;\n@@ -541,1 +582,3 @@\n-      expand_exact(curr_index, 1, pretouch_workers);\n+      if (!expand_exact(curr_index, 1, pretouch_workers)) {\n+        return false;\n+      }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":60,"deletions":17,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n@@ -991,0 +992,7 @@\n+static void zero_cap(MutableSpace* ms) {\n+  os::cleanup_memory((char*)ms->top(), (char*)ms->end() - (char*)ms->top());\n+}\n+static void zero_all(MutableSpace* ms) {\n+  os::cleanup_memory((char*)ms->bottom(), (char*)ms->end() - (char*)ms->bottom());\n+}\n+\n@@ -1141,0 +1149,7 @@\n+    if (heap->do_cleanup_unused()) {\n+      zero_cap(young_gen->eden_space());\n+      zero_cap(young_gen->from_space());\n+      zero_all(young_gen->to_space());\n+      zero_cap(old_gen->object_space());\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n@@ -406,0 +407,6 @@\n+  if (Universe::heap()->do_cleanup_unused()) {\n+    os::cleanup_memory((char*)eden()->top(), (char*)eden()->end() - (char*)eden()->top());\n+    os::cleanup_memory((char*)from()->top(), (char*)from()->end() - (char*)from()->top());\n+    os::cleanup_memory((char*)to()->top(), (char*)to()->end() - (char*)to()->top());\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -268,0 +268,1 @@\n+  _cleanup_unused(false),\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,0 +120,2 @@\n+  bool _cleanup_unused;\n+\n@@ -378,0 +380,6 @@\n+  void set_cleanup_unused(bool value) { _cleanup_unused = value; }\n+  bool do_cleanup_unused() const { return _cleanup_unused; }\n+\n+  \/\/ G1UncommitRegionTask may be still pending after collect() has returned.\n+  virtual void finish_collection() {}\n+\n@@ -513,0 +521,2 @@\n+\n+  virtual void after_restore(void) {}\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1043,0 +1043,4 @@\n+\n+  if (Universe::heap()->do_cleanup_unused()) {\n+    _page_allocator->uncommit_unused_memory();\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -743,1 +743,1 @@\n-size_t ZPartition::uncommit(uint64_t* timeout) {\n+size_t ZPartition::uncommit(uint64_t* timeout, uintx delay) {\n@@ -757,1 +757,1 @@\n-    if (time_since_last_commit < double(ZUncommitDelay)) {\n+    if (time_since_last_commit < double(delay)) {\n@@ -759,1 +759,1 @@\n-      *timeout = uint64_t(double(ZUncommitDelay) - time_since_last_commit);\n+      *timeout = uint64_t(double(delay) - time_since_last_commit);\n@@ -772,2 +772,2 @@\n-      \/\/ Set timeout to ZUncommitDelay\n-      *timeout = ZUncommitDelay;\n+      \/\/ Set timeout to delay\n+      *timeout = delay;\n@@ -777,1 +777,1 @@\n-    if (time_since_last_uncommit < double(ZUncommitDelay)) {\n+    if (time_since_last_uncommit < double(delay)) {\n@@ -780,1 +780,1 @@\n-      const double time_left = double(ZUncommitDelay) - time_since_last_uncommit;\n+      const double time_left = double(delay) - time_since_last_uncommit;\n@@ -792,1 +792,1 @@\n-      uint64_t new_timeout = ZUncommitDelay \/ split;\n+      uint64_t new_timeout = delay \/ split;\n@@ -2470,0 +2470,19 @@\n+\n+void ZPageAllocator::uncommit_unused_memory() {\n+  uint64_t timeout;\n+  size_t flushed, uncommitted = 0;\n+  ZPartitionIterator iter = partition_iterator();\n+  for (ZPartition* partition; iter.next(&partition);) {\n+    partition->_cache.reset_min();\n+    do {\n+      flushed = partition->uncommit(&timeout, 0);\n+      uncommitted += flushed;\n+    } while (flushed > 0);\n+  }\n+  if (uncommitted > 0) {\n+    EventZUncommit event;\n+    log_info(gc, heap)(\"Uncommitted (cleanup): %zuM(%.0f%%)\",\n+      uncommitted \/ M, percent_of(uncommitted, ZHeap::heap()->max_capacity()));\n+    event.commit(uncommitted);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  size_t uncommit(uint64_t* timeout);\n+  size_t uncommit(uint64_t* timeout, uintx delay);\n@@ -286,0 +286,2 @@\n+  void uncommit_unused_memory();\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,0 +122,4 @@\n+\n+  \/\/ Default log level for 'crac' is Info\n+  precond(!log_is_enabled(Info, crac)); \/\/ If this fails, the below can be removed\n+  LogTagSetMapping<LOG_TAGS(crac)>::tagset().set_output_level(StdoutLog, LogLevel::Info);\n@@ -741,0 +745,22 @@\n+bool LogConfiguration::is_fd_used(int fd) {\n+  assert(fd != -1, \"fd must be valid\");\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    if (fd == _outputs[i]->fd_get()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+void LogConfiguration::close() {\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    _outputs[i]->close();\n+  }\n+}\n+\n+void LogConfiguration::reopen() {\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    _outputs[i]->reopen();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3251,0 +3251,36 @@\n+\n+void JvmtiExport::post_crac_before_checkpoint() {\n+  JavaThread *thread = JavaThread::current();\n+  HandleMark hm(thread);\n+  EVT_TRIG_TRACE(EXT_EVENT_CRAC_BEFORE_CHECKPOINT, (\"Trg CRaC Before Checkpoint event triggered\"));\n+  JvmtiEnvIterator it;\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n+    if (env->is_enabled((jvmtiEvent)EXT_EVENT_CRAC_BEFORE_CHECKPOINT)) {\n+      EVT_TRACE(EXT_EVENT_CRAC_BEFORE_CHECKPOINT, (\"[?] Evt Before Checkpoint sent\"));\n+      JvmtiEventMark jem(thread);\n+      JvmtiJavaThreadEventTransition jet(thread);\n+      jvmtiExtensionEvent callback = env->ext_callbacks()->CracBeforeCheckpoint;\n+      if (callback != nullptr) {\n+        (*callback)(env->jvmti_external());\n+      }\n+    }\n+  }\n+}\n+\n+void JvmtiExport::post_crac_after_restore() {\n+  JavaThread *thread = JavaThread::current();\n+  HandleMark hm(thread);\n+  EVT_TRIG_TRACE(EXT_EVENT_CRAC_AFTER_RESTORE, (\"Trg CRaC After Restore event triggered\"));\n+  JvmtiEnvIterator it;\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n+    if (env->is_enabled((jvmtiEvent)EXT_EVENT_CRAC_AFTER_RESTORE)) {\n+      EVT_TRACE(EXT_EVENT_CRAC_AFTER_RESTORE, (\"[?] Evt After Restore sent\"));\n+      JvmtiEventMark jem(thread);\n+      JvmtiJavaThreadEventTransition jet(thread);\n+      jvmtiExtensionEvent callback = env->ext_callbacks()->CracAfterRestore;\n+      if (callback != nullptr) {\n+        (*callback)(env->jvmti_external());\n+      }\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -328,2 +328,1 @@\n-void Abstract_VM_Version::insert_features_names(char* buf, size_t buflen, const char* features_names[]) {\n-  uint64_t features = _features;\n+void Abstract_VM_Version::insert_features_names(char* buf, size_t buflen, const char* features_names[], uint64_t features) {\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+  static void insert_features_names(char* buf, size_t buflen, const char* features_names[], uint64_t features = _features);\n@@ -133,0 +134,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2017, 2024, Azul Systems, Inc. All rights reserved.\n@@ -52,0 +53,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -77,0 +79,1 @@\n+#include <type_traits>\n@@ -89,0 +92,1 @@\n+char*  Arguments::_java_command_crac            = nullptr;\n@@ -554,0 +558,10 @@\n+  { \"CREngine\",                     JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRAllowedOpenFilePrefixes\",    JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRAllowToSkipCheckpoint\",      JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRHeapDumpOnCheckpointException\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRPrintResourcesOnCheckpoint\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRTraceStartupTime\",           JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRDoThrowCheckpointException\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRPauseOnCheckpointError\",     JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRTrace\",                      JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::undefined() },\n+\n@@ -565,0 +579,8 @@\n+  { \"CREngine\",                        \"CRaCEngine\" },\n+  { \"CRAllowedOpenFilePrefixes\",       \"CRaCAllowedOpenFilePrefixes\" },\n+  { \"CRAllowToSkipCheckpoint\",         \"CRaCAllowToSkipCheckpoint \"},\n+  { \"CRHeapDumpOnCheckpointException\", \"CRaCHeapDumpOnCheckpointException\" },\n+  { \"CRPrintResourcesOnCheckpoint\",    \"CRaCPrintResourcesOnCheckpoint\" },\n+  { \"CRTraceStartupTime\",              \"CRaCTraceStartupTime\" },\n+  { \"CRDoThrowCheckpointException\",    \"CRaCDoThrowCheckpointException\" },\n+  { \"CRPauseOnCheckpointError\",        \"CRaCPauseOnCheckpointError\" },\n@@ -1092,0 +1114,13 @@\n+static void parse_argname(const char *arg, const char **argname, size_t *arg_len, bool *has_plus_minus) {\n+  \/\/ Determine if the flag has '+', '-', or '=' characters.\n+  *has_plus_minus = (*arg == '+' || *arg == '-');\n+  *argname = *has_plus_minus ? arg + 1 : arg;\n+\n+  const char* equal_sign = strchr(*argname, '=');\n+  if (equal_sign == nullptr) {\n+    *arg_len = strlen(*argname);\n+  } else {\n+    *arg_len = equal_sign - *argname;\n+  }\n+}\n+\n@@ -1101,4 +1136,1 @@\n-  \/\/ Determine if the flag has '+', '-', or '=' characters.\n-  bool has_plus_minus = (*arg == '+' || *arg == '-');\n-  const char* const argname = has_plus_minus ? arg + 1 : arg;\n-\n+  const char* argname;\n@@ -1106,6 +1138,2 @@\n-  const char* equal_sign = strchr(argname, '=');\n-  if (equal_sign == nullptr) {\n-    arg_len = strlen(argname);\n-  } else {\n-    arg_len = equal_sign - argname;\n-  }\n+  bool has_plus_minus;\n+  parse_argname(arg, &argname, &arg_len, &has_plus_minus);\n@@ -1242,1 +1270,3 @@\n-bool Arguments::add_property(const char* prop, PropertyWriteable writeable, PropertyInternal internal) {\n+void Arguments::get_key_value(const char* prop, const char** key, const char** value) {\n+  assert(key != nullptr, \"key should not be null\");\n+  assert(value != nullptr, \"value should not be null\");\n@@ -1244,2 +1274,0 @@\n-  const char* key;\n-  const char* value = \"\";\n@@ -1249,1 +1277,2 @@\n-    key = prop;\n+    *key = prop;\n+    *value = \"\";\n@@ -1257,1 +1286,1 @@\n-    key = tmp_key;\n+    *key = tmp_key;\n@@ -1259,1 +1288,1 @@\n-    value = &prop[key_len + 1];\n+    *value = &prop[key_len + 1];\n@@ -1261,0 +1290,7 @@\n+}\n+\n+bool Arguments::add_property(const char* prop, PropertyWriteable writeable, PropertyInternal internal) {\n+  const char* key = nullptr;\n+  const char* value = nullptr;\n+\n+  get_key_value(prop, &key, &value);\n@@ -2145,0 +2181,83 @@\n+bool Arguments::is_restore_option_set(const JavaVMInitArgs* args) {\n+  const char* tail;\n+  \/\/ iterate over arguments\n+  for (int index = 0; index < args->nOptions; index++) {\n+    const JavaVMOption* option = args->options + index;\n+    if (!match_option(option, \"-XX:CRaCRestoreFrom\", &tail)) {\n+      continue;\n+    }\n+    \/\/ ccstr is never set to an empty string by the parser so we should not\n+    \/\/ treat an empty string value as the option being set. If it ever becomes\n+    \/\/ ccstrlist or the parser changes, the value check will need to be removed.\n+    static_assert(std::is_same<ccstr, decltype(CRaCRestoreFrom)>(), \"expected ccstr\");\n+    const char* eq = strchr(tail, '=');\n+    if (eq != nullptr && eq[1] != '\\0') {\n+      return true; \/\/ the value is not an empty string\n+    }\n+  }\n+  return false;\n+}\n+\n+bool Arguments::parse_options_for_restore(const JavaVMInitArgs* args) {\n+  const char *tail = nullptr;\n+\n+  \/\/ iterate over arguments\n+  for (int index = 0; index < args->nOptions; index++) {\n+    bool is_absolute_path = false;  \/\/ for -agentpath vs -agentlib\n+\n+    const JavaVMOption* option = args->options + index;\n+\n+    if (match_option(option, \"-Djava.class.path\", &tail) ||\n+        match_option(option, \"-Dsun.java.launcher\", &tail)) {\n+      \/\/ These options are already set based on -cp (and aliases), -jar\n+      \/\/ or even inheriting the CLASSPATH env var; therefore it's too\n+      \/\/ late to prohibit explicitly setting them at this point.\n+    } else if (match_option(option, \"-D\", &tail)) {\n+      const char* key = nullptr;\n+      const char* value = nullptr;\n+\n+      get_key_value(tail, &key, &value);\n+\n+      if (strcmp(key, \"sun.java.crac_command\") == 0) {\n+        char *old_java_command = _java_command_crac;\n+        _java_command_crac = os::strdup_check_oom(value, mtArguments);\n+        if (old_java_command != nullptr) {\n+          os::free(old_java_command);\n+        }\n+      } else {\n+        add_property(tail);\n+      }\n+\n+      if (key != tail) { \/\/ key was copied\n+        FreeHeap(const_cast<char *>(key));\n+      }\n+    } else if (match_option(option, \"-XX:\", &tail)) { \/\/ -XX:xxxx\n+      if (!process_argument(tail, args->ignoreUnrecognized, JVMFlagOrigin::COMMAND_LINE)) {\n+        return false;\n+      }\n+      const char *argname;\n+      size_t arg_len;\n+      bool ignored_plus_minus;\n+      parse_argname(tail, &argname, &arg_len, &ignored_plus_minus);\n+      const JVMFlag* flag = JVMFlag::find_declared_flag((const char*)argname, arg_len);\n+      if (flag != nullptr) {\n+        if (!flag->is_restore_settable()) {\n+          jio_fprintf(defaultStream::error_stream(),\n+            \"Flag %.*s cannot be set during restore: %s\\n\", arg_len, argname, option->optionString);\n+          return false;\n+        }\n+        build_jvm_flags(tail);\n+      }\n+    }\n+  }\n+\n+  postcond(CRaCRestoreFrom != nullptr);\n+\n+  if (CRaCEngineOptions && strcmp(CRaCEngineOptions, \"help\") == 0) {\n+    crac::print_engine_info_and_exit(); \/\/ Does not return on success\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n@@ -2157,0 +2276,1 @@\n+        !match_option(option, \"-Dsun.java.crac_command\", &tail) &&\n@@ -2965,0 +3085,8 @@\n+  if (CRaCEngineOptions && strcmp(CRaCEngineOptions, \"help\") == 0) {\n+    crac::print_engine_info_and_exit(); \/\/ Does not return on success\n+    return JNI_ERR;\n+  }\n+  if (CRaCCheckpointTo && !crac::prepare_checkpoint()) {\n+    return JNI_ERR;\n+  }\n+\n@@ -3979,0 +4107,7 @@\n+\n+void Arguments::reset_for_crac_restore() {\n+  if (!FLAG_IS_DEFAULT(LogVMOutput)){\n+    FLAG_SET_DEFAULT(LogVMOutput, false);\n+    FLAG_SET_DEFAULT(LogFile, nullptr);\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":151,"deletions":16,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-\/\/ DIAGNOSTIC, EXPERIMENTAL, or MANAGEABLE. Currently extra_attrs can be used\n-\/\/ only with product\/product_pd flags.\n+\/\/ DIAGNOSTIC, EXPERIMENTAL, MANAGEABLE or RESTORE_SETTABLE. Currently\n+\/\/ extra_attrs can be used only with product\/product_pd flags.\n@@ -100,0 +100,3 @@\n+\/\/ RESTORE_SETTABLE are flags that can be set during restore from a snapshot.\n+\/\/    All MANAGEABLE flags are implicitly RESTORE_SETTABLE but\n+\/\/    RESTORE_SETTABLE are not MANAGEABLE.\n@@ -177,1 +180,2 @@\n-  product(bool, UnlockDiagnosticVMOptions, trueInDebug, DIAGNOSTIC,         \\\n+  product(bool, UnlockDiagnosticVMOptions, trueInDebug,                     \\\n+          DIAGNOSTIC | RESTORE_SETTABLE,                                    \\\n@@ -180,1 +184,2 @@\n-  product(bool, UnlockExperimentalVMOptions, false, EXPERIMENTAL,           \\\n+  product(bool, UnlockExperimentalVMOptions, false,                         \\\n+          EXPERIMENTAL | RESTORE_SETTABLE,                                  \\\n@@ -1023,1 +1028,1 @@\n-  product(bool, LogVMOutput, false, DIAGNOSTIC,                             \\\n+  product(bool, LogVMOutput, false, DIAGNOSTIC | RESTORE_SETTABLE,          \\\n@@ -1026,1 +1031,1 @@\n-  product(ccstr, LogFile, nullptr, DIAGNOSTIC,                              \\\n+  product(ccstr, LogFile, nullptr, DIAGNOSTIC | RESTORE_SETTABLE,           \\\n@@ -1942,1 +1947,1 @@\n-  JFR_ONLY(product(ccstr, StartFlightRecording, nullptr,                    \\\n+  JFR_ONLY(product(ccstr, StartFlightRecording, nullptr, RESTORE_SETTABLE,  \\\n@@ -1956,0 +1961,65 @@\n+  product(ccstr, CRaCCheckpointTo, nullptr, RESTORE_SETTABLE,               \\\n+        \"Path to checkpoint image directory\")                               \\\n+                                                                            \\\n+  product(ccstr, CRaCRestoreFrom, nullptr, RESTORE_SETTABLE,                \\\n+      \"Path to image for restore, replaces the initializing VM on success\") \\\n+                                                                            \\\n+  product(uint, CRaCMinPid, 128,                                            \\\n+      \"Mininal PID value for checkpoint'ed process\")                        \\\n+      range(1, UINT_MAX)                                                    \\\n+                                                                            \\\n+  product(bool, CRaCResetStartTime, true, DIAGNOSTIC | RESTORE_SETTABLE,    \\\n+      \"Reset JVM's start time and uptime on restore\")                       \\\n+                                                                            \\\n+  product_pd(ccstr, CRaCEngine, RESTORE_SETTABLE,                           \\\n+      \"Path or name of a program or a shared library implementing \"         \\\n+      \"checkpoint and restore. On restore this option applies only to \"     \\\n+      \"the restoring VM, i.e. the restored VM keeps the value it had \"      \\\n+      \"before the checkpoint.\")                                             \\\n+                                                                            \\\n+  product(ccstrlist, CRaCEngineOptions, nullptr, RESTORE_SETTABLE,          \\\n+      \"Options passed to CRaCEngine, in the form of 'key1=value,key2'. \"    \\\n+      \"The list of supported options is engine-dependent, use \"             \\\n+      \"'-XX:CRaCEngineOptions=help' to make the VM print the information \"  \\\n+      \"about the engine, including its supported options, and exit. On \"    \\\n+      \"restore this option applies only to the restoring VM, i.e. the \"     \\\n+      \"restored VM keeps the value it had before the checkpoint.\")          \\\n+                                                                            \\\n+  product(bool, CRaCIgnoreRestoreIfUnavailable, false, RESTORE_SETTABLE,    \\\n+      \"Ignore -XX:CRaCRestoreFrom and continue initialization if restore \"  \\\n+      \"is unavailable\")                                                     \\\n+                                                                            \\\n+  product(ccstr, CRaCIgnoredFileDescriptors, nullptr, RESTORE_SETTABLE,     \\\n+      \"Comma-separated list of file descriptor numbers or paths. \"          \\\n+      \"All file descriptors greater than 2 (stdin, stdout and stderr are \"  \\\n+      \"excluded automatically) not in this list are closed when the VM \"    \\\n+      \"is started.\")                                                        \\\n+                                                                            \\\n+  product_pd(ccstrlist, CRaCAllowedOpenFilePrefixes, \"List of path \"        \\\n+      \"prefixes for files that can be open during checkpoint; CRaC won't \"  \\\n+      \"error upon detecting these and will leave the handling up to C\/R \"   \\\n+      \"engine. This option applies only to files opened by native code; \"   \\\n+      \"for files opened by Java code use -Djdk.crac.resource-policies=...\") \\\n+                                                                            \\\n+  product(bool, CRaCAllowToSkipCheckpoint, false, DIAGNOSTIC,               \\\n+      \"Allow implementation to not call Checkpoint if helper not found\")    \\\n+                                                                            \\\n+  product(bool, CRaCHeapDumpOnCheckpointException, false, DIAGNOSTIC,       \\\n+      \"Dump heap on CheckpointException thrown because of CRaC \"            \\\n+      \"precondition failed\")                                                \\\n+                                                                            \\\n+  product(bool, CRaCPrintResourcesOnCheckpoint, false, DIAGNOSTIC,          \\\n+      \"Print resources to decide CheckpointException\")                      \\\n+                                                                            \\\n+  product(bool, CRaCTraceStartupTime, false, DIAGNOSTIC,                    \\\n+      \"Trace startup time\")                                                 \\\n+                                                                            \\\n+  product(bool, CRaCDoThrowCheckpointException, true, EXPERIMENTAL,         \\\n+      \"Throw CheckpointException if uncheckpointable resource handle found\")\\\n+                                                                            \\\n+  product(bool, CRaCPauseOnCheckpointError, false, DIAGNOSTIC,              \\\n+      \"Pauses the checkpoint when a problem is found on VM level.\")         \\\n+                                                                            \\\n+  product(size_t, CRaCMaxHeapSizeBeforeCheckpoint, 0, \"Maximum size \"       \\\n+      \"of heap before checkpoint. By default equals to -Xmx.\")              \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":77,"deletions":7,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -1251,0 +1251,1 @@\n+  void wakeup_sleep() { _SleepEvent->unpark(); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2309,0 +2309,9 @@\n+void os::cleanup_memory(char* addr, size_t bytes) {\n+  char* start = (char*)align_up(addr, os::vm_page_size());\n+  char* end = (char*)align_down(addr + bytes, os::vm_page_size());\n+  if (start < end) {\n+    os::uncommit_memory(start, end - start);\n+    os::commit_memory(start, end - start, false);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+  \/\/ Before restore returns the same value as elapsed_counter()\n+  static jlong elapsed_counter_since_restore();\n@@ -486,0 +488,2 @@\n+  static void   cleanup_memory(char* addr, size_t bytes);\n+\n@@ -607,0 +611,1 @@\n+  static void reset_cached_process_id();\n@@ -645,0 +650,2 @@\n+  static int execv(const char *path, const char *argv[]);\n+\n@@ -709,0 +716,3 @@\n+  static int mkdir(const char *pathname);\n+  static int rmdir(const char *pathname);\n+\n@@ -712,0 +722,2 @@\n+  static bool           is_path_absolute(const char *path);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1787,0 +1787,1 @@\n+  declare_constant(JVMFlagOrigin::CRAC_RESTORE)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,0 +71,4 @@\n+#if INCLUDE_SERVICES && !defined(_WINDOWS) && !defined(AIX)\n+#include \"attachListener_posix.hpp\"\n+#include \"posixAttachOperation.hpp\"\n+#endif \/\/ INCLUDE_SERVICES && !defined(_WINDOWS) && !defined(AIX)\n@@ -155,0 +159,2 @@\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<CheckpointDCmd>(full_export, true,false));\n+\n@@ -1053,0 +1059,26 @@\n+void CheckpointDCmd::execute(DCmdSource source, TRAPS) {\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_crac_mirror_Core(),\n+                                                 true, CHECK);\n+  JavaValue result(T_OBJECT);\n+  JavaCallArguments args;\n+  args.push_long((jlong)output());\n+  JavaCalls::call_static(&result, k,\n+                         vmSymbols::checkpointRestoreInternal_name(),\n+                         vmSymbols::checkpointRestoreInternal_signature(), &args, CHECK);\n+  oop str = result.get_oop();\n+  if (str != nullptr) {\n+    char* out = java_lang_String::as_utf8_string(str);\n+    if (out[0] != '\\0') {\n+      outputStream* stream = output();\n+#if INCLUDE_SERVICES && !defined(_WINDOWS) && !defined(AIX)\n+      assert(PosixAttachListener::get_current_op(), \"should exist\");\n+      if (PosixAttachListener::get_current_op()->is_effectively_completed()) {\n+        stream = tty;\n+      }\n+#endif \/\/ INCLUDE_SERVICES && !defined(_WINDOWS) && !defined(AIX)\n+      stream->print_cr(\"An exception during a checkpoint operation:\");\n+      stream->print(\"%s\", out);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -254,0 +254,4 @@\n+#ifndef INCLUDE_CPU_FEATURE_ACTIVE\n+#define INCLUDE_CPU_FEATURE_ACTIVE 1\n+#endif \/\/ INCLUDE_CPU_FEATURE_ACTIVE\n+\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -303,0 +303,1 @@\n+  int get_fd() { return fileno(_file); }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -370,0 +370,5 @@\n+     * @crac When the process is restored on another machine or if the machine\n+     * rebooted the value is updated based on wall-clock time difference,\n+     * resulting in a loss of accuracy when comparing timestamps obtained\n+     * before and after checkpoint.\n+     *\n@@ -630,0 +635,6 @@\n+     * @crac System properties can be updated on restore from a checkpoint.\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n+     * a resource and reload system properties in the\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n+     * updating the application.\n+     *\n@@ -664,0 +675,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n@@ -723,0 +735,3 @@\n+     * @crac System properties can be updated on restore from a checkpoint.\n+     * See {@linkplain #getProperties getProperties} for details.\n+     *\n@@ -744,0 +759,3 @@\n+     * @crac System properties can be updated on restore from a checkpoint.\n+     * See {@linkplain #getProperties getProperties} for details.\n+     *\n@@ -844,0 +862,6 @@\n+     * @crac Environment variables can be updated on restore from a checkpoint.\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n+     * a resource and reload environment variables in the\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n+     * updating the application.\n+     *\n@@ -851,0 +875,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n@@ -880,0 +905,6 @@\n+     * @crac Environment variables can be updated on restore from a checkpoint.\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n+     * a resource and reload the environment variables in the\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n+     * updating the application.\n+     *\n@@ -885,0 +916,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.Core;\n+import jdk.internal.crac.JDKResource;\n@@ -338,0 +342,10 @@\n+\n+            @Override\n+            public <T> Reference<? extends T> pollReferenceQueue(ReferenceQueue<T> queue, long timeout) throws InterruptedException {\n+                return queue.poll(timeout);\n+            }\n+\n+            @Override\n+            public void wakeupReferenceQueue(ReferenceQueue<?> queue) {\n+                queue.wakeup();\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -186,0 +186,17 @@\n+    Reference<? extends T> poll(long timeout) throws InterruptedException {\n+        synchronized (lock) {\n+            Reference<? extends T> r = poll0();\n+            if (r != null) return r;\n+            \/\/ any wake (including spurious) ends the wait\n+            \/\/noinspection ResultOfMethodCallIgnored\n+            lock.wait(timeout);\n+            return poll0();\n+        }\n+    }\n+\n+    void wakeup() {\n+        synchronized (lock) {\n+            lock.notifyAll();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.access.SharedSecrets;\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.crac.JDKSocketResource;\n@@ -36,0 +37,1 @@\n+import sun.nio.ch.Net;\n@@ -75,0 +77,40 @@\n+    @SuppressWarnings(\"unused\")\n+    private final JDKSocketResource resource = new JDKSocketResource(this) {\n+        @Override\n+        protected FileDescriptor getFD() {\n+            return fd;\n+        }\n+\n+        @Override\n+        protected SocketAddress localAddress() throws IOException {\n+            return Net.localAddress(fd);\n+        }\n+\n+        @Override\n+        protected SocketAddress remoteAddress() {\n+            return new InetSocketAddress(address, port);\n+        }\n+\n+        \/\/ We cannot override this in subclass because SocketImpl is public and resource factory method\n+        \/\/ would expose JDKSocketResource outside JDK.\n+        \/\/ We cannot expose any public overridable methods either in order to pass JCK.\n+        @Override\n+        protected boolean isListening() {\n+            return (SocketImpl.this instanceof NioSocketImpl) && ((NioSocketImpl) SocketImpl.this).isListening();\n+        }\n+\n+        @Override\n+        protected void closeBeforeCheckpoint() throws IOException {\n+            close();\n+        }\n+\n+        @Override\n+        protected void reopenAfterRestore() throws IOException {\n+            if (SocketImpl.this instanceof NioSocketImpl) {\n+                ((NioSocketImpl) SocketImpl.this).reopenAfterRestore();\n+            } else {\n+                throw new UnsupportedOperationException(\"Reopen not implemented\");\n+            }\n+        }\n+    };\n+\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketImpl.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+    private static JavaNioChannelsSpiAccess javaNioChannelsSpiAccess;\n@@ -272,0 +273,13 @@\n+    public static void setJavaNioChannelsSpiAccess(JavaNioChannelsSpiAccess a) {\n+        javaNioChannelsSpiAccess = a;\n+    }\n+\n+    public static JavaNioChannelsSpiAccess getJavaNioChannelsSpiAccess() {\n+        var access = javaNioChannelsSpiAccess;\n+        if (access == null) {\n+            ensureClassInitialized(java.nio.channels.spi.AbstractInterruptibleChannel.class);\n+            access = javaNioChannelsSpiAccess;\n+        }\n+        return access;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-\n@@ -179,0 +178,5 @@\n+    exports jdk.internal.crac to\n+        java.rmi,\n+        jdk.jfr,\n+        jdk.management.agent,\n+        jdk.sctp;\n@@ -410,0 +414,8 @@\n+    exports jdk.internal.crac.mirror to\n+        java.rmi,\n+        jdk.crac,\n+        jdk.jfr,\n+        jdk.management.agent;\n+\n+    exports jdk.internal.crac.mirror.impl to\n+        jdk.crac;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+\n+import jdk.internal.crac.JDKSocketResource;\n@@ -53,0 +55,1 @@\n+    private final JDKSocketResource resource;\n@@ -70,0 +73,3 @@\n+    \/\/ last backlog used for bind(...)\n+    private int backlog;\n+\n@@ -73,0 +79,40 @@\n+        this.resource = new JDKSocketResource(this) {\n+            @Override\n+            protected FileDescriptor getFD() {\n+                return fd;\n+            }\n+\n+            @Override\n+            protected SocketAddress localAddress() {\n+                return localAddress;\n+            }\n+\n+            @Override\n+            protected SocketAddress remoteAddress() {\n+                return null;\n+            }\n+\n+            @Override\n+            protected boolean isListening() {\n+                return true;\n+            }\n+\n+            @Override\n+            protected void closeBeforeCheckpoint() throws IOException {\n+                close();\n+            }\n+\n+            @Override\n+            protected void reopenAfterRestore() throws IOException {\n+                FileDescriptor newfd = Net.serverSocket();\n+                IOUtil.setfdVal(fd, IOUtil.fdVal(newfd));\n+                reopen();\n+                synchronized (stateLock) {\n+                    SocketAddress local = localAddress;\n+                    if (local != null) {\n+                        localAddress = null;\n+                        bind(local, backlog);\n+                    }\n+                }\n+            }\n+        };\n@@ -115,0 +161,13 @@\n+    private void reopen() throws IOException {\n+        closeLock.writeLock().lock();\n+        try {\n+            assert(closed);\n+            closed = false;\n+        } finally {\n+            closeLock.writeLock().unlock();\n+        }\n+        implReopen();\n+    }\n+\n+    protected abstract void implReopen() throws IOException;\n+\n@@ -161,1 +220,2 @@\n-                Net.listen(fd, backlog < 1 ? 50 : backlog);\n+                this.backlog = backlog < 1 ? 50 : backlog;\n+                Net.listen(fd, this.backlog);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+\n+import jdk.internal.crac.JDKSocketResource;\n@@ -54,0 +56,2 @@\n+    @SuppressWarnings(\"unused\")\n+    private final JDKSocketResource resource = new Resource();\n@@ -600,0 +604,31 @@\n+\n+    private class Resource extends JDKSocketResource {\n+        public Resource() {\n+            super(AsynchronousSocketChannelImpl.this);\n+        }\n+\n+        @Override\n+        protected FileDescriptor getFD() {\n+            return fd;\n+        }\n+\n+        @Override\n+        protected SocketAddress localAddress() {\n+            return localAddress;\n+        }\n+\n+        @Override\n+        protected SocketAddress remoteAddress() {\n+            return remoteAddress;\n+        }\n+\n+        @Override\n+        protected boolean isListening() {\n+            return false;\n+        }\n+\n+        @Override\n+        protected void closeBeforeCheckpoint() throws IOException {\n+            close();\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -126,0 +127,8 @@\n+    \/\/ last backlog used for listen() invocation\n+    private int backlog;\n+\n+    static {\n+        \/\/ trigger eager initialization\n+        new FileDispatcherImpl();\n+    }\n+\n@@ -446,0 +455,27 @@\n+    public boolean isListening() {\n+        return server;\n+    }\n+\n+    public void reopenAfterRestore() throws IOException {\n+        if (!server) {\n+            throw new UnsupportedOperationException(\"Reopen not implemented for non-server sockets\");\n+        }\n+        synchronized (stateLock) {\n+            FileDescriptor fd;\n+            fd = Net.serverSocket();\n+            Runnable closer = closerFor(fd);\n+            IOUtil.setfdVal(NioSocketImpl.this.fd, IOUtil.fdVal(fd));\n+            NioSocketImpl.this.cleaner = CleanerFactory.cleaner().register(NioSocketImpl.this, closer);\n+            state = ST_UNCONNECTED;\n+\n+            if (localport != 0) {\n+                int port = localport;\n+                localport = 0;\n+                bind(address, port);\n+            }\n+            if (backlog > 0) {\n+                Net.listen(fd, backlog);\n+            }\n+        }\n+    }\n+\n@@ -644,1 +680,2 @@\n-            Net.listen(fd, backlog < 1 ? 50 : backlog);\n+            this.backlog = backlog < 1 ? 50 : backlog;\n+            Net.listen(fd, this.backlog);\n@@ -1186,1 +1223,1 @@\n-    private static Runnable closerFor(FileDescriptor fd) {\n+    private static Runnable closerFor0(FileDescriptor fd) {\n@@ -1196,0 +1233,14 @@\n+    private static Runnable closerFor(FileDescriptor fd) {\n+\n+        \/\/ FIXME ensure FileDispatcherImpl's Resource is registered before the closer is used,\n+        \/\/ otherwise the closer during beforeCheckpoint may be the first one to access\n+        \/\/ FileDescriptor, and then Dispatcher Resource will be blocked for registration.\n+        try {\n+            MethodHandles.lookup().ensureInitialized(FileDispatcherImpl.class);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        return closerFor0(fd);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+import jdk.internal.access.JavaNioChannelsSpiAccess;\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.crac.JDKSocketResource;\n@@ -71,0 +74,1 @@\n+    private static final JavaNioChannelsSpiAccess SPI_ACCESS = SharedSecrets.getJavaNioChannelsSpiAccess();\n@@ -77,1 +81,3 @@\n-    private final int fdVal;\n+    private int fdVal;\n+    private final Resource resource = new Resource();\n+    private int backlog;\n@@ -299,0 +305,2 @@\n+            \/\/ Persisting the backlog since there's no way to query that before close\n+            this.backlog = backlog < 1 ? 50 : backlog;\n@@ -405,1 +413,0 @@\n-\n@@ -731,0 +738,55 @@\n+\n+    private class Resource extends JDKSocketResource {\n+        public Resource() {\n+            super(ServerSocketChannelImpl.this);\n+        }\n+\n+        @Override\n+        protected FileDescriptor getFD() {\n+            return fd;\n+        }\n+\n+        @Override\n+        protected SocketAddress localAddress() {\n+            return localAddress;\n+        }\n+\n+        @Override\n+        protected SocketAddress remoteAddress() {\n+            return null;\n+        }\n+\n+        @Override\n+        protected boolean isListening() {\n+            return true;\n+        }\n+\n+        @Override\n+        protected void closeBeforeCheckpoint() throws IOException {\n+            close();\n+        }\n+\n+        @Override\n+        protected void reopenAfterRestore() throws IOException {\n+            FileDescriptor newFd;\n+            if (family == UNIX) {\n+                newFd = UnixDomainSockets.socket();\n+            } else {\n+                newFd = Net.serverSocket(family);\n+            }\n+            \/\/ We could avoid making fdVal non-final and dup2(...) to the original\n+            \/\/ value but that could accidentally conflict with another FD created\n+            \/\/ during restore.\n+            fdVal = IOUtil.fdVal(newFd);\n+            IOUtil.setfdVal(fd, fdVal);\n+            synchronized (stateLock) {\n+                state = ST_INUSE;\n+                if (isUnixSocket()) {\n+                    localAddress = unixBind(localAddress, backlog);\n+                } else {\n+                    localAddress = netBind(localAddress, backlog);\n+                }\n+            }\n+            SPI_ACCESS.setChannelReopened(ServerSocketChannelImpl.this);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":64,"deletions":2,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.crac.Core;\n@@ -162,0 +163,7 @@\n+\n+    \/**\n+     * Called by the JVM when it is restored with a new -XX:StartFlightRecorder\n+     *\/\n+    static void requestStartAfterRestore() {\n+        Core.setStartFlightRecorder(JVM::startFlightRecorderAfterRestore);\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -119,0 +119,2 @@\n+# JDK-8310862 was closed but we're still seeing errors with the updated test\n+runtime\/ClassInitErrors\/TestStackOverflowDuringInit.java 8310862 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -531,0 +531,6 @@\n+# jdk_crac\n+\n+jdk\/crac\/LinkedCleanableRefTest.java                            8353064 generic-all\n+\n+############################################################################\n+\n","filename":"test\/jdk\/ProblemList.txt","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}