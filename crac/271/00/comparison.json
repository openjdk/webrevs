{"files":[{"patch":"@@ -549,0 +549,11 @@\n+\n+bool crac::random_bytes(u1 *dest, size_t length) {\n+  const char *urandom_file = \"\/dev\/urandom\";\n+  int fd = ::open(urandom_file, O_RDONLY);\n+  FDGuard guard(\"\/dev\/urandom\", fd);\n+  if (fd < 0 || !read_all(fd, urandom_file, reinterpret_cast<char *>(dest), length)) {\n+    log_error(crac)(\"Cannot get random bytes\");\n+    return false;\n+  }\n+  return true;\n+}\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -57,0 +57,16 @@\n+\n+bool crac::random_bytes(u1 *dest, size_t length) {\n+  \/\/ Dummy implementation\n+  unsigned int seed = static_cast<unsigned int>(os::javaTimeNanos());\n+  for (size_t i = 0; i < length; i += sizeof(int)) {\n+    int value = os::next_random(seed);\n+    seed = value;\n+    size_t to_copy = length - i;\n+    if (to_copy > sizeof(value)) {\n+      to_copy = sizeof(value);\n+    }\n+    ::memcpy(dest + i, &value, to_copy);\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -51,0 +51,15 @@\n+\n+bool crac::random_bytes(u1 *dest, size_t length) {\n+  \/\/ Dummy implementation\n+  unsigned int seed = static_cast<unsigned int>(os::javaTimeNanos());\n+  for (size_t i = 0; i < length; i += sizeof(int)) {\n+    int value = os::next_random(seed);\n+    seed = value;\n+    size_t to_copy = length - i;\n+    if (to_copy > sizeof(value)) {\n+      to_copy = sizeof(value);\n+    }\n+    ::memcpy(dest + i, &value, to_copy);\n+  }\n+  return true;\n+}\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -226,0 +226,5 @@\n+        u4 uuid[4];\n+        if (!random_bytes(reinterpret_cast<u1 *>(uuid), sizeof(uuid))) {\n+          log_error(crac)(\"Cannot generate random UUID\");\n+          return false;\n+        }\n@@ -228,2 +233,2 @@\n-        u4 time_mid_high = static_cast<u4>(os::random());\n-        u4 seq_and_node_low = static_cast<u4>(os::random());\n+        u4 time_mid_high = uuid[0];\n+        u4 seq_and_node_low = uuid[1];\n@@ -231,2 +236,2 @@\n-          static_cast<u4>(os::random()), time_mid_high >> 16, time_mid_high & 0xFFF,\n-          0x8000 | (seq_and_node_low & 0x3FFF), seq_and_node_low >> 16, static_cast<u4>(os::random())));\n+          uuid[2], time_mid_high >> 16, time_mid_high & 0xFFF,\n+          0x8000 | (seq_and_node_low & 0x3FFF), seq_and_node_low >> 16, uuid[3]));\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -84,0 +84,3 @@\n+\n+  \/\/ os::random() is not seeded, we need a better random source\n+  static bool random_bytes(u1 *data, size_t length);\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,3 +37,1 @@\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.TimeZone;\n+import java.util.*;\n@@ -91,0 +89,1 @@\n+        runCheckpoints(\"foo\/%u_%f_\", false);\n@@ -92,1 +91,1 @@\n-            AtomicInteger count = new AtomicInteger(0);\n+            Set<String> uuids = new HashSet<>();\n@@ -94,0 +93,1 @@\n+            Pattern p = Pattern.compile(\"(\\\\p{XDigit}{8}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{12})_\" + featuresPattern + \"_\");\n@@ -95,2 +95,2 @@\n-                count.incrementAndGet();\n-                if (!d.getFileName().toString().matches(\"\\\\p{XDigit}{8}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{12}_\" + featuresPattern + \"_\")) {\n+                Matcher matcher = p.matcher(d.getFileName().toString());\n+                if (!matcher.matches()) {\n@@ -100,0 +100,1 @@\n+                uuids.add(matcher.group(1));\n@@ -102,1 +103,1 @@\n-            assertEquals(count.intValue(), 2);\n+            assertEquals(uuids.size(), 4, \"UUIDs are not unique: \" + uuids);\n","filename":"test\/jdk\/jdk\/crac\/PathPatternTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"}]}