{"files":[{"patch":"@@ -416,132 +416,0 @@\n-static const crlib_extension_t *get_extension(const char *name, size_t size) {\n-  for (size_t i = 0; i < ARRAY_SIZE(extensions) - 1 \/* omit nullptr *\/; i++) {\n-    const crlib_extension_t *ext = extensions[i];\n-    if (strcmp(name, ext->name) == 0) {\n-      if (size <= ext->size) {\n-        return ext;\n-      }\n-      return nullptr;\n-    }\n-  }\n-  return nullptr;\n-}\n-\n-class Environment {\n-private:\n-  char **_env;\n-  size_t _length;\n-\n-public:\n-  explicit Environment(const char * const *env = get_environ()) {\n-    _length = 0;\n-    for (; env[_length] != nullptr; _length++) {}\n-\n-    \/\/ Not using new here because we cannot safely use realloc with it\n-    _env = static_cast<char**>(malloc((_length + 1) * sizeof(char *)));\n-    if (_env == nullptr) {\n-      return;\n-    }\n-\n-    for (size_t i = 0; i < _length; i++) {\n-      _env[i] = strdup(env[i]);\n-      if (_env[i] == nullptr) {\n-        for (size_t j = 0; j < i; i++) {\n-          free(_env[j]);\n-          free(_env);\n-          _env = nullptr;\n-        }\n-        assert(!is_initialized());\n-        return;\n-      }\n-    }\n-    _env[_length] = nullptr;\n-  }\n-\n-  ~Environment() {\n-    if (is_initialized()) {\n-      for (size_t i = 0; i < _length; i++) {\n-        free(_env[i]);\n-      }\n-      free(_env);\n-    }\n-  }\n-\n-  \/\/ Use this to check whether the constructor succeeded.\n-  bool is_initialized() const { return _env != nullptr; }\n-\n-  char **env() { return _env; }\n-\n-  bool append(const char *var, const char *value) {\n-    assert(is_initialized());\n-\n-    const size_t str_size = strlen(var) + strlen(\"=\") + strlen(value) + 1;\n-    char * const str = static_cast<char *>(malloc(sizeof(char) * str_size));\n-    if (str == nullptr) {\n-      fprintf(stderr, CREXEC \"out of memory\\n\");\n-      return false;\n-    }\n-    if (snprintf(str, str_size, \"%s=%s\", var, value) != static_cast<int>(str_size) - 1) {\n-      perror(CREXEC \"snprintf env var\");\n-      free(str);\n-      return false;\n-    }\n-\n-    {\n-      char ** const new_env = static_cast<char **>(realloc(_env, (_length + 2) * sizeof(char *)));\n-      if (new_env == nullptr) {\n-        fprintf(stderr, CREXEC \"out of memory\\n\");\n-        free(str);\n-        return false;\n-      }\n-      _env = new_env;\n-    }\n-\n-    _env[_length++] = str;\n-    _env[_length] = nullptr;\n-\n-    return true;\n-  }\n-\n-  bool add_criu_option(const char *opt) {\n-    constexpr char CRAC_CRIU_OPTS[] = \"CRAC_CRIU_OPTS\";\n-    constexpr size_t CRAC_CRIU_OPTS_LEN = ARRAY_SIZE(CRAC_CRIU_OPTS) - 1;\n-\n-    assert(is_initialized());\n-\n-    bool opts_found = false;\n-    size_t opts_index = 0;\n-    for (; _env[opts_index] != nullptr; opts_index++) {\n-      if (strncmp(_env[opts_index], CRAC_CRIU_OPTS, CRAC_CRIU_OPTS_LEN) == 0 &&\n-          _env[opts_index][CRAC_CRIU_OPTS_LEN] == '=') {\n-        opts_found = true;\n-        break;\n-      }\n-    }\n-\n-    if (!opts_found) {\n-      return append(CRAC_CRIU_OPTS, opt);\n-    }\n-\n-    if (strstr(_env[opts_index] + CRAC_CRIU_OPTS_LEN + 1, opt) != nullptr) {\n-      return true;\n-    }\n-\n-    const size_t new_opts_size = strlen(_env[opts_index]) + strlen(\" \") + strlen(opt) + 1;\n-    char * const new_opts = static_cast<char *>(malloc(new_opts_size * sizeof(char)));\n-    if (new_opts == nullptr) {\n-      fprintf(stderr, CREXEC \"out of memory\\n\");\n-      return false;\n-    }\n-    if (snprintf(new_opts, new_opts_size, \"%s %s\", _env[opts_index], opt) !=\n-          static_cast<int>(new_opts_size) - 1) {\n-      perror(CREXEC \"snprintf CRAC_CRIU_OPTS (append)\");\n-      free(new_opts);\n-      return false;\n-    }\n-    free(_env[opts_index]);\n-    _env[opts_index] = new_opts;\n-\n-    return true;\n-  }\n-};\n-\n@@ -578,1 +446,1 @@\n-    fprintf(stderr, CREXEC \"cannot write to %s: %s\\n\", fname, strerror(errno));\n+    fprintf(stderr, CREXEC \"cannot close %s: %s\\n\", fname, strerror(errno));\n@@ -707,0 +575,132 @@\n+static const crlib_extension_t *get_extension(const char *name, size_t size) {\n+  for (size_t i = 0; i < ARRAY_SIZE(extensions) - 1 \/* omit nullptr *\/; i++) {\n+    const crlib_extension_t *ext = extensions[i];\n+    if (strcmp(name, ext->name) == 0) {\n+      if (size <= ext->size) {\n+        return ext;\n+      }\n+      return nullptr;\n+    }\n+  }\n+  return nullptr;\n+}\n+\n+class Environment {\n+private:\n+  char **_env;\n+  size_t _length;\n+\n+public:\n+  explicit Environment(const char * const *env = get_environ()) {\n+    _length = 0;\n+    for (; env[_length] != nullptr; _length++) {}\n+\n+    \/\/ Not using new here because we cannot safely use realloc with it\n+    _env = static_cast<char**>(malloc((_length + 1) * sizeof(char *)));\n+    if (_env == nullptr) {\n+      return;\n+    }\n+\n+    for (size_t i = 0; i < _length; i++) {\n+      _env[i] = strdup(env[i]);\n+      if (_env[i] == nullptr) {\n+        for (size_t j = 0; j < i; i++) {\n+          free(_env[j]);\n+          free(_env);\n+          _env = nullptr;\n+        }\n+        assert(!is_initialized());\n+        return;\n+      }\n+    }\n+    _env[_length] = nullptr;\n+  }\n+\n+  ~Environment() {\n+    if (is_initialized()) {\n+      for (size_t i = 0; i < _length; i++) {\n+        free(_env[i]);\n+      }\n+      free(_env);\n+    }\n+  }\n+\n+  \/\/ Use this to check whether the constructor succeeded.\n+  bool is_initialized() const { return _env != nullptr; }\n+\n+  char **env() { return _env; }\n+\n+  bool append(const char *var, const char *value) {\n+    assert(is_initialized());\n+\n+    const size_t str_size = strlen(var) + strlen(\"=\") + strlen(value) + 1;\n+    char * const str = static_cast<char *>(malloc(sizeof(char) * str_size));\n+    if (str == nullptr) {\n+      fprintf(stderr, CREXEC \"out of memory\\n\");\n+      return false;\n+    }\n+    if (snprintf(str, str_size, \"%s=%s\", var, value) != static_cast<int>(str_size) - 1) {\n+      perror(CREXEC \"snprintf env var\");\n+      free(str);\n+      return false;\n+    }\n+\n+    {\n+      char ** const new_env = static_cast<char **>(realloc(_env, (_length + 2) * sizeof(char *)));\n+      if (new_env == nullptr) {\n+        fprintf(stderr, CREXEC \"out of memory\\n\");\n+        free(str);\n+        return false;\n+      }\n+      _env = new_env;\n+    }\n+\n+    _env[_length++] = str;\n+    _env[_length] = nullptr;\n+\n+    return true;\n+  }\n+\n+  bool add_criu_option(const char *opt) {\n+    constexpr char CRAC_CRIU_OPTS[] = \"CRAC_CRIU_OPTS\";\n+    constexpr size_t CRAC_CRIU_OPTS_LEN = ARRAY_SIZE(CRAC_CRIU_OPTS) - 1;\n+\n+    assert(is_initialized());\n+\n+    bool opts_found = false;\n+    size_t opts_index = 0;\n+    for (; _env[opts_index] != nullptr; opts_index++) {\n+      if (strncmp(_env[opts_index], CRAC_CRIU_OPTS, CRAC_CRIU_OPTS_LEN) == 0 &&\n+          _env[opts_index][CRAC_CRIU_OPTS_LEN] == '=') {\n+        opts_found = true;\n+        break;\n+      }\n+    }\n+\n+    if (!opts_found) {\n+      return append(CRAC_CRIU_OPTS, opt);\n+    }\n+\n+    if (strstr(_env[opts_index] + CRAC_CRIU_OPTS_LEN + 1, opt) != nullptr) {\n+      return true;\n+    }\n+\n+    const size_t new_opts_size = strlen(_env[opts_index]) + strlen(\" \") + strlen(opt) + 1;\n+    char * const new_opts = static_cast<char *>(malloc(new_opts_size * sizeof(char)));\n+    if (new_opts == nullptr) {\n+      fprintf(stderr, CREXEC \"out of memory\\n\");\n+      return false;\n+    }\n+    if (snprintf(new_opts, new_opts_size, \"%s %s\", _env[opts_index], opt) !=\n+          static_cast<int>(new_opts_size) - 1) {\n+      perror(CREXEC \"snprintf CRAC_CRIU_OPTS (append)\");\n+      free(new_opts);\n+      return false;\n+    }\n+    free(_env[opts_index]);\n+    _env[opts_index] = new_opts;\n+\n+    return true;\n+  }\n+};\n+\n","filename":"src\/java.base\/share\/native\/libcrexec\/crexec.cpp","additions":133,"deletions":133,"binary":false,"changes":266,"status":"modified"}]}