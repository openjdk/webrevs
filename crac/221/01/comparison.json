{"files":[{"patch":"@@ -61,7 +61,5 @@\n-\/\/ Timestamps recorded before checkpoint\n-jlong crac::checkpoint_millis;\n-jlong crac::checkpoint_nanos;\n-char crac::checkpoint_bootid[UUID_LENGTH];\n-\/\/ Value based on wall clock time difference that will guarantee monotonic\n-\/\/ System.nanoTime() close to actual wall-clock time difference.\n-jlong crac::javaTimeNanos_offset = 0;\n+char crac::_checkpoint_bootid[UUID_LENGTH];\n+jlong crac::_checkpoint_wallclock_seconds;\n+jlong crac::_checkpoint_wallclock_nanos;\n+jlong crac::_checkpoint_monotonic_nanos;\n+jlong crac::_javaTimeNanos_offset;\n@@ -633,4 +631,4 @@\n-  checkpoint_millis = os::javaTimeMillis();\n-  checkpoint_nanos = os::javaTimeNanos();\n-  memset(checkpoint_bootid, 0, UUID_LENGTH);\n-  read_bootid(checkpoint_bootid);\n+  os::javaTimeSystemUTC(_checkpoint_wallclock_seconds, _checkpoint_wallclock_nanos);\n+  _checkpoint_monotonic_nanos = os::javaTimeNanos();\n+  memset(_checkpoint_bootid, 0, UUID_LENGTH);\n+  read_bootid(_checkpoint_bootid);\n@@ -648,3 +646,8 @@\n-  if (!read_bootid(buf) || memcmp(buf, checkpoint_bootid, UUID_LENGTH) != 0) {\n-    assert(checkpoint_millis >= 0, \"Restore without a checkpoint?\");\n-    long diff_millis = os::javaTimeMillis() - checkpoint_millis;\n+  if (!read_bootid(buf) || memcmp(buf, _checkpoint_bootid, UUID_LENGTH) != 0) {\n+    jlong current_wallclock_seconds;\n+    jlong current_wallclock_nanos;\n+    os::javaTimeSystemUTC(current_wallclock_seconds, current_wallclock_nanos);\n+\n+    jlong diff_wallclock =\n+      (current_wallclock_seconds - _checkpoint_wallclock_seconds) * NANOSECS_PER_SEC +\n+      current_wallclock_nanos - _checkpoint_wallclock_nanos;\n@@ -652,2 +655,2 @@\n-    if (diff_millis < 0) {\n-      diff_millis = 0;\n+    if (diff_wallclock < 0) {\n+      diff_wallclock = 0;\n@@ -655,0 +658,1 @@\n+\n@@ -657,2 +661,2 @@\n-    javaTimeNanos_offset = 0;\n-    javaTimeNanos_offset = checkpoint_nanos - os::javaTimeNanos() + diff_millis * 1000000L;\n+    _javaTimeNanos_offset = 0;\n+    _javaTimeNanos_offset = _checkpoint_monotonic_nanos - os::javaTimeNanos() + diff_wallclock;\n@@ -661,1 +665,1 @@\n-    jlong diff = os::javaTimeNanos() - checkpoint_nanos;\n+    jlong diff = os::javaTimeNanos() - _checkpoint_monotonic_nanos;\n@@ -663,1 +667,1 @@\n-      javaTimeNanos_offset -= diff;\n+      _javaTimeNanos_offset -= diff;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    return javaTimeNanos_offset;\n+    return _javaTimeNanos_offset;\n@@ -61,5 +61,0 @@\n-  static jlong checkpoint_millis;\n-  static jlong checkpoint_nanos;\n-  static char checkpoint_bootid[UUID_LENGTH];\n-  static jlong javaTimeNanos_offset;\n-\n@@ -68,0 +63,9 @@\n+  static char _checkpoint_bootid[UUID_LENGTH];\n+  \/\/ Timestamps recorded before checkpoint.\n+  static jlong _checkpoint_wallclock_seconds; \/\/ Wall-clock time, full seconds\n+  static jlong _checkpoint_wallclock_nanos;   \/\/ Wall-clock time, nanoseconds remainder [0, 999999999]\n+  static jlong _checkpoint_monotonic_nanos;   \/\/ Monotonic time, nanoseconds\n+  \/\/ Value based on wall clock time difference that will guarantee monotonic\n+  \/\/ System.nanoTime() close to actual wall-clock time difference.\n+  static jlong _javaTimeNanos_offset;\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}