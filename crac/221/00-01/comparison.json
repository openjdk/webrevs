{"files":[{"patch":"@@ -61,8 +61,5 @@\n-\/\/ Timestamps recorded before checkpoint\n-jlong crac::checkpoint_wallclock_seconds; \/\/ Wall clock time, full seconds\n-jlong crac::checkpoint_wallclock_nanos;   \/\/ Wall clock time, nanoseconds remainder [0, 999999999]\n-jlong crac::checkpoint_monotonic_nanos;   \/\/ Monotonic time\n-char crac::checkpoint_bootid[UUID_LENGTH];\n-\/\/ Value based on wall clock time difference that will guarantee monotonic\n-\/\/ System.nanoTime() close to actual wall-clock time difference.\n-jlong crac::javaTimeNanos_offset = 0;\n+char crac::_checkpoint_bootid[UUID_LENGTH];\n+jlong crac::_checkpoint_wallclock_seconds;\n+jlong crac::_checkpoint_wallclock_nanos;\n+jlong crac::_checkpoint_monotonic_nanos;\n+jlong crac::_javaTimeNanos_offset;\n@@ -634,4 +631,4 @@\n-  os::javaTimeSystemUTC(checkpoint_wallclock_seconds, checkpoint_wallclock_nanos);\n-  checkpoint_monotonic_nanos = os::javaTimeNanos();\n-  memset(checkpoint_bootid, 0, UUID_LENGTH);\n-  read_bootid(checkpoint_bootid);\n+  os::javaTimeSystemUTC(_checkpoint_wallclock_seconds, _checkpoint_wallclock_nanos);\n+  _checkpoint_monotonic_nanos = os::javaTimeNanos();\n+  memset(_checkpoint_bootid, 0, UUID_LENGTH);\n+  read_bootid(_checkpoint_bootid);\n@@ -649,1 +646,1 @@\n-  if (!read_bootid(buf) || memcmp(buf, checkpoint_bootid, UUID_LENGTH) != 0) {\n+  if (!read_bootid(buf) || memcmp(buf, _checkpoint_bootid, UUID_LENGTH) != 0) {\n@@ -655,2 +652,2 @@\n-      (current_wallclock_seconds - checkpoint_wallclock_seconds) * NANOSECS_PER_SEC +\n-      current_wallclock_nanos - checkpoint_wallclock_nanos;\n+      (current_wallclock_seconds - _checkpoint_wallclock_seconds) * NANOSECS_PER_SEC +\n+      current_wallclock_nanos - _checkpoint_wallclock_nanos;\n@@ -664,2 +661,2 @@\n-    javaTimeNanos_offset = 0;\n-    javaTimeNanos_offset = checkpoint_monotonic_nanos - os::javaTimeNanos() + diff_wallclock;\n+    _javaTimeNanos_offset = 0;\n+    _javaTimeNanos_offset = _checkpoint_monotonic_nanos - os::javaTimeNanos() + diff_wallclock;\n@@ -668,1 +665,1 @@\n-    jlong diff = os::javaTimeNanos() - checkpoint_monotonic_nanos;\n+    jlong diff = os::javaTimeNanos() - _checkpoint_monotonic_nanos;\n@@ -670,1 +667,1 @@\n-      javaTimeNanos_offset -= diff;\n+      _javaTimeNanos_offset -= diff;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    return javaTimeNanos_offset;\n+    return _javaTimeNanos_offset;\n@@ -61,6 +61,0 @@\n-  static jlong checkpoint_wallclock_seconds;\n-  static jlong checkpoint_wallclock_nanos;\n-  static jlong checkpoint_monotonic_nanos;\n-  static char checkpoint_bootid[UUID_LENGTH];\n-  static jlong javaTimeNanos_offset;\n-\n@@ -69,0 +63,9 @@\n+  static char _checkpoint_bootid[UUID_LENGTH];\n+  \/\/ Timestamps recorded before checkpoint.\n+  static jlong _checkpoint_wallclock_seconds; \/\/ Wall-clock time, full seconds\n+  static jlong _checkpoint_wallclock_nanos;   \/\/ Wall-clock time, nanoseconds remainder [0, 999999999]\n+  static jlong _checkpoint_monotonic_nanos;   \/\/ Monotonic time, nanoseconds\n+  \/\/ Value based on wall clock time difference that will guarantee monotonic\n+  \/\/ System.nanoTime() close to actual wall-clock time difference.\n+  static jlong _javaTimeNanos_offset;\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}