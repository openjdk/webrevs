{"files":[{"patch":"@@ -2948,2 +2948,2 @@\n-  bool ignored_plus_minus;\n-  parse_argname(arg, &name, &name_len, &ignored_plus_minus);\n+  bool has_plus_minus;\n+  parse_argname(arg, &name, &name_len, &has_plus_minus);\n@@ -2966,0 +2966,1 @@\n+  assert(has_plus_minus == flag->is_bool(), \"sanity check\");\n@@ -2970,1 +2971,1 @@\n-    if (strncmp(name, flag->name(), name_len) == 0) {\n+    if (strcmp(flag->name(), name) == 0) {\n@@ -2973,6 +2974,8 @@\n-      const size_t real_tail_len = strlen(arg) + (strlen(flag->name()) - name_len);\n-      char* const real_tail = AllocateHeap(real_tail_len + 1, MemTag::mtArguments);\n-      const int ret = jio_snprintf(real_tail, real_tail_len + 1, \"%s%s\", flag->name(), arg + name_len);\n-      guarantee(ret >= 0 && checked_cast<size_t>(ret) == real_tail_len, \"snprintf failed: %i\", ret);\n-      build_jvm_restore_flags(real_tail);\n-      FreeHeap(real_tail);\n+      const size_t real_arg_len = strlen(arg) + (strlen(flag->name()) - name_len);\n+      char* const real_arg = AllocateHeap(real_arg_len + 1, MemTag::mtArguments);\n+      const int ret = has_plus_minus ?\n+        jio_snprintf(real_arg, real_arg_len + 1, \"%c%s\", arg[0], flag->name()) :\n+        jio_snprintf(real_arg, real_arg_len + 1, \"%s%s\", flag->name(), arg + name_len);\n+      guarantee(ret >= 0 && checked_cast<size_t>(ret) == real_arg_len, \"snprintf failed: %i\", ret);\n+      build_jvm_restore_flags(real_arg);\n+      FreeHeap(real_arg);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+        builder.vmOption(\"-XX:+UnlockExperimentalVMOptions\");\n@@ -77,0 +78,1 @@\n+        \/\/ TODO: once we have aliased restore-settable boolean options include them here\n@@ -82,0 +84,1 @@\n+        builder.vmOption(\"-XX:+UnlockExperimentalVMOptions\");\n@@ -100,3 +103,3 @@\n-            VMOption engine1 = bean.getVMOption(\"CRaCEngine\");\n-            assertEquals(\"criuengine\", engine1.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engine1.getOrigin());\n+            VMOption engine = bean.getVMOption(\"CRaCEngine\");\n+            assertEquals(\"criuengine\", engine.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, engine.getOrigin());\n@@ -104,3 +107,3 @@\n-            VMOption engineOptions1 = bean.getVMOption(\"CRaCEngineOptions\");\n-            assertEquals(\"args=-v1\", engineOptions1.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engineOptions1.getOrigin());\n+            VMOption engineOptions = bean.getVMOption(\"CRaCEngineOptions\");\n+            assertEquals(\"args=-v1\", engineOptions.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, engineOptions.getOrigin());\n@@ -108,3 +111,3 @@\n-            VMOption checkpointTo1 = bean.getVMOption(\"CRaCCheckpointTo\");\n-            assertEquals(\"cr\", checkpointTo1.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, checkpointTo1.getOrigin());\n+            VMOption checkpointTo = bean.getVMOption(\"CRaCCheckpointTo\");\n+            assertEquals(\"cr\", checkpointTo.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, checkpointTo.getOrigin());\n@@ -112,3 +115,3 @@\n-            VMOption restoreFrom1 = bean.getVMOption(\"CRaCRestoreFrom\");\n-            assertEquals(\"\", restoreFrom1.getValue());\n-            assertEquals(VMOption.Origin.DEFAULT, restoreFrom1.getOrigin());\n+            VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n+            assertEquals(\"off\", nmt.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, nmt.getOrigin());\n@@ -116,3 +119,7 @@\n-            VMOption nmt1 = bean.getVMOption(\"NativeMemoryTracking\");\n-            assertEquals(\"off\", nmt1.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, nmt1.getOrigin());\n+            VMOption restoreFrom = bean.getVMOption(\"CRaCRestoreFrom\");\n+            assertEquals(\"\", restoreFrom.getValue());\n+            assertEquals(VMOption.Origin.DEFAULT, restoreFrom.getOrigin());\n+\n+            VMOption unlockExperimentalOpts = bean.getVMOption(\"UnlockExperimentalVMOptions\");\n+            assertEquals(\"false\", unlockExperimentalOpts.getValue());\n+            assertEquals(VMOption.Origin.DEFAULT, unlockExperimentalOpts.getOrigin());\n@@ -129,3 +136,3 @@\n-            VMOption engine2 = bean.getVMOption(\"CRaCEngine\");\n-            assertEquals(\"criuengine\", engine2.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engine2.getOrigin());\n+            VMOption engine = bean.getVMOption(\"CRaCEngine\");\n+            assertEquals(\"criuengine\", engine.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, engine.getOrigin());\n@@ -133,3 +140,7 @@\n-            VMOption engineOptions2 = bean.getVMOption(\"CRaCEngineOptions\");\n-            assertEquals(\"args=-v1\", engineOptions2.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engineOptions2.getOrigin());\n+            VMOption engineOptions = bean.getVMOption(\"CRaCEngineOptions\");\n+            assertEquals(\"args=-v1\", engineOptions.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, engineOptions.getOrigin());\n+\n+            VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n+            assertEquals(\"off\", nmt.getValue());\n+            assertEquals(VMOption.Origin.VM_CREATION, nmt.getOrigin());\n@@ -139,3 +150,3 @@\n-            VMOption checkpointTo2 = bean.getVMOption(\"CRaCCheckpointTo\");\n-            assertEquals(\"another\", checkpointTo2.getValue());\n-            assertEquals(VMOption.Origin.OTHER, checkpointTo2.getOrigin());\n+            VMOption checkpointTo = bean.getVMOption(\"CRaCCheckpointTo\");\n+            assertEquals(\"another\", checkpointTo.getValue());\n+            assertEquals(VMOption.Origin.OTHER, checkpointTo.getOrigin());\n@@ -143,3 +154,3 @@\n-            VMOption restoreFrom2 = bean.getVMOption(\"CRaCRestoreFrom\");\n-            assertEquals(\"cr\", restoreFrom2.getValue());\n-            assertEquals(VMOption.Origin.OTHER, restoreFrom2.getOrigin());\n+            VMOption restoreFrom = bean.getVMOption(\"CRaCRestoreFrom\");\n+            assertEquals(\"cr\", restoreFrom.getValue());\n+            assertEquals(VMOption.Origin.OTHER, restoreFrom.getOrigin());\n@@ -151,3 +162,3 @@\n-            VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n-            assertEquals(\"off\", nmt.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, nmt.getOrigin());\n+            VMOption unlockExperimentalOpts = bean.getVMOption(\"UnlockExperimentalVMOptions\");\n+            assertEquals(\"true\", unlockExperimentalOpts.getValue());\n+            assertEquals(VMOption.Origin.OTHER, unlockExperimentalOpts.getOrigin());\n@@ -170,1 +181,2 @@\n-            \"CRaCIgnoredFileDescriptors=42,43\"\n+            \"CRaCIgnoredFileDescriptors=42,43\",\n+            \"+UnlockExperimentalVMOptions\"\n@@ -181,1 +193,2 @@\n-            \"-XX:CRaCIgnoredFileDescriptors=42,43\"\n+            \"-XX:CRaCIgnoredFileDescriptors=42,43\",\n+            \"-XX:+UnlockExperimentalVMOptions\"\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":45,"deletions":32,"binary":false,"changes":77,"status":"modified"}]}