{"files":[{"patch":"@@ -786,1 +786,5 @@\n-  uncommit_regions_if_necessary();\n+  if (should_cleanup_unused()) {\n+    cleanup_unused_regions(); \/\/ Includes uncommitting\n+  } else {\n+    uncommit_regions_if_necessary();\n+  }\n@@ -888,0 +892,20 @@\n+\/\/ The implementation of this should likely be OS-dependent. The current one is verified to have\n+\/\/ the desired effect on Linux, should probably also be on BSD. On others this may mostly be a\n+\/\/ useless work.\n+void G1CollectedHeap::cleanup_unused_regions() {\n+  assert_at_safepoint_on_vm_thread();\n+\n+  log_debug(gc, heap)(\"Cleanup unused regions\");\n+  const size_t orig_capacity = capacity();\n+\n+  \/\/ Uncommit all free regions\n+  precond(orig_capacity >= G1HeapRegion::GrainBytes);\n+  shrink(orig_capacity - G1HeapRegion::GrainBytes \/* leave one region to pass G1HeapRegionManager's asserts *\/);\n+  uncommit_regions(UINT_MAX);\n+  assert(capacity() <= orig_capacity, \"unexpectedly gained capacity: %zu -> %zu\", orig_capacity, capacity());\n+\n+  \/\/ Commit them back\n+  expand(orig_capacity - capacity());\n+  assert(capacity() >= orig_capacity, \"unexpectedly lost capacity: %zu -> %zu\", orig_capacity, capacity());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -572,0 +572,4 @@\n+  \/\/ Clear all free regions.\n+  \/\/ The aim is to have free regions committed but not be actually physically reserved on OS-level.\n+  void cleanup_unused_regions();\n+\n@@ -1033,4 +1037,0 @@\n-  virtual void finish_collection() override {\n-    G1UncommitRegionTask::finish_collection();\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -255,7 +255,0 @@\n-  \/\/ Handle do_cleanup_unused here to print correct capacity below.\n-  if (Universe::heap()->do_cleanup_unused()) {\n-    \/\/ HeapRegionManager::shrink_by do not allow remove all regions.\n-    \/\/ Make sure at least one is there.\n-    maximum_desired_capacity = G1HeapRegion::GrainBytes;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -135,8 +135,0 @@\n-\n-void G1UncommitRegionTask::finish_collection() {\n-  \/\/ If _instance is null G1 GC is either not in use or its collection has not yet been executed.\n-  if (_instance) {\n-    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-    g1h->uncommit_regions((uint)-1);\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-  static void finish_collection();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1148,1 +1148,1 @@\n-    if (heap->do_cleanup_unused()) {\n+    if (heap->should_cleanup_unused()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -407,1 +407,1 @@\n-  if (Universe::heap()->do_cleanup_unused()) {\n+  if (Universe::heap()->should_cleanup_unused()) {\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -381,4 +381,1 @@\n-  bool do_cleanup_unused() const { return _cleanup_unused; }\n-\n-  \/\/ G1UncommitRegionTask may be still pending after collect() has returned.\n-  virtual void finish_collection() {}\n+  bool should_cleanup_unused() const { return _cleanup_unused; }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1045,1 +1045,1 @@\n-  if (Universe::heap()->do_cleanup_unused()) {\n+  if (Universe::heap()->should_cleanup_unused()) {\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,0 @@\n-  Universe::heap()->finish_collection();\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}