{"files":[{"patch":"@@ -6024,0 +6024,1 @@\n+  os::record_time_before_checkpoint();\n@@ -6041,0 +6042,2 @@\n+  os::update_javaTimeNanos_offset();\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1413,1 +1413,1 @@\n-  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec);\n+  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec) + javaTimeNanos_offset;\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,7 @@\n+\/\/ Timestamps recorded before checkpoint\n+jlong os::checkpoint_millis = -1;\n+jlong os::checkpoint_nanos;\n+\/\/ Value based on wall clock time difference that will guarantee monotonic\n+\/\/ System.nanoTime() close to actual wall-clock time difference.\n+jlong os::javaTimeNanos_offset = 0;\n+\n@@ -2026,0 +2033,20 @@\n+\n+void os::record_time_before_checkpoint() {\n+  \/\/ If CRaC supports multiple checkpoint - restore - checkpoint - restore cycles\n+  \/\/ we want to record the timestamps only on the first checkpoint, but update\n+  \/\/ the offset after each restore\n+  if (checkpoint_millis < 0) {\n+      checkpoint_millis = javaTimeMillis();\n+      checkpoint_nanos = javaTimeNanos();\n+  }\n+}\n+\n+void os::update_javaTimeNanos_offset() {\n+  assert(checkpoint_millis >= 0, \"Restore without a checkpoint?\");\n+  long diff_millis = javaTimeMillis() - checkpoint_millis;\n+  \/\/ If the wall clock has gone backwards we won't add it to the offset\n+  if (diff_millis < 0) {\n+    diff_millis = 0;\n+  }\n+  javaTimeNanos_offset = checkpoint_nanos - javaTimeNanos() + diff_millis * 1000000L;\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -133,0 +133,4 @@\n+  static jlong checkpoint_millis;\n+  static jlong checkpoint_nanos;\n+  static jlong javaTimeNanos_offset;\n+\n@@ -202,0 +206,3 @@\n+  static void record_time_before_checkpoint();\n+  static void update_javaTimeNanos_offset();\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+\n@@ -2452,0 +2453,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-java\/lang\/System::nanoTime()\n+java\/lang\/System::nanoTime0()\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/conf\/exclude.methods.lst","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * @test NanoTimeTest\n+ * @requires (os.family == \"linux\")\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @build NanoTimeTest\n+ * @run driver jdk.test.lib.crac.CracTest 0\n+ * @run driver jdk.test.lib.crac.CracTest 86400\n+ * @run driver jdk.test.lib.crac.CracTest -86400\n+ *\/\n+public class NanoTimeTest implements CracTest {\n+    private static final String imageName = Common.imageName(\"system-nanotime\");\n+\n+    @CracTestArg\n+    long monotonicOffset;\n+\n+    public static void main(String[] args) throws Exception {\n+        CracTest.run(NanoTimeTest.class, args);\n+    }\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+        CracBuilder builder = new CracBuilder().inDockerImage(imageName).main(NanoTimeTest.class).args(CracTest.args());\n+        try {\n+            builder.doCheckpoint();\n+\n+            builder.startRestore(Arrays.asList(\"docker\", \"exec\", CracBuilder.CONTAINER_NAME,\n+                    \"unshare\", \"--fork\", \"--time\", \"--boottime\", \"86400\", \"--monotonic\", String.valueOf(monotonicOffset),\n+                    CracBuilder.DOCKER_JAVA)).waitForSuccess();\n+        } finally {\n+            builder.ensureContainerKilled();\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        System.out.println(\"Expected offset: \" + monotonicOffset);\n+        \/\/ We use uptime to assert that changing the clock worked\n+        long boottimeBefore = readSystemUptime();\n+\n+        long before = System.nanoTime();\n+        Core.checkpointRestore();\n+        long after = System.nanoTime();\n+        System.out.println(\"Before: \" + before);\n+        System.out.println(\"After: \" + after);\n+        if (after < before) {\n+            throw new AssertionError(\"After < Before\");\n+        } else if (after > before + TimeUnit.HOURS.toNanos(1)) {\n+            \/\/ Even though we have shifted the monotic offset by a day the difference\n+            \/\/ is adjusted by difference between wall clock time before and after;\n+            \/\/ the difference in monotonic time is considered \"random\"\n+            throw new AssertionError(\"After too late\");\n+        }\n+\n+        long boottimeAfter = readSystemUptime();\n+        if (boottimeAfter < boottimeBefore + 86_400_000) {\n+            throw new AssertionError(\"Boottime was not changed\");\n+        }\n+        RuntimeMXBean runtimeMX = ManagementFactory.getRuntimeMXBean();\n+        if (runtimeMX.getUptime() < 0) {\n+            throw new AssertionError(\"VM Uptime is negative!\");\n+        }\n+    }\n+\n+    private long readSystemUptime() throws IOException {\n+        String uptimeStr = Files.readString(Path.of(\"\/proc\/uptime\"));\n+        String[] parts = uptimeStr.split(\" \");\n+        return (long)(Double.parseDouble(parts[0]) * 1000);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}