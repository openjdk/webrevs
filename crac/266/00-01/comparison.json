{"files":[{"patch":"@@ -67,1 +67,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -69,2 +72,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -46,2 +49,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,1 +56,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -58,2 +61,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -310,1 +310,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -312,2 +315,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -417,1 +417,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -419,2 +422,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -915,2 +915,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data);\n-  static bool ignore_cpu_features() {\n+  static bool ignore_cpu_features(bool is_checkpoint) {\n@@ -919,1 +918,2 @@\n-    return _ignore_glibc_not_using;\n+    \/\/ IgnoreCPUFeatures is ignored on checkpoint\n+    return _ignore_glibc_not_using || (!is_checkpoint && IgnoreCPUFeatures);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,4 @@\n-  struct VM_Features {};\n+  struct VM_Features {\n+    int print_numbers(char *buf_orig, size_t buflen) const { return 0; }\n+    static size_t print_buffer_length() { return 0; }\n+  };\n@@ -37,2 +40,1 @@\n-  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n-  static bool ignore_cpu_features() { return true; }\n+  static bool ignore_cpu_features(bool is_checkpoint) { return true; }\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  if (!VM_Version::ignore_cpu_features()) {\n+  if (!VM_Version::ignore_cpu_features(true)) {\n@@ -526,8 +526,2 @@\n-  \/\/ skip the check here (or prevent storing the features in the image).\n-#ifdef __x86_64__\n-  \/\/ TODO: Remove IgnoreCPUFeatures completely, or make it at-least platform-independent\n-  bool skip_check = IgnoreCPUFeatures;\n-#else\n-  bool skip_check = true;\n-#endif\n-  if (!VM_Version::ignore_cpu_features() && !skip_check) {\n+  \/\/ skip the check here.\n+  if (!VM_Version::ignore_cpu_features(false)) {\n@@ -589,1 +583,0 @@\n-#ifdef __x86_64__\n@@ -596,1 +589,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-   char fname[PATH_MAX];\n+  char fname[PATH_MAX];\n@@ -59,1 +59,1 @@\n-        fprintf(f, LABEL_PREFIX \"%s=%s\\n\", tag.name, static_cast<const char *>(tag.data));\n+      fprintf(f, LABEL_PREFIX \"%s=%s\\n\", tag.name, static_cast<const char *>(tag.data));\n@@ -61,6 +61,6 @@\n-        fprintf(f, BITMAP_PREFIX \"%s=\", tag.name);\n-        const unsigned char *bytes = static_cast<const unsigned char *>(tag.data);\n-        for (const unsigned char *end = bytes + tag.data_length; bytes < end; bytes++) {\n-            fprintf(f, \"%02x\", *bytes);\n-        }\n-        fputc('\\n', f);\n+      fprintf(f, BITMAP_PREFIX \"%s=\", tag.name);\n+      const unsigned char *bytes = static_cast<const unsigned char *>(tag.data);\n+      for (const unsigned char *end = bytes + tag.data_length; bytes < end; bytes++) {\n+        fprintf(f, \"%02x\", *bytes);\n+      }\n+      fputc('\\n', f);\n@@ -77,8 +77,8 @@\n-    if (c >= '0' && c <= '9') {\n-        return c - '0';\n-    } else if (c >= 'a' && c <= 'f') {\n-        return c - 'a' + 10;\n-    } else {\n-        *err = true;\n-        return 0;\n-    }\n+  if (c >= '0' && c <= '9') {\n+    return c - '0';\n+  } else if (c >= 'a' && c <= 'f') {\n+    return c - 'a' + 10;\n+  } else {\n+    *err = true;\n+    return 0;\n+  }\n@@ -130,5 +130,5 @@\n-    fprintf(stderr, CREXEC \"\\t%s\", name);\n-    for (size_t i = 0; i < length; ++i) {\n-        fprintf(stderr, \"%02x \", data[i]);\n-    }\n-    fputc('\\n', stderr);\n+  fprintf(stderr, CREXEC \"\\t%s\", name);\n+  for (size_t i = 0; i < length; ++i) {\n+    fprintf(stderr, \"%02x \", data[i]);\n+  }\n+  fputc('\\n', stderr);\n@@ -155,1 +155,1 @@\n-      Tag& t = tags.add({\n+      tags.add({\n@@ -161,1 +161,0 @@\n-      assert(t.data_length == strlen(eq + 1) + 1);\n@@ -198,1 +197,1 @@\n-  delete keys;\n+  delete[] keys;\n","filename":"src\/java.base\/share\/native\/libcrexec\/image_constraints.cpp","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"}]}