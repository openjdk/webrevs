{"files":[{"patch":"@@ -59,0 +59,1 @@\n+unsigned int crac::_generation = 1;\n@@ -105,0 +106,5 @@\n+  \/\/ If this is a second checkpoint we should use a clear configuration\n+  if (_generation != 0 && !_engine->reset_conf()) {\n+    return JVM_CHECKPOINT_ERROR;\n+  }\n+\n@@ -111,2 +117,1 @@\n-  if (restore_start_time() != -1 && \/\/ A way to detect we've restored at least once\n-      !_engine->configure_image_location(CRaCCheckpointTo)) {\n+  if (_generation != 0 && !_engine->configure_image_location(CRaCCheckpointTo)) {\n@@ -278,0 +283,1 @@\n+  crac::_generation++;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+  static unsigned int _generation;\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -279,1 +279,0 @@\n-  char exec_path[JVM_MAXPATHLEN] = \"\\0\";\n@@ -281,1 +280,1 @@\n-    strcpy(exec_path, path); \/\/ Save to later pass it to crexec\n+    _exec_path = os::strdup_check_oom(path); \/\/ Save to later pass it to crexec\n@@ -322,2 +321,1 @@\n-  const char *exec_location = exec_path[0] != '\\0' ? exec_path : nullptr;\n-  crlib_conf_t * const conf = create_conf(*api, image_location, exec_location);\n+  crlib_conf_t * const conf = create_conf(*api, image_location, _exec_path);\n@@ -335,0 +333,1 @@\n+  os::free(_exec_path);\n@@ -341,0 +340,6 @@\n+bool CracEngine::reset_conf() {\n+  _api->destroy_conf(_conf);\n+  _conf = create_conf(*_api, nullptr, _exec_path);\n+  return _conf != nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-  \/\/ Operations supported by all engines\n+  \/\/ Reinitialize configuration before checkpoint\n+  bool reset_conf();\n@@ -53,0 +54,1 @@\n+  \/\/ Operations supported by all engines\n@@ -79,0 +81,2 @@\n+  char *_exec_path = nullptr;\n+\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,60 @@\n+bool ImageConstraints::set_label(const char *name, const char *value) {\n+  if (check_tag(name)) {\n+    fprintf(stderr, CREXEC \"Label %s is already set\\n\", name);\n+    return false;\n+  }\n+  size_t value_length = strlen(value) + 1;\n+  if (strlen(name) >= _max_name_length || value_length >= _max_value_length) {\n+    fprintf(stderr, CREXEC \"Label %s=%s is too long\\n\", name, value);\n+    return false;\n+  }\n+  char *name_copy = strdup(name);\n+  if (name_copy == nullptr) {\n+    fprintf(stderr, CREXEC \"out of memory\\n\");\n+    return false;\n+  }\n+  const char *value_copy = strdup(value);\n+  if (value_copy == nullptr) {\n+    fprintf(stderr, CREXEC \"out of memory\\n\");\n+    free(name_copy);\n+    return false;\n+  }\n+  _tags.add({\n+    .type = LABEL,\n+    .name = name_copy,\n+    .data = value_copy,\n+    .data_length = value_length,\n+  });\n+  return true;\n+}\n+\n+bool ImageConstraints::set_bitmap(const char *name, const unsigned char *value, size_t length_bytes) {\n+  if (check_tag(name)) {\n+      fprintf(stderr, CREXEC \"Bitmap %s is already set\\n\", name);\n+      return false;\n+  }\n+  if (strlen(name) >= _max_name_length || length_bytes >= _max_value_length) {\n+      fprintf(stderr, CREXEC \"Bitmap %s=(%zu bytes) is too long\\n\", name, length_bytes);\n+      return false;\n+  }\n+  char *name_copy = strdup(name);\n+  if (name_copy == nullptr) {\n+    fprintf(stderr, CREXEC \"out of memory\\n\");\n+    return false;\n+  }\n+  void *bitmap_copy = malloc(length_bytes);\n+  if (bitmap_copy == nullptr) {\n+    fprintf(stderr, CREXEC \"out of memory\\n\");\n+    free(name_copy);\n+    return false;\n+  }\n+  memcpy(bitmap_copy, value, length_bytes);\n+  _tags.add({\n+    .type = BITMAP,\n+    .name = name_copy,\n+    .data = (const unsigned char *) bitmap_copy,\n+    .data_length = length_bytes,\n+  });\n+  return true;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libcrexec\/image_constraints.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -106,34 +106,2 @@\n-  bool set_label(const char *name, const char *value) {\n-    if (check_tag(name)) {\n-      return false;\n-    }\n-    size_t value_length = strlen(value) + 1;\n-    if (strlen(name) >= _max_name_length || value_length >= _max_value_length) {\n-      return false;\n-    }\n-    _tags.add({\n-      .type = LABEL,\n-      .name = strdup(name),\n-      .data = strdup(value),\n-      .data_length = value_length,\n-    });\n-    return true;\n-  }\n-\n-  bool set_bitmap(const char *name, const unsigned char *value, size_t length_bytes) {\n-    if (check_tag(name)) {\n-        return false;\n-    }\n-    if (strlen(name) >= _max_name_length || length_bytes >= _max_value_length) {\n-        return false;\n-    }\n-    void *copy = malloc(length_bytes);\n-    memcpy(copy, value, length_bytes);\n-    _tags.add({\n-      .type = BITMAP,\n-      .name = strdup(name),\n-      .data = (const unsigned char *) copy,\n-      .data_length = length_bytes,\n-    });\n-    return true;\n-  }\n+  bool set_label(const char *name, const char *value);\n+  bool set_bitmap(const char *name, const unsigned char *value, size_t length_bytes);\n","filename":"src\/java.base\/share\/native\/libcrexec\/image_constraints.hpp","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"}]}