{"files":[{"patch":"@@ -96,0 +96,1 @@\n+        \/\/ We cannot expose any public overridable methods either in order to pass JCK.\n@@ -98,1 +99,1 @@\n-            return SocketImpl.this.isListening();\n+            return (SocketImpl.this instanceof NioSocketImpl) && ((NioSocketImpl) SocketImpl.this).isListening();\n@@ -108,1 +109,5 @@\n-            SocketImpl.this.reopenAfterRestore();\n+            if (SocketImpl.this instanceof NioSocketImpl) {\n+                ((NioSocketImpl) SocketImpl.this).reopenAfterRestore();\n+            } else {\n+                throw new UnsupportedOperationException(\"Reopen not implemented\");\n+            }\n@@ -112,16 +117,0 @@\n-    \/**\n-     * Is this socket listening (server)?\n-     * @return True if listening\n-     *\/\n-    protected boolean isListening() {\n-        return false;\n-    }\n-\n-    \/**\n-     * Used only by CRaC\n-     * @throws IOException When cannot be reopened\n-     *\/\n-    protected void reopenAfterRestore() throws IOException {\n-        throw new UnsupportedOperationException(\"Reopen not implemented\");\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketImpl.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.access.JavaNioChannelsSpiAccess;\n@@ -95,0 +96,9 @@\n+    static {\n+        SharedSecrets.setJavaNioChannelsSpiAccess(new JavaNioChannelsSpiAccess() {\n+            @Override\n+            public void setChannelReopened(AbstractInterruptibleChannel channel) {\n+                channel.setReopened();\n+            }\n+        });\n+    }\n+\n@@ -136,1 +146,1 @@\n-    protected final void setReopened() {\n+    private void setReopened() {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractInterruptibleChannel.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+package jdk.internal.access;\n+\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+\n+public interface JavaNioChannelsSpiAccess {\n+    void setChannelReopened(AbstractInterruptibleChannel channel);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioChannelsSpiAccess.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -83,0 +83,1 @@\n+    private static JavaNioChannelsSpiAccess javaNioChannelsSpiAccess;\n@@ -273,0 +274,13 @@\n+    public static void setJavaNioChannelsSpiAccess(JavaNioChannelsSpiAccess a) {\n+        javaNioChannelsSpiAccess = a;\n+    }\n+\n+    public static JavaNioChannelsSpiAccess getJavaNioChannelsSpiAccess() {\n+        var access = javaNioChannelsSpiAccess;\n+        if (access == null) {\n+            ensureClassInitialized(java.nio.channels.spi.AbstractInterruptibleChannel.class);\n+            access = javaNioChannelsSpiAccess;\n+        }\n+        return access;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -457,2 +457,1 @@\n-    @Override\n-    protected boolean isListening() {\n+    public boolean isListening() {\n@@ -462,2 +461,1 @@\n-    @Override\n-    protected void reopenAfterRestore() throws IOException {\n+    public void reopenAfterRestore() throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+import jdk.internal.access.JavaNioChannelsSpiAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -72,0 +74,1 @@\n+    private static final JavaNioChannelsSpiAccess SPI_ACCESS = SharedSecrets.getJavaNioChannelsSpiAccess();\n@@ -795,1 +798,1 @@\n-            setReopened();\n+            SPI_ACCESS.setChannelReopened(ServerSocketChannelImpl.this);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}