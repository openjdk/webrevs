{"files":[{"patch":"@@ -28,3 +28,8 @@\n-            \/\/ On Windows, path with forward slashes starting with '\/' is an accepted classpath\n-            \/\/ element, even though it might seem as invalid and parsing in Path.of(...) would fail.\n-            CLASSPATH_ENTRIES[i] = new File(items[i]).toPath();\n+            try {\n+                \/\/ On Windows, path with forward slashes starting with '\/' is an accepted classpath\n+                \/\/ element, even though it might seem as invalid and parsing in Path.of(...) would fail.\n+                CLASSPATH_ENTRIES[i] = new File(items[i]).toPath();\n+            } catch (Exception e) {\n+                \/\/ Ignore any exception parsing the path: URLClassPath.toFileURL() ignores IOExceptions\n+                \/\/ as well, here we might get InvalidPathException\n+            }\n@@ -59,1 +64,1 @@\n-                if (Files.isSameFile(p, entry)) {\n+                if (entry != null && Files.isSameFile(p, entry)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFileResource.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.crac.Core;\n@@ -25,0 +26,3 @@\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracTest;\n@@ -26,3 +30,3 @@\n-import java.io.IOException;\n-\n-import static jdk.test.lib.Asserts.assertEquals;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.util.Arrays;\n@@ -33,1 +37,3 @@\n- * @run driver ClasspathParseTest\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @build ClasspathParseTest\n+ * @run driver jdk.test.lib.crac.CracTest\n@@ -35,1 +41,1 @@\n-public class ClasspathParseTest {\n+public class ClasspathParseTest implements CracTest {\n@@ -38,11 +44,25 @@\n-    public static void main(String[] args) throws IOException, InterruptedException {\n-        if (args.length == 0) {\n-            String classpath = ClasspathParseTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n-            int exit = new ProcessBuilder().command(JAVA, \"-cp\", classpath, ClasspathParseTest.class.getName(), \"ignored\")\n-                    .inheritIO().start().waitFor();\n-            assertEquals(0, exit);\n-        } else {\n-            \/\/ assert that code source path started with \"\/\" as we expect (even on Windows)\n-            if (!System.getProperty(\"java.class.path\").startsWith(\"\/\")) {\n-                System.exit(2);\n-            }\n+    @Override\n+    public void test() throws Exception {\n+        String someJar = Arrays.stream(System.getProperty(\"java.class.path\").split(File.pathSeparator))\n+                .filter(f -> f.endsWith(\".jar\")).findAny()\n+                .orElseThrow(() -> new AssertionError(\"there should be some jar on classpath\"));\n+        new CracBuilder()\n+                .engine(CracEngine.SIMULATE)\n+                .printResources(true)\n+                .classpathEntry(ClasspathParseTest.class.getProtectionDomain().getCodeSource().getLocation().getPath())\n+                .classpathEntry(\"file:\/C:\\\\some\\\\invalid\/path\")\n+                .classpathEntry(someJar)\n+                .startCheckpoint().waitForSuccess();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        \/\/ assert that code source path started with \"\/\" as we expect (even on Windows)\n+        String cp = System.getProperty(\"java.class.path\");\n+        if (!cp.startsWith(\"\/\")) {\n+            System.exit(2);\n+        }\n+        String someJar = Arrays.stream(cp.split(File.pathSeparator)).filter(f -> f.endsWith(\".jar\")).findAny()\n+                .orElseThrow(() -> new AssertionError(\"jar file should be provided on classpath\"));\n+        try (var fis = new FileInputStream(someJar)) {\n+            Core.checkpointRestore();\n@@ -52,0 +72,1 @@\n+\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/ClasspathParseTest.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"}]}