{"files":[{"patch":"@@ -186,5 +186,5 @@\n-      \"use -XX:CPUFeatures=0xnumber with -XX:CRaCCheckpointTo when you \"    \\\n-      \"get an error during -XX:CRaCRestoreFrom on a different machine; \"    \\\n-      \"-XX:CPUFeatures=native is the default; \"                             \\\n-      \"-XX:CPUFeatures=ignore will disable the CPU features check; \"        \\\n-      \"-XX:CPUFeatures=generic is compatible but not as slow as 0\")         \\\n+          \"use -XX:CPUFeatures=0xnumber with -XX:CRaCCheckpointTo when you \"\\\n+          \"get an error during -XX:CRaCRestoreFrom on a different machine; \"\\\n+          \"-XX:CPUFeatures=native is the default; \"                         \\\n+          \"-XX:CPUFeatures=ignore will disable the CPU features check; \"    \\\n+          \"-XX:CPUFeatures=generic is compatible but not as slow as 0\")     \\\n@@ -193,1 +193,1 @@\n-      \"to be possibly used for the -XX:CPUFeatures=0xnumber option\")        \\\n+          \"to be possibly used for the -XX:CPUFeatures=0xnumber option\")    \\\n@@ -196,2 +196,2 @@\n-      \"Do not refuse to run after -XX:CRaCRestoreFrom finds out some \"      \\\n-      \"CPU features are missing\")                                           \\\n+          \"Do not refuse to run after -XX:CRaCRestoreFrom finds out some \"  \\\n+          \"CPU features are missing\")                                       \\\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-  product(bool, CRaCCPUCountInit, false, \"Reinitialize number of CPUs \" \\\n-      \"during -XX:CRaCRestoreFrom\")                                     \\\n+  product(bool, CRaCCPUCountInit, false, \"Reinitialize the recorded \"   \\\n+          \"number of CPUs on restore\")                                  \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  _max_available_regions = (uint) (CRaCMaxHeapSizeBeforeCheckpoint == 0 ? _regions.length() :\n+  _max_available_regions = (uint) (FLAG_IS_DEFAULT(CRaCMaxHeapSizeBeforeCheckpoint) ? _regions.length() :\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,2 +97,2 @@\n-  assert(CRaCMaxHeapSizeBeforeCheckpoint == 0 || CRaCMaxHeapSizeBeforeCheckpoint >= InitialHeapSize, \"Incompatible initial and maximum heap size before checkpoint\");\n-  assert(CRaCMaxHeapSizeBeforeCheckpoint == 0 || CRaCMaxHeapSizeBeforeCheckpoint <= MaxHeapSize, \"Incompatible initial and maximum heap size before checkpoint\");\n+  assert(FLAG_IS_DEFAULT(CRaCMaxHeapSizeBeforeCheckpoint) || CRaCMaxHeapSizeBeforeCheckpoint >= InitialHeapSize, \"Incompatible initial and maximum heap size before checkpoint\");\n+  assert(FLAG_IS_DEFAULT(CRaCMaxHeapSizeBeforeCheckpoint) || CRaCMaxHeapSizeBeforeCheckpoint <= MaxHeapSize, \"Incompatible initial and maximum heap size before checkpoint\");\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -580,0 +580,2 @@\n+  { \"CRaCAllowToSkipCheckpoint\",    JDK_Version::jdk(25), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRaCDoThrowCheckpointException\", JDK_Version::undefined(), JDK_Version::jdk(25), JDK_Version::undefined() },\n@@ -594,1 +596,1 @@\n-  { \"CRAllowToSkipCheckpoint\",         \"CRaCAllowToSkipCheckpoint \"},\n+  { \"CRAllowToSkipCheckpoint\",         \"CRaCSkipCheckpoint\"},\n@@ -600,0 +602,1 @@\n+  { \"CRaCAllowToSkipCheckpoint\",       \"CRaCSkipCheckpoint\" },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -255,3 +255,1 @@\n-  if (!ok && CRaCDoThrowCheckpointException) {\n-    return;\n-  } else if (_dry_run) {\n+  if (!ok || _dry_run) {\n@@ -267,1 +265,1 @@\n-  if (CRaCAllowToSkipCheckpoint) {\n+  if (CRaCSkipCheckpoint) {\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1962,1 +1962,4 @@\n-        \"Path to checkpoint image directory\")                               \\\n+          \"Path where the checkpoint image should be placed. Currently an \" \\\n+          \"image is a directory, the directory will be created if it does \" \\\n+          \"not exist (parent directories are not created) or overwritten \"  \\\n+          \"otherwise.\")                                                     \\\n@@ -1965,1 +1968,1 @@\n-      \"Path to image for restore, replaces the initializing VM on success\") \\\n+          \"Path to the image to restore from.\")                             \\\n@@ -1968,2 +1971,2 @@\n-      \"Mininal PID value for checkpoint'ed process\")                        \\\n-      range(1, UINT_MAX)                                                    \\\n+          \"Mininal PID value for checkpointed process (Unix only)\")         \\\n+          range(1, UINT_MAX)                                                \\\n@@ -1972,1 +1975,1 @@\n-      \"Reset JVM's start time and uptime on restore\")                       \\\n+          \"Reset JVM's start time and uptime on restore\")                   \\\n@@ -1975,4 +1978,4 @@\n-      \"Path or name of a program or a shared library implementing \"         \\\n-      \"checkpoint and restore. On restore this option applies only to \"     \\\n-      \"the restoring VM, i.e. the restored VM keeps the value it had \"      \\\n-      \"before the checkpoint.\")                                             \\\n+          \"Path or name of a program or a shared library implementing \"     \\\n+          \"checkpoint and restore. On restore this option applies only to \" \\\n+          \"the restoring VM, i.e. the restored VM keeps the value it had \"  \\\n+          \"before the checkpoint.\")                                         \\\n@@ -1981,6 +1984,6 @@\n-      \"Options passed to CRaCEngine, in the form of 'key1=value,key2'. \"    \\\n-      \"The list of supported options is engine-dependent, use \"             \\\n-      \"'-XX:CRaCEngineOptions=help' to make the VM print the information \"  \\\n-      \"about the engine, including its supported options, and exit. On \"    \\\n-      \"restore this option applies only to the restoring VM, i.e. the \"     \\\n-      \"restored VM keeps the value it had before the checkpoint.\")          \\\n+          \"Options passed to CRaCEngine, in the form of 'key1=value,key2'. \"\\\n+          \"The list of supported options is engine-dependent, use \"         \\\n+          \"'-XX:CRaCEngineOptions=help' to make the VM print information \"  \\\n+          \"about the engine, including its supported options, and exit. On \"\\\n+          \"restore this option applies only to the restoring VM, i.e. the \" \\\n+          \"restored VM keeps the value it had before the checkpoint.\")      \\\n@@ -1989,2 +1992,2 @@\n-      \"Ignore -XX:CRaCRestoreFrom and continue initialization if restore \"  \\\n-      \"is unavailable\")                                                     \\\n+          \"Ignore -XX:CRaCRestoreFrom and continue initialization if \"      \\\n+          \"restore is not possible\")                                        \\\n@@ -1993,4 +1996,4 @@\n-      \"Comma-separated list of file descriptor numbers or paths. \"          \\\n-      \"All file descriptors greater than 2 (stdin, stdout and stderr are \"  \\\n-      \"excluded automatically) not in this list are closed when the VM \"    \\\n-      \"is started.\")                                                        \\\n+          \"Comma-separated list of file descriptor numbers or paths. All \"  \\\n+          \"file descriptors greater than 2 (stdin, stdout and stderr are \"  \\\n+          \"excluded automatically) not in this list are closed when the VM \"\\\n+          \"is started. (Linux only)\")                                       \\\n@@ -1999,4 +2002,5 @@\n-      \"prefixes for files that can be open during checkpoint; CRaC won't \"  \\\n-      \"error upon detecting these and will leave the handling up to C\/R \"   \\\n-      \"engine. This option applies only to files opened by native code; \"   \\\n-      \"for files opened by Java code use -Djdk.crac.resource-policies=...\") \\\n+          \"prefixes for files that can be open during checkpoint. CRaC \"    \\\n+          \"will not error upon detecting these and will leave the handling \"\\\n+          \"up to the engine. This option applies only to files opened by \"  \\\n+          \"native code and is Linux only; for files opened by Java code \"   \\\n+          \"use -Djdk.crac.resource-policies=...\")                           \\\n@@ -2004,2 +2008,2 @@\n-  product(bool, CRaCAllowToSkipCheckpoint, false, DIAGNOSTIC,               \\\n-      \"Allow implementation to not call Checkpoint if helper not found\")    \\\n+  product(bool, CRaCSkipCheckpoint, false, DIAGNOSTIC,                      \\\n+          \"On checkpoint, skip calling CRaC engine and restore immediately\")\\\n@@ -2008,2 +2012,2 @@\n-      \"Dump heap on CheckpointException thrown because of CRaC \"            \\\n-      \"precondition failed\")                                                \\\n+          \"Dump heap on CheckpointException thrown because of a low-level \" \\\n+          \"CRaC precondition failing\")                                      \\\n@@ -2012,1 +2016,1 @@\n-      \"Print resources to decide CheckpointException\")                      \\\n+          \"Print low-level resources checked by VM before checkpoint\")      \\\n@@ -2015,4 +2019,1 @@\n-      \"Trace startup time\")                                                 \\\n-                                                                            \\\n-  product(bool, CRaCDoThrowCheckpointException, true, EXPERIMENTAL,         \\\n-      \"Throw CheckpointException if uncheckpointable resource handle found\")\\\n+          \"Print the time at which the VM-level restore starts\")            \\\n@@ -2021,1 +2022,1 @@\n-      \"Pauses the checkpoint when a problem is found on VM level.\")         \\\n+          \"Pauses the checkpoint when a problem is found on VM level.\")     \\\n@@ -2024,1 +2025,1 @@\n-      \"of heap before checkpoint. By default equals to -Xmx.\")              \\\n+          \"of heap before checkpoint. By default equals to -Xmx.\")          \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":37,"deletions":36,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1078,2 +1078,2 @@\n-    a running Java program into an image directory. Restoring from the image should\n-    solve some of the problematic start-up and warm-up times.\n+    a running Java program into an image. Restoring from the image should have\n+    lower start-up and warm-up times compared to a full re-launch.\n@@ -1081,1 +1081,1 @@\n-    This option defines a path to the snapshot which is currently a directory. The\n+    This option defines a path to the image which is currently a directory. The\n@@ -1086,1 +1086,1 @@\n-:   Restores a snapshot created by `-XX:CRaCCheckpointTo=`*directory*.\n+:   Restores from the specified checkpoint image.\n@@ -1089,1 +1089,2 @@\n-:   A desired minimal PID value for checkpoint'ed process. Ignored on restore.\n+:   A desired minimal PID value for checkpointed process. Applied by the launcher,\n+    only on POSIX-like platforms.\n","filename":"src\/java.base\/share\/man\/java.md","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -506,4 +506,0 @@\n-            if (!isRestore) {\n-                cmd.add(\"-XX:+UnlockExperimentalVMOptions\");\n-                cmd.add(\"-XX:-CRaCDoThrowCheckpointException\");\n-            }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}