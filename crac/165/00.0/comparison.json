{"files":[{"patch":"@@ -87,1 +87,1 @@\n-#            debian-repository: https:\/\/snapshot.debian.org\/archive\/debian\/20240228T034848Z\/\n+#            debian-repository: https:\/\/httpredir.debian.org\/debian\/\n@@ -134,0 +134,1 @@\n+          --no-merged-usr\n@@ -154,0 +155,3 @@\n+          # \/{bin,sbin,lib}\/ are not symbolic links to \/usr\/{bin,sbin,lib}\/ when debootstrap with --no-merged-usr\n+          rm -rf sysroot\/{sbin,bin}\n+          rm -rf sysroot\/lib\/{udev,systemd}\n","filename":".github\/workflows\/build-cross-compile.yml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -432,1 +432,0 @@\n-BRANCH_PROTECTION_CFLAGS := @BRANCH_PROTECTION_CFLAGS@\n@@ -747,0 +746,1 @@\n+TIDY := @TIDY@\n","filename":"make\/autoconf\/spec.gmk.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1537,0 +1537,1 @@\n+    _features &= ~CPU_SHA512;\n@@ -1781,1 +1782,1 @@\n-  if (UseSHA && supports_avx2() && supports_bmi2()) {\n+  if (UseSHA && supports_avx2() && (supports_bmi2() || supports_sha512())) {\n@@ -3602,0 +3603,2 @@\n+    if (sefsl1_cpuid7_eax.bits.sha512 != 0)\n+      result |= CPU_SHA512;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -290,1 +290,2 @@\n-      uint32_t             : 23,\n+      uint32_t    sha512   : 1,\n+                           : 22,\n@@ -422,1 +423,2 @@\n-    decl(APX_F,             \"apx_f\",             60) \/* Intel Advanced Performance Extensions*\/\n+    decl(APX_F,             \"apx_f\",             60) \/* Intel Advanced Performance Extensions*\/\\\n+    decl(SHA512,            \"sha512\",            61) \/* SHA512 instructions*\/\n@@ -839,0 +841,1 @@\n+  static bool supports_sha512()       { return (_features & CPU_SHA512) != 0; }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -985,3 +985,0 @@\n-  \/\/ set the correct thread state\n-  osthread->set_thread_type(thr_type);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-  LogDecorators decorators;\n+  LogDecorators decorators = selections.get_default_decorators();\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1293,1 +1293,1 @@\n-  if (Metaspace::contains(addr)) {\n+  if (Metaspace::initialized() && Metaspace::contains(addr)) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -169,5 +168,0 @@\n-  \/\/ Debug on cmd (only makes sense with JVMTI since the agentlib needs it).\n-#if INCLUDE_JVMTI\n-  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<DebugOnCmdStartDCmd>(full_export, true, true));\n-#endif \/\/ INCLUDE_JVMTI\n-\n@@ -1067,39 +1061,0 @@\n-#if INCLUDE_JVMTI\n-extern \"C\" typedef char const* (JNICALL *debugInit_startDebuggingViaCommandPtr)(JNIEnv* env, jthread thread, char const** transport_name,\n-                                                                                char const** address, jboolean* first_start);\n-static debugInit_startDebuggingViaCommandPtr dvc_start_ptr = nullptr;\n-\n-void DebugOnCmdStartDCmd::execute(DCmdSource source, TRAPS) {\n-  char const* transport = nullptr;\n-  char const* addr = nullptr;\n-  jboolean is_first_start = JNI_FALSE;\n-  JavaThread* thread = THREAD;\n-  jthread jt = JNIHandles::make_local(thread->threadObj());\n-  ThreadToNativeFromVM ttn(thread);\n-  const char *error = \"Could not find jdwp agent.\";\n-\n-  if (!dvc_start_ptr) {\n-    JvmtiAgentList::Iterator it = JvmtiAgentList::agents();\n-    while (it.has_next()) {\n-      JvmtiAgent* agent = it.next();\n-      if ((strcmp(\"jdwp\", agent->name()) == 0) && (dvc_start_ptr == nullptr)) {\n-        char const* func = \"debugInit_startDebuggingViaCommand\";\n-        dvc_start_ptr = (debugInit_startDebuggingViaCommandPtr) os::find_agent_function(agent, false, &func, 1);\n-      }\n-    }\n-  }\n-\n-  if (dvc_start_ptr) {\n-    error = dvc_start_ptr(thread->jni_environment(), jt, &transport, &addr, &is_first_start);\n-  }\n-\n-  if (error != nullptr) {\n-    output()->print_cr(\"Debugging has not been started: %s\", error);\n-  } else {\n-    output()->print_cr(is_first_start ? \"Debugging has been started.\" : \"Debugging is already active.\");\n-    output()->print_cr(\"Transport : %s\", transport ? transport : \"#unknown\");\n-    output()->print_cr(\"Address : %s\", addr ? addr : \"#unknown\");\n-  }\n-}\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -889,21 +889,0 @@\n-#if INCLUDE_JVMTI\n-class DebugOnCmdStartDCmd : public DCmd {\n-public:\n-  DebugOnCmdStartDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n-  static const char* name() {\n-    return \"VM.start_java_debugging\";\n-  }\n-  static const char* description() {\n-    return \"Starts up the Java debugging if the jdwp agentlib was enabled with the option onjcmd=y.\";\n-  }\n-  static const char* impact() {\n-    return \"High: Switches the VM into Java debug mode.\";\n-  }\n-  static const JavaPermission permission() {\n-    JavaPermission p = { \"java.lang.management.ManagementPermission\", \"control\", nullptr };\n-    return p;\n-  }\n-  virtual void execute(DCmdSource source, TRAPS);\n-};\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"}]}