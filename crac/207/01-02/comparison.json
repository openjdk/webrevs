{"files":[{"patch":"@@ -53,0 +53,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -112,3 +113,2 @@\n-  \/\/ TODO: do this only if there has been at least one restore (cannot check via\n-  \/\/  CRaCRestoreFrom != nullptr because it can remain unset even after restore)\n-  if (!_engine->configure_image_location(CRaCCheckpointTo)) {\n+  if (restore_start_time() != -1 && \/\/ A way to detect we've restored at least once\n+      !_engine->configure_image_location(CRaCCheckpointTo)) {\n@@ -289,1 +289,1 @@\n-  auto engine = CracEngine();\n+  CracEngine engine;\n@@ -299,4 +299,1 @@\n-    if (printf(\"Selected CRaC engine does not provide information about itself.\\n\") < 0) {\n-      log_error(crac)(\"printf failed\");\n-      return;\n-    }\n+    tty->print_cr(\"Selected CRaC engine does not provide information about itself\");\n@@ -318,4 +315,1 @@\n-  if (printf(\"%s\\n\\nConfiguration options:\\n%s\\n\", description, conf_doc) < 0) {\n-    log_error(crac)(\"printf failed\");\n-    return;\n-  }\n+  tty->print_cr(\"%s\\n\\nConfiguration options:\\n%s\", description, conf_doc);\n@@ -492,1 +486,1 @@\n-  auto engine = CracEngine(CRaCRestoreFrom);\n+  CracEngine engine(CRaCRestoreFrom);\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+  CracEngine(const CracEngine &) = delete;\n+  CracEngine &operator=(const CracEngine &) = delete;\n+\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -187,0 +187,3 @@\n+  bool _is_keep_running_configured = false;\n+  bool _is_direct_map_configured = false;\n+\n@@ -253,0 +256,9 @@\n+  static void warn_if_already_configured(bool is_configured, const char *option_name) {\n+    if (!is_configured) {\n+      return;\n+    }\n+    fprintf(stderr,\n+            CREXEC \"'%s' configured multiple times, only the last value will be used\\n\",\n+            option_name);\n+  }\n+\n@@ -254,0 +266,5 @@\n+    \/\/ Don't warn if already configured: this is not intended to be set by a user\n+    const char *copy = strdup_checked(image_location);\n+    if (copy == nullptr) {\n+      return false;\n+    }\n@@ -255,2 +272,2 @@\n-    _argv[ARGV_IMAGE_LOCATION] = strdup_checked(image_location);\n-    return _argv[ARGV_IMAGE_LOCATION] != nullptr;\n+    _argv[ARGV_IMAGE_LOCATION] = copy;\n+    return true;\n@@ -260,0 +277,1 @@\n+    \/\/ Don't warn if already configured: this is not intended to be set by a user\n@@ -264,3 +282,2 @@\n-    free(const_cast<char *>(_argv[ARGV_EXEC_LOCATION]));\n-    _argv[ARGV_EXEC_LOCATION] = strdup_checked(exec_location);\n-    if (_argv[ARGV_EXEC_LOCATION] == nullptr) {\n+    const char *copy = strdup_checked(exec_location);\n+    if (copy == nullptr) {\n@@ -269,0 +286,2 @@\n+    free(const_cast<char *>(_argv[ARGV_EXEC_LOCATION]));\n+    _argv[ARGV_EXEC_LOCATION] = copy;\n@@ -273,1 +292,6 @@\n-    return parse_bool(keep_running_str, &_keep_running);\n+    warn_if_already_configured(_is_keep_running_configured, opt_keep_running);\n+    if (!parse_bool(keep_running_str, &_keep_running)) {\n+      return false;\n+    }\n+    _is_keep_running_configured = true;\n+    return true;\n@@ -277,1 +301,6 @@\n-    return parse_bool(direct_map_str, &_direct_map);\n+    warn_if_already_configured(_is_direct_map_configured, opt_direct_map);\n+    if (!parse_bool(direct_map_str, &_direct_map)) {\n+      return false;\n+    }\n+    _is_direct_map_configured = true;\n+    return true;\n@@ -280,3 +309,4 @@\n-  bool configure_args(const char *args) {\n-    free(const_cast<char *>(_argv[ARGV_FREE]));\n-    char *arg = strdup_checked(args);\n+  bool configure_args(const char *args_str) {\n+    warn_if_already_configured(_argv[ARGV_FREE] != nullptr, opt_args);\n+\n+    char *arg = strdup_checked(args_str);\n@@ -284,1 +314,0 @@\n-      _argv[ARGV_FREE] = nullptr;\n@@ -288,1 +317,5 @@\n-    assert(ARGV_FREE <= ARGV_LAST);\n+    static constexpr int MAX_ARGS_NUM = ARGV_LAST - ARGV_FREE + 1;\n+    static_assert(MAX_ARGS_NUM >= 0, \"sanity check\");\n+    const char *args[MAX_ARGS_NUM];\n+\n+    int args_num = 0;\n@@ -290,2 +323,2 @@\n-    for (int i = ARGV_FREE; i <= ARGV_LAST && arg[0] != '\\0'; i++) {\n-      _argv[i] = arg;\n+    for (; args_num < MAX_ARGS_NUM; args_num++) {\n+      args[args_num] = arg;\n@@ -293,2 +326,2 @@\n-      if (arg[0] == SEP) {\n-        *(arg++) = '\\0';\n+      if (arg[0] == '\\0') {\n+        break;\n@@ -296,0 +329,2 @@\n+      assert(arg[0] == SEP);\n+      *(arg++) = '\\0';\n@@ -299,4 +334,3 @@\n-      fprintf(stderr, CREXEC \"too many free arguments, at most %i are allowed\\n\",\n-              (ARGV_LAST - ARGV_FREE) + 1);\n-      free(const_cast<char *>(_argv[ARGV_FREE]));\n-      _argv[ARGV_FREE] = nullptr;\n+      assert(args_num == MAX_ARGS_NUM);\n+      fprintf(stderr, CREXEC \"too many free arguments, at most %i allowed\\n\", MAX_ARGS_NUM);\n+      free(const_cast<char *>(args[0]));\n@@ -306,0 +340,2 @@\n+    free(const_cast<char *>(_argv[ARGV_FREE]));\n+    memcpy(&_argv[ARGV_FREE], args, args_num * sizeof(const char *));\n","filename":"src\/java.base\/share\/native\/libcrexec\/crexec.cpp","additions":56,"deletions":20,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -75,4 +75,4 @@\n-        test(\"unknown\", Collections.emptyList(), 1, \"Cannot find CRaC engine unknown\");\n-        test(\"simengine,--arg\", Collections.emptyList(), 1, \"Cannot find CRaC engine simengine,--arg\");\n-        test(\"one two\", Collections.emptyList(), 1, \"Cannot find CRaC engine one two\");\n-        test(\"\", Collections.emptyList(), 1, \"CRaCEngine must not be empty\");\n+        test(\"unknown\", null, 1, \"Cannot find CRaC engine unknown\");\n+        test(\"simengine,--arg\", null, 1, \"Cannot find CRaC engine simengine,--arg\");\n+        test(\"one two\", null, 1, \"Cannot find CRaC engine one two\");\n+        test(\"\", null, 1, \"CRaCEngine must not be empty\");\n@@ -87,0 +87,6 @@\n+            test(\"criuengine\", Arrays.asList(\"keep_running=true,args=-v -v -v -v\"), 0,\n+                    Arrays.asList(\n+                        \"CRaC engine option: 'keep_running' = 'true'\",\n+                        \"CRaC engine option: 'args' = '-v -v -v -v'\"\n+                    ),\n+                    Arrays.asList(\"configured multiple times\"));\n@@ -90,1 +96,2 @@\n-                    \"CRaC engine option: 'keep_running' = 'false'\");\n+                    \"CRaC engine option: 'keep_running' = 'false'\",\n+                    \"'keep_running' configured multiple times\");\n@@ -130,5 +137,9 @@\n-                \"CRaC engine option: 'args' = 'simengine ignores this'\",\n-                \"CRaC engine option: 'args' = 'another arg'\",\n-                \"CRaC engine option: 'keep_running' = 'true'\",\n-                \"CRaC engine option: 'args' = 'and another'\",\n-                \"CRaC engine option: 'args' = 'this is also ignored'\");\n+                Arrays.asList(\n+                    \"CRaC engine option: 'args' = 'simengine ignores this'\",\n+                    \"CRaC engine option: 'args' = 'another arg'\",\n+                    \"CRaC engine option: 'keep_running' = 'true'\",\n+                    \"CRaC engine option: 'args' = 'and another'\",\n+                    \"CRaC engine option: 'args' = 'this is also ignored'\",\n+                    \"'args' configured multiple times\"\n+                ),\n+                Collections.emptyList());\n@@ -139,3 +150,6 @@\n-                \"CRaC engine option: 'args' = '--arg1 --arg2'\",\n-                \"unknown configure option: --arg3\",\n-                \"CRaC engine failed to configure: '--arg3' = ''\");\n+                Arrays.asList(\n+                    \"CRaC engine option: 'args' = '--arg1 --arg2'\",\n+                    \"unknown configure option: --arg3\",\n+                    \"CRaC engine failed to configure: '--arg3' = ''\"\n+                ),\n+                Arrays.asList(\"configured multiple times\"));\n@@ -150,1 +164,3 @@\n-        out.shouldContain(\"Configuration options:\");\n+        out.stdoutShouldContain(\"Configuration options:\");\n+        out.stderrShouldBeEmpty();\n+        out.shouldNotContain(\"CRaC engine option:\");\n@@ -154,1 +170,1 @@\n-        test(engine, Collections.emptyList(), 0);\n+        test(engine, Collections.emptyList(), 0, Collections.emptyList(), Collections.emptyList());\n@@ -158,1 +174,2 @@\n-        test(engine, Arrays.asList(opts), 0);\n+        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n+            0, Collections.emptyList(), Collections.emptyList());\n@@ -161,2 +178,4 @@\n-    private void test(String engine, String opts, int expectedExitValue, String... expectedTexts) throws Exception {\n-        test(engine, Arrays.asList(opts), expectedExitValue, expectedTexts);\n+    private void test(String engine, String opts, int expectedExitValue,\n+            String... expectedTexts) throws Exception {\n+        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n+                expectedExitValue, Arrays.asList(expectedTexts), Collections.emptyList());\n@@ -165,1 +184,2 @@\n-    private void test(String engine, List<String> opts, int expectedExitValue, String... expectedTexts) throws Exception {\n+    private void test(String engine, List<String> opts, int expectedExitValue,\n+            List<String> expectedTexts, List<String> notExpectedTexts) throws Exception {\n@@ -179,0 +199,3 @@\n+        for (String text : notExpectedTexts) {\n+            out.shouldNotContain(text);\n+        }\n","filename":"test\/jdk\/jdk\/crac\/CracEngineOptionsTest.java","additions":42,"deletions":19,"binary":false,"changes":61,"status":"modified"}]}