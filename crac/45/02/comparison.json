{"files":[{"patch":"@@ -5753,0 +5753,1 @@\n+  close_extra_descriptors();\n@@ -6205,1 +6206,1 @@\n-    char detailsbuf[128];\n+    char detailsbuf[PATH_MAX];\n@@ -6459,0 +6460,63 @@\n+static char modules_path[JVM_MAXPATHLEN] = { '\\0' };\n+\n+static bool is_fd_ignored(int fd, const char *path) {\n+  if (!strcmp(modules_path, path)) {\n+    \/\/ Path to the modules directory is opened early when JVM is booted up and won't be closed.\n+    \/\/ We can ignore this for purposes of CRaC.\n+    return true;\n+  }\n+\n+  const char *list = CRaCIgnoredFileDescriptors;\n+  while (list && *list) {\n+    const char *end = strchr(list, ',');\n+    if (!end) {\n+      end = list + strlen(list);\n+    }\n+    char *invalid;\n+    int ignored_fd = strtol(list, &invalid, 10);\n+    if (invalid == end) { \/\/ entry was integer -> file descriptor\n+      if (fd == ignored_fd) {\n+        log_trace(os)(\"CRaC not closing file descriptor %d (%s) as it is marked as ignored.\", fd, path);\n+        return true;\n+      }\n+    } else { \/\/ interpret entry as path\n+      int path_len = path ? strlen(path) : -1;\n+      if (path_len != -1 && path_len == end - list && !strncmp(path, list, end - list)) {\n+        log_trace(os)(\"CRaC not closing file descriptor %d (%s) as it is marked as ignored.\", fd, path);\n+        return true;\n+      }\n+    }\n+    if (*end) {\n+      list = end + 1;\n+    } else {\n+      break;\n+    }\n+  }\n+  return false;\n+}\n+\n+void os::Linux::close_extra_descriptors() {\n+  \/\/ Path to the modules directory is opened early when JVM is booted up and won't be closed.\n+  \/\/ We can ignore this for purposes of CRaC.\n+  if (modules_path[0] == '\\0') {\n+    const char* fileSep = os::file_separator();\n+    jio_snprintf(modules_path, JVM_MAXPATHLEN, \"%s%slib%smodules\", Arguments::get_java_home(), fileSep, fileSep);\n+  }\n+\n+  char path[PATH_MAX];\n+  struct dirent *dp;\n+\n+  DIR *dir = opendir(\"\/proc\/self\/fd\");\n+  while (dp = readdir(dir)) {\n+    int fd = atoi(dp->d_name);\n+    if (fd > 2 && fd != dirfd(dir)) {\n+      int r = readfdlink(fd, path, sizeof(path));\n+      if (!is_fd_ignored(fd, r != -1 ? path : nullptr)) {\n+        log_warning(os)(\"CRaC closing file descriptor %d: %s\\n\", fd, path);\n+        close(fd);\n+      }\n+    }\n+  }\n+  closedir(dir);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":65,"deletions":1,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+  static void close_extra_descriptors();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2103,0 +2103,5 @@\n+  product(ccstr, CRaCIgnoredFileDescriptors, NULL, \"Comma-separated list \"  \\\n+      \"of file descriptor numbers or paths. All file descriptors greater \"  \\\n+      \"than 2 (stdin, stdout and stderr are excluded automatically) not \"   \\\n+      \"in this list are closed when the VM is started.\")                    \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.CheckpointException;\n+import jdk.crac.Core;\n+import jdk.crac.RestoreException;\n+\n+class CheckpointRestore {\n+    static final String RESTORED_MESSAGE = \"Restored\";\n+\n+    public static void main(String[] args) throws CheckpointException, RestoreException {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/CheckpointRestore.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.CheckpointException;\n+import jdk.crac.RestoreException;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build CheckpointRestore\n+ * @run main FileDescriptorsCloseTest testCheckpointWithOpenFds\n+ * @run main FileDescriptorsCloseTest testIgnoredFileDescriptors\n+ *\/\n+public class FileDescriptorsCloseTest {\n+    private static final String EXTRA_FD_WRAPPER = Path.of(Utils.TEST_SRC, \"extra_fd_wrapper.sh\").toString();\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (args.length < 1) {\n+            throw new IllegalArgumentException();\n+        }\n+        FileDescriptorsCloseTest.class.getMethod(args[0]).invoke(null);\n+    }\n+\n+    public static void testCheckpointWithOpenFds() throws Throwable {\n+        List<String> cmd = new ArrayList<>();\n+        cmd.add(EXTRA_FD_WRAPPER);\n+        cmd.add(JDKToolFinder.getJDKTool(\"java\"));\n+        cmd.add(\"-cp\");\n+        cmd.add(System.getProperty(\"java.class.path\"));\n+        cmd.add(\"-XX:CRaCCheckpointTo=.\/cr\");\n+        cmd.add(CheckpointRestore.class.getSimpleName());\n+        \/\/ Note that the process is killed after checkpoint\n+        ProcessTools.executeProcess(cmd.toArray(new String[0]))\n+                .shouldHaveExitValue(137);\n+\n+        ProcessTools.executeTestJvm(\"-XX:CRaCRestoreFrom=.\/cr\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(CheckpointRestore.RESTORED_MESSAGE);\n+    }\n+\n+    public static void testIgnoredFileDescriptors() throws Throwable {\n+        List<String> cmd = new ArrayList<>();\n+        cmd.add(EXTRA_FD_WRAPPER);\n+        cmd.addAll(Arrays.asList(\"-o\", \"43\", \"\/dev\/stdout\"));\n+        cmd.addAll(Arrays.asList(\"-o\", \"45\", \"\/dev\/urandom\"));\n+        cmd.add(JDKToolFinder.getJDKTool(\"java\"));\n+        cmd.add(\"-cp\");\n+        cmd.add(System.getProperty(\"java.class.path\"));\n+        cmd.add(\"-XX:CRaCCheckpointTo=.\/cr\");\n+        cmd.add(\"-XX:CRaCIgnoredFileDescriptors=43,\/dev\/null,44,\/dev\/urandom\");\n+        cmd.add(\"FileDescriptorsCloseTest$TestIgnoredDescriptors\");\n+        \/\/ Note that the process is killed after checkpoint\n+        ProcessTools.executeProcess(cmd.toArray(new String[0]))\n+                .shouldHaveExitValue(137);\n+\n+        ProcessTools.executeTestJvm(\"-XX:CRaCRestoreFrom=.\/cr\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(CheckpointRestore.RESTORED_MESSAGE);\n+    }\n+\n+    public static class TestIgnoredDescriptors {\n+        public static void main(String[] args) throws IOException, RestoreException, CheckpointException {\n+            try (var stream = Files.list(Path.of(\"\/proc\/self\/fd\"))) {\n+                Map<Integer, String> fds = stream.filter(Files::isSymbolicLink)\n+                        .collect(Collectors.toMap(\n+                                f -> Integer.parseInt(f.toFile().getName()),\n+                                f -> {\n+                                    try {\n+                                        return Files.readSymbolicLink(f).toFile().getAbsoluteFile().toString();\n+                                    } catch (IOException e) {\n+                                        throw new RuntimeException(e);\n+                                    }\n+                                }));\n+                if (fds.containsKey(42)) {\n+                    throw new IllegalStateException(\"Oh no, 42 was not supposed to be ignored\");\n+                } else if (!fds.containsKey(0) || !fds.containsKey(1) || !fds.containsKey(2)) {\n+                    throw new IllegalStateException(\"Missing standard I\/O? Available: \" + fds);\n+                } else if (!fds.containsKey(43)) {\n+                    throw new IllegalStateException(\"Missing FD 43\");\n+                } else if (!fds.containsValue(\"\/dev\/urandom\")) {\n+                    throw new IllegalStateException(\"Missing \/dev\/urandom\");\n+                }\n+            }\n+            CheckpointRestore.main(args);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/FileDescriptorsCloseTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -26,2 +26,0 @@\n-import jdk.crac.*;\n-\n@@ -34,0 +32,1 @@\n+ * @build CheckpointRestore\n@@ -37,9 +36,0 @@\n-    private static final String RESTORED_MESSAGE = \"Restored\";\n-\n-    static class Test {\n-        public static void main(String[] args) throws CheckpointException, RestoreException {\n-            Core.checkpointRestore();\n-            System.out.println(RESTORED_MESSAGE);\n-        }\n-    }\n-\n@@ -50,2 +40,1 @@\n-                \"-XX:CRaCCheckpointTo=.\/cr\",\n-                \"LeaveRunning$Test\");\n+                \"-XX:CRaCCheckpointTo=.\/cr\", CheckpointRestore.class.getSimpleName());\n@@ -59,1 +48,1 @@\n-        output.shouldContain(RESTORED_MESSAGE);\n+        output.shouldContain(CheckpointRestore.RESTORED_MESSAGE);\n@@ -69,1 +58,1 @@\n-        output.shouldContain(RESTORED_MESSAGE);\n+        output.shouldContain(CheckpointRestore.RESTORED_MESSAGE);\n","filename":"test\/jdk\/jdk\/crac\/LeaveRunning.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+#!\/bin\/bash\n+# Java opens all files with O_CLOEXEC (or calls fcntl(FD_CLOEXEC)) so we cannot trigger this behaviour from Java code;\n+# this opens a file descriptor and executes subprocess based on its arguments.\n+FILE=$(mktemp -p \/dev\/shm)\n+exec 42<>$FILE\n+# criu uses DEFAULT_GHOST_LIMIT 1M - let's create a file bigger than that\n+dd if=\/dev\/urandom bs=4096 count=257 >&42 2>\/dev\/null\n+rm $FILE\n+# Open some extra files\n+while [ $1 = \"-o\" ]; do\n+  eval \"exec $2<>$3\"\n+  shift 3\n+done\n+exec \"$@\"\n","filename":"test\/jdk\/jdk\/crac\/extra_fd_wrapper.sh","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"}]}