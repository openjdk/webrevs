{"files":[{"patch":"@@ -962,1 +962,1 @@\n-void VM_Version::glibc_not_using(uint64_t excessive_CPU, uint64_t excessive_GLIBC) {\n+void VM_Version::glibc_not_using(uint64_t shouldnotuse_CPU, uint64_t shouldnotuse_GLIBC) {\n@@ -964,1 +964,1 @@\n-  if (!excessive_CPU && !excessive_GLIBC)\n+  if (!shouldnotuse_CPU && !shouldnotuse_GLIBC)\n@@ -982,2 +982,2 @@\n-    if (excessive_CPU & (CPU_FXSR | CPU_MMX | CPU_SSE)) {\n-      assert(!(excessive_CPU & CPU_SSE2), \"CPU_SSE2 in both _features and excessive_CPU cannot happen\");\n+    if (shouldnotuse_CPU & (CPU_FXSR | CPU_MMX | CPU_SSE)) {\n+      assert(!(shouldnotuse_CPU & CPU_SSE2), \"CPU_SSE2 in both _features and shouldnotuse_CPU cannot happen\");\n@@ -986,1 +986,1 @@\n-      excessive_CPU |= CPU_SSE2;\n+      shouldnotuse_CPU |= CPU_SSE2;\n@@ -1003,3 +1003,3 @@\n-        if ((excessive_CPU & CPU_SSE3) ||\n-            (excessive_GLIBC & (GLIBC_CMPXCHG16 | GLIBC_LAHFSAHF))) {\n-          assert(!(excessive_CPU & CPU_SSE4_2), \"CPU_SSE4_2 in both _features and excessive_CPU cannot happen\");\n+        if ((shouldnotuse_CPU & CPU_SSE3) ||\n+            (shouldnotuse_GLIBC & (GLIBC_CMPXCHG16 | GLIBC_LAHFSAHF))) {\n+          assert(!(shouldnotuse_CPU & CPU_SSE4_2), \"CPU_SSE4_2 in both _features and shouldnotuse_CPU cannot happen\");\n@@ -1007,1 +1007,1 @@\n-          excessive_CPU |= CPU_SSE4_2;\n+          shouldnotuse_CPU |= CPU_SSE4_2;\n@@ -1028,2 +1028,2 @@\n-            if (excessive_GLIBC & GLIBC_F16C) {\n-              assert(!(excessive_GLIBC & GLIBC_MOVBE), \"GLIBC_MOVBE in both _glibc_features and excessive_GLIBC cannot happen\");\n+            if (shouldnotuse_GLIBC & GLIBC_F16C) {\n+              assert(!(shouldnotuse_GLIBC & GLIBC_MOVBE), \"GLIBC_MOVBE in both _glibc_features and shouldnotuse_GLIBC cannot happen\");\n@@ -1031,1 +1031,1 @@\n-              excessive_GLIBC |= GLIBC_MOVBE;\n+              shouldnotuse_GLIBC |= GLIBC_MOVBE;\n@@ -1040,1 +1040,1 @@\n-              \/\/ All these flags are supported by GLIBC_DISABLE below.\n+              \/\/ All these flags are supported by disable() below.\n@@ -1047,2 +1047,1 @@\n-  uint64_t disable_CPU   = 0;\n-  uint64_t disable_GLIBC = 0;\n+\n@@ -1050,0 +1049,13 @@\n+  enum kind { KIND_CPU = 0, KIND_GLIBC, KIND_COUNT };\n+\n+  char disable_str[KIND_COUNT * 64 * (10 + 3) + 1];\n+  strcpy(disable_str, glibc_prefix);\n+  char *disable_end = disable_str + glibc_prefix_len;\n+  auto disable = [&](enum kind kind, uint64_t value, const char *hotspotglibcstr) {\n+    size_t remains = disable_str + sizeof(disable_str) - disable_end;\n+    assert(2 + strlen(hotspotglibcstr) < remains, \"internal error: disable_str overflow\");\n+    *disable_end++ = ',';\n+    *disable_end++ = '-';\n+    disable_end = stpcpy(disable_end, hotspotglibcstr);\n+  };\n+\n@@ -1051,4 +1063,1 @@\n-  uint64_t excessive_handled_CPU   = 0;\n-  uint64_t excessive_handled_GLIBC = 0;\n-  uint64_t disable_handled_CPU   = 0;\n-  uint64_t disable_handled_GLIBC = 0;\n+  uint64_t handled[KIND_COUNT] = { 0 };\n@@ -1056,4 +1065,6 @@\n-#define EXCESSIVE_HANDLED(kind, hotspot) do {                                                                                         \\\n-    assert(!(PASTE_TOKENS(excessive_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot)), \"already used \" STR(kind) \"_\" STR(hotspot) ); \\\n-    DEBUG_ONLY(PASTE_TOKENS(excessive_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot));                                            \\\n-  } while (0)\n+  auto shouldnotuse_handled = [&](enum kind kind, uint64_t value) {\n+    assert((handled[kind] & value) == 0, \"already used \" STR(kind) \"_\" STR(hotspot) );\n+    DEBUG_ONLY(handled[kind] |= value);\n+  };\n+#define EXCESSIVE_HANDLED(kind, hotspotglibc) shouldnotuse_handled(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, hotspotglibc))\n+\n@@ -1065,6 +1076,10 @@\n-#define EXCESSIVE3(kind, hotspot, glibc) do {                                                        \\\n-    EXCESSIVE_HANDLED(kind, hotspot);                                                                \\\n-    if (PASTE_TOKENS(excessive_, kind) & PASTE_TOKENS3(kind, _, hotspot) && FEATURE_ACTIVE(glibc)) { \\\n-      PASTE_TOKENS(disable_, kind) |= PASTE_TOKENS3(kind, _, hotspot);                               \\\n-    }                                                                                                \\\n-  } while (0)\n+\n+  const uint64_t shouldnotuseval[KIND_COUNT] = { shouldnotuse_CPU, shouldnotuse_GLIBC };\n+  auto shouldnotuse = [&](enum kind kind, uint64_t value, const char *hotspotglibcstr, bool feature_active) {\n+    shouldnotuse_handled(kind, value);\n+    if ((shouldnotuseval[kind] & value) != 0 && feature_active) {\n+      disable(kind, value, hotspotglibcstr);\n+    }\n+  };\n+#define EXCESSIVE3(kind, hotspot, glibc) \\\n+  shouldnotuse(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, hotspot), STR(glibc), FEATURE_ACTIVE(glibc))\n@@ -1072,0 +1087,1 @@\n+\n@@ -1104,50 +1120,0 @@\n-  char disable_str[64 * (10 + 3) + 1];\n-  strcpy(disable_str, glibc_prefix);\n-  char *disable_end = disable_str + glibc_prefix_len;\n-#define GLIBC_DISABLE2(kind, hotspot, glibc) do {                                                                                   \\\n-    assert(!(PASTE_TOKENS(disable_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot)), \"already used \" STR(kind) \"_\" STR(hotspot) ); \\\n-    DEBUG_ONLY(PASTE_TOKENS(disable_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot));                                            \\\n-    if (PASTE_TOKENS(disable_, kind) & PASTE_TOKENS3(kind, _, hotspot)) {                                                           \\\n-      const char str[] = \",-\" STR(glibc);                                                                                           \\\n-      size_t remains = disable_str + sizeof(disable_str) - disable_end;                                                             \\\n-      strncpy(disable_end, str, remains);                                                                                           \\\n-      size_t len = strnlen(disable_end, remains);                                                                                   \\\n-      remains -= len;                                                                                                               \\\n-      assert(remains > 0, \"internal error: disable_str overflow\");                                                                  \\\n-      disable_end += len;                                                                                                           \\\n-    }                                                                                                                               \\\n-  } while (0);\n-#define GLIBC_DISABLE(kind, hotspot_glibc) GLIBC_DISABLE2(kind, hotspot_glibc, hotspot_glibc)\n-  GLIBC_DISABLE(CPU  , AVX)\n-  GLIBC_DISABLE(CPU  , CX8)\n-  GLIBC_DISABLE(CPU  , FMA)\n-  GLIBC_DISABLE(CPU  , RTM)\n-  GLIBC_DISABLE(CPU  , AVX2)\n-  GLIBC_DISABLE(CPU  , BMI1)\n-  GLIBC_DISABLE(CPU  , BMI2)\n-  GLIBC_DISABLE(CPU  , CMOV)\n-  GLIBC_DISABLE(CPU  , ERMS)\n-  GLIBC_DISABLE(CPU  , SSE2)\n-  GLIBC_DISABLE(CPU  , LZCNT)\n-  GLIBC_DISABLE(CPU  , SSSE3)\n-  GLIBC_DISABLE(CPU  , POPCNT)\n-  GLIBC_DISABLE(CPU  , SSE4_1)\n-  GLIBC_DISABLE(CPU  , SSE4_2)\n-  GLIBC_DISABLE(CPU  , AVX512F)\n-  GLIBC_DISABLE(CPU  , AVX512CD)\n-  GLIBC_DISABLE(CPU  , AVX512BW)\n-  GLIBC_DISABLE(CPU  , AVX512DQ)\n-  GLIBC_DISABLE(CPU  , AVX512ER)\n-  GLIBC_DISABLE(CPU  , AVX512PF)\n-  GLIBC_DISABLE(CPU  , AVX512VL)\n-  GLIBC_DISABLE2(CPU , CET_IBT, IBT)\n-  GLIBC_DISABLE2(CPU , CET_SS , SHSTK)\n-  GLIBC_DISABLE(GLIBC, FMA4)\n-  GLIBC_DISABLE(GLIBC, MOVBE)\n-  GLIBC_DISABLE(GLIBC, XSAVE)\n-  GLIBC_DISABLE(GLIBC, OSXSAVE)\n-  GLIBC_DISABLE(GLIBC, HTT)\n-#undef GLIBC_DISABLE\n-#undef GLIBC_DISABLE2\n-  *disable_end = 0;\n-\n@@ -1155,9 +1121,0 @@\n-#define CHECK_KIND(kind) do {                                                                                                            \\\n-    if (PASTE_TOKENS(disable_handled_, kind) != PASTE_TOKENS(excessive_handled_, kind))                                                  \\\n-      vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of \" STR(kind) \"_* 0x%\" PRIx64 \" != used 0x%\" PRIx64, \\\n-                                            PASTE_TOKENS(disable_handled_, kind), PASTE_TOKENS(excessive_handled_, kind)));              \\\n-  } while (0)\n-  CHECK_KIND(CPU  );\n-  CHECK_KIND(GLIBC);\n-#undef CHECK_KIND\n-\n@@ -1206,5 +1163,7 @@\n-#define CHECK_KIND(kind) do {                                                                                                                 \\\n-    if (PASTE_TOKENS(excessive_handled_, kind) != PASTE_TOKENS(MAX_, kind) - 1)                                                               \\\n-      vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of some \" STR(kind) \"_* 0x%\" PRIx64 \" != full 0x%\" PRIx64, \\\n-                                            PASTE_TOKENS(excessive_handled_, kind), PASTE_TOKENS(MAX_, kind) - 1));                           \\\n-  } while (0)\n+\n+  auto check_kind = [&](enum kind kind, const char *kindstr, uint64_t mask) {\n+    if (handled[kind] != mask) {\n+      vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of some %s_* 0x%\" PRIx64 \" != full 0x%\" PRIx64, kindstr, handled[kind], mask));\n+    }\n+  };\n+#define CHECK_KIND(kind) check_kind(PASTE_TOKENS(KIND_, kind), STR(kind), PASTE_TOKENS(MAX_, kind) - 1)\n@@ -1216,0 +1175,1 @@\n+  *disable_end = 0;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":53,"deletions":93,"binary":false,"changes":146,"status":"modified"}]}