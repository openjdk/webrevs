{"files":[{"patch":"@@ -351,0 +351,5 @@\n+    if (!strncmp(details, \"\/memfd:\", 7)) {\n+      print_resources(\"OK: memfd\\n\");\n+      continue;\n+    }\n+\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1061,0 +1061,4 @@\n+\n+  if (Universe::heap()->do_cleanup_unused()) {\n+    _page_allocator->cleanup_unused();\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -914,1 +914,1 @@\n-size_t ZPageAllocator::uncommit(uint64_t* timeout) {\n+size_t ZPageAllocator::uncommit(uint64_t* timeout, uintx delay) {\n@@ -933,1 +933,1 @@\n-    flushed = _cache.flush_for_uncommit(flush, &pages, timeout);\n+    flushed = _cache.flush_for_uncommit(flush, &pages, timeout, delay);\n@@ -1053,0 +1053,15 @@\n+\n+void ZPageAllocator::cleanup_unused() {\n+  uint64_t timeout;\n+  size_t flushed, uncommitted = 0;\n+  do {\n+    flushed = uncommit(&timeout, 0);\n+    uncommitted += flushed;\n+  } while (flushed > 0);\n+  if (uncommitted > 0) {\n+    EventZUncommit event;\n+    log_info(gc, heap)(\"Uncommitted (cleanup): \" SIZE_FORMAT \"M(%.0f%%)\",\n+      uncommitted \/ M, percent_of(uncommitted, ZHeap::heap()->max_capacity()));\n+    event.commit(uncommitted);\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  size_t uncommit(uint64_t* timeout);\n+  size_t uncommit(uint64_t* timeout, uintx delay);\n@@ -172,0 +172,2 @@\n+\n+  void cleanup_unused();\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"logging\/log.hpp\"\n@@ -281,0 +283,1 @@\n+  uintx          _delay;\n@@ -283,1 +286,1 @@\n-  ZPageCacheFlushForUncommitClosure(size_t requested, uint64_t now, uint64_t* timeout)\n+  ZPageCacheFlushForUncommitClosure(size_t requested, uint64_t now, uint64_t* timeout, uintx delay)\n@@ -286,1 +289,2 @@\n-      _timeout(timeout) {\n+      _timeout(timeout),\n+      _delay(delay) {\n@@ -292,1 +296,1 @@\n-    const uint64_t expires = page->last_used() + ZUncommitDelay;\n+    const uint64_t expires = page->last_used() + _delay;\n@@ -310,1 +314,1 @@\n-size_t ZPageCache::flush_for_uncommit(size_t requested, ZList<ZPage>* to, uint64_t* timeout) {\n+size_t ZPageCache::flush_for_uncommit(size_t requested, ZList<ZPage>* to, uint64_t* timeout, uintx delay) {\n@@ -312,1 +316,1 @@\n-  const uint64_t expires = _last_commit + ZUncommitDelay;\n+  const uint64_t expires = _last_commit + delay;\n@@ -321,1 +325,1 @@\n-    *timeout = ZUncommitDelay;\n+    *timeout = delay;\n@@ -325,1 +329,1 @@\n-  ZPageCacheFlushForUncommitClosure cl(requested, now, timeout);\n+  ZPageCacheFlushForUncommitClosure cl(requested, now, timeout, delay);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageCache.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  size_t flush_for_uncommit(size_t requested, ZList<ZPage>* to, uint64_t* timeout);\n+  size_t flush_for_uncommit(size_t requested, ZList<ZPage>* to, uint64_t* timeout, uintx delay);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-      const size_t flushed = _page_allocator->uncommit(&timeout);\n+      const size_t flushed = _page_allocator->uncommit(&timeout, ZUncommitDelay);\n","filename":"src\/hotspot\/share\/gc\/z\/zUncommitter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3022,7 +3022,0 @@\n-  if (CRaCCheckpointTo && UseZGC) {\n-    \/\/ jdk.crac.impl.CheckpointOpenFileException: FD fd=3 type=regular path=\/memfd:java_heap (deleted)\n-    jio_fprintf(defaultStream::output_stream(),\n-      \"-XX:+UseZGC is currently unsupported for -XX:CRaCCheckpointTo.\\n\");\n-    return JNI_ERR;\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"nmt\/memTracker.hpp\"\n@@ -412,0 +413,4 @@\n+  if (PrintNMTStatistics) {\n+    MemTracker::final_report(tty);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build ZGCTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ * @requires (os.family == \"linux\")\n+ *\/\n+public class ZGCTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder().vmOption(\"-XX:+UseZGC\");\n+        builder.doCheckpoint();\n+        builder.clearVmOptions();\n+        builder.doRestore();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/ZGCTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}