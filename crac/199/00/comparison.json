{"files":[{"patch":"@@ -65,0 +65,1 @@\n+#include <stdbool.h>\n@@ -67,1 +68,2 @@\n-static int is_checkpoint = 0;\n+static bool is_checkpoint = false;\n+static bool is_restore = false;\n@@ -70,9 +72,6 @@\n-static int is_min_pid_set = 0;\n-\n-static void parse_checkpoint(const char *arg) {\n-    if (!is_checkpoint) {\n-        const char *checkpoint_arg = \"-XX:CRaCCheckpointTo\";\n-        const int len = strlen(checkpoint_arg);\n-        if (0 == strncmp(arg, checkpoint_arg, len)) {\n-            is_checkpoint = 1;\n-        }\n+static bool is_min_pid_set = false;\n+\n+static inline const char *find_option(const char *arg, const char *vmoption) {\n+    const int len = strlen(vmoption);\n+    if (0 == strncmp(arg, vmoption, len)) {\n+        return arg + len;\n@@ -80,6 +79,13 @@\n-    if (!is_min_pid_set) {\n-        const char *checkpoint_arg = \"-XX:CRaCMinPid=\";\n-        const int len = strlen(checkpoint_arg);\n-        if (0 == strncmp(arg, checkpoint_arg, len)) {\n-            crac_min_pid = atoi(arg + len);\n-            is_min_pid_set = 1;\n+    return NULL;\n+}\n+\n+static void parse_crac(const char *arg) {\n+    if (!is_checkpoint && find_option(arg, \"-XX:CRaCCheckpointTo\")) {\n+        is_checkpoint = true;\n+    } else if (!is_restore && find_option(arg, \"-XX:CRaCRestoreFrom\")) {\n+        is_restore = true;\n+    } else if (!is_min_pid_set) {\n+        const char *value = find_option(arg, \"-XX:CRaCMinPid=\");\n+        if (value != NULL) {\n+            crac_min_pid = atoi(value);\n+            is_min_pid_set = true;\n@@ -314,1 +320,1 @@\n-            parse_checkpoint(argv[i]);\n+            parse_crac(argv[i]);\n@@ -374,1 +380,29 @@\n-#endif \/* WIN32 *\/\n+#ifdef LINUX\n+    \/\/ \/proc filesystem is only on LINUX\/*NIX - rseq is not relevant elsewhere anyway\n+    if (is_checkpoint || is_restore) {\n+        const char *GLIBC_TUNABLES = \"GLIBC_TUNABLES\";\n+        const char *tunables = getenv(GLIBC_TUNABLES);\n+        \/\/ do not try overwrite an existing tunable setting\n+        if (!tunables || !strstr(tunables, \"glibc.pthread.rseq\")) {\n+            char tunables_buf[4096];\n+            const char *new_tunables = \"glibc.pthread.rseq=0\";\n+            if (tunables) {\n+                int sz = snprintf(tunables_buf, sizeof(tunables_buf), \"%s:%s\", tunables, new_tunables);\n+                if (sz < 0 || (int)sizeof(tunables_buf) <= sz) {\n+                    fprintf(stderr, \"Cannot update GLIBC_TUNABLES: does not fit\\n\");\n+                    return 1;\n+                }\n+                new_tunables = tunables_buf;\n+            }\n+\n+            if (setenv(GLIBC_TUNABLES, new_tunables, 1) < 0) {\n+                perror(\"setenv GLIBC_TUNABLES\");\n+                return 1;\n+            }\n+            execv(\"\/proc\/self\/exe\", argv);\n+            perror(\"re-exec\");\n+            return 1;\n+        }\n+    }\n+#endif \/* LINUX *\/\n+#endif \/* not WIN32 *\/\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":52,"deletions":18,"binary":false,"changes":70,"status":"modified"}]}