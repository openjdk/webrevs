{"files":[{"patch":"@@ -18,1 +18,1 @@\n-There is one line per tag created through the `crlib_image_constraints_t` interface, using either the `label:` or `bitmap:` prefix, followed by the tag name and `=`-separated value. In case of bitmap this is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits`) in memory order. The string in the example is recorded when JVM runs with:\n+There is one line per tag created through the `crlib_image_constraints_t` interface, using either the `label:` or `bitmap:` prefix, followed by the tag name and `=`-separated value. Use of `=` and newlines in tag name is prohibited, and newlines are prohibited in values as well. In case of bitmap this is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits>`) in memory order. The string in the example is recorded when JVM runs with:\n@@ -37,2 +37,1 @@\n-While currently not utilized by the JVM, C\/R Exec can store custom data in the checkpoint directory. The filename uses the name passed to `crlib_user_data_t`, and the data is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits`) in memory order. It is up to JVM to ensure that there would be no conflict with name used by another extension or engine implementation.\n-\n+While currently not utilized by the JVM, C\/R Exec can store custom data in the checkpoint directory. The filename uses the name passed to `crlib_user_data_t`, and the data is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits>`) in memory order. It is up to JVM to ensure that there would be no conflict with name used by another extension or engine implementation.\n","filename":"src\/java.base\/share\/native\/libcrexec\/README.md","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}