{"files":[{"patch":"@@ -73,1 +73,1 @@\n-    private static final Context<Resource> globalContext = GlobalContext.createGlobalContextImpl(\"jdk.crac.internal.globalContext\");\n+    private static final Context<Resource> globalContext = GlobalContext.createGlobalContextImpl(null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Core.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,3 +70,10 @@\n-        Score score = new Score(name, ctx);\n-        synchronized (scores) {\n-            scores.put(name, score);\n+        \/\/ The 'internal' context from jdk.internal.crac.mirror.Core should host only the Core.Priority contexts\n+        \/\/ and the context created by jdk.crac.Core (the 'user' global context). We won't record score for\n+        \/\/ the internal context as if registered here, beforeCheckpoint would be called after Core.Priority.SCORE\n+        \/\/ and the score would not be recorded.\n+        if (name != null) {\n+            Score score = new Score(name, ctx);\n+            synchronized (scores) {\n+                scores.put(name, score);\n+            }\n+            ctx.register(score);\n@@ -74,1 +81,0 @@\n-        ctx.register(score);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/GlobalContext.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n-                System.err.println(\"BEFORE\");\n","filename":"test\/jdk\/jdk\/crac\/engine\/ImageScoreTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}