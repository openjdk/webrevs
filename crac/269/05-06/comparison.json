{"files":[{"patch":"@@ -37,1 +37,1 @@\n-\/\/ The metrics are NOT retained after checkpoint (succesful or not),\n+\/\/ The metrics are NOT retained after checkpoint (successful or not),\n","filename":"src\/hotspot\/share\/include\/crlib\/crlib_image_score.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.crac.mirror.impl.OrderedContext;\n@@ -48,0 +49,1 @@\n+                setJdkResourceScore();\n@@ -62,0 +64,10 @@\n+    private static void setJdkResourceScore() {\n+        int resources = 0;\n+        for (var p : Core.Priority.values()) {\n+            if (p.getContext() instanceof OrderedContext<?> octx) {\n+                resources += octx.size();\n+            }\n+        }\n+        setScore(\"jdk.crac.internalResources\", resources);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Score.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-import java.util.HashMap;\n-import java.util.Map;\n-\n@@ -38,3 +35,2 @@\n-    \/\/ Scores are in this map only to keep a strong reference to the resource\n-    @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n-    private static final Map<String, Score> scores = new HashMap<>();\n+    \/\/ Strong reference to the resource\n+    private static Score scoreSingleton;\n@@ -76,2 +72,5 @@\n-            synchronized (scores) {\n-                scores.put(name, score);\n+            synchronized (GlobalContext.class) {\n+                \/\/ In JDK this should be called only once with a non-null name. If the implementation changes\n+                \/\/ let's turn scoreSingleton into a map.\n+                assert scoreSingleton == null;\n+                scoreSingleton = score;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/GlobalContext.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+# C\/R Exec library\n+\n+This is an implementation the C\/R API (see `src\/hotspot\/share\/include\/crlib\/`) that is used as Checkpoint\/Restore Engine for CRaC. Instead of implementing the mechanics on its own it interfaces with different binary utilities that perform the actual operations.\n+\n+## Extensions\n+\n+C\/R API defines a mechanism for extending the interactions with the engine beyond simple properties-style configuration and the actual checkpoint and restore. The functionality for these extensions is implemented directly in this library.\n+\n+### Image Constraints\n+\n+JVM uses the Image Constraints extension to store metadata about current architecture and CPU features. When the checkpoint is created, C\/R exec creates text file `tags` in the checkpoint directory with this format:\n+\n+```\n+label:cpu.arch=amd64\n+bitmap:cpu.features=f7fbfd051c8eef03cc03000000000000\n+```\n+\n+There is one line per tag created through the `crlib_image_constraints_t` interface, using either the `label:` or `bitmap:` prefix, followed by the tag name and `=`-separated value. In case of bitmap this is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits`) in memory order. The string in the example is recorded when JVM runs with:\n+\n+```\n+-XX:CPUFeatures=0x3ef8e1c05fdfbf7,0x3cc\n+```\n+\n+### Image Score\n+\n+Image Score records metadata that should assist with selecting the best image before restore. For each metric recorded through the `crlib_image_score_t` interface this file contains one line in format `<metric-name>=<floating-point-value>`, e.g.\n+\n+```\n+java.cls.loadedClasses=204.000000\n+vm.uptime=632.050484\n+```\n+\n+C\/R exec ensures that the metric names are unique. The floating point value separates decimal part with a dot (`.`), and negative values are permitted. If the metric name contains a newline character the implementation truncates this.\n+\n+### User Data\n+\n+While currently not utilized by the JVM, C\/R Exec can store custom data in the checkpoint directory. The filename uses the name passed to `crlib_user_data_t`, and the data is encoded as a string of two hexadecimal characters per byte (`<higher-4-bits><lower-4-bits`) in memory order. It is up to JVM to ensure that there would be no conflict with name used by another extension or engine implementation.\n+\n","filename":"src\/java.base\/share\/native\/libcrexec\/README.md","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -28,0 +28,2 @@\n+#include <utility>\n+\n@@ -39,1 +41,5 @@\n-template<typename F> class deferred {\n+template<typename F> class Deferred;\n+template<typename F> inline Deferred<F> defer(F&& f);\n+\n+template<typename F> class Deferred {\n+friend Deferred<F> defer<F>(F&& f);\n@@ -42,0 +48,1 @@\n+  inline explicit Deferred(F f): _f(f) {}\n@@ -43,2 +50,1 @@\n-  inline deferred(F f): _f(f) {}\n-  inline ~deferred() { _f(); }\n+  inline ~Deferred() { _f(); }\n@@ -47,2 +53,2 @@\n-template<typename F> deferred<F> defer(F f) {\n-  return deferred<F>(f);\n+template<typename F> inline Deferred<F> defer(F&& f) {\n+  return Deferred<F>(std::forward<F>(f));\n","filename":"src\/java.base\/share\/native\/libcrexec\/crexec.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+  memset(_keys, 0, sizeof(_keys[0]) * capacity);\n@@ -128,1 +129,1 @@\n-    if (strcmp(key, _keys[i]) == 0) {\n+    if (_keys[i] != nullptr && strcmp(key, _keys[i]) == 0) {\n@@ -133,1 +134,1 @@\n-    if (strcmp(key, _keys[i]) == 0) {\n+    if (_keys[i] != nullptr && strcmp(key, _keys[i]) == 0) {\n","filename":"src\/java.base\/share\/native\/libcrexec\/hashtable.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    const char* name_copy = strdup(name);\n+    char* name_copy = strdup(name);\n@@ -65,0 +65,6 @@\n+    \/\/ Truncate metric name\n+    char *newline = strchr(name_copy, '\\n');\n+    if (newline != nullptr) {\n+      *newline = '\\0';\n+      fprintf(stderr, CREXEC \"warning: metric name '%s' contains a newline, truncating to '%s'\\n\", name, name_copy);\n+    }\n","filename":"src\/java.base\/share\/native\/libcrexec\/image_score.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}