{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include <dirent.h>\n@@ -41,0 +42,1 @@\n+#include <sys\/types.h>\n@@ -53,0 +55,1 @@\n+static int g_tty_fd = -1;\n@@ -359,0 +362,1 @@\n+\n@@ -360,0 +364,8 @@\n+    \/\/ criuengine restorewait should not have foreground; pass it to the java process\n+    if (g_tty_fd >= 0) {\n+        pid_t current;\n+        while ((current = tcgetpgrp(g_tty_fd)) < 0 && errno == EINTR);\n+        if (current == getpid()) {\n+            while (tcsetpgrp(g_tty_fd, g_pid) && errno == EINTR);\n+        }\n+    }\n@@ -361,1 +373,3 @@\n-        kill(g_pid, sig);\n+        if (sig != SIGCHLD) {\n+            kill(g_pid, sig);\n+        }\n@@ -366,0 +380,17 @@\n+    \/\/ standard input and outputs go to \/dev\/null but\n+    \/\/ some open FDs can still tell which tty are we part of.\n+    DIR *dir = opendir(\"\/proc\/self\/fd\");\n+    int dfd = dirfd(dir);\n+    struct dirent *dp;\n+    while ((dp = readdir(dir))) {\n+        if (dp->d_name[0] == '.') {\n+            continue; \/\/ skip \".\" and \"..\"\n+        }\n+        int fd = atoi(dp->d_name);\n+        if (isatty(fd)) {\n+            g_tty_fd = fd;\n+            break;\n+        }\n+    }\n+    closedir(dir);\n+\n","filename":"src\/java.base\/unix\/native\/criuengine\/criuengine.c","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}