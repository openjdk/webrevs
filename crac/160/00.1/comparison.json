{"files":[{"patch":"@@ -50,0 +50,1 @@\n+    cpu_feature_active \\\n@@ -368,0 +369,22 @@\n+################################################################################\n+# Check if glibc CPU_FEATURE_ACTIVE is available on this platform.\n+#\n+AC_DEFUN_ONCE([JVM_FEATURES_CHECK_CPU_FEATURE_ACTIVE],\n+[\n+  JVM_FEATURES_CHECK_AVAILABILITY(cpu_feature_active, [\n+    AC_MSG_CHECKING([if glibc CPU_FEATURE_ACTIVE is supported])\n+    AC_COMPILE_IFELSE(\n+      [AC_LANG_PROGRAM([[#include <sys\/platform\/x86.h>]],\n+        [[int x = CPU_FEATURE_ACTIVE(SSE2);]])\n+      ],\n+      [\n+        AC_MSG_RESULT([yes])\n+      ],\n+      [\n+        AC_MSG_RESULT([no])\n+        AVAILABLE=false\n+      ]\n+    )\n+  ])\n+])\n+\n@@ -383,0 +406,1 @@\n+  JVM_FEATURES_CHECK_CPU_FEATURE_ACTIVE\n","filename":"make\/autoconf\/jvm-features.m4","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2017, 2022, Azul Systems, Inc. All rights reserved.\n@@ -27,0 +28,1 @@\n+#include \"classfile\/classLoader.hpp\"\n@@ -69,0 +71,1 @@\n+#include \"services\/writeableFlags.hpp\"\n@@ -88,0 +91,1 @@\n+# include <arpa\/inet.h>\n@@ -92,1 +96,0 @@\n-# include <sys\/stat.h>\n@@ -95,0 +98,1 @@\n+# include <sys\/sysmacros.h>\n@@ -112,1 +116,0 @@\n-# include <fcntl.h>\n@@ -121,0 +124,1 @@\n+# include <libgen.h>\n@@ -511,0 +515,5 @@\n+void os::Linux::initialize_processor_count() {\n+  set_processor_count((int) sysconf(_SC_NPROCESSORS_CONF));\n+  assert(processor_count() > 0, \"linux error\");\n+}\n+\n@@ -512,1 +521,1 @@\n-  set_processor_count((int)sysconf(_SC_NPROCESSORS_CONF));\n+  initialize_processor_count();\n@@ -525,1 +534,0 @@\n-  assert(processor_count() > 0, \"linux error\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -877,0 +878,4 @@\n+bool os::is_path_absolute(const char *path) {\n+  return (path && '\/' == path[0]);\n+}\n+\n@@ -899,0 +904,8 @@\n+int os::mkdir(const char *path) {\n+  return ::mkdir(path, 0700);\n+}\n+\n+int os::rmdir(const char *path) {\n+  return ::rmdir(path);\n+}\n+\n@@ -1368,0 +1381,4 @@\n+  initialize_time_counters();\n+}\n+\n+void os::Posix::initialize_time_counters(void) {\n@@ -1522,1 +1539,1 @@\n-  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec);\n+  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec) + crac::monotonic_time_offset();\n@@ -2075,0 +2092,30 @@\n+int os::exec_child_process_and_wait(const char *path, const char *argv[]) {\n+  char** env = os::get_environ();\n+\n+  pid_t pid = fork();\n+  if (pid == -1) {\n+    perror(\"cannot fork for crengine\");\n+    return -1;\n+  }\n+  if (pid == 0) {\n+    execve(path, (char* const*)argv, env);\n+    perror(\"execve\");\n+    exit(1);\n+  }\n+\n+  int status;\n+  int ret;\n+  do {\n+    ret = waitpid(pid, &status, 0);\n+  } while (ret == -1 && errno == EINTR);\n+\n+  if (ret == -1 || !WIFEXITED(status)) {\n+    return -1;\n+  }\n+  return WEXITSTATUS(status) == 0 ? 0 : -1;\n+}\n+\n+int os::execv(const char *path, const char *argv[]) {\n+  return ::execv(path, (char * const *)argv);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+  static void initialize_time_counters(void);\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -1547,0 +1548,27 @@\n+\/\/ NOTE: is_path_absolute() function implementation is mostly a copy from FileSystemSupport_md.c\n+\/\/ WinAPI has PathIsRelative() function for this purpose, however it causes linkage to Shlwapi.dll.\n+static int prefixLength(const char* path) {\n+    assert(1 == strlen(os::file_separator()), \"the file separator must be a single-char, not a string\");\n+    char c0, c1;\n+\n+    int n = (int)strlen(path);\n+    if (n == 0) return 0;\n+    c0 = path[0];\n+    c1 = (n > 1) ? path[1] : 0;\n+    if (c0 == *os::file_separator()) {\n+        if (c1 == *os::file_separator()) return 2;      \/* Absolute UNC pathname \"\\\\\\\\foo\" *\/\n+        return 1;                       \/* Drive-relative \"\\\\foo\" *\/\n+    }\n+    if (::isalpha(c0) && (c1 == ':')) {\n+        if ((n > 2) && (path[2] == *os::file_separator()))\n+            return 3;           \/* Absolute local pathname \"z:\\\\foo\" *\/\n+        return 2;                       \/* Directory-relative \"z:foo\" *\/\n+    }\n+    return 0;                   \/* Completely relative *\/\n+}\n+\n+bool os::is_path_absolute(const char *path) {\n+  int pl = prefixLength(path);\n+  return (((pl == 2) && (path[0] == *os::file_separator())) || (pl == 3));\n+}\n+\n@@ -4943,0 +4971,25 @@\n+int os::mkdir(const char *path) {\n+  errno_t err;\n+  wchar_t* wide_path = wide_abs_unc_path(path, err);\n+  if (wide_path == NULL) {\n+    errno = err;\n+    return -1;\n+  }\n+  int res = _wmkdir(wide_path);\n+  os::free(wide_path);\n+  return res;\n+}\n+\n+int os::rmdir(const char *path) {\n+  errno_t err;\n+  wchar_t* wide_path = wide_abs_unc_path(path, err);\n+  if (wide_path == NULL) {\n+    errno = err;\n+    return -1;\n+  }\n+  int res = _wrmdir(wide_path);\n+  os::free(wide_path);\n+  return res;\n+}\n+\n+\n@@ -5944,0 +5997,9 @@\n+int os::exec_child_process_and_wait(const char *path, const char *argv[]) {\n+  const int status = _spawnv(_P_WAIT, path, argv); \/\/ env is inherited by a child process\n+  return 0 == status ? 0 : -1;\n+}\n+\n+int os::execv(const char *path, const char *argv[]) {\n+  return _execv(path, argv);\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -747,0 +747,4 @@\n+  template(jdk_crac_Core,                          \"jdk\/crac\/Core\")                                               \\\n+  template(checkpointRestoreInternal_name,         \"checkpointRestoreInternal\")                                   \\\n+  template(checkpointRestoreInternal_signature,    \"(J)Ljava\/lang\/String;\")                                       \\\n+                                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1178,0 +1178,1 @@\n+  void wakeup_sleep() { _SleepEvent->unpark(); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -479,0 +479,2 @@\n+  static void   cleanup_memory(char* addr, size_t bytes);\n+\n@@ -634,0 +636,4 @@\n+  static int exec_child_process_and_wait(const char *path, const char *argv[]);\n+\n+  static int execv(const char *path, const char *argv[]);\n+\n@@ -693,0 +699,3 @@\n+  static int mkdir(const char *pathname);\n+  static int rmdir(const char *pathname);\n+\n@@ -696,0 +705,2 @@\n+  static bool           is_path_absolute(const char *path);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"runtime\/crac.hpp\"\n@@ -412,0 +413,15 @@\n+jint Threads::check_for_restore(JavaVMInitArgs* args) {\n+  if (Arguments::is_restore_option_set(args)) {\n+    if (!Arguments::parse_options_for_restore(args)) {\n+      return JNI_ERR;\n+    }\n+    crac::restore();\n+    if (!CRaCIgnoreRestoreIfUnavailable) {\n+      \/\/ FIXME switch to unified hotspot logging\n+      warning(\"cannot restore\");\n+      return JNI_ERR;\n+    }\n+  }\n+  return JNI_OK;\n+}\n+\n@@ -415,0 +431,2 @@\n+  if (check_for_restore(args) != JNI_OK) return JNI_ERR;\n+\n@@ -479,0 +497,2 @@\n+  crac::vm_create_start();\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2478,0 +2478,1 @@\n+  declare_constant(JVMFlagOrigin::CRAC_RESTORE)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,0 +72,4 @@\n+#if INCLUDE_SERVICES && !defined(_WINDOWS)\n+#include \"attachListener_posix.hpp\"\n+#include \"posixAttachOperation.hpp\"\n+#endif \/\/ INCLUDE_SERVICES && !defined(_WINDOWS)\n@@ -154,0 +158,2 @@\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<CheckpointDCmd>(full_export, true,false));\n+\n@@ -1100,0 +1106,26 @@\n+void CheckpointDCmd::execute(DCmdSource source, TRAPS) {\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_crac_Core(),\n+                                                 true, CHECK);\n+  JavaValue result(T_OBJECT);\n+  JavaCallArguments args;\n+  args.push_long((jlong)output());\n+  JavaCalls::call_static(&result, k,\n+                         vmSymbols::checkpointRestoreInternal_name(),\n+                         vmSymbols::checkpointRestoreInternal_signature(), &args, CHECK);\n+  oop str = result.get_oop();\n+  if (str != NULL) {\n+    char* out = java_lang_String::as_utf8_string(str);\n+    if (out[0] != '\\0') {\n+      outputStream* stream = output();\n+#if INCLUDE_SERVICES && !defined(_WINDOWS)\n+      assert(PosixAttachListener::get_current_op(), \"should exist\");\n+      if (PosixAttachListener::get_current_op()->is_effectively_completed()) {\n+        stream = tty;\n+      }\n+#endif \/\/ INCLUDE_SERVICES\n+      stream->print_cr(\"An exception during a checkpoint operation:\");\n+      stream->print(\"%s\", out);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.Core;\n+import jdk.internal.crac.JDKResource;\n@@ -334,0 +338,10 @@\n+            @Override\n+            public <T> Reference<? extends T> pollReferenceQueue(ReferenceQueue<T> queue, long timeout) throws InterruptedException {\n+                return queue.poll(timeout);\n+            }\n+\n+            @Override\n+            public void wakeupReferenceQueue(ReferenceQueue<?> queue) {\n+                queue.wakeup();\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.WeakHashMap;\n@@ -39,0 +40,4 @@\n+import jdk.internal.crac.Core;\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -45,1 +50,1 @@\n-class JarFileFactory implements URLJarFile.URLJarFileCloseController {\n+class JarFileFactory implements URLJarFile.URLJarFileCloseController, jdk.internal.crac.JDKResource {\n@@ -55,1 +60,3 @@\n-    private JarFileFactory() { }\n+    private JarFileFactory() {\n+        Core.Priority.NORMAL.getContext().register(this);\n+    }\n@@ -270,0 +277,25 @@\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        \/\/ Need to clear cached entries that are held by the factory only (e.g.\n+        \/\/ after JarURLInputStream.close with useCaches == true).  Creating a\n+        \/\/ temporary weak cache and triggering GC to get know JARs really in\n+        \/\/ use.\n+        synchronized (instance) {\n+            WeakHashMap<JarFile, URL> weakMap = new WeakHashMap<>(urlCache);\n+            fileCache.clear();\n+            urlCache.clear();\n+\n+            System.gc();\n+\n+            weakMap.forEach((JarFile jarFile, URL url) -> {\n+                String key = urlKey(url);\n+                urlCache.put(jarFile, url);\n+                fileCache.put(key, jarFile);\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -193,1 +193,0 @@\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixDomainSockets.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -115,0 +115,2 @@\n+# JDK-8310862 was closed but we're still seeing errors with the updated test\n+runtime\/ClassInitErrors\/TestStackOverflowDuringInit.java 8310862 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.crac.management.CRaCMXBean;\n+import jdk.test.lib.Container;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test NanoTimeTest\n+ * @requires (os.family == \"linux\")\n+ * @requires container.support\n+ * @library \/test\/lib\n+ * @build NanoTimeTest\n+ * @run driver jdk.test.lib.crac.CracTest      0 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 true\n+ * @run driver jdk.test.lib.crac.CracTest -86400 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 false\n+ * @run driver jdk.test.lib.crac.CracTest -86400 false\n+ *\/\n+public class NanoTimeTest implements CracTest {\n+    @CracTestArg(0)\n+    long monotonicOffset;\n+\n+    @CracTestArg(1)\n+    boolean changeBootId;\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+        CracBuilder builder = new CracBuilder();\n+        Path bootIdFile = Files.createTempFile(\"NanoTimeTest-\", \"-boot_id\");\n+\n+        String imageName = Common.imageName(\"system-nanotime\");\n+\n+        try {\n+            \/\/ TODO: use more official image\n+            builder.withBaseImage(\"ghcr.io\/crac\/test-base\", \"latest\")\n+                    .dockerOptions(\"-v\", bootIdFile + \":\/fake_boot_id\")\n+                    .inDockerImage(imageName);\n+\n+            Files.writeString(bootIdFile, \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\n\");\n+            \/\/ We need to preload the library before checkpoint\n+            builder.doCheckpoint(Container.ENGINE_COMMAND, \"exec\",\n+                    \"-e\", \"LD_PRELOAD=\/opt\/path-mapping-quiet.so\",\n+                    \"-e\", \"PATH_MAPPING=\/proc\/sys\/kernel\/random\/boot_id:\/fake_boot_id\",\n+                    CracBuilder.CONTAINER_NAME,\n+                    \/\/ In case we are trying to use negative monotonic offset we could\n+                    \/\/ run into situation where we'd set it to negative value (prohibited).\n+                    \/\/ Therefore, we'll rather offset it to the future before checkpoint\n+                    \/\/ and set to 0 for restore.\n+                    \"unshare\", \"--fork\", \"--time\", \"--monotonic\", String.valueOf(Math.max(-monotonicOffset, 0)),\n+                    CracBuilder.DOCKER_JAVA);\n+\n+            if (changeBootId) {\n+                Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\\n\");\n+            }\n+\n+            builder.doRestore(Container.ENGINE_COMMAND, \"exec\", CracBuilder.CONTAINER_NAME,\n+                    \"unshare\", \"--fork\", \"--time\", \"--boottime\", \"86400\", \"--monotonic\", String.valueOf(Math.max(monotonicOffset, 0)),\n+                    CracBuilder.DOCKER_JAVA);\n+        } finally {\n+            builder.ensureContainerKilled();\n+            assertTrue(bootIdFile.toFile().delete());\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        System.out.println(\"Expected offset: \" + monotonicOffset);\n+        \/\/ We use uptime to assert that changing the clock worked\n+        long boottimeBefore = readSystemUptime();\n+\n+        long before = System.nanoTime();\n+        Core.checkpointRestore();\n+        long after = System.nanoTime();\n+        System.out.println(\"Before: \" + before);\n+        System.out.println(\"After: \" + after);\n+        assertLTE(before, after, \"After < Before\");\n+        if (changeBootId || monotonicOffset <= 0) {\n+            \/\/ Even though we have shifted the monotic offset by a day the difference\n+            \/\/ is adjusted by difference between wall clock time before and after;\n+            \/\/ the difference in monotonic time is considered \"random\"\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(1), \"After too late\");\n+        } else {\n+            assertGT(after, before + TimeUnit.HOURS.toNanos(1), \"After too early\");\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(25), \"After too late\");\n+        }\n+        long boottimeAfter = readSystemUptime();\n+        assertGTE(boottimeAfter, boottimeBefore + 86_400_000, \"Boottime was not changed\");\n+        RuntimeMXBean runtimeMX = ManagementFactory.getRuntimeMXBean();\n+        assertGTE(runtimeMX.getUptime(), 0L, \"VM Uptime is negative!\");\n+        CRaCMXBean cracBean = CRaCMXBean.getCRaCMXBean();\n+        assertLT(cracBean.getUptimeSinceRestore(), 60_000L);\n+        assertGTE(cracBean.getUptimeSinceRestore(), 0L);\n+    }\n+\n+    private long readSystemUptime() throws IOException {\n+        String uptimeStr = Files.readString(Path.of(\"\/proc\/uptime\"));\n+        String[] parts = uptimeStr.split(\" \");\n+        return (long)(Double.parseDouble(parts[0]) * 1000);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,221 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Container;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test TimedWaitingTest checks whether timed waiting does not block when monotonic time runs backwards\n+ * @requires (os.family == \"linux\")\n+ * @requires container.support\n+ * @library \/test\/lib\n+ * @build TimedWaitingTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class TimedWaitingTest implements CracTest {\n+    public static final String WAITING = \"WAITING\";\n+    public static final int WAIT_TIME_MILLIS = 1000;\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        String imageName = Common.imageName(\"timed-waiting\");\n+\n+        CracBuilder builder = new CracBuilder();\n+        Path bootIdFile = Files.createTempFile(\"NanoTimeTest-\", \"-boot_id\");\n+        try {\n+            builder.withBaseImage(\"ghcr.io\/crac\/test-base\", \"latest\")\n+                    .dockerOptions(\"-v\", bootIdFile + \":\/fake_boot_id\")\n+                    .inDockerImage(imageName);\n+            builder.captureOutput(true);\n+\n+            Files.writeString(bootIdFile, \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\n\");\n+            \/\/ We need to preload the library before checkpoint\n+            CracProcess checkpointed = builder.startCheckpoint(Container.ENGINE_COMMAND, \"exec\",\n+                    \"-e\", \"LD_PRELOAD=\/opt\/path-mapping-quiet.so\",\n+                    \"-e\", \"PATH_MAPPING=\/proc\/sys\/kernel\/random\/boot_id:\/fake_boot_id\",\n+                    CracBuilder.CONTAINER_NAME,\n+                    \"unshare\", \"--fork\", \"--time\", \"--monotonic\", \"86400\", \"--boottime\", \"86400\",\n+                    CracBuilder.DOCKER_JAVA);\n+            CountDownLatch latch = new CountDownLatch(1);\n+            checkpointed.watch(out -> {\n+                System.out.println(out);\n+                if (WAITING.equals(out)) {\n+                    latch.countDown();\n+                }\n+            }, System.err::println);\n+            latch.await();\n+            builder.checkpointViaJcmd();\n+            checkpointed.waitForCheckpointed();\n+\n+            Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\\n\");\n+\n+            CracProcess restore = builder.startRestore();\n+            CompletableFuture<Void> future = new CompletableFuture<>();\n+            new Thread(() -> {\n+                try {\n+                    restore.waitForSuccess();\n+                    System.err.print(restore.outputAnalyzer().getStderr());\n+                    future.complete(null);\n+                } catch (Throwable t) {\n+                    future.completeExceptionally(t);\n+                }\n+            }).start();\n+            future.get(10, TimeUnit.SECONDS);\n+        } finally {\n+            builder.ensureContainerKilled();\n+            assertTrue(bootIdFile.toFile().delete());\n+        }\n+    }\n+\n+    private interface Task {\n+        void run() throws InterruptedException;\n+    }\n+\n+    private static void timedWait(Task task, List<Throwable> exceptions, boolean canReturnEarly) {\n+        try {\n+            long before = System.currentTimeMillis();\n+            task.run();\n+            long after = System.currentTimeMillis();\n+            if (after - before < WAIT_TIME_MILLIS) {\n+                if (canReturnEarly) {\n+                    \/\/ Non-critical\n+                    System.err.println(Thread.currentThread().getName() + \" took: \" + (after - before) + \" ms\");\n+                } else {\n+                    exceptions.add(new IllegalStateException(\n+                            Thread.currentThread().getName() + \" was too short: \" + (after - before) + \" ms\"));\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            exceptions.add(unexpectedInterrupt(e));\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        List<Throwable> exceptions = Collections.synchronizedList(new ArrayList<>());\n+        List<Thread> threads = new ArrayList<>();\n+        CountDownLatch latch = new CountDownLatch(6);\n+\n+        startThread(\"Thread.sleep\", threads, latch, () -> {\n+            timedWait(() -> Thread.sleep(WAIT_TIME_MILLIS), exceptions, false);\n+        });\n+\n+        startThread(\"Thread.join\", threads, latch, () -> {\n+            Thread daemon = new Thread(() -> {\n+                try {\n+                    Thread.sleep(86_400_000);\n+                } catch (InterruptedException e) {\n+                    exceptions.add(unexpectedInterrupt(e));\n+                }\n+            }, \"inifinite daemon\");\n+            daemon.setDaemon(true);\n+            daemon.start();\n+            timedWait(() -> daemon.join(WAIT_TIME_MILLIS), exceptions, false);\n+        });\n+\n+        startThread(\"Object.wait\", threads, latch, () -> {\n+            synchronized (this) {\n+                timedWait(() -> this.wait(WAIT_TIME_MILLIS), exceptions, true);\n+            }\n+        });\n+\n+        ReentrantLock lock = new ReentrantLock();\n+        lock.lock();\n+        startThread(\"ReentrantLock.tryLock\", threads, latch, () -> {\n+            timedWait(() -> {\n+                if (lock.tryLock(WAIT_TIME_MILLIS, TimeUnit.MILLISECONDS)) {\n+                    exceptions.add(new AssertionError(\"Should not be able to lock\"));\n+                }\n+            }, exceptions, false);\n+        });\n+\n+        startThread(\"Condition.await\", threads, latch, () -> {\n+            ReentrantLock lock2 = new ReentrantLock();\n+            Condition condition = lock2.newCondition();\n+            lock2.lock();\n+            \/\/noinspection ResultOfMethodCallIgnored\n+            timedWait(() -> condition.await(WAIT_TIME_MILLIS, TimeUnit.MILLISECONDS), exceptions, true);\n+        });\n+\n+        startThread(\"LockSupport.parkUntil\", threads, latch, () -> {\n+            timedWait(() -> LockSupport.parkUntil(System.currentTimeMillis() + WAIT_TIME_MILLIS),\n+                    exceptions, true);\n+        });\n+\n+        assertEquals(latch.getCount(), (long) threads.size());\n+        do {\n+            Thread.yield();\n+            threads.stream().forEach(t -> {\n+                System.out.printf(\"%s: %s%n\", t.getName(), t.getState());\n+            });\n+        } while (!threads.stream().map(Thread::getState).allMatch(Thread.State.TIMED_WAITING::equals));\n+        System.out.println(WAITING);\n+        \/\/ Make sure none of the threads completed yet\n+        assertEquals(latch.getCount(), (long) threads.size());\n+        try {\n+            latch.await();\n+        } catch (InterruptedException e) {\n+            fail(\"Should not get interrupted\", e);\n+        }\n+        assertEquals(Collections.emptyList(), exceptions);\n+    }\n+\n+    private static void startThread(String name, List<Thread> threads, CountDownLatch latch, Runnable runnable) {\n+        Thread thread = new Thread(() -> {\n+            try {\n+                runnable.run();\n+            } finally {\n+                latch.countDown();\n+            }\n+        }, name);\n+        threads.add(thread);\n+        thread.start();\n+    }\n+\n+    private static AssertionError unexpectedInterrupt(InterruptedException e) {\n+        return new AssertionError(Thread.currentThread().getName() + \" interrupted\", e);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/TimedWaitingTest.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.*;\n+\n+\/*\n+ * @test\n+ * @summary Test if InetAddress cache is flushed after checkpoint\/restore\n+ * @requires (os.family == \"linux\")\n+ * @requires container.support\n+ * @library \/test\/lib\n+ * @build ResolveTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class ResolveTest implements CracTest {\n+    public static final String TEST_HOSTNAME = \"some.test.hostname.example.com\";\n+\n+    @CracTestArg(value = 0, optional = true)\n+    String ip;\n+\n+    @CracTestArg(value = 1, optional = true)\n+    String checkFile;\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        String imageName = Common.imageName(\"inet-address\");\n+\n+        CracBuilder builder = new CracBuilder()\n+                .inDockerImage(imageName).dockerOptions(\"--add-host\", TEST_HOSTNAME + \":192.168.12.34\")\n+                .captureOutput(true)\n+                .args(CracTest.args(TEST_HOSTNAME, \"\/second-run\"));\n+\n+        try {\n+            CompletableFuture<?> firstOutputFuture = new CompletableFuture<Void>();\n+            builder.vmOption(\"-XX:CRaCMinPid=100\");\n+            CracProcess checkpointed = builder.startCheckpoint().watch(line -> {\n+                System.out.println(\"OUTPUT: \" + line);\n+                if (line.equals(\"192.168.12.34\")) {\n+                    firstOutputFuture.complete(null);\n+                }\n+            }, error -> {\n+                System.err.println(\"ERROR: \" + error);\n+                firstOutputFuture.cancel(false);\n+            });\n+            firstOutputFuture.get(10, TimeUnit.SECONDS);\n+            builder.checkpointViaJcmd();\n+            checkpointed.waitForCheckpointed();\n+\n+            builder.clearVmOptions();\n+            builder.recreateContainer(imageName,\n+                    \"--add-host\", TEST_HOSTNAME + \":192.168.56.78\",\n+                    \"--volume\", Utils.TEST_CLASSES + \":\/second-run\"); \/\/ any file\/dir suffices\n+\n+\n+            builder.startRestore().outputAnalyzer()\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"192.168.56.78\");\n+        } finally {\n+            builder.ensureContainerKilled();\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        if (ip == null || checkFile == null) {\n+            System.err.println(\"Args: <ip address> <check file path>\");\n+            return;\n+        }\n+        printAddress(ip);\n+        while (!Files.exists(Path.of(checkFile))) {\n+            try {\n+                \/\/noinspection BusyWait\n+                Thread.sleep(100);\n+            } catch (InterruptedException e) {\n+                System.err.println(\"Interrupted!\");\n+                return;\n+            }\n+        }\n+        printAddress(ip);\n+    }\n+\n+    private static void printAddress(String hostname) {\n+        try {\n+            InetAddress address = InetAddress.getByName(hostname);\n+            \/\/ we will assume IPv4 address\n+            byte[] bytes = address.getAddress();\n+            System.out.print(bytes[0] & 0xFF);\n+            for (int i = 1; i < bytes.length; ++i) {\n+                System.out.print('.');\n+                System.out.print(bytes[i] & 0xFF);\n+            }\n+            System.out.println();\n+        } catch (UnknownHostException e) {\n+            System.out.println();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/java\/net\/InetAddress\/ResolveTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}