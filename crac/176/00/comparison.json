{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/defaultStream.hpp\"\n@@ -426,0 +427,4 @@\n+  if (defaultStream::instance->is_fd_used(fd)) {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -195,0 +195,21 @@\n+void CompileLog::before_checkpoint() {\n+  \/\/ Remove only output stream, don't destroy the CompileLog itself.\n+  delete _out;\n+  _out = NULL;\n+  unlink(_file); \/\/ like in CompileLog dtor\n+  \/\/ _file_end: do not touch, mark_file_end calculates it based on the actual file size.\n+}\n+\n+void CompileLog::after_restore() {\n+  FILE* fp = os::fopen(_file, \"wt\");\n+  _out = new(mtCompiler) fileStream(fp, true);\n+}\n+\n+void CompileLog::swap_streams_on_restore() {\n+  CompileLog* log = _first;\n+  while (log != nullptr) {\n+    log->after_restore();\n+    log = log->_next;\n+  }\n+}\n+\n@@ -308,0 +329,40 @@\n+void CompileLog::finish_log_on_checkpoint(outputStream* file) {\n+  char buf[4 * K];\n+  int buflen = sizeof(buf);\n+  CompileLog* log = _first;\n+  file->print_raw(\"<compilation_log closed at a checkpoint >\");\n+\n+  while (log != nullptr) {\n+    log->flush();\n+    const char* partial_file = log->file();\n+    int partial_fd = open(partial_file, O_RDONLY);\n+    if (partial_fd != -1) {\n+      \/\/ print\/print_cr may need to allocate large stack buffer to format\n+      \/\/ strings, here we use snprintf() and print_raw() instead.\n+      file->print_raw(\"<compilation_log thread='\");\n+      jio_snprintf(buf, buflen, UINTX_FORMAT, log->thread_id());\n+      file->print_raw(buf);\n+      file->print_raw_cr(\"'>\");\n+\n+      size_t nr; \/\/ number read into buf from partial log\n+      \/\/ In case of unsuccessful completion, read returns -1.\n+      ssize_t bytes_read;\n+      \/\/ Copy data up to the end of the last <event> element:\n+      julong to_read = log->_file_end;\n+      while (to_read > 0) {\n+        if (to_read < (julong)buflen)\n+              nr = (size_t)to_read;\n+        else  nr = buflen;\n+        bytes_read = ::read(partial_fd, buf, (int)nr);\n+        if (bytes_read <= 0) break;\n+        nr = bytes_read;\n+        to_read -= (julong)nr;\n+        file->write(buf, nr);\n+      }\n+      ::close(partial_fd);\n+    }\n+    log->before_checkpoint();\n+    log = log->_next;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/compiler\/compileLog.cpp","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -85,0 +85,4 @@\n+  \/\/CRaC purposes\n+  void after_restore();\n+  void before_checkpoint();\n+\n@@ -98,0 +102,2 @@\n+  static void finish_log_on_checkpoint(outputStream* out);\n+  static void swap_streams_on_restore();\n","filename":"src\/hotspot\/share\/compiler\/compileLog.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -492,0 +492,4 @@\n+  jlong the_time = os::javaTimeMillis();\n+  LogFileOutput::set_file_name_parameters(the_time);\n+  FREE_C_HEAP_ARRAY(char, _file_name);\n+  _file_name = make_file_name(_name + strlen(Prefix), _pid_str, _vm_start_time_str);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4020,0 +4020,7 @@\n+\n+void Arguments::reset_for_crac_restore() {\n+  if (!FLAG_IS_DEFAULT(LogVMOutput)){\n+    FLAG_SET_DEFAULT(LogVMOutput, false);\n+    FLAG_SET_DEFAULT(LogFile, nullptr);\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -454,0 +454,2 @@\n+  \/\/ Reset LogVMoutput to default values\n+  static void reset_for_crac_restore();\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"utilities\/defaultStream.hpp\"\n@@ -311,0 +312,12 @@\n+class DefaultStreamHandler {\n+public:\n+  DefaultStreamHandler() {\n+    defaultStream::instance->before_checkpoint();\n+  }\n+\n+  ~DefaultStreamHandler() {\n+    defaultStream::instance->after_restore();\n+  }\n+};\n+\n+\n@@ -314,0 +327,1 @@\n+  DefaultStreamHandler defStreamHandler;\n@@ -354,1 +368,1 @@\n-\n+  Arguments::reset_for_crac_restore();\n@@ -376,0 +390,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1018,1 +1018,1 @@\n-  product(bool, LogVMOutput, false, DIAGNOSTIC,                             \\\n+  product(bool, LogVMOutput, false, DIAGNOSTIC | RESTORE_SETTABLE,          \\\n@@ -1021,1 +1021,1 @@\n-  product(ccstr, LogFile, nullptr, DIAGNOSTIC,                              \\\n+  product(ccstr, LogFile, nullptr, DIAGNOSTIC | RESTORE_SETTABLE,           \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compileLog.hpp\"\n@@ -46,1 +47,1 @@\n-  void finish_log();\n+  void finish_log(bool is_checkpoint = false);\n@@ -86,0 +87,20 @@\n+  bool is_fd_used(int fd) {\n+    return has_log_file() ? fd == _log_file->get_fd() : false;\n+  }\n+  void before_checkpoint() {\n+    if (has_log_file()){\n+      if (xtty != nullptr) {\n+        ttyLocker ttyl;\n+        xtty->begin_elem(\"crac_checkpoint_vm\");\n+        xtty->stamp();\n+        xtty->end_elem();\n+        xtty = nullptr;\n+      }\n+      finish_log(true);\n+    }\n+  }\n+  void after_restore() {\n+    init();\n+    CompileLog::swap_streams_on_restore();\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/defaultStream.hpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-void defaultStream::finish_log() {\n+void defaultStream::finish_log(bool is_checkpoint) {\n@@ -801,0 +801,3 @@\n+  if (is_checkpoint) {\n+    CompileLog::finish_log_on_checkpoint(xs->out());\n+  } else {\n@@ -802,1 +805,2 @@\n-  CompileLog::finish_log(xs->out());  \/\/ write compile logging, if any, now\n+    CompileLog::finish_log(xs->out());  \/\/ write compile logging, if any, now\n+  }\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -302,0 +302,1 @@\n+  int get_fd() { return fileno(_file); }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.internal.crac.JDKFdResource;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracEngine;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test Check the -XX:+LogVMOutput together with -XX:+LogCompilation flag on simulated crac engine\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @build LoggingVMlogOpenSimulTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class LoggingVMlogOpenSimulTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        Path logPathO = Files.createTempFile(getClass().getName(), \"-vmlog1.txt\");\n+        try {\n+            CracBuilder builder = new CracBuilder().captureOutput(true);\n+            builder.engine(CracEngine.SIMULATE);\n+            builder.vmOption(\"-Xcomp\");\n+            builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+            builder.vmOption(\"-XX:+LogVMOutput\");\n+            builder.vmOption(\"-XX:+LogCompilation\");\n+            builder.vmOption(\"-XX:LogFile=\" + logPathO);\n+            var oa = builder.startCheckpoint().waitForSuccess().outputAnalyzer();\n+            oa.shouldContain(RESTORED_MESSAGE);\n+            assertNotEquals(0, Files.size(logPathO));\n+        } finally {\n+            Files.deleteIfExists(logPathO);\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingCompilationSimulTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.crac.Core;\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertNotEquals;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+\/**\n+ * @test Checkpoint with -XX:+LogVMOutput and -XX:+LogCompilation\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @requires (os.family == \"linux\")\n+ * @build LoggingCompilationTest\n+ * @run driver jdk.test.lib.crac.CracTest true  false\n+ * @run driver jdk.test.lib.crac.CracTest false true\n+ * @run driver jdk.test.lib.crac.CracTest true  true\n+ *\/\n+public class LoggingCompilationTest implements CracTest {\n+\n+    @CracTestArg(0)\n+    boolean vmLogOnCheckpoint;\n+\n+    @CracTestArg(1)\n+    boolean vmLogOnRestore;\n+\n+    @Override\n+    public void test() throws Exception {\n+        Path logPathO = Files.createTempFile(getClass().getName(), \"-vmlog1.txt\");\n+        Path logPathR = Files.createTempFile(getClass().getName(), \"-vmlog2.txt\");\n+        Files.deleteIfExists(logPathR);\n+        try {\n+            CracBuilder builder = new CracBuilder();\n+            if (vmLogOnCheckpoint) {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-XX:+LogVMOutput\");\n+                builder.vmOption(\"-Xcomp\");\n+                builder.vmOption(\"-XX:+LogCompilation\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathO);\n+            }\n+            builder.startCheckpoint().waitForCheckpointed();\n+            if (vmLogOnCheckpoint) {\n+                assertNotEquals(0L, Files.size(logPathO));\n+                Files.deleteIfExists(logPathO);\n+            } else {\n+                assertEquals(0L, Files.size(logPathO));\n+            }\n+            builder.clearVmOptions();\n+            if (vmLogOnRestore) {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-Xcomp\");\n+                builder.vmOption(\"-XX:+LogVMOutput\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathR);\n+            }\n+            var oa =builder.captureOutput(true).doRestore().outputAnalyzer()\n+                    .shouldNotContain(\"CRaC closing file descriptor\")\n+                    .shouldNotContain(\"Could not flush log\")\n+                    .shouldNotContain(\"Could not close log file\")\n+                    .shouldNotContain(\"Bad file descriptor\")\n+                    .shouldContain(RESTORED_MESSAGE);\n+        } finally {\n+            if (vmLogOnRestore) {\n+                assertTrue(Files.exists(logPathR));\n+            } else {\n+                assertFalse(Files.exists(logPathO));\n+                assertFalse(Files.exists(logPathR));\n+            }\n+            Files.deleteIfExists(logPathO);\n+            Files.deleteIfExists(logPathR);\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingCompilationTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.internal.crac.JDKFdResource;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracEngine;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test Check the -XX:+LogVMOutput flag on simulated crac engine\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @build LoggingVMlogOpenSimulTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class LoggingVMlogOpenSimulTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        Path logPathO = Files.createTempFile(getClass().getName(), \"-vmlog1.txt\");\n+        try {\n+            CracBuilder builder = new CracBuilder().captureOutput(true);\n+            builder.engine(CracEngine.SIMULATE);\n+            builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+            builder.vmOption(\"-XX:+LogVMOutput\");\n+            builder.vmOption(\"-XX:LogFile=\" + logPathO);\n+            var oa = builder.startCheckpoint().waitForSuccess().outputAnalyzer();\n+            oa.shouldContain(RESTORED_MESSAGE);\n+            assertNotEquals(0, Files.size(logPathO));\n+        } finally {\n+            Files.deleteIfExists(logPathO);\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingVMlogOpenSimulTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.internal.crac.JDKFdResource;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @requires (os.family == \"linux\")\n+ * @build LoggingVMlogOpenTest\n+ * @run driver jdk.test.lib.crac.CracTest true  false\n+ * @run driver jdk.test.lib.crac.CracTest false true\n+ * @run driver jdk.test.lib.crac.CracTest true  true\n+ *\/\n+public class LoggingVMlogOpenTest implements CracTest {\n+\n+    @CracTestArg(0)\n+    boolean vmLogOnCheckpoint;\n+\n+    @CracTestArg(1)\n+    boolean vmLogOnRestore;\n+\n+    @Override\n+    public void test() throws Exception {\n+        Path logPathO = Files.createTempFile(getClass().getName(), \"-vmlog1.txt\");\n+        Path logPathR = Files.createTempFile(getClass().getName(), \"-vmlog2.txt\");\n+        Files.deleteIfExists(logPathR);\n+        try {\n+            CracBuilder builder = new CracBuilder();\n+            if (vmLogOnCheckpoint) {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-XX:+LogVMOutput\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathO);\n+            }\n+            builder.startCheckpoint().waitForCheckpointed();\n+            if (vmLogOnCheckpoint) {\n+                assertNotEquals(0L, Files.size(logPathO));\n+                Files.deleteIfExists(logPathO);\n+            } else {\n+                assertEquals(0L, Files.size(logPathO));\n+            }\n+            builder.clearVmOptions();\n+            if (vmLogOnRestore) {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-XX:+LogVMOutput\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathR);\n+            }\n+            var oa =builder.captureOutput(true).doRestore().outputAnalyzer()\n+                    .shouldNotContain(\"CRaC closing file descriptor\")\n+                    .shouldNotContain(\"Could not flush log\")\n+                    .shouldNotContain(\"Could not close log file\")\n+                    .shouldNotContain(\"Bad file descriptor\")\n+                    .shouldContain(RESTORED_MESSAGE);\n+        } finally {\n+            if (vmLogOnRestore) {\n+                assertTrue(Files.exists(logPathR));\n+            } else {\n+                assertFalse(Files.exists(logPathO));\n+                assertFalse(Files.exists(logPathR));\n+            }\n+            Files.deleteIfExists(logPathO);\n+            Files.deleteIfExists(logPathR);\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingVMlogOpenTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.internal.crac.JDKFdResource;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+import jdk.test.lib.process.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @requires (os.family == \"linux\")\n+ * @build LoggingVMlogOpenTestNegative\n+ * @run driver jdk.test.lib.crac.CracTest true\n+ * @run driver jdk.test.lib.crac.CracTest false\n+ *\/\n+public class LoggingVMlogOpenTestNegative implements CracTest {\n+\n+    @CracTestArg(0)\n+    boolean scenario1;\n+\n+    @Override\n+    public void test() throws Exception {\n+        Path logPathO = Files.createTempFile(getClass().getName(), \"-vmlog1.txt\");\n+        Path logPathR = Files.createTempFile(getClass().getName(), \"-vmlog2.txt\");\n+        Files.deleteIfExists(logPathR);\n+        try {\n+            CracBuilder builder = new CracBuilder();\n+            builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+            builder.vmOption(\"-XX:+LogVMOutput\");\n+            builder.vmOption(\"-XX:LogFile=\" + logPathO);\n+            builder.startCheckpoint().waitForCheckpointed();\n+\n+            assertNotEquals(0L, Files.size(logPathO));\n+            Files.deleteIfExists(logPathO);\n+\n+            builder.clearVmOptions();\n+            if (scenario1) {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathR);\n+                builder.doRestore();\n+            } else {\n+                builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+                builder.vmOption(\"-XX:+LogCompilation\");\n+                builder.vmOption(\"-XX:LogFile=\" + logPathR);\n+                OutputAnalyzer oa = builder.captureOutput(true).startRestore().outputAnalyzer().shouldContain(\"cannot be set during restore\").shouldNotHaveExitValue(0);\n+            }\n+        } finally {\n+            assertFalse(Files.exists(logPathO));\n+            assertFalse(Files.exists(logPathR));\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingVMlogOpenTestNegative.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}