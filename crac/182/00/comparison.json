{"files":[{"patch":"@@ -44,2 +44,2 @@\n-void crac::initialize_time_counters() {\n-  os::Posix::initialize_time_counters();\n+void crac::reset_time_counters() {\n+  os::Posix::reset_time_counters();\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+static jlong restore_time_count = 0;\n@@ -1386,0 +1387,5 @@\n+  restore_time_count = initial_time_count;\n+}\n+\n+void os::Posix::reset_time_counters(void) {\n+  restore_time_count = javaTimeNanos();\n@@ -1568,0 +1574,4 @@\n+jlong os::elapsed_counter_since_restore() {\n+  return os::javaTimeNanos() - restore_time_count;\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+  static void reset_time_counters(void);\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-void crac::initialize_time_counters() {\n-  os::win32::initialize_performance_counter();\n+void crac::reset_time_counters() {\n+  os::win32::reset_performance_counters();\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -814,0 +814,1 @@\n+static jlong restore_performance_count;\n@@ -821,1 +822,0 @@\n-\n@@ -826,0 +826,5 @@\n+jlong os::elapsed_counter_since_restore() {\n+  LARGE_INTEGER count;\n+  QueryPerformanceCounter(&count);\n+  return count.QuadPart - restore_performance_count;\n+}\n@@ -1111,0 +1116,1 @@\n+  restore_performance_count = initial_performance_count;\n@@ -1113,0 +1119,9 @@\n+void os::win32::reset_performance_counters() {\n+  LARGE_INTEGER count;\n+  QueryPerformanceFrequency(&count);\n+  \/\/ Until we perform a real C\/R on Windows this is safe, performance frequency\n+  \/\/ should be the same. With real C\/R the counters will be probably incomparable.\n+  assert(performance_frequency == count.QuadPart, \"Performance frequency changed\");\n+  QueryPerformanceCounter(&count);\n+  restore_performance_count = count.QuadPart;\n+}\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+  static void   reset_performance_counters();\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-    crac::initialize_time_counters();\n+    crac::reset_time_counters();\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  static void initialize_time_counters();\n+  static void reset_time_counters();\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,0 +293,2 @@\n+  \/\/ Before restore returns the same value as elapsed_counter()\n+  static jlong elapsed_counter_since_restore();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -919,1 +919,1 @@\n-    return Management::ticks_to_ms(os::elapsed_counter());\n+    return Management::ticks_to_ms(os::elapsed_counter_since_restore());\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.internal.perf.Perf;\n@@ -41,0 +42,1 @@\n+ * @modules java.base\/jdk.internal.perf:+open\n@@ -55,1 +57,1 @@\n-        CracBuilder builder = new CracBuilder();\n+        CracBuilder builder = new CracBuilder().vmOption(\"--add-opens\").vmOption(\"java.base\/jdk.internal.perf=ALL-UNNAMED\");\n@@ -69,0 +71,1 @@\n+        final long counter0 = Perf.getPerf().highResCounter();\n@@ -71,1 +74,0 @@\n-        System.out.println(RESTORED_MESSAGE);\n@@ -73,0 +75,1 @@\n+        final long counter1 = Perf.getPerf().highResCounter();\n@@ -80,0 +83,3 @@\n+        assertLT(counter0, counter1);\n+\n+        System.out.println(RESTORED_MESSAGE);\n","filename":"test\/jdk\/jdk\/crac\/ResetStartTimeTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}