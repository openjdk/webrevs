{"files":[{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import jdk.crac.Core;\n+import static jdk.test.lib.Asserts.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+\n+\/**\n+ * @test\n+ * @summary If a restore attempt failed and was ignored by\n+ *          CRaCIgnoreRestoreIfUnavailable the normal execution started instead\n+ *          should be checkpointable.\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ *\/\n+public class CheckpointAfterIgnoredRestoreTest {\n+    public static void main(String[] args) throws Exception {\n+        final var builder = new CracBuilder().engine(CracEngine.CRIU)\n+            .vmOption(\"-XX:+CRaCIgnoreRestoreIfUnavailable\")\n+            .forwardClasspathOnRestore(true);\n+        assertTrue(Files.notExists(builder.imageDir()), \"Image should not exist yet: \" + builder.imageDir());\n+        builder\n+            .startRestoreWithArgs(null, List.of(\"-XX:CRaCCheckpointTo=\" + builder.imageDir(), Main.class.getName()))\n+            .waitForCheckpointed();\n+        builder.doRestore();\n+    }\n+\n+    public static class Main {\n+        public static void main(String[] args) throws Exception {\n+            Core.checkpointRestore();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ignoreRestore\/CheckpointAfterIgnoredRestoreTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+\n+\/**\n+ * @test\n+ * @summary If CRaCIgnoreRestoreIfUnavailable is specified and the engine\n+ *          fails to restore for any reason VM should proceed without restoring.\n+ * @library \/test\/lib\n+ *\/\n+public class EngineFailureTest {\n+    private static final String MAIN_MSG = \"Hello, world!\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ With crexec we need to make it itself fail and not the real engine\n+        \/\/ it executes: the executable replaces the JVM and thus exits the whole\n+        \/\/ process on failure instead of returning to JVM. This is achieved by\n+        \/\/ specifying \"crexec\" as the engine manually (normally one is not\n+        \/\/ supposed to do that, JVM does it automatically when needed) and do\n+        \/\/ not provide the mandatory 'exec_location' option.\n+\n+        \/\/ Create an empty image which will pass VM's own checks. It may contain\n+        \/\/ CPU features, for example.\n+        new CracBuilder().engine(CracEngine.SIMULATE)\n+            .main(Main.class).args(\"true\")\n+            .startCheckpoint().waitForSuccess();\n+\n+        new CracBuilder()\n+            .vmOption(\"-XX:CRaCEngine=crexec\")\n+            .vmOption(\"-XX:+CRaCIgnoreRestoreIfUnavailable\")\n+            .forwardClasspathOnRestore(true)\n+            .captureOutput(true)\n+            .startRestoreWithArgs(null, List.of(Main.class.getName(), \"false\"))\n+            .outputAnalyzer()\n+            .shouldContain(\"CRaC engine failed to restore\")\n+            .shouldContain(MAIN_MSG);\n+    }\n+\n+    public static class Main {\n+        public static void main(String[] args) throws Exception {\n+            if (Boolean.parseBoolean(args[0])) {\n+                Core.checkpointRestore();\n+            } else {\n+                System.out.println(MAIN_MSG);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ignoreRestore\/EngineFailureTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+\n+\/**\n+ * @test\n+ * @summary If CRaCIgnoreRestoreIfUnavailable is specified and CRaCRestoreFrom\n+ *          points to an invalid location VM should proceed without restoring.\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @run main InvalidImageLocationTest IMAGE_NOT_EXISTS\n+ * @run main InvalidImageLocationTest IMAGE_IS_NOT_DIR\n+ *\/\n+public class InvalidImageLocationTest {\n+    private static final String MAIN_MSG = \"Hello, world!\";\n+\n+    private enum Variant {\n+        IMAGE_NOT_EXISTS,\n+        IMAGE_IS_NOT_DIR,\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        final var variant = Variant.valueOf(args[0]);\n+\n+        final var builder = new CracBuilder().engine(CracEngine.CRIU)\n+            .vmOption(\"-XX:+CRaCIgnoreRestoreIfUnavailable\")\n+            .forwardClasspathOnRestore(true)\n+            .captureOutput(true);\n+\n+        \/\/ Existance depends on the order of @run tags\n+        if (variant == Variant.IMAGE_NOT_EXISTS) {\n+            Files.deleteIfExists(builder.imageDir());\n+        } else if (variant == Variant.IMAGE_IS_NOT_DIR && Files.notExists(builder.imageDir())) {\n+            Files.createFile(builder.imageDir());\n+        }\n+\n+        final var errMsg = switch (variant) {\n+            case IMAGE_NOT_EXISTS -> \"Cannot open CRaCRestoreFrom=\" + builder.imageDir() + \":\";\n+            case IMAGE_IS_NOT_DIR -> \"CRaCRestoreFrom=\" + builder.imageDir() + \" is not a directory\";\n+        };\n+\n+        final var out = builder.startRestoreWithArgs(null, List.of(Main.class.getName())).outputAnalyzer();\n+        out.shouldContain(errMsg).shouldContain(MAIN_MSG);\n+    }\n+\n+    public static class Main {\n+        public static void main(String[] args) {\n+            System.out.println(MAIN_MSG);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ignoreRestore\/InvalidImageLocationTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import jdk.test.lib.crac.CracBuilder;\n+\n+\/**\n+ * @test\n+ * @summary If CRaCIgnoreRestoreIfUnavailable is specified and there are no CPU\n+ *          features recorded in the image VM should proceed without restoring.\n+ * @requires (os.arch == \"amd64\" | os.arch == \"x86_64\")\n+ * @library \/test\/lib\n+ *\/\n+public class NoCPUFeaturesTest {\n+    private static final String MAIN_MSG = \"Hello, world!\";\n+\n+    public static void main(String[] args) throws Exception {\n+        final var builder = new CracBuilder()\n+            .vmOption(\"-XX:+CRaCIgnoreRestoreIfUnavailable\")\n+            .forwardClasspathOnRestore(true)\n+            .captureOutput(true);\n+\n+        \/\/ Create an empty image without CPU features data\n+        Files.createDirectory(builder.imageDir());\n+\n+        builder.startRestoreWithArgs(null, List.of(Main.class.getName(), \"false\"))\n+            .outputAnalyzer().shouldContain(\"incompatible CPU features\").shouldContain(MAIN_MSG);\n+    }\n+\n+    public static class Main {\n+        public static void main(String[] args) throws Exception {\n+            System.out.println(MAIN_MSG);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ignoreRestore\/NoCPUFeaturesTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+\n+import jdk.crac.Core;\n+\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.util.FileUtils;\n+\n+\/**\n+ * @test\n+ * @summary With CRaCIgnoreRestoreIfUnavailable specified, if the image in\n+ *          CRaCRestoreFrom can be restored from it should be used, otherwise\n+ *          main should be launched as usual.\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @run main RestoreIfPossibleTest true\n+ * @run main RestoreIfPossibleTest false\n+ *\/\n+public class RestoreIfPossibleTest {\n+    private static final String WARMUP_MSG = \"Running warmup workload...\";\n+    private static final String MAIN_MSG = \"Running main workload...\";\n+\n+    public static void main(String[] args) throws Exception {\n+        final var makeRestorePossible = Boolean.parseBoolean(args[0]);\n+\n+        final var builder = new CracBuilder().engine(CracEngine.CRIU)\n+            .vmOption(\"-XX:+CRaCIgnoreRestoreIfUnavailable\")\n+            .forwardClasspathOnRestore(true)\n+            .captureOutput(true);\n+        if (makeRestorePossible) {\n+            final var checkpointProcess = builder.main(Main.class).args(\"true\").startCheckpoint();\n+            checkpointProcess.waitForCheckpointed();\n+            final var out = checkpointProcess.outputAnalyzer();\n+            out.stdoutShouldContain(WARMUP_MSG).stdoutShouldNotContain(MAIN_MSG);\n+        } else {\n+            FileUtils.deleteFileTreeWithRetry(builder.imageDir()); \/\/ Existance depends on the order of @run tags\n+        }\n+\n+        final var out = builder.startRestoreWithArgs(null, List.of(Main.class.getName(), \"false\")).outputAnalyzer();\n+        out.stdoutShouldNotContain(WARMUP_MSG).stdoutShouldContain(MAIN_MSG);\n+    }\n+\n+    public static class Main {\n+        public static void main(String[] args) throws Exception {\n+            final var shouldCheckpoint = Boolean.parseBoolean(args[0]);\n+            if (shouldCheckpoint) {\n+                System.out.println(WARMUP_MSG);\n+                Core.checkpointRestore();\n+            }\n+            System.out.println(MAIN_MSG);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ignoreRestore\/RestoreIfPossibleTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -53,0 +53,1 @@\n+    boolean forwardClasspathOnRestore;\n@@ -96,0 +97,1 @@\n+        other.forwardClasspathOnRestore = forwardClasspathOnRestore;\n@@ -179,0 +181,5 @@\n+    public CracBuilder forwardClasspathOnRestore(boolean forward) {\n+        this.forwardClasspathOnRestore = forward;\n+        return this;\n+    }\n+\n@@ -496,1 +503,1 @@\n-        if (!isRestore) {\n+        if (!isRestore || forwardClasspathOnRestore) {\n@@ -499,4 +506,4 @@\n-            if (printResources) {\n-                cmd.add(\"-XX:+UnlockDiagnosticVMOptions\");\n-                cmd.add(\"-XX:+CRaCPrintResourcesOnCheckpoint\");\n-            }\n+        }\n+        if (!isRestore && printResources) {\n+            cmd.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+            cmd.add(\"-XX:+CRaCPrintResourcesOnCheckpoint\");\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}