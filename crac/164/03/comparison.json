{"files":[{"patch":"@@ -38,0 +38,1 @@\n+    jdk.crac \\\n","filename":"make\/conf\/docs-modules.conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    jdk.crac \\\n","filename":"make\/conf\/module-loader-map.conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -747,1 +747,1 @@\n-  template(jdk_crac_Core,                          \"jdk\/crac\/Core\")                                               \\\n+  template(jdk_internal_crac_mirror_Core,          \"jdk\/internal\/crac\/mirror\/Core\")                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1107,1 +1107,1 @@\n-  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_crac_Core(),\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_crac_mirror_Core(),\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenResourceException;\n@@ -67,1 +67,1 @@\n-        public void beforeCheckpoint(Context<? extends jdk.crac.Resource> context) throws Exception {\n+        public void beforeCheckpoint(Context<? extends jdk.internal.crac.mirror.Resource> context) throws Exception {\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenResourceException;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -836,1 +836,1 @@\n-     * The application can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n@@ -838,1 +838,1 @@\n-     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n@@ -880,0 +880,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n@@ -1161,1 +1162,1 @@\n-     * The application can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n@@ -1163,1 +1164,1 @@\n-     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n@@ -1178,0 +1179,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n@@ -1220,1 +1222,1 @@\n-     * The application can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * The application can {@link jdk.crac\/jdk.crac.Context#register(jdk.crac.Resource) register}\n@@ -1222,1 +1224,1 @@\n-     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * {@link jdk.crac\/jdk.crac.Resource#afterRestore(jdk.crac.Context) afterRestore method},\n@@ -1234,0 +1236,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.crac;\n-\n-class ContextWrapper extends Context<Resource> {\n-    private final jdk.crac.Context<jdk.crac.Resource> context;\n-\n-    public ContextWrapper(jdk.crac.Context<jdk.crac.Resource> context) {\n-        this.context = context;\n-    }\n-\n-    private static jdk.crac.Context<? extends jdk.crac.Resource> convertContext(\n-            Context<? extends Resource> context) {\n-        return context instanceof ContextWrapper ?\n-                ((ContextWrapper)context).context :\n-                null;\n-    }\n-\n-    @Override\n-    public void beforeCheckpoint(Context<? extends Resource> context)\n-            throws CheckpointException {\n-        try {\n-            this.context.beforeCheckpoint(convertContext(context));\n-        } catch (jdk.crac.CheckpointException e) {\n-            CheckpointException newException = new CheckpointException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n-        }\n-    }\n-\n-    @Override\n-    public void afterRestore(Context<? extends Resource> context)\n-            throws RestoreException {\n-        try {\n-            this.context.afterRestore(convertContext(context));\n-        } catch (jdk.crac.RestoreException e) {\n-            RestoreException newException = new RestoreException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n-        }\n-    }\n-\n-    @Override\n-    public void register(Resource r) {\n-        ResourceWrapper wrapper = new ResourceWrapper(this, r);\n-        context.register(wrapper);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ContextWrapper[\" + context.toString() + \"]\";\n-    }\n-}\n-\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ContextWrapper.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2021, Azul Systems, Inc. All rights reserved.\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.crac;\n-\n-import jdk.crac.impl.BlockingOrderedContext;\n-import jdk.crac.impl.OrderedContext;\n-\n-\/**\n- * The coordination service.\n- *\/\n-public class Core {\n-\n-    \/** This class is not instantiable. *\/\n-    private Core() {\n-    }\n-\n-    private static final Context<Resource> globalContext = new ContextWrapper(\n-        jdk.crac.impl.GlobalContext.createGlobalContextImpl());\n-\n-    static {\n-        jdk.crac.Core.getGlobalContext().register(new ResourceWrapper(null, globalContext));\n-    }\n-\n-    \/**\n-     * Gets the global {@code Context} for checkpoint\/restore notifications.\n-     *\n-     * @return the global {@code Context}\n-     *\/\n-    public static Context<Resource> getGlobalContext() {\n-        return globalContext;\n-    }\n-\n-    \/**\n-     * Requests checkpoint and returns upon a successful restore.\n-     * May throw an exception if the checkpoint or restore are unsuccessful.\n-     *\n-     * @throws CheckpointException if an exception occured during checkpoint\n-     * notification and the execution continues in the original Java instance.\n-     * @throws RestoreException if an exception occured during restore\n-     * notification and execution continues in a new Java instance.\n-     * @throws UnsupportedOperationException if checkpoint\/restore is not\n-     * supported, no notification performed and the execution continues in\n-     * the original Java instance.\n-     *\/\n-    public static void checkpointRestore() throws\n-            CheckpointException,\n-            RestoreException {\n-        try {\n-            jdk.crac.Core.checkpointRestore();\n-        } catch (jdk.crac.CheckpointException e) {\n-            CheckpointException newException = new CheckpointException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n-        } catch (jdk.crac.RestoreException e) {\n-            RestoreException newException = new RestoreException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javax.crac;\n-\n-import java.lang.ref.WeakReference;\n-import java.util.WeakHashMap;\n-\n-class ResourceWrapper extends WeakReference<Resource> implements jdk.crac.Resource {\n-    private static WeakHashMap<Resource, ResourceWrapper> weakMap = new WeakHashMap<>();\n-\n-    \/\/ Create strong reference to avoid losing the Resource.\n-    \/\/ It's set unconditionally in beforeCheckpoint and cleaned in afterRestore\n-    \/\/ (latter is called regardless of beforeCheckpoint result).\n-    private Resource strongRef;\n-\n-    private final Context<Resource> context;\n-\n-    public ResourceWrapper(Context<Resource> context, Resource resource) {\n-        super(resource);\n-        weakMap.put(resource, this);\n-        strongRef = null;\n-        this.context = context;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ResourceWrapper[\" + get().toString() + \"]\";\n-    }\n-\n-    @Override\n-    public void beforeCheckpoint(jdk.crac.Context<? extends jdk.crac.Resource> context)\n-            throws Exception {\n-        Resource r = get();\n-        strongRef = r;\n-        if (r != null) {\n-            try {\n-                r.beforeCheckpoint(this.context);\n-            } catch (CheckpointException e) {\n-                Exception newException = new jdk.crac.CheckpointException();\n-                for (Throwable t : e.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                throw newException;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void afterRestore(jdk.crac.Context<? extends jdk.crac.Resource> context) throws Exception {\n-        Resource r = get();\n-        strongRef = null;\n-        if (r != null) {\n-            try {\n-                r.afterRestore(this.context);\n-            } catch (RestoreException e) {\n-                Exception newException = new jdk.crac.RestoreException();\n-                for (Throwable t : e.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                throw newException;\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ResourceWrapper.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-package jdk.crac.impl;\n-\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import sun.security.action.GetPropertyAction;\n-\n-public class GlobalContext {\n-    private static final String GLOBAL_CONTEXT_IMPL_PROP = \"jdk.crac.globalContext.impl\";\n-\n-    public static Context<Resource> createGlobalContextImpl() {\n-        String implName = GetPropertyAction.privilegedGetProperty(GLOBAL_CONTEXT_IMPL_PROP, \"\");\n-        return switch (implName) {\n-            case \"BlockingOrderedContext\" -> new BlockingOrderedContext<>();\n-            case \"OrderedContext\" -> new OrderedContext<>();\n-            default -> new OrderedContext<>(); \/\/ cannot report as System.out\/err are not initialized yet\n-        };\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/GlobalContext.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.impl.BlockingOrderedContext;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.impl.BlockingOrderedContext;\n@@ -44,1 +44,1 @@\n-     * Called by jdk.crac.Core to publish current ClaimedFDs\n+     * Called by jdk.internal.crac.mirror.Core to publish current ClaimedFDs\n@@ -72,1 +72,1 @@\n-            jdk.crac.Core.getGlobalContext().register(context);\n+            jdk.internal.crac.mirror.Core.getGlobalContext().register(context);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Core.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,4 +29,4 @@\n-import jdk.crac.CheckpointException;\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.RestoreException;\n+import jdk.internal.crac.mirror.CheckpointException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.RestoreException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKContext.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,2 +3,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFdResource.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,4 +3,4 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.impl.CheckpointOpenFileException;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenFileException;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenResourceException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFileResource.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKResource.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-import jdk.crac.impl.CheckpointOpenSocketException;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenSocketException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKSocketResource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,3 +3,3 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.impl.CheckpointOpenSocketException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenSocketException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKSocketResourceBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,2 +3,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/OpenResourcePolicies.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-package javax.crac;\n+package jdk.internal.crac.mirror;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/CheckpointException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package javax.crac;\n+package jdk.internal.crac.mirror;\n@@ -35,2 +35,0 @@\n- *\n- * @param <R> Resource\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Context.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/javax\/crac\/Context.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac;\n+package jdk.internal.crac.mirror;\n@@ -29,1 +29,0 @@\n-import jdk.crac.impl.*;\n@@ -34,0 +33,1 @@\n+import jdk.internal.crac.mirror.impl.*;\n@@ -35,1 +35,0 @@\n-import sun.security.action.GetPropertyAction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Core.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package javax.crac;\n+package jdk.internal.crac.mirror;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Resource.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/javax\/crac\/Resource.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package javax.crac;\n+package jdk.internal.crac.mirror;\n@@ -44,2 +44,0 @@\n-\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/RestoreException.java","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n@@ -29,1 +29,1 @@\n-import jdk.crac.*;\n+import jdk.internal.crac.mirror.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/AbstractContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContext.java","status":"renamed"},{"patch":"@@ -1,1 +1,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n@@ -3,4 +3,4 @@\n-import jdk.crac.CheckpointException;\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.RestoreException;\n+import jdk.internal.crac.mirror.CheckpointException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.RestoreException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/BlockingOrderedContext.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/BlockingOrderedContext.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/CheckpointOpenFileException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/CheckpointOpenFileException.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/CheckpointOpenResourceException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/CheckpointOpenResourceException.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/CheckpointOpenSocketException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/CheckpointOpenSocketException.java","status":"renamed"},{"patch":"@@ -1,1 +1,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/ExceptionHolder.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/ExceptionHolder.java","status":"renamed"},{"patch":"@@ -0,0 +1,18 @@\n+package jdk.internal.crac.mirror.impl;\n+\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import sun.security.action.GetPropertyAction;\n+\n+public class GlobalContext {\n+    private static final String GLOBAL_CONTEXT_IMPL_PROP = \"jdk.crac.globalContext.impl\";\n+\n+    public static Context<Resource> createGlobalContextImpl() {\n+        String implName = GetPropertyAction.privilegedGetProperty(GLOBAL_CONTEXT_IMPL_PROP, \"\");\n+        return switch (implName) {\n+            case \"BlockingOrderedContext\" -> new BlockingOrderedContext<>();\n+            case \"OrderedContext\" -> new OrderedContext<>();\n+            default -> new OrderedContext<>(); \/\/ cannot report as System.out\/err are not initialized yet\n+        };\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/GlobalContext.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/KeepAlive.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/KeepAlive.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-package jdk.crac.impl;\n+package jdk.internal.crac.mirror.impl;\n@@ -29,1 +29,4 @@\n-import jdk.crac.*;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.RestoreException;\n+import jdk.internal.crac.mirror.impl.AbstractContext;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/impl\/OrderedContext.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/OrderedContext.java","status":"renamed"},{"patch":"@@ -97,2 +97,1 @@\n-package javax.crac;\n-\n+package jdk.internal.crac.mirror;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/package-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"src\/java.base\/share\/classes\/javax\/crac\/package-info.java","status":"renamed"},{"patch":"@@ -35,2 +35,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,3 +138,0 @@\n-    exports javax.crac;\n-\n-    exports jdk.crac;\n@@ -429,0 +426,5 @@\n+    exports jdk.internal.crac.mirror to\n+        jdk.crac;\n+\n+    exports jdk.internal.crac.mirror.impl to\n+        jdk.crac;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousFileChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/FileInputStreamPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SecureRandom.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"jdk_crac_Core.h\"\n+#include \"jdk_internal_crac_mirror_Core.h\"\n@@ -38,1 +38,1 @@\n-Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jarray fdArr, jobjectArray objArr, jboolean dry_run, jlong jcmd_stream) {\n+Java_jdk_internal_crac_mirror_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jarray fdArr, jobjectArray objArr, jboolean dry_run, jlong jcmd_stream) {\n","filename":"src\/java.base\/share\/native\/libjava\/CracCore.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n+import jdk.internal.crac.mirror.impl.CheckpointOpenResourceException;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDispatcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixFileDispatcherImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n","filename":"src\/java.base\/unix\/classes\/sun\/security\/provider\/NativePRNG.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","status":"renamed"},{"patch":"","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/Context.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/Context.java","status":"renamed"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.crac;\n+\n+class ContextWrapper extends Context<Resource> {\n+    private final jdk.internal.crac.mirror.Context<jdk.internal.crac.mirror.Resource> context;\n+\n+    public ContextWrapper(jdk.internal.crac.mirror.Context<jdk.internal.crac.mirror.Resource> context) {\n+        this.context = context;\n+    }\n+\n+    private static jdk.internal.crac.mirror.Context<? extends jdk.internal.crac.mirror.Resource> convertContext(\n+            Context<? extends Resource> context) {\n+        return context instanceof ContextWrapper ?\n+                ((ContextWrapper)context).context :\n+                null;\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context)\n+            throws CheckpointException {\n+        try {\n+            this.context.beforeCheckpoint(convertContext(context));\n+        } catch (jdk.internal.crac.mirror.CheckpointException e) {\n+            CheckpointException newException = new CheckpointException();\n+            for (Throwable t : e.getSuppressed()) {\n+                newException.addSuppressed(t);\n+            }\n+            throw newException;\n+        }\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context)\n+            throws RestoreException {\n+        try {\n+            this.context.afterRestore(convertContext(context));\n+        } catch (jdk.internal.crac.mirror.RestoreException e) {\n+            RestoreException newException = new RestoreException();\n+            for (Throwable t : e.getSuppressed()) {\n+                newException.addSuppressed(t);\n+            }\n+            throw newException;\n+        }\n+    }\n+\n+    @Override\n+    public void register(Resource r) {\n+        ResourceWrapper wrapper = new ResourceWrapper(this, r);\n+        context.register(wrapper);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ContextWrapper[\" + context.toString() + \"]\";\n+    }\n+}\n","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/ContextWrapper.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2017, 2021, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.crac;\n+\n+import jdk.internal.crac.mirror.impl.BlockingOrderedContext;\n+import jdk.internal.crac.mirror.impl.OrderedContext;\n+\n+\/**\n+ * The coordination service.\n+ *\/\n+public class Core {\n+\n+    \/** This class is not instantiable. *\/\n+    private Core() {\n+    }\n+\n+    private static final Context<Resource> globalContext = new ContextWrapper(\n+        jdk.internal.crac.mirror.impl.GlobalContext.createGlobalContextImpl());\n+\n+    static {\n+        jdk.internal.crac.mirror.Core.getGlobalContext().register(new ResourceWrapper(null, globalContext));\n+    }\n+\n+    \/**\n+     * Gets the global {@code Context} for checkpoint\/restore notifications.\n+     *\n+     * @return the global {@code Context}\n+     *\/\n+    public static Context<Resource> getGlobalContext() {\n+        return globalContext;\n+    }\n+\n+    \/**\n+     * Requests checkpoint and returns upon a successful restore.\n+     * May throw an exception if the checkpoint or restore are unsuccessful.\n+     *\n+     * @throws CheckpointException if an exception occured during checkpoint\n+     * notification and the execution continues in the original Java instance.\n+     * @throws RestoreException if an exception occured during restore\n+     * notification and execution continues in a new Java instance.\n+     * @throws UnsupportedOperationException if checkpoint\/restore is not\n+     * supported, no notification performed and the execution continues in\n+     * the original Java instance.\n+     *\/\n+    public static void checkpointRestore() throws\n+            CheckpointException,\n+            RestoreException {\n+        try {\n+            jdk.internal.crac.mirror.Core.checkpointRestore();\n+        } catch (jdk.internal.crac.mirror.CheckpointException e) {\n+            CheckpointException newException = new CheckpointException();\n+            for (Throwable t : e.getSuppressed()) {\n+                newException.addSuppressed(t);\n+            }\n+            throw newException;\n+        } catch (jdk.internal.crac.mirror.RestoreException e) {\n+            RestoreException newException = new RestoreException();\n+            for (Throwable t : e.getSuppressed()) {\n+                newException.addSuppressed(t);\n+            }\n+            throw newException;\n+        }\n+    }\n+}\n","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/Core.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/Resource.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/Resource.java","status":"renamed"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.crac;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.WeakHashMap;\n+\n+class ResourceWrapper extends WeakReference<Resource> implements jdk.internal.crac.mirror.Resource {\n+    private static WeakHashMap<Resource, ResourceWrapper> weakMap = new WeakHashMap<>();\n+\n+    \/\/ Create strong reference to avoid losing the Resource.\n+    \/\/ It's set unconditionally in beforeCheckpoint and cleaned in afterRestore\n+    \/\/ (latter is called regardless of beforeCheckpoint result).\n+    private Resource strongRef;\n+\n+    private final Context<Resource> context;\n+\n+    public ResourceWrapper(Context<Resource> context, Resource resource) {\n+        super(resource);\n+        weakMap.put(resource, this);\n+        strongRef = null;\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ResourceWrapper[\" + get().toString() + \"]\";\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(jdk.internal.crac.mirror.Context<? extends jdk.internal.crac.mirror.Resource> context)\n+            throws Exception {\n+        Resource r = get();\n+        strongRef = r;\n+        if (r != null) {\n+            try {\n+                r.beforeCheckpoint(this.context);\n+            } catch (CheckpointException e) {\n+                Exception newException = new jdk.internal.crac.mirror.CheckpointException();\n+                for (Throwable t : e.getSuppressed()) {\n+                    newException.addSuppressed(t);\n+                }\n+                throw newException;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void afterRestore(jdk.internal.crac.mirror.Context<? extends jdk.internal.crac.mirror.Resource> context) throws Exception {\n+        Resource r = get();\n+        strongRef = null;\n+        if (r != null) {\n+            try {\n+                r.afterRestore(this.context);\n+            } catch (RestoreException e) {\n+                Exception newException = new jdk.internal.crac.mirror.RestoreException();\n+                for (Throwable t : e.getSuppressed()) {\n+                    newException.addSuppressed(t);\n+                }\n+                throw newException;\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/ResourceWrapper.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/RestoreException.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java","status":"renamed"},{"patch":"@@ -98,1 +98,0 @@\n-\n","filename":"src\/jdk.crac\/share\/classes\/jdk\/crac\/package-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"previous_filename":"src\/java.base\/share\/classes\/jdk\/crac\/package-info.java","status":"renamed"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module jdk.crac {\n+\n+    exports jdk.crac;\n+\n+}\n","filename":"src\/jdk.crac\/share\/classes\/module-info.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -24,3 +24,0 @@\n-import jdk.crac.*;\n-import jdk.crac.impl.BlockingOrderedContext;\n-import jdk.crac.impl.OrderedContext;\n@@ -28,0 +25,3 @@\n+import jdk.internal.crac.mirror.*;\n+import jdk.internal.crac.mirror.impl.BlockingOrderedContext;\n+import jdk.internal.crac.mirror.impl.OrderedContext;\n@@ -35,2 +35,1 @@\n-import static jdk.crac.Core.getGlobalContext;\n-import static jdk.internal.crac.Core.*;\n+import static jdk.internal.crac.mirror.Core.getGlobalContext;\n@@ -45,1 +44,2 @@\n- * @modules java.base\/jdk.crac.impl:+open\n+ * @modules java.base\/jdk.internal.crac.mirror:+open\n+ * @modules java.base\/jdk.internal.crac.mirror.impl:+open\n","filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                    case \"jdk.crac.impl.CheckpointOpenFileException\": exceptions |= 0x2; break;\n+                    case \"jdk.internal.crac.mirror.impl.CheckpointOpenFileException\": exceptions |= 0x2; break;\n","filename":"test\/jdk\/jdk\/crac\/DryRunTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}