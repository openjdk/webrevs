{"files":[{"patch":"@@ -24,1 +24,0 @@\n-import jdk.test.lib.Container;\n@@ -27,1 +26,0 @@\n-import jdk.test.lib.containers.docker.DockerRunOptions;\n@@ -33,1 +31,0 @@\n-import jdk.test.lib.process.StreamPumper;\n@@ -35,3 +32,0 @@\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.reflect.Method;\n@@ -42,3 +36,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n@@ -46,1 +37,0 @@\n-import java.util.function.Consumer;\n@@ -95,5 +85,1 @@\n-            \/\/ We need to cycle PIDs; had we tried to restore right away the exec would get the\n-            \/\/ same PIDs and restore would fail.\n-            DockerTestUtils.execute(Container.ENGINE_COMMAND, \"exec\",\n-                    CracBuilder.CONTAINER_NAME, \"bash\", \"-c\",\n-                    \"cat \/dev\/null & while [ $! -lt 100 ]; do cat \/dev\/null & done\");\n+\n","filename":"test\/jdk\/jdk\/crac\/java\/net\/InetAddress\/ResolveTest.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+    boolean debug = false;\n@@ -65,0 +66,5 @@\n+    public CracBuilder debug(boolean debug) {\n+        this.debug = debug;\n+        return this;\n+    }\n+\n@@ -147,0 +153,6 @@\n+        log(\"Starting process to be checkpointed:\");\n+        log(String.join(\" \", cmd));\n+        return new CracProcess(this, cmd);\n+    }\n+\n+    void log(String fmt, Object... args) {\n@@ -148,2 +160,5 @@\n-            System.err.println(\"Starting process to be checkpointed:\");\n-            System.err.println(String.join(\" \", cmd));\n+            if (args.length == 0) {\n+                System.err.println(fmt);\n+            } else {\n+                System.err.printf(fmt, args);\n+            }\n@@ -151,1 +166,0 @@\n-        return new CracProcess(this, cmd);\n@@ -165,0 +179,2 @@\n+            \/\/ Make sure we start with a clean image directory\n+            DockerTestUtils.execute(Container.ENGINE_COMMAND, \"volume\", \"rm\", \"cr\");\n@@ -166,3 +182,1 @@\n-            if (verbose) {\n-                System.err.println(\"Starting docker container:\\n\" + String.join(\" \", cmd));\n-            }\n+            log(\"Starting docker container:\\n\" + String.join(\" \", cmd));\n@@ -180,1 +194,4 @@\n-        cmd.addAll(Arrays.asList(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\"));\n+        int entryCounter = 0;\n+        for (var entry : Utils.TEST_CLASS_PATH.split(File.pathSeparator)) {\n+            cmd.addAll(Arrays.asList(\"--volume\", entry + \":\/cp\/\" + (entryCounter++)));\n+        }\n@@ -185,0 +202,3 @@\n+        if (debug) {\n+            cmd.addAll(Arrays.asList(\"--publish\", \"5005:5005\"));\n+        }\n@@ -200,0 +220,2 @@\n+        String minPid = DockerTestUtils.execute(Container.ENGINE_COMMAND, \"exec\", CONTAINER_NAME,\n+                \"cat\", \"\/proc\/sys\/kernel\/ns_last_pid\").getStdout().trim();\n@@ -202,3 +224,1 @@\n-        if (verbose) {\n-            System.err.println(\"Restarting docker container:\\n\" + String.join(\" \", cmd));\n-        }\n+        log(\"Recreating docker container:\\n\" + String.join(\" \", cmd));\n@@ -206,0 +226,7 @@\n+        \/\/ We need to cycle PIDs; had we tried to restore right away the exec would get the\n+        \/\/ same PIDs and restore would fail.\n+        log(\"Cycling PIDs until %s%n\", minPid);\n+        DockerTestUtils.execute(Container.ENGINE_COMMAND, \"exec\",\n+                CONTAINER_NAME, \"bash\", \"-c\",\n+                \"while [ $(cat \/proc\/sys\/kernel\/ns_last_pid) -le \" + minPid + \" ]; do cat \/dev\/null; done\");\n+        DockerTestUtils.execute(Container.ENGINE_COMMAND, \"exec\", CONTAINER_NAME, \"ps\", \"fauxT\");\n@@ -219,4 +246,2 @@\n-        if (verbose) {\n-            System.err.println(\"Starting restored process:\");\n-            System.err.println(String.join(\" \", cmd));\n-        }\n+        log(\"Starting restored process:\");\n+        log(String.join(\" \", cmd));\n@@ -235,0 +260,3 @@\n+        if (debug) {\n+            cmd.add(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=0.0.0.0:5005\");\n+        }\n@@ -237,4 +265,2 @@\n-        if (verbose) {\n-            System.err.println(\"Starting process without CRaC:\");\n-            System.err.println(String.join(\" \", cmd));\n-        }\n+        log(\"Starting process without CRaC:\");\n+        log(String.join(\" \", cmd));\n@@ -249,1 +275,4 @@\n-            classPath += \"\/test-classes\";\n+            int numEntries = Utils.TEST_CLASS_PATH.split(File.pathSeparator).length;\n+            for (int i = 0; i < numEntries; ++i) {\n+                classPath += \"\/cp\/\" + i + File.pathSeparator;\n+            }\n@@ -278,0 +307,4 @@\n+        if (debug) {\n+            cmd.add(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=0.0.0.0:5005\");\n+            cmd.add(\"-XX:-CRDoThrowCheckpointException\");\n+        }\n@@ -297,0 +330,1 @@\n+\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":53,"deletions":19,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-    CRIU(\"criu\"),\n+    CRIU(\"criuengine\"),\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracEngine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,3 +83,1 @@\n-        if (builder.verbose) {\n-            System.err.printf(\"Process %d completed with exit value %d%n\", process.pid(), exitValue);\n-        }\n+        builder.log(\"Process %d completed with exit value %d%n\", process.pid(), exitValue);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracProcess.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}