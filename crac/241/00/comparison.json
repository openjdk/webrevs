{"files":[{"patch":"@@ -307,0 +307,1 @@\n+  GrowableArray<int> patch_module_fds = ClassLoader::get_patch_module_entry_fds();\n@@ -351,0 +352,5 @@\n+    if (patch_module_fds.contains(fd)) {\n+      print_resources(\"OK: claimed by patch-module\\n\");\n+      continue;\n+    }\n+\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -760,0 +760,16 @@\n+GrowableArray<int> ClassLoader::get_patch_module_entry_fds() {\n+  GrowableArray<int> fds;\n+  if (_patch_mod_entries == nullptr) {\n+    return fds;\n+  }\n+  for (int i = 0; i < _patch_mod_entries->length(); i++) {\n+    ModuleClassPathList* module_cpl = _patch_mod_entries->at(i);\n+    for (ClassPathEntry* entry = module_cpl->module_first_entry(); entry != nullptr; entry = entry->next()) {\n+      if (entry->is_jar_file()) {\n+        fds.append(((ClassPathZipEntry*)entry)->get_fd());\n+      }\n+    }\n+  }\n+  return fds;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -377,0 +377,3 @@\n+  \/\/ returns list of file descriptors used for patch module entries\n+  static GrowableArray<int> get_patch_module_entry_fds();\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import java.util.zip.ZipFile;\n@@ -58,0 +59,1 @@\n+import jdk.internal.util.jar.PersistentJarFile;\n@@ -433,1 +435,1 @@\n-            this.jf = new JarFile(path.toString());\n+            this.jf = new PersistentJarFile(path.toFile(), true, ZipFile.OPEN_READ, JarFile.runtimeVersion());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePatcher.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package crac.fileDescriptors;\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+\/**\n+ * @test PatchModuleTest\n+ * @summary Verifies that checkpointing works correctly with --patch-module.\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @modules jdk.jartool\/sun.tools.jar\n+ * @build crac.fileDescriptors.PatchModuleTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class PatchModuleTest implements CracTest {\n+\n+    \/\/ A simple new class that we will \"add\" to the java.lang package.\n+    private static final String PATCH_MESSAGE = \"Patched!\";\n+    private static final String PATCHED_CLASS_NAME = \"CracPatchTester\";\n+    private static final String PATCHED_CLASS_FULL_NAME = \"java.lang.\" + PATCHED_CLASS_NAME;\n+    private static final String PATCHED_CLASS_SOURCE_FILE = PATCHED_CLASS_NAME + \".java\";\n+    private static final String PATCHED_CLASS_SOURCE = \"package java.lang; \" +\n+            \"public final class CracPatchTester { \" +\n+            \"    public static String getInfo() { return \\\"\" + PATCH_MESSAGE + \"\\\"; } \" +\n+            \"}\";\n+\n+    @Override\n+    public void test() throws Exception {\n+        \/\/ 1. Prepare source directory and the custom class source file\n+        Path srcDir = Files.createTempDirectory(\"patch-src\");\n+        Path patchSrcDir = srcDir.resolve(\"java\").resolve(\"lang\");\n+        Files.createDirectories(patchSrcDir);\n+        Files.writeString(patchSrcDir.resolve(PATCHED_CLASS_SOURCE_FILE), PATCHED_CLASS_SOURCE);\n+\n+        \/\/ 2. Compile the source using --patch-module to place it in java.base\n+        Path classesDir = Files.createTempDirectory(\"patch-classes\");\n+        boolean compiled = CompilerUtils.compile(\n+                srcDir,\n+                classesDir,\n+                \"--patch-module=java.base=\" + srcDir.toString());\n+        assertTrue(compiled, \"Compilation of patch class with --patch-module failed\");\n+\n+        \/\/ 3. Create the patch JAR file from the compiled class\n+        File patchJar = File.createTempFile(\"patch\", \".jar\");\n+        patchJar.deleteOnExit();\n+\n+        String[] patchJarArgs = {\n+                \"--create\",\n+                \"--file\", patchJar.getAbsolutePath(),\n+                \"-C\", classesDir.toString(), \".\"\n+        };\n+        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarTool.run(patchJarArgs)) {\n+            throw new Exception(\"Failed to create patch JAR: \" + Arrays.toString(patchJarArgs));\n+        }\n+\n+        \/\/ 4. Build the process with --patch-module\n+        CracBuilder builder = new CracBuilder()\n+                .captureOutput(true)\n+                .printResources(true)\n+                .vmOption(\"--patch-module=java.base=\" + patchJar.getAbsolutePath());\n+\n+        \/\/ 5. Start the checkpoint process\n+        CracProcess checkpointProcess = builder.startCheckpoint();\n+\n+        \/\/ 6. Analyze the output of the checkpointing process to verify fixes\n+        OutputAnalyzer checkpointOutput = checkpointProcess.outputAnalyzer();\n+\n+        \/\/ Verify that the checkpoint process did not fail\n+        checkpointOutput.shouldNotContain(\"CheckpointException\");\n+\n+        \/\/ Verify Java-level fix: PersistentJarFile is used\n+        checkpointOutput.shouldContain(patchJar.getAbsolutePath() + \" is recorded as always available on restore\");\n+\n+        \/\/ Verify Native-level fix: check_fds reports the FD as ok\n+        checkpointOutput.shouldMatch(\"JVM: FD fd=[0-9]+ type=regular path=\\\"\" + patchJar.getAbsolutePath()\n+                + \"\\\" OK: claimed by patch-module\");\n+\n+        \/\/ Let the checkpoint finish\n+        checkpointProcess.waitForCheckpointed();\n+\n+        \/\/ 7. Perform restore\n+        builder.doRestore();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        \/\/ Verify the patch is active by loading and calling the new class\n+        String infoBefore = invokePatchedMethod();\n+        assertEquals(PATCH_MESSAGE, infoBefore, \"Patch should be active before checkpoint.\");\n+\n+        \/\/ Perform checkpoint and restore\n+        Core.checkpointRestore();\n+\n+        \/\/ Verify the patch is still active after restore\n+        String infoAfter = invokePatchedMethod();\n+        assertEquals(PATCH_MESSAGE, infoAfter, \"Patch should remain active after restore.\");\n+    }\n+\n+    private String invokePatchedMethod() throws Exception {\n+        Class<?> patcherClass = Class.forName(PATCHED_CLASS_FULL_NAME);\n+        return (String) patcherClass.getMethod(\"getInfo\").invoke(null);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/PatchModuleTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}