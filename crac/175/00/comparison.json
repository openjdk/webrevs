{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.ArrayList;\n@@ -146,0 +147,1 @@\n+                ArrayList<PhantomCleanable<?>> refArr = new ArrayList<>();\n@@ -147,4 +149,12 @@\n-                    PhantomCleanable<?> next = phantomCleanableList;\n-                    do {\n-                        next = next.cleanIfNull();\n-                    } while (next != phantomCleanableList);\n+                    for (var ref = phantomCleanableList.next; ref != phantomCleanableList; ref = ref.next) {\n+                        if (ref.refersTo(null)) {\n+                            refArr.add(ref);\n+                        }\n+                    }\n+                    for (var ref : refArr) {\n+                        try {\n+                            ref.clean();\n+                        } catch (Throwable e) {\n+                            \/\/ ignore exceptions from the cleanup action\n+                        }\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -137,20 +137,0 @@\n-    PhantomCleanable<?> cleanIfNull() {\n-        if (this == list) {\n-            \/\/ The reference representing the list itself does not have\n-            \/\/ a referent, we will skip it.\n-            return next;\n-        }\n-        PhantomCleanable<?> oldNext = next;\n-        if (refersTo(null)) {\n-            try {\n-                clean();\n-            } catch (Throwable t) {\n-                \/\/ This method is called only from CleanerImpl and that one\n-                \/\/ ignores any exceptions thrown; we will do the same here.\n-                \/\/ The exception cannot be caught (and ignored) by the caller\n-                \/\/ since we want to continue traversing the list.\n-            }\n-        }\n-        return oldNext;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/PhantomCleanable.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.crac.management.*;\n+import jdk.internal.ref.CleanerFactory;\n+import jdk.internal.ref.CleanerImpl;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+import java.lang.reflect.Field;\n+\n+\/**\n+ * @test\n+ * @modules java.base\/jdk.internal.ref\n+ * @library \/test\/lib\n+ * @build LinkedCleanableRefTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class LinkedCleanableRefTest implements CracTest {\n+    static private String RESTORED = \"RESTORED\";\n+    static private String CLEAN = \"CLEAN=\";\n+\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder().engine(CracEngine.SIMULATE).captureOutput(true);\n+        builder.vmOption(\"--add-opens=java.base\/jdk.internal.ref=ALL-UNNAMED\");\n+        builder.vmOption(\"--add-opens=java.base\/java.lang.ref=ALL-UNNAMED\");\n+        CracProcess process = builder.startCheckpoint();\n+        try {\n+            process.waitForSuccess();\n+            process.outputAnalyzer()\n+                    .shouldContain(RESTORED)\n+                    .shouldContain(CLEAN + \"true\");\n+        } finally {\n+            process.destroyForcibly();\n+        }\n+    }\n+\n+    private static class Closer implements Runnable {\n+        private CleanerImpl.PhantomCleanableRef anotherRef;\n+        static private boolean cleanningInProgress = false;\n+\n+        Closer(CleanerImpl.PhantomCleanableRef anotherRef) {\n+            this.anotherRef = anotherRef;\n+        }\n+\n+        public void run() {\n+            if (null != anotherRef) {\n+                cleanningInProgress = true;\n+                anotherRef.clean();\n+                cleanningInProgress = false;\n+            } else {\n+                System.out.println(CLEAN + cleanningInProgress);\n+            }\n+        }\n+    }\n+\n+    void setReferentToNull(CleanerImpl.PhantomCleanableRef ref) throws Exception {\n+        \/\/ Access to field: java.lang.ref.Reference.referent\n+        Field f = ref.getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredField(\"referent\");\n+        f.setAccessible(true);\n+        f.set(ref, null);\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        var obj = new Object();\n+        var cleaner = CleanerFactory.cleaner();\n+        var ref = (CleanerImpl.PhantomCleanableRef) cleaner.register(obj, new Closer(null));\n+        var ref2 = (CleanerImpl.PhantomCleanableRef) cleaner.register(obj, new Closer(ref));\n+\n+        setReferentToNull(ref);\n+        setReferentToNull(ref2);\n+        obj = null;\n+\n+        Core.checkpointRestore();\n+        System.out.println(\"RESTORED\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/LinkedCleanableRefTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}