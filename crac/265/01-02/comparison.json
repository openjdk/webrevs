{"files":[{"patch":"@@ -149,2 +149,2 @@\n-            CracProcess.printThreadDump(process.pid());\n-            CracProcess.dumpProcess(process.pid());\n+            process.printThreadDump();\n+            process.dumpProcess();\n@@ -168,1 +168,0 @@\n-        System.out.flush();\n","filename":"test\/jdk\/jdk\/crac\/jdwp\/JdwpTransportTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -11,1 +34,1 @@\n-public class AsyncStreamReader {\n+public class AsyncStreamReader implements AutoCloseable {\n@@ -14,0 +37,2 @@\n+    private final InputStream inputStream;\n+    private final Thread readerThread;\n@@ -16,1 +41,2 @@\n-        Thread t = new Thread(() -> {\n+        this.inputStream = stream;\n+        this.readerThread = new Thread(() -> {\n@@ -27,2 +53,2 @@\n-        t.setDaemon(true);\n-        t.start();\n+        this.readerThread.setDaemon(true);\n+        this.readerThread.start();\n@@ -42,0 +68,8 @@\n+\n+    public void close() {\n+        try {\n+            this.inputStream.close();\n+        } catch (IOException ignored) {\n+        }\n+        this.readerThread.interrupt();\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/AsyncStreamReader.java","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -198,1 +198,2 @@\n-    public static void printThreadDump(long pid) throws IOException {\n+    public void printThreadDump() throws IOException {\n+        final long pid = this.pid();\n@@ -236,1 +237,1 @@\n-    public static void dumpProcess(long pid) throws IOException, InterruptedException {\n+    public void dumpProcess() throws IOException, InterruptedException {\n@@ -239,0 +240,1 @@\n+        final long pid = this.pid();\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracProcess.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}