{"files":[{"patch":"@@ -50,1 +50,1 @@\n-    cpu_feature_active ld_so_list_diagnostics \\\n+    cpu_feature_active \\\n@@ -407,114 +407,0 @@\n-###############################################################################\n-# Check if glibc ld.so --list-diagnostics is available on this platform.\n-#\n-AC_DEFUN_ONCE([JVM_FEATURES_CHECK_LD_SO_LIST_DIAGNOSTICS],\n-[\n-  JVM_FEATURES_CHECK_AVAILABILITY(ld_so_list_diagnostics, [\n-    AC_MSG_CHECKING([if glibc ld.so --list-diagnostics is supported])\n-    AC_RUN_IFELSE(\n-      [AC_LANG_SOURCE([[\n-#define _GNU_SOURCE 1\n-#include <link.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <stddef.h>\n-#include <string.h>\n-#include <limits.h>\n-static int ld_so_name_iterate_phdr(struct dl_phdr_info *info, size_t size, void *data_voidp) {\n-  const char **retval_return = (const char **)data_voidp;\n-  if (size < offsetof(struct dl_phdr_info, dlpi_adds)) {\n-    fputs(\"missing PHDRs\\n\", stderr);\n-    exit(1);\n-  }\n-  if (strcmp(info->dlpi_name, \"\") != 0) {\n-    fprintf(stderr, \"Unexpected name of first dl_phdr_info: %s\\n\", info->dlpi_name);\n-    exit(1);\n-  }\n-  for (size_t phdr_ix = 0; phdr_ix < info->dlpi_phnum; ++phdr_ix) {\n-    const Elf64_Phdr *phdr = info->dlpi_phdr + phdr_ix;\n-    if (phdr->p_type == PT_INTERP) {\n-      *retval_return = (const char *)(phdr->p_vaddr + info->dlpi_addr);\n-      return 42;\n-    }\n-  }\n-  exit(1);\n-}\n-static const char *ld_so_name() {\n-  const char *retval;\n-  int err = dl_iterate_phdr(ld_so_name_iterate_phdr, &retval);\n-  if (err != 42)\n-    exit(1);\n-  return retval;\n-}\n-int main(void) {\n-  char cmd[PATH_MAX + 100];\n-  int got = snprintf(cmd, sizeof(cmd), \"%s --list-diagnostics\", ld_so_name());\n-  if (got < 0) {\n-    fprintf(stderr, \"snprintf error: %m\\n\");\n-  }\n-  if ((unsigned) got == sizeof(cmd)) {\n-    fputs(\"internal error - buffer overflow\\n\", stderr);\n-    exit(1);\n-  }\n-  FILE *f = popen(cmd, \"r\");\n-  if (!f) {\n-    fprintf(stderr, \"popen('%s'): %m\\n\", cmd);\n-    exit(1);\n-  }\n-  char line[LINE_MAX];\n-  int found = 0;\n-  const char prefix[] = \"x86.cpu_features.features\";\n-  for (;;) {\n-    char *s = fgets(line, sizeof(line), f);\n-    if (!s) break;\n-    if (s != line) {\n-      fprintf(stderr, \"fgets(popen('%s')) did not return buffer address\\n\", cmd);\n-      exit(1);\n-    }\n-    if (strstr(line, prefix))\n-      found = 1;\n-  }\n-  if (ferror(f)) {\n-    fprintf(stderr, \"ferror(popen('%s'))\\n\", cmd);\n-    exit(1);\n-  }\n-  if (!feof(f)) {\n-    fprintf(stderr, \"!feof(popen('%s'))\\n\", cmd);\n-    exit(1);\n-  }\n-  int wstatus = pclose(f);\n-  if (wstatus == -1) {\n-    fprintf(stderr, \"pclose('%s'): %m\\n\", cmd);\n-    exit(1);\n-  }\n-  if (!WIFEXITED(wstatus)) {\n-    fprintf(stderr, \"Child command '%s' did not properly exit (WIFEXITED): wstatus = %d\\n\", cmd, wstatus);\n-    exit(1);\n-  }\n-  if (WEXITSTATUS(wstatus) != 0) {\n-    fprintf(stderr, \"Child command '%s' did exit with an error: exit code = %d\\n\", cmd, WEXITSTATUS(wstatus));\n-    exit(1);\n-  }\n-  if (!found) {\n-    fprintf(stderr, \"Not found in '%s' output: %s\\n\", cmd, prefix);\n-    exit(1);\n-  }\n-  return 0;\n-}\n-\t]])\n-      ],\n-      [\n-        AC_MSG_RESULT([yes])\n-      ],\n-      [\n-        AC_MSG_RESULT([no])\n-        AVAILABLE=false\n-      ],\n-      [\n-        AC_MSG_RESULT([assumed no - cross compiling])\n-        AVAILABLE=false\n-      ]\n-    )\n-  ])\n-])\n-\n@@ -538,1 +424,0 @@\n-  JVM_FEATURES_CHECK_LD_SO_LIST_DIAGNOSTICS\n","filename":"make\/autoconf\/jvm-features.m4","additions":1,"deletions":116,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -158,3 +158,0 @@\n-ifneq ($(call check-jvm-feature, ld_so_list_diagnostics), true)\n-  JVM_CFLAGS_FEATURES += -DINCLUDE_LD_SO_LIST_DIAGNOSTICS=0\n-endif\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,4 +47,0 @@\n-#if INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-# include <link.h>\n-# include <sys\/wait.h>\n-#endif\n@@ -858,76 +854,0 @@\n-#if INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-\n-static int ld_so_name_iterate_phdr(struct dl_phdr_info *info, size_t size, void *data_voidp) {\n-  const char **retval_return = (const char **)data_voidp;\n-  assert(size >= offsetof(struct dl_phdr_info, dlpi_adds), \"missing PHDRs for the java executable\");\n-  if (strcmp(info->dlpi_name, \"\") != 0)\n-    vm_exit_during_initialization(err_msg(\"Unexpected name of first dl_phdr_info: %s\", info->dlpi_name));\n-  for (size_t phdr_ix = 0; phdr_ix < info->dlpi_phnum; ++phdr_ix) {\n-    const Elf64_Phdr *phdr = info->dlpi_phdr + phdr_ix;\n-    if (phdr->p_type == PT_INTERP) {\n-      *retval_return = (const char *)(phdr->p_vaddr + info->dlpi_addr);\n-      return 42;\n-    }\n-  }\n-  vm_exit_during_initialization(\"PT_INTERP not found for the java executable\");\n-  return -1;\n-}\n-\n-static const char *ld_so_name() {\n-  const char *retval;\n-  int err = dl_iterate_phdr(ld_so_name_iterate_phdr, &retval);\n-  assert(err == 42, \"internal error 42\");\n-  return retval;\n-}\n-\n-#define ARG1 \"--list-diagnostics\"\n-\n-static FILE *popen_r(const char *arg0, pid_t *pid_return) {\n-  union {\n-    int fds[2];\n-    struct {\n-      int readfd, writefd;\n-    };\n-  } fds;\n-  if (pipe(fds.fds))\n-    vm_exit_during_initialization(err_msg(\"Error creating pipe: %m\"));\n-  pid_t child = fork();\n-  switch (child) {\n-    case -1:\n-      vm_exit_during_initialization(err_msg(\"Error fork-ing: %m\"));\n-    case 0:\n-      if (close(fds.readfd))\n-        vm_exit_during_initialization(err_msgt(\"Error closing read pipe in child: %m\"));\n-      }\n-      if (dup2(fds.writefd, STDOUT_FILENO) != STDOUT_FILENO)\n-        vm_exit_during_initialization(err_msg(\"Error closing preparing write pipe in child: %m\"));\n-      if (close(fds.writefd))\n-        vm_exit_during_initialization(err_msg(\"Error closing write pipe in child: %m\"));\n-      execl(arg0, arg0, ARG1, NULL);\n-      \/\/ FIXME: Double vm_exit*()?\n-      vm_exit_during_initialization(err_msg(\"Error exec-ing %s \" ARG1 \": %m\", arg0));\n-  }\n-  if (close(fds.writefd))\n-    vm_exit_during_initialization(err_msg(\"Error closing write pipe in parent: %m\"));\n-  FILE *f = fdopen(fds.readfd, \"r\");\n-  if (f == NULL)\n-    vm_exit_during_initialization(err_msg(\"Error converting pipe fd to FILE * in parent for %s \" ARG1 \": %m\", arg0));\n-  *pid_return = child;\n-  return f;\n-}\n-\n-static void pclose_r(const char *arg0, FILE *f, pid_t pid) {\n-  if (fclose(f))\n-    vm_exit_during_initialization(err_msg(\"Error closing fdopen-ed %s \" ARG1 \": %m\", arg0));\n-  int wstatus;\n-  pid_t waiterr = waitpid(pid, &wstatus, 0);\n-  if (waiterr != pid)\n-    vm_exit_during_initialization(err_msg(\"Error waiting on %s \" ARG1 \": %m\", arg0));\n-  if (!WIFEXITED(wstatus))\n-    vm_exit_during_initialization(err_msg(\"Child command %s \" ARG1 \" did not properly exit (WIFEXITED): wstatus = %d\", arg0, wstatus));\n-  if (WEXITSTATUS(wstatus) != 0)\n-    vm_exit_during_initialization(err_msg(\"Child command %s \" ARG1 \" did exit with an error: exit code = %d\", arg0, WEXITSTATUS(wstatus)));\n-}\n-\n-#endif \/\/ !INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-\n@@ -945,3 +865,5 @@\n-#if !INCLUDE_CPU_FEATURE_ACTIVE && !INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-    if (ShowCPUFeatures) {\n-      tty->print_cr(\"Environment variable already set, both glibc CPU_FEATURE_ACTIVE and ld.so --list-diagnostics are unavailable - re-exec suppressed: \" TUNABLES_NAME \"=%s\", env);\n+    if (!INCLUDE_CPU_FEATURE_ACTIVE) {\n+      if (ShowCPUFeatures) {\n+        tty->print_cr(\"Environment variable already set, both glibc CPU_FEATURE_ACTIVE is unavailable - re-exec suppressed: \" TUNABLES_NAME \"=%s\", env);\n+      }\n+      return true;\n@@ -949,2 +871,0 @@\n-    return true;\n-#endif\n@@ -1047,62 +967,0 @@\n-#if INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-  \/\/ sysdeps\/x86\/include\/cpu-features.h CPUID_INDEX_14_ECX_0 == 8\n-  const int CPUID_INDEX_CEIL = 8;\n-  \/\/ \/usr\/include\/bits\/platform\/x86.h\n-  enum\n-  {\n-    CPUID_INDEX_1 = 0,\n-    CPUID_INDEX_7,\n-    CPUID_INDEX_80000001,\n-    CPUID_INDEX_D_ECX_1,\n-    CPUID_INDEX_80000007,\n-    CPUID_INDEX_80000008,\n-    CPUID_INDEX_7_ECX_1,\n-    CPUID_INDEX_19,\n-    CPUID_INDEX_14_ECX_0\n-  };\n-  const int index_max = CPUID_INDEX_CEIL + 1;\n-  enum { eax = 0, ebx, ecx, edx, reg_max };\n-  unsigned active[index_max][reg_max] = { 0 };\n-  const char *arg0 = ld_so_name();\n-  pid_t f_child;\n-  FILE *f = popen_r(arg0, &f_child);\n-  if (!f)\n-    vm_exit_during_initialization(err_msg(\"Cannot popen %s \" ARG1 \": %m\", arg0));\n-  for (;;) {\n-    char line[LINE_MAX];\n-    char *s = fgets(line, sizeof(line), f);\n-    if (!s)\n-      break;\n-    s = line;\n-    \/\/ x86.cpu_features.features[0x0].active[0x2]=0x7ed83203\n-    const char prefix[] = \"x86.cpu_features.features[\";\n-    if (strncmp(s, prefix, sizeof(prefix) - 1) != 0)\n-      continue;\n-    s += sizeof(prefix) - 1;\n-    unsigned long index = strtoul(s, &s, 0);\n-    if (index >= index_max)\n-      continue;\n-    const char mid[] = \"].active[\";\n-    if (strncmp(s, mid, sizeof(mid) - 1) != 0)\n-      continue;\n-    s += sizeof(mid) - 1;\n-    unsigned long reg = strtoul(s, &s, 0);\n-    if (reg >= reg_max)\n-      continue;\n-    if (s[0] != ']' || s[1] != '=')\n-      continue;\n-    s += 2;\n-    unsigned long val = strtoul(s, &s, 0);\n-    if (val > UINT_MAX)\n-      continue;\n-    if (s[0] != '\\n' || s[1] != 0)\n-      continue;\n-    active[index][reg] = val;\n-  }\n-  if (ferror(f))\n-    vm_exit_during_initialization(err_msg(\"Error reading popen-ed %s \" ARG1 \": %m\", arg0));\n-  if (!feof(f))\n-    vm_exit_during_initialization(err_msg(\"EOF not reached on popen-ed %s \" ARG1, arg0));\n-  pclose_r(arg0, f, f_child);\n-#undef ARG1\n-#endif \/\/ INCLUDE_LD_SO_LIST_DIAGNOSTICS\n@@ -1203,7 +1061,1 @@\n-# define FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) CPU_FEATURE_ACTIVE(glibc)\n-#elif INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-# define FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) ({ \\\n-    hotspot_union u;                                                                    \\\n-    u.value = active[glibc_index][glibc_reg];                                           \\\n-    u.bits.hotspot_field != 0;                                                          \\\n-  })\n+# define FEATURE_ACTIVE(glibc) CPU_FEATURE_ACTIVE(glibc)\n@@ -1211,1 +1063,1 @@\n-# define FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) true\n+# define FEATURE_ACTIVE(glibc) true\n@@ -1213,5 +1065,5 @@\n-#define EXCESSIVE6(kind, hotspotglibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) do {                                                                      \\\n-    EXCESSIVE_HANDLED(kind, hotspotglibc);                                                                                                                             \\\n-    if (PASTE_TOKENS(excessive_, kind) & PASTE_TOKENS3(kind, _, hotspotglibc) && FEATURE_ACTIVE(hotspotglibc, hotspot_field, hotspot_union, glibc_index, glibc_reg)) { \\\n-      PASTE_TOKENS(disable_, kind) |= PASTE_TOKENS3(kind, _, hotspotglibc);                                                                                            \\\n-    }                                                                                                                                                                  \\\n+#define EXCESSIVE3(kind, hotspot, glibc) do {                                                        \\\n+    EXCESSIVE_HANDLED(kind, hotspot);                                                                \\\n+    if (PASTE_TOKENS(excessive_, kind) & PASTE_TOKENS3(kind, _, hotspot) && FEATURE_ACTIVE(glibc)) { \\\n+      PASTE_TOKENS(disable_, kind) |= PASTE_TOKENS3(kind, _, hotspot);                               \\\n+    }                                                                                                \\\n@@ -1219,36 +1071,30 @@\n-#define EXCESSIVE(kind, hotspotglibc, hotspot_union, def...) EXCESSIVE6(kind, hotspotglibc, hotspot_field, def)\n-#define DEF_ExtCpuid1Ecx ExtCpuid1Ecx, CPUID_INDEX_80000001, ecx\n-#define DEF_SefCpuid7Ebx SefCpuid7Ebx, CPUID_INDEX_7       , ebx\n-#define DEF_SefCpuid7Ecx SefCpuid7Ecx, CPUID_INDEX_7       , ecx\n-#define DEF_SefCpuid7Edx SefCpuid7Edx, CPUID_INDEX_7       , edx\n-#define DEF_StdCpuid1Ecx StdCpuid1Ecx, CPUID_INDEX_1       , ecx\n-#define DEF_StdCpuid1Edx StdCpuid1Edx, CPUID_INDEX_1       , edx\n-  EXCESSIVE(CPU  , AVX     , avx     , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , CX8     , cmpxchg8, DEF_StdCpuid1Edx);\n-  EXCESSIVE(CPU  , FMA     , fma     , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , RTM     , rtm     , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX2    , avx2    , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , BMI1    , bmi1    , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , BMI2    , bmi2    , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , CMOV    , cmov    , DEF_StdCpuid1Edx);\n-  EXCESSIVE(CPU  , ERMS    , erms    , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , SSE2    , sse2    , DEF_StdCpuid1Edx);\n-  EXCESSIVE(CPU  , LZCNT   , fma4    , DEF_ExtCpuid1Ecx);\n-  EXCESSIVE(CPU  , SSSE3   , ssse3   , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , POPCNT  , popcnt  , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , SSE4_1  , sse4_1  , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , SSE4_2  , sse4_2  , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(CPU  , AVX512F , avx512f , DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512CD, avx512cd, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512BW, avx512bw, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512DQ, avx512dq, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512ER, avx512er, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512PF, avx512pf, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(CPU  , AVX512VL, avx512vl, DEF_SefCpuid7Ebx);\n-  EXCESSIVE(GLIBC, IBT     , ibt     , DEF_SefCpuid7Edx);\n-  EXCESSIVE(GLIBC, FMA4    , fma4    , DEF_ExtCpuid1Ecx);\n-  EXCESSIVE(GLIBC, MOVBE   , movbe   , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(GLIBC, SHSTK   , shstk   , DEF_SefCpuid7Ecx);\n-  EXCESSIVE(GLIBC, XSAVE   , xsave   , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(GLIBC, OSXSAVE , osxsave , DEF_StdCpuid1Ecx);\n-  EXCESSIVE(GLIBC, HTT     , ht      , DEF_StdCpuid1Edx);\n+#define EXCESSIVE(kind, hotspotglibc) EXCESSIVE3(kind, hotspotglibc, hotspotglibc)\n+  EXCESSIVE(CPU  , AVX     );\n+  EXCESSIVE(CPU  , CX8     );\n+  EXCESSIVE(CPU  , FMA     );\n+  EXCESSIVE(CPU  , RTM     );\n+  EXCESSIVE(CPU  , AVX2    );\n+  EXCESSIVE(CPU  , BMI1    );\n+  EXCESSIVE(CPU  , BMI2    );\n+  EXCESSIVE(CPU  , CMOV    );\n+  EXCESSIVE(CPU  , ERMS    );\n+  EXCESSIVE(CPU  , SSE2    );\n+  EXCESSIVE(CPU  , LZCNT   );\n+  EXCESSIVE(CPU  , SSSE3   );\n+  EXCESSIVE(CPU  , POPCNT  );\n+  EXCESSIVE(CPU  , SSE4_1  );\n+  EXCESSIVE(CPU  , SSE4_2  );\n+  EXCESSIVE(CPU  , AVX512F );\n+  EXCESSIVE(CPU  , AVX512CD);\n+  EXCESSIVE(CPU  , AVX512BW);\n+  EXCESSIVE(CPU  , AVX512DQ);\n+  EXCESSIVE(CPU  , AVX512ER);\n+  EXCESSIVE(CPU  , AVX512PF);\n+  EXCESSIVE(CPU  , AVX512VL);\n+  EXCESSIVE3(CPU , CET_IBT , IBT  );\n+  EXCESSIVE3(CPU , CET_SS  , SHSTK);\n+  EXCESSIVE(GLIBC, FMA4    );\n+  EXCESSIVE(GLIBC, MOVBE   );\n+  EXCESSIVE(GLIBC, XSAVE   );\n+  EXCESSIVE(GLIBC, OSXSAVE );\n+  EXCESSIVE(GLIBC, HTT     );\n@@ -1256,1 +1102,1 @@\n-#undef EXCESSIVE5\n+#undef EXCESSIVE3\n@@ -1261,12 +1107,12 @@\n-#define GLIBC_DISABLE(kind, hotspot_glibc) do {                                                                                                 \\\n-    assert(!(PASTE_TOKENS(disable_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot_glibc)), \"already used \" STR(kind) \"_\" STR(hotspot_glibc) ); \\\n-    DEBUG_ONLY(PASTE_TOKENS(disable_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot_glibc));                                                  \\\n-    if (PASTE_TOKENS(disable_, kind) & PASTE_TOKENS3(kind, _, hotspot_glibc)) {                                                                 \\\n-      const char str[] = \",-\" STR(hotspot_glibc);                                                                                               \\\n-      size_t remains = disable_str + sizeof(disable_str) - disable_end;                                                                         \\\n-      strncpy(disable_end, str, remains);                                                                                                       \\\n-      size_t len = strnlen(disable_end, remains);                                                                                               \\\n-      remains -= len;                                                                                                                           \\\n-      assert(remains > 0, \"internal error: disable_str overflow\");                                                                              \\\n-      disable_end += len;                                                                                                                       \\\n-    }                                                                                                                                           \\\n+#define GLIBC_DISABLE2(kind, hotspot, glibc) do {                                                                                   \\\n+    assert(!(PASTE_TOKENS(disable_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot)), \"already used \" STR(kind) \"_\" STR(hotspot) ); \\\n+    DEBUG_ONLY(PASTE_TOKENS(disable_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot));                                            \\\n+    if (PASTE_TOKENS(disable_, kind) & PASTE_TOKENS3(kind, _, hotspot)) {                                                           \\\n+      const char str[] = \",-\" STR(glibc);                                                                                           \\\n+      size_t remains = disable_str + sizeof(disable_str) - disable_end;                                                             \\\n+      strncpy(disable_end, str, remains);                                                                                           \\\n+      size_t len = strnlen(disable_end, remains);                                                                                   \\\n+      remains -= len;                                                                                                               \\\n+      assert(remains > 0, \"internal error: disable_str overflow\");                                                                  \\\n+      disable_end += len;                                                                                                           \\\n+    }                                                                                                                               \\\n@@ -1274,0 +1120,1 @@\n+#define GLIBC_DISABLE(kind, hotspot_glibc) GLIBC_DISABLE2(kind, hotspot_glibc, hotspot_glibc)\n@@ -1296,1 +1143,2 @@\n-  GLIBC_DISABLE(GLIBC, IBT)\n+  GLIBC_DISABLE2(CPU , CET_IBT, IBT)\n+  GLIBC_DISABLE2(CPU , CET_SS , SHSTK)\n@@ -1299,1 +1147,0 @@\n-  GLIBC_DISABLE(GLIBC, SHSTK)\n@@ -1349,2 +1196,0 @@\n-  GLIBC_UNSUPPORTED(CPU  , CET_IBT          );\n-  GLIBC_UNSUPPORTED(CPU  , CET_SS           );\n@@ -2856,4 +2701,4 @@\n-#if !INCLUDE_CPU_FEATURE_ACTIVE && !INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-          features_expected =       features_saved;\n-    glibc_features_expected = glibc_features_saved;\n-#endif\n+    if (!INCLUDE_CPU_FEATURE_ACTIVE) {\n+            features_expected =       features_saved;\n+      glibc_features_expected = glibc_features_saved;\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":62,"deletions":217,"binary":false,"changes":279,"status":"modified"},{"patch":"@@ -411,7 +411,5 @@\n-    decl(IBT,               \"ibt\",                3) \\\n-    decl(SHSTK,             \"shstk\",              4) \/* Also known as cet_ss *\/ \\\n-    decl(XSAVE,             \"xsave\",              5) \\\n-    decl(CMPXCHG16,         \"cmpxchg16\",          6) \/* Also known in cpuinfo as cx16 and in glibc as cmpxchg16b *\/ \\\n-    decl(LAHFSAHF,          \"lahfsahf\",           7) \/* Also known in cpuinfo as lahf_lm and in glibc as lahf64_sahf64 *\/ \\\n-    decl(F16C,              \"f16c\",               8) \\\n-    decl(HTT,               \"htt\",                9) \/* hotspot calls it 'ht' but it is affected by threads_per_core() *\/\n+    decl(XSAVE,             \"xsave\",              3) \\\n+    decl(CMPXCHG16,         \"cmpxchg16\",          4) \/* Also known in cpuinfo as cx16 and in glibc as cmpxchg16b *\/ \\\n+    decl(LAHFSAHF,          \"lahfsahf\",           5) \/* Also known in cpuinfo as lahf_lm and in glibc as lahf64_sahf64 *\/ \\\n+    decl(F16C,              \"f16c\",               6) \\\n+    decl(HTT,               \"htt\",                7) \/* hotspot calls it 'ht' but it is affected by threads_per_core() *\/\n@@ -570,4 +568,0 @@\n-      if (sef_cpuid7_ecx.bits.cet_ss != 0)\n-        result |= GLIBC_SHSTK;\n-      if (sef_cpuid7_edx.bits.cet_ibt != 0)\n-        result |= GLIBC_IBT;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -258,9 +258,0 @@\n-#ifndef INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-#define INCLUDE_LD_SO_LIST_DIAGNOSTICS 1\n-#endif \/\/ INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-\n-#if INCLUDE_CPU_FEATURE_ACTIVE && INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-#undef  INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-#define INCLUDE_LD_SO_LIST_DIAGNOSTICS 0\n-#endif\n-\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}