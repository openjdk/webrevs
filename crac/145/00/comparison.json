{"files":[{"patch":"@@ -29,0 +29,5 @@\n+import jdk.crac.impl.ExceptionPrinter;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n@@ -43,0 +48,10 @@\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        ExceptionPrinter.print(this, s);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter w) {\n+        ExceptionPrinter.print(this, w);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import jdk.crac.impl.ExceptionPrinter;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n@@ -43,0 +48,10 @@\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        ExceptionPrinter.print(this, s);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter w) {\n+        ExceptionPrinter.print(this, w);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import jdk.crac.impl.ExceptionPrinter;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n@@ -43,0 +48,10 @@\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        ExceptionPrinter.print(this, s);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter w) {\n+        ExceptionPrinter.print(this, w);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+package jdk.crac.impl;\n+\n+import jdk.crac.CheckpointException;\n+import jdk.crac.RestoreException;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+public final class ExceptionPrinter {\n+    private static final String MSG_FORMAT = \"%s: Failed with %s inner exceptions%n\";\n+    private static final String CAUSE_FORMAT = \"Cause %d\/%d: \";\n+\n+    public static void print(Exception exception, PrintStream s) {\n+        assertExceptionType(exception);\n+        Throwable[] suppressed = exception.getSuppressed();\n+        s.printf(MSG_FORMAT, exception.getClass().getName(), suppressed.length);\n+        for (int i = 0; i < suppressed.length; ++i) {\n+            s.printf(CAUSE_FORMAT, i + 1, suppressed.length);\n+            suppressed[i].printStackTrace(s);\n+        }\n+    }\n+\n+    public static void print(Exception exception, PrintWriter w) {\n+        assertExceptionType(exception);\n+        Throwable[] suppressed = exception.getSuppressed();\n+        w.printf(MSG_FORMAT, exception.getClass().getName(), suppressed.length);\n+        for (int i = 0; i < suppressed.length; ++i) {\n+            w.printf(CAUSE_FORMAT, i + 1, suppressed.length);\n+            suppressed[i].printStackTrace(w);\n+        }\n+    }\n+\n+    private static void assertExceptionType(Exception exception) {\n+        Objects.requireNonNull(exception);\n+        if (Stream.of(CheckpointException.class, RestoreException.class,\n+                javax.crac.CheckpointException.class, javax.crac.RestoreException.class)\n+                .noneMatch(cls -> cls.isInstance(exception))) {\n+            throw new IllegalArgumentException(\"This printer is meant only for C\/R exceptions\", exception);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/ExceptionPrinter.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -32,0 +32,4 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import static jdk.test.lib.Asserts.assertGreaterThan;\n+import static jdk.test.lib.Asserts.assertTrue;\n@@ -53,2 +57,11 @@\n-        new CracBuilder().engine(CracEngine.SIMULATE).printResources(true)\n-                .startCheckpoint().waitForSuccess();\n+        OutputAnalyzer output = new CracBuilder().engine(CracEngine.SIMULATE).printResources(true).captureOutput(true)\n+                .startCheckpoint().outputAnalyzer().shouldHaveExitValue(0);\n+        String err = output.getStderr();\n+        assertTrue(err.contains(\"CheckpointException: Failed with 2 inner exceptions\"), err);\n+        int firstCause = err.indexOf(\"Cause 1\/2: java.lang.RuntimeException: should not pass\");\n+        int secondCause = err.indexOf(\"Cause 2\/2: jdk.crac.impl.CheckpointOpenFileException\");\n+        assertGreaterThan(firstCause, 0, err);\n+        assertGreaterThan(secondCause, 0, err);\n+        \/\/ check if stacks are present\n+        assertTrue(err.substring(firstCause, secondCause).contains(\"\\tat \"));\n+        assertTrue(err.substring(secondCause).contains(\"\\tat \"));\n","filename":"test\/jdk\/jdk\/crac\/DryRunTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}