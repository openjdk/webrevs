{"files":[{"patch":"@@ -29,5 +29,0 @@\n-import jdk.crac.impl.ExceptionPrinter;\n-\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n@@ -36,1 +31,1 @@\n- * these are recorded as {@linkplain #getSuppressed() suppressed exceptions}.\n+ * these are recorded as {@linkplain #getNestedExceptions() nested exceptions}.\n@@ -39,1 +34,1 @@\n-public final class CheckpointException extends Exception {\n+public final class CheckpointException extends ExceptionBase {\n@@ -43,1 +38,1 @@\n-     * Creates a {@code CheckpointException}.\n+     * Create exception with no nested exceptions.\n@@ -46,6 +41,0 @@\n-        super(null, null, true, false);\n-    }\n-\n-    @Override\n-    public void printStackTrace(PrintStream s) {\n-        ExceptionPrinter.print(this, s);\n@@ -54,3 +43,6 @@\n-    @Override\n-    public void printStackTrace(PrintWriter w) {\n-        ExceptionPrinter.print(this, w);\n+    \/**\n+     * Create exception with provided nested exceptions.\n+     * @param nested Nested exceptions.\n+     *\/\n+    public CheckpointException(Throwable[] nested) {\n+        super(nested);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,5 +49,1 @@\n-            CheckpointException newException = new CheckpointException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n+            throw new CheckpointException(e.getNestedExceptions());\n@@ -63,5 +59,1 @@\n-            RestoreException newException = new RestoreException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n+            throw new RestoreException(e.getNestedExceptions());\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ContextWrapper.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,5 +75,1 @@\n-            CheckpointException newException = new CheckpointException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n+            throw new CheckpointException(e.getNestedExceptions());\n@@ -81,5 +77,1 @@\n-            RestoreException newException = new RestoreException();\n-            for (Throwable t : e.getSuppressed()) {\n-                newException.addSuppressed(t);\n-            }\n-            throw newException;\n+            throw new RestoreException(e.getNestedExceptions());\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+package javax.crac;\n+\n+import jdk.crac.CheckpointException;\n+import jdk.crac.RestoreException;\n+import jdk.crac.impl.ExceptionPrinter;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+\/**\n+ * Common base for {@link CheckpointException} and {@link RestoreException}.\n+ *\/\n+public abstract class ExceptionBase extends Exception {\n+    private static final long serialVersionUID = -6281937111554065647L;\n+    private static final Throwable[] EMPTY_THROWABLE_ARRAY = new Throwable[0];\n+    private ArrayList<Throwable> nested;\n+\n+    ExceptionBase() {\n+        super(null, null, false, false);\n+    }\n+\n+    ExceptionBase(Throwable[] nested) {\n+        this();\n+        if (nested != null && nested.length > 0) {\n+            this.nested = new ArrayList<>(Arrays.asList(nested));\n+        }\n+    }\n+\n+    \/**\n+     * Add exception to the list of nested exceptions.\n+     * @param throwable Added exception\n+     *\/\n+    public void addNestedException(Throwable throwable) {\n+        if (this.nested == null) {\n+            this.nested = new ArrayList<>();\n+        }\n+        this.nested.add(throwable);\n+    }\n+\n+    \/**\n+     * Returns an array containing all the exceptions that this exception holds as nested exceptions.\n+     * @return an array containing all nested exceptions.\n+     *\/\n+    public Throwable[] getNestedExceptions() {\n+        if (nested == null) {\n+            return EMPTY_THROWABLE_ARRAY;\n+        }\n+        return nested.toArray(EMPTY_THROWABLE_ARRAY);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        ExceptionPrinter.print(this, s);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter w) {\n+        ExceptionPrinter.print(this, w);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ExceptionBase.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -63,5 +63,1 @@\n-                Exception newException = new jdk.crac.CheckpointException();\n-                for (Throwable t : e.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                throw newException;\n+                throw new jdk.crac.CheckpointException(e.getNestedExceptions());\n@@ -80,5 +76,1 @@\n-                Exception newException = new jdk.crac.RestoreException();\n-                for (Throwable t : e.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                throw newException;\n+                throw new jdk.crac.RestoreException(e.getNestedExceptions());\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ResourceWrapper.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,5 +29,0 @@\n-import jdk.crac.impl.ExceptionPrinter;\n-\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n@@ -36,1 +31,1 @@\n- * these are recorded as {@linkplain #getSuppressed() suppressed exceptions}.\n+ * these are recorded as {@linkplain #getNestedExceptions() nested exceptions}.\n@@ -39,1 +34,1 @@\n-public final class RestoreException extends Exception {\n+public final class RestoreException extends ExceptionBase {\n@@ -43,1 +38,1 @@\n-     * Creates a {@code RestoreException}.\n+     * Create exception with no nested exceptions.\n@@ -46,6 +41,0 @@\n-        super(null, null, true, false);\n-    }\n-\n-    @Override\n-    public void printStackTrace(PrintStream s) {\n-        ExceptionPrinter.print(this, s);\n@@ -54,3 +43,6 @@\n-    @Override\n-    public void printStackTrace(PrintWriter w) {\n-        ExceptionPrinter.print(this, w);\n+    \/**\n+     * Create exception with provided nested exceptions.\n+     * @param nested Nested exceptions.\n+     *\/\n+    public RestoreException(Throwable[] nested) {\n+        super(nested);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- * Exceptions from restore notification are provided as suppressed ones by a {@code RestoreException} (in a sense of {@link Throwable#addSuppressed}).\n+ * Exceptions from restore notification are provided as nested ones by a {@link javax.crac.RestoreException#getNestedExceptions()}.\n@@ -66,1 +66,1 @@\n- * In this case, exceptions from checkpoint and restore notifications are provided as suppressed ones by {@code CheckpointException}.\n+ * In this case, exceptions from checkpoint and restore notifications are provided as {@link javax.crac.ExceptionBase#getNestedExceptions() nested} by {@code CheckpointException}.\n@@ -85,1 +85,1 @@\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n+ *   <li>When an exception is thrown during notification, it is caught by the {@code Context} and is nested into a {@code CheckpointException} or {@code RestoreException}, depending on the throwing method.\n@@ -87,1 +87,1 @@\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n+ *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions nested in the original exception are provided as nested in another {@code CheckpointException} or {@code RestoreException}, depending on the throwing method.\n@@ -90,1 +90,1 @@\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n+ * <li>All exceptions thrown by {@code Resource} are {@link javax.crac.ExceptionBase#getNestedExceptions() nested} in {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/package-info.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,5 +29,0 @@\n-import jdk.crac.impl.ExceptionPrinter;\n-\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n@@ -36,1 +31,1 @@\n- * these are recorded as {@linkplain #getSuppressed() suppressed exceptions}.\n+ * these are recorded as {@linkplain #getNestedExceptions() nested exceptions}.\n@@ -39,1 +34,1 @@\n-public final class CheckpointException extends Exception {\n+public final class CheckpointException extends ExceptionBase {\n@@ -43,1 +38,1 @@\n-     * Creates a {@code CheckpointException}.\n+     * Create exception with no nested exceptions.\n@@ -46,6 +41,0 @@\n-        super(null, null, true, false);\n-    }\n-\n-    @Override\n-    public void printStackTrace(PrintStream s) {\n-        ExceptionPrinter.print(this, s);\n@@ -54,3 +43,6 @@\n-    @Override\n-    public void printStackTrace(PrintWriter w) {\n-        ExceptionPrinter.print(this, w);\n+    \/**\n+     * Create exception with provided nested exceptions.\n+     * @param nested Nested exceptions.\n+     *\/\n+    public CheckpointException(Throwable[] nested) {\n+        super(nested);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -225,1 +224,1 @@\n-                checkpointException.resuppress(re);\n+                checkpointException.addNestedExceptions(re);\n@@ -293,1 +292,1 @@\n-                ex.addSuppressed(new IllegalStateException(\"Recursive checkpoint is not allowed\"));\n+                ex.addNestedException(new IllegalStateException(\"Recursive checkpoint is not allowed\"));\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+package jdk.crac;\n+\n+import jdk.crac.impl.ExceptionPrinter;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+\/**\n+ * Common base for {@link CheckpointException} and {@link RestoreException}\n+ *\/\n+public abstract class ExceptionBase extends Exception {\n+    private static final long serialVersionUID = -8131840538114148870L;\n+    private static final Throwable[] EMPTY_THROWABLE_ARRAY = new Throwable[0];\n+    private ArrayList<Throwable> nested;\n+\n+    ExceptionBase() {\n+        super(null, null, false, false);\n+    }\n+\n+    ExceptionBase(Throwable[] nested) {\n+        this();\n+        if (nested != null && nested.length > 0) {\n+            this.nested = new ArrayList<>(Arrays.asList(nested));\n+        }\n+    }\n+\n+    \/**\n+     * Add exception to the list of nested exceptions.\n+     * @param throwable Added exception\n+     *\/\n+    public void addNestedException(Throwable throwable) {\n+        if (this.nested == null) {\n+            this.nested = new ArrayList<>();\n+        }\n+        this.nested.add(throwable);\n+    }\n+\n+    \/**\n+     * Returns an array containing all the exceptions that this exception holds as nested exceptions.\n+     * @return an array containing all nested exceptions.\n+     *\/\n+    public Throwable[] getNestedExceptions() {\n+        if (nested == null) {\n+            return EMPTY_THROWABLE_ARRAY;\n+        }\n+        return nested.toArray(EMPTY_THROWABLE_ARRAY);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        ExceptionPrinter.print(this, s);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter w) {\n+        ExceptionPrinter.print(this, w);\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/ExceptionBase.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n- * these are recorded as {@linkplain #getSuppressed() suppressed exceptions}.\n+ * these are recorded as {@linkplain #getNestedExceptions() nested exceptions}.\n@@ -34,1 +34,1 @@\n-public final class RestoreException extends Exception {\n+public final class RestoreException extends ExceptionBase {\n@@ -38,1 +38,1 @@\n-     * Creates a {@code RestoreException}.\n+     * Create exception with no nested exceptions.\n@@ -41,1 +41,8 @@\n-        super(null, null, true, false);\n+    }\n+\n+    \/**\n+     * Create exception with provided nested exceptions.\n+     * @param nested Nested exceptions.\n+     *\/\n+    public RestoreException(Throwable[] nested) {\n+        super(nested);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3,0 +3,2 @@\n+import jdk.crac.ExceptionBase;\n+\n@@ -5,1 +7,1 @@\n-public class ExceptionHolder<E extends Exception> {\n+public class ExceptionHolder<E extends ExceptionBase> {\n@@ -30,1 +32,1 @@\n-    public void resuppress(Exception e) {\n+    public void addNestedExceptions(ExceptionBase e) {\n@@ -32,2 +34,2 @@\n-        for (Throwable t : e.getSuppressed()) {\n-            exception.addSuppressed(t);\n+        for (Throwable t : e.getNestedExceptions()) {\n+            exception.addNestedException(t);\n@@ -44,1 +46,1 @@\n-            resuppress(e);\n+            addNestedExceptions((ExceptionBase) e);\n@@ -52,1 +54,1 @@\n-            exception.addSuppressed(e);\n+            exception.addNestedException(e);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/ExceptionHolder.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,2 +3,1 @@\n-import jdk.crac.CheckpointException;\n-import jdk.crac.RestoreException;\n+import jdk.crac.ExceptionBase;\n@@ -9,1 +8,0 @@\n-import java.util.stream.Stream;\n@@ -12,1 +10,1 @@\n-    private static final String MSG_FORMAT = \"%s: Failed with %s inner exceptions%n\";\n+    private static final String MSG_FORMAT = \"%s: Failed with %s nested exceptions%n\";\n@@ -16,6 +14,5 @@\n-        assertExceptionType(exception);\n-        Throwable[] suppressed = exception.getSuppressed();\n-        s.printf(MSG_FORMAT, exception.getClass().getName(), suppressed.length);\n-        for (int i = 0; i < suppressed.length; ++i) {\n-            s.printf(CAUSE_FORMAT, i + 1, suppressed.length);\n-            suppressed[i].printStackTrace(s);\n+        Throwable[] nested = getNestedExceptions(exception);\n+        s.printf(MSG_FORMAT, exception.getClass().getName(), nested.length);\n+        for (int i = 0; i < nested.length; ++i) {\n+            s.printf(CAUSE_FORMAT, i + 1, nested.length);\n+            nested[i].printStackTrace(s);\n@@ -26,6 +23,5 @@\n-        assertExceptionType(exception);\n-        Throwable[] suppressed = exception.getSuppressed();\n-        w.printf(MSG_FORMAT, exception.getClass().getName(), suppressed.length);\n-        for (int i = 0; i < suppressed.length; ++i) {\n-            w.printf(CAUSE_FORMAT, i + 1, suppressed.length);\n-            suppressed[i].printStackTrace(w);\n+        Throwable[] nested = getNestedExceptions(exception);\n+        w.printf(MSG_FORMAT, exception.getClass().getName(), nested.length);\n+        for (int i = 0; i < nested.length; ++i) {\n+            w.printf(CAUSE_FORMAT, i + 1, nested.length);\n+            nested[i].printStackTrace(w);\n@@ -35,1 +31,1 @@\n-    private static void assertExceptionType(Exception exception) {\n+    private static Throwable[] getNestedExceptions(Exception exception) {\n@@ -37,3 +33,5 @@\n-        if (Stream.of(CheckpointException.class, RestoreException.class,\n-                javax.crac.CheckpointException.class, javax.crac.RestoreException.class)\n-                .noneMatch(cls -> cls.isInstance(exception))) {\n+        if (exception instanceof ExceptionBase ex) {\n+            return ex.getNestedExceptions();\n+        } else if (exception instanceof javax.crac.ExceptionBase ex) {\n+            return ex.getNestedExceptions();\n+        } else {\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/ExceptionPrinter.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- * Exceptions from restore notification are provided as suppressed ones by a {@code RestoreException} (in a sense of {@link Throwable#addSuppressed}).\n+ * Exceptions from restore notification are provided as nested ones by a {@link javax.crac.RestoreException#getNestedExceptions()}.\n@@ -66,1 +66,1 @@\n- * In this case, exceptions from checkpoint and restore notifications are provided as suppressed ones by {@code CheckpointException}.\n+ * In this case, exceptions from checkpoint and restore notifications are provided as {@link javax.crac.ExceptionBase#getNestedExceptions() nested} by {@code CheckpointException}.\n@@ -85,1 +85,1 @@\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n+ *   <li>When an exception is thrown during notification, it is caught by the {@code Context} and is nested into a {@code CheckpointException} or {@code RestoreException}, depending on the throwing method.\n@@ -87,1 +87,1 @@\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n+ *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions nested in the original exception are provided as nested in another {@code CheckpointException} or {@code RestoreException}, depending on the throwing method.\n@@ -90,1 +90,1 @@\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n+ * <li>All exceptions thrown by {@code Resource} are {@link javax.crac.ExceptionBase#getNestedExceptions() nested} in {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/package-info.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-            assertEquals(4, e.getSuppressed().length);\n+            assertEquals(4, e.getNestedExceptions().length);\n","filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        assertTrue(err.contains(\"CheckpointException: Failed with 2 inner exceptions\"), err);\n+        assertTrue(err.contains(\"CheckpointException: Failed with 2 nested exceptions\"), err);\n@@ -87,1 +87,1 @@\n-            for (Throwable e : ce.getSuppressed()) {\n+            for (Throwable e : ce.getNestedExceptions()) {\n","filename":"test\/jdk\/jdk\/crac\/DryRunTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-            assertEquals(1, e.getSuppressed().length, Arrays.toString(e.getSuppressed()));\n-            assertEquals(EXCEPTION_MESSAGE, e.getSuppressed()[0].getMessage());\n+            assertEquals(1, e.getNestedExceptions().length, Arrays.toString(e.getSuppressed()));\n+            assertEquals(EXCEPTION_MESSAGE, e.getNestedExceptions()[0].getMessage());\n","filename":"test\/jdk\/jdk\/crac\/FailedResourceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                assertEquals(2, e.getSuppressed().length);\n+                assertEquals(2, e.getNestedExceptions().length);\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/ProcessPipelineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-                    assertEquals(1, ex.getSuppressed().length);\n+                    assertEquals(1, ex.getNestedExceptions().length);\n@@ -96,1 +96,1 @@\n-                    assertEquals(2, ex.getSuppressed().length);\n+                    assertEquals(2, ex.getNestedExceptions().length);\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/ReopenFailureTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}