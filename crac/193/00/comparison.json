{"files":[{"patch":"@@ -93,0 +93,1 @@\n+char*  Arguments::_java_command_crac            = nullptr;\n@@ -2207,3 +2208,3 @@\n-      if (strcmp(key, \"sun.java.command\") == 0) {\n-        char *old_java_command = _java_command;\n-        _java_command = os::strdup_check_oom(value, mtArguments);\n+      if (strcmp(key, \"sun.java.crac_command\") == 0) {\n+        char *old_java_command = _java_command_crac;\n+        _java_command_crac = os::strdup_check_oom(value, mtArguments);\n@@ -2252,0 +2253,1 @@\n+        !match_option(option, \"-Dsun.java.crac_command\", &tail) &&\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -199,0 +199,1 @@\n+  static char* _java_command_crac;\n@@ -402,0 +403,1 @@\n+  static const char* java_command_crac()        { return _java_command_crac; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -554,1 +554,1 @@\n-          Arguments::java_command() ? Arguments::java_command() : \"\",\n+          Arguments::java_command_crac() ? Arguments::java_command_crac() : \"\",\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.ArrayList;\n@@ -239,1 +240,21 @@\n-            String[] args = newArguments.split(\" \");\n+            \/\/ Parse arguments into array, unescape spaces\n+            final char escChar = '\\\\';\n+            final char sepChar = ' ';\n+            ArrayList<String> argList = new ArrayList<String>();\n+            argList.add(\"\");\n+            for (int i = 0; i < newArguments.length(); ++i) {\n+                final char curChar = newArguments.charAt(i);\n+                final int lastIdx = argList.size() - 1;\n+                switch (curChar) {\n+                    case sepChar:\n+                        argList.add(\"\");\n+                        break;\n+                    case escChar:\n+                        argList.set(lastIdx, argList.get(lastIdx) + newArguments.charAt(++i));\n+                        break;\n+                    default:\n+                        argList.set(lastIdx, argList.get(lastIdx) + curChar);\n+                }\n+            }\n+\n+            final String[] args = argList.toArray(new String[argList.size()]);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Core.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -320,0 +320,1 @@\n+    SetJavaCommandLinePropCrac(what, argc, argv);\n@@ -1833,0 +1834,58 @@\n+void\n+SetJavaCommandLinePropCrac(char *what, int argc, char **argv)\n+{\n+    \/\/ let's build a new option that escapes whitespaces:\n+    \/\/ Test \"1 2\" 3 -> \"-Dsun.java.crac_command=Test 1\\ 2 3\"\n+    \/\/ and parse it in the VM\/JDK\n+\n+    if (what == NULL) {\n+        \/* unexpected, one of these should be set. just return without\n+         * setting the property\n+         *\/\n+        return;\n+    }\n+\n+    const char* dashDstr = \"-Dsun.java.crac_command=\";\n+\n+    \/* determine the amount of memory to allocate assuming\n+     * the individual components will be space separated\n+     *\/\n+    size_t len = JLI_StrLen(what);\n+    for (int i = 0; i < argc; i++) {\n+        len += JLI_StrLen(argv[i]) + 1;\n+    }\n+    \/* allocate space enough for character escaping*\/\n+    len *= 2;\n+\n+    \/* allocate the memory *\/\n+    char *javaCommand = (char*) JLI_MemAlloc(len + JLI_StrLen(dashDstr) + 1);\n+\n+    \/* build the -D string *\/\n+    *javaCommand = '\\0';\n+    JLI_StrCat(javaCommand, dashDstr);\n+    JLI_StrCat(javaCommand, what);\n+\n+    char *javaCmdEnd = javaCommand + JLI_StrLen(javaCommand);\n+    for (int i = 0; i < argc; i++) {\n+        \/* The components of the string are space separated. In\n+         * the case of embedded white space, it will be escaped\n+         * with a special char.\n+         * This is needed until SetJavaCommandLineProp is fixed in OpenJDK.\n+         *\/\n+        const char escChar = '\\\\';\n+        const char sepChar = ' ';\n+        const char *arg = argv[i];\n+        const size_t argLen = JLI_StrLen(arg);\n+        *javaCmdEnd++ = sepChar;\n+        for (size_t j = 0; j < argLen; ++j) {\n+            const char curChar = arg[j];\n+            if (escChar == curChar || sepChar == curChar) {\n+                *javaCmdEnd++ = escChar;\n+            }\n+            *javaCmdEnd++ = curChar;\n+        }\n+    }\n+    *javaCmdEnd++ = '\\0';\n+    AddOption(javaCommand, NULL);\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -154,0 +154,2 @@\n+void SetJavaCommandLinePropCrac(char *what, int argc, char **argv);\n+\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Azul Systems, 385 Moffett Park Drive, Suite 115, Sunnyvale\n+ * CA 94089 USA or visit www.azul.com if you need additional information or\n+ * have any questions.\n+ *\/\n+\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test RestoreNewArgsTest\n+ * @summary the test checks new args are propagated into a restored process.\n+ * @library \/test\/lib\n+ * @build RestoreNewArgsTest\n+ * @run driver\/timeout=120 jdk.test.lib.crac.CracTest\n+ * @requires (os.family == \"linux\")\n+ *\/\n+public class RestoreNewArgsTest implements CracTest {\n+\n+    @Override\n+    public void test() throws Exception {\n+        final String MAIN_CLASS = \"RestoreNewArgsTest$InternalMain\";\n+        final String ARG0 = \"test arg\";\n+        final String ARG1 = \"\\\\ another\\\\ \\\"test\\\\\\\\arg \";\n+        final String ARG2 = \"  ano\\007ther  'yet  arg  \\\\\";\n+        CracBuilder builder = new CracBuilder().captureOutput(true);\n+        builder.doCheckpoint();\n+        builder.startRestoreWithArgs(null, Arrays.asList(MAIN_CLASS, ARG0, ARG1, ARG2))\n+            .waitForSuccess().outputAnalyzer()\n+            .shouldContain(\"RESTORED\")\n+            .shouldContain(\"Arg 0: \" + ARG0 + \".\")\n+            .shouldContain(\"Arg 1: \" + ARG1 + \".\")\n+            .shouldContain(\"Arg 2: \" + ARG2 + \".\");\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        jdk.crac.Core.checkpointRestore();\n+        System.out.println(\"RESTORED\");\n+    }\n+\n+    public class InternalMain {\n+        public static void main(String args[]) throws Exception {\n+            int i = 0;\n+            for (var arg : args) {\n+                System.out.println(\"Arg \" + i++ + \": \" + arg + \".\");\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/jdk\/crac\/RestoreNewArgsTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -413,0 +413,4 @@\n+        return startRestoreWithArgs(javaPrefix, null);\n+    }\n+\n+    public CracProcess startRestoreWithArgs(List<String> javaPrefix, List<String> args) throws Exception {\n@@ -418,0 +422,3 @@\n+        if (null != args) {\n+            cmd.addAll(args);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}