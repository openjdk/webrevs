{"files":[{"patch":"@@ -24,0 +24,1 @@\n+import jdk.test.lib.containers.docker.Common;\n@@ -40,0 +41,1 @@\n+ * @requires container.support\n@@ -85,0 +87,1 @@\n+        final String imageName = Common.imageName(\"pid-adjustment\");\n@@ -86,1 +89,1 @@\n-            .inDockerImage(\"pid-adjustment\")\n+            .inDockerImage(imageName)\n@@ -89,24 +92,7 @@\n-        if (needSetMinPid) {\n-            builder.vmOption(\"-XX:CRaCMinPid=\" + lastPid);\n-        }\n-        if (0 > expectedLastPid) {\n-            builder.captureOutput(true);\n-        }\n-        if (null != lastPidSetup) {\n-            \/\/ Set up the initial last pid,\n-            \/\/ create a non-privileged user,\n-            \/\/ and force spinning the last pid running checkpoint under the user.\n-            builder\n-                .containerSetup(Arrays.asList(\"bash\", \"-c\", \"useradd the_user && echo \" + lastPidSetup + \" >\/proc\/sys\/kernel\/ns_last_pid\"))\n-                .dockerCheckpointOptions(Arrays.asList(\"-u\", \"the_user\"));\n-        }\n-\n-        if (0 < expectedLastPid) {\n-            builder.startCheckpoint().waitForSuccess();\n-        } else {\n-            final int expectedExitValue = (int)java.lang.Math.abs(expectedLastPid);\n-            CracProcess process = builder.startCheckpoint();\n-            final int exitValue = process.waitFor();\n-            assertEquals(expectedExitValue, exitValue, \"Process returned unexpected exit code: \" + exitValue);\n-            OutputAnalyzer oa = process.outputAnalyzer();\n-            oa.shouldNotContain(CURRENT_PID_MESSAGE);\n+        try {\n+            if (needSetMinPid) {\n+                builder.vmOption(\"-XX:CRaCMinPid=\" + lastPid);\n+            }\n+            if (0 > expectedLastPid) {\n+                builder.captureOutput(true);\n+            }\n@@ -114,1 +100,20 @@\n-                oa.shouldContain(\"spin_last_pid: Invalid argument (\" + lastPid + \")\");\n+                \/\/ Set up the initial last pid,\n+                \/\/ create a non-privileged user,\n+                \/\/ and force spinning the last pid running checkpoint under the user.\n+                builder\n+                    .containerSetup(Arrays.asList(\"bash\", \"-c\", \"useradd the_user && echo \" + lastPidSetup + \" >\/proc\/sys\/kernel\/ns_last_pid\"))\n+                    .dockerCheckpointOptions(Arrays.asList(\"-u\", \"the_user\"));\n+            }\n+\n+            if (0 < expectedLastPid) {\n+                builder.startCheckpoint().waitForSuccess();\n+            } else {\n+                final int expectedExitValue = (int)java.lang.Math.abs(expectedLastPid);\n+                CracProcess process = builder.startCheckpoint();\n+                final int exitValue = process.waitFor();\n+                assertEquals(expectedExitValue, exitValue, \"Process returned unexpected exit code: \" + exitValue);\n+                OutputAnalyzer oa = process.outputAnalyzer();\n+                oa.shouldNotContain(CURRENT_PID_MESSAGE);\n+                if (null != lastPidSetup) {\n+                    oa.shouldContain(\"spin_last_pid: Invalid argument (\" + lastPid + \")\");\n+                }\n@@ -116,0 +121,2 @@\n+        } finally {\n+            builder.ensureContainerKilled();\n","filename":"test\/jdk\/jdk\/crac\/ContainerPidAdjustmentTest.java","additions":33,"deletions":26,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        builder.checkpointViaJcmd();\n+        builder.checkpointViaJcmd(checkpointProcess.pid());\n","filename":"test\/jdk\/jdk\/crac\/DaemonAfterRestore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        Path bootIdFile = Files.createTempFile(\"NanoTimeTest-\", \"-boot_id\");\n+        Path bootIdFile = Files.createTempFile(\"TimedWaitingTest-\", \"-boot_id\");\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/TimedWaitingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,0 @@\n-import javax.imageio.IIOException;\n@@ -287,2 +286,0 @@\n-        \/\/ Make sure we start with a clean image directory\n-        DockerTestUtils.execute(Container.ENGINE_COMMAND, \"volume\", \"rm\", \"cr\");\n@@ -343,1 +340,2 @@\n-        cmd.addAll(Arrays.asList(\"--volume\", \"cr:\/cr\"));\n+        new File(System.getProperty(\"user.dir\") + \"\/cr\").mkdirs(); \/\/ create \"cr\" dir under the current user, to be able to delete it later.\n+        cmd.addAll(Arrays.asList(\"--volume\", System.getProperty(\"user.dir\") + \"\/cr:\/cr\"));\n@@ -371,0 +369,8 @@\n+\n+        \/\/ Docker needs some time to remove a container after kill\n+        OutputAnalyzer oa = null;\n+        do {\n+            oa = DockerTestUtils.execute(Container.ENGINE_COMMAND, \"ps\");\n+            oa.getExitValue();\n+        } while (oa.getStdout().contains(CONTAINER_NAME));\n+\n@@ -484,0 +490,4 @@\n+    public void checkpointViaJcmd(long pid) throws Exception {\n+        runJcmd(Long.toString(pid), \"JDK.checkpoint\").shouldHaveExitValue(0);\n+    }\n+\n@@ -485,0 +495,3 @@\n+        if (null == dockerImageName) {\n+            fail(\"Docker container is not set. Use checkpointViaJcmd(long pid) to run jcmd for non-container tests.\");\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}