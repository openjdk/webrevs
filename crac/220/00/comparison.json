{"files":[{"patch":"@@ -53,3 +53,0 @@\n-  \/\/ Some keys can be excluded if they are not supposed to be set by a user but rather by the\n-  \/\/ application the engine is linked to.\n-  \/\/\n@@ -59,1 +56,1 @@\n-  \/\/ * args=<string> (default: \\\"\\\") — other arguments.\n+  \/\/ * args=<string> (default: \\\"\\\") — other arguments.\\n\n","filename":"src\/hotspot\/share\/include\/crlib\/crlib_description.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"nmt\/memTag.hpp\"\n@@ -53,0 +54,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -326,0 +328,13 @@\n+  const GrowableArrayCHeap<const char *, MemTag::mtInternal> *controlled_opts = engine.vm_controlled_options();\n+  assert(controlled_opts != nullptr, \"must be\");\n+  if (!controlled_opts->is_empty()) {\n+    tty->cr();\n+    tty->print_raw(\"Configuration options controlled by the JVM:\");\n+    for (const char *opt : *controlled_opts) {\n+      tty->print_raw(\" \");\n+      tty->print_raw(opt);\n+    }\n+    tty->cr();\n+  }\n+  delete controlled_opts;\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -7,0 +30,1 @@\n+#include \"nmt\/memTag.hpp\"\n@@ -11,0 +35,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -17,1 +42,4 @@\n-\/\/ CRaC engine configuration options JVM sets directly instead of relaying from the user\n+\/\/ CRaC engine configuration options that JVM sets directly.\n+\/\/ If an option is controlled exctusively by JVM (i.e. the user is not allowed\n+\/\/ to pass the option through CRaCEngineOptions) it should be listed in\n+\/\/ CracEngine::vm_controlled_options().\n@@ -160,1 +188,1 @@\n-              \"crexec does not support an internal option: \" ENGINE_OPT_EXEC_LOCATION);\n+              \"crexec does not support expected option: \" ENGINE_OPT_EXEC_LOCATION);\n@@ -369,0 +397,28 @@\n+\n+GrowableArrayCHeap<const char *, MemTag::mtInternal> *CracEngine::vm_controlled_options() const {\n+  precond(_description_api != nullptr);\n+\n+  auto * const opts = new GrowableArrayCHeap<const char *, MemTag::mtInternal>();\n+\n+  if (_api->can_configure(_conf, ENGINE_OPT_IMAGE_LOCATION)) {\n+    opts->append(ENGINE_OPT_IMAGE_LOCATION);\n+  } else {\n+    log_debug(crac)(\"CRaC engine does not support expected option: \" ENGINE_OPT_IMAGE_LOCATION);\n+  }\n+\n+  const char *id = _description_api->identity(_conf);\n+  if (id == nullptr) {\n+    log_debug(crac)(\"CRaC engine failed to identify itself\");\n+    return opts;\n+  }\n+\n+  if (strcmp(id, \"crexec\") == 0) {\n+    if (_api->can_configure(_conf, ENGINE_OPT_EXEC_LOCATION)) {\n+      opts->append(ENGINE_OPT_EXEC_LOCATION);\n+    } else {\n+      log_debug(crac)(\"CRaC engine does not support expected option: \" ENGINE_OPT_EXEC_LOCATION);\n+    }\n+  }\n+\n+  return opts;\n+}\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.cpp","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -65,0 +66,1 @@\n+  GrowableArrayCHeap<const char *, MemTag::mtInternal> *vm_controlled_options() const;\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -365,4 +365,0 @@\n-  \/\/ Internal options which are expected to be set by the program crexec is linked to are omitted\n-  \/\/ since users are not supposed to pass them directly:\n-  \/\/ * image_location=<path> (no default) - path to a directory with checkpoint\/restore files.\n-  \/\/ * exec_location=<path> (no default) - path to the engine executable.\n@@ -370,0 +366,2 @@\n+    \"* image_location=<path> (no default) - path to a directory with checkpoint\/restore files.\\n\"\n+    \"* exec_location=<path> (no default) - path to the engine executable.\\n\"\n@@ -376,1 +374,1 @@\n-    \"engine executable, e.g. \\\"--arg1 --arg2 --arg3\\\".\";\n+    \"engine executable, e.g. \\\"--arg1 --arg2 --arg3\\\".\\n\";\n","filename":"src\/java.base\/share\/native\/libcrexec\/crexec.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}