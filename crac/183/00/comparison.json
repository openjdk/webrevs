{"files":[{"patch":"@@ -87,1 +87,1 @@\n-define_pd_global(ccstrlist, CRAllowedOpenFilePrefixes, nullptr);\n+define_pd_global(ccstrlist, CRaCAllowedOpenFilePrefixes, nullptr);\n","filename":"src\/hotspot\/os\/aix\/globals_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-define_pd_global(ccstrlist, CRAllowedOpenFilePrefixes, nullptr);\n-define_pd_global(ccstr, CREngine, \"simengine\");\n+define_pd_global(ccstrlist, CRaCAllowedOpenFilePrefixes, nullptr);\n+define_pd_global(ccstr, CRaCEngine, \"simengine\");\n","filename":"src\/hotspot\/os\/bsd\/globals_bsd.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -343,2 +343,2 @@\n-    if (CRAllowedOpenFilePrefixes != nullptr) {\n-      const char *prefix = CRAllowedOpenFilePrefixes;\n+    if (CRaCAllowedOpenFilePrefixes != nullptr) {\n+      const char *prefix = CRaCAllowedOpenFilePrefixes;\n@@ -360,1 +360,1 @@\n-        print_resources(\"OK: allowed in -XX:CRAllowedOpenFilePrefixes\\n\");\n+        print_resources(\"OK: allowed in -XX:CRaCAllowedOpenFilePrefixes\\n\");\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-define_pd_global(ccstr, CREngine, \"criuengine\");\n+define_pd_global(ccstr, CRaCEngine, \"criuengine\");\n@@ -115,1 +115,1 @@\n-define_pd_global(ccstrlist, CRAllowedOpenFilePrefixes, \"\/var\/lib\/sss\/mc\/\");\n+define_pd_global(ccstrlist, CRaCAllowedOpenFilePrefixes, \"\/var\/lib\/sss\/mc\/\");\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2097,1 +2097,1 @@\n-    perror(\"cannot fork for crengine\");\n+    perror(\"cannot fork for subprocess\");\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-define_pd_global(ccstrlist, CRAllowedOpenFilePrefixes, nullptr);\n-define_pd_global(ccstr, CREngine, \"simengine\");\n+define_pd_global(ccstrlist, CRaCAllowedOpenFilePrefixes, nullptr);\n+define_pd_global(ccstr, CRaCEngine, \"simengine\");\n","filename":"src\/hotspot\/os\/windows\/globals_windows.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -560,0 +560,9 @@\n+  { \"CREngine\",                     JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRAllowedOpenFilePrefixes\",    JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRAllowToSkipCheckpoint\",      JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRHeapDumpOnCheckpointException\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRPrintResourcesOnCheckpoint\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRTraceStartupTime\",           JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRDoThrowCheckpointException\", JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+  { \"CRPauseOnCheckpointError\",     JDK_Version::jdk(24), JDK_Version::undefined(), JDK_Version::undefined() },\n+\n@@ -571,0 +580,8 @@\n+  { \"CREngine\",                        \"CRaCEngine\" },\n+  { \"CRAllowedOpenFilePrefixes\",       \"CRaCAllowedOpenFilePrefixes\" },\n+  { \"CRAllowToSkipCheckpoint\",         \"CRaCAllowToSkipCheckpoint \"},\n+  { \"CRHeapDumpOnCheckpointException\", \"CRaCHeapDumpOnCheckpointException\" },\n+  { \"CRPrintResourcesOnCheckpoint\",    \"CRaCPrintResourcesOnCheckpoint\" },\n+  { \"CRTraceStartupTime\",              \"CRaCTraceStartupTime\" },\n+  { \"CRDoThrowCheckpointException\",    \"CRaCDoThrowCheckpointException\" },\n+  { \"CRPauseOnCheckpointError\",        \"CRaCPauseOnCheckpointError\" },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  if (CRPrintResourcesOnCheckpoint) {\n+  if (CRaCPrintResourcesOnCheckpoint) {\n@@ -135,1 +135,1 @@\n-  if (!CREngine) {\n+  if (!CRaCEngine) {\n@@ -138,1 +138,1 @@\n-  char *exec = os::strdup_check_oom(CREngine);\n+  char *exec = os::strdup_check_oom(CRaCEngine);\n@@ -155,1 +155,1 @@\n-      warning(\"Could not find CREngine %s: %s\", path, os::strerror(errno));\n+      warning(\"Could not find CRaCEngine %s: %s\", path, os::strerror(errno));\n@@ -171,1 +171,1 @@\n-        warning(\"Too many options to CREngine; cannot proceed with these: %s\", arg);\n+        warning(\"Too many options to CRaCEngine; cannot proceed with these: %s\", arg);\n@@ -198,1 +198,1 @@\n-      warning(\"Too many options to CREngine; cannot add %s\", arg);\n+      warning(\"Too many options to CRaCEngine; cannot add %s\", arg);\n@@ -244,1 +244,1 @@\n-  if (CRTraceStartupTime) {\n+  if (CRaCTraceStartupTime) {\n@@ -334,1 +334,1 @@\n-  if ((!ok || _dry_run) && CRHeapDumpOnCheckpointException) {\n+  if ((!ok || _dry_run) && CRaCHeapDumpOnCheckpointException) {\n@@ -338,1 +338,1 @@\n-  if (!ok && CRPauseOnCheckpointError) {\n+  if (!ok && CRaCPauseOnCheckpointError) {\n@@ -342,1 +342,1 @@\n-  if (!ok && CRDoThrowCheckpointException) {\n+  if (!ok && CRaCDoThrowCheckpointException) {\n@@ -354,1 +354,1 @@\n-  if (CRAllowToSkipCheckpoint) {\n+  if (CRaCAllowToSkipCheckpoint) {\n@@ -521,3 +521,4 @@\n-void crac::restore() {\n-  jlong restore_time = os::javaTimeMillis();\n-  jlong restore_nanos = os::javaTimeNanos();\n+void crac::prepare_restore(crac_restore_data& restore_data) {\n+  restore_data.restore_time = os::javaTimeMillis();\n+  restore_data.restore_nanos = os::javaTimeNanos();\n+}\n@@ -525,0 +526,1 @@\n+void crac::restore(crac_restore_data& restore_data) {\n@@ -537,2 +539,2 @@\n-          restore_time,\n-          restore_nanos)) {\n+          restore_data.restore_time,\n+          restore_data.restore_nanos)) {\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -39,1 +39,7 @@\n-  static void restore();\n+\n+  struct crac_restore_data {\n+    jlong restore_time;\n+    jlong restore_nanos;\n+  };\n+  static void prepare_restore(crac_restore_data& restore_data);\n+  static void restore(crac_restore_data& restore_data);\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1964,1 +1964,1 @@\n-  product_pd(ccstr, CREngine, RESTORE_SETTABLE,                             \\\n+  product_pd(ccstr, CRaCEngine, RESTORE_SETTABLE,                           \\\n@@ -1967,1 +1967,1 @@\n-      \"-XX:CREngine=program,--key,value,--anotherkey results in calling \"   \\\n+      \"-XX:CRaCEngine=program,--key,value,--anotherkey results in calling \" \\\n@@ -1981,5 +1981,5 @@\n-  product_pd(ccstrlist, CRAllowedOpenFilePrefixes, \"List of path prefixes \" \\\n-      \"for files that can be open during checkpoint; CRaC won't error \"     \\\n-      \"upon detecting these and will leave the handling up to C\/R engine. \" \\\n-      \"This option applies only to files opened by native code; for files \" \\\n-      \"opened by Java code use -Djdk.crac.resource-policies=...\")           \\\n+  product_pd(ccstrlist, CRaCAllowedOpenFilePrefixes, \"List of path \"        \\\n+      \"prefixes for files that can be open during checkpoint; CRaC won't \"  \\\n+      \"error upon detecting these and will leave the handling up to C\/R \"   \\\n+      \"engine. This option applies only to files opened by native code; \"   \\\n+      \"for files opened by Java code use -Djdk.crac.resource-policies=...\") \\\n@@ -1987,1 +1987,1 @@\n-  product(bool, CRAllowToSkipCheckpoint, false, DIAGNOSTIC,                 \\\n+  product(bool, CRaCAllowToSkipCheckpoint, false, DIAGNOSTIC,               \\\n@@ -1990,1 +1990,1 @@\n-  product(bool, CRHeapDumpOnCheckpointException, false, DIAGNOSTIC,         \\\n+  product(bool, CRaCHeapDumpOnCheckpointException, false, DIAGNOSTIC,       \\\n@@ -1994,1 +1994,1 @@\n-  product(bool, CRPrintResourcesOnCheckpoint, false, DIAGNOSTIC,            \\\n+  product(bool, CRaCPrintResourcesOnCheckpoint, false, DIAGNOSTIC,          \\\n@@ -1997,1 +1997,1 @@\n-  product(bool, CRTraceStartupTime, false, DIAGNOSTIC,                      \\\n+  product(bool, CRaCTraceStartupTime, false, DIAGNOSTIC,                    \\\n@@ -2000,1 +2000,1 @@\n-  product(bool, CRDoThrowCheckpointException, true, EXPERIMENTAL,           \\\n+  product(bool, CRaCDoThrowCheckpointException, true, EXPERIMENTAL,         \\\n@@ -2003,0 +2003,1 @@\n+  \/* Not renaming to CRaCTrace, this should be obsoleted *\/                 \\\n@@ -2005,1 +2006,1 @@\n-  product(bool, CRPauseOnCheckpointError, false, DIAGNOSTIC,                \\\n+  product(bool, CRaCPauseOnCheckpointError, false, DIAGNOSTIC,              \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-jint Threads::check_for_restore(JavaVMInitArgs* args) {\n+static jint check_for_restore(JavaVMInitArgs* args, crac::crac_restore_data& restore_data) {\n@@ -421,1 +421,1 @@\n-    crac::restore();\n+    crac::restore(restore_data);\n@@ -434,0 +434,8 @@\n+#ifdef __APPLE__\n+  \/\/ BSD clock would be initialized in os::init() but we need to do that earlier\n+  \/\/ as crac::prepare_restore() calls os::javaTimeNanos().\n+  os::Bsd::clock_init();\n+#endif\n+  crac::crac_restore_data restore_data;\n+  crac::prepare_restore(restore_data);\n+\n@@ -446,9 +454,0 @@\n-#ifdef __APPLE__\n-  \/\/ BSD clock would be initialized in os::init() but we need to do that earlier\n-  \/\/ as crac::restore() calls os::javaTimeNanos().\n-  os::Bsd::clock_init();\n-#endif\n-\n-  \/\/ Output stream module should be already initialized for error reporting during restore.\n-  if (check_for_restore(args) != JNI_OK) return JNI_ERR;\n-\n@@ -473,0 +472,4 @@\n+  \/\/ Output stream module should be already initialized for error reporting during restore.\n+  \/\/ JDK version should also be intialized for arguments parsing.\n+  if (check_for_restore(args, restore_data) != JNI_OK) return JNI_ERR;\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -70,2 +70,0 @@\n-  static jint check_for_restore(JavaVMInitArgs* args);\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,5 +46,5 @@\n- * @run main\/othervm -ea -XX:CREngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testOrder\n- * @run main\/othervm -ea -XX:CREngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterBlocks\n- * @run main\/othervm -ea -XX:CREngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testThrowing\n- * @run main\/othervm -ea -XX:CREngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterToCompleted\n- * @run main\/othervm -ea -XX:CREngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterFromOtherThread\n+ * @run main\/othervm -ea -XX:CRaCEngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testOrder\n+ * @run main\/othervm -ea -XX:CRaCEngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterBlocks\n+ * @run main\/othervm -ea -XX:CRaCEngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testThrowing\n+ * @run main\/othervm -ea -XX:CRaCEngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterToCompleted\n+ * @run main\/othervm -ea -XX:CRaCEngine=simengine -XX:CRaCCheckpointTo=ignored ContextOrderTest testRegisterFromOtherThread\n","filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                 \"-XX:CREngine=\" + UNKNOWN_ENGINE,\n+                 \"-XX:CRaCEngine=\" + UNKNOWN_ENGINE,\n","filename":"test\/jdk\/jdk\/crac\/CracVersionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        \/\/ this is here just to test passing CREngine params\n+        \/\/ this is here just to test passing CRaCEngine params\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * 2) open files on classpath: these files are ignored, handling is left to CREngine\n+ * 2) open files on classpath: these files are ignored, handling is left to CRaCEngine\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/CheckpointWithOpenFdsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-            cmd.add(\"-XX:CREngine=\" + engine.engine + engArgs);\n+            cmd.add(\"-XX:CRaCEngine=\" + engine.engine + engArgs);\n@@ -468,1 +468,1 @@\n-                cmd.add(\"-XX:+CRPrintResourcesOnCheckpoint\");\n+                cmd.add(\"-XX:+CRaCPrintResourcesOnCheckpoint\");\n@@ -475,1 +475,1 @@\n-                cmd.add(\"-XX:-CRDoThrowCheckpointException\");\n+                cmd.add(\"-XX:-CRaCDoThrowCheckpointException\");\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}