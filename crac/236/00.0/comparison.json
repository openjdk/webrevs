{"files":[{"patch":"@@ -102,1 +102,1 @@\n-    -encoding ISO-8859-1 -docencoding UTF-8 -breakiterator \\\n+    -serialwarn -encoding ISO-8859-1 -docencoding UTF-8 -breakiterator \\\n@@ -109,1 +109,1 @@\n-    -encoding ISO-8859-1 -breakiterator -splitIndex --system none \\\n+    -serialwarn -encoding ISO-8859-1 -breakiterator -splitIndex --system none \\\n@@ -677,1 +677,1 @@\n-          $(call FindModuleManDirs, $m))))) \\\n+          $(call FindModuleManDirsForDocs, $m))))) \\\n","filename":"make\/Docs.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+LIBPTHREAD := @LIBPTHREAD@\n","filename":"make\/autoconf\/spec.gmk.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-JTREG_VERSION=7.4+1\n+JTREG_VERSION=7.5.1+1\n","filename":"make\/conf\/github-actions.conf","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,0 @@\n-      genCollectedHeap.cpp \\\n@@ -235,1 +234,0 @@\n-      hashtable.cpp \\\n@@ -253,1 +251,0 @@\n-      markSweep.cpp \\\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    LIBS_linux := $(LIBDL) -lpthread, \\\n+    LIBS_linux := $(LIBDL) $(LIBPTHREAD), \\\n@@ -127,0 +127,1 @@\n+      ONLY_EXPORTED := true, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+ifeq ($(call isTargetOs, linux), false)\n+    BUILD_TEST_LIB_JAR_EXCLUDES := jdk\/test\/lib\/containers\/cgroup jdk\/test\/lib\/containers\/systemd\n+endif\n+\n@@ -58,1 +62,1 @@\n-    EXCLUDES := jdk\/test\/lib\/containers\/cgroup jdk\/test\/lib\/containers\/systemd jdk\/test\/lib\/security, \\\n+    EXCLUDES := $(BUILD_TEST_LIB_JAR_EXCLUDES), \\\n@@ -67,0 +71,5 @@\n+        --add-exports java.base\/jdk.internal.platform=ALL-UNNAMED \\\n+        --add-exports java.base\/sun.security.pkcs=ALL-UNNAMED \\\n+        --add-exports java.base\/sun.security.provider.certpath=ALL-UNNAMED \\\n+        --add-exports java.base\/sun.security.tools.keytool=ALL-UNNAMED \\\n+        --add-exports java.base\/sun.security.x509=ALL-UNNAMED \\\n","filename":"make\/test\/BuildTestLib.gmk","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1371,1 +1371,2 @@\n-    (_model == 0x97 || _model == 0xAA || _model == 0xAC || _model == 0xAF)) {\n+    (_model == 0x97 || _model == 0xAA || _model == 0xAC || _model == 0xAF ||\n+      _model == 0xCC || _model == 0xDD)) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -167,0 +167,6 @@\n+#ifndef PV_11\n+  #define PV_11           0x600000        \/* Power PC 11 *\/\n+#endif\n+#ifndef PV_11_Compat\n+  #define PV_11_Compat    0x608000        \/* Power PC 11 *\/\n+#endif\n@@ -708,2 +714,6 @@\n-  guarantee(rslt == 0, \"pthread_attr_init has to return 0\");\n-  guarantee(pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED) == 0, \"???\");\n+  if (rslt != 0) {\n+    thread->set_osthread(nullptr);\n+    delete osthread;\n+    return false;\n+  }\n+  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);\n@@ -789,0 +799,2 @@\n+  \/\/ child thread synchronization is not done here on AIX, a thread is started in suspended state\n+\n@@ -830,7 +842,0 @@\n-  if (UseNUMA) {\n-    int lgrp_id = os::numa_get_group_id();\n-    if (lgrp_id != -1) {\n-      thread->set_lgrp_id(lgrp_id);\n-    }\n-  }\n-\n@@ -1225,0 +1230,3 @@\n+  case PV_11:\n+    strncpy(buf, \"Power PC 11\", buflen);\n+    break;\n@@ -1270,0 +1278,3 @@\n+  case PV_11_Compat:\n+    strncpy(buf, \"PV_11_Compat\", buflen);\n+    break;\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -245,10 +245,0 @@\n-\/\/ JVM variant\n-#if   defined(ZERO)\n-  #define JVM_VARIANT \"zero\"\n-#elif defined(COMPILER2)\n-  #define JVM_VARIANT \"server\"\n-#else\n-  #define JVM_VARIANT \"client\"\n-#endif\n-\n-\n@@ -640,1 +630,6 @@\n-  pthread_attr_init(&attr);\n+  int rslt = pthread_attr_init(&attr);\n+  if (rslt != 0) {\n+    thread->set_osthread(nullptr);\n+    delete osthread;\n+    return false;\n+  }\n@@ -1559,1 +1554,1 @@\n-        snprintf(jrelib_p, buflen-len, \"\/%s\", JVM_VARIANT);\n+        snprintf(jrelib_p, buflen-len, \"\/%s\", Abstract_VM_Version::vm_variant());\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotClassLocation.hpp\"\n@@ -27,1 +28,0 @@\n-#include \"cds\/filemap.hpp\"\n@@ -161,6 +161,0 @@\n-#if INCLUDE_CDS\n-ClassPathEntry* ClassLoader::_app_classpath_entries = nullptr;\n-ClassPathEntry* ClassLoader::_last_app_classpath_entry = nullptr;\n-ClassPathEntry* ClassLoader::_module_path_entries = nullptr;\n-ClassPathEntry* ClassLoader::_last_module_path_entry = nullptr;\n-#endif\n@@ -304,2 +298,1 @@\n-ClassPathZipEntry::ClassPathZipEntry(jzfile* zip, const char* zip_name,\n-                                     bool is_boot_append, bool from_class_path_attr, bool multi_release) : ClassPathEntry() {\n+ClassPathZipEntry::ClassPathZipEntry(jzfile* zip, const char* zip_name) : ClassPathEntry() {\n@@ -308,2 +301,0 @@\n-  _from_class_path_attr = from_class_path_attr;\n-  _multi_release = multi_release;\n@@ -466,8 +457,0 @@\n-#if INCLUDE_CDS\n-void ClassLoader::exit_with_path_failure(const char* error, const char* message) {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-  tty->print_cr(\"Hint: enable -Xlog:class+path=info to diagnose the failure\");\n-  vm_exit_during_cds_dumping(error, message);\n-}\n-#endif\n-\n@@ -536,51 +519,0 @@\n-#if INCLUDE_CDS\n-void ClassLoader::setup_app_search_path(JavaThread* current, const char *class_path) {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-\n-  ResourceMark rm(current);\n-  ClasspathStream cp_stream(class_path);\n-\n-  while (cp_stream.has_next()) {\n-    const char* path = cp_stream.get_next();\n-    update_class_path_entry_list(current, path, \/* check_for_duplicates *\/ true,\n-                                 \/* is_boot_append *\/ false, \/* from_class_path_attr *\/ false);\n-  }\n-}\n-\n-void ClassLoader::add_to_module_path_entries(const char* path,\n-                                             ClassPathEntry* entry) {\n-  assert(entry != nullptr, \"ClassPathEntry should not be nullptr\");\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-\n-  \/\/ The entry does not exist, add to the list\n-  if (_module_path_entries == nullptr) {\n-    assert(_last_module_path_entry == nullptr, \"Sanity\");\n-    _module_path_entries = _last_module_path_entry = entry;\n-  } else {\n-    _last_module_path_entry->set_next(entry);\n-    _last_module_path_entry = entry;\n-  }\n-}\n-\n-\/\/ Add a module path to the _module_path_entries list.\n-void ClassLoader::setup_module_search_path(JavaThread* current, const char* path) {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-  struct stat st;\n-  if (os::stat(path, &st) != 0) {\n-    tty->print_cr(\"os::stat error %d (%s). CDS dump aborted (path was \\\"%s\\\").\",\n-      errno, os::errno_name(errno), path);\n-    vm_exit_during_initialization();\n-  }\n-  \/\/ File or directory found\n-  ClassPathEntry* new_entry = nullptr;\n-  new_entry = create_class_path_entry(current, path, &st,\n-                                      false \/*is_boot_append *\/, false \/* from_class_path_attr *\/);\n-  if (new_entry != nullptr) {\n-    \/\/ ClassLoaderExt::process_module_table() filters out non-jar entries before calling this function.\n-    assert(new_entry->is_jar_file(), \"module path entry %s is not a jar file\", new_entry->name());\n-    add_to_module_path_entries(path, new_entry);\n-  }\n-}\n-\n-#endif \/\/ INCLUDE_CDS\n-\n@@ -619,1 +551,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n+        ClassPathEntry* new_entry = create_class_path_entry(current, path, &st);\n@@ -693,2 +625,1 @@\n-      update_class_path_entry_list(current, path, \/* check_for_duplicates *\/ false,\n-                                    \/* is_boot_append *\/ true, \/* from_class_path_attr *\/ false);\n+      update_class_path_entry_list(current, path);\n@@ -725,1 +656,1 @@\n-    ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n+    ClassPathEntry* new_entry = create_class_path_entry(current, path, &st);\n@@ -751,4 +682,1 @@\n-                                                     const char *path, const struct stat* st,\n-                                                     bool is_boot_append,\n-                                                     bool from_class_path_attr,\n-                                                     bool is_multi_release) {\n+                                                     const char *path, const struct stat* st) {\n@@ -767,1 +695,1 @@\n-      new_entry = new ClassPathZipEntry(zip, path, is_boot_append, from_class_path_attr, is_multi_release);\n+      new_entry = new ClassPathZipEntry(zip, path);\n@@ -769,3 +697,0 @@\n-#if INCLUDE_CDS\n-      ClassLoaderExt::set_has_non_jar_in_classpath();\n-#endif\n@@ -787,1 +712,1 @@\n-ClassPathZipEntry* ClassLoader::create_class_path_zip_entry(const char *path, bool is_boot_append) {\n+ClassPathZipEntry* ClassLoader::create_class_path_zip_entry(const char *path) {\n@@ -800,1 +725,1 @@\n-          return new ClassPathZipEntry(zip, canonical_path, is_boot_append, false, false);\n+          return new ClassPathZipEntry(zip, canonical_path);\n@@ -832,8 +757,0 @@\n-#if INCLUDE_CDS\n-  \/\/ Probably not needed as _app_classpath_entries is filled only when dumping CDS classes\n-  for (ClassPathEntry *entry = _app_classpath_entries; entry != nullptr; entry = entry->next()) {\n-    if (entry->is_jar_file()) {\n-      fds.append(((ClassPathZipEntry *) entry)->get_fd());\n-    }\n-  }\n-#endif \/\/ INCLUDE_CDS\n@@ -843,44 +760,1 @@\n-\/\/ Record the path entries specified in -cp during dump time. The recorded\n-\/\/ information will be used at runtime for loading the archived app classes.\n-\/\/\n-\/\/ Note that at dump time, ClassLoader::_app_classpath_entries are NOT used for\n-\/\/ loading app classes. Instead, the app class are loaded by the\n-\/\/ jdk\/internal\/loader\/ClassLoaders$AppClassLoader instance.\n-bool ClassLoader::add_to_app_classpath_entries(JavaThread* current,\n-                                               ClassPathEntry* entry,\n-                                               bool check_for_duplicates) {\n-#if INCLUDE_CDS\n-  assert(entry != nullptr, \"ClassPathEntry should not be nullptr\");\n-  ClassPathEntry* e = _app_classpath_entries;\n-  if (check_for_duplicates) {\n-    while (e != nullptr) {\n-      if (strcmp(e->name(), entry->name()) == 0 &&\n-          e->from_class_path_attr() == entry->from_class_path_attr()) {\n-        \/\/ entry already exists\n-        return false;\n-      }\n-      e = e->next();\n-    }\n-  }\n-\n-  \/\/ The entry does not exist, add to the list\n-  if (_app_classpath_entries == nullptr) {\n-    assert(_last_app_classpath_entry == nullptr, \"Sanity\");\n-    _app_classpath_entries = _last_app_classpath_entry = entry;\n-  } else {\n-    _last_app_classpath_entry->set_next(entry);\n-    _last_app_classpath_entry = entry;\n-  }\n-\n-  if (entry->is_jar_file()) {\n-    ClassLoaderExt::process_jar_manifest(current, entry);\n-  }\n-#endif\n-  return true;\n-}\n-\n-bool ClassLoader::update_class_path_entry_list(JavaThread* current,\n-                                               const char *path,\n-                                               bool check_for_duplicates,\n-                                               bool is_boot_append,\n-                                               bool from_class_path_attr) {\n+bool ClassLoader::update_class_path_entry_list(JavaThread* current, const char *path) {\n@@ -892,1 +766,1 @@\n-    new_entry = create_class_path_entry(current, path, &st, is_boot_append, from_class_path_attr);\n+    new_entry = create_class_path_entry(current, path, &st);\n@@ -899,8 +773,1 @@\n-    if (is_boot_append) {\n-      add_to_boot_append_entries(new_entry);\n-    } else {\n-      if (!add_to_app_classpath_entries(current, new_entry, check_for_duplicates)) {\n-        \/\/ new_entry is not saved, free it now\n-        delete new_entry;\n-      }\n-    }\n+    add_to_boot_append_entries(new_entry);\n@@ -1341,1 +1208,7 @@\n-  if (FileMapInfo::get_number_of_shared_paths() > 0) {\n+  if (!AOTClassLocationConfig::dumptime_is_ready()) {\n+    \/\/ The shared path table is set up after module system initialization.\n+    \/\/ The path table contains no entry before that. Any classes loaded prior\n+    \/\/ to the setup of the shared path table must be from the modules image.\n+    assert(stream->from_boot_loader_modules_image(), \"stream must be loaded by boot loader from modules image\");\n+    classpath_index = 0;\n+  } else {\n@@ -1347,11 +1220,13 @@\n-    for (int i = 0; i < FileMapInfo::get_number_of_shared_paths(); i++) {\n-      SharedClassPathEntry* ent = FileMapInfo::shared_path(i);\n-      \/\/ A shared path has been validated during its creation in ClassLoader::create_class_path_entry(),\n-      \/\/ it must be valid here.\n-      assert(ent->name() != nullptr, \"sanity\");\n-      \/\/ If the path (from the class stream source) is the same as the shared\n-      \/\/ class or module path, then we have a match.\n-      \/\/ src may come from the App\/Platform class loaders, which would canonicalize\n-      \/\/ the file name. We cannot use strcmp to check for equality against ent->name().\n-      \/\/ We must use os::same_files (which is faster than canonicalizing ent->name()).\n-      if (os::same_files(ent->name(), path)) {\n+    AOTClassLocationConfig::dumptime_iterate([&] (AOTClassLocation* cl) {\n+      int i = cl->index();\n+      \/\/ for index 0 and the stream->source() is the modules image or has the jrt: protocol.\n+      \/\/ The class must be from the runtime modules image.\n+      if (cl->is_modules_image() && (stream->from_boot_loader_modules_image() || string_starts_with(src, \"jrt:\"))) {\n+        classpath_index = i;\n+      } else if (os::same_files(cl->path(), path)) {\n+        \/\/ If the path (from the class stream source) is the same as the shared\n+        \/\/ class or module path, then we have a match.\n+        \/\/ src may come from the App\/Platform class loaders, which would canonicalize\n+        \/\/ the file name. We cannot use strcmp to check for equality against cs->path().\n+        \/\/ We must use os::same_files (which is faster than canonicalizing cs->path()).\n+\n@@ -1364,3 +1239,1 @@\n-          if (SystemDictionary::is_system_class_loader(loader) &&\n-              (i >= ClassLoaderExt::app_class_paths_start_index()) &&\n-              (i < ClassLoaderExt::app_module_paths_start_index())) {\n+          if (SystemDictionary::is_system_class_loader(loader) && cl->from_app_classpath()) {\n@@ -1368,3 +1241,1 @@\n-            break;\n-            if ((i >= 1) &&\n-                (i < ClassLoaderExt::app_class_paths_start_index())) {\n+            if (cl->from_boot_classpath()) {\n@@ -1376,1 +1247,0 @@\n-              break;\n@@ -1382,6 +1252,2 @@\n-          if ((pkg_entry != nullptr) && !(pkg_entry->in_unnamed_module()) && (i > 0)) {\n-            if (i >= ClassLoaderExt::app_module_paths_start_index() &&\n-                i < FileMapInfo::get_number_of_shared_paths()) {\n-              classpath_index = i;\n-              break;\n-            }\n+          if ((pkg_entry != nullptr) && !(pkg_entry->in_unnamed_module()) && cl->from_module_path()) {\n+            classpath_index = i;\n@@ -1391,5 +1257,4 @@\n-      \/\/ for index 0 and the stream->source() is the modules image or has the jrt: protocol.\n-      \/\/ The class must be from the runtime modules image.\n-      if (i == 0 && (stream->from_boot_loader_modules_image() || string_starts_with(src, \"jrt:\"))) {\n-        classpath_index = i;\n-        break;\n+      if (classpath_index >= 0) {\n+        return false; \/\/ quit iterating\n+      } else {\n+        return true; \/\/ Keep iterating\n@@ -1397,1 +1262,1 @@\n-    }\n+    });\n@@ -1407,7 +1272,0 @@\n-  } else {\n-    \/\/ The shared path table is set up after module system initialization.\n-    \/\/ The path table contains no entry before that. Any classes loaded prior\n-    \/\/ to the setup of the shared path table must be from the modules image.\n-    assert(stream->from_boot_loader_modules_image(), \"stream must be loaded by boot loader from modules image\");\n-    assert(FileMapInfo::get_number_of_shared_paths() == 0, \"shared path table must not have been setup\");\n-    classpath_index = 0;\n@@ -1454,1 +1312,1 @@\n-      ik->set_shared_classpath_index(ClassLoaderExt::app_class_paths_start_index());\n+      ik->set_shared_classpath_index(AOTClassLocationConfig::dumptime()->app_cp_start_index());\n@@ -1563,28 +1421,0 @@\n-#if INCLUDE_CDS\n-void ClassLoader::initialize_shared_path(JavaThread* current) {\n-  if (CDSConfig::is_dumping_archive()) {\n-    ClassLoaderExt::setup_search_paths(current);\n-  }\n-}\n-\n-void ClassLoader::initialize_module_path(TRAPS) {\n-  if (CDSConfig::is_dumping_archive()) {\n-    ClassLoaderExt::setup_module_paths(THREAD);\n-    FileMapInfo::allocate_shared_path_table(CHECK);\n-  }\n-}\n-\n-\/\/ Helper function used by CDS code to get the number of module path\n-\/\/ entries during shared classpath setup time.\n-int ClassLoader::num_module_path_entries() {\n-  assert(CDSConfig::is_dumping_archive(), \"sanity\");\n-  int num_entries = 0;\n-  ClassPathEntry* e= ClassLoader::_module_path_entries;\n-  while (e != nullptr) {\n-    num_entries ++;\n-    e = e->next();\n-  }\n-  return num_entries;\n-}\n-#endif\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":42,"deletions":212,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,4 +61,0 @@\n-  virtual bool is_multi_release_jar() const { return false; }\n-  virtual void set_multi_release_jar() {}\n-  \/\/ Is this entry created from the \"Class-path\" attribute from a JAR Manifest?\n-  virtual bool from_class_path_attr() const { return false; }\n@@ -95,2 +91,0 @@\n-  bool _from_class_path_attr; \/\/ From the \"Class-path\" attribute of a jar file\n-  bool _multi_release;       \/\/ multi-release jar\n@@ -99,4 +93,1 @@\n-  bool is_multi_release_jar() const { return _multi_release; }\n-  void set_multi_release_jar() { _multi_release = true; }\n-  bool from_class_path_attr() const { return _from_class_path_attr; }\n-  ClassPathZipEntry(jzfile* zip, const char* zip_name, bool is_boot_append, bool from_class_path_attr, bool multi_release);\n+  ClassPathZipEntry(jzfile* zip, const char* zip_name);\n@@ -230,15 +221,0 @@\n-  \/\/ Info used by CDS\n-  CDS_ONLY(static ClassPathEntry* _app_classpath_entries;)\n-  CDS_ONLY(static ClassPathEntry* _last_app_classpath_entry;)\n-  CDS_ONLY(static ClassPathEntry* _module_path_entries;)\n-  CDS_ONLY(static ClassPathEntry* _last_module_path_entry;)\n-  CDS_ONLY(static void setup_app_search_path(JavaThread* current, const char* class_path);)\n-  CDS_ONLY(static void setup_module_search_path(JavaThread* current, const char* path);)\n-  static bool add_to_app_classpath_entries(JavaThread* current,\n-                                           ClassPathEntry* entry,\n-                                           bool check_for_duplicates);\n-  CDS_ONLY(static void add_to_module_path_entries(const char* path,\n-                                           ClassPathEntry* entry);)\n-\n-  CDS_ONLY(static ClassPathEntry* app_classpath_entries() {return _app_classpath_entries;})\n-  CDS_ONLY(static ClassPathEntry* module_path_entries() {return _module_path_entries;})\n@@ -267,4 +243,1 @@\n-                                                 const char *path, const struct stat* st,\n-                                                 bool is_boot_append,\n-                                                 bool from_class_path_attr,\n-                                                 bool is_multi_release = false);\n+                                                 const char *path, const struct stat* st);\n@@ -280,4 +253,1 @@\n-                                           const char *path,\n-                                           bool check_for_duplicates,\n-                                           bool is_boot_append,\n-                                           bool from_class_path_attr);\n+                                           const char *path);\n@@ -367,2 +337,0 @@\n-  CDS_ONLY(static void initialize_shared_path(JavaThread* current);)\n-  CDS_ONLY(static void initialize_module_path(TRAPS);)\n@@ -377,16 +345,0 @@\n-  \/\/ Sharing dump and restore\n-\n-  \/\/ Helper function used by CDS code to get the number of boot classpath\n-  \/\/ entries during shared classpath setup time.\n-  static int num_boot_classpath_entries();\n-\n-  static ClassPathEntry* get_next_boot_classpath_entry(ClassPathEntry* e);\n-\n-  \/\/ Helper function used by CDS code to get the number of app classpath\n-  \/\/ entries during shared classpath setup time.\n-  static int num_app_classpath_entries();\n-\n-  \/\/ Helper function used by CDS code to get the number of module path\n-  \/\/ entries during shared classpath setup time.\n-  static int num_module_path_entries();\n-  static void  exit_with_path_failure(const char* error, const char* message);\n@@ -426,1 +378,1 @@\n-  static ClassPathZipEntry* create_class_path_zip_entry(const char *apath, bool is_boot_append);\n+  static ClassPathZipEntry* create_class_path_zip_entry(const char *path);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":5,"deletions":53,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1877,1 +1877,1 @@\n-  } else if (cause == GCCause::_gc_locker || cause == GCCause::_wb_young_gc\n+  } else if (cause == GCCause::_wb_young_gc\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1004,4 +1004,0 @@\n-  if (GCLocker::check_active_before_gc()) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-      min_size, max_size, &_virtual_space);\n+      min_size, max_size, _virtual_space.committed_size());\n@@ -371,12 +371,0 @@\n-  \/\/ Do not attempt an expand-to-the reserve size.  The\n-  \/\/ request should properly observe the maximum size of\n-  \/\/ the generation so an expand-to-reserve should be\n-  \/\/ unnecessary.  Also a second call to expand-to-reserve\n-  \/\/ value potentially can cause an undue expansion.\n-  \/\/ For example if the first expand fail for unknown reasons,\n-  \/\/ but the second succeeds and expands the heap to its maximum\n-  \/\/ value.\n-  if (GCLocker::is_active()) {\n-    log_debug(gc)(\"Garbage collection disabled, expanded heap instead\");\n-  }\n-\n@@ -836,1 +824,1 @@\n-    _gen_counters->update_all();\n+    _gen_counters->update_all(_virtual_space.committed_size());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/gcLocker.inline.hpp\"\n+#include \"gc\/shared\/gcLocker.hpp\"\n@@ -354,26 +354,0 @@\n-    if (GCLocker::is_active_and_needs_gc()) {\n-      \/\/ If the GCLocker is active, just expand and allocate.\n-      \/\/ If that does not succeed, wait if this thread is not\n-      \/\/ in a critical section itself.\n-      result = loader_data->metaspace_non_null()->expand_and_allocate(word_size, mdtype);\n-      if (result != nullptr) {\n-        return result;\n-      }\n-      JavaThread* jthr = JavaThread::current();\n-      if (!jthr->in_critical()) {\n-        \/\/ Wait for JNI critical section to be exited\n-        GCLocker::stall_until_clear();\n-        \/\/ The GC invoked by the last thread leaving the critical\n-        \/\/ section will be a young collection and a full collection\n-        \/\/ is (currently) needed for unloading classes so continue\n-        \/\/ to the next iteration to get a full GC.\n-        continue;\n-      } else {\n-        if (CheckJNICalls) {\n-          fatal(\"Possible deadlock due to allocating while\"\n-                \" in jni critical section\");\n-        }\n-        return nullptr;\n-      }\n-    }\n-\n@@ -382,2 +356,2 @@\n-      gc_count      = Universe::heap()->total_collections();\n-      full_gc_count = Universe::heap()->total_full_collections();\n+      gc_count      = total_collections();\n+      full_gc_count = total_full_collections();\n@@ -393,6 +367,1 @@\n-    VMThread::execute(&op);\n-    \/\/ If GC was locked out, try again. Check before checking success because the\n-    \/\/ prologue could have succeeded and the GC still have been locked out.\n-    if (op.gc_locked()) {\n-      continue;\n-    }\n+    VMThread::execute(&op);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":4,"deletions":35,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -134,4 +134,0 @@\n-bool ZGeneration::is_initialized() const {\n-  return _mark.is_initialized();\n-}\n-\n@@ -154,2 +150,2 @@\n-void ZGeneration::mark_flush_and_free(Thread* thread) {\n-  _mark.flush_and_free(thread);\n+void ZGeneration::mark_flush(Thread* thread) {\n+  _mark.flush(thread);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -549,9 +549,0 @@\n-JNIEXPORT jobject JNICALL\n-JVM_GetProtectionDomain(JNIEnv *env, jclass cls);\n-\n-JNIEXPORT jboolean JNICALL\n-JVM_IsArrayClass(JNIEnv *env, jclass cls);\n-\n-JNIEXPORT jboolean JNICALL\n-JVM_IsPrimitiveClass(JNIEnv *env, jclass cls);\n-\n@@ -561,3 +552,0 @@\n-JNIEXPORT jint JNICALL\n-JVM_GetClassModifiers(JNIEnv *env, jclass cls);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"logging\/logHandle.hpp\"\n+#include \"memory\/allocation.hpp\"\n@@ -32,6 +32,16 @@\n-#include \"runtime\/os.inline.hpp\"\n-class AsyncLogWriter::AsyncLogLocker : public StackObj {\n- public:\n-  AsyncLogLocker() {\n-    assert(_instance != nullptr, \"AsyncLogWriter::_lock is unavailable\");\n-    _instance->_lock.lock();\n+class AsyncLogWriter::Locker : public StackObj {\n+  Thread*& _holder;\n+  PlatformMonitor& _lock;\n+\n+public:\n+  Locker(Thread*& holder, PlatformMonitor& lock)\n+  : _holder(holder),\n+    _lock(lock) {\n+    _lock.lock();\n+    _holder = Thread::current_or_null();\n+  }\n+\n+  ~Locker() {\n+    assert(_holder == Thread::current_or_null(), \"must be\");\n+    _holder = nullptr;\n+    _lock.unlock();\n@@ -41,2 +51,9 @@\n-  ~AsyncLogLocker() {\n-    _instance->_lock.unlock();\n+  void notify() {\n+    _lock.notify();\n+  }\n+\n+  void wait() {\n+    Thread* saved_holder = _holder;\n+    _holder = nullptr;\n+    _lock.wait(0 \/* no timeout *\/);\n+    _holder = saved_holder;\n@@ -46,0 +63,17 @@\n+class AsyncLogWriter::ProducerLocker : public Locker {\n+  static Thread* _holder;\n+public:\n+  static Thread* current_holder() { return _holder; }\n+  ProducerLocker() : Locker(_holder, _instance->_producer_lock) {}\n+};\n+\n+class AsyncLogWriter::ConsumerLocker : public Locker {\n+  static Thread* _holder;\n+public:\n+  static Thread* current_holder() { return _holder; }\n+  ConsumerLocker() : Locker(_holder, _instance->_consumer_lock) {}\n+};\n+\n+Thread* AsyncLogWriter::ProducerLocker::_holder = nullptr;\n+Thread* AsyncLogWriter::ConsumerLocker::_holder = nullptr;\n+\n@@ -50,2 +84,2 @@\n-bool AsyncLogWriter::Buffer::push_back(LogFileStreamOutput* output, const LogDecorations& decorations, const char* msg) {\n-  const size_t len = strlen(msg);\n+bool AsyncLogWriter::Buffer::push_back(LogFileStreamOutput* output, const LogDecorations& decorations, const char* msg, const size_t msg_len) {\n+  const size_t len = msg_len;\n@@ -67,1 +101,1 @@\n-  bool result = push_back(nullptr, AsyncLogWriter::None, \"\");\n+  bool result = push_back(nullptr, AsyncLogWriter::None, \"\", 0);\n@@ -76,5 +110,66 @@\n-  if (!_buffer->push_back(output, decorations, msg)) {\n-    bool p_created;\n-    uint32_t* counter = _stats.put_if_absent(output, 0, &p_created);\n-    *counter = *counter + 1;\n-    return;\n+  size_t msg_len = strlen(msg);\n+  void* stalled_message = nullptr;\n+  {\n+    ConsumerLocker clocker;\n+    if (_buffer->push_back(output, decorations, msg, msg_len)) {\n+      _data_available = true;\n+      clocker.notify();\n+      return;\n+    }\n+\n+    if (LogConfiguration::async_mode() == LogConfiguration::AsyncMode::Stall) {\n+      size_t size = Message::calc_size(msg_len);\n+      stalled_message = os::malloc(size, mtLogging);\n+      if (stalled_message == nullptr) {\n+        \/\/ Out of memory. We bail without any notice.\n+        \/\/ Some other part of the system will probably fail later.\n+        return;\n+      }\n+      _stalled_message = new (stalled_message) Message(output, decorations, msg, msg_len);\n+      _data_available = true;\n+      clocker.notify();\n+      \/\/ Note: we still hold the producer lock so cannot race against other threads trying to log a message\n+      while (_stalled_message != nullptr) {\n+        clocker.wait();\n+      }\n+    } else {\n+      bool p_created;\n+      uint32_t* counter = _stats.put_if_absent(output, 0, &p_created);\n+      *counter = *counter + 1;\n+    }\n+  } \/\/ ConsumerLocker out of scope\n+  os::free(stalled_message);\n+}\n+\n+\/\/ This function checks for cases where continuing with asynchronous logging may lead to stability issues, such as a deadlock.\n+\/\/ If this returns false then we give up on logging asynchronously and do so synchronously instead.\n+bool AsyncLogWriter::is_enqueue_allowed() {\n+  AsyncLogWriter* alw = AsyncLogWriter::instance();\n+  Thread* holding_thread = AsyncLogWriter::ProducerLocker::current_holder();\n+  Thread* this_thread = Thread::current_or_null();\n+  if (this_thread == nullptr) {\n+    \/\/ The current thread is unattached.\n+    return false;\n+  }\n+\n+  if (holding_thread == this_thread) {\n+    \/\/ A thread, while enqueuing a message, has attempted to log something.\n+    \/\/ Do not log while holding the Async log lock.\n+    \/\/ Try to catch possible occurrences in debug builds.\n+#ifdef ASSERT\n+    if (!TestingAsyncLoggingDeathTestNoCrash) {\n+      ShouldNotReachHere();\n+    }\n+#endif \/\/ ASSERT\n+\n+    return false;\n+  }\n+\n+  if (alw == nullptr) {\n+    \/\/ There is no AsyncLogWriter instance yet.\n+    return false;\n+  }\n+\n+  if (this_thread == alw) {\n+    \/\/ The async log producer is attempting to log, leading to recursive logging.\n+    return false;\n@@ -83,2 +178,1 @@\n-  _data_available = true;\n-  _lock.notify();\n+  return true;\n@@ -87,3 +181,15 @@\n-void AsyncLogWriter::enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg) {\n-  AsyncLogLocker locker;\n-  enqueue_locked(&output, decorations, msg);\n+bool AsyncLogWriter::enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg) {\n+  if (!is_enqueue_allowed()) {\n+    return false;\n+  }\n+\n+  ProducerLocker plocker;\n+\n+#ifdef ASSERT\n+  if (TestingAsyncLoggingDeathTest || TestingAsyncLoggingDeathTestNoCrash) {\n+    log_debug(deathtest)(\"Induce a recursive log for testing\");\n+  }\n+#endif \/\/ ASSERT\n+\n+  AsyncLogWriter::instance()->enqueue_locked(&output, decorations, msg);\n+  return true;\n@@ -94,2 +200,4 @@\n-void AsyncLogWriter::enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n-  AsyncLogLocker locker;\n+bool AsyncLogWriter::enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n+  if (!is_enqueue_allowed()) {\n+    return false;\n+  }\n@@ -97,0 +205,2 @@\n+  \/\/ If we get here we know the AsyncLogWriter is initialized.\n+  ProducerLocker plocker;\n@@ -98,1 +208,1 @@\n-    enqueue_locked(&output, msg_iterator.decorations(), msg_iterator.message());\n+    AsyncLogWriter::instance()->enqueue_locked(&output, msg_iterator.decorations(), msg_iterator.message());\n@@ -100,0 +210,1 @@\n+  return true;\n@@ -103,3 +214,8 @@\n-  : _flush_sem(0), _lock(), _block_async(), _data_available(false),\n-    _initialized(false),\n-    _stats() {\n+: _flush_sem(0),\n+  _producer_lock(),\n+  _consumer_lock(),\n+  _block_async(),\n+  _data_available(false),\n+  _initialized(false),\n+  _stats(),\n+  _stalled_message(nullptr) {\n@@ -118,1 +234,1 @@\n-void AsyncLogWriter::write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot) {\n+bool AsyncLogWriter::write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot) {\n@@ -146,1 +262,1 @@\n-    _flush_sem.signal(req);\n+    return true;\n@@ -148,0 +264,1 @@\n+  return false;\n@@ -155,2 +272,1 @@\n-      AsyncLogLocker locker;\n-\n+      ConsumerLocker clocker;\n@@ -158,1 +274,1 @@\n-        _lock.wait(0\/* no timeout *\/);\n+        clocker.wait();\n@@ -160,0 +276,1 @@\n+\n@@ -176,1 +293,2 @@\n-    write(snapshot);\n+\n+    bool saw_flush_token = write(snapshot);\n@@ -180,0 +298,15 @@\n+\n+    \/\/ Any stalled message must be written *after* the buffer has been written.\n+    \/\/ This is because we try hard to output messages in program-order.\n+    if (_stalled_message != nullptr) {\n+      assert(LogConfiguration::async_mode() == LogConfiguration::AsyncMode::Stall, \"must be\");\n+      ConsumerLocker clocker;\n+      Message* m = (Message*)_stalled_message;\n+      m->output()->write_blocking(m->decorations(), m->message());\n+      _stalled_message = nullptr;\n+      clocker.notify();\n+    }\n+\n+    if (saw_flush_token) {\n+      _flush_sem.signal(1);\n+    }\n@@ -217,1 +350,2 @@\n-      AsyncLogLocker locker;\n+      ProducerLocker plocker;\n+      ConsumerLocker clocker;\n@@ -221,1 +355,1 @@\n-      _instance->_lock.notify();\n+      clocker.notify();\n@@ -238,1 +372,1 @@\n-  AsyncLogLocker locker;\n+  ConsumerLocker clocker;\n@@ -252,1 +386,1 @@\n-    AsyncLogLocker locker;\n+    ConsumerLocker clocker;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":172,"deletions":38,"binary":false,"changes":210,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -62,1 +63,3 @@\n-  class AsyncLogLocker;\n+  class Locker;\n+  class ProducerLocker;\n+  class ConsumerLocker;\n@@ -128,1 +131,1 @@\n-    bool push_back(LogFileStreamOutput* output, const LogDecorations& decorations, const char* msg);\n+    bool push_back(LogFileStreamOutput* output, const LogDecorations& decorations, const char* msg, const size_t msg_len);\n@@ -162,1 +165,5 @@\n-  PlatformMonitor _lock;\n+  \/\/ Producers take both locks in the order producer lock and then consumer lock.\n+  \/\/ The consumer protects the buffers and performs all communication between producer and consumer via wait\/notify.\n+  \/\/ This allows a producer to await progress from the consumer thread (by only releasing the producer lock)), whilst preventing all other producers from progressing.\n+  PlatformMonitor _producer_lock;\n+  PlatformMonitor _consumer_lock;\n@@ -166,0 +173,1 @@\n+  \/\/ _initialized is set to true if the constructor succeeds\n@@ -173,0 +181,6 @@\n+  \/\/ Stalled message\n+  \/\/ Stalling is implemented by the producer writing to _stalled_message, notifying the consumer lock and releasing it.\n+  \/\/ The consumer will then write all of the current buffers' content and then write the stalled message, at the end notifying the consumer lock and releasing it for the\n+  \/\/ owning producer thread of the stalled message. This thread will finally release both locks in order, allowing for other producers to continue.\n+  volatile Message* _stalled_message;\n+\n@@ -177,1 +191,1 @@\n-  void write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot);\n+  bool write(AsyncLogMap<AnyObj::RESOURCE_AREA>& snapshot);\n@@ -200,3 +214,5 @@\n- public:\n-  void enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg);\n-  void enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator);\n+  static bool is_enqueue_allowed();\n+\n+public:\n+  static bool enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg);\n+  static bool enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -643,1 +643,1 @@\n-  out->print_cr(\" -Xlog:async\");\n+  out->print_cr(\" -Xlog:async[:[mode]]\");\n@@ -647,0 +647,5 @@\n+  out->print_cr(\" A mode, either 'drop' or 'stall', may be provided. If 'drop' is provided then\"\n+                \" messages will be dropped if there is no room in the intermediate buffer.\"\n+                \" If 'stall' is provided then the log operation will wait for room to be made by the output thread, without dropping any messages.\"\n+                \" The default mode is 'drop'.\");\n+\n@@ -722,2 +727,0 @@\n-bool LogConfiguration::_async_mode = false;\n-\n@@ -745,0 +748,18 @@\n+\n+LogConfiguration::AsyncMode LogConfiguration::_async_mode = AsyncMode::Off;\n+\n+bool LogConfiguration::parse_async_argument(const char* async_tail) {\n+  bool ret = true;\n+  if (*async_tail == '\\0') {\n+    \/\/ Default is to drop.\n+    LogConfiguration::set_async_mode(LogConfiguration::AsyncMode::Drop);\n+  } else if (strcmp(async_tail, \":stall\") == 0) {\n+    LogConfiguration::set_async_mode(LogConfiguration::AsyncMode::Stall);\n+  } else if (strcmp(async_tail, \":drop\") == 0) {\n+    LogConfiguration::set_async_mode(LogConfiguration::AsyncMode::Drop);\n+  } else {\n+    \/\/ User provided unknown async option\n+    ret = false;\n+  }\n+  return ret;\n+}\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -65,1 +65,8 @@\n-  static bool                       _async_mode;\n+\n+public:\n+  enum class AsyncMode {\n+    Off, Stall, Drop\n+  };\n+\n+private:\n+  static AsyncMode _async_mode;\n@@ -123,0 +130,2 @@\n+  static bool parse_async_argument(const char* async_tail);\n+\n@@ -132,3 +141,4 @@\n-  static bool is_async_mode() { return _async_mode; }\n-  static void set_async_mode(bool value) {\n-    _async_mode = value;\n+  static AsyncMode async_mode() { return _async_mode; }\n+  static bool is_async_mode() { return _async_mode != AsyncMode::Off; }\n+  static void set_async_mode(AsyncMode mode) {\n+    _async_mode = mode;\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -295,3 +295,1 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, decorations, msg);\n+  if (AsyncLogWriter::enqueue(*this, decorations, msg)) {\n@@ -309,4 +307,1 @@\n-\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, msg_iterator);\n+  if (AsyncLogWriter::enqueue(*this, msg_iterator)) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+  DEBUG_ONLY(LOG_TAG(deathtest)) \/* Log Internal death test tag *\/ \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1191,14 +1191,0 @@\n-JVM_ENTRY(jboolean, JVM_IsInterface(JNIEnv *env, jclass cls))\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  if (java_lang_Class::is_primitive(mirror)) {\n-    return JNI_FALSE;\n-  }\n-  Klass* k = java_lang_Class::as_Klass(mirror);\n-  jboolean result = k->is_interface();\n-  assert(!result || k->is_instance_klass(),\n-         \"all interfaces are instance types\");\n-  \/\/ The compiler intrinsic for isInterface tests the\n-  \/\/ Klass::_access_flags bits in the same way.\n-  return result;\n-JVM_END\n-\n@@ -1263,12 +1249,0 @@\n-JVM_ENTRY(jboolean, JVM_IsArrayClass(JNIEnv *env, jclass cls))\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls));\n-  return (k != nullptr) && k->is_array_klass() ? true : false;\n-JVM_END\n-\n-\n-JVM_ENTRY(jboolean, JVM_IsPrimitiveClass(JNIEnv *env, jclass cls))\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  return (jboolean) java_lang_Class::is_primitive(mirror);\n-JVM_END\n-\n-\n@@ -2309,1 +2283,17 @@\n-\/\/ Please, refer to the description in the jvmtiThreadSate.hpp.\n+\/\/ Please, refer to the description in the jvmtiThreadState.hpp.\n+\n+JVM_ENTRY(jboolean, JVM_IsInterface(JNIEnv *env, jclass cls))\n+  oop mirror = JNIHandles::resolve_non_null(cls);\n+  if (java_lang_Class::is_primitive(mirror)) {\n+    return JNI_FALSE;\n+  }\n+  Klass* k = java_lang_Class::as_Klass(mirror);\n+  \/\/ This isn't necessary since answer is the same since redefinition\n+  \/\/ has already checked this matches for the scratch class.\n+  \/\/ k = JvmtiThreadState::class_to_verify_considering_redefinition(k, thread);\n+  jboolean result = k->is_interface();\n+  assert(!result || k->is_instance_klass(),\n+         \"all interfaces are instance types\");\n+  return result;\n+JVM_END\n+\n@@ -3785,1 +3775,1 @@\n-  OopHandle& list_head = ObjectMonitor::vthread_cxq_head();\n+  OopHandle& list_head = ObjectMonitor::vthread_list_head();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -84,0 +84,4 @@\n+#ifndef JVM_VARIANT\n+  #error JVM_VARIANT must be defined\n+#endif\n+\n@@ -198,0 +202,4 @@\n+const char* Abstract_VM_Version::vm_variant() {\n+  return JVM_VARIANT;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,0 +114,1 @@\n+  static const char* vm_variant();\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"cds\/filemap.hpp\"\n@@ -541,0 +540,1 @@\n+  { \"ZMarkStackSpaceLimit\",         JDK_Version::undefined(), JDK_Version::jdk(25), JDK_Version::undefined() },\n@@ -1404,3 +1404,7 @@\n-    jio_fprintf(defaultStream::error_stream(),\n-      \"Class data sharing is inconsistent with other specified options.\\n\");\n-    vm_exit_during_initialization(\"Unable to use shared archive\", message);\n+    log_error(cds)(\"%s is incompatible with other specified options.\",\n+                   CDSConfig::new_aot_flags_used() ? \"AOT cache\" : \"CDS\");\n+    if (CDSConfig::new_aot_flags_used()) {\n+      vm_exit_during_initialization(\"Unable to use AOT cache\", message);\n+    } else {\n+      vm_exit_during_initialization(\"Unable to use shared archive\", message);\n+    }\n@@ -1408,1 +1412,5 @@\n-    log_info(cds)(\"Unable to use shared archive: %s\", message);\n+    if (CDSConfig::new_aot_flags_used()) {\n+      log_warning(cds)(\"Unable to use AOT cache: %s\", message);\n+    } else {\n+      log_info(cds)(\"Unable to use shared archive: %s\", message);\n+    }\n@@ -2720,3 +2728,3 @@\n-      } else if (strcmp(tail, \":async\") == 0) {\n-        LogConfiguration::set_async_mode(true);\n-        ret = true;\n+      } else if (strncmp(tail, \":async\", strlen(\":async\")) == 0) {\n+        const char* async_tail = tail + strlen(\":async\");\n+        ret = LogConfiguration::parse_async_argument(async_tail);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -333,0 +333,3 @@\n+  product(bool, UseDilithiumIntrinsics, false, DIAGNOSTIC,                  \\\n+          \"Use intrinsics for the vectorized version of Dilithium\")         \\\n+                                                                            \\\n@@ -489,0 +492,4 @@\n+  develop(bool, TestingAsyncLoggingDeathTest, false,                        \\\n+          \"Recursive logging death test\")                                   \\\n+  develop(bool, TestingAsyncLoggingDeathTestNoCrash, false,                 \\\n+          \"Recursive logging death test (no crash)\")                        \\\n@@ -1407,0 +1414,3 @@\n+  product(bool, PrintCompilerMemoryStatisticsAtExit, false, DIAGNOSTIC,     \\\n+          \"Print compiler memory statistics upon VM exit.\")                 \\\n+                                                                            \\\n@@ -1564,1 +1574,1 @@\n-  develop(intx, StopInterpreterAt, 0,                                       \\\n+  develop(uintx, StopInterpreterAt, 0,                                      \\\n@@ -1567,1 +1577,1 @@\n-  develop(intx, TraceBytecodesAt, 0,                                        \\\n+  develop(uintx, TraceBytecodesAt, 0,                                       \\\n@@ -1570,1 +1580,1 @@\n-  develop(intx, TraceBytecodesStopAt, 0,                                    \\\n+  develop(uintx, TraceBytecodesStopAt, 0,                                   \\\n@@ -1609,1 +1619,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1613,1 +1623,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1617,1 +1627,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1621,1 +1631,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1625,1 +1635,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1629,1 +1639,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1633,1 +1643,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1637,1 +1647,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1641,1 +1651,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1645,1 +1655,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1649,1 +1659,1 @@\n-          range(-1, 127)                                                    \\\n+          range(min_jint, max_jint)                                         \\\n@@ -1875,1 +1885,1 @@\n-          range(100*K, 50*M)                                                \\\n+          range(DEBUG_ONLY(192) NOT_DEBUG(100*K), 50*M)                     \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -938,0 +938,3 @@\n+  \/\/ Atomic version; invoked by a thread other than the owning thread.\n+  bool in_critical_atomic() { return Atomic::load(&_jni_active_critical) > 0; }\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -835,9 +835,0 @@\n-#if INCLUDE_CDS\n-  \/\/ capture the module path info from the ModuleEntryTable\n-  ClassLoader::initialize_module_path(THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    java_lang_Throwable::print(PENDING_EXCEPTION, tty);\n-    vm_exit_during_initialization(\"ClassLoader::initialize_module_path() failed unexpectedly\");\n-  }\n-#endif\n-\n@@ -898,1 +889,5 @@\n-  if (CDSConfig::is_dumping_static_archive()) {\n+  if (CDSConfig::is_dumping_classic_static_archive()) {\n+    \/\/ Classic -Xshare:dump, aka \"old workflow\"\n+    MetaspaceShared::preload_and_dump(CHECK_JNI_ERR);\n+  } else if (CDSConfig::is_dumping_final_static_archive()) {\n+    tty->print_cr(\"Reading AOTConfiguration %s and writing AOTCache %s\", AOTConfiguration, AOTCache);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,6 +26,0 @@\n-#include \"ci\/ciField.hpp\"\n-#include \"ci\/ciInstance.hpp\"\n-#include \"ci\/ciMethodData.hpp\"\n-#include \"ci\/ciObjArrayKlass.hpp\"\n-#include \"ci\/ciSymbol.hpp\"\n-#include \"classfile\/dictionary.hpp\"\n@@ -35,3 +29,0 @@\n-#include \"classfile\/stringTable.hpp\"\n-#include \"classfile\/symbolTable.hpp\"\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -106,1 +97,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -109,1 +99,0 @@\n-#include \"runtime\/threadSMR.hpp\"\n@@ -118,24 +107,0 @@\n-#include \"opto\/addnode.hpp\"\n-#include \"opto\/block.hpp\"\n-#include \"opto\/callnode.hpp\"\n-#include \"opto\/castnode.hpp\"\n-#include \"opto\/cfgnode.hpp\"\n-#include \"opto\/chaitin.hpp\"\n-#include \"opto\/convertnode.hpp\"\n-#include \"opto\/divnode.hpp\"\n-#include \"opto\/intrinsicnode.hpp\"\n-#include \"opto\/locknode.hpp\"\n-#include \"opto\/loopnode.hpp\"\n-#include \"opto\/machnode.hpp\"\n-#include \"opto\/matcher.hpp\"\n-#include \"opto\/mathexactnode.hpp\"\n-#include \"opto\/movenode.hpp\"\n-#include \"opto\/mulnode.hpp\"\n-#include \"opto\/narrowptrnode.hpp\"\n-#include \"opto\/opaquenode.hpp\"\n-#include \"opto\/parse.hpp\"\n-#include \"opto\/phaseX.hpp\"\n-#include \"opto\/regalloc.hpp\"\n-#include \"opto\/rootnode.hpp\"\n-#include \"opto\/subnode.hpp\"\n-#include \"opto\/vectornode.hpp\"\n@@ -147,1 +112,0 @@\n-#include OS_CPU_HEADER(vmStructs)\n@@ -186,5 +150,1 @@\n-                   nonproduct_nonstatic_field,                                                                                       \\\n-                   c1_nonstatic_field,                                                                                               \\\n-                   c2_nonstatic_field,                                                                                               \\\n-                   unchecked_c1_static_field,                                                                                        \\\n-                   unchecked_c2_static_field)                                                                                        \\\n+                   nonproduct_nonstatic_field)                                                                                       \\\n@@ -443,1 +403,1 @@\n-  \/* SystemDictionary *\/                                                                                                             \\\n+  \/* VM Classes       *\/                                                                                                             \\\n@@ -552,0 +512,1 @@\n+  nonstatic_field(CodeBlob,                    _kind,                                         CodeBlobKind)                          \\\n@@ -561,0 +522,2 @@\n+  nonstatic_field(CodeBlob,                    _mutable_data,                                 address)                               \\\n+  nonstatic_field(CodeBlob,                    _mutable_data_size,                            int)                                   \\\n@@ -583,2 +546,1 @@\n-  nonstatic_field(nmethod,                     _metadata_offset,                              u2)                                    \\\n-  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                    \\\n+  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                   \\\n@@ -597,2 +559,0 @@\n-  unchecked_c2_static_field(Deoptimization,    _trap_reason_name,                             void*)                                 \\\n-                                                                                                                                     \\\n@@ -668,2 +628,0 @@\n-  nonstatic_field(Thread,                      _resource_area,                                ResourceArea*)                         \\\n-  nonstatic_field(CompilerThread,              _env,                                          ciEnv*)                                \\\n@@ -712,69 +670,0 @@\n-  \/*******************************\/                                                                                                  \\\n-  \/* Runtime1 (NOTE: incomplete) *\/                                                                                                  \\\n-  \/*******************************\/                                                                                                  \\\n-                                                                                                                                     \\\n-  unchecked_c1_static_field(Runtime1,          _blobs,                                 sizeof(Runtime1::_blobs)) \/* NOTE: no type *\/ \\\n-                                                                                                                                     \\\n-  \/**************\/                                                                                                                   \\\n-  \/* CI *\/                                                                                                                           \\\n-  \/************\/                                                                                                                     \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciEnv,                       _compiler_data,                                void*)                                 \\\n-  nonstatic_field(ciEnv,                       _factory,                                      ciObjectFactory*)                      \\\n-  nonstatic_field(ciEnv,                       _dependencies,                                 Dependencies*)                         \\\n-  nonstatic_field(ciEnv,                       _task,                                         CompileTask*)                          \\\n-  nonstatic_field(ciEnv,                       _arena,                                        Arena*)                                \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciBaseObject,                _ident,                                        uint)                                  \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciObject,                    _handle,                                       jobject)                               \\\n-  nonstatic_field(ciObject,                    _klass,                                        ciKlass*)                              \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciMetadata,                  _metadata,                                     Metadata*)                             \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciSymbol,                    _symbol,                                       Symbol*)                               \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciType,                      _basic_type,                                   BasicType)                             \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciKlass,                     _name,                                         ciSymbol*)                             \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciArrayKlass,                _dimension,                                    jint)                                  \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciObjArrayKlass,             _element_klass,                                ciKlass*)                              \\\n-  nonstatic_field(ciObjArrayKlass,             _base_element_klass,                           ciKlass*)                              \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciInstanceKlass,             _init_state,                                   InstanceKlass::ClassState)             \\\n-  nonstatic_field(ciInstanceKlass,             _is_shared,                                    bool)                                  \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciMethod,                    _interpreter_invocation_count,                 int)                                   \\\n-  nonstatic_field(ciMethod,                    _interpreter_throwout_count,                   int)                                   \\\n-  nonstatic_field(ciMethod,                    _inline_instructions_size,                     int)                                   \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciMethodData,                _data_size,                                    int)                                   \\\n-  nonstatic_field(ciMethodData,                _state,                                        u_char)                                \\\n-  nonstatic_field(ciMethodData,                _extra_data_size,                              int)                                   \\\n-  nonstatic_field(ciMethodData,                _data,                                         intptr_t*)                             \\\n-  nonstatic_field(ciMethodData,                _hint_di,                                      int)                                   \\\n-  nonstatic_field(ciMethodData,                _eflags,                                       intx)                                  \\\n-  nonstatic_field(ciMethodData,                _arg_local,                                    intx)                                  \\\n-  nonstatic_field(ciMethodData,                _arg_stack,                                    intx)                                  \\\n-  nonstatic_field(ciMethodData,                _arg_returned,                                 intx)                                  \\\n-  nonstatic_field(ciMethodData,                _orig,                                         MethodData::CompilerCounters)          \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciField,                     _holder,                                       ciInstanceKlass*)                      \\\n-  nonstatic_field(ciField,                     _name,                                         ciSymbol*)                             \\\n-  nonstatic_field(ciField,                     _signature,                                    ciSymbol*)                             \\\n-  nonstatic_field(ciField,                     _offset,                                       int)                                   \\\n-  nonstatic_field(ciField,                     _is_constant,                                  bool)                                  \\\n-  nonstatic_field(ciField,                     _constant_value,                               ciConstant)                            \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciObjectFactory,             _ci_metadata,                                  GrowableArray<ciMetadata*>)            \\\n-  nonstatic_field(ciObjectFactory,             _symbols,                                      GrowableArray<ciSymbol*>)              \\\n-                                                                                                                                     \\\n-  nonstatic_field(ciConstant,                  _type,                                         BasicType)                             \\\n-  nonstatic_field(ciConstant,                  _value._int,                                   jint)                                  \\\n-  nonstatic_field(ciConstant,                  _value._long,                                  jlong)                                 \\\n-  nonstatic_field(ciConstant,                  _value._float,                                 jfloat)                                \\\n-  nonstatic_field(ciConstant,                  _value._double,                                jdouble)                               \\\n-  nonstatic_field(ciConstant,                  _value._object,                                ciObject*)                             \\\n-                                                                                                                                     \\\n@@ -800,117 +689,0 @@\n-  \/* Matcher (C2 only) *\/                                                                                                            \\\n-  \/*********************\/                                                                                                            \\\n-                                                                                                                                     \\\n-  unchecked_c2_static_field(Matcher,           _regEncode,                          sizeof(Matcher::_regEncode)) \/* NOTE: no type *\/ \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Node,                     _in,                                           Node**)                                \\\n-  c2_nonstatic_field(Node,                     _out,                                          Node**)                                \\\n-  c2_nonstatic_field(Node,                     _cnt,                                          node_idx_t)                            \\\n-  c2_nonstatic_field(Node,                     _max,                                          node_idx_t)                            \\\n-  c2_nonstatic_field(Node,                     _outcnt,                                       node_idx_t)                            \\\n-  c2_nonstatic_field(Node,                     _outmax,                                       node_idx_t)                            \\\n-  c2_nonstatic_field(Node,                     _idx,                                          const node_idx_t)                      \\\n-  c2_nonstatic_field(Node,                     _class_id,                                     juint)                                 \\\n-  c2_nonstatic_field(Node,                     _flags,                                        juint)                                 \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Compile,                  _root,                                         RootNode*)                             \\\n-  c2_nonstatic_field(Compile,                  _unique,                                       uint)                                  \\\n-  c2_nonstatic_field(Compile,                  _entry_bci,                                    int)                                   \\\n-  c2_nonstatic_field(Compile,                  _top,                                          Node*)                                 \\\n-  c2_nonstatic_field(Compile,                  _cfg,                                          PhaseCFG*)                             \\\n-  c2_nonstatic_field(Compile,                  _regalloc,                                     PhaseRegAlloc*)                        \\\n-  c2_nonstatic_field(Compile,                  _method,                                       ciMethod*)                             \\\n-  c2_nonstatic_field(Compile,                  _compile_id,                                   const int)                             \\\n-  c2_nonstatic_field(Compile,                  _options,                                      const Options)                         \\\n-  c2_nonstatic_field(Compile,                  _ilt,                                          InlineTree*)                           \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Options,                  _subsume_loads,                                const bool)                            \\\n-  c2_nonstatic_field(Options,                  _do_escape_analysis,                           const bool)                            \\\n-  c2_nonstatic_field(Options,                  _eliminate_boxing,                             const bool)                            \\\n-  c2_nonstatic_field(Options,                  _do_locks_coarsening,                          const bool)                            \\\n-  c2_nonstatic_field(Options,                  _install_code,                                 const bool)                            \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(InlineTree,               _caller_jvms,                                  JVMState*)                             \\\n-  c2_nonstatic_field(InlineTree,               _method,                                       ciMethod*)                             \\\n-  c2_nonstatic_field(InlineTree,               _caller_tree,                                  InlineTree*)                           \\\n-  c2_nonstatic_field(InlineTree,               _subtrees,                                     GrowableArray<InlineTree*>)            \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(OptoRegPair,              _first,                                        short)                                 \\\n-  c2_nonstatic_field(OptoRegPair,              _second,                                       short)                                 \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(JVMState,                 _caller,                                       JVMState*)                             \\\n-  c2_nonstatic_field(JVMState,                 _depth,                                        uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _locoff,                                       uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _stkoff,                                       uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _monoff,                                       uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _scloff,                                       uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _endoff,                                       uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _sp,                                           uint)                                  \\\n-  c2_nonstatic_field(JVMState,                 _bci,                                          int)                                   \\\n-  c2_nonstatic_field(JVMState,                 _method,                                       ciMethod*)                             \\\n-  c2_nonstatic_field(JVMState,                 _map,                                          SafePointNode*)                        \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(SafePointNode,            _jvms,                                         JVMState* const)                       \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachSafePointNode,        _jvms,                                         JVMState*)                             \\\n-  c2_nonstatic_field(MachSafePointNode,        _jvmadj,                                       uint)                                  \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachIfNode,               _prob,                                         jfloat)                                \\\n-  c2_nonstatic_field(MachIfNode,               _fcnt,                                         jfloat)                                \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachJumpNode,             _probs,                                        jfloat*)                               \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(CallNode,                 _entry_point,                                  address)                               \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(CallJavaNode,             _method,                                       ciMethod*)                             \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(CallRuntimeNode,          _name,                                         const char*)                           \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(CallStaticJavaNode,       _name,                                         const char*)                           \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachCallJavaNode,         _method,                                       ciMethod*)                             \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachCallStaticJavaNode,   _name,                                         const char*)                           \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(MachCallRuntimeNode,      _name,                                         const char*)                           \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(PhaseCFG,                 _number_of_blocks,                             uint)                                  \\\n-  c2_nonstatic_field(PhaseCFG,                 _blocks,                                       Block_List)                            \\\n-  c2_nonstatic_field(PhaseCFG,                 _node_to_block_mapping,                        Block_Array)                           \\\n-  c2_nonstatic_field(PhaseCFG,                 _root_block,                                   Block*)                                \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(PhaseRegAlloc,            _node_regs,                                    OptoRegPair*)                          \\\n-  c2_nonstatic_field(PhaseRegAlloc,            _node_regs_max_index,                          uint)                                  \\\n-  c2_nonstatic_field(PhaseRegAlloc,            _framesize,                                    uint)                                  \\\n-  c2_nonstatic_field(PhaseRegAlloc,            _max_reg,                                      OptoReg::Name)                         \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(PhaseChaitin,             _trip_cnt,                                     int)                                   \\\n-  c2_nonstatic_field(PhaseChaitin,             _alternate,                                    int)                                   \\\n-  c2_nonstatic_field(PhaseChaitin,             _lo_degree,                                    uint)                                  \\\n-  c2_nonstatic_field(PhaseChaitin,             _lo_stk_degree,                                uint)                                  \\\n-  c2_nonstatic_field(PhaseChaitin,             _hi_degree,                                    uint)                                  \\\n-  c2_nonstatic_field(PhaseChaitin,             _simplified,                                   uint)                                  \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Block,                    _nodes,                                        Node_List)                             \\\n-  c2_nonstatic_field(Block,                    _succs,                                        Block_Array)                           \\\n-  c2_nonstatic_field(Block,                    _num_succs,                                    uint)                                  \\\n-  c2_nonstatic_field(Block,                    _pre_order,                                    uint)                                  \\\n-  c2_nonstatic_field(Block,                    _dom_depth,                                    uint)                                  \\\n-  c2_nonstatic_field(Block,                    _idom,                                         Block*)                                \\\n-  c2_nonstatic_field(Block,                    _freq,                                         jdouble)                               \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(CFGElement,               _freq,                                         jdouble)                               \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Block_List,               _cnt,                                          uint)                                  \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Block_Array,              _size,                                         uint)                                  \\\n-  c2_nonstatic_field(Block_Array,              _blocks,                                       Block**)                               \\\n-  c2_nonstatic_field(Block_Array,              _arena,                                        Arena*)                                \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Node_List,                _cnt,                                          uint)                                  \\\n-                                                                                                                                     \\\n-  c2_nonstatic_field(Node_Array,               _max,                                          uint)                                  \\\n-  c2_nonstatic_field(Node_Array,               _nodes,                                        Node**)                                \\\n-  c2_nonstatic_field(Node_Array,               _a,                                            Arena*)                                \\\n-                                                                                                                                     \\\n-                                                                                                                                     \\\n-  \/*********************\/                                                                                                            \\\n@@ -1065,4 +837,1 @@\n-                 declare_unsigned_integer_type,                           \\\n-                 declare_c1_toplevel_type,                                \\\n-                 declare_c2_type,                                         \\\n-                 declare_c2_toplevel_type)                                \\\n+                 declare_unsigned_integer_type)                           \\\n@@ -1232,1 +1001,1 @@\n-  \/* SystemDictionary *\/                                                  \\\n+  \/* VM Classes       *\/                                                  \\\n@@ -1235,1 +1004,0 @@\n-  declare_toplevel_type(SystemDictionary)                                 \\\n@@ -1241,2 +1009,0 @@\n-  declare_toplevel_type(Arena)                                            \\\n-    declare_type(ResourceArea, Arena)                                     \\\n@@ -1313,2 +1079,0 @@\n-  declare_toplevel_type(SharedRuntime)                                    \\\n-                                                                          \\\n@@ -1327,2 +1091,2 @@\n-  declare_c2_type(ExceptionBlob,         SingletonBlob)                   \\\n-  declare_c2_type(UncommonTrapBlob,      RuntimeBlob)                     \\\n+  COMPILER2_PRESENT(declare_type(ExceptionBlob,    SingletonBlob))        \\\n+  COMPILER2_PRESENT(declare_type(UncommonTrapBlob, RuntimeBlob))          \\\n@@ -1376,6 +1140,0 @@\n-  \/**********************\/                                                \\\n-  \/* Runtime1 (C1 only) *\/                                                \\\n-  \/**********************\/                                                \\\n-                                                                          \\\n-  declare_c1_toplevel_type(Runtime1)                                      \\\n-                                                                          \\\n@@ -1392,460 +1150,0 @@\n-  \/*********************\/                                                 \\\n-  \/* Matcher (C2 only) *\/                                                 \\\n-  \/*********************\/                                                 \\\n-                                                                          \\\n-  declare_c2_toplevel_type(Matcher)                                       \\\n-  declare_c2_toplevel_type(Compile)                                       \\\n-  declare_c2_toplevel_type(Options)                                       \\\n-  declare_c2_toplevel_type(InlineTree)                                    \\\n-  declare_c2_toplevel_type(OptoRegPair)                                   \\\n-  declare_c2_toplevel_type(JVMState)                                      \\\n-  declare_c2_toplevel_type(Phase)                                         \\\n-    declare_c2_type(PhaseCFG, Phase)                                      \\\n-    declare_c2_type(PhaseRegAlloc, Phase)                                 \\\n-    declare_c2_type(PhaseChaitin, PhaseRegAlloc)                          \\\n-  declare_c2_toplevel_type(CFGElement)                                    \\\n-    declare_c2_type(Block, CFGElement)                                    \\\n-  declare_c2_toplevel_type(Block_Array)                                   \\\n-    declare_c2_type(Block_List, Block_Array)                              \\\n-  declare_c2_toplevel_type(Node_Array)                                    \\\n-  declare_c2_type(Node_List, Node_Array)                                  \\\n-  declare_c2_type(Unique_Node_List, Node_List)                            \\\n-  declare_c2_toplevel_type(Node)                                          \\\n-  declare_c2_type(AddNode, Node)                                          \\\n-  declare_c2_type(AddINode, AddNode)                                      \\\n-  declare_c2_type(AddLNode, AddNode)                                      \\\n-  declare_c2_type(AddFNode, AddNode)                                      \\\n-  declare_c2_type(AddDNode, AddNode)                                      \\\n-  declare_c2_type(AddPNode, Node)                                         \\\n-  declare_c2_type(OrINode, AddNode)                                       \\\n-  declare_c2_type(OrLNode, AddNode)                                       \\\n-  declare_c2_type(XorINode, AddNode)                                      \\\n-  declare_c2_type(XorLNode, AddNode)                                      \\\n-  declare_c2_type(MaxNode, AddNode)                                       \\\n-  declare_c2_type(MaxINode, MaxNode)                                      \\\n-  declare_c2_type(MinINode, MaxNode)                                      \\\n-  declare_c2_type(MaxLNode, MaxNode)                                      \\\n-  declare_c2_type(MinLNode, MaxNode)                                      \\\n-  declare_c2_type(MaxFNode, MaxNode)                                      \\\n-  declare_c2_type(MinFNode, MaxNode)                                      \\\n-  declare_c2_type(MaxDNode, MaxNode)                                      \\\n-  declare_c2_type(MinDNode, MaxNode)                                      \\\n-  declare_c2_type(StartNode, MultiNode)                                   \\\n-  declare_c2_type(StartOSRNode, StartNode)                                \\\n-  declare_c2_type(ParmNode, ProjNode)                                     \\\n-  declare_c2_type(ReturnNode, Node)                                       \\\n-  declare_c2_type(RethrowNode, Node)                                      \\\n-  declare_c2_type(TailCallNode, ReturnNode)                               \\\n-  declare_c2_type(TailJumpNode, ReturnNode)                               \\\n-  declare_c2_type(ForwardExceptionNode, ReturnNode)                       \\\n-  declare_c2_type(SafePointNode, MultiNode)                               \\\n-  declare_c2_type(CallNode, SafePointNode)                                \\\n-  declare_c2_type(CallJavaNode, CallNode)                                 \\\n-  declare_c2_type(CallStaticJavaNode, CallJavaNode)                       \\\n-  declare_c2_type(CallDynamicJavaNode, CallJavaNode)                      \\\n-  declare_c2_type(CallRuntimeNode, CallNode)                              \\\n-  declare_c2_type(CallLeafNode, CallRuntimeNode)                          \\\n-  declare_c2_type(CallLeafNoFPNode, CallLeafNode)                         \\\n-  declare_c2_type(CallLeafVectorNode, CallLeafNode)                       \\\n-  declare_c2_type(AllocateNode, CallNode)                                 \\\n-  declare_c2_type(AllocateArrayNode, AllocateNode)                        \\\n-  declare_c2_type(LockNode, AbstractLockNode)                             \\\n-  declare_c2_type(UnlockNode, AbstractLockNode)                           \\\n-  declare_c2_type(FastLockNode, CmpNode)                                  \\\n-  declare_c2_type(FastUnlockNode, CmpNode)                                \\\n-  declare_c2_type(RegionNode, Node)                                       \\\n-  declare_c2_type(JProjNode, ProjNode)                                    \\\n-  declare_c2_type(PhiNode, TypeNode)                                      \\\n-  declare_c2_type(GotoNode, Node)                                         \\\n-  declare_c2_type(CProjNode, ProjNode)                                    \\\n-  declare_c2_type(MultiBranchNode, MultiNode)                             \\\n-  declare_c2_type(IfNode, MultiBranchNode)                                \\\n-  declare_c2_type(IfTrueNode, CProjNode)                                  \\\n-  declare_c2_type(IfFalseNode, CProjNode)                                 \\\n-  declare_c2_type(PCTableNode, MultiBranchNode)                           \\\n-  declare_c2_type(JumpNode, PCTableNode)                                  \\\n-  declare_c2_type(JumpProjNode, JProjNode)                                \\\n-  declare_c2_type(CatchNode, PCTableNode)                                 \\\n-  declare_c2_type(CatchProjNode, CProjNode)                               \\\n-  declare_c2_type(CreateExNode, TypeNode)                                 \\\n-  declare_c2_type(ClearArrayNode, Node)                                   \\\n-  declare_c2_type(NeverBranchNode, MultiBranchNode)                       \\\n-  declare_c2_type(ConNode, TypeNode)                                      \\\n-  declare_c2_type(ConINode, ConNode)                                      \\\n-  declare_c2_type(ConPNode, ConNode)                                      \\\n-  declare_c2_type(ConNNode, ConNode)                                      \\\n-  declare_c2_type(ConLNode, ConNode)                                      \\\n-  declare_c2_type(ConFNode, ConNode)                                      \\\n-  declare_c2_type(ConDNode, ConNode)                                      \\\n-  declare_c2_type(BinaryNode, Node)                                       \\\n-  declare_c2_type(CMoveNode, TypeNode)                                    \\\n-  declare_c2_type(CMoveDNode, CMoveNode)                                  \\\n-  declare_c2_type(CMoveFNode, CMoveNode)                                  \\\n-  declare_c2_type(CMoveINode, CMoveNode)                                  \\\n-  declare_c2_type(CMoveLNode, CMoveNode)                                  \\\n-  declare_c2_type(CMovePNode, CMoveNode)                                  \\\n-  declare_c2_type(CMoveNNode, CMoveNode)                                  \\\n-  declare_c2_type(EncodePNode, TypeNode)                                  \\\n-  declare_c2_type(DecodeNNode, TypeNode)                                  \\\n-  declare_c2_type(EncodePKlassNode, TypeNode)                             \\\n-  declare_c2_type(DecodeNKlassNode, TypeNode)                             \\\n-  declare_c2_type(ConstraintCastNode, TypeNode)                           \\\n-  declare_c2_type(CastIINode, ConstraintCastNode)                         \\\n-  declare_c2_type(CastPPNode, ConstraintCastNode)                         \\\n-  declare_c2_type(CheckCastPPNode, TypeNode)                              \\\n-  declare_c2_type(Conv2BNode, Node)                                       \\\n-  declare_c2_type(ConvertNode, TypeNode)                                  \\\n-  declare_c2_type(ConvD2FNode, Node)                                      \\\n-  declare_c2_type(ConvD2INode, Node)                                      \\\n-  declare_c2_type(ConvD2LNode, Node)                                      \\\n-  declare_c2_type(ConvF2DNode, Node)                                      \\\n-  declare_c2_type(ConvF2INode, Node)                                      \\\n-  declare_c2_type(ConvF2LNode, Node)                                      \\\n-  declare_c2_type(ConvI2DNode, Node)                                      \\\n-  declare_c2_type(ConvI2FNode, Node)                                      \\\n-  declare_c2_type(ConvI2LNode, TypeNode)                                  \\\n-  declare_c2_type(ConvL2DNode, Node)                                      \\\n-  declare_c2_type(ConvL2FNode, Node)                                      \\\n-  declare_c2_type(ConvL2INode, Node)                                      \\\n-  declare_c2_type(CastX2PNode, Node)                                      \\\n-  declare_c2_type(CastP2XNode, Node)                                      \\\n-  declare_c2_type(MemBarNode, MultiNode)                                  \\\n-  declare_c2_type(MemBarAcquireNode, MemBarNode)                          \\\n-  declare_c2_type(MemBarReleaseNode, MemBarNode)                          \\\n-  declare_c2_type(LoadFenceNode, MemBarNode)                              \\\n-  declare_c2_type(StoreFenceNode, MemBarNode)                             \\\n-  declare_c2_type(MemBarVolatileNode, MemBarNode)                         \\\n-  declare_c2_type(MemBarCPUOrderNode, MemBarNode)                         \\\n-  declare_c2_type(OnSpinWaitNode, MemBarNode)                             \\\n-  declare_c2_type(BlackholeNode, MultiNode)                               \\\n-  declare_c2_type(InitializeNode, MemBarNode)                             \\\n-  declare_c2_type(ThreadLocalNode, Node)                                  \\\n-  declare_c2_type(Opaque1Node, Node)                                      \\\n-  declare_c2_type(PartialSubtypeCheckNode, Node)                          \\\n-  declare_c2_type(MoveI2FNode, Node)                                      \\\n-  declare_c2_type(MoveL2DNode, Node)                                      \\\n-  declare_c2_type(MoveF2INode, Node)                                      \\\n-  declare_c2_type(MoveD2LNode, Node)                                      \\\n-  declare_c2_type(DivINode, Node)                                         \\\n-  declare_c2_type(DivLNode, Node)                                         \\\n-  declare_c2_type(DivFNode, Node)                                         \\\n-  declare_c2_type(DivDNode, Node)                                         \\\n-  declare_c2_type(UDivINode, Node)                                        \\\n-  declare_c2_type(UDivLNode, Node)                                        \\\n-  declare_c2_type(ModINode, Node)                                         \\\n-  declare_c2_type(ModLNode, Node)                                         \\\n-  declare_c2_type(ModFNode, Node)                                         \\\n-  declare_c2_type(ModDNode, Node)                                         \\\n-  declare_c2_type(UModINode, Node)                                        \\\n-  declare_c2_type(UModLNode, Node)                                        \\\n-  declare_c2_type(DivModNode, MultiNode)                                  \\\n-  declare_c2_type(DivModINode, DivModNode)                                \\\n-  declare_c2_type(DivModLNode, DivModNode)                                \\\n-  declare_c2_type(UDivModINode, DivModNode)                               \\\n-  declare_c2_type(UDivModLNode, DivModNode)                               \\\n-  declare_c2_type(BoxLockNode, Node)                                      \\\n-  declare_c2_type(LoopNode, RegionNode)                                   \\\n-  declare_c2_type(CountedLoopNode, LoopNode)                              \\\n-  declare_c2_type(CountedLoopEndNode, IfNode)                             \\\n-  declare_c2_type(MachNode, Node)                                         \\\n-  declare_c2_type(MachIdealNode, MachNode)                                \\\n-  declare_c2_type(MachTypeNode, MachNode)                                 \\\n-  declare_c2_type(MachBreakpointNode, MachIdealNode)                      \\\n-  declare_c2_type(MachUEPNode, MachIdealNode)                             \\\n-  declare_c2_type(MachPrologNode, MachIdealNode)                          \\\n-  declare_c2_type(MachEpilogNode, MachIdealNode)                          \\\n-  declare_c2_type(MachNopNode, MachIdealNode)                             \\\n-  declare_c2_type(MachSpillCopyNode, MachIdealNode)                       \\\n-  declare_c2_type(MachNullCheckNode, MachIdealNode)                       \\\n-  declare_c2_type(MachProjNode, ProjNode)                                 \\\n-  declare_c2_type(MachIfNode, MachNode)                                   \\\n-  declare_c2_type(MachJumpNode, MachNode)                                 \\\n-  declare_c2_type(MachFastLockNode, MachNode)                             \\\n-  declare_c2_type(MachReturnNode, MachNode)                               \\\n-  declare_c2_type(MachSafePointNode, MachReturnNode)                      \\\n-  declare_c2_type(MachCallNode, MachSafePointNode)                        \\\n-  declare_c2_type(MachCallJavaNode, MachCallNode)                         \\\n-  declare_c2_type(MachCallStaticJavaNode, MachCallJavaNode)               \\\n-  declare_c2_type(MachCallDynamicJavaNode, MachCallJavaNode)              \\\n-  declare_c2_type(MachCallRuntimeNode, MachCallNode)                      \\\n-  declare_c2_type(MachHaltNode, MachReturnNode)                           \\\n-  declare_c2_type(MachTempNode, MachNode)                                 \\\n-  declare_c2_type(MemNode, Node)                                          \\\n-  declare_c2_type(MergeMemNode, Node)                                     \\\n-  declare_c2_type(LoadNode, MemNode)                                      \\\n-  declare_c2_type(LoadBNode, LoadNode)                                    \\\n-  declare_c2_type(LoadUSNode, LoadNode)                                   \\\n-  declare_c2_type(LoadINode, LoadNode)                                    \\\n-  declare_c2_type(LoadRangeNode, LoadINode)                               \\\n-  declare_c2_type(LoadLNode, LoadNode)                                    \\\n-  declare_c2_type(LoadL_unalignedNode, LoadLNode)                         \\\n-  declare_c2_type(LoadFNode, LoadNode)                                    \\\n-  declare_c2_type(LoadDNode, LoadNode)                                    \\\n-  declare_c2_type(LoadD_unalignedNode, LoadDNode)                         \\\n-  declare_c2_type(LoadPNode, LoadNode)                                    \\\n-  declare_c2_type(LoadNNode, LoadNode)                                    \\\n-  declare_c2_type(LoadKlassNode, LoadPNode)                               \\\n-  declare_c2_type(LoadNKlassNode, LoadNNode)                              \\\n-  declare_c2_type(LoadSNode, LoadNode)                                    \\\n-  declare_c2_type(StoreNode, MemNode)                                     \\\n-  declare_c2_type(StoreBNode, StoreNode)                                  \\\n-  declare_c2_type(StoreCNode, StoreNode)                                  \\\n-  declare_c2_type(StoreINode, StoreNode)                                  \\\n-  declare_c2_type(StoreLNode, StoreNode)                                  \\\n-  declare_c2_type(StoreFNode, StoreNode)                                  \\\n-  declare_c2_type(StoreDNode, StoreNode)                                  \\\n-  declare_c2_type(StorePNode, StoreNode)                                  \\\n-  declare_c2_type(StoreNNode, StoreNode)                                  \\\n-  declare_c2_type(StoreNKlassNode, StoreNode)                             \\\n-  declare_c2_type(SCMemProjNode, ProjNode)                                \\\n-  declare_c2_type(LoadStoreNode, Node)                                    \\\n-  declare_c2_type(CompareAndSwapNode, LoadStoreConditionalNode)           \\\n-  declare_c2_type(CompareAndSwapBNode, CompareAndSwapNode)                \\\n-  declare_c2_type(CompareAndSwapSNode, CompareAndSwapNode)                \\\n-  declare_c2_type(CompareAndSwapLNode, CompareAndSwapNode)                \\\n-  declare_c2_type(CompareAndSwapINode, CompareAndSwapNode)                \\\n-  declare_c2_type(CompareAndSwapPNode, CompareAndSwapNode)                \\\n-  declare_c2_type(CompareAndSwapNNode, CompareAndSwapNode)                \\\n-  declare_c2_type(WeakCompareAndSwapBNode, CompareAndSwapNode)            \\\n-  declare_c2_type(WeakCompareAndSwapSNode, CompareAndSwapNode)            \\\n-  declare_c2_type(WeakCompareAndSwapLNode, CompareAndSwapNode)            \\\n-  declare_c2_type(WeakCompareAndSwapINode, CompareAndSwapNode)            \\\n-  declare_c2_type(WeakCompareAndSwapPNode, CompareAndSwapNode)            \\\n-  declare_c2_type(WeakCompareAndSwapNNode, CompareAndSwapNode)            \\\n-  declare_c2_type(CompareAndExchangeNode, LoadStoreNode)                  \\\n-  declare_c2_type(CompareAndExchangeBNode, CompareAndExchangeNode)        \\\n-  declare_c2_type(CompareAndExchangeSNode, CompareAndExchangeNode)        \\\n-  declare_c2_type(CompareAndExchangeLNode, CompareAndExchangeNode)        \\\n-  declare_c2_type(CompareAndExchangeINode, CompareAndExchangeNode)        \\\n-  declare_c2_type(CompareAndExchangePNode, CompareAndExchangeNode)        \\\n-  declare_c2_type(CompareAndExchangeNNode, CompareAndExchangeNode)        \\\n-  declare_c2_type(MulNode, Node)                                          \\\n-  declare_c2_type(MulINode, MulNode)                                      \\\n-  declare_c2_type(MulLNode, MulNode)                                      \\\n-  declare_c2_type(MulFNode, MulNode)                                      \\\n-  declare_c2_type(MulDNode, MulNode)                                      \\\n-  declare_c2_type(MulHiLNode, Node)                                       \\\n-  declare_c2_type(UMulHiLNode, Node)                                      \\\n-  declare_c2_type(AndINode, MulINode)                                     \\\n-  declare_c2_type(AndLNode, MulLNode)                                     \\\n-  declare_c2_type(LShiftINode, Node)                                      \\\n-  declare_c2_type(LShiftLNode, Node)                                      \\\n-  declare_c2_type(RShiftINode, Node)                                      \\\n-  declare_c2_type(RShiftLNode, Node)                                      \\\n-  declare_c2_type(URShiftINode, Node)                                     \\\n-  declare_c2_type(URShiftLNode, Node)                                     \\\n-  declare_c2_type(MultiNode, Node)                                        \\\n-  declare_c2_type(ProjNode, Node)                                         \\\n-  declare_c2_type(TypeNode, Node)                                         \\\n-  declare_c2_type(RootNode, LoopNode)                                     \\\n-  declare_c2_type(HaltNode, Node)                                         \\\n-  declare_c2_type(SubNode, Node)                                          \\\n-  declare_c2_type(SubINode, SubNode)                                      \\\n-  declare_c2_type(SubLNode, SubNode)                                      \\\n-  declare_c2_type(SubFPNode, SubNode)                                     \\\n-  declare_c2_type(SubFNode, SubFPNode)                                    \\\n-  declare_c2_type(SubDNode, SubFPNode)                                    \\\n-  declare_c2_type(CmpNode, SubNode)                                       \\\n-  declare_c2_type(CmpINode, CmpNode)                                      \\\n-  declare_c2_type(CmpUNode, CmpNode)                                      \\\n-  declare_c2_type(CmpU3Node, CmpUNode)                                    \\\n-  declare_c2_type(CmpPNode, CmpNode)                                      \\\n-  declare_c2_type(CmpNNode, CmpNode)                                      \\\n-  declare_c2_type(CmpLNode, CmpNode)                                      \\\n-  declare_c2_type(CmpULNode, CmpNode)                                     \\\n-  declare_c2_type(CmpL3Node, CmpLNode)                                    \\\n-  declare_c2_type(CmpUL3Node, CmpULNode)                                  \\\n-  declare_c2_type(CmpFNode, CmpNode)                                      \\\n-  declare_c2_type(CmpF3Node, CmpFNode)                                    \\\n-  declare_c2_type(CmpDNode, CmpNode)                                      \\\n-  declare_c2_type(CmpD3Node, CmpDNode)                                    \\\n-  declare_c2_type(BoolNode, Node)                                         \\\n-  declare_c2_type(AbsNode, Node)                                          \\\n-  declare_c2_type(AbsINode, AbsNode)                                      \\\n-  declare_c2_type(AbsFNode, AbsNode)                                      \\\n-  declare_c2_type(AbsDNode, AbsNode)                                      \\\n-  declare_c2_type(CmpLTMaskNode, Node)                                    \\\n-  declare_c2_type(NegNode, Node)                                          \\\n-  declare_c2_type(NegINode, NegNode)                                      \\\n-  declare_c2_type(NegLNode, NegNode)                                      \\\n-  declare_c2_type(NegFNode, NegNode)                                      \\\n-  declare_c2_type(NegDNode, NegNode)                                      \\\n-  declare_c2_type(AtanDNode, Node)                                        \\\n-  declare_c2_type(SqrtFNode, Node)                                        \\\n-  declare_c2_type(SqrtDNode, Node)                                        \\\n-  declare_c2_type(ReverseBytesINode, Node)                                \\\n-  declare_c2_type(ReverseBytesLNode, Node)                                \\\n-  declare_c2_type(ReductionNode, Node)                                    \\\n-  declare_c2_type(VectorNode, Node)                                       \\\n-  declare_c2_type(AbsVFNode, VectorNode)                                  \\\n-  declare_c2_type(AbsVDNode, VectorNode)                                  \\\n-  declare_c2_type(AbsVBNode, VectorNode)                                  \\\n-  declare_c2_type(AbsVSNode, VectorNode)                                  \\\n-  declare_c2_type(AbsVINode, VectorNode)                                  \\\n-  declare_c2_type(AbsVLNode, VectorNode)                                  \\\n-  declare_c2_type(AddVBNode, VectorNode)                                  \\\n-  declare_c2_type(AddVSNode, VectorNode)                                  \\\n-  declare_c2_type(AddVINode, VectorNode)                                  \\\n-  declare_c2_type(AddReductionVINode, ReductionNode)                      \\\n-  declare_c2_type(AddVLNode, VectorNode)                                  \\\n-  declare_c2_type(AddReductionVLNode, ReductionNode)                      \\\n-  declare_c2_type(AddVFNode, VectorNode)                                  \\\n-  declare_c2_type(AddReductionVFNode, ReductionNode)                      \\\n-  declare_c2_type(AddVDNode, VectorNode)                                  \\\n-  declare_c2_type(AddReductionVDNode, ReductionNode)                      \\\n-  declare_c2_type(SubVBNode, VectorNode)                                  \\\n-  declare_c2_type(SubVSNode, VectorNode)                                  \\\n-  declare_c2_type(SubVINode, VectorNode)                                  \\\n-  declare_c2_type(SubVLNode, VectorNode)                                  \\\n-  declare_c2_type(SubVFNode, VectorNode)                                  \\\n-  declare_c2_type(SubVDNode, VectorNode)                                  \\\n-  declare_c2_type(MulVBNode, VectorNode)                                  \\\n-  declare_c2_type(MulVSNode, VectorNode)                                  \\\n-  declare_c2_type(MulVLNode, VectorNode)                                  \\\n-  declare_c2_type(MulReductionVLNode, ReductionNode)                      \\\n-  declare_c2_type(MulVINode, VectorNode)                                  \\\n-  declare_c2_type(MulReductionVINode, ReductionNode)                      \\\n-  declare_c2_type(MulVFNode, VectorNode)                                  \\\n-  declare_c2_type(MulReductionVFNode, ReductionNode)                      \\\n-  declare_c2_type(MulVDNode, VectorNode)                                  \\\n-  declare_c2_type(NegVNode, VectorNode)                                   \\\n-  declare_c2_type(NegVINode, NegVNode)                                    \\\n-  declare_c2_type(NegVLNode, NegVNode)                                    \\\n-  declare_c2_type(NegVFNode, NegVNode)                                    \\\n-  declare_c2_type(NegVDNode, NegVNode)                                    \\\n-  declare_c2_type(FmaVDNode, VectorNode)                                  \\\n-  declare_c2_type(FmaVFNode, VectorNode)                                  \\\n-  declare_c2_type(CompressVNode, VectorNode)                              \\\n-  declare_c2_type(CompressMNode, VectorNode)                              \\\n-  declare_c2_type(ExpandVNode, VectorNode)                                \\\n-  declare_c2_type(CompressBitsVNode, VectorNode)                          \\\n-  declare_c2_type(ExpandBitsVNode, VectorNode)                            \\\n-  declare_c2_type(MulReductionVDNode, ReductionNode)                      \\\n-  declare_c2_type(DivVFNode, VectorNode)                                  \\\n-  declare_c2_type(DivVDNode, VectorNode)                                  \\\n-  declare_c2_type(PopCountVINode, VectorNode)                             \\\n-  declare_c2_type(PopCountVLNode, VectorNode)                             \\\n-  declare_c2_type(LShiftVBNode, VectorNode)                               \\\n-  declare_c2_type(LShiftVSNode, VectorNode)                               \\\n-  declare_c2_type(LShiftVINode, VectorNode)                               \\\n-  declare_c2_type(LShiftVLNode, VectorNode)                               \\\n-  declare_c2_type(RShiftVBNode, VectorNode)                               \\\n-  declare_c2_type(RShiftVSNode, VectorNode)                               \\\n-  declare_c2_type(RShiftVINode, VectorNode)                               \\\n-  declare_c2_type(RShiftVLNode, VectorNode)                               \\\n-  declare_c2_type(URShiftVBNode, VectorNode)                              \\\n-  declare_c2_type(URShiftVSNode, VectorNode)                              \\\n-  declare_c2_type(URShiftVINode, VectorNode)                              \\\n-  declare_c2_type(URShiftVLNode, VectorNode)                              \\\n-  declare_c2_type(MinReductionVNode, ReductionNode)                       \\\n-  declare_c2_type(MaxReductionVNode, ReductionNode)                       \\\n-  declare_c2_type(AndVNode, VectorNode)                                   \\\n-  declare_c2_type(AndReductionVNode, ReductionNode)                       \\\n-  declare_c2_type(OrVNode, VectorNode)                                    \\\n-  declare_c2_type(OrReductionVNode, ReductionNode)                        \\\n-  declare_c2_type(XorVNode, VectorNode)                                   \\\n-  declare_c2_type(XorReductionVNode, ReductionNode)                       \\\n-  declare_c2_type(MaxVNode, VectorNode)                                   \\\n-  declare_c2_type(MinVNode, VectorNode)                                   \\\n-  declare_c2_type(LoadVectorNode, LoadNode)                               \\\n-  declare_c2_type(StoreVectorNode, StoreNode)                             \\\n-  declare_c2_type(ReplicateNode, VectorNode)                              \\\n-  declare_c2_type(PopulateIndexNode, VectorNode)                          \\\n-  declare_c2_type(PackNode, VectorNode)                                   \\\n-  declare_c2_type(PackBNode, PackNode)                                    \\\n-  declare_c2_type(PackSNode, PackNode)                                    \\\n-  declare_c2_type(PackINode, PackNode)                                    \\\n-  declare_c2_type(PackLNode, PackNode)                                    \\\n-  declare_c2_type(PackFNode, PackNode)                                    \\\n-  declare_c2_type(PackDNode, PackNode)                                    \\\n-  declare_c2_type(Pack2LNode, PackNode)                                   \\\n-  declare_c2_type(Pack2DNode, PackNode)                                   \\\n-  declare_c2_type(ExtractNode, Node)                                      \\\n-  declare_c2_type(ExtractBNode, ExtractNode)                              \\\n-  declare_c2_type(ExtractUBNode, ExtractNode)                             \\\n-  declare_c2_type(ExtractCNode, ExtractNode)                              \\\n-  declare_c2_type(ExtractSNode, ExtractNode)                              \\\n-  declare_c2_type(ExtractINode, ExtractNode)                              \\\n-  declare_c2_type(ExtractLNode, ExtractNode)                              \\\n-  declare_c2_type(ExtractFNode, ExtractNode)                              \\\n-  declare_c2_type(ExtractDNode, ExtractNode)                              \\\n-  declare_c2_type(OverflowNode, CmpNode)                                  \\\n-  declare_c2_type(OverflowINode, OverflowNode)                            \\\n-  declare_c2_type(OverflowAddINode, OverflowINode)                        \\\n-  declare_c2_type(OverflowSubINode, OverflowINode)                        \\\n-  declare_c2_type(OverflowMulINode, OverflowINode)                        \\\n-  declare_c2_type(OverflowLNode, OverflowNode)                            \\\n-  declare_c2_type(OverflowAddLNode, OverflowLNode)                        \\\n-  declare_c2_type(OverflowSubLNode, OverflowLNode)                        \\\n-  declare_c2_type(OverflowMulLNode, OverflowLNode)                        \\\n-  declare_c2_type(FmaDNode, Node)                                         \\\n-  declare_c2_type(FmaFNode, Node)                                         \\\n-  declare_c2_type(CopySignDNode, Node)                                    \\\n-  declare_c2_type(CopySignFNode, Node)                                    \\\n-  declare_c2_type(SignumDNode, Node)                                      \\\n-  declare_c2_type(SignumFNode, Node)                                      \\\n-  declare_c2_type(IsInfiniteFNode, Node)                                  \\\n-  declare_c2_type(IsInfiniteDNode, Node)                                  \\\n-  declare_c2_type(IsFiniteFNode, Node)                                    \\\n-  declare_c2_type(IsFiniteDNode, Node)                                    \\\n-  declare_c2_type(LoadVectorGatherNode, LoadVectorNode)                   \\\n-  declare_c2_type(StoreVectorScatterNode, StoreVectorNode)                \\\n-  declare_c2_type(VectorLoadMaskNode, VectorNode)                         \\\n-  declare_c2_type(VectorLoadShuffleNode, VectorNode)                      \\\n-  declare_c2_type(VectorStoreMaskNode, VectorNode)                        \\\n-  declare_c2_type(VectorBlendNode, VectorNode)                            \\\n-  declare_c2_type(VectorRearrangeNode, VectorNode)                        \\\n-  declare_c2_type(VectorMaskWrapperNode, VectorNode)                      \\\n-  declare_c2_type(VectorMaskCmpNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastB2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastS2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastI2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastL2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastF2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorCastD2XNode, VectorNode)                          \\\n-  declare_c2_type(VectorUCastB2XNode, VectorNode)                         \\\n-  declare_c2_type(VectorUCastS2XNode, VectorNode)                         \\\n-  declare_c2_type(VectorUCastI2XNode, VectorNode)                         \\\n-  declare_c2_type(VectorInsertNode, VectorNode)                           \\\n-  declare_c2_type(VectorUnboxNode, VectorNode)                            \\\n-  declare_c2_type(VectorReinterpretNode, VectorNode)                      \\\n-  declare_c2_type(VectorMaskCastNode, VectorNode)                         \\\n-  declare_c2_type(CountLeadingZerosVNode, VectorNode)                     \\\n-  declare_c2_type(CountTrailingZerosVNode, VectorNode)                    \\\n-  declare_c2_type(ReverseBytesVNode, VectorNode)                          \\\n-  declare_c2_type(ReverseVNode, VectorNode)                               \\\n-  declare_c2_type(MaskAllNode, VectorNode)                                \\\n-  declare_c2_type(AndVMaskNode, VectorNode)                               \\\n-  declare_c2_type(OrVMaskNode, VectorNode)                                \\\n-  declare_c2_type(XorVMaskNode, VectorNode)                               \\\n-  declare_c2_type(VectorBoxNode, Node)                                    \\\n-  declare_c2_type(VectorBoxAllocateNode, CallStaticJavaNode)              \\\n-  declare_c2_type(VectorTestNode, CmpNode)                                \\\n-                                                                          \\\n-  \/*********************\/                                                 \\\n-  \/* Adapter Blob Entries *\/                                              \\\n-  \/*********************\/                                                 \\\n-  declare_toplevel_type(AdapterHandlerEntry)                              \\\n-  declare_toplevel_type(AdapterHandlerEntry*)                             \\\n-                                                                          \\\n-  \/*********************\/                                                 \\\n-  \/* CI *\/                                                                \\\n-  \/*********************\/                                                 \\\n-  declare_toplevel_type(ciEnv)                                            \\\n-  declare_toplevel_type(ciObjectFactory)                                  \\\n-  declare_toplevel_type(ciConstant)                                       \\\n-  declare_toplevel_type(ciField)                                          \\\n-  declare_toplevel_type(ciSymbol)                                         \\\n-  declare_toplevel_type(ciBaseObject)                                     \\\n-  declare_type(ciObject, ciBaseObject)                                    \\\n-  declare_type(ciInstance, ciObject)                                      \\\n-  declare_type(ciMetadata, ciBaseObject)                                  \\\n-  declare_type(ciMethod, ciMetadata)                                      \\\n-  declare_type(ciMethodData, ciMetadata)                                  \\\n-  declare_type(ciType, ciMetadata)                                        \\\n-  declare_type(ciKlass, ciType)                                           \\\n-  declare_type(ciInstanceKlass, ciKlass)                                  \\\n-  declare_type(ciArrayKlass, ciKlass)                                     \\\n-  declare_type(ciTypeArrayKlass, ciArrayKlass)                            \\\n-  declare_type(ciObjArrayKlass, ciArrayKlass)                             \\\n-                                                                          \\\n@@ -1896,1 +1194,0 @@\n-   COMPILER2_PRESENT(declare_integer_type(OptoReg::Name))                 \\\n@@ -1919,0 +1216,1 @@\n+  declare_integer_type(CodeBlobKind)                                      \\\n@@ -1947,1 +1245,0 @@\n-  COMPILER2_PRESENT(declare_unsigned_integer_type(node_idx_t))            \\\n@@ -1987,4 +1284,1 @@\n-                         declare_preprocessor_constant,                   \\\n-                         declare_c1_constant,                             \\\n-                         declare_c2_constant,                             \\\n-                         declare_c2_preprocessor_constant)                \\\n+                         declare_preprocessor_constant)                   \\\n@@ -2004,0 +1298,1 @@\n+  declare_preprocessor_constant(\"COMPILER2\", COMPILER2_PRESENT(1) NOT_COMPILER2(0)) \\\n@@ -2270,0 +1565,1 @@\n+  declare_constant(Deoptimization::Reason_auto_vectorization_check)       \\\n@@ -2352,6 +1648,0 @@\n-  \/*********************\/                                                 \\\n-  \/* Matcher (C2 only) *\/                                                 \\\n-  \/*********************\/                                                 \\\n-                                                                          \\\n-  declare_c2_preprocessor_constant(\"Matcher::interpreter_frame_pointer_reg\", Matcher::interpreter_frame_pointer_reg()) \\\n-                                                                          \\\n@@ -2376,0 +1666,17 @@\n+  \/****************\/                                                      \\\n+  \/* CodeBlobKind *\/                                                      \\\n+  \/****************\/                                                      \\\n+                                                                          \\\n+  declare_constant(CodeBlobKind::Nmethod)                                 \\\n+  declare_constant(CodeBlobKind::Buffer)                                  \\\n+  declare_constant(CodeBlobKind::Adapter)                                 \\\n+  declare_constant(CodeBlobKind::Vtable)                                  \\\n+  declare_constant(CodeBlobKind::MHAdapter)                               \\\n+  declare_constant(CodeBlobKind::RuntimeStub)                             \\\n+  declare_constant(CodeBlobKind::Deoptimization)                          \\\n+  declare_constant(CodeBlobKind::Safepoint)                               \\\n+  COMPILER2_PRESENT(declare_constant(CodeBlobKind::Exception))            \\\n+  COMPILER2_PRESENT(declare_constant(CodeBlobKind::UncommonTrap))         \\\n+  declare_constant(CodeBlobKind::Upcall)                                  \\\n+  declare_constant(CodeBlobKind::Number_Of_Kinds)                         \\\n+                                                                          \\\n@@ -2440,2 +1747,2 @@\n-  declare_c2_preprocessor_constant(\"SAVED_ON_ENTRY_REG_COUNT\", SAVED_ON_ENTRY_REG_COUNT) \\\n-  declare_c2_preprocessor_constant(\"C_SAVED_ON_ENTRY_REG_COUNT\", C_SAVED_ON_ENTRY_REG_COUNT) \\\n+  COMPILER2_PRESENT(declare_preprocessor_constant(\"SAVED_ON_ENTRY_REG_COUNT\", SAVED_ON_ENTRY_REG_COUNT)) \\\n+  COMPILER2_PRESENT(declare_preprocessor_constant(\"C_SAVED_ON_ENTRY_REG_COUNT\", C_SAVED_ON_ENTRY_REG_COUNT)) \\\n@@ -2493,1 +1800,1 @@\n-#define VM_LONG_CONSTANTS(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant) \\\n+#define VM_LONG_CONSTANTS(declare_constant, declare_preprocessor_constant) \\\n@@ -2559,102 +1866,0 @@\n-\/\/ Generate and check a nonstatic field in C1 builds\n-#ifdef COMPILER1\n-# define GENERATE_C1_NONSTATIC_VM_STRUCT_ENTRY(a, b, c) GENERATE_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define CHECK_C1_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)    CHECK_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define ENSURE_C1_FIELD_TYPE_PRESENT(a, b, c)          ENSURE_FIELD_TYPE_PRESENT(a, b, c)\n-#else\n-# define GENERATE_C1_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define CHECK_C1_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define ENSURE_C1_FIELD_TYPE_PRESENT(a, b, c)\n-#endif \/* COMPILER1 *\/\n-\/\/ Generate and check a nonstatic field in C2 builds\n-#ifdef COMPILER2\n-# define GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY(a, b, c) GENERATE_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define CHECK_C2_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)    CHECK_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define ENSURE_C2_FIELD_TYPE_PRESENT(a, b, c)          ENSURE_FIELD_TYPE_PRESENT(a, b, c)\n-#else\n-# define GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define CHECK_C2_NONSTATIC_VM_STRUCT_ENTRY(a, b, c)\n-# define ENSURE_C2_FIELD_TYPE_PRESENT(a, b, c)\n-#endif \/* COMPILER2 *\/\n-\n-\/\/ Generate but do not check a static field in C1 builds\n-#ifdef COMPILER1\n-# define GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c) GENERATE_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c)\n-#else\n-# define GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c)\n-#endif \/* COMPILER1 *\/\n-\n-\/\/ Generate but do not check a static field in C2 builds\n-#ifdef COMPILER2\n-# define GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c) GENERATE_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c)\n-#else\n-# define GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY(a, b, c)\n-#endif \/* COMPILER2 *\/\n-\n-\/\/--------------------------------------------------------------------------------\n-\/\/ VMTypeEntry build-specific macros\n-\/\/\n-\n-#ifdef COMPILER1\n-# define GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY(a)               GENERATE_TOPLEVEL_VM_TYPE_ENTRY(a)\n-# define CHECK_C1_TOPLEVEL_VM_TYPE_ENTRY(a)\n-#else\n-# define GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY(a)\n-# define CHECK_C1_TOPLEVEL_VM_TYPE_ENTRY(a)\n-#endif \/* COMPILER1 *\/\n-\n-#ifdef COMPILER2\n-# define GENERATE_C2_VM_TYPE_ENTRY(a, b)                     GENERATE_VM_TYPE_ENTRY(a, b)\n-# define CHECK_C2_VM_TYPE_ENTRY(a, b)                        CHECK_VM_TYPE_ENTRY(a, b)\n-# define GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY(a)               GENERATE_TOPLEVEL_VM_TYPE_ENTRY(a)\n-# define CHECK_C2_TOPLEVEL_VM_TYPE_ENTRY(a)\n-#else\n-# define GENERATE_C2_VM_TYPE_ENTRY(a, b)\n-# define CHECK_C2_VM_TYPE_ENTRY(a, b)\n-# define GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY(a)\n-# define CHECK_C2_TOPLEVEL_VM_TYPE_ENTRY(a)\n-#endif \/* COMPILER2 *\/\n-\n-\n-\/\/--------------------------------------------------------------------------------\n-\/\/ VMIntConstantEntry build-specific macros\n-\/\/\n-\n-\/\/ Generate an int constant for a C1 build\n-#ifdef COMPILER1\n-# define GENERATE_C1_VM_INT_CONSTANT_ENTRY(name)  GENERATE_VM_INT_CONSTANT_ENTRY(name)\n-#else\n-# define GENERATE_C1_VM_INT_CONSTANT_ENTRY(name)\n-#endif \/* COMPILER1 *\/\n-\n-\/\/ Generate an int constant for a C2 build\n-#ifdef COMPILER2\n-# define GENERATE_C2_VM_INT_CONSTANT_ENTRY(name)                      GENERATE_VM_INT_CONSTANT_ENTRY(name)\n-# define GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY(name, value)  GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY(name, value)\n-#else\n-# define GENERATE_C2_VM_INT_CONSTANT_ENTRY(name)\n-# define GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY(name, value)\n-#endif \/* COMPILER1 *\/\n-\n-\n-\/\/--------------------------------------------------------------------------------\n-\/\/ VMLongConstantEntry build-specific macros\n-\/\/\n-\n-\/\/ Generate a long constant for a C1 build\n-#ifdef COMPILER1\n-# define GENERATE_C1_VM_LONG_CONSTANT_ENTRY(name)  GENERATE_VM_LONG_CONSTANT_ENTRY(name)\n-#else\n-# define GENERATE_C1_VM_LONG_CONSTANT_ENTRY(name)\n-#endif \/* COMPILER1 *\/\n-\n-\/\/ Generate a long constant for a C2 build\n-#ifdef COMPILER2\n-# define GENERATE_C2_VM_LONG_CONSTANT_ENTRY(name)                     GENERATE_VM_LONG_CONSTANT_ENTRY(name)\n-# define GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY(name, value) GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY(name, value)\n-#else\n-# define GENERATE_C2_VM_LONG_CONSTANT_ENTRY(name)\n-# define GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY(name, value)\n-#endif \/* COMPILER1 *\/\n-\n-\n@@ -2674,5 +1879,1 @@\n-             GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-             GENERATE_C1_NONSTATIC_VM_STRUCT_ENTRY,\n-             GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-             GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY,\n-             GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY)\n+             GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY)\n@@ -2685,4 +1886,1 @@\n-                GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-                GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-                GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY,\n-                GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY)\n+                GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY)\n@@ -2694,13 +1892,1 @@\n-                 GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-                 GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-                 GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY,\n-                 GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY)\n-\n-  VM_STRUCTS_OS_CPU(GENERATE_NONSTATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_STATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_UNCHECKED_NONSTATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_NONSTATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_C1_UNCHECKED_STATIC_VM_STRUCT_ENTRY,\n-                    GENERATE_C2_UNCHECKED_STATIC_VM_STRUCT_ENTRY)\n+                 GENERATE_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY)\n@@ -2721,5 +1907,1 @@\n-           GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY,\n-           GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-           GENERATE_C2_VM_TYPE_ENTRY,\n-           GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY)\n-\n+           GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY)\n@@ -2731,4 +1913,1 @@\n-              GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY,\n-              GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-              GENERATE_C2_VM_TYPE_ENTRY,\n-              GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY)\n+              GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY)\n@@ -2740,13 +1919,1 @@\n-               GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY,\n-               GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-               GENERATE_C2_VM_TYPE_ENTRY,\n-               GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY)\n-\n-  VM_TYPES_OS_CPU(GENERATE_VM_TYPE_ENTRY,\n-                  GENERATE_TOPLEVEL_VM_TYPE_ENTRY,\n-                  GENERATE_OOP_VM_TYPE_ENTRY,\n-                  GENERATE_INTEGER_VM_TYPE_ENTRY,\n-                  GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY,\n-                  GENERATE_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-                  GENERATE_C2_VM_TYPE_ENTRY,\n-                  GENERATE_C2_TOPLEVEL_VM_TYPE_ENTRY)\n+               GENERATE_UNSIGNED_INTEGER_VM_TYPE_ENTRY)\n@@ -2765,4 +1932,1 @@\n-                   GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY,\n-                   GENERATE_C1_VM_INT_CONSTANT_ENTRY,\n-                   GENERATE_C2_VM_INT_CONSTANT_ENTRY,\n-                   GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n+                   GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n@@ -2771,4 +1935,1 @@\n-                      GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY,\n-                      GENERATE_C1_VM_INT_CONSTANT_ENTRY,\n-                      GENERATE_C2_VM_INT_CONSTANT_ENTRY,\n-                      GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n+                      GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n@@ -2777,4 +1938,1 @@\n-                       GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY,\n-                       GENERATE_C1_VM_INT_CONSTANT_ENTRY,\n-                       GENERATE_C2_VM_INT_CONSTANT_ENTRY,\n-                       GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n+                       GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n@@ -2782,5 +1940,0 @@\n-  VM_INT_CONSTANTS_OS_CPU(GENERATE_VM_INT_CONSTANT_ENTRY,\n-                          GENERATE_PREPROCESSOR_VM_INT_CONSTANT_ENTRY,\n-                          GENERATE_C1_VM_INT_CONSTANT_ENTRY,\n-                          GENERATE_C2_VM_INT_CONSTANT_ENTRY,\n-                          GENERATE_C2_PREPROCESSOR_VM_INT_CONSTANT_ENTRY)\n@@ -2801,4 +1954,1 @@\n-                    GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY,\n-                    GENERATE_C1_VM_LONG_CONSTANT_ENTRY,\n-                    GENERATE_C2_VM_LONG_CONSTANT_ENTRY,\n-                    GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n+                    GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n@@ -2807,4 +1957,1 @@\n-                       GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY,\n-                       GENERATE_C1_VM_LONG_CONSTANT_ENTRY,\n-                       GENERATE_C2_VM_LONG_CONSTANT_ENTRY,\n-                       GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n+                       GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n@@ -2813,4 +1960,1 @@\n-                        GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY,\n-                        GENERATE_C1_VM_LONG_CONSTANT_ENTRY,\n-                        GENERATE_C2_VM_LONG_CONSTANT_ENTRY,\n-                        GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n+                        GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n@@ -2818,5 +1962,0 @@\n-  VM_LONG_CONSTANTS_OS_CPU(GENERATE_VM_LONG_CONSTANT_ENTRY,\n-                           GENERATE_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY,\n-                           GENERATE_C1_VM_LONG_CONSTANT_ENTRY,\n-                           GENERATE_C2_VM_LONG_CONSTANT_ENTRY,\n-                           GENERATE_C2_PREPROCESSOR_VM_LONG_CONSTANT_ENTRY)\n@@ -2876,6 +2015,1 @@\n-             CHECK_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-             CHECK_C1_NONSTATIC_VM_STRUCT_ENTRY,\n-             CHECK_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-             CHECK_NO_OP,\n-             CHECK_NO_OP);\n-\n+             CHECK_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY)\n@@ -2887,13 +2021,1 @@\n-                 CHECK_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-                 CHECK_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-                 CHECK_NO_OP,\n-                 CHECK_NO_OP);\n-\n-  VM_STRUCTS_OS_CPU(CHECK_NONSTATIC_VM_STRUCT_ENTRY,\n-                    CHECK_STATIC_VM_STRUCT_ENTRY,\n-                    CHECK_NO_OP,\n-                    CHECK_VOLATILE_NONSTATIC_VM_STRUCT_ENTRY,\n-                    CHECK_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY,\n-                    CHECK_C2_NONSTATIC_VM_STRUCT_ENTRY,\n-                    CHECK_NO_OP,\n-                    CHECK_NO_OP);\n+                 CHECK_NONPRODUCT_NONSTATIC_VM_STRUCT_ENTRY)\n@@ -2905,4 +2027,1 @@\n-           CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-           CHECK_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-           CHECK_C2_VM_TYPE_ENTRY,\n-           CHECK_C2_TOPLEVEL_VM_TYPE_ENTRY);\n+           CHECK_SINGLE_ARG_VM_TYPE_NO_OP)\n@@ -2915,13 +2034,1 @@\n-               CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-               CHECK_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-               CHECK_C2_VM_TYPE_ENTRY,\n-               CHECK_C2_TOPLEVEL_VM_TYPE_ENTRY);\n-\n-  VM_TYPES_OS_CPU(CHECK_VM_TYPE_ENTRY,\n-                  CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-                  CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-                  CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-                  CHECK_SINGLE_ARG_VM_TYPE_NO_OP,\n-                  CHECK_C1_TOPLEVEL_VM_TYPE_ENTRY,\n-                  CHECK_C2_VM_TYPE_ENTRY,\n-                  CHECK_C2_TOPLEVEL_VM_TYPE_ENTRY);\n+               CHECK_SINGLE_ARG_VM_TYPE_NO_OP)\n@@ -2951,5 +2058,1 @@\n-             CHECK_NO_OP,\n-             CHECK_NO_OP,\n-             CHECK_NO_OP,\n-             CHECK_NO_OP,\n-             CHECK_NO_OP);\n+             CHECK_NO_OP)\n@@ -2962,5 +2065,1 @@\n-             ENSURE_NONPRODUCT_FIELD_TYPE_PRESENT,\n-             ENSURE_C1_FIELD_TYPE_PRESENT,\n-             ENSURE_C2_FIELD_TYPE_PRESENT,\n-             CHECK_NO_OP,\n-             CHECK_NO_OP);\n+             ENSURE_NONPRODUCT_FIELD_TYPE_PRESENT)\n@@ -2972,12 +2071,1 @@\n-                 ENSURE_NONPRODUCT_FIELD_TYPE_PRESENT,\n-                 ENSURE_C2_FIELD_TYPE_PRESENT,\n-                 CHECK_NO_OP,\n-                 CHECK_NO_OP);\n-  VM_STRUCTS_OS_CPU(ENSURE_FIELD_TYPE_PRESENT,\n-                    ENSURE_FIELD_TYPE_PRESENT,\n-                    CHECK_NO_OP,\n-                    ENSURE_FIELD_TYPE_PRESENT,\n-                    ENSURE_NONPRODUCT_FIELD_TYPE_PRESENT,\n-                    ENSURE_C2_FIELD_TYPE_PRESENT,\n-                    CHECK_NO_OP,\n-                    CHECK_NO_OP);\n+                 ENSURE_NONPRODUCT_FIELD_TYPE_PRESENT)\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":53,"deletions":965,"binary":false,"changes":1018,"status":"modified"},{"patch":"@@ -1180,3 +1180,4 @@\n-  _human_readable(\"-H\", \"Human readable format\", \"BOOLEAN\", false, \"false\"),\n-  _minsize(\"-s\", \"Minimum memory size\", \"MEMORY SIZE\", false, \"0\") {\n-  _dcmdparser.add_dcmd_option(&_human_readable);\n+  _verbose(\"verbose\", \"Print detailed information\", \"BOOLEAN\", false, \"false\"),\n+  _legend(\"legend\", \"Table mode: print legend\", \"BOOLEAN\", false, \"false\"),\n+  _minsize(\"minsize\", \"Minimum memory size\", \"MEMORY SIZE\", false, \"0\") {\n+  _dcmdparser.add_dcmd_option(&_verbose);\n@@ -1184,0 +1185,1 @@\n+  _dcmdparser.add_dcmd_option(&_legend);\n@@ -1187,2 +1189,1 @@\n-  const bool human_readable = _human_readable.value();\n-  CompilationMemoryStatistic::print_all_by_size(output(), human_readable, minsize);\n+  CompilationMemoryStatistic::print_jcmd_report(output(), _verbose.value(), _legend.value(), minsize);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -808,1 +808,2 @@\n-  DCmdArgument<bool> _human_readable;\n+  DCmdArgument<bool> _verbose;\n+  DCmdArgument<bool> _legend;\n@@ -811,1 +812,1 @@\n-  static int num_arguments() { return 2; }\n+  static int num_arguments() { return 3; }\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -419,1 +419,0 @@\n-    @SuppressWarnings(\"try\")\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileDescriptor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    @SuppressWarnings(\"removal\")\n+    @SuppressWarnings({ \"removal\", \"suppression\" })\n@@ -88,1 +88,1 @@\n-    @SuppressWarnings(\"this-escape\")\n+    @SuppressWarnings({ \"this-escape\", \"suppression\" })\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/BasicImageReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+        jdk.crypto.cryptoki, \/\/ participates in preview features\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1761,16 +1761,1 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (reader != 0 || writer != 0) {\n-                    if (NativeThread.isVirtualThread(reader)\n-                            || NativeThread.isVirtualThread(writer)) {\n-                        Poller.stopPoll(fdVal);\n-                    }\n-                    if (NativeThread.isNativeThread(reader)\n-                            || NativeThread.isNativeThread(writer)) {\n-                        nd.preClose(fd);\n-                        if (NativeThread.isNativeThread(reader))\n-                            NativeThread.signal(reader);\n-                        if (NativeThread.isNativeThread(writer))\n-                            NativeThread.signal(writer);\n-                    }\n-                }\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -934,14 +934,1 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (NativeThread.isVirtualThread(reader)\n-                        || NativeThread.isVirtualThread(writer)) {\n-                    Poller.stopPoll(fdVal(fd));\n-                }\n-                if (NativeThread.isNativeThread(reader)\n-                        || NativeThread.isNativeThread(writer)) {\n-                    nd.preClose(fd);\n-                    if (NativeThread.isNativeThread(reader))\n-                        NativeThread.signal(reader);\n-                    if (NativeThread.isNativeThread(writer))\n-                        NativeThread.signal(writer);\n-                }\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -595,9 +595,1 @@\n-                long th = thread;\n-                if (th != 0) {\n-                    if (NativeThread.isVirtualThread(th)) {\n-                        Poller.stopPoll(fdVal);\n-                    } else {\n-                        nd.preClose(fd);\n-                        NativeThread.signal(th);\n-                    }\n-                }\n+                nd.preClose(fd, thread, 0);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1128,14 +1128,2 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (NativeThread.isVirtualThread(reader)\n-                        || NativeThread.isVirtualThread(writer)) {\n-                    Poller.stopPoll(fdVal);\n-                }\n-                if (NativeThread.isNativeThread(reader)\n-                        || NativeThread.isNativeThread(writer)) {\n-                    nd.preClose(fd);\n-                    if (NativeThread.isNativeThread(reader))\n-                        NativeThread.signal(reader);\n-                    if (NativeThread.isNativeThread(writer))\n-                        NativeThread.signal(writer);\n-                }\n+                \/\/ prepare file descriptor for closing\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3390,1 +3390,1 @@\n-the designated output when the logging call is made. But you can instead use asynchronous\n+the designated output when the logging call is made. You can instead use asynchronous\n@@ -3393,1 +3393,1 @@\n-`-Xlog:async`\n+`-Xlog:async[:[stall|drop]]`\n@@ -3398,2 +3398,4 @@\n-intermediate buffer is bounded and on buffer exhaustion the enqueuing message is discarded.\n-Log entry write operations are guaranteed non-blocking.\n+intermediate buffer is bounded. On buffer exhaustion the enqueuing message is either discarded (`async:drop`),\n+or logging threads are stalled until the flushing thread catches up (`async:stall`).\n+If no specific mode is chosen, then `async:drop` is chosen by default.\n+Log entry write operations are guaranteed to be non-blocking in the `async:drop` case.\n","filename":"src\/java.base\/share\/man\/java.md","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,1 @@\n+    @Override\n@@ -61,1 +62,1 @@\n-        close0(fd);\n+        closeAndMark(fd);\n@@ -118,0 +119,9 @@\n+    @Override\n+    void implPreClose(FileDescriptor fd, long reader, long writer) throws IOException {\n+        preClose0(fd);\n+        if (NativeThread.isNativeThread(reader))\n+            NativeThread.signal(reader);\n+        if (NativeThread.isNativeThread(writer))\n+            NativeThread.signal(writer);\n+    }\n+\n@@ -120,1 +130,1 @@\n-    static native void preClose0(FileDescriptor fd) throws IOException;\n+    private static native void preClose0(FileDescriptor fd) throws IOException;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDispatcher.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-compiler\/ciReplay\/TestSAServer.java 8029528 generic-all\n@@ -99,1 +98,0 @@\n-gc\/stress\/gclocker\/TestExcessGCLockerCollections.java 8229120 generic-all\n@@ -102,0 +100,1 @@\n+gc\/TestAllocHumongousFragment.java#generational 8351464 generic-all\n@@ -175,2 +174,0 @@\n-vmTestbase\/gc\/lock\/jni\/jnilock002\/TestDescription.java 8192647 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -465,1 +465,0 @@\n-java\/awt\/Headless\/HeadlessMalfunctionTest.java 8349099 generic-all\n@@ -502,1 +501,0 @@\n-java\/awt\/FullScreen\/FullscreenWindowProps\/FullscreenWindowProps.java 8280991 linux-x64\n@@ -547,2 +545,3 @@\n-com\/sun\/management\/OperatingSystemMXBean\/GetProcessCpuLoad.java 8030957 aix-all\n-com\/sun\/management\/OperatingSystemMXBean\/GetSystemCpuLoad.java  8030957 aix-all\n+# First bug for AIX, second for Windows\n+com\/sun\/management\/OperatingSystemMXBean\/GetProcessCpuLoad.java 8030957,8351002 aix-all,windows-all\n+com\/sun\/management\/OperatingSystemMXBean\/GetSystemCpuLoad.java  8030957,8351002 aix-all,windows-all\n@@ -642,3 +641,0 @@\n-com\/sun\/security\/sasl\/gsskerb\/AuthOnly.java                     8039280 generic-all\n-com\/sun\/security\/sasl\/gsskerb\/ConfSecurityLayer.java            8039280 generic-all\n-com\/sun\/security\/sasl\/gsskerb\/NoSecurityLayer.java              8039280 generic-all\n@@ -704,4 +700,0 @@\n-# jdk_swing Ubuntu 23.04 specific\n-\n-javax\/swing\/JComboBox\/TestComboBoxComponentRendering.java 8309734 linux-all\n-\n@@ -765,0 +757,1 @@\n+jdk\/incubator\/vector\/Long256VectorTests.java                    8350840 generic-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"}]}