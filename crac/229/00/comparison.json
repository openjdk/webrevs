{"files":[{"patch":"@@ -919,0 +919,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -872,0 +872,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -223,0 +223,2 @@\n+static int cached_pid = 0;\n+\n@@ -1519,0 +1521,1 @@\n+\n@@ -1520,1 +1523,8 @@\n-  return ::getpid();\n+  \/\/ GLIBC < 2.25 caches pid in ::getpid(); we need to be able to reset this\n+  \/\/ on CRaC restore, therefore we will use our own caching.\n+  return cached_pid ? cached_pid : syscall(SYS_getpid);\n+}\n+\n+void os::reset_cached_process_id() {\n+  cached_pid = 0;\n+  cached_pid = current_process_id();\n@@ -4418,0 +4428,1 @@\n+  cached_pid = current_process_id();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1172,1 +1172,1 @@\n-      const pid_t me = getpid();\n+      const pid_t me = os::current_process_id();\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3954,0 +3954,3 @@\n+void os::reset_cached_process_id() {\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -283,0 +283,1 @@\n+  os::reset_cached_process_id();\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -611,0 +611,1 @@\n+  static void reset_cached_process_id();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import jdk.internal.crac.Core;\n+import jdk.internal.crac.JDKResource;\n+import jdk.internal.crac.mirror.Context;\n+import jdk.internal.crac.mirror.Resource;\n@@ -76,0 +80,11 @@\n+    private static JDKResource cracResource = new JDKResource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) {\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) {\n+            current.pid = getCurrentPid0();\n+        }\n+    };\n+\n@@ -80,0 +95,1 @@\n+        Core.Priority.NORMAL.getContext().register(cracResource);\n@@ -209,1 +225,1 @@\n-    private final long pid;\n+    private long pid;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -47,0 +47,4 @@\n+#ifdef LINUX\n+  #include <sys\/syscall.h>\n+#endif\n+\n@@ -277,0 +281,3 @@\n+#ifdef LINUX\n+    pid_t pid = syscall(SYS_getpid);\n+#else\n@@ -278,0 +285,1 @@\n+#endif\n@@ -386,1 +394,6 @@\n-    if (pid == getpid()) {\n+#ifdef LINUX\n+    pid_t mypid = syscall(SYS_getpid);\n+#else\n+    pid_t mypid = getpid();\n+#endif\n+    if (pid == mypid) {\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessHandleImpl_unix.c","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+#ifdef LINUX\n+#include <sys\/syscall.h>\n+#endif\n@@ -382,0 +385,3 @@\n+#ifdef LINUX\n+    pid = (jchar)syscall(SYS_getpid);\n+#else\n@@ -383,0 +389,1 @@\n+#endif \/\/ !LINUX\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet4AddressImpl.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#ifdef LINUX\n+#include <sys\/syscall.h>\n+#endif\n@@ -590,0 +593,3 @@\n+#ifdef LINUX\n+    pid = (jchar)syscall(SYS_getpid);\n+#else\n@@ -591,0 +597,1 @@\n+#endif \/\/ !LINUX\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet6AddressImpl.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+#ifdef LINUX\n+#include <sys\/syscall.h>\n+#endif\n@@ -865,0 +868,3 @@\n+#ifdef LINUX\n+    return syscall(SYS_getpid);\n+#else\n@@ -866,0 +872,1 @@\n+#endif \/\/ !LINUX\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/xawt\/XToolkit.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-    private static final long CURRENT_PID = pid();\n-\n@@ -79,1 +77,1 @@\n-        if (!ALLOW_ATTACH_SELF && (pid == 0 || pid == CURRENT_PID)) {\n+        if (!ALLOW_ATTACH_SELF && (pid == 0 || pid == pid())) {\n","filename":"src\/jdk.attach\/share\/classes\/sun\/tools\/attach\/HotSpotVirtualMachine.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#ifdef LINUX\n+#include <sys\/syscall.h>\n+#endif\n@@ -94,0 +97,5 @@\n+#ifdef LINUX\n+        pid_t pid = syscall(SYS_getpid);\n+#else\n+        pid_t pid = getpid();\n+#endif \/\/ !LINUX\n@@ -96,1 +104,1 @@\n-                       FD_DIR, getpid()));\n+                       FD_DIR, pid));\n","filename":"src\/jdk.jdwp.agent\/unix\/native\/libjdwp\/exec_md.c","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#ifdef LINUX\n+#include <sys\/syscall.h>\n+#endif\n@@ -41,1 +44,5 @@\n-#define GETPID() getpid()\n+#ifdef LINUX\n+#   define GETPID() syscall(SYS_getpid)\n+#else\n+#   define GETPID() getpid()\n+#endif \/\/ !LINUX\n","filename":"src\/jdk.jdwp.agent\/unix\/native\/libjdwp\/proc_md.h","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}