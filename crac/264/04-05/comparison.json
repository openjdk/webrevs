{"files":[{"patch":"@@ -111,1 +111,1 @@\n-  flush.print_numbers(buf, sizeof(buf));\n+  guarantee(flush.print_numbers(buf, sizeof(buf)) >= 0, \"buffer too short\");\n@@ -1264,1 +1264,1 @@\n-    handled.print_numbers(buf_handled, sizeof(buf_handled));\n+    guarantee(handled.print_numbers(buf_handled, sizeof(buf_handled)) >= 0, \"buffer too short\");\n@@ -1266,1 +1266,1 @@\n-    all_features.print_numbers(buf_all_features, sizeof(buf_all_features));\n+    guarantee(all_features.print_numbers(buf_all_features, sizeof(buf_all_features)) >= 0, \"buffer too short\");\n@@ -1285,1 +1285,1 @@\n-    _features.print_numbers(buf, sizeof(buf));\n+    guarantee(_features.print_numbers(buf, sizeof(buf)) >= 0, \"buffer too short\");\n@@ -1325,1 +1325,1 @@\n-    _features.print_numbers(buf, sizeof(buf));\n+    guarantee(_features.print_numbers(buf, sizeof(buf)) >= 0, \"buffer too short\");\n@@ -1337,1 +1337,1 @@\n-      sse2.print_numbers(buf, sizeof(buf));\n+      guarantee(sse2.print_numbers(buf, sizeof(buf)) >= 0, \"buffer too short\");\n@@ -2584,1 +2584,1 @@\n-    (data & _features).print_numbers(buf_use, sizeof(buf_use));\n+    guarantee((data & _features).print_numbers(buf_use, sizeof(buf_use)) >= 0, \"buffer too short\");\n@@ -2586,1 +2586,1 @@\n-    data.print_numbers(buf_have, sizeof(buf_have));\n+    guarantee(data.print_numbers(buf_have, sizeof(buf_have)) >= 0, \"buffer too short\");\n@@ -2674,1 +2674,1 @@\n-    CPUFeatures_parsed.print_numbers(buf_CPUFeatures_parsed, sizeof(buf_CPUFeatures_parsed));\n+    guarantee(CPUFeatures_parsed.print_numbers(buf_CPUFeatures_parsed, sizeof(buf_CPUFeatures_parsed)) >= 0, \"buffer too short\");\n@@ -2676,1 +2676,1 @@\n-    _features.print_numbers(buf_features, sizeof(buf_features));\n+    guarantee(_features.print_numbers(buf_features, sizeof(buf_features)) >= 0, \"buffer too short\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -604,0 +604,4 @@\n+        if (res < 0) {\n+          buflen = 0;\n+          return;\n+        }\n@@ -606,2 +610,1 @@\n-        assert(res > 0 && buflen >= 1, \"not enough temporary space allocated\");\n-        if (!hexonly && idx + 1 < features_bitmap_element_count()) {\n+        if (!hexonly && idx + 1 < features_bitmap_element_count() && buflen > 0) {\n@@ -612,0 +615,3 @@\n+      if (buflen == 0) {\n+        return -1;\n+      }\n@@ -618,0 +624,1 @@\n+      assert(res >= 0, \"buffer too short\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-      log_warning(crac)(\"Cannot format time %ld\", timeMillis);\n+      log_warning(crac)(\"Cannot format time \" JLONG_FORMAT, timeMillis);\n@@ -116,1 +116,1 @@\n-    return strftime(buf, buflen, \"%Y%m%dT%H%M%SZ\", &tms);\n+    return (int) strftime(buf, buflen, \"%Y%m%dT%H%M%SZ\", &tms);\n@@ -119,1 +119,1 @@\n-    return snprintf(buf, buflen, zero_pad ? \"%0*ld\" : \"%*ld\", width, timeMillis \/ 1000);\n+    return snprintf(buf, buflen, zero_pad ? \"%0*\" PRId64 : \"%*\" PRId64, width, (int64_t) (timeMillis \/ 1000));\n@@ -150,1 +150,1 @@\n-    if (ret < 0) { \\\n+    if ((size_t) ret > buflen) { \\\n@@ -153,1 +153,1 @@\n-    } else if ((size_t) ret > buflen) { \\\n+    } else if (ret < 0) { \\\n@@ -217,1 +217,1 @@\n-        struct VM_Version::VM_Features data;\n+        VM_Version::VM_Features data;\n@@ -219,3 +219,1 @@\n-          int ret = data.print_numbers(buf, buflen, true);\n-          buf += ret;\n-          buflen -= ret;\n+          check_retval(data.print_numbers(buf, buflen, true));\n@@ -292,0 +290,4 @@\n+#ifndef PATH_MAX\n+# define PATH_MAX 1024\n+#endif\n+\n@@ -301,1 +303,1 @@\n-    char image_location[PATH_MAX];\n+  char image_location[PATH_MAX];\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1966,1 +1966,1 @@\n-          \"check documentation for pattern format.\" )                       \\\n+          \" check documentation for pattern format.\")                       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1088,1 +1088,1 @@\n-    -   `%a`: architecture (x86_64 or aarch64)\n+    -   `%a`: architecture; the same value as system property 'os.arch'\n@@ -1092,0 +1092,1 @@\n+    -   `%g`: checkpoint generation (starting with 1, 0 is reserved for ‘unknown’)\n@@ -1101,1 +1102,0 @@\n-    -   `%g`: checkpoint generation (starting with 1, 0 is reserved for ‘unknown’)\n","filename":"src\/java.base\/share\/man\/java.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+            String featuresPattern = Platform.isX64() ? \"\\\\p{XDigit}{32}\" : \"\";\n@@ -95,1 +96,2 @@\n-                if (!d.getFileName().toString().matches(\"\\\\p{XDigit}{8}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{12}_\\\\p{XDigit}{32}_\")) {\n+                if (!d.getFileName().toString().matches(\"\\\\p{XDigit}{8}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{4}-\\\\p{XDigit}{12}_\" + featuresPattern + \"_\")) {\n+                    System.err.printf(\"Unexpected file: %s%nFull path: %s%n\", d.getFileName(), d);\n@@ -112,0 +114,3 @@\n+            System.err.println(\"IMAGE1: \" + paths[0]);\n+            System.err.println(\"IMAGE2: \" + paths[1]);\n+\n@@ -128,1 +133,1 @@\n-            long b2 = Long.parseLong(matcher1.group(3));\n+            long b2 = Long.parseLong(matcher2.group(3));\n","filename":"test\/jdk\/jdk\/crac\/PathPatternTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}