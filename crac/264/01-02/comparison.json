{"files":[{"patch":"@@ -1965,1 +1965,2 @@\n-          \"otherwise.\")                                                     \\\n+          \"otherwise. The path can contain placeholders (e.g. %p for PID);\" \\\n+          \"check documentation for pattern format.\" )                       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1085,0 +1085,21 @@\n+    It is possible to use a pattern with automatically inferred values, using\n+    these placeholders:\n+    -   `%%`: single % character\n+    -   `%a`: architecture (x86_64 or aarch64)\n+    -   `%f`: CPU features hex string\n+    -   `%u`: UUID (version 4 = random)\n+    -   `%t`: checkpoint date & time in ISO-8601 in UTC, basic format (without\n+              separators) with second precision, e.g. `20250909T141711Z`\n+    -   `%T`: checkpoint epoch time (second precision)\n+    -   `%b` and `%B`: process boot time (generation 1), same format as `%t` or `%T`\n+    -   `%r` and `%R`: last restore time, same format as `%t` or `%T`. In case\n+                       of generation 1 this is is the same as process boot time.\n+    -   `%p`: PID of checkpointed process\n+    -   `%c`: number of CPU cores\n+    -   `%m`: max heap size (`-Xmx`) in a user-friendly format - using G or M suffix\n+    -   `%g`: checkpoint generation (starting with 1, 0 is reserved for ‘unknown’)\n+\n+    Numeric placeholders (`%T`, `%B`, `%R`, `%p`, `%c`, `%m` and `%g`) support\n+    an optional prefix with minimum width, padded with spaces or zeroes if the prefix\n+    starts with zero, e.g. `%3g` -> `  1`, `%03g` -> `001`.\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}