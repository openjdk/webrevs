{"files":[{"patch":"@@ -2941,0 +2941,11 @@\n+\/\/ Some restore-settable flags should not be updated in the restored JVM.\n+static bool should_record_for_restore(const JVMFlag& flag) {\n+  precond(flag.is_restore_settable());\n+  if (strncmp(flag.name(), \"CRaCEngine\", ARRAY_SIZE(\"CRaCEngine\") - 1) == 0) {\n+    assert(strcmp(flag.name(), \"CRaCEngine\") == 0 || strcmp(flag.name(), \"CRaCEngineOptions\") == 0,\n+           \"unexpected CRaCEngine* flag: %s\", flag.name());\n+    return false;\n+  }\n+  return true;\n+}\n+\n@@ -2954,1 +2965,1 @@\n-  const JVMFlag* flag;\n+  const JVMFlag* flag = nullptr;\n@@ -2956,1 +2967,1 @@\n-  {\n+  if (name_len <= BUFLEN) {\n@@ -2962,1 +2973,0 @@\n-      guarantee(name_len <= BUFLEN, \"argument name too long: %s\", name); \/\/ Should've been detected earlier\n@@ -2973,1 +2983,3 @@\n-    guarantee(flag != nullptr, \"unknown JVM flag name: %s\", name); \/\/ Should've been detected earlier\n+  }\n+  if (flag == nullptr) {\n+    return true; \/\/ The argument should have been ignored by IgnoreUnrecognizedVMOptions\n@@ -2977,1 +2989,10 @@\n-  if (flag->is_restore_settable()) {\n+  if (!flag->is_restore_settable() && !CRaCIgnoreRestoreIfUnavailable) {\n+    \/\/ Same message format as used in JVMFlag::get_locked_message() for\n+    \/\/ diagnostic\/experimental\/develop options\n+    jio_fprintf(defaultStream::error_stream(),\n+                \"Error: VM option '%.*s' is not restore-settable and is not available on restore.\\n\",\n+                name_len, name);\n+    return false;\n+  }\n+\n+  if (flag->is_restore_settable() && should_record_for_restore(*flag)) {\n@@ -2992,7 +3013,0 @@\n-  } else if (!CRaCIgnoreRestoreIfUnavailable) {\n-    \/\/ Same message format as used in JVMFlag::get_locked_message() for\n-    \/\/ diagnostic\/experimental\/develop options\n-    jio_fprintf(defaultStream::error_stream(),\n-                \"Error: VM option '%*.s' is not restore-settable and is not available on restore.\\n\",\n-                name_len, name);\n-    return false;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -618,7 +618,0 @@\n-    } else if (strncmp(name, \"CRaCEngine\", ARRAY_SIZE(\"CRaCEngine\") - 1) == 0) {\n-      \/\/ CRaCEngine and CRaCEngineOptions are not updated from the restoring process\n-      assert(strncmp(name, \"CRaCEngine=\", strlen(\"CRaCEngine=\")) == 0 ||\n-             strncmp(name, \"CRaCEngineOptions=\", strlen(\"CRaCEngineOptions=\")) == 0,\n-             \"unexpected CRaCEngine* flag: %s\", name);\n-      result = JVMFlag::Error::SUCCESS;\n-      cursor += strlen(cursor) + 1;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1008,1 +1008,1 @@\n-  product(bool, IgnoreUnrecognizedVMOptions, false,                         \\\n+  product(bool, IgnoreUnrecognizedVMOptions, false, RESTORE_SETTABLE,       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.crac.CracEngine;\n@@ -37,0 +38,1 @@\n+import java.util.stream.Collectors;\n@@ -50,0 +52,57 @@\n+    private record VMOptionSpec(\n+        String name,\n+        String strValue,\n+        Boolean boolValue,\n+        \/**\n+         * Whether the option can be changed in the restored JVM. This is not\n+         * the same as being RESTORE_SETTABLE: for this to be true the option\n+         * must be RESTORE_SETTABLE but some RESTORE_SETTABLE options are not\n+         * applied in the restored JVM (e.g. engine options).\n+         *\/\n+        boolean canChangeOnRestore\n+    ) {\n+        public VMOptionSpec {\n+            assertNotNull(name, \"Option must have a name\");\n+            assertTrue(strValue != null ^ boolValue != null, \"Option must have one type of value\");\n+        }\n+\n+        public static VMOptionSpec ofStr(String name, String value, boolean canChangeOnRestore) {\n+            assertNotNull(value, \"String option must have a value\");\n+            return new VMOptionSpec(name, value, null, canChangeOnRestore);\n+        }\n+\n+        public static VMOptionSpec ofBool(String name, boolean value, boolean canChangeOnRestore) {\n+            return new VMOptionSpec(name, null, value, canChangeOnRestore);\n+        }\n+\n+        public boolean isStr() {\n+            return strValue != null;\n+        }\n+\n+        public boolean isBool() {\n+            return boolValue != null;\n+        }\n+\n+        public String asArgument() {\n+            return isStr() ? name + \"=\" + strValue : (boolValue ? \"+\" : \"-\") + name;\n+        }\n+\n+        public String valueAsString() {\n+            return isStr() ? strValue : boolValue.toString();\n+        }\n+    };\n+\n+    private static final List<VMOptionSpec> OPTIONS_CHECKPOINT = List.of(\n+        VMOptionSpec.ofStr(\"CRaCEngine\", \"criu\", false),\n+        VMOptionSpec.ofStr(\"CRaCEngineOptions\", \"args=-v1\", false),\n+        VMOptionSpec.ofStr(\"CRaCCheckpointTo\", new CracBuilder().imageDir().toString(), true),\n+        VMOptionSpec.ofStr(\"NativeMemoryTracking\", \"off\", false)\n+    );\n+    private static final List<VMOptionSpec> OPTIONS_RESTORE = List.of(\n+        VMOptionSpec.ofStr(\"CRaCEngine\", \"criuengine\", false),\n+        VMOptionSpec.ofStr(\"CRaCEngineOptions\", \"args=-v2\", false),\n+        VMOptionSpec.ofStr(\"CRaCCheckpointTo\", \"another\", true),\n+        VMOptionSpec.ofStr(\"CRaCIgnoredFileDescriptors\", \"42,43\", true),\n+        VMOptionSpec.ofBool(\"UnlockExperimentalVMOptions\", true, true)\n+    );\n+\n@@ -52,6 +111,2 @@\n-        final var enginePath = Path.of(Utils.TEST_JDK, \"lib\", \"criuengine\").toString();\n-\n-        CracBuilder builder = new CracBuilder().captureOutput(true);\n-        builder.vmOption(\"-XX:CRaCEngine=criuengine\");\n-        builder.vmOption(\"-XX:CRaCEngineOptions=args=-v1\");\n-        builder.vmOption(\"-XX:NativeMemoryTracking=off\");\n+        final var builder = new CracBuilder().engine(CracEngine.CRIU).captureOutput(true);\n+        setVmOptions(builder, OPTIONS_CHECKPOINT);\n@@ -60,1 +115,1 @@\n-        \/\/ 1) Only restore-settable options => should succeed\n+        \/\/ Only restore-settable options => should succeed\n@@ -62,5 +117,1 @@\n-        builder.vmOption(\"-XX:CRaCEngine=\" + enginePath);\n-        builder.vmOption(\"-XX:CRaCEngineOptions=args=-v2\");\n-        builder.vmOption(\"-XX:CRaCCheckpointTo=another\");\n-        builder.vmOption(\"-XX:CRaCIgnoredFileDescriptors=42,43\");\n-        builder.vmOption(\"-XX:+UnlockExperimentalVMOptions\");\n+        setVmOptions(builder, OPTIONS_RESTORE);\n@@ -69,1 +120,1 @@\n-        \/\/ 2) Adding a non-restore-settable option => should fail\n+        \/\/ Adding a non-restore-settable option => should fail\n@@ -71,1 +122,3 @@\n-        assertEquals(1, builder.startRestore().waitFor());\n+        builder.startRestore().outputAnalyzer().shouldHaveExitValue(1).stderrShouldContain(\n+            \"VM option 'NativeMemoryTracking' is not restore-settable and is not available on restore\"\n+        );\n@@ -73,1 +126,1 @@\n-        \/\/ 3) Non-restore-settable option from before + allowing restore to fail => should succeed\n+        \/\/ Non-restore-settable option from before + allowing restore to fail => should succeed\n@@ -77,1 +130,1 @@\n-        \/\/ 4) Only restore-settable options one of which is aliased => should succeed\n+        \/\/ Only restore-settable options one of which is aliased => should succeed\n@@ -80,5 +133,2 @@\n-        builder.vmOption(\"-XX:CREngine=\" + enginePath); \/\/ Deprecated alias\n-        builder.vmOption(\"-XX:CRaCEngineOptions=args=-v2\");\n-        builder.vmOption(\"-XX:CRaCCheckpointTo=another\");\n-        builder.vmOption(\"-XX:CRaCIgnoredFileDescriptors=42,43\");\n-        builder.vmOption(\"-XX:+UnlockExperimentalVMOptions\");\n+        setVmOptions(builder, OPTIONS_RESTORE);\n+        builder.vmOption(\"-XX:CREngine=criuengine\"); \/\/ Deprecated alias\n@@ -87,1 +137,1 @@\n-        \/\/ 5) Same as (1) but options come from a settings file => should succeed\n+        \/\/ Only restore-settable options coming from a settings file => should succeed\n@@ -89,1 +139,1 @@\n-        builder.vmOption(\"-XX:Flags=\" + createSettingsFile(enginePath));\n+        builder.vmOption(\"-XX:Flags=\" + createSettingsFile(OPTIONS_RESTORE));\n@@ -92,1 +142,1 @@\n-        \/\/ 6) Same as (1) but options come from a VM options file => should succeed\n+        \/\/ Only restore-settable options coming from a VM options file => should succeed\n@@ -94,1 +144,13 @@\n-        builder.vmOption(\"-XX:VMOptionsFile=\" + createVMOptionsFile(enginePath));\n+        builder.vmOption(\"-XX:VMOptionsFile=\" + createVMOptionsFile(OPTIONS_RESTORE));\n+        checkRestoreOutput(builder.doRestore());\n+\n+        \/\/ Unrecognized option => should fail\n+        builder.clearVmOptions();\n+        setVmOptions(builder, OPTIONS_RESTORE);\n+        builder.vmOption(\"-XX:SomeNonExistentOption=abc\");\n+        builder.startRestore().outputAnalyzer().shouldHaveExitValue(1).stderrShouldContain(\n+            \"Unrecognized VM option 'SomeNonExistentOption=abc'\"\n+        );\n+\n+        \/\/ Unrecognized option from before + IgnoreUnrecognizedVMOptions => should succeed\n+        builder.vmOption(\"-XX:+IgnoreUnrecognizedVMOptions\");\n@@ -100,6 +162,1 @@\n-        {\n-            HotSpotDiagnosticMXBean bean = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n-\n-            VMOption engine = bean.getVMOption(\"CRaCEngine\");\n-            assertEquals(\"criuengine\", engine.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engine.getOrigin());\n+        HotSpotDiagnosticMXBean bean = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n@@ -107,19 +164,10 @@\n-            VMOption engineOptions = bean.getVMOption(\"CRaCEngineOptions\");\n-            assertEquals(\"args=-v1\", engineOptions.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engineOptions.getOrigin());\n-\n-            VMOption checkpointTo = bean.getVMOption(\"CRaCCheckpointTo\");\n-            assertEquals(\"cr\", checkpointTo.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, checkpointTo.getOrigin());\n-\n-            VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n-            assertEquals(\"off\", nmt.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, nmt.getOrigin());\n-\n-            VMOption restoreFrom = bean.getVMOption(\"CRaCRestoreFrom\");\n-            assertEquals(\"\", restoreFrom.getValue());\n-            assertEquals(VMOption.Origin.DEFAULT, restoreFrom.getOrigin());\n-\n-            VMOption unlockExperimentalOpts = bean.getVMOption(\"UnlockExperimentalVMOptions\");\n-            assertEquals(\"false\", unlockExperimentalOpts.getValue());\n-            assertEquals(VMOption.Origin.DEFAULT, unlockExperimentalOpts.getOrigin());\n+        for (final var optSpec : OPTIONS_CHECKPOINT) {\n+            final var opt = bean.getVMOption(optSpec.name());\n+            assertEquals(optSpec.valueAsString(), opt.getValue(), optSpec.name() + \": value not set before checkpoint\");\n+            assertEquals(VMOption.Origin.VM_CREATION, opt.getOrigin(), optSpec.name() + \": unexpected origin before checkpoint\");\n+        }\n+        for (final var optSpec : OPTIONS_RESTORE) {\n+            final var opt = bean.getVMOption(optSpec.name());\n+            final var expectedOrigin = OPTIONS_CHECKPOINT.stream().anyMatch(o -> o.name().equals(optSpec.name())) ?\n+                VMOption.Origin.VM_CREATION : VMOption.Origin.DEFAULT;\n+            assertEquals(expectedOrigin, opt.getOrigin(), optSpec.name() + \": unexpected origin before checkpoint\");\n@@ -131,34 +179,17 @@\n-        {\n-            HotSpotDiagnosticMXBean bean = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n-\n-            \/\/ Should not change\n-\n-            VMOption engine = bean.getVMOption(\"CRaCEngine\");\n-            assertEquals(\"criuengine\", engine.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engine.getOrigin());\n-\n-            VMOption engineOptions = bean.getVMOption(\"CRaCEngineOptions\");\n-            assertEquals(\"args=-v1\", engineOptions.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, engineOptions.getOrigin());\n-\n-            VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n-            assertEquals(\"off\", nmt.getValue());\n-            assertEquals(VMOption.Origin.VM_CREATION, nmt.getOrigin());\n-\n-            \/\/ Should change\n-\n-            VMOption checkpointTo = bean.getVMOption(\"CRaCCheckpointTo\");\n-            assertEquals(\"another\", checkpointTo.getValue());\n-            assertEquals(VMOption.Origin.OTHER, checkpointTo.getOrigin());\n-\n-            VMOption restoreFrom = bean.getVMOption(\"CRaCRestoreFrom\");\n-            assertEquals(\"cr\", restoreFrom.getValue());\n-            assertEquals(VMOption.Origin.OTHER, restoreFrom.getOrigin());\n-\n-            VMOption ignoredFileDescriptors = bean.getVMOption(\"CRaCIgnoredFileDescriptors\");\n-            assertEquals(\"42,43\", ignoredFileDescriptors.getValue());\n-            assertEquals(VMOption.Origin.OTHER, ignoredFileDescriptors.getOrigin());\n-\n-            VMOption unlockExperimentalOpts = bean.getVMOption(\"UnlockExperimentalVMOptions\");\n-            assertEquals(\"true\", unlockExperimentalOpts.getValue());\n-            assertEquals(VMOption.Origin.OTHER, unlockExperimentalOpts.getOrigin());\n+        for (final var optSpec : OPTIONS_CHECKPOINT) {\n+            if (!optSpec.canChangeOnRestore() || OPTIONS_RESTORE.stream().noneMatch(o -> o.name().equals(optSpec.name()))) {\n+                final var opt = bean.getVMOption(optSpec.name());\n+                assertEquals(optSpec.valueAsString(), opt.getValue(), optSpec.name() + \": value changed after restore\");\n+                assertEquals(VMOption.Origin.VM_CREATION, opt.getOrigin(), optSpec.name() + \": origin changed after restore\");\n+            }\n+        }\n+        for (final var optSpec : OPTIONS_RESTORE) {\n+            final var opt = bean.getVMOption(optSpec.name());\n+            if (!optSpec.canChangeOnRestore()) {\n+                final var expectedOrigin = OPTIONS_CHECKPOINT.stream().anyMatch(o -> o.name().equals(optSpec.name())) ?\n+                    VMOption.Origin.VM_CREATION : VMOption.Origin.DEFAULT;\n+                assertEquals(expectedOrigin, opt.getOrigin(), optSpec.name() + \": origin changed after restore\");\n+            } else {\n+                assertEquals(optSpec.valueAsString(), opt.getValue(), optSpec.name() + \": value not changed after restore\");\n+                assertEquals(VMOption.Origin.OTHER, opt.getOrigin(), optSpec.name() + \": unexpected origin after restore\");\n+            }\n@@ -175,1 +206,7 @@\n-    private static String createSettingsFile(String enginePath) throws Exception {\n+    private static void setVmOptions(CracBuilder builder, List<VMOptionSpec> options) {\n+        for (final var opt : options) {\n+            builder.vmOption(\"-XX:\" + opt.asArgument());\n+        }\n+    }\n+\n+    private static String createSettingsFile(List<VMOptionSpec> options) throws Exception {\n@@ -177,7 +214,4 @@\n-        Files.write(path, List.of(\n-            \"CRaCEngine=\" + enginePath,\n-            \"CRaCEngineOptions=args=-v2\",\n-            \"CRaCCheckpointTo=another\",\n-            \"CRaCIgnoredFileDescriptors=42,43\",\n-            \"+UnlockExperimentalVMOptions\"\n-        ));\n+        Files.write(\n+            path,\n+            options.stream().map(opt -> opt.asArgument()).collect(Collectors.toList())\n+        );\n@@ -187,1 +221,1 @@\n-    private static String createVMOptionsFile(String enginePath) throws Exception {\n+    private static String createVMOptionsFile(List<VMOptionSpec> options) throws Exception {\n@@ -189,7 +223,4 @@\n-        Files.write(path, List.of(\n-            \"-XX:CRaCEngine=\" + enginePath,\n-            \"-XX:CRaCEngineOptions=args=-v2\",\n-            \"-XX:CRaCCheckpointTo=another\",\n-            \"-XX:CRaCIgnoredFileDescriptors=42,43\",\n-            \"-XX:+UnlockExperimentalVMOptions\"\n-        ));\n+        Files.write(\n+            path,\n+            options.stream().map(opt -> \"-XX:\" + opt.asArgument()).collect(Collectors.toList())\n+        );\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":131,"deletions":100,"binary":false,"changes":231,"status":"modified"}]}