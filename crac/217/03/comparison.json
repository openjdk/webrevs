{"files":[{"patch":"@@ -493,1 +493,2 @@\n-      if (strcmp(_env[opts_index], CRAC_CRIU_OPTS) == 0 && _env[opts_index][CRAC_CRIU_OPTS_LEN] == '=') {\n+      if (strncmp(_env[opts_index], CRAC_CRIU_OPTS, CRAC_CRIU_OPTS_LEN) == 0 &&\n+          _env[opts_index][CRAC_CRIU_OPTS_LEN] == '=') {\n@@ -543,1 +544,1 @@\n-    if (!env.is_initialized()||\n+    if (!env.is_initialized() ||\n","filename":"src\/java.base\/share\/native\/libcrexec\/crexec.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,226 +0,0 @@\n-\/*\n- * Copyright (c) 2023-2025, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.junit.Test;\n-import org.junit.BeforeClass;\n-import static org.junit.Assert.*;\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-import java.nio.file.Path;\n-import java.util.*;\n-\n-\/*\n-* @test\n-* @summary Testing CRaCEngine and CRaCEngineOptions VM options.\n-* @library \/test\/lib\n-* @build CracEngineOptionsTest\n-* @run junit\/othervm CracEngineOptionsTest\n-*\/\n-public class CracEngineOptionsTest {\n-    @BeforeClass\n-    public static void checkCriu() {\n-        final boolean hasCriu = Path.of(Utils.TEST_JDK, \"lib\", \"criuengine\").toFile().exists();\n-        assertEquals(\"CRIU exists iff we are on Linux\", Platform.isLinux(), hasCriu);\n-    }\n-\n-    @Test\n-    public void test_default() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n-                \"-XX:CRaCCheckpointTo=cr\",\n-                \"-version\");\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    @Test\n-    public void test_engines() throws Exception {\n-        test(\"sim\");\n-        test(\"simengine\");\n-        test(\"pause\");\n-        test(\"pauseengine\");\n-        if (Platform.isLinux()) {\n-            test(\"criu\");\n-            test(\"criuengine\");\n-        }\n-\n-        final String absolute = Platform.isWindows() ?\n-            Path.of(Utils.TEST_JDK, \"bin\", \"simengine.exe\").toString() :\n-            Path.of(Utils.TEST_JDK, \"lib\", \"simengine\").toString();\n-        test(absolute);\n-\n-        test(\"unknown\", null, 1, \"Cannot find CRaC engine unknown\");\n-        test(\"simengine,--arg\", null, 1, \"Cannot find CRaC engine simengine,--arg\");\n-        test(\"one two\", null, 1, \"Cannot find CRaC engine one two\");\n-        test(\"\", null, 1, \"CRaCEngine must not be empty\");\n-    }\n-\n-    @Test\n-    public void test_options() throws Exception {\n-        test(\"simengine\", \"\");\n-        test(\"simengine\", \"image_location=cr\", 0,\n-                \"Internal CRaC engine option provided, skipping: image_location\");\n-        if (Platform.isLinux()) {\n-            test(\"criuengine\", Arrays.asList(\"keep_running=true,args=-v -v -v -v\"), 0,\n-                    Arrays.asList(\n-                        \"CRaC engine option: 'keep_running' = 'true'\",\n-                        \"CRaC engine option: 'args' = '-v -v -v -v'\"\n-                    ),\n-                    Arrays.asList(\"specified multiple times\"));\n-            test(\"criuengine\", \"keep_running=true,args=-v -v -v -v,keep_running=false\", 0,\n-                    \"CRaC engine option: 'keep_running' = 'true'\",\n-                    \"CRaC engine option: 'args' = '-v -v -v -v'\",\n-                    \"CRaC engine option: 'keep_running' = 'false'\",\n-                    \"CRaC engine option 'keep_running' specified multiple times\");\n-        }\n-\n-        test(\"simengine\", \"help=true\", 1,\n-                \"unknown configure option: help\",\n-                \"CRaC engine failed to configure: 'help' = 'true'\");\n-        test(\"simengine\", \"unknown=123\", 1,\n-                \"unknown configure option: unknown\",\n-                \"CRaC engine failed to configure: 'unknown' = '123'\");\n-        test(\"simengine\", \"unknown=\", 1,\n-                \"unknown configure option: unknown\",\n-                \"CRaC engine failed to configure: 'unknown' = ''\");\n-        test(\"simengine\", \"=\", 1,\n-                \"unknown configure option: \\n\",\n-                \"CRaC engine failed to configure: '' = ''\");\n-        test(\"simengine\", \"=,\", 1,\n-                \"unknown configure option: \\n\",\n-                \"CRaC engine failed to configure: '' = ''\");\n-        test(\"simengine\", \",=\", 1,\n-                \"unknown configure option: \\n\",\n-                \"CRaC engine failed to configure: '' = ''\");\n-        test(\"simengine\", \",\", 1,\n-                \"unknown configure option: \\n\",\n-                \"CRaC engine failed to configure: '' = ''\");\n-\n-        if (Platform.isLinux()) {\n-            test(\"criuengine\", \"help,keep_running=true\", 1,\n-                    \"unknown configure option: help\",\n-                    \"CRaC engine failed to configure: 'help' = ''\");\n-            test(\"criuengine\", \"direct_map=not a bool\", 1,\n-                    \"CRaC engine failed to configure: 'direct_map' = 'not a bool'\");\n-        }\n-    }\n-\n-    @Test\n-    public void test_options_separated() throws Exception {\n-        test(\"simengine\",\n-                Arrays.asList(\n-                    \"args=simengine ignores this\",\n-                    \"args=another arg,keep_running=true,args=and another\",\n-                    \"args=this is also ignored\"\n-                ),\n-                0,\n-                Arrays.asList(\n-                    \"CRaC engine option: 'args' = 'simengine ignores this'\",\n-                    \"CRaC engine option: 'args' = 'another arg'\",\n-                    \"CRaC engine option: 'keep_running' = 'true'\",\n-                    \"CRaC engine option: 'args' = 'and another'\",\n-                    \"CRaC engine option: 'args' = 'this is also ignored'\",\n-                    \"CRaC engine option 'args' specified multiple times\"\n-                ),\n-                Collections.emptyList());\n-\n-        test(\"simengine\",\n-                Arrays.asList(\"args=--arg1 --arg2\", \"--arg3\"),\n-                1,\n-                Arrays.asList(\n-                    \"CRaC engine option: 'args' = '--arg1 --arg2'\",\n-                    \"unknown configure option: --arg3\",\n-                    \"CRaC engine failed to configure: '--arg3' = ''\"\n-                ),\n-                Arrays.asList(\"specified multiple times\"));\n-\n-        if (Platform.isLinux()) {\n-            test(\"criuengine\",\n-                    Arrays.asList(\"help\", \"args=-v4\"),\n-                    1,\n-                    Arrays.asList(\n-                        \"unknown configure option: help\",\n-                        \"CRaC engine failed to configure: 'help' = ''\"\n-                    ),\n-                    Collections.emptyList());\n-        }\n-    }\n-\n-    @Test\n-    public void test_options_help() throws Exception {\n-        testHelp();\n-        testHelp(\"-XX:CRaCCheckpointTo=cr\");\n-        testHelp(\"-XX:CRaCRestoreFrom=cr\");\n-    }\n-\n-    private void test(String engine) throws Exception {\n-        test(engine, Collections.emptyList(), 0, Collections.emptyList(), Collections.emptyList());\n-    }\n-\n-    private void test(String engine, String opts) throws Exception {\n-        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n-            0, Collections.emptyList(), Collections.emptyList());\n-    }\n-\n-    private void test(String engine, String opts, int expectedExitValue,\n-            String... expectedTexts) throws Exception {\n-        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n-                expectedExitValue, Arrays.asList(expectedTexts), Collections.emptyList());\n-    }\n-\n-    private void test(String engine, List<String> opts, int expectedExitValue,\n-            List<String> expectedTexts, List<String> notExpectedTexts) throws Exception {\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n-                \"-XX:CRaCCheckpointTo=cr\",\n-                \"-XX:CRaCEngine=\" + engine,\n-                \"-Xlog:crac=debug\",\n-                \"-version\");\n-        for (String opt : opts) {\n-            pb.command().add(pb.command().size() - 2, \"-XX:CRaCEngineOptions=\" + opt);\n-        }\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        out.shouldHaveExitValue(expectedExitValue);\n-        for (String text : expectedTexts) {\n-            out.shouldContain(text);\n-        }\n-        for (String text : notExpectedTexts) {\n-            out.shouldNotContain(text);\n-        }\n-    }\n-\n-    private static void testHelp(String... opts) throws Exception {\n-        List<String> optsList = new ArrayList(Arrays.asList(opts));\n-        optsList.add(\"-XX:CRaCEngineOptions=help\");\n-        optsList.add(\"-Xlog:crac=debug\");\n-        \/\/ Limited to not get non-restore-settable flags with CRaCRestoreFrom\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(optsList);\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        out.shouldHaveExitValue(0);\n-        out.stdoutShouldContain(\"Configuration options:\");\n-        out.stderrShouldBeEmpty();\n-        out.shouldNotContain(\"CRaC engine option:\");\n-    }\n-}\n","filename":"test\/jdk\/jdk\/crac\/CracEngineOptionsTest.java","additions":0,"deletions":226,"binary":false,"changes":226,"status":"deleted"},{"patch":"@@ -45,2 +45,0 @@\n-    private static final String LOG_FILE_NAME = \"custom-log-file.log\";\n-\n@@ -54,1 +52,1 @@\n-        builder.vmOption(\"-XX:CRaCEngineOptions=args=-o \" + LOG_FILE_NAME);\n+        builder.vmOption(\"-XX:CRaCEngineOptions=args=-v1\");\n@@ -58,4 +56,0 @@\n-        \/\/ Checking whether CRaCEngineOptions had an effect\n-        final Path logFilePath = Path.of(\"cr\", LOG_FILE_NAME);\n-        assertTrue(logFilePath.toFile().exists(), logFilePath.toAbsolutePath() + \" must exist\");\n-\n@@ -84,1 +78,1 @@\n-            assertEquals(\"args=-o \" + LOG_FILE_NAME, engineOptions1.getValue());\n+            assertEquals(\"args=-v1\", engineOptions1.getValue());\n@@ -112,1 +106,1 @@\n-            assertEquals(\"args=-o \" + LOG_FILE_NAME, engineOptions2.getValue());\n+            assertEquals(\"args=-v1\", engineOptions2.getValue());\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test Testing CracEngineOptions influenced by CRAC_CRIU_OPTS env variable.\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @build CracCriuOptsTest\n+ * @run driver jdk.test.lib.crac.CracTest PREREQ_CHECK\n+ * @run driver jdk.test.lib.crac.CracTest NOT_SET\n+ * @run driver jdk.test.lib.crac.CracTest ENVVAR_USED\n+ * @run driver jdk.test.lib.crac.CracTest ALREADY_SET\n+ *\/\n+\n+public class CracCriuOptsTest implements CracTest {\n+    private static final String CRAC_CRIU_OPTS = \"CRAC_CRIU_OPTS\";\n+    private static final Path LOG_FILE_PATH = Path.of(\"restore.log\");\n+\n+    public enum Variant {\n+        PREREQ_CHECK,\n+        NOT_SET,\n+        ENVVAR_USED,\n+        ALREADY_SET\n+    }\n+\n+    @CracTestArg\n+    Variant variant;\n+\n+    @Override\n+    public void test() throws Exception {\n+        final CracBuilder builder = new CracBuilder();\n+        builder.doCheckpoint();\n+\n+        \/\/ \"direct_map=false\" engine option is expected to add \"--no-mmap-page-image\" to\n+        \/\/ CRAC_CRIU_OPTS — this is what we'll check.\n+        \/\/ PREREQ_CHECK checks that the test's pre-requisite has not changed: when neither\n+        \/\/ direct_map=false nor --no-mmap-page-image is specified direct mapping IS performed.\n+        final boolean disableDirectMap = variant != Variant.PREREQ_CHECK;\n+        if (variant == Variant.ENVVAR_USED) {\n+            builder.env(CRAC_CRIU_OPTS, \"-v\");\n+        } else if (variant == Variant.ALREADY_SET) {\n+            builder.env(CRAC_CRIU_OPTS, \"-v --no-mmap-page-image\");\n+        }\n+        \/\/ Using log file instead of stderr because output capturing takes too long for some reason.\n+        \/\/ If we let CRIU create the file we may not get reading permissions, so we create it by\n+        \/\/ ourselves and also truncate it if it exists from previous runs (CRIU should truncate\n+        \/\/ automatically but just to be safe).\n+        Files.write(LOG_FILE_PATH, new byte[0]); \/\/ Creates if not exists, truncates otherwise\n+        builder.engineOptions(\"args=-v4 -o \" + LOG_FILE_PATH + (disableDirectMap ? \",direct_map=false\" : \"\"));\n+\n+        builder.doRestore();\n+        checkLogFile(!disableDirectMap);\n+    }\n+\n+    private static void checkLogFile(boolean directMap) throws IOException {\n+        \/\/ CRIU prints debug lines \"Preadv %lx:%d... (%d iovs) (mmap %d)\" where the last %d is\n+        \/\/ either 0 or 1 depending on whether direct mapping is performed\n+        final var lines = Files.lines(LOG_FILE_PATH).filter(s ->\n+            s.matches(\"\\\\(\\\\d+.\\\\d+\\\\) pie: \\\\d+: Preadv 0x\\\\p{XDigit}+:\\\\d+\\\\.\\\\.\\\\. \\\\(\\\\d+ iovs\\\\) \\\\(mmap [01]\\\\)\")\n+        ).toList();\n+        assertFalse(lines.isEmpty(), \"At least one log line must match the expected pattern\");\n+\n+        final var end = \"(mmap \" + (directMap ? \"1\" : \"0\") + \")\";\n+        for (var s : lines) {\n+            \/\/ If this fails it means that direct_map is on when it should be off or vise-versa\n+            assertTrue(s.endsWith(end), \"Log line \\\"\" + s + \"\\\" must end with \\\"\" + end + \"\\\"\");\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/engineOptions\/CracCriuOptsTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.*;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+* @test\n+* @summary Testing -XX:CRaCEngineOptions=help.\n+* @library \/test\/lib\n+*\/\n+public class HelpTest {\n+    public static void main(String[] args) throws Exception {\n+        test();\n+        test(\"-XX:CRaCCheckpointTo=cr\");\n+        test(\"-XX:CRaCRestoreFrom=cr\");\n+    }\n+\n+    private static void test(String... opts) throws Exception {\n+        List<String> optsList = new ArrayList(Arrays.asList(opts));\n+        optsList.add(\"-XX:CRaCEngineOptions=help\");\n+        optsList.add(\"-Xlog:crac=debug\");\n+        \/\/ Limited to not get non-restore-settable flags with CRaCRestoreFrom\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(optsList);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+        out.stdoutShouldContain(\"Configuration options:\");\n+        out.stderrShouldBeEmpty();\n+        out.shouldNotContain(\"CRaC engine option:\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/engineOptions\/HelpTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2023-2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.Test;\n+import org.junit.BeforeClass;\n+import static org.junit.Assert.*;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+\/*\n+* @test\n+* @summary Testing parsing of CRaCEngine and CRaCEngineOptions VM options.\n+* @library \/test\/lib\n+* @run junit\/othervm ParsingTest\n+*\/\n+public class ParsingTest {\n+    @BeforeClass\n+    public static void checkCriu() {\n+        final boolean hasCriu = Path.of(Utils.TEST_JDK, \"lib\", \"criuengine\").toFile().exists();\n+        assertEquals(\"CRIU exists iff we are on Linux\", Platform.isLinux(), hasCriu);\n+    }\n+\n+    @Test\n+    public void test_default() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-XX:CRaCCheckpointTo=cr\",\n+                \"-version\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    @Test\n+    public void test_engines() throws Exception {\n+        test(\"sim\");\n+        test(\"simengine\");\n+        test(\"pause\");\n+        test(\"pauseengine\");\n+        if (Platform.isLinux()) {\n+            test(\"criu\");\n+            test(\"criuengine\");\n+        }\n+\n+        final String absolute = Platform.isWindows() ?\n+            Path.of(Utils.TEST_JDK, \"bin\", \"simengine.exe\").toString() :\n+            Path.of(Utils.TEST_JDK, \"lib\", \"simengine\").toString();\n+        test(absolute);\n+\n+        test(\"unknown\", null, 1, \"Cannot find CRaC engine unknown\");\n+        test(\"simengine,--arg\", null, 1, \"Cannot find CRaC engine simengine,--arg\");\n+        test(\"one two\", null, 1, \"Cannot find CRaC engine one two\");\n+        test(\"\", null, 1, \"CRaCEngine must not be empty\");\n+    }\n+\n+    @Test\n+    public void test_options() throws Exception {\n+        test(\"simengine\", \"\");\n+        test(\"simengine\", \"image_location=cr\", 0,\n+                \"Internal CRaC engine option provided, skipping: image_location\");\n+        if (Platform.isLinux()) {\n+            test(\"criuengine\", Arrays.asList(\"keep_running=true,args=-v -v -v -v\"), 0,\n+                    Arrays.asList(\n+                        \"CRaC engine option: 'keep_running' = 'true'\",\n+                        \"CRaC engine option: 'args' = '-v -v -v -v'\"\n+                    ),\n+                    Arrays.asList(\"specified multiple times\"));\n+            test(\"criuengine\", \"keep_running=true,args=-v -v -v -v,keep_running=false\", 0,\n+                    \"CRaC engine option: 'keep_running' = 'true'\",\n+                    \"CRaC engine option: 'args' = '-v -v -v -v'\",\n+                    \"CRaC engine option: 'keep_running' = 'false'\",\n+                    \"CRaC engine option 'keep_running' specified multiple times\");\n+        }\n+\n+        test(\"simengine\", \"help=true\", 1,\n+                \"unknown configure option: help\",\n+                \"CRaC engine failed to configure: 'help' = 'true'\");\n+        test(\"simengine\", \"unknown=123\", 1,\n+                \"unknown configure option: unknown\",\n+                \"CRaC engine failed to configure: 'unknown' = '123'\");\n+        test(\"simengine\", \"unknown=\", 1,\n+                \"unknown configure option: unknown\",\n+                \"CRaC engine failed to configure: 'unknown' = ''\");\n+        test(\"simengine\", \"=\", 1,\n+                \"unknown configure option: \\n\",\n+                \"CRaC engine failed to configure: '' = ''\");\n+        test(\"simengine\", \"=,\", 1,\n+                \"unknown configure option: \\n\",\n+                \"CRaC engine failed to configure: '' = ''\");\n+        test(\"simengine\", \",=\", 1,\n+                \"unknown configure option: \\n\",\n+                \"CRaC engine failed to configure: '' = ''\");\n+        test(\"simengine\", \",\", 1,\n+                \"unknown configure option: \\n\",\n+                \"CRaC engine failed to configure: '' = ''\");\n+\n+        if (Platform.isLinux()) {\n+            test(\"criuengine\", \"help,keep_running=true\", 1,\n+                    \"unknown configure option: help\",\n+                    \"CRaC engine failed to configure: 'help' = ''\");\n+            test(\"criuengine\", \"direct_map=not a bool\", 1,\n+                    \"CRaC engine failed to configure: 'direct_map' = 'not a bool'\");\n+        }\n+    }\n+\n+    @Test\n+    public void test_options_separated() throws Exception {\n+        test(\"simengine\",\n+                Arrays.asList(\n+                    \"args=simengine ignores this\",\n+                    \"args=another arg,keep_running=true,args=and another\",\n+                    \"args=this is also ignored\"\n+                ),\n+                0,\n+                Arrays.asList(\n+                    \"CRaC engine option: 'args' = 'simengine ignores this'\",\n+                    \"CRaC engine option: 'args' = 'another arg'\",\n+                    \"CRaC engine option: 'keep_running' = 'true'\",\n+                    \"CRaC engine option: 'args' = 'and another'\",\n+                    \"CRaC engine option: 'args' = 'this is also ignored'\",\n+                    \"CRaC engine option 'args' specified multiple times\"\n+                ),\n+                Collections.emptyList());\n+\n+        test(\"simengine\",\n+                Arrays.asList(\"args=--arg1 --arg2\", \"--arg3\"),\n+                1,\n+                Arrays.asList(\n+                    \"CRaC engine option: 'args' = '--arg1 --arg2'\",\n+                    \"unknown configure option: --arg3\",\n+                    \"CRaC engine failed to configure: '--arg3' = ''\"\n+                ),\n+                Arrays.asList(\"specified multiple times\"));\n+\n+        if (Platform.isLinux()) {\n+            test(\"criuengine\",\n+                    Arrays.asList(\"help\", \"args=-v4\"),\n+                    1,\n+                    Arrays.asList(\n+                        \"unknown configure option: help\",\n+                        \"CRaC engine failed to configure: 'help' = ''\"\n+                    ),\n+                    Collections.emptyList());\n+        }\n+    }\n+\n+    private void test(String engine) throws Exception {\n+        test(engine, Collections.emptyList(), 0, Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    private void test(String engine, String opts) throws Exception {\n+        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n+            0, Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    private void test(String engine, String opts, int expectedExitValue,\n+            String... expectedTexts) throws Exception {\n+        test(engine, opts != null ? Arrays.asList(opts) : Collections.emptyList(),\n+                expectedExitValue, Arrays.asList(expectedTexts), Collections.emptyList());\n+    }\n+\n+    private void test(String engine, List<String> opts, int expectedExitValue,\n+            List<String> expectedTexts, List<String> notExpectedTexts) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-XX:CRaCCheckpointTo=cr\",\n+                \"-XX:CRaCEngine=\" + engine,\n+                \"-Xlog:crac=debug\",\n+                \"-version\");\n+        for (String opt : opts) {\n+            pb.command().add(pb.command().size() - 2, \"-XX:CRaCEngineOptions=\" + opt);\n+        }\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(expectedExitValue);\n+        for (String text : expectedTexts) {\n+            out.shouldContain(text);\n+        }\n+        for (String text : notExpectedTexts) {\n+            out.shouldNotContain(text);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/engineOptions\/ParsingTest.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"}]}