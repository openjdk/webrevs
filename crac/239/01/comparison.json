{"files":[{"patch":"@@ -109,0 +109,11 @@\n+  $(eval $(call SetupJdkExecutable, BUILD_PAUSEENGINE, \\\n+      NAME := pauseengine, \\\n+      SRC := $(TOPDIR)\/src\/$(MODULE)\/linux\/native\/pauseengine, \\\n+      INCLUDE_FILES := pauseengine.c, \\\n+      OPTIMIZATION := LOW, \\\n+      CFLAGS := $(CFLAGS_JDKEXE), \\\n+      LDFLAGS := $(LDFLAGS_JDKEXE), \\\n+      OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE), \\\n+  ))\n+  TARGETS += $(BUILD_PAUSEENGINE)\n+\n@@ -111,1 +122,1 @@\n-      SRC := $(TOPDIR)\/src\/$(MODULE)\/unix\/native\/criuengine, \\\n+      SRC := $(TOPDIR)\/src\/$(MODULE)\/linux\/native\/criuengine, \\\n@@ -129,11 +140,0 @@\n-  $(eval $(call SetupJdkExecutable, BUILD_PAUSEENGINE, \\\n-      NAME := pauseengine, \\\n-      SRC := $(TOPDIR)\/src\/$(MODULE)\/share\/native\/pauseengine, \\\n-      INCLUDE_FILES := pauseengine.c, \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CFLAGS_JDKEXE), \\\n-      LDFLAGS := $(LDFLAGS_JDKEXE), \\\n-      OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)\/$(CRAC_ENGINE_DIR)\/$(MODULE), \\\n-  ))\n-  TARGETS += $(BUILD_PAUSEENGINE)\n-\n","filename":"make\/modules\/java.base\/Launcher.gmk","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"","filename":"src\/java.base\/linux\/native\/criuengine\/criuengine.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/unix\/native\/criuengine\/criuengine.c","status":"renamed"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <signal.h>\n+#include <unistd.h>\n+\n+#define PAUSEENGINE \"pauseengine: \"\n+\n+#define RESTORE_SIGNAL   (SIGRTMIN + 2)\n+\n+static int kickjvm(pid_t jvm, int code) {\n+    union sigval sv = { .sival_int = code };\n+    if (-1 == sigqueue(jvm, RESTORE_SIGNAL, sv)) {\n+        perror(PAUSEENGINE \"sigqueue\");\n+        return 1;\n+    }\n+    return 0;\n+}\n+\n+int main(int argc, char *argv[]) {\n+    char* action = argv[1];\n+    char* imagedir = argv[2];\n+\n+    char pidpath[1024];\n+    if (0 > snprintf(pidpath, sizeof(pidpath), \"%s\/pid\", imagedir)) {\n+        return 1;\n+    }\n+\n+    if (!strcmp(action, \"checkpoint\")) {\n+        pid_t jvm = getppid();\n+\n+        FILE *pidfile = fopen(pidpath, \"w\");\n+        if (!pidfile) {\n+            perror(PAUSEENGINE \"fopen pidfile\");\n+            kickjvm(jvm, -1);\n+            return 1;\n+        }\n+\n+        fprintf(pidfile, \"%d\\n\", jvm);\n+        fclose(pidfile);\n+\n+        fprintf(stderr, PAUSEENGINE \"pausing the process, restore from another process to unpause it\\n\");\n+    } else if (!strcmp(action, \"restore\")) {\n+        FILE *pidfile = fopen(pidpath, \"r\");\n+        if (!pidfile) {\n+            perror(PAUSEENGINE \"fopen pidfile\");\n+            return 1;\n+        }\n+\n+        pid_t jvm;\n+        if (1 != fscanf(pidfile, \"%d\", &jvm)) {\n+            perror(PAUSEENGINE \"fscanf pidfile\");\n+            fclose(pidfile);\n+            return 1;\n+        }\n+        fclose(pidfile);\n+\n+        char *strid = getenv(\"CRAC_NEW_ARGS_ID\");\n+        if (kickjvm(jvm, strid ? atoi(strid) : 0)) {\n+            return 1;\n+        }\n+\n+        fprintf(stderr, PAUSEENGINE \"successfully unpaused the checkpointed process\\n\");\n+    } else {\n+        fprintf(stderr, PAUSEENGINE \"unknown action: %s\\n\", action);\n+        return 1;\n+    }\n+\n+    return 0;\n+}\n","filename":"src\/java.base\/linux\/native\/pauseengine\/pauseengine.c","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <string.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <signal.h>\n-\n-#ifdef LINUX\n-#include <unistd.h>\n-#define RESTORE_SIGNAL   (SIGRTMIN + 2)\n-#else\n-typedef int pid_t;\n-#endif \/\/LINUX\n-\n-static int kickjvm(pid_t jvm, int code) {\n-#ifdef LINUX\n-    union sigval sv = { .sival_int = code };\n-    if (-1 == sigqueue(jvm, RESTORE_SIGNAL, sv)) {\n-        perror(\"sigqueue\");\n-        return 1;\n-    }\n-#endif \/\/LINUX\n-    return 0;\n-}\n-\n-int main(int argc, char *argv[]) {\n-    char* action = argv[1];\n-    char* imagedir = argv[2];\n-\n-    char pidpath[1024];\n-    if (0 > snprintf(pidpath, sizeof(pidpath), \"%s\/pid\", imagedir)) {\n-        return 1;\n-    }\n-\n-    if (!strcmp(action, \"checkpoint\")) {\n-#ifdef LINUX\n-        pid_t jvm = getppid();\n-#else\n-        pid_t jvm = -1;\n-#endif \/\/LINUX\n-\n-        FILE *pidfile = fopen(pidpath, \"w\");\n-        if (!pidfile) {\n-            perror(\"fopen pidfile\");\n-            kickjvm(jvm, -1);\n-            return 1;\n-        }\n-\n-        fprintf(pidfile, \"%d\\n\", jvm);\n-        fclose(pidfile);\n-\n-    } else if (!strcmp(action, \"restore\")) {\n-        FILE *pidfile = fopen(pidpath, \"r\");\n-        if (!pidfile) {\n-            perror(\"fopen pidfile\");\n-            return 1;\n-        }\n-\n-        pid_t jvm;\n-        if (1 != fscanf(pidfile, \"%d\", &jvm)) {\n-            fclose(pidfile);\n-            fprintf(stderr, \"cannot read pid\\n\");\n-            return 1;\n-        }\n-        fclose(pidfile);\n-\n-        char *strid = getenv(\"CRAC_NEW_ARGS_ID\");\n-        if (kickjvm(jvm, strid ? atoi(strid) : 0)) {\n-            return 1;\n-        }\n-\n-    } else {\n-        fprintf(stderr, \"unknown action: %s\\n\", action);\n-        return 1;\n-    }\n-\n-    return 0;\n-}\n","filename":"src\/java.base\/share\/native\/pauseengine\/pauseengine.c","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -30,0 +30,1 @@\n+#ifdef LINUX\n@@ -31,0 +32,4 @@\n+#include <unistd.h>\n+#endif \/\/ LINUX\n+\n+#define SIMENGINE \"simengine: \"\n@@ -33,1 +38,0 @@\n-#include <unistd.h>\n@@ -35,3 +39,0 @@\n-#else\n-typedef int pid_t;\n-#endif \/\/LINUX\n@@ -40,1 +41,0 @@\n-#ifdef LINUX\n@@ -43,1 +43,1 @@\n-        perror(\"sigqueue\");\n+        perror(SIMENGINE \"sigqueue\");\n@@ -46,1 +46,0 @@\n-#endif \/\/LINUX\n@@ -49,0 +48,1 @@\n+#endif \/\/ LINUX\n@@ -54,0 +54,1 @@\n+#ifdef LINUX\n@@ -56,1 +57,0 @@\n-#ifdef LINUX\n@@ -58,3 +58,0 @@\n-#else\n-        pid_t jvm = -1;\n-#endif \/\/LINUX\n@@ -62,0 +59,1 @@\n+#endif \/\/ LINUX\n@@ -63,2 +61,4 @@\n-        char *strid = getenv(\"CRAC_NEW_ARGS_ID\");\n-        printf(\"CRAC_NEW_ARGS_ID=%s\\n\", strid ? strid : \"0\");\n+        fprintf(stderr,\n+            SIMENGINE \"restore is not supported as a separate action by this engine, \"\n+            \"it always restores a process immediately after checkpointing it\\n\");\n+        return 1;\n@@ -66,1 +66,1 @@\n-        fprintf(stderr, \"unknown action: %s\\n\", action);\n+        fprintf(stderr, SIMENGINE \"unknown action: %s\\n\", action);\n","filename":"src\/java.base\/share\/native\/simengine\/simengine.c","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -62,2 +62,0 @@\n-        test(\"pause\");\n-        test(\"pauseengine\");\n@@ -65,0 +63,2 @@\n+            test(\"pause\");\n+            test(\"pauseengine\");\n","filename":"test\/jdk\/jdk\/crac\/engineOptions\/ParsingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires (os.family == \"linux\")\n","filename":"test\/jdk\/jdk\/crac\/recursiveCheckpoint\/Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}