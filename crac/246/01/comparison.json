{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2022, 2025, Azul Systems, Inc. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.test.lib.Platform;\n@@ -67,0 +68,1 @@\n+        CracBuilder builder = new CracBuilder();\n@@ -68,3 +70,17 @@\n-        OutputAnalyzer output = new CracBuilder().engine(CracEngine.SIMULATE)\n-                .captureOutput(true)\n-                .startCheckpoint().waitForSuccess().outputAnalyzer();\n+        OutputAnalyzer output;\n+        if (Platform.isLinux()) {\n+            builder.doCheckpoint();\n+\n+            long restoreStart = System.currentTimeMillis();\n+            output = builder.captureOutput(true).doRestore().outputAnalyzer();\n+\n+            long restoreTimePassed = System.currentTimeMillis() - restoreStart;\n+            System.err.println(\"restoreTimePassed=\"+restoreTimePassed);\n+            if (restoreTimePassed < 0 || TIME_TOLERANCE < restoreTimePassed) {\n+                throw new Error(\"bad time since restore started: \" + restoreTimePassed);\n+            }\n+        } else {\n+            output = builder.engine(CracEngine.SIMULATE)\n+                    .captureOutput(true)\n+                    .startCheckpoint().waitForSuccess().outputAnalyzer();\n+        }\n@@ -73,1 +89,2 @@\n-        if (restoreUptime < 0 || TIME_TOLERANCE < restoreUptime) {\n+        System.err.println(\"restoreUptime=\" + restoreUptime);\n+        if (restoreUptime < 0) {\n@@ -78,3 +95,2 @@\n-        restoreTime -= start;\n-\n-        assertLT(Math.abs(restoreTime), TIME_TOLERANCE, \"bad RestoreTime: \" + restoreTime);\n+        System.err.println(\"restoreTime=\" + restoreTime);\n+        assertLT(start, restoreTime, \"bad RestoreTime: \" + restoreTime);\n","filename":"test\/jdk\/jdk\/crac\/MXBean.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"}]}