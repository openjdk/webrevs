{"files":[{"patch":"@@ -39,1 +39,1 @@\n-import static jdk.test.lib.Asserts.assertLT;\n+import static jdk.test.lib.Asserts.*;\n@@ -48,1 +48,6 @@\n-    static final long TIME_TOLERANCE = 10_000; \/\/ ms\n+    static final long TIME_TOLERANCE = 1000; \/\/ ms\n+\n+    private static String formatTime(long t) {\n+        return DateTimeFormatter.ofPattern(\"E dd LLL yyyy HH:mm:ss.n\").format(\n+                Instant.ofEpochMilli(t).atZone(ZoneId.systemDefault()));\n+    }\n@@ -56,0 +61,2 @@\n+        System.out.println(\"UptimeSinceRestore \" + cracMXBean.getUptimeSinceRestore());\n+\n@@ -57,4 +64,1 @@\n-        System.out.println(\"RestoreTime \" + restoreTime + \" \" +\n-            DateTimeFormatter.ofPattern(\"E dd LLL yyyy HH:mm:ss.n\").format(\n-                Instant.ofEpochMilli(restoreTime)\n-                    .atZone(ZoneId.systemDefault())));\n+        System.out.println(\"RestoreTime \" + restoreTime + \" \" + formatTime(restoreTime));\n@@ -65,2 +69,1 @@\n-        long start = System.currentTimeMillis();\n-        CracBuilder builder = new CracBuilder();\n+        final var builder = new CracBuilder().captureOutput(true);\n@@ -68,3 +71,13 @@\n-        OutputAnalyzer output;\n-        if (Platform.isLinux()) {\n-            builder.doCheckpoint();\n+        final OutputAnalyzer output;\n+        final long restoreStartTime;\n+        if (Platform.isLinux()) { \/\/ Linux is currently the only platform supporting non-immediate restore\n+            final var process = builder.engine(CracEngine.PAUSE).startCheckpoint();\n+            output = process.outputAnalyzer();\n+            process.waitForPausePid();\n+            restoreStartTime = System.currentTimeMillis();\n+            builder.doRestore();\n+        } else {\n+            restoreStartTime = System.currentTimeMillis(); \/\/ A very rough approximation\n+            output = builder.engine(CracEngine.SIMULATE).startCheckpoint().waitForSuccess().outputAnalyzer();\n+        }\n+        System.out.println(\"RestoreStartTime \" + restoreStartTime + \" \" + formatTime(restoreStartTime));\n@@ -72,2 +85,3 @@\n-            long restoreStart = System.currentTimeMillis();\n-            output = builder.captureOutput(true).doRestore().outputAnalyzer();\n+        final long uptimeSinceRestore = Long.parseLong(output.firstMatch(\"UptimeSinceRestore ([0-9-]+)\", 1));\n+        assertGTE(uptimeSinceRestore, 0L, \"Bad UptimeSinceRestore\");\n+        assertLT(uptimeSinceRestore, TIME_TOLERANCE, \"UptimeSinceRestore should be a bit greater than 0\");\n@@ -75,5 +89,5 @@\n-            long restoreTimePassed = System.currentTimeMillis() - restoreStart;\n-            System.err.println(\"restoreTimePassed=\" + restoreTimePassed);\n-            if (restoreTimePassed < 0 || TIME_TOLERANCE < restoreTimePassed) {\n-                throw new Error(\"bad time since restore started: \" + restoreTimePassed);\n-            }\n+        final long restoreTime = Long.parseLong(output.firstMatch(\"RestoreTime ([0-9-]+)\", 1));\n+        assertGTE(restoreTime, 0L, \"Bad RestoreTime\");\n+        if (Platform.isLinux()) {\n+            assertLT(restoreTime - restoreStartTime, TIME_TOLERANCE,\n+                    \"RestoreTime \" + restoreTime + \" should be a bit greater than \" + restoreStartTime);\n@@ -81,3 +95,1 @@\n-            output = builder.engine(CracEngine.SIMULATE)\n-                    .captureOutput(true)\n-                    .startCheckpoint().waitForSuccess().outputAnalyzer();\n+            assertGT(restoreTime, restoreStartTime, \"Time has gone backwards?\");\n@@ -85,4 +97,0 @@\n-\n-        long restoreTime = Long.parseLong(output.firstMatch(\"RestoreTime ([0-9-]+)\", 1));\n-        System.err.println(\"restoreTime=\" + restoreTime);\n-        assertLT(start, restoreTime, \"bad RestoreTime: \" + restoreTime);\n","filename":"test\/jdk\/jdk\/crac\/MXBean.java","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"}]}