{"files":[{"patch":"@@ -1088,6 +1088,4 @@\n-    When using this option, there is no requirement to specify a main class and its\n-    arguments because the restored execution is based on the ones specified before\n-    the checkpoint. However, it is possible to pass a new main class and new\n-    arguments. After a successful restoration, the new main method will be invoked\n-    with the specified arguments in the thread that started the checkpoint, on top\n-    of its existing call stack.\n+    You can optionally pass the name of the new main class and its arguments when\n+    using this option. In such a case, the new main method will be invoked with\n+    the specified arguments by the thread that initiated the checkpoint, after all\n+    CRaC resources have been successfully processed.\n@@ -1096,8 +1094,9 @@\n-:   If the checkpoint image specified for restoration is identified as being unusable,\n-    continue with the normal startup instead of failing. Enabling this option does\n-    not guarantee that the normal startup will follow any failed restoration attempt;\n-    it only covers an early image\/environment verification.\n-\n-    When restoring with this option, you should specify a main class and its\n-    arguments as usual. If the restoration succeeds, they are ignored, but if it\n-    fails, they are used for the normal startup process.\n+:   If the checkpoint image specified for restoration is identified as being\n+    unusable, continue with the normal startup instead of failing.\n+\n+    When restoring with this option, you should specify the command-line arguments\n+    for the normal startup process. If the restoration succeeds, they are ignored;\n+    otherwise, they are used for starting up.\n+\n+    If an initial image verification passes, but restoration still fails, the JVM\n+    will not attempt to start normally.\n","filename":"src\/java.base\/share\/man\/java.md","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"}]}