{"files":[{"patch":"@@ -21,0 +21,4 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n@@ -23,0 +27,1 @@\n+import static jdk.test.lib.Asserts.*;\n@@ -35,1 +40,1 @@\n-    private static Exception exception = null;\n+    private static final List<Throwable> throwables = Collections.synchronizedList(new ArrayList<>());\n@@ -42,1 +47,1 @@\n-        CracBuilder builder = new CracBuilder().engine(CracEngine.SIMULATE);\n+        final CracBuilder builder = new CracBuilder().engine(CracEngine.SIMULATE);\n@@ -47,0 +52,8 @@\n+        public TestThread() {\n+            setUncaughtExceptionHandler(TestThread::handleException);\n+        }\n+\n+        private static void handleException(@SuppressWarnings(\"unused\") Thread thread, Throwable throwable) {\n+            throwables.add(throwable);\n+        }\n+\n@@ -51,6 +64,2 @@\n-            } catch (CheckpointException e) {\n-                if (exception == null)\n-                    exception = new RuntimeException(\"Checkpoint in thread ERROR \" + e);\n-            } catch (RestoreException e) {\n-                if (exception == null)\n-                    exception = new RuntimeException(\"Restore in thread ERROR \" + e);\n+            } catch (CheckpointException | RestoreException e) {\n+                throw new IllegalStateException(\"C\/R failed\", e);\n@@ -63,0 +72,2 @@\n+        assertEquals(1, counter.incrementAndGet(), \"Concurrent checkpoint detected\");\n+        Thread.sleep(100);\n@@ -64,6 +75,0 @@\n-            int c = counter.incrementAndGet();\n-            if (c > 1) {\n-                if (exception == null)\n-                    exception = new RuntimeException(\"Parallel checkpoint\");\n-            }\n-            Thread.sleep(100);\n@@ -71,2 +76,1 @@\n-            if (exception != null)\n-                exception = new RuntimeException(\"Checkpoint Exception should be thrown\");\n+            fail(\"Recursive checkpoint should fail\");\n@@ -74,4 +78,1 @@\n-            \/\/ Expected Exception\n-        } catch (RestoreException e) {\n-            if (exception == null)\n-                exception = new RuntimeException(\"Restore ERROR\", e);\n+            \/\/ Expected exception\n@@ -84,5 +85,0 @@\n-            int c = counter.get();\n-            if (c > 1) {\n-                if (exception == null)\n-                    exception = new RuntimeException(\"Parallel checkpoint\");\n-            }\n@@ -90,8 +86,6 @@\n-            Core.checkpointRestore();\n-            if (exception == null)\n-                exception = new RuntimeException(\"Checkpoint Exception should be thrown\");\n-        } catch (CheckpointException e) {\n-            \/\/ Expected Exception\n-        } catch (RestoreException e) {\n-            if (exception == null)\n-                exception = new RuntimeException(\"Restore ERROR\", e);\n+            try {\n+                Core.checkpointRestore();\n+                fail(\"Recursive checkpoint should fail\");\n+            } catch (CheckpointException e) {\n+                \/\/ Expected exception\n+            }\n@@ -107,1 +101,1 @@\n-        TestThread[] threads = new TestThread[numThreads];\n+        final var threads = new TestThread[numThreads];\n@@ -112,10 +106,0 @@\n-\n-        Thread.sleep(100);\n-        try {\n-            Core.checkpointRestore();\n-        } catch (CheckpointException e) {\n-            throw new RuntimeException(\"Checkpoint ERROR\", e);\n-        } catch (RestoreException e) {\n-            throw new RuntimeException(\"Restore ERROR\", e);\n-        }\n-\n@@ -126,5 +110,6 @@\n-        long ccounter = counter.get();\n-        if (ccounter != 0)\n-            throw new RuntimeException(\"Incorrect counter after restore: \" + ccounter + \" instead of 0\");\n-        if (exception != null) {\n-            throw exception;\n+        if (!throwables.isEmpty()) {\n+            final var aggregated = new IllegalStateException(\"\" + throwables.size() + \" test threads failed\");\n+            for (final var t : throwables) {\n+                aggregated.addSuppressed(t);\n+            }\n+            throw aggregated;\n@@ -132,1 +117,2 @@\n-        System.out.println(\"PASSED\");\n+\n+        assertEquals(0, counter.get());\n","filename":"test\/jdk\/jdk\/crac\/RecursiveCheckpointTest.java","additions":36,"deletions":50,"binary":false,"changes":86,"status":"modified"}]}