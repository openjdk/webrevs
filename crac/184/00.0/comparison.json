{"files":[{"patch":"@@ -948,4 +948,0 @@\n-bool os::dont_yield() {\n-  return DontYieldALot;\n-}\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4927,6 +4927,0 @@\n-\n-\/\/ DontYieldALot=false by default: dutifully perform all yields as requested by JVM_Yield()\n-bool os::dont_yield() {\n-  return DontYieldALot;\n-}\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+  template(java_lang_Void,                            \"java\/lang\/Void\")                           \\\n@@ -120,1 +121,0 @@\n-  template(java_lang_SecurityManager,                 \"java\/lang\/SecurityManager\")                \\\n@@ -123,3 +123,0 @@\n-  template(java_security_AccessControlContext,        \"java\/security\/AccessControlContext\")       \\\n-  template(java_security_AccessController,            \"java\/security\/AccessController\")           \\\n-  template(executePrivileged_name,                    \"executePrivileged\")                        \\\n@@ -312,0 +309,2 @@\n+  template(java_lang_ref_SoftReference_signature,         \"Ljava\/lang\/ref\/SoftReference;\")        \\\n+                                                                                                  \\\n@@ -440,3 +439,0 @@\n-  template(context_name,                              \"context\")                                  \\\n-  template(contextClassLoader_name,                   \"contextClassLoader\")                       \\\n-  template(getClassContext_name,                      \"getClassContext\")                          \\\n@@ -490,1 +486,0 @@\n-  template(security_manager_signature,                \"Ljava\/lang\/SecurityManager;\")              \\\n@@ -604,3 +599,0 @@\n-  template(protectiondomain_signature,                \"[Ljava\/security\/ProtectionDomain;\")                        \\\n-  template(accesscontrolcontext_signature,            \"Ljava\/security\/AccessControlContext;\")                     \\\n-  template(class_protectiondomain_signature,          \"(Ljava\/lang\/Class;Ljava\/security\/ProtectionDomain;)V\")     \\\n@@ -729,0 +721,1 @@\n+  template(createArchivedObjects,                           \"createArchivedObjects\")                              \\\n@@ -742,0 +735,1 @@\n+  template(runtimeSetup,                                    \"runtimeSetup\")                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -329,6 +329,0 @@\n-\/*\n- * java.lang.SecurityManager\n- *\/\n-JNIEXPORT jobjectArray JNICALL\n-JVM_GetClassContext(JNIEnv *env);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+  LOG_TAG(aot) \\\n@@ -164,1 +165,0 @@\n-  LOG_TAG(protectiondomain) \/* \"Trace protection domain verification\" *\/ \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-static void trace_class_resolution_impl(Klass* to_class, TRAPS) {\n+extern void trace_class_resolution(Klass* to_class) {\n@@ -161,1 +161,1 @@\n-  JavaThread* jthread = THREAD;\n+  JavaThread* jthread = JavaThread::current();\n@@ -165,6 +165,1 @@\n-    \/\/ scan up the stack skipping ClassLoader, AccessController and PrivilegedAction frames\n-    TempNewSymbol access_controller = SymbolTable::new_symbol(\"java\/security\/AccessController\");\n-    Klass* access_controller_klass = SystemDictionary::resolve_or_fail(access_controller, false, CHECK);\n-    TempNewSymbol privileged_action = SymbolTable::new_symbol(\"java\/security\/PrivilegedAction\");\n-    Klass* privileged_action_klass = SystemDictionary::resolve_or_fail(privileged_action, false, CHECK);\n-\n+    \/\/ Scan up the stack skipping ClassLoader frames.\n@@ -175,3 +170,1 @@\n-      if (!vfst.method()->method_holder()->is_subclass_of(vmClasses::ClassLoader_klass())&&\n-          !vfst.method()->method_holder()->is_subclass_of(access_controller_klass) &&\n-          !vfst.method()->method_holder()->is_subclass_of(privileged_action_klass)) {\n+      if (!vfst.method()->method_holder()->is_subclass_of(vmClasses::ClassLoader_klass())) {\n@@ -236,8 +229,0 @@\n-void trace_class_resolution(Klass* to_class) {\n-  EXCEPTION_MARK;\n-  trace_class_resolution_impl(to_class, THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    CLEAR_PENDING_EXCEPTION;\n-  }\n-}\n-\n@@ -837,11 +822,1 @@\n-  oop protection_domain = nullptr;\n-  \/\/ If loader is null, shouldn't call ClassLoader.checkPackageAccess; otherwise get\n-  \/\/ NPE. Put it in another way, the bootstrap class loader has all permission and\n-  \/\/ thus no checkPackageAccess equivalence in the VM class loader.\n-  \/\/ The caller is also passed as null by the java code if there is no security\n-  \/\/ manager to avoid the performance cost of getting the calling class.\n-  if (from_class != nullptr && loader_oop != nullptr) {\n-    protection_domain = java_lang_Class::as_Klass(from_class)->protection_domain();\n-  }\n-\n-  Handle h_prot(THREAD, protection_domain);\n+\n@@ -850,1 +825,1 @@\n-                                               h_prot, false, THREAD);\n+                                               false, THREAD);\n@@ -869,1 +844,0 @@\n-  oop protection_domain = nullptr;\n@@ -872,1 +846,0 @@\n-    protection_domain = from_class->protection_domain();\n@@ -875,3 +848,1 @@\n-  Handle h_prot  (THREAD, protection_domain);\n-  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,\n-                                               h_prot, true, thread);\n+  jclass result = find_class_from_class_loader(env, h_name, init, h_loader, true, thread);\n@@ -921,1 +892,1 @@\n-  ClassFileStream st((u1*)buf, len, source, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, len, source);\n@@ -1007,1 +978,1 @@\n-  ClassFileStream st((u1*)buf, len, source, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, len, source);\n@@ -1125,3 +1096,1 @@\n-  Klass* k = SystemDictionary::find_instance_or_array_klass(THREAD, klass_name,\n-                                                            h_loader,\n-                                                            Handle());\n+  Klass* k = SystemDictionary::find_instance_or_array_klass(THREAD, klass_name, h_loader);\n@@ -2842,1 +2811,1 @@\n-  if (CDSConfig::is_dumping_static_archive()) {\n+  if (CDSConfig::allow_only_single_java_thread()) {\n@@ -2955,1 +2924,0 @@\n-  if (os::dont_yield()) return;\n@@ -3074,39 +3042,0 @@\n-\/\/ java.lang.SecurityManager \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-JVM_ENTRY(jobjectArray, JVM_GetClassContext(JNIEnv *env))\n-  ResourceMark rm(THREAD);\n-  JvmtiVMObjectAllocEventCollector oam;\n-  vframeStream vfst(thread);\n-\n-  if (vmClasses::reflect_CallerSensitive_klass() != nullptr) {\n-    \/\/ This must only be called from SecurityManager.getClassContext\n-    Method* m = vfst.method();\n-    if (!(m->method_holder() == vmClasses::SecurityManager_klass() &&\n-          m->name()          == vmSymbols::getClassContext_name() &&\n-          m->signature()     == vmSymbols::void_class_array_signature())) {\n-      THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"JVM_GetClassContext must only be called from SecurityManager.getClassContext\");\n-    }\n-  }\n-\n-  \/\/ Collect method holders\n-  GrowableArray<Klass*>* klass_array = new GrowableArray<Klass*>();\n-  for (; !vfst.at_end(); vfst.security_next()) {\n-    Method* m = vfst.method();\n-    \/\/ Native frames are not returned\n-    if (!m->is_ignored_by_security_stack_walk() && !m->is_native()) {\n-      Klass* holder = m->method_holder();\n-      assert(holder->is_klass(), \"just checking\");\n-      klass_array->append(holder);\n-    }\n-  }\n-\n-  \/\/ Create result array of type [Ljava\/lang\/Class;\n-  objArrayOop result = oopFactory::new_objArray(vmClasses::Class_klass(), klass_array->length(), CHECK_NULL);\n-  \/\/ Fill in mirrors corresponding to method holders\n-  for (int i = 0; i < klass_array->length(); i++) {\n-    result->obj_at_put(i, klass_array->at(i)->java_mirror());\n-  }\n-\n-  return (jobjectArray) JNIHandles::make_local(THREAD, result);\n-JVM_END\n-\n@@ -3426,9 +3355,2 @@\n-                                    Handle loader, Handle protection_domain,\n-                                    jboolean throwError, TRAPS) {\n-  \/\/ Security Note:\n-  \/\/   The Java level wrapper will perform the necessary security check allowing\n-  \/\/   us to pass the null as the initiating class loader.  The VM is responsible for\n-  \/\/   the checkPackageAccess relative to the initiating class loader via the\n-  \/\/   protection_domain. The protection_domain is passed as null by the java code\n-  \/\/   if there is no security manager in 3-arg Class.forName().\n-  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != 0, CHECK_NULL);\n+                                    Handle loader, jboolean throwError, TRAPS) {\n+  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, throwError != 0, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":13,"deletions":91,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -1078,0 +1078,10 @@\n+bool JvmtiExport::has_early_vmstart_env() {\n+  JvmtiEnvIterator it;\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n+    if (env->early_vmstart_env()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -377,0 +377,1 @@\n+  static bool has_early_vmstart_env() NOT_JVMTI_RETURN_(false);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"oops\/objLayout.hpp\"\n@@ -2634,0 +2635,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2638,0 +2640,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2643,0 +2646,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n@@ -2647,0 +2651,1 @@\n+      CDSConfig::set_old_cds_flags_used();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -705,3 +705,0 @@\n-  product_pd(bool, DontYieldALot,                                           \\\n-             \"(Deprecated) Throw away obvious excess yield calls\")          \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1058,2 +1058,0 @@\n-  static bool dont_yield();                     \/\/ when true, JVM_Yield() is nop\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/aotLinkedClassBulkLoader.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"cds\/heapShared.hpp\"\n@@ -33,0 +35,1 @@\n+#include \"classfile\/symbolTable.hpp\"\n@@ -354,0 +357,1 @@\n+\n@@ -360,0 +364,2 @@\n+  HeapShared::init_box_classes(CHECK);\n+\n@@ -383,1 +389,1 @@\n-                                                            Handle(), Handle());\n+                                                            Handle());\n@@ -407,0 +413,1 @@\n+  initialize_class(vmSymbols::java_lang_InternalError(), CHECK);\n@@ -416,0 +423,4 @@\n+\n+  if (UseSharedSpaces) {\n+    HeapShared::initialize_java_lang_invoke(CHECK);\n+  }\n@@ -519,0 +530,3 @@\n+  \/\/ Initialize object layout after parsing the args\n+  ObjLayout::initialize();\n+\n@@ -770,0 +784,5 @@\n+  if (CDSConfig::is_using_aot_linked_classes()) {\n+    AOTLinkedClassBulkLoader::finish_loading_javabase_classes(CHECK_JNI_ERR);\n+    SystemDictionary::restore_archived_method_handle_intrinsics();\n+  }\n+\n@@ -785,0 +804,7 @@\n+  if (CDSConfig::is_using_aot_linked_classes()) {\n+    AOTLinkedClassBulkLoader::load_non_javabase_classes(THREAD);\n+  }\n+#ifndef PRODUCT\n+  HeapShared::initialize_test_class_from_archive(THREAD);\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1933,1 +1933,0 @@\n-  declare_toplevel_type(jniIdMapBase*)                                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, Handle(), true, CHECK);\n+    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, true, CHECK);\n@@ -777,1 +777,1 @@\n-    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, Handle(), true, CHECK);\n+    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, true, CHECK);\n@@ -794,1 +794,1 @@\n-    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, Handle(), true, CHECK);\n+    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, true, CHECK);\n@@ -815,1 +815,1 @@\n-  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, Handle(), true, CHECK);\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_agent_Agent(), loader, true, CHECK);\n@@ -893,1 +893,1 @@\n-  _max(\"max\", \"Maximum number of events to be printed (newest first). If omitted, all events are printed.\", \"STRING\", false, nullptr)\n+  _max(\"max\", \"Maximum number of events to be printed (newest first). If omitted or zero, all events are printed.\", \"INT\", false, \"0\")\n@@ -900,8 +900,4 @@\n-  const char* max_value = _max.value();\n-  int max = -1;\n-  if (max_value != nullptr) {\n-    char* endptr = nullptr;\n-    if (!parse_integer(max_value, &max)) {\n-      output()->print_cr(\"Invalid max option: \\\"%s\\\".\", max_value);\n-      return;\n-    }\n+  int max = (int)_max.value();\n+  if (max < 0) {\n+    output()->print_cr(\"Invalid max option: \\\"%d\\\".\", max);\n+    return;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -892,1 +892,1 @@\n-  DCmdArgument<char*> _max;\n+  DCmdArgument<jlong> _max;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,0 @@\n-                                                   Handle(),\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,9 +140,0 @@\n-        String name = (file != null ? file.getPath() : null);\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkRead(name);\n-        }\n-        if (name == null) {\n-            throw new NullPointerException();\n-        }\n@@ -152,0 +143,1 @@\n+        path = file.getPath();\n@@ -154,2 +146,1 @@\n-        path = name;\n-        open(name);\n+        open(path);\n@@ -176,2 +167,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n@@ -181,3 +170,0 @@\n-        if (security != null) {\n-            security.checkRead(fdObj);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -221,9 +221,0 @@\n-        String name = (file != null ? file.getPath() : null);\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkWrite(name);\n-        }\n-        if (name == null) {\n-            throw new NullPointerException();\n-        }\n@@ -233,0 +224,2 @@\n+        this.path = file.getPath();\n+\n@@ -235,1 +228,0 @@\n-        this.path = name;\n@@ -242,1 +234,1 @@\n-        open(name, append);\n+        open(this.path, append);\n@@ -263,2 +255,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n@@ -268,3 +258,0 @@\n-        if (security != null) {\n-            security.checkWrite(fdObj);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -282,8 +282,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkRead(name);\n-            if (rw) {\n-                security.checkWrite(name);\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import sun.security.util.SecurityConstants;\n@@ -161,9 +160,0 @@\n-    \/**\n-     * Creates an unconnected socket with the given {@code SocketImpl}.\n-     *\/\n-    private Socket(Void unused, SocketImpl impl) {\n-        if (impl != null) {\n-            this.impl = impl;\n-        }\n-    }\n-\n@@ -216,2 +206,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n@@ -222,10 +210,0 @@\n-            if (security != null) {\n-                if (epoint.isUnresolved())\n-                    epoint = new InetSocketAddress(epoint.getHostName(), epoint.getPort());\n-                if (epoint.isUnresolved())\n-                    security.checkConnect(epoint.getHostName(), epoint.getPort());\n-                else\n-                    security.checkConnect(epoint.getAddress().getHostAddress(),\n-                                  epoint.getPort());\n-            }\n-\n@@ -263,9 +241,1 @@\n-        this(checkPermission(impl), impl);\n-    }\n-\n-    private static Void checkPermission(SocketImpl impl) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SecurityConstants.SET_SOCKETIMPL_PERMISSION);\n-            }\n+            this.impl = impl;\n@@ -274,1 +244,0 @@\n-        return null;\n@@ -501,1 +470,1 @@\n-        } catch (IOException | IllegalArgumentException | SecurityException e) {\n+        } catch (IOException | IllegalArgumentException e) {\n@@ -688,9 +657,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            if (epoint.isUnresolved())\n-                security.checkConnect(epoint.getHostName(), port);\n-            else\n-                security.checkConnect(addr.getHostAddress(), port);\n-        }\n-\n@@ -747,5 +707,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkListen(port);\n-        }\n@@ -799,4 +754,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null)\n-                sm.checkConnect(in.getHostAddress(), -1);\n@@ -806,2 +757,0 @@\n-        } catch (SecurityException e) {\n-            in = InetAddress.getLoopbackAddress();\n@@ -1859,5 +1808,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSetFactory();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":2,"deletions":58,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -198,8 +197,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkRead(name);\n-            if ((mode & OPEN_DELETE) != 0) {\n-                sm.checkDelete(name);\n-            }\n-        }\n@@ -1072,2 +1063,1 @@\n-        String value = GetPropertyAction.privilegedGetProperty(\n-                \"jdk.util.zip.disableZip64ExtraFieldValidation\");\n+        String value = System.getProperty(\"jdk.util.zip.disableZip64ExtraFieldValidation\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,6 +42,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -74,1 +68,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -87,1 +80,0 @@\n-    private static final boolean DISABLE_ACC_CHECKING;\n@@ -92,1 +84,1 @@\n-        Properties props = GetPropertyAction.privilegedGetProperties();\n+        Properties props = System.getProperties();\n@@ -98,3 +90,0 @@\n-        p = props.getProperty(\"jdk.net.URLClassPath.disableRestrictedPermissions\");\n-        DISABLE_ACC_CHECKING = p != null ? p.equals(\"true\") || p.isEmpty() : false;\n-\n@@ -129,6 +118,0 @@\n-    \/* The context to be used when loading classes and resources.  If non-null\n-     * this is the context that was captured during the creation of the\n-     * URLClassLoader. null implies no additional security restrictions. *\/\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n@@ -144,2 +127,0 @@\n-     * @param acc the context to be used when loading classes and resources, may\n-     *            be null\n@@ -148,2 +129,1 @@\n-                        URLStreamHandlerFactory factory,\n-                        @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+                        URLStreamHandlerFactory factory) {\n@@ -164,4 +144,0 @@\n-        if (DISABLE_ACC_CHECKING)\n-            this.acc = null;\n-        else\n-            this.acc = acc;\n@@ -170,2 +146,2 @@\n-    public URLClassPath(URL[] urls, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        this(urls, null, acc);\n+    public URLClassPath(URL[] urls) {\n+        this(urls, null);\n@@ -213,1 +189,0 @@\n-        this.acc = null;\n@@ -283,1 +258,1 @@\n-     * or null if not found or security check fails.\n+     * or null if not found.\n@@ -286,1 +261,0 @@\n-     * @param check     whether to perform a security check\n@@ -290,1 +264,1 @@\n-    public URL findResource(String name, boolean check) {\n+    public URL findResource(String name) {\n@@ -293,1 +267,1 @@\n-            URL url = loader.findResource(name, check);\n+            URL url = loader.findResource(name);\n@@ -301,23 +275,0 @@\n-    \/**\n-     * Finds the first Resource on the URL search path which has the specified\n-     * name. Returns null if no Resource could be found.\n-     *\n-     * @param name the name of the Resource\n-     * @param check     whether to perform a security check\n-     * @return the Resource, or null if not found\n-     *\/\n-    public Resource getResource(String name, boolean check) {\n-        if (DEBUG) {\n-            System.err.println(\"URLClassPath.getResource(\\\"\" + name + \"\\\")\");\n-        }\n-\n-        Loader loader;\n-        for (int i = 0; (loader = getLoader(i)) != null; i++) {\n-            Resource res = loader.getResource(name, check);\n-            if (res != null) {\n-                return res;\n-            }\n-        }\n-        return null;\n-    }\n-\n@@ -331,2 +282,1 @@\n-    public Enumeration<URL> findResources(final String name,\n-                                     final boolean check) {\n+    public Enumeration<URL> findResources(final String name) {\n@@ -343,1 +293,1 @@\n-                        url = loader.findResource(name, check);\n+                        url = loader.findResource(name);\n@@ -367,0 +317,7 @@\n+    \/**\n+     * Finds the first Resource on the URL search path which has the specified\n+     * name. Returns null if no Resource could be found.\n+     *\n+     * @param name the name of the Resource\n+     * @return the Resource, or null if not found\n+     *\/\n@@ -368,1 +325,12 @@\n-        return getResource(name, true);\n+        if (DEBUG) {\n+            System.err.println(\"URLClassPath.getResource(\\\"\" + name + \"\\\")\");\n+        }\n+\n+        Loader loader;\n+        for (int i = 0; (loader = getLoader(i)) != null; i++) {\n+            Resource res = loader.getResource(name);\n+            if (res != null) {\n+                return res;\n+            }\n+        }\n+        return null;\n@@ -378,2 +346,1 @@\n-    public Enumeration<Resource> getResources(final String name,\n-                                    final boolean check) {\n+    public Enumeration<Resource> getResources(final String name) {\n@@ -390,1 +357,1 @@\n-                        res = loader.getResource(name, check);\n+                        res = loader.getResource(name);\n@@ -414,4 +381,0 @@\n-    public Enumeration<Resource> getResources(final String name) {\n-        return getResources(name, true);\n-    }\n-\n@@ -459,11 +422,0 @@\n-            } catch (SecurityException se) {\n-                \/\/ log the error and close the unusable loader (if any).\n-                \/\/ The context, if there is one, that this URLClassPath was\n-                \/\/ given during construction will never have permission to access the URL.\n-                if (DEBUG) {\n-                    System.err.println(\"Failed to access \" + url + \", \" + se );\n-                }\n-                if (loader != null) {\n-                    closeQuietly(loader);\n-                }\n-                continue;\n@@ -495,27 +447,17 @@\n-    @SuppressWarnings(\"removal\")\n-        try {\n-            return AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<>() {\n-                        public Loader run() throws IOException {\n-                            String protocol = url.getProtocol();  \/\/ lower cased in URL\n-                            String file = url.getFile();\n-                            if (file != null && file.endsWith(\"\/\")) {\n-                                if (\"file\".equals(protocol)) {\n-                                    return new FileLoader(url);\n-                                } else if (\"jar\".equals(protocol) &&\n-                                        isDefaultJarHandler(url) &&\n-                                        file.endsWith(\"!\/\")) {\n-                                    \/\/ extract the nested URL\n-                                    @SuppressWarnings(\"deprecation\")\n-                                    URL nestedUrl = new URL(file.substring(0, file.length() - 2));\n-                                    return new JarLoader(nestedUrl, jarHandler, acc);\n-                                } else {\n-                                    return new Loader(url);\n-                                }\n-                            } else {\n-                                return new JarLoader(url, jarHandler, acc);\n-                            }\n-                        }\n-                    }, acc);\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException)pae.getException();\n+        String protocol = url.getProtocol();  \/\/ lower cased in URL\n+        String file = url.getFile();\n+        if (file != null && file.endsWith(\"\/\")) {\n+            if (\"file\".equals(protocol)) {\n+                return new FileLoader(url);\n+            } else if (\"jar\".equals(protocol) &&\n+                    isDefaultJarHandler(url) &&\n+                    file.endsWith(\"!\/\")) {\n+                \/\/ extract the nested URL\n+                @SuppressWarnings(\"deprecation\")\n+                URL nestedUrl = new URL(file.substring(0, file.length() - 2));\n+                return new JarLoader(nestedUrl, jarHandler);\n+            } else {\n+                return new Loader(url);\n+            }\n+        } else {\n+            return new JarLoader(url, jarHandler);\n@@ -545,53 +487,0 @@\n-    \/*\n-     * Checks whether the resource URL should be returned.\n-     * Returns null on security check failure.\n-     * Called by java.net.URLClassLoader.\n-     *\/\n-    public static URL checkURL(URL url) {\n-        if (url != null) {\n-            try {\n-                check(url);\n-            } catch (Exception e) {\n-                return null;\n-            }\n-        }\n-        return url;\n-    }\n-\n-    \/*\n-     * Checks whether the resource URL should be returned.\n-     * Throws exception on failure.\n-     * Called internally within this file.\n-     *\/\n-    public static void check(URL url) throws IOException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            URLConnection urlConnection = url.openConnection();\n-            Permission perm = urlConnection.getPermission();\n-            if (perm != null) {\n-                try {\n-                    security.checkPermission(perm);\n-                } catch (SecurityException se) {\n-                    \/\/ fallback to checkRead\/checkConnect for pre 1.2\n-                    \/\/ security managers\n-                    if ((perm instanceof java.io.FilePermission) &&\n-                        perm.getActions().contains(\"read\")) {\n-                        security.checkRead(perm.getName());\n-                    } else if ((perm instanceof\n-                        java.net.SocketPermission) &&\n-                        perm.getActions().contains(\"connect\")) {\n-                        URL locUrl = url;\n-                        if (urlConnection instanceof JarURLConnection) {\n-                            locUrl = ((JarURLConnection)urlConnection).getJarFileURL();\n-                        }\n-                        security.checkConnect(locUrl.getHost(),\n-                                              locUrl.getPort());\n-                    } else {\n-                        throw se;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n@@ -620,1 +509,1 @@\n-        URL findResource(final String name, boolean check) {\n+        URL findResource(final String name) {\n@@ -630,4 +519,0 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n-\n@@ -657,1 +542,5 @@\n-        Resource getResource(final String name, boolean check) {\n+        \/*\n+         * Returns the Resource for the specified name, or null if not\n+         * found.\n+         *\/\n+        Resource getResource(final String name) {\n@@ -667,3 +556,0 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n@@ -697,9 +583,0 @@\n-        \/*\n-         * Returns the Resource for the specified name, or null if not\n-         * found or the caller does not have the permission to get the\n-         * resource.\n-         *\/\n-        Resource getResource(final String name) {\n-            return getResource(name, true);\n-        }\n-\n@@ -731,2 +608,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n@@ -741,2 +616,1 @@\n-        private JarLoader(URL url, URLStreamHandler jarHandler,\n-                          @SuppressWarnings(\"removal\") AccessControlContext acc)\n+        private JarLoader(URL url, URLStreamHandler jarHandler)\n@@ -747,2 +621,0 @@\n-            this.acc = acc;\n-\n@@ -774,1 +646,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -777,14 +648,3 @@\n-                try {\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<>() {\n-                            public Void run() throws IOException {\n-                                if (DEBUG) {\n-                                    System.err.println(\"Opening \" + csu);\n-                                    Thread.dumpStack();\n-                                }\n-                                jar = getJarFile(csu);\n-                                return null;\n-                            }\n-                        }, acc);\n-                } catch (PrivilegedActionException pae) {\n-                    throw (IOException)pae.getException();\n+                if (DEBUG) {\n+                    System.err.println(\"Opening \" + csu);\n+                    Thread.dumpStack();\n@@ -792,0 +652,1 @@\n+                jar = getJarFile(csu);\n@@ -830,2 +691,1 @@\n-         * Creates the resource and if the check flag is set to true, checks if\n-         * is its okay to return the resource.\n+         * Creates and returns the Resource. Returns null if the Resource couldn't be created.\n@@ -833,2 +693,1 @@\n-        Resource checkResource(final String name, boolean check,\n-            final JarEntry entry) {\n+        Resource createResource(final String name, final JarEntry entry) {\n@@ -846,4 +705,1 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n-            } catch (@SuppressWarnings(\"removal\") AccessControlException | IOException e) {\n+            } catch (IOException e) {\n@@ -889,2 +745,2 @@\n-        URL findResource(final String name, boolean check) {\n-            Resource rsc = getResource(name, check);\n+        URL findResource(final String name) {\n+            Resource rsc = getResource(name);\n@@ -901,1 +757,1 @@\n-        Resource getResource(final String name, boolean check) {\n+        Resource getResource(final String name) {\n@@ -908,4 +764,3 @@\n-            if (entry != null)\n-                return checkResource(name, check, entry);\n-\n-\n+            if (entry != null) {\n+                return createResource(name, entry);\n+            }\n@@ -1062,2 +917,2 @@\n-        URL findResource(final String name, boolean check) {\n-            Resource rsc = getResource(name, check);\n+        URL findResource(final String name) {\n+            Resource rsc = getResource(name);\n@@ -1071,1 +926,1 @@\n-        Resource getResource(final String name, boolean check) {\n+        Resource getResource(final String name) {\n@@ -1081,4 +936,0 @@\n-\n-                if (check)\n-                    URLClassPath.check(url);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":70,"deletions":219,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -374,8 +374,0 @@\n-\n-            \/\/ when running with a security manager then check that the caller\n-            \/\/ has access to the directory.\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                boolean unused = Files.isDirectory(dir);\n-            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleReferences.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -148,0 +148,2 @@\n+    exports jdk.internal to\n+        jdk.incubator.vector;\n@@ -156,0 +158,1 @@\n+        java.se, \/\/ for ParticipatesInPreview\n@@ -318,1 +321,0 @@\n-        java.datatransfer,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.security.Permission;\n@@ -229,29 +228,1 @@\n-        JarFile result = fileCache.get(urlKey(url));\n-\n-        \/* if the JAR file is cached, the permission will always be there *\/\n-        if (result != null) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                Permission perm = getPermission(result);\n-                if (perm != null) {\n-                    try {\n-                        sm.checkPermission(perm);\n-                    } catch (SecurityException se) {\n-                        \/\/ fallback to checkRead\/checkConnect for pre 1.2\n-                        \/\/ security managers\n-                        if ((perm instanceof java.io.FilePermission) &&\n-                            perm.getActions().contains(\"read\")) {\n-                            sm.checkRead(perm.getName());\n-                        } else if ((perm instanceof\n-                            java.net.SocketPermission) &&\n-                            perm.getActions().contains(\"connect\")) {\n-                            sm.checkConnect(url.getHost(), url.getPort());\n-                        } else {\n-                            throw se;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        return result;\n+        return fileCache.get(urlKey(url));\n@@ -266,12 +237,0 @@\n-    private Permission getPermission(JarFile jarFile) {\n-        try {\n-            URLConnection uc = getConnection(jarFile);\n-            if (uc != null)\n-                return uc.getPermission();\n-        } catch (IOException ioe) {\n-            \/\/ gulp\n-        }\n-\n-        return null;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":1,"deletions":42,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,4 +177,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkListen(isa.getPort());\n@@ -202,1 +198,1 @@\n-        return Net.getRevealedLocalAddress(localAddress);\n+        return localAddress;\n@@ -284,1 +280,1 @@\n-                sb.append(Net.getRevealedLocalAddressAsString(localAddress));\n+                sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousServerSocketChannelImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -435,5 +435,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    sm.checkListen(isa.getPort());\n-                }\n@@ -454,1 +449,1 @@\n-         return Net.getRevealedLocalAddress(localAddress);\n+         return localAddress;\n@@ -598,2 +593,1 @@\n-                    sb.append(\n-                            Net.getRevealedLocalAddressAsString(localAddress));\n+                    sb.append(localAddress.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -207,5 +207,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -310,1 +306,0 @@\n-        UnixDomainSockets.checkPermission();\n@@ -341,4 +336,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkListen(isa.getPort());\n@@ -427,1 +418,0 @@\n-            UnixDomainSockets.checkPermission();\n@@ -499,10 +489,0 @@\n-\n-            \/\/ check permitted to accept connections from the remote address\n-            if (isNetSocket()) {\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    InetSocketAddress isa = (InetSocketAddress) sa;\n-                    sm.checkAccept(isa.getAddress().getHostAddress(), isa.getPort());\n-                }\n-            }\n@@ -753,3 +733,1 @@\n-                    sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                } else {\n-                    sb.append(Net.getRevealedLocalAddressAsString(addr));\n+                    sb.append(addr);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":24,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -248,5 +248,1 @@\n-            if (isUnixSocket()) {\n-                return UnixDomainSockets.getRevealedLocalAddress(localAddress);\n-            } else {\n-                return Net.getRevealedLocalAddress(localAddress);\n-            }\n+            return localAddress;\n@@ -816,1 +812,0 @@\n-        UnixDomainSockets.checkPermission();\n@@ -838,5 +833,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkListen(isa.getPort());\n-        }\n@@ -928,1 +918,0 @@\n-            UnixDomainSockets.checkPermission();\n@@ -932,5 +921,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkConnect(isa.getAddress().getHostAddress(), isa.getPort());\n-            }\n@@ -1622,5 +1606,1 @@\n-                    if (isUnixSocket()) {\n-                        sb.append(UnixDomainSockets.getRevealedLocalAddressAsString(addr));\n-                    } else {\n-                        sb.append(Net.getRevealedLocalAddressAsString(addr));\n-                    }\n+                    sb.append(addr);\n@@ -1630,1 +1610,1 @@\n-                    sb.append(remoteAddress().toString());\n+                    sb.append(remoteAddress());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":3,"deletions":23,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,4078 @@\n+---\n+# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAVA(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+java - launch a Java application\n+\n+## Synopsis\n+\n+To launch a class file:\n+\n+`java` \\[*options*\\] *mainclass* \\[*args* ...\\]\n+\n+To launch the main class in a JAR file:\n+\n+`java` \\[*options*\\] `-jar` *jarfile* \\[*args* ...\\]\n+\n+To launch the main class in a module:\n+\n+`java` \\[*options*\\] `-m` *module*\\[`\/`*mainclass*\\] \\[*args* ...\\]\n+\n+or\n+\n+`java` \\[*options*\\] `--module` *module*\\[`\/`*mainclass*\\] \\[*args* ...\\]\n+\n+To launch a source-file program:\n+\n+`java` \\[*options*\\] *source-file* \\[*args* ...\\]\n+\n+*options*\n+:   Optional: Specifies command-line options separated by spaces. See [Overview\n+    of Java Options] for a description of available\n+    options.\n+\n+*mainclass*\n+:   Specifies the name of the class to be launched. Command-line entries\n+    following `classname` are the arguments for the main method.\n+\n+`-jar` *jarfile*\n+:   Executes a program encapsulated in a JAR file. The *jarfile* argument is\n+    the name of a JAR file with a manifest that contains a line in the form\n+    `Main-Class:`*classname* that defines the class with the\n+    `public static void main(String[] args)` method that serves as your\n+    application's starting point. When you use `-jar`, the specified JAR file\n+    is the source of all user classes, and other class path settings are\n+    ignored. If you're using JAR files, then see [jar](jar.html).\n+\n+`-m` or `--module` *module*\\[`\/`*mainclass*\\]\n+:   Executes the main class in a module specified by *mainclass* if it is\n+    given, or, if it is not given, the value in the *module*. In other words,\n+    *mainclass* can be used when it is not specified by the module, or to\n+    override the value when it is specified.\n+\n+    See [Standard Options for Java].\n+\n+*source-file*\n+:   Only used to launch a source-file program. Specifies the source file\n+    that contains the main class when using source-file mode. See [Using\n+    Source-File Mode to Launch Source-Code Programs]\n+\n+*args* ...\n+:   Optional: Arguments following *mainclass*, *source-file*, `-jar` *jarfile*,\n+    and `-m` or `--module` *module*`\/`*mainclass* are passed as arguments to\n+    the main class.\n+\n+## Description\n+\n+The `java` command starts a Java application. It does this by starting the Java\n+Virtual Machine (JVM), loading the specified class, and calling that\n+class's `main()` method. The method must be declared `public` and `static`, it\n+must not return any value, and it must accept a `String` array as a parameter.\n+The method declaration has the following form:\n+\n+>   `public static void main(String[] args)`\n+\n+In source-file mode, the `java` command can launch a class declared in a source\n+file. See [Using Source-File Mode to Launch Source-Code Programs]\n+for a description of using the source-file mode.\n+\n+> **Note:** You can use the `JDK_JAVA_OPTIONS` launcher environment variable to prepend its\n+content to the actual command line of the `java` launcher. See [Using the\n+JDK\\_JAVA\\_OPTIONS Launcher Environment Variable].\n+\n+By default, the first argument that isn't an option of the `java` command is\n+the fully qualified name of the class to be called. If `-jar` is specified,\n+then its argument is the name of the JAR file containing class and resource\n+files for the application. The startup class must be indicated by the\n+`Main-Class` manifest header in its manifest file.\n+\n+Arguments after the class file name or the JAR file name are passed to the\n+`main()` method.\n+\n+### `javaw`\n+\n+**Windows:** The `javaw` command is identical to `java`, except that with\n+`javaw` there's no associated console window. Use `javaw` when you don't want a\n+command prompt window to appear. The `javaw` launcher will, however, display a\n+dialog box with error information if a launch fails.\n+\n+## Using Source-File Mode to Launch Source-Code Programs\n+\n+To launch a class declared in a source file, run the `java` launcher in\n+source-file mode. Entering source-file mode is determined by two items on the\n+`java` command line:\n+\n+-   The first item on the command line that is not an option or part of an\n+    option. In other words, the item in the command line that would otherwise\n+    be the main class name.\n+\n+-   The `--source` *version* option, if present.\n+\n+If the class identifies an existing file that has a `.java` extension, or if\n+the `--source` option is specified, then source-file mode is selected. The\n+source file is then compiled and run. The `--source` option can be used to\n+specify the source *version* or *N* of the source code. This determines the API\n+that can be used. When you set `--source` *N*, you can only use the public API\n+that was defined in JDK *N*.\n+\n+> **Note:** The valid values of *N* change for each release, with new values added and old\n+values removed. You'll get an error message if you use a value of *N* that is\n+no longer supported.\n+The supported values of *N* are the current Java SE release (`@@VERSION_SPECIFICATION@@`)\n+and a limited number of previous releases, detailed in the command-line help\n+for `javac`, under the `--source` and `--release` options.\n+\n+If the file does not have the `.java` extension, the `--source` option must be\n+used to tell the `java` command to use the source-file mode. The `--source`\n+option is used for cases when the source file is a \"script\" to be executed and\n+the name of the source file does not follow the normal naming conventions for\n+Java source files.\n+\n+In source-file mode, the effect is as though the source file is compiled into\n+memory, and the first class found in the source file is executed. Any arguments\n+placed after the name of the source file in the original command line are\n+passed to the compiled class when it is executed.\n+\n+For example, if a file were named `HelloWorld.java` and contained a class named\n+`HelloWorld`, then the source-file mode command to launch the class would be:\n+\n+>   `java HelloWorld.java`\n+\n+This use of source-file mode is informally equivalent to using the following two\n+commands:\n+\n+```\n+javac -d <memory> --source-path <source-root> HelloWorld.java\n+java --class-path <memory> HelloWorld\n+```\n+\n+where `<source-root>` is computed\n+\n+**In source-file mode, any additional command-line options are processed as\n+follows:**\n+\n+-   The launcher scans the options specified before the source file for any\n+    that are relevant in order to compile the source file.\n+\n+    This includes: `--class-path`, `--module-path`, `--add-exports`,\n+    `--add-modules`, `--limit-modules`, `--patch-module`,\n+    `--upgrade-module-path`, and any variant forms of those options. It also\n+    includes the new `--enable-preview` option, described in JEP 12.\n+\n+-   No provision is made to pass any additional options to the compiler, such\n+    as `-processor` or `-Werror`.\n+\n+-   Command-line argument files (`@`-files) may be used in the standard way.\n+    Long lists of arguments for either the VM or the program being invoked may\n+    be placed in files specified on the command-line by prefixing the filename\n+    with an `@` character.\n+\n+**In source-file mode, compilation proceeds as follows:**\n+\n+-   Any command-line options that are relevant to the compilation environment\n+    are taken into account. These include: `--class-path`\/`-classpath`\/`-cp`,\n+    `--module-path`\/`-p`, `--add-exports`, `--add-modules`, `--limit-modules`,\n+    `--patch-module`, `--upgrade-module-path`, `--enable-preview`.\n+\n+-   The root of the source tree, `<source-root>` is computed from the package\n+    of the class being launched. For example, if `HelloWorld.java` declared its classes\n+    to be in the `hello` package, then the file `HelloWorld.java` is expected\n+    to reside in the directory `somedir\/hello\/`. In this case, `somedir` is\n+    computed to be the root of the source tree.\n+\n+-   The root of the source tree serves as the source-path for compilation, so that\n+    other source files found in that tree and are needed by `HelloWorld` could be\n+    compiled.\n+\n+-   Annotation processing is disabled, as if `-proc:none` is in effect.\n+\n+-   If a version is specified, via the `--source` option, the value is used as\n+    the argument for an implicit `--release` option for the compilation. This\n+    sets both the source version accepted by compiler and the system API that\n+    may be used by the code in the source file.\n+\n+-   If `--enable-preview` is specified, the `--source N` arguments can be omitted.\n+    If the Java runtime version is `N`, then `--release N` is implied when\n+    compiling source files.\n+\n+-   If a `module-info.java` file exists in the `<source-root>` directory, its\n+    module declaration is used to define a named module that will contain all\n+    the classes compiled from `.java` files in the source tree. If\n+    `module-info.java` does not exist, all the classes compiled from source files\n+    will be compiled in the context of the unnamed module.\n+\n+-   The source file that is launched should contain one or more top-level classes, the first of\n+    which is taken as the class to be executed.\n+\n+-   For the source file that is launched, the compiler does not enforce the optional restriction defined at the end\n+    of JLS 7.6, that a type in a named package should exist in a file whose\n+    name is composed from the type name followed by the `.java` extension.\n+\n+-   If a source file contains errors, appropriate error messages are written\n+    to the standard error stream, and the launcher exits with a non-zero exit\n+    code.\n+\n+**In source-file mode, execution proceeds as follows:**\n+\n+-   The class to be executed is the first top-level class found in the source\n+    file. It must contain a declaration of an entry `main` method.\n+\n+-   The compiled classes are loaded by a custom class loader, that delegates to\n+    the application class loader. This implies that classes appearing on the\n+    application class path cannot refer to any classes declared in source files.\n+\n+-   If a `module-info.java` file exists in the `<source-root>` directory, then all\n+    the classes compiled from `.java` files in the source tree will be in that\n+    module, which will serve as the root module for the execution of the program.\n+    If `module-info.java` does not exist, the compiled classes are executed in the\n+    context of an unnamed module, as though `--add-modules=ALL-DEFAULT` is in effect.\n+    This is in addition to any other `--add-module` options that may be have been\n+    specified on the command line.\n+\n+-   Any arguments appearing after the name of the file on the command line are\n+    passed to the main method in the obvious way.\n+\n+-   It is an error if there is a class on the application class path whose name\n+    is the same as that of the class to be executed.\n+\n+See [JEP 458: Launch Multi-File Source-Code Programs](\n+https:\/\/openjdk.org\/jeps\/458) for complete details.\n+\n+## Using the JDK\\_JAVA\\_OPTIONS Launcher Environment Variable\n+\n+`JDK_JAVA_OPTIONS` prepends its content to the options parsed from the command\n+line. The content of the `JDK_JAVA_OPTIONS` environment variable is a list of\n+arguments separated by white-space characters (as determined by `isspace()`).\n+These are prepended to the command line arguments passed to `java` launcher.\n+The encoding requirement for the environment variable is the same as the `java`\n+command line on the system. `JDK_JAVA_OPTIONS` environment variable content is\n+treated in the same manner as that specified in the command line.\n+\n+Single (`'`) or double (`\"`) quotes can be used to enclose arguments that\n+contain whitespace characters. All content between the open quote and the\n+first matching close quote are preserved by simply removing the pair of quotes.\n+In case a matching quote is not found, the launcher will abort with an error\n+message. `@`-files are supported as they are specified in the command line.\n+However, as in `@`-files, use of a wildcard is not supported. In order to\n+mitigate potential misuse of `JDK_JAVA_OPTIONS` behavior, options that specify\n+the main class (such as `-jar`) or cause the `java` launcher to exit without\n+executing the main class (such as `-h`) are disallowed in the environment\n+variable. If any of these options appear in the environment variable, the\n+launcher will abort with an error message. When `JDK_JAVA_OPTIONS` is set, the\n+launcher prints a message to stderr as a reminder.\n+\n+**Example:**\n+\n+```\n+$ export JDK_JAVA_OPTIONS='-g @file1 -Dprop=value @file2 -Dws.prop=\"white spaces\"'\n+$ java -Xint @file3\n+```\n+\n+is equivalent to the command line:\n+\n+```\n+java -g @file1 -Dprop=value @file2 -Dws.prop=\"white spaces\" -Xint @file3\n+```\n+\n+## Overview of Java Options\n+\n+The `java` command supports a wide range of options in the following\n+categories:\n+\n+-   [Standard Options for Java]\\: Options guaranteed to be supported by all\n+    implementations of the Java Virtual Machine (JVM). They're used for common\n+    actions, such as checking the version of the JRE, setting the class path,\n+    enabling verbose output, and so on.\n+\n+-   [Extra Options for Java]\\: General purpose options that are specific to the\n+    Java HotSpot Virtual Machine. They aren't guaranteed to be supported by\n+    all JVM implementations, and are subject to change. These options start\n+    with `-X`.\n+\n+The advanced options aren't recommended for casual use. These are developer\n+options used for tuning specific areas of the Java HotSpot Virtual Machine\n+operation that often have specific system requirements and may require\n+privileged access to system configuration parameters. Several examples of\n+performance tuning are provided in [Performance Tuning Examples]. These\n+options aren't guaranteed to be supported by all JVM implementations and are\n+subject to change. Advanced options start with `-XX`.\n+\n+-   [Advanced Runtime Options for Java]\\: Control the runtime behavior of the\n+    Java HotSpot VM.\n+\n+-   [Advanced JIT Compiler Options for java]\\: Control the dynamic just-in-time\n+    (JIT) compilation performed by the Java HotSpot VM.\n+\n+-   [Advanced Serviceability Options for Java]\\: Enable gathering system\n+    information and performing extensive debugging.\n+\n+-   [Advanced Garbage Collection Options for Java]\\: Control how garbage\n+    collection (GC) is performed by the Java HotSpot\n+\n+Boolean options are used to either enable a feature that's disabled by default\n+or disable a feature that's enabled by default. Such options don't require a\n+parameter. Boolean `-XX` options are enabled using the plus sign\n+(`-XX:+`*OptionName*) and disabled using the minus sign (`-XX:-`*OptionName*).\n+\n+For options that require an argument, the argument may be separated from the\n+option name by a space, a colon (:), or an equal sign (=), or the argument may\n+directly follow the option (the exact syntax differs for each option). If\n+you're expected to specify the size in bytes, then you can use no suffix, or\n+use the suffix `k` or `K` for kilobytes (KB), `m` or `M` for megabytes (MB), or\n+`g` or `G` for gigabytes (GB). For example, to set the size to 8 GB, you can\n+specify either `8g`, `8192m`, `8388608k`, or `8589934592` as the argument. If\n+you are expected to specify the percentage, then use a number from 0 to 1. For\n+example, specify `0.25` for 25%.\n+\n+The following sections describe the options that are deprecated, obsolete, and\n+removed:\n+\n+-   [Deprecated Java Options]\\: Accepted and acted upon --- a warning is issued\n+    when they're used.\n+\n+-   [Obsolete Java Options]\\: Accepted but ignored --- a warning is issued when\n+    they're used.\n+\n+-   [Removed Java Options]\\: Removed --- using them results in an error.\n+\n+## Standard Options for Java\n+\n+These are the most commonly used options supported by all implementations of\n+the JVM.\n+\n+> **Note:** To specify an argument for a long option, you can use either\n+`--`*name*`=`*value* or `--`*name* *value*.\n+\n+`-agentlib:`*libname*\\[`=`*options*\\]\n+:   Loads the specified native agent library. After the library name, a\n+    comma-separated list of options specific to the library can be used.\n+    If the option `-agentlib:foo` is specified, then the JVM attempts to\n+    load the library named `foo` using the platform specific naming\n+    conventions and locations:\n+\n+    -   **Linux and other POSIX-like platforms:** The JVM attempts to load\n+         the library named `libfoo.so` in the location specified by the\n+         `LD_LIBRARY_PATH` system variable.\n+\n+    -   **macOS:** The JVM attempts to load the library named `libfoo.dylib`\n+        in the location specified by the `DYLD_LIBRARY_PATH` system variable.\n+\n+    -   **Windows:** The JVM attempts to load the library named `foo.dll` in\n+        the location specified by the `PATH` system variable.\n+\n+        The following example shows how to load the Java Debug Wire Protocol\n+        (JDWP) library and listen for the socket connection on port 8000,\n+        suspending the JVM before the main class loads:\n+\n+        >   `-agentlib:jdwp=transport=dt_socket,server=y,address=8000`\n+\n+`-agentpath:`*pathname*\\[`=`*options*\\]\n+:   Loads the native agent library specified by the absolute path name. This\n+    option is equivalent to `-agentlib` but uses the full path and file name of\n+    the library.\n+\n+`--class-path` *classpath*, `-classpath` *classpath*, or `-cp` *classpath*\n+:   Specifies a list of directories, JAR files, and ZIP archives to search\n+    for class files.\n+\n+    On Windows, semicolons (`;`) separate entities in this list;\n+    on other platforms it is a colon (`:`).\n+\n+    Specifying *classpath* overrides any setting of the `CLASSPATH` environment\n+    variable. If the class path option isn't used and *classpath* isn't set,\n+    then the user class path consists of the current directory (.).\n+\n+    As a special convenience, a class path element that contains a base name of\n+    an asterisk (\\*) is considered equivalent to specifying a list of all the\n+    files in the directory with the extension `.jar` or `.JAR` . A Java program\n+    can't tell the difference between the two invocations. For example, if the\n+    directory mydir contains `a.jar` and `b.JAR`, then the class path element\n+    mydir\/\\* is expanded to `A.jar:b.JAR`, except that the order of JAR files\n+    is unspecified. All `.jar` files in the specified directory, even hidden\n+    ones, are included in the list. A class path entry consisting of an\n+    asterisk (\\*) expands to a list of all the jar files in the current\n+    directory. The `CLASSPATH` environment variable, where defined, is\n+    similarly expanded. Any class path wildcard expansion that occurs before\n+    the Java VM is started. Java programs never see wildcards that aren't\n+    expanded except by querying the environment, such as by calling\n+    `System.getenv(\"CLASSPATH\")`.\n+\n+`--disable-@files`\n+:   Can be used anywhere on the command line, including in an argument file, to\n+    prevent further `@filename` expansion. This option stops expanding\n+    `@`-argfiles after the option.\n+\n+`--enable-preview`\n+:   Allows classes to depend on [preview features](https:\/\/docs.oracle.com\/en\/java\/javase\/12\/language\/index.html#JSLAN-GUID-5A82FE0E-0CA4-4F1F-B075-564874FE2823) of the release.\n+\n+`--enable-native-access` *module*\\[`,`*module*...\\]\n+:   Native access involves access to code or data outside the Java runtime.\n+    This is generally unsafe and, if done incorrectly, might crash the JVM or result\n+    in memory corruption. Native access can occur as a result of calling a method that\n+    is either [restricted](https:\/\/openjdk.org\/jeps\/454#Safety), or `native`.\n+    This option allows code in the specified modules to perform native access.\n+    Native access occurring in a module that has not been explicitly enabled\n+    is deemed *illegal*.\n+\n+    *module* can be a module name, or `ALL-UNNAMED` to indicate code on the class path.\n+\n+\n+-`--illegal-native-access=`*parameter*\n+:   This option specifies a mode for how illegal native access is handled:\n+\n+    > **Note:** This option will be removed in a future release.\n+\n+    -   `allow`: This mode allows illegal native access in all modules,\n+        without any warings.\n+\n+    -   `warn`: This mode is identical to `allow` except that a warning\n+        message is issued for the first illegal native access found in a module.\n+        This mode is the default for the current JDK but will change in a future\n+        release.\n+\n+    -   `deny`: This mode disables illegal native access. That is, any illegal native\n+        access causes an `IllegalCallerException`. This mode will become the default\n+        in a future release.\n+\n+    To verify that your application is ready for a future version of the JDK,\n+    run it with `--illegal-native-access=deny` along with any necessary `--enable-native-access`\n+    options.\n+\n+`--finalization=`*value*\n+:   Controls whether the JVM performs finalization of objects. Valid values\n+    are \"enabled\" and \"disabled\". Finalization is enabled by default, so the\n+    value \"enabled\" does nothing. The value \"disabled\" disables finalization,\n+    so that no finalizers are invoked.\n+\n+`--module-path` *modulepath*... or `-p` *modulepath*\n+:   Specifies where to find application modules with a list of path elements.\n+    The elements of a module path can be a file path to a module or a directory\n+    containing modules. Each module is either a modular JAR or an\n+    exploded-module directory.\n+\n+    On Windows, semicolons (`;`) separate path elements in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`--upgrade-module-path` *modulepath*...\n+:   Specifies where to find module replacements of upgradeable modules in the\n+    runtime image with a list of path elements.\n+    The elements of a module path can be a file path to a module or a directory\n+    containing modules. Each module is either a modular JAR or an\n+    exploded-module directory.\n+\n+    On Windows, semicolons (`;`) separate path elements in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`--add-modules` *module*\\[`,`*module*...\\]\n+:   Specifies the root modules to resolve in addition to the initial module.\n+    *module* can also be `ALL-DEFAULT`, `ALL-SYSTEM`, and `ALL-MODULE-PATH`.\n+\n+`--list-modules`\n+:   Lists the observable modules and then exits.\n+\n+`-d` *module\\_name* or `--describe-module` *module\\_name*\n+:   Describes a specified module and then exits.\n+\n+`--dry-run`\n+:   Creates the VM but doesn't execute the main method. This `--dry-run` option\n+    might be useful for validating the command-line options such as the module\n+    system configuration.\n+\n+`--validate-modules`\n+:   Validates all modules and exit. This option is helpful for finding\n+    conflicts and other errors with modules on the module path.\n+\n+`-D`*property*`=`*value*\n+:   Sets a system property value. The *property* variable is a string with no\n+    spaces that represents the name of the property. The *value* variable is a\n+    string that represents the value of the property. If *value* is a string\n+    with spaces, then enclose it in quotation marks (for example\n+    `-Dfoo=\"foo bar\"`).\n+\n+`-disableassertions`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\] or `-da`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\]\n+:   Disables assertions. By default, assertions are disabled in all packages\n+    and classes. With no arguments, `-disableassertions` (`-da`) disables\n+    assertions in all packages and classes. With the *packagename* argument\n+    ending in `...`, the switch disables assertions in the specified package\n+    and any subpackages. If the argument is simply `...`, then the switch\n+    disables assertions in the unnamed package in the current working\n+    directory. With the *classname* argument, the switch disables assertions in\n+    the specified class.\n+\n+    The `-disableassertions` (`-da`) option applies to all class loaders and to\n+    system classes (which don't have a class loader). There's one exception to\n+    this rule: If the option is provided with no arguments, then it doesn't\n+    apply to system classes. This makes it easy to disable assertions in all\n+    classes except for system classes. The `-disablesystemassertions` option\n+    enables you to disable assertions in all system classes. To explicitly\n+    enable assertions in specific packages or classes, use the\n+    `-enableassertions` (`-ea`) option. Both options can be used at the same\n+    time. For example, to run the `MyClass` application with assertions enabled\n+    in the package `com.wombat.fruitbat` (and any subpackages) but disabled in\n+    the class `com.wombat.fruitbat.Brickbat`, use the following command:\n+\n+    >   `java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat\n+        MyClass`\n+\n+`-disablesystemassertions` or `-dsa`\n+:   Disables assertions in all system classes.\n+\n+`-enableassertions`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\] or `-ea`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\]\n+:   Enables assertions. By default, assertions are disabled in all packages and\n+    classes. With no arguments, `-enableassertions` (`-ea`) enables assertions\n+    in all packages and classes. With the *packagename* argument ending in\n+    `...`, the switch enables assertions in the specified package and any\n+    subpackages. If the argument is simply `...`, then the switch enables\n+    assertions in the unnamed package in the current working directory. With\n+    the *classname* argument, the switch enables assertions in the specified\n+    class.\n+\n+    The `-enableassertions` (`-ea`) option applies to all class loaders and to\n+    system classes (which don't have a class loader). There's one exception to\n+    this rule: If the option is provided with no arguments, then it doesn't\n+    apply to system classes. This makes it easy to enable assertions in all\n+    classes except for system classes. The `-enablesystemassertions` option\n+    provides a separate switch to enable assertions in all system classes. To\n+    explicitly disable assertions in specific packages or classes, use the\n+    `-disableassertions` (`-da`) option. If a single command contains multiple\n+    instances of these switches, then they're processed in order, before\n+    loading any classes. For example, to run the `MyClass` application with\n+    assertions enabled only in the package `com.wombat.fruitbat` (and any\n+    subpackages) but disabled in the class `com.wombat.fruitbat.Brickbat`, use\n+    the following command:\n+\n+    >   `java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat\n+        MyClass`\n+\n+`-enablesystemassertions` or `-esa`\n+:   Enables assertions in all system classes.\n+\n+`-help`, `-h`, or `-?`\n+:   Prints the help message to the error stream.\n+\n+`--help`\n+:   Prints the help message to the output stream.\n+\n+`-javaagent:`*jarpath*\\[`=`*options*\\]\n+:   Loads the specified Java programming language agent. See `java.lang.instrument`.\n+\n+`--show-version`\n+:   Prints the product version to the output stream and continues.\n+\n+`-showversion`\n+:   Prints the product version to the error stream and continues.\n+\n+`--show-module-resolution`\n+:   Shows module resolution output during startup.\n+\n+`-splash:`*imagepath*\n+:   Shows the splash screen with the image specified by *imagepath*. HiDPI\n+    scaled images are automatically supported and used if available. The\n+    unscaled image file name, such as `image.ext`, should always be passed as\n+    the argument to the `-splash` option. The most appropriate scaled image\n+    provided is picked up automatically.\n+\n+    For example, to show the `splash.gif` file from the `images` directory when\n+    starting your application, use the following option:\n+\n+    >   `-splash:images\/splash.gif`\n+\n+    See the SplashScreen API documentation for more information.\n+\n+`-verbose:class`\n+:   Displays information about each loaded class.\n+\n+`-verbose:gc`\n+:   Displays information about each garbage collection (GC) event.\n+\n+`-verbose:jni`\n+:   Displays information about the use of native methods and other Java Native\n+    Interface (JNI) activity.\n+\n+`-verbose:module`\n+:   Displays information about the modules in use.\n+\n+`--version`\n+:   Prints product version to the output stream and exits.\n+\n+`-version`\n+:   Prints product version to the error stream and exits.\n+\n+`-X`\n+:   Prints the help on extra options to the error stream.\n+\n+`--help-extra`\n+:   Prints the help on extra options to the output stream.\n+\n+`@`*argfile*\n+:   Specifies one or more argument files prefixed by `@` used by the `java`\n+    command. It isn't uncommon for the `java` command line to be very long\n+    because of the `.jar` files needed in the classpath. The `@`*argfile*\n+    option overcomes command-line length limitations by enabling the launcher\n+    to expand the contents of argument files after shell expansion, but before\n+    argument processing. Contents in the argument files are expanded because\n+    otherwise, they would be specified on the command line until the\n+    `--disable-@files` option was encountered.\n+\n+    The argument files can also contain the main class name and all options. If\n+    an argument file contains all of the options required by the `java`\n+    command, then the command line could simply be:\n+\n+    >   `java @`*argfile*\n+\n+    See [java Command-Line Argument Files] for a description and examples of\n+    using `@`-argfiles.\n+\n+## Extra Options for Java\n+\n+The following `java` options are general purpose options that are specific to\n+the Java HotSpot Virtual Machine.\n+\n+`-Xbatch`\n+:   Disables background compilation. By default, the JVM compiles the method as\n+    a background task, running the method in interpreter mode until the\n+    background compilation is finished. The `-Xbatch` flag disables background\n+    compilation so that compilation of all methods proceeds as a foreground\n+    task until completed. This option is equivalent to\n+    `-XX:-BackgroundCompilation`.\n+\n+`-Xbootclasspath\/a:`*directories*\\|*zip*\\|*JAR-files*\n+:   Specifies a list of directories, JAR files, and ZIP archives to append to\n+    the end of the default bootstrap class path.\n+\n+    On Windows, semicolons (`;`) separate entities in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`-Xcheck:jni`\n+:   Performs additional checks for Java Native Interface (JNI) functions.\n+\n+    The following checks are considered indicative of significant problems\n+    with the native code, and the JVM terminates with an irrecoverable\n+    error in such cases:\n+\n+    - The thread doing the call is not attached to the JVM.\n+    - The thread doing the call is using the `JNIEnv` belonging to another\n+      thread.\n+    - A parameter validation check fails:\n+      - A `jfieldID`, or `jmethodID`, is detected as being invalid. For example:\n+        - Of the wrong type\n+        - Associated with the wrong class\n+      - A parameter of the wrong type is detected.\n+      - An invalid parameter value is detected. For example:\n+        - NULL where not permitted\n+        - An out-of-bounds array index, or frame capacity\n+        - A non-UTF-8 string\n+        - An invalid JNI reference\n+        - An attempt to use a `ReleaseXXX` function on a parameter not\n+          produced by the corresponding `GetXXX` function\n+\n+    The following checks only result in warnings being printed:\n+\n+    - A JNI call was made without checking for a pending exception from a\n+      previous JNI call, and the current call is not safe when an exception\n+      may be pending.\n+    - A class descriptor is in decorated format (`Lname;`) when it should not be.\n+    - A `NULL` parameter is allowed, but its use is questionable.\n+    - Calling other JNI functions in the scope of `Get\/ReleasePrimitiveArrayCritical`\n+      or `Get\/ReleaseStringCritical`\n+\n+    Expect a performance degradation when this option is used.\n+\n+`-Xcomp`\n+:   Testing mode to exercise JIT compilers. This option should not be used in production environments.\n+\n+`-Xdebug`\n+:   Does nothing; deprecated for removal in a future release.\n+\n+`-Xdiag`\n+:   Shows additional diagnostic messages.\n+\n+`-Xint`\n+:   Runs the application in interpreted-only mode. Compilation to native code\n+    is disabled, and all bytecode is executed by the interpreter. The\n+    performance benefits offered by the just-in-time (JIT) compiler aren't\n+    present in this mode.\n+\n+`-Xinternalversion`\n+:   Displays more detailed JVM version information than the `-version` option,\n+    and then exits.\n+\n+`-Xlog:`*option*\n+:   Configure or enable logging with the Java Virtual Machine (JVM) unified\n+    logging framework. See [Enable Logging with the JVM Unified Logging\n+    Framework].\n+\n+`-Xmixed`\n+:   Executes all bytecode by the interpreter except for hot methods, which are\n+    compiled to native code. On by default. Use `-Xint` to switch off.\n+\n+`-Xmn` *size*\n+:   Sets the initial and maximum size (in bytes) of the heap for the young\n+    generation (nursery) in the generational collectors. Append the letter\n+    `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or\n+    `g` or `G` to indicate gigabytes. The young generation region of the heap\n+    is used for new objects. GC is performed in this region more often than\n+    in other regions. If the size for the young generation is too small, then\n+    a lot of minor garbage collections are performed. If the size is too large,\n+    then only full garbage collections are performed, which can take a long\n+    time to complete. It is recommended that you do not set the size for the\n+    young generation for the G1 collector, and keep the size for the young\n+    generation greater than 25% and less than 50% of the overall heap size for\n+    other collectors.\n+    The following examples show how to set the initial and maximum size of\n+    young generation to 256 MB using various units:\n+\n+    ```\n+    -Xmn256m\n+    -Xmn262144k\n+    -Xmn268435456\n+    ```\n+\n+    Instead of the `-Xmn` option to set both the initial and maximum size of\n+    the heap for the young generation, you can use `-XX:NewSize` to set the\n+    initial size and `-XX:MaxNewSize` to set the maximum size.\n+\n+`-Xms` *size*\n+:   Sets the minimum and the initial size (in bytes) of the heap. This value\n+    must be a multiple of 1024 and greater than 1 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The following examples show how to set the size of\n+    allocated memory to 6 MB using various units:\n+\n+    ```\n+    -Xms6291456\n+    -Xms6144k\n+    -Xms6m\n+    ```\n+\n+    If you do not set this option, then the initial size will be set as the sum\n+    of the sizes allocated for the old generation and the young generation. The\n+    initial size of the heap for the young generation can be set using the\n+    `-Xmn` option or the `-XX:NewSize` option.\n+\n+    Note that the `-XX:InitialHeapSize` option can also be used to set the\n+    initial heap size. If it appears after `-Xms` on the command line, then the\n+    initial heap size gets set to the value specified with `-XX:InitialHeapSize`.\n+\n+`-Xmx` *size*\n+:   Specifies the maximum size (in bytes) of the heap. This value\n+    must be a multiple of 1024 and greater than 2 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is chosen at runtime based on system\n+    configuration. For server deployments, `-Xms` and `-Xmx` are often set to\n+    the same value. The following examples show how to set the maximum allowed\n+    size of allocated memory to 80 MB using various units:\n+\n+    ```\n+    -Xmx83886080\n+    -Xmx81920k\n+    -Xmx80m\n+    ```\n+\n+    The `-Xmx` option is equivalent to `-XX:MaxHeapSize`.\n+\n+`-Xnoclassgc`\n+:   Disables garbage collection (GC) of classes. This can save some GC time,\n+    which shortens interruptions during the application run. When you specify\n+    `-Xnoclassgc` at startup, the class objects in the application are left\n+    untouched during GC and are always be considered live. This can result in\n+    more memory being permanently occupied which, if not used carefully, throws\n+    an out-of-memory exception.\n+\n+`-Xrs`\n+:   Reduces the use of operating system signals by the JVM. Shutdown hooks\n+    enable the orderly shutdown of a Java application by running user cleanup\n+    code (such as closing database connections) at shutdown, even if the JVM\n+    terminates abruptly.\n+\n+    -   **Non-Windows:**\n+\n+        -   The JVM catches signals to implement shutdown hooks for unexpected\n+            termination. The JVM uses `SIGHUP`, `SIGINT`, and `SIGTERM` to\n+            initiate the running of shutdown hooks.\n+\n+        -   Applications embedding the JVM frequently need to trap signals such\n+            as `SIGINT` or `SIGTERM`, which can lead to interference with the\n+            JVM signal handlers. The `-Xrs` option is available to address this\n+            issue. When `-Xrs` is used, the signal masks for `SIGINT`,\n+            `SIGTERM`, `SIGHUP`, and `SIGQUIT` aren't changed by the JVM, and\n+            signal handlers for these signals aren't installed.\n+\n+    -   **Windows:**\n+\n+        -   The JVM watches for console control events to implement shutdown\n+            hooks for unexpected termination. Specifically, the JVM registers a\n+            console control handler that begins shutdown-hook processing and\n+            returns `TRUE` for `CTRL_C_EVENT`, `CTRL_CLOSE_EVENT`,\n+            `CTRL_LOGOFF_EVENT`, and `CTRL_SHUTDOWN_EVENT`.\n+\n+        -   The JVM uses a similar mechanism to implement the feature of\n+            dumping thread stacks for debugging purposes. The JVM uses\n+            `CTRL_BREAK_EVENT` to perform thread dumps.\n+\n+        -   If the JVM is run as a service (for example, as a servlet engine\n+            for a web server), then it can receive `CTRL_LOGOFF_EVENT` but\n+            shouldn't initiate shutdown because the operating system doesn't\n+            actually terminate the process. To avoid possible interference such\n+            as this, the `-Xrs` option can be used. When the `-Xrs` option is\n+            used, the JVM doesn't install a console control handler, implying\n+            that it doesn't watch for or process `CTRL_C_EVENT`,\n+            `CTRL_CLOSE_EVENT`, `CTRL_LOGOFF_EVENT`, or `CTRL_SHUTDOWN_EVENT`.\n+\n+    There are two consequences of specifying `-Xrs`:\n+\n+    -   **Non-Windows:** `SIGQUIT` thread dumps aren't\n+        available.\n+\n+    -   **Windows:** Ctrl + Break thread dumps aren't available.\n+\n+    User code is responsible for causing shutdown hooks to run, for example, by\n+    calling `System.exit()` when the JVM is to be terminated.\n+\n+`-Xshare:`*mode*\n+:   Sets the class data sharing (CDS) mode.\n+\n+    Possible *mode* arguments for this option include the following:\n+\n+    `auto`\n+    :   Use shared class data if possible (default).\n+\n+    `on`\n+    :   Require using shared class data, otherwise fail.\n+\n+    > **Note:** The `-Xshare:on` option is used for testing purposes only.\n+    It may cause the VM to unexpectedly exit during start-up when the CDS\n+    archive cannot be used (for example, when certain VM parameters are changed,\n+    or when a different JDK is used). This option should not be used\n+    in production environments.\n+\n+    `off`\n+    :   Do not attempt to use shared class data.\n+\n+`-XshowSettings`\n+:   Shows all settings and then continues.\n+\n+`-XshowSettings:`*category*\n+:   Shows settings and continues. Possible *category* arguments for this option\n+    include the following:\n+\n+    `all`\n+    :   Shows all categories of settings in **verbose** detail.\n+\n+    `locale`\n+    :   Shows settings related to locale.\n+\n+    `properties`\n+    :   Shows settings related to system properties.\n+\n+    `security`\n+    :   Shows all settings related to security.\n+\n+        sub-category arguments for `security` include the following:\n+\n+        *   `security:all` : shows all security settings\n+        *   `security:properties` : shows security properties\n+        *   `security:providers` : shows static security provider settings\n+        *   `security:tls` : shows TLS related security settings\n+\n+    `vm`\n+    :   Shows the settings of the JVM.\n+\n+    `system`\n+    :   **Linux only:** Shows host system or container configuration and continues.\n+\n+`-Xss` *size*\n+:   Sets the thread stack size (in bytes). Append the letter `k` or `K` to\n+    indicate KB, `m` or `M` to indicate MB, or `g` or `G` to indicate GB. The\n+    actual size may be rounded up to a multiple of the system page size as\n+    required by the operating system. The default value depends on the\n+    platform. For example:\n+\n+    -   Linux\/x64: 1024 KB\n+\n+    -   Linux\/Aarch64: 2048 KB\n+\n+    -   macOS\/x64: 1024 KB\n+\n+    -   macOS\/Aarch64: 2048 KB\n+\n+    -   Windows: The default value depends on virtual memory\n+\n+    The following examples set the thread stack size to 1024 KB in different\n+    units:\n+\n+    ```\n+    -Xss1m\n+    -Xss1024k\n+    -Xss1048576\n+    ```\n+\n+    This option is similar to `-XX:ThreadStackSize`.\n+\n+`--add-reads` *module*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to read the *target-module*, regardless of the module\n+    declaration. *target-module* can be `ALL-UNNAMED` to read all unnamed\n+    modules.\n+\n+`--add-exports` *module*`\/`*package*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to export *package* to *target-module*, regardless of\n+    module declaration. *target-module* can be `ALL-UNNAMED` to export to all\n+    unnamed modules.\n+\n+`--add-opens` *module*`\/`*package*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to open *package* to *target-module*, regardless of module\n+    declaration.\n+\n+`--limit-modules` *module*\\[`,`*module*...\\]\n+:   Specifies the limit of the universe of observable modules.\n+\n+`--patch-module` *module*`=`*file*(`;`*file*)\\*\n+:   Overrides or augments a module with classes and resources in JAR files or\n+    directories.\n+\n+`--source` *version*\n+:   Sets the version of the source in source-file mode.\n+\n+\n+`--sun-misc-unsafe-memory-access=` *value*\n+:   Allow or deny usage of unsupported API `sun.misc.Unsafe`. *value* is one of:\n+\n+    `allow`\n+    : Allow use of the memory-access methods with no warnings at run time.\n+\n+    `warn`\n+    : Allow use of the memory-access methods, but issues a warning on the first\n+      occasion that any memory-access method is used. At most one warning is\n+      issued.\n+\n+    `debug`\n+    : Allow use of the memory-access methods, but issue a one-line warning and\n+      a stack trace when any memory-access method is used.\n+\n+    `deny`\n+    : Disallow use of the memory-access methods by throwing an\n+      `UnsupportedOperationException` on every usage.\n+\n+    The default value when the option is not specified is `allow`.\n+\n+\n+## Extra Options for macOS\n+\n+The following extra options are macOS specific.\n+\n+`-XstartOnFirstThread`\n+:   Runs the `main()` method on the first (AppKit) thread.\n+\n+`-Xdock:name=`*application\\_name*\n+:   Overrides the default application name displayed in dock.\n+\n+`-Xdock:icon=`*path\\_to\\_icon\\_file*\n+:   Overrides the default icon displayed in dock.\n+\n+## Advanced Options for Java\n+\n+These `java` options can be used to enable other advanced options.\n+\n+`-XX:+UnlockDiagnosticVMOptions`\n+:   Unlocks the options intended for diagnosing the JVM. By default, this\n+    option is disabled and diagnostic options aren't available.\n+\n+    Command line options that are enabled with the use of this option are\n+    not supported. If you encounter issues while using any of these\n+    options, it is very likely that you will be required to reproduce the\n+    problem without using any of these unsupported options before Oracle\n+    Support can assist with an investigation. It is also possible that any\n+    of these options may be removed or their behavior changed without any\n+    warning.\n+\n+`-XX:+UnlockExperimentalVMOptions`\n+:   Unlocks the options that provide experimental features in the JVM.\n+    By default, this option is disabled and experimental features aren't available.\n+\n+## Advanced Runtime Options for Java\n+\n+These `java` options control the runtime behavior of the Java HotSpot VM.\n+\n+`-XX:ActiveProcessorCount=`*x*\n+:   Overrides the number of CPUs that the VM will use to calculate the size of\n+    thread pools it will use for various operations such as Garbage Collection\n+    and ForkJoinPool.\n+\n+    The VM normally determines the number of available processors from the\n+    operating system. This flag can be useful for partitioning CPU resources\n+    when running multiple Java processes in docker containers. This flag is\n+    honored even if `UseContainerSupport` is not enabled. See\n+    `-XX:-UseContainerSupport` for a description of enabling and disabling\n+    container support.\n+\n+`-XX:AllocateHeapAt=`*path*\n+:   Takes a path to the file system and uses memory mapping to allocate the\n+    object heap on the memory device. Using this option enables the HotSpot VM\n+    to allocate the Java object heap on an alternative memory device, such as\n+    an NV-DIMM, specified by the user.\n+\n+    Alternative memory devices that have the same semantics as DRAM, including\n+    the semantics of atomic operations, can be used instead of DRAM for the\n+    object heap without changing the existing application code. All other\n+    memory structures (such as the code heap, metaspace, and thread stacks)\n+    continue to reside in DRAM.\n+\n+    Some operating systems expose non-DRAM memory through the file system.\n+    Memory-mapped files in these file systems bypass the page cache and provide\n+    a direct mapping of virtual memory to the physical memory on the device.\n+    The existing heap related flags (such as `-Xmx` and `-Xms`) and\n+    garbage-collection related flags continue to work as before.\n+\n+`-XX:-CompactStrings`\n+:   Disables the Compact Strings feature. By default, this option is enabled.\n+    When this option is enabled, Java Strings containing only single-byte\n+    characters are internally represented and stored as\n+    single-byte-per-character Strings using ISO-8859-1 \/ Latin-1 encoding. This\n+    reduces, by 50%, the amount of space required for Strings containing only\n+    single-byte characters. For Java Strings containing at least one multibyte\n+    character: these are represented and stored as 2 bytes per character using\n+    UTF-16 encoding. Disabling the Compact Strings feature forces the use of\n+    UTF-16 encoding as the internal representation for all Java Strings.\n+\n+    Cases where it may be beneficial to disable Compact Strings include the\n+    following:\n+\n+    -   When it's known that an application overwhelmingly will be allocating\n+        multibyte character Strings\n+\n+    -   In the unexpected event where a performance regression is observed in\n+        migrating from Java SE 8 to Java SE 9 and an analysis shows that\n+        Compact Strings introduces the regression\n+\n+    In both of these scenarios, disabling Compact Strings makes sense.\n+\n+`-XX:CRaCCheckpointTo=`*directory*\n+:   The CRaC (Coordinated Restore at Checkpoint) Project provides checkpointing of\n+    a running Java program into an image directory. Restoring from the image should\n+    solve some of the problematic start-up and warm-up times.\n+\n+    This option defines a path to the snapshot which is currently a directory. The\n+    directory will be created if it does not exist, but no parent directories are\n+    created.\n+\n+`-XX:CRaCRestoreFrom=`*directory*\n+:   Restores a snapshot created by `-XX:CRaCCheckpointTo=`*directory*.\n+\n+`-XX:CRaCMinPid=`*value*\n+:   A desired minimal PID value for checkpoint'ed process. Ignored on restore.\n+\n+`-XX:ErrorFile=`*filename*\n+:   Specifies the path and file name to which error data is written when an\n+    irrecoverable error occurs. By default, this file is created in the current\n+    working directory and named `hs_err_pid`*pid*`.log` where *pid* is the\n+    identifier of the process that encountered the error.\n+\n+    The following example shows how to set the default log file (note that the\n+    identifier of the process is specified as `%p`):\n+\n+    >   `-XX:ErrorFile=.\/hs_err_pid%p.log`\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the error log to `\/var\/log\/java\/java_error.log`:\n+\n+        >   `-XX:ErrorFile=\/var\/log\/java\/java_error.log`\n+\n+    -   **Windows:** The following example shows how to set the error log file\n+        to `C:\/log\/java\/java_error.log`:\n+\n+        >   `-XX:ErrorFile=C:\/log\/java\/java_error.log`\n+\n+    If the file exists, and is writeable, then it will be overwritten.\n+    Otherwise, if the file can't be created in the specified directory (due to\n+    insufficient space, permission problem, or another issue), then the file is\n+    created in the temporary directory for the operating system:\n+\n+    -   **Non-Windows:** The temporary directory is `\/tmp`.\n+\n+    -   **Windows:** The temporary directory is specified by the value of the\n+        `TMP` environment variable; if that environment variable isn't defined,\n+        then the value of the `TEMP` environment variable is used.\n+\n+`-XX:+ExtensiveErrorReports`\n+:   Enables the reporting of more extensive error information in the `ErrorFile`.\n+    This option can be turned on in environments where maximal information is\n+    desired - even if the resulting logs may be quite large and\/or contain\n+    information that might be considered sensitive. The information can vary\n+    from release to release, and across different platforms. By default this\n+    option is disabled.\n+\n+`-XX:FlightRecorderOptions=`*parameter*`=`*value* (or) `-XX:FlightRecorderOptions:`*parameter*`=`*value*\n+:   Sets the parameters that control the behavior of JFR. Multiple parameters can be specified\n+    by separating them with a comma.\n+\n+    The following list contains the available JFR *parameter*`=`*value*\n+    entries:\n+\n+    `globalbuffersize=`*size*\n+    :   Specifies the total amount of primary memory used for data retention.\n+        The default value is based on the value specified for `memorysize`.\n+        Change the `memorysize` parameter to alter the size of global buffers.\n+\n+    `maxchunksize=`*size*\n+    :   Specifies the maximum size (in bytes) of the data chunks in a\n+        recording. Append `m` or `M` to specify the size in megabytes (MB), or\n+        `g` or `G` to specify the size in gigabytes (GB). By default, the\n+        maximum size of data chunks is set to 12 MB. The minimum allowed is 1\n+        MB.\n+\n+    `memorysize=`*size*\n+    :   Determines how much buffer memory should be used, and sets the\n+        `globalbuffersize` and `numglobalbuffers` parameters based on the size\n+        specified. Append `m` or `M` to specify the size in megabytes (MB), or\n+        `g` or `G` to specify the size in gigabytes (GB). By default, the\n+        memory size is set to 10 MB.\n+\n+    `numglobalbuffers`\n+    :   Specifies the number of global buffers used. The default value is based\n+        on the memory size specified. Change the `memorysize` parameter to\n+        alter the number of global buffers.\n+\n+    `old-object-queue-size=number-of-objects`\n+    :   Maximum number of old objects to track. By default, the number of\n+        objects is set to 256.\n+\n+    `preserve-repository=`{`true`\\|`false`}\n+    :   Specifies whether files stored in the disk repository should be kept\n+        after the JVM has exited. If false, files are deleted. By default,\n+        this parameter is disabled.\n+\n+    `repository=`*path*\n+    :   Specifies the repository (a directory) for temporary disk storage. By\n+        default, the system's temporary directory is used.\n+\n+    `retransform=`{`true`\\|`false`}\n+    :   Specifies whether event classes should be retransformed using JVMTI. If\n+        false, instrumentation is added when event classes are loaded. By\n+        default, this parameter is enabled.\n+\n+    `stackdepth=`*depth*\n+    :   Stack depth for stack traces. By default, the depth is set to 64 method\n+        calls. The maximum is 2048. Values greater than 64 could create\n+        significant overhead and reduce performance.\n+\n+    `threadbuffersize=`*size*\n+    :   Specifies the per-thread local buffer size (in bytes). By default, the\n+        local buffer size is set to 8 kilobytes, with a minimum value of\n+        4 kilobytes. Overriding this parameter\n+        could reduce performance and is not recommended.\n+\n+`-XX:LargePageSizeInBytes=`*size*\n+:   Sets the maximum large page size (in bytes) used by the JVM. The\n+    *size* argument must be a valid page size supported by the environment\n+    to have any effect. Append the letter `k` or `K` to indicate kilobytes,\n+    `m` or `M` to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+    By default, the size is set to 0, meaning that the JVM will use the\n+    default large page size for the environment as the maximum size for\n+    large pages. See [Large Pages].\n+\n+    The following example describes how to set the large page size to 1\n+    gigabyte (GB):\n+\n+    >   `-XX:LargePageSizeInBytes=1g`\n+\n+`-XX:MaxDirectMemorySize=`*size*\n+:   Sets the maximum total size (in bytes) of the `java.nio` package,\n+    direct-buffer allocations. Append the letter `k` or `K` to indicate\n+    kilobytes, `m` or `M` to indicate megabytes, or `g` or `G` to indicate\n+    gigabytes. If not set, the flag is ignored and the JVM chooses the size\n+    for NIO direct-buffer allocations automatically.\n+\n+    The following examples illustrate how to set the NIO size to 1024 KB in\n+    different units:\n+\n+    ```\n+    -XX:MaxDirectMemorySize=1m\n+    -XX:MaxDirectMemorySize=1024k\n+    -XX:MaxDirectMemorySize=1048576\n+    ```\n+\n+`-XX:-MaxFDLimit`\n+:   Disables the attempt to set the soft limit for the number of open file\n+    descriptors to the hard limit. By default, this option is enabled on all\n+    platforms, but is ignored on Windows. The only time that you may need to\n+    disable this is on macOS, where its use imposes a maximum of 10240, which\n+    is lower than the actual system maximum.\n+\n+`-XX:NativeMemoryTracking=`*mode*\n+:   Specifies the mode for tracking JVM native memory usage. Possible *mode*\n+    arguments for this option include the following:\n+\n+    `off`\n+    :   Instructs not to track JVM native memory usage. This is the default\n+        behavior if you don't specify the `-XX:NativeMemoryTracking` option.\n+\n+    `summary`\n+    :   Tracks memory usage only by JVM subsystems, such as Java heap, class,\n+        code, and thread.\n+\n+    `detail`\n+    :   In addition to tracking memory usage by JVM subsystems, track memory\n+        usage by individual `CallSite`, individual virtual memory region and\n+        its committed regions.\n+\n+`-XX:TrimNativeHeapInterval=`*millis*\n+:   Interval, in ms, at which the JVM will trim the native heap. Lower values\n+    will reclaim memory more eagerly at the cost of higher overhead. A value\n+    of 0 (default) disables native heap trimming.\n+    Native heap trimming is performed in a dedicated thread.\n+\n+    This option is only supported on Linux with GNU C Library (glibc).\n+\n+`-XX:+NeverActAsServerClassMachine`\n+:   Enable the \"Client VM emulation\" mode which only uses the C1 JIT compiler,\n+    a 32Mb CodeCache and the Serial GC. The maximum amount of memory that the\n+    JVM may use (controlled by the `-XX:MaxRAM=n` flag) is set to 1GB by default.\n+    The string \"emulated-client\" is added to the JVM version string.\n+\n+    By default the flag is set to `true` only on Windows in 32-bit mode and\n+    `false` in all other cases.\n+\n+    The \"Client VM emulation\" mode will not be enabled if any of the following\n+    flags are used on the command line:\n+\n+    ```\n+    -XX:{+|-}TieredCompilation\n+    -XX:CompilationMode=mode\n+    -XX:TieredStopAtLevel=n\n+    -XX:{+|-}EnableJVMCI\n+    -XX:{+|-}UseJVMCICompiler\n+    ```\n+\n+`-XX:ObjectAlignmentInBytes=`*alignment*\n+:   Sets the memory alignment of Java objects (in bytes). By default, the value\n+    is set to 8 bytes. The specified value should be a power of 2, and must be\n+    within the range of 8 and 256 (inclusive). This option makes it possible to\n+    use compressed pointers with large Java heap sizes.\n+\n+    The heap size limit in bytes is calculated as:\n+\n+    >   `4GB * ObjectAlignmentInBytes`\n+\n+    > **Note:** As the alignment value increases, the unused space between objects also\n+    increases. As a result, you may not realize any benefits from using\n+    compressed pointers with large Java heap sizes.\n+\n+`-XX:OnError=`*string*\n+:   Sets a custom command or a series of semicolon-separated commands to run\n+    when an irrecoverable error occurs. If the string contains spaces, then it\n+    must be enclosed in quotation marks.\n+\n+    -   **Non-Windows:** The following example shows how\n+        the `-XX:OnError` option can be used to run the `gcore` command to\n+        create a core image, and start the `gdb` debugger to attach to the\n+        process in case of an irrecoverable error (the `%p` designates the\n+        current process identifier):\n+\n+        >   `-XX:OnError=\"gcore %p;gdb -p %p\"`\n+\n+    -   **Windows:** The following example shows how the `-XX:OnError` option\n+        can be used to run the `userdump.exe` utility to obtain a crash dump in\n+        case of an irrecoverable error (the `%p` designates the current\n+        process identifier). This example assumes that the path to the `userdump.exe`\n+        utility is specified in the `PATH` environment variable:\n+\n+        >   `-XX:OnError=\"userdump.exe %p\"`\n+\n+`-XX:OnOutOfMemoryError=`*string*\n+:   Sets a custom command or a series of semicolon-separated commands to run\n+    when an `OutOfMemoryError` exception is first thrown. If the string\n+    contains spaces, then it must be enclosed in quotation marks. For an\n+    example of a command string, see the description of the `-XX:OnError`\n+    option.\n+\n+`-XX:+PrintCommandLineFlags`\n+:   Enables printing of ergonomically selected JVM flags that appeared on the\n+    command line. It can be useful to know the ergonomic values set by the JVM,\n+    such as the heap space size and the selected garbage collector. By default,\n+    this option is disabled and flags aren't printed.\n+\n+`-XX:+PreserveFramePointer`\n+:   Selects between using the RBP register as a general purpose register\n+    (`-XX:-PreserveFramePointer`) and using the RBP register to hold the frame\n+    pointer of the currently executing method (`-XX:+PreserveFramePointer` . If\n+    the frame pointer is available, then external profiling tools (for example,\n+    Linux perf) can construct more accurate stack traces.\n+\n+`-XX:+PrintNMTStatistics`\n+:   Enables printing of collected native memory tracking data at JVM exit when\n+    native memory tracking is enabled (see `-XX:NativeMemoryTracking`). By\n+    default, this option is disabled and native memory tracking data isn't\n+    printed.\n+\n+`-XX:SharedArchiveFile=`*path*\n+:   Specifies the path and name of the class data sharing (CDS) archive file\n+\n+    See [Application Class Data Sharing].\n+\n+`-XX:+VerifySharedSpaces`\n+:   If this option is specified, the JVM will load a CDS archive file only if it\n+    passes an integrity check based on CRC32 checksums. The purpose of this flag is\n+    to check for unintentional damage to CDS archive files in transmission or storage.\n+    To guarantee the security and proper operation of CDS, the user must\n+    ensure that the CDS archive files used by Java applications cannot be modified without\n+    proper authorization.\n+\n+`-XX:SharedArchiveConfigFile=`*shared\\_config\\_file*\n+:   Specifies additional shared data added to the archive file.\n+\n+`-XX:SharedClassListFile=`*file\\_name*\n+:   Specifies the text file that contains the names of the classes to store in\n+    the class data sharing (CDS) archive. This file contains the full name of\n+    one class per line, except slashes (`\/`) replace dots (`.`). For example,\n+    to specify the classes `java.lang.Object` and `hello.Main`, create a text\n+    file that contains the following two lines:\n+\n+    ```\n+    java\/lang\/Object\n+    hello\/Main\n+    ```\n+\n+    The classes that you specify in this text file should include the classes\n+    that are commonly used by the application. They may include any classes\n+    from the application, extension, or bootstrap class paths.\n+\n+    See [Application Class Data Sharing].\n+\n+`-XX:+ShowCodeDetailsInExceptionMessages`\n+:   Enables printing of improved `NullPointerException` messages. When an application throws a\n+    `NullPointerException`, the option enables the JVM to analyze the program's bytecode\n+    instructions to determine precisely which reference is `null`,\n+    and describes the source with a null-detail message.\n+    The null-detail message is calculated and returned by `NullPointerException.getMessage()`,\n+    and will be printed as the exception message along with\n+    the method, filename, and line number. By default, this option is enabled.\n+\n+`-XX:+ShowMessageBoxOnError`\n+:   Enables the display of a dialog box when the JVM experiences an\n+    irrecoverable error. This prevents the JVM from exiting and keeps the\n+    process active so that you can attach a debugger to it to investigate the\n+    cause of the error. By default, this option is disabled.\n+\n+`-XX:StartFlightRecording:`*parameter*`=`*value*\n+:   Starts a JFR recording for the Java application. This option is equivalent\n+    to the `JFR.start` diagnostic command that starts a recording during\n+    runtime. `-XX:StartFlightRecording:help` prints available options and\n+    example command lines. You can set the following *parameter*`=`*value*\n+    entries when starting a JFR recording:\n+\n+    `delay=`*time*\n+    :   Specifies the delay between the Java application launch time and the\n+        start of the recording. Append `s` to specify the time in seconds, `m`\n+        for minutes, `h` for hours, or `d` for days (for example, specifying\n+        `10m` means 10 minutes). By default, there's no delay, and this\n+        parameter is set to 0.\n+\n+    `disk=`{`true`\\|`false`}\n+    :   Specifies whether to write data to disk while recording. By default,\n+        this parameter is enabled.\n+\n+    `dumponexit=`{`true`\\|`false`}\n+    :   Specifies if the running recording is dumped when the JVM shuts down.\n+        If enabled and a `filename` is not entered, the recording is written to\n+        a file in the directory where the process was started. The file name is\n+        a system-generated name that contains the process ID, recording ID, and\n+        current timestamp, similar to\n+        `hotspot-pid-47496-id-1-2018_01_25_19_10_41.jfr`. By default, this\n+        parameter is disabled.\n+\n+    `duration=`*time*\n+    :   Specifies the duration of the recording. Append `s` to specify the time\n+        in seconds, `m` for minutes, `h` for hours, or `d` for days (for\n+        example, specifying `5h` means 5 hours). By default, the duration isn't\n+        limited, and this parameter is set to 0.\n+\n+    `filename=`*path*\n+    :   Specifies the path and name of the file to which the recording is\n+        written when the recording is stopped, for example:\n+\n+        -   `recording.jfr`\n+        -   `\/home\/user\/recordings\/recording.jfr`\n+        -   `c:\\recordings\\recording.jfr`\n+\n+        If %p and\/or %t is specified in the filename, it expands to the JVM's\n+        PID and the current timestamp, respectively. The filename may also be\n+        a directory in which case, the filename is generated from the PID\n+        and the current date in the specified directory.\n+\n+    `name=`*identifier*\n+    :   Takes both the name and the identifier of a recording.\n+\n+    `maxage=`*time*\n+    :   Specifies the maximum age of disk data to keep for the recording. This\n+        parameter is valid only when the `disk` parameter is set to `true`.\n+        Append `s` to specify the time in seconds, `m` for minutes, `h` for\n+        hours, or `d` for days (for example, specifying `30s` means 30\n+        seconds). By default, the maximum age isn't limited, and this parameter\n+        is set to `0s`.\n+\n+    `maxsize=`*size*\n+    :   Specifies the maximum size (in bytes) of disk data to keep for the\n+        recording. This parameter is valid only when the `disk` parameter is\n+        set to `true`. The value must not be less than the value for the\n+        `maxchunksize` parameter set with `-XX:FlightRecorderOptions`. Append\n+        `m` or `M` to specify the size in megabytes, or `g` or `G` to specify\n+        the size in gigabytes. By default, the maximum size of disk data isn't\n+        limited, and this parameter is set to `0`.\n+\n+    `path-to-gc-roots=`{`true`\\|`false`}\n+    :   Specifies whether to collect the path to garbage collection (GC) roots\n+        at the end of a recording. By default, this parameter is disabled.\n+\n+        The path to GC roots is useful for finding memory leaks, but collecting\n+        it is time-consuming. Enable this option only when you start a\n+        recording for an application that you suspect has a memory leak. If the\n+        `settings` parameter is set to `profile`, the stack trace from where\n+        the potential leaking object was allocated is included in the\n+        information collected.\n+\n+    `settings=`*path*\n+    :   Specifies the path and name of the event settings file (of type JFC).\n+        By default, the `default.jfc` file is used, which is located in\n+        `JAVA_HOME\/lib\/jfr`. This default settings file collects a predefined\n+        set of information with low overhead, so it has minimal impact on\n+        performance and can be used with recordings that run continuously.\n+\n+        A second settings file is also provided, profile.jfc, which provides\n+        more data than the default configuration, but can have more overhead\n+        and impact performance. Use this configuration for short periods of\n+        time when more information is needed.\n+\n+    You can specify values for multiple parameters by separating them with a\n+    comma. Event settings and .jfc options can be specified using the\n+    following syntax:\n+\n+    `option=`*value*\n+    :   Specifies the option value to modify. To list available options, use\n+        the `JAVA_HOME`\/bin\/jfr tool.\n+\n+    `event-setting=`*value*\n+    :   Specifies the event setting value to modify. Use the form:\n+        `<event-name>#<setting-name>=<value>`.\n+        To add a new event setting, prefix the event name with '+'.\n+\n+    You can specify values for multiple event settings and .jfc options by\n+    separating them with a comma. In case of a conflict between a parameter\n+    and a .jfc option, the parameter will take precedence. The whitespace\n+    delimiter can be omitted for timespan values, i.e. 20ms. For more\n+    information about the settings syntax, see Javadoc of the jdk.jfr\n+    package.\n+\n+    To only see warnings and errors from JFR during startup set\n+    -Xlog:jfr+startup=warning.\n+\n+`-XX:ThreadStackSize=`*size*\n+:   Sets the Java thread stack size (in kilobytes). Use of a scaling suffix,\n+    such as `k`, results in the scaling of the kilobytes value so that\n+    `-XX:ThreadStackSize=1k` sets the Java thread stack size to 1024\\*1024\n+    bytes or 1 megabyte. The default value depends on the platform. For example:\n+\n+    -   Linux\/x64: 1024 KB\n+\n+    -   Linux\/Aarch64: 2048 KB\n+\n+    -   macOS\/x64: 1024 KB\n+\n+    -   macOS\/Aarch64: 2048 KB\n+\n+    -   Windows: The default value depends on virtual memory\n+\n+    The following examples show how to set the thread stack size to 1 megabyte\n+    in different units:\n+\n+    ```\n+    -XX:ThreadStackSize=1k\n+    -XX:ThreadStackSize=1024\n+    ```\n+\n+    This option is similar to `-Xss`.\n+\n+`-XX:-UseCompressedOops`\n+:   Disables the use of compressed pointers. By default, this option is\n+    enabled, and compressed pointers are used. This will automatically limit\n+    the maximum ergonomically determined Java heap size to the maximum amount\n+    of memory that can be covered by compressed pointers. By default this range\n+    is 32 GB.\n+\n+    With compressed oops enabled, object references are represented\n+    as 32-bit offsets instead of 64-bit pointers, which typically increases\n+    performance when running the application with Java heap sizes smaller than\n+    the compressed oops pointer range. This option works only for 64-bit JVMs.\n+\n+    It's possible to use compressed pointers with Java heap sizes greater than\n+    32 GB. See the `-XX:ObjectAlignmentInBytes` option.\n+\n+`-XX:-UseContainerSupport`\n+:   **Linux only:** The VM now provides automatic container detection support, which allows the\n+    VM to determine the amount of memory and number of processors that are\n+    available to a Java process running in docker containers. It uses this\n+    information to allocate system resources. The default for this flag is `true`,\n+    and container support is enabled by default. It can be disabled\n+    with `-XX:-UseContainerSupport`.\n+\n+    Unified Logging is available to help to diagnose issues related to this\n+    support.\n+\n+    Use `-Xlog:os+container=trace` for maximum logging of container\n+    information. See [Enable Logging with the JVM Unified Logging Framework]\n+    for a description of using Unified Logging.\n+\n+`-XX:+UseLargePages`\n+:   Enables the use of large page memory. By default, this option is disabled\n+    and large page memory isn't used.\n+\n+    See [Large Pages].\n+\n+`-XX:+UseTransparentHugePages`\n+:   **Linux only:** Enables the use of large pages that can dynamically grow or\n+    shrink. This option is disabled by default. You may encounter performance\n+    problems with transparent huge pages as the OS moves other pages around to\n+    create huge pages; this option is made available for experimentation.\n+\n+`-XX:+AllowUserSignalHandlers`\n+:   **Non-Windows:** Enables installation of signal handlers by the application. By default,\n+    this option is disabled and the application isn't allowed to install signal\n+    handlers.\n+\n+`-XX:VMOptionsFile=`*filename*\n+:   Allows user to specify VM options in a file, for example,\n+    `java -XX:VMOptionsFile=\/var\/my_vm_options HelloWorld`.\n+\n+`-XX:UseBranchProtection=`*mode*\n+:   **Linux AArch64 only:** Specifies the branch protection mode.\n+    All options other than\n+    `none` require the VM to have been built with branch protection\n+    enabled. In addition, for full protection, any native libraries\n+    provided by applications should be compiled with the same level\n+    of protection.\n+\n+    Possible *mode* arguments for this option include the following:\n+\n+    `none`\n+    : Do not use branch protection. This is the default value.\n+\n+    `standard`\n+    : Enables all branch protection modes available on the current platform.\n+\n+    `pac-ret`\n+    : Enables protection against ROP based attacks. (AArch64 8.3+ only)\n+\n+## Advanced JIT Compiler Options for java\n+\n+These `java` options control the dynamic just-in-time (JIT) compilation\n+performed by the Java HotSpot VM.\n+\n+`-XX:AllocateInstancePrefetchLines=`*lines*\n+:   Sets the number of lines to prefetch ahead of the instance allocation\n+    pointer. By default, the number of lines to prefetch is set to 1:\n+\n+    >   `-XX:AllocateInstancePrefetchLines=1`\n+\n+\n+`-XX:AllocatePrefetchDistance=`*size*\n+:   Sets the size (in bytes) of the prefetch distance for object allocation.\n+    Memory about to be written with the value of new objects is prefetched up\n+    to this distance starting from the address of the last allocated object.\n+    Each Java thread has its own allocation point.\n+\n+    Negative values denote that prefetch distance is chosen based on the\n+    platform. Positive values are bytes to prefetch. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is set to -1.\n+\n+    The following example shows how to set the prefetch distance to 1024 bytes:\n+\n+    >   `-XX:AllocatePrefetchDistance=1024`\n+\n+\n+`-XX:AllocatePrefetchInstr=`*instruction*\n+:   Sets the prefetch instruction to prefetch ahead of the allocation pointer.\n+    Possible values are from 0 to 3. The actual instructions behind the values\n+    depend on the platform. By default, the prefetch instruction is set to 0:\n+\n+    >   `-XX:AllocatePrefetchInstr=0`\n+\n+\n+`-XX:AllocatePrefetchLines=`*lines*\n+:   Sets the number of cache lines to load after the last object allocation by\n+    using the prefetch instructions generated in compiled code. The default\n+    value is 1 if the last allocated object was an instance, and 3 if it was an\n+    array.\n+\n+    The following example shows how to set the number of loaded cache lines to\n+    5:\n+\n+    >   `-XX:AllocatePrefetchLines=5`\n+\n+\n+`-XX:AllocatePrefetchStepSize=`*size*\n+:   Sets the step size (in bytes) for sequential prefetch instructions. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, `g` or `G` to indicate gigabytes. By default, the step size is\n+    set to 16 bytes:\n+\n+    >   `-XX:AllocatePrefetchStepSize=16`\n+\n+\n+`-XX:AllocatePrefetchStyle=`*style*\n+:   Sets the generated code style for prefetch instructions. The *style*\n+    argument is an integer from 0 to 3:\n+\n+    `0`\n+    :   Don't generate prefetch instructions.\n+\n+    `1`\n+    :   Execute prefetch instructions after each allocation. This is the\n+        default setting.\n+\n+    `2`\n+    :   Use the thread-local allocation block (TLAB) watermark pointer to\n+        determine when prefetch instructions are executed.\n+\n+    `3`\n+    :   Generate one prefetch instruction per cache line.\n+\n+\n+`-XX:+BackgroundCompilation`\n+:   Enables background compilation. This option is enabled by default. To\n+    disable background compilation, specify `-XX:-BackgroundCompilation` (this\n+    is equivalent to specifying `-Xbatch`).\n+\n+`-XX:CICompilerCount=`*threads*\n+:   Sets the number of compiler threads to use for compilation.\n+    By default, the number of compiler threads is selected automatically\n+    depending on the number of CPUs and memory available for compiled code.\n+    The following example shows how to set the number of threads to 2:\n+\n+    >   `-XX:CICompilerCount=2`\n+\n+`-XX:+UseDynamicNumberOfCompilerThreads`\n+:   Dynamically create compiler thread up to the limit specified by `-XX:CICompilerCount`.\n+    This option is enabled by default.\n+\n+`-XX:CompileCommand=`*command*`,`*method*\\[`,`*option*\\]\n+:   Specifies a *command* to perform on a *method*. For example, to exclude the\n+    `indexOf()` method of the `String` class from being compiled, use the\n+    following:\n+\n+    >   `-XX:CompileCommand=exclude,java\/lang\/String.indexOf`\n+\n+    Note that the full class name is specified, including all packages and\n+    subpackages separated by a slash (`\/`). For easier cut-and-paste\n+    operations, it's also possible to use the method name format produced by\n+    the `-XX:+PrintCompilation` and `-XX:+LogCompilation` options:\n+\n+    >   `-XX:CompileCommand=exclude,java.lang.String::indexOf`\n+\n+    If the method is specified without the signature, then the command is\n+    applied to all methods with the specified name. However, you can also\n+    specify the signature of the method in the class file format. In this case,\n+    you should enclose the arguments in quotation marks, because otherwise the\n+    shell treats the semicolon as a command end. For example, if you want to\n+    exclude only the `indexOf(String)` method of the `String` class from being\n+    compiled, use the following:\n+\n+    >   `-XX:CompileCommand=\"exclude,java\/lang\/String.indexOf,(Ljava\/lang\/String;)I\"`\n+\n+    You can also use the asterisk (\\*) as a wildcard for class and method\n+    names. For example, to exclude all `indexOf()` methods in all classes from\n+    being compiled, use the following:\n+\n+    >   `-XX:CompileCommand=exclude,*.indexOf`\n+\n+    The commas and periods are aliases for spaces, making it easier to pass\n+    compiler commands through a shell. You can pass arguments to\n+    `-XX:CompileCommand` using spaces as separators by enclosing the argument\n+    in quotation marks:\n+\n+    >   `-XX:CompileCommand=\"exclude java\/lang\/String indexOf\"`\n+\n+    Note that after parsing the commands passed on the command line using the\n+    `-XX:CompileCommand` options, the JIT compiler then reads commands from the\n+    `.hotspot_compiler` file. You can add commands to this file or specify a\n+    different file using the `-XX:CompileCommandFile` option.\n+\n+    To add several commands, either specify the `-XX:CompileCommand` option\n+    multiple times, or separate each argument with the new line separator\n+    (`\\n`). The following commands are available:\n+\n+    `break`\n+    :   Sets a breakpoint when debugging the JVM to stop at the beginning of\n+        compilation of the specified method.\n+\n+    `compileonly`\n+    :   Excludes all methods from compilation except for the specified method.\n+        As an alternative, you can use the `-XX:CompileOnly` option, which lets\n+        you specify several methods.\n+\n+    `dontinline`\n+    :   Prevents inlining of the specified method.\n+\n+    `exclude`\n+    :   Excludes the specified method from compilation.\n+\n+    `help`\n+    :   Prints a help message for the `-XX:CompileCommand` option.\n+\n+    `inline`\n+    :   Attempts to inline the specified method.\n+\n+    `log`\n+    :   Excludes compilation logging (with the `-XX:+LogCompilation` option)\n+        for all methods except for the specified method. By default, logging is\n+        performed for all compiled methods.\n+\n+    `option`\n+    :   Passes a JIT compilation option to the specified method in place of the\n+        last argument (`option`). The compilation option is set at the end,\n+        after the method name. For example, to enable the\n+        `BlockLayoutByFrequency` option for the `append()` method of the\n+        `StringBuffer` class, use the following:\n+\n+        >   `-XX:CompileCommand=option,java\/lang\/StringBuffer.append,BlockLayoutByFrequency`\n+\n+        You can specify multiple compilation options, separated by commas or\n+        spaces.\n+\n+    `print`\n+    :   Prints generated assembler code after compilation of the specified\n+        method.\n+\n+    `quiet`\n+    :   Instructs not to print the compile commands. By default, the commands\n+        that you specify with the `-XX:CompileCommand` option are printed; for\n+        example, if you exclude from compilation the `indexOf()` method of the\n+        `String` class, then the following is printed to standard output:\n+\n+        >   `CompilerOracle: exclude java\/lang\/String.indexOf`\n+\n+        You can suppress this by specifying the `-XX:CompileCommand=quiet`\n+        option before other `-XX:CompileCommand` options.\n+\n+`-XX:CompileCommandFile=`*filename*\n+:   Sets the file from which JIT compiler commands are read. By default, the\n+    `.hotspot_compiler` file is used to store commands performed by the JIT\n+    compiler.\n+\n+    Each line in the command file represents a command, a class name, and a\n+    method name for which the command is used. For example, this line prints\n+    assembly code for the `toString()` method of the `String` class:\n+\n+    >   `print java\/lang\/String toString`\n+\n+    If you're using commands for the JIT compiler to perform on methods, then\n+    see the `-XX:CompileCommand` option.\n+\n+`-XX:CompilerDirectivesFile=`*file*\n+:   Adds directives from a file to the directives stack when a program starts.\n+    See [Compiler Control](https:\/\/docs.oracle.com\/en\/java\/javase\/12\/vm\/compiler-control1.html#GUID-94AD8194-786A-4F19-BFFF-278F8E237F3A).\n+\n+    The `-XX:CompilerDirectivesFile` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+\n+`-XX:+CompilerDirectivesPrint`\n+:   Prints the directives stack when the program starts or when a new directive\n+    is added.\n+\n+    The `-XX:+CompilerDirectivesPrint` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+`-XX:CompileOnly=`*methods*\n+:   Sets the list of methods (separated by commas) to which compilation should\n+    be restricted. Only the specified methods are compiled.\n+\n+    `-XX:CompileOnly=method1,method2,...,methodN` is an alias for:\n+    ```\n+    -XX:CompileCommand=compileonly,method1\n+    -XX:CompileCommand=compileonly,method2\n+    ...\n+    -XX:CompileCommand=compileonly,methodN\n+    ```\n+\n+`-XX:CompileThresholdScaling=`*scale*\n+:   Provides unified control of first compilation. This option controls when\n+    methods are first compiled for both the tiered and the nontiered modes of\n+    operation. The `CompileThresholdScaling` option has a floating point value\n+    between 0 and +Inf and scales the thresholds corresponding to the current\n+    mode of operation (both tiered and nontiered). Setting\n+    `CompileThresholdScaling` to a value less than 1.0 results in earlier\n+    compilation while values greater than 1.0 delay compilation. Setting\n+    `CompileThresholdScaling` to 0 is equivalent to disabling compilation.\n+\n+`-XX:CPUFeatures=`*0xnumber*\n+:   CPU feature set, use `-XX:CPUFeatures=`*0xnumber* with `-XX:CRaCCheckpointTo` when\n+    you get an error during `-XX:CRaCRestoreFrom` on a different machine.\n+    `-XX:CPUFeatures=native` is the default.\n+    `-XX:CPUFeatures=generic` is compatible with any CPU but not as slow\n+    as `-XX:CPUFeatures=0`.\n+\n+`-XX:+DoEscapeAnalysis`\n+:   Enables the use of escape analysis. This option is enabled by default. To\n+    disable the use of escape analysis, specify `-XX:-DoEscapeAnalysis`.\n+\n+`-XX:InitialCodeCacheSize=`*size*\n+:   Sets the initial code cache size (in bytes). Append the letter `k` or `K`\n+    to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G` to\n+    indicate gigabytes. The default value depends on the platform. The initial code\n+    cache size shouldn't be less than the system's minimal memory page size.\n+    The following example shows how to set the initial code cache size to 32\n+    KB:\n+\n+    >   `-XX:InitialCodeCacheSize=32k`\n+\n+`-XX:+Inline`\n+:   Enables method inlining. This option is enabled by default to increase\n+    performance. To disable method inlining, specify `-XX:-Inline`.\n+\n+`-XX:InlineSmallCode=`*size*\n+:   Sets the maximum code size (in bytes) for already compiled methods\n+    that may be inlined. This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes,\n+    `m` or `M` to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+    The default value depends on the platform and on whether tiered compilation\n+    is enabled. In the following example it is set to 1000 bytes:\n+\n+    >   `-XX:InlineSmallCode=1000`\n+\n+`-XX:+LogCompilation`\n+:   Enables logging of compilation activity to a file named `hotspot.log` in\n+    the current working directory. You can specify a different log file path\n+    and name using the `-XX:LogFile` option.\n+\n+    By default, this option is disabled and compilation activity isn't logged.\n+    The `-XX:+LogCompilation` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+    You can enable verbose diagnostic output with a message printed to the\n+    console every time a method is compiled by using the\n+    `-XX:+PrintCompilation` option.\n+\n+\n+`-XX:FreqInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a hot method to be inlined.\n+    This flag only applies to the C2 compiler. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. The default value depends\n+    on the platform. In the following example it is set to 325 bytes:\n+\n+    >   `-XX:FreqInlineSize=325`\n+\n+\n+`-XX:MaxInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a cold method to be inlined.\n+    This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. By default, the maximum\n+    bytecode size is set to 35 bytes:\n+\n+    >   `-XX:MaxInlineSize=35`\n+\n+`-XX:C1MaxInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a cold method to be inlined.\n+    This flag only applies to the C1 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. By default, the maximum\n+    bytecode size is set to 35 bytes:\n+\n+    >   `-XX:MaxInlineSize=35`\n+\n+`-XX:MaxTrivialSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a trivial method to be\n+    inlined. This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. By default, the\n+    maximum bytecode size of a trivial method is set to 6 bytes:\n+\n+    >   `-XX:MaxTrivialSize=6`\n+\n+`-XX:C1MaxTrivialSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a trivial method to be\n+    inlined. This flag only applies to the C1 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. By default, the\n+    maximum bytecode size of a trivial method is set to 6 bytes:\n+\n+    >   `-XX:MaxTrivialSize=6`\n+\n+`-XX:MaxNodeLimit=`*nodes*\n+:   Sets the maximum number of nodes to be used during single method\n+    compilation. By default the value depends on the features enabled.\n+    In the following example the maximum number of nodes is set to 100,000:\n+\n+    >   `-XX:MaxNodeLimit=100000`\n+\n+`-XX:NonNMethodCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing nonmethod code.\n+\n+    A nonmethod code segment containing nonmethod code, such as compiler\n+    buffers and the bytecode interpreter. This code type stays in the code\n+    cache forever. This flag is used only if `-XX:SegmentedCodeCache` is\n+    enabled.\n+\n+`-XX:NonProfiledCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing nonprofiled methods.\n+    This flag is used only if `-XX:SegmentedCodeCache` is enabled.\n+\n+`-XX:+OptimizeStringConcat`\n+:   Enables the optimization of `String` concatenation operations. This option\n+    is enabled by default. To disable the optimization of `String`\n+    concatenation operations, specify `-XX:-OptimizeStringConcat`.\n+\n+`-XX:+PrintAssembly`\n+:   Enables printing of assembly code for bytecoded and native methods by using\n+    the external `hsdis-<arch>.so` or `.dll` library. For 64-bit VM on Windows,\n+    it's `hsdis-amd64.dll`. This lets you to see the generated code, which may\n+    help you to diagnose performance issues.\n+\n+    By default, this option is disabled and assembly code isn't printed. The\n+    `-XX:+PrintAssembly` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+`-XX:ProfiledCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing profiled methods.\n+    This flag is used only if `-XX:SegmentedCodeCache` is enabled.\n+\n+`-XX:+PrintCompilation`\n+:   Enables verbose diagnostic output from the JVM by printing a message to the\n+    console every time a method is compiled. This lets you to see which methods\n+    actually get compiled. By default, this option is disabled and diagnostic\n+    output isn't printed.\n+\n+    You can also log compilation activity to a file by using the\n+    `-XX:+LogCompilation` option.\n+\n+`-XX:+PrintInlining`\n+:   Enables printing of inlining decisions. This let's you see which methods\n+    are getting inlined.\n+\n+    By default, this option is disabled and inlining information isn't printed.\n+    The `-XX:+PrintInlining` option has to be used together with the\n+    `-XX:+UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM\n+    options.\n+\n+`-XX:ReservedCodeCacheSize=`*size*\n+:   Sets the maximum code cache size (in bytes) for JIT-compiled code. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. The default maximum code\n+    cache size is 240 MB; if you disable tiered compilation with the option\n+    `-XX:-TieredCompilation`, then the default size is 48 MB. This option has a\n+    limit of 2 GB; otherwise, an error is generated. The maximum code cache\n+    size shouldn't be less than the initial code cache size; see the option\n+    `-XX:InitialCodeCacheSize`.\n+\n+`-XX:+SegmentedCodeCache`\n+:   Enables segmentation of the code cache, without which the code cache\n+    consists of one large segment. With `-XX:+SegmentedCodeCache`, separate\n+    segments will be used for non-method, profiled method, and non-profiled\n+    method code. The segments are not resized at runtime. The advantages are\n+    better control of the memory footprint, reduced code fragmentation, and\n+    better CPU iTLB (instruction translation lookaside buffer) and instruction\n+    cache behavior due to improved locality.\n+\n+    The feature is enabled by default if tiered compilation is enabled\n+    (`-XX:+TieredCompilation` ) and the reserved code cache size\n+    (`-XX:ReservedCodeCacheSize`) is at least 240 MB.\n+\n+`-XX:+ShowCPUFeatures`\n+:   Show features of this CPU to be possibly used for the\n+    `-XX:CPUFeatures=`*0xnumber* option.\n+\n+`-XX:StartAggressiveSweepingAt=`*percent*\n+:   Forces stack scanning of active methods to aggressively remove unused code\n+    when only the given percentage of the code cache is free. The default value\n+    is 10%.\n+\n+`-XX:-TieredCompilation`\n+:   Disables the use of tiered compilation. By default, this option is enabled.\n+\n+`-XX:UseSSE=`*version*\n+:   Enables the use of SSE instruction set of a specified version.\n+    Is set by default to the highest supported version available (x86 only).\n+\n+`-XX:UseAVX=`*version*\n+:   Enables the use of AVX instruction set of a specified version.\n+    Is set by default to the highest supported version available (x86 only).\n+\n+`-XX:+UseAES`\n+:   Enables hardware-based AES intrinsics for hardware that supports it.\n+    This option is on by default on hardware that has the necessary instructions.\n+    The `-XX:+UseAES` is used in conjunction with `UseAESIntrinsics`. Flags\n+    that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAESIntrinsics`\n+:   Enables AES intrinsics. Specifying `-XX:+UseAESIntrinsics` is equivalent to\n+    also enabling `-XX:+UseAES`. To disable hardware-based AES intrinsics,\n+    specify `-XX:-UseAES -XX:-UseAESIntrinsics`. For example, to enable hardware\n+    AES, use the following flags:\n+\n+    >   `-XX:+UseAES -XX:+UseAESIntrinsics`\n+\n+    Flags that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAESCTRIntrinsics`\n+:   Analogous to `-XX:+UseAESIntrinsics` enables AES\/CTR intrinsics.\n+\n+`-XX:+UseGHASHIntrinsics`\n+:   Controls the use of GHASH intrinsics. Enabled by default on platforms that\n+    support the corresponding instructions.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseChaCha20Intrinsics`\n+:   Enable ChaCha20 intrinsics. This option is on by default for supported\n+    platforms.  To disable ChaCha20 intrinsics, specify\n+    `-XX:-UseChaCha20Intrinsics`. Flags that control intrinsics now require\n+    the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UsePoly1305Intrinsics`\n+:   Enable Poly1305 intrinsics. This option is on by default for supported\n+    platforms.  To disable Poly1305 intrinsics, specify\n+    `-XX:-UsePoly1305Intrinsics`. Flags that control intrinsics now require\n+    the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseBASE64Intrinsics`\n+:   Controls the use of accelerated BASE64 encoding routines for `java.util.Base64`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAdler32Intrinsics`\n+:   Controls the use of Adler32 checksum algorithm intrinsic for `java.util.zip.Adler32`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCRC32Intrinsics`\n+:   Controls the use of CRC32 intrinsics for `java.util.zip.CRC32`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCRC32CIntrinsics`\n+:   Controls the use of CRC32C intrinsics for `java.util.zip.CRC32C`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA`\n+:   Enables hardware-based intrinsics for SHA crypto hash functions for some\n+    hardware. The `UseSHA` option is used in conjunction with the\n+    `UseSHA1Intrinsics`, `UseSHA256Intrinsics`, and `UseSHA512Intrinsics`\n+    options.\n+\n+    The `UseSHA` and `UseSHA*Intrinsics` flags are enabled by default on\n+    machines that support the corresponding instructions.\n+\n+    This feature is applicable only when using the `sun.security.provider.Sun`\n+    provider for SHA operations. Flags that control intrinsics now require the\n+    option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+    To disable all hardware-based SHA intrinsics, specify the `-XX:-UseSHA`. To\n+    disable only a particular SHA intrinsic, use the appropriate corresponding\n+    option. For example: `-XX:-UseSHA256Intrinsics`.\n+\n+`-XX:+UseSHA1Intrinsics`\n+:   Enables intrinsics for SHA-1 crypto hash function. Flags that control\n+    intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA256Intrinsics`\n+:   Enables intrinsics for SHA-224 and SHA-256 crypto hash functions. Flags\n+    that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA512Intrinsics`\n+:   Enables intrinsics for SHA-384 and SHA-512 crypto hash functions. Flags\n+    that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseMathExactIntrinsics`\n+:   Enables intrinsification of various `java.lang.Math.*Exact()` functions.\n+    Enabled by default.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseMultiplyToLenIntrinsic`\n+:   Enables intrinsification of `BigInteger.multiplyToLen()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseSquareToLenIntrinsic\n+:   Enables intrinsification of `BigInteger.squareToLen()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMulAddIntrinsic\n+:   Enables intrinsification of `BigInteger.mulAdd()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMontgomeryMultiplyIntrinsic\n+:   Enables intrinsification of `BigInteger.montgomeryMultiply()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMontgomerySquareIntrinsic\n+:   Enables intrinsification of `BigInteger.montgomerySquare()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCMoveUnconditionally`\n+:   Generates CMove (scalar and vector) instructions regardless of\n+    profitability analysis.\n+\n+`-XX:+UseCodeCacheFlushing`\n+:   Enables flushing of the code cache before shutting down the compiler. This\n+    option is enabled by default. To disable flushing of the code cache before\n+    shutting down the compiler, specify `-XX:-UseCodeCacheFlushing`.\n+\n+`-XX:+UseCondCardMark`\n+:   Enables checking if the card is already marked before updating the card\n+    table. This option is disabled by default. It should be used only on\n+    machines with multiple sockets, where it increases the performance of Java\n+    applications that rely on concurrent operations.\n+\n+`-XX:+UseCountedLoopSafepoints`\n+:   Keeps safepoints in counted loops. Its default value depends on whether the\n+    selected garbage collector requires low latency safepoints.\n+\n+`-XX:LoopStripMiningIter=`*number_of_iterations*\n+:   Controls the number of iterations in the inner strip mined loop. Strip mining\n+    transforms counted loops into two level nested loops. Safepoints are kept\n+    in the outer loop while the inner loop can execute at full speed. This option\n+    controls the maximum number of iterations in the inner loop. The default value\n+    is 1,000.\n+\n+`-XX:LoopStripMiningIterShortLoop=`*number_of_iterations*\n+:   Controls loop strip mining optimization. Loops with the number of iterations\n+    less than specified will not have safepoints in them. Default value is\n+    1\/10th of `-XX:LoopStripMiningIter`.\n+\n+`-XX:+UseFMA`\n+:   Enables hardware-based FMA intrinsics for hardware where FMA instructions\n+    are available (such as, Intel and ARM64). FMA intrinsics are\n+    generated for the `java.lang.Math.fma(`*a*`,` *b*`,` *c*`)` methods that\n+    calculate the value of `(` *a* `*` *b* `+` *c* `)` expressions.\n+\n+`-XX:+UseSuperWord`\n+:   Enables the transformation of scalar operations into superword operations.\n+    Superword is a vectorization optimization. This option is enabled by\n+    default. To disable the transformation of scalar operations into superword\n+    operations, specify `-XX:-UseSuperWord`.\n+\n+## Advanced Serviceability Options for Java\n+\n+These `java` options provide the ability to gather system information and\n+perform extensive debugging.\n+\n+`-XX:+DisableAttachMechanism`\n+:   Disables the mechanism that lets tools attach to the JVM. By default, this\n+    option is disabled, meaning that the attach mechanism is enabled and you\n+    can use diagnostics and troubleshooting tools such as `jcmd`, `jstack`,\n+    `jmap`, and `jinfo`.\n+\n+    > **Note:** The tools such as [jcmd](jcmd.html), [jinfo](jinfo.html),\n+    [jmap](jmap.html), and [jstack](jstack.html) shipped with the JDK aren't\n+    supported when using the tools from one JDK version to troubleshoot a\n+    different JDK version.\n+\n+`-XX:+DTraceAllocProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for object allocation.\n+\n+`-XX:+DTraceMethodProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for method-entry\n+    and method-exit.\n+\n+`-XX:+DTraceMonitorProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for monitor events.\n+\n+`-XX:+HeapDumpOnOutOfMemoryError`\n+:   Enables the dumping of the Java heap to a file in the current directory by\n+    using the heap profiler (HPROF) when a `java.lang.OutOfMemoryError`\n+    exception is thrown. You can explicitly set the heap dump file path and\n+    name using the `-XX:HeapDumpPath` option. By default, this option is\n+    disabled and the heap isn't dumped when an `OutOfMemoryError` exception is\n+    thrown.\n+\n+`-XX:HeapDumpPath=`*path*\n+:   Sets the path and file name for writing the heap dump provided by the heap\n+    profiler (HPROF) when the `-XX:+HeapDumpOnOutOfMemoryError` option is set.\n+    By default, the file is created in the current working directory, and it's\n+    named `java_pid<pid>.hprof` where `<pid>` is the identifier of the process\n+    that caused the error. The following example shows how to set the default\n+    file explicitly (`%p` represents the current process identifier):\n+\n+    >   `-XX:HeapDumpPath=.\/java_pid%p.hprof`\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the heap dump file to `\/var\/log\/java\/java_heapdump.hprof`:\n+\n+        >   `-XX:HeapDumpPath=\/var\/log\/java\/java_heapdump.hprof`\n+\n+    -   **Windows:** The following example shows how to set the heap dump file\n+        to `C:\/log\/java\/java_heapdump.log`:\n+\n+        >   `-XX:HeapDumpPath=C:\/log\/java\/java_heapdump.log`\n+\n+`-XX:LogFile=`*path*\n+:   Sets the path and file name to where log data is written. By default, the\n+    file is created in the current working directory, and it's named\n+    `hotspot.log`.\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the log file to `\/var\/log\/java\/hotspot.log`:\n+\n+        >   `-XX:LogFile=\/var\/log\/java\/hotspot.log`\n+\n+    -   **Windows:** The following example shows how to set the log file to\n+        `C:\/log\/java\/hotspot.log`:\n+\n+        >   `-XX:LogFile=C:\/log\/java\/hotspot.log`\n+\n+`-XX:+PrintClassHistogram`\n+:   Enables printing of a class instance histogram after one of the following\n+    events:\n+\n+    -   **Non-Windows:** `Control+\\` (`SIGQUIT`)\n+\n+    -   **Windows:** `Control+C` (`SIGTERM`)\n+\n+    By default, this option is disabled.\n+\n+    Setting this option is equivalent to running the `jmap -histo` command, or\n+    the `jcmd` *pid* `GC.class_histogram` command, where *pid* is the current\n+    Java process identifier.\n+\n+`-XX:+PrintConcurrentLocks`\n+:   Enables printing of `java.util.concurrent` locks after one of the following\n+    events:\n+\n+    -   **Non-Windows:** `Control+\\` (`SIGQUIT`)\n+\n+    -   **Windows:** `Control+C` (`SIGTERM`)\n+\n+    By default, this option is disabled.\n+\n+    Setting this option is equivalent to running the `jstack -l` command or the\n+    `jcmd` *pid* `Thread.print -l` command, where *pid* is the current Java\n+    process identifier.\n+\n+`-XX:+PrintFlagsRanges`\n+:   Prints the range specified and allows automatic testing of the values. See\n+    [Validate Java Virtual Machine Flag\n+    Arguments].\n+\n+`-XX:+PerfDataSaveToFile`\n+:   If enabled, saves [jstat](jstat.html) binary data when the Java application\n+    exits. This binary data is saved in a file named `hsperfdata_`*pid*, where\n+    *pid* is the process identifier of the Java application that you ran. Use\n+    the `jstat` command to display the performance data contained in this file\n+    as follows:\n+\n+    >   `jstat -class file:\/\/\/`*path*`\/hsperfdata_`*pid*\n+\n+    >   `jstat -gc file:\/\/\/`*path*`\/hsperfdata_`*pid*\n+\n+`-XX:+UsePerfData`\n+:   Enables the `perfdata` feature. This option is enabled by default to allow\n+    JVM monitoring and performance testing. Disabling it suppresses the\n+    creation of the `hsperfdata_userid` directories. To disable the `perfdata`\n+    feature, specify `-XX:-UsePerfData`.\n+\n+## Advanced Garbage Collection Options for Java\n+\n+These `java` options control how garbage collection (GC) is performed by the\n+Java HotSpot VM.\n+\n+`-XX:+AggressiveHeap`\n+:   Enables Java heap optimization. This sets various parameters to be\n+    optimal for long-running jobs with intensive memory allocation, based on\n+    the configuration of the computer (RAM and CPU). By default, the option\n+    is disabled and the heap sizes are configured less aggressively.\n+\n+`-XX:+AlwaysPreTouch`\n+:   Requests the VM to touch every page on the Java heap after requesting it from\n+    the operating system and before handing memory out to the application.\n+    By default, this option is disabled and all pages are committed as the\n+    application uses the heap space.\n+\n+`-XX:ConcGCThreads=`*threads*\n+:   Sets the number of threads used for concurrent GC. Sets *`threads`* to\n+    approximately 1\/4 of the number of parallel garbage collection threads. The\n+    default value depends on the number of CPUs available to the JVM.\n+\n+    For example, to set the number of threads for concurrent GC to 2, specify\n+    the following option:\n+\n+    >   `-XX:ConcGCThreads=2`\n+\n+`-XX:+DisableExplicitGC`\n+:   Enables the option that disables processing of calls to the `System.gc()`\n+    method. This option is disabled by default, meaning that calls to\n+    `System.gc()` are processed. If processing of calls to `System.gc()` is\n+    disabled, then the JVM still performs GC when necessary.\n+\n+`-XX:+ExplicitGCInvokesConcurrent`\n+:   Enables invoking of concurrent GC by using the `System.gc()` request. This\n+    option is disabled by default and can be enabled only with the `-XX:+UseG1GC` option.\n+\n+`-XX:G1AdaptiveIHOPNumInitialSamples=`*number*\n+:   When `-XX:UseAdaptiveIHOP` is enabled, this option sets the number of\n+    completed marking cycles used to gather samples until G1 adaptively\n+    determines the optimum value of `-XX:InitiatingHeapOccupancyPercent`. Before,\n+    G1 uses the value of `-XX:InitiatingHeapOccupancyPercent` directly for\n+    this purpose. The default value is 3.\n+\n+`-XX:G1HeapRegionSize=`*size*\n+:   Sets the size of the regions into which the Java heap is subdivided when\n+    using the garbage-first (G1) collector. The value is a power of 2 and can\n+    range from 1 MB to 32 MB. The default region size is determined\n+    ergonomically based on the heap size with a goal of approximately 2048\n+    regions.\n+\n+    The following example sets the size of the subdivisions to 16 MB:\n+\n+    >   `-XX:G1HeapRegionSize=16m`\n+\n+`-XX:G1HeapWastePercent=`*percent*\n+:   Sets the percentage of heap that you're willing to waste. The Java HotSpot\n+    VM doesn't initiate the mixed garbage collection cycle when the reclaimable\n+    percentage is less than the heap waste percentage. The default is 5\n+    percent.\n+\n+`-XX:G1MaxNewSizePercent=`*percent*\n+:   Sets the percentage of the heap size to use as the maximum for the young\n+    generation size. The default value is 60 percent of your Java heap.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:DefaultMaxNewGenPercent` setting.\n+\n+`-XX:G1MixedGCCountTarget=`*number*\n+:   Sets the target number of mixed garbage collections after a marking cycle\n+    to collect old regions with at most `G1MixedGCLIveThresholdPercent` live\n+    data. The default is 8 mixed garbage collections. The goal for mixed\n+    collections is to be within this target number.\n+\n+`-XX:G1MixedGCLiveThresholdPercent=`*percent*\n+:   Sets the occupancy threshold for an old region to be included in a mixed\n+    garbage collection cycle. The default occupancy is 85 percent.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:G1OldCSetRegionLiveThresholdPercent` setting.\n+\n+`-XX:G1NewSizePercent=`*percent*\n+:   Sets the percentage of the heap to use as the minimum for the young\n+    generation size. The default value is 5 percent of your Java heap.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:DefaultMinNewGenPercent` setting.\n+\n+`-XX:G1OldCSetRegionThresholdPercent=`*percent*\n+:   Sets an upper limit on the number of old regions to be collected during a\n+    mixed garbage collection cycle. The default is 10 percent of the Java heap.\n+\n+`-XX:G1ReservePercent=`*percent*\n+:   Sets the percentage of the heap (0 to 50) that's reserved as a false\n+    ceiling to reduce the possibility of promotion failure for the G1\n+    collector. When you increase or decrease the percentage, ensure that you\n+    adjust the total Java heap by the same amount. By default, this option is\n+    set to 10%.\n+\n+    The following example sets the reserved heap to 20%:\n+\n+    >   `-XX:G1ReservePercent=20`\n+\n+`-XX:+G1UseAdaptiveIHOP`\n+:   Controls adaptive calculation of the old generation occupancy to start\n+    background work preparing for an old generation collection. If enabled,\n+    G1 uses `-XX:InitiatingHeapOccupancyPercent` for the first few times as\n+    specified by the value of `-XX:G1AdaptiveIHOPNumInitialSamples`, and after\n+    that adaptively calculates a new optimum value for the initiating\n+    occupancy automatically.\n+    Otherwise, the old generation collection process always starts at the\n+    old generation occupancy determined by\n+    `-XX:InitiatingHeapOccupancyPercent`.\n+\n+    The default is enabled.\n+\n+`-XX:InitialHeapSize=`*size*\n+:   Sets the initial size (in bytes) of the memory allocation pool. This value\n+    must be either 0, or a multiple of 1024 and greater than 1 MB. Append the\n+    letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes,\n+    or `g` or `G` to indicate gigabytes. The default value is selected at run\n+    time based on the system configuration.\n+\n+    The following examples show how to set the size of allocated memory to 6 MB\n+    using various units:\n+\n+    ```\n+    -XX:InitialHeapSize=6291456\n+    -XX:InitialHeapSize=6144k\n+    -XX:InitialHeapSize=6m\n+    ```\n+\n+    If you set this option to 0, then the initial size is set as the sum of the\n+    sizes allocated for the old generation and the young generation. The size\n+    of the heap for the young generation can be set using the `-XX:NewSize`\n+    option. Note that the `-Xms` option sets both the minimum and the initial\n+    heap size of the heap. If `-Xms` appears after `-XX:InitialHeapSize` on the\n+    command line, then the initial heap size gets set to the value specified\n+    with `-Xms`.\n+\n+`-XX:InitialRAMPercentage=`*percent*\n+:   Sets the initial amount of memory that the JVM will use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is\n+    1.5625 percent.\n+\n+    The following example shows how to set the percentage of the initial\n+    amount of memory used for the Java heap:\n+\n+    >   `-XX:InitialRAMPercentage=5`\n+\n+`-XX:InitialSurvivorRatio=`*ratio*\n+:   Sets the initial survivor space ratio used by the throughput garbage\n+    collector (which is enabled by the `-XX:+UseParallelGC` option). Adaptive\n+    sizing is enabled by default with the throughput garbage collector by\n+    using the `-XX:+UseParallelGC` option, and the survivor space is resized\n+    according to the application behavior, starting with the initial value. If\n+    adaptive sizing is disabled (using the `-XX:-UseAdaptiveSizePolicy`\n+    option), then the `-XX:SurvivorRatio` option should be used to set the size\n+    of the survivor space for the entire execution of the application.\n+\n+    The following formula can be used to calculate the initial size of survivor\n+    space (S) based on the size of the young generation (Y), and the initial\n+    survivor space ratio (R):\n+\n+    >   `S=Y\/(R+2)`\n+\n+    The 2 in the equation denotes two survivor spaces. The larger the value\n+    specified as the initial survivor space ratio, the smaller the initial\n+    survivor space size.\n+\n+    By default, the initial survivor space ratio is set to 8. If the default\n+    value for the young generation space size is used (2 MB), then the initial\n+    size of the survivor space is 0.2 MB.\n+\n+    The following example shows how to set the initial survivor space ratio to\n+    4:\n+\n+    >   `-XX:InitialSurvivorRatio=4`\n+\n+`-XX:InitiatingHeapOccupancyPercent=`*percent*\n+:   Sets the percentage of the old generation occupancy (0 to 100) at which to\n+    start the first few concurrent marking cycles for the G1 garbage collector.\n+\n+    By default, the initiating value is set to 45%. A value of 0 implies\n+    nonstop concurrent GC cycles from the beginning until G1 adaptively sets this\n+    value.\n+\n+    See also the `-XX:G1UseAdaptiveIHOP` and `-XX:G1AdaptiveIHOPNumInitialSamples`\n+    options.\n+\n+    The following example shows how to set the initiating heap occupancy to 75%:\n+\n+    >   `-XX:InitiatingHeapOccupancyPercent=75`\n+\n+`-XX:MaxGCPauseMillis=`*time*\n+:   Sets a target for the maximum GC pause time (in milliseconds). This is a\n+    soft goal, and the JVM will make its best effort to achieve it. The\n+    specified value doesn't adapt to your heap size. By default, for G1 the\n+    maximum pause time target is 200 milliseconds. The other generational\n+    collectors do not use a pause time goal by default.\n+\n+    The following example shows how to set the maximum target pause time to 500\n+    ms:\n+\n+    >   `-XX:MaxGCPauseMillis=500`\n+\n+`-XX:MaxHeapSize=`*size*\n+:   Sets the maximum size (in byes) of the memory allocation pool. This value\n+    must be a multiple of 1024 and greater than 2 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is selected at run time based on\n+    the system configuration. For server deployments, the options\n+    `-XX:InitialHeapSize` and `-XX:MaxHeapSize` are often set to the same\n+    value.\n+\n+    The following examples show how to set the maximum allowed size of\n+    allocated memory to 80 MB using various units:\n+\n+    ```\n+    -XX:MaxHeapSize=83886080\n+    -XX:MaxHeapSize=81920k\n+    -XX:MaxHeapSize=80m\n+    ```\n+\n+    The `-XX:MaxHeapSize` option is equivalent to `-Xmx`.\n+\n+`-XX:MaxHeapFreeRatio=`*percent*\n+:   Sets the maximum allowed percentage of free heap space (0 to 100) after a\n+    GC event. If free heap space expands above this value, then the heap is\n+    shrunk. By default, this value is set to 70%.\n+\n+    Minimize the Java heap size by lowering the values of the parameters\n+    `MaxHeapFreeRatio` (default value is 70%) and `MinHeapFreeRatio` (default\n+    value is 40%) with the command-line options `-XX:MaxHeapFreeRatio` and\n+    `-XX:MinHeapFreeRatio`. Lowering `MaxHeapFreeRatio` to as low as 10% and\n+    `MinHeapFreeRatio` to 5% has successfully reduced the heap size without too\n+    much performance regression; however, results may vary greatly depending on\n+    your application. Try different values for these parameters until they're\n+    as low as possible yet still retain acceptable performance.\n+\n+    >   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+    Customers trying to keep the heap small should also add the option\n+    `-XX:-ShrinkHeapInSteps`. See [Performance Tuning Examples] for a\n+    description of using this option to keep the Java heap small by reducing\n+    the dynamic footprint for embedded applications.\n+\n+`-XX:MaxMetaspaceSize=`*size*\n+:   Sets the maximum amount of native memory that can be allocated for class\n+    metadata. By default, the size isn't limited. The amount of metadata for an\n+    application depends on the application itself, other running applications,\n+    and the amount of memory available on the system.\n+\n+    The following example shows how to set the maximum class metadata size to\n+    256 MB:\n+\n+    >   `-XX:MaxMetaspaceSize=256m`\n+\n+`-XX:MaxNewSize=`*size*\n+:   Sets the maximum size (in bytes) of the heap for the young generation\n+    (nursery). The default value is set ergonomically.\n+\n+`-XX:MaxRAM=`*size*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics. The default value is the maximum\n+    amount of available memory to the JVM process or 128 GB, whichever is lower.\n+\n+    The maximum amount of available memory to the JVM process is the minimum\n+    of the machine's physical memory and any constraints set by the environment\n+    (e.g. container).\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    The following example shows how to set the maximum amount of available\n+    memory for sizing the Java heap to 2 GB:\n+\n+    >   `-XX:MaxRAM=2G`\n+\n+`-XX:MaxRAMPercentage=`*percent*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is 25\n+    percent.\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    The following example shows how to set the percentage of the maximum amount\n+    of memory used for the Java heap:\n+\n+    >   `-XX:MaxRAMPercentage=75`\n+\n+`-XX:MinRAMPercentage=`*percent*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option for small heaps. A small\n+    heap is a heap of approximately 125 MB. The default value is 50 percent.\n+\n+    The following example shows how to set the percentage of the maximum amount\n+    of memory used for the Java heap for small heaps:\n+\n+    >   `-XX:MinRAMPercentage=75`\n+\n+`-XX:MaxTenuringThreshold=`*threshold*\n+:   Sets the maximum tenuring threshold for use in adaptive GC sizing. The\n+    largest value is 15. The default value is 15 for the parallel (throughput)\n+    collector.\n+\n+    The following example shows how to set the maximum tenuring threshold to\n+    10:\n+\n+    >   `-XX:MaxTenuringThreshold=10`\n+\n+`-XX:MetaspaceSize=`*size*\n+:   Sets the size of the allocated class metadata space that triggers a garbage\n+    collection the first time it's exceeded. This threshold for a garbage\n+    collection is increased or decreased depending on the amount of metadata\n+    used. The default size depends on the platform.\n+\n+`-XX:MinHeapFreeRatio=`*percent*\n+:   Sets the minimum allowed percentage of free heap space (0 to 100) after a\n+    GC event. If free heap space falls below this value, then the heap is\n+    expanded. By default, this value is set to 40%.\n+\n+    Minimize Java heap size by lowering the values of the parameters\n+    `MaxHeapFreeRatio` (default value is 70%) and `MinHeapFreeRatio` (default\n+    value is 40%) with the command-line options `-XX:MaxHeapFreeRatio` and\n+    `-XX:MinHeapFreeRatio`. Lowering `MaxHeapFreeRatio` to as low as 10% and\n+    `MinHeapFreeRatio` to 5% has successfully reduced the heap size without too\n+    much performance regression; however, results may vary greatly depending on\n+    your application. Try different values for these parameters until they're\n+    as low as possible, yet still retain acceptable performance.\n+\n+    >   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+    Customers trying to keep the heap small should also add the option\n+    `-XX:-ShrinkHeapInSteps`. See [Performance Tuning Examples] for a\n+    description of using this option to keep the Java heap small by reducing\n+    the dynamic footprint for embedded applications.\n+\n+`-XX:MinHeapSize=`*size*\n+:   Sets the minimum size (in bytes) of the memory allocation pool. This value\n+    must be either 0, or a multiple of 1024 and greater than 1 MB. Append the\n+    letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes,\n+    or `g` or `G` to indicate gigabytes. The default value is selected at run\n+    time based on the system configuration.\n+\n+    The following examples show how to set the minimum size of allocated memory\n+    to 6 MB using various units:\n+\n+    ```\n+    -XX:MinHeapSize=6291456\n+    -XX:MinHeapSize=6144k\n+    -XX:MinHeapSize=6m\n+    ```\n+\n+    If you set this option to 0, then the minimum size is set to the same value\n+    as the initial size.\n+\n+`-XX:NewRatio=`*ratio*\n+:   Sets the ratio between young and old generation sizes. By default, this\n+    option is set to 2. The following example shows how to set the young-to-old\n+    ratio to 1:\n+\n+    >   `-XX:NewRatio=1`\n+\n+`-XX:NewSize=`*size*\n+:   Sets the initial size (in bytes) of the heap for the young generation\n+    (nursery). Append the letter `k` or `K` to indicate kilobytes, `m` or `M`\n+    to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+\n+    The young generation region of the heap is used for new objects. GC is\n+    performed in this region more often than in other regions. If the size for\n+    the young generation is too low, then a large number of minor GCs are\n+    performed. If the size is too high, then only full GCs are performed, which\n+    can take a long time to complete. It is recommended that you keep the size\n+    for the young generation greater than 25% and less than 50% of the overall\n+    heap size.\n+\n+    The following examples show how to set the initial size of the young\n+    generation to 256 MB using various units:\n+\n+    ```\n+    -XX:NewSize=256m\n+    -XX:NewSize=262144k\n+    -XX:NewSize=268435456\n+    ```\n+\n+    The `-XX:NewSize` option is equivalent to `-Xmn`.\n+\n+`-XX:ParallelGCThreads=`*threads*\n+:   Sets the number of the stop-the-world (STW) worker threads. The default value\n+    depends on the number of CPUs available to the JVM and the garbage collector\n+    selected.\n+\n+    For example, to set the number of threads for G1 GC to 2, specify the\n+    following option:\n+\n+    >   `-XX:ParallelGCThreads=2`\n+\n+`-XX:+ParallelRefProcEnabled`\n+:   Enables parallel reference processing. By default, this option is disabled.\n+\n+`-XX:+PrintAdaptiveSizePolicy`\n+:   Enables printing of information about adaptive-generation sizing. By\n+    default, this option is disabled.\n+\n+`-XX:SoftRefLRUPolicyMSPerMB=`*time*\n+:   Sets the amount of time (in milliseconds) a softly reachable object is\n+    kept active on the heap after the last time it was referenced. The default\n+    value is one second of lifetime per free megabyte in the heap. The\n+    `-XX:SoftRefLRUPolicyMSPerMB` option accepts integer values representing\n+    milliseconds per one megabyte of the current heap size (for Java HotSpot\n+    Client VM) or the maximum possible heap size (for Java HotSpot Server VM).\n+    This difference means that the Client VM tends to flush soft references\n+    rather than grow the heap, whereas the Server VM tends to grow the heap\n+    rather than flush soft references. In the latter case, the value of the\n+    `-Xmx` option has a significant effect on how quickly soft references are\n+    garbage collected.\n+\n+    The following example shows how to set the value to 2.5 seconds:\n+\n+    `-XX:SoftRefLRUPolicyMSPerMB=2500`\n+\n+`-XX:-ShrinkHeapInSteps`\n+:   Incrementally reduces the Java heap to the target size, specified by the\n+    option `-XX:MaxHeapFreeRatio`. This option is enabled by default. If\n+    disabled, then it immediately reduces the Java heap to the target size\n+    instead of requiring multiple garbage collection cycles. Disable this\n+    option if you want to minimize the Java heap size. You will likely\n+    encounter performance degradation when this option is disabled.\n+\n+    See [Performance Tuning Examples] for a description of using the\n+    `MaxHeapFreeRatio` option to keep the Java heap small by reducing the\n+    dynamic footprint for embedded applications.\n+\n+`-XX:StringDeduplicationAgeThreshold=`*threshold*\n+:   Identifies `String` objects reaching the specified age that are considered\n+    candidates for deduplication. An object's age is a measure of how many\n+    times it has survived garbage collection. This is sometimes referred to as\n+    tenuring.\n+\n+    > **Note:** `String` objects that are promoted to an old heap region before this age\n+    has been reached are always considered candidates for deduplication. The\n+    default value for this option is `3`. See the `-XX:+UseStringDeduplication`\n+    option.\n+\n+`-XX:SurvivorRatio=`*ratio*\n+:   Sets the ratio between eden space size and survivor space size. By default,\n+    this option is set to 8. The following example shows how to set the\n+    eden\/survivor space ratio to 4:\n+\n+    >   `-XX:SurvivorRatio=4`\n+\n+`-XX:TargetSurvivorRatio=`*percent*\n+:   Sets the desired percentage of survivor space (0 to 100) used after young\n+    garbage collection. By default, this option is set to 50%.\n+\n+    The following example shows how to set the target survivor space ratio to\n+    30%:\n+\n+    >   `-XX:TargetSurvivorRatio=30`\n+\n+`-XX:TLABSize=`*size*\n+:   Sets the initial size (in bytes) of a thread-local allocation buffer\n+    (TLAB). Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. If this option is\n+    set to 0, then the JVM selects the initial size automatically.\n+\n+    The following example shows how to set the initial TLAB size to 512 KB:\n+\n+    >   `-XX:TLABSize=512k`\n+\n+`-XX:+UseAdaptiveSizePolicy`\n+:   Enables the use of adaptive generation sizing. This option is enabled by\n+    default. To disable adaptive generation sizing, specify\n+    `-XX:-UseAdaptiveSizePolicy` and set the size of the memory allocation pool\n+    explicitly. See the `-XX:SurvivorRatio` option.\n+\n+`-XX:+UseG1GC`\n+:   Enables the use of the garbage-first (G1) garbage collector. It's a\n+    server-style garbage collector, targeted for multiprocessor machines with a\n+    large amount of RAM. This option meets GC pause time goals with high\n+    probability, while maintaining good throughput. The G1 collector is\n+    recommended for applications requiring large heaps (sizes of around 6 GB or\n+    larger) with limited GC latency requirements (a stable and predictable\n+    pause time below 0.5 seconds). By default, this option is enabled and G1 is\n+    used as the default garbage collector.\n+\n+`-XX:+UseGCOverheadLimit`\n+:   Enables the use of a policy that limits the proportion of time spent by the\n+    JVM on GC before an `OutOfMemoryError` exception is thrown. This option is\n+    enabled, by default, and the parallel GC will throw an `OutOfMemoryError`\n+    if more than 98% of the total time is spent on garbage collection and less\n+    than 2% of the heap is recovered. When the heap is small, this feature can\n+    be used to prevent applications from running for long periods of time with\n+    little or no progress. To disable this option, specify the option\n+    `-XX:-UseGCOverheadLimit`.\n+\n+`-XX:+UseNUMA`\n+:   Enables performance optimization of an application on a machine with\n+    nonuniform memory architecture (NUMA) by increasing the application's use\n+    of lower latency memory. By default, this option is disabled and no\n+    optimization for NUMA is made. The option is available only when the\n+    parallel garbage collector is used (`-XX:+UseParallelGC`).\n+\n+`-XX:+UseParallelGC`\n+:   Enables the use of the parallel scavenge garbage collector (also known as\n+    the throughput collector) to improve the performance of your application by\n+    leveraging multiple processors.\n+\n+    By default, this option is disabled and the default collector is used.\n+\n+`-XX:+UseSerialGC`\n+:   Enables the use of the serial garbage collector. This is generally the best\n+    choice for small and simple applications that don't require any special\n+    functionality from garbage collection. By default, this option is disabled\n+    and the default collector is used.\n+\n+`-XX:+UseStringDeduplication`\n+:   Enables string deduplication. By default, this option is disabled. To use\n+    this option, you must enable the garbage-first (G1) garbage collector.\n+\n+    String deduplication reduces the memory footprint of `String` objects on\n+    the Java heap by taking advantage of the fact that many `String` objects\n+    are identical. Instead of each `String` object pointing to its own\n+    character array, identical `String` objects can point to and share the same\n+    character array.\n+\n+`-XX:+UseTLAB`\n+:   Enables the use of thread-local allocation blocks (TLABs) in the young\n+    generation space. This option is enabled by default. To disable the use of\n+    TLABs, specify the option `-XX:-UseTLAB`.\n+\n+`-XX:+UseZGC`\n+:   Enables the use of the Z garbage collector (ZGC). This is a low latency\n+    garbage collector, providing max pause times of a few milliseconds, at\n+    some throughput cost. Pause times are independent of what heap size is\n+    used. Supports heap sizes from 8MB to 16TB.\n+\n+`-XX:ZAllocationSpikeTolerance=`*factor*\n+:   Sets the allocation spike tolerance for ZGC. By default, this option is\n+    set to 2.0. This factor describes the level of allocation spikes to expect.\n+    For example, using a factor of 3.0 means the current allocation rate can\n+    be expected to triple at any time.\n+\n+`-XX:ZCollectionInterval=`*seconds*\n+:   Sets the maximum interval (in seconds) between two GC cycles when using\n+    ZGC. By default, this option is set to 0 (disabled).\n+\n+`-XX:ZFragmentationLimit=`*percent*\n+:   Sets the maximum acceptable heap fragmentation (in percent) for ZGC.\n+    By default, this option is set to 25. Using a lower value will cause the\n+    heap to be compacted more aggressively, to reclaim more memory at the cost\n+    of using more CPU time.\n+\n+`-XX:+ZProactive`\n+:   Enables proactive GC cycles when using ZGC. By default, this option is\n+    enabled. ZGC will start a proactive GC cycle if doing so is expected to\n+    have minimal impact on the running application. This is useful if the\n+    application is mostly idle or allocates very few objects, but you still\n+    want to keep the heap size down and allow reference processing to happen\n+    even when there are a lot of free space on the heap.\n+\n+`-XX:+ZUncommit`\n+:   Enables uncommitting of unused heap memory when using ZGC. By default,\n+    this option is enabled. Uncommitting unused heap memory will lower the\n+    memory footprint of the JVM, and make that memory available for other\n+    processes to use.\n+\n+`-XX:ZUncommitDelay=`*seconds*\n+:   Sets the amount of time (in seconds) that heap memory must have been\n+    unused before being uncommitted. By default, this option is set to 300\n+    (5 minutes). Committing and uncommitting memory are relatively\n+    expensive operations. Using a lower value will cause heap memory to be\n+    uncommitted earlier, at the risk of soon having to commit it again.\n+\n+## Deprecated Java Options\n+\n+These `java` options are deprecated and might be removed in a future JDK\n+release. They're still accepted and acted upon, but a warning is issued when\n+they're used.\n+\n+`-Xloggc:`*filename*\n+:   Sets the file to which verbose GC events information should be redirected\n+    for logging. The `-Xloggc` option overrides `-verbose:gc` if both are given\n+    with the same java command. `-Xloggc:`*filename* is replaced by\n+    `-Xlog:gc:`*filename*. See Enable Logging with the JVM Unified Logging\n+    Framework.\n+\n+    Example:\n+\n+    `-Xlog:gc:garbage-collection.log`\n+\n+`-XX:+FlightRecorder`\n+:   Enables the use of Java Flight Recorder (JFR) during the runtime of the\n+    application. Since JDK 8u40 this option has not been required to use JFR.\n+\n+## Obsolete Java Options\n+\n+These `java` options are still accepted but ignored, and a warning is issued\n+when they're used.\n+\n+`--illegal-access=`*parameter*\n+:   Controlled _relaxed strong encapsulation_, as defined in [JEP\n+    261](https:\/\/openjdk.org\/jeps\/261#Relaxed-strong-encapsulation).\n+    This option was deprecated in JDK 16 by [JEP\n+    396](https:\/\/openjdk.org\/jeps\/396) and made obsolete in JDK 17\n+    by [JEP 403](https:\/\/openjdk.org\/jeps\/403).\n+\n+`-XX:RTMAbortRatio=`*abort\\_ratio*\n+:   Specifies the RTM abort ratio is specified as a percentage (%) of all\n+    executed RTM transactions. If a number of aborted transactions becomes\n+    greater than this ratio, then the compiled code is deoptimized. This ratio\n+    is used when the `-XX:+UseRTMDeopt` option is enabled. The default value of\n+    this option is 50. This means that the compiled code is deoptimized if 50%\n+    of all transactions are aborted.\n+\n+`-XX:RTMRetryCount=`*number\\_of\\_retries*\n+:   Specifies the number of times that the RTM locking code is retried, when it\n+    is aborted or busy, before falling back to the normal locking mechanism.\n+    The default value for this option is 5. The `-XX:UseRTMLocking` option must\n+    be enabled.\n+\n+`-XX:+UseRTMDeopt`\n+:   Autotunes RTM locking depending on the abort ratio. This ratio is specified\n+    by the `-XX:RTMAbortRatio` option. If the number of aborted transactions\n+    exceeds the abort ratio, then the method containing the lock is deoptimized\n+    and recompiled with all locks as normal locks. This option is disabled by\n+    default. The `-XX:+UseRTMLocking` option must be enabled.\n+\n+`-XX:+UseRTMLocking`\n+:   Generates Restricted Transactional Memory (RTM) locking code for all\n+    inflated locks, with the normal locking mechanism as the fallback handler.\n+    This option is disabled by default. Options related to RTM are available\n+    only on x86 CPUs that support Transactional Synchronization Extensions (TSX).\n+\n+    RTM is part of Intel's TSX, which is an x86 instruction set extension and\n+    facilitates the creation of multithreaded applications. RTM introduces the\n+    new instructions `XBEGIN`, `XABORT`, `XEND`, and `XTEST`. The `XBEGIN` and\n+    `XEND` instructions enclose a set of instructions to run as a transaction.\n+    If no conflict is found when running the transaction, then the memory and\n+    register modifications are committed together at the `XEND` instruction.\n+    The `XABORT` instruction can be used to explicitly abort a transaction and\n+    the `XTEST` instruction checks if a set of instructions is being run in a\n+    transaction.\n+\n+    A lock on a transaction is inflated when another thread tries to access the\n+    same transaction, thereby blocking the thread that didn't originally\n+    request access to the transaction. RTM requires that a fallback set of\n+    operations be specified in case a transaction aborts or fails. An RTM lock\n+    is a lock that has been delegated to the TSX's system.\n+\n+    RTM improves performance for highly contended locks with low conflict in a\n+    critical region (which is code that must not be accessed by more than one\n+    thread concurrently). RTM also improves the performance of coarse-grain\n+    locking, which typically doesn't perform well in multithreaded\n+    applications. (Coarse-grain locking is the strategy of holding locks for\n+    long periods to minimize the overhead of taking and releasing locks, while\n+    fine-grained locking is the strategy of trying to achieve maximum\n+    parallelism by locking only when necessary and unlocking as soon as\n+    possible.) Also, for lightly contended locks that are used by different\n+    threads, RTM can reduce false cache line sharing, also known as cache line\n+    ping-pong. This occurs when multiple threads from different processors are\n+    accessing different resources, but the resources share the same cache line.\n+    As a result, the processors repeatedly invalidate the cache lines of other\n+    processors, which forces them to read from main memory instead of their\n+    cache.\n+\n+## Removed Java Options\n+\n+These `java` options have been removed in JDK @@VERSION_SPECIFICATION@@ and using them results in an error of:\n+\n+>   `Unrecognized VM option` *option-name*\n+\n+`-XX:InitialRAMFraction=`*ratio*\n+:   Sets the initial amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a ratio of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is\n+    64.\n+\n+    Use the option `-XX:InitialRAMPercentage` instead.\n+\n+`-XX:MaxRAMFraction=`*ratio*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a fraction of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is 4.\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    Use the option `-XX:MaxRAMPercentage` instead.\n+\n+`-XX:MinRAMFraction=`*ratio*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a fraction of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option for small heaps. A small\n+    heap is a heap of approximately 125 MB. The default value is 2.\n+\n+    Use the option `-XX:MinRAMPercentage` instead.\n+\n+`-XX:+ScavengeBeforeFullGC`\n+:   Enables GC of the young generation before each full GC. This option is\n+    enabled by default. It is recommended that you *don't* disable it, because\n+    scavenging the young generation before a full GC can reduce the number of\n+    objects reachable from the old generation space into the young generation\n+    space. To disable GC of the young generation before each full GC, specify\n+    the option `-XX:-ScavengeBeforeFullGC`.\n+\n+`-Xfuture`\n+:   Enables strict class-file format checks that enforce close conformance to\n+    the class-file format specification. Developers should use this flag when\n+    developing new code. Stricter checks may become the default in future\n+    releases.\n+\n+    Use the option `-Xverify:all` instead.\n+\n+For the lists and descriptions of options removed in previous releases see the *Removed Java Options* section in:\n+\n+-   [The `java` Command, Release 23](https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 22](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 21](https:\/\/docs.oracle.com\/en\/java\/javase\/21\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 20](https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 19](https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 18](https:\/\/docs.oracle.com\/en\/java\/javase\/18\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 17](https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 16](https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 15](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 14](https:\/\/docs.oracle.com\/en\/java\/javase\/14\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 13](https:\/\/docs.oracle.com\/en\/java\/javase\/13\/docs\/specs\/man\/java.html)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 12](\n+    https:\/\/docs.oracle.com\/en\/java\/javase\/12\/tools\/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 11](\n+    https:\/\/docs.oracle.com\/en\/java\/javase\/11\/tools\/java.html#GUID-741FC470-AA3E-494A-8D2B-1B1FE4A990D1)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 10](\n+    https:\/\/docs.oracle.com\/javase\/10\/tools\/java.htm#JSWOR624)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 9](\n+    https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 8 for Oracle JDK\n+    on Windows](\n+    https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/windows\/java.html#BGBCIEFC)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 8 for Oracle JDK\n+    on Solaris, Linux, and macOS](\n+    https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html#BGBCIEFC)\n+\n+## java Command-Line Argument Files\n+\n+You can shorten or simplify the `java` command by using `@` argument files to\n+specify one or more text files that contain arguments, such as options and\n+class names, which are passed to the `java` command. This let's you to create\n+`java` commands of any length on any operating system.\n+\n+In the command line, use the at sign (`@`) prefix to identify an argument file\n+that contains `java` options and class names. When the `java` command\n+encounters a file beginning with the at sign (`@`), it expands the contents of\n+that file into an argument list just as they would be specified on the command\n+line.\n+\n+The `java` launcher expands the argument file contents until it encounters the\n+`--disable-@files` option. You can use the `--disable-@files` option anywhere\n+on the command line, including in an argument file, to stop `@` argument files\n+expansion.\n+\n+The following items describe the syntax of `java` argument files:\n+\n+-   The argument file must contain only ASCII characters or characters in\n+    system default encoding that's ASCII friendly, such as UTF-8.\n+\n+-   The argument file size must not exceed MAXINT (2,147,483,647) bytes.\n+\n+-   The launcher doesn't expand wildcards that are present within an argument\n+    file. That means, an asterisk  `*` is passed on as-is to the starting VM.\n+    For example `*.java` stays `*.java` and is not expanded to `Foo.java`,\n+    `Bar.java`, etc. like on some command line shell.\n+\n+-   Use white space or new line characters to separate arguments included in\n+    the file.\n+\n+-   White space includes a white space character, `\\t`, `\\n`, `\\r`, and `\\f`.\n+\n+    For example, it is possible to have a path with a space, such as\n+    `c:\\Program Files` that can be specified as either `\"c:\\\\Program Files\"` or,\n+    to avoid an escape, `c:\\Program\" \"Files`.\n+\n+-   Any option that contains spaces, such as a path component, must be within\n+    quotation marks using quotation ('\\\"') characters in its entirety.\n+\n+-   A string within quotation marks may contain the characters `\\n`, `\\r`,\n+    `\\t`, and `\\f`. They are converted to their respective ASCII codes.\n+\n+-   If a file name contains embedded spaces, then put the whole file name in\n+    double quotation marks.\n+\n+-   File names in an argument file are relative to the current directory, not\n+    to the location of the argument file.\n+\n+-   Use the number sign `#` in the argument file to identify comments. All\n+    characters following the `#` are ignored until the end of line.\n+\n+-   Additional at sign `@` prefixes to `@` prefixed options act as an escape,\n+    (the first `@` is removed and the rest of the arguments are presented to\n+    the launcher literally).\n+\n+-   Lines may be continued using the continuation character (`\\`) at the\n+    end-of-line. The two lines are concatenated with the leading white spaces\n+    trimmed. To prevent trimming the leading white spaces, a continuation\n+    character (`\\`) may be placed at the first column.\n+\n+-   Because backslash (\\\\) is an escape character, a backslash character must\n+    be escaped with another backslash character.\n+\n+-   Partial quote is allowed and is closed by an end-of-file.\n+\n+-   An open quote stops at end-of-line unless `\\` is the last character, which\n+    then joins the next line by removing all leading white space characters.\n+\n+-   Wildcards (\\*) aren't allowed in these lists (such as specifying `*.java`).\n+\n+-   Use of the at sign (`@`) to recursively interpret files isn't supported.\n+\n+### Example of Open or Partial Quotes in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"lib\/\n+cool\/\n+app\/\n+jars\n+```\n+\n+this is interpreted as:\n+\n+>   `-cp lib\/cool\/app\/jars`\n+\n+### Example of a Backslash Character Escaped with Another Backslash Character in an Argument File\n+\n+To output the following:\n+\n+>   `-cp c:\\Program Files (x86)\\Java\\jre\\lib\\ext;c:\\Program\n+    Files\\Java\\jre9\\lib\\ext`\n+\n+The backslash character must be specified in the argument file as:\n+\n+>   `-cp \"c:\\\\Program Files (x86)\\\\Java\\\\jre\\\\lib\\\\ext;c:\\\\Program\n+    Files\\\\Java\\\\jre9\\\\lib\\\\ext\"`\n+\n+### Example of an EOL Escape Used to Force Concatenation of Lines in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"\/lib\/cool app\/jars:\\\n+    \/lib\/another app\/jars\"\n+```\n+\n+This is interpreted as:\n+\n+>   `-cp \/lib\/cool app\/jars:\/lib\/another app\/jars`\n+\n+### Example of Line Continuation with Leading Spaces in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"\/lib\/cool\\\n+\\app\/jars\"\n+```\n+\n+This is interpreted as:\n+\n+`-cp \/lib\/cool app\/jars`\n+\n+### Examples of Using Single Argument File\n+\n+You can use a single argument file, such as `myargumentfile` in the following\n+example, to hold all required `java` arguments:\n+\n+>   `java @myargumentfile`\n+\n+### Examples of Using Argument Files with Paths\n+\n+You can include relative paths in argument files; however, they're relative to\n+the current working directory and not to the paths of the argument files\n+themselves. In the following example, `path1\/options` and `path2\/options`\n+represent argument files with different paths. Any relative paths that they\n+contain are relative to the current working directory and not to the argument\n+files:\n+\n+>   `java @path1\/options @path2\/classes`\n+\n+## Code Heap State Analytics\n+\n+### Overview\n+\n+There are occasions when having insight into the current state of the JVM code\n+heap would be helpful to answer questions such as:\n+\n+-   Why was the JIT turned off and then on again and again?\n+\n+-   Where has all the code heap space gone?\n+\n+-   Why is the method sweeper not working effectively?\n+\n+To provide this insight, a code heap state analytics feature has been\n+implemented that enables on-the-fly analysis of the code heap. The analytics\n+process is divided into two parts. The first part examines the entire code heap\n+and aggregates all information that is believed to be useful or important. The\n+second part consists of several independent steps that print the collected\n+information with an emphasis on different aspects of the data. Data collection\n+and printing are done on an \"on request\" basis.\n+\n+### Syntax\n+\n+Requests for real-time, on-the-fly analysis can be issued with the following\n+command:\n+\n+>   `jcmd` *pid* `Compiler.CodeHeap_Analytics` \\[*function*\\] \\[*granularity*\\]\n+\n+If you are only interested in how the code heap looks like after running a\n+sample workload, you can use the command line option:\n+\n+>   `-Xlog:codecache=Trace`\n+\n+To see the code heap state when a \"CodeCache full\" condition exists, start the\n+VM with the command line option:\n+\n+>   `-Xlog:codecache=Debug`\n+\n+See [CodeHeap State Analytics (OpenJDK)](\n+https:\/\/bugs.openjdk.org\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf)\n+for a detailed description of the code heap state analytics feature, the\n+supported functions, and the granularity options.\n+\n+## Enable Logging with the JVM Unified Logging Framework\n+\n+You use the `-Xlog` option to configure or enable logging with the Java Virtual\n+Machine (JVM) unified logging framework.\n+\n+### Synopsis\n+\n+>   `-Xlog`\\[`:`\\[*what*\\]\\[`:`\\[*output*\\]\\[`:`\\[*decorators*\\]\\[`:`*output-options*\\[`,`...\\]\\]\\]\\]\\]\n+>\n+>   `-Xlog:`*directive*\n+\n+*what*\n+:   Specifies a combination of tags and levels of the form\n+    *tag1*\\[`+`*tag2*...\\]\\[`*`\\]\\[`=`*level*\\]\\[`,`...\\]. Unless the wildcard\n+    (`*`) is specified, only log messages tagged with exactly the tags\n+    specified are matched. See [-Xlog Tags and Levels].\n+\n+*output*\n+:   Sets the type of output. Omitting the *output* type defaults to `stdout`.\n+    See [-Xlog Output].\n+\n+*decorators*\n+:   Configures the output to use a custom set of decorators. Omitting\n+    *decorators* defaults to `uptime`, `level`, and `tags`. See\n+    [Decorations].\n+\n+*output-options*\n+:   Sets the `-Xlog` logging output options.\n+\n+*directive*\n+:   A global option or subcommand: help, disable, async\n+\n+### Description\n+\n+The Java Virtual Machine (JVM) unified logging framework provides a common\n+logging system for all components of the JVM. GC logging for the JVM has been\n+changed to use the new logging framework. The mapping of old GC flags to the\n+corresponding new Xlog configuration is described in [Convert GC Logging Flags\n+to Xlog]. In addition, runtime logging has also been changed to use the JVM\n+unified logging framework. The mapping of legacy runtime logging flags to the\n+corresponding new Xlog configuration is described in [Convert Runtime Logging\n+Flags to Xlog].\n+\n+The following provides quick reference to the `-Xlog` command and syntax for\n+options:\n+\n+`-Xlog`\n+:   Enables JVM logging on an `info` level.\n+\n+`-Xlog:help`\n+:   Prints `-Xlog` usage syntax and available tags, levels, and decorators\n+    along with example command lines with explanations.\n+\n+`-Xlog:disable`\n+:   Turns off all logging and clears all configuration of the logging framework\n+    including the default configuration for warnings and errors.\n+\n+`-Xlog`\\[`:`*option*\\]\n+:   Applies multiple arguments in the order that they appear on the command\n+    line. Multiple `-Xlog` arguments for the same output override each other in\n+    their given order.\n+\n+    The *option* is set as:\n+\n+    >   \\[*tag-selection*\\]\\[`:`\\[*output*\\]\\[`:`\\[*decorators*\\]\\[`:`*output-options*\\]\\]\\]\n+\n+    Omitting the *tag-selection* defaults to a tag-set of `all` and a level of\n+    `info`.\n+\n+    >   *tag*\\[`+`...\\] `all`\n+\n+    The `all` tag is a meta tag consisting of all tag-sets available. The\n+    asterisk `*` in a tag set definition denotes a wildcard tag match. Matching\n+    with a wildcard selects all tag sets that contain *at least* the specified\n+    tags. Without the wildcard, only exact matches of the specified tag sets\n+    are selected.\n+\n+    *output-options* is\n+\n+    >   `filecount=`*file-count* `filesize=`*file size with optional K, M or G\n+        suffix* `foldmultilines=`*<true|false>*\n+\n+    When `foldmultilines` is true, a log event that consists of\n+    multiple lines will be folded into a single line by replacing newline characters\n+    with the sequence `'\\'` and `'n'` in the output.\n+    Existing single backslash characters will also be replaced with a sequence of\n+    two backslashes so that the conversion can be reversed.\n+    This option is safe to use with UTF-8 character encodings, but other encodings may not work.\n+    For example, it may incorrectly convert multi-byte sequences in Shift JIS and BIG5.\n+\n+### Default Configuration\n+\n+When the `-Xlog` option and nothing else is specified on the command line, the\n+default configuration is used. The default configuration logs all messages with\n+a level that matches either warning or error regardless of what tags the\n+message is associated with. The default configuration is equivalent to entering\n+the following on the command line:\n+\n+>   `-Xlog:all=warning:stdout:uptime,level,tags`\n+\n+### Controlling Logging at Runtime\n+\n+Logging can also be controlled at run time through Diagnostic Commands (with\n+the [jcmd](jcmd.html) utility). Everything that can be specified on the command line can\n+also be specified dynamically with the `VM.log` command. As the diagnostic\n+commands are automatically exposed as MBeans, you can use JMX to change logging\n+configuration at run time.\n+\n+### -Xlog Tags and Levels\n+\n+Each log message has a level and a tag set associated with it. The level of\n+the message corresponds to its details, and the tag set corresponds to what\n+the message contains or which JVM component it involves (such as, `gc`,\n+`jit`, or `os`). Mapping GC flags to the Xlog configuration is described\n+in [Convert GC Logging Flags to Xlog]. Mapping legacy runtime logging flags to\n+the corresponding Xlog configuration is described in [Convert Runtime Logging\n+Flags to Xlog].\n+\n+**Available log levels:**\n+\n+-   `off`\n+-   `trace`\n+-   `debug`\n+-   `info`\n+-   `warning`\n+-   `error`\n+\n+**Available log tags:**\n+\n+There are literally dozens of log tags, which in the right combinations, will enable\n+a range of logging output. The full set of available log tags can be seen using `-Xlog:help`.\n+Specifying `all` instead of a tag combination matches all tag combinations.\n+\n+### -Xlog Output\n+\n+The `-Xlog` option supports the following types of outputs:\n+\n+-   `stdout` --- Sends output to stdout\n+-   `stderr` --- Sends output to stderr\n+-   `file=`*filename* --- Sends output to text file(s).\n+\n+When using `file=`*filename*, specifying `%p`, `%t`  and\/or `%hn` in the file name\n+expands to the JVM's PID, startup timestamp and host name, respectively. You can also\n+configure text files to handle file rotation based on file size and a number of\n+files to rotate. For example, to rotate the log file every 10 MB and keep 5\n+files in rotation, specify the options `filesize=10M, filecount=5`. The target\n+size of the files isn't guaranteed to be exact, it's just an approximate value.\n+Files are rotated by default with up to 5 rotated files of target size 20 MB,\n+unless configured otherwise. Specifying `filecount=0` means that the log file\n+shouldn't be rotated. There's a possibility of the pre-existing log file\n+getting overwritten.\n+\n+### -Xlog Output Mode\n+\n+By default logging messages are output synchronously - each log message is written to\n+the designated output when the logging call is made. But you can instead use asynchronous\n+logging mode by specifying:\n+\n+`-Xlog:async`\n+:     Write all logging asynchronously.\n+\n+In asynchronous logging mode, log sites enqueue all logging messages to an intermediate buffer\n+and a standalone thread is responsible for flushing them to the corresponding outputs. The\n+intermediate buffer is bounded and on buffer exhaustion the enqueuing message is discarded.\n+Log entry write operations are guaranteed non-blocking.\n+\n+The option `-XX:AsyncLogBufferSize=N` specifies the memory budget in bytes for the intermediate buffer.\n+The default value should be big enough to cater for most cases. Users can provide a custom value to\n+trade memory overhead for log accuracy if they need to.\n+\n+### Decorations\n+\n+Logging messages are decorated with information about the message. You can\n+configure each output to use a custom set of decorators. The order of the\n+output is always the same as listed in the table. You can configure the\n+decorations to be used at run time. Decorations are prepended to the log\n+message. For example:\n+\n+```\n+[6.567s][info][gc,old] Old collection complete\n+```\n+\n+Omitting `decorators` defaults to `uptime`, `level`, and `tags`. The `none`\n+decorator is special and is used to turn off all decorations.\n+\n+`time` (`t`), `utctime` (`utc`), `uptime` (`u`), `timemillis` (`tm`),\n+`uptimemillis` (`um`), `timenanos` (`tn`), `uptimenanos` (`un`), `hostname`\n+(`hn`), `pid` (`p`), `tid` (`ti`), `level` (`l`), `tags` (`tg`) decorators can\n+also be specified as `none` for no decoration.\n+\n+Table: Logging Messages Decorations\n+\n+---------------  --------------------------------------------------------------\n+Decorations      Description\n+---------------  --------------------------------------------------------------\n+`time` or `t`    Current time and date in ISO-8601 format.\n+\n+`utctime`        Universal Time Coordinated or Coordinated Universal Time.\n+or `utc`\n+\n+`uptime` or `u`  Time since the start of the JVM in seconds and milliseconds.\n+                 For example, 6.567s.\n+\n+`timemillis`     The same value as generated by `System.currentTimeMillis()`\n+or `tm`\n+\n+`uptimemillis`   Milliseconds since the JVM started.\n+or `um`\n+\n+`timenanos`      The same value generated by `System.nanoTime()`.\n+or `tn`\n+\n+`uptimenanos`    Nanoseconds since the JVM started.\n+or `un`\n+\n+`hostname`       The host name.\n+or `hn`\n+\n+`pid` or `p`     The process identifier.\n+\n+`tid` or `ti`    The thread identifier.\n+\n+`level` or `l`   The level associated with the log message.\n+\n+`tags` or `tg`   The tag-set associated with the log message.\n+---------------  --------------------------------------------------------------\n+\n+### Convert GC Logging Flags to Xlog\n+\n+Table: Legacy GC Logging Flags to Xlog Configuration Mapping\n+\n+------------------------------------  --------------------------  ----------------------------------------------------\n+Legacy Garbage Collection (GC) Flag   Xlog Configuration          Comment\n+------------------------------------  --------------------------  ----------------------------------------------------\n+`G1PrintHeapRegions`                  `-Xlog:gc+region=trace`     Not Applicable\n+\n+`GCLogFileSize`                       No configuration            Log rotation is handled by the framework.\n+                                      available\n+\n+`NumberOfGCLogFiles`                  Not Applicable              Log rotation is handled by the framework.\n+\n+`PrintAdaptiveSizePolicy`             `-Xlog:gc+ergo*=`*level*       Use a *level* of `debug` for most of the information,\n+                                                                  or a *level* of `trace` for all of what was logged\n+                                                                  for `PrintAdaptiveSizePolicy`.\n+\n+`PrintGC`                             `-Xlog:gc`                  Not Applicable\n+\n+`PrintGCApplicationConcurrentTime`    `-Xlog:safepoint`           Note that `PrintGCApplicationConcurrentTime` and\n+                                                                  `PrintGCApplicationStoppedTime` are logged on the\n+                                                                  same tag and aren't separated in the new logging.\n+\n+`PrintGCApplicationStoppedTime`       `-Xlog:safepoint`           Note that `PrintGCApplicationConcurrentTime` and\n+                                                                  `PrintGCApplicationStoppedTime` are logged on the\n+                                                                  same tag and not separated in the new logging.\n+\n+`PrintGCCause`                        Not Applicable              GC cause is now always logged.\n+\n+`PrintGCDateStamps`                   Not Applicable              Date stamps are logged by the framework.\n+\n+`PrintGCDetails`                      `-Xlog:gc*`                 Not Applicable\n+\n+`PrintGCID`                           Not Applicable              GC ID is now always logged.\n+\n+`PrintGCTaskTimeStamps`               `-Xlog:gc+task*=debug`         Not Applicable\n+\n+`PrintGCTimeStamps`                   Not Applicable              Time stamps are logged by the framework.\n+\n+`PrintHeapAtGC`                       `-Xlog:gc+heap=trace`       Not Applicable\n+\n+`PrintReferenceGC`                    `-Xlog:gc+ref*=debug`          Note that in the old logging, `PrintReferenceGC` had\n+                                                                  an effect only if `PrintGCDetails` was also enabled.\n+\n+`PrintStringDeduplicationStatistics`  `-Xlog:gc+stringdedup*=debug`  Not Applicable\n+\n+`PrintTenuringDistribution`           `-Xlog:gc+age*=`*level*        Use a *level* of `debug` for the most relevant\n+                                                                  information, or a *level* of `trace` for all of what\n+                                                                  was logged for `PrintTenuringDistribution`.\n+\n+`UseGCLogFileRotation`                Not Applicable              What was logged for `PrintTenuringDistribution`.\n+------------------------------------  --------------------------  ----------------------------------------------------\n+\n+### Convert Runtime Logging Flags to Xlog\n+\n+These legacy flags are no longer recognized and will cause an error if used directly. Use their unified logging equivalent\n+instead.\n+\n+Table: Runtime Logging Flags to Xlog Configuration Mapping\n+\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+Legacy Runtime Flag          Xlog Configuration                     Comment\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+`TraceExceptions`            `-Xlog:exceptions=info`                Not Applicable\n+\n+`TraceClassLoading`          `-Xlog:class+load=`*level*             Use *level*=`info` for regular information, or *level*=`debug`\n+                                                                    for additional information. In Unified Logging syntax,\n+                                                                    `-verbose:class` equals `-Xlog:class+load=info,class+unload=info`.\n+\n+`TraceClassLoadingPreorder`  `-Xlog:class+preorder=debug`           Not Applicable\n+\n+`TraceClassUnloading`        `-Xlog:class+unload=`*level*           Use *level*=`info` for regular information, or *level*=`trace`\n+                                                                    for additional information. In Unified Logging syntax,\n+                                                                    `-verbose:class` equals `-Xlog:class+load=info,class+unload=info`.\n+\n+`VerboseVerification`        `-Xlog:verification=info`              Not Applicable\n+\n+`TraceClassPaths`            `-Xlog:class+path=info`                Not Applicable\n+\n+`TraceClassResolution`       `-Xlog:class+resolve=debug`            Not Applicable\n+\n+`TraceClassInitialization`   `-Xlog:class+init=info`                Not Applicable\n+\n+`TraceLoaderConstraints`     `-Xlog:class+loader+constraints=info`  Not Applicable\n+\n+\n+`TraceClassLoaderData`       `-Xlog:class+loader+data=`*level*      Use *level*=`debug` for regular information or *level*=`trace` for\n+                                                                    additional information.\n+\n+`TraceSafepointCleanupTime`  `-Xlog:safepoint+cleanup=info`         Not Applicable\n+\n+`TraceSafepoint`             `-Xlog:safepoint=debug`                Not Applicable\n+\n+`TraceMonitorInflation`      `-Xlog:monitorinflation=debug`         Not Applicable\n+\n+`TraceRedefineClasses`       `-Xlog:redefine+class*=`*level*        *level*=`info`, `debug`, and `trace` provide increasing amounts\n+                                                                    of information.\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+\n+### -Xlog Usage Examples\n+\n+The following are `-Xlog` examples.\n+\n+`-Xlog`\n+:   Logs all messages by using the `info` level to `stdout` with `uptime`,\n+    `levels`, and `tags` decorations. This is equivalent to using:\n+\n+    >   `-Xlog:all=info:stdout:uptime,levels,tags`\n+\n+`-Xlog:gc`\n+:   Logs messages tagged with the `gc` tag using `info` level to `stdout`. The\n+    default configuration for all other messages at level `warning` is in\n+    effect.\n+\n+`-Xlog:gc,safepoint`\n+:   Logs messages tagged either with the `gc` or `safepoint` tags, both using\n+    the `info` level, to `stdout`, with default decorations. Messages tagged\n+    with both `gc` and `safepoint` won't be logged.\n+\n+`-Xlog:gc+ref=debug`\n+:   Logs messages tagged with both `gc` and `ref` tags, using the `debug` level\n+    to `stdout`, with default decorations. Messages tagged only with one of the\n+    two tags won't be logged.\n+\n+`-Xlog:gc=debug:file=gc.txt:none`\n+:   Logs messages tagged with the `gc` tag using the `debug` level to a file\n+    called `gc.txt` with no decorations. The default configuration for all\n+    other messages at level `warning` is still in effect.\n+\n+`-Xlog:gc=trace:file=gctrace.txt:uptimemillis,pid:filecount=5,filesize=1024`\n+:   Logs messages tagged with the `gc` tag using the `trace` level to a\n+    rotating file set with 5 files with size 1 MB with the base name\n+    `gctrace.txt` and uses decorations `uptimemillis` and `pid`.\n+\n+    The default configuration for all other messages at level `warning` is\n+    still in effect.\n+\n+`-Xlog:gc::uptime,tid`\n+:   Logs messages tagged with the `gc` tag using the default 'info' level to\n+    default the output `stdout` and uses decorations `uptime` and `tid`. The\n+    default configuration for all other messages at level `warning` is still in\n+    effect.\n+\n+`-Xlog:gc*=info,safepoint*=off`\n+:   Logs messages tagged with at least `gc` using the `info` level, but turns\n+    off logging of messages tagged with `safepoint`. Messages tagged with both\n+    `gc` and `safepoint` won't be logged.\n+\n+`-Xlog:disable -Xlog:safepoint=trace:safepointtrace.txt`\n+:   Turns off all logging, including warnings and errors, and then enables\n+    messages tagged with `safepoint`using `trace`level to the file\n+    `safepointtrace.txt`. The default configuration doesn't apply, because the\n+    command line started with `-Xlog:disable`.\n+\n+### Complex -Xlog Usage Examples\n+\n+The following describes a few complex examples of using the `-Xlog` option.\n+\n+`-Xlog:gc+class*=debug`\n+:   Logs messages tagged with at least `gc` and `class` tags using the `debug`\n+    level to `stdout`. The default configuration for all other messages at the\n+    level `warning` is still in effect\n+\n+`-Xlog:gc+meta*=trace,class*=off:file=gcmetatrace.txt`\n+:   Logs messages tagged with at least the `gc` and `meta` tags using the\n+    `trace` level to the file `metatrace.txt` but turns off all messages tagged\n+    with `class`. Messages tagged with `gc`, `meta`, and `class` aren't be\n+    logged as `class*` is set to off. The default configuration for all other\n+    messages at level `warning` is in effect except for those that include\n+    `class`.\n+\n+`-Xlog:gc+meta=trace`\n+:   Logs messages tagged with exactly the `gc` and `meta` tags using the\n+    `trace` level to `stdout`. The default configuration for all other messages\n+    at level `warning` is still be in effect.\n+\n+`-Xlog:gc+class+heap*=debug,meta*=warning,threads*=off`\n+:   Logs messages tagged with at least `gc`, `class`, and `heap` tags using the\n+    `trace` level to `stdout` but only log messages tagged with `meta` with\n+    level. The default configuration for all other messages at the level\n+    `warning` is in effect except for those that include `threads`.\n+\n+## Validate Java Virtual Machine Flag Arguments\n+\n+You use values provided to all Java Virtual Machine (JVM) command-line flags\n+for validation and, if the input value is invalid or out-of-range, then an\n+appropriate error message is displayed.\n+\n+Whether they're set ergonomically, in a command line, by an input tool, or\n+through the APIs (for example, classes contained in the package\n+`java.lang.management`) the values provided to all Java Virtual Machine (JVM)\n+command-line flags are validated. Ergonomics are described in Java Platform,\n+Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide.\n+\n+Range and constraints are validated either when all flags have their values set\n+during JVM initialization or a flag's value is changed during runtime (for\n+example using the `jcmd` tool). The JVM is terminated if a value violates\n+either the range or constraint check and an appropriate error message is\n+printed on the error stream.\n+\n+For example, if a flag violates a range or a constraint check, then the JVM\n+exits with an error:\n+\n+```\n+java -XX:AllocatePrefetchStyle=5 -version\n+intx AllocatePrefetchStyle=5 is outside the allowed range [ 0 ... 3 ]\n+Improperly specified VM option 'AllocatePrefetchStyle=5'\n+Error: Could not create the Java Virtual Machine.\n+Error: A fatal exception has occurred. Program will exit.\n+```\n+\n+The flag `-XX:+PrintFlagsRanges` prints the range of all the flags. This flag\n+allows automatic testing of the flags by the values provided by the ranges. For\n+the flags that have the ranges specified, the type, name, and the actual range\n+is printed in the output.\n+\n+For example,\n+\n+```\n+intx   ThreadStackSize [ 0 ... 9007199254740987 ] {pd product}\n+```\n+\n+For the flags that don't have the range specified, the values aren't displayed\n+in the print out. For example:\n+\n+```\n+size_t NewSize         [   ...                  ] {product}\n+```\n+\n+This helps to identify the flags that need to be implemented. The automatic\n+testing framework can skip those flags that don't have values and aren't\n+implemented.\n+\n+## Large Pages\n+\n+You use large pages, also known as huge pages, as memory pages that are\n+significantly larger than the standard memory page size (which varies depending\n+on the processor and operating system). Large pages optimize processor\n+Translation-Lookaside Buffers.\n+\n+A Translation-Lookaside Buffer (TLB) is a page translation cache that holds the\n+most-recently used virtual-to-physical address translations. A TLB is a scarce\n+system resource. A TLB miss can be costly because the processor must then read\n+from the hierarchical page table, which may require multiple memory accesses.\n+By using a larger memory page size, a single TLB entry can represent a larger\n+memory range. This results in less pressure on a TLB, and memory-intensive\n+applications may have better performance.\n+\n+However, using large pages can negatively affect system performance. For\n+example, when a large amount of memory is pinned by an application, it may\n+create a shortage of regular memory and cause excessive paging in other\n+applications and slow down the entire system. Also, a system that has been up\n+for a long time could produce excessive fragmentation, which could make it\n+impossible to reserve enough large page memory. When this happens, either the\n+OS or JVM reverts to using regular pages.\n+\n+Linux and Windows support large pages.\n+\n+### Large Pages Support for Linux\n+\n+Linux supports large pages since version 2.6. To check if your environment\n+supports large pages, try the following:\n+\n+```\n+# cat \/proc\/meminfo | grep Huge\n+HugePages_Total: 0\n+HugePages_Free: 0\n+...\n+Hugepagesize: 2048 kB\n+```\n+\n+If the output contains items prefixed with \"Huge\", then your system supports\n+large pages. The values may vary depending on environment. The `Hugepagesize`\n+field shows the default large page size in your environment, and the other\n+fields show details for large pages of this size. Newer kernels have support\n+for multiple large page sizes. To list the supported page sizes, run this:\n+\n+```\n+# ls \/sys\/kernel\/mm\/hugepages\/\n+hugepages-1048576kB  hugepages-2048kB\n+```\n+\n+The above environment supports 2 MB and 1 GB large pages, but they need to be\n+configured so that the JVM can use them. When using large pages and not\n+enabling transparent huge pages (option `-XX:+UseTransparentHugePages`), the\n+number of large pages must be pre-allocated. For example, to enable 8 GB of\n+memory to be backed by 2 MB large pages, login as `root` and run:\n+\n+>   `# echo 4096 > \/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/nr_hugepages`\n+\n+It is always recommended to check the value of `nr_hugepages` after the request\n+to make sure the kernel was able to allocate the requested number of large\n+pages.\n+\n+> **Note:** The values contained in `\/proc` and `\/sys` reset after you\n+  reboot your system, so may want to set them in an initialization script\n+  (for example, `rc.local` or `sysctl.conf`).\n+\n+If you configure the OS kernel parameters to enable use of large pages, the\n+Java processes may allocate large pages for the Java heap as well as other\n+internal areas, for example:\n+\n+* Code cache\n+* Marking bitmaps\n+\n+Consequently, if you configure the `nr_hugepages` parameter to the size of the\n+Java heap, then the JVM can still fail to allocate the heap using large pages\n+because other areas such as the code cache might already have used some of the\n+configured large pages.\n+\n+### Large Pages Support for Windows\n+\n+To use large pages support on Windows, the\n+administrator must first assign additional privileges to the user who is running\n+the application:\n+\n+1.  Select **Control Panel**, **Administrative Tools**, and then **Local\n+    Security Policy**.\n+2.  Select **Local Policies** and then **User Rights Assignment**.\n+3.  Double-click **Lock pages in memory**, then add users and\/or groups.\n+4.  Reboot your system.\n+\n+Note that these steps are required even if it's the administrator who's running\n+the application, because administrators by default don't have the privilege to\n+lock pages in memory.\n+\n+## Application Class Data Sharing\n+\n+Application Class Data Sharing (AppCDS) stores classes used\n+by your applications in an archive file. Since these classes are\n+stored in a format that can be loaded very quickly (compared\n+to classes stored in a JAR file), AppCDS can improve the start-up\n+time of your applications. In addition, AppCDS can reduce the runtime\n+memory footprint by sharing parts of these classes across multiple\n+processes.\n+\n+Classes in the CDS archive are stored in an optimized format that's\n+about 2 to 5 times larger than classes stored in JAR files or the JDK\n+runtime image. Therefore, it's a good idea to archive only those\n+classes that are actually used by your application. These usually\n+are just a small portion of all available classes. For example, your\n+application may use only a few APIs provided by a large library.\n+\n+### Using CDS Archives\n+\n+By default, in most JDK distributions, unless `-Xshare:off` is\n+specified, the JVM starts up with a default CDS archive, which\n+is usually located in `JAVA_HOME\/lib\/server\/classes.jsa` (or\n+`JAVA_HOME\\bin\\server\\classes.jsa` on Windows). This\n+archive contains about 1300 core library classes that are used\n+by most applications.\n+\n+To use CDS for the exact set of classes used by your application,\n+you can use the `-XX:SharedArchiveFile` option, which has the\n+general form:\n+\n+>   `-XX:SharedArchiveFile=<static_archive>:<dynamic_archive>`\n+\n+-   The `<static_archive>` overrides the default CDS archive.\n+-   The `<dynamic_archive>` provides additional classes that can\n+    be loaded on top of those in the `<static_archive>`.\n+-   On Windows, the above path delimiter `:` should be replaced with `;`\n+\n+(The names \"static\" and \"dynamic\" are used for historical reasons.\n+The only significance is that the \"static\" archive is loaded first and\n+the \"dynamic\" archive is loaded second).\n+\n+The JVM can use up to two archives. To use only a single `<static_archive>`,\n+you can omit the `<dynamic_archive>` portion:\n+\n+>   `-XX:SharedArchiveFile=<static_archive>`\n+\n+For convenience, the `<dynamic_archive>` records the location of the\n+`<static_archive>`. Therefore, you can omit the `<static_archive>` by saying only:\n+\n+>   `-XX:SharedArchiveFile=<dynamic_archive>`\n+\n+### Manually Creating CDS Archives\n+\n+CDS archives can be created manually using several methods:\n+\n+-   `-Xshare:dump`\n+-   `-XX:ArchiveClassesAtExit`\n+-   `jcmd VM.cds`\n+\n+One common operation in all these methods is a \"trial run\", where you run\n+the application once to determine the classes that should be stored\n+in the archive.\n+\n+#### Creating a Static CDS Archive File with -Xshare:dump\n+\n+The following steps create a static CDS archive file that contains all the classes\n+used by the `test.Hello` application.\n+\n+1.  Create a list of all classes used by the `test.Hello` application. The\n+    following command creates a file named `hello.classlist` that contains a\n+    list of all classes used by this application:\n+\n+    >   `java -Xshare:off -XX:DumpLoadedClassList=hello.classlist -cp hello.jar test.Hello`\n+\n+    The classpath specified by the `-cp` parameter must contain only\n+    JAR files.\n+\n+2.  Create a static archive, named `hello.jsa`, that contains all the classes\n+    in `hello.classlist`:\n+\n+    >   `java -Xshare:dump -XX:SharedArchiveFile=hello.jsa -XX:SharedClassListFile=hello.classlist -cp hello.jar`\n+\n+3.  Run the application `test.Hello` with the archive `hello.jsa`:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello`\n+\n+4.  **Optional** Verify that the `test.Hello` application is using the class\n+    contained in the `hello.jsa` shared archive:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar -Xlog:class+load test.Hello`\n+\n+    The output of this command should contain the following text:\n+\n+    >   `[info][class,load] test.Hello source: shared objects file`\n+\n+By default, when the `-Xshare:dump` option is used, the JVM runs in interpreter-only mode\n+(as if the `-Xint` option were specified). This is required for generating deterministic output\n+in the shared archive file. I.e., the exact same archive will be generated, bit-for-bit, every time\n+you dump it. However, if deterministic output is not needed, and you have a large classlist, you can\n+explicitly add `-Xmixed` to the command-line to enable the JIT compiler. This will speed up\n+the archive creation.\n+\n+#### Creating a Dynamic CDS Archive File with -XX:ArchiveClassesAtExit\n+\n+Advantages of dynamic CDS archives are:\n+\n+-   They usually use less disk space, since they don't need to store the\n+    classes that are already in the static archive.\n+-   They are created with one fewer step than the comparable static archive.\n+\n+The following steps create a dynamic CDS archive file that contains the classes\n+that are used by the `test.Hello` application, excluding those that are already in\n+the default CDS archive.\n+\n+1.  Create a dynamic CDS archive, named `hello.jsa`, that contains all the classes\n+    in `hello.jar` loaded by the application `test.Hello`:\n+\n+    >   `java -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello`\n+\n+2.  Run the application `test.Hello` with the shared archive `hello.jsa`:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello`\n+\n+3. **Optional** Repeat step 4 of the previous section to verify that the `test.Hello` application is using the class\n+    contained in the `hello.jsa` shared archive.\n+\n+It's also possible to create a dynamic CDS archive with a non-default static CDS archive. E.g.,\n+\n+>   `java -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello`\n+\n+To run the application using this dynamic CDS archive:\n+\n+>   `java -XX:SharedArchiveFile=base.jsa:hello.jsa -cp hello.jar Hello`\n+\n+(On Windows, the above path delimiter `:` should be replaced with `;`)\n+\n+As mention above, the name of the static archive can be skipped:\n+\n+>   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello`\n+\n+#### Creating CDS Archive Files with jcmd\n+\n+The previous two sections require you to modify the application's start-up script\n+in order to create a CDS archive. Sometimes this could be difficult, for example,\n+if the application's class path is set up by complex routines.\n+\n+The `jcmd VM.cds` command provides a less intrusive way for creating a CDS\n+archive by connecting to a running JVM process. You can create either a\n+static:\n+\n+>   `jcmd <pid> VM.cds static_dump my_static_archive.jsa`\n+\n+or a dynamic archive:\n+\n+>   `jcmd <pid> VM.cds dynamic_dump my_dynamic_archive.jsa`\n+\n+To use the resulting archive file in a subsequent run of the application\n+without modifying the application's start-up script, you can use the\n+following technique:\n+\n+>   `env JAVA_TOOL_OPTIONS=-XX:SharedArchiveFile=my_static_archive.jsa bash app_start.sh`\n+\n+Note: to use `jcmd <pid> VM.cds dynamic_dump`, the JVM process identified by `<pid>`\n+must be started with `-XX:+RecordDynamicDumpInfo`, which can also be passed to the\n+application start-up script with the same technique:\n+\n+>   `env JAVA_TOOL_OPTIONS=-XX:+RecordDynamicDumpInfo bash app_start.sh`\n+\n+\n+### Creating Dynamic CDS Archive File with -XX:+AutoCreateSharedArchive\n+\n+`-XX:+AutoCreateSharedArchive` is a more convenient way of creating\/using\n+CDS archives. Unlike the methods of manual CDS archive creation described\n+in the previous section, with `-XX:+AutoCreateSharedArchive`, it's no longer\n+necessary to have a separate trial run. Instead, you can always run the\n+application with the same command-line and enjoy the benefits of CDS automatically.\n+\n+>   `java -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello`\n+\n+If the specified archive file exists and was created by the same version of the JDK,\n+then it will be loaded as a dynamic archive; otherwise it is ignored at VM startup.\n+\n+At VM exit, if the specified archive file does not exist, it will be created.\n+If it exists but was created with a different (but post JDK 19) version of the JDK,\n+then it will be replaced. In both cases the archive will be ready to be loaded the\n+next time the JVM is launched with the same command line.\n+\n+If the specified archive file exists but was created by a JDK version prior\n+to JDK 19, then it will be ignored: neither loaded at startup, nor replaced at exit.\n+\n+Developers should note that the contents of the CDS archive file are specific\n+to each build of the JDK. Therefore, if you switch to a different JDK build,\n+`-XX:+AutoCreateSharedArchive` will automatically recreate the archive to\n+match the JDK. If you intend to use this feature with an existing\n+archive, you should make sure that the archive is created by at least version\n+19 of the JDK.\n+\n+\n+### Restrictions on Class Path and Module Path\n+\n+-   Neither the class path (`-classpath` and `-Xbootclasspath\/a`)\n+    nor the module path (`--module-path`) can contain non-empty directories.\n+\n+-   Only modular JAR files are supported in `--module-path`. Exploded\n+    modules are not supported.\n+\n+-   The class path used at archive creation time must be the same as\n+    (or a prefix of) the class path used at run time. (There's no\n+    such requirement for the module path.)\n+\n+-   The CDS archive cannot be loaded if any JAR files in the class path or\n+    module path are modified after the archive is generated.\n+\n+-   If any of the VM options `--upgrade-module-path`, `--patch-module` or\n+    `--limit-modules` are specified, CDS is disabled. This means that the\n+    JVM will execute without loading any CDS archives. In addition, if\n+    you try to create a CDS archive with any of these 3 options specified,\n+    the JVM will report an error.\n+\n+## Performance Tuning Examples\n+\n+You can use the Java advanced runtime options to optimize the performance of\n+your applications.\n+\n+### Tuning for Higher Throughput\n+\n+Use the following commands and advanced options to achieve higher\n+throughput performance for your application:\n+\n+>   `java -server -XX:+UseParallelGC -XX:+UseLargePages -Xmn10g  -Xms26g -Xmx26g`\n+\n+### Tuning for Lower Response Time\n+\n+Use the following commands and advanced options to achieve lower\n+response times for your application:\n+\n+>   `java -XX:+UseG1GC -XX:MaxGCPauseMillis=100`\n+\n+### Keeping the Java Heap Small and Reducing the Dynamic Footprint of Embedded Applications\n+\n+Use the following advanced runtime options to keep the Java heap small and\n+reduce the dynamic footprint of embedded applications:\n+\n+>   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+> **Note:** The defaults for these two options are 70% and 40% respectively. Because\n+performance sacrifices can occur when using these small settings, you should\n+optimize for a small footprint by reducing these settings as much as possible\n+without introducing unacceptable performance degradation.\n+\n+## Exit Status\n+\n+The following exit values are typically returned by the launcher when the\n+launcher is called with the wrong arguments, serious errors, or exceptions\n+thrown by the JVM. However, a Java application may choose to return any value\n+by using the API call `System.exit(exitValue)`. The values are:\n+\n+-   `0`: Successful completion\n+\n+-   `>0`: An error occurred\n","filename":"src\/java.base\/share\/man\/java.md","additions":4078,"deletions":0,"binary":false,"changes":4078,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.ref.SoftReference;\n@@ -50,5 +49,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -75,1 +69,0 @@\n-import sun.rmi.transport.Channel;\n@@ -95,3 +88,1 @@\n-    @SuppressWarnings(\"removal\")\n-        LogStream.parseLevel(AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"sun.rmi.transport.tcp.logLevel\"))));\n+        LogStream.parseLevel(System.getProperty(\"sun.rmi.transport.tcp.logLevel\")));\n@@ -101,4 +92,1 @@\n-    @SuppressWarnings(\"removal\")\n-        AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-            Integer.getInteger(\"sun.rmi.transport.tcp.maxConnectionThreads\",\n-                               Integer.MAX_VALUE));\n+        Integer.getInteger(\"sun.rmi.transport.tcp.maxConnectionThreads\", Integer.MAX_VALUE);\n@@ -108,3 +96,1 @@\n-    @SuppressWarnings(\"removal\")\n-        AccessController.doPrivileged((PrivilegedAction<Long>) () ->\n-            Long.getLong(\"sun.rmi.transport.tcp.threadKeepAliveTime\", 60000));\n+        Long.getLong(\"sun.rmi.transport.tcp.threadKeepAliveTime\", 60000);\n@@ -119,3 +105,2 @@\n-                @SuppressWarnings(\"removal\")\n-                    return AccessController.doPrivileged(new NewThreadAction(\n-                        runnable, \"TCP Connection(idle)\", true, true));\n+                    return new NewThreadAction(\n+                        runnable, \"TCP Connection(idle)\", true, true).run();\n@@ -133,11 +118,0 @@\n-    \/** an AccessControlContext with no permissions *\/\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext NOPERMS_ACC = createNopermsAcc();\n-\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext createNopermsAcc() {\n-        Permissions perms = new Permissions();\n-        ProtectionDomain[] pd = { new ProtectionDomain(null, perms) };\n-        return new AccessControlContext(pd);\n-    }\n-\n@@ -157,1 +131,2 @@\n-    \/** number of milliseconds in accepted-connection timeout.\n+    \/**\n+     * Number of milliseconds in accepted-connection timeout.\n@@ -163,3 +138,1 @@\n-    @SuppressWarnings(\"removal\")\n-        AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-            Integer.getInteger(\"sun.rmi.transport.tcp.readTimeout\", 2 * 3600 * 1000));\n+        Integer.getInteger(\"sun.rmi.transport.tcp.readTimeout\", 2 * 3600 * 1000);\n@@ -310,18 +283,0 @@\n-    \/**\n-     * Verify that the current access control context has permission to\n-     * accept the connection being dispatched by the current thread.\n-     *\/\n-    protected void checkAcceptPermission(@SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        ConnectionHandler h = threadConnectionHandler.get();\n-        if (h == null) {\n-            throw new Error(\n-                \"checkAcceptPermission not in ConnectionHandler thread\");\n-        }\n-        h.checkAcceptPermission(sm, acc);\n-    }\n-\n@@ -335,1 +290,2 @@\n-     * Listen on transport's endpoint.\n+     * Listen on transport's endpoint. Do nothing if a server socket\n+     * and listening thread already exist.\n@@ -355,4 +311,2 @@\n-                @SuppressWarnings(\"removal\")\n-                Thread t = AccessController.doPrivileged(\n-                    new NewThreadAction(new AcceptLoop(server),\n-                                        \"TCP Accept-\" + port, true));\n+                Thread t = new NewThreadAction(new AcceptLoop(server),\n+                                        \"TCP Accept-\" + port, true).run();\n@@ -365,8 +319,0 @@\n-\n-        } else {\n-            \/\/ otherwise verify security access to existing server socket\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkListen(port);\n-            }\n@@ -664,11 +610,0 @@\n-        \/** most recently accept-authorized AccessControlContext *\/\n-        @SuppressWarnings(\"removal\")\n-        private AccessControlContext okContext;\n-        \/** cache of accept-authorized AccessControlContexts *\/\n-        @SuppressWarnings(\"removal\")\n-        private Map<AccessControlContext,\n-                    Reference<AccessControlContext>> authCache;\n-        \/** security manager which authorized contexts in authCache *\/\n-        @SuppressWarnings(\"removal\")\n-        private SecurityManager cacheSecurityManager = null;\n-\n@@ -688,31 +623,0 @@\n-        \/**\n-         * Verify that the given AccessControlContext has permission to\n-         * accept this connection.\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        void checkAcceptPermission(SecurityManager sm,\n-                                   AccessControlContext acc)\n-        {\n-            \/*\n-             * Note: no need to synchronize on cache-related fields, since this\n-             * method only gets called from the ConnectionHandler's thread.\n-             *\/\n-            if (sm != cacheSecurityManager) {\n-                okContext = null;\n-                authCache = new WeakHashMap<AccessControlContext,\n-                                            Reference<AccessControlContext>>();\n-                cacheSecurityManager = sm;\n-            }\n-            if (acc.equals(okContext) || authCache.containsKey(acc)) {\n-                return;\n-            }\n-            InetAddress addr = socket.getInetAddress();\n-            String host = (addr != null) ? addr.getHostAddress() : \"*\";\n-\n-            sm.checkAccept(host, socket.getPort());\n-\n-            authCache.put(acc, new SoftReference<AccessControlContext>(acc));\n-            okContext = acc;\n-        }\n-\n-        @SuppressWarnings(\"removal\")\n@@ -726,4 +630,1 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>)() -> {\n-                    run0();\n-                    return null;\n-                }, NOPERMS_ACC);\n+                run0();\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/tcp\/TCPTransport.java","additions":14,"deletions":113,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -222,5 +220,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        sm.checkListen(isa.getPort());\n-                    }\n@@ -392,5 +385,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null)\n-                    sm.checkConnect(isa.getAddress().getHostAddress(),\n-                                    isa.getPort());\n@@ -1122,1 +1110,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -1125,7 +1113,1 @@\n-        AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public Void run() {\n-                    System.loadLibrary(\"sctp\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"sctp\");\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,4 +188,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null)\n-                        sm.checkListen(isa.getPort());\n@@ -547,15 +543,0 @@\n-                            @SuppressWarnings(\"removal\")\n-                            SecurityManager sm = System.getSecurityManager();\n-                            if (sm != null) {\n-                                InetSocketAddress isa  = (InetSocketAddress)info.address();\n-                                if (!addressMap.containsKey(isa)) {\n-                                    \/* must be a new association *\/\n-                                    try {\n-                                        sm.checkAccept(isa.getAddress().getHostAddress(),\n-                                                       isa.getPort());\n-                                    } catch (SecurityException se) {\n-                                        buffer.clear();\n-                                        throw se;\n-                                    }\n-                                }\n-                            }\n@@ -844,6 +825,0 @@\n-                        } else { \/* must be new association *\/\n-                            @SuppressWarnings(\"removal\")\n-                            SecurityManager sm = System.getSecurityManager();\n-                            if (sm != null)\n-                                sm.checkConnect(addr.getAddress().getHostAddress(),\n-                                                addr.getPort());\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,4 +136,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null)\n-                    sm.checkListen(isa.getPort());\n@@ -244,1 +240,0 @@\n-            SctpChannel sc = null;\n@@ -271,10 +266,1 @@\n-            InetSocketAddress isa = isaa[0];\n-            sc = new SctpChannelImpl(provider(), newfd);\n-\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null)\n-                sm.checkAccept(isa.getAddress().getHostAddress(),\n-                               isa.getPort());\n-\n-            return sc;\n+            return new SctpChannelImpl(provider(), newfd);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-compiler\/vectorapi\/VectorRebracket128Test.java#Z 8330538 generic-all\n+compiler\/vectorapi\/VectorRebracket128Test.java 8330538 generic-all\n@@ -103,0 +103,11 @@\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id0 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id1 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id2 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id3 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id4 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id5 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id6 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id7 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id8 8344583 macosx-aarch64\n+runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java#id9 8344583 macosx-aarch64\n+\n@@ -118,3 +129,1 @@\n-runtime\/Dictionary\/CleanProtectionDomain.java 8341916 generic-all\n-runtime\/Dictionary\/ProtectionDomainCacheTest.java 8341916 generic-all\n-runtime\/logging\/ProtectionDomainVerificationTest.java 8341916 generic-all\n+runtime\/NMT\/VirtualAllocCommitMerge.java 8309698 linux-s390x\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}