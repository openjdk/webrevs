{"files":[{"patch":"@@ -305,0 +305,2 @@\n+  GrowableArray<int> boot_classpath_fds = ClassLoader::get_classpath_entry_fds();\n+\n@@ -343,0 +345,5 @@\n+    if (boot_classpath_fds.contains(fd)) {\n+      print_resources(\"OK: claimed by classloader\\n\");\n+      continue;\n+    }\n+\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -822,0 +822,21 @@\n+GrowableArray<int> ClassLoader::get_classpath_entry_fds() {\n+  log_info(crac)(\"Listing classpath FDS\");\n+  GrowableArray<int> fds;\n+  assert(Thread::current()->is_VM_thread(), \"should be called from VM op\");\n+  \/\/ we don't use mutexes here because it is called from VM op\n+  for (ClassPathEntry *entry = first_append_entry(); entry != nullptr; entry = entry->next()) {\n+    if (entry->is_jar_file()) {\n+      fds.append(((ClassPathZipEntry *) entry)->get_fd());\n+    }\n+  }\n+#if INCLUDE_CDS\n+  \/\/ Probably not needed as _app_classpath_entries is filled only when dumping CDS classes\n+  for (ClassPathEntry *entry = _app_classpath_entries; entry != nullptr; entry = entry->next()) {\n+    if (entry->is_jar_file()) {\n+      fds.append(((ClassPathZipEntry *) entry)->get_fd());\n+    }\n+  }\n+#endif \/\/ INCLUDE_CDS\n+  return fds;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+  int get_fd() const { return ZipLibrary::get_fd(_zip); }\n@@ -415,0 +416,3 @@\n+  \/\/ returns list of file descriptors used for both boot and app classpath entries\n+  static GrowableArray<int> get_classpath_entry_fds();\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+typedef int(*ZIP_GetFD_t)(jzfile *zip);\n@@ -50,0 +51,1 @@\n+static ZIP_GetFD_t ZIP_GetFD = nullptr;\n@@ -85,0 +87,1 @@\n+  ZIP_GetFD = CAST_TO_FN_PTR(ZIP_GetFD_t, dll_lookup(\"ZIP_GetFD\", path, false));\n@@ -198,0 +201,4 @@\n+\n+int ZipLibrary::get_fd(jzfile *zip) {\n+  return ZIP_GetFD ? ZIP_GetFD(zip) : -1;\n+}\n","filename":"src\/hotspot\/share\/utilities\/zipLibrary.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  static int get_fd(jzfile *zip);\n","filename":"src\/hotspot\/share\/utilities\/zipLibrary.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1695,0 +1695,10 @@\n+\n+JNIEXPORT int\n+ZIP_GetFD(jzfile *zip) {\n+#ifdef WIN32\n+    \/\/ File descriptors not applicable on Windows\n+    return -1;\n+#else\n+    return (int) zip->zfd;\n+#endif \/\/ !WIN32\n+}\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -284,0 +284,3 @@\n+JNIEXPORT int\n+ZIP_GetFD(jzfile *zip);\n+\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.instrument.Instrumentation;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.jar.JarFile;\n+\n+\/**\n+ * @test AddBootEntryTest\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @modules java.instrument\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build AddBootEntryTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class AddBootEntryTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        File agentJar = File.createTempFile(\"agent\", \".jar\");\n+        agentJar.deleteOnExit();\n+\n+        File manifest = File.createTempFile(\"manifest\", \".mf\");\n+        manifest.deleteOnExit();\n+        Files.writeString(manifest.toPath(), \"\"\"\n+            Manifest-Version: 1.0\n+            Premain-Class: AddBootEntryTest$Agent\n+            Can-Redefine-Classes: true\n+            \"\"\");\n+\n+        File testJar = File.createTempFile(\"test\", \".jar\");\n+        testJar.deleteOnExit();\n+\n+        String[] agentJarArgs = { \"--create\", \"--file\", agentJar.getPath(),\n+                \"--manifest\", manifest.getAbsolutePath(),\n+                Utils.TEST_CLASSES + File.separator + \"AddBootEntryTest$Agent.class\" };\n+        sun.tools.jar.Main jarTool = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarTool.run(agentJarArgs)) {\n+            throw new Exception(\"jar failed: args=\" + Arrays.toString(agentJarArgs));\n+        }\n+        String[] testJarArgs = {\"--create\", \"--file\", testJar.getPath(),\n+                Utils.TEST_CLASSES + File.separator + \"AddBootEntryTest$Agent.class\"};\n+        if (!jarTool.run(testJarArgs)) {\n+            throw new Exception(\"jar failed: args=\" + Arrays.toString(testJarArgs));\n+        }\n+\n+        new CracBuilder()\n+                .vmOption(\"-javaagent:\" + agentJar.getPath() + \"=\" + testJar.getPath())\n+                .printResources(true)\n+                .doCheckpoint();\n+        new CracBuilder().doRestore();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+    }\n+\n+    public static class Agent {\n+        public static void premain(String args, Instrumentation inst) throws IOException {\n+            inst.appendToBootstrapClassLoaderSearch(new JarFile(args));\n+        }\n+    }\n+\n+    public static class Dummy {}\n+}\n","filename":"test\/jdk\/jdk\/crac\/AddBootEntryTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}