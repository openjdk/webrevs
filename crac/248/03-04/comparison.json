{"files":[{"patch":"@@ -67,3 +67,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,3 +44,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,3 +56,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -310,3 +310,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -417,3 +417,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,6 +57,1 @@\n-#if 0\n-FIXME:CPUFeatures1\n-uint64_t VM_Version::_glibc_features;\n-uint64_t VM_Version::_features_saved;\n-uint64_t VM_Version::_glibc_features_saved;\n-#endif\n+VM_Version::VM_Features VM_Version::_features_saved;\n@@ -65,6 +60,2 @@\n-const char* VM_Version::      _features_names[] = {   CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n-#if 0\n-FIXME:CPUFeatures1\n-const char* VM_Version::_glibc_features_names[] = { GLIBC_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n-#endif\n-#undef DECLARE_CPU_FEATURE_FLAG\n+const char* VM_Version::_features_names[] = { CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME) };\n+#undef DECLARE_CPU_FEATURE_NAME\n@@ -117,1 +108,5 @@\n-  vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires FLUSH flag to be set: 0x%llx\", 1ULL << CPU_FLUSH));\n+  VM_Features flush;\n+  flush.set_feature(CPU_FLUSH);\n+  char buf[MAX_CPU_FEATURES];\n+  flush.print_numbers(buf, sizeof(buf));\n+  vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires FLUSH flag to be set: %s\", buf));\n@@ -877,4 +872,1 @@\n-#if 0\n-FIXME:CPUFeatures1\n-uint64_t VM_Version::CPUFeatures_parse(const char *str, uint64_t &glibc_features) {\n-  glibc_features = _glibc_features;\n+VM_Version::VM_Features VM_Version::CPUFeatures_parse(const char *str) {\n@@ -884,1 +876,1 @@\n-#endif\n+#else\n@@ -892,1 +884,0 @@\n-  glibc_features = 0;\n@@ -895,1 +886,1 @@\n-    return 0\n+    VM_Version::VM_Features retval;\n@@ -898,10 +889,10 @@\n-      | CPU_SSE \/\/ enabled in 'gcc -Q --help=target', used by OpenJDK\n-      | CPU_SSE2 \/\/ enabled in 'gcc -Q --help=target', required by OpenJDK\n-      | CPU_FXSR \/\/ enabled in 'gcc -Q --help=target', not used by OpenJDK\n-      | CPU_MMX \/\/ enabled in 'gcc -Q --help=target', used only by 32-bit x86 OpenJDK\n-      | CPU_TSC \/\/ not used by gcc, used by OpenJDK\n-      | CPU_CX8 \/\/ gcc detects it to set cpu \"pentium\" (=32-bit only), used by OpenJDK\n-      | CPU_CMOV \/\/ gcc detects it to set cpu \"pentiumpro\" (=32-bit only), used by OpenJDK\n-      | CPU_FLUSH \/\/ =\"clflush\" in cpuinfo, not used by gcc, required by OpenJDK\n-      \/\/ GLIBC_MOVBE is disabled in 'gcc -Q --help=target' and for example i7-720QM does not support it\n-      \/\/ GLIBC_LAHFSAHF is disabled in 'gcc -Q --help=target' and \"Early Intel Pentium 4 CPUs with Intel 64 support ... lacked the LAHF and SAHF instructions\"\n+    retval.set_feature(CPU_SSE); \/\/ enabled in 'gcc -Q --help=target', used by OpenJDK\n+    retval.set_feature(CPU_SSE2); \/\/ enabled in 'gcc -Q --help=target', required by OpenJDK\n+    retval.set_feature(CPU_FXSR); \/\/ enabled in 'gcc -Q --help=target', not used by OpenJDK\n+    retval.set_feature(CPU_MMX); \/\/ enabled in 'gcc -Q --help=target', used only by 32-bit x86 OpenJDK\n+    retval.set_feature(CPU_TSC); \/\/ not used by gcc, used by OpenJDK\n+    retval.set_feature(CPU_CX8); \/\/ gcc detects it to set cpu \"pentium\" (=32-bit only), used by OpenJDK\n+    retval.set_feature(CPU_CMOV); \/\/ gcc detects it to set cpu \"pentiumpro\" (=32-bit only), used by OpenJDK\n+    retval.set_feature(CPU_FLUSH); \/\/ =\"clflush\" in cpuinfo, not used by gcc, required by OpenJDK\n+    \/\/ CPU_MOVBE is disabled in 'gcc -Q --help=target' and for example i7-720QM does not support it\n+    \/\/ CPU_LAHFSAHF is disabled in 'gcc -Q --help=target' and \"Early Intel Pentium 4 CPUs with Intel 64 support ... lacked the LAHF and SAHF instructions\"\n@@ -909,11 +900,19 @@\n-    ;\n-  }\n-  char *endptr;\n-  errno = 0;\n-  uint64_t retval;\n-  unsigned long long ull = strtoull(str, &endptr, 0);\n-  retval = ull;\n-  if (!errno && *endptr == ',' && retval == ull) {\n-    ull = strtoull(endptr + 1, &endptr, 0);\n-    glibc_features = ull;\n-    if (!errno && !*endptr && glibc_features == ull) {\n+    return retval;\n+  }\n+  int count = VM_Version::VM_Features::features_bitmap_element_count();\n+  VM_Version::VM_Features retval;\n+  const char *str_orig = str;\n+  for (int idx = 0;; ++idx) {\n+    static_assert(sizeof(uint64_t) == sizeof(unsigned long long), \"unexpected arch\");\n+    char *endptr;\n+    errno = 0;\n+    uint64_t u64 = strtoull(str, &endptr, 0);\n+    if (errno != 0) {\n+      break;\n+    }\n+    bool last = idx + 1 == count;\n+    if (*endptr != (last ? 0 : ',')) {\n+      break;\n+    }\n+    retval.set_feature_idx(idx, u64);\n+    if (last) {\n@@ -922,0 +921,6 @@\n+    str = endptr + 1;\n+  }\n+  char buf[MAX_CPU_FEATURES];\n+  char *s = buf;\n+  for (int idx = 0; idx < count; ++idx) {\n+    s = stpcpy(s, \",0xNUM\");\n@@ -923,2 +928,3 @@\n-  vm_exit_during_initialization(err_msg(\"VM option 'CPUFeatures=%s' must be of the form: 0xnum,0xnum\", str));\n-  return -1;\n+  vm_exit_during_initialization(err_msg(\"VM option 'CPUFeatures=%s' must be of the form: %s\", str_orig, buf + 1));\n+  return {};\n+#endif \/\/ LINUX\n@@ -1044,2 +1050,2 @@\n-  uint64_t       features_expected =   MAX_CPU - 1;\n-  uint64_t glibc_features_expected = MAX_GLIBC - 1;\n+  VM_Version::VM_Features features_expected;\n+  features_expected.set_all_features();\n@@ -1047,2 +1053,1 @@\n-          features_expected =       _features;\n-    glibc_features_expected = _glibc_features;\n+    features_expected = _features;\n@@ -1050,2 +1055,1 @@\n-  uint64_t shouldnotuse_CPU   =       features_expected & ~      _features;\n-  uint64_t shouldnotuse_GLIBC = glibc_features_expected & ~_glibc_features;\n+  VM_Version::VM_Features shouldnotuse = features_expected & ~_features;\n@@ -1054,1 +1058,1 @@\n-  if (!shouldnotuse_CPU && !shouldnotuse_GLIBC)\n+  if (shouldnotuse.empty())\n@@ -1067,7 +1071,8 @@\n-  if ((_features & CPU_CMOV) &&\n-      (_features & CPU_CX8) &&\n-      \/\/ FPU is always present on i686+: (_features & CPU_FPU) &&\n-      (_features & CPU_SSE2)) {\n-    \/\/ These cannot be disabled by GLIBC_TUNABLES.\n-    if (shouldnotuse_CPU & (CPU_FXSR | CPU_MMX | CPU_SSE)) {\n-      assert(!(shouldnotuse_CPU & CPU_SSE2), \"CPU_SSE2 in both _features and shouldnotuse_CPU cannot happen\");\n+  if (_features.supports_feature(CPU_CMOV) &&\n+      _features.supports_feature(CPU_CX8) &&\n+      \/\/ FPU is always present on i686+: _features.supports_feature(CPU_FPU) &&\n+      _features.supports_feature(CPU_SSE2)) {\n+    \/\/ These cannot be disabled by CPU_TUNABLES.\n+    if (shouldnotuse.supports_feature(CPU_FXSR) || shouldnotuse.supports_feature(CPU_MMX) ||\n+        shouldnotuse.supports_feature(CPU_SSE)) {\n+      assert(!shouldnotuse.supports_feature(CPU_SSE2), \"CPU_SSE2 in both _features and shouldnotuse cannot happen\");\n@@ -1076,1 +1081,1 @@\n-      shouldnotuse_CPU |= CPU_SSE2;\n+      shouldnotuse.set_feature(CPU_SSE2);\n@@ -1078,3 +1083,3 @@\n-    if ((_features & CPU_FXSR) &&\n-        (_features & CPU_MMX) &&\n-        (_features & CPU_SSE)) {\n+    if (_features.supports_feature(CPU_FXSR) &&\n+        _features.supports_feature(CPU_MMX) &&\n+        _features.supports_feature(CPU_SSE)) {\n@@ -1089,7 +1094,7 @@\n-      if ((_features & CPU_POPCNT) &&\n-          (_features & CPU_SSSE3) &&\n-          (_features & CPU_SSE4_1) &&\n-          (_features & CPU_SSE4_2)) {\n-        if ((shouldnotuse_CPU & CPU_SSE3) ||\n-            (shouldnotuse_GLIBC & (GLIBC_CMPXCHG16 | GLIBC_LAHFSAHF))) {\n-          assert(!(shouldnotuse_CPU & CPU_SSE4_2), \"CPU_SSE4_2 in both _features and shouldnotuse_CPU cannot happen\");\n+      if (_features.supports_feature(CPU_POPCNT) &&\n+          _features.supports_feature(CPU_SSSE3) &&\n+          _features.supports_feature(CPU_SSE4_1) &&\n+          _features.supports_feature(CPU_SSE4_2)) {\n+        if (shouldnotuse.supports_feature(CPU_SSE3) ||\n+            (shouldnotuse.supports_feature(CPU_CMPXCHG16) || shouldnotuse.supports_feature(CPU_LAHFSAHF))) {\n+          assert(!shouldnotuse.supports_feature(CPU_SSE4_2), \"CPU_SSE4_2 in both _features and shouldnotuse cannot happen\");\n@@ -1097,1 +1102,1 @@\n-          shouldnotuse_CPU |= CPU_SSE4_2;\n+          shouldnotuse.set_feature(CPU_SSE4_2);\n@@ -1099,3 +1104,3 @@\n-        if ((_features & CPU_SSE3) &&\n-            (_glibc_features & GLIBC_CMPXCHG16) &&\n-            (_glibc_features & GLIBC_LAHFSAHF)) {\n+        if (_features.supports_feature(CPU_SSE3) &&\n+            _features.supports_feature(CPU_CMPXCHG16) &&\n+            _features.supports_feature(CPU_LAHFSAHF)) {\n@@ -1111,9 +1116,9 @@\n-          if ((_features & CPU_AVX) &&\n-              (_features & CPU_AVX2) &&\n-              (_features & CPU_BMI1) &&\n-              (_features & CPU_BMI2) &&\n-              (_features & CPU_FMA) &&\n-              (_features & CPU_LZCNT) &&\n-              (_glibc_features & GLIBC_MOVBE)) {\n-            if (shouldnotuse_GLIBC & GLIBC_F16C) {\n-              assert(!(shouldnotuse_GLIBC & GLIBC_MOVBE), \"GLIBC_MOVBE in both _glibc_features and shouldnotuse_GLIBC cannot happen\");\n+          if (_features.supports_feature(CPU_AVX) &&\n+              _features.supports_feature(CPU_AVX2) &&\n+              _features.supports_feature(CPU_BMI1) &&\n+              _features.supports_feature(CPU_BMI2) &&\n+              _features.supports_feature(CPU_FMA) &&\n+              _features.supports_feature(CPU_LZCNT) &&\n+              _features.supports_feature(CPU_MOVBE)) {\n+            if (shouldnotuse.supports_feature(CPU_F16C)) {\n+              assert(!shouldnotuse.supports_feature(CPU_MOVBE), \"CPU_MOVBE in both _features and shouldnotuse cannot happen\");\n@@ -1121,1 +1126,1 @@\n-              shouldnotuse_GLIBC |= GLIBC_MOVBE;\n+              shouldnotuse.set_feature(CPU_MOVBE);\n@@ -1123,1 +1128,1 @@\n-            if (_glibc_features & GLIBC_F16C) {\n+            if (_features.supports_feature(CPU_F16C)) {\n@@ -1138,3 +1143,0 @@\n-#define PASTE_TOKENS3(x, y, z) PASTE_TOKENS(x, PASTE_TOKENS(y, z))\n-  enum kind { KIND_CPU = 0, KIND_GLIBC, KIND_COUNT };\n-\n@@ -1142,2 +1144,1 @@\n-  \/\/ 64 is # of bits in uint64_t VM_Version::_glibc_features.\n-  char disable_str[KIND_COUNT * 64 * (1\/*','*\/ + 1\/*'-'*\/ + tunables_size_max) + 1\/*'\\0'*\/];\n+  char disable_str[MAX_CPU_FEATURES * (1\/*','*\/ + 1\/*'-'*\/ + tunables_size_max) + 1\/*'\\0'*\/];\n@@ -1146,1 +1147,1 @@\n-  auto disable = [&](enum kind kind, uint64_t value, const char *tunables) {\n+  auto disable = [&](const char *tunables) {\n@@ -1155,1 +1156,1 @@\n-  uint64_t handled[KIND_COUNT] = { 0 };\n+  VM_Version::VM_Features handled;\n@@ -1157,1 +1158,1 @@\n-  auto shouldnotuse_handled = [&](enum kind kind, uint64_t value, const char *kindstr, const char *tunables) {\n+  auto shouldnotuse_handled = [&](VM_Version::Feature_Flag feature, const char *tunables) {\n@@ -1159,2 +1160,2 @@\n-    assert((handled[kind] & value) == 0, \"already used %s_%s\", kindstr, tunables);\n-    DEBUG_ONLY(handled[kind] |= value);\n+    assert(!handled.supports_feature(feature), \"already used %s\", tunables);\n+    DEBUG_ONLY(handled.set_feature(feature));\n@@ -1162,1 +1163,1 @@\n-#define EXCESSIVE_HANDLED(kind, tunables) shouldnotuse_handled(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, tunables), STR(kind), STR(tunables))\n+#define EXCESSIVE_HANDLED(tunables) shouldnotuse_handled(PASTE_TOKENS(CPU_, tunables), STR(tunables))\n@@ -1170,5 +1171,4 @@\n-  const uint64_t shouldnotuseval[KIND_COUNT] = { shouldnotuse_CPU, shouldnotuse_GLIBC };\n-  auto shouldnotuse = [&](enum kind kind, uint64_t value, const char *kindstr, const char *tunables, bool feature_active) {\n-    shouldnotuse_handled(kind, value, kindstr, tunables);\n-    if ((shouldnotuseval[kind] & value) != 0 && feature_active) {\n-      disable(kind, value, tunables);\n+  auto shouldnotuse_set = [&](VM_Version::Feature_Flag feature, const char *tunables, bool feature_active) {\n+    shouldnotuse_handled(feature, tunables);\n+    if (shouldnotuse.supports_feature(feature) && feature_active) {\n+      disable(tunables);\n@@ -1177,32 +1177,30 @@\n-#define EXCESSIVE(kind, tunables) \\\n-    shouldnotuse(PASTE_TOKENS(KIND_, kind), PASTE_TOKENS3(kind, _, tunables), STR(kind), STR(tunables), FEATURE_ACTIVE(tunables))\n-\n-  EXCESSIVE(CPU  , AVX     );\n-  EXCESSIVE(CPU  , CX8     );\n-  EXCESSIVE(CPU  , FMA     );\n-  EXCESSIVE(CPU  , RTM     );\n-  EXCESSIVE(CPU  , AVX2    );\n-  EXCESSIVE(CPU  , BMI1    );\n-  EXCESSIVE(CPU  , BMI2    );\n-  EXCESSIVE(CPU  , CMOV    );\n-  EXCESSIVE(CPU  , ERMS    );\n-  EXCESSIVE(CPU  , SSE2    );\n-  EXCESSIVE(CPU  , LZCNT   );\n-  EXCESSIVE(CPU  , SSSE3   );\n-  EXCESSIVE(CPU  , POPCNT  );\n-  EXCESSIVE(CPU  , SSE4_1  );\n-  EXCESSIVE(CPU  , SSE4_2  );\n-  EXCESSIVE(CPU  , AVX512F );\n-  EXCESSIVE(CPU  , AVX512CD);\n-  EXCESSIVE(CPU  , AVX512BW);\n-  EXCESSIVE(CPU  , AVX512DQ);\n-  EXCESSIVE(CPU  , AVX512ER);\n-  EXCESSIVE(CPU  , AVX512PF);\n-  EXCESSIVE(CPU  , AVX512VL);\n-  EXCESSIVE(GLIBC, IBT     );\n-  EXCESSIVE(GLIBC, FMA4    );\n-  EXCESSIVE(GLIBC, MOVBE   );\n-  EXCESSIVE(GLIBC, SHSTK   );\n-  EXCESSIVE(GLIBC, XSAVE   );\n-  EXCESSIVE(GLIBC, OSXSAVE );\n-  EXCESSIVE(GLIBC, HTT     );\n+#define EXCESSIVE(tunables) shouldnotuse_set(PASTE_TOKENS(CPU_, tunables), STR(tunables), FEATURE_ACTIVE(tunables))\n+  EXCESSIVE(AVX     );\n+  EXCESSIVE(CX8     );\n+  EXCESSIVE(FMA     );\n+  EXCESSIVE(RTM     );\n+  EXCESSIVE(AVX2    );\n+  EXCESSIVE(BMI1    );\n+  EXCESSIVE(BMI2    );\n+  EXCESSIVE(CMOV    );\n+  EXCESSIVE(ERMS    );\n+  EXCESSIVE(SSE2    );\n+  EXCESSIVE(LZCNT   );\n+  EXCESSIVE(SSSE3   );\n+  EXCESSIVE(POPCNT  );\n+  EXCESSIVE(SSE4_1  );\n+  EXCESSIVE(SSE4_2  );\n+  EXCESSIVE(AVX512F );\n+  EXCESSIVE(AVX512CD);\n+  EXCESSIVE(AVX512BW);\n+  EXCESSIVE(AVX512DQ);\n+  EXCESSIVE(AVX512ER);\n+  EXCESSIVE(AVX512PF);\n+  EXCESSIVE(AVX512VL);\n+  EXCESSIVE(IBT     );\n+  EXCESSIVE(FMA4    );\n+  EXCESSIVE(MOVBE   );\n+  EXCESSIVE(SHSTK   );\n+  EXCESSIVE(XSAVE   );\n+  EXCESSIVE(OSXSAVE );\n+  EXCESSIVE(HTT     );\n@@ -1210,1 +1208,0 @@\n-#undef EXCESSIVE3\n@@ -1214,37 +1211,40 @@\n-#define GLIBC_UNSUPPORTED(kind, hotspot) EXCESSIVE_HANDLED(kind, hotspot)\n-  GLIBC_UNSUPPORTED(CPU  , 3DNOW_PREFETCH   );\n-  GLIBC_UNSUPPORTED(CPU  , SSE4A            );\n-  GLIBC_UNSUPPORTED(CPU  , TSC              );\n-  GLIBC_UNSUPPORTED(CPU  , TSCINV_BIT       );\n-  GLIBC_UNSUPPORTED(CPU  , TSCINV           );\n-  GLIBC_UNSUPPORTED(CPU  , AES              );\n-  GLIBC_UNSUPPORTED(CPU  , CLMUL            );\n-  GLIBC_UNSUPPORTED(CPU  , ADX              );\n-  GLIBC_UNSUPPORTED(CPU  , SHA              );\n-  GLIBC_UNSUPPORTED(CPU  , VZEROUPPER       );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VPOPCNTDQ );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VPCLMULQDQ);\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VAES      );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VNNI      );\n-  GLIBC_UNSUPPORTED(CPU  , FLUSH            );\n-  GLIBC_UNSUPPORTED(CPU  , FLUSHOPT         );\n-  GLIBC_UNSUPPORTED(CPU  , CLWB             );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VBMI2     );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_VBMI      );\n-  GLIBC_UNSUPPORTED(CPU  , HV               );\n-  GLIBC_UNSUPPORTED(CPU  , SSE3             );\n-  GLIBC_UNSUPPORTED(CPU  , SERIALIZE        );\n-  GLIBC_UNSUPPORTED(CPU  , RDTSCP           );\n-  GLIBC_UNSUPPORTED(CPU  , RDPID            );\n-  GLIBC_UNSUPPORTED(CPU  , FSRM             );\n-  GLIBC_UNSUPPORTED(CPU  , GFNI             );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_BITALG    );\n-  GLIBC_UNSUPPORTED(CPU  , F16C             );\n-  GLIBC_UNSUPPORTED(CPU  , PKU              );\n-  GLIBC_UNSUPPORTED(CPU  , OSPKE            );\n-  GLIBC_UNSUPPORTED(CPU  , CET_IBT          );\n-  GLIBC_UNSUPPORTED(CPU  , CET_SS           );\n-  GLIBC_UNSUPPORTED(CPU  , AVX512_IFMA      );\n-  GLIBC_UNSUPPORTED(CPU  , AVX_IFMA         );\n-  GLIBC_UNSUPPORTED(CPU  , APX_F            );\n-  GLIBC_UNSUPPORTED(CPU  , SHA512           );\n+#define GLIBC_UNSUPPORTED(hotspot) EXCESSIVE_HANDLED(hotspot)\n+  GLIBC_UNSUPPORTED(3DNOW_PREFETCH   );\n+  GLIBC_UNSUPPORTED(SSE4A            );\n+  GLIBC_UNSUPPORTED(TSC              );\n+  GLIBC_UNSUPPORTED(TSCINV_BIT       );\n+  GLIBC_UNSUPPORTED(TSCINV           );\n+  GLIBC_UNSUPPORTED(AES              );\n+  GLIBC_UNSUPPORTED(CLMUL            );\n+  GLIBC_UNSUPPORTED(ADX              );\n+  GLIBC_UNSUPPORTED(SHA              );\n+  GLIBC_UNSUPPORTED(VZEROUPPER       );\n+  GLIBC_UNSUPPORTED(AVX512_VPOPCNTDQ );\n+  GLIBC_UNSUPPORTED(AVX512_VPCLMULQDQ);\n+  GLIBC_UNSUPPORTED(AVX512_VAES      );\n+  GLIBC_UNSUPPORTED(AVX512_VNNI      );\n+  GLIBC_UNSUPPORTED(FLUSH            );\n+  GLIBC_UNSUPPORTED(FLUSHOPT         );\n+  GLIBC_UNSUPPORTED(CLWB             );\n+  GLIBC_UNSUPPORTED(AVX512_VBMI2     );\n+  GLIBC_UNSUPPORTED(AVX512_VBMI      );\n+  GLIBC_UNSUPPORTED(HV               );\n+  GLIBC_UNSUPPORTED(SSE3             );\n+  GLIBC_UNSUPPORTED(SERIALIZE        );\n+  GLIBC_UNSUPPORTED(RDTSCP           );\n+  GLIBC_UNSUPPORTED(RDPID            );\n+  GLIBC_UNSUPPORTED(FSRM             );\n+  GLIBC_UNSUPPORTED(GFNI             );\n+  GLIBC_UNSUPPORTED(AVX512_BITALG    );\n+  GLIBC_UNSUPPORTED(F16C             );\n+  GLIBC_UNSUPPORTED(PKU              );\n+  GLIBC_UNSUPPORTED(OSPKE            );\n+  GLIBC_UNSUPPORTED(CET_IBT          );\n+  GLIBC_UNSUPPORTED(CET_SS           );\n+  GLIBC_UNSUPPORTED(AVX512_IFMA      );\n+  GLIBC_UNSUPPORTED(AVX_IFMA         );\n+  GLIBC_UNSUPPORTED(APX_F            );\n+  GLIBC_UNSUPPORTED(SHA512           );\n+  GLIBC_UNSUPPORTED(AVX512_FP16      );\n+  GLIBC_UNSUPPORTED(AVX10_1          );\n+  GLIBC_UNSUPPORTED(AVX10_2          );\n@@ -1252,7 +1252,6 @@\n-  GLIBC_UNSUPPORTED(CPU  , FXSR             );\n-  GLIBC_UNSUPPORTED(CPU  , MMX              );\n-  GLIBC_UNSUPPORTED(CPU  , SSE              );\n-  GLIBC_UNSUPPORTED(CPU  , HT               );\n-  GLIBC_UNSUPPORTED(GLIBC, CMPXCHG16        );\n-  GLIBC_UNSUPPORTED(GLIBC, LAHFSAHF         );\n-  GLIBC_UNSUPPORTED(GLIBC, F16C             );\n+  GLIBC_UNSUPPORTED(FXSR             );\n+  GLIBC_UNSUPPORTED(MMX              );\n+  GLIBC_UNSUPPORTED(SSE              );\n+  GLIBC_UNSUPPORTED(HT               );\n+  GLIBC_UNSUPPORTED(CMPXCHG16        );\n+  GLIBC_UNSUPPORTED(LAHFSAHF         );\n@@ -1261,9 +1260,9 @@\n-  auto check_kind = [&](enum kind kind, const char *kindstr, uint64_t mask) {\n-    if (handled[kind] != mask) {\n-      vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of some %s_* 0x%\" PRIx64 \" != full 0x%\" PRIx64, kindstr, handled[kind], mask));\n-    }\n-  };\n-#define CHECK_KIND(kind) check_kind(PASTE_TOKENS(KIND_, kind), STR(kind), PASTE_TOKENS(MAX_, kind) - 1)\n-  CHECK_KIND(CPU  );\n-  CHECK_KIND(GLIBC);\n-#undef CHECK_KIND\n+  VM_Version::VM_Features all_features;\n+  all_features.set_all_features();\n+  if (handled != all_features) {\n+    char buf_handled[MAX_CPU_FEATURES];\n+    handled.print_numbers(buf_handled, sizeof(buf_handled));\n+    char buf_all_features[MAX_CPU_FEATURES];\n+    all_features.print_numbers(buf_all_features, sizeof(buf_all_features));\n+    vm_exit_during_initialization(err_msg(\"internal error: Unsupported disabling of some CPU_* %s != full %s\", buf_handled, buf_all_features));\n+  }\n@@ -1279,1 +1278,1 @@\n-#endif \/\/LINUX\n+#endif \/\/ LINUX\n@@ -1285,1 +1284,3 @@\n-    tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, _features, _glibc_features);\n+    char buf[MAX_CPU_FEATURES];\n+    _features.print_numbers(buf, sizeof(buf));\n+    tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=%s\", buf);\n@@ -1288,1 +1289,0 @@\n-#endif\n@@ -1294,9 +1294,1 @@\n-#if 0\n-FIXME:CPUFeatures1\n-  _features = 0;\n-  _glibc_features = 0;\n-FIXME:CPUFeatures2\n-  _features = 0;\n-FIXME:CPUFeatures3\n-#endif\n-\/\/FIXME:CPUFeatures4\n+  _features = VM_Version::VM_Features();\n@@ -1318,8 +1310,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n-    _cpu_features = _features;   \/\/ Preserve features\n-    LINUX_ONLY(_glibc_features = _cpuid_info.glibc_flags();)\n-FIXME:CPUFeatures2\n-    _cpu_features = _features;   \/\/ Preserve features\n-FIXME:CPUFeatures3\n-#endif\n@@ -1327,1 +1311,0 @@\n-\/\/FIXME:CPUFeatures4\n@@ -1341,4 +1324,3 @@\n-#if 0\n-FIXME:CPUFeatures1\n-    tty->print_cr(\"This machine's CPU features are: -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, _features, _glibc_features);\n-#endif\n+    char buf[MAX_CPU_FEATURES];\n+    _features.print_numbers(buf, sizeof(buf));\n+    tty->print_cr(\"This machine's CPU features are: -XX:CPUFeatures=%s\", buf);\n@@ -1351,2 +1333,7 @@\n-    if (!FLAG_IS_DEFAULT(CPUFeatures))\n-      vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires SSE2 flag to be set: 0x%llx\", 1ULL << CPU_SSE2));\n+    if (!FLAG_IS_DEFAULT(CPUFeatures)) {\n+      VM_Features sse2;\n+      sse2.set_feature(CPU_SSE2);\n+      char buf[MAX_CPU_FEATURES];\n+      sse2.print_numbers(buf, sizeof(buf));\n+      vm_exit_during_initialization(err_msg(\"-XX:CPUFeatures option requires SSE2 flag to be set: %s\", buf));\n+    }\n@@ -1579,7 +1566,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n-  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n-FIXME:CPUFeatures2\n-  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size, _features_names);\n-FIXME:CPUFeatures3\n-#endif\n@@ -1588,1 +1568,0 @@\n-\/\/FIXME:CPUFeatures4\n@@ -2571,16 +2550,6 @@\n-\/\/ Print the feature names as \" = feat1, ..., featN\\n\";\n-void VM_Version::missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n-  tty->print(\"; missing features of this CPU are \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X \" =\", features_missing, glibc_features_missing);\n-  char buf[512] = \"\";\n-#if 0\n-FIXME:CPUFeatures1\n-  \/\/ insert_features_names() does crash for undefined too high-numbered features.\n-  insert_features_names(buf, sizeof(buf)          ,       features_missing & (  MAX_CPU - 1));\n-  char *s = buf + strlen(buf);\n-  insert_features_names(s  , buf + sizeof(buf) - s, glibc_features_missing & (MAX_GLIBC - 1));\n-#endif\n-  tty->print_cr(\n-    \"%s\\n\"\n-    \"If you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\",\n-    \/* + 1 to skip the first ','. *\/\n-    buf + 1);\n+void VM_Version::VM_Features::print_missing_features() const {\n+  char buf[MAX_CPU_FEATURES * 16];\n+  print_numbers_and_names(buf, sizeof(buf));\n+  tty->print_cr(\"; missing features of this CPU are %s\\n\"\n+                \"If you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\",\n+                buf);\n@@ -2589,7 +2558,2 @@\n-static_assert(sizeof(VM_Version::CPUFeaturesBinary) == 2 * 8, \"unexpected sizeof\");\n-bool VM_Version::cpu_features_binary(VM_Version::CPUFeaturesBinary *data) {\n-#if 0\n-FIXME:CPUFeatures1\n-  data->cpu = _features;\n-  data->glibc = _glibc_features;\n-#endif\n+bool VM_Version::cpu_features_binary(VM_Version::VM_Features *data) {\n+  *data = _features;\n@@ -2599,3 +2563,1 @@\n-bool VM_Version::cpu_features_binary_check(const CPUFeaturesBinary *data) {\n-#if 0\n-FIXME:CPUFeatures1\n+bool VM_Version::cpu_features_binary_check(const VM_Version::VM_Features *data_ptr) {\n@@ -2604,1 +2566,1 @@\n-  if (!data) {\n+  if (!data_ptr) {\n@@ -2607,0 +2569,1 @@\n+  VM_Version::VM_Features data = *data_ptr;\n@@ -2609,1 +2572,3 @@\n-    tty->print_cr(\"This snapshot's stored CPU features are: -XX:CPUFeatures=0x%\" PRIx64 \",0x%\" PRIx64, data->cpu, data->glibc);\n+    char buf[MAX_CPU_FEATURES * 16];\n+    data.print_numbers_and_names(buf, sizeof(buf));\n+    tty->print_cr(\"This snapshot's stored CPU features are: -XX:CPUFeatures=%s\", buf);\n@@ -2612,5 +2577,1 @@\n-  uint64_t   CPUFeatures_x64 = data->cpu;\n-  uint64_t GLIBCFeatures_x64 = data->glibc;\n-\n-  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n-  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n+  VM_Version::VM_Features features_missing = data & ~_features;\n@@ -2619,9 +2580,11 @@\n-  features_missing &= ~CPU_HT;\n-\n-  if (features_missing || glibc_features_missing) {\n-    tty->print(\n-      \"You have to specify -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X\n-      \" together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X,\n-      CPUFeatures_x64 & _features, GLIBCFeatures_x64 & _glibc_features,\n-      CPUFeatures_x64, GLIBCFeatures_x64);\n-    missing_features(features_missing, glibc_features_missing);\n+  features_missing.clear_feature(CPU_HT);\n+\n+  if (!features_missing.empty()) {\n+    char buf_use[MAX_CPU_FEATURES];\n+    (data & _features).print_numbers(buf_use, sizeof(buf_use));\n+    char buf_have[MAX_CPU_FEATURES];\n+    data.print_numbers(buf_have, sizeof(buf_have));\n+    tty->print(\"You have to specify -XX:CPUFeatures=%s together with -XX:CRaCCheckpointTo when making a checkpoint file\"\n+               \"; specified -XX:CRaCRestoreFrom file contains CPU features %s\",\n+               buf_use, buf_have);\n+    features_missing.print_missing_features();\n@@ -2633,5 +2596,2 @@\n-        _features_saved =       _features;\n-  _glibc_features_saved = _glibc_features;\n-\n-        _features =   CPUFeatures_x64;\n-  _glibc_features = GLIBCFeatures_x64;\n+  _features_saved = _features;\n+  _features = data;\n@@ -2649,1 +2609,0 @@\n-#endif\n@@ -2702,5 +2661,1 @@\n-#if 0\n-FIXME:CPUFeatures1\n-  assert(      _features == 0,       \"_features should be zero at startup\");\n-  assert(_glibc_features == 0, \"_glibc_features should be zero at startup\");\n-#endif\n+  assert(_features.empty(), \"_features should be zero at startup\");\n@@ -2709,2 +2664,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n@@ -2713,5 +2666,2 @@\n-  uint64_t GLIBCFeatures_x64;\n-  uint64_t   CPUFeatures_x64 = CPUFeatures_parse(CPUFeatures, GLIBCFeatures_x64);\n-\n-  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n-  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n+  VM_Features CPUFeatures_parsed = CPUFeatures_parse(CPUFeatures);\n+  VM_Features features_missing = CPUFeatures_parsed & ~_features;\n@@ -2720,9 +2670,9 @@\n-  features_missing &= ~CPU_HT;\n-\n-  if (features_missing || glibc_features_missing) {\n-    tty->print(\n-      \"Specified -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X\n-      \"; this machine's CPU features are \" UINT64_FORMAT_X \",\" UINT64_FORMAT_X,\n-      CPUFeatures_x64, GLIBCFeatures_x64,\n-      _features, _glibc_features);\n-    missing_features(features_missing, glibc_features_missing);\n+  features_missing.clear_feature(CPU_HT);\n+\n+  if (!features_missing.empty()) {\n+    char buf_CPUFeatures_parsed[MAX_CPU_FEATURES];\n+    CPUFeatures_parsed.print_numbers(buf_CPUFeatures_parsed, sizeof(buf_CPUFeatures_parsed));\n+    char buf_features[MAX_CPU_FEATURES];\n+    _features.print_numbers(buf_features, sizeof(buf_features));\n+    tty->print(\"Specified -XX:CPUFeatures=%s; this machine's CPU features are %s\", buf_CPUFeatures_parsed, buf_features);\n+    features_missing.print_missing_features();\n@@ -2732,5 +2682,2 @@\n-        _features_saved =       _features;\n-  _glibc_features_saved = _glibc_features;\n-\n-        _features =   CPUFeatures_x64;\n-  _glibc_features = GLIBCFeatures_x64;\n+  _features_saved = _features;\n+  _features = CPUFeatures_parsed;\n@@ -2745,1 +2692,0 @@\n-#endif\n@@ -3708,0 +3654,23 @@\n+  \/\/ glibc-only features.\n+  if (std_cpuid1_ecx.bits.movbe != 0) {\n+    vm_features.set_feature(CPU_MOVBE);\n+  }\n+  if (std_cpuid1_ecx.bits.osxsave != 0) {\n+    vm_features.set_feature(CPU_OSXSAVE);\n+  }\n+  if (std_cpuid1_ecx.bits.xsave != 0) {\n+    vm_features.set_feature(CPU_XSAVE);\n+  }\n+  if (std_cpuid1_ecx.bits.cmpxchg16 != 0) {\n+    vm_features.set_feature(CPU_CMPXCHG16);\n+  }\n+  if (ext_cpuid1_ecx.bits.fma4 != 0) {\n+    vm_features.set_feature(CPU_FMA4);\n+  }\n+  if (ext_cpuid1_ecx.bits.LahfSahf != 0) {\n+    vm_features.set_feature(CPU_LAHFSAHF);\n+  }\n+  if (std_cpuid1_edx.bits.ht != 0) {\n+    vm_features.set_feature(CPU_HTT);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":264,"deletions":295,"binary":false,"changes":559,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+  friend class CracEngine;\n+  friend class crac;\n@@ -449,1 +451,10 @@\n-    decl(AVX10_2,           \"avx10_2\",           64) \/* AVX10 512 bit vector ISA Version 2 support*\/\n+    decl(AVX10_2,           \"avx10_2\",           64) \/* AVX10 512 bit vector ISA Version 2 support*\/ \\\n+    decl(FMA4,              \"fma4\",              65) \\\n+    decl(MOVBE,             \"movbe\",             66) \\\n+    decl(OSXSAVE,           \"osxsave\",           67) \\\n+    decl(IBT,               \"ibt\",               68) \\\n+    decl(SHSTK,             \"shstk\",             69) \/* Also known as cet_ss *\/ \\\n+    decl(XSAVE,             \"xsave\",             70) \\\n+    decl(CMPXCHG16,         \"cmpxchg16\",         71) \/* Also known in cpuinfo as cx16 and in glibc as cmpxchg16b *\/ \\\n+    decl(LAHFSAHF,          \"lahfsahf\",          72) \/* Also known in cpuinfo as lahf_lm and in glibc as lahf64_sahf64 *\/ \\\n+    decl(HTT,               \"htt\",               73) \/* hotspot calls it 'ht' but that is affected by threads_per_core() *\/\n@@ -454,6 +465,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n-    MAX_CPU = CPU_SHA512 << 1\n-FIXME:CPUFeatures2\n-FIXME:CPUFeatures3\n-#endif\n@@ -461,1 +466,0 @@\n-\/\/FIXME:CPUFeatures4\n@@ -464,30 +468,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n-  \/* Tracking of a CPU feature for glibc *\/ \\\n-  enum Glibc_Feature_Flag : uint64_t {\n-#define GLIBC_FEATURE_FLAGS(decl) \\\n-    decl(FMA4,              \"fma4\",               0) \\\n-    decl(MOVBE,             \"movbe\",              1) \\\n-    decl(OSXSAVE,           \"osxsave\",            2) \\\n-    decl(IBT,               \"ibt\",                3) \\\n-    decl(SHSTK,             \"shstk\",              4) \/* Also known as cet_ss *\/ \\\n-    decl(XSAVE,             \"xsave\",              5) \\\n-    decl(CMPXCHG16,         \"cmpxchg16\",          6) \/* Also known in cpuinfo as cx16 and in glibc as cmpxchg16b *\/ \\\n-    decl(LAHFSAHF,          \"lahfsahf\",           7) \/* Also known in cpuinfo as lahf_lm and in glibc as lahf64_sahf64 *\/ \\\n-    decl(F16C,              \"f16c\",               8) \\\n-    decl(HTT,               \"htt\",                9) \/* hotspot calls it 'ht' but it is affected by threads_per_core() *\/\n-\n-#define DECLARE_GLIBC_FEATURE_FLAG(id, name, bit) GLIBC_##id = (1ULL << bit),\n-    GLIBC_FEATURE_FLAGS(DECLARE_GLIBC_FEATURE_FLAG)\n-#undef DECLARE_GLIBC_FEATURE_FLAG\n-    MAX_GLIBC = GLIBC_HTT << 1\n-  };\n-\n-  \/\/ glibc feature flags.\n-  static uint64_t _glibc_features;\n-\n-  static uint64_t _features_saved, _glibc_features_saved;\n-\n-FIXME:CPUFeatures2\n-FIXME:CPUFeatures3\n-#endif\n@@ -499,1 +473,1 @@\n-    uint64_t _features_bitmap[(MAX_CPU_FEATURES \/ BitsPerLong) + 1];\n+    uint64_t _features_bitmap[(MAX_CPU_FEATURES + BitsPerLong - 1) \/ BitsPerLong];\n@@ -503,5 +477,0 @@\n-    \/\/ Number of 8-byte elements in _bitmap.\n-    constexpr static int features_bitmap_element_count() {\n-      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n-    }\n-\n@@ -527,0 +496,30 @@\n+\n+    static uint64_t index_mask(int idx) {\n+      assert(idx < features_bitmap_element_count(), \"Features array index out of bounds\");\n+      if (idx + 1 < features_bitmap_element_count()) {\n+        return -1LL;\n+      }\n+      \/\/ It is equivalent to 'bit_mask(MAX_CPU_FEATURES) - 1'.\n+      return ((bit_mask((Feature_Flag) ((int) MAX_CPU_FEATURES - 1)) - 1) << 1) | 1;\n+    }\n+\n+    \/\/ We do not use std::forward<> as we just call 'func'.\n+    template <typename T, typename F>\n+    static void apply_to_all_features(T&& t, F&& func) {\n+      for (int idx = 0; idx < t.features_bitmap_element_count(); ++idx) {\n+        func(t._features_bitmap[idx], idx);\n+      }\n+    }\n+\n+    \/\/ We do not use std::forward<> as we just call 'func'.\n+    template <typename F>\n+    void apply_to_all_features(F&& func) {\n+      apply_to_all_features(*this, func);\n+    }\n+\n+    \/\/ We do not use std::forward<> as we just call 'func'.\n+    template <typename F>\n+    void apply_to_all_features(F&& func) const {\n+      apply_to_all_features(*this, func);\n+    }\n+\n@@ -529,3 +528,8 @@\n-      for (int i = 0; i < features_bitmap_element_count(); i++) {\n-        _features_bitmap[i] = 0;\n-      }\n+      apply_to_all_features([](uint64_t &u, int idx) {\n+        u = 0;\n+      });\n+    }\n+\n+    \/\/ Number of 8-byte elements in _bitmap.\n+    constexpr static int features_bitmap_element_count() {\n+      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n@@ -548,0 +552,80 @@\n+\n+    void set_all_features() {\n+      apply_to_all_features([](uint64_t &u, int idx) {\n+        u = index_mask(idx);\n+      });\n+    }\n+\n+    void set_feature_idx(int idx, uint64_t val) {\n+      assert(idx < features_bitmap_element_count(), \"Features array index out of bounds\");\n+      _features_bitmap[idx] = val;\n+    }\n+\n+    VM_Features operator ~() const {\n+      VM_Features retval = *this;\n+      apply_to_all_features(retval, [](uint64_t &u, int idx) {\n+        u ^= index_mask(idx);\n+      });\n+      return retval;\n+    }\n+\n+    VM_Features operator &(const VM_Features &other) const {\n+      VM_Features retval = *this;\n+      apply_to_all_features(retval, [&other](uint64_t &u, int idx) {\n+        u &= other._features_bitmap[idx];\n+      });\n+      return retval;\n+    }\n+\n+    bool operator ==(const VM_Features &other) const {\n+      bool retval = true;\n+      apply_to_all_features([&other, &retval](uint64_t u, int idx) {\n+        if (u != other._features_bitmap[idx]) {\n+          retval = false;\n+        }\n+      });\n+      return retval;\n+    }\n+\n+    bool operator !=(const VM_Features &other) const {\n+      return !(*this == other);\n+    }\n+\n+    bool empty() const {\n+      VM_Features empty_features;\n+      return *this == empty_features;\n+    }\n+\n+    int print_numbers(char *buf_orig, size_t buflen) const {\n+      char *buf = buf_orig;\n+      apply_to_all_features([&](uint64_t u, int idx) {\n+        int res = jio_snprintf(buf, buflen, UINT64_FORMAT_X, u);\n+        buf += res;\n+        buflen -= res;\n+        assert(res > 0 && buflen >= 1, \"not enough temporary space allocated\");\n+        if (idx + 1 < features_bitmap_element_count()) {\n+          *buf++ = ',';\n+          --buflen;\n+        }\n+      });\n+      *buf = 0;\n+      return buf - buf_orig;\n+    }\n+\n+    void print_numbers_and_names(char *buf, size_t buflen) const {\n+      int res = print_numbers(buf, buflen);\n+      buf += res;\n+      buflen -= res;\n+      assert(buflen >= 3, \"not enough temporary space allocated\");\n+      *buf++ = ' ';\n+      --buflen;\n+      *buf = 0;\n+      insert_features_names(*this, buf, buflen);\n+\n+      \/\/ insert_features_names puts \", \" at the beginning, make it \" = \".\n+      if (*buf) {\n+        *buf = '=';\n+      }\n+    }\n+\n+    void print_missing_features() const;\n@@ -551,1 +635,1 @@\n-  static VM_Features _features;\n+  static VM_Features _features, _features_saved;\n@@ -556,1 +640,0 @@\n-\/\/FIXME:CPUFeatures4\n@@ -558,1 +641,0 @@\n-  static const char* _glibc_features_names[];\n@@ -708,28 +790,0 @@\n-#if 0\n-FIXME:CPUFeatures1\n-#ifdef LINUX\n-    uint64_t glibc_flags() const {\n-      uint64_t result = 0;\n-      if (std_cpuid1_ecx.bits.movbe != 0)\n-        result |= GLIBC_MOVBE;\n-      if (std_cpuid1_ecx.bits.osxsave != 0)\n-        result |= GLIBC_OSXSAVE;\n-      if (std_cpuid1_ecx.bits.xsave != 0)\n-        result |= GLIBC_XSAVE;\n-      if (std_cpuid1_ecx.bits.cmpxchg16 != 0)\n-        result |= GLIBC_CMPXCHG16;\n-      if (std_cpuid1_ecx.bits.f16c != 0)\n-        result |= GLIBC_F16C;\n-      if (ext_cpuid1_ecx.bits.fma4 != 0)\n-        result |= GLIBC_FMA4;\n-      if (ext_cpuid1_ecx.bits.LahfSahf != 0)\n-        result |= GLIBC_LAHFSAHF;\n-      if (std_cpuid1_edx.bits.ht != 0)\n-        result |= GLIBC_HTT;\n-      return result;\n-    }\n-#else\n-    uint64_t glibc_flags() const { return 0; }\n-#endif \/\/LINUX\n-#endif\n-\n@@ -775,1 +829,1 @@\n-  static uint64_t CPUFeatures_parse(const char *str, uint64_t &glibc_features);\n+  static VM_Features CPUFeatures_parse(const char *str);\n@@ -787,1 +841,0 @@\n-  \/*[[noreturn]]*\/ static void missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n@@ -857,7 +910,2 @@\n-  struct CPUFeaturesBinary {\n-    uint64_t cpu, glibc;\n-  };\n-  static bool cpu_features_binary(CPUFeaturesBinary *data);\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data);\n-#if 0\n-FIXME:CPUFeatures1\n+  static bool cpu_features_binary(VM_Features *data);\n+  static bool cpu_features_binary_check(const VM_Features *data);\n@@ -865,3 +913,0 @@\n-#else\n-  static bool ignore_cpu_features() { return true; }\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":135,"deletions":90,"binary":false,"changes":225,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-  struct CPUFeaturesBinary {};\n-  static bool cpu_features_binary(CPUFeaturesBinary *data) { return false; }\n-  static bool cpu_features_binary_check(const CPUFeaturesBinary *data) { return data == nullptr; }\n+  struct VM_Features {};\n+  static bool cpu_features_binary(VM_Features *data) { return false; }\n+  static bool cpu_features_binary_check(const VM_Features *data) { return data == nullptr; }\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    VM_Version::CPUFeaturesBinary data;\n+    VM_Version::VM_Features data;\n@@ -528,1 +528,1 @@\n-        VM_Version::CPUFeaturesBinary data;\n+        VM_Version::VM_Features data;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-bool CracEngine::cpufeatures_store(const VM_Version::CPUFeaturesBinary *datap) const {\n+bool CracEngine::cpufeatures_store(const VM_Version::VM_Features *datap) const {\n@@ -453,1 +453,1 @@\n-bool CracEngine::cpufeatures_load(VM_Version::CPUFeaturesBinary *datap, bool *presentp) const {\n+bool CracEngine::cpufeatures_load(VM_Version::VM_Features *datap, bool *presentp) const {\n@@ -460,1 +460,1 @@\n-  const VM_Version::CPUFeaturesBinary *cdatap;\n+  const VM_Version::VM_Features *cdatap;\n@@ -463,1 +463,1 @@\n-    if (size != sizeof(VM_Version::CPUFeaturesBinary)) {\n+    if (size != sizeof(VM_Version::VM_Features)) {\n@@ -465,1 +465,1 @@\n-      log_error(crac)(\"User data %s in %s has unexpected size %zu (expected %zu)\", cpufeatures_userdata_name, CRaCRestoreFrom, size, sizeof(VM_Version::CPUFeaturesBinary));\n+      log_error(crac)(\"User data %s in %s has unexpected size %zu (expected %zu)\", cpufeatures_userdata_name, CRaCRestoreFrom, size, sizeof(VM_Version::VM_Features));\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-  bool cpufeatures_store(const VM_Version::CPUFeaturesBinary *datap) const;\n-  bool cpufeatures_load(VM_Version::CPUFeaturesBinary *datap, bool *presentp) const;\n+  bool cpufeatures_store(const VM_Version::VM_Features *datap) const;\n+  bool cpufeatures_load(VM_Version::VM_Features *datap, bool *presentp) const;\n","filename":"src\/hotspot\/share\/runtime\/crac_engine.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -290,1 +290,10 @@\n-        AVX10_2\n+        AVX10_2,\n+        FMA4,\n+        MOVBE,\n+        OSXSAVE,\n+        IBT,\n+        SHSTK,\n+        XSAVE,\n+        CMPXCHG16,\n+        LAHFSAHF,\n+        HTT\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -69,1 +69,3 @@\n-                    \"apx_f\",        \"avx10_1\",          \"avx10_2\"\n+                    \"apx_f\",        \"avx10_1\",          \"avx10_2\",           \"fma4\",\n+                    \"movbe\",        \"osxsave\",          \"ibt\",               \"shstk\",\n+                    \"xsave\",        \"cmpxchg16\",        \"lahfsahf\",          \"htt\"\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/CPUInfoTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}