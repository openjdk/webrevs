{"files":[{"patch":"@@ -135,4 +135,28 @@\n-    @SuppressWarnings(\"removal\")\n-    private static List<String> checkpointRestore1(long jcmdStream) throws\n-            CheckpointException,\n-            RestoreException {\n+    private static List<String> parseNewArguments(String newArguments) {\n+        if (newArguments == null || newArguments.length() == 0) {\n+            return List.of();\n+        }\n+\n+        final var parsedNewArguments = new ArrayList<String>();\n+\n+        \/\/ Spaces \" \" separate arguments, escaped scapes \"\\ \" do not\n+        final char escChar = '\\\\';\n+        final char sepChar = ' ';\n+        final var curArgBuilder = new StringBuilder();\n+        for (int i = 0; i < newArguments.length(); ++i) {\n+            final char curChar = newArguments.charAt(i);\n+            switch (curChar) {\n+                case sepChar -> {\n+                    parsedNewArguments.add(curArgBuilder.toString());\n+                    curArgBuilder.setLength(0);\n+                }\n+                case escChar -> curArgBuilder.append(newArguments.charAt(++i));\n+                default -> curArgBuilder.append(curChar);\n+            }\n+        }\n+        parsedNewArguments.add(curArgBuilder.toString());\n+\n+        return parsedNewArguments;\n+    }\n+\n+    private static List<String> checkpointRestore1(long jcmdStream) throws CheckpointException, RestoreException {\n@@ -226,20 +250,1 @@\n-        final var parsedNewArguments = new ArrayList<String>();\n-        if (newArguments != null && newArguments.length() > 0) {\n-            \/\/ Parse arguments, unescape spaces\n-            final char escChar = '\\\\';\n-            final char sepChar = ' ';\n-            final var curArgBuilder = new StringBuilder();\n-            for (int i = 0; i < newArguments.length(); ++i) {\n-                final char curChar = newArguments.charAt(i);\n-                switch (curChar) {\n-                    case sepChar -> {\n-                        parsedNewArguments.add(curArgBuilder.toString());\n-                        curArgBuilder.setLength(0);\n-                    }\n-                    case escChar -> curArgBuilder.append(newArguments.charAt(++i));\n-                    default -> curArgBuilder.append(curChar);\n-                }\n-            }\n-            parsedNewArguments.add(curArgBuilder.toString());\n-        }\n-        return parsedNewArguments;\n+        return parseNewArguments(newArguments);\n@@ -310,1 +315,1 @@\n-                        \"new initial class = '\" + newMainClassName + \"', \" +\n+                        \"new main class = '\" + newMainClassName + \"', \" +\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/mirror\/Core.java","additions":30,"deletions":25,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -37,1 +38,0 @@\n- * @requires (os.family == \"linux\")\n","filename":"test\/jdk\/jdk\/crac\/newArgs\/CheckpointInNewMainTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -41,1 +42,2 @@\n- * @run driver jdk.test.lib.crac.CracTest SUCCESS\n+ * @run driver jdk.test.lib.crac.CracTest SUCCESS_CONTINUE\n+ * @run driver jdk.test.lib.crac.CracTest SUCCESS_EXIT\n@@ -44,1 +46,0 @@\n- * @requires (os.family == \"linux\")\n@@ -48,2 +49,2 @@\n-    private static final String RESTORE_MSG = \"RESTORED\";\n-    private static final String NEW_MAIN_MSG = \"Hello from new main!\";\n+    private static final String RESTORE_OLD_MSG = \"RESTORED IN OLD MAIN\";\n+    private static final String RESTORE_NEW_MSG = \"RESTORED IN NEW MAIN\";\n@@ -52,1 +53,2 @@\n-        SUCCESS,\n+        SUCCESS_CONTINUE,\n+        SUCCESS_EXIT,\n@@ -68,1 +70,1 @@\n-            out = builder.startRestoreWithArgs(null, List.of(NEW_MAIN_CLASS))\n+            out = builder.startRestoreWithArgs(null, List.of(NEW_MAIN_CLASS, variant.toString()))\n@@ -71,4 +73,7 @@\n-        if (variant == Variant.SUCCESS) {\n-            out.stdoutShouldContain(RESTORE_MSG).stdoutShouldContain(NEW_MAIN_MSG);\n-        } else {\n-            out.stdoutShouldNotContain(RESTORE_MSG).stdoutShouldNotContain(NEW_MAIN_MSG);\n+        switch (variant) {\n+            case SUCCESS_CONTINUE ->\n+                out.stdoutShouldContain(RESTORE_NEW_MSG).stdoutShouldContain(RESTORE_OLD_MSG);\n+            case SUCCESS_EXIT ->\n+                out.stdoutShouldContain(RESTORE_NEW_MSG).stdoutShouldNotContain(RESTORE_OLD_MSG);\n+            case CHECKPOINT_EXCEPTION, RESTORE_EXCEPTION ->\n+                out.stdoutShouldNotContain(RESTORE_NEW_MSG).stdoutShouldNotContain(RESTORE_OLD_MSG);\n@@ -102,1 +107,1 @@\n-            System.out.println(RESTORE_MSG);\n+            System.out.println(RESTORE_OLD_MSG);\n@@ -128,1 +133,4 @@\n-            System.out.println(NEW_MAIN_MSG);\n+            System.out.println(RESTORE_NEW_MSG);\n+            if (Variant.valueOf(args[0]) == Variant.SUCCESS_EXIT) {\n+                System.exit(0);\n+            }\n","filename":"test\/jdk\/jdk\/crac\/newArgs\/FailedCheckpointRestoreTest.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -41,2 +41,6 @@\n-            assertEquals(137, process.waitFor(), \"Checkpointed process was not killed as expected.\");\n-            \/\/ TODO: we could check that \"CR: Checkpoint\" was written out\n+            final var exitValue = process.waitFor();\n+            if (exitValue != 137 && builder.captureOutput) {\n+                printOutput();\n+            }\n+            assertEquals(137, exitValue, \"Checkpointed process was not killed as expected.\");\n+            builder.log(\"Process %d completed with exit value %d%n\", process.pid(), exitValue);\n@@ -109,0 +113,1 @@\n+        final OutputAnalyzer oa;\n@@ -110,3 +115,1 @@\n-            OutputAnalyzer oa = outputAnalyzer();\n-            System.err.print(oa.getStderr());\n-            System.out.print(oa.getStdout());\n+            oa = outputAnalyzer();\n@@ -116,0 +119,6 @@\n+        \/\/ Similar to OutputAnalyzer.reportDiagnosticSummary() but a bit better formatted\n+        System.err.println(\"stdout: [\");\n+        System.err.print(oa.getStdout());\n+        System.err.println(\"]\\nstderr: [\");\n+        System.err.print(oa.getStderr());\n+        System.err.println(\"]\\nexitValue = \" + oa.getExitValue() + \"\\n\");\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracProcess.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}