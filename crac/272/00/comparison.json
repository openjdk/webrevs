{"files":[{"patch":"@@ -286,1 +286,0 @@\n-            parse_crac(argv[i]);\n@@ -301,0 +300,3 @@\n+        for (size_t j = 0; j < args->size; j++) {\n+            parse_crac(args->elements[j]);\n+        }\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build LauncherVMOptionsTest\n+ * @run driver jdk.test.lib.crac.CracTest NONE\n+ * @run driver jdk.test.lib.crac.CracTest REGULAR\n+ * @run driver jdk.test.lib.crac.CracTest VM_OPTION\n+ * @run driver jdk.test.lib.crac.CracTest FILE\n+ * @requires (os.family == \"linux\")\n+ *\/\n+public class LauncherVMOptionsTest implements CracTest {\n+    private static final String CHECKPOINT_OPT = \"-XX:CRaCCheckpointTo=cr\";\n+    private static final String CR_VM_OPTIONS = \"cr_vm_options\";\n+\n+    enum Variant {\n+        NONE,\n+        REGULAR,\n+        VM_OPTION,\n+        FILE,\n+    }\n+\n+    @CracTestArg\n+    private Variant variant;\n+\n+    @Override\n+    public void test() throws Exception {\n+        \/\/ Let's prevent inheriting any GLIBC_TUNABLES value...\n+        assertNull(System.getenv(\"GLIBC_TUNABLES\"));\n+        CracBuilder builder = new CracBuilder();\n+        switch (variant) {\n+            case REGULAR -> builder.vmOption(CHECKPOINT_OPT);\n+            case VM_OPTION -> builder.env(\"JDK_JAVA_OPTIONS\", CHECKPOINT_OPT);\n+            case FILE -> {\n+                Files.writeString(Path.of(CR_VM_OPTIONS), CHECKPOINT_OPT + \"\\n\");\n+                builder.vmOption(\"@\" + CR_VM_OPTIONS);\n+            }\n+        }\n+        builder.doPlain();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        \/\/ When the launcher parses args\/VM options and detects that we're running in a configuration\n+        \/\/ allowing checkpoint, it will set GLIBC_TUNABLES=glibc.pthread.rseq=0\n+        String tunables = System.getenv(\"GLIBC_TUNABLES\");\n+        if (variant != Variant.NONE) {\n+            assertNotNull(tunables);\n+        } else {\n+            assertNull(tunables);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/LauncherVMOptionsTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -453,0 +453,4 @@\n+        cmd.addAll(vmOptions);\n+        for (var entry : javaOptions.entrySet()) {\n+            cmd.add(\"-D\" + entry.getKey() + \"=\" + entry.getValue());\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}