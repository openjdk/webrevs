{"files":[{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.ConfigSearchFind;\n+\n+\/**\n+ * This test case verifies that a string in the interview could be displayed when search option is \"In titles\".\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import jthtest.ConfigTools;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.Dumper;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.Config_Load.Config_Load;\n+import jthtest.Tools.WDLoadingResult;\n+import jthtest.Config_Edit.Config_Edit;\n+import jthtest.menu.Menu;\n+\n+public class ConfigSearchFind1 extends ConfigTools {\n+     public static void main(String[] args) {\n+          JUnitCore.main(\"jthtest.gui.ConfigSearchFind.ConfigSearchFind1\");\n+     }\n+\n+     @Test\n+     public void testConfig_Load1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+               InterruptedException, FileNotFoundException {\n+\n+          \/\/ Start Java Test application with -newDesktop\n+          startJavatestNewDesktop();\n+\n+          \/\/ get the reference of mainframe\n+          JFrameOperator mainFrame = findMainFrame();\n+\n+          \/\/ Close Quick Start Dialog window\n+          closeQS(mainFrame);\n+\n+          \/\/ Open default test suite\n+          openTestSuite(mainFrame);\n+\n+          \/\/ Create work directory\n+          createWorkDirInTemp(mainFrame);\n+\n+          \/\/ Load existing configuration file\n+          openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+          Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+          \/\/ Edit existing Configuration\n+          JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+          jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+          Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+          JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+          JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+          JDialogOperator config = findConfigEditor(mainFrame);\n+          pushNextConfigEditor(config);\n+\n+          \/\/ Click on Search and Find from menu\n+          jmbo1.pushMenu(\"Search\", \"\/\");\n+          jmbo1.pushMenu(\"Search\/Find...\", \"\/\");\n+          JDialogOperator FindQuestion = new JDialogOperator(\"Find Question\");\n+          JTextFieldOperator javastring = new JTextFieldOperator(FindQuestion);\n+          javastring.enterText(\"java\");\n+          JButtonOperator findButton = new JButtonOperator(FindQuestion, \"Find\");\n+          findButton.doClick();\n+          Thread.sleep(2000);\n+          ComponentChooser qu = new NameComponentChooser(\"qu.title\");\n+          JTextFieldOperator testConfig1 = new JTextFieldOperator(configEditorDialog, qu);\n+          Assert.assertTrue(\"The interview should display the question that has java string in it.\",\n+                    testConfig1.getText().equals(\"Java Virtual Machine\"));\n+     }\n+\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ConfigSearchFind\/ConfigSearchFind1.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.ConfigSearchFind;\n+\n+\/**\n+ * This test case verifies that a string in the interview could be displayed when search option is \"In text of questions\".\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import jthtest.ConfigTools;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.Dumper;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.Config_Load.Config_Load;\n+import jthtest.Tools.WDLoadingResult;\n+import jthtest.Config_Edit.Config_Edit;\n+import jthtest.menu.Menu;\n+\n+public class ConfigSearchFind2 extends ConfigTools {\n+     public static void main(String[] args) {\n+          JUnitCore.main(\"jthtest.gui.ConfigSearchFind.ConfigSearchFind2\");\n+     }\n+\n+     @Test\n+     public void testConfig_Load1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+               InterruptedException, FileNotFoundException {\n+\n+          \/\/ Start Java Test application with -newDesktop\n+          startJavatestNewDesktop();\n+\n+          \/\/ get the reference of mainframe\n+          JFrameOperator mainFrame = findMainFrame();\n+\n+          \/\/ Close Quick Start Dialog window\n+          closeQS(mainFrame);\n+\n+          \/\/ Open default test suite\n+          openTestSuite(mainFrame);\n+\n+          \/\/ Create work directory\n+          createWorkDirInTemp(mainFrame);\n+\n+          \/\/ Load existing configuration file\n+          openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+          Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+          \/\/ Edit Configuration\n+          JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+          jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+          Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+          JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+          JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+          JDialogOperator config = findConfigEditor(mainFrame);\n+          pushNextConfigEditor(config);\n+\n+          \/\/ Click on Search and Find from menu\n+          jmbo1.pushMenu(\"Search\", \"\/\");\n+          jmbo1.pushMenu(\"Search\/Find...\", \"\/\");\n+          JDialogOperator FindQuestion = new JDialogOperator(\"Find Question\");\n+          JTextFieldOperator javastring = new JTextFieldOperator(FindQuestion);\n+          javastring.enterText(\"java\");\n+\n+          \/\/ Display when search option is \"In text of questions\".\n+          inTextOfQuestions(FindQuestion);\n+\n+          JButtonOperator findButton = new JButtonOperator(FindQuestion, \"Find\");\n+          findButton.doClick();\n+          Thread.sleep(2000);\n+          ComponentChooser qu = new NameComponentChooser(\"file.txt\");\n+          JTextFieldOperator testConfig1 = new JTextFieldOperator(configEditorDialog, qu);\n+          Assert.assertTrue(\"The interview should display the question that has java string in text of it.\",\n+                    testConfig1.getText().contains(\"java\"));\n+     }\n+\n+     \/\/ Display when search option is \"In text of questions\".\n+     public void inTextOfQuestions(JDialogOperator FindQuestion) {\n+          ComponentChooser findWhere = new NameComponentChooser(\"find.where\");\n+          JComboBoxOperator jcfind = new JComboBoxOperator(FindQuestion, findWhere);\n+          jcfind.selectItem(1);\n+     }\n+\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ConfigSearchFind\/ConfigSearchFind2.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.ConfigSearchFind;\n+\n+\/**\n+ * This test case verifies that a string in the interview could be displayed when search option is \"In answers\".\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import jthtest.ConfigTools;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.Dumper;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.Config_Load.Config_Load;\n+import jthtest.Tools.WDLoadingResult;\n+import jthtest.Config_Edit.Config_Edit;\n+import jthtest.menu.Menu;\n+\n+public class ConfigSearchFind3 extends ConfigTools {\n+     public static void main(String[] args) {\n+          JUnitCore.main(\"jthtest.gui.ConfigSearchFind.ConfigSearchFind3\");\n+     }\n+\n+     @Test\n+     public void testConfig_Load1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+               InterruptedException, FileNotFoundException {\n+\n+          \/\/ Start Java Test application with -newDesktop\n+          startJavatestNewDesktop();\n+\n+          \/\/ get the reference of mainframe\n+          JFrameOperator mainFrame = findMainFrame();\n+\n+          \/\/ Close Quick Start Dialog window\n+          closeQS(mainFrame);\n+\n+          \/\/ Open default test suite\n+          openTestSuite(mainFrame);\n+\n+          \/\/ Create work directory\n+          createWorkDirInTemp(mainFrame);\n+\n+          \/\/ Load existing configuration file\n+          openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+          Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+          \/\/ Edit Configuration\n+          JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+          jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+          Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+          JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+          JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+          JDialogOperator config = findConfigEditor(mainFrame);\n+          pushNextConfigEditor(config);\n+\n+          \/\/ Click on Search and Find from menu\n+          jmbo1.pushMenu(\"Search\", \"\/\");\n+          jmbo1.pushMenu(\"Search\/Find...\", \"\/\");\n+          JDialogOperator FindQuestion = new JDialogOperator(\"Find Question\");\n+          JTextFieldOperator javastring = new JTextFieldOperator(FindQuestion);\n+          javastring.enterText(\"java\");\n+\n+          \/\/ Display when search option is \"In answers\".\n+          inAnswers(FindQuestion);\n+\n+          JButtonOperator findButton = new JButtonOperator(FindQuestion, \"Find\");\n+          findButton.doClick();\n+          Thread.sleep(2000);\n+          ComponentChooser qu = new NameComponentChooser(\"file.txt\");\n+          JTextFieldOperator testConfig1 = new JTextFieldOperator(configEditorDialog, qu);\n+          Assert.assertTrue(\"The interview should display the question that has java string in answer.\",\n+                    testConfig1.getText().contains(\"java\"));\n+     }\n+\n+     \/\/ Display when search option is \"In answers\".\n+     public void inAnswers(JDialogOperator FindQuestion) {\n+          ComponentChooser findWhere = new NameComponentChooser(\"find.where\");\n+          JComboBoxOperator jcfind = new JComboBoxOperator(FindQuestion, findWhere);\n+          jcfind.selectItem(2);\n+     }\n+\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ConfigSearchFind\/ConfigSearchFind3.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.ConfigSearchFind;\n+\n+\/**\n+ * This test case verifies that a string in the interview could be displayed when search option is \"Anywhere\".\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import jthtest.ConfigTools;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.Dumper;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.Config_Load.Config_Load;\n+import jthtest.Tools.WDLoadingResult;\n+import jthtest.Config_Edit.Config_Edit;\n+import jthtest.menu.Menu;\n+\n+public class ConfigSearchFind4 extends ConfigTools {\n+     public static void main(String[] args) {\n+          JUnitCore.main(\"jthtest.gui.ConfigSearchFind.ConfigSearchFind4\");\n+     }\n+\n+     @Test\n+     public void testConfig_Load1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+               InterruptedException, FileNotFoundException {\n+\n+          \/\/ Start Java Test application with -newDesktop\n+          startJavatestNewDesktop();\n+\n+          \/\/ get the reference of mainframe\n+          JFrameOperator mainFrame = findMainFrame();\n+\n+          \/\/ Close Quick Start Dialog window\n+          closeQS(mainFrame);\n+\n+          \/\/ Open default test suite\n+          openTestSuite(mainFrame);\n+\n+          \/\/ Create work directory\n+          createWorkDirInTemp(mainFrame);\n+\n+          \/\/ Load existing configuration file\n+          openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+          Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+          \/\/ Edit Configuration\n+          JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+          jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+          Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+          JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+          JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+          JDialogOperator config = findConfigEditor(mainFrame);\n+          pushNextConfigEditor(config);\n+\n+          \/\/ Click on Search and Find from menu\n+          jmbo1.pushMenu(\"Search\", \"\/\");\n+          jmbo1.pushMenu(\"Search\/Find...\", \"\/\");\n+          JDialogOperator FindQuestion = new JDialogOperator(\"Find Question\");\n+          JTextFieldOperator javastring = new JTextFieldOperator(FindQuestion);\n+          javastring.enterText(\"java\");\n+\n+          \/\/ Display when search option is \"Anywhere\".\n+          anywhere(FindQuestion);\n+\n+          JButtonOperator findButton = new JButtonOperator(FindQuestion, \"Find\");\n+          findButton.doClick();\n+          Thread.sleep(2000);\n+          ComponentChooser qu = new NameComponentChooser(\"qu.title\");\n+          ComponentChooser qu1 = new NameComponentChooser(\"file.txt\");\n+          JTextFieldOperator testConfig1 = new JTextFieldOperator(configEditorDialog, qu);\n+          JTextFieldOperator testConfig2 = new JTextFieldOperator(configEditorDialog, qu1);\n+          Assert.assertTrue(\"The interview should display the question that has java string in any field.\",\n+                    testConfig1.getText().equals(\"Java Virtual Machine\") || testConfig2.getText().contains(\"java\"));\n+     }\n+\n+     \/\/ Display when search option is \"Anywhere\".\n+     public void anywhere(JDialogOperator FindQuestion) {\n+          ComponentChooser findWhere = new NameComponentChooser(\"find.where\");\n+          JComboBoxOperator jcfind = new JComboBoxOperator(FindQuestion, findWhere);\n+          jcfind.selectItem(3);\n+     }\n+\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ConfigSearchFind\/ConfigSearchFind4.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.ConfigSearchFind;\n+\n+\/**\n+ * This test case verifies that an exactly string in the interview could be displayed when Consider case checkbox is check on.\n+ *\/\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import jthtest.ConfigTools;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.Dumper;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.Config_Load.Config_Load;\n+import jthtest.Tools.WDLoadingResult;\n+import jthtest.Config_Edit.Config_Edit;\n+import jthtest.menu.Menu;\n+\n+public class ConfigSearchFind5 extends ConfigTools {\n+     public static void main(String[] args) {\n+          JUnitCore.main(\"jthtest.gui.ConfigSearchFind.ConfigSearchFind5\");\n+     }\n+\n+     @Test\n+     public void testConfig_Load1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+               InterruptedException, FileNotFoundException {\n+\n+          \/\/ Start Java Test application with -newDesktop\n+          startJavatestNewDesktop();\n+\n+          \/\/ get the reference of mainframe\n+          JFrameOperator mainFrame = findMainFrame();\n+\n+          \/\/ Close Quick Start Dialog window\n+          closeQS(mainFrame);\n+\n+          \/\/ Open default test suite\n+          openTestSuite(mainFrame);\n+\n+          \/\/ Create work directory\n+          createWorkDirInTemp(mainFrame);\n+\n+          \/\/ Load existing configuration file\n+          openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+          Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+          \/\/ Edit Configuration\n+          JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+          jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+          Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+          JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+\n+          JDialogOperator config = findConfigEditor(mainFrame);\n+          pushNextConfigEditor(config);\n+\n+          clickOnFind(configEditorDialog, \"Java\");\n+\n+          ComponentChooser qu1 = new NameComponentChooser(\"qu.title\");\n+          JTextFieldOperator testConfig1 = new JTextFieldOperator(configEditorDialog, qu1);\n+          Thread.sleep(2000);\n+          Assert.assertTrue(\"The interview should display the question that has Java and not java string in it.\",\n+                    testConfig1.getText().equals(\"Java Virtual Machine\"));\n+\n+     }\n+\n+     \/\/ Click on Search-->Find\n+     public void clickOnFind(JDialogOperator configEditorDialog, String textToSearch) throws InterruptedException {\n+          JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+          jmbo1.pushMenu(\"Search\", \"\/\");\n+          jmbo1.pushMenu(\"Search\/Find...\", \"\/\");\n+          JDialogOperator FindQuestion = new JDialogOperator(\"Find Question\");\n+          Thread.sleep(1000);\n+          JTextFieldOperator javastring = new JTextFieldOperator(FindQuestion);\n+          javastring.enterText(textToSearch);\n+\n+          ComponentChooser findCase = new NameComponentChooser(\"find.case\");\n+          JCheckBoxOperator considerCase = new JCheckBoxOperator(FindQuestion, findCase);\n+          Thread.sleep(2000);\n+          considerCase.doClick();\n+\n+          JButtonOperator findButton = new JButtonOperator(FindQuestion, \"Find\");\n+          findButton.doClick();\n+     }\n+\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ConfigSearchFind\/ConfigSearchFind5.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}