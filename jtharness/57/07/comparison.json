{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javatest.exec.StatusTransformer;\n@@ -42,0 +43,2 @@\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n@@ -211,0 +214,5 @@\n+    \/**\n+     * Contains {@link StatusTransformer} that transforms the test result status, or {@code null}\n+     * if no transformer service was found.\n+     *\/\n+    private static final StatusTransformer STATUS_TRANSFORMER = loadStatusTransformer();\n@@ -468,1 +476,1 @@\n-        testResult.setStatus(execStatus);\n+        testResult.setStatus(tryModifyStatus(execStatus, td));\n@@ -480,0 +488,46 @@\n+\n+    \/**\n+     * This method runs the statusTransformer stored in the private variable. In case the statusTransformer is null\n+     * it returns the original status.\n+     * @param originalStatus - original status of the testrun\n+     * @param td - description of the test\n+     * @return status after modification (the originalStatus by default)\n+     *\/\n+    protected Status tryModifyStatus(Status originalStatus, TestDescription td){\n+        if (STATUS_TRANSFORMER == null) {\n+            return originalStatus;\n+        }\n+        \/\/in case the status has been modified by this function we want to log it for any user controlling the results.\n+        Status newStatus = STATUS_TRANSFORMER.transform(originalStatus, td);\n+        newStatus = new Status(newStatus.getType(), newStatus.getReason() +\n+                    \" - The status of this test result has been modified by external code - \" +\n+                STATUS_TRANSFORMER.getClass().getName());\n+        return newStatus;\n+    }\n+\n+\n+    \/**\n+     * This method tries to search for alternative implementations of StatusTransformer. Currently\n+     * only one implementation is allowed to be present at any given time. If no implementation is found\n+     * returns null.\n+     * @return StatusTransformer if only one implementation is found, null if no implementation has been found\n+     * and throws an exception of multiple implementations has been found.\n+     *\/\n+    private static synchronized StatusTransformer loadStatusTransformer(){\n+        ServiceLoader<StatusTransformer> loader = ServiceLoader.load(StatusTransformer.class);\n+\n+        Iterator<StatusTransformer> iterator = loader.iterator();\n+        StatusTransformer service = null;\n+\n+        while (iterator.hasNext()) {\n+            if (service != null) {\n+                \/\/ Found more than one implementation, throw an exception\n+                throw new IllegalStateException(\"Multiple implementations of the StatusTransformer found!\");\n+            }\n+\n+            service = iterator.next();\n+        }\n+\n+        return service;\n+    }\n+\n","filename":"src\/com\/sun\/javatest\/Script.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2002, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javatest.exec;\n+\n+import com.sun.javatest.Status;\n+import com.sun.javatest.TestDescription;\n+\n+\/**\n+ * Enables users to create their own status modifications for purposes of different testing strategies.\n+ * This allows user to omit certain kinds of failures or pinpoint tests that passed even though the jvm\n+ * crashed in the process without being intended to.\n+ *\/\n+public interface StatusTransformer {\n+    Status transform(Status originalStatus, TestDescription td);\n+}\n","filename":"src\/com\/sun\/javatest\/exec\/StatusTransformer.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+package com.sun.javatest;\n+\n+import com.oracle.tck.lib.autd2.unittests.exec.AutoPassTransformer;\n+import com.sun.javatest.exec.StatusTransformer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class ScriptTest {\n+    public class ScriptFailImpl extends Script{\n+\n+\n+        @Override\n+        public Status run(String[] args, TestDescription td, TestEnvironment env) {\n+            return new Status(Status.FAILED, \"failed\");\n+        }\n+    }\n+\n+    public class ScriptTransformImpl extends ScriptFailImpl{\n+\n+        @Override\n+        protected Status tryModifyStatus(Status originalStatus, TestDescription td) {\n+            return new Status(Status.PASSED, \"passed\");\n+        }\n+    }\n+\n+    @Test\n+    public void statusNoTransformerTest(){\n+        Script script = new ScriptFailImpl();\n+        Assert.assertTrue(runScript(script));\n+        TestResult testResult = script.getTestResult();\n+        Assert.assertNotNull(testResult.getStatus());\n+        Assert.assertEquals(testResult.getStatus().getType(), Status.FAILED);\n+    }\n+\n+    @Test\n+    public void statusTransformTest(){\n+        Script script = new ScriptTransformImpl();\n+        Assert.assertTrue(runScript(script));\n+        TestResult testResult = script.getTestResult();\n+        Assert.assertNotNull(testResult.getStatus());\n+        Assert.assertEquals(testResult.getStatus().getType(), Status.PASSED);\n+    }\n+\n+    private boolean runScript(Script script){\n+        File dir = new File(\"temp\");\n+        try {\n+            script.initWorkDir(WorkDirectory.create(dir, new TestSuite(dir)));\n+            Map<String, String> emptyMap = new HashMap<>();\n+            script.initTestDescription(new TestDescription(dir, dir, emptyMap));\n+            script.initTestEnvironment(new TestEnvironment(\"a\", emptyMap, \"b\"));\n+            script.run();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        return cleanup(dir);\n+    }\n+\n+\n+    private boolean cleanup(File file){\n+        String[]entries = file.list();\n+        boolean success = true;\n+        for(String s: entries){\n+            File currentFile = new File(file.getPath(),s);\n+            if(currentFile.isDirectory()){\n+                success = success && cleanup(currentFile);\n+            }\n+            else {\n+                success = success && currentFile.delete();\n+            }\n+        }\n+        return success && file.delete();\n+    }\n+}\n","filename":"unit-tests\/com\/sun\/javatest\/ScriptTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}