{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.javatest.exec.StatusModifierInterface;\n+import com.sun.javatest.exec.StatusTransformer;\n@@ -214,1 +214,4 @@\n-    private static StatusModifierInterface statusModifier;\n+    \/**\n+     * tries to search for a statusTransformer, no status transformations will be done if the value is null\n+     *\/\n+    private static final StatusTransformer statusTransformer = searchStatusTransformer();\n@@ -486,2 +489,2 @@\n-     * This method runs the statusModifier stored in the private variable. In case the statusModifier is null\n-     * it calls the method to search a statusModifierInterface implementation.\n+     * This method runs the statusTransformer stored in the private variable. In case the statusTransformer is null\n+     * it returns the original status.\n@@ -490,1 +493,1 @@\n-     * @return status after modification (the proposedStatus by default)\n+     * @return status after modification (the originalStatus by default)\n@@ -493,2 +496,2 @@\n-        if (statusModifier == null) {\n-            searchStatusModifier();\n+        if (statusTransformer == null) {\n+            return originalStatus;\n@@ -497,3 +500,2 @@\n-        Status newStatus = statusModifier.modify(originalStatus, td);\n-        if(newStatus != originalStatus){\n-            newStatus = new Status(newStatus.getType(), newStatus.getReason() +\n+        Status newStatus = statusTransformer.transform(originalStatus, td);\n+        newStatus = new Status(newStatus.getType(), newStatus.getReason() +\n@@ -501,1 +503,0 @@\n-        }\n@@ -507,1 +508,1 @@\n-     * This method tries to search for alternative implementations of statusModifierInterface. Currently\n+     * This method tries to search for alternative implementations of StatusTransformer. Currently\n@@ -511,2 +512,2 @@\n-    private synchronized void searchStatusModifier(){\n-        ServiceLoader<StatusModifierInterface> loader = ServiceLoader.load(StatusModifierInterface.class);\n+    private static synchronized StatusTransformer searchStatusTransformer(){\n+        ServiceLoader<StatusTransformer> loader = ServiceLoader.load(StatusTransformer.class);\n@@ -514,2 +515,2 @@\n-        Iterator<StatusModifierInterface> iterator = loader.iterator();\n-        StatusModifierInterface service = null;\n+        Iterator<StatusTransformer> iterator = loader.iterator();\n+        StatusTransformer service = null;\n@@ -520,1 +521,1 @@\n-                throw new IllegalStateException(\"Multiple implementations of the StatusModifierInterface found!\");\n+                throw new IllegalStateException(\"Multiple implementations of the StatusTransformer found!\");\n@@ -526,13 +527,1 @@\n-        if (service == null) {\n-            class DefaultModifier implements StatusModifierInterface {\n-\n-\n-                @Override\n-                public Status modify(Status originalStatus, TestDescription td) {\n-                    return originalStatus;\n-                }\n-            }\n-            service = new DefaultModifier();\n-        }\n-\n-        statusModifier = service;\n+        return service;\n","filename":"src\/com\/sun\/javatest\/Script.java","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-public interface StatusModifierInterface {\n-    Status modify(Status originalStatus, TestDescription td);\n+public interface StatusTransformer {\n+    Status transform(Status originalStatus, TestDescription td);\n","filename":"src\/com\/sun\/javatest\/exec\/StatusTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/com\/sun\/javatest\/exec\/StatusModifierInterface.java","status":"renamed"}]}