{"files":[{"patch":"@@ -496,1 +496,1 @@\n-    private Status tryModifyStatus(Status originalStatus, TestDescription td){\n+    protected Status tryModifyStatus(Status originalStatus, TestDescription td){\n@@ -503,1 +503,1 @@\n-                    \" - The status of this test result has been modified by external code\" +\n+                    \" - The status of this test result has been modified by external code - \" +\n","filename":"src\/com\/sun\/javatest\/Script.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+package com.sun.javatest;\n+\n+import com.oracle.tck.lib.autd2.unittests.exec.AutoPassTransformer;\n+import com.sun.javatest.exec.StatusTransformer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class ScriptTest {\n+    public class ScriptFailImpl extends Script{\n+\n+\n+        @Override\n+        public Status run(String[] args, TestDescription td, TestEnvironment env) {\n+            return new Status(Status.FAILED, \"failed\");\n+        }\n+    }\n+\n+    public class ScriptTransformImpl extends ScriptFailImpl{\n+\n+        @Override\n+        protected Status tryModifyStatus(Status originalStatus, TestDescription td) {\n+            return new Status(Status.PASSED, \"passed\");\n+        }\n+    }\n+\n+    @Test\n+    public void statusNoTransformerTest(){\n+        Script script = new ScriptFailImpl();\n+        Assert.assertTrue(runScript(script));\n+        TestResult testResult = script.getTestResult();\n+        Assert.assertNotNull(testResult.getStatus());\n+        Assert.assertEquals(testResult.getStatus().getType(), Status.FAILED);\n+    }\n+\n+    @Test\n+    public void statusTransformTest(){\n+        Script script = new ScriptTransformImpl();\n+        Assert.assertTrue(runScript(script));\n+        TestResult testResult = script.getTestResult();\n+        Assert.assertNotNull(testResult.getStatus());\n+        Assert.assertEquals(testResult.getStatus().getType(), Status.PASSED);\n+    }\n+\n+    private boolean runScript(Script script){\n+        File dir = new File(\"temp\");\n+        try {\n+            script.initWorkDir(WorkDirectory.create(dir, new TestSuite(dir)));\n+            Map<String, String> emptyMap = new HashMap<>();\n+            script.initTestDescription(new TestDescription(dir, dir, emptyMap));\n+            script.initTestEnvironment(new TestEnvironment(\"a\", emptyMap, \"b\"));\n+            script.run();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        return cleanup(dir);\n+    }\n+\n+\n+    private boolean cleanup(File file){\n+        String[]entries = file.list();\n+        boolean success = true;\n+        for(String s: entries){\n+            File currentFile = new File(file.getPath(),s);\n+            if(currentFile.isDirectory()){\n+                success = success && cleanup(currentFile);\n+            }\n+            else {\n+                success = success && currentFile.delete();\n+            }\n+        }\n+        return success && file.delete();\n+    }\n+}\n","filename":"unit-tests\/com\/sun\/javatest\/ScriptTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}