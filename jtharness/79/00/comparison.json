{"files":[{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Config_Load;\n+\n+import jthtest.ConfigTools;\n+import jthtest.Test;\n+import jthtest.Tools;\n+import jthtest.tools.ConfigDialog;\n+import jthtest.tools.Configuration;\n+import jthtest.tools.JTFrame;\n+import org.netbeans.jemmy.operators.JMenuItemOperator;\n+\n+public class Config_Load06_1 extends Test {\n+\n+    public void testImpl() throws Exception {\n+    JTFrame mainFrame = new JTFrame(true);\n+\n+    mainFrame.openDefaultTestSuite();\n+    addUsedFile(mainFrame.createWorkDirectoryInTemp());\n+\n+    Configuration configuration = mainFrame.getConfiguration();\n+    configuration.load(Tools.CONFIG_NAME, true);\n+    configuration.load(ConfigTools.SECOND_CONFIG_NAME, true);\n+    checkMenu(configuration.openByKey());\n+    }\n+\n+    private void checkMenu(ConfigDialog config) {\n+    JMenuItemOperator item = config.getFile_LoadRecentConfigurationMenu();\n+    if(!item.isEnabled()) {\n+        errors.add(\"Configuration Dialog: File -> Load Recent Configuration menu is not enabled while expected\");\n+        return;\n+    }\n+    JMenuItemOperator[] elements = config.getFile_LoadRecentConfiguration_subMenu();\n+    if (elements.length != 2) {\n+        errors.add(\"Count of elements is \" + elements.length + \" while expected 2\");\n+    }\n+    if (elements.length > 0) {\n+        if (!elements[0].getText().endsWith(ConfigTools.SECOND_CONFIG_NAME)) {\n+        errors.add(\"First element in the list is not 'democonfig_second.jti'\");\n+        }\n+    }\n+    if (elements.length > 1) {\n+        if (!elements[1].getText().endsWith(ConfigTools.CONFIG_NAME)) {\n+        errors.add(\"Second element in the list is not 'democonfig.jti'\");\n+        }\n+    }\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+    return \"This test loads 2 different configuration files and checks that File -> Recent Configuration menu in Configuration Editor dialog contains both of them\";\n+    }\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Config_Load\/Config_Load06_1.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Config_Load;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+public class Config_Load8 extends Config_Load {\n+    public static void main(String[] args) {\n+    JUnitCore.main(\"jthtest.gui.Config_Load.Config_Load8\");\n+    }\n+\n+    @Test\n+    public void testConfig_Load8() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+    startJavatestNewDesktop();\n+\n+    JFrameOperator mainFrame = findMainFrame();\n+\n+    closeQS(mainFrame);\n+\n+    openTestSuite(mainFrame);\n+\n+    createWorkDirInTemp(mainFrame);\n+\n+    openConfigFile(openLoadConfigDialogByMenu(mainFrame), \"democonfig with spaces.jti\");\n+    openConfigDialogByKey(mainFrame);\n+    }\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Config_Load\/Config_Load8.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.CustomReport;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JScrollPane;\n+import javax.swing.JViewport;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+\n+public class CustomReport9 extends CustomReport {\n+    public static void main(String[] args) {\n+    JUnitCore.main(\"jthtest.gui.CustomReport.CustomReport9\");\n+    }\n+\n+    @Test\n+    public void testCustomReport9() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, Exception {\n+    startJavaTestWithDefaultWorkDirectory();\n+\n+    JFrameOperator mainFrame = findMainFrame();\n+\n+    JDialogOperator rep = openReportCreation(mainFrame);\n+    JListOperator a = getList(rep);\n+    if(!(a.getParent() instanceof JScrollPane || a.getParent() instanceof JViewport)) {\n+        throw new JemmyException(\"The list is not scrollable, list parent is \" + a.getParent().getClass().getName());\n+    }\n+    }\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport9.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,407 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.menu;\n+\n+import jthtest.Test;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.TimeoutExpiredException;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JLabelOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+\n+public abstract class MenuItems extends Test {\n+\n+    public MenuItems() {\n+        super();\n+        maxTime = 1200000; \/\/ 20 min\n+    }\n+\n+    protected void checkGenericMenus(boolean ts, boolean wd) {\n+        String append = ts ? \", testsuite is opened\" : \"\";\n+        if (wd) {\n+            append = append + \", workdirectory is opened\";\n+        }\n+\n+        mainFrame.getTools_ReportConverterMenu().push();\n+        JDialogOperator d = null;\n+        try {\n+            d = new JDialogOperator(\"Create a Report\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+            mainFrame.closeCurrentTool();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Create a Report dialog: '\" + e.getMessage() + \"' (Tools->Report Converter...) pushed\" + append);\n+        }\n+\n+        mainFrame.getTools_TestResultsAuditorMenu().push();\n+        try {\n+            d = new JDialogOperator(WINDOWNAME + \" Harness Quick Start\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for \" + WINDOWNAME + \" Harness Quick Start dialog: '\" + e.getMessage() + \"' (Tools->Open Quick Start Wizard...) pushed\" + append);\n+        }\n+\n+        mainFrame.getTools_AgentMonitorMenu().push();\n+        try {\n+            String tabName = ts ? mainFrame.getTabName(1) : mainFrame.getTabName(0);\n+            if (!\"Agent Monitor\".equals(tabName)) {\n+                errors.add(\"Exception while looking for Agent Pool tab: 'Agent Monitor tab not found' (found \" + tabName + \") (Tools->Agent Monitor...) pushed\" + append);\n+            }\n+            mainFrame.closeCurrentTool();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Agent Pool tab: '\" + e.getMessage() + \"' (Tools->Agent Monitor...) pushed\" + append);\n+        }\n+\n+        mainFrame.getTools_TestResultsAuditorMenu().push();\n+        try {\n+            \/\/d = new JDialogOperator(\"Audit Test Results: Options\");\n+            d = new JDialogOperator(WINDOWNAME + \" Harness Quick Start\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+            \/\/mainFrame.closeCurrentTool();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Audit Test Results: Options dialog: '\" + e.getMessage() + \"' (Tools->Test Results Auditor...) pushed\" + append);\n+        }\n+\n+        mainFrame.getFile_OpenQuickStartMenu().push();\n+        try {\n+            d = new JDialogOperator(WINDOWNAME + \" Harness Quick Start\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for \" + WINDOWNAME + \" Harness Quick Start dialog: '\" + e.getMessage() + \"' (Files->Open Quick Start Wizard...) pushed\" + append);\n+        }\n+\n+        mainFrame.getFile_PreferencesMenu().push();\n+        try {\n+            d = new JDialogOperator(WINDOWNAME + \" Harness Preferences\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for \" + WINDOWNAME + \" Harness Preferences dialog: '\" + e.getMessage() + \"' (Files->Preferences...) pushed\" + append);\n+        }\n+\n+        mainFrame.getFile_Open_TestSuiteMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Open Test Suite\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Open Test Suite dialog: '\" + e.getMessage() + \"' (Files->Open->Test Suite ...) pushed\" + append);\n+        }\n+\n+        mainFrame.getFile_Open_WorkDirectoryMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Open Work Directory\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Open Work Directory dialog: '\" + e.getMessage() + \"' (Files->Open->Work Directory ...) pushed\" + append);\n+        }\n+    }\n+\n+    protected void checkTSMenus(boolean wd, boolean cfg) {\n+        String append = wd ? \", testsuite is opened, workdirectory is opened\" : \", testsuite is opened\";\n+\n+        JDialogOperator d;\n+\n+        mainFrame.getFile_CreateWorkDirectoryMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Create Work Directory\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Create Work Directory dialog: '\" + e.getMessage() + \"' (Files->Create Work Directory ...) pushed\" + append);\n+        }\n+        if (wd) {\n+            if (mainFrame.getTabsCount() < 2) {\n+                errors.add(\"New Tool was not opened when pushing File->Create Work Directory\" + append);\n+            } else if (mainFrame.getTabsCount() != 2) {\n+                throw new JemmyException(\"Error: tab count is not 2 (File->Create Work Directory)\");\n+            } else {\n+                mainFrame.closeCurrentTool();\n+            }\n+        }\n+\n+        mainFrame.getConfigure_LoadConfigurationMenu().push();\n+        if (wd) {\n+            try {\n+                d = new JDialogOperator(\"Load Configuration\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Load Configuration dialog: '\" + e.getMessage() + \"' (Configure->Load Configuration...) pushed\" + append);\n+            }\n+        } else {\n+            try {\n+                d = new JDialogOperator(\"Work Directory Required\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Work Directory Required dialog: '\" + e.getMessage() + \"' (Configure->Load Configuration...) pushed\" + append);\n+            }\n+            mainFrame.getConfigure_LoadConfigurationMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Work Directory Required\");\n+                new JButtonOperator(d, \"Create Work Directory\").push();\n+                d = new JDialogOperator(\"Create Work Directory\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Create Work Directory dialog: '\" + e.getMessage() + \"' (Configure->Load Configuration... : Create Work Directory) pushed\" + append);\n+            }\n+            mainFrame.getConfigure_LoadConfigurationMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Work Directory Required\");\n+                new JButtonOperator(d, \"Open Work Directory\").push();\n+                d = new JDialogOperator(\"Open Work Directory\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Open Work Directory dialog: '\" + e.getMessage() + \"' (Configure->Load Configuration... : Open Work Directory) pushed\" + append);\n+            }\n+        }\n+\n+        mainFrame.getConfigure_NewConfigurationMenu().push();\n+        if (wd) {\n+            try {\n+                d = new JDialogOperator(\"Configuration Editor\");\n+                d.close();\n+                if (cfg) {\n+                    d = new JDialogOperator(\"Warning: Unsaved Changes\");\n+                    new JButtonOperator(d, \"No\").push();\n+                }\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configure->New Configuration...) pushed\" + append);\n+            }\n+        } else {\n+            try {\n+                d = new JDialogOperator(\"Work Directory Required\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Work Directory Required dialog: '\" + e.getMessage() + \"' (Configure->New Configuration...) pushed\" + append);\n+            }\n+        }\n+\n+        if (!cfg) {\n+            mainFrame.getRunTests_StartMenu().push();\n+            if (wd) {\n+                try {\n+                    d = new JDialogOperator(\"Configuration Required\");\n+                    new JButtonOperator(d, \"Cancel\").push();\n+                } catch (Exception e) {\n+                    errors.add(\"Exception while looking for Configuration Required dialog: '\" + e.getMessage() + \"' (Run Tests->Start) pushed\" + append);\n+                }\n+                mainFrame.getRunTests_StartMenu().push();\n+                try {\n+                    d = new JDialogOperator(\"Configuration Required\");\n+                    new JButtonOperator(d, \"OK\").push();\n+                    d = new JDialogOperator(\"Configuration Editor\");\n+                    d.close();\n+                } catch (Exception e) {\n+                    errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Run Tests->Start : OK) pushed\" + append);\n+                }\n+            } else {\n+                try {\n+                    d = new JDialogOperator(\"Work Directory Required\");\n+                    new JButtonOperator(d, \"Cancel\").push();\n+                } catch (Exception e) {\n+                    errors.add(\"Exception while looking for Work Directory Required dialog: '\" + e.getMessage() + \"' (Run Tests->Start) pushed\" + append);\n+                }\n+            }\n+        }\n+\n+        mainFrame.getRunTests_MonitorProgressMenu().push();\n+        try {\n+            JFrameOperator f = new JFrameOperator(\"Test Manager: Progress Monitor\");\n+            new JButtonOperator(f, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Test Manager: Progress Monitor dialog: '\" + e.getMessage() + \"' (Run Tests->Monitor Progress...) pushed\" + append);\n+        }\n+\n+        if (wd) {\n+            mainFrame.getReport_CreateReportMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Create a New Report\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Create a New Report dialog: '\" + e.getMessage() + \"' (Report->Create Report...) pushed\" + append);\n+            }\n+\n+            mainFrame.getReport_OpenReportMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Open Report\");\n+                new JButtonOperator(d, \"Cancel\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Open Report dialog: '\" + e.getMessage() + \"' (Report->Open Report...) pushed\" + append);\n+            }\n+        }\n+\n+        mainFrame.getView_Configuration_ShowTestEnvironmentMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Test Environment: \");\n+            new JButtonOperator(d, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Test Environment: <name> dialog: '\" + e.getMessage() + \"' (View->Configuration->Show Test Environment...) pushed\" + append);\n+        }\n+\n+        mainFrame.getView_Configuration_ShowExcludeListMenu().push();\n+        try {\n+            d = new JDialogOperator(\"No Exclude List Specified\");\n+            new JButtonOperator(d, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for No Exclude List Specified dialog: '\" + e.getMessage() + \"' (View->Configuration->Show Exclude List...) pushed\" + append);\n+        }\n+\n+        if (!wd) {\n+            mainFrame.getView_Configuration_ShowChecklistMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Configuration Checklist\");\n+                new JButtonOperator(d, \"Close\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Configuration Checklist dialog: '\" + e.getMessage() + \"' (View->Configuration->Show Checklist...) pushed\" + append);\n+            }\n+        }\n+\n+        mainFrame.getView_Configuration_ShowQuestionLogMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Question Log\");\n+            new JButtonOperator(d, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Question Log dialog: '\" + e.getMessage() + \"' (View->Configuration->Show Question Log...) pushed\" + append);\n+        }\n+\n+        mainFrame.getView_Filter_ConfigureFiltersMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Filter Editor\");\n+            new JButtonOperator(d, \"Cancel\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Filter Editor <TS name> dialog: '\" + e.getMessage() + \"' (View->Filter->Configure Filters...) pushed\" + append);\n+        }\n+\n+        mainFrame.getView_PropertiesMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Test Manager Properties\");\n+            new JButtonOperator(d, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Test Manager Properties dialog: '\" + e.getMessage() + \"' (View->Properties...) pushed\" + append);\n+        }\n+\n+        if (wd) {\n+            mainFrame.getView_LogsMenu().push();\n+            try {\n+                d = new JDialogOperator(\"Log Viewer 1\");\n+                new JButtonOperator(d, \"Close\").push();\n+            } catch (Exception e) {\n+                errors.add(\"Exception while looking for Log Viewer 1 dialog: '\" + e.getMessage() + \"' (View->Logs...) pushed\" + append);\n+            }\n+        }\n+\n+        mainFrame.getView_TestSuiteErrorsMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Test Manager: Test Suite Errors\");\n+            new JButtonOperator(d, \"Close\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Test Manager: Test Suite Errors dialog: '\" + e.getMessage() + \"' (View->Test Suite Errors...) pushed\" + append);\n+        }\n+    }\n+\n+    protected void checkConfigMenus() {\n+        JDialogOperator d;\n+\n+        mainFrame.getConfigure_EditConfigurationMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            new JListOperator(d);\n+            try {\n+                new JTabbedPaneOperator(d);\n+                errors.add(\"Tabbed Pane found on Full Configuration Editor. Bad. \");\n+            } catch (TimeoutExpiredException e) {\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Configuration...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+\n+        mainFrame.getConfigure_EditQuickSet_TestsToRunMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            JTabbedPaneOperator tp = new JTabbedPaneOperator(d);\n+            if (!\"Tests\".equals(tp.getTitleAt(tp.getSelectedIndex()))) {\n+                errors.add(\"'Tests' tab was expected to be opened by Configuration->Edit Quick Set->Tests To Run ... and \" + tp.getTitleAt(tp.getSelectedIndex()) + \" was opened\");\n+            }\n+            try {\n+                new JListOperator(d);\n+                errors.add(\"List found on Quick Configuration Editor. Bad. \");\n+            } catch (TimeoutExpiredException e) {\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Quick Set->Tests To Run ...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+\n+        mainFrame.getConfigure_EditQuickSet_ConcurrencyMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            JTabbedPaneOperator tp = new JTabbedPaneOperator(d);\n+            if (!\"Execution\".equals(tp.getTitleAt(tp.getSelectedIndex()))) {\n+                errors.add(\"'Execution' tab was expected to be opened by Configuration->Edit Quick Set->Concurrency ... and \" + tp.getTitleAt(tp.getSelectedIndex()) + \" was opened\");\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Quick Set->Concurrency ...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+\n+        mainFrame.getConfigure_EditQuickSet_ExcludeListMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            JTabbedPaneOperator tp = new JTabbedPaneOperator(d);\n+            if (!\"Exclude List\".equals(tp.getTitleAt(tp.getSelectedIndex()))) {\n+                errors.add(\"'Exclude List' tab was expected to be opened by Configuration->Edit Quick Set->Exclude List ... and \" + tp.getTitleAt(tp.getSelectedIndex()) + \" was opened\");\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Quick Set->Exclude List ...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+\n+        mainFrame.getConfigure_EditQuickSet_PriorStatusMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            JTabbedPaneOperator tp = new JTabbedPaneOperator(d);\n+            if (!\"Prior Status\".equals(tp.getTitleAt(tp.getSelectedIndex()))) {\n+                errors.add(\"'Prior Status' tab was expected to be opened by Configuration->Edit Quick Set->Prior Status ... and \" + tp.getTitleAt(tp.getSelectedIndex()) + \" was opened\");\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Quick Set->Prior Status ...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+\n+        mainFrame.getConfigure_EditQuickSet_TimeoutFactorMenu().push();\n+        try {\n+            d = new JDialogOperator(\"Configuration Editor\");\n+            JTabbedPaneOperator tp = new JTabbedPaneOperator(d);\n+            if (!\"Execution\".equals(tp.getTitleAt(tp.getSelectedIndex()))) {\n+                errors.add(\"'Execution' tab was expected to be opened by Configuration->Edit Quick Set->Timeout Factor ... and \" + tp.getTitleAt(tp.getSelectedIndex()) + \" was opened\");\n+            }\n+            new JButtonOperator(d, \"Done\").push();\n+        } catch (Exception e) {\n+            errors.add(\"Exception while looking for Configuration Editor dialog: '\" + e.getMessage() + \"' (Configuration->Edit Quick Set->Timeout Factor ...) pushed, testsuite, workdirectory and configuration opened\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/menu\/MenuItems.java","additions":407,"deletions":0,"binary":false,"changes":407,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.menu;\n+\n+import jthtest.tools.JTFrame;\n+\n+public class MenuItems01 extends MenuItems {\n+\n+    @Override\n+    public void testImpl() throws Exception {\n+        mainFrame = new JTFrame(true);\n+        checkGenericMenus(false, false);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"This test checks that all menu items in main frame menu are working properly in newdesktop window\";\n+    }\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/menu\/MenuItems01.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.menu;\n+\n+import jthtest.tools.JTFrame;\n+\n+public class MenuItems02 extends MenuItems {\n+\n+    @Override\n+    public void testImpl() throws Exception {\n+        mainFrame = new JTFrame(true);\n+        mainFrame.openDefaultTestSuite();\n+        checkGenericMenus(true, false);\n+        checkTSMenus(false, false);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"This test checks that all menu items in main frame menu are working properly while testsuie is opened\";\n+    }\n+}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/menu\/MenuItems02.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}