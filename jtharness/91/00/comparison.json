{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import javax.swing.JCheckBox;\n+import javax.swing.BoxLayout;\n@@ -52,0 +54,1 @@\n+import java.awt.event.ItemEvent;\n@@ -56,1 +59,0 @@\n-    protected static final int DOTS_PER_INCH = Toolkit.getDefaultToolkit().getScreenResolution();\n@@ -79,21 +81,15 @@\n-        AbstractTableModel tm = createTableModel();\n-        JTable tbl = new JTable(tm);\n-\n-        tbl.setPreferredScrollableViewportSize(new Dimension(DOTS_PER_INCH, DOTS_PER_INCH));\n-        tbl.setShowHorizontalLines(false);\n-        tbl.setShowVerticalLines(false);\n-        tbl.setTableHeader(null);\n-        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);\n-        tbl.setRowSelectionAllowed(false);\n-        tbl.setColumnSelectionAllowed(false);\n-        tbl.setToolTipText(i18n.getString(\"chcArr.tbl.tip\"));\n-\n-        tbl.addKeyListener(createKeyListener(tm));\n-\n-        TableColumn col0 = tbl.getColumnModel().getColumn(0);\n-        col0.setPreferredWidth(24);\n-        col0.setMaxWidth(24);\n-        col0.setResizable(false);\n-\n-        TableColumn col1 = tbl.getColumnModel().getColumn(1);\n-        col1.setPreferredWidth(getColumnWidth(tbl, 1) + 20);\n+        JPanel itemsPanel = new JPanel();\n+        itemsPanel.setToolTipText(i18n.getString(\"chcArr.tbl.tip\"));\n+        BoxLayout layout = new BoxLayout(itemsPanel, BoxLayout.Y_AXIS);\n+        itemsPanel.setLayout(layout);\n+        for (int i = 0; i < displayChoices.length; i++) {\n+            JCheckBox jCheckBox = new JCheckBox(displayChoices[i], values[i]);\n+            jCheckBox.setFocusPainted(true);\n+            int index = i;\n+            jCheckBox.addItemListener(event -> {\n+                values[index] = event.getStateChange() == ItemEvent.SELECTED ;\n+                q.setValue(values);\n+                fireEditedEvent(jCheckBox, editedListener);\n+            });\n+            itemsPanel.add(jCheckBox);\n+        }\n@@ -101,1 +97,1 @@\n-        JScrollPane sp = new JScrollPane(tbl);\n+        JScrollPane sp = new JScrollPane(itemsPanel);\n@@ -103,2 +99,0 @@\n-        sp.getViewport().setBackground(tbl.getBackground());\n-\n@@ -112,2 +106,0 @@\n-        tbl.setRowHeight(getRowHeight());\n-\n@@ -121,28 +113,0 @@\n-    protected int getColumnWidth(JTable table, int colIndex) {\n-        int width = -1;\n-\n-        TableModel model = table.getModel();\n-\n-        for (int i = 0; i < model.getRowCount(); i++) {\n-            TableCellRenderer r = table.getCellRenderer(i, colIndex);\n-            Component c = r.getTableCellRendererComponent(table,\n-                    model.getValueAt(i, colIndex),\n-                    false, false, i, colIndex);\n-            width = Math.max(width, c.getPreferredSize().width);\n-        }\n-\n-        return width;\n-    }\n-\n-    protected int getRowHeight() {\n-        return 22;\n-    }\n-\n-    protected AbstractTableModel createTableModel() {\n-        return new TestTableModel();\n-    }\n-\n-    protected KeyListener createKeyListener(AbstractTableModel tm) {\n-        return new TestKeyListener(tm);\n-    }\n-\n@@ -155,67 +119,0 @@\n-\n-    protected static class TestKeyListener extends KeyAdapter {\n-        protected AbstractTableModel tm;\n-\n-        public TestKeyListener(AbstractTableModel tm) {\n-            this.tm = tm;\n-        }\n-\n-        @Override\n-        public void keyPressed(KeyEvent e) {\n-            if ((e.getModifiersEx() & InputEvent.CTRL_DOWN_MASK) != 0 && e.getKeyCode() == KeyEvent.VK_A) {\n-                boolean allSelected = true;\n-                for (int i = 0; i < tm.getRowCount(); i++) {\n-                    if (tm.getValueAt(i, 0).equals(Boolean.FALSE)) {\n-                        allSelected = false;\n-                        break;\n-                    }\n-\n-                }\n-                for (int i = 0; i < tm.getRowCount(); i++) {\n-                    tm.setValueAt(Boolean.valueOf(!allSelected), i, 0);\n-                    TableModelEvent ev = new TableModelEvent(tm, i, i,\n-                            TableModelEvent.ALL_COLUMNS,\n-                            TableModelEvent.UPDATE);\n-                    tm.fireTableChanged(ev);\n-                }\n-            }\n-\n-        }\n-    }\n-\n-    protected class TestTableModel extends AbstractTableModel {\n-        @Override\n-        public Class<?> getColumnClass(int c) {\n-            return c == 0 ? Boolean.class : String.class;\n-        }\n-\n-        @Override\n-        public int getColumnCount() {\n-            return 2;\n-        }\n-\n-        @Override\n-        public int getRowCount() {\n-            return displayChoices.length;\n-        }\n-\n-        @Override\n-        public Object getValueAt(int r, int c) {\n-            return c == 0 ? Boolean.valueOf(values[r]) : displayChoices[r];\n-        }\n-\n-        @Override\n-        public void setValueAt(Object o, int r, int c) {\n-            if (c == 0) {\n-                values[r] = ((Boolean) o).booleanValue();\n-                q.setValue(values);\n-                fireEditedEvent(this, editedListener);\n-            }\n-        }\n-\n-        @Override\n-        public boolean isCellEditable(int r, int c) {\n-            return c == 0;\n-        }\n-    }\n-\n","filename":"src\/com\/sun\/interview\/wizard\/ChoiceArrayQuestionRenderer.java","additions":19,"deletions":122,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javax.swing.BoxLayout;\n@@ -52,0 +53,1 @@\n+import java.awt.event.FocusAdapter;\n@@ -57,1 +59,0 @@\n-    protected static final int DOTS_PER_INCH = Toolkit.getDefaultToolkit().getScreenResolution();\n@@ -84,5 +85,0 @@\n-        TableModel tm = createTableModel();\n-        final JTable tbl = new JTable(tm);\n-        tbl.setOpaque(false);\n-\n-\n@@ -90,0 +86,3 @@\n+        JPanel itemsPanel = new JPanel();\n+        BoxLayout layout = new BoxLayout(itemsPanel, BoxLayout.Y_AXIS);\n+        itemsPanel.setLayout(layout);\n@@ -108,1 +107,0 @@\n-            rb[i].setBackground(tbl.getBackground());\n@@ -111,1 +109,1 @@\n-            rb[i].setFocusPainted(false);\n+            rb[i].setFocusPainted(true);\n@@ -114,0 +112,1 @@\n+            final int index = i;\n@@ -115,4 +114,2 @@\n-                CellEditor editor = tbl.getCellEditor();\n-                if (editor != null) {\n-                    editor.stopCellEditing();\n-                }\n+                q.setValue(values[index + starts_from]);\n+                fireEditedEvent(rb[index], editedListener);\n@@ -120,0 +117,1 @@\n+            itemsPanel.add(rb[i]);\n@@ -122,9 +120,0 @@\n-        tbl.setPreferredScrollableViewportSize(new Dimension(DOTS_PER_INCH, DOTS_PER_INCH));\n-        tbl.setShowHorizontalLines(false);\n-        tbl.setShowVerticalLines(false);\n-        tbl.setTableHeader(null);\n-\n-        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n-        tbl.setRowSelectionAllowed(false);\n-        tbl.setColumnSelectionAllowed(false);\n-        tbl.setToolTipText(i18n.getString(\"chcArr.tbl.tip\"));\n@@ -132,9 +121,1 @@\n-        TableColumn col0 = tbl.getColumnModel().getColumn(0);\n-        TableCellRenderer r = createCellRenderer();\n-        col0.setCellRenderer(r);\n-        TableCellEditor e = createCellEditor();\n-        col0.setCellEditor(e);\n-\n-        col0.setPreferredWidth(getColumnWidth(tbl, 0) + 20);\n-\n-        JScrollPane sp = new JScrollPane(tbl);\n+        JScrollPane sp = new JScrollPane(itemsPanel);\n@@ -142,1 +123,0 @@\n-        sp.getViewport().setBackground(tbl.getBackground());\n@@ -150,2 +130,0 @@\n-        tbl.setRowHeight(getRowHeight());\n-\n@@ -159,21 +137,0 @@\n-    protected int getColumnWidth(JTable table, int colIndex) {\n-        int width = -1;\n-\n-        TableModel model = table.getModel();\n-        int rowCount = model.getRowCount();\n-\n-        for (int i = 0; i < rowCount; i++) {\n-            TableCellRenderer r = table.getCellRenderer(i, colIndex);\n-            Component c = r.getTableCellRendererComponent(table,\n-                    model.getValueAt(i, colIndex),\n-                    false, false, i, colIndex);\n-            width = Math.max(width, c.getPreferredSize().width);\n-        }\n-\n-        return width;\n-    }\n-\n-    protected int getRowHeight() {\n-        return 22;\n-    }\n-\n@@ -186,76 +143,0 @@\n-\n-    protected TableModel createTableModel() {\n-        return new TestTableModel();\n-    }\n-\n-    protected TableCellRenderer createCellRenderer() {\n-        return new TestTableRenderer();\n-    }\n-\n-    protected TableCellEditor createCellEditor() {\n-        return new TestTableEditor();\n-    }\n-\n-    protected class TestTableModel extends AbstractTableModel {\n-\n-        @Override\n-        public Class<?> getColumnClass(int c) {\n-            return String.class;\n-        }\n-\n-        @Override\n-        public int getColumnCount() {\n-            return 1;\n-        }\n-\n-        @Override\n-        public int getRowCount() {\n-            return displayChoices.length - starts_from;\n-        }\n-\n-        @Override\n-        public Object getValueAt(int r, int c) {\n-            return values[r + starts_from];\n-        }\n-\n-        @Override\n-        public void setValueAt(Object o, int r, int c) {\n-            if (c == 0) {\n-                q.setValue(values[r + starts_from]);\n-                fireEditedEvent(this, editedListener);\n-            }\n-        }\n-\n-        @Override\n-        public boolean isCellEditable(int r, int c) {\n-            return true;\n-        }\n-\n-    }\n-\n-    protected class TestTableRenderer implements TableCellRenderer {\n-\n-        @Override\n-        public Component getTableCellRendererComponent(JTable table, Object value,\n-                                                       boolean isSelected, boolean hasFocus, int row, int column) {\n-\n-            return rb[row];\n-        }\n-    }\n-\n-    protected class TestTableEditor extends AbstractCellEditor\n-            implements TableCellEditor {\n-        @Override\n-        public Object getCellEditorValue() {\n-            return null;\n-        }\n-\n-        @Override\n-        public Component getTableCellEditorComponent(JTable table, Object value,\n-                                                     boolean isSelected, int row, int column) {\n-\n-            rb[row].setSelected(true);\n-            return rb[row];\n-        }\n-    }\n-\n","filename":"src\/com\/sun\/interview\/wizard\/ChoiceQuestionRenderer.java","additions":11,"deletions":130,"binary":false,"changes":141,"status":"modified"}]}