{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include \"gc\/shenandoah\/shenandoahMarkClosures.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n@@ -122,0 +122,32 @@\n+\/\/ Add [TAMS, top) volume over young regions. Used to correct age 0 cohort census\n+\/\/ for adaptive tenuring when census is taken during marking.\n+\/\/ In non-product builds, for the purposes of verification, we also collect the total\n+\/\/ live objects in young regions as well.\n+class ShenandoahUpdateCensusZeroCohortClosure : public ShenandoahHeapRegionClosure {\n+private:\n+  ShenandoahMarkingContext* const _ctx;\n+  \/\/ Population size units are words (not bytes)\n+  size_t _age0_pop;                \/\/ running tally of age0 population size\n+  size_t _total_pop;               \/\/ total live population size\n+public:\n+  explicit ShenandoahUpdateCensusZeroCohortClosure(ShenandoahMarkingContext* ctx)\n+    : _ctx(ctx), _age0_pop(0), _total_pop(0) {}\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    if (_ctx != nullptr && r->is_active()) {\n+      assert(r->is_young(), \"Young regions only\");\n+      HeapWord* tams = _ctx->top_at_mark_start(r);\n+      HeapWord* top  = r->top();\n+      if (top > tams) {\n+        _age0_pop += pointer_delta(top, tams);\n+      }\n+      \/\/ TODO: check significance of _ctx != nullptr above, can that\n+      \/\/ spoof _total_pop in some corner cases?\n+      NOT_PRODUCT(_total_pop += r->get_live_data_words();)\n+    }\n+  }\n+\n+  size_t get_age0_population()  const { return _age0_pop; }\n+  size_t get_total_population() const { return _total_pop; }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n@@ -2391,20 +2392,0 @@\n-ShenandoahSynchronizePinnedRegionStates::ShenandoahSynchronizePinnedRegionStates() : _lock(ShenandoahHeap::heap()->lock()) { }\n-\n-void ShenandoahSynchronizePinnedRegionStates::heap_region_do(ShenandoahHeapRegion* r) {\n-  \/\/ Drop \"pinned\" state from regions that no longer have a pinned count. Put\n-  \/\/ regions with a pinned count into the \"pinned\" state.\n-  if (r->is_active()) {\n-    if (r->is_pinned()) {\n-      if (r->pin_count() == 0) {\n-        ShenandoahHeapLocker locker(_lock);\n-        r->make_unpinned();\n-      }\n-    } else {\n-      if (r->pin_count() > 0) {\n-        ShenandoahHeapLocker locker(_lock);\n-        r->make_pinned();\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -124,11 +124,0 @@\n-class ShenandoahSynchronizePinnedRegionStates : public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahHeapLock* const _lock;\n-\n-public:\n-  ShenandoahSynchronizePinnedRegionStates();\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override;\n-  bool is_thread_safe() override { return true; }\n-};\n-\n@@ -753,1 +742,0 @@\n-public:\n@@ -755,0 +743,1 @@\n+public:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n+#include \"gc\/shenandoah\/shenandoahMarkingContext.hpp\"\n+#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n+\n+ShenandoahSynchronizePinnedRegionStates::ShenandoahSynchronizePinnedRegionStates() :\n+  _lock(ShenandoahHeap::heap()->lock()) { }\n+\n+void ShenandoahSynchronizePinnedRegionStates::heap_region_do(ShenandoahHeapRegion* r) {\n+  \/\/ Drop \"pinned\" state from regions that no longer have a pinned count. Put\n+  \/\/ regions with a pinned count into the \"pinned\" state.\n+  if (r->is_active()) {\n+    synchronize_pin_count(r);\n+  }\n+}\n+\n+void ShenandoahSynchronizePinnedRegionStates::synchronize_pin_count(ShenandoahHeapRegion* r) {\n+  if (r->is_pinned()) {\n+    if (r->pin_count() == 0) {\n+      ShenandoahHeapLocker locker(_lock);\n+      r->make_unpinned();\n+    }\n+  } else {\n+    if (r->pin_count() > 0) {\n+      ShenandoahHeapLocker locker(_lock);\n+      r->make_pinned();\n+    }\n+  }\n+}\n+\n+ShenandoahFinalMarkUpdateRegionStateClosure::ShenandoahFinalMarkUpdateRegionStateClosure(ShenandoahMarkingContext *ctx) :\n+        _ctx(ctx) { }\n+\n+void ShenandoahFinalMarkUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion* r) {\n+  if (r->is_active()) {\n+    if (_ctx != nullptr) {\n+      \/\/ _ctx may be null when this closure is used to sync only the pin status\n+      \/\/ update the watermark of old regions. For old regions we cannot reset\n+      \/\/ the TAMS because we rely on that to keep promoted objects alive after\n+      \/\/ old marking is complete.\n+\n+      \/\/ All allocations past TAMS are implicitly live, adjust the region data.\n+      \/\/ Bitmaps\/TAMS are swapped at this point, so we need to poll complete bitmap.\n+      HeapWord *tams = _ctx->top_at_mark_start(r);\n+      HeapWord *top = r->top();\n+      if (top > tams) {\n+        r->increase_live_data_alloc_words(pointer_delta(top, tams));\n+      }\n+    }\n+\n+    \/\/ We are about to select the collection set, make sure it knows about\n+    \/\/ current pinning status. Also, this allows trashing more regions that\n+    \/\/ now have their pinning status dropped.\n+    _pins.synchronize_pin_count(r);\n+\n+    \/\/ Remember limit for updating refs. It's guaranteed that we get no\n+    \/\/ from-space-refs written from here on.\n+    r->set_update_watermark_at_safepoint(r->top());\n+  } else {\n+    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+    assert(_ctx == nullptr || _ctx->top_at_mark_start(r) == r->top(),\n+           \"Region \" SIZE_FORMAT \" should have correct TAMS\", r->index());\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionClosures.cpp","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef SRC_SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n-#define SRC_SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n@@ -72,1 +72,29 @@\n-#endif \/\/SRC_SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n+\/\/ Makes regions pinned or unpinned according to the region's pin count\n+class ShenandoahSynchronizePinnedRegionStates : public ShenandoahHeapRegionClosure {\n+private:\n+  ShenandoahHeapLock* const _lock;\n+\n+public:\n+  ShenandoahSynchronizePinnedRegionStates();\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override;\n+  bool is_thread_safe() override { return true; }\n+\n+  void synchronize_pin_count(ShenandoahHeapRegion* r);\n+};\n+\n+class ShenandoahMarkingContext;\n+\n+\/\/ Synchronizes region pinned status, sets update watermark and adjust live data tally for regions\n+class ShenandoahFinalMarkUpdateRegionStateClosure : public ShenandoahHeapRegionClosure {\n+private:\n+  ShenandoahMarkingContext* const _ctx;\n+  ShenandoahSynchronizePinnedRegionStates _pins;\n+public:\n+  explicit ShenandoahFinalMarkUpdateRegionStateClosure(ShenandoahMarkingContext* ctx);\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override;\n+  bool is_thread_safe() override { return true; }\n+};\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONCLOSURES_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionClosures.hpp","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeapRegion.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMarkClosures.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMarkingContext.hpp\"\n-#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n-\n-\n-ShenandoahFinalMarkUpdateRegionStateClosure::ShenandoahFinalMarkUpdateRegionStateClosure(\n-  ShenandoahMarkingContext *ctx) :\n-  _ctx(ctx), _lock(ShenandoahHeap::heap()->lock()) {}\n-\n-void ShenandoahFinalMarkUpdateRegionStateClosure::heap_region_do(ShenandoahHeapRegion* r) {\n-  if (r->is_active()) {\n-    if (_ctx != nullptr) {\n-      \/\/ _ctx may be null when this closure is used to sync only the pin status\n-      \/\/ update the watermark of old regions. For old regions we cannot reset\n-      \/\/ the TAMS because we rely on that to keep promoted objects alive after\n-      \/\/ old marking is complete.\n-\n-      \/\/ All allocations past TAMS are implicitly live, adjust the region data.\n-      \/\/ Bitmaps\/TAMS are swapped at this point, so we need to poll complete bitmap.\n-      HeapWord *tams = _ctx->top_at_mark_start(r);\n-      HeapWord *top = r->top();\n-      if (top > tams) {\n-        r->increase_live_data_alloc_words(pointer_delta(top, tams));\n-      }\n-    }\n-\n-    \/\/ We are about to select the collection set, make sure it knows about\n-    \/\/ current pinning status. Also, this allows trashing more regions that\n-    \/\/ now have their pinning status dropped.\n-    if (r->is_pinned()) {\n-      if (r->pin_count() == 0) {\n-        ShenandoahHeapLocker locker(_lock);\n-        r->make_unpinned();\n-      }\n-    } else {\n-      if (r->pin_count() > 0) {\n-        ShenandoahHeapLocker locker(_lock);\n-        r->make_pinned();\n-      }\n-    }\n-\n-    \/\/ Remember limit for updating refs. It's guaranteed that we get no\n-    \/\/ from-space-refs written from here on.\n-    r->set_update_watermark_at_safepoint(r->top());\n-  } else {\n-    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n-    assert(_ctx == nullptr || _ctx->top_at_mark_start(r) == r->top(),\n-             \"Region \" SIZE_FORMAT \" should have correct TAMS\", r->index());\n-  }\n-}\n-\n-\n-ShenandoahUpdateCensusZeroCohortClosure::ShenandoahUpdateCensusZeroCohortClosure(\n-  ShenandoahMarkingContext *ctx) :\n-  _ctx(ctx), _age0_pop(0), _total_pop(0) {}\n-\n-void ShenandoahUpdateCensusZeroCohortClosure::heap_region_do(ShenandoahHeapRegion* r) {\n-  if (_ctx != nullptr && r->is_active()) {\n-    assert(r->is_young(), \"Young regions only\");\n-    HeapWord* tams = _ctx->top_at_mark_start(r);\n-    HeapWord* top  = r->top();\n-    if (top > tams) {\n-      _age0_pop += pointer_delta(top, tams);\n-    }\n-    \/\/ TODO: check significance of _ctx != nullptr above, can that\n-    \/\/ spoof _total_pop in some corner cases?\n-    NOT_PRODUCT(_total_pop += r->get_live_data_words();)\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHMARKCLOSURES_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHMARKCLOSURES_HPP\n-\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n-#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n-\n-class ShenandoahMarkingContext;\n-class ShenandoahHeapRegion;\n-\n-class ShenandoahFinalMarkUpdateRegionStateClosure : public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahMarkingContext* const _ctx;\n-  ShenandoahHeapLock* const _lock;\n-public:\n-  explicit ShenandoahFinalMarkUpdateRegionStateClosure(ShenandoahMarkingContext* ctx);\n-\n-  void heap_region_do(ShenandoahHeapRegion* r);\n-\n-  bool is_thread_safe() { return true; }\n-};\n-\n-\/\/ Add [TAMS, top) volume over young regions. Used to correct age 0 cohort census\n-\/\/ for adaptive tenuring when census is taken during marking.\n-\/\/ In non-product builds, for the purposes of verification, we also collect the total\n-\/\/ live objects in young regions as well.\n-class ShenandoahUpdateCensusZeroCohortClosure : public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahMarkingContext* const _ctx;\n-  \/\/ Population size units are words (not bytes)\n-  size_t _age0_pop;                \/\/ running tally of age0 population size\n-  size_t _total_pop;               \/\/ total live population size\n-public:\n-  ShenandoahUpdateCensusZeroCohortClosure(ShenandoahMarkingContext* ctx);\n-\n-  void heap_region_do(ShenandoahHeapRegion* r);\n-\n-  size_t get_age0_population()  { return _age0_pop; }\n-  size_t get_total_population() { return _total_pop; }\n-};\n-#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHMARKCLOSURES_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.hpp","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"gc\/shenandoah\/shenandoahMarkClosures.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}