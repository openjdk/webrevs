{"files":[{"patch":"@@ -1203,0 +1203,1 @@\n+  assert(!heap->_update_refs_iterator.has_next(), \"Should have finished update references\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -930,1 +930,1 @@\n-  uint nworkers = workers()->active_workers();\n+  const uint nworkers = workers()->active_workers();\n@@ -932,1 +932,0 @@\n-  ShenandoahRegionIterator update_refs_iterator(this);\n@@ -934,1 +933,1 @@\n-    ShenandoahGenerationalUpdateHeapRefsTask<true> task(&update_refs_iterator, &work_list);\n+    ShenandoahGenerationalUpdateHeapRefsTask<true> task(&_update_refs_iterator, &work_list);\n@@ -937,1 +936,1 @@\n-    ShenandoahGenerationalUpdateHeapRefsTask<false> task(&update_refs_iterator, &work_list);\n+    ShenandoahGenerationalUpdateHeapRefsTask<false> task(&_update_refs_iterator, &work_list);\n@@ -940,1 +939,0 @@\n-  assert(cancelled_gc() || !update_refs_iterator.has_next(), \"Should have finished update references\");\n@@ -942,4 +940,2 @@\n-  if (ShenandoahEnableCardStats) { \/\/ generational check proxy\n-    assert(card_scan() != nullptr, \"Card table must exist when card stats are enabled\");\n-    card_scan()->log_card_stats(nworkers, CARD_STAT_UPDATE_REFS);\n-  }\n+  assert(card_scan() != nullptr, \"Card table must exist when card stats are enabled\");\n+  card_scan()->log_card_stats(nworkers, CARD_STAT_UPDATE_REFS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -574,0 +574,1 @@\n+  _update_refs_iterator(this),\n@@ -1958,0 +1959,2 @@\n+\n+  _update_refs_iterator.reset();\n@@ -2376,1 +2379,1 @@\n-  ShenandoahRegionIterator update_refs_iterator(this);\n+\n@@ -2378,1 +2381,1 @@\n-    ShenandoahUpdateHeapRefsTask<true> task(&update_refs_iterator);\n+    ShenandoahUpdateHeapRefsTask<true> task(&_update_refs_iterator);\n@@ -2381,1 +2384,1 @@\n-    ShenandoahUpdateHeapRefsTask<false> task(&update_refs_iterator);\n+    ShenandoahUpdateHeapRefsTask<false> task(&_update_refs_iterator);\n@@ -2384,1 +2387,0 @@\n-  assert(cancelled_gc() || !update_refs_iterator.has_next(), \"Should have finished update references\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -439,0 +439,6 @@\n+protected:\n+  \/\/ This is shared between shConcurrentGC and shDegenerateGC so that degenerated\n+  \/\/ GC can resume update refs from where the concurrent GC was cancelled. It is\n+  \/\/ also used in shGenerationalHeap, which uses a different closure for update refs.\n+  ShenandoahRegionIterator _update_refs_iterator;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}