{"files":[{"patch":"@@ -109,0 +109,1 @@\n+            \/\/ Region was included for promotion-in-place\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  _preselected_regions(nullptr),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,8 @@\n+  friend class ShenandoahCollectionSetPreselector;\n+\n+  void establish_preselected(bool *preselected) {\n+   assert(_preselected_regions == nullptr, \"Over-writing\");\n+   _preselected_regions = preselected;\n+  }\n+  void abandon_preselected() { _preselected_regions = nullptr; }\n+\n@@ -109,3 +117,9 @@\n-  void establish_preselected(bool *preselected) { _preselected_regions = preselected; }\n-  void abandon_preselected() { _preselected_regions = nullptr; }\n-  bool is_preselected(size_t region_idx) { return (_preselected_regions != nullptr) && _preselected_regions[region_idx]; }\n+  bool is_preselected(size_t region_idx) {\n+    assert(_preselected_regions != nullptr, \"Missing etsablish after abandon\");\n+    return _preselected_regions[region_idx];\n+  }\n+\n+  bool* preselected_regions() {\n+    assert(_preselected_regions != nullptr, \"Null ptr\");\n+    return _preselected_regions;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHCOLLECTIONSETPRESELECTOR_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHCOLLECTIONSETPRESELECTOR_HPP\n+\n+#include \"gc\/shenandoah\/shenandoahCollectionSet.hpp\"\n+\n+class ShenandoahCollectionSetPreselector : public StackObj {\n+  ShenandoahCollectionSet* _cset;\n+  bool* _pset;\n+public:\n+  ShenandoahCollectionSetPreselector(ShenandoahCollectionSet* cset, size_t num_regions):\n+    _cset(cset) {\n+    _pset = NEW_RESOURCE_ARRAY(bool, num_regions);\n+    for (unsigned int i = 0; i < num_regions; i++) {\n+        _pset[i] = false;\n+    }\n+    _cset->establish_preselected(_pset);\n+  }\n+\n+  ~ShenandoahCollectionSetPreselector() {\n+    _cset->abandon_preselected();\n+  }\n+};\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHCOLLECTIONSETPRESELECTOR_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSetPreselector.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectionSetPreselector.hpp\"\n@@ -226,2 +227,1 @@\n-void ShenandoahGeneration::compute_evacuation_budgets(ShenandoahHeap* heap, bool* preselected_regions,\n-                                                      ShenandoahCollectionSet* collection_set) {\n+void ShenandoahGeneration::compute_evacuation_budgets(ShenandoahHeap* const heap) {\n@@ -234,3 +234,2 @@\n-  ShenandoahGeneration* old_generation = heap->old_generation();\n-  ShenandoahYoungGeneration* young_generation = heap->young_generation();\n-  size_t num_regions = heap->num_regions();\n+  ShenandoahGeneration* const old_generation = heap->old_generation();\n+  ShenandoahYoungGeneration* const young_generation = heap->young_generation();\n@@ -287,1 +286,1 @@\n-  ShenandoahOldHeuristics* old_heuristics = heap->old_heuristics();\n+  ShenandoahOldHeuristics* const old_heuristics = heap->old_heuristics();\n@@ -330,2 +329,4 @@\n-  collection_set->establish_preselected(preselected_regions);\n-  size_t consumed_by_advance_promotion = select_aged_regions(old_promo_reserve, num_regions, preselected_regions);\n+\n+  \/\/ Preselect regions for promotion by evacuation (obtaining the live data to seed promoted_reserve),\n+  \/\/ and identify regions that will promote in place. These use the tenuring threshold.\n+  size_t consumed_by_advance_promotion = select_aged_regions(old_promo_reserve);\n@@ -336,1 +337,1 @@\n-  \/\/ of old evacuatino failure.\n+  \/\/ of old evacuation failure.\n@@ -348,2 +349,2 @@\n-\n-void ShenandoahGeneration::adjust_evacuation_budgets(ShenandoahHeap* heap, ShenandoahCollectionSet* collection_set) {\n+\/\/\n+void ShenandoahGeneration::adjust_evacuation_budgets(ShenandoahHeap* const heap, ShenandoahCollectionSet* const collection_set) {\n@@ -366,5 +367,2 @@\n-  ShenandoahOldGeneration* old_generation = heap->old_generation();\n-  ShenandoahYoungGeneration* young_generation = heap->young_generation();\n-\n-  \/\/ Preselected regions have been inserted into the collection set, so we no longer need the preselected array.\n-  collection_set->abandon_preselected();\n+  const ShenandoahOldGeneration* const old_generation = heap->old_generation();\n+  const ShenandoahYoungGeneration* const young_generation = heap->young_generation();\n@@ -494,1 +492,1 @@\n-\/\/ candidate_regions_for_promotion_by_copy[] to true.  All entries are initialized to false before calling this\n+\/\/ the collection set's preselected regions array to true.  All entries are initialized to false before calling this\n@@ -508,2 +506,1 @@\n-size_t ShenandoahGeneration::select_aged_regions(size_t old_available, size_t num_regions,\n-                                                 bool candidate_regions_for_promotion_by_copy[]) {\n+size_t ShenandoahGeneration::select_aged_regions(size_t old_available) {\n@@ -514,1 +511,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n@@ -516,0 +513,1 @@\n+  bool* const candidate_regions_for_promotion_by_copy = heap->collection_set()->preselected_regions();\n@@ -519,0 +517,1 @@\n+  const size_t old_garbage_threshold = (ShenandoahHeapRegion::region_size_bytes() * ShenandoahOldGarbageThreshold) \/ 100;\n@@ -522,2 +521,0 @@\n-\n-  heap->clear_promotion_potential();\n@@ -525,4 +522,2 @@\n-  size_t candidates_live = 0;\n-  size_t old_garbage_threshold = (ShenandoahHeapRegion::region_size_bytes() * ShenandoahOldGarbageThreshold) \/ 100;\n-  size_t promote_in_place_regions = 0;\n-  size_t promote_in_place_live = 0;\n+\n+  \/\/ Tracks the padding of space above top in regions eligible for promotion in place\n@@ -530,2 +525,0 @@\n-  size_t anticipated_candidates = 0;\n-  size_t anticipated_promote_in_place_regions = 0;\n@@ -533,4 +526,8 @@\n-  \/\/ Sort the promotion-eligible regions according to live-data-bytes so that we can first reclaim regions that require\n-  \/\/ less evacuation effort.  This prioritizes garbage first, expanding the allocation pool before we begin the work of\n-  \/\/ reclaiming regions that require more effort.\n-  AgedRegionData* sorted_regions = (AgedRegionData*) alloca(num_regions * sizeof(AgedRegionData));\n+  \/\/ Sort the promotion-eligible regions in order of increasing live-data-bytes so that we can first reclaim regions that require\n+  \/\/ less evacuation effort.  This prioritizes garbage first, expanding the allocation pool early before we reclaim regions that\n+  \/\/ have more live data.\n+  const size_t num_regions = heap->num_regions();\n+\n+  ResourceMark rm;\n+  AgedRegionData* sorted_regions = NEW_RESOURCE_ARRAY(AgedRegionData, num_regions);\n+\n@@ -538,1 +535,1 @@\n-    ShenandoahHeapRegion* r = heap->get_region(i);\n+    ShenandoahHeapRegion* const r = heap->get_region(i);\n@@ -540,0 +537,1 @@\n+      \/\/ skip over regions that aren't regular young with some live data\n@@ -544,0 +542,3 @@\n+        \/\/ This tenure-worthy region has too little garbage, so we do not want to expend the copying effort to\n+        \/\/ reclaim the garbage; instead this region may be eligible for promotion-in-place to the\n+        \/\/ old generation.\n@@ -565,2 +566,0 @@\n-          promote_in_place_regions++;\n-          promote_in_place_live += r->get_live_data_bytes();\n@@ -573,5 +572,4 @@\n-        \/\/ After sorting and selecting best candidates below, we may decide to exclude this promotion-eligible region\n-        \/\/ from the current collection sets.  If this happens, we will consider this region as part of the anticipated\n-        \/\/ promotion potential for the next GC pass.\n-        size_t live_data = r->get_live_data_bytes();\n-        candidates_live += live_data;\n+        \/\/ Record this promotion-eligible candidate region. After sorting and selecting the best candidates below,\n+        \/\/ we may still decide to exclude this promotion-eligible region from the current collection set.  If this\n+        \/\/ happens, we will consider this region as part of the anticipated promotion potential for the next GC\n+        \/\/ pass; see further below.\n@@ -579,1 +577,1 @@\n-        sorted_regions[candidates++]._live_data = live_data;\n+        sorted_regions[candidates++]._live_data = r->get_live_data_bytes();\n@@ -582,3 +580,3 @@\n-      \/\/ We only anticipate to promote regular regions if garbage() is above threshold.  Tenure-aged regions with less\n-      \/\/ garbage are promoted in place.  These take a different path to old-gen.  Note that certain regions that are\n-      \/\/ excluded from anticipated promotion because their garbage content is too low (causing us to anticipate that\n+      \/\/ We only evacuate & promote objects from regular regions whose garbage() is above old-garbage-threshold.\n+      \/\/ Objects in tenure-worthy regions with less garbage are promoted in place. These take a different path to\n+      \/\/ old-gen.  Regions excluded from promotion because their garbage content is too low (causing us to anticipate that\n@@ -604,1 +602,0 @@\n-          anticipated_candidates++;\n@@ -607,3 +604,0 @@\n-        else {\n-          anticipated_promote_in_place_regions++;\n-        }\n@@ -622,0 +616,1 @@\n+      ShenandoahHeapRegion* const region = sorted_regions[i]._region;\n@@ -625,1 +620,0 @@\n-        ShenandoahHeapRegion* region = sorted_regions[i]._region;\n@@ -634,0 +628,1 @@\n+        assert(!candidate_regions_for_promotion_by_copy[region->index()], \"Shouldn't be selected\");\n@@ -694,4 +689,4 @@\n-      bool* preselected_regions = (bool*) alloca(heap->num_regions() * sizeof(bool));\n-      for (unsigned int i = 0; i < heap->num_regions(); i++) {\n-        preselected_regions[i] = false;\n-      }\n+      \/\/ Seed the collection set with resource area-allocated\n+      \/\/ preselected regions, which are removed when we exit this scope.\n+      ResourceMark rm;\n+      ShenandoahCollectionSetPreselector preselector(collection_set, heap->num_regions());\n@@ -707,2 +702,6 @@\n-      \/\/ Budgeting parameters to compute_evacuation_budgets are passed by reference.\n-      compute_evacuation_budgets(heap, preselected_regions, collection_set);\n+      \/\/ Find the amount that will be promoted, regions that will be promoted in\n+      \/\/ place, and preselect older regions that will be promoted by evacuation.\n+      compute_evacuation_budgets(heap);\n+\n+      \/\/ Choose the collection set, including the regions preselected above for\n+      \/\/ promotion into the old generation.\n@@ -755,1 +754,1 @@\n-  size_t num_regions = heap->num_regions();\n+  const size_t num_regions = heap->num_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":55,"deletions":56,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -74,7 +74,1 @@\n-  \/\/ preselected_regions is an array of indicator bits for regions that will\n-  \/\/ be preselected for inclusion into the collection set by this method.\n-  \/\/ collection_set is the set of regions to be collected that is maintained\n-  \/\/ for the heap as a whole.\n-  void compute_evacuation_budgets(ShenandoahHeap* heap,\n-                                  bool* preselected_regions,\n-                                  ShenandoahCollectionSet* collection_set);\n+  void compute_evacuation_budgets(ShenandoahHeap* heap);\n@@ -86,3 +80,5 @@\n-  \/\/ Preselect for inclusion into the collection set regions whose age is\n-  \/\/ at or above tenure age and which contain more than ShenandoahOldGarbageThreshold\n-  \/\/ amounts of garbage.\n+  \/\/ Preselect for possible inclusion into the collection set exactly the most\n+  \/\/ garbage-dense regions, including those that satisfy criteria 1 & 2 below,\n+  \/\/ and whose live bytes will fit within old_available budget:\n+  \/\/ Criterion 1. region age >= tenuring threshold\n+  \/\/ Criterion 2. region garbage percentage > ShenandoahOldGarbageThreshold\n@@ -90,4 +86,10 @@\n-  \/\/ Returns bytes of old-gen memory consumed by selected aged regions\n-  size_t select_aged_regions(size_t old_available,\n-                             size_t num_regions, bool\n-                             candidate_regions_for_promotion_by_copy[]);\n+  \/\/ Identifies regions eligible for promotion in place,\n+  \/\/ being those of at least tenuring_threshold age that have lower garbage\n+  \/\/ density.\n+  \/\/\n+  \/\/ Updates promotion_potential and pad_for_promote_in_place fields\n+  \/\/ of the heap. Returns bytes of live object memory in the preselected\n+  \/\/ regions, which are marked in the preselected_regions() indicator\n+  \/\/ array of the heap's collection set, which should be initialized\n+  \/\/ to false.\n+  size_t select_aged_regions(size_t old_available);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}