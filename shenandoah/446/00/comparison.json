{"files":[{"patch":"@@ -93,3 +93,1 @@\n-  return ((ShenandoahMaxEvacLABRatio > 0)?\n-          align_down(MIN2(MaxTLABSizeWords, PLAB::min_size() * ShenandoahMaxEvacLABRatio), CardTable::card_size_in_words()):\n-          align_down(MaxTLABSizeWords, CardTable::card_size_in_words()));\n+  return align_down(MaxTLABSizeWords, CardTable::card_size_in_words());\n@@ -405,0 +403,2 @@\n+  \/\/ PLABs are aligned to card boundaries to avoid synchronization with concurrent\n+  \/\/ allocations in other PLABs.\n@@ -407,3 +407,1 @@\n-  \/\/ Figure out size of new PLAB, looking back at heuristics. Expand aggressively.  PLABs must align on size\n-  \/\/ of card table in order to avoid the need for synchronization when registering newly allocated objects within\n-  \/\/ the card table.\n+  \/\/ Figure out size of new PLAB, using value determined at last refill.\n@@ -415,3 +413,1 @@\n-  \/\/ Limit growth of PLABs to the smaller of ShenandoahMaxEvacLABRatio * the minimum size and ShenandoahHumongousThreshold.\n-  \/\/ This minimum value is represented by generational_heap->plab_max_size().  Enforcing this limit enables more equitable\n-  \/\/ distribution of available evacuation budget between the many threads that are coordinating in the evacuation effort.\n+  \/\/ Expand aggressively, doubling at each refill in this epoch, ceiling at plab_max_size()\n@@ -419,2 +415,4 @@\n-  assert(is_aligned(future_size, CardTable::card_size_in_words()), \"Align by design, future_size: \" SIZE_FORMAT\n-          \", alignment: \" SIZE_FORMAT \", cur_size: \" SIZE_FORMAT \", max: \" SIZE_FORMAT,\n+  \/\/ Doubling, starting at a card-multiple, should give us a card-multiple. (Ceiling and floor\n+  \/\/ are card multiples.)\n+  assert(is_aligned(future_size, CardTable::card_size_in_words()), \"Card multiple by construction, future_size: \" SIZE_FORMAT\n+          \", card_size: \" SIZE_FORMAT \", cur_size: \" SIZE_FORMAT \", max: \" SIZE_FORMAT,\n@@ -427,0 +425,1 @@\n+  log_debug(gc, free)(\"Set new PLAB size: \" SIZE_FORMAT, future_size);\n@@ -431,0 +430,1 @@\n+    log_debug(gc, free)(\"Current PLAB size (\" SIZE_FORMAT \") is too small for \" SIZE_FORMAT, cur_size, size);\n@@ -437,4 +437,3 @@\n-    \/\/ Retire current PLAB, and allocate a new one.\n-    \/\/ CAUTION: retire_plab may register the remnant filler object with the remembered set scanner without a lock.  This\n-    \/\/ is safe iff it is assured that each PLAB is a whole-number multiple of card-mark memory size and each PLAB is\n-    \/\/ aligned with the start of a card's memory range.\n+    \/\/ Retire current PLAB. This takes care of any PLAB book-keeping.\n+    \/\/ retire_plab() registers the remnant filler object with the remembered set scanner without a lock.\n+    \/\/ Since PLABs are card-aligned, concurrent registrations in other PLABs don't interfere.\n@@ -444,2 +443,0 @@\n-    \/\/ allocate_new_plab resets plab_evacuated and plab_promoted and disables promotions if old-gen available is\n-    \/\/ less than the remaining evacuation need.  It also adjusts plab_preallocated and expend_promoted if appropriate.\n@@ -449,1 +446,1 @@\n-        \/\/ Disable plab promotions for this thread because we cannot even allocate a plab of minimal size.  This allows us\n+        \/\/ Disable PLAB promotions for this thread because we cannot even allocate a minimal PLAB. This allows us\n@@ -478,1 +475,1 @@\n-    \/\/ If there's still at least min_size() words available within the current plab, don't retire it.  Let's gnaw\n+    \/\/ If there's still at least min_size() words available within the current plab, don't retire it.  Let's nibble\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -917,7 +917,0 @@\n-  \/\/ Limit growth of GCLABs to ShenandoahMaxEvacLABRatio * the minimum size.  This enables more equitable distribution of\n-  \/\/ available evacuation buidget between the many threads that are coordinating in the evacuation effort.\n-  if (ShenandoahMaxEvacLABRatio > 0) {\n-    log_debug(gc, free)(\"Allocate new gclab: \" SIZE_FORMAT \", \" SIZE_FORMAT, new_size, PLAB::min_size() * ShenandoahMaxEvacLABRatio);\n-    new_size = MIN2(new_size, PLAB::min_size() * ShenandoahMaxEvacLABRatio);\n-  }\n-\n@@ -930,0 +923,1 @@\n+  log_debug(gc, free)(\"Set new GCLAB size: \" SIZE_FORMAT, new_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -386,20 +386,0 @@\n-  product(uintx, ShenandoahMaxEvacLABRatio, 0, EXPERIMENTAL,                \\\n-          \"Potentially, each running thread maintains a PLAB for \"          \\\n-          \"evacuating objects into old-gen memory and a GCLAB for \"         \\\n-          \"evacuating objects into young-gen memory.  Each time a thread \"  \\\n-          \"exhausts its PLAB or GCLAB, a new local buffer is allocated. \"   \\\n-          \"By default, the new buffer is twice the size of the previous \"   \\\n-          \"buffer.  The sizes are reset to the minimum at the start of \"    \\\n-          \"each GC pass.  This parameter limits the growth of evacuation \"  \\\n-          \"buffer sizes to its value multiplied by the minimum buffer \"     \\\n-          \"size.  A higher value allows evacuation allocations to be more \" \\\n-          \"efficient because less synchronization is required by \"          \\\n-          \"individual threads.  However, a larger value increases the \"     \\\n-          \"likelihood of evacuation failures, leading to long \"             \\\n-          \"stop-the-world pauses.  This is because a large value \"          \\\n-          \"allows individual threads to consume large percentages of \"      \\\n-          \"the total evacuation budget without necessarily effectively \"    \\\n-          \"filling their local evacuation buffers with evacuated \"          \\\n-          \"objects.  A value of zero means no maximum size is enforced.\")   \\\n-          range(0, 1024)                                                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"}]}