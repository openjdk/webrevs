{"files":[{"patch":"@@ -46,1 +46,0 @@\n-#include \"gc\/shenandoah\/shenandoahPeriodicTasks.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-#include \"precompiled.hpp\"\n-\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n-#include \"gc\/shenandoah\/shenandoahPacer.hpp\"\n-#include \"gc\/shenandoah\/shenandoahPeriodicTasks.hpp\"\n-\n-void ShenandoahPeriodicTask::task() {\n-  handle_force_counters_update();\n-  handle_counters_update();\n-}\n-\n-void ShenandoahPeriodicTask::handle_counters_update() {\n-  if (_do_counters_update.is_set()) {\n-    _do_counters_update.unset();\n-    ShenandoahHeap::heap()->monitoring_support()->update_counters();\n-  }\n-}\n-\n-void ShenandoahPeriodicTask::handle_force_counters_update() {\n-  if (_force_counters_update.is_set()) {\n-    _do_counters_update.unset(); \/\/ reset these too, we do update now!\n-    ShenandoahHeap::heap()->monitoring_support()->update_counters();\n-  }\n-}\n-\n-void ShenandoahPeriodicTask::notify_heap_changed() {\n-  if (_do_counters_update.is_unset()) {\n-    _do_counters_update.set();\n-  }\n-}\n-\n-void ShenandoahPeriodicTask::set_forced_counters_update(bool value) {\n-  _force_counters_update.set_cond(value);\n-}\n-\n-void ShenandoahPeriodicPacerNotify::task() {\n-  assert(ShenandoahPacing, \"Should not be here otherwise\");\n-  ShenandoahHeap::heap()->pacer()->notify_waiters();\n-}\n-\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPeriodicTasks.cpp","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHPERIODICTASKS_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHPERIODICTASKS_HPP\n-\n-#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n-#include \"runtime\/task.hpp\"\n-\n-\/\/ Periodic task is useful for doing asynchronous things that do not require (heap) locks,\n-\/\/ or synchronization with other parts of collector. These could run even when ShenandoahConcurrentThread\n-\/\/ is busy driving the GC cycle.\n-class ShenandoahPeriodicTask : public PeriodicTask {\n-private:\n-  ShenandoahSharedFlag _do_counters_update;\n-  ShenandoahSharedFlag _force_counters_update;\n-public:\n-  ShenandoahPeriodicTask() : PeriodicTask(100) {}\n-  void task() override;\n-\n-  void handle_counters_update();\n-  void handle_force_counters_update();\n-  void set_forced_counters_update(bool value);\n-  void notify_heap_changed();\n-};\n-\n-\/\/ Periodic task to notify blocked paced waiters.\n-class ShenandoahPeriodicPacerNotify : public PeriodicTask {\n-public:\n-  ShenandoahPeriodicPacerNotify() : PeriodicTask(PeriodicTask::min_interval) {}\n-  void task() override;\n-};\n-\n-#endif \/\/SHARE_GC_SHENANDOAH_SHENANDOAHPERIODICTASKS_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPeriodicTasks.hpp","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"}]}