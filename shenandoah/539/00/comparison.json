{"files":[{"patch":"@@ -237,1 +237,1 @@\n-  parallel_region_iterate_free(&cl);\n+  parallel_heap_region_iterate_free(&cl);\n@@ -240,1 +240,1 @@\n-void ShenandoahGeneration::parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n+void ShenandoahGeneration::parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  virtual void parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl);\n+  virtual void parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-void ShenandoahOldGeneration::parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n+void ShenandoahOldGeneration::parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n@@ -712,1 +712,1 @@\n-  ShenandoahGeneration::parallel_region_iterate_free(&exclude_cl);\n+  ShenandoahGeneration::parallel_heap_region_iterate_free(&exclude_cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahMode* gc_mode) override;\n+  ShenandoahHeuristics* initialize_heuristics(ShenandoahMode* gc_mode) override;\n@@ -196,1 +196,1 @@\n-  void parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl) override;\n+  void parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,0 +141,3 @@\n+      \/\/ We never exclusively mark the old generation on a safepoint. This would be encompassed\n+      \/\/ by a 'global' collection. Note that both GLOBAL and NON_GEN mark the entire heap, but\n+      \/\/ the GLOBAL closure is specialized for the generational mode.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,2 @@\n-void ShenandoahYoungGeneration::parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n+void ShenandoahYoungGeneration::parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl) {\n+  \/\/ Iterate over everything that is not old.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahMode* gc_mode) override;\n+  ShenandoahHeuristics* initialize_heuristics(ShenandoahMode* gc_mode) override;\n@@ -54,1 +54,1 @@\n-  void parallel_region_iterate_free(ShenandoahHeapRegionClosure* cl) override;\n+  void parallel_heap_region_iterate_free(ShenandoahHeapRegionClosure* cl) override;\n@@ -82,1 +82,1 @@\n-  virtual void prepare_gc() override;\n+  void prepare_gc() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}