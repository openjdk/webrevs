{"files":[{"patch":"@@ -302,3 +302,3 @@\n-      \/\/ Officially, there is no limit on size of OLD, though the practical limit is heap size - min_young_size().\n-      \/\/ The practical limit is enforced when we try to shrink young in order to expand old.\n-      return ShenandoahHeap::heap()->max_capacity();\n+      \/\/ On the command line, max size of OLD is specified indirectly, by setting a minimum size of young.\n+      \/\/ OLD is what remains within the heap after YOUNG has been sized.\n+      return ShenandoahHeap::heap()->max_capacity() - min_young_size();\n@@ -316,3 +316,3 @@\n-      \/\/ Officially, there is no limit on size of OLD, though the practical limit is heap size - max_young_size().\n-      \/\/ The practical limit is enforced when we try to expand young in order to shrink old.\n-      return 0;\n+      \/\/ On the command line, min size of OLD is specified indirectly, by setting a maximum size of young.\n+      \/\/ OLD is what remains within the heap after YOUNG has been sized.\n+      return ShenandoahHeap::heap()->max_capacity() - max_young_size();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}