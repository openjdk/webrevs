{"files":[{"patch":"@@ -62,1 +62,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n@@ -67,1 +67,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n@@ -72,1 +72,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n@@ -77,1 +77,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,1 +120,2 @@\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n+ *      -XX:+ShenandoahOOMDuringEvacALot\n+ *      -XX:+ShenandoahVerify\n@@ -125,1 +126,2 @@\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n+ *      -XX:+ShenandoahAllocFailureALot\n+ *      -XX:+ShenandoahVerify\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -143,0 +143,11 @@\n+    private static final String DEFAULT_POOL_NAME = \"Shenandoah\";\n+    private static final String YOUNG_GEN_POOL_NAME = \"Shenandoah Young Gen\";\n+\n+    private static MemoryUsage getUsage(Map<String, MemoryUsage> pools) {\n+        MemoryUsage usage = pools.get(DEFAULT_POOL_NAME);\n+        if (usage == null) {\n+            usage = pools.get(YOUNG_GEN_POOL_NAME);\n+        }\n+        return usage;\n+    }\n+\n@@ -156,2 +167,2 @@\n-                    MemoryUsage before = mapBefore.get(\"Shenandoah\");\n-                    MemoryUsage after = mapAfter.get(\"Shenandoah\");\n+                    MemoryUsage before = getUsage(mapBefore);\n+                    MemoryUsage after = getUsage(mapAfter);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @summary Test allocation of large objects results in OOM, but will not crash the JVM\n@@ -35,1 +35,1 @@\n- * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @summary Test allocation of a heap-sized object results in OOM, but will not crash the JVM\n@@ -43,1 +43,1 @@\n- * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @summary Test allocation of small objects results in OOM, but will not crash the JVM\n@@ -89,1 +89,1 @@\n-                          TestAllocLargeObj.class.getName(),\n+                          TestAllocOutOfMemory.class.getName(),\n@@ -95,1 +95,1 @@\n-                          TestAllocLargeObj.class.getName(),\n+                          TestAllocOutOfMemory.class.getName(),\n@@ -103,1 +103,1 @@\n-                          TestAllocLargeObj.class.getName(),\n+                          TestAllocOutOfMemory.class.getName(),\n@@ -109,1 +109,1 @@\n-                          TestAllocLargeObj.class.getName(),\n+                          TestAllocOutOfMemory.class.getName(),\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocOutOfMemory.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+        testWith(\"-XX:ShenandoahGCMode=generational\", Mode.PRODUCT);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestModeUnlock.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+ *      -XX:ShenandoahMaxYoungPercentage=90\n@@ -56,0 +57,1 @@\n+ *      -XX:ShenandoahMaxYoungPercentage=90\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestGCLockerWithShenandoah.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,9 @@\n+\n+ \/**\n+  * @test id=generational\n+  * @key randomness\n+  * @requires vm.hasJFR\n+  * @requires vm.gc == \"Shenandoah\"\n+  * @library \/test\/lib \/test\/jdk\n+  * @run main\/othervm -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx256m jdk.jfr.event.gc.detailed.TestStressBigAllocationGCEventsWithShenandoah 1048576\n+  *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithShenandoah.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}