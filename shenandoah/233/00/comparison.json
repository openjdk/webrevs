{"files":[{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n+#include \"gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp\"\n@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n@@ -55,0 +56,12 @@\n+ShenandoahHeuristics* ShenandoahGenerationalMode::initialize_heuristics(ShenandoahGeneration* generation) const {\n+  if (ShenandoahGCHeuristics == nullptr) {\n+    vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option (null)\");\n+  }\n+\n+  if (strcmp(ShenandoahGCHeuristics, \"adaptive\") != 0) {\n+    vm_exit_during_initialization(\"Generational mode requires the (default) adaptive heuristic\");\n+  }\n+\n+  return new ShenandoahAdaptiveHeuristics(generation);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahGeneration* generation) const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -320,9 +320,0 @@\n-tier1_gc_shenandoah_generational = \\\n-  gc\/shenandoah\/generational\/\n-\n-# No tier 2 tests for shenandoah_generational at this time\n-tier2_gc_shenandoah_generational =\n-\n-# No tier 3 tests for shenandoah_generational at this time\n-tier3_gc_shenandoah_generational =\n-\n@@ -360,1 +351,0 @@\n-# include shenandoah generational tests in tier3 shenandoah\n@@ -367,1 +357,0 @@\n-  :hotspot_gc_shenandoah_generational \\\n@@ -375,5 +364,0 @@\n-hotspot_gc_shenandoah_generational = \\\n-  :tier1_gc_shenandoah_generational \\\n-  :tier2_gc_shenandoah_generational \\\n-  :tier3_gc_shenandoah_generational\n-\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n@@ -66,1 +66,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n@@ -71,1 +71,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n@@ -76,1 +76,1 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:ShenandoahGCMode=satb\n@@ -96,0 +96,17 @@\n+*\/\n+\n+\/*\n+ * @test id=generational\n+ * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:ShenandoahTargetNumRegions=2048\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestAllocHumongousFragment\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:ShenandoahTargetNumRegions=2048\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestAllocHumongousFragment\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocHumongousFragment.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -100,0 +100,9 @@\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestAllocIntArrays\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestAllocIntArrays\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -102,0 +102,27 @@\n+\/*\n+ * @test id=generational\n+ * @summary Acceptance tests: collector can withstand allocation\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestAllocObjectArrays\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestAllocObjectArrays\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n+ *      TestAllocObjectArrays\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n+ *      TestAllocObjectArrays\n+ *\/\n+\n@@ -137,0 +164,5 @@\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:-UseTLAB -XX:+ShenandoahVerify\n+ *      TestAllocObjectArrays\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -107,0 +107,20 @@\n+\/*\n+ * @test id=generational\n+ * @summary Acceptance tests: collector can withstand allocation\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestAllocObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestAllocObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahSuspendibleWorkers\n+ *      TestAllocObjects\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjects.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -31,0 +31,7 @@\n+\n+\/*\n+ * @test id=generational\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:TieredStopAtLevel=0 -Xmx16m TestArrayCopyCheckCast -XX:ShenandoahGCMode=generational\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestArrayCopyCheckCast.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,9 @@\n+\n+\/*\n+ * @test id=generational\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:TieredStopAtLevel=0 -Xmx16m TestArrayCopyStress\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestArrayCopyStress.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,0 +65,11 @@\n+\/*\n+ * @test id=generational\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -Dtarget=10000\n+ *      TestDynamicSoftMaxHeapSize\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -42,0 +42,17 @@\n+\/*\n+ * @test id=generational\n+ * @key randomness\n+ * @summary Test that Shenandoah is able to work with elastic TLABs\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:-UseTLAB -XX:-ShenandoahElasticTLAB -XX:+ShenandoahVerify TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:-UseTLAB -XX:-ShenandoahElasticTLAB                       TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:-UseTLAB -XX:+ShenandoahElasticTLAB -XX:+ShenandoahVerify TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:-UseTLAB -XX:+ShenandoahElasticTLAB                       TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:+UseTLAB -XX:-ShenandoahElasticTLAB -XX:+ShenandoahVerify TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:+UseTLAB -XX:-ShenandoahElasticTLAB                       TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:+UseTLAB -XX:+ShenandoahElasticTLAB -XX:+ShenandoahVerify TestElasticTLAB\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -XX:+UseTLAB -XX:+ShenandoahElasticTLAB                       TestElasticTLAB\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestElasticTLAB.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -32,1 +32,11 @@\n- * @run driver\/timeout=480 TestEvilSyncBug\n+ * @run driver\/timeout=480 TestEvilSyncBug -XX:ShenandoahGCHeuristics=aggressive\n+ *\/\n+\n+\/*\n+ * @test id=generational\n+ * @summary Tests for crash\/assert when attaching init thread during shutdown\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver\/timeout=480 TestEvilSyncBug -XX:ShenandoahGCMode=generational\n@@ -49,1 +59,1 @@\n-        if (args.length > 0) {\n+        if (\"test\".equals(args[0])) {\n@@ -52,0 +62,1 @@\n+            String options = args[0];\n@@ -64,1 +75,1 @@\n-                            \"-XX:ShenandoahGCHeuristics=aggressive\",\n+                            options,\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestEvilSyncBug.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,0 +79,18 @@\n+\/**\n+ * @test id=generational\n+ * @summary Test Shenandoah GC uses concurrent\/parallel threads correctly\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC\n+ *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n+ *      -Dtarget=1000 -XX:ShenandoahGCMode=generational\n+ *      TestGCThreadGroups\n+ *\n+ * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC\n+ *      -XX:-UseDynamicNumberOfGCThreads\n+ *      -Dtarget=1000 -XX:ShenandoahGCMode=generational\n+ *      TestGCThreadGroups\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestGCThreadGroups.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -87,0 +87,22 @@\n+\/*\n+ * @test id=generational\n+ * @summary Acceptance tests: collector can withstand allocation\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestHeapUncommit\n+ *\n+ * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestHeapUncommit\n+ *\n+ * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:-UseTLAB -XX:+ShenandoahVerify\n+ *      TestHeapUncommit\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHeapUncommit.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -111,0 +111,79 @@\n+\/*\n+ * @test id=generational\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:+ShenandoahVerify\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=50\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=90\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=99\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=100\n+ *                   TestHumongousThreshold\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:+ShenandoahVerify\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=50\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=90\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=99\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=100\n+ *                   TestHumongousThreshold\n+ *\/\n+\n+\/*\n+ * @test id=generational-16b\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=50\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=90\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=99\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=100\n+ *                   TestHumongousThreshold\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=50\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=90\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=99\n+ *                   TestHumongousThreshold\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g\n+ *                   -XX:-UseTLAB -XX:ObjectAlignmentInBytes=16 -XX:+ShenandoahVerify -XX:ShenandoahHumongousThreshold=100\n+ *                   TestHumongousThreshold\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHumongousThreshold.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -75,0 +75,12 @@\n+\/*\n+ * @test id=generational\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -Dtarget=10000\n+ *      TestJcmdHeapDump\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test default\n@@ -37,0 +37,14 @@\n+ *\/\n+\n+\/*\n+ * @test generational\n+ * @summary Shenandoah crashes with -XX:ObjectAlignmentInBytes=16\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ObjectAlignmentInBytes=16 -Xint                   TestLargeObjectAlignment\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ObjectAlignmentInBytes=16 -XX:-TieredCompilation  TestLargeObjectAlignment\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ObjectAlignmentInBytes=16 -XX:TieredStopAtLevel=1 TestLargeObjectAlignment\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ObjectAlignmentInBytes=16 -XX:TieredStopAtLevel=4 TestLargeObjectAlignment\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLargeObjectAlignment.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -74,0 +74,10 @@\n+\/*\n+ * @test id=generational\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -Dtarget=10000\n+ *      TestLotsOfCycles\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLotsOfCycles.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,3 +59,4 @@\n-             {{\"satb\"},    {\"adaptive\", \"compact\", \"static\", \"aggressive\"}},\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n-             {{\"passive\"}, {\"passive\"}}\n+             {{\"satb\"},         {\"adaptive\", \"compact\", \"static\", \"aggressive\"}},\n+             {{\"generational\"}, {\"adaptive\"}},\n+             {{\"iu\"},           {\"adaptive\", \"aggressive\"}},\n+             {{\"passive\"},      {\"passive\"}}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestObjItrWithHeapDump.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test that reference processing works with both parallel and non-parallel variants.\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -Xmx1g -Xms1g                              TestParallelRefprocSanity\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -Xmx1g -Xms1g  -XX:-ParallelRefProcEnabled TestParallelRefprocSanity\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -Xmx1g -Xms1g  -XX:+ParallelRefProcEnabled TestParallelRefprocSanity\n- *\/\n-\n-import java.lang.ref.*;\n-\n-public class TestParallelRefprocSanity {\n-\n-    static final long TARGET_MB = Long.getLong(\"target\", 10_000); \/\/ 10 Gb allocation\n-\n-    static volatile Object sink;\n-\n-    public static void main(String[] args) throws Exception {\n-        long count = TARGET_MB * 1024 * 1024 \/ 32;\n-        for (long c = 0; c < count; c++) {\n-            sink = new WeakReference<Object>(new Object());\n-        }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestParallelRefprocSanity.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -57,0 +57,25 @@\n+    public static void testGenerational(boolean periodic, String... args) throws Exception {\n+        String[] cmds = Arrays.copyOf(args, args.length + 2);\n+        cmds[args.length] = TestPeriodicGC.class.getName();\n+        cmds[args.length + 1] = \"test\";\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(cmds);\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        if (periodic) {\n+            if (!output.getOutput().contains(\"Trigger (YOUNG): Time since last GC\")) {\n+                throw new AssertionError(\"Generational mode: Should have periodic young GC in logs\");\n+            }\n+            if (!output.getOutput().contains(\"Trigger (OLD): Time since last GC\")) {\n+                throw new AssertionError(\"Generational mode: Should have periodic old GC in logs\");\n+            }\n+        } else {\n+            if (output.getOutput().contains(\"Trigger (YOUNG): Time since last GC\")) {\n+                throw new AssertionError(\"Generational mode: Should not have periodic young GC in logs\");\n+            }\n+            if (output.getOutput().contains(\"Trigger (OLD): Time since last GC\")) {\n+                throw new AssertionError(\"Generational mode: Should not have periodic old GC in logs\");\n+            }\n+        }\n+    }\n+\n@@ -160,0 +185,20 @@\n+\n+        testGenerational(true,\n+                         \"-Xlog:gc\",\n+                         \"-XX:+UnlockDiagnosticVMOptions\",\n+                         \"-XX:+UnlockExperimentalVMOptions\",\n+                         \"-XX:+UseShenandoahGC\",\n+                         \"-XX:ShenandoahGCMode=generational\",\n+                         \"-XX:ShenandoahGuaranteedYoungGCInterval=1000\",\n+                         \"-XX:ShenandoahGuaranteedOldGCInterval=1500\"\n+        );\n+\n+        testGenerational(false,\n+                         \"-Xlog:gc\",\n+                         \"-XX:+UnlockDiagnosticVMOptions\",\n+                         \"-XX:+UnlockExperimentalVMOptions\",\n+                         \"-XX:+UseShenandoahGC\",\n+                         \"-XX:ShenandoahGCMode=generational\",\n+                         \"-XX:ShenandoahGuaranteedYoungGCInterval=0\",\n+                         \"-XX:ShenandoahGuaranteedOldGCInterval=0\"\n+        );\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -38,1 +38,14 @@\n-\/* @test id=iu\n+\/* @test id=satb-100\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @modules java.base\n+ * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n+\/* @test id=generational\n@@ -46,1 +59,1 @@\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n@@ -50,1 +63,1 @@\n-\/* @test id=satb-100\n+\/* @test id=generational-100\n@@ -59,1 +72,13 @@\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=satb -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n+ *      gc.shenandoah.TestReferenceRefersToShenandoah\n+ *\/\n+\n+\/* @test id=iu\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -36,0 +36,13 @@\n+ *      gc.shenandoah.TestReferenceShortcutCycle\n+ *\/\n+\n+\/* @test id=generational-100\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @modules java.base\n+ * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,0 +44,15 @@\n+\/*\n+ * @test id=generational\n+ * @summary Test that null references\/referents work fine\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestRefprocSanity\n+ *\n+ * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      TestRefprocSanity\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRefprocSanity.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -49,0 +49,9 @@\n+\/*\n+ * @test id=generational\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestRegionSampling\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSampling.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test id=rotation\n+ * @test id=default-rotation\n@@ -31,1 +31,1 @@\n- *      -Xlog:gc+region=debug:region-snapshots-%p.log::filesize=100,filecount=3\n+ *      -Xlog:gc+region=trace:region-snapshots-%p.log::filesize=100,filecount=3\n@@ -36,0 +36,10 @@\n+\/*\n+ * @test id=generational-rotation\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+ShenandoahRegionSampling -XX:+ShenandoahRegionSampling\n+ *      -Xlog:gc+region=trace:region-snapshots-%p.log::filesize=100,filecount=3\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestRegionSamplingLogging\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSamplingLogging.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -101,0 +101,20 @@\n+\/*\n+ * @test id=generational\n+ * @key randomness\n+ * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      -XX:+ResizeTLAB\n+ *      TestResizeTLAB\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      -XX:-ResizeTLAB\n+ *      TestResizeTLAB\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestResizeTLAB.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -86,0 +86,25 @@\n+\/*\n+ * @test id=generational\n+ * @summary Acceptance tests: collector can deal with retained objects\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestRetainObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestRetainObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n+ *      TestRetainObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n+ *      TestRetainObjects\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRetainObjects.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    *      -Xlog:gc+region=debug:region-snapshots-%p.log::filesize=100,filecount=3\n+    *      -Xlog:gc+region=trace:region-snapshots-%p.log::filesize=100,filecount=3\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestShenandoahLogRotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,22 @@\n+\/*\n+ * @test id=generational\n+ * @summary Acceptance tests: collector can deal with retained objects\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n+ *      TestSieveObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n+ *      TestSieveObjects\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestSieveObjects\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSieveObjects.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test default\n@@ -37,0 +37,11 @@\n+\/*\n+ * @test generational\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational         TestSmallHeap\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx64m TestSmallHeap\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx32m TestSmallHeap\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx16m TestSmallHeap\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx8m  TestSmallHeap\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx4m  TestSmallHeap\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSmallHeap.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,0 +68,14 @@\n+\/*\n+ * @test id=generational\n+ * @summary Test Shenandoah string deduplication implementation\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ *\n+ * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:StringDeduplicationAgeThreshold=3\n+ *      TestStringDedup\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedup.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -45,0 +45,16 @@\n+\/*\n+ * @test id=generational\n+ * @summary Test Shenandoah string deduplication implementation\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ *\n+ * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -DtargetStrings=3000000\n+ *      TestStringDedupStress\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -78,0 +78,16 @@\n+\/*\n+ * @test id=generational\n+ * @summary Check that Shenandoah cleans up interned strings\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestStringInternCleanup\n+ *\n+ * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      TestStringInternCleanup\n+ *\/\n+\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringInternCleanup.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,0 +60,5 @@\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify -XX:+ShenandoahVerifyOptoBarriers\n+ *      TestVerifyJCStress\n@@ -79,0 +84,5 @@\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestVerifyJCStress\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyJCStress.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test default\n@@ -36,0 +36,10 @@\n+\/*\n+ * @test generational\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockDiagnosticVMOptions -Xmx128m -XX:+ShenandoahVerify -XX:ShenandoahVerifyLevel=0 TestVerifyLevels\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockDiagnosticVMOptions -Xmx128m -XX:+ShenandoahVerify -XX:ShenandoahVerifyLevel=1 TestVerifyLevels\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockDiagnosticVMOptions -Xmx128m -XX:+ShenandoahVerify -XX:ShenandoahVerifyLevel=2 TestVerifyLevels\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockDiagnosticVMOptions -Xmx128m -XX:+ShenandoahVerify -XX:ShenandoahVerifyLevel=3 TestVerifyLevels\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+UnlockDiagnosticVMOptions -Xmx128m -XX:+ShenandoahVerify -XX:ShenandoahVerifyLevel=4 TestVerifyLevels\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyLevels.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -37,0 +37,11 @@\n+\/*\n+ * @test id=generational\n+ * @summary Test Shenandoah with different log levels\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms256M -Xmx1G -Xlog:gc*=error   TestWithLogLevel\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms256M -Xmx1G -Xlog:gc*=warning TestWithLogLevel\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms256M -Xmx1G -Xlog:gc*=info    TestWithLogLevel\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms256M -Xmx1G -Xlog:gc*=debug   TestWithLogLevel\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms256M -Xmx1G -Xlog:gc*=trace   TestWithLogLevel\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestWithLogLevel.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,2 +29,3 @@\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC                         TestWrongArrayMember\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu TestWrongArrayMember\n+ * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC                                   TestWrongArrayMember\n+ * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu           TestWrongArrayMember\n+ * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestWrongArrayMember\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestWrongArrayMember.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -33,3 +33,0 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n- *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n- *\n@@ -38,0 +35,24 @@\n+ \/**\n+  * @test id=iu\n+  * @bug 8237837 8244721\n+  * @summary  Shenandoah: assert(mem == __null) failed: only one safepoint\n+  * @requires vm.flavor == \"server\"\n+  * @requires vm.gc.Shenandoah\n+  *\n+  * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n+  *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n+  *\n+  *\/\n+\n+  \/**\n+   * @test id=generational\n+   * @bug 8237837 8244721\n+   * @summary  Shenandoah: assert(mem == __null) failed: only one safepoint\n+   * @requires vm.flavor == \"server\"\n+   * @requires vm.gc.Shenandoah\n+   *\n+   * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n+   *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n+   *\n+   *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/BarrierInInfiniteLoop.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -34,0 +34,10 @@\n+ \/**\n+  * @test id=generational\n+  * @bug 8231405\n+  * @summary barrier expansion breaks if barrier is right after call to rethrow stub\n+  * @requires vm.gc.Shenandoah\n+  *\n+  * @run main\/othervm -XX:CompileOnly=CallMultipleCatchProjs::test -Xcomp -Xverify:none -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational CallMultipleCatchProjs\n+  *\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/CallMultipleCatchProjs.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,11 @@\n+\/**\n+ * @test id=generational\n+ * @bug 8238385\n+ * @summary CTW: C2 (Shenandoah) compilation fails with \"Range check dependent CastII node was not removed\"\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   FoldIfAfterExpansion\n+ *\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/FoldIfAfterExpansion.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,11 @@\n+ \/**\n+  * @test id=generational\n+  * @bug 8237007 8260637\n+  * @summary Shenandoah: assert(_base == Tuple) failure during C2 compilation\n+  * @requires vm.flavor == \"server\"\n+  * @requires vm.gc.Shenandoah\n+  *\n+  * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational LRBRightAfterMemBar\n+  *\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/LRBRightAfterMemBar.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,11 @@\n+ \/**\n+  * @test id=generational\n+  * @bug 8258393 8263376\n+  * @summary Shenandoah: \"graph should be schedulable\" assert failure\n+  * @requires vm.flavor == \"server\"\n+  * @requires vm.gc.Shenandoah\n+  *\n+  * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:ShenandoahGCMode=generational TestBadRawMemoryAfterCall\n+  *\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBadRawMemoryAfterCall.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -32,0 +32,7 @@\n+\/*\n+ * @test id=generational\n+ * bug 8281811\n+ * @summary assert(_base == Tuple) failed: Not a Tuple after JDK-8280799\n+ * @requires vm.gc.Shenandoah\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:LoopMaxUnroll=1 -XX:ShenandoahGCMode=generational TestBarrierAboveProj\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierAboveProj.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -34,0 +34,10 @@\n+ \/**\n+  * @test id=generational\n+  * @bug 8252296\n+  * @summary Shenandoah: crash in CallNode::extract_projections\n+  * @requires vm.gc.Shenandoah\n+  *\n+  * @run main\/othervm -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:CompileOnly=TestBarrierExpandCallProjection::test TestBarrierExpandCallProjection\n+  *\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierExpandCallProjection.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,12 @@\n+ \/**\n+  * @test id=generational\n+  * @bug 8255400\n+  * @summary C2 failures after JDK-8255000\n+  * @requires vm.gc.Shenandoah\n+  * @modules java.base\/jdk.internal.misc:+open\n+  *\n+  * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestBarrierExpansionDeadMemPhi\n+  *\n+  *\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierExpansionDeadMemPhi.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/* @test\n+\/* @test id=default\n@@ -31,0 +31,5 @@\n+\/* @test id=generational\n+ * @summary test C1 arraycopy intrinsic\n+ * @requires vm.gc.Shenandoah\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestC1ArrayCopyNPE\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestC1ArrayCopyNPE.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/* @test\n+\/* @test id=default\n@@ -34,0 +34,8 @@\n+\/* @test id=generational\n+ * @summary test C1 vectorized mismatch intrinsic\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestC1VectorizedMismatch\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestC1VectorizedMismatch.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -208,0 +208,88 @@\n+\/*\n+ * @test id=generational\n+ * @summary Test clone barriers work correctly\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -Xint\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:-TieredCompilation\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:TieredStopAtLevel=4\n+ *                   TestClone\n+ *\/\n+\n+\/*\n+ * @test id=generational-verify\n+ * @summary Test clone barriers work correctly\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+ShenandoahVerify\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+ShenandoahVerify\n+ *                   -Xint\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+ShenandoahVerify\n+ *                   -XX:-TieredCompilation\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+ShenandoahVerify\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+ShenandoahVerify\n+ *                   -XX:TieredStopAtLevel=4\n+ *                   TestClone\n+ *\/\n+\n+ \/*\n+  * @test id=generational-no-coops\n+  * @summary Test clone barriers work correctly\n+  * @requires vm.gc.Shenandoah\n+  * @requires vm.bits == \"64\"\n+  *\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -Xint\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:-TieredCompilation\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:TieredStopAtLevel=1\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:TieredStopAtLevel=4\n+  *                   TestClone\n+  *\/\n@@ -209,0 +297,36 @@\n+ \/*\n+  * @test id=generational-no-coops-verify\n+  * @summary Test clone barriers work correctly\n+  * @requires vm.gc.Shenandoah\n+  * @requires vm.bits == \"64\"\n+  *\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+ShenandoahVerify\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+ShenandoahVerify\n+  *                   -Xint\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+ShenandoahVerify\n+  *                   -XX:-TieredCompilation\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+ShenandoahVerify\n+  *                   -XX:TieredStopAtLevel=1\n+  *                   TestClone\n+  * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+  *                   -XX:-UseCompressedOops\n+  *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+ShenandoahVerify\n+  *                   -XX:TieredStopAtLevel=4\n+  *                   TestClone\n+  *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestClone.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,10 @@\n+\/**\n+ * @test id=generational\n+ * @key stress randomness\n+ * @summary Logic that moves a null check in the expanded barrier may cause a memory access that doesn't depend on the barrier to bypass the null check\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.flavor == \"server\"\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -XX:+StressGCM -XX:+StressLCM TestExpandedWBLostNullCheckDep\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestExpandedWBLostNullCheckDep.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -39,0 +39,14 @@\n+\/**\n+ * @test id=generational\n+ * @enablePreview\n+ * @bug 8259937\n+ * @summary guarantee(loc != NULL) failed: missing saved register with native invoke\n+ *\n+ * @requires vm.flavor == \"server\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestLinkToNativeRBP\n+ *\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLinkToNativeRBP.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,11 @@\n+\/**\n+ * @test id=generational\n+ * @bug 8251527\n+ * @summary CTW: C2 (Shenandoah) compilation fails with SEGV due to unhandled catchproj == NUL\n+ * @requires vm.flavor == \"server\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:CompileOnly=TestLoadPinnedAfterCall.test -XX:CompileCommand=dontinline,TestLoadPinnedAfterCall.not_inlined -XX:-TieredCompilation -XX:-BackgroundCompilation TestLoadPinnedAfterCall\n+ *\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLoadPinnedAfterCall.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,12 @@\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=generational\n+ * @summary cast before unsafe access moved in dominating null check null path causes crash\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation\n+ *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   TestMaybeNullUnsafeAccess\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestMaybeNullUnsafeAccess.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -34,0 +34,10 @@\n+\/**\n+ * @test id=generational\n+ * @summary implicit null check on brooks pointer must not cause crash\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"64\"\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n+ *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   -Xmx4G -XX:HeapBaseMinAddress=0x800000000 TestNullCheck\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestNullCheck.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,0 +56,26 @@\n+\/*\n+ * @test id=generational\n+ * @summary Shenandoah reference CAS test\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational                                                 TestReferenceCAS\n+ * @run main\/othervm -Diters=100   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xint                                           TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-TieredCompilation                          TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:TieredStopAtLevel=1                         TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:TieredStopAtLevel=4                         TestReferenceCAS\n+ *\/\n+\n+\/*\n+ * @test id=generational-no-coops\n+ * @summary Shenandoah reference CAS test\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops                          TestReferenceCAS\n+ * @run main\/othervm -Diters=100   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -Xint                    TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:-TieredCompilation   TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:TieredStopAtLevel=1  TestReferenceCAS\n+ * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:TieredStopAtLevel=4  TestReferenceCAS\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestReferenceCAS.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,12 @@\n+\/**\n+ * @test id=generational\n+ * @bug 8244663\n+ * @summary Shenandoah: C2 assertion fails in Matcher::collect_null_checks\n+ * @requires vm.flavor == \"server\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement\n+ *                   -XX:ShenandoahGCMode=generational\n+ *                   -XX:CompileCommand=dontinline,TestShenandoahCmpPAfterCall::not_inlined TestShenandoahCmpPAfterCall\n+ *\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestShenandoahCmpPAfterCall.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,11 @@\n+\/**\n+ * @test id=generational\n+ * @bug 8247824\n+ * @summary CTW: C2 (Shenandoah) compilation fails with SEGV in SBC2Support::pin_and_expand\n+ * @requires vm.flavor == \"server\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:LoopMaxUnroll=0 TestShenandoahLRBInOuterStripMinedLoop\n+ *\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestShenandoahLRBInOuterStripMinedLoop.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=iu\n@@ -34,0 +34,9 @@\n+\/*\n+ * @test id=generational\n+ * bug 8280885\n+ * @summary Shenandoah: Some tests failed with \"EA: missing allocation reference path\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=generational\n+ *                   -XX:CompileCommand=dontinline,TestUnexpectedIUBarrierEA::notInlined TestUnexpectedIUBarrierEA\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnexpectedIUBarrierEA.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -35,0 +35,10 @@\n+\/**\n+ * @test id=generational\n+ * @summary Miscompilation in Unsafe off-heap swap routines\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation\n+ *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *                   TestUnsafeOffheapSwap\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnsafeOffheapSwap.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -36,0 +36,13 @@\n+\n+ \/**\n+  * @test id=generational\n+  * @key stress randomness\n+  * @summary Clearing control during final graph reshape causes memory barrier to loose dependency on null check\n+  * @requires vm.gc.Shenandoah\n+  * @requires vm.flavor == \"server\"\n+  * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n+  *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM\n+  *                   TestWriteBarrierClearControl\n+  *\n+  *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestWriteBarrierClearControl.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n@@ -33,2 +33,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestCLIModeGenerational.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n@@ -42,2 +42,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestConcurrentEvac.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import sun.hotspot.WhiteBox;\n+import jdk.test.whitebox.WhiteBox;\n@@ -35,2 +35,2 @@\n- * @build sun.hotspot.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestSimpleGenerational.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/* @test\n+\/* @test id=default\n@@ -35,0 +35,10 @@\n+ \/* @test id=generational\n+  * @summary test JNI critical arrays support in Shenandoah\n+  * @key randomness\n+  * @requires vm.gc.Shenandoah\n+  * @library \/test\/lib\n+  *\n+  * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:+ShenandoahVerify TestJNICritical\n+  * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational                       TestJNICritical\n+  *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestJNICritical.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,0 +44,19 @@\n+\/* @test id=generational-verify\n+ * @summary Test JNI Global Refs with Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm\/native -Xmx1g -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestJNIGlobalRefs\n+ *\/\n+\n+\/* @test id=generational\n+ * @summary Test JNI Global Refs with Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm\/native -Xmx1g -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      TestJNIGlobalRefs\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestJNIGlobalRefs.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -64,0 +64,16 @@\n+\/* @test id=generational\n+ * @summary Test that garbage in the pinned region does not crash VM\n+ * @key randomness\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx128m\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      TestPinnedGarbage\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx128m\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      TestPinnedGarbage\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestPinnedGarbage.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -66,0 +66,40 @@\n+\/**\n+ * @test id=generational\n+ * @summary Tests JVMTI heap dumps\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.jvmti\n+ * @compile TestHeapDump.java\n+ * @run main\/othervm\/native\/timeout=300 -agentlib:TestHeapDump\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xmx128m\n+ *      -XX:ShenandoahGCMode=generational\n+ *      TestHeapDump\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=no-coops-generational\n+ * @summary Tests JVMTI heap dumps\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.jvmti\n+ * @requires vm.bits == \"64\"\n+ * @compile TestHeapDump.java\n+ * @run main\/othervm\/native\/timeout=300 -agentlib:TestHeapDump\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xmx128m\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:-UseCompressedOops TestHeapDump\n+ *\/\n+\n+\/**\n+ * @test id=generational-strdedup\n+ * @summary Tests JVMTI heap dumps\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.jvmti\n+ * @compile TestHeapDump.java\n+ * @run main\/othervm\/native\/timeout=300 -agentlib:TestHeapDump\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xmx128m\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:+UseStringDeduplication TestHeapDump\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jvmti\/TestHeapDump.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -107,0 +107,12 @@\n+\/*\n+ * @test id=generational\n+ * @summary Check that MX notifications are reported for all cycles\n+ * @library \/test\/lib \/\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -Dprecise=false\n+ *      TestChurnNotifications\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -38,0 +38,13 @@\n+\/**\n+ * @test id=generational\n+ * @summary Test JMX memory beans\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational          -Xmx1g TestMemoryMXBeans   -1 1024\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms1g   -Xmx1g TestMemoryMXBeans 1024 1024\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms128m -Xmx1g TestMemoryMXBeans  128 1024\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms1g   -Xmx1g -XX:ShenandoahUncommitDelay=0 TestMemoryMXBeans 1024 1024\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xms128m -Xmx1g -XX:ShenandoahUncommitDelay=0 TestMemoryMXBeans  128 1024\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestMemoryMXBeans.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=default\n@@ -34,0 +34,9 @@\n+\/**\n+ * @test id=generational\n+ * @summary Test JMX memory pools\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xmx1g -Xms1g TestMemoryPools\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestMemoryPools.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -101,0 +101,11 @@\n+\/*\n+ * @test id=generational\n+ * @summary Check that MX notifications are reported for all cycles\n+ * @library \/test\/lib \/\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      TestPauseNotifications\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test allocation of small object to result OOM, but not to crash JVM\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @run driver TestAllocLargeObj\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestAllocLargeObj {\n-\n-    static final int SIZE = 1 * 1024 * 1024;\n-    static final int COUNT = 16;\n-\n-    static volatile Object sink;\n-\n-    public static void work() throws Exception {\n-        Object[] root = new Object[COUNT];\n-        sink = root;\n-        for (int c = 0; c < COUNT; c++) {\n-            root[c] = new Object[SIZE];\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            work();\n-            return;\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx16m\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocLargeObj.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(1);\n-            analyzer.shouldContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx1g\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocLargeObj.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(0);\n-            analyzer.shouldNotContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocLargeObj.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test that allocation of the object larger than heap fails predictably\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @run driver TestAllocLargerThanHeap\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestAllocLargerThanHeap {\n-\n-    static final int SIZE = 16 * 1024 * 1024;\n-\n-    static volatile Object sink;\n-\n-    public static void work() throws Exception {\n-        sink = new Object[SIZE];\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            work();\n-            return;\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx16m\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocLargerThanHeap.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(1);\n-            analyzer.shouldContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx1g\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocLargerThanHeap.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(0);\n-            analyzer.shouldNotContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocLargerThanHeap.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=large\n+ * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @run driver TestAllocOutOfMemory large\n+ *\/\n+\n+\/**\n+ * @test id=heap\n+ * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @run driver TestAllocOutOfMemory heap\n+ *\/\n+\n+\/**\n+ * @test id=small\n+ * @summary Test allocation of small object to result OOM, but not to crash JVM\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @run driver TestAllocOutOfMemory small\n+ *\/\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestAllocOutOfMemory {\n+\n+    static volatile Object sink;\n+\n+    public static void work(int size, int count) throws Exception {\n+        Object[] root = new Object[count];\n+        sink = root;\n+        for (int c = 0; c < count; c++) {\n+            root[c] = new Object[size];\n+        }\n+    }\n+\n+    private static void allocate(String size) throws Exception {\n+        switch (size) {\n+            case \"large\":\n+                work(1024 * 1024, 16);\n+                break;\n+            case \"heap\":\n+                work(16 * 1024 * 1024, 1);\n+                break;\n+            case \"small\":\n+                work(1, 16 * 1024 * 1024);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Usage: test [large|small|heap]\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 1) {\n+            allocate(args[1]);\n+            return;\n+        }\n+\n+        {\n+            expectFailure(\"-Xmx16m\",\n+                          \"-XX:+UnlockExperimentalVMOptions\",\n+                          \"-XX:+UseShenandoahGC\",\n+                          TestAllocLargeObj.class.getName(),\n+                          \"test\", args[0]);\n+\n+            expectFailure(\"-Xmx16m\",\n+                          \"-XX:+UnlockExperimentalVMOptions\",\n+                          \"-XX:+UseShenandoahGC\", \"-XX:ShenandoahGCMode=generational\",\n+                          TestAllocLargeObj.class.getName(),\n+                          \"test\", args[0]);\n+        }\n+\n+        {\n+            expectSuccess(\"-Xmx1g\",\n+                          \"-XX:+UnlockExperimentalVMOptions\",\n+                          \"-XX:+UseShenandoahGC\",\n+                          TestAllocLargeObj.class.getName(),\n+                          \"test\", args[0]);\n+\n+            expectSuccess(\"-Xmx1g\",\n+                          \"-XX:+UnlockExperimentalVMOptions\",\n+                          \"-XX:+UseShenandoahGC\", \"-XX:ShenandoahGCMode=generational\",\n+                          TestAllocLargeObj.class.getName(),\n+                          \"test\", args[0]);\n+        }\n+    }\n+\n+    private static void expectSuccess(String... args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldNotContain(\"java.lang.OutOfMemoryError: Java heap space\");\n+    }\n+\n+    private static void expectFailure(String... args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(1);\n+        analyzer.shouldContain(\"java.lang.OutOfMemoryError: Java heap space\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocOutOfMemory.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test allocation of small object to result OOM, but not to crash JVM\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @run driver TestAllocSmallObj\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestAllocSmallObj {\n-\n-    static final int COUNT = 16 * 1024 * 1024;\n-\n-    static volatile Object sink;\n-\n-    public static void work() throws Exception {\n-        Object[] root = new Object[COUNT];\n-        sink = root;\n-        for (int c = 0; c < COUNT; c++) {\n-            root[c] = new Object();\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            work();\n-            return;\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx16m\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocSmallObj.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(1);\n-            analyzer.shouldContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-Xmx1g\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    TestAllocSmallObj.class.getName(),\n-                    \"test\");\n-\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-            analyzer.shouldHaveExitValue(0);\n-            analyzer.shouldNotContain(\"java.lang.OutOfMemoryError: Java heap space\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocSmallObj.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -128,3 +128,4 @@\n-             {{\"satb\"},    {\"adaptive\", \"compact\", \"static\", \"aggressive\"}},\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n-             {{\"passive\"}, {\"passive\"}}\n+             {{\"satb\"},         {\"adaptive\", \"compact\", \"static\", \"aggressive\"}},\n+             {{\"iu\"},           {\"adaptive\", \"aggressive\"}},\n+             {{\"passive\"},      {\"passive\"}},\n+             {{\"generational\"}, {\"adaptive\"}}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,0 +77,14 @@\n+\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-Xmx32m\",\n+                    \"-XX:+UnlockExperimentalVMOptions\",\n+                    \"-XX:+UseShenandoahGC\", \"-XX:ShenandoahGCMode=generational\",\n+                    TestThreadFailure.class.getName(),\n+                    \"test\");\n+\n+            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+            analyzer.shouldHaveExitValue(0);\n+            analyzer.shouldContain(\"java.lang.OutOfMemoryError\");\n+            analyzer.shouldContain(\"All good\");\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestThreadFailure.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -270,0 +270,37 @@\n+\/*\n+ * @test id=generational\n+ * @key stress\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.flavor == \"server\" & !vm.emulatedClient\n+ * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n+ *\n+ * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n+ *\n+ * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n+ *\/\n+\n+ \/*\n+  * @test id=generational-deopt-nmethod\n+  * @key stress\n+  * @library \/\n+  * @requires vm.gc.Shenandoah\n+  * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n+  * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n+  *\n+  * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+  *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n+  *      -XX:+ShenandoahVerify\n+  *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n+  *\n+  * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+  *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+  *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n+  *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n+  *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithShenandoah.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -41,0 +41,16 @@\n+ *\/\n+\n+\/*\n+ * @test id=generational\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress Shenandoah's JNI handling by calling GetPrimitiveArrayCritical while concurrently filling up old gen.\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestGCLockerWithShenandoah.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -144,0 +144,16 @@\n+\/*\n+ * @test id=generational\n+ * @key stress randomness\n+ * @library \/ \/test\/lib\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n+ *\n+ * @run main\/othervm\/timeout=600 -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n+ *\n+ * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.gc.detailed;\n+\n+\/**\n+ * @test\n+ * @key randomness\n+ * @requires vm.hasJFR\n+ * @requires vm.gc == \"Shenandoah\"\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -XX:+UseShenandoahGC -Xmx256m jdk.jfr.event.gc.detailed.TestStressBigAllocationGCEventsWithShenandoah 1048576\n+ *\/\n+public class TestStressBigAllocationGCEventsWithShenandoah {\n+\n+    public static void main(String[] args) throws Exception {\n+        new StressAllocationGCEvents().run(args);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithShenandoah.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -44,0 +44,17 @@\n+\/*\n+ * @test id=generational\n+ * @key stress\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress the Shenandoah GC full GC by allocating objects of different lifetimes concurrently with System.gc().\n+ *\n+ * @run main\/othervm\/timeout=300 -Xlog:gc*=info -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.systemgc.TestSystemGCWithShenandoah 270\n+ *\n+ * @run main\/othervm\/timeout=300 -Xlog:gc*=info -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.stress.systemgc.TestSystemGCWithShenandoah 270\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/systemgc\/TestSystemGCWithShenandoah.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}