{"files":[{"patch":"@@ -69,2 +69,1 @@\n-    _cm->mark_loop(GENERATION, worker_id, _terminator, rp,\n-                   true \/*cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, true \/*cancellable*\/,\n@@ -132,2 +131,1 @@\n-    _cm->mark_loop(GENERATION, worker_id, _terminator, rp,\n-                   false \/*not cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, false \/*not cancellable*\/,\n@@ -200,1 +198,1 @@\n-    case GLOBAL_GEN: {\n+    case GLOBAL: {\n@@ -202,2 +200,2 @@\n-      ShenandoahMarkConcurrentRootsTask<GLOBAL_GEN> task(task_queues(), nullptr, rp,\n-                                                         ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n+      ShenandoahMarkConcurrentRootsTask<GLOBAL> task(task_queues(), nullptr, rp,\n+                                                     ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n@@ -207,1 +205,1 @@\n-    case GLOBAL_NON_GEN: {\n+    case NON_GEN: {\n@@ -209,2 +207,2 @@\n-      ShenandoahMarkConcurrentRootsTask<GLOBAL_NON_GEN> task(task_queues(), nullptr, rp,\n-                                                         ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n+      ShenandoahMarkConcurrentRootsTask<NON_GEN> task(task_queues(), nullptr, rp,\n+                                                      ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n@@ -262,1 +260,1 @@\n-      case GLOBAL_GEN: {\n+      case GLOBAL: {\n@@ -267,1 +265,1 @@\n-        ShenandoahConcurrentMarkingTask<GLOBAL_GEN> task(this, &terminator);\n+        ShenandoahConcurrentMarkingTask<GLOBAL> task(this, &terminator);\n@@ -271,1 +269,1 @@\n-      case GLOBAL_NON_GEN: {\n+      case NON_GEN: {\n@@ -273,1 +271,1 @@\n-        ShenandoahConcurrentMarkingTask<GLOBAL_NON_GEN> task(this, &terminator);\n+        ShenandoahConcurrentMarkingTask<NON_GEN> task(this, &terminator);\n@@ -339,2 +337,2 @@\n-    case GLOBAL_GEN:{\n-      ShenandoahFinalMarkingTask<GLOBAL_GEN> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n+    case GLOBAL:{\n+      ShenandoahFinalMarkingTask<GLOBAL> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n@@ -344,2 +342,2 @@\n-    case GLOBAL_NON_GEN:{\n-      ShenandoahFinalMarkingTask<GLOBAL_NON_GEN> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n+    case NON_GEN:{\n+      ShenandoahFinalMarkingTask<NON_GEN> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  bool is_global() const { return _type == GLOBAL_GEN || _type == GLOBAL_NON_GEN; }\n+  bool is_global() const { return _type == GLOBAL || _type == NON_GEN; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,4 +29,4 @@\n-    GLOBAL_NON_GEN,  \/\/ Global, non-generational\n-    GLOBAL_GEN,      \/\/ Global, generational\n-    YOUNG,           \/\/ Young,  generational\n-    OLD              \/\/ Old,    generational\n+    NON_GEN,         \/\/ non-generational\n+    GLOBAL,          \/\/ generational: Global\n+    YOUNG,           \/\/ generational: Young\n+    OLD              \/\/ generational: Old\n@@ -37,3 +37,3 @@\n-    case GLOBAL_NON_GEN:\n-      return \"\";\n-    case GLOBAL_GEN:\n+    case NON_GEN:\n+      return \"Non-Generational\";\n+    case GLOBAL:\n@@ -47,1 +47,1 @@\n-      return \"?\";\n+      return \"Unknown\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationType.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  _requested_generation(GLOBAL_GEN),\n+  _requested_generation(GLOBAL),\n@@ -67,1 +67,1 @@\n-  ShenandoahGenerationType generation = GLOBAL_GEN;\n+  ShenandoahGenerationType generation = GLOBAL;\n@@ -140,1 +140,1 @@\n-        generation = GLOBAL_GEN;\n+        generation = GLOBAL;\n@@ -144,1 +144,1 @@\n-      generation = GLOBAL_GEN;\n+      generation = GLOBAL;\n@@ -177,1 +177,1 @@\n-        if (generation == GLOBAL_GEN) {\n+        if (generation == GLOBAL) {\n@@ -202,1 +202,1 @@\n-      if (generation == GLOBAL_GEN && (alloc_failure_pending || is_gc_requested || ShenandoahAlwaysClearSoftRefs)) {\n+      if (generation == GLOBAL && (alloc_failure_pending || is_gc_requested || ShenandoahAlwaysClearSoftRefs)) {\n@@ -426,1 +426,1 @@\n-    case GLOBAL_GEN: {\n+    case GLOBAL: {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  : ShenandoahGeneration(generational ? GLOBAL_GEN : GLOBAL_NON_GEN, max_queues, max_capacity, soft_max_capacity) { }\n+  : ShenandoahGeneration(generational ? GLOBAL : NON_GEN, max_queues, max_capacity, soft_max_capacity) { }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,2 +507,2 @@\n-    case GLOBAL_GEN:\n-    case GLOBAL_NON_GEN:\n+    case GLOBAL:\n+    case NON_GEN:\n@@ -522,2 +522,2 @@\n-    case GLOBAL_GEN:\n-    case GLOBAL_NON_GEN:\n+    case GLOBAL:\n+    case NON_GEN:\n@@ -3463,1 +3463,1 @@\n-void ShenandoahGenerationRegionClosure<GLOBAL_GEN>::heap_region_do(ShenandoahHeapRegion* region) {\n+void ShenandoahGenerationRegionClosure<GLOBAL>::heap_region_do(ShenandoahHeapRegion* region) {\n@@ -3468,1 +3468,1 @@\n-void ShenandoahGenerationRegionClosure<GLOBAL_NON_GEN>::heap_region_do(ShenandoahHeapRegion* region) {\n+void ShenandoahGenerationRegionClosure<NON_GEN>::heap_region_do(ShenandoahHeapRegion* region) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -160,2 +160,2 @@\n-    case GLOBAL_NON_GEN:\n-    case GLOBAL_GEN:\n+    case NON_GEN:\n+    case GLOBAL:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,2 @@\n-void ShenandoahMark::mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                               ShenandoahGenerationType generation, StringDedup::Requests* const req) {\n@@ -101,2 +102,2 @@\n-    case GLOBAL_GEN:\n-      mark_loop_prework<GLOBAL_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n+    case GLOBAL:\n+      mark_loop_prework<GLOBAL, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n@@ -104,2 +105,2 @@\n-    case GLOBAL_NON_GEN:\n-      mark_loop_prework<GLOBAL_NON_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n+    case NON_GEN:\n+      mark_loop_prework<NON_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n@@ -113,2 +114,2 @@\n-void ShenandoahMark::mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                               ShenandoahGenerationType generation, bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n@@ -118,1 +119,1 @@\n-        mark_loop<true, NO_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<true, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -121,1 +122,1 @@\n-        mark_loop<true, ENQUEUE_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<true, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -124,1 +125,1 @@\n-        mark_loop<true, ALWAYS_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<true, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -130,1 +131,1 @@\n-        mark_loop<false, NO_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<false, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -133,1 +134,1 @@\n-        mark_loop<false, ENQUEUE_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<false, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n@@ -136,1 +137,1 @@\n-        mark_loop<false, ALWAYS_DEDUP>(generation, worker_id, terminator, rp, req);\n+        mark_loop<false, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -108,2 +109,2 @@\n-  void mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                 StringDedup::Requests* const req);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                 ShenandoahGenerationType generation, StringDedup::Requests* const req);\n@@ -111,2 +112,2 @@\n-  void mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                 bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                 ShenandoahGenerationType generation, bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  if (GENERATION == YOUNG || (GENERATION == GLOBAL_GEN && region->is_young())) {\n+  if (GENERATION == YOUNG || (GENERATION == GLOBAL && region->is_young())) {\n@@ -285,1 +285,1 @@\n-  } else if (GENERATION == GLOBAL_GEN || GENERATION == GLOBAL_NON_GEN) {\n+  } else if (GENERATION == GLOBAL || GENERATION == NON_GEN) {\n@@ -307,1 +307,1 @@\n-      \/\/ TODO: As implemented herein, GLOBAL_GEN collections reconstruct the card table during GLOBAL_GEN concurrent\n+      \/\/ TODO: As implemented herein, GLOBAL collections reconstruct the card table during GLOBAL concurrent\n@@ -315,1 +315,1 @@\n-      } else if (GENERATION == GLOBAL_GEN && heap->is_in_old(p) && heap->is_in_young(obj)) {\n+      } else if (GENERATION == GLOBAL && heap->is_in_old(p) && heap->is_in_young(obj)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        if (request_concurrent_gc(GLOBAL_GEN)) {\n+        if (request_concurrent_gc(GLOBAL)) {\n@@ -137,1 +137,1 @@\n-  return _global_heuristics->should_start_gc() && request_concurrent_gc(GLOBAL_GEN);\n+  return _global_heuristics->should_start_gc() && request_concurrent_gc(GLOBAL);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -150,2 +151,2 @@\n-    case GLOBAL_NON_GEN: {\n-      ShenandoahInitMarkRootsClosure<GLOBAL_NON_GEN> init_mark(task_queues()->queue(worker_id));\n+    case NON_GEN: {\n+      ShenandoahInitMarkRootsClosure<NON_GEN> init_mark(task_queues()->queue(worker_id));\n@@ -155,2 +156,2 @@\n-    case GLOBAL_GEN: {\n-      ShenandoahInitMarkRootsClosure<GLOBAL_GEN> init_mark(task_queues()->queue(worker_id));\n+    case GLOBAL: {\n+      ShenandoahInitMarkRootsClosure<GLOBAL> init_mark(task_queues()->queue(worker_id));\n@@ -165,0 +166,1 @@\n+    case OLD:\n@@ -176,3 +178,2 @@\n-  mark_loop(_generation->type(),\n-            worker_id, &_terminator, rp,\n-            false \/* not cancellable *\/,\n+  mark_loop(worker_id, &_terminator, rp,\n+            _generation->type(), false \/* not cancellable *\/,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -49,3 +49,3 @@\n-    case GLOBAL_NON_GEN:                                                  \\\n-      return prefix \"\" postfix;                                           \\\n-    case GLOBAL_GEN:                                                      \\\n+    case NON_GEN:                                                         \\\n+      return prefix \" (NON-GENERATIONAL)\" postfix;                        \\\n+    case GLOBAL:                                                          \\\n@@ -59,1 +59,1 @@\n-      return prefix \" (?)\" postfix;                                       \\\n+      return prefix \" (UNKNOWN)\" postfix;                                 \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}