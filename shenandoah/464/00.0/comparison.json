{"files":[{"patch":"@@ -45,2 +45,0 @@\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, rscratch2);\n-\n@@ -117,4 +115,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -312,8 +312,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, rscratch1, true, false);\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -430,2 +422,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -70,3 +70,0 @@\n-\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-  if (ShenandoahIUBarrier) {\n-    ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), new_val, tmp1, tmp2,\n-                                                  MacroAssembler::PRESERVATION_FRAME_LR_GP_FP_REGS);\n-  }\n-\n@@ -135,4 +130,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -65,14 +65,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler *masm,\n-                                               Register val,\n-                                               Register tmp1, Register tmp2,\n-                                               MacroAssembler::PreservationLevel preservation_level,\n-                                               DecoratorSet decorators) {\n-  \/\/ IU barriers are also employed to avoid resurrection of weak references,\n-  \/\/ even if Shenandoah does not operate in incremental update mode.\n-  if (ShenandoahIUBarrier || ShenandoahSATBBarrier) {\n-    __ block_comment(\"iu_barrier (shenandoahgc) {\");\n-    satb_write_barrier_impl(masm, decorators, noreg, noreg, val, tmp1, tmp2, preservation_level);\n-    __ block_comment(\"} iu_barrier (shenandoahgc)\");\n-  }\n-}\n-\n@@ -112,1 +98,1 @@\n-  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahIUBarrier && !ShenandoahLoadRefBarrier) {\n+  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahLoadRefBarrier) {\n@@ -595,1 +581,5 @@\n-    iu_barrier(masm, dst, tmp1, tmp2, preservation_level);\n+    if (ShenandoahSATBBarrier) {\n+      __ block_comment(\"keep_alive_barrier (shenandoahgc) {\");\n+      satb_write_barrier_impl(masm, 0, noreg, noreg, dst, tmp1, tmp2, preservation_level);\n+      __ block_comment(\"} keep_alive_barrier (shenandoahgc)\");\n+    }\n@@ -629,4 +619,0 @@\n-\n-    if (ShenandoahIUBarrier && val != noreg) {\n-      iu_barrier(masm, val, tmp1, tmp2, preservation_level, decorators);\n-    }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -93,5 +93,0 @@\n-  void iu_barrier(MacroAssembler* masm,\n-                        Register val,\n-                        Register tmp1, Register tmp2,\n-                        MacroAssembler::PreservationLevel preservation_level, DecoratorSet decorators = 0);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -312,10 +312,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-\n-    satb_write_barrier_pre(masm, noreg, dst, xthread, tmp, t0, true, false);\n-\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -424,2 +414,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -50,3 +50,0 @@\n-  \/\/ Apply IU barrier to newval.\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, tmp1);\n-\n@@ -116,4 +113,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -530,34 +530,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    iu_barrier_impl(masm, dst, tmp);\n-  }\n-}\n-\n-void ShenandoahBarrierSetAssembler::iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp) {\n-  assert(ShenandoahIUBarrier, \"should be enabled\");\n-\n-  if (dst == noreg) return;\n-\n-  if (ShenandoahIUBarrier) {\n-    save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-\n-#ifdef _LP64\n-    Register thread = r15_thread;\n-#else\n-    Register thread = rcx;\n-    if (thread == dst || thread == tmp) {\n-      thread = rdi;\n-    }\n-    if (thread == dst || thread == tmp) {\n-      thread = rbx;\n-    }\n-    __ get_thread(thread);\n-#endif\n-    assert_different_registers(dst, tmp, thread);\n-\n-    satb_write_barrier_pre(masm, noreg, dst, thread, tmp, true, false);\n-\n-    restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-  }\n-}\n-\n@@ -727,5 +693,3 @@\n-    if (val == noreg) {\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n-    } else {\n-      iu_barrier(masm, val, tmp3);\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n+\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n+    if (val != noreg) {\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":4,"deletions":40,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -60,2 +60,0 @@\n-  void iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp);\n-\n@@ -69,1 +67,0 @@\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -188,8 +188,0 @@\n-LIR_Opr ShenandoahBarrierSetC1::iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators) {\n-  if (ShenandoahIUBarrier) {\n-    obj = ensure_in_register(gen, obj, T_OBJECT);\n-    pre_barrier(gen, info, decorators, LIR_OprFact::illegalOpr, obj);\n-  }\n-  return obj;\n-}\n-\n@@ -201,1 +193,0 @@\n-    value = iu_barrier(access.gen(), value, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -203,1 +203,0 @@\n-  LIR_Opr iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,19 +53,1 @@\n-  : _iu_barriers(new (comp_arena) GrowableArray<ShenandoahIUBarrierNode*>(comp_arena, 8,  0, nullptr)),\n-    _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n-}\n-\n-int ShenandoahBarrierSetC2State::iu_barriers_count() const {\n-  return _iu_barriers->length();\n-}\n-\n-ShenandoahIUBarrierNode* ShenandoahBarrierSetC2State::iu_barrier(int idx) const {\n-  return _iu_barriers->at(idx);\n-}\n-\n-void ShenandoahBarrierSetC2State::add_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  assert(!_iu_barriers->contains(n), \"duplicate entry in barrier list\");\n-  _iu_barriers->append(n);\n-}\n-\n-void ShenandoahBarrierSetC2State::remove_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  _iu_barriers->remove_if_existing(n);\n+  : _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n@@ -93,7 +75,0 @@\n-Node* ShenandoahBarrierSetC2::shenandoah_iu_barrier(GraphKit* kit, Node* obj) const {\n-  if (ShenandoahIUBarrier) {\n-    return kit->gvn().transform(new ShenandoahIUBarrierNode(obj));\n-  }\n-  return obj;\n-}\n-\n@@ -597,3 +572,0 @@\n-    Node* value = val.node();\n-    value = shenandoah_iu_barrier(kit, value);\n-    val.set_node(value);\n@@ -616,7 +588,0 @@\n-    C2OptAccess& opt_access = static_cast<C2OptAccess&>(access);\n-    PhaseGVN& gvn =  opt_access.gvn();\n-\n-    if (ShenandoahIUBarrier) {\n-      Node* enqueue = gvn.transform(new ShenandoahIUBarrierNode(val.node()));\n-      val.set_node(enqueue);\n-    }\n@@ -698,1 +663,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -750,1 +714,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -807,3 +770,0 @@\n-  if (access.is_oop()) {\n-    val = shenandoah_iu_barrier(kit, val);\n-  }\n@@ -831,1 +791,1 @@\n-  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier || node->Opcode() == Op_ShenandoahIUBarrier) return true;\n+  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier) return true;\n@@ -852,3 +812,0 @@\n-  if (c->Opcode() == Op_ShenandoahIUBarrier) {\n-    c = c->in(1);\n-  }\n@@ -887,3 +844,0 @@\n-  if (phase == Optimization) {\n-    return !ShenandoahIUBarrier;\n-  }\n@@ -948,5 +902,1 @@\n-    int flags = ShenandoahHeap::HAS_FORWARDED;\n-    if (ShenandoahIUBarrier) {\n-      flags |= ShenandoahHeap::MARKING;\n-    }\n-    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(flags)));\n+    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(ShenandoahHeap::HAS_FORWARDED)));\n@@ -1001,3 +951,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->add_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -1010,3 +957,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->remove_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -1076,6 +1020,1 @@\n-  for (int i = state()->iu_barriers_count() - 1; i >= 0; i--) {\n-    ShenandoahIUBarrierNode* n = state()->iu_barrier(i);\n-    if (!useful.member(n)) {\n-      state()->remove_iu_barrier(n);\n-    }\n-  }\n+\n@@ -1318,3 +1257,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), delayed_worklist);\n-      break;\n@@ -1344,3 +1280,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), nullptr);\n-      return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":4,"deletions":71,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  GrowableArray<ShenandoahIUBarrierNode*>* _iu_barriers;\n@@ -40,5 +39,0 @@\n-  int iu_barriers_count() const;\n-  ShenandoahIUBarrierNode* iu_barrier(int idx) const;\n-  void add_iu_barrier(ShenandoahIUBarrierNode* n);\n-  void remove_iu_barrier(ShenandoahIUBarrierNode * n);\n-\n@@ -76,2 +70,0 @@\n-  Node* shenandoah_iu_barrier(GraphKit* kit, Node* obj) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  FLAG_SET_DEFAULT(ShenandoahIUBarrier,              false);\n@@ -155,1 +154,0 @@\n-           !FLAG_IS_DEFAULT(ShenandoahIUBarrier)              ||\n@@ -167,4 +165,0 @@\n-  if (ShenandoahIUBarrier) {\n-    assert(strcmp(ShenandoahGCMode, \"generational\"), \"Generational mode does not support IU barrier\");\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  if (_heap->has_forwarded_objects() || (ShenandoahIUBarrier && _heap->is_concurrent_mark_in_progress())) {\n+  if (_heap->has_forwarded_objects()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  inline void iu_barrier(oop obj);\n@@ -135,1 +134,0 @@\n-  inline void clone_marking(oop src);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,6 +174,0 @@\n-inline void ShenandoahBarrierSet::iu_barrier(oop obj) {\n-  if (ShenandoahIUBarrier && obj != nullptr && _heap->is_concurrent_mark_in_progress()) {\n-    enqueue(obj);\n-  }\n-}\n-\n@@ -206,1 +200,0 @@\n-  iu_barrier(new_value);\n@@ -224,1 +217,0 @@\n-  iu_barrier(new_value);\n@@ -266,1 +258,0 @@\n-  bs->iu_barrier(value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -925,5 +925,1 @@\n-    _phase(phase) {\n-    if (ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_begin();\n-    }\n-  }\n+    _phase(phase) {}\n@@ -932,3 +928,0 @@\n-    if (ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_end();\n-    }\n@@ -1039,11 +1032,1 @@\n-    _nmethod_itr(ShenandoahCodeRoots::table()) {\n-    if (!ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_begin();\n-    }\n-  }\n-\n-  ~ShenandoahConcurrentRootsEvacUpdateTask() {\n-    if (!ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_end();\n-    }\n-  }\n+    _nmethod_itr(ShenandoahCodeRoots::table()) {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-  OopClosure* const _cl;\n@@ -85,3 +84,2 @@\n-  ShenandoahSATBAndRemarkThreadsClosure(SATBMarkQueueSet& satb_qset, OopClosure* cl) :\n-    _satb_qset(satb_qset),\n-    _cl(cl)  {}\n+  explicit ShenandoahSATBAndRemarkThreadsClosure(SATBMarkQueueSet& satb_qset) :\n+    _satb_qset(satb_qset) {}\n@@ -89,1 +87,1 @@\n-  void do_thread(Thread* thread) {\n+  void do_thread(Thread* thread) override {\n@@ -92,6 +90,0 @@\n-    if (thread->is_Java_thread()) {\n-      if (_cl != nullptr) {\n-        ResourceMark rm;\n-        thread->oops_do(_cl, nullptr);\n-      }\n-    }\n@@ -131,3 +123,1 @@\n-      ShenandoahMarkRefsClosure<GENERATION> mark_cl(q, rp, old_q);\n-      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set,\n-                                               ShenandoahIUBarrier ? &mark_cl : nullptr);\n+      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  log_info(gc)(\"Mutator range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"], Collector range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT\n+  log_debug(gc)(\"Mutator range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"], Collector range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT\n@@ -65,1 +65,1 @@\n-  log_info(gc)(\"Empty Mutator range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT\n+  log_debug(gc)(\"Empty Mutator range [\" SSIZE_FORMAT \", \" SSIZE_FORMAT\n@@ -75,1 +75,1 @@\n-  log_info(gc)(\"%6s: %18s %18s %18s %18s\", \"index\", \"Mutator Bits\", \"Collector Bits\", \"Old Collector Bits\", \"NotFree Bits\");\n+  log_debug(gc)(\"%6s: %18s %18s %18s %18s\", \"index\", \"Mutator Bits\", \"Collector Bits\", \"Old Collector Bits\", \"NotFree Bits\");\n@@ -99,1 +99,1 @@\n-  log_info(gc)(SSIZE_FORMAT_W(6) \": \" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0,\n+  log_debug(gc)(SSIZE_FORMAT_W(6) \": \" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0 \" 0x\" SIZE_FORMAT_X_0,\n@@ -1519,1 +1519,1 @@\n-  log_info(gc, free)(\"At start of update refs, moving \" SIZE_FORMAT \"%s to Mutator free set from Collector Reserve (\"\n+  log_info(gc, ergo)(\"At start of update refs, moving \" SIZE_FORMAT \"%s to Mutator free set from Collector Reserve (\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,1 +79,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahIUMode.hpp\"\n@@ -496,2 +495,0 @@\n-    } else if (strcmp(ShenandoahGCMode, \"iu\") == 0) {\n-      _gc_mode = new ShenandoahIUMode();\n@@ -1879,0 +1876,1 @@\n+  size_t const _stride;\n@@ -1885,1 +1883,1 @@\n-  ShenandoahParallelHeapRegionTask(ShenandoahHeapRegionClosure* blk) :\n+  ShenandoahParallelHeapRegionTask(ShenandoahHeapRegionClosure* blk, size_t stride) :\n@@ -1887,1 +1885,1 @@\n-          _heap(ShenandoahHeap::heap()), _blk(blk), _index(0) {}\n+          _heap(ShenandoahHeap::heap()), _blk(blk), _stride(stride), _index(0) {}\n@@ -1891,1 +1889,1 @@\n-    size_t stride = ShenandoahParallelRegionStride;\n+    size_t stride = _stride;\n@@ -1910,2 +1908,14 @@\n-  if (num_regions() > ShenandoahParallelRegionStride) {\n-    ShenandoahParallelHeapRegionTask task(blk);\n+  const uint active_workers = workers()->active_workers();\n+  const size_t n_regions = num_regions();\n+  size_t stride = ShenandoahParallelRegionStride;\n+  if (stride == 0 && active_workers > 1) {\n+    \/\/ Automatically derive the stride to balance the work between threads\n+    \/\/ evenly. Do not try to split work if below the reasonable threshold.\n+    constexpr size_t threshold = 4096;\n+    stride = n_regions <= threshold ?\n+            threshold :\n+            (n_regions + active_workers - 1) \/ active_workers;\n+  }\n+\n+  if (n_regions > stride && active_workers > 1) {\n+    ShenandoahParallelHeapRegionTask task(blk, stride);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-#ifndef SHARE_VM_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n-#define SHARE_VM_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n@@ -182,1 +182,1 @@\n-#endif \/\/ SHARE_VM_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHMARKBITMAP_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/safepointVerifiers.hpp\"\n@@ -478,7 +479,4 @@\n-  _table(table), _table_snapshot(nullptr) {\n-}\n-\n-void ShenandoahConcurrentNMethodIterator::nmethods_do_begin() {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-  _table_snapshot = _table->snapshot_for_iteration();\n-}\n+  _table(table),\n+  _table_snapshot(nullptr),\n+  _started_workers(0),\n+  _finished_workers(0) {}\n@@ -487,3 +485,3 @@\n-  assert(_table_snapshot != nullptr, \"Must first call nmethod_do_begin()\");\n-  _table_snapshot->concurrent_nmethods_do(cl);\n-}\n+  \/\/ Cannot safepoint when iteration is running, because this can cause deadlocks\n+  \/\/ with other threads waiting on iteration to be over.\n+  NoSafepointVerifier nsv;\n@@ -491,4 +489,26 @@\n-void ShenandoahConcurrentNMethodIterator::nmethods_do_end() {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-  _table->finish_iteration(_table_snapshot);\n-  CodeCache_lock->notify_all();\n+  MutexLocker ml(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+\n+  if (_finished_workers > 0) {\n+    \/\/ Some threads have already finished. We are now in rampdown: we are now\n+    \/\/ waiting for all currently recorded workers to finish. No new workers\n+    \/\/ should start.\n+    return;\n+  }\n+\n+  \/\/ Record a new worker and initialize the snapshot if it is a first visitor.\n+  if (_started_workers++ == 0) {\n+    _table_snapshot = _table->snapshot_for_iteration();\n+  }\n+\n+  \/\/ All set, relinquish the lock and go concurrent.\n+  {\n+    MutexUnlocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    _table_snapshot->concurrent_nmethods_do(cl);\n+  }\n+\n+  \/\/ Record completion. Last worker shuts down the iterator and notifies any waiters.\n+  uint count = ++_finished_workers;\n+  if (count == _started_workers) {\n+    _table->finish_iteration(_table_snapshot);\n+    CodeCache_lock->notify_all();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-  product(uintx, ShenandoahParallelRegionStride, 1024, EXPERIMENTAL,        \\\n+  product(uintx, ShenandoahParallelRegionStride, 0, EXPERIMENTAL,           \\\n@@ -512,1 +512,2 @@\n-          \"iteration. Affects heaps with lots of regions.\")                 \\\n+          \"iteration. Affects heaps with lots of regions. \"                 \\\n+          \"Set to 0 to let Shenandoah to decide the best value.\")           \\\n@@ -525,3 +526,0 @@\n-  product(bool, ShenandoahIUBarrier, false, DIAGNOSTIC,                     \\\n-          \"Turn on\/off I-U barriers barriers in Shenandoah\")                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,45 +141,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocHumongousFragment\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocHumongousFragment\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -148,50 +148,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocIntArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocIntArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -173,50 +173,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjectArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjectArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -131,46 +131,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjects.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -97,22 +97,0 @@\n- *\/\n-\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -98,18 +98,0 @@\n-\/**\n- * @test id=iu\n- * @summary Test Shenandoah GC uses concurrent\/parallel threads correctly\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n-*\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestGCThreadGroups.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -110,21 +110,0 @@\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestHeapUncommit\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHeapUncommit.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -110,32 +110,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestJcmdHeapDump\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestJcmdHeapDump\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -105,32 +105,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestLotsOfCycles\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLotsOfCycles.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-             {{\"iu\"},           {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestObjItrWithHeapDump.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,30 +126,0 @@\n-        testWith(\"Zero interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=0\"\n-        );\n-\n-        testWith(\"Short interval with iu mode\",\n-                 true,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=1000\"\n-        );\n-\n-        testWith(\"Long interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=100000\" \/\/ deliberately too long\n-        );\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -76,25 +76,0 @@\n-\/* @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n@@ -228,4 +203,0 @@\n-    private static boolean isShenandoahIUMode() {\n-        return \"iu\".equals(WB.getStringVMFlag(\"ShenandoahGCMode\"));\n-    }\n-\n@@ -267,8 +238,1 @@\n-            \/\/ This is true for all currently supported concurrent collectors,\n-            \/\/ except Shenandoah+IU, which allows clearing refs even when\n-            \/\/ accessed during concurrent marking.\n-            if (isShenandoahIUMode()) {\n-              expectCleared(testWeak4, \"testWeak4\");\n-            } else {\n-              expectNotCleared(testWeak4, \"testWeak4\");\n-            }\n+            expectNotCleared(testWeak4, \"testWeak4\");\n@@ -289,6 +253,4 @@\n-            if (!isShenandoahIUMode()) {\n-                if (obj4 == null) {\n-                    fail(\"testWeak4.get() returned null\");\n-                } else if (obj4.value != 4) {\n-                    fail(\"testWeak4.get().value is \" + obj4.value);\n-                }\n+            if (obj4 == null) {\n+                fail(\"testWeak4.get() returned null\");\n+            } else if (obj4.value != 4) {\n+                fail(\"testWeak4.get().value is \" + obj4.value);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":5,"deletions":43,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -52,13 +52,0 @@\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceShortcutCycle\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -60,19 +60,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test that null references\/referents work fine\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRefprocSanity\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRefprocSanity.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -86,19 +86,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRegionSampling\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRegionSampling\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSampling.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -162,40 +162,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestResizeTLAB.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -143,35 +143,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRetainObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRetainObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRetainObjects.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -153,39 +153,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestSieveObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestSieveObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSieveObjects.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -83,18 +83,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedup.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -92,31 +92,0 @@\n- \/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -95,20 +95,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that Shenandoah cleans up interned strings\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringInternCleanup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringInternCleanup.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -67,27 +67,0 @@\n-\/*\n- * @test id=iu\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestVerifyJCStress\n- *\/\n-\n-\/*\n- * @test id=iu-c1\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify -XX:TieredStopAtLevel=1\n- *      TestVerifyJCStress\n- *\/\n-\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyJCStress.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu           TestWrongArrayMember\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestWrongArrayMember.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,17 +91,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -87,15 +87,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestPauseNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestPauseNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-             {{\"iu\"},           {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-        testWith(\"-XX:ShenandoahGCMode=iu\",           Mode.EXPERIMENTAL);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestModeUnlock.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -103,41 +103,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n@@ -224,47 +183,0 @@\n-\n-\/*\n- * @test id=iu-aggressive-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithShenandoah.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -106,39 +106,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=600 -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -61,14 +61,0 @@\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the Shenandoah GC full GC by allocating objects of different lifetimes concurrently with System.gc().\n- *\n- * @run main\/othervm\/timeout=300 -Xlog:gc*=info -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.systemgc.TestSystemGCWithShenandoah 270\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/systemgc\/TestSystemGCWithShenandoah.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}