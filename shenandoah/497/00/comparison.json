{"files":[{"patch":"@@ -1342,1 +1342,2 @@\n-  for (size_t idx = 0; idx < _heap->num_regions(); idx++) {\n+  size_t num_regions = _heap->num_regions();\n+  for (size_t idx = 0; idx < num_regions; idx++) {\n@@ -1427,1 +1428,3 @@\n-  _partitions.establish_mutator_intervals(mutator_leftmost, mutator_rightmost, mutator_leftmost_empty, mutator_rightmost_empty,\n+  idx_t rightmost_idx = (mutator_leftmost == max_regions)? -1: (idx_t) mutator_rightmost;\n+  idx_t rightmost_empty_idx = (mutator_leftmost_empty == max_regions)? -1: (idx_t) mutator_rightmost_empty;\n+  _partitions.establish_mutator_intervals(mutator_leftmost, rightmost_idx, mutator_leftmost_empty, rightmost_empty_idx,\n@@ -1429,2 +1432,4 @@\n-  _partitions.establish_old_collector_intervals(old_collector_leftmost, old_collector_rightmost, old_collector_leftmost_empty,\n-                                                old_collector_rightmost_empty, old_collector_regions, old_collector_used);\n+  rightmost_idx = (old_collector_leftmost == max_regions)? -1: (idx_t) old_collector_rightmost;\n+  rightmost_empty_idx = (old_collector_leftmost_empty == max_regions)? -1: (idx_t) old_collector_rightmost_empty;\n+  _partitions.establish_old_collector_intervals(old_collector_leftmost, rightmost_idx, old_collector_leftmost_empty,\n+                                                rightmost_empty_idx, old_collector_regions, old_collector_used);\n@@ -1547,2 +1552,17 @@\n-    old_gen->set_capacity(old_region_count * region_size_bytes);\n-    young_gen->set_capacity(young_region_count * region_size_bytes);\n+    size_t original_old_capacity = old_gen->max_capacity();\n+    size_t new_old_capacity = old_region_count * region_size_bytes;\n+    size_t new_young_capacity = young_region_count * region_size_bytes;\n+    old_gen->set_capacity(new_old_capacity);\n+    young_gen->set_capacity(new_young_capacity);\n+\n+    if (new_old_capacity > original_old_capacity) {\n+      size_t region_count = (new_old_capacity - original_old_capacity) \/ region_size_bytes;\n+      log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                   region_count, young_gen->name(), old_gen->name(), PROPERFMTARGS(new_old_capacity));\n+    } else if (new_old_capacity < original_old_capacity) {\n+      size_t region_count = (original_old_capacity - new_old_capacity) \/ region_size_bytes;\n+      log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                   region_count, old_gen->name(), young_gen->name(), PROPERFMTARGS(new_young_capacity));\n+    }\n+    \/\/ This balances generations, so clear any pending request to balance.\n+    old_gen->set_region_balance(0);\n@@ -1715,1 +1735,1 @@\n-    size_t old_reserve = _partitions.capacity_of(ShenandoahFreeSetPartitionId::OldCollector);\n+    size_t old_reserve = _partitions.available_in(ShenandoahFreeSetPartitionId::OldCollector);\n@@ -1720,1 +1740,1 @@\n-    size_t reserve = _partitions.capacity_of(ShenandoahFreeSetPartitionId::Collector);\n+    size_t reserve = _partitions.available_in(ShenandoahFreeSetPartitionId::Collector);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"}]}