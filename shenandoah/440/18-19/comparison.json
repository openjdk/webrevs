{"files":[{"patch":"@@ -1748,0 +1748,6 @@\n+#define KELVIN_DEBUG\n+#ifdef KELVIN_DEBUG\n+#undef ASSERT\n+#define ASSERT\n+#endif\n+\n@@ -1750,0 +1756,3 @@\n+#ifdef KELVIN_DEBUG\n+  {\n+#else\n@@ -1751,0 +1760,1 @@\n+#endif\n@@ -1772,0 +1782,18 @@\n+\n+#define KELVIN_DEBUG\n+#ifdef KELVIN_DEBUG\n+    log_info(gc)(\"FreeSet map legend:\"\n+                 \" M:mutator_free C:collector_free O:old_collector_free\"\n+                 \" H:humongous ~:retired old _:retired young\");\n+    log_info(gc)(\" mutator free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"] allocating from %s, \"\n+                 \" collector free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"], \"\n+                 \"old collector free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"] allocates from %s\",\n+                 _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator),\n+                 _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator),\n+                 _partitions.alloc_from_left_bias(ShenandoahFreeSetPartitionId::Mutator)? \"left to right\": \"right to left\",\n+                 _partitions.leftmost(ShenandoahFreeSetPartitionId::Collector),\n+                 _partitions.rightmost(ShenandoahFreeSetPartitionId::Collector),\n+                 _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector),\n+                 _partitions.rightmost(ShenandoahFreeSetPartitionId::OldCollector),\n+                 _partitions.alloc_from_left_bias(ShenandoahFreeSetPartitionId::OldCollector)? \"left to right\": \"right to left\");\n+#endif\n@@ -1791,0 +1819,3 @@\n+#ifdef KELVIN_DEBUG\n+        log_info(gc)(\" %6u: %s\", i-64, buffer);\n+#endif\n@@ -1836,0 +1867,3 @@\n+#ifdef KELVIN_DEBUG\n+    log_info(gc)(\" %6u: %s\", (uint) (_heap->num_regions() - remnant), buffer);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -650,0 +650,40 @@\n+#define KELVIN_DEBUG\n+#ifdef KELVIN_DEBUG\n+static void validate_young_gen_size(ShenandoahHeap* heap) {\n+  ShenandoahYoungGeneration* young_gen = heap->young_generation();\n+  ShenandoahOldGeneration* old_gen = heap->old_generation();\n+  size_t young_capacity = young_gen->max_capacity();\n+  size_t young_used = young_gen->used();\n+  size_t young_used_regions = young_gen->used_regions();\n+  size_t pad_for_promote_in_place = old_gen->get_pad_for_promote_in_place();\n+\n+  size_t free_count = 0;\n+  size_t old_count = 0;\n+  size_t young_count = 0;\n+\n+  for (size_t i = 0; i < heap->num_regions(); i++) {\n+    ShenandoahHeapRegion* r = heap->get_region(i);\n+    switch (r->affiliation()) {\n+      case FREE:\n+        free_count++;\n+        break;\n+      case YOUNG_GENERATION:\n+        young_count++;\n+        break;\n+      case OLD_GENERATION:\n+        old_count++;\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  }\n+  size_t num_regions = heap->num_regions();\n+  assert (young_count * ShenandoahHeapRegion::region_size_bytes() <= young_capacity,\n+          \"young_count (\" SIZE_FORMAT \") * region_size (\" SIZE_FORMAT \") must be <= young_capacity (\" SIZE_FORMAT\n+          \"): free_count (\" SIZE_FORMAT \"), old_count (\" SIZE_FORMAT \"), num_regions (\" SIZE_FORMAT\n+          \"), free_set->capacity (\" SIZE_FORMAT \"), free_set->used (\" SIZE_FORMAT \"), free_set->available (\" SIZE_FORMAT \")\",\n+          young_count, ShenandoahHeapRegion::region_size_bytes(), young_capacity, free_count, old_count, num_regions,\n+          heap->free_set()->capacity(), heap->free_set()->used(), heap->free_set()->available());\n+}\n+#endif\n+\n@@ -759,0 +799,6 @@\n+\n+#ifdef KELVIN_DEBUG\n+  if (heap->mode()->is_generational()) {\n+    validate_young_gen_size(heap);\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+#undef KELVIN_DEBUG_WO_LOGGING\n@@ -113,0 +114,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record young\\n\", gcid);\n+  fflush(stdout);\n+#endif\n@@ -117,0 +122,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record global\\n\", gcid);\n+  fflush(stdout);\n+#endif\n@@ -121,0 +130,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record bootstrap\\n\", gcid);\n+  fflush(stdout);\n+#endif\n@@ -130,0 +143,5 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"     record %sold marking increment\\n\", old_marking_done? \"last \": \"\");\n+  fflush(stdout);\n+#endif\n+\n@@ -140,0 +158,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record mixed\\n\", gcid);\n+  fflush(stdout);\n+#endif\n@@ -144,0 +166,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record degenerated\\n\", gcid);\n+  fflush(stdout);\n+#endif\n@@ -155,0 +181,4 @@\n+#ifdef KELVIN_DEBUG_WO_LOGGING\n+  printf(\"GC(\" SIZE_FORMAT \"): record full\\n\", gcid);\n+  fflush(stdout);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -379,0 +379,83 @@\n+#define KELVIN_DEBUG\n+#ifdef KELVIN_DEBUG\n+class ShenandoahNoDumpDetails : public ShenandoahHeapRegionClosure {\n+private:\n+  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n+public:\n+  ShenandoahNoDumpDetails() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    _used += r->used();\n+    _garbage += r->garbage();\n+    _committed += r->is_committed() ? ShenandoahHeapRegion::region_size_bytes() : 0;\n+    if (r->is_humongous()) {\n+      _humongous_waste += r->free();\n+    }\n+    _regions++;\n+    \/\/ log_info(gc)(\"ShenandoahNoDumpDetails: adding \" SIZE_FORMAT \" for %s Region \" SIZE_FORMAT \", yielding: \" SIZE_FORMAT,\n+    \/\/              r->used(), (r->is_humongous() ? \"humongous\" : \"regular\"), r->index(), _used);\n+  }\n+\n+  size_t used() const { return _used; }\n+  size_t committed() const { return _committed; }\n+  size_t garbage() const { return _garbage; }\n+  size_t regions() const { return _regions; }\n+  size_t waste() const { return _humongous_waste; }\n+\n+  \/\/ span is the total memory affiliated with these stats (some of which is in use and other is available)\n+  size_t span() const { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n+};\n+\n+class ShenandoahDumpDetails : public ShenandoahHeapRegionClosure {\n+private:\n+  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n+public:\n+  ShenandoahDumpDetails() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    _used += r->used();\n+    _garbage += r->garbage();\n+    _committed += r->is_committed() ? ShenandoahHeapRegion::region_size_bytes() : 0;\n+    if (r->is_humongous()) {\n+      _humongous_waste += r->free();\n+    }\n+    _regions++;\n+    log_info(gc)(\"ShenandoahDumpDetails: adding \" SIZE_FORMAT \" for %s Region \" SIZE_FORMAT \", yielding: \" SIZE_FORMAT,\n+            r->used(), (r->is_humongous() ? \"humongous\" : \"regular\"), r->index(), _used);\n+  }\n+\n+  size_t used() const { return _used; }\n+  size_t committed() const { return _committed; }\n+  size_t garbage() const { return _garbage; }\n+  size_t regions() const { return _regions; }\n+  size_t waste() const { return _humongous_waste; }\n+\n+  \/\/ span is the total memory affiliated with these stats (some of which is in use and other is available)\n+  size_t span() const { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n+};\n+\n+class ShenandoahDebugVerificationClosure: public ShenandoahHeapRegionClosure {\n+ public:\n+  ShenandoahNoDumpDetails old;\n+  ShenandoahDumpDetails young;\n+  ShenandoahNoDumpDetails global;\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    switch (r->affiliation()) {\n+      case FREE:\n+        return;\n+      case YOUNG_GENERATION:\n+        young.heap_region_do(r);\n+        global.heap_region_do(r);\n+        break;\n+      case OLD_GENERATION:\n+        old.heap_region_do(r);\n+        global.heap_region_do(r);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  }\n+};\n+#endif\n+\n@@ -428,0 +511,7 @@\n+#ifdef KELVIN_DEBUG\n+    if (stats.span() > generation_capacity) {\n+      ShenandoahDebugVerificationClosure cl_debug;\n+      heap->heap_region_iterate(&cl_debug);\n+      log_info(gc)(\"cl_debug.used() is \" SIZE_FORMAT, cl_debug.young.used());\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":90,"deletions":0,"binary":false,"changes":90,"status":"modified"}]}