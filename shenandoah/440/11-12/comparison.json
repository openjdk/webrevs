{"files":[{"patch":"@@ -975,2 +975,1 @@\n-  bool is_generational = _heap->mode()->is_generational();\n-  try_recycle_trashed(r, is_generational);\n+  try_recycle_trashed(r);\n@@ -984,1 +983,0 @@\n-    ShenandoahMarkingContext* const ctx = _heap->complete_marking_context();\n@@ -997,0 +995,2 @@\n+#ifdef ASSERT\n+    ShenandoahMarkingContext* const ctx = _heap->complete_marking_context();\n@@ -999,1 +999,1 @@\n-\n+#endif\n@@ -1005,1 +1005,1 @@\n-      assert(is_generational, \"Request for %s from %s region should only happen in generational mode.\",\n+      assert(_heap->mode()->is_generational(), \"Request for %s from %s region should only happen in generational mode.\",\n@@ -1017,1 +1017,1 @@\n-      assert(is_generational, \"PLABs are only for generational mode\");\n+      assert(_heap->mode()->is_generational(), \"PLABs are only for generational mode\");\n@@ -1187,2 +1187,0 @@\n-  ShenandoahMarkingContext* const ctx = _heap->complete_marking_context();\n-\n@@ -1193,1 +1191,1 @@\n-    try_recycle_trashed(r, is_generational);\n+    try_recycle_trashed(r);\n@@ -1235,1 +1233,1 @@\n-void ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion *r, bool is_generational) {\n+void ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion *r) {\n@@ -1244,1 +1242,0 @@\n-  bool is_generational = _heap->mode()->is_generational();\n@@ -1249,1 +1246,1 @@\n-      try_recycle_trashed(r, is_generational);\n+      try_recycle_trashed(r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-  void try_recycle_trashed(ShenandoahHeapRegion *r, bool is_generational);\n+  void try_recycle_trashed(ShenandoahHeapRegion *r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}