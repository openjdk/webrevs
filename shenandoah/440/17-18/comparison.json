{"files":[{"patch":"@@ -1429,0 +1429,1 @@\n+  shenandoah_assert_heaplocked();\n@@ -1431,1 +1432,0 @@\n-  ShenandoahHeapLocker locker(_heap->lock());\n@@ -1450,0 +1450,1 @@\n+  shenandoah_assert_heaplocked();\n@@ -1451,1 +1452,0 @@\n-  ShenandoahHeapLocker locker(_heap->lock());\n@@ -1474,0 +1474,1 @@\n+    ShenandoahHeapLocker locker(_heap->lock());\n@@ -1483,0 +1484,1 @@\n+    ShenandoahHeapLocker locker(_heap->lock());\n@@ -1488,1 +1490,0 @@\n-      ShenandoahHeapLocker locker(_heap->lock());\n@@ -1496,0 +1497,1 @@\n+    ShenandoahHeapLocker locker(_heap->lock());\n@@ -1549,0 +1551,2 @@\n+  \/\/ Move some of the mutator regions in the Collector and OldCollector partitions in order to satisfy\n+  \/\/ young_reserve and old_reserve.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-\/\/ The ShenandoahFreeSet endeavors to congregrate survivor objects (objects that have been evacuated at least once) at the\n+\/\/ The ShenandoahFreeSet tries to colocate survivor objects (objects that have been evacuated at least once) at the\n@@ -294,2 +294,2 @@\n-  \/\/ Satisfy collector allocation request req by finding memory that matches affiliation from within the\n-  \/\/ free partition associated with which_partition.\n+  \/\/ Return the address of memory allocated, setting in_new_region to true iff the allocation is taken\n+  \/\/ from a region that was previously empty.  Return nullptr if memory could not be allocated.\n@@ -465,5 +465,1 @@\n-  \/\/ capacity as NotFree.  Subsequently, we will move some of the mutator regions into the collector and old collector\n-  \/\/ partitions with the intent of packing old collector memory into the highest (far rightmost) addresses of the heap,\n-  \/\/ young collector memory into higher address, and mutator memory consuming the lowest addresses of the heap.\n-  \/\/\n-  \/\/ Examine the existing free set representation, capturing the current state into var arguments:\n+  \/\/ capacity as NotFree.  Capture the modified state of the freeset into var arguments:\n@@ -479,7 +475,3 @@\n-\n-  \/\/ Having placed all regions that have allocation capacity into the mutator partition, move some of these regions from\n-  \/\/ the mutator partition into the collector partition in order to assure that the memory available for allocations within\n-  \/\/ the collector partition is at least to_reserve, and move others of these regions from the mutator partition into the\n-  \/\/ old collector partition to assure that old collector partition has at least old_reserve.  Update old_region_count\n-  \/\/ to represent the total number of regions in the old generation by adding the number of regions moved from the\n-  \/\/ mutator partition to the old collector partition.\n+  \/\/ Ensure that Collector has at least to_reserve bytes of available memory, and OldCollector has at least old_reserve\n+  \/\/ bytes of available memory.  On input, old_region_count holds the number of regions already present in the\n+  \/\/ OldCollector partition.  Upon return, old_region_count holds the updated number of regions in the OldCollector partition.\n@@ -488,4 +480,0 @@\n-\n-\n-  void reserve_regions(size_t young_reserve, size_t old_reserve);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":7,"deletions":19,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -45,2 +45,4 @@\n-    final int array_size = 512 * 1024;   \/\/ 512K entries\n-    BigInteger array[] = new BigInteger[array_size];\n+    final int ArraySize = 512 * 1024;   \/\/ 512K entries\n+    final int BitsInBigInteger = 128;\n+    final int RefillIterations = 64;\n+    BigInteger array[] = new BigInteger[ArraySize];\n@@ -49,2 +51,2 @@\n-    for (int i = 0; i < array_size; i++) {\n-      array[i] = new BigInteger(128, r);\n+    for (int i = 0; i < ArraySize; i++) {\n+      array[i] = new BigInteger(BitsInBigInteger, r);\n@@ -53,5 +55,5 @@\n-    for (int refill_count = 0; refill_count < 128; refill_count++) {\n-      \/\/ Each refill repopulates array_size randomly selected elements within array\n-      for (int i = 0; i < array_size; i++) {\n-        int replace_index = r.nextInt(array_size);\n-        int derive_index = r.nextInt(array_size);\n+    for (int refill_count = 0; refill_count < RefillIterations; refill_count++) {\n+      \/\/ Each refill repopulates ArraySize randomly selected elements within array\n+      for (int i = 0; i < ArraySize; i++) {\n+        int replace_index = r.nextInt(ArraySize);\n+        int derive_index = r.nextInt(ArraySize);\n@@ -103,2 +105,2 @@\n-            \"-Xms128m\",\n-            \"-Xmx128m\",\n+            \"-Xms96m\",\n+            \"-Xmx96m\",\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestOldGrowthTriggers.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}