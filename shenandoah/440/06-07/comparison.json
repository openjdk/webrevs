{"files":[{"patch":"@@ -210,0 +210,2 @@\n+        \/\/ Each allocated int array is assumed to consume 16 bytes for alignment and header, plus\n+        \/\/  an everage of 4 * the average number of elements in the array.\n@@ -213,0 +215,3 @@\n+        \/\/ Repeatedly, allocate an array of int having between 0 and 384K elements, until we have\n+        \/\/ allocated approximately TARGET_MB.  The largest allocated array consumes 384K*4 + 16, which is 1.5 M,\n+        \/\/ which is well below the heap size of 1g.\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    for (int refill_count = 0; refill_count < 192; refill_count++) {\n+    for (int refill_count = 0; refill_count < 128; refill_count++) {\n@@ -103,2 +103,2 @@\n-            \"-Xms256m\",\n-            \"-Xmx256m\",\n+            \"-Xms128m\",\n+            \"-Xmx128m\",\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestOldGrowthTriggers.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}