{"files":[{"patch":"@@ -307,4 +307,0 @@\n-#ifdef KELVIN_DEPRECATE\n-    \/\/ We should only increment no-progress count following a full GC failure\n-    heap->notify_gc_no_progress();\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1540,46 +1540,0 @@\n-#undef KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-static void validate_young_gen_size(ShenandoahHeap* heap, size_t young_cset_regions, size_t old_cset_regions,\n-                                    size_t young_region_count, size_t old_region_count, size_t original_old_region_count,\n-                                    size_t young_reserve, size_t old_reserve) {\n-  ShenandoahYoungGeneration* young_gen = heap->young_generation();\n-  ShenandoahOldGeneration* old_gen = heap->old_generation();\n-  size_t young_capacity = young_gen->max_capacity();\n-  size_t young_used = young_gen->used();\n-  size_t young_used_regions = young_gen->used_regions();\n-  size_t pad_for_promote_in_place = old_gen->get_pad_for_promote_in_place();\n-\n-  size_t free_count = 0;\n-  size_t old_count = 0;\n-  size_t young_count = 0;\n-\n-  for (size_t i = 0; i < heap->num_regions(); i++) {\n-    ShenandoahHeapRegion* r = heap->get_region(i);\n-    switch (r->affiliation()) {\n-      case FREE:\n-        free_count++;\n-        break;\n-      case YOUNG_GENERATION:\n-        young_count++;\n-        break;\n-      case OLD_GENERATION:\n-        old_count++;\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-    }\n-  }\n-  size_t num_regions = heap->num_regions();\n-  assert (young_count * ShenandoahHeapRegion::region_size_bytes() <= young_capacity,\n-          \"young_count (\" SIZE_FORMAT \") * region_size (\" SIZE_FORMAT \") must be <= young_capacity (\" SIZE_FORMAT\n-          \"): free_count (\" SIZE_FORMAT \"), old_count (\" SIZE_FORMAT \"), num_regions (\" SIZE_FORMAT\n-          \"), free_set->capacity (\" SIZE_FORMAT \"), free_set->used (\" SIZE_FORMAT \"), free_set->available (\" SIZE_FORMAT\n-          \"), young_cset_regions (\" SIZE_FORMAT \"), old_cset_regions (\" SIZE_FORMAT \"), young_region_count (\" SIZE_FORMAT\n-          \"), old_region_count (\" SIZE_FORMAT \"), original_old_region_count (\" SIZE_FORMAT \"), young_reserve (\" SIZE_FORMAT\n-          \"), old_reserve (\" SIZE_FORMAT \")\",\n-          young_count, ShenandoahHeapRegion::region_size_bytes(), young_capacity, free_count, old_count, num_regions,\n-          heap->free_set()->capacity(), heap->free_set()->used(), heap->free_set()->available(), young_cset_regions,\n-          old_cset_regions, young_region_count, old_region_count, original_old_region_count, young_reserve, old_reserve);\n-}\n-#endif\n-\n@@ -1599,3 +1553,0 @@\n-#ifdef KELVIN_DEBUG\n-  size_t original_old_region_count = old_region_count;\n-#endif\n@@ -1609,8 +1560,0 @@\n-\n-#ifdef KELVIN_DEBUG\n-  if (_heap->mode()->is_generational()) {\n-    validate_young_gen_size(_heap, young_cset_regions, old_cset_regions, young_region_count, old_region_count,\n-                            original_old_region_count, young_reserve, old_reserve);\n-  }\n-#endif\n-\n@@ -1724,12 +1667,0 @@\n-#ifdef KELVIN_DEPRECATE\n-        \/\/ I was puzzling over this code here.  My confusion arose because I overlooked that this loop exits early\n-        \/\/ (continues) if idx is not in the Mutator partition.\n-\n-        \/\/ OLD trashed (CSET) regions are also already in the old_collector free set.\n-        \/\/ It looks to me like we should test (r->is_trash() && r->is_young()) above.  The failure to do so\n-        \/\/ might possibly account for double-counting of certain regions within the old_region_count.  The problem\n-        \/\/ with this hypothesis is it does not explain why we did not experience an assertion failure in\n-        \/\/ _partitions.move_from_partition_to_partition() below.  But if this assertion fails, that is a good\n-        \/\/ clue of where the problem arises.\n-        assert(!r->is_old(), \"Expecting old is-trashed regions to already be in the OldCollector partition\");\n-#endif\n@@ -1823,6 +1754,0 @@\n-#define KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-#undef ASSERT\n-#define ASSERT\n-#endif\n-\n@@ -1831,3 +1756,0 @@\n-#ifdef KELVIN_DEBUG\n-  {\n-#else\n@@ -1835,1 +1757,0 @@\n-#endif\n@@ -1858,17 +1779,0 @@\n-#define KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-    log_info(gc)(\"FreeSet map legend:\"\n-                 \" M:mutator_free C:collector_free O:old_collector_free\"\n-                 \" H:humongous ~:retired old _:retired young\");\n-    log_info(gc)(\" mutator free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"] allocating from %s, \"\n-                 \" collector free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"], \"\n-                 \"old collector free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"] allocates from %s\",\n-                 _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator),\n-                 _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator),\n-                 _partitions.alloc_from_left_bias(ShenandoahFreeSetPartitionId::Mutator)? \"left to right\": \"right to left\",\n-                 _partitions.leftmost(ShenandoahFreeSetPartitionId::Collector),\n-                 _partitions.rightmost(ShenandoahFreeSetPartitionId::Collector),\n-                 _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector),\n-                 _partitions.rightmost(ShenandoahFreeSetPartitionId::OldCollector),\n-                 _partitions.alloc_from_left_bias(ShenandoahFreeSetPartitionId::OldCollector)? \"left to right\": \"right to left\");\n-#endif\n@@ -1894,3 +1798,0 @@\n-#ifdef KELVIN_DEBUG\n-        log_info(gc)(\" %6u: %s\", i-64, buffer);\n-#endif\n@@ -1942,3 +1843,0 @@\n-#ifdef KELVIN_DEBUG\n-    log_info(gc)(\" %6u: %s\", (uint) (_heap->num_regions() - remnant), buffer);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":102,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -650,40 +650,0 @@\n-#undef KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-static void validate_young_gen_size(ShenandoahHeap* heap) {\n-  ShenandoahYoungGeneration* young_gen = heap->young_generation();\n-  ShenandoahOldGeneration* old_gen = heap->old_generation();\n-  size_t young_capacity = young_gen->max_capacity();\n-  size_t young_used = young_gen->used();\n-  size_t young_used_regions = young_gen->used_regions();\n-  size_t pad_for_promote_in_place = old_gen->get_pad_for_promote_in_place();\n-\n-  size_t free_count = 0;\n-  size_t old_count = 0;\n-  size_t young_count = 0;\n-\n-  for (size_t i = 0; i < heap->num_regions(); i++) {\n-    ShenandoahHeapRegion* r = heap->get_region(i);\n-    switch (r->affiliation()) {\n-      case FREE:\n-        free_count++;\n-        break;\n-      case YOUNG_GENERATION:\n-        young_count++;\n-        break;\n-      case OLD_GENERATION:\n-        old_count++;\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-    }\n-  }\n-  size_t num_regions = heap->num_regions();\n-  assert (young_count * ShenandoahHeapRegion::region_size_bytes() <= young_capacity,\n-          \"young_count (\" SIZE_FORMAT \") * region_size (\" SIZE_FORMAT \") must be <= young_capacity (\" SIZE_FORMAT\n-          \"): free_count (\" SIZE_FORMAT \"), old_count (\" SIZE_FORMAT \"), num_regions (\" SIZE_FORMAT\n-          \"), free_set->capacity (\" SIZE_FORMAT \"), free_set->used (\" SIZE_FORMAT \"), free_set->available (\" SIZE_FORMAT \")\",\n-          young_count, ShenandoahHeapRegion::region_size_bytes(), young_capacity, free_count, old_count, num_regions,\n-          heap->free_set()->capacity(), heap->free_set()->used(), heap->free_set()->available());\n-}\n-#endif\n-\n@@ -799,6 +759,0 @@\n-\n-#ifdef KELVIN_DEBUG\n-  if (heap->mode()->is_generational()) {\n-    validate_young_gen_size(heap);\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-#undef KELVIN_DEBUG_WO_LOGGING\n@@ -114,4 +113,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record young\\n\", gcid);\n-  fflush(stdout);\n-#endif\n@@ -122,4 +117,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record global\\n\", gcid);\n-  fflush(stdout);\n-#endif\n@@ -130,4 +121,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record bootstrap\\n\", gcid);\n-  fflush(stdout);\n-#endif\n@@ -142,6 +129,0 @@\n-\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"     record %sold marking increment\\n\", old_marking_done? \"last \": \"\");\n-  fflush(stdout);\n-#endif\n-\n@@ -158,4 +139,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record mixed\\n\", gcid);\n-  fflush(stdout);\n-#endif\n@@ -166,4 +143,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record degenerated\\n\", gcid);\n-  fflush(stdout);\n-#endif\n@@ -181,4 +154,0 @@\n-#ifdef KELVIN_DEBUG_WO_LOGGING\n-  printf(\"GC(\" SIZE_FORMAT \"): record full\\n\", gcid);\n-  fflush(stdout);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -384,83 +384,0 @@\n-#undef KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-class ShenandoahNoDumpDetails : public ShenandoahHeapRegionClosure {\n-private:\n-  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n-public:\n-  ShenandoahNoDumpDetails() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override {\n-    _used += r->used();\n-    _garbage += r->garbage();\n-    _committed += r->is_committed() ? ShenandoahHeapRegion::region_size_bytes() : 0;\n-    if (r->is_humongous()) {\n-      _humongous_waste += r->free();\n-    }\n-    _regions++;\n-    \/\/ log_info(gc)(\"ShenandoahNoDumpDetails: adding \" SIZE_FORMAT \" for %s Region \" SIZE_FORMAT \", yielding: \" SIZE_FORMAT,\n-    \/\/              r->used(), (r->is_humongous() ? \"humongous\" : \"regular\"), r->index(), _used);\n-  }\n-\n-  size_t used() const { return _used; }\n-  size_t committed() const { return _committed; }\n-  size_t garbage() const { return _garbage; }\n-  size_t regions() const { return _regions; }\n-  size_t waste() const { return _humongous_waste; }\n-\n-  \/\/ span is the total memory affiliated with these stats (some of which is in use and other is available)\n-  size_t span() const { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n-};\n-\n-class ShenandoahDumpDetails : public ShenandoahHeapRegionClosure {\n-private:\n-  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n-public:\n-  ShenandoahDumpDetails() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override {\n-    _used += r->used();\n-    _garbage += r->garbage();\n-    _committed += r->is_committed() ? ShenandoahHeapRegion::region_size_bytes() : 0;\n-    if (r->is_humongous()) {\n-      _humongous_waste += r->free();\n-    }\n-    _regions++;\n-    log_info(gc)(\"ShenandoahDumpDetails: adding \" SIZE_FORMAT \" for %s Region \" SIZE_FORMAT \", yielding: \" SIZE_FORMAT,\n-            r->used(), (r->is_humongous() ? \"humongous\" : \"regular\"), r->index(), _used);\n-  }\n-\n-  size_t used() const { return _used; }\n-  size_t committed() const { return _committed; }\n-  size_t garbage() const { return _garbage; }\n-  size_t regions() const { return _regions; }\n-  size_t waste() const { return _humongous_waste; }\n-\n-  \/\/ span is the total memory affiliated with these stats (some of which is in use and other is available)\n-  size_t span() const { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n-};\n-\n-class ShenandoahDebugVerificationClosure: public ShenandoahHeapRegionClosure {\n- public:\n-  ShenandoahNoDumpDetails old;\n-  ShenandoahDumpDetails young;\n-  ShenandoahNoDumpDetails global;\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override {\n-    switch (r->affiliation()) {\n-      case FREE:\n-        return;\n-      case YOUNG_GENERATION:\n-        young.heap_region_do(r);\n-        global.heap_region_do(r);\n-        break;\n-      case OLD_GENERATION:\n-        old.heap_region_do(r);\n-        global.heap_region_do(r);\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-    }\n-  }\n-};\n-#endif\n-\n@@ -516,7 +433,0 @@\n-#ifdef KELVIN_DEBUG\n-    if (stats.span() > generation_capacity) {\n-      ShenandoahDebugVerificationClosure cl_debug;\n-      heap->heap_region_iterate(&cl_debug);\n-      log_info(gc)(\"cl_debug.used() is \" SIZE_FORMAT, cl_debug.young.used());\n-    }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":0,"deletions":90,"binary":false,"changes":90,"status":"modified"}]}