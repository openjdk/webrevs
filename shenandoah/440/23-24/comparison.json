{"files":[{"patch":"@@ -1540,1 +1540,1 @@\n-#define KELVIN_DEBUG\n+#undef KELVIN_DEBUG\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n+  size_t _used, _committed, _garbage, _regions, _humongous_waste, _trashed_regions;\n@@ -355,1 +355,2 @@\n-  ShenandoahCalculateRegionStatsClosure() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n+  ShenandoahCalculateRegionStatsClosure() :\n+      _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0), _trashed_regions(0) {};\n@@ -364,0 +365,3 @@\n+    if (r->is_trash()) {\n+      _trashed_regions++;\n+    }\n@@ -377,0 +381,1 @@\n+  size_t non_trashed_span() const { return (_regions - _trashed_regions) * ShenandoahHeapRegion::region_size_bytes(); }\n@@ -379,1 +384,1 @@\n-#define KELVIN_DEBUG\n+#undef KELVIN_DEBUG\n@@ -518,1 +523,1 @@\n-    guarantee(stats.span() <= generation_capacity,\n+    guarantee(stats.non_trashed_span() <= generation_capacity,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}