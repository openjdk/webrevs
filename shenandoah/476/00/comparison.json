{"files":[{"patch":"@@ -981,1 +981,1 @@\n-        r->make_young_maybe();\n+        r->make_affiliated_maybe();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -874,1 +874,1 @@\n-            r->oop_iterate_humongous_slice(&cl, false, start_of_range, assignment._chunk_size, true);\n+            r->oop_iterate_humongous_slice_all(&cl,start_of_range, assignment._chunk_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,2 +121,3 @@\n-\/\/ behavior previously performed as a side effect of make_regular_bypass().  This is used by Full GC\n-void ShenandoahHeapRegion::make_young_maybe() {\n+\/\/ behavior previously performed as a side effect of make_regular_bypass().  This is used by Full GC in non-generational\n+\/\/ modes to transition regions from FREE. Note that all non-free regions in single-generational modes are young.\n+void ShenandoahHeapRegion::make_affiliated_maybe() {\n@@ -140,1 +141,1 @@\n-     assert(false, \"Unexpected _state in make_young_maybe\");\n+     assert(false, \"Unexpected _state in make_affiliated_maybe\");\n@@ -456,3 +457,0 @@\n-  \/\/ Consider yielding to cancel\/preemption request after this many coalesce operations (skip marked, or coalesce free).\n-  const size_t preemption_stride = 128;\n-\n@@ -482,1 +480,0 @@\n-  size_t ops_before_preempt_check = preemption_stride;\n@@ -498,6 +495,3 @@\n-    if (cancellable && ops_before_preempt_check-- == 0) {\n-      if (heap->cancelled_gc()) {\n-        suspend_coalesce_and_fill(obj_addr);\n-        return false;\n-      }\n-      ops_before_preempt_check = preemption_stride;\n+    if (cancellable && heap->cancelled_gc()) {\n+      suspend_coalesce_and_fill(obj_addr);\n+      return false;\n@@ -511,4 +505,1 @@\n-\/\/ DO NOT CANCEL.  If this worker thread has accepted responsibility for scanning a particular range of addresses, it\n-\/\/ must finish the work before it can be cancelled.\n-void ShenandoahHeapRegion::oop_iterate_humongous_slice(OopIterateClosure* blk, bool dirty_only,\n-                                                       HeapWord* start, size_t words, bool write_table) {\n+size_t get_card_count(size_t words) {\n@@ -516,6 +507,0 @@\n-  assert(is_humongous(), \"only humongous region here\");\n-  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n-\n-  \/\/ Find head.\n-  ShenandoahHeapRegion* r = humongous_start_region();\n-  assert(r->is_humongous_start(), \"need humongous head here\");\n@@ -524,0 +509,6 @@\n+  return words \/ CardTable::card_size_in_words();\n+}\n+\n+void ShenandoahHeapRegion::oop_iterate_humongous_slice_dirty(OopIterateClosure* blk,\n+                                                             HeapWord* start, size_t words, bool write_table) const {\n+  assert(is_humongous(), \"only humongous region here\");\n@@ -525,0 +516,1 @@\n+  ShenandoahHeapRegion* r = humongous_start_region();\n@@ -526,0 +518,3 @@\n+  size_t num_cards = get_card_count(words);\n+\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -528,16 +523,4 @@\n-  size_t num_cards = words \/ CardTable::card_size_in_words();\n-\n-  if (dirty_only) {\n-    if (write_table) {\n-      while (num_cards-- > 0) {\n-        if (scanner->is_write_card_dirty(card_index++)) {\n-          obj->oop_iterate(blk, MemRegion(start, start + CardTable::card_size_in_words()));\n-        }\n-        start += CardTable::card_size_in_words();\n-      }\n-    } else {\n-      while (num_cards-- > 0) {\n-        if (scanner->is_card_dirty(card_index++)) {\n-          obj->oop_iterate(blk, MemRegion(start, start + CardTable::card_size_in_words()));\n-        }\n-        start += CardTable::card_size_in_words();\n+  if (write_table) {\n+    while (num_cards-- > 0) {\n+      if (scanner->is_write_card_dirty(card_index++)) {\n+        obj->oop_iterate(blk, MemRegion(start, start + CardTable::card_size_in_words()));\n@@ -545,0 +528,1 @@\n+      start += CardTable::card_size_in_words();\n@@ -547,2 +531,6 @@\n-    \/\/ Scan all data, regardless of whether cards are dirty\n-    obj->oop_iterate(blk, MemRegion(start, start + num_cards * CardTable::card_size_in_words()));\n+    while (num_cards-- > 0) {\n+      if (scanner->is_card_dirty(card_index++)) {\n+        obj->oop_iterate(blk, MemRegion(start, start + CardTable::card_size_in_words()));\n+      }\n+      start += CardTable::card_size_in_words();\n+    }\n@@ -552,0 +540,11 @@\n+void ShenandoahHeapRegion::oop_iterate_humongous_slice_all(OopIterateClosure* cl, HeapWord* start, size_t words) const {\n+  assert(is_humongous(), \"only humongous region here\");\n+\n+  ShenandoahHeapRegion* r = humongous_start_region();\n+  oop obj = cast_to_oop(r->bottom());\n+  size_t num_cards = get_card_count(words);\n+\n+  \/\/ Scan all data, regardless of whether cards are dirty\n+  obj->oop_iterate(cl, MemRegion(start, start + num_cards * CardTable::card_size_in_words()));\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":40,"deletions":41,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  void make_young_maybe();\n+  void make_affiliated_maybe();\n@@ -403,3 +403,4 @@\n-  \/\/ Coalesce contiguous spans of garbage objects by filling header and reregistering start locations with remembered set.\n-  \/\/ This is used by old-gen GC following concurrent marking to make old-gen HeapRegions parsable.  Return true iff\n-  \/\/ region is completely coalesced and filled.  Returns false if cancelled before task is complete.\n+  \/\/ Coalesce contiguous spans of garbage objects by filling header and registering start locations with remembered set.\n+  \/\/ This is used by old-gen GC following concurrent marking to make old-gen HeapRegions parsable. Old regions must be\n+  \/\/ parsable because the mark bitmap is not reliable during the concurrent old mark.\n+  \/\/ Return true iff region is completely coalesced and filled.  Returns false if cancelled before task is complete.\n@@ -411,1 +412,2 @@\n-  void oop_iterate_humongous_slice(OopIterateClosure* cl, bool dirty_only, HeapWord* start, size_t words, bool write_table);\n+  void oop_iterate_humongous_slice_dirty(OopIterateClosure* cl, HeapWord* start, size_t words, bool write_table) const;\n+  void oop_iterate_humongous_slice_all(OopIterateClosure* cl, HeapWord* start, size_t words) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  assert(is_aligned(alignment_in_bytes, HeapWordSize), \"Expect hea word alignment\");\n+  assert(is_aligned(alignment_in_bytes, HeapWordSize), \"Expect heap word alignment\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-  start_region->oop_iterate_humongous_slice(cl, true, first_cluster_addr, spanned_words, use_write_table);\n+  start_region->oop_iterate_humongous_slice_dirty(cl, first_cluster_addr, spanned_words, use_write_table);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}