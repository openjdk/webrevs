{"files":[{"patch":"@@ -55,4 +55,0 @@\n-    if (_heap->is_bitmap_slice_committed(r)) {\n-      _ctx->clear_bitmap(r);\n-    }\n-\n@@ -70,1 +66,1 @@\n-class ShenandoahResetBitmapTask : public ShenandoahHeapRegionClosure {\n+class ShenandoahResetBitmapTask : public WorkerTask {\n@@ -72,6 +68,2 @@\n-  ShenandoahHeap* _heap;\n-  ShenandoahMarkingContext* const _ctx;\n- public:\n-  ShenandoahResetBitmapTask() :\n-    _heap(ShenandoahHeap::heap()),\n-    _ctx(_heap->marking_context()) {}\n+    ShenandoahRegionIterator _regions;\n+    ShenandoahGeneration* _generation;\n@@ -79,3 +71,13 @@\n-  void heap_region_do(ShenandoahHeapRegion* region) {\n-    if (_heap->is_bitmap_slice_committed(region)) {\n-      _ctx->clear_bitmap(region);\n+ public:\n+  ShenandoahResetBitmapTask(ShenandoahGeneration* generation) :\n+    WorkerTask(\"Shenandoah Reset Bitmap\"), _generation(generation) {}\n+\n+  void work(uint worker_id) {\n+    ShenandoahHeapRegion* region = _regions.next();\n+    ShenandoahHeap* heap = ShenandoahHeap::heap();\n+    ShenandoahMarkingContext* const ctx = heap->marking_context();\n+    while (region != nullptr) {\n+      if (_generation->contains(region) && heap->is_bitmap_slice_committed(region)) {\n+        ctx->clear_bitmap(region);\n+      }\n+      region = _regions.next();\n@@ -84,2 +86,0 @@\n-\n-  bool is_thread_safe() { return true; }\n@@ -196,2 +196,2 @@\n-  ShenandoahResetBitmapTask task;\n-  parallel_heap_region_iterate(&task);\n+  ShenandoahResetBitmapTask task(this);\n+  heap->workers()->run_task(&task);\n@@ -230,2 +230,2 @@\n-  \/\/ Invalidate the marking context\n-  set_mark_incomplete();\n+\n+  reset_mark_bitmap();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}