{"files":[{"patch":"@@ -98,7 +98,1 @@\n-  LIR_Opr result =  BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n-\n-  if (ShenandoahCardBarrier && access.is_oop()) {\n-    post_barrier(access, access.resolved_addr(), new_value.result());\n-  }\n-\n-  return result;\n+  return BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -113,7 +113,1 @@\n-  LIR_Opr result = BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n-\n-  if (ShenandoahCardBarrier && access.is_oop()) {\n-    post_barrier(access, access.resolved_addr(), new_value.result());\n-  }\n-\n-  return result;\n+  return BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n@@ -68,1 +67,1 @@\n-        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::MARKING);\n@@ -631,1 +630,1 @@\n-  __ andi(tmp, tmp, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+  __ test_bit(tmp, tmp, ShenandoahHeap::MARKING_BITPOS);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -96,7 +96,1 @@\n-  LIR_Opr result = BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n-\n-  if (ShenandoahCardBarrier && access.is_oop()) {\n-    post_barrier(access, access.resolved_addr(), new_value.result());\n-  }\n-\n-  return result;\n+  return BarrierSetC1::atomic_cmpxchg_at_resolved(access, cmp_value, new_value);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -75,6 +75,1 @@\n-#if INCLUDE_SHENANDOAHGC\n-    if (strcmp(ShenandoahGCMode, \"generational\") == 0) {\n-      return Shenandoah;\n-    }\n-#endif\n-    return NA;\n+    return Shenandoah;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfiguration.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-#include \"runtime\/globals_extension.hpp\"\n+#include \"runtime\/globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/globals_extension.hpp\"\n@@ -32,1 +31,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahSpaceInfo.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @requires os.arch != \"riscv64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIfMinMax.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}