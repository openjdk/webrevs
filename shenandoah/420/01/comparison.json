{"files":[{"patch":"@@ -73,1 +73,0 @@\n-  auto heap = ShenandoahGenerationalHeap::heap();\n@@ -89,1 +88,1 @@\n-  const size_t old_evacuation_reserve = heap->old_generation()->get_evacuation_reserve();\n+  const size_t old_evacuation_reserve = _old_generation->get_evacuation_reserve();\n@@ -313,1 +312,0 @@\n-  size_t total_garbage = 0;\n@@ -321,1 +319,1 @@\n-    if (!_old_generation->contains(region)) {\n+    if (!region->is_old()) {\n@@ -327,1 +325,0 @@\n-    total_garbage += garbage;\n@@ -330,2 +327,5 @@\n-    \/\/ Only place regular regions into the candidate set\n-    if (region->is_regular()) {\n+    if (region->is_regular() || region->is_regular_pinned()) {\n+        \/\/ Only place regular or pinned regions with live data into the candidate set.\n+        \/\/ Pinned regions cannot be evacuated, but we are not actually choosing candidates\n+        \/\/ for the collection set here. That happens later during the next young GC cycle,\n+        \/\/ by which time, the pinned region may no longer be pinned.\n@@ -344,0 +344,3 @@\n+      \/\/ This will handle humongous start regions whether they are also pinned, or not.\n+      \/\/ If they are pinned, we expect them to hold live data, so they will not be\n+      \/\/ turned into immediate garbage.\n@@ -388,1 +391,0 @@\n-  size_t candidates_garbage = 0;\n@@ -394,0 +396,1 @@\n+  size_t candidates_garbage = 0;\n@@ -408,0 +411,2 @@\n+  \/\/ defrag_count represents regions that are placed into the old collection set in order to defragment the memory\n+  \/\/ that we try to \"reserve\" for humongous allocations.\n@@ -409,0 +414,2 @@\n+  size_t total_uncollected_old_regions = _last_old_region - _last_old_collection_candidate;\n+\n@@ -428,1 +435,0 @@\n-    size_t total_uncollected_old_regions = cand_idx - _last_old_collection_candidate;\n@@ -439,1 +445,2 @@\n-      assert (r->is_regular(), \"Only regular regions are in the candidate set\");\n+      assert(r->is_regular() || r->is_regular_pinned(), \"Region \" SIZE_FORMAT \" has wrong state for collection: %s\",\n+             r->index(), ShenandoahHeapRegion::region_state_to_string(r->state()));\n@@ -460,7 +467,6 @@\n-  log_info(gc)(\"Old-Gen Collectable Garbage: \" SIZE_FORMAT \"%s \"\n-               \"consolidated with free: \" SIZE_FORMAT \"%s, over \" SIZE_FORMAT \" regions (humongous defragmentation: \"\n-               SIZE_FORMAT \" regions), Old-Gen Immediate Garbage: \" SIZE_FORMAT \"%s over \" SIZE_FORMAT \" regions.\",\n-               byte_size_in_proper_unit(collectable_garbage), proper_unit_for_byte_size(collectable_garbage),\n-               byte_size_in_proper_unit(unfragmented),        proper_unit_for_byte_size(unfragmented),\n-               old_candidates, defrag_count,\n-               byte_size_in_proper_unit(immediate_garbage),   proper_unit_for_byte_size(immediate_garbage), immediate_regions);\n+  log_info(gc)(\"Old-Gen Collectable Garbage: \" PROPERFMT \" consolidated with free: \" PROPERFMT \", over \" SIZE_FORMAT \" regions\",\n+               PROPERFMTARGS(collectable_garbage), PROPERFMTARGS(unfragmented), old_candidates);\n+  log_info(gc)(\"Old-Gen Immediate Garbage: \" PROPERFMT \" over \" SIZE_FORMAT \" regions\",\n+              PROPERFMTARGS(immediate_garbage), immediate_regions);\n+  log_info(gc)(\"Old regions selected for defragmentation: \" SIZE_FORMAT, defrag_count);\n+  log_info(gc)(\"Old regions not selected: \" SIZE_FORMAT, total_uncollected_old_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+public:\n@@ -145,0 +146,1 @@\n+private:\n@@ -203,0 +205,2 @@\n+  bool is_regular_pinned()         const { return _state == _pinned; }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  void do_thread(Thread* thread) {\n+  void do_thread(Thread* thread) override {\n@@ -78,1 +78,1 @@\n-  void do_buffer(void** buffer, size_t size) {\n+  void do_buffer(void** buffer, size_t size) override {\n@@ -115,1 +115,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -147,1 +147,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -308,2 +308,0 @@\n-  log_debug(gc)(\"Starting (or resuming) coalesce-and-fill of old heap regions\");\n-\n@@ -317,0 +315,1 @@\n+  log_info(gc)(\"Starting (or resuming) coalesce-and-fill of \" UINT32_FORMAT \" old heap regions\", coalesce_and_fill_regions_count);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}