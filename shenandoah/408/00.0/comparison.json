{"files":[{"patch":"@@ -1738,0 +1738,15 @@\n+bool ShenandoahBarrierC2Support::merge_point_safe(Node* region) {\n+  for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n+    Node* n = region->fast_out(i);\n+    if (n->is_LoadStore()) {\n+      \/\/ Splitting a LoadStore node through phi, causes it to lose its SCMemProj: the split if code doesn't have support\n+      \/\/ for a LoadStore at the region the if is split through because that's not expected to happen (LoadStore nodes\n+      \/\/ should be between barrier nodes). It does however happen with Shenandoah though because barriers can get\n+      \/\/ expanded around a LoadStore node.\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+\n@@ -1742,1 +1757,1 @@\n-    if (phase->can_split_if(n_ctrl)) {\n+    if (phase->can_split_if(n_ctrl) && merge_point_safe(n_ctrl)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-template<ShenandoahGenerationType GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -142,1 +142,1 @@\n-template<ShenandoahGenerationType GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -160,1 +160,1 @@\n-template<ShenandoahGenerationType GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -174,1 +174,1 @@\n-template<ShenandoahGenerationType GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -726,1 +726,1 @@\n-  JFR_ONLY(ShenandoahJFRSupport::register_jfr_type_serializers());\n+  JFR_ONLY(ShenandoahJFRSupport::register_jfr_type_serializers();)\n@@ -1491,1 +1491,6 @@\n-    ShenandoahHeapLocker locker(lock());\n+\n+    \/\/ If we are dealing with mutator allocation, then we may need to block for safepoint.\n+    \/\/ We cannot block for safepoint for GC allocations, because there is a high chance\n+    \/\/ we are already running at safepoint or from stack watermark machinery, and we cannot\n+    \/\/ block again.\n+    ShenandoahHeapLocker locker(lock(), req.is_mutator_alloc());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,7 +121,0 @@\n-  \/\/ Check whether an element of a typeArrayOop with the given type must be\n-  \/\/ aligned 0 mod 8.  The typeArrayOop itself must be aligned at least this\n-  \/\/ strongly.\n-  public static boolean elementTypeShouldBeAligned(BasicType type) {\n-    return type == BasicType.T_DOUBLE || type == BasicType.T_LONG;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/Universe.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}