{"files":[{"patch":"@@ -34,3 +34,0 @@\n-#define BYTES_FORMAT    SIZE_FORMAT \"%s\"\n-#define FORMAT_BYTES(b) byte_size_in_proper_unit(b), proper_unit_for_byte_size(b)\n-\n@@ -90,2 +87,2 @@\n-  size_t old_evacuation_reserve = heap->old_generation()->get_evacuation_reserve();\n-  size_t old_evacuation_budget = (size_t) ((double) old_evacuation_reserve \/ ShenandoahOldEvacWaste);\n+  const size_t old_evacuation_reserve = heap->old_generation()->get_evacuation_reserve();\n+  const size_t old_evacuation_budget = (size_t) ((double) old_evacuation_reserve \/ ShenandoahOldEvacWaste);\n@@ -224,2 +221,2 @@\n-                   \"Old evacuation budget: \" BYTES_FORMAT \", Remaining evacuation budget: \" BYTES_FORMAT\n-                   \", Lost capacity: \" BYTES_FORMAT\n+                   \"Old evacuation budget: \" PROPERFMT \", Remaining evacuation budget: \" PROPERFMT\n+                   \", Lost capacity: \" PROPERFMT\n@@ -227,3 +224,3 @@\n-                   FORMAT_BYTES(old_evacuation_reserve),\n-                   FORMAT_BYTES(remaining_old_evacuation_budget),\n-                   FORMAT_BYTES(lost_evacuation_capacity),\n+                   PROPERFMTARGS(old_evacuation_reserve),\n+                   PROPERFMTARGS(remaining_old_evacuation_budget),\n+                   PROPERFMTARGS(lost_evacuation_capacity),\n@@ -312,0 +309,1 @@\n+  const size_t num_regions = heap->num_regions();\n@@ -314,1 +312,0 @@\n-  size_t num_regions = heap->num_regions();\n@@ -426,2 +423,2 @@\n-    size_t first_unselected_old_region = candidates[_last_old_collection_candidate]._region->index();\n-    size_t last_unselected_old_region = candidates[cand_idx - 1]._region->index();\n+    const size_t first_unselected_old_region = candidates[_last_old_collection_candidate]._region->index();\n+    const size_t last_unselected_old_region = candidates[cand_idx - 1]._region->index();\n@@ -433,1 +430,1 @@\n-    size_t bound_on_additional_regions = cand_idx \/ MAX_FRACTION_OF_HUMONGOUS_DEFRAG_REGIONS;\n+    const size_t bound_on_additional_regions = cand_idx \/ MAX_FRACTION_OF_HUMONGOUS_DEFRAG_REGIONS;\n@@ -441,2 +438,2 @@\n-      size_t region_garbage = candidates[_last_old_collection_candidate]._region->garbage();\n-      size_t region_free = r->free();\n+      const size_t region_garbage = candidates[_last_old_collection_candidate]._region->garbage();\n+      const size_t region_free = r->free();\n@@ -456,3 +453,3 @@\n-  size_t collectable_garbage = immediate_garbage + candidates_garbage;\n-  size_t old_candidates = _last_old_collection_candidate;\n-  size_t mixed_evac_live = old_candidates * region_size_bytes - (candidates_garbage + unfragmented);\n+  const size_t collectable_garbage = immediate_garbage + candidates_garbage;\n+  const size_t old_candidates = _last_old_collection_candidate;\n+  const size_t mixed_evac_live = old_candidates * region_size_bytes - (candidates_garbage + unfragmented);\n@@ -559,3 +556,3 @@\n-    size_t old_gen_capacity = _old_generation->max_capacity();\n-    size_t heap_capacity = heap->capacity();\n-    double percent = percent_of(old_gen_capacity, heap_capacity);\n+    const size_t old_gen_capacity = _old_generation->max_capacity();\n+    const size_t heap_capacity = heap->capacity();\n+    const double percent = percent_of(old_gen_capacity, heap_capacity);\n@@ -568,2 +565,2 @@\n-    size_t used = _old_generation->used();\n-    size_t used_regions_size = _old_generation->used_regions_size();\n+    const size_t used = _old_generation->used();\n+    const size_t used_regions_size = _old_generation->used_regions_size();\n@@ -572,1 +569,1 @@\n-    size_t used_regions = _old_generation->used_regions();\n+    const size_t used_regions = _old_generation->used_regions();\n@@ -578,2 +575,2 @@\n-    size_t span_of_old_regions = (last_old_region >= first_old_region)? last_old_region + 1 - first_old_region: 0;\n-    size_t fragmented_free = used_regions_size - used;\n+    const size_t span_of_old_regions = (last_old_region >= first_old_region)? last_old_region + 1 - first_old_region: 0;\n+    const size_t fragmented_free = used_regions_size - used;\n@@ -592,3 +589,4 @@\n-    size_t current_usage = _old_generation->used();\n-    size_t trigger_threshold = _old_generation->usage_trigger_threshold();\n-    size_t heap_size = heap->capacity();\n+    const size_t current_usage = _old_generation->used();\n+    const size_t trigger_threshold = _old_generation->usage_trigger_threshold();\n+    const size_t heap_size = heap->capacity();\n+    const size_t ignore_threshold = (ShenandoahIgnoreOldGrowthBelowPercentage * heap_size) \/ 100;\n@@ -596,1 +594,0 @@\n-    size_t ignore_threshold = (ShenandoahIgnoreOldGrowthBelowPercentage * heap_size) \/ 100;\n@@ -607,2 +604,2 @@\n-      size_t live_at_previous_old = _old_generation->get_live_bytes_after_last_mark();\n-      double percent_growth = percent_of(current_usage - live_at_previous_old, live_at_previous_old);\n+      const size_t live_at_previous_old = _old_generation->get_live_bytes_after_last_mark();\n+      const double percent_growth = percent_of(current_usage - live_at_previous_old, live_at_previous_old);\n@@ -658,4 +655,0 @@\n-\n-\n-#undef BYTES_FORMAT\n-#undef FORMAT_BYTES\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":30,"deletions":37,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-  size_t old_region_surplus = old_gen->get_region_surplus();\n-  size_t old_region_deficit = old_gen->get_region_deficit();\n+  const size_t old_region_surplus = old_gen->get_region_surplus();\n+  const size_t old_region_deficit = old_gen->get_region_deficit();\n@@ -137,1 +137,1 @@\n-    bool success = generation_sizer()->transfer_to_old(old_region_deficit);\n+    const bool success = generation_sizer()->transfer_to_old(old_region_deficit);\n@@ -193,1 +193,1 @@\n-    size_t max_evac_need = (size_t)\n+    const size_t max_evac_need = (size_t)\n@@ -197,1 +197,1 @@\n-    size_t old_fragmented_available =\n+    const size_t old_fragmented_available =\n@@ -259,4 +259,4 @@\n-  ShenandoahYoungGeneration* young_gen = heap->young_generation();\n-  ShenandoahOldGeneration* old_gen = heap->old_generation();\n-  size_t young_available = young_gen->available();\n-  size_t old_available = old_gen->available();\n+  ShenandoahYoungGeneration* const young_gen = heap->young_generation();\n+  ShenandoahOldGeneration* const old_gen = heap->old_generation();\n+  const size_t young_available = young_gen->available();\n+  const size_t old_available = old_gen->available();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-  size_t gc_id = heap->control_thread()->get_gc_id();\n+  const size_t gc_id = heap->control_thread()->get_gc_id();\n@@ -535,2 +535,2 @@\n-    PLAB* plab = ShenandoahThreadLocalData::plab(thread);\n-    size_t words_remaining = (plab == nullptr)? 0: plab->words_remaining();\n+    PLAB* const plab = ShenandoahThreadLocalData::plab(thread);\n+    const size_t words_remaining = (plab == nullptr)? 0: plab->words_remaining();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  \/\/ and in addition to the evacuation reserve for intra-generation evacuations.\n+  \/\/ and in addition to the evacuation reserve for intra-generation evacuations (ShenandoahGeneration::_evacuation_reserve).\n@@ -57,1 +57,3 @@\n-  \/\/ is therefore always accessed through atomic operations.\n+  \/\/ is therefore always accessed through atomic operations. This is increased when a\n+  \/\/ PLAB is allocated for promotions. The value is decreased by the amount of memory\n+  \/\/ remaining in a PLAB when it is retired.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}