{"files":[{"patch":"@@ -684,1 +684,3 @@\n-    \/\/ The collection set is chosen by prepare_regions_and_collection_set().\n+    \/\/ The collection set is chosen by prepare_regions_and_collection_set(). Additionally, certain parameters have been\n+    \/\/ established to govern the evacuation efforts that are about to begin.  Refer to comments on reserve members in\n+    \/\/ ShenandoahGeneration and ShenandoahOldGeneration for more detail.\n@@ -687,17 +689,0 @@\n-    \/\/ Upon return from prepare_regions_and_collection_set(), certain parameters have been established to govern the\n-    \/\/ evacuation efforts that are about to begin.  In particular:\n-    \/\/\n-    \/\/ heap->get_promoted_reserve() represents the amount of memory within old-gen's available memory that has\n-    \/\/   been set aside to hold objects promoted from young-gen memory.  This represents an estimated percentage\n-    \/\/   of the live young-gen memory within the collection set.  If there is more data ready to be promoted than\n-    \/\/   can fit within this reserve, the promotion of some objects will be deferred until a subsequent evacuation\n-    \/\/   pass.\n-    \/\/\n-    \/\/ heap->get_old_evac_reserve() represents the amount of memory within old-gen's available memory that has been\n-    \/\/  set aside to hold objects evacuated from the old-gen collection set.\n-    \/\/\n-    \/\/ heap->get_young_evac_reserve() represents the amount of memory within young-gen's available memory that has\n-    \/\/  been set aside to hold objects evacuated from the young-gen collection set.  Conservatively, this value\n-    \/\/  equals the entire amount of live young-gen memory within the collection set, even though some of this memory\n-    \/\/  will likely be promoted.\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-  \/\/ that the old regions are parseable.\n-  heap->old_generation()->set_parseable(true);\n+  \/\/ that the old regions are parsable.\n+  heap->old_generation()->set_parsable(true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -736,1 +736,1 @@\n-  old_generation()->set_parseable(true);\n+  old_generation()->set_parsable(true);\n@@ -1068,1 +1068,1 @@\n-  if (!old_generation()->is_parseable()) {\n+  if (!old_generation()->is_parsable()) {\n@@ -1075,1 +1075,1 @@\n-  if (!old_generation()->is_parseable()) {\n+  if (!old_generation()->is_parsable()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1925,1 +1925,1 @@\n-    old_generation()->set_parseable(false);\n+    old_generation()->set_parsable(false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-    _is_parseable(true),\n+    _is_parsable(true),\n@@ -711,3 +711,3 @@\n-void ShenandoahOldGeneration::set_parseable(bool parseable) {\n-  _is_parseable = parseable;\n-  if (_is_parseable) {\n+void ShenandoahOldGeneration::set_parsable(bool parsable) {\n+  _is_parsable = parsable;\n+  if (_is_parsable) {\n@@ -717,1 +717,1 @@\n-    \/\/ After unloading classes, we have made the old generation regions parseable.\n+    \/\/ After unloading classes, we have made the old generation regions parsable.\n@@ -728,1 +728,1 @@\n-        \/\/ that we would unload classes and make everything parseable. But, we know\n+        \/\/ that we would unload classes and make everything parsable. But, we know\n@@ -736,1 +736,1 @@\n-        \/\/ state. The full GC will then record that the old regions are parseable\n+        \/\/ state. The full GC will then record that the old regions are parsable\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+  \/\/ If there is more data ready to be promoted than can fit within this reserve, the promotion of some objects will be\n+  \/\/ deferred until a subsequent evacuation pass.\n@@ -84,1 +86,1 @@\n-  bool _is_parseable;\n+  bool _is_parsable;\n@@ -152,2 +154,2 @@\n-  bool is_parseable() const   { return _is_parseable; }\n-  void set_parseable(bool parseable);\n+  bool is_parsable() const   { return _is_parsable; }\n+  void set_parsable(bool parsable);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -880,1 +880,1 @@\n-\/\/ will work longer on those chunks.  Meanwhile, other worker will threads repeatedly accept and complete multiple\n+\/\/ will work longer on those chunks.  Meanwhile, other worker threads will repeatedly accept and complete multiple\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  assert(ShenandoahHeap::heap()->old_generation()->is_parseable(), \"Old generation regions must be parseable for remembered set scan\");\n+  assert(ShenandoahHeap::heap()->old_generation()->is_parsable(), \"Old generation regions must be parsable for remembered set scan\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}