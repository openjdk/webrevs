{"files":[{"patch":"@@ -248,3 +248,0 @@\n-      \/\/ TODO: if an objArray then only use mr, else just iterate over entire object;\n-      \/\/ that would avoid the special treatment of suffix below.\n-\n@@ -358,3 +355,0 @@\n-      \/\/ TODO: ysr : This will be called multiple times with same start_region, but different start_cluster_no.\n-      \/\/ Check that it does the right thing here, and doesn't do redundant work. Also see if the call API\/interface\n-      \/\/ can be simplified.\n@@ -363,8 +357,0 @@\n-      \/\/ TODO: ysr The start_of_range calculated above is discarded and may be calculated again in process_clusters().\n-      \/\/ See if the redundant and wasted calculations can be avoided, and if the call parameters can be cleaned up.\n-      \/\/ It almost sounds like this set of methods needs a working class to stash away some useful info that can be\n-      \/\/ efficiently passed around amongst these methods, as well as related state. Note that we can't use\n-      \/\/ ShenandoahScanRemembered as there seems to be only one instance of that object for the heap which is shared\n-      \/\/ by all workers. Note that there are also task methods which call these which may have per worker storage.\n-      \/\/ We need to be careful however that if the number of workers changes dynamically that state isn't sequestered\n-      \/\/ and become obsolete.\n@@ -376,1 +362,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}