{"files":[{"patch":"@@ -252,2 +252,3 @@\n-  \/\/ maximum_young_evacuation_reserve is upper bound on memory to be evacuated out of young\n-  const size_t maximum_young_evacuation_reserve = (young_generation->max_capacity() * ShenandoahEvacReserve) \/ 100;\n+  \/\/ maximum_young_evacuation_reserve is upper bound on memory to be evacuated into young Collector Reserve.  This is\n+  \/\/ bounded at the end of previous GC cycle, based on available memory and balancing of evacuation to old and young.\n+  const size_t maximum_young_evacuation_reserve = heap->get_young_evac_reserve();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1246,2 +1246,3 @@\n-\/\/ xfer_limit, and any excess is transferred to the young generation.\n-\/\/ xfer_limit is the maximum we're able to transfer from young to old.\n+\/\/ xfer_limit_mutator and planned collector reserves.  Any excess is transferred to the young generation.\n+\/\/ xfer_limit_mutator is the maximum we're able to transfer from the young mutator budget to old.  We may\n+\/\/ also xfer memory from the young Collector Reserve to the Old Collector Reserve.\n@@ -1249,1 +1250,1 @@\n-  size_t xfer_limit, size_t young_cset_regions, size_t old_cset_regions) {\n+  size_t mutator_xfer_limit, size_t young_cset_regions, size_t old_cset_regions) {\n@@ -1271,1 +1272,1 @@\n-  const size_t young_reserve = (young_generation()->max_capacity() * ShenandoahEvacReserve) \/ 100;\n+  size_t young_reserve = (young_generation()->max_capacity() * ShenandoahEvacReserve) \/ 100;\n@@ -1323,1 +1324,1 @@\n-    \/\/ We are running a deficit which we'd like to fill from young.\n+    \/\/ We are running a deficit which we will try to fill from young.\n@@ -1330,5 +1331,17 @@\n-    \/\/ Round down the regions we can transfer from young to old. If we're running short\n-    \/\/ on young-gen memory, we restrict the xfer. Old-gen collection activities will be\n-    \/\/ curtailed if the budget is restricted.\n-    const size_t max_old_region_xfer = xfer_limit \/ region_size_bytes;\n-    old_region_deficit = MIN2(old_region_deficit, max_old_region_xfer);\n+    const size_t max_mutator_xfer = mutator_xfer_limit \/ region_size_bytes;\n+    if (max_mutator_xfer < old_region_deficit) {\n+      const size_t collector_reserve_sum = young_reserve + max_old_reserve;\n+      const size_t intended_memory_for_old = (collector_reserve_sum * ShenandoahOldEvacRatioPercent) \/ 100;\n+      assert(intended_memory_for_old > max_old_reserve, \"Sanity\");\n+      const size_t old_shortfall = intended_memory_for_old - max_old_reserve;\n+      \/\/ round down\n+      size_t reserve_xfer_regions = old_shortfall \/ region_size_bytes;\n+      if (max_mutator_xfer + reserve_xfer_regions > old_region_deficit) {\n+        reserve_xfer_regions = old_region_deficit - max_mutator_xfer;\n+      }\n+      old_region_deficit = max_mutator_xfer + reserve_xfer_regions;\n+\n+      \/\/ Shrink the young evac reserve for subsequent GC\n+      young_reserve -= reserve_xfer_regions * region_size_bytes;\n+    }\n+    \/\/ else, max_mutator_transfer is large enough to support the known deficit\n@@ -1338,0 +1351,1 @@\n+  set_young_evac_reserve(young_reserve);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -856,1 +856,1 @@\n-  void adjust_generation_sizes_for_next_cycle(size_t old_xfer_limit, size_t young_cset_regions, size_t old_cset_regions);\n+  void adjust_generation_sizes_for_next_cycle(size_t mutator_xfer_limit, size_t young_cset_regions, size_t old_cset_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}