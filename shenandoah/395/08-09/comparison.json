{"files":[{"patch":"@@ -337,24 +337,6 @@\n-\n-  if (heap->mode()->is_generational()) {\n-    assert (_abbreviated || _generation->is_old(), \"Only rebuild free set for abbreviated and old-marking cycles\");\n-    \/\/ After concurrent old marking finishes and after an abbreviated cycle, we reclaim immediate garbage.\n-    \/\/ Further, we may also want to expand OLD in order to make room for anticipated promotions and\/or for mixed\n-    \/\/ evacuations.  Mixed evacuations are especially likely to following the end of OLD marking.\n-    {\n-      ShenandoahHeapLocker locker(heap->lock());\n-      ShenandoahGenerationalHeap* const gen_heap = ShenandoahGenerationalHeap::heap();\n-      size_t young_cset_regions, old_cset_regions;\n-      size_t first_old, last_old, num_old;\n-      size_t allocation_runway = heap->young_generation()->heuristics()->bytes_of_allocation_runway_before_gc_trigger(0);\n-      heap->free_set()->prepare_to_rebuild(young_cset_regions, old_cset_regions, first_old, last_old, num_old);\n-      assert((young_cset_regions == 0) && (old_cset_regions == 0),\n-             \"No ongoing evacuation after abbreviated or concurrent OLD marking cycle\");\n-      gen_heap->compute_old_generation_balance(allocation_runway, 0, 0);\n-      heap->free_set()->finish_rebuild(0, 0, num_old);\n-    }\n-  } else {\n-    assert (_abbreviated, \"Only rebuild free set for abbreviated\");\n-    \/\/ Rebuild free set after reclaiming immediate garbage\n-    ShenandoahHeapLocker locker(heap->lock());\n-    heap->free_set()->rebuild();\n-  }\n+  \/\/ After concurrent old marking finishes and after an abbreviated cycle, we reclaim immediate garbage.\n+  \/\/ Further, we may also want to expand OLD in order to make room for anticipated promotions and\/or for mixed\n+  \/\/ evacuations.  Mixed evacuations are especially likely to following the end of OLD marking.\n+  assert(_abbreviated || (heap->mode()->is_generational() && _generation->is_old()),\n+         \"Only rebuild free set for abbreviated and old-marking cycles\");\n+  heap->rebuild_free_set(true \/*concurrent*\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":6,"deletions":24,"binary":false,"changes":30,"status":"modified"}]}