{"files":[{"patch":"@@ -268,15 +268,15 @@\n-          }\n-          copy = allocate_from_plab(thread, size, is_promotion);\n-          if ((copy == nullptr) && (size < ShenandoahThreadLocalData::plab_size(thread)) &&\n-              ShenandoahThreadLocalData::plab_retries_enabled(thread)) {\n-            \/\/ PLAB allocation failed because we are bumping up against the limit on old evacuation reserve or because\n-            \/\/ the requested object does not fit within the current plab but the plab still has an \"abundance\" of memory,\n-            \/\/ where abundance is defined as >= ShenGenHeap::plab_min_size().  In the former case, we try shrinking the\n-            \/\/ desired PLAB size to the minimum and retry PLAB allocation to avoid cascading of shared memory allocations.\n-            if (plab->words_remaining() < plab_min_size()) {\n-              ShenandoahThreadLocalData::set_plab_size(thread, plab_min_size());\n-              copy = allocate_from_plab(thread, size, is_promotion);\n-              \/\/ If we still get nullptr, we'll try a shared allocation below.\n-              if (copy == nullptr) {\n-                \/\/ If retry fails, don't continue to retry until we have success (probably in next GC pass)\n-                ShenandoahThreadLocalData::disable_plab_retries(thread);\n+            copy = allocate_from_plab(thread, size, is_promotion);\n+            if ((copy == nullptr) && (size < ShenandoahThreadLocalData::plab_size(thread)) &&\n+                ShenandoahThreadLocalData::plab_retries_enabled(thread)) {\n+              \/\/ PLAB allocation failed because we are bumping up against the limit on old evacuation reserve or because\n+              \/\/ the requested object does not fit within the current plab but the plab still has an \"abundance\" of memory,\n+              \/\/ where abundance is defined as >= ShenGenHeap::plab_min_size().  In the former case, we try shrinking the\n+              \/\/ desired PLAB size to the minimum and retry PLAB allocation to avoid cascading of shared memory allocations.\n+              if (plab->words_remaining() < plab_min_size()) {\n+                ShenandoahThreadLocalData::set_plab_size(thread, plab_min_size());\n+                copy = allocate_from_plab(thread, size, is_promotion);\n+                \/\/ If we still get nullptr, we'll try a shared allocation below.\n+                if (copy == nullptr) {\n+                  \/\/ If retry fails, don't continue to retry until we have success (probably in next GC pass)\n+                  ShenandoahThreadLocalData::disable_plab_retries(thread);\n+                }\n@@ -284,0 +284,1 @@\n+              \/\/ else, copy still equals nullptr.  this causes shared allocation below, preserving this plab for future needs.\n@@ -285,1 +286,0 @@\n-            \/\/ else, copy still equals nullptr.  this causes shared allocation below, preserving this plab for future needs.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}