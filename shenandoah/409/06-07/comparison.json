{"files":[{"patch":"@@ -59,1 +59,1 @@\n-ShenandoahOldHeuristics::ShenandoahOldHeuristics(ShenandoahOldGeneration* generation) :\n+ShenandoahOldHeuristics::ShenandoahOldHeuristics(ShenandoahOldGeneration* generation, ShenandoahGenerationalHeap* gen_heap) :\n@@ -61,0 +61,2 @@\n+  _heap(gen_heap),\n+  _old_gen(generation),\n@@ -547,2 +549,1 @@\n-void ShenandoahOldHeuristics::trigger_collection_if_fragmented(ShenandoahGenerationalHeap* gen_heap, ShenandoahOldGeneration* old_gen,\n-                                                               size_t first_old_region, size_t last_old_region, size_t old_region_count, size_t num_regions) {\n+void ShenandoahOldHeuristics::trigger_collection_if_fragmented(size_t first_old_region, size_t last_old_region, size_t old_region_count, size_t num_regions) {\n@@ -563,1 +564,1 @@\n-    size_t old_available = old_gen->available();\n+    size_t old_available = _old_gen->available();\n@@ -565,1 +566,1 @@\n-    size_t old_unaffiliated_available = old_gen->free_unaffiliated_regions() * region_size_bytes;\n+    size_t old_unaffiliated_available = _old_gen->free_unaffiliated_regions() * region_size_bytes;\n@@ -578,1 +579,1 @@\n-        gen_heap->old_heuristics()->trigger_old_is_fragmented(old_density, first_old_region, last_old_region);\n+        trigger_old_is_fragmented(old_density, first_old_region, last_old_region);\n@@ -586,3 +587,3 @@\n-void ShenandoahOldHeuristics::trigger_collection_if_overgrown(ShenandoahGenerationalHeap* gen_heap, ShenandoahOldGeneration* old_gen) {\n-  size_t old_used = old_gen->used() + old_gen->get_humongous_waste();\n-  size_t trigger_threshold = old_gen->usage_trigger_threshold();\n+void ShenandoahOldHeuristics::trigger_collection_if_overgrown() {\n+  size_t old_used = _old_gen->used() + _old_gen->get_humongous_waste();\n+  size_t trigger_threshold = _old_gen->usage_trigger_threshold();\n@@ -590,1 +591,1 @@\n-  assert(old_used <= gen_heap->capacity(),\n+  assert(old_used <= _heap->capacity(),\n@@ -592,1 +593,1 @@\n-         old_gen->used(), old_gen->get_humongous_waste(), gen_heap->capacity());\n+         _old_gen->used(), _old_gen->get_humongous_waste(), _heap->capacity());\n@@ -594,1 +595,1 @@\n-    gen_heap->old_heuristics()->trigger_old_has_grown();\n+    trigger_old_has_grown();\n@@ -598,0 +599,6 @@\n+void ShenandoahOldHeuristics::trigger_maybe(size_t first_old_region, size_t last_old_region,\n+                                            size_t old_region_count, size_t num_regions) {\n+  trigger_collection_if_fragmented(first_old_region, last_old_region, old_region_count, num_regions);\n+  trigger_collection_if_overgrown();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -54,0 +54,3 @@\n+  ShenandoahGenerationalHeap* _heap;\n+  ShenandoahOldGeneration* _old_gen;\n+\n@@ -112,0 +115,11 @@\n+  inline void trigger_old_is_fragmented(double density, size_t first_old_index, size_t last_old_index) {\n+    _fragmentation_trigger = true;\n+    _fragmentation_density = density;\n+    _fragmentation_first_old_region = first_old_index;\n+    _fragmentation_last_old_region = last_old_index;\n+  }\n+  inline void trigger_old_has_grown() { _growth_trigger = true; }\n+\n+  void trigger_collection_if_fragmented(size_t first_old_region, size_t last_old_region, size_t old_region_count, size_t num_regions);\n+  void trigger_collection_if_overgrown();\n+\n@@ -117,1 +131,1 @@\n-  ShenandoahOldHeuristics(ShenandoahOldGeneration* generation);\n+  ShenandoahOldHeuristics(ShenandoahOldGeneration* generation, ShenandoahGenerationalHeap* gen_heap);\n@@ -164,8 +178,0 @@\n-  inline void trigger_old_is_fragmented(double density, size_t first_old_index, size_t last_old_index) {\n-    _fragmentation_trigger = true;\n-    _fragmentation_density = density;\n-    _fragmentation_first_old_region = first_old_index;\n-    _fragmentation_last_old_region = last_old_index;\n-  }\n-  void trigger_old_has_grown() { _growth_trigger = true; }\n-\n@@ -178,4 +184,0 @@\n-  void trigger_collection_if_fragmented(ShenandoahGenerationalHeap* gen_heap, ShenandoahOldGeneration* old_gen,\n-                                        size_t first_old_region, size_t last_old_region, size_t old_region_count, size_t num_regions);\n-  void trigger_collection_if_overgrown(ShenandoahGenerationalHeap* gen_heap, ShenandoahOldGeneration* old_gen);\n-\n@@ -184,0 +186,2 @@\n+  void trigger_maybe(size_t first_old_region, size_t last_old_region, size_t old_region_count, size_t num_regions);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2835,2 +2835,2 @@\n-    ShenandoahGenerationalHeap* gen_heap = (ShenandoahGenerationalHeap*) this;\n-    ShenandoahOldGeneration* old_gen = old_generation();\n+    ShenandoahGenerationalHeap* gen_heap = ShenandoahGenerationalHeap::heap();\n+    ShenandoahOldGeneration* old_gen = gen_heap->old_generation();\n@@ -2838,2 +2838,1 @@\n-    old_heuristics->trigger_collection_if_fragmented(gen_heap, old_gen, first_old_region, last_old_region, old_region_count, num_regions());\n-    old_heuristics->trigger_collection_if_overgrown(gen_heap, old_gen);\n+    old_heuristics->trigger_maybe(first_old_region, last_old_region, old_region_count, num_regions());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-  _old_heuristics = new ShenandoahOldHeuristics(this);\n+  _old_heuristics = new ShenandoahOldHeuristics(this, ShenandoahGenerationalHeap::heap());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}