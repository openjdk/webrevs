{"files":[{"patch":"@@ -549,0 +549,4 @@\n+\/\/ This triggers old-gen collection if the number of regions \"dedicated\" to old generation is much larger than\n+\/\/ is required to represent the memory currently used within the old generation.  This trigger looks specifically\n+\/\/ at density of the old-gen spanned region.  A different mechanism triggers old-gen GC if the total number of\n+\/\/ old-gen regions (regardless of how close the regions are to one another) grows beyond an anticipated growth target.\n@@ -552,1 +556,7 @@\n-    size_t old_region_span = (first_old_region <= last_old_region)? (last_old_region + 1 - first_old_region): 0;\n+    \/\/ Our intent is to pack old-gen memory into the highest-numbered regions of the heap.  Count all memory\n+    \/\/ above first_old_region as the \"span\" of old generation.\n+    size_t old_region_span = (first_old_region <= last_old_region)? (num_regions - first_old_region): 0;\n+    \/\/ Given that memory at the bottom of the heap is reserved to represent humongous objects, the number of\n+    \/\/ regions that old_gen is \"allowed\" to consume is less than the total heap size.  The restriction on allowed\n+    \/\/ span is not strictly enforced.  This is a heuristic designed to reduce the likelihood that a humongous\n+    \/\/ allocation request will require a STW full GC.\n@@ -568,0 +578,3 @@\n+    \/\/ Squaring old_span_percent in the denominator below allows more aggressive triggering when we are\n+    \/\/ above desired maximum span and less aggressive triggering when we are far below the desired\n+    \/\/ maximum span.\n@@ -570,0 +583,1 @@\n+      \/\/  old_span_percent is 110% and old_density is below 90.8%, or\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}