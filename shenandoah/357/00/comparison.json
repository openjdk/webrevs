{"files":[{"patch":"@@ -177,4 +177,0 @@\n-  } else {\n-    \/\/ We are going to skip evacuation and update refs because we reclaimed\n-    \/\/ sufficient amounts of immediate garbage.\n-    heap->shenandoah_policy()->record_abbreviated_cycle();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,4 +154,0 @@\n-  } else {\n-    \/\/ We are going to skip evacuation and update refs because we reclaimed\n-    \/\/ sufficient amounts of immediate garbage.\n-    heap->shenandoah_policy()->record_abbreviated_cycle();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,17 +34,18 @@\n-  _success_concurrent_gcs(0),\n-  _mixed_gcs(0),\n-  _abbreviated_gcs(0),\n-  _success_old_gcs(0),\n-  _interrupted_old_gcs(0),\n-  _success_degenerated_gcs(0),\n-  _success_full_gcs(0),\n-  _consecutive_young_gcs(0),\n-  _consecutive_degenerated_gcs(0),\n-  _alloc_failure_degenerated(0),\n-  _alloc_failure_degenerated_upgrade_to_full(0),\n-  _alloc_failure_full(0),\n-  _explicit_concurrent(0),\n-  _explicit_full(0),\n-  _implicit_concurrent(0),\n-  _implicit_full(0),\n-  _cycle_counter(0) {\n+        _success_concurrent_gcs(0),\n+        _mixed_gcs(0),\n+        _abbreviated_concurrent_gcs(0),\n+        _abbreviated_degenerated_gcs(0),\n+        _success_old_gcs(0),\n+        _interrupted_old_gcs(0),\n+        _success_degenerated_gcs(0),\n+        _success_full_gcs(0),\n+        _consecutive_young_gcs(0),\n+        _consecutive_degenerated_gcs(0),\n+        _alloc_failure_degenerated(0),\n+        _alloc_failure_degenerated_upgrade_to_full(0),\n+        _alloc_failure_full(0),\n+        _explicit_concurrent(0),\n+        _explicit_full(0),\n+        _implicit_concurrent(0),\n+        _implicit_full(0),\n+        _cycle_counter(0) {\n@@ -85,1 +86,0 @@\n-  ShenandoahHeap::heap()->record_upgrade_to_full();\n@@ -90,1 +90,3 @@\n-void ShenandoahCollectorPolicy::record_success_concurrent(bool is_young) {\n+void ShenandoahCollectorPolicy::record_success_concurrent(bool is_young, bool is_abbreviated) {\n+  update_young(is_young);\n+\n@@ -92,5 +94,0 @@\n-  if (is_young) {\n-    _consecutive_young_gcs++;\n-  } else {\n-    _consecutive_young_gcs = 0;\n-  }\n@@ -98,0 +95,3 @@\n+  if (is_abbreviated) {\n+    _abbreviated_concurrent_gcs++;\n+  }\n@@ -104,4 +104,0 @@\n-void ShenandoahCollectorPolicy::record_abbreviated_cycle() {\n-  _abbreviated_gcs++;\n-}\n-\n@@ -118,3 +114,7 @@\n-void ShenandoahCollectorPolicy::record_success_degenerated(bool is_young, bool is_upgraded_to_full) {\n-  if (!is_upgraded_to_full) {\n-    _consecutive_degenerated_gcs++;\n+void ShenandoahCollectorPolicy::record_success_degenerated(bool is_young, bool is_abbreviated) {\n+  update_young(is_young);\n+\n+  _success_degenerated_gcs++;\n+  _consecutive_degenerated_gcs++;\n+  if (is_abbreviated) {\n+    _abbreviated_degenerated_gcs++;\n@@ -122,0 +122,3 @@\n+}\n+\n+void ShenandoahCollectorPolicy::update_young(bool is_young) {\n@@ -127,1 +130,0 @@\n-  _success_degenerated_gcs++;\n@@ -160,3 +162,6 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Successful Concurrent GCs\",         _success_concurrent_gcs);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly\",           _explicit_concurrent);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly\",           _implicit_concurrent);\n+  size_t completed_gcs = _success_full_gcs + _success_degenerated_gcs + _success_concurrent_gcs + _success_old_gcs;\n+  out->print_cr(SIZE_FORMAT_W(5) \" Completed GCs\", completed_gcs);\n+  out->print_cr(SIZE_FORMAT_W(5) \" Successful Concurrent GCs (%.2f%%)\",  _success_concurrent_gcs, percent_of(_success_concurrent_gcs, completed_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\",    _explicit_concurrent, percent_of(_explicit_concurrent, _success_concurrent_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\",    _implicit_concurrent, percent_of(_implicit_concurrent, _success_concurrent_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",           _abbreviated_concurrent_gcs, percent_of(_abbreviated_concurrent_gcs, _success_concurrent_gcs));\n@@ -165,4 +170,6 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Completed Old GCs\",                 _success_old_gcs);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" mixed\",                        _mixed_gcs);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" interruptions\",                _interrupted_old_gcs);\n-  out->cr();\n+  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    out->print_cr(SIZE_FORMAT_W(5) \" Completed Old GCs (%.2f%%)\",        _success_old_gcs, percent_of(_success_old_gcs, completed_gcs));\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" mixed\",                        _mixed_gcs);\n+    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" interruptions\",                _interrupted_old_gcs);\n+    out->cr();\n+  }\n@@ -170,2 +177,5 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Degenerated GCs\",                   _success_degenerated_gcs);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure\", _alloc_failure_degenerated);\n+  size_t degenerated_gcs = _alloc_failure_degenerated_upgrade_to_full + _success_degenerated_gcs;\n+  out->print_cr(SIZE_FORMAT_W(5) \" Degenerated GCs (%.2f%%)\", degenerated_gcs, percent_of(degenerated_gcs, completed_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded to Full GC (%.2f%%)\",          _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, degenerated_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure (%.2f%%)\", _alloc_failure_degenerated, percent_of(_alloc_failure_degenerated, degenerated_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",                  _abbreviated_degenerated_gcs, percent_of(_abbreviated_degenerated_gcs, degenerated_gcs));\n@@ -178,4 +188,0 @@\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded to Full GC\",          _alloc_failure_degenerated_upgrade_to_full);\n-  out->cr();\n-\n-  out->print_cr(SIZE_FORMAT_W(5) \" Abbreviated GCs\",                   _abbreviated_gcs);\n@@ -184,5 +190,5 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Full GCs\",                          _success_full_gcs + _alloc_failure_degenerated_upgrade_to_full);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly\",           _explicit_full);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly\",           _implicit_full);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure\", _alloc_failure_full);\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded from Degenerated GC\", _alloc_failure_degenerated_upgrade_to_full);\n+  out->print_cr(SIZE_FORMAT_W(5) \" Full GCs (%.2f%%)\",                          _success_full_gcs, percent_of(_success_full_gcs, completed_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\",           _explicit_full, percent_of(_explicit_full, _success_full_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\",           _implicit_full, percent_of(_implicit_full, _success_full_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure (%.2f%%)\", _alloc_failure_full, percent_of(_alloc_failure_full, _success_full_gcs));\n+  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded from Degenerated GC (%.2f%%)\", _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, _success_full_gcs));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":56,"deletions":50,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-  size_t _abbreviated_gcs;\n+  size_t _abbreviated_concurrent_gcs;\n+  size_t _abbreviated_degenerated_gcs;\n@@ -74,2 +75,2 @@\n-  void record_abbreviated_cycle();\n-  void record_success_concurrent(bool is_young);\n+\n+  void record_success_concurrent(bool is_young, bool is_abbreviated);\n@@ -78,1 +79,1 @@\n-  void record_success_degenerated(bool is_young, bool is_upgraded_to_full);\n+  void record_success_degenerated(bool is_young, bool is_abbreviated);\n@@ -108,0 +109,2 @@\n+\n+  void update_young(bool is_young);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-  heap->start_conc_gc();\n@@ -1321,1 +1320,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Init Mark\", \" (unload classes)\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Init Mark\", \" (unload classes)\");\n@@ -1323,1 +1322,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Init Mark\", \"\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Init Mark\", \"\");\n@@ -1333,1 +1332,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Final Mark\", \" (unload classes)\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Final Mark\", \" (unload classes)\");\n@@ -1335,1 +1334,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Final Mark\", \"\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Final Mark\", \"\");\n@@ -1344,1 +1343,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Concurrent marking\", \" (unload classes)\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Concurrent marking\", \" (unload classes)\");\n@@ -1346,1 +1345,1 @@\n-    SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Concurrent marking\", \"\");\n+    SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Concurrent marking\", \"\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -303,4 +303,1 @@\n-          if (!service_stw_degenerated_cycle(cause, degen_point)) {\n-            \/\/ The degenerated GC was upgraded to a Full GC\n-            generation = select_global_generation();\n-          }\n+          service_stw_degenerated_cycle(cause, degen_point);\n@@ -362,1 +359,0 @@\n-        assert(generation == select_global_generation(), \"Only unload classes during GLOBAL cycle\");\n@@ -520,1 +516,0 @@\n-      ShenandoahGCSession session(cause, old_generation);\n@@ -716,1 +711,0 @@\n-          bool mixed_is_done = (heap->old_heuristics()->unprocessed_old_collection_candidates() == 0);\n@@ -791,3 +785,0 @@\n-\n-  heap->global_generation()->heuristics()->record_success_full();\n-  heap->shenandoah_policy()->record_success_full();\n@@ -796,1 +787,1 @@\n-bool ShenandoahControlThread::service_stw_degenerated_cycle(GCCause::Cause cause,\n+void ShenandoahControlThread::service_stw_degenerated_cycle(GCCause::Cause cause,\n@@ -814,1 +805,1 @@\n-    if (old->state() == ShenandoahOldGeneration::BOOTSTRAPPING && !gc.upgraded_to_full()) {\n+    if (old->state() == ShenandoahOldGeneration::BOOTSTRAPPING) {\n@@ -818,4 +809,0 @@\n-\n-  _degen_generation->heuristics()->record_success_degenerated();\n-  heap->shenandoah_policy()->record_success_degenerated(_degen_generation->is_young(), gc.upgraded_to_full());\n-  return !gc.upgraded_to_full();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -115,4 +115,1 @@\n-\n-  \/\/ Return true if degenerated cycle finishes normally.  Return false if the degenerated cycle transformed itself\n-  \/\/ into a full GC.\n-  bool service_stw_degenerated_cycle(GCCause::Cause cause, ShenandoahGC::ShenandoahDegenPoint point);\n+  void service_stw_degenerated_cycle(GCCause::Cause cause, ShenandoahGC::ShenandoahDegenPoint point);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  _upgraded_to_full(false) {\n+  _abbreviated(false) {\n@@ -268,0 +268,2 @@\n+      } else {\n+        _abbreviated = true;\n@@ -355,0 +357,2 @@\n+    heap->shenandoah_policy()->record_success_degenerated(_generation->is_young(), _abbreviated);\n+    _generation->heuristics()->record_success_degenerated();\n@@ -475,2 +479,0 @@\n-  ShenandoahFullGC full_gc;\n-  full_gc.op_full(GCCause::_shenandoah_upgrade_to_full_gc);\n@@ -481,2 +483,0 @@\n-  ShenandoahFullGC full_gc;\n-  full_gc.op_full(GCCause::_shenandoah_upgrade_to_full_gc);\n@@ -486,1 +486,0 @@\n-  const ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -489,1 +488,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (<UNSET>)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (<UNSET>)\");\n@@ -491,1 +490,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (Outside of Cycle)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (Outside of Cycle)\");\n@@ -493,1 +492,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (Roots)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (Roots)\");\n@@ -495,1 +494,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (Mark)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (Mark)\");\n@@ -497,1 +496,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (Evacuation)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (Evacuation)\");\n@@ -499,1 +498,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (Update Refs)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (Update Refs)\");\n@@ -502,1 +501,1 @@\n-      SHENANDOAH_RETURN_EVENT_MESSAGE(heap, _generation->type(), \"Pause Degenerated GC\", \" (?)\");\n+      SHENANDOAH_RETURN_EVENT_MESSAGE(_generation->type(), \"Pause Degenerated GC\", \" (?)\");\n@@ -509,1 +508,2 @@\n-  _upgraded_to_full = true;\n+  ShenandoahFullGC full_gc;\n+  full_gc.op_full(GCCause::_shenandoah_upgrade_to_full_gc);\n@@ -512,2 +512,2 @@\n-bool ShenandoahDegenGC::upgraded_to_full() {\n-  return _upgraded_to_full;\n+bool ShenandoahDegenGC::abbreviated() const {\n+  return _abbreviated;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  bool _upgraded_to_full;\n+  bool _abbreviated;\n@@ -43,1 +43,1 @@\n-  bool upgraded_to_full();\n+  bool abbreviated() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n@@ -178,0 +179,4 @@\n+    \/\/ Full GC should reset time since last gc for young and old heuristics\n+    heap->young_generation()->heuristics()->record_cycle_end();\n+    heap->old_generation()->heuristics()->record_cycle_end();\n+\n@@ -181,0 +186,3 @@\n+    assert(heap->old_generation()->state() == ShenandoahOldGeneration::WAITING_FOR_BOOTSTRAP,\n+           \"After full GC, old generation should be waiting for bootstrap.\");\n+\n@@ -204,0 +212,4 @@\n+\n+  \/\/ Regardless if progress was made, we record that we completed a \"successful\" full GC.\n+  heap->global_generation()->heuristics()->record_success_full();\n+  heap->shenandoah_policy()->record_success_full();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1019,1 +1019,1 @@\n-  ShenandoahHeap::heap()->shenandoah_policy()->record_success_concurrent(is_young());\n+  ShenandoahHeap::heap()->shenandoah_policy()->record_success_concurrent(is_young(), abbreviated);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -602,1 +602,0 @@\n-  _upgraded_to_full(false),\n@@ -2042,1 +2041,1 @@\n-  if (mode()->is_generational() && (generation->is_global() || upgraded_to_full())) {\n+  if (mode()->is_generational() && generation->is_global()) {\n@@ -2533,3 +2532,0 @@\n-    if (cause == GCCause::_shenandoah_upgrade_to_full_gc) {\n-      _upgraded_to_full = true;\n-    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -370,2 +370,0 @@\n-  bool _upgraded_to_full;\n-\n@@ -426,3 +424,0 @@\n-  inline bool upgraded_to_full() { return _upgraded_to_full; }\n-  inline void start_conc_gc() { _upgraded_to_full = false; }\n-  inline void record_upgrade_to_full() { _upgraded_to_full = true; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,14 +47,14 @@\n-#define SHENANDOAH_RETURN_EVENT_MESSAGE(heap, generation_type, prefix, postfix) \\\n-  switch (generation_type) {                                                    \\\n-    case GLOBAL_NON_GEN:                                                        \\\n-      return prefix \"\" postfix;                                                 \\\n-    case GLOBAL_GEN:                                                            \\\n-      return prefix \" (GLOBAL)\" postfix;                                        \\\n-    case YOUNG:                                                                 \\\n-      return prefix \" (YOUNG)\" postfix;                                         \\\n-    case OLD:                                                                   \\\n-      return prefix \" (OLD)\" postfix;                                           \\\n-    default:                                                                    \\\n-      ShouldNotReachHere();                                                     \\\n-      return prefix \" (?)\" postfix;                                             \\\n-  }                                                                             \\\n+#define SHENANDOAH_RETURN_EVENT_MESSAGE(generation_type, prefix, postfix) \\\n+  switch (generation_type) {                                              \\\n+    case GLOBAL_NON_GEN:                                                  \\\n+      return prefix \"\" postfix;                                           \\\n+    case GLOBAL_GEN:                                                      \\\n+      return prefix \" (GLOBAL)\" postfix;                                  \\\n+    case YOUNG:                                                           \\\n+      return prefix \" (YOUNG)\" postfix;                                   \\\n+    case OLD:                                                             \\\n+      return prefix \" (OLD)\" postfix;                                     \\\n+    default:                                                              \\\n+      ShouldNotReachHere();                                               \\\n+      return prefix \" (?)\" postfix;                                       \\\n+  }                                                                       \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}