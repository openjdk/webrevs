{"files":[{"patch":"@@ -249,1 +249,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n@@ -260,1 +260,1 @@\n-      log_info(gc)(\"Trigger: Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n+      log_trigger(\"Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n@@ -284,1 +284,1 @@\n-    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n+    log_trigger(\"Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n@@ -301,1 +301,1 @@\n-    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+    log_trigger(\"Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  log_info(gc)(\"Trigger: Start next cycle immediately\");\n+  log_trigger(\"Start next cycle immediately\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,3 +61,3 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n-                 byte_size_in_proper_unit(available),     proper_unit_for_byte_size(available),\n-                 byte_size_in_proper_unit(min_threshold), proper_unit_for_byte_size(min_threshold));\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+                byte_size_in_proper_unit(available),     proper_unit_for_byte_size(available),\n+                byte_size_in_proper_unit(min_threshold), proper_unit_for_byte_size(min_threshold));\n@@ -69,3 +69,3 @@\n-    log_info(gc)(\"Trigger: Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n-                 byte_size_in_proper_unit(bytes_allocated),           proper_unit_for_byte_size(bytes_allocated),\n-                 byte_size_in_proper_unit(threshold_bytes_allocated), proper_unit_for_byte_size(threshold_bytes_allocated));\n+    log_trigger(\"Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n+                byte_size_in_proper_unit(bytes_allocated),           proper_unit_for_byte_size(bytes_allocated),\n+                byte_size_in_proper_unit(threshold_bytes_allocated), proper_unit_for_byte_size(threshold_bytes_allocated));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-    log_info(gc)(\"Trigger: %s\", GCCause::to_string(GCCause::_metadata_GC_threshold));\n+    log_trigger(\"%s\", GCCause::to_string(GCCause::_metadata_GC_threshold));\n@@ -199,1 +199,1 @@\n-      log_info(gc)(\"Trigger: Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n+      log_trigger(\"Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n@@ -229,0 +229,18 @@\n+void ShenandoahHeuristics::log_trigger(const char* fmt, ...) {\n+  LogTarget(Info, gc) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    ls.print_raw(\"Trigger\", 7);\n+    if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+      ls.print(\" (%s)\", _space_info->name());\n+    }\n+    ls.print_raw(\": \", 2);\n+    va_list va;\n+    va_start(va, fmt);\n+    ls.vprint(fmt, va);\n+    va_end(va);\n+    ls.cr();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -218,0 +218,3 @@\n+\n+  \/\/ Format prefix and emit log message indicating a GC cycle hs been triggered\n+  void log_trigger(const char* fmt, ...) ATTRIBUTE_PRINTF(2, 3);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-    log_info(gc)(\"Trigger (OLD): Expansion failure, current size: \" SIZE_FORMAT \"%s which is %.1f%% of total heap size\",\n+    log_trigger(\"Expansion failure, current size: \" SIZE_FORMAT \"%s which is %.1f%% of total heap size\",\n@@ -657,5 +657,5 @@\n-    log_info(gc)(\"Trigger (OLD): Old has become fragmented: \"\n-                 SIZE_FORMAT \"%s available bytes spread between range spanned from \"\n-                 SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), density: %.1f%%\",\n-                 byte_size_in_proper_unit(fragmented_free), proper_unit_for_byte_size(fragmented_free),\n-                 first_old_region, last_old_region, span_of_old_regions, density * 100);\n+    log_trigger(\"Old has become fragmented: \"\n+                SIZE_FORMAT \"%s available bytes spread between range spanned from \"\n+                SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), density: %.1f%%\",\n+                byte_size_in_proper_unit(fragmented_free), proper_unit_for_byte_size(fragmented_free),\n+                first_old_region, last_old_region, span_of_old_regions, density * 100);\n@@ -676,1 +676,1 @@\n-      log_debug(gc)(\"Ignoring Trigger (OLD): Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\"\n+      log_debug(gc)(\"Ignoring Trigger: Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\"\n@@ -685,4 +685,4 @@\n-      log_info(gc)(\"Trigger (OLD): Old has overgrown, live at end of previous OLD marking: \"\n-                   SIZE_FORMAT \"%s, current usage: \" SIZE_FORMAT \"%s, percent growth: %.1f%%\",\n-                   byte_size_in_proper_unit(live_at_previous_old), proper_unit_for_byte_size(live_at_previous_old),\n-                   byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage), percent_growth);\n+      log_trigger(\"Old has overgrown, live at end of previous OLD marking: \"\n+                  SIZE_FORMAT \"%s, current usage: \" SIZE_FORMAT \"%s, percent growth: %.1f%%\",\n+                  byte_size_in_proper_unit(live_at_previous_old), proper_unit_for_byte_size(live_at_previous_old),\n+                  byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage), percent_growth);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,4 +143,1 @@\n-    log_info(gc)(\"Trigger (%s): expedite promotion of \" SIZE_FORMAT \"%s\",\n-                 _space_info->name(),\n-                 byte_size_in_proper_unit(promo_potential),\n-                 proper_unit_for_byte_size(promo_potential));\n+    log_trigger(\"Expedite promotion of \" PROPERFMT, PROPERFMTARGS(promo_potential));\n@@ -156,2 +153,1 @@\n-    log_info(gc)(\"Trigger (%s): expedite mixed evacuation of \" SIZE_FORMAT \" regions\",\n-                 _space_info->name(), mixed_candidates);\n+    log_trigger(\"Expedite mixed evacuation of \" SIZE_FORMAT \" regions\", mixed_candidates);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-      log_info(gc)(\"Trigger: Handle Allocation Failure\");\n+      heuristics->log_trigger(\"Handle Allocation Failure\");\n@@ -108,1 +108,1 @@\n-      log_info(gc)(\"Trigger: GC request (%s)\", GCCause::to_string(cause));\n+      heuristics->log_trigger(\"GC request (%s)\", GCCause::to_string(cause));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,2 +107,0 @@\n-      log_info(gc)(\"Trigger: Handle Allocation Failure\");\n-\n@@ -125,0 +123,2 @@\n+      heuristics->log_trigger(\"Handle Allocation Failure\");\n+\n@@ -139,1 +139,1 @@\n-      log_info(gc)(\"Trigger: GC request (%s)\", GCCause::to_string(cause));\n+      global_heuristics->log_trigger(\"GC request (%s)\", GCCause::to_string(cause));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,3 +66,2 @@\n-            output.shouldContain(\"Trigger: Time since last GC\");\n-            output.shouldContain(\"Concurrent reset (Young)\");\n-            output.shouldContain(\"Concurrent reset (Old)\");\n+            output.shouldContain(\"Trigger (Young): Time since last GC\");\n+            output.shouldContain(\"Trigger (Old): Time since last GC\");\n@@ -70,1 +69,2 @@\n-            output.shouldNotContain(\"Trigger: Time since last GC\");\n+            output.shouldNotContain(\"Trigger (Young): Time since last GC\");\n+            output.shouldNotContain(\"Trigger (Old): Time since last GC\");\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}