{"files":[{"patch":"@@ -145,2 +145,1 @@\n-    log_debug(gc, ergo)(\"%s Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n-                        _space_info->name(),\n+    log_debug(gc, ergo)(\"Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n@@ -241,3 +240,2 @@\n-  log_debug(gc)(\"should_start_gc (%s)? available: \" SIZE_FORMAT \", soft_max_capacity: \" SIZE_FORMAT\n-                \", allocated: \" SIZE_FORMAT,\n-                _space_info->name(), available, capacity, allocated);\n+  log_debug(gc)(\"should_start_gc? available: \" SIZE_FORMAT \", soft_max_capacity: \" SIZE_FORMAT\n+                \", allocated: \" SIZE_FORMAT, available, capacity, allocated);\n@@ -251,1 +249,1 @@\n-    log_info(gc)(\"Trigger (%s): Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\", _space_info->name(),\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n@@ -262,2 +260,2 @@\n-      log_info(gc)(\"Trigger (%s): Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n-                   _space_info->name(), _gc_times_learned + 1, max_learn,\n+      log_trigger(\"Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n+                   _gc_times_learned + 1, max_learn,\n@@ -283,2 +281,1 @@\n-  log_debug(gc)(\"%s: average GC time: %.2f ms, allocation rate: %.0f %s\/s\",\n-                _space_info->name(),\n+  log_debug(gc)(\"average GC time: %.2f ms, allocation rate: %.0f %s\/s\",\n@@ -287,1 +284,1 @@\n-    log_info(gc)(\"Trigger (%s): Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n+    log_trigger(\"Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n@@ -289,1 +286,1 @@\n-                 _space_info->name(), avg_cycle_time * 1000,\n+                 avg_cycle_time * 1000,\n@@ -304,2 +301,2 @@\n-    log_info(gc)(\"Trigger (%s): Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n-                 _space_info->name(), avg_cycle_time * 1000,\n+    log_trigger(\"Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+                 avg_cycle_time * 1000,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  log_info(gc)(\"Trigger: Start next cycle immediately\");\n+  log_trigger(\"Start next cycle immediately\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,3 +61,3 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n-                 byte_size_in_proper_unit(available),     proper_unit_for_byte_size(available),\n-                 byte_size_in_proper_unit(min_threshold), proper_unit_for_byte_size(min_threshold));\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+                byte_size_in_proper_unit(available),     proper_unit_for_byte_size(available),\n+                byte_size_in_proper_unit(min_threshold), proper_unit_for_byte_size(min_threshold));\n@@ -69,3 +69,3 @@\n-    log_info(gc)(\"Trigger: Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n-                 byte_size_in_proper_unit(bytes_allocated),           proper_unit_for_byte_size(bytes_allocated),\n-                 byte_size_in_proper_unit(threshold_bytes_allocated), proper_unit_for_byte_size(threshold_bytes_allocated));\n+    log_trigger(\"Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n+                byte_size_in_proper_unit(bytes_allocated),           proper_unit_for_byte_size(bytes_allocated),\n+                byte_size_in_proper_unit(threshold_bytes_allocated), proper_unit_for_byte_size(threshold_bytes_allocated));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-    log_info(gc)(\"Trigger: %s\", GCCause::to_string(GCCause::_metadata_GC_threshold));\n+    log_trigger(\"%s\", GCCause::to_string(GCCause::_metadata_GC_threshold));\n@@ -199,2 +199,2 @@\n-      log_info(gc)(\"Trigger (%s): Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n-                   _space_info->name(), last_time_ms, _guaranteed_gc_interval);\n+      log_trigger(\"Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n+                   last_time_ms, _guaranteed_gc_interval);\n@@ -229,0 +229,18 @@\n+void ShenandoahHeuristics::log_trigger(const char* fmt, ...) {\n+  LogTarget(Info, gc) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    ls.print_raw(\"Trigger\", 7);\n+    if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+      ls.print(\" (%s)\", _space_info->name());\n+    }\n+    ls.print_raw(\": \", 2);\n+    va_list va;\n+    va_start(va, fmt);\n+    ls.vprint(fmt, va);\n+    va_end(va);\n+    ls.cr();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -218,0 +218,3 @@\n+\n+  \/\/ Format prefix and emit log message indicating a GC cycle hs been triggered\n+  void log_trigger(const char* fmt, ...) ATTRIBUTE_PRINTF(2, 3);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    log_debug(gc)(\"Remaining \" UINT32_FORMAT \" old regions are being coalesced and filled\", unprocessed_old_collection_candidates());\n+    log_info(gc, ergo)(\"Remaining \" UINT32_FORMAT \" old regions are being coalesced and filled\", unprocessed_old_collection_candidates());\n@@ -125,3 +125,3 @@\n-  log_info(gc)(\"Choose old regions for mixed collection: old evacuation budget: \" SIZE_FORMAT \"%s, candidates: %u\",\n-               byte_size_in_proper_unit(old_evacuation_budget), proper_unit_for_byte_size(old_evacuation_budget),\n-               unprocessed_old_collection_candidates());\n+  log_debug(gc)(\"Choose old regions for mixed collection: old evacuation budget: \" SIZE_FORMAT \"%s, candidates: %u\",\n+                byte_size_in_proper_unit(old_evacuation_budget), proper_unit_for_byte_size(old_evacuation_budget),\n+                unprocessed_old_collection_candidates());\n@@ -212,4 +212,2 @@\n-    log_info(gc)(\"Old-gen piggyback evac (\" UINT32_FORMAT \" regions, evacuating \" SIZE_FORMAT \"%s, reclaiming: \" SIZE_FORMAT \"%s)\",\n-                 included_old_regions,\n-                 byte_size_in_proper_unit(evacuated_old_bytes), proper_unit_for_byte_size(evacuated_old_bytes),\n-                 byte_size_in_proper_unit(collected_old_bytes), proper_unit_for_byte_size(collected_old_bytes));\n+    log_info(gc, ergo)(\"Old-gen piggyback evac (\" UINT32_FORMAT \" regions, evacuating \" PROPERFMT \", reclaiming: \" PROPERFMT \")\",\n+                  included_old_regions, PROPERFMTARGS(evacuated_old_bytes), PROPERFMTARGS(collected_old_bytes));\n@@ -231,1 +229,1 @@\n-      log_info(gc)(\"All candidate regions \" UINT32_FORMAT \" are pinned\", unprocessed_old_collection_candidates());\n+      log_info(gc, ergo)(\"All candidate regions \" UINT32_FORMAT \" are pinned\", unprocessed_old_collection_candidates());\n@@ -234,8 +232,8 @@\n-      log_info(gc)(\"No regions selected for mixed collection. \"\n-                   \"Old evacuation budget: \" PROPERFMT \", Remaining evacuation budget: \" PROPERFMT\n-                   \", Lost capacity: \" PROPERFMT\n-                   \", Next candidate: \" UINT32_FORMAT \", Last candidate: \" UINT32_FORMAT,\n-                   PROPERFMTARGS(old_evacuation_reserve),\n-                   PROPERFMTARGS(remaining_old_evacuation_budget),\n-                   PROPERFMTARGS(lost_evacuation_capacity),\n-                   _next_old_collection_candidate, _last_old_collection_candidate);\n+      log_info(gc, ergo)(\"No regions selected for mixed collection. \"\n+                         \"Old evacuation budget: \" PROPERFMT \", Remaining evacuation budget: \" PROPERFMT\n+                         \", Lost capacity: \" PROPERFMT\n+                         \", Next candidate: \" UINT32_FORMAT \", Last candidate: \" UINT32_FORMAT,\n+                         PROPERFMTARGS(old_evacuation_reserve),\n+                         PROPERFMTARGS(remaining_old_evacuation_budget),\n+                         PROPERFMTARGS(lost_evacuation_capacity),\n+                         _next_old_collection_candidate, _last_old_collection_candidate);\n@@ -471,6 +469,6 @@\n-  log_info(gc)(\"Old-Gen Collectable Garbage: \" PROPERFMT \" consolidated with free: \" PROPERFMT \", over \" SIZE_FORMAT \" regions\",\n-               PROPERFMTARGS(collectable_garbage), PROPERFMTARGS(unfragmented), old_candidates);\n-  log_info(gc)(\"Old-Gen Immediate Garbage: \" PROPERFMT \" over \" SIZE_FORMAT \" regions\",\n-              PROPERFMTARGS(immediate_garbage), immediate_regions);\n-  log_info(gc)(\"Old regions selected for defragmentation: \" SIZE_FORMAT, defrag_count);\n-  log_info(gc)(\"Old regions not selected: \" SIZE_FORMAT, total_uncollected_old_regions);\n+  log_info(gc, ergo)(\"Old-Gen Collectable Garbage: \" PROPERFMT \" consolidated with free: \" PROPERFMT \", over \" SIZE_FORMAT \" regions\",\n+                     PROPERFMTARGS(collectable_garbage), PROPERFMTARGS(unfragmented), old_candidates);\n+  log_info(gc, ergo)(\"Old-Gen Immediate Garbage: \" PROPERFMT \" over \" SIZE_FORMAT \" regions\",\n+                     PROPERFMTARGS(immediate_garbage), immediate_regions);\n+  log_info(gc, ergo)(\"Old regions selected for defragmentation: \" SIZE_FORMAT, defrag_count);\n+  log_info(gc, ergo)(\"Old regions not selected: \" SIZE_FORMAT, total_uncollected_old_regions);\n@@ -640,1 +638,1 @@\n-    log_info(gc)(\"Trigger (OLD): Expansion failure, current size: \" SIZE_FORMAT \"%s which is %.1f%% of total heap size\",\n+    log_trigger(\"Expansion failure, current size: \" SIZE_FORMAT \"%s which is %.1f%% of total heap size\",\n@@ -659,5 +657,5 @@\n-    log_info(gc)(\"Trigger (OLD): Old has become fragmented: \"\n-                 SIZE_FORMAT \"%s available bytes spread between range spanned from \"\n-                 SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), density: %.1f%%\",\n-                 byte_size_in_proper_unit(fragmented_free), proper_unit_for_byte_size(fragmented_free),\n-                 first_old_region, last_old_region, span_of_old_regions, density * 100);\n+    log_trigger(\"Old has become fragmented: \"\n+                SIZE_FORMAT \"%s available bytes spread between range spanned from \"\n+                SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), density: %.1f%%\",\n+                byte_size_in_proper_unit(fragmented_free), proper_unit_for_byte_size(fragmented_free),\n+                first_old_region, last_old_region, span_of_old_regions, density * 100);\n@@ -678,1 +676,1 @@\n-      log_debug(gc)(\"Ignoring Trigger (OLD): Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\"\n+      log_debug(gc)(\"Ignoring Trigger: Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\"\n@@ -687,4 +685,4 @@\n-      log_info(gc)(\"Trigger (OLD): Old has overgrown, live at end of previous OLD marking: \"\n-                   SIZE_FORMAT \"%s, current usage: \" SIZE_FORMAT \"%s, percent growth: %.1f%%\",\n-                   byte_size_in_proper_unit(live_at_previous_old), proper_unit_for_byte_size(live_at_previous_old),\n-                   byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage), percent_growth);\n+      log_trigger(\"Old has overgrown, live at end of previous OLD marking: \"\n+                  SIZE_FORMAT \"%s, current usage: \" SIZE_FORMAT \"%s, percent growth: %.1f%%\",\n+                  byte_size_in_proper_unit(live_at_previous_old), proper_unit_for_byte_size(live_at_previous_old),\n+                  byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage), percent_growth);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,4 +143,1 @@\n-    log_info(gc)(\"Trigger (%s): expedite promotion of \" SIZE_FORMAT \"%s\",\n-                 _space_info->name(),\n-                 byte_size_in_proper_unit(promo_potential),\n-                 proper_unit_for_byte_size(promo_potential));\n+    log_trigger(\"Expedite promotion of \" PROPERFMT, PROPERFMTARGS(promo_potential));\n@@ -156,2 +153,1 @@\n-    log_info(gc)(\"Trigger (%s): expedite mixed evacuation of \" SIZE_FORMAT \" regions\",\n-                 _space_info->name(), mixed_candidates);\n+    log_trigger(\"Expedite mixed evacuation of \" SIZE_FORMAT \" regions\", mixed_candidates);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-    static const char* msg = \"Concurrent reset (OLD)\";\n+    static const char* msg = \"Concurrent reset (Old)\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-      log_info(gc)(\"Trigger: Handle Allocation Failure\");\n+      heuristics->log_trigger(\"Handle Allocation Failure\");\n@@ -108,1 +108,1 @@\n-      log_info(gc)(\"Trigger: GC request (%s)\", GCCause::to_string(cause));\n+      heuristics->log_trigger(\"GC request (%s)\", GCCause::to_string(cause));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1610,2 +1610,2 @@\n-      log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n-                   region_count, young_gen->name(), old_gen->name(), PROPERFMTARGS(new_old_capacity));\n+      log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                         region_count, young_gen->name(), old_gen->name(), PROPERFMTARGS(new_old_capacity));\n@@ -1614,2 +1614,2 @@\n-      log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n-                   region_count, old_gen->name(), young_gen->name(), PROPERFMTARGS(new_young_capacity));\n+      log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                         region_count, old_gen->name(), young_gen->name(), PROPERFMTARGS(new_young_capacity));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-    log_info(gc, ergo)(\"%s transferred \" SIZE_FORMAT \" excess regions to young before start of evacuation\",\n+    log_debug(gc, ergo)(\"%s transferred \" SIZE_FORMAT \" excess regions to young before start of evacuation\",\n@@ -636,1 +636,1 @@\n-    log_info(gc)(\"Preselected \" SIZE_FORMAT \" regions containing \" SIZE_FORMAT \" live bytes,\"\n+    log_debug(gc)(\"Preselected \" SIZE_FORMAT \" regions containing \" SIZE_FORMAT \" live bytes,\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,2 +141,2 @@\n-  log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n-          regions, src->name(), dst->name(), PROPERFMTARGS(new_size));\n+  log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                     regions, src->name(), dst->name(), PROPERFMTARGS(new_size));\n@@ -193,2 +193,2 @@\n-  log_info(gc)(\"Forcing transfer of \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n-          regions, young_gen->name(), old_gen->name(), PROPERFMTARGS(new_size));\n+  log_info(gc, ergo)(\"Forcing transfer of \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+                     regions, young_gen->name(), old_gen->name(), PROPERFMTARGS(new_size));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationSizer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,2 +107,0 @@\n-      log_info(gc)(\"Trigger: Handle Allocation Failure\");\n-\n@@ -125,0 +123,2 @@\n+      heuristics->log_trigger(\"Handle Allocation Failure\");\n+\n@@ -139,1 +139,1 @@\n-      log_info(gc)(\"Trigger: GC request (%s)\", GCCause::to_string(cause));\n+      global_heuristics->log_trigger(\"GC request (%s)\", GCCause::to_string(cause));\n@@ -406,1 +406,1 @@\n-      log_info(gc, ergo)(\"Start GC cycle (YOUNG)\");\n+      log_info(gc, ergo)(\"Start GC cycle (Young)\");\n@@ -411,1 +411,1 @@\n-      log_info(gc, ergo)(\"Start GC cycle (OLD)\");\n+      log_info(gc, ergo)(\"Start GC cycle (Old)\");\n@@ -416,1 +416,1 @@\n-      log_info(gc, ergo)(\"Start GC cycle (GLOBAL)\");\n+      log_info(gc, ergo)(\"Start GC cycle (Global)\");\n@@ -836,1 +836,1 @@\n-    log_info(gc)(\"Transition from: %s to: %s\", gc_mode_name(_mode), gc_mode_name(new_mode));\n+    log_debug(gc)(\"Transition from: %s to: %s\", gc_mode_name(_mode), gc_mode_name(new_mode));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  log_info(gc)(\"FullGC done: young usage: \" PROPERFMT \", old usage: \" PROPERFMT,\n+  log_info(gc, ergo)(\"FullGC done: young usage: \" PROPERFMT \", old usage: \" PROPERFMT,\n@@ -136,1 +136,1 @@\n-  LogTarget(Info, gc) lt;\n+  LogTarget(Debug, gc) lt;\n@@ -145,1 +145,1 @@\n-    log_info(gc)(\"Live bytes in old after STW mark: \" PROPERFMT, PROPERFMTARGS(live_bytes_in_old));\n+    log_debug(gc)(\"Live bytes in old after STW mark: \" PROPERFMT, PROPERFMTARGS(live_bytes_in_old));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  return \"GLOBAL\";\n+  return type() == NON_GEN ? \"\" : \"Global\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahSpaceInfo.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  log_info(gc)(\"Periodic Sample: GCU = %.3f%%, MU = %.3f%% during most recent %.1fs\", gcu * 100, mu * 100, time_delta);\n+  log_debug(gc)(\"Periodic Sample: GCU = %.3f%%, MU = %.3f%% during most recent %.1fs\", gcu * 100, mu * 100, time_delta);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-      log_info(gc)(\"Purged \" SIZE_FORMAT \" oops from old generation SATB buffers\", _trashed_oops);\n+      log_debug(gc)(\"Purged \" SIZE_FORMAT \" oops from old generation SATB buffers\", _trashed_oops);\n@@ -345,1 +345,1 @@\n-    log_info(gc)(\"Abandon SATB buffers\");\n+    log_debug(gc)(\"Abandon SATB buffers\");\n@@ -381,1 +381,1 @@\n-  static const char* msg = \"Coalescing and filling (OLD)\";\n+  static const char* msg = \"Coalescing and filling (Old)\";\n@@ -414,1 +414,1 @@\n-  log_info(gc)(\"Starting (or resuming) coalesce-and-fill of \" UINT32_FORMAT \" old heap regions\", coalesce_and_fill_regions_count);\n+  log_debug(gc)(\"Starting (or resuming) coalesce-and-fill of \" UINT32_FORMAT \" old heap regions\", coalesce_and_fill_regions_count);\n@@ -433,1 +433,1 @@\n-  log_info(gc)(\"Transfer SATB buffers\");\n+  log_debug(gc)(\"Transfer SATB buffers\");\n@@ -501,1 +501,1 @@\n-    log_info(gc)(\"Old generation transition from %s to %s\", state_name(_state), state_name(new_state));\n+    log_debug(gc)(\"Old generation transition from %s to %s\", state_name(_state), state_name(new_state));\n@@ -630,1 +630,1 @@\n-    log_info(gc)(\"Old gen evac failure.\");\n+    log_debug(gc)(\"Old gen evac failure.\");\n@@ -665,1 +665,1 @@\n-      log_info(gc, ergo)(\"Squelching additional promotion failure reports for current epoch\");\n+      log_debug(gc, ergo)(\"Squelching additional promotion failure reports for current epoch\");\n@@ -704,1 +704,1 @@\n-  log_info(gc)(\"After choosing global collection set, mixed candidates: \" UINT32_FORMAT \", coalescing candidates: \" SIZE_FORMAT,\n+  log_info(gc, ergo)(\"After choosing global collection set, mixed candidates: \" UINT32_FORMAT \", coalescing candidates: \" SIZE_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    return \"OLD\";\n+    return \"Old\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  log_info(gc)(\"%s: Done.\", name());\n+  log_debug(gc)(\"%s: Done.\", name());\n@@ -67,1 +67,1 @@\n-          log_info(gc)(\"Heuristics request for global (unload classes) accepted.\");\n+          log_debug(gc)(\"Heuristics request for global (unload classes) accepted.\");\n@@ -74,1 +74,1 @@\n-            log_info(gc)(\"Heuristics request for old collection accepted\");\n+            log_debug(gc)(\"Heuristics request for old collection accepted\");\n@@ -76,1 +76,1 @@\n-            log_info(gc)(\"Heuristics request for young collection accepted\");\n+            log_debug(gc)(\"Heuristics request for young collection accepted\");\n@@ -82,1 +82,1 @@\n-        log_info(gc)(\"Heuristics request to interrupt old for young collection accepted\");\n+        log_debug(gc)(\"Heuristics request to interrupt old for young collection accepted\");\n@@ -95,1 +95,1 @@\n-        log_info(gc)(\"Heuristics request for global collection accepted.\");\n+        log_debug(gc)(\"Heuristics request for global collection accepted.\");\n@@ -97,1 +97,1 @@\n-        log_info(gc)(\"Heuristics request for young collection accepted.\");\n+        log_debug(gc)(\"Heuristics request for young collection accepted.\");\n@@ -153,1 +153,1 @@\n-  log_info(gc)(\"%s: Stop requested.\", name());\n+  log_debug(gc)(\"%s: Stop requested.\", name());\n@@ -165,1 +165,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-      return prefix \" (NON-GENERATIONAL)\" postfix;                        \\\n+      return prefix postfix;                                              \\\n@@ -52,1 +52,1 @@\n-      return prefix \" (GLOBAL)\" postfix;                                  \\\n+      return prefix \" (Global)\" postfix;                                  \\\n@@ -54,1 +54,1 @@\n-      return prefix \" (YOUNG)\" postfix;                                   \\\n+      return prefix \" (Young)\" postfix;                                   \\\n@@ -56,1 +56,1 @@\n-      return prefix \" (OLD)\" postfix;                                     \\\n+      return prefix \" (Old)\" postfix;                                     \\\n@@ -59,1 +59,1 @@\n-      return prefix \" (UNKNOWN)\" postfix;                                 \\\n+      return prefix \" (Unknown)\" postfix;                                 \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    return \"YOUNG\";\n+    return \"Young\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            output.shouldContain(\"Trigger (GLOBAL): Time since last GC\");\n+            output.shouldContain(\"Trigger: Time since last GC\");\n@@ -53,1 +53,1 @@\n-            output.shouldNotContain(\"Trigger (GLOBAL): Time since last GC\");\n+            output.shouldNotContain(\"Trigger: Time since last GC\");\n@@ -66,2 +66,2 @@\n-            output.shouldContain(\"Trigger (YOUNG): Time since last GC\");\n-            output.shouldContain(\"Trigger (OLD): Time since last GC\");\n+            output.shouldContain(\"Trigger (Young): Time since last GC\");\n+            output.shouldContain(\"Trigger (Old): Time since last GC\");\n@@ -69,2 +69,2 @@\n-            output.shouldNotContain(\"Trigger (YOUNG): Time since last GC\");\n-            output.shouldNotContain(\"Trigger (OLD): Time since last GC\");\n+            output.shouldNotContain(\"Trigger (Young): Time since last GC\");\n+            output.shouldNotContain(\"Trigger (Old): Time since last GC\");\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        output.shouldContain(\"Trigger (OLD): Old has overgrown\");\n+        output.shouldContain(\"Trigger (Old): Old has overgrown\");\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestOldGrowthTriggers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}