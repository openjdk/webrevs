{"files":[{"patch":"@@ -145,2 +145,1 @@\n-    log_debug(gc, ergo)(\"%s Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n-                        _space_info->name(),\n+    log_debug(gc, ergo)(\"Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n@@ -241,3 +240,2 @@\n-  log_debug(gc)(\"should_start_gc %s? available: \" SIZE_FORMAT \", soft_max_capacity: \" SIZE_FORMAT\n-                \", allocated: \" SIZE_FORMAT,\n-                _space_info->name(), available, capacity, allocated);\n+  log_debug(gc)(\"should_start_gc? available: \" SIZE_FORMAT \", soft_max_capacity: \" SIZE_FORMAT\n+                \", allocated: \" SIZE_FORMAT, available, capacity, allocated);\n@@ -251,1 +249,1 @@\n-    log_info(gc)(\"Trigger %s: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\", _space_info->name(),\n+    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n@@ -262,2 +260,2 @@\n-      log_info(gc)(\"Trigger %s: Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n-                   _space_info->name(), _gc_times_learned + 1, max_learn,\n+      log_info(gc)(\"Trigger: Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n+                   _gc_times_learned + 1, max_learn,\n@@ -283,1 +281,1 @@\n-  log_debug(gc)(\"%s average GC time: %.2f ms, allocation rate: %.0f %s\/s\", _space_info->name(),\n+  log_debug(gc)(\"average GC time: %.2f ms, allocation rate: %.0f %s\/s\",\n@@ -286,1 +284,1 @@\n-    log_info(gc)(\"Trigger %s: Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n+    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s)\"\n@@ -288,1 +286,1 @@\n-                 _space_info->name(), avg_cycle_time * 1000,\n+                 avg_cycle_time * 1000,\n@@ -303,2 +301,2 @@\n-    log_info(gc)(\"Trigger %s: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n-                 _space_info->name(), avg_cycle_time * 1000,\n+    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+                 avg_cycle_time * 1000,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-      log_info(gc)(\"Trigger %s: Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n-                   _space_info->name(), last_time_ms, _guaranteed_gc_interval);\n+      log_info(gc)(\"Trigger: Time since last GC (%.0f ms) is larger than guaranteed interval (\" UINTX_FORMAT \" ms)\",\n+                   last_time_ms, _guaranteed_gc_interval);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-      return prefix \" \" postfix;                                          \\\n+      return prefix postfix;                                              \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}