{"files":[{"patch":"@@ -223,0 +223,7 @@\n+\/\/ Default implementation, for collectors that promote to old generation\n+\/\/ (when one exists) upon a full gc. Non-generational heaps should return\n+\/\/ true.\n+bool CollectedHeap::full_gc_promotes_to_old() const {\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -483,0 +483,5 @@\n+  \/\/ Return true if full gc promotes objects to the old generation.\n+  \/\/ Heaps that are non-generational should return true.\n+  \/\/ The default implementation returns true.\n+  virtual bool full_gc_promotes_to_old() const;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,0 +60,8 @@\n+  \/\/ --- Whitebox testing support\n+  \/\/\n+  bool full_gc_promotes_to_old() const override {\n+    \/\/ We don't necessarily promote objects to the old\n+    \/\/ generation upon a full gc.\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -466,0 +466,4 @@\n+WB_ENTRY(jboolean, WB_IsFullGCPromotesToOld(JNIEnv* env))\n+  return Universe::heap()->full_gc_promotes_to_old();\n+WB_END\n+\n@@ -2936,0 +2940,1 @@\n+  {CC\"isFullGCPromotesToOld\",     CC\"()Z\",            (void*)&WB_IsFullGCPromotesToOld},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,3 @@\n+            if (!WB.isFullGCPromotesToOld()) {\n+                break;\n+            }\n","filename":"test\/hotspot\/jtreg\/gc\/TestJNIWeak\/TestJNIWeak.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            if (!WB.isObjectInOldGen(o)) {\n+            if (WB.isFullGCPromotesToOld() && !WB.isObjectInOldGen(o)) {\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersTo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            if (!WB.isObjectInOldGen(o)) {\n+            if (WB.isFullGCPromotesToOld() && !WB.isObjectInOldGen(o)) {\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersToDuringConcMark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,6 +126,2 @@\n-            if (!WB.isObjectInOldGen(o)) {\n-                \/\/ This is just a warning, because failing would\n-                \/\/ be overspecifying for generational shenandoah,\n-                \/\/ which need not necessarily promote objects upon\n-                \/\/ a full GC.\n-                warn(\"object not promoted by full gc\");\n+            if (WB.isFullGCPromotesToOld() && !WB.isObjectInOldGen(o)) {\n+                fail(\"object not promoted by full gc\");\n@@ -158,4 +154,0 @@\n-    private static void warn(String msg) {\n-        System.out.println(\"Warning: \" + msg);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -565,0 +565,3 @@\n+  \/\/ Does a full gc promote objects to the old generation (if one exists)\n+  public native boolean isFullGCPromotesToOld();\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -91,0 +91,8 @@\n+\n+    \/**\n+     * @return true if a full gc invocation on this GC causes objects\n+     *         to be promoted to the old generation (when generational)\n+     *\/\n+    public static boolean isFullGCPromotesToOld() {\n+        return WB.isFullGCPromotesToOld();\n+    }\n","filename":"test\/lib\/jdk\/test\/whitebox\/gc\/GC.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}