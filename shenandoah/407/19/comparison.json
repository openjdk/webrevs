{"files":[{"patch":"@@ -173,0 +173,4 @@\n+\/\/ A stronger version of the above that checks that we are at a safepoint if the vm thread\n+#define shenandoah_assert_control_or_vm_thread_at_safepoint()                                                                                                               \\\n+                    assert(Thread::current() == ShenandoahHeap::heap()->control_thread() || (SafepointSynchronize::is_at_safepoint() && Thread::current()->is_VM_thread()), \\\n+                    \"Expected control thread, or vm thread at a safepoint\")\n@@ -176,0 +180,11 @@\n+\n+\/\/ Some limited sanity checking of the _gc_generation and _active_generation fields of ShenandoahHeap\n+#define shenandoah_assert_generations_reconciled()                                                             \\\n+                    if (SafepointSynchronize::is_at_safepoint()) {                                             \\\n+                      ShenandoahHeap* heap = ShenandoahHeap::heap();                                           \\\n+                      ShenandoahGeneration* ggen = heap->gc_generation();                                      \\\n+                      ShenandoahGeneration* agen = heap->active_generation();                                  \\\n+                      assert(agen == ggen, \"active_gen(%d) should be reconciled with gc_gen(%d)at safepoint\",  \\\n+                             agen->type(), ggen->type());                                                      \\\n+                    }\n+\n@@ -228,0 +243,1 @@\n+#define shenandoah_assert_control_or_vm_thread_at_safepoint()\n@@ -229,0 +245,1 @@\n+#define shenandoah_assert_generations_reconciled()                                                             \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -872,0 +872,1 @@\n+      shenandoah_assert_generations_reconciled();\n@@ -995,0 +996,3 @@\n+  \/\/ We can only toggle concurrent_weak_root_in_progress flag\n+  \/\/ at a safepoint, so that mutators see a consistent\n+  \/\/ value. The flag will be cleared at the next safepoint.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,5 @@\n-    ShenandoahReferenceProcessor* rp = heap->active_generation()->ref_processor();\n+    \/\/ Do not use active_generation() : we must use the gc_generation() set by\n+    \/\/ ShenandoahGCScope on the ControllerThread's stack; no safepoint may\n+    \/\/ intervene to update active_generation, so we can't\n+    \/\/ shenandoah_assert_generations_reconciled() here.\n+    ShenandoahReferenceProcessor* rp = heap->gc_generation()->ref_processor();\n@@ -114,1 +118,2 @@\n-    ShenandoahReferenceProcessor* rp = heap->active_generation()->ref_processor();\n+    ShenandoahReferenceProcessor* rp = heap->gc_generation()->ref_processor();\n+    shenandoah_assert_generations_reconciled();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+      ShenandoahGCSession session(cause, old_generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -134,1 +134,2 @@\n-    assert(_heap->active_generation()->is_mark_complete(), \"sanity\");\n+    assert(_heap->gc_generation()->is_mark_complete(), \"sanity\");\n+    shenandoah_assert_generations_reconciled();\n@@ -219,1 +220,2 @@\n-  assert(_heap->active_generation()->is_mark_complete(), \"sanity\");\n+  assert(_heap->gc_generation()->is_mark_complete(), \"sanity\");\n+  shenandoah_assert_generations_reconciled();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  heap->set_active_generation();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -198,0 +198,2 @@\n+  \/\/ gc_generation() can change asynchronously and should not be used here.\n+  assert(active_generation() != nullptr, \"Error\");\n@@ -781,0 +783,1 @@\n+\n@@ -796,1 +799,3 @@\n-    assert(_heap->active_generation()->is_mark_complete(), \"Expected complete marking\");\n+    ShenandoahGeneration* const gc_generation = _heap->gc_generation();\n+    shenandoah_assert_generations_reconciled();\n+    assert(gc_generation->is_mark_complete(), \"Expected complete marking\");\n@@ -810,1 +815,1 @@\n-          if (_heap->active_generation()->is_global()) {\n+          if (gc_generation->is_global()) {\n@@ -847,1 +852,1 @@\n-    if (!_heap->active_generation()->is_global()) {\n+    if (!gc_generation->is_global()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -535,0 +535,1 @@\n+  _active_generation(nullptr),\n@@ -1571,0 +1572,13 @@\n+void ShenandoahHeap::set_gc_generation(ShenandoahGeneration* generation) {\n+  shenandoah_assert_control_or_vm_thread_at_safepoint();\n+  _gc_generation = generation;\n+}\n+\n+\/\/ Active generation may only be set by the VM thread at a safepoint.\n+void ShenandoahHeap::set_active_generation() {\n+  assert(Thread::current()->is_VM_thread(), \"Only the VM Thread\");\n+  assert(SafepointSynchronize::is_at_safepoint(), \"Only at a safepoint!\");\n+  assert(_gc_generation != nullptr, \"Will set _active_generation to nullptr\");\n+  _active_generation = _gc_generation;\n+}\n+\n@@ -1574,0 +1588,3 @@\n+  assert(gc_cause()  == GCCause::_no_gc, \"Over-writing cause\");\n+  assert(_gc_generation == nullptr, \"Over-writing _gc_generation\");\n+\n@@ -1581,0 +1598,3 @@\n+  assert(gc_cause() != GCCause::_no_gc, \"cause wasn't set\");\n+  assert(_gc_generation != nullptr, \"_gc_generation wasn't set\");\n+\n@@ -1587,0 +1607,2 @@\n+\n+  set_gc_generation(nullptr);\n@@ -1939,1 +1961,2 @@\n-  active_generation()->ref_processor()->process_references(phase, workers(), false \/* concurrent *\/);\n+  shenandoah_assert_generations_reconciled();\n+  gc_generation()->ref_processor()->process_references(phase, workers(), false \/* concurrent *\/);\n@@ -1973,0 +1996,3 @@\n+  \/\/ Check that if concurrent weak root is set then active_gen isn't null\n+  assert(!is_concurrent_weak_root_in_progress() || active_generation() != nullptr, \"Error\");\n+  shenandoah_assert_generations_reconciled();\n@@ -2269,1 +2295,2 @@\n-    if (active_generation()->contains(r)) {\n+    shenandoah_assert_generations_reconciled();\n+    if (gc_generation()->contains(r)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -159,0 +159,3 @@\n+\n+  \/\/ Indicates the generation whose collection is in\n+  \/\/ proress\n@@ -161,0 +164,8 @@\n+  \/\/ This is set and cleared by only the VMThread\n+  \/\/ at each STW pause (safepoint) to the value seen in\n+  \/\/ _gc_generation. This allows the value to be always consistently\n+  \/\/ seen by all mutators as well as all GC worker threads.\n+  \/\/ In that sense, it's a stable snapshot of _gc_generation that is\n+  \/\/ updated at each STW pause associated with a ShenandoahVMOp.\n+  ShenandoahGeneration* _active_generation;\n+\n@@ -166,2 +177,2 @@\n-  ShenandoahGeneration* active_generation() const {\n-    \/\/ last or latest generation might be a better name here.\n+  ShenandoahGeneration* gc_generation() const {\n+    \/\/ value of _gc_generation field, see above\n@@ -171,2 +182,3 @@\n-  void set_gc_generation(ShenandoahGeneration* generation) {\n-    _gc_generation = generation;\n+  ShenandoahGeneration* active_generation() const {\n+    \/\/ value of _active_generation field, see above\n+    return _active_generation;\n@@ -175,0 +187,8 @@\n+  \/\/ Set the _gc_generation field\n+  void set_gc_generation(ShenandoahGeneration* generation);\n+\n+  \/\/ Copy the value in the _gc_generation field into\n+  \/\/ the _active_generation field: can only be called at\n+  \/\/ a safepoint by the VMThread.\n+  void set_active_generation();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -357,0 +357,1 @@\n+    assert(is_in(obj), \"Otherwise shouldn't return true below\");\n@@ -360,2 +361,4 @@\n-  if (active_generation() == nullptr) {\n-    \/\/ no collection is happening, only expect this to be called\n+  ShenandoahGeneration* const gen = active_generation();\n+\n+  if (gen == nullptr) {\n+    \/\/ no collection is happening: only expect this to be called\n@@ -367,3 +370,2 @@\n-  assert((active_generation() == (ShenandoahGeneration*) old_generation()) ||\n-         (active_generation() == (ShenandoahGeneration*) young_generation()) ||\n-         (active_generation() == global_generation()), \"Active generation must be old, young, or global\");\n+  assert(gen == (ShenandoahGeneration*)old_generation() || gen == (ShenandoahGeneration*)young_generation() || gen == (ShenandoahGeneration*)global_generation(),\n+         \"Active generation must be old, young, or global\");\n@@ -372,0 +374,4 @@\n+\n+  \/\/ No flickering!\n+  assert(gen == active_generation(), \"Race?\");\n+\n@@ -378,1 +384,1 @@\n-    return (active_generation() != (ShenandoahGeneration*) old_generation());\n+    return gen != (ShenandoahGeneration*)old_generation();\n@@ -381,1 +387,1 @@\n-    return (active_generation() != (ShenandoahGeneration*) young_generation());\n+    return gen != (ShenandoahGeneration*)young_generation();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -318,1 +318,2 @@\n-  assert(ShenandoahHeap::heap()->active_generation()->is_mark_complete(), \"Marking should be complete here.\");\n+  assert(ShenandoahHeap::heap()->gc_generation()->is_mark_complete(), \"Marking should be complete here.\");\n+  shenandoah_assert_generations_reconciled();\n@@ -468,1 +469,2 @@\n-  assert(heap->active_generation()->is_mark_complete(), \"sanity\");\n+  assert(heap->gc_generation()->is_mark_complete(), \"sanity\");\n+  shenandoah_assert_generations_reconciled();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -152,2 +152,6 @@\n-  assert(heap->active_generation()->type() == GENERATION, \"Sanity\");\n-  heap->active_generation()->ref_processor()->set_mark_closure(worker_id, cl);\n+  \/\/ Do not use active_generation() : we must use the gc_generation() set by\n+  \/\/ ShenandoahGCScope on the ControllerThread's stack; no safepoint may\n+  \/\/ intervene to update active_generation, so we can't\n+  \/\/ shenandoah_assert_generations_reconciled() here.\n+  assert(heap->gc_generation()->type() == GENERATION, \"Sanity: %d != %d\", heap->gc_generation()->type(), GENERATION);\n+  heap->gc_generation()->ref_processor()->set_mark_closure(worker_id, cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,1 +107,2 @@\n-  ShenandoahReferenceProcessor* rp = heap->active_generation()->ref_processor();\n+  ShenandoahReferenceProcessor* rp = heap->gc_generation()->ref_processor();\n+  shenandoah_assert_generations_reconciled();\n@@ -175,1 +176,2 @@\n-  ShenandoahReferenceProcessor* rp = ShenandoahHeap::heap()->active_generation()->ref_processor();\n+  ShenandoahReferenceProcessor* rp = ShenandoahHeap::heap()->gc_generation()->ref_processor();\n+  shenandoah_assert_generations_reconciled();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"logging\/log.hpp\"\n@@ -40,0 +41,1 @@\n+  log_active_generation(\"Prologue\");\n@@ -45,0 +47,1 @@\n+  log_active_generation(\"Epilogue\");\n@@ -51,0 +54,15 @@\n+void VM_ShenandoahOperation::log_active_generation(const char* prefix) {\n+  ShenandoahGeneration* agen = ShenandoahHeap::heap()->active_generation();\n+  ShenandoahGeneration* ggen = ShenandoahHeap::heap()->gc_generation();\n+  log_debug(gc, heap)(\"%s: active_generation is %s, gc_generation is %s\", prefix,\n+                      agen == nullptr ? \"nullptr\" : shenandoah_generation_name(agen->type()),\n+                      ggen == nullptr ? \"nullptr\" : shenandoah_generation_name(ggen->type()));\n+}\n+\n+void VM_ShenandoahOperation::set_active_generation() {\n+  if (evaluate_at_safepoint()) {\n+    assert(SafepointSynchronize::is_at_safepoint(), \"Error??\");\n+    ShenandoahHeap::heap()->set_active_generation();\n+  }\n+}\n+\n@@ -67,0 +85,1 @@\n+  set_active_generation();\n@@ -73,0 +92,1 @@\n+  set_active_generation();\n@@ -79,0 +99,1 @@\n+  set_active_generation();\n@@ -85,0 +106,1 @@\n+  set_active_generation();\n@@ -91,0 +113,1 @@\n+  set_active_generation();\n@@ -97,0 +120,1 @@\n+  set_active_generation();\n@@ -103,0 +127,1 @@\n+  set_active_generation();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\/\/   - VM_ShenandoahFinalRoots\n@@ -47,1 +48,3 @@\n-  uint         _gc_id;\n+  uint _gc_id;\n+\n+  void set_active_generation();\n@@ -51,0 +54,2 @@\n+\n+  void log_active_generation(const char* prefix);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-      _generation = _heap->active_generation();\n+      _generation = _heap->gc_generation();\n@@ -99,0 +99,1 @@\n+      shenandoah_assert_generations_reconciled();\n@@ -192,1 +193,1 @@\n-                (obj_reg->is_old() && _heap->active_generation()->is_young()),\n+                (obj_reg->is_old() && _heap->gc_generation()->is_young()),\n@@ -194,0 +195,1 @@\n+          shenandoah_assert_generations_reconciled();\n@@ -644,1 +646,1 @@\n-      _generation = _heap->active_generation();\n+      _generation = _heap->gc_generation();\n@@ -646,0 +648,1 @@\n+      shenandoah_assert_generations_reconciled();\n@@ -885,1 +888,1 @@\n-    generation = _heap->active_generation();\n+    generation = _heap->gc_generation();\n@@ -887,0 +890,1 @@\n+    shenandoah_assert_generations_reconciled();\n@@ -1359,1 +1363,2 @@\n-  if (old_generation->is_mark_complete() || _heap->active_generation()->is_global()) {\n+  shenandoah_assert_generations_reconciled();\n+  if (old_generation->is_mark_complete() || _heap->gc_generation()->is_global()) {\n@@ -1439,1 +1444,2 @@\n-  if (_heap->old_generation()->is_mark_complete() || _heap->active_generation()->is_global()) {\n+  shenandoah_assert_generations_reconciled();\n+  if (_heap->old_generation()->is_mark_complete() || _heap->gc_generation()->is_global()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}