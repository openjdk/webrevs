{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2017, 2018, Red Hat, Inc. All rights reserved.\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.stress.gclocker;\n+\n+\/*\n+ * @test id=default\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress Shenandoah's JNI handling by calling GetPrimitiveArrayCritical while concurrently filling up old gen.\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\/\n+\n+\/*\n+ * @test id=generational\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress Shenandoah's JNI handling by calling GetPrimitiveArrayCritical while concurrently filling up old gen.\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      -XX:+ShenandoahVerify\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\/\n+\n+\/*\n+ * @test id=aggressive\n+ * @library \/\n+ * @requires vm.gc.Shenandoah\n+ * @summary Stress Shenandoah's JNI handling by calling GetPrimitiveArrayCritical while concurrently filling up old gen.\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahOOMDuringEvacALot\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\n+ * @run main\/native\/othervm\/timeout=200 -Xlog:gc*=info -Xms1500m -Xmx1500m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahAllocFailureALot\n+ *      gc.stress.gclocker.TestGCLockerWithShenandoah\n+ *\/\n+public class TestGCLockerWithShenandoah {\n+    public static void main(String[] args) {\n+        String[] testArgs = {\"2\", \"Shenandoah\", \"0\"};\n+        TestGCLocker.main(testArgs);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestGCLockerWithShenandoah.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}