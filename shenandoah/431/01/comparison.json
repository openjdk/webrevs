{"files":[{"patch":"@@ -642,1 +642,1 @@\n-      heap->cancel_old_gc();\n+      heap->old_generation()->cancel_gc();\n@@ -648,1 +648,1 @@\n-      heap->transfer_old_pointers_from_satb();\n+      heap->old_generation()->transfer_pointers_from_satb();\n@@ -1218,0 +1218,7 @@\n+  \/\/ If we are running in generational mode and this is an aging cycle, this will also age active\n+  \/\/ regions that haven't been used for allocation.\n+  heap->update_heap_region_states(true \/*concurrent*\/);\n+\n+  heap->set_update_refs_in_progress(false);\n+  heap->set_has_forwarded_objects(false);\n+\n@@ -1233,2 +1240,1 @@\n-    heap->transfer_old_pointers_from_satb();\n-  }\n+    heap->old_generation()->transfer_pointers_from_satb();\n@@ -1236,8 +1242,4 @@\n-  heap->update_heap_region_states(true \/*concurrent*\/);\n-\n-  heap->set_update_refs_in_progress(false);\n-  heap->set_has_forwarded_objects(false);\n-\n-  \/\/ Aging_cycle is only relevant during evacuation cycle for individual objects and during final mark for\n-  \/\/ entire regions.  Both of these relevant operations occur before final update refs.\n-  heap->set_aging_cycle(false);\n+    \/\/ Aging_cycle is only relevant during evacuation cycle for individual objects and during final mark for\n+    \/\/ entire regions.  Both of these relevant operations occur before final update refs.\n+    ShenandoahGenerationalHeap::heap()->set_aging_cycle(false);\n+  }\n@@ -1267,1 +1269,1 @@\n-      heap->transfer_old_pointers_from_satb();\n+      heap->old_generation()->transfer_pointers_from_satb();\n@@ -1278,1 +1280,1 @@\n-        } else if (heap->is_aging_cycle()) {\n+        } else if (ShenandoahGenerationalHeap::heap()->is_aging_cycle()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-          heap->transfer_old_pointers_from_satb();\n+          heap->old_generation()->transfer_pointers_from_satb();\n@@ -287,1 +287,1 @@\n-        heap->transfer_old_pointers_from_satb();\n+        heap->old_generation()->transfer_pointers_from_satb();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* const heap = ShenandoahGenerationalHeap::heap();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  heap->cancel_old_gc();\n+  heap->old_generation()->cancel_gc();\n@@ -190,1 +190,1 @@\n-        _heap(ShenandoahHeap::heap()),\n+        _heap(ShenandoahGenerationalHeap::heap()),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,3 +90,3 @@\n-  PreservedMarks*          const _preserved_marks;\n-  ShenandoahHeap*          const _heap;\n-  uint                           _tenuring_threshold;\n+  PreservedMarks*             const _preserved_marks;\n+  ShenandoahGenerationalHeap* const _heap;\n+  uint                              _tenuring_threshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -713,1 +713,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,9 @@\n+  ShenandoahSharedFlag  _is_aging_cycle;\n+  void set_aging_cycle(bool cond) {\n+    _is_aging_cycle.set_cond(cond);\n+  }\n+\n+  inline bool is_aging_cycle() const {\n+    return _is_aging_cycle.is_set();\n+  }\n+\n@@ -94,0 +103,1 @@\n+  \/\/ Makes old regions parsable\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -973,20 +973,0 @@\n-void ShenandoahHeap::cancel_old_gc() {\n-  shenandoah_assert_safepoint();\n-  assert(old_generation() != nullptr, \"Should only have mixed collections in generation mode.\");\n-  if (old_generation()->is_idle()) {\n-#ifdef ASSERT\n-    old_generation()->validate_waiting_for_bootstrap();\n-#endif\n-  } else {\n-    log_info(gc)(\"Terminating old gc cycle.\");\n-    \/\/ Stop marking\n-    old_generation()->cancel_marking();\n-    \/\/ Stop tracking old regions\n-    old_generation()->abandon_collection_candidates();\n-    \/\/ Remove old generation access to young generation mark queues\n-    young_generation()->set_old_gen_task_queues(nullptr);\n-    \/\/ Transition to IDLE now.\n-    old_generation()->transition_to(ShenandoahOldGeneration::WAITING_FOR_BOOTSTRAP);\n-  }\n-}\n-\n@@ -2041,4 +2021,0 @@\n-void ShenandoahHeap::set_aging_cycle(bool in_progress) {\n-  _is_aging_cycle.set_cond(in_progress);\n-}\n-\n@@ -2608,1 +2584,1 @@\n-      } else if (ShenandoahHeap::heap()->is_aging_cycle()) {\n+      } else if (ShenandoahGenerationalHeap::heap()->is_aging_cycle()) {\n@@ -2887,4 +2863,0 @@\n-void ShenandoahHeap::transfer_old_pointers_from_satb() {\n-  _old_generation->transfer_pointers_from_satb();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -382,2 +382,0 @@\n-  void set_aging_cycle(bool cond);\n-\n@@ -401,1 +399,0 @@\n-  inline bool is_aging_cycle() const;\n@@ -539,1 +536,0 @@\n-  ShenandoahSharedFlag  _is_aging_cycle;\n@@ -742,1 +738,0 @@\n-  void cancel_old_gc();\n@@ -774,2 +769,0 @@\n-  void transfer_old_pointers_from_satb();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -510,4 +510,0 @@\n-inline bool ShenandoahHeap::is_aging_cycle() const {\n-  return _is_aging_cycle.is_set();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -341,0 +341,19 @@\n+void ShenandoahOldGeneration::cancel_gc() {\n+  shenandoah_assert_safepoint();\n+  if (is_idle()) {\n+#ifdef ASSERT\n+    validate_waiting_for_bootstrap();\n+#endif\n+  } else {\n+    log_info(gc)(\"Terminating old gc cycle.\");\n+    \/\/ Stop marking\n+    cancel_marking();\n+    \/\/ Stop tracking old regions\n+    abandon_collection_candidates();\n+    \/\/ Remove old generation access to young generation mark queues\n+    ShenandoahHeap::heap()->young_generation()->set_old_gen_task_queues(nullptr);\n+    \/\/ Transition to IDLE now.\n+    transition_to(ShenandoahOldGeneration::WAITING_FOR_BOOTSTRAP);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -196,0 +196,3 @@\n+  \/\/ Cancels old gc and transitions to the idle state\n+  void cancel_gc();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}