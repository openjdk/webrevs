{"files":[{"patch":"@@ -252,2 +252,1 @@\n-  if (!ClassUnloading) return false;\n-  return true;\n+  return ClassUnloading;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -157,0 +157,3 @@\n+\n+  \/\/ This indicates whether or not the current cycle should unload classes.\n+  \/\/ It does NOT indicate that a cycle should be started.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-      if (should_unload_classes()) {\n+      if (should_start_metaspace_gc()) {\n@@ -182,1 +182,1 @@\n-bool ShenandoahRegulatorThread::should_unload_classes() {\n+bool ShenandoahRegulatorThread::should_start_metaspace_gc() {\n@@ -185,2 +185,5 @@\n-  \/\/ global cycle.\n-  return _global_heuristics->has_metaspace_oom();\n+  \/\/ global cycle. But, we check other prerequisites before starting a gc that won't\n+  \/\/ unload anything.\n+  return ClassUnloadingWithConcurrentMark\n+      && _global_heuristics->can_unload_classes()\n+      && _global_heuristics->has_metaspace_oom();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -80,1 +80,3 @@\n-  bool should_unload_classes();\n+  \/\/ The generational mode can only unload classes in a global cycle. The regulator\n+  \/\/ thread itself will trigger a global cycle if metaspace is out of memory.\n+  bool should_start_metaspace_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}