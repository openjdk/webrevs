{"files":[{"patch":"@@ -79,1 +79,1 @@\n-        if (_young_heuristics->should_start_gc()) {\n+        if (should_start_young()) {\n@@ -97,0 +97,10 @@\n+bool ShenandoahRegulatorThread::should_start_young() {\n+  if (ShenandoahMinimumOldMarkTimeMs > 0 && ShenandoahHeap::heap()->is_concurrent_old_mark_in_progress()) {\n+    size_t old_mark_elapsed = size_t(_old_heuristics->elapsed_cycle_time() * 1000);\n+    if (old_mark_elapsed < ShenandoahMinimumOldMarkTimeMs) {\n+      return false;\n+    }\n+  }\n+  return _young_heuristics->should_start_gc();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,0 +90,2 @@\n+\n+  bool should_start_young();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -599,0 +599,7 @@\n+                                                                            \\\n+  product(uintx, ShenandoahMinimumOldMarkTimeMs, 100, EXPERIMENTAL,         \\\n+         \"Minimum amount of time in milliseconds to run old marking \"       \\\n+         \"before a young collection is allowed to run. This is intended \"   \\\n+         \"to prevent starvation of the old collector. Setting this to \"     \\\n+         \"0 will allow back to back young collections to run during old \"   \\\n+         \"marking.\")                                                        \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}