{"files":[{"patch":"@@ -39,3 +39,0 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n@@ -43,1 +40,1 @@\n-#include \"gc\/shenandoah\/shenandoahRootProcessor.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahPacer.inline.hpp\"\n@@ -47,2 +44,0 @@\n-#include \"gc\/shenandoah\/shenandoahVMOperations.hpp\"\n-#include \"gc\/shenandoah\/shenandoahWorkerPolicy.hpp\"\n@@ -51,1 +46,0 @@\n-#include \"memory\/iterator.hpp\"\n@@ -55,1 +49,1 @@\n-#include \"memory\/universe.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n@@ -951,4 +945,0 @@\n-void ShenandoahControlThread::notify_heap_changed() {\n-  \/\/ This is called from allocation path, and thus should be fast.\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -35,1 +34,0 @@\n-#include \"utilities\/ostream.hpp\"\n@@ -136,2 +134,0 @@\n-  void notify_heap_changed();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1026,2 +1026,3 @@\n-  control_thread()->notify_heap_changed();\n-  regulator_thread()->notify_heap_changed();\n+\n+  \/\/ This is called from allocation path, and thus should be fast.\n+  _heap_changed.try_set();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -359,0 +359,3 @@\n+\n+  \/\/ tracks if new regions have been allocated or retired since last check\n+  ShenandoahSharedFlag   _heap_changed;\n@@ -411,0 +414,6 @@\n+  \/\/ Returns true if allocations have occurred in new regions or if regions have been\n+  \/\/ uncommitted since the previous calls. This call will reset the flag to false.\n+  bool has_changed() {\n+    return _heap_changed.try_unset();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahPacer.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -35,0 +35,9 @@\n+enum StringDedupMode {\n+  NO_DEDUP,      \/\/ Do not do anything for String deduplication\n+  ENQUEUE_DEDUP, \/\/ Enqueue candidate Strings for deduplication, if meet age threshold\n+  ALWAYS_DEDUP   \/\/ Enqueue Strings for deduplication\n+};\n+\n+class ShenandoahMarkingContext;\n+class ShenandoahReferenceProcessor;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,6 +37,0 @@\n-enum StringDedupMode {\n-  NO_DEDUP,      \/\/ Do not do anything for String deduplication\n-  ENQUEUE_DEDUP, \/\/ Enqueue candidate Strings for deduplication, if meet age threshold\n-  ALWAYS_DEDUP   \/\/ Enqueue Strings for deduplication\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-  if (_heap_changed.try_unset()) {\n+  if (ShenandoahHeap::heap()->has_changed()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,8 +55,0 @@\n-  \/\/ This is called from allocation path, and thus should be fast.\n-  void notify_heap_changed() {\n-    \/\/ Notify that something had changed.\n-    if (_heap_changed.is_unset()) {\n-      _heap_changed.set();\n-    }\n-  }\n-\n@@ -90,1 +82,0 @@\n-  ShenandoahSharedFlag _heap_changed;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}