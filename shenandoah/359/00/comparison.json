{"files":[{"patch":"@@ -33,0 +33,6 @@\n+  if (ShenandoahGenerationalMinTenuringAge > ShenandoahGenerationalMaxTenuringAge) {\n+    vm_exit_during_initialization(\n+      err_msg(\"ShenandoahGenerationalMinTenuringAge=\" SIZE_FORMAT\n+              \" should be no more than ShenandoahGenerationalMaxTenuringAge=\" SIZE_FORMAT,\n+              ShenandoahGenerationalMinTenuringAge, ShenandoahGenerationalMaxTenuringAge));\n+  }\n@@ -223,0 +229,2 @@\n+\/\/ Currently Shenandoah{Min,Max}TenuringAge have a floor of 1 because we\n+\/\/ aren't set up to promote age 0 objects.\n@@ -224,0 +232,7 @@\n+  \/\/ Dispose of the extremal cases early so the loop below\n+  \/\/ is less fragile.\n+  if (ShenandoahGenerationalMaxTenuringAge == ShenandoahGenerationalMinTenuringAge) {\n+    return ShenandoahGenerationalMaxTenuringAge; \/\/ Any value in [1,16]\n+  }\n+  assert(ShenandoahGenerationalMinTenuringAge < ShenandoahGenerationalMaxTenuringAge, \"Error\");\n+\n@@ -240,1 +255,1 @@\n-  uint upper_bound = ShenandoahGenerationalMaxTenuringAge - 1;\n+  uint upper_bound = ShenandoahGenerationalMaxTenuringAge;\n@@ -247,0 +262,4 @@\n+  upper_bound = MIN2(upper_bound, markWord::max_age);\n+\n+  const uint lower_bound = MAX2((uint)ShenandoahGenerationalMinTenuringAge, (uint)1);\n+\n@@ -248,1 +267,1 @@\n-  for (uint i = upper_bound; i > MAX2((uint)ShenandoahGenerationalMinTenuringAge, (uint)0); i--) {\n+  for (uint i = upper_bound; i >= lower_bound; i--) {\n@@ -250,0 +269,1 @@\n+    assert(i <= markWord::max_age, \"Index i would overflow\");\n@@ -254,8 +274,11 @@\n-    \/\/ We ignore any cohorts that had a very low population count, or\n-    \/\/ that have a lower mortality rate than we care to age in young; these\n-    \/\/ cohorts are considered eligible for tenuring when all older\n-    \/\/ cohorts are.\n-    if (prev_pop < ShenandoahGenerationalTenuringCohortPopulationThreshold ||\n-        mr < ShenandoahGenerationalTenuringMortalityRateThreshold) {\n-      tenuring_threshold = i;\n-      continue;\n+    if (prev_pop > ShenandoahGenerationalTenuringCohortPopulationThreshold &&\n+        mr > ShenandoahGenerationalTenuringMortalityRateThreshold) {\n+      \/\/ This is the oldest cohort that has high mortality.\n+      \/\/ We ignore any cohorts that had a very low population count, or\n+      \/\/ that have a lower mortality rate than we care to age in young; these\n+      \/\/ cohorts are considered eligible for tenuring when all older\n+      \/\/ cohorts are. We return the next higher age as the tenuring threshold\n+      \/\/ so that we do not prematurely promote objects of this age.\n+      assert(tenuring_threshold == i+1 || tenuring_threshold == upper_bound, \"Error\");\n+      assert(tenuring_threshold >= lower_bound && tenuring_threshold <= upper_bound, \"Error\");\n+      return tenuring_threshold;\n@@ -263,1 +286,3 @@\n-    return tenuring_threshold;\n+    \/\/ Remember that we passed over this cohort, looking for younger cohorts\n+    \/\/ showing high mortality. We want to tenure cohorts of this age.\n+    tenuring_threshold = i;\n@@ -265,0 +290,1 @@\n+  assert(tenuring_threshold >= lower_bound && tenuring_threshold <= upper_bound, \"Error\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.cpp","additions":37,"deletions":11,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-          \" oldest cohort under the tenuring age for the last cycle.\" )     \\\n+          \"oldest cohort under the tenuring age for the last cycle.\" )      \\\n@@ -86,3 +86,6 @@\n-  product(uintx, ShenandoahGenerationalMinTenuringAge, 0, EXPERIMENTAL,     \\\n-          \"(Generational mode only) Floor for adaptive tenuring age.\")      \\\n-          range(0,16)                                                       \\\n+  product(uintx, ShenandoahGenerationalMinTenuringAge, 1, EXPERIMENTAL,     \\\n+          \"(Generational mode only) Floor for adaptive tenuring age. \"      \\\n+          \"Setting floor and ceiling to the same value fixes the tenuring \" \\\n+          \"age; setting both to 1 simulates a poor approximation to \"       \\\n+          \"AlwaysTenure, and setting both to 16 simulates NeverTenure.\")    \\\n+          range(1,16)                                                       \\\n@@ -92,4 +95,4 @@\n-          \"Setting min and max to the same value fixes the tenuring age, \"  \\\n-          \"setting both to 0 simulates Always Tenure, and setting both to \" \\\n-          \"16 simulates Never Tenure.\")                                     \\\n-          range(0,16)                                                       \\\n+          \"Setting floor and ceiling to the same value fixes the tenuring \" \\\n+          \"age; setting both to 1 simulates a poor approximation to \"       \\\n+          \"AlwaysTenure, and setting both to 16 simulates NeverTenure.\")    \\\n+          range(1,16)                                                       \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}