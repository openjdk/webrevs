{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahBarrierSet.hpp\"\n@@ -35,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -55,0 +53,62 @@\n+class ShenandoahLeftRightIterator {\n+private:\n+  idx_t _idx;\n+  idx_t _end;\n+  ShenandoahRegionPartitions* _partitions;\n+  ShenandoahFreeSetPartitionId _partition;\n+public:\n+  explicit ShenandoahLeftRightIterator(ShenandoahRegionPartitions* partitions, ShenandoahFreeSetPartitionId partition, bool use_empty = false)\n+    : _idx(0), _end(0), _partitions(partitions), _partition(partition) {\n+    _idx = use_empty ? _partitions->leftmost_empty(_partition) : _partitions->leftmost(_partition);\n+    _end = use_empty ? _partitions->rightmost_empty(_partition) : _partitions->rightmost(_partition);\n+  }\n+\n+  bool has_next() const {\n+    if (_idx <= _end) {\n+      assert(_partitions->in_free_set(_partition, _idx), \"Boundaries or find_last_set_bit failed: \" SSIZE_FORMAT, _idx);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  idx_t current() const {\n+    return _idx;\n+  }\n+\n+  idx_t next() {\n+    _idx = _partitions->find_index_of_next_available_region(_partition, _idx + 1);\n+    return current();\n+  }\n+};\n+\n+class ShenandoahRightLeftIterator {\n+private:\n+  idx_t _idx;\n+  idx_t _end;\n+  ShenandoahRegionPartitions* _partitions;\n+  ShenandoahFreeSetPartitionId _partition;\n+public:\n+  explicit ShenandoahRightLeftIterator(ShenandoahRegionPartitions* partitions, ShenandoahFreeSetPartitionId partition, bool use_empty = false)\n+    : _idx(0), _end(0), _partitions(partitions), _partition(partition) {\n+    _idx = use_empty ? _partitions->rightmost_empty(_partition) : _partitions->rightmost(_partition);\n+    _end = use_empty ? _partitions->leftmost_empty(_partition) : _partitions->leftmost(_partition);\n+  }\n+\n+  bool has_next() const {\n+    if (_idx >= _end) {\n+      assert(_partitions->in_free_set(_partition, _idx), \"Boundaries or find_last_set_bit failed: \" SSIZE_FORMAT, _idx);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  idx_t current() const {\n+    return _idx;\n+  }\n+\n+  idx_t next() {\n+    _idx = _partitions->find_index_of_previous_available_region(_partition, _idx - 1);\n+    return current();\n+  }\n+};\n+\n@@ -691,2 +751,1 @@\n-HeapWord* ShenandoahFreeSet::allocate_from_partition_with_affiliation(ShenandoahFreeSetPartitionId which_partition,\n-                                                                      ShenandoahAffiliation affiliation,\n+HeapWord* ShenandoahFreeSet::allocate_from_partition_with_affiliation(ShenandoahAffiliation affiliation,\n@@ -694,0 +753,1 @@\n+\n@@ -695,4 +755,1 @@\n-  idx_t rightmost_collector = ((affiliation == ShenandoahAffiliation::FREE)?\n-                               _partitions.rightmost_empty(which_partition): _partitions.rightmost(which_partition));\n-  idx_t leftmost_collector = ((affiliation == ShenandoahAffiliation::FREE)?\n-                              _partitions.leftmost_empty(which_partition): _partitions.leftmost(which_partition));\n+  ShenandoahFreeSetPartitionId which_partition = req.is_old()? ShenandoahFreeSetPartitionId::OldCollector: ShenandoahFreeSetPartitionId::Collector;\n@@ -700,11 +757,2 @@\n-    for (idx_t idx = leftmost_collector; idx <= rightmost_collector; ) {\n-      assert(_partitions.in_free_set(which_partition, idx), \"Boundaries or find_prev_last_bit failed: \" SSIZE_FORMAT, idx);\n-      ShenandoahHeapRegion* r = _heap->get_region(idx);\n-      if (r->affiliation() == affiliation) {\n-        HeapWord* result = try_allocate_in(r, req, in_new_region);\n-        if (result != nullptr) {\n-          return result;\n-        }\n-      }\n-      idx = _partitions.find_index_of_next_available_region(which_partition, idx + 1);\n-    }\n+    ShenandoahLeftRightIterator iterator(&_partitions, which_partition, affiliation == ShenandoahAffiliation::FREE);\n+    return allocate_with_affiliation(iterator, affiliation, req, in_new_region);\n@@ -712,9 +760,13 @@\n-    for (idx_t idx = rightmost_collector; idx >= leftmost_collector; ) {\n-      assert(_partitions.in_free_set(which_partition, idx),\n-             \"Boundaries or find_prev_last_bit failed: \" SSIZE_FORMAT, idx);\n-      ShenandoahHeapRegion* r = _heap->get_region(idx);\n-      if (r->affiliation() == affiliation) {\n-        HeapWord* result = try_allocate_in(r, req, in_new_region);\n-        if (result != nullptr) {\n-          return result;\n-        }\n+    ShenandoahRightLeftIterator iterator(&_partitions, which_partition, affiliation == ShenandoahAffiliation::FREE);\n+    return allocate_with_affiliation(iterator, affiliation, req, in_new_region);\n+  }\n+}\n+\n+template<typename Iter>\n+HeapWord* ShenandoahFreeSet::allocate_with_affiliation(Iter& iterator, ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region) {\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n+    ShenandoahHeapRegion* r = _heap->get_region(idx);\n+    if (r->affiliation() == affiliation) {\n+      HeapWord* result = try_allocate_in(r, req, in_new_region);\n+      if (result != nullptr) {\n+        return result;\n@@ -722,1 +774,0 @@\n-      idx = _partitions.find_index_of_previous_available_region(which_partition, idx - 1);\n@@ -771,1 +822,5 @@\n-    return allocate_from_left_to_right(req, in_new_region);\n+    \/\/ Allocate from low to high memory.  This keeps the range of fully empty regions more tightly packed.\n+    \/\/ Note that the most recently allocated regions tend not to be evacuated in a given GC cycle.  So this\n+    \/\/ tends to accumulate \"fragmented\" uncollected regions in high memory.\n+    ShenandoahLeftRightIterator iterator(&_partitions, ShenandoahFreeSetPartitionId::Mutator);\n+    return allocate_from_regions(iterator, req, in_new_region);\n@@ -774,1 +829,3 @@\n-  return allocate_from_right_to_left(req, in_new_region);\n+  \/\/ Allocate from high to low memory. This preserves low memory for humongous allocations.\n+  ShenandoahRightLeftIterator iterator(&_partitions, ShenandoahFreeSetPartitionId::Mutator);\n+  return allocate_from_regions(iterator, req, in_new_region);\n@@ -803,9 +860,3 @@\n-HeapWord* ShenandoahFreeSet::allocate_from_left_to_right(ShenandoahAllocRequest &req, bool &in_new_region) {\n-  \/\/ Allocate from low to high memory.  This keeps the range of fully empty regions more tightly packed.\n-  \/\/ Note that the most recently allocated regions tend not to be evacuated in a given GC cycle.  So this\n-  \/\/ tends to accumulate \"fragmented\" uncollected regions in high memory.\n-  \/\/ Use signed idx.  Otherwise, loop will never terminate.\n-  idx_t rightmost = _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator); idx <= rightmost;) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, idx),\n-           \"Boundaries or find_last_set_bit failed: \" SSIZE_FORMAT, idx);\n+template<typename Iter>\n+HeapWord* ShenandoahFreeSet::allocate_from_regions(Iter& iterator, ShenandoahAllocRequest &req, bool &in_new_region) {\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n@@ -813,2 +864,0 @@\n-\n-    HeapWord* result;\n@@ -816,20 +865,5 @@\n-    if ((alloc_capacity(r) >= min_size) && ((result = try_allocate_in(r, req, in_new_region)) != nullptr)) {\n-      return result;\n-    }\n-    idx = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Mutator, idx + 1);\n-  }\n-  return nullptr;\n-}\n-\n-HeapWord* ShenandoahFreeSet::allocate_from_right_to_left(ShenandoahAllocRequest &req, bool &in_new_region) {\n-  \/\/ Allocate within mutator free from high memory to low so as to preserve low memory for humongous allocations\n-  \/\/ Use signed idx.  Otherwise, loop will never terminate.\n-  idx_t leftmost = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t idx = _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator); idx >= leftmost;) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, idx),\n-           \"Boundaries or find_last_set_bit failed: \" SSIZE_FORMAT, idx);\n-    ShenandoahHeapRegion* r = _heap->get_region(idx);\n-    HeapWord* result;\n-    size_t min_size = (req.type() == ShenandoahAllocRequest::_alloc_tlab) ? req.min_size() : req.size();\n-    if ((alloc_capacity(r) >= min_size) && ((result = try_allocate_in(r, req, in_new_region)) != nullptr)) {\n-      return result;\n+    if (alloc_capacity(r) >= min_size) {\n+      HeapWord* result = try_allocate_in(r, req, in_new_region);\n+      if (result != nullptr) {\n+        return result;\n+      }\n@@ -837,1 +871,0 @@\n-    idx = _partitions.find_index_of_previous_available_region(ShenandoahFreeSetPartitionId::Mutator, idx - 1);\n@@ -845,3 +878,1 @@\n-  result = allocate_from_partition_with_affiliation(req.is_old()? ShenandoahFreeSetPartitionId::OldCollector:\n-                                                    ShenandoahFreeSetPartitionId::Collector,\n-                                                    req.affiliation(), req, in_new_region);\n+  result = allocate_from_partition_with_affiliation(req.affiliation(), req, in_new_region);\n@@ -855,3 +886,1 @@\n-    result = allocate_from_partition_with_affiliation(req.is_old()? ShenandoahFreeSetPartitionId::OldCollector:\n-                                                      ShenandoahFreeSetPartitionId::Collector,\n-                                                      ShenandoahAffiliation::FREE, req, in_new_region);\n+    result = allocate_from_partition_with_affiliation(ShenandoahAffiliation::FREE, req, in_new_region);\n@@ -901,5 +930,2 @@\n-  idx_t rightmost_mutator = _partitions.rightmost_empty(ShenandoahFreeSetPartitionId::Mutator);\n-  idx_t leftmost_mutator =  _partitions.leftmost_empty(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t idx = rightmost_mutator; idx >= leftmost_mutator; ) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, idx),\n-           \"Boundaries or find_prev_last_bit failed: \" SSIZE_FORMAT, idx);\n+  ShenandoahRightLeftIterator iterator(&_partitions, ShenandoahFreeSetPartitionId::Mutator, true);\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n@@ -918,1 +944,0 @@\n-    idx = _partitions.find_index_of_previous_available_region(ShenandoahFreeSetPartitionId::Mutator, idx - 1);\n@@ -1477,1 +1502,1 @@\n-  size_t region_size_bytes = ShenandoahHeapRegion::region_size_bytes();\n+  const size_t region_size_bytes = ShenandoahHeapRegion::region_size_bytes();\n@@ -1479,0 +1504,1 @@\n+  ShenandoahLeftRightIterator iterator(&_partitions, which_collector, true);\n@@ -1480,2 +1506,1 @@\n-  for (idx_t idx = _partitions.leftmost_empty(which_collector); (transferred_regions < max_xfer_regions) && (idx <= rightmost); ) {\n-    assert(_partitions.in_free_set(which_collector, idx), \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, idx);\n+  for (idx_t idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n@@ -1488,1 +1513,0 @@\n-    idx = _partitions.find_index_of_next_available_region(which_collector, idx + 1);\n@@ -1494,1 +1518,1 @@\n-size_t ShenandoahFreeSet::transfer_non_empty_regions_from_collector_set_to_mutator_set(ShenandoahFreeSetPartitionId collector_id,\n+size_t ShenandoahFreeSet::transfer_non_empty_regions_from_collector_set_to_mutator_set(ShenandoahFreeSetPartitionId which_collector,\n@@ -1499,3 +1523,2 @@\n-  idx_t rightmost = _partitions.rightmost(collector_id);\n-  for (idx_t idx = _partitions.leftmost(collector_id); (transferred_regions < max_xfer_regions) && (idx <= rightmost); ) {\n-    assert(_partitions.in_free_set(collector_id, idx), \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, idx);\n+  ShenandoahLeftRightIterator iterator(&_partitions, which_collector, false);\n+  for (idx_t idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n@@ -1504,1 +1527,1 @@\n-      _partitions.move_from_partition_to_partition(idx, collector_id, ShenandoahFreeSetPartitionId::Mutator, ac);\n+      _partitions.move_from_partition_to_partition(idx, which_collector, ShenandoahFreeSetPartitionId::Mutator, ac);\n@@ -1508,1 +1531,0 @@\n-    idx = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Collector, idx + 1);\n@@ -2055,4 +2077,2 @@\n-  idx_t rightmost = _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t index = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator); index <= rightmost; ) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, index),\n-           \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, index);\n+  ShenandoahLeftRightIterator mutator(const_cast<ShenandoahRegionPartitions*>(&_partitions), ShenandoahFreeSetPartitionId::Mutator);\n+  for (idx_t index = mutator.current(); mutator.has_next(); index = mutator.next()) {\n@@ -2060,1 +2080,0 @@\n-    index = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Mutator, index + 1);\n@@ -2062,0 +2081,1 @@\n+\n@@ -2063,4 +2083,2 @@\n-  rightmost = _partitions.rightmost(ShenandoahFreeSetPartitionId::Collector);\n-  for (idx_t index = _partitions.leftmost(ShenandoahFreeSetPartitionId::Collector); index <= rightmost; ) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Collector, index),\n-           \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, index);\n+  ShenandoahLeftRightIterator collector(const_cast<ShenandoahRegionPartitions*>(&_partitions), ShenandoahFreeSetPartitionId::Collector);\n+  for (idx_t index = collector.current(); collector.has_next(); index = collector.next()) {\n@@ -2068,1 +2086,0 @@\n-    index = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Collector, index + 1);\n@@ -2070,0 +2087,1 @@\n+\n@@ -2085,4 +2103,2 @@\n-  idx_t rightmost = _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t index = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator); index <= rightmost; ) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, index),\n-           \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, index);\n+  ShenandoahLeftRightIterator iterator(&_partitions, ShenandoahFreeSetPartitionId::Mutator);\n+  for (idx_t index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n@@ -2093,1 +2109,0 @@\n-    index = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Mutator, index + 1);\n@@ -2108,1 +2123,0 @@\n-\n@@ -2111,4 +2125,2 @@\n-  idx_t rightmost = _partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator);\n-  for (idx_t index = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator); index <= rightmost; ) {\n-    assert(_partitions.in_free_set(ShenandoahFreeSetPartitionId::Mutator, index),\n-           \"Boundaries or find_first_set_bit failed: \" SSIZE_FORMAT, index);\n+  ShenandoahLeftRightIterator iterator(&_partitions, ShenandoahFreeSetPartitionId::Mutator);\n+  for (idx_t index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n@@ -2128,1 +2140,0 @@\n-    index = _partitions.find_index_of_next_available_region(ShenandoahFreeSetPartitionId::Mutator, index + 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":117,"deletions":106,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -296,2 +296,1 @@\n-  inline HeapWord* allocate_from_partition_with_affiliation(ShenandoahFreeSetPartitionId which_partition,\n-                                                            ShenandoahAffiliation affiliation,\n+  inline HeapWord* allocate_from_partition_with_affiliation(ShenandoahAffiliation affiliation,\n@@ -339,5 +338,3 @@\n-  \/\/ Search for regions to satisfy allocation request starting from the right, moving to the left.\n-  HeapWord* allocate_from_right_to_left(ShenandoahAllocRequest& req, bool& in_new_region);\n-\n-  \/\/ Search for regions to satisfy allocation request starting from the left, moving to the right.\n-  HeapWord* allocate_from_left_to_right(ShenandoahAllocRequest& req, bool& in_new_region);\n+  \/\/ Search for regions to satisfy allocation request using iterator.\n+  template<typename Iter>\n+  HeapWord* allocate_from_regions(Iter& iterator, ShenandoahAllocRequest &req, bool &in_new_region);\n@@ -348,0 +345,4 @@\n+  \/\/ Search for allocation in region with same affiliation as request, using given iterator.\n+  template<typename Iter>\n+  HeapWord* allocate_with_affiliation(Iter& iterator, ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region);\n+\n@@ -368,1 +369,1 @@\n-  size_t transfer_non_empty_regions_from_collector_set_to_mutator_set(ShenandoahFreeSetPartitionId collector_id,\n+  size_t transfer_non_empty_regions_from_collector_set_to_mutator_set(ShenandoahFreeSetPartitionId which_collector,\n@@ -448,1 +449,0 @@\n-  size_t unsafe_peek_free() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}