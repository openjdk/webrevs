{"files":[{"patch":"@@ -32,0 +32,2 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegion.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -462,0 +462,1 @@\n+  size_t plab_min_size_in_bytes = ShenandoahGenerationalHeap::heap()->plab_min_size() * HeapWordSize;\n@@ -465,1 +466,1 @@\n-  if (capacity >= PLAB::min_size() * HeapWordSize) {\n+  if (capacity >= plab_min_size_in_bytes) {\n@@ -1069,1 +1070,1 @@\n-      \/\/ Do not add regions that would almost surely fail allocation\n+      \/\/ Do not add regions that would almost surely fail allocation.  Note that PLAB::min_size() is typically less than ShenandoahGenerationalHeap::plab_min_size()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -91,1 +91,3 @@\n- }\n+  assert(is_aligned(_min_plab_size, CardTable::card_size_in_words()), \"min_plab_size must be aligned\");\n+  assert(is_aligned(_max_plab_size, CardTable::card_size_in_words()), \"max_plab_size must be aligned\");\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1205,4 +1205,1 @@\n-  assert(is_aligned(min_size, CardTable::card_size_in_words()),\n-         \"Align by design, min_size: \" SIZE_FORMAT \", card_size: \" SIZE_FORMAT,\n-         min_size, (size_t) CardTable::card_size_in_words());\n-  assert(is_aligned(word_size, CardTable::card_size_in_words()), \"Align by design\");\n+  assert(is_aligned(min_size, CardTable::card_size_in_words()), \"Align by design\");\n@@ -1732,0 +1729,2 @@\n+          assert(mode()->is_generational(), \"OLD Generation only exists in generational mode\");\n+          ShenandoahGenerationalHeap* gen_heap = (ShenandoahGenerationalHeap*) this;\n@@ -1741,1 +1740,1 @@\n-            \/\/ where abundance is defined as >= PLAB::min_size().  In the former case, we try resetting the desired\n+            \/\/ where abundance is defined as >= ShenGenHeap::plab_min_size().  In the former case, we try resetting the desired\n@@ -1746,2 +1745,2 @@\n-            if (plab->words_remaining() < PLAB::min_size()) {\n-              ShenandoahThreadLocalData::set_plab_size(thread, PLAB::min_size());\n+            if (plab->words_remaining() < gen_heap->plab_min_size()) {\n+              ShenandoahThreadLocalData::set_plab_size(thread, gen_heap->plab_min_size());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-  if ((obj == nullptr) && (plab->words_remaining() < PLAB::min_size())) {\n+  if ((obj == nullptr) && (plab->words_remaining() < ShenandoahGenerationalHeap::heap()->plab_min_size())) {\n@@ -320,1 +320,1 @@\n-  \/\/ if plab->words_remaining() >= PLAB::min_size(), just return nullptr so we can use a shared allocation\n+  \/\/ if plab->words_remaining() >= ShenGenHeap::heap()->plab_min_size(), just return nullptr so we can use a shared allocation\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1067,1 +1067,1 @@\n-    \/\/ add_old_collector_free_region() increases promoted_reserve() if available space exceeds PLAB::min_size()\n+    \/\/ add_old_collector_free_region() increases promoted_reserve() if available space exceeds plab_min_size()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,7 @@\n-    \/\/ In theory, plabs are only need if heap->mode()->is_generational().  However, some threads are apparently\n+    \/\/ TODO:\n+    \/\/   Only initialize _plab if (!Universe::is_fully_initialized() || ShenandoahHeap::heap()->mode()->is_generational())\n+    \/\/   Otherwise, set _plab to nullptr\n+    \/\/ Problem is there is code sprinkled throughout that asserts (plab != nullptr) that need to be fixed up.  Perhaps\n+    \/\/ those assertions are overzealous.\n+\n+    \/\/ In theory, plabs are only need if heap->mode()->is_generational().  However, some threads\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}