{"files":[{"patch":"@@ -810,1 +810,2 @@\n-  _affiliated_region_count(0), _humongous_waste(0), _used(0), _bytes_allocated_since_gc_start(0),\n+  _affiliated_region_count(0), _humongous_waste(0), _evacuation_reserve(0),\n+  _used(0), _bytes_allocated_since_gc_start(0),\n@@ -812,1 +813,2 @@\n-  _heuristics(nullptr) {\n+  _heuristics(nullptr)\n+{\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,2 @@\n-  \/\/ If there is room to promote, there is also room to evacuate.\n+  \/\/ The promotion reserve may also be used for evacuations. If we can promote this object,\n+  \/\/ then we can also evacuate it.\n@@ -231,1 +232,0 @@\n-    assert(get_evacuation_reserve() > 0, \"Promotion reserve greater than evacuation reserve\");\n@@ -245,2 +245,3 @@\n-  \/\/ If this is a shared allocation promotion request, we do not have room for any it.\n-  \/\/ This promotion into old will fail, so we will just evacuate the object in the young generation.\n+  \/\/ This is a shared allocation request. We've already checked that it can't be promoted, so if\n+  \/\/ it is a promotion, we return false. Otherwise, it is a shared evacuation request, and we allow\n+  \/\/ the allocation to proceed.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,6 +32,0 @@\n-#define SKIP_IF_NOT_SHENANDOAH()                                                \\\n-  if (!UseShenandoahGC || !ShenandoahHeap::heap()->mode()->is_generational()) { \\\n-    tty->print_cr(\"skipped\");                                                   \\\n-    return;                                                                     \\\n-  }\n-\n@@ -43,1 +37,1 @@\n-  ShenandoahOldGeneration old;\n+  ShenandoahOldGeneration* old;\n@@ -46,2 +40,1 @@\n-    : old(8, 1024 * 1024, 1024)\n-    , _locker(ShenandoahHeap::heap()->lock())\n+    : old(nullptr)\n@@ -49,3 +42,15 @@\n-    old.set_promoted_reserve(512 * HeapWordSize);\n-    old.expend_promoted(256 * HeapWordSize);\n-    old.set_evacuation_reserve(512 * HeapWordSize);\n+  }\n+\n+  void SetUp() override {\n+    if (!(UseShenandoahGC && ShenandoahHeap::heap()->mode()->is_generational())) {\n+      GTEST_SKIP() << \"Test must be run with -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\";\n+      return;\n+    }\n+\n+    ShenandoahHeap::heap()->lock()->lock(false);\n+\n+    old = new ShenandoahOldGeneration(8, 1024 * 1024, 1024);\n+    old->set_promoted_reserve(512 * HeapWordSize);\n+    old->expend_promoted(256 * HeapWordSize);\n+    old->set_evacuation_reserve(512 * HeapWordSize);\n+\n@@ -59,0 +64,7 @@\n+  void TearDown() override {\n+    if (UseShenandoahGC) {\n+      ShenandoahHeap::heap()->lock()->unlock();\n+      delete old;\n+    }\n+  }\n+\n@@ -70,3 +82,0 @@\n-\n-private:\n-  ShenandoahHeapLocker _locker;\n@@ -79,3 +88,2 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n-  EXPECT_TRUE(old.can_promote(128 * HeapWordSize)) << \"Should have room to promote\";\n-  EXPECT_FALSE(old.can_promote(384 * HeapWordSize)) << \"Should not have room to promote\";\n+  EXPECT_TRUE(old->can_promote(128 * HeapWordSize)) << \"Should have room to promote\";\n+  EXPECT_FALSE(old->can_promote(384 * HeapWordSize)) << \"Should not have room to promote\";\n@@ -85,1 +93,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -87,1 +94,1 @@\n-  EXPECT_TRUE(old.can_allocate(req)) << \"Should have room to promote\";\n+  EXPECT_TRUE(old->can_allocate(req)) << \"Should have room to promote\";\n@@ -91,1 +98,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -93,2 +99,2 @@\n-  EXPECT_FALSE(old.can_promote(req.size() * HeapWordSize)) << \"No room for promotions\";\n-  EXPECT_TRUE(old.can_allocate(req)) << \"Should have room to evacuate\";\n+  EXPECT_FALSE(old->can_promote(req.size() * HeapWordSize)) << \"No room for promotions\";\n+  EXPECT_TRUE(old->can_allocate(req)) << \"Should have room to evacuate\";\n@@ -98,1 +104,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -100,1 +105,1 @@\n-  old.set_evacuation_reserve(0);\n+  old->set_evacuation_reserve(0);\n@@ -102,1 +107,1 @@\n-  EXPECT_FALSE(old.can_allocate(req)) << \"No room for promotions or evacuations\";\n+  EXPECT_FALSE(old->can_allocate(req)) << \"No room for promotions or evacuations\";\n@@ -106,1 +111,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -108,2 +112,2 @@\n-  EXPECT_FALSE(old.can_promote(req.size() * HeapWordSize)) << \"No room for promotion\";\n-  EXPECT_TRUE(old.can_allocate(req)) << \"Should have room to evacuate shared (even though evacuation reserve is smaller than request)\";\n+  EXPECT_FALSE(old->can_promote(req.size() * HeapWordSize)) << \"No room for promotion\";\n+  EXPECT_TRUE(old->can_allocate(req)) << \"Should have room to evacuate shared (even though evacuation reserve is smaller than request)\";\n@@ -113,1 +117,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -115,2 +118,2 @@\n-  EXPECT_FALSE(old.can_promote(req.size() * HeapWordSize)) << \"No room for promotion\";\n-  EXPECT_FALSE(old.can_allocate(req)) << \"No room to promote, should fall back to evacuation in young gen\";\n+  EXPECT_FALSE(old->can_promote(req.size() * HeapWordSize)) << \"No room for promotion\";\n+  EXPECT_FALSE(old->can_allocate(req)) << \"No room to promote, should fall back to evacuation in young gen\";\n@@ -120,1 +123,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -128,1 +130,1 @@\n-  EXPECT_TRUE(old.can_promote(actual_size)) << \"Should have room for promotion\";\n+  EXPECT_TRUE(old->can_promote(actual_size)) << \"Should have room for promotion\";\n@@ -130,3 +132,3 @@\n-  size_t expended_before = old.get_promoted_expended();\n-  old.configure_plab_for_current_thread(req);\n-  size_t expended_after = old.get_promoted_expended();\n+  size_t expended_before = old->get_promoted_expended();\n+  old->configure_plab_for_current_thread(req);\n+  size_t expended_after = old->get_promoted_expended();\n@@ -140,1 +142,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -145,1 +146,1 @@\n-  EXPECT_FALSE(old.can_promote(req.actual_size() * HeapWordSize)) << \"Should have room for promotion\";\n+  EXPECT_FALSE(old->can_promote(req.actual_size() * HeapWordSize)) << \"Should have room for promotion\";\n@@ -147,3 +148,3 @@\n-  size_t expended_before = old.get_promoted_expended();\n-  old.configure_plab_for_current_thread(req);\n-  size_t expended_after = old.get_promoted_expended();\n+  size_t expended_before = old->get_promoted_expended();\n+  old->configure_plab_for_current_thread(req);\n+  size_t expended_after = old->get_promoted_expended();\n@@ -158,1 +159,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -163,3 +163,3 @@\n-  size_t expended_before = old.get_promoted_expended();\n-  old.configure_plab_for_current_thread(req);\n-  size_t expended_after = old.get_promoted_expended();\n+  size_t expended_before = old->get_promoted_expended();\n+  old->configure_plab_for_current_thread(req);\n+  size_t expended_after = old->get_promoted_expended();\n@@ -174,1 +174,0 @@\n-  SKIP_IF_NOT_SHENANDOAH()\n@@ -178,3 +177,3 @@\n-  size_t expended_before = old.get_promoted_expended();\n-  old.configure_plab_for_current_thread(req);\n-  size_t expended_after = old.get_promoted_expended();\n+  size_t expended_before = old->get_promoted_expended();\n+  old->configure_plab_for_current_thread(req);\n+  size_t expended_after = old->get_promoted_expended();\n@@ -187,2 +186,0 @@\n-\n-#undef SKIP_IF_NOT_SHENANDOAH\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldGeneration.cpp","additions":49,"deletions":52,"binary":false,"changes":101,"status":"modified"}]}