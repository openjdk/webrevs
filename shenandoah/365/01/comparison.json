{"files":[{"patch":"@@ -1337,12 +1337,0 @@\n-    \/\/ Check that gc overhead is not exceeded.\n-    \/\/\n-    \/\/ Shenandoah will grind along for quite a while allocating one\n-    \/\/ object at a time using shared (non-tlab) allocations. This check\n-    \/\/ is testing that the GC overhead limit has not been exceeded.\n-    \/\/ This will notify the collector to start a cycle, but will raise\n-    \/\/ an OOME to the mutator if the last Full GCs have not made progress.\n-    if (result == nullptr && !req.is_lab_alloc() && get_gc_no_progress_count() > ShenandoahNoProgressThreshold) {\n-      control_thread()->handle_alloc_failure(req, false);\n-      return nullptr;\n-    }\n-\n@@ -1426,0 +1414,4 @@\n+          \/\/ TODO: this should query free_set->mutator_free() rather than young_gen()->available().\n+          \/\/ This mutator allocation cannot access memory that is reserved for Collector.  Should probably\n+          \/\/ entirely remove the \"try_smaller_lab_size control path\".  The original motivation for this\n+          \/\/ path is no longer relevant.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-                    \"-XX:+UnlockExperimentalVMOptions\", \"-XX:ShenandoahNoProgressThreshold=12\",\n+                    \"-XX:+UnlockExperimentalVMOptions\",\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestThreadFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}