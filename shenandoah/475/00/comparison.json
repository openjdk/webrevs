{"files":[{"patch":"@@ -73,1 +73,1 @@\n-                                                                         RegionData* data, size_t size,\n+                                                                         RegionData data[], size_t size,\n@@ -113,1 +113,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                                                     RegionData* data, size_t size,\n+                                                     RegionData data[], size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                                                                           RegionData* data, size_t size,\n+                                                                           RegionData data[], size_t size,\n@@ -47,1 +47,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                                                     RegionData* data, size_t size,\n+                                                     RegionData data[], size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                                                                        RegionData* data, size_t size,\n+                                                                        RegionData data[], size_t size,\n@@ -92,1 +92,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                                                     RegionData* data, size_t size,\n+                                                     RegionData data[], size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,2 +119,1 @@\n-          candidates[cand_idx]._region = region;\n-          candidates[cand_idx]._u._garbage = garbage;\n+          set_RegionData_region_and_garbage(candidates[cand_idx], region, garbage);\n@@ -225,1 +224,1 @@\n-                                                                                   const RegionData* data,\n+                                                                                   const RegionData data[],\n@@ -236,1 +235,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                                                   const RegionData* data,\n+                                                   const RegionData data[],\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                                                                       RegionData* data, size_t size,\n+                                                                       RegionData data[], size_t size,\n@@ -79,1 +79,1 @@\n-                                                              const ShenandoahHeuristics::RegionData* data,\n+                                                              const ShenandoahHeuristics::RegionData data[],\n@@ -128,1 +128,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                             RegionData* data, size_t size,\n+                                             RegionData data[], size_t size,\n@@ -48,1 +48,1 @@\n-                                    const ShenandoahHeuristics::RegionData* data,\n+                                    const ShenandoahHeuristics::RegionData data[],\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  if (a._u._garbage > b._u._garbage)\n+  if (get_RegionData_garbage(a) > get_RegionData_garbage(b)) {\n@@ -41,1 +41,1 @@\n-  else if (a._u._garbage < b._u._garbage)\n+  } else if (get_RegionData_garbage(a) < get_RegionData_garbage(b)) {\n@@ -43,1 +43,3 @@\n-  else return 0;\n+  } else {\n+    return 0;\n+  }\n@@ -61,0 +63,5 @@\n+#ifdef ASSERT\n+  for (size_t i = 0; i < num_regions; i++) {\n+    initialize_RegionData(_region_data[i]);\n+  }\n+#endif\n@@ -110,2 +117,1 @@\n-        candidates[cand_idx]._region = region;\n-        candidates[cand_idx]._u._garbage = garbage;\n+        set_RegionData_region_and_garbage(candidates[cand_idx], region, garbage);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -72,0 +72,6 @@\n+#ifdef ASSERT\n+  enum UnionTag {\n+    is_garbage, is_live_data, is_uninitialized\n+  };\n+#endif\n+\n@@ -80,1 +86,4 @@\n-    } _u;\n+    } _region_union;\n+#ifdef ASSERT\n+    UnionTag _union_tag;\n+#endif\n@@ -83,0 +92,43 @@\n+  static inline void set_RegionData_region_and_garbage(RegionData& region_data, ShenandoahHeapRegion* region, size_t garbage) {\n+    region_data._region = region;\n+    region_data._region_union._garbage = garbage;\n+#ifdef ASSERT\n+    region_data._union_tag = is_garbage;\n+#endif\n+  }\n+\n+  static inline void set_RegionData_region_and_livedata(RegionData& region_data, ShenandoahHeapRegion* region, size_t live) {\n+    region_data._region = region;\n+    region_data._region_union._live_data = live;\n+#ifdef ASSERT\n+    region_data._union_tag = is_live_data;\n+#endif\n+  }\n+\n+  static inline ShenandoahHeapRegion* get_RegionData_region(const RegionData& region_data) {\n+#ifdef ASSERT\n+    assert(region_data._union_tag != is_uninitialized, \"Invalid union fetch\");\n+#endif\n+    return region_data._region;\n+  }\n+\n+  static inline size_t get_RegionData_garbage(const RegionData& region_data) {\n+#ifdef ASSERT\n+    assert(region_data._union_tag == is_garbage, \"Invalid union fetch\");\n+#endif\n+    return region_data._region_union._garbage;\n+  }\n+\n+  static inline size_t get_RegionData_livedata(const RegionData& region_data) {\n+#ifdef ASSERT\n+    assert(region_data._union_tag == is_live_data, \"Invalid union fetch\");\n+#endif\n+    return region_data._region_union._live_data;\n+  }\n+\n+#ifdef ASSERT\n+  static inline void initialize_RegionData(RegionData& region_data) {\n+    region_data._union_tag = is_uninitialized;\n+  }\n+#endif\n+\n@@ -115,1 +167,1 @@\n-                                                     RegionData* data, size_t data_size,\n+                                                     RegionData data[], size_t data_size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  if (a._u._live_data < b._u._live_data)\n+  if (get_RegionData_livedata(a) < get_RegionData_livedata(b)) {\n@@ -42,1 +42,1 @@\n-  else if (a._u._live_data > b._u._live_data)\n+  } else if (get_RegionData_livedata(a) > get_RegionData_livedata(b)) {\n@@ -44,1 +44,3 @@\n-  else return 0;\n+  } else {\n+    return 0;\n+  }\n@@ -49,1 +51,1 @@\n-  if (a._region->index() < b._region->index()) {\n+  if (get_RegionData_region(a)->index() < get_RegionData_region(b)->index()) {\n@@ -51,1 +53,1 @@\n-  } else if (a._region->index() > b._region->index()) {\n+  } else if (get_RegionData_region(a)->index() > get_RegionData_region(b)->index()) {\n@@ -298,2 +300,1 @@\n-      available_slot._region = skipped._region;\n-      available_slot._u._live_data = skipped._u._live_data;\n+      set_RegionData_region_and_livedata(available_slot, get_RegionData_region(skipped), get_RegionData_livedata(skipped));\n@@ -342,2 +343,1 @@\n-        candidates[cand_idx]._region = region;\n-        candidates[cand_idx]._u._live_data = live_bytes;\n+        set_RegionData_region_and_livedata(candidates[cand_idx], region, live_bytes);\n@@ -393,1 +393,1 @@\n-    size_t live = candidates[i]._u._live_data;\n+    size_t live = get_RegionData_livedata(candidates[i]);\n@@ -399,2 +399,3 @@\n-    size_t region_garbage = candidates[i]._region->garbage();\n-    size_t region_free = candidates[i]._region->free();\n+    ShenandoahHeapRegion* r = get_RegionData_region(candidates[i]);\n+    size_t region_garbage = r->garbage();\n+    size_t region_free = r->free();\n@@ -427,1 +428,1 @@\n-    const size_t last_unselected_old_region = candidates[cand_idx - 1]._region->index();\n+    const size_t last_unselected_old_region = get_RegionData_region(candidates[cand_idx - 1])->index();\n@@ -441,1 +442,1 @@\n-      const size_t region_garbage = candidates[_last_old_collection_candidate]._region->garbage();\n+      const size_t region_garbage = get_RegionData_region(candidates[_last_old_collection_candidate])->garbage();\n@@ -450,1 +451,1 @@\n-      span_of_uncollected_regions = 1 + last_unselected_old_region - candidates[_last_old_collection_candidate]._region->index();\n+      span_of_uncollected_regions = 1 + last_unselected_old_region - get_RegionData_region(candidates[_last_old_collection_candidate])->index();\n@@ -710,1 +711,1 @@\n-                                                                    ShenandoahHeuristics::RegionData* data,\n+                                                                    ShenandoahHeuristics::RegionData data[],\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  void choose_collection_set_from_regiondata(ShenandoahCollectionSet* set, RegionData* data, size_t data_size, size_t free) override;\n+  void choose_collection_set_from_regiondata(ShenandoahCollectionSet* set, RegionData data[], size_t data_size, size_t free) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                                                                        RegionData* data, size_t size,\n+                                                                        RegionData data[], size_t size,\n@@ -71,1 +71,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                                                     RegionData* data, size_t data_size,\n+                                                     RegionData data[], size_t data_size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                                                                       RegionData* data, size_t size,\n+                                                                       RegionData data[], size_t size,\n@@ -69,1 +69,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                                                     RegionData* data, size_t size,\n+                                                     RegionData data[], size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                                                      RegionData* data, size_t size,\n+                                                                      RegionData data[], size_t size,\n@@ -78,1 +78,1 @@\n-                                                            const RegionData* data,\n+                                                            const RegionData data[],\n@@ -103,1 +103,1 @@\n-    ShenandoahHeapRegion* r = data[idx]._region;\n+    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                                             RegionData* data, size_t size,\n+                                             RegionData data[], size_t size,\n@@ -51,1 +51,1 @@\n-                                   const RegionData* data,\n+                                   const RegionData data[],\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  void establish_preselected(bool *preselected) {\n+  void establish_preselected(bool preselected[]) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,0 @@\n-  \/\/ Humongous regions are promoted on demand and are accounted for by normal Full GC mechanisms.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}