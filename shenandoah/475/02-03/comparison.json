{"files":[{"patch":"@@ -73,1 +73,1 @@\n-                                                                         RegionData data[], size_t size,\n+                                                                         RegionData* data, size_t size,\n@@ -113,1 +113,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                                                     RegionData data[], size_t size,\n+                                                     RegionData* data, size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                                                                           RegionData data[], size_t size,\n+                                                                           RegionData* data, size_t size,\n@@ -47,1 +47,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                                                     RegionData data[], size_t size,\n+                                                     RegionData* data, size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                                                                        RegionData data[], size_t size,\n+                                                                        RegionData* data, size_t size,\n@@ -92,1 +92,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                                                     RegionData data[], size_t size,\n+                                                     RegionData* data, size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-          set_RegionData_region_and_garbage(candidates[cand_idx], region, garbage);\n+          candidates[cand_idx].set_region_and_garbage(region, garbage);\n@@ -224,1 +224,1 @@\n-                                                                                   const RegionData data[],\n+                                                                                   const RegionData* data,\n@@ -235,1 +235,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                                                   const RegionData data[],\n+                                                   const RegionData* data,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                                                                       RegionData data[], size_t size,\n+                                                                       RegionData* data, size_t size,\n@@ -79,1 +79,1 @@\n-                                                              const ShenandoahHeuristics::RegionData data[],\n+                                                              const ShenandoahHeuristics::RegionData* data,\n@@ -128,1 +128,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                             RegionData data[], size_t size,\n+                                             RegionData* data, size_t size,\n@@ -48,1 +48,1 @@\n-                                    const ShenandoahHeuristics::RegionData data[],\n+                                    const ShenandoahHeuristics::RegionData* data,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  if (get_RegionData_garbage(a) > get_RegionData_garbage(b)) {\n+  if (a.get_garbage() > b.get_garbage()) {\n@@ -41,1 +41,1 @@\n-  } else if (get_RegionData_garbage(a) < get_RegionData_garbage(b)) {\n+  } else if (a.get_garbage() < b.get_garbage()) {\n@@ -65,1 +65,1 @@\n-    zero_RegionData(_region_data[i]);\n+    _region_data[i].clear();\n@@ -117,1 +117,1 @@\n-        set_RegionData_region_and_garbage(candidates[cand_idx], region, garbage);\n+        candidates[cand_idx].set_region_and_garbage(region, garbage);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,2 @@\n-  typedef struct {\n+  class RegionData {\n+    private:\n@@ -90,1 +91,1 @@\n-  } RegionData;\n+    public:\n@@ -92,3 +93,0 @@\n-  static inline void set_RegionData_region_and_garbage(RegionData& region_data, ShenandoahHeapRegion* region, size_t garbage) {\n-    region_data._region = region;\n-    region_data._region_union._garbage = garbage;\n@@ -96,1 +94,3 @@\n-    region_data._union_tag = is_garbage;\n+    inline void clear() {\n+      _union_tag = is_uninitialized;\n+    }\n@@ -98,1 +98,0 @@\n-  }\n@@ -100,3 +99,3 @@\n-  static inline void set_RegionData_region_and_livedata(RegionData& region_data, ShenandoahHeapRegion* region, size_t live) {\n-    region_data._region = region;\n-    region_data._region_union._live_data = live;\n+    inline void set_region_and_garbage(ShenandoahHeapRegion* region, size_t garbage) {\n+      _region = region;\n+      _region_union._garbage = garbage;\n@@ -104,1 +103,1 @@\n-    region_data._union_tag = is_live_data;\n+      _union_tag = is_garbage;\n@@ -106,1 +105,1 @@\n-  }\n+    }\n@@ -108,1 +107,3 @@\n-  static inline ShenandoahHeapRegion* get_RegionData_region(const RegionData& region_data) {\n+    inline void set_region_and_livedata(ShenandoahHeapRegion* region, size_t live) {\n+      _region = region;\n+      _region_union._live_data = live;\n@@ -110,1 +111,1 @@\n-    assert(region_data._union_tag != is_uninitialized, \"Invalid union fetch\");\n+      _union_tag = is_live_data;\n@@ -112,2 +113,1 @@\n-    return region_data._region;\n-  }\n+    }\n@@ -115,1 +115,1 @@\n-  static inline size_t get_RegionData_garbage(const RegionData& region_data) {\n+    inline ShenandoahHeapRegion* get_region() const {\n@@ -117,1 +117,1 @@\n-    assert(region_data._union_tag == is_garbage, \"Invalid union fetch\");\n+      assert(_union_tag != is_uninitialized, \"Cannot fetch region from uninialized RegionData\");\n@@ -119,2 +119,2 @@\n-    return region_data._region_union._garbage;\n-  }\n+      return _region;\n+    }\n@@ -122,1 +122,1 @@\n-  static inline size_t get_RegionData_livedata(const RegionData& region_data) {\n+    inline size_t get_garbage() const {\n@@ -124,1 +124,1 @@\n-    assert(region_data._union_tag == is_live_data, \"Invalid union fetch\");\n+      assert(_union_tag == is_garbage, \"Invalid union fetch\");\n@@ -126,2 +126,2 @@\n-    return region_data._region_union._live_data;\n-  }\n+      return _region_union._garbage;\n+    }\n@@ -129,0 +129,1 @@\n+    inline size_t get_livedata() const {\n@@ -130,3 +131,1 @@\n-  static inline void zero_RegionData(RegionData& region_data) {\n-    region_data._union_tag = is_uninitialized;\n-  }\n+      assert(_union_tag == is_live_data, \"Invalid union fetch\");\n@@ -134,1 +133,4 @@\n-\n+      return _region_union._live_data;\n+    }\n+  };\n+  \n@@ -167,1 +169,1 @@\n-                                                     RegionData data[], size_t data_size,\n+                                                     RegionData* data, size_t data_size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  if (get_RegionData_livedata(a) < get_RegionData_livedata(b)) {\n+  if (a.get_livedata() < b.get_livedata()) {\n@@ -42,1 +42,1 @@\n-  } else if (get_RegionData_livedata(a) > get_RegionData_livedata(b)) {\n+  } else if (a.get_livedata() > b.get_livedata()) {\n@@ -51,1 +51,1 @@\n-  if (get_RegionData_region(a)->index() < get_RegionData_region(b)->index()) {\n+  if (a.get_region()->index() < b.get_region()->index()) {\n@@ -53,1 +53,1 @@\n-  } else if (get_RegionData_region(a)->index() > get_RegionData_region(b)->index()) {\n+  } else if (a.get_region()->index() > b.get_region()->index()) {\n@@ -248,1 +248,1 @@\n-    ShenandoahHeapRegion* region = _region_data[i]._region;\n+    ShenandoahHeapRegion* region = _region_data[i].get_region();\n@@ -268,1 +268,1 @@\n-    ShenandoahHeapRegion* region = _region_data[search]._region;\n+    ShenandoahHeapRegion* region = _region_data[search].get_region();\n@@ -298,1 +298,1 @@\n-    if (skipped._region->is_pinned()) {\n+    if (skipped.get_region()->is_pinned()) {\n@@ -300,1 +300,1 @@\n-      set_RegionData_region_and_livedata(available_slot, get_RegionData_region(skipped), get_RegionData_livedata(skipped));\n+      available_slot.set_region_and_livedata(skipped.get_region(), skipped.get_livedata());\n@@ -343,1 +343,1 @@\n-        set_RegionData_region_and_livedata(candidates[cand_idx], region, live_bytes);\n+        candidates[cand_idx].set_region_and_livedata(region, live_bytes);\n@@ -393,1 +393,1 @@\n-    size_t live = get_RegionData_livedata(candidates[i]);\n+    size_t live = candidates[i].get_livedata();\n@@ -399,1 +399,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(candidates[i]);\n+    ShenandoahHeapRegion* r = candidates[i].get_region();\n@@ -427,2 +427,2 @@\n-    const size_t first_unselected_old_region = candidates[_last_old_collection_candidate]._region->index();\n-    const size_t last_unselected_old_region = get_RegionData_region(candidates[cand_idx - 1])->index();\n+    const size_t first_unselected_old_region = candidates[_last_old_collection_candidate].get_region()->index();\n+    const size_t last_unselected_old_region = candidates[cand_idx - 1].get_region()->index();\n@@ -439,1 +439,1 @@\n-      ShenandoahHeapRegion* r = candidates[_last_old_collection_candidate]._region;\n+      ShenandoahHeapRegion* r = candidates[_last_old_collection_candidate].get_region();\n@@ -442,1 +442,1 @@\n-      const size_t region_garbage = get_RegionData_region(candidates[_last_old_collection_candidate])->garbage();\n+      const size_t region_garbage = r->garbage();\n@@ -451,1 +451,2 @@\n-      span_of_uncollected_regions = 1 + last_unselected_old_region - get_RegionData_region(candidates[_last_old_collection_candidate])->index();\n+      span_of_uncollected_regions =\n+        1 + last_unselected_old_region - candidates[_last_old_collection_candidate].get_region()->index();\n@@ -502,1 +503,1 @@\n-    ShenandoahHeapRegion* next = _region_data[_next_old_collection_candidate]._region;\n+    ShenandoahHeapRegion* next = _region_data[_next_old_collection_candidate].get_region();\n@@ -525,1 +526,1 @@\n-    *buffer++ = _region_data[index++]._region;\n+    *buffer++ = _region_data[index++].get_region();\n@@ -711,1 +712,1 @@\n-                                                                    ShenandoahHeuristics::RegionData data[],\n+                                                                    ShenandoahHeuristics::RegionData* data,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  void choose_collection_set_from_regiondata(ShenandoahCollectionSet* set, RegionData data[], size_t data_size, size_t free) override;\n+  void choose_collection_set_from_regiondata(ShenandoahCollectionSet* set, RegionData* data, size_t data_size, size_t free) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                                                                        RegionData data[], size_t size,\n+                                                                        RegionData* data, size_t size,\n@@ -71,1 +71,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                                                     RegionData data[], size_t data_size,\n+                                                     RegionData* data, size_t data_size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                                                                       RegionData data[], size_t size,\n+                                                                       RegionData* data, size_t size,\n@@ -69,1 +69,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                                                     RegionData data[], size_t size,\n+                                                     RegionData* data, size_t size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                                                      RegionData data[], size_t size,\n+                                                                      RegionData* data, size_t size,\n@@ -78,1 +78,1 @@\n-                                                            const RegionData data[],\n+                                                            const RegionData* data,\n@@ -103,1 +103,1 @@\n-    ShenandoahHeapRegion* r = get_RegionData_region(data[idx]);\n+    ShenandoahHeapRegion* r = data[idx].get_region();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                                             RegionData data[], size_t size,\n+                                             RegionData* data, size_t size,\n@@ -51,1 +51,1 @@\n-                                   const RegionData data[],\n+                                   const RegionData* data,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}