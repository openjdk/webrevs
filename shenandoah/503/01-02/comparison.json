{"files":[{"patch":"@@ -745,4 +745,5 @@\n-        ShenandoahVerifier::VerifySize sizeness = has_in_place_promotions(heap)\n-                                                ? ShenandoahVerifier::_verify_size_adjusted_for_padding\n-                                                : ShenandoahVerifier::_verify_size_exact;\n-        heap->verifier()->verify_after_concmark(sizeness);\n+        if (has_in_place_promotions(heap)) {\n+          heap->verifier()->verify_before_region_promotions();\n+        } else {\n+          heap->verifier()->verify_after_concmark();\n+        }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -365,4 +365,5 @@\n-      ShenandoahVerifier::VerifySize sizeness = has_in_place_promotions(heap)\n-                                              ? ShenandoahVerifier::_verify_size_adjusted_for_padding\n-                                              : ShenandoahVerifier::_verify_size_exact;\n-      heap->verifier()->verify_after_concmark(sizeness);\n+      if (has_in_place_promotions(heap)) {\n+        heap->verifier()->verify_before_region_promotions();\n+      } else {\n+        heap->verifier()->verify_after_concmark();\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -82,1 +82,2 @@\n-    do_evacuations();\n+    assert(ShenandoahHeap::heap()->collection_set()->is_empty(), \"Should not have a collection set here\");\n+    promote_regions();\n@@ -84,0 +85,1 @@\n+    assert(!ShenandoahHeap::heap()->collection_set()->is_empty(), \"Should have a collection set here\");\n@@ -85,1 +87,1 @@\n-    do_evacuations();\n+    evacuate_and_promote_regions();\n@@ -89,1 +91,28 @@\n-void ShenandoahGenerationalEvacuationTask::do_evacuations() {\n+void log_region(const ShenandoahHeapRegion* r, LogStream* ls) {\n+  ls->print_cr(\"GenerationalEvacuationTask, looking at %s region \" SIZE_FORMAT \", (age: %d) [%s, %s, %s]\",\n+              r->is_old()? \"old\": r->is_young()? \"young\": \"free\", r->index(), r->age(),\n+              r->is_active()? \"active\": \"inactive\",\n+              r->is_humongous()? (r->is_humongous_start()? \"humongous_start\": \"humongous_continuation\"): \"regular\",\n+              r->is_cset()? \"cset\": \"not-cset\");\n+}\n+\n+void ShenandoahGenerationalEvacuationTask::promote_regions() {\n+  ShenandoahHeapRegion* r;\n+  LogTarget(Debug, gc) lt;\n+\n+  while ((r = _regions->next()) != nullptr) {\n+    if (lt.is_enabled()) {\n+      LogStream ls(lt);\n+      log_region(r, &ls);\n+    }\n+\n+    maybe_promote_region(r);\n+\n+    if (_heap->check_cancelled_gc_and_yield(_concurrent)) {\n+      break;\n+    }\n+  }\n+}\n+\n+void ShenandoahGenerationalEvacuationTask::evacuate_and_promote_regions() {\n+  LogTarget(Debug, gc) lt;\n@@ -94,5 +123,4 @@\n-    log_debug(gc)(\"GenerationalEvacuationTask do_work(), looking at %s region \" SIZE_FORMAT \", (age: %d) [%s, %s, %s]\",\n-            r->is_old()? \"old\": r->is_young()? \"young\": \"free\", r->index(), r->age(),\n-            r->is_active()? \"active\": \"inactive\",\n-            r->is_humongous()? (r->is_humongous_start()? \"humongous_start\": \"humongous_continuation\"): \"regular\",\n-            r->is_cset()? \"cset\": \"not-cset\");\n+    if (lt.is_enabled()) {\n+      LogStream ls(lt);\n+      log_region(r, &ls);\n+    }\n@@ -106,11 +134,18 @@\n-    } else if (r->is_young() && r->is_active() && (r->age() >= _tenuring_threshold)) {\n-      if (r->is_humongous_start()) {\n-        \/\/ We promote humongous_start regions along with their affiliated continuations during evacuation rather than\n-        \/\/ doing this work during a safepoint.  We cannot put humongous regions into the collection set because that\n-        \/\/ triggers the load-reference barrier (LRB) to copy on reference fetch.\n-        promote_humongous(r);\n-      } else if (r->is_regular() && (r->get_top_before_promote() != nullptr)) {\n-        \/\/ Likewise, we cannot put promote-in-place regions into the collection set because that would also trigger\n-        \/\/ the LRB to copy on reference fetch.\n-        promote_in_place(r);\n-      }\n+    } else {\n+      maybe_promote_region(r);\n+    }\n+\n+    if (_heap->check_cancelled_gc_and_yield(_concurrent)) {\n+      break;\n+    }\n+  }\n+}\n+\n+\n+void ShenandoahGenerationalEvacuationTask::maybe_promote_region(ShenandoahHeapRegion* r) {\n+  if (r->is_young() && r->is_active() && (r->age() >= _tenuring_threshold)) {\n+    if (r->is_humongous_start()) {\n+      \/\/ We promote humongous_start regions along with their affiliated continuations during evacuation rather than\n+      \/\/ doing this work during a safepoint.  We cannot put humongous regions into the collection set because that\n+      \/\/ triggers the load-reference barrier (LRB) to copy on reference fetch.\n+      \/\/\n@@ -121,1 +156,5 @@\n-\n+      promote_humongous(r);\n+    } else if (r->is_regular() && (r->get_top_before_promote() != nullptr)) {\n+      \/\/ Likewise, we cannot put promote-in-place regions into the collection set because that would also trigger\n+      \/\/ the LRB to copy on reference fetch.\n+      \/\/\n@@ -124,5 +163,1 @@\n-    }\n-    \/\/ else, region is free, or OLD, or not in collection set, or humongous_continuation,\n-    \/\/ or is young humongous_start that is too young to be promoted\n-    if (_heap->check_cancelled_gc_and_yield(_concurrent)) {\n-      break;\n+      promote_in_place(r);\n@@ -291,0 +326,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":61,"deletions":25,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -51,1 +51,3 @@\n-  void do_evacuations();\n+  void promote_regions();\n+  void evacuate_and_promote_regions();\n+  void maybe_promote_region(ShenandoahHeapRegion* region);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1072,1 +1072,1 @@\n-void ShenandoahVerifier::verify_after_concmark(ShenandoahVerifier::VerifySize sizeness) {\n+void ShenandoahVerifier::verify_after_concmark() {\n@@ -1075,9 +1075,23 @@\n-          _verify_remembered_disable,  \/\/ do not verify remembered set\n-          _verify_forwarded_none,      \/\/ no forwarded references\n-          _verify_marked_complete_satb_empty,\n-                                       \/\/ bitmaps as precise as we can get, except dangling j.l.r.Refs\n-          _verify_cset_none,           \/\/ no references to cset anymore\n-          _verify_liveness_complete,   \/\/ liveness data must be complete here\n-          _verify_regions_disable,     \/\/ trash regions not yet recycled\n-          sizeness,          \/\/ expect generation and heap sizes to match exactly\n-          _verify_gcstate_stable_weakroots  \/\/ heap is still stable, weakroots are in progress\n+          _verify_remembered_disable,         \/\/ do not verify remembered set\n+          _verify_forwarded_none,             \/\/ no forwarded references\n+          _verify_marked_complete_satb_empty, \/\/ bitmaps as precise as we can get, except dangling j.l.r.Refs\n+          _verify_cset_none,                  \/\/ no references to cset anymore\n+          _verify_liveness_complete,          \/\/ liveness data must be complete here\n+          _verify_regions_disable,            \/\/ trash regions not yet recycled\n+          _verify_size_exact,                 \/\/ expect generation and heap sizes to match exactly\n+          _verify_gcstate_stable_weakroots    \/\/ heap is still stable, weakroots are in progress\n+  );\n+}\n+\n+void ShenandoahVerifier::verify_before_region_promotions() {\n+  verify_at_safepoint(\n+          \"After Mark\",\n+          _verify_remembered_disable,         \/\/ do not verify remembered set\n+          _verify_forwarded_none,             \/\/ no forwarded references\n+          _verify_marked_complete_satb_empty, \/\/ bitmaps as precise as we can get, except dangling j.l.r.Refs\n+          _verify_cset_none,                  \/\/ no references to cset anymore\n+          _verify_liveness_complete,          \/\/ liveness data must be complete here\n+          _verify_regions_disable,            \/\/ trash regions not yet recycled\n+          _verify_size_adjusted_for_padding,  \/\/ expect generation and heap sizes to match after adjustments\n+                                              \/\/ for promote in place padding\n+          _verify_gcstate_stable_weakroots    \/\/ heap is still stable, weakroots are in progress\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -214,1 +214,2 @@\n-  void verify_after_concmark(VerifySize sizeness);\n+  void verify_after_concmark();\n+  void verify_before_region_promotions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}