{"files":[{"patch":"@@ -148,0 +148,44 @@\n+ * <h2 id = \"custom-arenas\">Custom arenas<\/h2>\n+ *\n+ * Clients can define custom arenas to implement more efficient allocation strategies, or to have better control over\n+ * when (and by whom) an arena can be closed. As an example, the following code defines a <em>slicing arena<\/em> that behaves\n+ * like a confined arena (i.e., single-threaded access), but internally uses a\n+ * {@linkplain SegmentAllocator#slicingAllocator(MemorySegment) slicing allocator} to respond to allocation requests.\n+ * When the slicing arena is closed, the underlying confined arena is also closed; this will invalidate all segments\n+ * allocated with the slicing arena (since the scope of the slicing arena is the same as that of the underlying\n+ * confined arena):\n+ *\n+ * {@snippet lang = java:\n+ * class SlicingArena {\n+ *      final Arena arena = Arena.ofConfined();\n+ *      final SegmentAllocator slicingAllocator;\n+ *\n+ *      SlicingArena(long size) {\n+ *          slicingAllocator = SegmentAllocator.slicingAllocator(arena.allocate(size));\n+ *      }\n+ *\n+ *      public void allocate(long byteSize, long byteAlignment) {\n+ *          return slicingAllocator.allocate(byteSize, byteAlignment);\n+ *      }\n+ *\n+ *      public MemorySegment.Scope scope() {\n+ *          return arena.scope();\n+ *      }\n+ *\n+ *      public void close() {\n+ *          return arena.close();\n+ *      }\n+ * }\n+ * }\n+ *\n+ * In other words, a slicing arena provides a vastly more efficient and scalable allocation strategy, while still retaining\n+ * the timely deallocation guarantee provided by the underlying confined arena:\n+ *\n+ * {@snippet lang = java:\n+ * try (Arena slicingArena = new SlicingArena(1000)) {\n+ *      for (int i = 0 ; i < 10 ; i++) {\n+ *          MemorySegment s = arena.allocateArray(JAVA_INT, new int[] { 1, 2, 3, 4, 5 });\n+ *          ...\n+ *      }\n+ * } \/\/ all memory allocated is released here\n+ * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}