{"files":[{"patch":"@@ -67,0 +67,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    AddressLayout withoutName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,0 +62,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    GroupLayout withoutName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.nio.ByteOrder;\n@@ -48,1 +47,0 @@\n-import jdk.internal.foreign.layout.ValueLayouts;\n@@ -204,0 +202,11 @@\n+    \/**\n+     * Returns a memory layout of the same type with the same size and alignment constraint as this layout,\n+     * but without a name.\n+     * <p>\n+     * Nameless layouts can be checked for equality to see if they are otherwise equal.\n+     *\n+     * @return a memory layout without a name.\n+     * @see MemoryLayout#name()\n+     *\/\n+    MemoryLayout withoutName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    PaddingLayout withoutName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -131,0 +131,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -134,0 +137,9 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    MemoryLayout withoutName();\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -45,0 +48,9 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    StructLayout withoutName();\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/StructLayout.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,0 +48,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    UnionLayout withoutName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/UnionLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,0 +166,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfBoolean withoutName();\n+\n@@ -195,0 +201,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfByte withoutName();\n+\n@@ -225,0 +237,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfChar withoutName();\n+\n@@ -255,0 +273,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfShort withoutName();\n+\n@@ -285,0 +309,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfInt withoutName();\n+\n@@ -315,0 +345,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfFloat withoutName();\n+\n@@ -345,0 +381,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfLong withoutName();\n+\n@@ -375,0 +417,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfDouble withoutName();\n+\n@@ -390,1 +438,1 @@\n-     * A value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+     * A nameless value layout constant whose size is the same as that of a machine address ({@code size_t}),\n@@ -396,1 +444,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code byte},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code byte},\n@@ -402,1 +450,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code boolean},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code boolean},\n@@ -408,1 +456,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code char},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code char},\n@@ -414,1 +462,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code short},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code short},\n@@ -420,1 +468,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code int},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code int},\n@@ -426,1 +474,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code long},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code long},\n@@ -432,1 +480,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code float},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code float},\n@@ -438,1 +486,1 @@\n-     * A value layout constant whose size is the same as that of a Java {@code double},\n+     * A nameless value layout constant whose size is the same as that of a Java {@code double},\n@@ -444,1 +492,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+     * A nameless unaligned value layout constant whose size is the same as that of a machine address ({@code size_t}),\n@@ -456,1 +504,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code char}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code char}\n@@ -468,1 +516,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code short}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code short}\n@@ -480,1 +528,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code int}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code int}\n@@ -492,1 +540,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code long}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code long}\n@@ -504,1 +552,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code float}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code float}\n@@ -516,1 +564,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code double}\n+     * A nameless unaligned value layout constant whose size is the same as that of a Java {@code double}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":64,"deletions":16,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -54,0 +54,4 @@\n+    public final L withoutName() {\n+        return dup(bitAlignment(), Optional.empty());\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,4 @@\n-    private static final long BIT_ALIGNMENT = 64;\n-    private static final ByteOrder BYTE_ORDER = ByteOrder.LITTLE_ENDIAN;\n+    private static final long BIT_ALIGNMENT = Long.SIZE * 2;\n+    private static final ByteOrder BYTE_ORDER = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN\n+            ? ByteOrder.LITTLE_ENDIAN\n+            : ByteOrder.BIG_ENDIAN;\n@@ -51,0 +53,1 @@\n+                .withoutName()\n@@ -60,0 +63,1 @@\n+                .withoutName()\n@@ -69,0 +73,1 @@\n+                .withoutName()\n@@ -78,0 +83,1 @@\n+                .withoutName()\n@@ -87,0 +93,1 @@\n+                .withoutName()\n@@ -96,0 +103,1 @@\n+                .withoutName()\n@@ -105,0 +113,1 @@\n+                .withoutName()\n@@ -114,0 +123,1 @@\n+                .withoutName()\n@@ -120,1 +130,1 @@\n-    public void testOfAddress() {\n+    public void testAddressLayout() {\n@@ -123,0 +133,1 @@\n+                .withoutName()\n@@ -126,0 +137,2 @@\n+        assertEquals(v.order(), BYTE_ORDER);\n+\n@@ -136,0 +149,1 @@\n+                .withoutName()\n@@ -144,0 +158,1 @@\n+                .withoutName()\n@@ -152,0 +167,1 @@\n+                .withoutName()\n@@ -160,0 +176,1 @@\n+                .withoutName()\n@@ -170,0 +187,1 @@\n+        \/\/ Check name properties\n@@ -171,0 +189,2 @@\n+        assertTrue(v.withoutName().name().isEmpty());\n+\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutTypeRetentionTest.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}