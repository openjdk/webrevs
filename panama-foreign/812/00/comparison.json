{"files":[{"patch":"@@ -383,1 +383,1 @@\n- * This can be done using the {@link #reinterpret(long, Scope, Consumer)} method, which returns a\n+ * This can be done using the {@link #reinterpret(long, Arena, Consumer)} method, which returns a\n@@ -390,1 +390,1 @@\n- *                            .reinterpret(4, arena.scope(), null);  \/\/ size = 4, scope = arena.scope()\n+ *                            .reinterpret(4, arena, null);          \/\/ size = 4, scope = arena.scope()\n@@ -415,1 +415,1 @@\n- * ({@link #reinterpret(long)}, {@link #reinterpret(Scope, Consumer)}, {@link #reinterpret(long, Scope, Consumer)} and\n+ * ({@link #reinterpret(long)}, {@link #reinterpret(Arena, Consumer)}, {@link #reinterpret(long, Arena, Consumer)} and\n@@ -573,4 +573,0 @@\n-     * Equivalent to the following code:\n-     * {@snippet lang=java :\n-     * reinterpret(newSize, scope(), null);\n-     * }\n@@ -595,1 +591,9 @@\n-     * Equivalent to the following code:\n+     * As such, the returned segment cannot be accessed after the provided arena has been closed.\n+     * Moreover, if the returned segment can be accessed compatibly with the confinement restrictions associated with the\n+     * provided arena: that is, if the provided arena is a {@linkplain Arena#ofConfined() confined arena},\n+     * the returned segment can only be accessed by the arena's owner thread, regardless of the confinement restrictions\n+     * associated with this segment. In other words, this method returns a segment that behaves as if it had been allocated\n+     * using the provided arena.\n+     * <p>\n+     * Clients can specify an optional cleanup action that should be executed when the provided scope becomes\n+     * invalid. This cleanup action receives a fresh memory segment that is obtained from this segment as follows:\n@@ -597,1 +601,1 @@\n-     * reinterpret(byteSize(), scope, cleanup);\n+     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address());\n@@ -599,0 +603,13 @@\n+     * That is, the cleanup action receives a segment that is associated with a fresh scope that is always alive,\n+     * and is accessible from any thread. The size of the segment accepted by the cleanup action is {@code newSize}.\n+     * <p>\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n+     *\n+     * @apiNote The cleanup action (if present) should take care not to leak the received segment to external\n+     * clients which might access the segment after its backing region of memory is no longer available. Furthermore,\n+     * if the provided scope is the scope of an {@linkplain Arena#ofAuto() automatic arena}, the cleanup action\n+     * must not prevent the scope from becoming <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>.\n+     * A failure to do so will permanently prevent the regions of memory allocated by the automatic arena from being deallocated.\n@@ -605,1 +622,1 @@\n-     * @param newScope the scope of the returned segment.\n+     * @param arena the arena to be associated with the returned segment.\n@@ -614,1 +631,1 @@\n-    MemorySegment reinterpret(Scope newScope, Consumer<MemorySegment> cleanup);\n+    MemorySegment reinterpret(Arena arena, Consumer<MemorySegment> cleanup);\n@@ -618,4 +635,3 @@\n-     * As such, the returned segment cannot be accessed after the provided\n-     * scope has been invalidated. Moreover, if the provided scope is an arena scope,\n-     * the returned segment can be accessed compatibly with the confinement restrictions associated with the\n-     * corresponding arena: that is, if the provided scope is the scope of a {@linkplain Arena#ofConfined() confined arena},\n+     * As such, the returned segment cannot be accessed after the provided arena has been closed.\n+     * Moreover, if the returned segment can be accessed compatibly with the confinement restrictions associated with the\n+     * provided arena: that is, if the provided arena is a {@linkplain Arena#ofConfined() confined arena},\n@@ -623,2 +639,2 @@\n-     * associated with this segment. In other words, if the provided scope is an arena scope, this method returns a segment\n-     * that behaves as if it had been allocated using the arena associated with the provided scope.\n+     * associated with this segment. In other words, this method returns a segment that behaves as if it had been allocated\n+     * using the provided arena.\n@@ -646,1 +662,1 @@\n-     * @param newScope the scope of the returned segment.\n+     * @param arena the arena to be associated with the returned segment.\n@@ -656,1 +672,1 @@\n-    MemorySegment reinterpret(long newSize, Scope newScope, Consumer<MemorySegment> cleanup);\n+    MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":35,"deletions":19,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-                                    .reinterpret(loaderArena.scope(), null));\n+                                    .reinterpret(loaderArena, null));\n@@ -264,1 +264,1 @@\n-                            .reinterpret(libArena.scope(), null));\n+                            .reinterpret(libArena, null));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,2 +125,4 @@\n-    public final MemorySegment reinterpret(long newSize, Scope newScope, Consumer<MemorySegment> cleanup) {\n-        return reinterpretInternal(Reflection.getCallerClass(), newSize, newScope, null);\n+    public final MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n+        Objects.requireNonNull(arena);\n+        return reinterpretInternal(Reflection.getCallerClass(), newSize,\n+                MemorySessionImpl.toMemorySession(arena), null);\n@@ -137,2 +139,4 @@\n-    public final MemorySegment reinterpret(Scope newScope, Consumer<MemorySegment> cleanup) {\n-        return reinterpretInternal(Reflection.getCallerClass(), byteSize(), newScope, cleanup);\n+    public final MemorySegment reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n+        Objects.requireNonNull(arena);\n+        return reinterpretInternal(Reflection.getCallerClass(), byteSize(),\n+                MemorySessionImpl.toMemorySession(arena), cleanup);\n@@ -143,1 +147,0 @@\n-        Objects.requireNonNull(scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -698,1 +698,1 @@\n-                segment = segment.reinterpret(((Arena) allocator).scope(), null);\n+                segment = segment.reinterpret((Arena) allocator, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        return MemorySegment.ofAddress(entry).reinterpret(arena.scope(), null);\n+        return MemorySegment.ofAddress(entry).reinterpret(arena, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-            MemorySegment argsSeg = argPtrs.reinterpret(numArgs * ADDRESS.byteSize(), upcallArena.scope(), null);\n+            MemorySegment argsSeg = argPtrs.reinterpret(numArgs * ADDRESS.byteSize(), upcallArena, null);\n@@ -196,1 +196,1 @@\n-                ? retPtr.reinterpret(retLayout.byteSize(), upcallArena.scope(), null)\n+                ? retPtr.reinterpret(retLayout.byteSize(), upcallArena, null)\n@@ -203,1 +203,1 @@\n-                        .reinterpret(argLayout.byteSize(), upcallArena.scope(), null);\n+                        .reinterpret(argLayout.byteSize(), upcallArena, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-        return MemorySegment.ofAddress(execPtr).reinterpret(arena.scope(), unused -> freeClosure(closurePtr, globalTarget));\n+        return MemorySegment.ofAddress(execPtr).reinterpret(arena, unused -> freeClosure(closurePtr, globalTarget));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-                    .reinterpret(arena.scope(), TestNative::freeMemory);\n+                    .reinterpret(arena, TestNative::freeMemory);\n@@ -180,1 +180,1 @@\n-                    .reinterpret(arena.scope(), TestNative::freeMemory);\n+                    .reinterpret(arena, TestNative::freeMemory);\n@@ -200,1 +200,1 @@\n-            assertThrows(IllegalArgumentException.class, () -> segment.reinterpret(-1, Arena.ofAuto().scope(), null));\n+            assertThrows(IllegalArgumentException.class, () -> segment.reinterpret(-1, Arena.ofAuto(), null));\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,2 +111,2 @@\n-            \"java.lang.foreign.MemorySegment\/reinterpret(java.lang.foreign.MemorySegment$Scope,java.util.function.Consumer)\/1\/0\",\n-            \"java.lang.foreign.MemorySegment\/reinterpret(long,java.lang.foreign.MemorySegment$Scope,java.util.function.Consumer)\/2\/0\"\n+            \"java.lang.foreign.MemorySegment\/reinterpret(java.lang.foreign.Arena,java.util.function.Consumer)\/1\/0\",\n+            \"java.lang.foreign.MemorySegment\/reinterpret(long,java.lang.foreign.Arena,java.util.function.Consumer)\/2\/0\"\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-            UNSAFE(session -> MemorySegment.NULL.reinterpret(10, session.scope(), null));\n+            UNSAFE(session -> MemorySegment.NULL.reinterpret(10, session, null));\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-        MemorySegment segment = MemorySegment.NULL.reinterpret(arena.scope(), null);\n+        MemorySegment segment = MemorySegment.NULL.reinterpret(arena, null);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-                    .reinterpret(arena.scope(), null);\n+                    .reinterpret(arena, null);\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                            MethodType.methodType(MemorySegment.class, MemorySegment.Scope.class, Consumer.class)),\n+                            MethodType.methodType(MemorySegment.class, Arena.class, Consumer.class)),\n@@ -61,1 +61,1 @@\n-                            MethodType.methodType(MemorySegment.class, long.class, MemorySegment.Scope.class, Consumer.class)),\n+                            MethodType.methodType(MemorySegment.class, long.class, Arena.class, Consumer.class)),\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                    .reinterpret(i % 100, Arena.global().scope(), null).address();\n+                    .reinterpret(i % 100, Arena.global(), null).address();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverOfAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        MemorySegment newSegment = segment.reinterpret(100, arena.scope(), null);\n+        MemorySegment newSegment = segment.reinterpret(100, arena, null);\n@@ -106,1 +106,1 @@\n-        MemorySegment newSegment = segment.reinterpret(100, arena.scope(), null);\n+        MemorySegment newSegment = segment.reinterpret(100, arena, null);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-                        .reinterpret(arena.scope(), null);\n+                        .reinterpret(arena, null);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,2 +170,2 @@\n-      final var srcSegmentConfined = srcSegment.reinterpret(arena.scope(), null);\n-      final var dstSegmentConfined = dstSegment.reinterpret(arena.scope(), null);\n+      final var srcSegmentConfined = srcSegment.reinterpret(arena, null);\n+      final var dstSegmentConfined = dstSegment.reinterpret(arena, null);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,2 +168,2 @@\n-      final var srcSegmentConfined = srcSegment.reinterpret(arena.scope(), null);\n-      final var dstSegmentConfined = dstSegment.reinterpret(arena.scope(), null);\n+      final var srcSegmentConfined = srcSegment.reinterpret(arena, null);\n+      final var dstSegmentConfined = dstSegment.reinterpret(arena, null);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShorts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}