{"files":[{"patch":"@@ -27,2 +27,0 @@\n-import jdk.internal.foreign.MemorySessionImpl;\n-import jdk.internal.foreign.NativeMemorySegmentImpl;\n@@ -30,0 +28,2 @@\n+import jdk.internal.foreign.abi.BindingInterpreter.LoadFunc;\n+import jdk.internal.foreign.abi.BindingInterpreter.StoreFunc;\n@@ -194,94 +194,0 @@\n-    \/**\n-     * A binding context is used as an helper to carry out evaluation of certain bindings; for instance,\n-     * it helps {@link Allocate} bindings, by providing the {@link SegmentAllocator} that should be used for\n-     * the allocation operation, or {@link BoxAddress} bindings, by providing the {@link Arena} that\n-     * should be used to create an unsafe struct from a memory address.\n-     *\/\n-    class Context implements AutoCloseable {\n-        private final SegmentAllocator allocator;\n-        private final MemorySessionImpl scope;\n-\n-        private Context(SegmentAllocator allocator, MemorySessionImpl scope) {\n-            this.allocator = allocator;\n-            this.scope = scope;\n-        }\n-\n-        public SegmentAllocator allocator() {\n-            return allocator;\n-        }\n-\n-        public MemorySessionImpl scope() {\n-            return scope;\n-        }\n-\n-        @Override\n-        public void close() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        \/**\n-         * Create a binding context from given native scope.\n-         *\/\n-        public static Context ofBoundedAllocator(long size) {\n-            Arena arena = Arena.ofConfined();\n-            return new Context(SegmentAllocator.slicingAllocator(arena.allocate(size, 1)),\n-                    (MemorySessionImpl)arena.scope()) {\n-                @Override\n-                public void close() {\n-                    arena.close();\n-                }\n-            };\n-        }\n-\n-        \/**\n-         * Create a binding context from given segment allocator. The resulting context will throw when\n-         * the context's scope is accessed.\n-         *\/\n-        public static Context ofAllocator(SegmentAllocator allocator) {\n-            return new Context(allocator, null) {\n-                @Override\n-                public MemorySessionImpl scope() {\n-                    throw new UnsupportedOperationException();\n-                }\n-            };\n-        }\n-\n-        \/**\n-         * Create a binding context from given scope. The resulting context will throw when\n-         * the context's allocator is accessed.\n-         *\/\n-        public static Context ofScope() {\n-            Arena arena = Arena.ofConfined();\n-            return new Context(null, (MemorySessionImpl)arena.scope()) {\n-                @Override\n-                public SegmentAllocator allocator() { throw new UnsupportedOperationException(); }\n-\n-                @Override\n-                public void close() {\n-                    arena.close();\n-                }\n-            };\n-        }\n-\n-        \/**\n-         * Dummy binding context. Throws exceptions when attempting to access scope, return a throwing allocator, and has\n-         * an idempotent {@link #close()}.\n-         *\/\n-        public static final Context DUMMY = new Context(null, null) {\n-            @Override\n-            public SegmentAllocator allocator() {\n-                return SharedUtils.THROWING_ALLOCATOR;\n-            }\n-\n-            @Override\n-            public MemorySessionImpl scope() {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public void close() {\n-                \/\/ do nothing\n-            }\n-        };\n-    }\n-\n@@ -305,2 +211,2 @@\n-    void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                   BindingInterpreter.LoadFunc loadFunc, Context context);\n+    void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                   LoadFunc loadFunc, SegmentAllocator allocator);\n@@ -498,2 +404,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -521,2 +427,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -553,2 +459,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -583,2 +489,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -598,2 +504,2 @@\n-        private static MemorySegment copyBuffer(MemorySegment operand, long size, long alignment, Context context) {\n-            return context.allocator().allocate(size, alignment)\n+        private static MemorySegment copyBuffer(MemorySegment operand, long size, long alignment, SegmentAllocator allocator) {\n+            return allocator.allocate(size, alignment)\n@@ -616,2 +522,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -619,1 +525,1 @@\n-            MemorySegment copy = copyBuffer(operand, size, alignment, context);\n+            MemorySegment copy = copyBuffer(operand, size, alignment, allocator);\n@@ -629,2 +535,2 @@\n-        private static MemorySegment allocateBuffer(long size, long alignment, Context context) {\n-            return context.allocator().allocate(size, alignment);\n+        private static MemorySegment allocateBuffer(long size, long alignment, SegmentAllocator allocator) {\n+            return allocator.allocate(size, alignment);\n@@ -644,3 +550,3 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n-            stack.push(allocateBuffer(size, alignment, context));\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n+            stack.push(allocateBuffer(size, alignment, allocator));\n@@ -671,2 +577,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -697,2 +603,3 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n+            MemorySegment segment = Utils.longToAddress((long) stack.pop(), size, align);\n@@ -700,3 +607,1 @@\n-                stack.push(Utils.longToAddress((long) stack.pop(), size, align, context.scope()));\n-            } else {\n-                stack.push(Utils.longToAddress((long) stack.pop(), size, align));\n+                segment = segment.reinterpret(((Arena) allocator).scope(), null);\n@@ -704,0 +609,1 @@\n+            stack.push(segment);\n@@ -726,2 +632,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -741,2 +647,2 @@\n-            public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                                  BindingInterpreter.LoadFunc loadFunc, Context context) {\n+            public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                                  LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -786,2 +692,2 @@\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n+        public void interpret(Deque<Object> stack, StoreFunc storeFunc,\n+                              LoadFunc loadFunc, SegmentAllocator allocator) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":35,"deletions":129,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.foreign.SegmentAllocator;\n@@ -33,1 +34,1 @@\n-    static void unbox(Object arg, List<Binding> bindings, StoreFunc storeFunc, Binding.Context context) {\n+    static void unbox(Object arg, List<Binding> bindings, StoreFunc storeFunc, SegmentAllocator allocator) {\n@@ -38,1 +39,1 @@\n-            b.interpret(stack, storeFunc, null, context);\n+            b.interpret(stack, storeFunc, null, allocator);\n@@ -42,1 +43,1 @@\n-    static Object box(List<Binding> bindings, LoadFunc loadFunc, Binding.Context context) {\n+    static Object box(List<Binding> bindings, LoadFunc loadFunc, SegmentAllocator allocator) {\n@@ -45,1 +46,1 @@\n-            b.interpret(stack, null, loadFunc, context);\n+            b.interpret(stack, null, loadFunc, allocator);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingInterpreter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -75,5 +75,4 @@\n-    private static final String BINDING_CONTEXT_DESC = Binding.Context.class.descriptorString();\n-    private static final String OF_BOUNDED_ALLOCATOR_DESC = methodType(Binding.Context.class, long.class).descriptorString();\n-    private static final String OF_SCOPE_DESC = methodType(Binding.Context.class).descriptorString();\n-    private static final String ALLOCATOR_DESC = methodType(SegmentAllocator.class).descriptorString();\n-    private static final String SCOPE_DESC = methodType(MemorySessionImpl.class).descriptorString();\n+    private static final String ARENA_DESC = Arena.class.descriptorString();\n+    private static final String NEW_BOUNDED_ARENA_DESC = methodType(Arena.class, long.class).descriptorString();\n+    private static final String NEW_EMPTY_ARENA_DESC = methodType(Arena.class).descriptorString();\n+    private static final String SCOPE_DESC = methodType(MemorySegment.Scope.class).descriptorString();\n@@ -282,1 +281,1 @@\n-            emitInvokeStatic(Binding.Context.class, \"ofBoundedAllocator\", OF_BOUNDED_ALLOCATOR_DESC);\n+            emitInvokeStatic(SharedUtils.class, \"newBoundedArena\", NEW_BOUNDED_ARENA_DESC);\n@@ -284,1 +283,1 @@\n-            emitInvokeStatic(Binding.Context.class, \"ofScope\", OF_SCOPE_DESC);\n+            emitInvokeStatic(SharedUtils.class, \"newEmptyArena\", NEW_EMPTY_ARENA_DESC);\n@@ -286,1 +285,1 @@\n-            emitGetStatic(Binding.Context.class, \"DUMMY\", BINDING_CONTEXT_DESC);\n+            emitGetStatic(SharedUtils.class, \"DUMMY_ARENA\", ARENA_DESC);\n@@ -556,1 +555,3 @@\n-        emitInvokeVirtual(Binding.Context.class, \"scope\", SCOPE_DESC);\n+        emitCheckCast(Arena.class);\n+        emitInvokeInterface(Arena.class, \"scope\", SCOPE_DESC);\n+        emitCheckCast(MemorySessionImpl.class);\n@@ -562,1 +563,0 @@\n-        emitInvokeVirtual(Binding.Context.class, \"allocator\", ALLOCATOR_DESC);\n@@ -568,1 +568,2 @@\n-        emitInvokeVirtual(Binding.Context.class, \"close\", CLOSE_DESC);\n+        emitCheckCast(Arena.class);\n+        emitInvokeInterface(Arena.class, \"close\", CLOSE_DESC);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.Arena;\n@@ -151,4 +152,4 @@\n-        Binding.Context unboxContext = callingSequence.allocationSize() != 0\n-                ? Binding.Context.ofBoundedAllocator(callingSequence.allocationSize())\n-                : Binding.Context.DUMMY;\n-        try (unboxContext) {\n+        Arena unboxArena = callingSequence.allocationSize() != 0\n+                ? SharedUtils.newBoundedArena(callingSequence.allocationSize())\n+                : SharedUtils.DUMMY_ARENA;\n+        try (unboxArena) {\n@@ -162,1 +163,1 @@\n-                returnBuffer = unboxContext.allocator().allocate(callingSequence.returnBufferSize());\n+                returnBuffer = unboxArena.allocate(callingSequence.returnBufferSize());\n@@ -170,1 +171,1 @@\n-                        (storage, type, value) -> leafArgs[invData.argIndexMap.get(storage)] = value, unboxContext);\n+                        (storage, type, value) -> leafArgs[invData.argIndexMap.get(storage)] = value, unboxArena);\n@@ -191,1 +192,1 @@\n-                        }, Binding.Context.ofAllocator(allocator));\n+                        }, allocator);\n@@ -194,1 +195,1 @@\n-                        Binding.Context.ofAllocator(allocator));\n+                        allocator);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.lang.foreign.Arena;\n@@ -46,0 +47,1 @@\n+import java.lang.foreign.MemorySegment.Scope;\n@@ -81,0 +83,17 @@\n+    public static final Arena DUMMY_ARENA = new Arena() {\n+        @Override\n+        public Scope scope() {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public MemorySegment allocate(long byteSize) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void close() {\n+            \/\/ do nothing\n+        }\n+    };\n+\n@@ -342,0 +361,43 @@\n+    public static Arena newBoundedArena(long size) {\n+        return new Arena() {\n+            final Arena arena = Arena.ofConfined();\n+            final SegmentAllocator slicingAllocator = SegmentAllocator.slicingAllocator(arena.allocate(size));\n+\n+            @Override\n+            public Scope scope() {\n+                return arena.scope();\n+            }\n+\n+            @Override\n+            public void close() {\n+                arena.close();\n+            }\n+\n+            @Override\n+            public MemorySegment allocate(long byteSize, long byteAlignment) {\n+                return slicingAllocator.allocate(byteSize, byteAlignment);\n+            }\n+        };\n+    }\n+\n+    public static Arena newEmptyArena() {\n+        return new Arena() {\n+            final Arena arena = Arena.ofConfined();\n+\n+            @Override\n+            public Scope scope() {\n+                return arena.scope();\n+            }\n+\n+            @Override\n+            public void close() {\n+                arena.close();\n+            }\n+\n+            @Override\n+            public MemorySegment allocate(long byteSize, long byteAlignment) {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.Arena;\n@@ -143,3 +144,3 @@\n-        Binding.Context allocator = invData.callingSequence.allocationSize() != 0\n-                ? Binding.Context.ofBoundedAllocator(invData.callingSequence.allocationSize())\n-                : Binding.Context.ofScope();\n+        Arena allocator = invData.callingSequence.allocationSize() != 0\n+                ? SharedUtils.newBoundedArena(invData.callingSequence.allocationSize())\n+                : SharedUtils.newEmptyArena();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}