{"files":[{"patch":"@@ -55,1 +55,0 @@\n-import jdk.internal.misc.ScopedMemoryAccess;\n@@ -57,1 +56,0 @@\n-import jdk.internal.reflect.Reflection;\n@@ -438,1 +436,5 @@\n-     * {@return the Java array associated with this memory segment, if any}\n+     * Returns the Java object stored in the on-heap memory region backing this memory segment, if any. For instance, if this\n+     * memory segment is a heap segment created with the {@link #ofArray(byte[])} factory method, this method will return the\n+     * {@code byte[]} object which was used to obtain the segment. This method returns an empty {@code Optional} value\n+     * if either this segment is a {@linkplain #isNative() native} segment, or if this segment is {@linkplain #isReadOnly() read-only}.\n+     * @return the Java object associated with this memory segment, if any.\n@@ -440,1 +442,1 @@\n-    Optional<Object> array();\n+    Optional<Object> heapBase();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -503,1 +503,1 @@\n-        return \"MemorySegment{ array: \" + array() + \" address:\" + address() + \" limit: \" + length + \" }\";\n+        return \"MemorySegment{ heapBase: \" + heapBase() + \" address:\" + address() + \" limit: \" + length + \" }\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,2 +64,4 @@\n-    public Optional<Object> array() {\n-        return Optional.of(base);\n+    public Optional<Object> heapBase() {\n+        return readOnly ?\n+                Optional.empty() :\n+                Optional.of(base);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    public Optional<Object> array() {\n+    public Optional<Object> heapBase() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-        if (!segment.array().map(a -> a instanceof byte[]).get()) {\n+        if (!segment.heapBase().map(a -> a instanceof byte[]).get()) {\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    public void testNativeSegments(Supplier<MemorySegment> segmentSupplier) {\n+    public void testHeapBase(Supplier<MemorySegment> segmentSupplier) {\n@@ -276,1 +276,3 @@\n-        assertEquals(segment.isNative(), !segment.array().isPresent());\n+        assertEquals(segment.isNative(), !segment.heapBase().isPresent());\n+        segment = segment.asReadOnly();\n+        assertTrue(segment.heapBase().isEmpty());\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}