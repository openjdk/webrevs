{"files":[{"patch":"@@ -112,2 +112,4 @@\n- * layout}. Depending on the ABI implemented by the native linker, additional {@linkplain MemoryLayout#paddingLayout(long) padding}\n- * member layouts might be required to conform to the size and alignment constraint of a composite type definition in C.\n+ * layout}. When defining a struct or union layout, clients must pay attention to the size and alignment constraint\n+ * of the corresponding composite type definition in C. For instance, padding between two struct fields\n+ * must be modelled explicitly, by adding an adequately sized {@linkplain PaddingLayout padding layout} member\n+ * to the resulting struct layout.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}