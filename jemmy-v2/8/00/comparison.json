{"files":[{"patch":"@@ -1,1 +1,4 @@\n-\/build\/\n+build\n+.idea\n+jemmy-v2.iml\n+out\n","filename":".gitignore","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,16 @@\n+# Jemmy Swing UI test automation library\n+\n+Jemmy is a Java library which provides API to simulate user actions on Swing\/AWT UI.\n+\n+Base concept of the library design is \"Operator\" class proxies.\n+\n+A code could look something like this:\n+```\n+var window = new JFrameOperator(\"My application\");\n+new JMenuBarOperator(window).pushMenu(\"Help\/About\");\n+var dialog = new JDialogOperator(\"About my application\");\n+new JLabelOperator(dialog, \"My application is very good!\");\n+new JButtonOperator(dialog, \"OK\").push();\n+```\n+\n+See tutorial for more usage examples.\n\\ No newline at end of file\n","filename":"README.md","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+<!doctype html public \"-\/\/w3c\/\/dtd html 4.0 transitional\/\/en\">\n+<html>\n+  <head>\n+    <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=iso-8859-1\">\n+    <title>Jemmy Module - Samples<\/title>\n+    <!--link REL=\"Stylesheet\" HREF=\"http:\/\/www.netbeans.org\/netbeans.css\" TYPE=\"text\/css\"-->\n+  <\/head>\n+  <body>\n+\n+    <h1>\n+      Jemmy Module - Samples<\/h1>\n+    To run any sample you should <a href=\"https:\/\/jemmy.dev.java.net\/servlets\/ProjectDocumentList\">download<\/a>\n+    Jemmy first. \n+    <h2>Samples using GUIBrowser application<\/h2>\n+    Run commands:\n+    <br><tt>javac -classpath \"jemmy_classes_location\" \"sample_name\".java<\/tt> and\n+    <br><tt>java -classpath \"jemmy_classes_location\" \"sample_name\"<\/tt><br><br>\n+    All samples use the GUI browser application as an example of an application to be tested.<br>\n+    <br>If it's unclear what the sample does, you can run the application:\n+    <br><tt>java -classpath jemmy_classes_location org.netbeans.jemmy.explorer.GUIBrowser<\/tt>\n+    <br>and repeat the test manually.<br><br>\n+    <tt><a href=\"samples\/WaitWindowSample.java\">WaitWindowSample.java<\/a><\/tt> -\n+    How to find a frame.<br><br>\n+    <tt><a href=\"samples\/WaitDialogSample.java\">WaitDialogSample.java<\/a><\/tt> -\n+    How to find a dialog.<br><br>\n+    <tt><a href=\"samples\/FindComponentsSample.java\">FindComponentsSample.java<\/a><\/tt> -\n+    How to find components.<br><br>\n+    <tt><a href=\"samples\/ActionsSample.java\">ActionsSample.java<\/a><\/tt> -\n+    Shows some actions.<br><br>\n+    <tt><a href=\"samples\/ResourceSample.java\">ResourceSample.java<\/a>,\n+      <a href=\"samples\/resourcesample.txt\">resourcesample.txt<\/a><\/tt> -\n+    The way to keep string resources.<br><br>\n+    <tt><a href=\"samples\/TableActionsSample.java\">TableActionsSample.java<\/a><\/tt> -\n+    Some examples show how to use JTableOperator.<br><br>\n+    <tt><a href=\"samples\/TreeActionsSample.java\">TreeActionsSample.java<\/a><\/tt> -\n+    Some examples show how to use JTreeOperator.<br><br>\n+    <tt><a href=\"samples\/QueueUsingSample.java\">QueueUsingSample.java<\/a><\/tt> -\n+    Simple example shows how to treat the event queue from a test.<br><br>\n+    <tt><a href=\"samples\/ModalDialogSample.java\">ModalDialogSample.java<\/a><\/tt> -\n+    What nonblocking methods are used for.<br><br>\n+    <tt><a href=\"samples\/GrabImageAndXMLSample.java\">GrabImageAndXMLSample.java<\/a><\/tt> -\n+    Tools to help find the cause of a failure.<br>\n+    <!--h2>Sample in JUnit format<\/h2>\n+    <a href=\"samples\/RunnerTest.java\">RunnerTest<\/a> test actually tests <code>junit.swingui.TestRunner<\/code>\n+    class checking how it treats <a href=\"samples\/MyTest.java\">MyTest<\/a><br><br>\n+    To run :<br>\n+    1. Download junit.<br>\n+    2. Download jemmy.<br>\n+    3. Add junit.jar and jemmy.jar to classpath.<br>\n+    4. Compile MyTest.java and RunnerTest.java<br>\n+    5. Run <code>java junit.textui.TestRunner RunnerTest<\/code>.<br-->\n+  <\/body>\n+<\/html>\n","filename":"doc\/samples.html","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class ActionsSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+\n+            new JButtonOperator(mainFrame, \"Reload In\").push();\n+            new JLabelOperator(mainFrame, \"Reloaded\");\n+\n+            JTreeOperator tree = new JTreeOperator(mainFrame);\n+\n+            \/\/click in the middle of the tree\n+            tree.clickMouse();\n+\n+            \/\/collapse node\n+            tree.collapsePath(tree.findPath(\"\", \"|\"));\n+\n+            \/\/expand node\n+            tree.expandPath(tree.findPath(\"\", \"|\"));\n+\n+            \/\/select node\n+            tree.selectPath(tree.findPath(\"GUI Browser\", \"|\"));\n+\n+            JTextFieldOperator testField = new JTextFieldOperator(mainFrame);\n+\n+            \/\/type new value in the text field\n+            testField.clearText();\n+            testField.typeText(\"3\");\n+\n+            JTextAreaOperator testArea = new JTextAreaOperator(mainFrame);\n+\n+            \/\/select text in the text area\n+            testArea.selectText(\"toString\");\n+\n+            \/\/puch button\n+            new JButtonOperator(mainFrame, \"Reload\").push();\n+\n+            \/\/wait \"Reloaded\" footer\n+            new JLabelOperator(mainFrame, \"Reloaded\");\n+\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"ActionsSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/ActionsSample.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+import java.io.FileNotFoundException;\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+import org.netbeans.jemmy.util.Dumper;\n+\n+public class FindComponentsSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+\n+            new JButtonOperator(mainFrame, \"Reload in\").push();\n+            new JLabelOperator(mainFrame, \"Reloaded\");\n+\n+            \/\/find JTree\n+            \/\/we can find any:\n+            JTreeOperator tree = new JTreeOperator(mainFrame);\n+\n+            \/\/or by selected node:\n+            tree.selectPath(tree.findPath(\"GUI Browser\", \"|\"));\n+            new JTreeOperator(mainFrame, \"GUI Browser\");\n+\n+            \/\/and couple of text components:\n+            new JTextComponentOperator(mainFrame, \"0\");\n+            new JTextComponentOperator(mainFrame, \"toString\");\n+\n+            \/\/but one of them is a test field:\n+            new JTextFieldOperator(mainFrame);\n+\n+            \/\/and another one is a text area:\n+            new JTextAreaOperator(mainFrame);\n+\n+            \/\/it's good idea to search buttons by text:\n+            new AbstractButtonOperator(mainFrame, \"View\");\n+\n+            \/\/but not necessarily\n+            new JButtonOperator(mainFrame);\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            try {\n+                Dumper.dumpAll(\"\/tmp\/aaa.xml\");\n+            } catch (FileNotFoundException ex) {\n+                ex.printStackTrace();\n+            }\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"FindComponentsSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/FindComponentsSample.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+import org.netbeans.jemmy.util.*;\n+\n+public class GrabImageAndXMLSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+            new JMenuBarOperator(mainFrame).pushMenuNoBlock(\"Tools|Properties\", \"|\");\n+\n+            \/\/grab image\n+            PNGEncoder.captureScreen(System.getProperty(\"user.dir\") +\n+                                     System.getProperty(\"file.separator\") +\n+                                     \"screen.png\");\n+\n+            \/\/grab component state\n+            Dumper.dumpAll(System.getProperty(\"user.dir\") +\n+                           System.getProperty(\"file.separator\") +\n+                           \"dump.xml\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"GrabImageAndXMLSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/GrabImageAndXMLSample.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestResult;\n+import junit.framework.TestSuite;\n+\n+public class MyTest extends TestCase {\n+    public MyTest(String name) {\n+        super(name);\n+    }\n+    public void testPass() {\n+        System.out.println(\"Test supposed to be passed\");\n+    }\n+    public void testFail() {\n+        System.out.println(\"Test supposed to be failed\");\n+        fail();\n+    }\n+    \/*\n+    public static TestSuite suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(new MyTest(\"testPass\"));\n+        suite.addTest(new MyTest(\"testFail\"));\n+        return(suite);\n+    }\n+    *\/\n+}\n","filename":"doc\/samples\/MyTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class QueueUsingSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            \/\/start application\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            \/\/wait frame\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+\n+            \/\/wait tree in it\n+            JTreeOperator tree = new JTreeOperator(mainFrame);\n+\n+            \/\/get soumething to be shown\n+            new JButtonOperator(mainFrame, \"Reload In\").pushNoBlock();\n+\n+            \/\/wait for the operation to be completed\n+            new QueueTool().waitEmpty(100);\n+\n+            \/\/since queue is empty, frame tree has already been loaded and displayed.\n+            \/\/print number of lines. Should be 2\n+            System.out.println(\"Lines in the tree: \" + tree.getRowCount());\n+\n+            \/\/select something\n+            tree.selectRow(1);\n+\n+            \/\/push menu\n+            new JButtonOperator(mainFrame, \"View\").push();\n+\n+            \/\/wait for queue to be empty\n+            new QueueTool().waitEmpty(100);\n+\n+            \/\/since queue is empty, frame has already been created and displayed.\n+            \/\/find (not wait) second window using low-level functionality\n+            System.out.println(\"Second frame title: \" +\n+                    JFrameOperator.findJFrame(new JFrameOperator.FrameByTitleFinder(\"\"), 1).getTitle());\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"QueueUsingSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/QueueUsingSample.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class ResourceSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            \/\/load bundle\n+            Bundle bundle = new Bundle();\n+            bundle.loadFromFile(System.getProperty(\"user.dir\") +\n+                                System.getProperty(\"file.separator\") +\n+                                \"resourcesample.txt\");\n+\n+            new ClassReference(bundle.getResource(\"guibrowser.main_class\")).\n+                startApplication();\n+\n+            JFrameOperator mainFrame =\n+                new JFrameOperator(bundle.getResource(\"guibrowser.main_window\"));\n+\n+            new JButtonOperator(mainFrame, bundle.getResource(\"guibrowser.reload_button\")).push();\n+            new JLabelOperator(mainFrame, bundle.getResource(\"guibrowser.reloaded_label\"));\n+\n+            new JTreeOperator(mainFrame).selectRow(1);\n+\n+            new JButtonOperator(mainFrame, bundle.getResource(\"show_window_hierarchy\")).push();\n+\n+            new JFrameOperator(1);\n+\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"ResourceSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/ResourceSample.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+import javax.swing.tree.TreePath;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestResult;\n+import junit.framework.TestSuite;\n+\n+import org.netbeans.jemmy.ClassReference;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.JemmyProperties;\n+\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.operators.JTreeOperator;\n+\n+\/*\n+ * Here is an example how Jemmy could be used for GUI application testing.\n+ * This examples tests some basic functionality of junit.swingui.TestRunner GUI.\n+ *\n+ * Test uses MyTest which contains two tests: one of them passes, another one\n+ * fails.\n+ *\n+ * What it does is:\n+ * - testWrongTestName test:\n+ *   Types unexisting test, pushs \"Run\" name and checks that TestRunner shows\n+ *   correct status.\n+ * - testMyTest test\n+ *   Runs MyTest test and checks footer and failed test list.\n+ *   Switch to tree page, check that failed test is selected.\n+ * - testGoodSubTest\n+ *   Selects and reruns passed test. Checks footer.\n+ * - testBadSubTest\n+ *   Selects and reruns failed test. Checks footer.\n+ *\/\n+public class RunnerTest extends TestCase {\n+    public RunnerTest(String name) {\n+        super(name);\n+    }\n+    public void testWrongTestName() {\n+        \/\/find main window\n+        JFrameOperator mainWindow = new JFrameOperator(\"JUnit\");\n+\n+        \/\/and text field\n+        JTextFieldOperator testNameField = new JTextFieldOperator(mainWindow);\n+\n+        \/\/type unexisting test name\n+        testNameField.clearText();\n+        testNameField.typeText(\"wrong.test.name\");\n+\n+        \/\/push \"Run\" button\n+        new JButtonOperator(mainWindow, \"Run\").pushNoBlock();\n+\n+        \/\/check footer\n+        new JTextFieldOperator(mainWindow, \"Class not found \\\"wrong.test.name\\\"\");\n+    }\n+    public void testMyTest() {\n+        \/\/find main window\n+        JFrameOperator mainWindow = new JFrameOperator(\"JUnit\");\n+\n+        \/\/and text field\n+        JTextFieldOperator testNameField = new JTextFieldOperator(mainWindow);\n+\n+        \/\/type a test name\n+        \/\/MyTest class has two methods\n+        testNameField.clearText();\n+        testNameField.typeText(\"MyTest\");\n+\n+        \/\/push \"Run\" button.\n+        new JButtonOperator(mainWindow, \"Run\").push();\n+\n+        \/\/synchronization.\n+        \/\/we just know that we will see both \"2\/2\" and\n+        \/\/\"Finished\" labels (those label are really textfields)\n+        new JTextFieldOperator(mainWindow, \"Finished:\");\n+        new JTextFieldOperator(mainWindow, \"2\/2\");\n+\n+        \/\/check that list contains \"testFail(MyTest)\"\n+        new JListOperator(mainWindow, \"testFail(MyTest)\");\n+\n+        \/\/switch to hierarchy page\n+        JTabbedPaneOperator resultTab = new JTabbedPaneOperator(mainWindow);\n+        resultTab.selectPage(\"Test Hierarchy\");\n+\n+        \/\/check that right (failed) node is selected\n+        JTreeOperator testTree = new JTreeOperator(mainWindow, \"testFail\", -1, 0);\n+    }\n+    public void testGoodSubTest() {\n+        \/\/find main window\n+        JFrameOperator mainWindow = new JFrameOperator(\"JUnit\");\n+\n+        \/\/and tree\n+        JTreeOperator testTree = new JTreeOperator(mainWindow);\n+\n+        \/\/select failed test and run it again\n+        TreePath failTest = testTree.findPath(\"testPass\", \"|\");\n+        testTree.selectPath(failTest);\n+        new JButtonOperator(mainWindow, \"Run\", 1).push();\n+\n+        \/\/check footer\n+        new JTextFieldOperator(mainWindow, \"testPass(MyTest) was successful\");\n+    }\n+    public void testBadSubTest() {\n+        \/\/find main window\n+        JFrameOperator mainWindow = new JFrameOperator(\"JUnit\");\n+\n+        \/\/and tree\n+        JTreeOperator testTree = new JTreeOperator(mainWindow);\n+\n+        \/\/select passed test and run it again\n+        TreePath failTest = testTree.findPath(\"testFail\", \"|\");\n+        testTree.selectPath(failTest);\n+        new JButtonOperator(mainWindow, \"Run\", 1).push();\n+\n+        \/\/check footer\n+        new JTextFieldOperator(mainWindow, \"testFail(MyTest) had a failure\");\n+    }\n+    public static Test suite() {\n+        \/\/start the application first\n+        \/\/ClassReference uses reflection so we don't need\n+        \/\/to really import application classes\n+        try {\n+            new ClassReference(\"junit.swingui.TestRunner\").startApplication();\n+\n+            \/\/increase timeouts values to see what's going on\n+            \/\/otherwise everything's happened very fast\n+            JemmyProperties.getCurrentTimeouts().loadDebugTimeouts();\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        \/\/create suite\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(new RunnerTest(\"testWrongTestName\"));\n+        suite.addTest(new RunnerTest(\"testMyTest\"));\n+        suite.addTest(new RunnerTest(\"testGoodSubTest\"));\n+        suite.addTest(new RunnerTest(\"testBadSubTest\"));\n+        return(suite);\n+    }\n+}\n","filename":"doc\/samples\/RunnerTest.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class TableActionsSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+\n+            new JButtonOperator(mainFrame, \"Reload In\").push();\n+            new JLabelOperator(mainFrame, \"Reloaded\");\n+\n+            JTreeOperator tree = new JTreeOperator(mainFrame);\n+            tree.selectPath(tree.findPath(\"GUI Browser\", \"|\"));\n+\n+            new JButtonOperator(mainFrame, \"View\").push();\n+\n+            JFrameOperator viewFrame = new JFrameOperator(\"GUIBrowser\");\n+\n+            new JTabbedPaneOperator(viewFrame).selectPage(\"Properties\");\n+\n+            \/\/find table\n+            JTableOperator table = new JTableOperator(viewFrame);\n+\n+            \/\/find row\n+            int titleRow = table.findCellRow(\"GUI Browser\");\n+\n+            \/\/select cell containing window title\n+            table.selectCell(titleRow, 1);\n+\n+            \/\/change table text\n+            \/\/table.changeCellObject(titleRow, 1, \"That was window title :)\");\n+\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"TableActionsSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/TableActionsSample.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class TreeActionsSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+\n+            new JButtonOperator(mainFrame, \"Reload In\").push();\n+            new JLabelOperator(mainFrame, \"Reloaded\");\n+\n+            JTreeOperator tree = new JTreeOperator(mainFrame);\n+\n+            \/\/click in the middle of the tree\n+            tree.clickMouse();\n+\n+            \/\/collapse node\n+            tree.collapsePath(tree.findPath(\"\", \"|\"));\n+\n+            \/\/expand node\n+            tree.expandPath(tree.findPath(\"\", \"|\"));\n+\n+            \/\/select node\n+            tree.selectPath(tree.findPath(\"GUI Browser\", \"|\"));\n+\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"TreeActionsSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/TreeActionsSample.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class WaitDialogSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            \/\/start application\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            \/\/wait frame\n+            JFrameOperator mainFrame = new JFrameOperator(\"GUI Browser\");\n+            \/\/push menu\n+            \/\/pushMenuNoBlock is used, because dialog is modal\n+            \/\/see tutorial for more information\n+            new JButtonOperator(mainFrame, \"Dump\").pushNoBlock();\n+            \/\/wait dialog\n+            new JDialogOperator(mainFrame, \"Save\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"WaitDialogSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/WaitDialogSample.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+import org.netbeans.jemmy.*;\n+import org.netbeans.jemmy.explorer.*;\n+import org.netbeans.jemmy.operators.*;\n+\n+public class WaitWindowSample implements Scenario {\n+    public int runIt(Object param) {\n+        try {\n+            \/\/start application\n+            new ClassReference(\"org.netbeans.jemmy.explorer.GUIBrowser\").startApplication();\n+            \/\/wait frame\n+            new JFrameOperator(\"GUI Browser\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            return(1);\n+        }\n+        return(0);\n+    }\n+    public static void main(String[] argv) {\n+        String[] params = {\"WaitWindowSample\"};\n+        org.netbeans.jemmy.Test.main(params);\n+    }\n+}\n","filename":"doc\/samples\/WaitWindowSample.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+guibrowser.main_class=org.netbeans.jemmy.explorer.GUIBrowser\n+guibrowser.main_window=GUI Browser\n+guibrowser.reload_button=Reload In ...\n+guibrowser.reloaded_label=Reloaded\n+guibrowser.show_window_hierarchy=View\n+\n","filename":"doc\/samples\/resourcesample.txt","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,257 @@\n+<!DOCTYPE HTML PUBLIC \"-\/\/IETF\/\/DTD HTML\/\/EN\">\n+<html>\n+    <head>\n+        <title>Quick Jemmy tutorial<\/title>\n+        <!--link REL=\"Stylesheet\" HREF=\"http:\/\/www.netbeans.org\/netbeans.css\" TYPE=\"text\/css\"-->\n+    <\/head>\n+    <body>\n+        \n+        <h1>Quick Jemmy tutorial<\/h1>\n+        Table of Contents<br><br>\n+        <a href=\"#compile\">Compiling samples<\/a><br>\n+        <a href=\"#execute\">Sample execution<\/a><br>\n+        <a href=\"#testcreation\">Test class creation<\/a><br>\n+        <a href=\"#appexecution\">Application execution<\/a><br>\n+        <a href=\"#winsearching\">Window searching<\/a><br>\n+        <a href=\"#compsearching\">Component searching<\/a><br>\n+        <a href=\"#compaccess\">Access to swing component<\/a><br>\n+        <a href=\"#compaction\">Actions with component<\/a><br>\n+        <a href=\"#nonblocking\">Nonblocking actions<\/a><br>\n+        <a href=\"#queue\">Event queue using<\/a><br>\n+        <a href=\"#exceptions\">Jemmy exceptions<\/a><br>\n+        <a href=\"#resources\">String resources<\/a><br>\n+        <a href=\"#timeouts\">Timeouts<\/a><br>\n+        <a href=\"#drvers\">Drivers<\/a><br>\n+        <a href=\"#robot\">Robot vs event dispatching.<\/a><br>\n+        <a href=\"#resourcefile\">Timeouts and resources location.<\/a><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"compile\">Compiling samples<\/a><br><br>\n+        <\/font>\n+        <code>javac -classpath &lt;jemmy classes or jar&gt; &lt;sample name&gt;.java<\/code>.<br>\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"execute\">Sample execution<\/a><br><br>\n+        <\/font>\n+        <code>java -classpath &lt;jemmy classes or jar&gt;:&lt;current directory&gt; &lt;sample name&gt<\/code><br>\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"testcreation\">Test class creation<\/a><br><br>\n+        <\/font>\n+        Jemmy does not provide or require a test harness. <br><br>\n+        For the purpose of this tutorial purposes, <code>public int org.netbeans.jemmy.Test<\/code>\n+        is used.<br><br>\n+        Examples: \n+        <code><a href=\"samples\/WaitWindowSample.java\">WaitWindowSample.java<\/a>\n+        or <a href=\"samples.html\">any other sample<\/a><\/code><br><br>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"appexecution\">Application execution<\/a><br><br>\n+        <\/font>\n+        Jemmy test must be executed in the same JVM as the tested application. One way to do it is to run the\n+        application's main method from test through reflection. <code>org.netbeans.jemmy.ClassReference<\/code>\n+        makes it easier.<br><br>\n+        Examples: \n+        <code><a href=\"samples\/WaitWindowSample.java\">WaitWindowSample.java<\/a><\/code>\n+        or <code><a href=\"samples.html\">any other sample<\/a><\/code><br><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"winsearching\">Window searching<\/a><br><br>\n+        <\/font>\n+        A swing component first need to be found. A window needs to be found first.<br><br>\n+        <font size=\"-1\">\n+            Note:<br>\n+            Java UI application is an multi-thread application itself. The test thread is yet another thread.\n+            Wait is performed while the components are looked up.\n+            Check <code>org.netbeans.jemmy.ComponentChooser<\/code> and <code>org.netbeans.jemmy.WindowWaiter<\/code><br><br>\n+        <\/font>\n+        Frame or dialog title is one way to distinguish the required window from others.\n+        Check <code>org.netbeans.jemmy.operators.JFrameOperator<\/code> and\n+        <code>org.netbeans.jemmy.operators.JDialogOperator<\/code>\n+        for more ways to find windows.<br><br>\n+        <font size=\"-1\">\n+            Note:<br>\n+            Jemmy provides many more searching capabilities than just be the title.\n+        <\/font>\n+        Examples: \n+        <code><a href=\"samples\/WaitWindowSample.java\">WaitWindowSample.java<\/a><\/code>, \n+        <code><a href=\"samples\/WaitDialogSample.java\">WaitDialogSample.java<\/a><\/code><br><br>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"compsearching\">Component searching<\/a><br><br>\n+        <\/font>\n+        Components are looked up inside a container.\n+        <code>org.netbeans.jemmy.operators.ComponentOperator<\/code> and all its subclasses\n+        (except operators for window-like components, like popups) have lookup constructors with\n+        <code>org.netbeans.jemmy.operators.ContainerOperator<\/code> parameter.\n+        The rest of the parameters differ from component to component. Most operators\n+        have constructors with <code>java.lang.String<\/code> parameter which defines\n+        a component string resource value.<br><br>\n+        \n+        Examples: <code><a href=\"samples\/FindComponentsSample.java\">FindComponentsSample.java<\/a><\/code><br><br>\n+        <font size=\"-1\">\n+            <code>org.netbeans.jemmy.operator.Operator.StringComparator<\/code><br> sets how the strings are compared\n+            during the lookup. See\n+            <code>org.netbeans.jemmy.operator.Operator.setDefaultStringComparator(org.netbeans.jemmy.operator.Operator.StringComparator)<\/code><br>\n+            and\n+            <code>org.netbeans.jemmy.operator.Operator.setComparator(org.netbeans.jemmy.operator.Operator.StringComparator)<\/code><br><br>\n+        <\/font>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"compaccess\">Access to swing component<\/a><br><br>\n+        <\/font>\n+        All methods of Swing\/AWT components are mapped by corresponding operator. For example,\n+        <code>AbstractButtonOperator.getText()<\/code>\n+        maps <code>AbstractButton.getText()<\/code> by invoking it through the <a href=\"#queue\">event queue<\/a>.<br><br>\n+        <font size=\"-1\">Note:<br>\n+            Operator's mapping method cannot be used if the code\n+            itself is executed inside the queue. Using an operator's mapping method\n+            will result in a deadlock in this case.<br>\n+        <\/font>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"compaction\">Actions with component<\/a><br><br>\n+        <\/font>\n+        <code>org.netbeans.jemmy.operators.ComponentOperator<\/code> contains all methods\n+        simulating user input by mouse and keyboard operations. Other operators\n+        contain most methods necessary to drive components.<br><br>\n+        Examples: \n+        <code><a href=\"samples\/ActionsSample.java\">ActionsSample.java<\/a><\/code>, \n+        <code><a href=\"samples\/TreeActionsSample.java\">TreeActionsSample.java<\/a><\/code>, \n+        <code><a href=\"samples\/TableActionsSample.java\">TableActionsSample.java<\/a><\/code><br><br>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"nonblocking\">Nonblocking actions<\/a><br><br>\n+        <\/font>\n+        This section applies to non-robot mode only. Robot operations work\n+        when either any modal dialogs are displayed or not.<br><br>\n+        If a modal dialog is shown as a result of an action (such as button\n+        pushing), the push method will never exit causing the execution to\n+        be blocked. One of the nonblocking methods have to be used:<br>\n+        <code>org.netbeans.jemmy.operators.AbstractButtonOperator.pushNoBlock()<\/code><br>\n+        <code>org.netbeans.jemmy.operators.AbstractButtonOperator.changeSelectionNoBlock(boolean)<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuBarOperator.pushMenuNoBlock(ComponentChooser[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuBarOperator.pushMenuNoBlock(String[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuBarOperator.pushMenuNoBlock(String path, String delim)<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuOperator.pushMenuNoBlock(ComponentChooser[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuOperator.pushMenuNoBlock(String[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JMenuOperator.pushMenuNoBlock(String, String)<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JPopupMenuOperator.pushMenuNoBlock(ComponentChooser[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JPopupMenuOperator.pushMenuNoBlock(String[])<\/code><br>\n+        <code>org.netbeans.jemmy.operators.JPopupMenuOperator.pushMenuNoBlock(String, String)<\/code><br><br>\n+        \n+        Examples: \n+        <code><a href=\"samples\/WaitDialogSample.java\">WaitDialogSample.java<\/a><\/code>,\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"queue\">Using the Event queue<\/a><br><br>\n+        <\/font>\n+        Event queue can be\n+        used for test stabilization purposes. Read <a href=\"queue.html\">\"EventQueue using\"<\/a>\n+        for more information.<br><br>\n+        Example: <code><a href=\"samples\/QueueUsingSample.java\">QueueUsingSample.java<\/a><\/code><br><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"exceptions\">Jemmy exceptions<\/a><br><br>\n+        <\/font>\n+        Any unsuccessful operation in Jemmy exits with an exception. All exception\n+        classes extend <code>org.netbeans.jemmy.JemmyException<\/code>.<br><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"resources\">String resources<\/a><br><br>\n+        <\/font>\n+        String resources like button text, window titles, tree paths, ... could\n+        be moved into special resource files.<br><br>\n+        Examples:<br>\n+        <code><a href=\"samples\/ResourceSample.java\">ResourceSample.java<\/a><\/code>, \n+        <code><a href=\"samples\/resourcesample.txt\">resourcesample.txt<\/a><\/code><br><br>\n+        \n+        Also see from a file by using the <code>org.netbeans.jemmy.Bundle<\/code>,\n+        <code>org.netbeans.jemmy.BundleManager<\/code>.<br><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a name=\"drvers\">Drivers<\/a><br><br>\n+        <\/font>\n+        Actual implementation uf thr input simulation is implemented in so called \"drivers\".\n+        (<code>org.netbeans.jemmy.drivers<\/code> package).<br><br>\n+        For example, button pushing is implemented by a <code>ButtonDriver<\/code> implementation,\n+        which has <code>press<\/code>, <code>release<\/code> and <code>push<\/code> methods.\n+        The implementation could do pushing using mouse, keyboard, or just invoke \n+        AbstractButton.doClick() method.<br><br>\n+\n+        Drivers are registered with Jemmy by <code>DriverManager<\/code>.<br><br>\n+\n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"timeouts\">Timeouts<\/a><br><br>\n+        <\/font>\n+        Jemmy specifies various timeouts to define maximum wait times and values for delay between various actions.\n+        Timeouts used by a class are usually described in javadoc for the class. Increasing timeout values, generally\n+        speaking, makes tests more reliable. With the larger timeouts, tests take longer to fail.<br><br>\n+        <font size=\"-1\">\n+            Note:<br>\n+            If waiting was not finished successfully in an appropriate\n+            time, <code>org.netbeans.jemmy.TimeoutExpiredException<\/code> will be thrown.<br><br>\n+        <\/font>\n+        Examples of timeouts:<br>\n+        ComponentOperator.PushKeyTimeout - time to sleep between key pressing and releasing.<br>\n+        Waiter.TimeDelta - default time to sleep between attempts.<br>\n+        WindowWaiter.WaitWindowTimeout - maximum time to wait window.<br>\n+        JTreeOperator.WaitNodeExpandedTimeout - maximum time to wait next node\n+        loaded during tree operations<br><br>\n+        Timeouts values can be stored in file in properties format:<br>\n+        <pre>\n+Waiter.TimeDelta=1\n+WindowWaiter.WaitWindowTimeout=180000\n+        <\/pre>\n+        See <code>org.netbeans.jemmy.Timeouts.load(String)<\/code>.<br><br>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"robot\">Robot vs event dispatching<\/a><br><br>\n+        <\/font>\n+        Jemmy test can be executed using <code>java.awt.Robot<\/code>, as well as without. In the second\n+        case, Jemmy dispatches events directly to components.<br>\n+        Robot mode is more \"honest\" approach. If something cannot be done\n+        manually, it cannot be done automatically. This gives a certainty that the\n+        only tests that passed are the ones that can be reproduced manually. And\n+        there is no such thing as, what cannot be done by robot mode can only be\n+        done manually.<br>\n+        \"Dispatching\" mode works even if application window is covered by another window.\n+        It can work on locked display (depends on operating\n+        system and window manager). It is also a little faster. Finally, it is way more stable.\n+        See <a href=\"queue.html\">more onn this.<\/a>\n+        <br>\n+        \"Dispatching\" mode is used by default. Robot mode can be turned on like this:<br>\n+        <code>JemmyProperties.setCurrentDispatchingMode(JemmyProperties.ROBOT_MODEL_MASK)<\/code><br>\n+        Or from command line:<br>\n+        <code>java ... -Djemmy.robot_dispatching=on ...<\/code><br><br>\n+        \n+        <hr>\n+        <font size=\"+1\">\n+            <a NAME=\"resourcefile\">Timeouts and resources location.<\/a><br><br>\n+        <\/font>\n+        Jemmy recognize one more option from command line: <code>jemmy.properties<\/code>.\n+        Value of this option must be file name containing two (or just one of them)\n+        strings:<br>\n+        <pre>\n+TIMEOUTS_FILE=[file containing timeouts]\n+RESOURCE_FILE=[file containing string resources]\n+        <\/pre>\n+        These string defines files to load <a href=\"#timeouts\">timeouts<\/a>\n+        and <a href=\"#resources\">string resources<\/a> resources from.<br><br>\n+        \n+        <hr>\n+    <\/body>\n+<\/html>\n","filename":"doc\/tutorial.html","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"}]}