{"files":[{"patch":"@@ -57,0 +57,5 @@\n+        <dependency>\n+            <groupId>org.openjdk.jcstress<\/groupId>\n+            <artifactId>jcstress-samples<\/artifactId>\n+            <version>${project.version}<\/version>\n+        <\/dependency>\n@@ -65,1 +70,1 @@\n-        <jmh.version>1.36<\/jmh.version>\n+        <jmh.version>1.37<\/jmh.version>\n","filename":"jcstress-benchmarks\/pom.xml","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jcstress;\n+\n+import org.openjdk.jcstress.samples.primitives.lazy.*;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 5, jvmArgs = {\"-Xmx1g\", \"-Xms1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+public class LazyBench {\n+\n+    Lazy<Object> lazy;\n+\n+    @Param({\"broken-factory\", \"broken-nulls\", \"basic\", \"broken-one-shot\", \"wrapper-one-shot\", \"fenced-one-shot\"})\n+    String impl;\n+\n+    public Lazy<Object> createLazy() {\n+        switch (impl) {\n+            case \"broken-factory\":\n+                return new Lazy_01_BrokenFactory.BrokenFactoryLazy<>(() -> new Object());\n+            case \"broken-nulls\":\n+                return new Lazy_02_BrokenNulls.BrokenNullsLazy<>(() -> new Object());\n+            case \"basic\":\n+                return new Lazy_03_Basic.BasicLazy<>(() -> new Object());\n+            case \"broken-one-shot\":\n+                return new Lazy_04_BrokenOneShot.BrokenOneShotLazy<>(() -> new Object());\n+            case \"wrapper-one-shot\":\n+                return new Lazy_05_WrapperOneShot.FinalWrapperLazy<>(() -> new Object());\n+            case \"fenced-one-shot\":\n+                return new Lazy_06_FencedOneShot.FencedOneShot<>(() -> new Object());\n+            default:\n+                throw new IllegalArgumentException(\"Unknown factory: \" + impl);\n+        }\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        lazy = createLazy();\n+    }\n+\n+    @Benchmark\n+    public Object uncontended() {\n+        return lazy.get();\n+    }\n+\n+    @Benchmark\n+    @Threads(Threads.MAX)\n+    public Object contended() {\n+        return lazy.get();\n+    }\n+\n+}\n","filename":"jcstress-benchmarks\/src\/main\/java\/org\/openjdk\/jcstress\/LazyBench.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jcstress;\n+\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.FinalSingleton;\n+import org.openjdk.jcstress.samples.primitives.singletons.*;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.Factory;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.Singleton;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 5, jvmArgs = {\"-Xmx1g\", \"-Xms1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+public class SingletonBench {\n+\n+    Factory<Singleton> factory;\n+\n+    @Param({\"unsynchronized\", \"broken-volatile\", \"inefficient-cas\", \"inefficient-synchronized\",\n+            \"dcl\", \"acquire-release-dcl\", \"broken-non-volatile-dcl\", \"final-wrapper\", \"holder\",\n+            \"thread-local-witness\"})\n+    String impl;\n+\n+    public Factory<Singleton> createFactory() {\n+        switch (impl) {\n+            case \"unsynchronized\":\n+                return new Singleton_01_BrokenUnsynchronized.Unsynchronized<>();\n+            case \"broken-volatile\":\n+                return new Singleton_02_BrokenVolatile.VolatileS<>();\n+            case \"inefficient-cas\":\n+                return new Singleton_03_InefficientCAS.CAS<>();\n+            case \"inefficient-synchronized\":\n+                return new Singleton_04_InefficientSynchronized.Synchronized<>();\n+            case \"dcl\":\n+                return new Singleton_05_DCL.DCL<>();\n+            case \"acquire-release-dcl\":\n+                return new Singleton_06_AcquireReleaseDCL.AcquireReleaseDCL<>();\n+            case \"broken-non-volatile-dcl\":\n+                return new Singleton_07_BrokenNonVolatileDCL.NonVolatileDCL<>();\n+            case \"final-wrapper\":\n+                return new Singleton_08_FinalWrapper.FinalWrapper<>();\n+            case \"holder\":\n+                return new Singleton_09_Holder.FinalHolderHolder();\n+            case \"thread-local-witness\":\n+                return new Singleton_10_ThreadLocalWitness.ThreadLocalWitness<>();\n+            default:\n+                throw new IllegalArgumentException(\"Unknown factory: \" + impl);\n+        }\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        factory = createFactory();\n+    }\n+\n+    @Benchmark\n+    public Object uncontended() {\n+        return factory.get(() -> new FinalSingleton(\"data\"));\n+    }\n+\n+    @Benchmark\n+    @Threads(Threads.MAX)\n+    public Object contended() {\n+        return factory.get(() -> new FinalSingleton(\"data\"));\n+    }\n+\n+}\n","filename":"jcstress-benchmarks\/src\/main\/java\/org\/openjdk\/jcstress\/SingletonBench.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.HolderFactory;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+public class Lazy_01_BrokenFactory {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_01\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        This test starts the discussion on more advanced topic: creating Lazy<T>, a lazy factory for the object.\n+        Lazy<T> looks deceptively like a singleton, and it is nearly that. Look through Singleton samples before\n+        continuing here.\n+\n+        We will start building out the implementation that is based on double-checked locking from Singleton_05_DCL.\n+        This time we would give a supplier to a constructor.\n+\n+        See Lazy.map(...) to understand the state that test verifies.\n+     *\/\n+\n+    public static class BrokenFactoryLazy<T> implements Lazy<T> {\n+        private Supplier<T> factory;\n+        private volatile T instance;\n+\n+        public BrokenFactoryLazy(Supplier<T> factory) {\n+            this.factory = factory;\n+        }\n+\n+        @Override\n+        public T get() {\n+            T t = instance;\n+            if (t != null) {\n+                return t;\n+            }\n+\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = factory.get();\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        As expected, this performs well on all platforms.\n+\n+        x86_64, AArch64:\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  721,594,824  100.00%  Acceptable  Seeing the proper data.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data, data\"}, expect = ACCEPTABLE, desc = \"Seeing the proper data.\")\n+    public static class Basic {\n+        Lazy<Holder> lazy = new BrokenFactoryLazy<>(new HolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        ...except, wait, it does not work well when we publish the _Lazy instance itself_ via race.\n+        Good implementations should survive this intact. This implementation does not!\n+\n+        AArch64:\n+             RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+               data    721,802,082   29.74%   Acceptable  Trivial.\n+                dup              1   <0.01%  Interesting  Factory is called twice!\n+          exception            109   <0.01%  Interesting  Internal error!\n+          null-lazy  1,705,407,992   70.26%   Acceptable  Lazy instance not seen yet.\n+\n+        There are two major problems with a common cause. Since `Lazy.factory` field is not final,\n+        publishing `Lazy` instance racily leaves that field in bad state. Sometimes we see `factory == null`,\n+        and this causes the internal exception. Sometimes we see `factory != null`, but the internal Supplier\n+        state is broken: it _thinks_ it was already called (`HolderSupplier.first == false`)!\n+\n+        This further expands on BasicJMM_08_Finals. `final` fields are not only hygienic practice,\n+        they have concurrent safety implications.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-lazy\", expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    @Outcome(id = \"data\",      expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = \"dup\",       expect = ACCEPTABLE_INTERESTING, desc = \"Supplier barfed.\")\n+    @Outcome(id = \"exception\", expect = ACCEPTABLE_INTERESTING, desc = \"Internal error!\")\n+    public static class RacyOneWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()           { lazy = new BrokenFactoryLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(L_Result r) { r.r1 = Lazy.map(lazy); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_01_BrokenFactory.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.NullHolderFactory;\n+\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+public class Lazy_02_BrokenNulls {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_02\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Now that we know that `factory` should be `final`, consider additional requirement on Lazy<T>.\n+\n+        There is no fundamental reason why factory is not allowed to return `null`. When it does, we need to\n+        pass it well.\n+     *\/\n+\n+    public static class BrokenNullsLazy<T> implements Lazy<T> {\n+        private final Supplier<T> factory;\n+        private volatile T instance;\n+\n+        public BrokenNullsLazy(Supplier<T> factory) {\n+            this.factory = factory;\n+        }\n+\n+        @Override\n+        public T get() {\n+            T t = instance;\n+            if (t != null) {\n+                return t;\n+            }\n+\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = factory.get();\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        The basic test shows that returning `null` from factory exposes a logic bug: since our\n+        \"uninitialized\" state is tracked as `null`, we cannot disambiguate the cases of legitimate `null`-s\n+        returned by factory, and the `null`-s as uninitialized state. So we end up calling the factory\n+        all the time. It would be okay if factory was fully idempotent, but it might not be, and calling\n+        it multiple times is certainly not lazy.\n+\n+        x86_64, AArch64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          dup, null-holder  1,232,127,022   49.91%  Interesting  Factory is called twice!\n+          null-holder, dup  1,236,790,682   50.09%  Interesting  Factory is called twice!\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"null-holder, dup\", \"dup, null-holder\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Factory is called twice!\")\n+    public static class NullHolder {\n+        Lazy<Holder> lazy = new BrokenNullsLazy<>(new NullHolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_02_BrokenNulls.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.HolderFactory;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.NullHolderFactory;\n+\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+\n+public class Lazy_03_Basic {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_03\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Mindful of failures from the previous two examples, we can build a viable implementation like below.\n+        This is a double-checked locking on `set` field. `instance` rides on the release-acquire chain that\n+        stores and loads of `set` form.\n+     *\/\n+\n+    public static class BasicLazy<T> implements Lazy<T> {\n+        private final Supplier<T> factory;\n+        private volatile boolean set;\n+        private T instance;\n+\n+        public BasicLazy(Supplier<T> factory) {\n+            this.factory = factory;\n+        }\n+\n+        @Override\n+        public T get() {\n+            if (set) {\n+                return instance;\n+            }\n+\n+            synchronized (this) {\n+                if (!set) {\n+                    instance = factory.get();\n+                    set = true;\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        As expected, this performs well on all platforms.\n+\n+        x86_64, AArch64:\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  789,875,144  100.00%  Acceptable  Seeing the proper data.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data, data\"}, expect = ACCEPTABLE, desc = \"Seeing the proper data.\")\n+    public static class Basic {\n+        Lazy<Holder> lazy = new BasicLazy<>(new HolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        It also handles nulls from the factory well.\n+\n+        x86_64, AArch64:\n+                            RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          null-holder, null-holder  822,550,984  100.00%  Acceptable  Seeing a null holder.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-holder, null-holder\", expect = ACCEPTABLE, desc = \"Seeing a null holder.\")\n+    public static class NullHolder {\n+        Lazy<Holder> lazy = new BasicLazy<>(new NullHolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        And it survives races on `Lazy` itself well:\n+\n+        x86_64, AArch64:\n+             RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+               data    786,159,357   35.38%  Acceptable  Trivial.\n+          null-lazy  1,435,800,267   64.62%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-lazy\", expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    @Outcome(id = \"data\",      expect = ACCEPTABLE, desc = \"Trivial.\")\n+    public static class RacyOneWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()           { lazy = new BasicLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(L_Result r) { r.r1 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        x86_64, AArch64:\n+                        RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+                    data, data    710,263,631   16.81%  Acceptable  Trivial.\n+               data, null-lazy    727,927,021   17.22%  Acceptable  Lazy instance not seen yet.\n+               null-lazy, data    793,749,671   18.78%  Acceptable  Lazy instance not seen yet.\n+          null-lazy, null-lazy  1,994,531,161   47.19%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data, data\"}, expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = {\"null-lazy, data\", \"data, null-lazy\", \"null-lazy, null-lazy\"}, expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    public static class RacyTwoWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()            { lazy = new BasicLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor3(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_03_Basic.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.HolderFactory;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.NullHolderFactory;\n+\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+public class Lazy_04_BrokenOneShot {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_04\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Lazy_03_Basic gets is a whirlwind of three fields: factory, instance, set. Could we make it better by\n+        signaling initialized state using `factory` field itself? For example, by `null`-ing it out when it\n+        was used? This looks like a great idea, and it also conserves memory by not holding to the factory\n+        once we are done with it.\n+\n+        We can write DCL based on `factory` field then. The release-acquire between releasing factory=null store\n+        after first use and the acquire on fast path should give us the memory ordering we want.\n+     *\/\n+\n+    public static class BrokenOneShotLazy<T> implements Lazy<T> {\n+        private volatile Supplier<T> factory;\n+        private T instance;\n+\n+        public BrokenOneShotLazy(Supplier<T> factory) {\n+            this.factory = factory;\n+        }\n+\n+        @Override\n+        public T get() {\n+            if (factory == null) {\n+                return instance;\n+            }\n+\n+            synchronized (this) {\n+                if (factory != null) {\n+                    instance = factory.get();\n+                    factory = null;\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        ...and it does! The example works well on all platforms.\n+\n+        x86_64, AArch64:\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  745,085,384  100.00%  Acceptable  Seeing the proper data.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = ACCEPTABLE, desc = \"Seeing the proper data.\")\n+    public static class Basic {\n+        Lazy<Holder> lazy = new BrokenOneShotLazy<>(new HolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        ...and it handles nulls for us really well, since we do not depend on `instance` nullity.\n+\n+        x86_64, AArch64:\n+                            RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          null-holder, null-holder  842,580,424  100.00%  Acceptable  Seeing a null holder.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-holder, null-holder\", expect = ACCEPTABLE, desc = \"Seeing a null holder.\")\n+    public static class NullHolder {\n+        Lazy<Holder> lazy = new BrokenOneShotLazy<>(new NullHolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        Except that this implementation is subtly broke under the racy publication of Lazy itself.\n+        Changing `final` to `volatile` for `factory` field give us a *weaker* semantics in constructors:\n+        the store to volatile field in constructor may not be visible under racy publication!\n+        See AdvancedJMM_13_VolatileVsFinal for the basic example of this. So we see this:\n+\n+        AArch64:\n+           RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+             data    654,125,625   29.68%   Acceptable  Trivial.\n+      null-holder             32   <0.01%  Interesting  Seeing uninitialized holder!\n+        null-lazy  1,550,108,527   70.32%   Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data\",        expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = \"null-lazy\",   expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    @Outcome(id = \"null-holder\", expect = ACCEPTABLE_INTERESTING, desc = \"Seeing uninitialized holder!\")\n+    public static class RacyOneWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()           { lazy = new BrokenOneShotLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(L_Result r) { r.r1 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        ...and also the two-way race is also failing:\n+\n+        AArch64:\n+                          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                      data, data    562,737,656   12.85%   Acceptable  Trivial.\n+               data, null-holder             12   <0.01%  Interesting  Seeing uninitialized holder!\n+                 data, null-lazy    695,112,068   15.88%   Acceptable  Lazy instance not seen yet.\n+               null-holder, data             18   <0.01%  Interesting  Seeing uninitialized holder!\n+          null-holder, null-lazy             24   <0.01%  Interesting  Seeing uninitialized holder!\n+                 null-lazy, data    736,499,631   16.82%   Acceptable  Lazy instance not seen yet.\n+          null-lazy, null-holder             34   <0.01%  Interesting  Seeing uninitialized holder!\n+            null-lazy, null-lazy  2,383,387,321   54.44%   Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data, data\"}, expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = {\"null-lazy, data\", \"data, null-lazy\", \"null-lazy, null-lazy\"}, expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    @Outcome(id = {\"null-holder, .*\", \".*, null-holder\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Seeing uninitialized holder!\")\n+    public static class RacyTwoWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1() { lazy = new BrokenOneShotLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor3(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_04_BrokenOneShot.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.HolderFactory;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.NullHolderFactory;\n+\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+\n+public class Lazy_05_WrapperOneShot {\n+\n+   \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_05\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Lazy_04_BrokenOneShot shows us we cannot have `volatile` field have the `final` semantics we need\n+        to protect from constructor races. If only we had a way to get both at the same time.\n+\n+        And we have a way for this: we can have a volatile wrapper that we put into final field. See how\n+        Singleton_08_FinalWrapper achieved a similar thing. Now, we survive constructor races, because we have\n+        final field covering us for wrapper. We maintain correctness for the rest by using release-acquire on\n+        `Wrapper.factory` field, similar to examples before.\n+     *\/\n+\n+    public static class FinalWrapperLazy<T> implements Lazy<T> {\n+        private final Wrapper<T> ref;\n+        private T instance;\n+\n+        public FinalWrapperLazy(final Supplier<T> factory) {\n+            this.ref = new Wrapper<>(factory);\n+        }\n+\n+        @Override\n+        public T get() {\n+            if (ref.factory == null) {\n+                return instance;\n+            }\n+\n+            synchronized (this) {\n+                if (ref.factory != null) {\n+                   instance = ref.factory.get();\n+                   ref.factory = null;\n+                }\n+                return instance;\n+            }\n+        }\n+\n+        \/\/ In real world use, this can actually be just java.util.concurrent.atomic.AtomicReference<T>.\n+        private static class Wrapper<T> {\n+            volatile Supplier<T> factory;\n+            public Wrapper(Supplier<T> factory) {\n+                this.factory = factory;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        This works well in basic tests.\n+\n+        x86_64, AArch64:\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  714,969,544  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Basic {\n+        Lazy<Holder> lazy = new FinalWrapperLazy<>(new HolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        This keeps handling null-s well.\n+\n+        x86_64, AArch64:\n+                        RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+      null-holder, null-holder  838,586,824  100.00%  Acceptable  Seeing a null holder.\n+\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-holder, null-holder\", expect = ACCEPTABLE, desc = \"Seeing a null holder.\")\n+    public static class NullHolder {\n+        Lazy<Holder> lazy = new FinalWrapperLazy<>(new NullHolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        And, of course, it survives races on Lazy instance itself.\n+\n+        x86_64, AArch64:\n+             RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+               data    632,710,141   32.62%  Acceptable  Trivial.\n+          null-lazy  1,307,055,563   67.38%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data\",      expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = \"null-lazy\", expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    public static class RacyOneWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()           { lazy = new FinalWrapperLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(L_Result r) { r.r1 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+       x86_64, AArch64:\n+                    RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+                data, data    482,246,211   12.03%  Acceptable  Trivial.\n+           data, null-lazy    644,270,368   16.07%  Acceptable  Lazy instance not seen yet.\n+           null-lazy, data    693,570,498   17.30%  Acceptable  Lazy instance not seen yet.\n+      null-lazy, null-lazy  2,189,716,247   54.61%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = {\"null-lazy, data\", \"data, null-lazy\", \"null-lazy, null-lazy\"}, expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    public static class RacyTwoWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1() { lazy = new FinalWrapperLazy<>(new HolderFactory()); }\n+        @Actor public void actor2(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor3(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_05_WrapperOneShot.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Holder;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.HolderFactory;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.Lazy;\n+import org.openjdk.jcstress.samples.primitives.lazy.shared.NullHolderFactory;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.function.Supplier;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+\n+public class Lazy_06_FencedOneShot {\n+\n+   \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Lazy_06\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        There is an alternative to Lazy_05_WrapperOneShot: emulating the final field semantics by using\n+        the explicit fence in constructor. Note this is a very sharp-edged tool, because it forces us to\n+        think outside the formal language guarantees. JDK sometimes do this trick in class libraries,\n+        where the code is under 100% JDK control and can be amended at any time, if broken.\n+\n+        This example is provided for completeness. Reliable code should not use the constructions like this,\n+        unless there is a quick way to fix it when it is proven to be broken.\n+     *\/\n+\n+    public static class FencedOneShot<T> implements Lazy<T> {\n+        private volatile Supplier<T> factory;\n+        private T instance;\n+\n+        public FencedOneShot(Supplier<T> factory) {\n+            this.factory = factory;\n+            VarHandle.storeStoreFence();\n+        }\n+\n+        @Override\n+        public T get() {\n+            if (factory == null) {\n+                return instance;\n+            }\n+\n+            synchronized (this) {\n+                if (factory != null) {\n+                    instance = factory.get();\n+                    factory = null;\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        This works well in basic tests.\n+\n+        x86_64, AArch64:\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  722,475,464  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Basic {\n+        Lazy<Holder> lazy = new FencedOneShot<>(new HolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        This keeps handling null-s well.\n+\n+        x86_64, AArch64:\n+                            RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          null-holder, null-holder  805,962,184  100.00%  Acceptable  Seeing a null holder.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"null-holder, null-holder\", expect = ACCEPTABLE, desc = \"Seeing a null holder.\")\n+    public static class NullHolder {\n+        Lazy<Holder> lazy = new FencedOneShot<>(new NullHolderFactory());\n+        @Actor public void actor1(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+        And, of course, it survives races on Lazy instance itself.\n+\n+        x86_64, AArch64:\n+             RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+               data    645,079,245   30.00%  Acceptable  Trivial.\n+          null-lazy  1,505,528,059   70.00%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data\",      expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = \"null-lazy\", expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    public static class RacyOneWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1()           { lazy = new FencedOneShot<>(new HolderFactory()); }\n+        @Actor public void actor2(L_Result r) { r.r1 = Lazy.map(lazy); }\n+    }\n+\n+    \/*\n+       x86_64, AArch64:\n+                    RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+                data, data    527,940,924   12.44%  Acceptable  Trivial.\n+           data, null-lazy    610,097,483   14.37%  Acceptable  Lazy instance not seen yet.\n+           null-lazy, data    731,296,132   17.23%  Acceptable  Lazy instance not seen yet.\n+      null-lazy, null-lazy  2,375,169,585   55.96%  Acceptable  Lazy instance not seen yet.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(id = {\"null-lazy, data\", \"data, null-lazy\", \"null-lazy, null-lazy\"}, expect = ACCEPTABLE, desc = \"Lazy instance not seen yet.\")\n+    public static class RacyTwoWay {\n+        Lazy<Holder> lazy;\n+        @Actor public void actor1() { lazy = new FencedOneShot<>(new HolderFactory()); }\n+        @Actor public void actor2(LL_Result r) { r.r1 = Lazy.map(lazy); }\n+        @Actor public void actor3(LL_Result r) { r.r2 = Lazy.map(lazy); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/Lazy_06_FencedOneShot.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+# Lazy Performance\n+\n+While these samples are here to reason about correctness, a common question is also about the relative\n+performance of these implementations. Without going too deep into perf analysis, `LazyBench` from\n+`jcstress-benchmarks` would show something like this on beefy AArch64 machine.\n+\n+## Uncontended Case\n+\n+```\n+Benchmark                        (impl)  Mode  Cnt  Score    Error  Units\n+LazyBench.uncontended    broken-factory  avgt   25  1.004 ±  0.080  ns\/op\n+LazyBench.uncontended      broken-nulls  avgt   25  0.891 ±  0.022  ns\/op\n+LazyBench.uncontended             basic  avgt   25  1.038 ±  0.030  ns\/op\n+LazyBench.uncontended   broken-one-shot  avgt   25  1.040 ±  0.045  ns\/op\n+LazyBench.uncontended  wrapper-one-shot  avgt   25  1.295 ±  0.048  ns\/op\n+LazyBench.uncontended   fenced-one-shot  avgt   25  1.068 ±  0.027  ns\/op\n+```\n+\n+### Broken Nulls\n+\n+This test is ahead of other tests, because it has to do only a single read on the fast path:\n+\n+```\n+   5.49%  ↗   0x0000ffff6fed14c0:   ldr        w10, [x15, #12]             ; get field \"lazy\"\n+   4.99%  │   0x0000ffff6fed14c4:   ldr        w14, [x10, #8]              ; typecheck for Lazy subtype\n+  15.96%  │   0x0000ffff6fed14c8:   cmp        w14, w12\n+          │   0x0000ffff6fed14cc:   b.ne       0x0000ffff6fed1540  \/\/ b.any\n+  15.35%  │   0x0000ffff6fed14d0:   mov        x13, x10\n+   1.92%  │   0x0000ffff6fed14d4:   add        x10, x13, #0x10\n+   5.02%  │   0x0000ffff6fed14d8:   ldar       w10, [x10]                  ; get field \"instance\"     <--- HERE\n+   5.93%  │   0x0000ffff6fed14dc:   cbz        w10, 0x0000ffff6fed1568     ; null check \"instance\"\n+          |                       <poof: our result is in w10, blackholed>\n+  16.60%  │   0x0000ffff6fed14e0:   ldarb      w14, [x11]                  ; JMH: get field \"isDone\"\n+   5.15%  │   0x0000ffff6fed14e4:   ldr        x10, [x28, #48]             ; JVM: safepoint poll, part 1\n+          │   0x0000ffff6fed14e8:   add        x19, x19, #0x1              ; JMH: ops++\n+   4.78%  │   0x0000ffff6fed14ec:   ldr        wzr, [x10]                  ; JVM: safepoint poll, part 2\n+  10.98%  ╰   0x0000ffff6fed14f0:   cbz        w14, 0x0000ffff6fed14c0     ; JMH: loop\n+```\n+\n+### Basic\n+\n+The variants of `basic` test, including `broken-one-shot`, `fenced-one-shot`, `broken-factory` show the same fast path,\n+where the cost is the atomic load of `factory`, and non-atomic load of `instance`:\n+\n+```\n+   4.76%  ↗   0x0000ffff83ed09c0:   ldr        w11, [x15, #12]             ; get field \"lazy\"\n+   4.30%  │   0x0000ffff83ed09c4:   ldr        w13, [x11, #8]              ; typecheck for Lazy subtype\n+  16.76%  │   0x0000ffff83ed09c8:   cmp        w13, w10\n+          │   0x0000ffff83ed09cc:   b.ne       0x0000ffff83ed0a44\n+  13.52%  │   0x0000ffff83ed09d0:   add        x13, x11, #0xc\n+   4.67%  │   0x0000ffff83ed09d4:   ldarb      w14, [x13]                  ; get field \"factory\"       <--- HERE\n+   4.83%  │   0x0000ffff83ed09d8:   cbz        w14, 0x0000ffff83ed0a6c     ; null check \"factory\"\n+  13.45%  │   0x0000ffff83ed09dc:   ldarb      w13, [x12]                  ; JMH: get field \"isDone\"\n+   4.06%  │   0x0000ffff83ed09e0:   ldr        w14, [x11, #20]             ; get field \"instance\"      <--- AND HERE\n+   0.50%  │   0x0000ffff83ed09e4:   mov        x11, x14                    \n+          |                       <poof: our result is in x11, blackholed>\n+   4.43%  │   0x0000ffff83ed09e8:   ldr        x14, [x28, #48]             ; JVM: safepoint poll, part 1\n+   0.55%  │   0x0000ffff83ed09ec:   add        x19, x19, #0x1              ; JMH: ops++\n+   4.10%  │   0x0000ffff83ed09f0:   ldr        wzr, [x14]                  ; JVM: safepoint poll, part 2\n+  15.08%  ╰   0x0000ffff83ed09f4:   cbz        w13, 0x0000ffff83ed09c0     ; JMH: loop\n+```\n+\n+### Wrapper One Shot\n+\n+This test is a bit behind other tests, because it has to do the additional memory dereference on fast path:\n+\n+```\n+   3.70%  ↗   0x0000ffff83ed0510:   ldr        w10, [x13, #12]             ; get field \"lazy\"\n+   3.19%  │   0x0000ffff83ed0514:   ldr        w12, [x10, #8]              ; typecheck for Lazy subtype\n+   4.23%  │   0x0000ffff83ed0518:   cmp        w12, w15\n+          │   0x0000ffff83ed051c:   b.ne       0x0000ffff83ed05c8  \/\/ b.any\n+   4.21%  │   0x0000ffff83ed0520:   mov        x12, x10\n+   3.22%  │   0x0000ffff83ed0524:   ldr        w10, [x12, #12]             ; get field \"wrapper\"      <--- HERE\n+   0.46%  │   0x0000ffff83ed0528:   mov        x14, x10                    ; null check \"wrapper\"\n+   2.84%  │   0x0000ffff83ed052c:   cbz        w10, 0x0000ffff83ed05a4\n+   3.50%  │   0x0000ffff83ed0530:   add        x10, x14, #0xc\n+   3.74%  │   0x0000ffff83ed0534:   ldar       w10, [x10]                  ; get field \"factory\"      <--- AND HERE\n+  30.34%  │   0x0000ffff83ed0538:   cbnz       w10, 0x0000ffff83ed05f0     ; null check \"factory\"\n+  15.99%  │   0x0000ffff83ed053c:   ldarb      w14, [x11]                  : JMH: get field \"isDone\"\n+   3.35%  │   0x0000ffff83ed0540:   ldr        w12, [x12, #16]             ; get field \"instance\"     <--- AND HERE\n+   0.57%  │   0x0000ffff83ed0544:   mov        x10, x12\n+          |                       <poof: our result is in x10, blackholed>\n+   3.65%  │   0x0000ffff83ed0548:   ldr        x12, [x28, #48]             ; JVM: safepoint poll, part 1\n+          │   0x0000ffff83ed054c:   add        x19, x19, #0x1              ; JMH: ops++\n+   3.85%  │   0x0000ffff83ed0550:   ldr        wzr, [x12]                  ; JVM: safepoint poll, part 2\n+   3.90%  ╰   0x0000ffff83ed0554:   cbz        w14, 0x0000ffff83ed0510     ; JMH: loop\n+```\n+\n+## Contended Case\n+\n+```\n+Benchmark                        (impl)  Mode  Cnt  Score    Error  Units\n+LazyBench.contended      broken-factory  avgt   25  1.011 ±  0.048  ns\/op\n+LazyBench.contended        broken-nulls  avgt   25  0.903 ±  0.016  ns\/op\n+LazyBench.contended               basic  avgt   25  1.027 ±  0.023  ns\/op\n+LazyBench.contended     broken-one-shot  avgt   25  1.016 ±  0.021  ns\/op\n+LazyBench.contended    wrapper-one-shot  avgt   25  1.295 ±  0.013  ns\/op\n+LazyBench.contended     fenced-one-shot  avgt   25  1.038 ±  0.026  ns\/op\n+```\n+\n+As expected, all test behave similarly under contention.\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/performance.md","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy.shared;\n+\n+public class Holder {\n+    String data;\n+\n+    public Holder(String data) {\n+        this.data = data;\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/shared\/Holder.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy.shared;\n+\n+import java.util.function.Supplier;\n+\n+public class HolderFactory implements Supplier<Holder> {\n+\n+    boolean first = true;\n+\n+    @Override\n+    public Holder get() {\n+        if (first) {\n+            first = false;\n+            return new Holder(\"data\");\n+        }\n+        throw new SupplierDupException();\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/shared\/HolderFactory.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy.shared;\n+\n+public interface Lazy<T> {\n+    T get();\n+\n+    static String map(Lazy<Holder> lazy) {\n+        if (lazy == null) {\n+            return \"null-lazy\";\n+        }\n+        try {\n+            Holder holder = lazy.get();\n+            if (holder == null) {\n+                return \"null-holder\";\n+            }\n+            return holder.data;\n+        } catch (SupplierDupException e) {\n+            return \"dup\";\n+        } catch (Exception e) {\n+            return \"exception\";\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/shared\/Lazy.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy.shared;\n+\n+import java.util.function.Supplier;\n+\n+public class NullHolderFactory implements Supplier<Holder> {\n+\n+    boolean first = true;\n+\n+    @Override\n+    public Holder get() {\n+        if (first) {\n+            first = false;\n+            return null;\n+        }\n+        throw new SupplierDupException();\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/shared\/NullHolderFactory.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.lazy.shared;\n+\n+public class SupplierDupException extends RuntimeException {\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+        return this;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/lazy\/shared\/SupplierDupException.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_01_BrokenUnsynchronized {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_01\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        This test starts as the base for more advanced Singleton examples.\n+\n+        The implementation below is clearly incorrect in multithreaded code: there is no\n+        synchronization anywhere, so race conditions are abound.\n+     *\/\n+\n+    public static class Unsynchronized<T> implements Factory<T> {\n+        private T instance;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            if (instance == null) {\n+                instance = supplier.get();\n+            }\n+            return instance;\n+        }\n+    }\n+\n+    \/*\n+        The most basic test is trying to see what kind of failure modes this implementation experiences.\n+\n+        This is not the architecture-specific problem, it is just a basic interleaving problem. We can clearly\n+        see the interesting outcome from two threads not seeing each others update, and leaving with their\n+        own installed singleton versions. This is a failure of singleton contract.\n+\n+        AArch64, x86_64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  1,529,743,128   52.28%   Acceptable  Trivial.\n+              data1, data2    203,941,377    6.97%  Interesting  Race condition.\n+              data2, data2  1,192,582,319   40.75%   Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class Final {\n+        Unsynchronized<Singleton> factory = new Unsynchronized<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        It gets more interesting when Singleton itself carries data. Not only threads might not see\n+        the singleton version installed by another thread, they are also not guaranteed to see the\n+        singleton *contents*, as we see in the interesting example showing \"null-data\".\n+\n+        See BasicJMM_06_Causality that shows there is no causality in the absence of synchronization.\n+        See BasicJMM_08_Finals that shows why the Final test above survives does not have \"null-data\".\n+\n+        AArch64:\n+                            RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  1,042,687,796   44.37%   Acceptable  Trivial.\n+              data1, data2    193,299,702    8.23%  Interesting  Race condition.\n+          data1, null-data         80,883   <0.01%  Interesting  Race condition.\n+              data2, data2  1,113,547,718   47.39%   Acceptable  Trivial.\n+          null-data, data2        118,245   <0.01%  Interesting  Race condition.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class NonFinal {\n+        Unsynchronized<Singleton> factory = new Unsynchronized<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_01_BrokenUnsynchronized.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_02_BrokenVolatile {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_02\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        The \"obvious\" solution for synchronization is to add volatile to instance field.\n+     *\/\n+\n+    public static class VolatileS<T> implements Factory<T> {\n+        private volatile T instance;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            if (instance == null) {\n+                instance = supplier.get();\n+            }\n+            return instance;\n+        }\n+    }\n+\n+    \/*\n+        Sadly, volatile still does not solve the interleaving problem: the separate reads and writes of\n+        volatile variables are not atomic in combination.\n+\n+        AArch64, x86_64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  1,513,077,834   53.05%   Acceptable  Trivial.\n+              data1, data2    305,328,400   10.71%  Interesting  Race condition.\n+              data2, data2  1,033,548,910   36.24%   Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class Final {\n+        VolatileS<Singleton> factory = new VolatileS<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        What *does* volatile solve, however, is the safe publication of the singleton instance.\n+        Even though there is a race condition that can install different versions of singletons,\n+        every thread is guaranteed to see the singleton contents, even if its contents are not final.\n+        This is going to be a building block for so called double-checked locking implementation later.\n+\n+        This is similar to BasicJMM_06_Causality example.\n+\n+        AArch64:\n+                   RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+             data1, data1  1,240,790,356   54.77%   Acceptable  Trivial.\n+             data1, data2    234,875,383   10.37%  Interesting  Race condition.\n+             data2, data2    789,721,725   34.86%   Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class NonFinal {\n+        VolatileS<Singleton> factory = new VolatileS<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_02_BrokenVolatile.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+public class Singleton_03_InefficientCAS {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_03\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Volatile solves the publication problem for us, but it does not solve the multiple\n+        versions of a singleton installed. What if we used Compare-And-Set like this?\n+     *\/\n+\n+    public static class CAS<T> implements Factory<T> {\n+        private final AtomicReference<T> ref = new AtomicReference<T>();\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            if (ref.get() == null) {\n+                ref.compareAndSet(null, supplier.get());\n+            }\n+            return ref.get();\n+        }\n+    }\n+\n+    \/*\n+        As expected, there are no problems with versioning anymore on any architecture.\n+\n+        AArch64, x86_64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  2,078,570,754   52.66%   Acceptable  Trivial.\n+              data2, data2  1,868,941,510   47.34%   Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class Final {\n+        CAS<Singleton> factory = new CAS<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        There are no problems with singleton publication either: CAS \"releases\" the singleton object,\n+        and get()-s acquire it.\n+\n+        AArch64, x86_64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  2,480,166,763   45.74%   Acceptable  Trivial.\n+              data2, data2  2,942,540,381   54.26%   Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Race condition.\")\n+    public static class NonFinal {\n+        CAS<Singleton> factory = new CAS<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        There is still a major performance problem here:\n+\n+        Without better coordination, we can call to supplier multiple times, and depending on what happens there,\n+        we may incur a lot of overheads. In worst case, if supplier takes *seconds* to complete, *all* threads\n+        could ask for their instance, and all but one thread would be able to install that version!\n+     *\/\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_03_InefficientCAS.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_04_InefficientSynchronized {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_04\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        CAS test fixes the versioning problem for us, but it still left us with a problem when calling to supplier\n+        multiple times is expensive.\n+\n+        The common answer to these kinds of troubles is _mutual exclusion_ primitives, that only allow one thread\n+        to enter the mutual exclusion area. A common primitives for this are locks, for example intrinsic\n+         \"synchronized\" in Java.\n+     *\/\n+\n+    public static class Synchronized<T> implements Factory<T> {\n+        private T instance;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = supplier.get();\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        As expected, this solves the versioning problem.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,267,833,868   59.29%  Acceptable  Trivial.\n+          data2, data2    870,567,356   40.71%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        Synchronized<Singleton> factory = new Synchronized<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        And, of course, it also solves the visibility problem: all threads agree on the contents of singletons.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,537,912,621   71.20%  Acceptable  Trivial.\n+          data2, data2    622,064,283   28.80%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        Synchronized<Singleton> factory = new Synchronized<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        There is still a major performance problem: taking a lock every time we reach for singleton is expensive.\n+     *\/\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_04_InefficientSynchronized.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_05_DCL {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_05\n+    *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        All the observations and samples so far provide us with the building blocks for so called\n+        \"Double-Checked Locking\" pattern. This is the most common way to achieve singleton properties.\n+        It performs well in the majority of cases, and requires no deep analysis for correctness.\n+\n+        You might know this pattern by this form:\n+\n+            @Override\n+            public T get(Supplier<T> supplier) {\n+                if (instance == null) {                 \/\/ Check 1\n+                    synchronized (this) {               \/\/ Lock\n+                        if (instance == null) {         \/\/ Check 2\n+                            instance = supplier.get();\n+                        }\n+                    }\n+                }\n+                return instance;\n+            }\n+\n+        See how two features work in tandem to solve all problems:\n+           1. Mutual exclusion to execute the supplier once is handled by synchronized block.\n+           2. Safe publication of `instance` is guaranteed by volatile. This is important because some\n+              readers might not enter the slow path.\n+           3. All interleaving is resolved by checking the `instance`, and going into slow path on failure.\n+\n+        In this and the following examples, we are going to be using a variant of that code that is easier\n+        to modify for different primitives, and is arguably easier to reason about.\n+\n+        2+ threads coming to slow path is the easiest case to think about: everything there happens under\n+        the lock. 2+ threads coming to fast path have no conflicts either: they only read instance. The only\n+        case we need to think through is what happens if 1 thread is in slow path, and another is in fast path.\n+     *\/\n+\n+    public static class DCL<T> implements Factory<T> {\n+        private volatile T instance;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            \/\/ Fast path: care about correctness+performance.\n+            T t = instance;\n+            if (t != null) {\n+                return t;\n+            }\n+\n+            \/\/ Slow path: care about correctness only.\n+            \/\/ This is effectively the body of Singleton_04_InefficientSynchronized sample.\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = supplier.get();\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        Indeed, this works well on all architectures.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,259,722,777   57.88%  Acceptable  Trivial.\n+          data2, data2    916,873,647   42.12%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        DCL<Singleton> factory = new DCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        Since volatile provides us with publication guarantees, non-final singletons also work well.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,057,019,574   56.88%  Acceptable  Trivial.\n+          data2, data2    801,420,050   43.12%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        DCL<Singleton> factory = new DCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_05_DCL.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.function.Supplier;\n+\n+public class Singleton_06_AcquireReleaseDCL {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_06\n+     *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+\n+        If one studies Singleton_05_DCL example more deeply, then one can ask whether the full-blown volatile\n+        is even needed. The answer is: it is not needed. We only need the release-acquire chain between the store\n+        of instance and the unsynchronized load of it. See BasicJMM_06_Causality example for basic example of this.\n+\n+        Acquire-release is relatively easy to construct with VarHandles, see below. This might improve performance\n+        on weakly-ordered platforms, where the sequentially-consistent loads. are more heavy-weight than acquire loads.\n+        In overwhelming majority of cases optimizing this is not worth it. We will look at this example for the sake\n+        of completeness.\n+     *\/\n+\n+    public static class AcquireReleaseDCL<T> implements Factory<T> {\n+        static final VarHandle VH;\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(AcquireReleaseDCL.class, \"instance\", Object.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private T instance;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            T res = (T) VH.getAcquire(this);\n+            if (res != null) {\n+                return res;\n+            }\n+\n+            synchronized (this) {\n+                if (VH.get(this) == null) {\n+                    VH.setRelease(this, supplier.get());\n+                }\n+                return (T) VH.get(this);\n+            }\n+        }\n+    }\n+\n+    \/*\n+        This implementation works on all platforms.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  2,421,292,475   52.14%  Acceptable  Trivial.\n+          data2, data2  2,222,928,909   47.86%  Acceptable  Trivial.\n+       *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        AcquireReleaseDCL<Singleton> factory = new AcquireReleaseDCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+     \/*\n+        This implementation works on all platforms.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  2,166,322,137   57.64%  Acceptable  Trivial.\n+          data2, data2  1,591,873,007   42.36%  Acceptable  Trivial.\n+       *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        AcquireReleaseDCL<Singleton> factory = new AcquireReleaseDCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_06_AcquireReleaseDCL.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_07_BrokenNonVolatileDCL {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_07\n+     *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        A very common antipattern is omitting `volatile` from the instance field. The reason why it is broken\n+        should be obvious after looking at previous examples, this breaks safe publication guarantees, as the\n+        read of instance on fast path has no memory ordering at all.\n+     *\/\n+\n+    public static class NonVolatileDCL<T> implements Factory<T> {\n+        private T instance; \/\/ specifically non-volatile\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            T res = instance;\n+            if (res != null) {\n+                return res;\n+            }\n+\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = supplier.get();\n+                }\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        Now, here is a peculiarity: if the object we are constructing is able to survive the races\n+        on its own, even this code would work well on all architectures. There would still be a race\n+        on `instance` field, but it would be benign. (See also BasicJMM_09_BenignRaces example).\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,251,305,922   64.43%  Acceptable  Trivial.\n+          data2, data2    690,896,902   35.57%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        NonVolatileDCL<Singleton> factory = new NonVolatileDCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        The failures show up readily when the object is not surviving the races on its own. In this case,\n+        we can see the non-null singleton, which appears to carry null data!\n+\n+        AArch64:\n+                    RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              data1, data1  1,470,891,960   63.17%   Acceptable  Trivial.\n+          data1, null-data      1,124,329    0.05%  Interesting  Data races.\n+              data2, data2    855,805,003   36.75%   Acceptable  Trivial.\n+          null-data, data2        665,052    0.03%  Interesting  Data races.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, null-data\", \"null-data, data2\"}, expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Data races.\")\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        NonVolatileDCL<Singleton> factory = new NonVolatileDCL<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_07_BrokenNonVolatileDCL.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_08_FinalWrapper {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_08\n+     *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        You might have noticed that Singleton_07_BrokenNonVolatileDCL example still works well, as long\n+        as we store the safely constructed singleton instances. This allows us to survive races even without\n+        volatiles or acquires! We can exploit this by wrapping the singleton in the _final wrapper_, so that\n+        it allows us to survive the races, no matter if the singleton itself is safely constructed.\n+\n+        See BasicJMM_08_Finals for more examples on finals. This construction is similar to BasicJMM_09_BenignRaces.\n+\n+        The downside of this approach is another dereference when accessing the object, as well as a bit more\n+        memory spent for wrappers themselves.\n+     *\/\n+\n+    public static class FinalWrapper<T> implements Factory<T> {\n+        private Wrapper<T> wrapper;\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            Wrapper<T> w = wrapper;\n+            if (w != null) {\n+                return w.instance;\n+            }\n+\n+            synchronized (this) {\n+                if (wrapper == null) {\n+                    wrapper = new Wrapper<>(supplier.get());\n+                }\n+                return wrapper.instance;\n+            }\n+        }\n+\n+        private static class Wrapper<T> {\n+            public final T instance;\n+            public Wrapper(T instance) {\n+                this.instance = instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        Not surprisingly, this example works with final singletons.\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,234,160,020   59.42%  Acceptable  Trivial.\n+          data2, data2    842,678,324   40.58%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        FinalWrapper<Singleton> factory = new FinalWrapper<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        What we gain here is proper behavior with non-final singletons!\n+\n+        x86_64, AArch64:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  1,092,867,901   58.10%  Acceptable  Trivial.\n+          data2, data2    788,130,443   41.90%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        FinalWrapper<Singleton> factory = new FinalWrapper<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_08_FinalWrapper.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_09_Holder {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_09\n+     *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        This example is here for completeness.\n+\n+        In some cases for one-shot singletons in the library code, it is more convenient to ride\n+        on class initialization guarantees by using the \"class holder\" pattern. JVM guarantees that `H` would\n+        get initialized on the first reference to it, and that initalization would be serialized by the JVM itself.\n+\n+        The down-sides for this approach:\n+            1. It is static: you can only do it once per holder. This means tests below does not actually test\n+               it all that well.\n+            2. It is static (again): you need to know the instance you are putting into it ahead of time.\n+               Note that examples ignore `supplier`.\n+\n+        The up-sides are:\n+            1. Simplicity: it is really hard to get wrong.\n+            2. Optimizeability: in hot code, the class initialization check would likely be elided, and the whole\n+               thing would be compiled to a single field read.\n+\n+        This pattern sees limited use in some libraries, including JDK class library.\n+     *\/\n+\n+    public static class FinalHolderHolder implements Factory<Singleton> {\n+        @Override\n+        public Singleton get(Supplier<Singleton> supplier) {\n+            return H.INSTANCE;\n+        }\n+\n+        public static class H {\n+            public static final FinalSingleton INSTANCE = new FinalSingleton(\"data\");\n+        }\n+    }\n+\n+    public static class NonFinalHolderHolder implements Factory<Singleton> {\n+        @Override\n+        public Singleton get(Supplier<Singleton> supplier) {\n+            return H.INSTANCE;\n+        }\n+\n+        public static class H {\n+            public static final NonFinalSingleton INSTANCE = new NonFinalSingleton(\"data\");\n+        }\n+    }\n+\n+    \/*\n+        Not surprisingly, the results are consistent across all architectures.\n+\n+        x86_64, AArch64:\n+              RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  3,208,470,984  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        FinalHolderHolder factory = new FinalHolderHolder();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, null); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, null); }\n+    }\n+\n+    \/*\n+        Same with non-final singleton.\n+\n+        x86_64, AArch64:\n+              RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data, data  3,491,187,144  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"data, data\", expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        NonFinalHolderHolder factory = new NonFinalHolderHolder();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, null); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, null); }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_09_Holder.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+import org.openjdk.jcstress.samples.primitives.singletons.shared.*;\n+\n+import java.util.function.Supplier;\n+\n+public class Singleton_10_ThreadLocalWitness {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Singleton_10\n+     *\/\n+\n+    \/*\n+        ----------------------------------------------------------------------------------------------------------\n+\n+        Original DCL paper shows another quirky example:\n+          https:\/\/www.cs.umd.edu\/~pugh\/java\/memoryModel\/DoubleCheckedLocking.html#ThreadLocal\n+\n+        What if we were able to track whether the thread already visited the slow path, and thus guaranteed\n+        to have seen or installed the new instance? This works, at the expense of quite expensive ThreadLocal\n+        lookup on fast path.\n+     *\/\n+\n+    public static class ThreadLocalWitness<T> implements Factory<T> {\n+        private final ThreadLocal<String> witness;\n+        private T instance;\n+\n+        public ThreadLocalWitness() {\n+            this.witness = new ThreadLocal<>();\n+        }\n+\n+        @Override\n+        public T get(Supplier<T> supplier) {\n+            if (witness.get() != null) {\n+                return instance;\n+            }\n+\n+            synchronized (this) {\n+                if (instance == null) {\n+                    instance = supplier.get();\n+                }\n+\n+                \/\/ NOTE: Original example sets witness.set(witness), but that constructs a memory leak.\n+                \/\/ As the comments in the example correctly note, any non-null value would do as the argument\n+                \/\/ here, so we just put a String constant into it. This insulates us from putting anything\n+                \/\/ that references a thread local back into thread local itself.\n+                witness.set(\"seen\");\n+                return instance;\n+            }\n+        }\n+    }\n+\n+    \/*\n+        This works on all architectures.\n+\n+        x86_64, AArch64:\n+                RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  266,609,576   52.16%  Acceptable  Trivial.\n+          data2, data2  244,502,048   47.84%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class Final {\n+        ThreadLocalWitness<Singleton> factory = new ThreadLocalWitness<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new FinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new FinalSingleton(\"data2\")); }\n+    }\n+\n+    \/*\n+        Non-final singletons work well too:\n+\n+        x86_64, AArch64:\n+                RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          data1, data1  225,094,945   45.91%  Acceptable  Trivial.\n+          data2, data2  265,188,519   54.09%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"data1, data1\", \"data2, data2\" }, expect = Expect.ACCEPTABLE, desc = \"Trivial.\")\n+    public static class NonFinal {\n+        ThreadLocalWitness<Singleton> factory = new ThreadLocalWitness<>();\n+        @Actor public void actor1(LL_Result r) { r.r1 = MapResult.map(factory, () -> new NonFinalSingleton(\"data1\")); }\n+        @Actor public void actor2(LL_Result r) { r.r2 = MapResult.map(factory, () -> new NonFinalSingleton(\"data2\")); }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/Singleton_10_ThreadLocalWitness.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+# Singleton Performance\n+\n+While these samples are here to reason about correctness, a common question is also about the relative\n+performance of these implementations. Without going too deep into perf analysis, `SingletonBench` from\n+`jcstress-benchmarks` would show something like this on beefy AArch64 machine.\n+\n+## Uncontended Case\n+\n+```\n+\n+Benchmark                                     (impl)  Mode  Cnt     Score      Error  Units\n+\n+SingletonBench.uncontended            unsynchronized  avgt   25     0.886 ±    0.020  ns\/op\n+SingletonBench.uncontended           broken-volatile  avgt   25     1.032 ±    0.032  ns\/op\n+SingletonBench.uncontended           inefficient-cas  avgt   25     1.487 ±    0.027  ns\/op\n+SingletonBench.uncontended  inefficient-synchronized  avgt   25    19.590 ±    0.243  ns\/op\n+SingletonBench.uncontended                       dcl  avgt   25     0.913 ±    0.059  ns\/op\n+SingletonBench.uncontended       acquire-release-dcl  avgt   25     0.989 ±    0.051  ns\/op\n+SingletonBench.uncontended   broken-non-volatile-dcl  avgt   25     0.867 ±    0.014  ns\/op\n+SingletonBench.uncontended             final-wrapper  avgt   25     1.038 ±    0.035  ns\/op\n+SingletonBench.uncontended                    holder  avgt   25     0.654 ±    0.018  ns\/op\n+SingletonBench.uncontended      thread-local-witness  avgt   25     2.710 ±    0.013  ns\/op\n+```\n+\n+### Holder\n+\n+Holder is beyond reach, because JIT compilers are able to fold the whole thing to a\n+constant access.\n+\n+```\n+   7.10%  ↗   0x0000ffff67ba0d00:   ldr        w10, [x15, #12]             ; get field `factory`\n+   7.10%  │   0x0000ffff67ba0d04:   ldr        w13, [x10, #8]              ; type-check `factory`\n+  25.75%  │   0x0000ffff67ba0d08:   cmp        w13, w14\n+          │   0x0000ffff67ba0d0c:   b.ne       0x0000ffff67ba0d74  \n+          |                       <poof: \"constant load\" was blackholed>\n+  22.83%  │   0x0000ffff67ba0d10:   ldarb      w10, [x12]                  ; JMH: get field `isDone`\n+   7.20%  │   0x0000ffff67ba0d14:   ldr        x13, [x28, #48]             ; JVM: safepoint poll, part 1\n+   0.00%  │   0x0000ffff67ba0d18:   add        x20, x20, #0x1              ; JMH: ops++\n+   7.13%  │   0x0000ffff67ba0d1c:   ldr        wzr, [x13]                  ; JVM: safepoint poll, part 2\n+  19.59%  ╰   0x0000ffff67ba0d20:   cbz        w10, 0x0000ffff67ba0d00     ; JMH: not done?\n+```\n+\n+### DCLs\n+\n+Double-checked locking idioms are nearly as fast. The cost they pay are going through\n+the acquire-load.\n+\n+```\n+   4.04%  ↗   0x0000ffff9fb95880:   ldr        w10, [x15, #12]             ; get field `factory`\n+   4.81%  │   0x0000ffff9fb95884:   ldr        w14, [x10, #8]              ; type-check `factory`\n+  18.26%  │   0x0000ffff9fb95888:   cmp        w14, w12\n+          │   0x0000ffff9fb9588c:   b.ne       0x0000ffff9fb95904\n+  13.05%  │   0x0000ffff9fb95890:   mov        x13, x10                    ; get field `factory.instance`\n+   2.04%  │   0x0000ffff9fb95894:   add        x10, x13, #0xc\n+   4.20%  │   0x0000ffff9fb95898:   ldar       w10, [x10]                  ;    <--- note ldar (acquiring load)\n+   9.88%  │   0x0000ffff9fb9589c:   cbz        w10, 0x0000ffff9fb9592c     ; null-check `factory.instance`\n+          |                       <poof: w10 is our result, blackholed>\n+  10.19%  │   0x0000ffff9fb958a0:   ldarb      w14, [x11]                  ; JMH: get field `isDone`\n+   4.48%  │   0x0000ffff9fb958a4:   ldr        x10, [x28, #48]             ; JVM: safepoint poll, part 1\n+          │   0x0000ffff9fb958a8:   add        x19, x19, #0x1              ; JMH: ops++\n+   4.48%  │   0x0000ffff9fb958ac:   ldr        wzr, [x10]                  ; JVM: safepoint poll, part 2\n+  15.49%  ╰   0x0000ffff9fb958b0:   cbz        w14, 0x0000ffff9fb95880     ; JMH: not done?\n+```\n+\n+### Wrappers (Final and CAS)\n+\n+Wrappers are a little behind, because they need another memory dereference to reach the `instance`.\n+\n+```\n+   3.92%  ↗   0x0000ffff6bdc5700:   ldr        w10, [x16, #12]             ; get field `factory`\n+   3.50%  │   0x0000ffff6bdc5704:   ldr        w14, [x10, #8]              ; type-check `factory`\n+   6.75%  │   0x0000ffff6bdc5708:   cmp        w14, w12\n+          │   0x0000ffff6bdc570c:   b.ne       0x0000ffff6bdc5780\n+   6.72%  │   0x0000ffff6bdc5710:   mov        x13, x10                    \n+   3.67%  │   0x0000ffff6bdc5714:   ldr        w10, [x13, #12]             ; get field `wrapper`\n+   4.60%  │   0x0000ffff6bdc5718:   ldr        w15, [x10, #12]             ; get field `wrapper.instance`\n+          │                      <poof: w15 is our result, blackholed>\n+  45.00%  │   0x0000ffff6bdc571c:   ldarb      w10, [x11]                  ; JMH: get field `isDone`\n+   3.41%  │   0x0000ffff6bdc5720:   mov        x13, x15                    \n+   3.40%  │   0x0000ffff6bdc5724:   ldr        x13, [x28, #48]             ; JVM: safepoint poll, part 1\n+   1.26%  │   0x0000ffff6bdc5728:   add        x19, x19, #0x1              ; JMH: ops++\n+   3.58%  │   0x0000ffff6bdc572c:   ldr        wzr, [x13]                  ; JVM: safepoint poll, part 2\n+   4.84%  ╰   0x0000ffff6bdc5730:   cbz        w10, 0x0000ffff6bdc5700     ; JMH: not done?\n+```\n+\n+CAS example gets the same, but also pays for the cost of acquiring load.\n+\n+### ThreadLocal\n+\n+`ThreadLocal.get` on the fast path costs extra.\n+\n+```\n+   1.67%  ↗   0x0000ffff6fdc6b60:   ldr        w11, [x13, #12]             ; get field `factory`\n+   1.67%  │   0x0000ffff6fdc6b64:   ldr        w12, [x11, #8]              ; type-check `factory`\n+   1.26%  │   0x0000ffff6fdc6b68:   cmp        w12, w10\n+          │   0x0000ffff6fdc6b6c:   b.ne       0x0000ffff6fdc6c2c  \/\/ b.any\n+   1.78%  │   0x0000ffff6fdc6b70:   mov        x15, x11                    \n+   1.22%  │   0x0000ffff6fdc6b74:   ldr        w12, [x15, #12]             ; ThreadLocal.get begins...\n+   1.46%  │   0x0000ffff6fdc6b78:   ldr        w18, [x16, #72]             \n+   1.56%  │   0x0000ffff6fdc6b7c:   ldr        w11, [x12, #8]              \n+   1.80%  │   0x0000ffff6fdc6b80:   cmp        w11, w1\n+          │   0x0000ffff6fdc6b84:   b.ne       0x0000ffff6fdc6c54  \/\/ b.any\n+   1.62%  │   0x0000ffff6fdc6b88:   mov        x0, x12                     \n+   1.69%  │   0x0000ffff6fdc6b8c:   ldr        w14, [x18, #20]             \n+   1.67%  │   0x0000ffff6fdc6b90:   ldr        w12, [x14, #12]             \n+   1.76%  │   0x0000ffff6fdc6b94:   ldr        w11, [x0, #12]\n+          │   0x0000ffff6fdc6b98:   sub        w4, w12, #0x1\n+   1.33%  │   0x0000ffff6fdc6b9c:   and        w11, w11, w4                \n+   1.47%  │   0x0000ffff6fdc6ba0:   mov        x4, x14                     \n+          │   0x0000ffff6fdc6ba4:   add        x4, x4, w11, sxtw #2\n+   1.33%  │   0x0000ffff6fdc6ba8:   cbz        w12, 0x0000ffff6fdc6c7c\n+   1.53%  │   0x0000ffff6fdc6bac:   ldr        w14, [x4, #16]              \n+   8.44%  │   0x0000ffff6fdc6bb0:   ldr        w12, [x14, #12]             \n+  34.02%  │   0x0000ffff6fdc6bb4:   cmp        x12, x0\n+          │   0x0000ffff6fdc6bb8:   b.ne       0x0000ffff6fdc6cb0          ; ThreadLocal.get ends.\n+  12.81%  │   0x0000ffff6fdc6bbc:   ldr        w11, [x14, #28]             ; get field `instance`\n+   2.22%  │   0x0000ffff6fdc6bc0:   cbz        w11, 0x0000ffff6fdc6cec    \n+          │                      <poof: w11 is our result, blackholed> \n+   2.00%  │   0x0000ffff6fdc6bc4:   ldarb      w11, [x3]                   ; JMH: get field `isDone`\n+   1.46%  │   0x0000ffff6fdc6bc8:   ldr        w14, [x15, #16]\n+          │   0x0000ffff6fdc6bcc:   mov        x12, x14                    \n+   1.49%  │   0x0000ffff6fdc6bd0:   ldr        x12, [x28, #48]             ; JVM: safepoint poll, part 1 \n+          │   0x0000ffff6fdc6bd4:   add        x19, x19, #0x1              ; JMH: ops++\n+   1.47%  │   0x0000ffff6fdc6bd8:   ldr        wzr, [x12]                  ; JVM: safepoint poll, part 2\n+   1.42%  ╰   0x0000ffff6fdc6bdc:   cbz        w11, 0x0000ffff6fdc6b60     ; JMH: not done?\n+```\n+\n+### Synchronized\n+\n+Synchronized case takes a lock on fast-path and that lock acquisition costs extra.\n+\n+The actual hot block would be CAS on acquring the object lock:\n+\n+```\n+          ╭   0x0000ffff6fdc6158:   b.eq       0x0000ffff6fdc617c  \/\/ b.none\n+   0.18%  │   0x0000ffff6fdc615c:   ldr        x10, [x14]\n+   0.34%  │╭  0x0000ffff6fdc6160:   tbnz       w10, #1, 0x0000ffff6fdc618c\n+   0.54%  ││  0x0000ffff6fdc6164:   orr        x10, x10, #0x1\n+          ││  0x0000ffff6fdc6168:   eor        x11, x10, #0x1\n+   0.29%  ││  0x0000ffff6fdc616c:   mov        x8, x10\n+   0.36%  ││  0x0000ffff6fdc6170:   casa       x8, x11, [x14]\n+  24.92%  ││  0x0000ffff6fdc6174:   cmp        x8, x10\n+   0.18%  ││  0x0000ffff6fdc6178:   b.ne       0x0000ffff6fdc61b8  \/\/ b.any\n+   4.95%  ↘│  0x0000ffff6fdc617c:   str        x14, [x28, x12]\n+   0.22%   │  0x0000ffff6fdc6180:   add        w12, w12, #0x8\n+   0.20%   │  0x0000ffff6fdc6184:   str        w12, [x28, #1800]\n+   0.22%   │  0x0000ffff6fdc6188:   b          0x0000ffff6fdc61b8\n+           ↘  0x0000ffff6fdc618c:   add        x12, x10, #0x3e\n+```\n+\n+## Contended Case\n+\n+```\n+Benchmark                                     (impl)  Mode  Cnt     Score      Error  Units\n+\n+SingletonBench.contended              unsynchronized  avgt   25     0.888 ±    0.013  ns\/op\n+SingletonBench.contended             broken-volatile  avgt   25     1.047 ±    0.021  ns\/op\n+SingletonBench.contended             inefficient-cas  avgt   25     1.495 ±    0.011  ns\/op\n+SingletonBench.contended    inefficient-synchronized  avgt   25  6854.528 ± 1603.611  ns\/op\n+SingletonBench.contended                         dcl  avgt   25     0.941 ±    0.044  ns\/op\n+SingletonBench.contended         acquire-release-dcl  avgt   25     1.030 ±    0.085  ns\/op\n+SingletonBench.contended     broken-non-volatile-dcl  avgt   25     0.901 ±    0.019  ns\/op\n+SingletonBench.contended               final-wrapper  avgt   25     1.056 ±    0.020  ns\/op\n+SingletonBench.contended                      holder  avgt   25     0.689 ±    0.028  ns\/op\n+SingletonBench.contended        thread-local-witness  avgt   25     2.679 ±    0.031  ns\/op\n+```\n+\n+All tests behave similarly under contention, except `synchronized` case, which falls victim\n+to major scalability bottleneck.\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/performance.md","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons.shared;\n+\n+import java.util.function.Supplier;\n+\n+public interface Factory<T> {\n+\n+    T get(Supplier<T> supplier);\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/shared\/Factory.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons.shared;\n+\n+public class FinalSingleton implements Singleton {\n+    final String data;\n+\n+    public FinalSingleton(String data) {\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public String data() {\n+        return data;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/shared\/FinalSingleton.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons.shared;\n+\n+import java.util.function.Supplier;\n+\n+public class MapResult {\n+\n+    public static String map(Factory<Singleton> factory, Supplier<Singleton> supplier) {\n+        if (factory == null) {\n+            return \"null-factory\";\n+        }\n+        Singleton singleton = factory.get(supplier);\n+        if (singleton == null) {\n+            return \"null-singleton\";\n+        }\n+        String data = singleton.data();\n+        if (data == null) {\n+            return \"null-data\";\n+        }\n+        return data;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/shared\/MapResult.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons.shared;\n+\n+public class NonFinalSingleton implements Singleton {\n+    String data;\n+\n+    public NonFinalSingleton(String data) {\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public String data() {\n+        return data;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/shared\/NonFinalSingleton.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.singletons.shared;\n+\n+public interface Singleton {\n+    String data();\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/singletons\/shared\/Singleton.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the singleton factory.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class FinalWrapper {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(FinalWrapperFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(FinalWrapperFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(FinalWrapperFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(FinalWrapperFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class FinalWrapperFactory {\n-        private FW wrapper;\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            FW w = wrapper;\n-            if (w == null) {\n-                synchronized(this) {\n-                    w = wrapper;\n-                    if (w == null) {\n-                        w = new FW(s.get());\n-                        wrapper = w;\n-                    }\n-                }\n-            }\n-            return w.instance;\n-        }\n-\n-        private static class FW {\n-            public final Singleton instance;\n-            public FW(Singleton instance) {\n-                this.instance = instance;\n-            }\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/FinalWrapper.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Description;\n-import org.openjdk.jcstress.annotations.Expect;\n-import org.openjdk.jcstress.annotations.Outcome;\n-\n-@Description(\"Tests the safe singleton pattern.\")\n-@Outcome(id = \"0\",  expect = Expect.FORBIDDEN,  desc = \"Factory returned null singleton.\")\n-@Outcome(id = \"1\",  expect = Expect.FORBIDDEN,  desc = \"The singleton data is null.\")\n-@Outcome(id = \"42\", expect = Expect.ACCEPTABLE, desc = \"The singleton is observed in full.\")\n-public class GradingSafe {\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/GradingSafe.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Description;\n-import org.openjdk.jcstress.annotations.Expect;\n-import org.openjdk.jcstress.annotations.Outcome;\n-\n-@Description(\"Tests the unsafe singleton pattern.\")\n-@Outcome(id = \"0\",  expect = Expect.ACCEPTABLE_INTERESTING,  desc = \"Factory returned null singleton.\")\n-@Outcome(id = \"1\",  expect = Expect.ACCEPTABLE_INTERESTING,  desc = \"The singleton data is null.\")\n-@Outcome(id = \"42\", expect = Expect.ACCEPTABLE, desc = \"The singleton is observed in full.\")\n-public class GradingUnsafe {\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/GradingUnsafe.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-\/**\n- * Tests the singleton factory.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class Holder {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(UnsafeHolderFactory s) {\n-            s.getInstance();\n-        }\n-\n-        @Actor\n-        public final void actor2(UnsafeHolderFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance());\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(SafeHolderFactory s) {\n-            s.getInstance();\n-        }\n-\n-        @Actor\n-        public final void actor2(SafeHolderFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance());\n-        }\n-    }\n-\n-    @State\n-    public static class SafeHolderFactory {\n-        public Singleton getInstance() {\n-            return H.INSTANCE;\n-        }\n-\n-        public static class H {\n-            public static final Singleton INSTANCE = new SingletonSafe();\n-        }\n-    }\n-\n-    @State\n-    public static class UnsafeHolderFactory {\n-        public Singleton getInstance() {\n-            return H.INSTANCE;\n-        }\n-\n-        public static class H {\n-            public static final Singleton INSTANCE = new SingletonUnsafe();\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/Holder.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the safe double-checked locking singleton.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class SafeDCL {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(SafeDCLFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SafeDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(SafeDCLFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SafeDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class SafeDCLFactory {\n-        private volatile Singleton instance;\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            if (instance == null) {\n-                synchronized (this) {\n-                    if (instance == null) {\n-                        instance = s.get();\n-                    }\n-                }\n-            }\n-            return instance;\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/SafeDCL.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the safe double-checked locking singleton.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class SafeLocalDCL {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(SafeLocalDCLFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SafeLocalDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(SafeLocalDCLFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SafeLocalDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class SafeLocalDCLFactory {\n-        private volatile Singleton instance;\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            Singleton i = instance;\n-            if (i == null) {\n-                synchronized (this) {\n-                    i = instance;\n-                    if (i == null) {\n-                        i = s.get();\n-                        instance = i;\n-                    }\n-                }\n-            }\n-            return i;\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/SafeLocalDCL.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-public interface Singleton {\n-\n-    Byte x();\n-\n-    public static int map(Singleton singleton) {\n-        if (singleton == null) {\n-            return 0;\n-        }\n-        if (singleton.x() == null) {\n-            return 1;\n-        }\n-        return singleton.x();\n-    }\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/Singleton.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-public class SingletonSafe implements Singleton {\n-    final Byte x;\n-\n-    public SingletonSafe() { x = 42; }\n-\n-    @Override\n-    public Byte x() {\n-        return x;\n-    }\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/SingletonSafe.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-public class SingletonUnsafe implements Singleton {\n-    Byte x;\n-    public SingletonUnsafe() { x = 42; }\n-\n-    @Override\n-    public Byte x() {\n-        return x;\n-    }\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/SingletonUnsafe.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the safe double-checked locking singleton.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class SynchronizedCL {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(SynchronizedCLFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SynchronizedCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(SynchronizedCLFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(SynchronizedCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class SynchronizedCLFactory {\n-        private Singleton instance;\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            synchronized (this) {\n-                if (instance == null) {\n-                    instance = s.get();\n-                }\n-                return instance;\n-            }\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/SynchronizedCL.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the unsafe double-checked locking singleton.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class UnsafeDCL {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingUnsafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(UnsafeDCLFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(UnsafeDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingUnsafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(UnsafeDCLFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(UnsafeDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class UnsafeDCLFactory {\n-        private Singleton instance; \/\/ specifically non-volatile\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            if (instance == null) {\n-                synchronized (this) {\n-                    if (instance == null) {\n-                        instance = s.get();\n-                    }\n-                }\n-            }\n-            return instance;\n-        }\n-    }\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/UnsafeDCL.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.tests.singletons;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressMeta;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import java.util.function.Supplier;\n-\n-\/**\n- * Tests the unsafe double-checked locking singleton.\n- *\n- * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)\n- *\/\n-public class UnsafeLocalDCL {\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingUnsafe.class)\n-    public static class Unsafe {\n-        @Actor\n-        public final void actor1(UnsafeLocalDCLFactory s) {\n-            s.getInstance(SingletonUnsafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(UnsafeLocalDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonUnsafe::new));\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(GradingSafe.class)\n-    public static class Safe {\n-        @Actor\n-        public final void actor1(UnsafeLocalDCLFactory s) {\n-            s.getInstance(SingletonSafe::new);\n-        }\n-\n-        @Actor\n-        public final void actor2(UnsafeLocalDCLFactory s, I_Result r) {\n-            r.r1 = Singleton.map(s.getInstance(SingletonSafe::new));\n-        }\n-    }\n-\n-    @State\n-    public static class UnsafeLocalDCLFactory {\n-        private Singleton instance; \/\/ specifically non-volatile\n-\n-        public Singleton getInstance(Supplier<Singleton> s) {\n-            Singleton i = instance;\n-            if (i == null) {\n-                synchronized (this) {\n-                    i = instance;\n-                    if (i == null) {\n-                        i = s.get();\n-                        instance = i;\n-                    }\n-                }\n-            }\n-            return i;\n-        }\n-    }\n-\n-}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/singletons\/UnsafeLocalDCL.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"}]}