{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.stream.Collectors;\n@@ -240,1 +241,16 @@\n-\n+        Pattern byteArrayAndBufferExclusion = null;\n+        if (VMSupport.getJdkVersionMajor() > 22) {\n+            String regexPrefix = \"org.openjdk.jcstress.tests\".replace(\".\", \"\\\\.\");\n+            String[] members = new String[]{\n+                    \"accessAtomic.varHandles.byteArray\",\n+                    \"accessAtomic.varHandles.byteBuffer\",\n+                    \"acqrel.varHandles.byteArray\",\n+                    \"acqrel.vHandles.byteBuffer\",\n+                    \"atomicity.varHandles.byteArray\",\n+                    \"atomicity.varHandles.byteBuffer\",\n+                    \"coherence.varHandles.byteArray\",\n+                    \"coherence.varHandles.byteBuffer\"};\n+            String regexBody = \"(\" + Arrays.stream(members).map(ss -> ss.replace(\".\", \"\\\\.\")).collect(Collectors.joining(\"|\")) + \")\";\n+            String regexSuffix = \"(big|heap|little).*\";\n+            byteArrayAndBufferExclusion = Pattern.compile(regexPrefix + \"\\\\.\" + regexBody + \"\\\\.\" + regexSuffix);\n+        }\n@@ -242,0 +258,1 @@\n+        int excludedBuffersAndArrays = 0;\n@@ -244,1 +261,5 @@\n-                s.add(testName);\n+                if (byteArrayAndBufferExclusion != null && byteArrayAndBufferExclusion.matcher(testName).find()) {\n+                    excludedBuffersAndArrays++;\n+                } else {\n+                    s.add(testName);\n+                }\n@@ -247,0 +268,11 @@\n+        if (excludedBuffersAndArrays > 0) {\n+            out.println();\n+            out.println(\"Warning! JDK 23 or newer detected and \" + excludedBuffersAndArrays + \" of selected \" + (s.size() + excludedBuffersAndArrays) + \" (from total \" + TestList.tests().size() + \") tests were excluded by:\");\n+            out.println(byteArrayAndBufferExclusion.toString().replaceAll(\"\\\\\\\\\", \"\"));\n+            out.println(\"This is known bug: https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903671\");\n+            out.println(\"This is temporarily workaround and issue should be fixed soon.\");\n+            if (s.isEmpty()) {\n+                out.println(\"Warning! Nothing remained!\");\n+            }\n+            out.println();\n+        }\n@@ -248,1 +280,1 @@\n-   }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.vm;\n+\n+public class TargetJvmVersion {\n+\n+    \/**\n+     * The \"return\" message is parsed ond colon and brackets.\n+     *\n+     * @param args\n+     *\/\n+    public static void main(String... args) {\n+        try {\n+            Runtime.Version version = Runtime.version();\n+            System.out.println(\"Detected: \" + version.feature() + \" (\" + version + \")\");\n+        } catch (Throwable ex) {\n+            System.out.println(\"Runtime.Version not found, fallback to: 8 (\" + System.getProperty(\"java.version\", \"unknown)\") + \")\");\n+            System.exit(0);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/TargetJvmVersion.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -44,0 +44,10 @@\n+    private static class ResultWithMessage {\n+        private final boolean result;\n+        private final String message;\n+\n+        public ResultWithMessage(boolean result, String message) {\n+            this.result = result;\n+            this.message = message;\n+        }\n+    }\n+\n@@ -53,0 +63,2 @@\n+    private static volatile int JDK_VERSION_MAJOR;\n+    private static volatile String JDK_VERSION_MAJOR_FULL = \"undetected\";\n@@ -83,0 +95,4 @@\n+    public static int getJdkVersionMajor() {\n+        return JDK_VERSION_MAJOR;\n+    }\n+\n@@ -96,0 +112,8 @@\n+        ResultWithMessage futureJdkVersionMajor =\n+                detectWithMessage(\"Checking JVM feature version\",\n+                        true,\n+                        TargetJvmVersion.class,\n+                        null\n+                );\n+        setDetectedJdkVersion(futureJdkVersionMajor);\n+\n@@ -386,0 +410,14 @@\n+    private static void setDetectedJdkVersion(ResultWithMessage futureJdkVersionMajor) {\n+        if (futureJdkVersionMajor.result && futureJdkVersionMajor.message!=null){\n+            try {\n+                JDK_VERSION_MAJOR = Integer.parseInt(futureJdkVersionMajor.message.replaceAll(\".*: \", \"\").replaceAll(\" .*\", \"\").trim());\n+                JDK_VERSION_MAJOR_FULL=futureJdkVersionMajor.message.replaceAll(\".*\\\\(\", \"\").replaceAll(\"\\\\).*\", \"\").trim();\n+            }catch(Exception ex){\n+                JDK_VERSION_MAJOR = 8;\n+                JDK_VERSION_MAJOR_FULL=futureJdkVersionMajor.message;\n+            }\n+        } else {\n+            JDK_VERSION_MAJOR = 8;\n+        }\n+    }\n+\n@@ -387,0 +425,5 @@\n+        return detectWithMessage(label, expectPass, mainClass, list, opts).result;\n+    }\n+\n+    private static ResultWithMessage detectWithMessage(String label, boolean expectPass, Class<?> mainClass, List<String> list, String... opts) {\n+        String msg = \"Message not received\";\n@@ -389,1 +432,1 @@\n-            tryWith(arguments);\n+            msg = tryWith(arguments);\n@@ -394,1 +437,1 @@\n-            return true;\n+            return new ResultWithMessage(true, msg);\n@@ -400,1 +443,1 @@\n-            return false;\n+            return new ResultWithMessage(false, msg);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/VMSupport.java","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"}]}