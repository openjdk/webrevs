{"files":[{"patch":"@@ -195,1 +195,1 @@\n-    private boolean skipMode(int cm, VMSupport.Config config, TestInfo info) {\n+    private boolean skipMode(int cm, VMSupport.Config config, int threads) {\n@@ -197,1 +197,1 @@\n-            \/\/ Do not skip unified modes\n+            \/\/ Do not skip unified modes.\n@@ -201,1 +201,1 @@\n-        if (!config.availableRuntimes().hasC2() && CompileMode.hasC2(cm, info.threads())) {\n+        if (!config.availableRuntimes().hasC2() && CompileMode.hasC2(cm, threads)) {\n@@ -204,1 +204,1 @@\n-        if (!config.availableRuntimes().hasC1() && CompileMode.hasC1(cm, info.threads())) {\n+        if (!config.availableRuntimes().hasC1() && CompileMode.hasC1(cm, threads)) {\n@@ -208,1 +208,1 @@\n-        if (config.limitRuntimes().hasC2() && !CompileMode.hasC2(cm, info.threads())) {\n+        if (config.requiredRuntimes().hasC2() && !CompileMode.hasC2(cm, threads)) {\n@@ -211,1 +211,1 @@\n-        if (config.limitRuntimes().hasC1() && !CompileMode.hasC1(cm, info.threads())) {\n+        if (config.requiredRuntimes().hasC1() && !CompileMode.hasC1(cm, threads)) {\n@@ -220,2 +220,1 @@\n-            if (skipMode(cm, config, info)) {\n-                \/\/ Skip unnecessary modes to optimize testing time.\n+            if (skipMode(cm, config, info.threads())) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-        return new Config(l, orig.availableRuntimes(), orig.limitRuntimes(), orig.stress());\n+        return new Config(l, orig.availableRuntimes(), orig.requiredRuntimes(), orig.stress());\n@@ -401,1 +401,1 @@\n-        return new Config(l, orig.availableRuntimes(), orig.limitRuntimes(), orig.stress());\n+        return new Config(l, orig.availableRuntimes(), orig.requiredRuntimes(), orig.stress());\n@@ -413,1 +413,1 @@\n-            configs.add(new Config(Collections.singletonList(\"-Xint\"), Runtimes.onlyInt(), Runtimes.none(), false));\n+            configs.add(new Config(Collections.singletonList(\"-Xint\"), Runtimes.intp(), Runtimes.none(), false));\n@@ -415,1 +415,1 @@\n-                configs.add(new Config(Collections.singletonList(\"-XX:TieredStopAtLevel=1\"), Runtimes.intC1(), Runtimes.none(), false));\n+                configs.add(new Config(Collections.singletonList(\"-XX:TieredStopAtLevel=1\"), Runtimes.intpC1(), Runtimes.none(), false));\n@@ -418,1 +418,1 @@\n-                configs.add(new Config(Collections.singletonList(\"-XX:-TieredCompilation\"), Runtimes.intC2(), Runtimes.none(), false));\n+                configs.add(new Config(Collections.singletonList(\"-XX:-TieredCompilation\"), Runtimes.intpC2(), Runtimes.none(), false));\n@@ -432,1 +432,1 @@\n-                configs.add(new Config(c2StressFlags, Runtimes.all(), Runtimes.onlyC2(), true));\n+                configs.add(new Config(c2StressFlags, Runtimes.all(), Runtimes.C2(), true));\n@@ -641,1 +641,1 @@\n-        private static Runtimes onlyInt() {\n+        private static Runtimes intp() {\n@@ -645,1 +645,1 @@\n-        private static Runtimes onlyC1() {\n+        private static Runtimes C1() {\n@@ -649,1 +649,1 @@\n-        private static Runtimes onlyC2() {\n+        private static Runtimes C2() {\n@@ -653,1 +653,1 @@\n-        private static Runtimes intC1() {\n+        private static Runtimes intpC1() {\n@@ -657,1 +657,1 @@\n-        private static Runtimes intC2() {\n+        private static Runtimes intpC2() {\n@@ -668,0 +668,13 @@\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == null || getClass() != o.getClass()) return false;\n+\n+            Runtimes runtimes = (Runtimes) o;\n+            return mod == runtimes.mod;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return mod;\n+        }\n@@ -675,1 +688,1 @@\n-        private final Runtimes limitRuntimes;\n+        private final Runtimes requiredRuntimes;\n@@ -679,1 +692,1 @@\n-        private Config(List<String> args, Runtimes availableRuntimes, Runtimes limitRuntimes, boolean stress) {\n+        private Config(List<String> args, Runtimes availableRuntimes, Runtimes requiredRuntimes, boolean stress) {\n@@ -682,1 +695,1 @@\n-            this.limitRuntimes = limitRuntimes;\n+            this.requiredRuntimes = requiredRuntimes;\n@@ -704,2 +717,2 @@\n-        public Runtimes limitRuntimes() {\n-            return limitRuntimes;\n+        public Runtimes requiredRuntimes() {\n+            return requiredRuntimes;\n@@ -728,1 +741,0 @@\n-            if (this == o) return true;\n@@ -730,0 +742,1 @@\n+\n@@ -731,3 +744,3 @@\n-            if (config.availableRuntimes.mod != availableRuntimes.mod) return false;\n-            if (config.limitRuntimes.mod != limitRuntimes.mod) return false;\n-            return true;\n+            return args.equals(config.args) &&\n+                    availableRuntimes.equals(config.availableRuntimes) &&\n+                    requiredRuntimes.equals(config.requiredRuntimes);\n@@ -738,1 +751,4 @@\n-            return Objects.hash(args, availableRuntimes.mod);\n+            int result = args.hashCode();\n+            result = 31 * result + availableRuntimes.hashCode();\n+            result = 31 * result + requiredRuntimes.hashCode();\n+            return result;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/VMSupport.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"}]}