{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import org.openjdk.jcstress.properties.UsedProperties;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jcstress.properties.UsedProperties;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,243 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress;\n-\n-import java.io.PrintStream;\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-\/**\n- * Known Properties affecting JCStress. Some of them publicly document themselves, some do not need to.\n- *\/\n-public class UsedProperties {\n-\n-    private static abstract class JcstressProperty<T> {\n-        private final String key;\n-        private final List<T> defaults;\n-\n-        public JcstressProperty(String key, T[] defaults) {\n-            this.key = key;\n-            this.defaults = Collections.unmodifiableList(Arrays.asList(defaults));\n-        }\n-\n-        public String getKey() {\n-            return key;\n-        }\n-\n-        public List<T> getDefaults() {\n-            return defaults;\n-        }\n-\n-        public T getDefault() {\n-            return defaults.get(0);\n-        }\n-\n-        public boolean isCustom(){\n-            return System.getProperty(getKey()) != null;\n-        }\n-\n-        public abstract String getDescription();\n-\n-        public abstract T getValue();\n-    }\n-\n-    private static abstract class IntJcstressProperty extends JcstressProperty<Integer> {\n-\n-        public IntJcstressProperty(String key, Integer... defaults) {\n-            super(key, defaults);\n-        }\n-\n-        @Override\n-        public Integer getValue() {\n-            return Integer.getInteger(getKey(), getDefault());\n-        }\n-    }\n-\n-    private static abstract class LongJcstressProperty extends JcstressProperty<Long> {\n-\n-        public LongJcstressProperty(String key, Long... defaults) {\n-            super(key, defaults);\n-        }\n-\n-        @Override\n-        public Long getValue() {\n-            return Long.getLong(getKey(), getDefault());\n-        }\n-    }\n-\n-\n-    private static abstract class StringJcstressProperty extends JcstressProperty<String> {\n-\n-        public StringJcstressProperty(String key, String... defaults) {\n-            super(key, defaults);\n-        }\n-\n-        @Override\n-        public String getValue() {\n-            return System.getProperty(getKey(), getDefault());\n-        }\n-    }\n-\n-    private static final IntJcstressProperty TIMEBUDGET_DEFAULTPERTESTMS = new IntJcstressProperty(\"jcstress.timeBudget.defaultPerTestMs\", 3000) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" set default time the individual test executes. Defaults to \" + getDefault() +\n-                    \"ms set to \" + getValue() + \"ms\";\n-        }\n-    };\n-\n-    private static final IntJcstressProperty TIMEBUDGET_MINTIMEMS = new IntJcstressProperty(\"jcstress.timeBudget.minTimeMs\", 30) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" set minimal time the individual test executes. Defaults to \" + getDefault() +\n-                    \"ms set to \" + getValue() + \"ms\";\n-        }\n-    };\n-\n-    private static final IntJcstressProperty TIMEBUDGET_MAXTIMEMS = new IntJcstressProperty(\"jcstress.timeBudget.maxTimeMs\", 60_000) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() +\n-                    \" set maximum time the individual test executes. Defaults to \" + getDefault() +\n-                    \"ms set to \" + getValue() + \"ms\";\n-        }\n-    };\n-\n-    private static final String TIMEBUDGET_ADDITIONAL_COMMENT = \"The time each test is run is (simplified) calculated as value of \" + Options.TIME_BUDGET_SWITCH + \" switch divided by number of tests (after all filters applied)\" +\n-            \" If te resulting time is smaller then \" + TIMEBUDGET_MINTIMEMS.getKey() + \", it is used.  If it si bigger then \" + TIMEBUDGET_MAXTIMEMS.getKey() + \" it is used. If no \" + Options.TIME_BUDGET_SWITCH + \"  is set,\" +\n-            \" then \" + TIMEBUDGET_DEFAULTPERTESTMS.getKey() + \" is used. See \" + Options.TIME_BUDGET_SWITCH + \" for more info. Properties do not accept unit suffixes.\";\n-\n-    private static final StringJcstressProperty LINK_ADDRESS = new StringJcstressProperty(\"jcstress.link.address\", new String[]{null}) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" is address where to connect to forked VMs. Defaults to loop-back. Set to '\" + getListenAddressForInfo() + \"'\";\n-        }\n-    };\n-\n-\n-    private static final IntJcstressProperty LINK_PORT = new IntJcstressProperty(\"jcstress.link.port\", 0) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" is port where to connect to forked VMs on \" + LINK_ADDRESS.getKey() + \". Defaults to \" + getDefault() + \" (random free port).\" +\n-                    \" Set to \" + getJcstressLinkPort();\n-        }\n-    };\n-\n-    private static final IntJcstressProperty LINK_TIMEOUTMS = new IntJcstressProperty(\"jcstress.link.timeoutMs\", 30 * 1000) {\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" set timeout to forked VM communication ms.\" +\n-                    \" Defaults to \" + getDefault() + \"ms. Set to \" + getValue() + \"ms.\";\n-        }\n-    };\n-\n-    private static final LongJcstressProperty CONSOLE_PRINTINTERVALMS = new LongJcstressProperty(\"jcstress.console.printIntervalMs\", 1_000L, 15_000L) {\n-\n-        @Override\n-        public Long getValue() {\n-            return Long.getLong(getKey(), null);\n-        }\n-\n-        @Override\n-        public String getDescription() {\n-            return getKey() + \" sets interval how often to print results to console in ms. Have two defaults: \" +\n-                    getDefaults().get(0) + \"ms in interactive mode and \" +\n-                    getDefaults().get(1) + \"ms in noninteractive mode. Set to \" +\n-                    getPrintIntervalMs() + \"ms\";\n-        }\n-    };\n-\n-    public static int getJcstressTimeBudgetDefaultPerTestMs() {\n-        return TIMEBUDGET_DEFAULTPERTESTMS.getValue();\n-    }\n-\n-    public static int getJcstressTimeBudgetMinTimeMs() {\n-        return TIMEBUDGET_MINTIMEMS.getValue();\n-    }\n-\n-    public static int getJcstressTimeBudgetMaxTimeMs() {\n-        return TIMEBUDGET_MAXTIMEMS.getValue();\n-    }\n-\n-    private static String getJcstressLinkAddress() {\n-        return LINK_ADDRESS.getValue();\n-    }\n-\n-    private static String getListenAddressForInfo() {\n-        try {\n-            return getListenAddress().toString();\n-        } catch (Exception ex) {\n-            return ex.getMessage();\n-        }\n-    }\n-\n-    public static InetAddress getListenAddress() {\n-        \/\/ Try to use user-provided override first.\n-        if (getJcstressLinkAddress() != null) {\n-            try {\n-                return InetAddress.getByName(getJcstressLinkAddress());\n-            } catch (UnknownHostException e) {\n-                \/\/ override failed, notify user\n-                throw new IllegalStateException(\"Can not initialize binary link.\", e);\n-            }\n-        }\n-\n-        return InetAddress.getLoopbackAddress();\n-    }\n-\n-    public static int getJcstressLinkPort() {\n-        return LINK_PORT.getValue();\n-    }\n-\n-\n-    public static int getJcstressLinkTimeoutMs() {\n-        return LINK_TIMEOUTMS.getValue();\n-    }\n-\n-    public static boolean isProgressInteractive() {\n-        return System.console() != null;\n-    }\n-\n-    public static long getPrintIntervalMs() {\n-        return (CONSOLE_PRINTINTERVALMS.isCustom()) ?\n-                CONSOLE_PRINTINTERVALMS.getValue() :\n-                isProgressInteractive() ? CONSOLE_PRINTINTERVALMS.getDefaults().get(0) : CONSOLE_PRINTINTERVALMS.getDefaults().get(1);\n-    }\n-\n-    public static void printHelpOn(PrintStream ouer) {\n-        ouer.println(\"JCStress recognize several internal properties:\");\n-        ouer.println(\"  \" + TIMEBUDGET_DEFAULTPERTESTMS.getDescription());\n-        ouer.println(\"  \" + TIMEBUDGET_MINTIMEMS.getDescription());\n-        ouer.println(\"  \" + TIMEBUDGET_MAXTIMEMS.getDescription());\n-        ouer.println(\"  \" + TIMEBUDGET_ADDITIONAL_COMMENT);\n-        ouer.println(\"  \" + LINK_ADDRESS.getDescription());\n-        ouer.println(\"  \" + LINK_PORT.getDescription());\n-        ouer.println(\"  \" + LINK_TIMEOUTMS.getDescription());\n-        ouer.println(\"  \" + CONSOLE_PRINTINTERVALMS.getDescription());\n-    }\n-}\n\\ No newline at end of file\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/UsedProperties.java","additions":0,"deletions":243,"binary":false,"changes":243,"status":"deleted"},{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.jcstress.UsedProperties;\n+import org.openjdk.jcstress.properties.UsedProperties;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jcstress.UsedProperties;\n+import org.openjdk.jcstress.properties.UsedProperties;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkClient.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jcstress.UsedProperties;\n+import org.openjdk.jcstress.properties.UsedProperties;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jcstress.properties;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+class ForkedVmProperties implements UsedProperties.ProeprtiesHelpProvider {\n+\n+    static final UsedProperties.StringJcstressProperty LINK_ADDRESS = new UsedProperties.StringJcstressProperty(\"jcstress.link.address\", new String[]{null}) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" is address where to connect to forked VMs. Defaults to loop-back. Set to '\" + getListenAddressForInfo() + \"'\";\n+        }\n+    };\n+\n+\n+    static final UsedProperties.IntJcstressProperty LINK_PORT = new UsedProperties.IntJcstressProperty(\"jcstress.link.port\", 0) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" is port where to connect to forked VMs on \" + LINK_ADDRESS.getKey() + \". Defaults to \" + getDefault() + \" (random free port).\" +\n+                    \" Set to \" + UsedProperties.getJcstressLinkPort();\n+        }\n+    };\n+\n+    static final UsedProperties.IntJcstressProperty LINK_TIMEOUTMS = new UsedProperties.IntJcstressProperty(\"jcstress.link.timeoutMs\", 30 * 1000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set timeout to forked VM communication ms.\" +\n+                    \" Defaults to \" + getDefault() + \"ms. Set to \" + getValue() + \"ms.\";\n+        }\n+    };\n+\n+\n+    private static String getListenAddressForInfo() {\n+        try {\n+            return UsedProperties.getListenAddress().toString();\n+        } catch (Exception ex) {\n+            return ex.getMessage();\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getHelp() {\n+        return Arrays.asList(\n+                LINK_ADDRESS.getDescription(),\n+                LINK_PORT.getDescription(),\n+                LINK_TIMEOUTMS.getDescription());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Properties handling forked VMs. Modify only if you are sure what youa re doing\";\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/properties\/ForkedVmProperties.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jcstress.properties;\n+\n+import org.openjdk.jcstress.Options;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+class TestTimeProperties implements UsedProperties.ProeprtiesHelpProvider {\n+\n+    static final UsedProperties.IntJcstressProperty TIMEBUDGET_DEFAULTPERTESTMS = new UsedProperties.IntJcstressProperty(\"jcstress.timeBudget.defaultPerTestMs\", 3000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set default time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    static final UsedProperties.IntJcstressProperty TIMEBUDGET_MINTIMEMS = new UsedProperties.IntJcstressProperty(\"jcstress.timeBudget.minTimeMs\", 30) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set minimal time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    static final UsedProperties.IntJcstressProperty TIMEBUDGET_MAXTIMEMS = new UsedProperties.IntJcstressProperty(\"jcstress.timeBudget.maxTimeMs\", 60_000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() +\n+                    \" set maximum time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    static final String TIMEBUDGET_ADDITIONAL_COMMENT = \"The time each test is run is (simplified) calculated as value of \" + Options.TIME_BUDGET_SWITCH + \" switch divided by number of tests (after all filters applied)\" +\n+            \" If te resulting time is smaller then \" + TIMEBUDGET_MINTIMEMS.getKey() + \", it is used.  If it si bigger then \" + TIMEBUDGET_MAXTIMEMS.getKey() + \" it is used. If no \" + Options.TIME_BUDGET_SWITCH + \"  is set,\" +\n+            \" then \" + TIMEBUDGET_DEFAULTPERTESTMS.getKey() + \" is used. See \" + Options.TIME_BUDGET_SWITCH + \" for more info. Properties do not accept unit suffixes.\";\n+\n+    @Override\n+    public List<String> getHelp() {\n+        return Arrays.asList(\n+                TIMEBUDGET_DEFAULTPERTESTMS.getDescription(),\n+                TIMEBUDGET_MINTIMEMS.getDescription(),\n+                TIMEBUDGET_MAXTIMEMS.getDescription(),\n+                TIMEBUDGET_ADDITIONAL_COMMENT);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Individual test time execution properties\";\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/properties\/TestTimeProperties.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jcstress.properties;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+class UiProperties implements UsedProperties.ProeprtiesHelpProvider {\n+\n+    static final UsedProperties.LongJcstressProperty CONSOLE_PRINTINTERVALMS = new UsedProperties.LongJcstressProperty(\"jcstress.console.printIntervalMs\", 1_000L, 15_000L) {\n+\n+        @Override\n+        public Long getValue() {\n+            return Long.getLong(getKey(), null);\n+        }\n+\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" sets interval how often to print results to console in ms. Have two defaults: \" +\n+                    getDefaults().get(0) + \"ms in interactive mode and \" +\n+                    getDefaults().get(1) + \"ms in noninteractive mode. Set to \" +\n+                    UsedProperties.getPrintIntervalMs() + \"ms\";\n+        }\n+    };\n+\n+    @Override\n+    public List<String> getHelp() {\n+        return Arrays.asList(CONSOLE_PRINTINTERVALMS.getDescription());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Properties modyfying user appearance\";\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/properties\/UiProperties.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.properties;\n+\n+\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.openjdk.jcstress.properties.TestTimeProperties.*;\n+import static org.openjdk.jcstress.properties.ForkedVmProperties.*;\n+import static org.openjdk.jcstress.properties.UiProperties.*;\n+\n+\/**\n+ * Known Properties affecting JCStress. Some of them publicly document themselves, some do not need to.\n+ *\/\n+public class UsedProperties {\n+\n+    interface ProeprtiesHelpProvider {\n+        List<String> getHelp();\n+\n+        String getTitle();\n+    }\n+\n+    static abstract class JcstressProperty<T> {\n+        private final String key;\n+        private final List<T> defaults;\n+\n+        public JcstressProperty(String key, T[] defaults) {\n+            this.key = key;\n+            this.defaults = Collections.unmodifiableList(Arrays.asList(defaults));\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        public List<T> getDefaults() {\n+            return defaults;\n+        }\n+\n+        public T getDefault() {\n+            return defaults.get(0);\n+        }\n+\n+        public boolean isCustom() {\n+            return System.getProperty(getKey()) != null;\n+        }\n+\n+        public abstract String getDescription();\n+\n+        public abstract T getValue();\n+    }\n+\n+    static abstract class IntJcstressProperty extends JcstressProperty<Integer> {\n+\n+        public IntJcstressProperty(String key, Integer... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public Integer getValue() {\n+            return Integer.getInteger(getKey(), getDefault());\n+        }\n+    }\n+\n+    static abstract class LongJcstressProperty extends JcstressProperty<Long> {\n+\n+        public LongJcstressProperty(String key, Long... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public Long getValue() {\n+            return Long.getLong(getKey(), getDefault());\n+        }\n+    }\n+\n+\n+    static abstract class StringJcstressProperty extends JcstressProperty<String> {\n+\n+        public StringJcstressProperty(String key, String... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return System.getProperty(getKey(), getDefault());\n+        }\n+    }\n+\n+    \/**\n+     * utility class\n+     *\/\n+    private UsedProperties() {\n+    }\n+\n+    public static int getJcstressTimeBudgetDefaultPerTestMs() {\n+        return TIMEBUDGET_DEFAULTPERTESTMS.getValue();\n+    }\n+\n+    public static int getJcstressTimeBudgetMinTimeMs() {\n+        return TIMEBUDGET_MINTIMEMS.getValue();\n+    }\n+\n+    public static int getJcstressTimeBudgetMaxTimeMs() {\n+        return TIMEBUDGET_MAXTIMEMS.getValue();\n+    }\n+\n+    private static String getJcstressLinkAddress() {\n+        return LINK_ADDRESS.getValue();\n+    }\n+\n+    public static InetAddress getListenAddress() {\n+        \/\/ Try to use user-provided override first.\n+        if (UsedProperties.getJcstressLinkAddress() != null) {\n+            try {\n+                return InetAddress.getByName(UsedProperties.getJcstressLinkAddress());\n+            } catch (UnknownHostException e) {\n+                \/\/ override failed, notify user\n+                throw new IllegalStateException(\"Can not initialize binary link.\", e);\n+            }\n+        }\n+\n+        return InetAddress.getLoopbackAddress();\n+    }\n+\n+\n+    public static int getJcstressLinkPort() {\n+        return LINK_PORT.getValue();\n+    }\n+\n+\n+    public static int getJcstressLinkTimeoutMs() {\n+        return LINK_TIMEOUTMS.getValue();\n+    }\n+\n+    public static boolean isProgressInteractive() {\n+        return System.console() != null;\n+    }\n+\n+    public static long getPrintIntervalMs() {\n+        return (CONSOLE_PRINTINTERVALMS.isCustom()) ?\n+                CONSOLE_PRINTINTERVALMS.getValue() :\n+                isProgressInteractive() ? CONSOLE_PRINTINTERVALMS.getDefaults().get(0) : CONSOLE_PRINTINTERVALMS.getDefaults().get(1);\n+    }\n+\n+    public static void printHelpOn(PrintStream ouer) {\n+        ouer.println(\"JCStress recognize several internal properties:\");\n+        for (ProeprtiesHelpProvider provider : new ProeprtiesHelpProvider[]{new TestTimeProperties(), new ForkedVmProperties(), new UiProperties()}) {\n+            ouer.println(\" \" + provider.getTitle());\n+            for (String line : provider.getHelp()) {\n+                ouer.println(\" * \" + line);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/properties\/UsedProperties.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}