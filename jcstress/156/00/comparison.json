{"files":[{"patch":"@@ -49,0 +49,2 @@\n+    public static final String TIME_BUDGET_SWITCH = \"tb\";\n+\n@@ -92,1 +94,1 @@\n-                \"the synchronization overhead, but also reduces the number of collisions.\")\n+                        \"the synchronization overhead, but also reduces the number of collisions.\")\n@@ -96,1 +98,1 @@\n-                \"Larger value increases cache footprint.\")\n+                        \"Larger value increases cache footprint.\")\n@@ -106,1 +108,1 @@\n-                \"Reducing the number of CPUs limits the amount of resources (including memory) the run is using.\")\n+                        \"Reducing the number of CPUs limits the amount of resources (including memory) the run is using.\")\n@@ -110,1 +112,1 @@\n-                \"affects the stride size: maximum footprint will never be exceeded, regardless of min\/max stride sizes.\")\n+                        \"affects the stride size: maximum footprint will never be exceeded, regardless of min\/max stride sizes.\")\n@@ -114,1 +116,1 @@\n-                \"HARD = hard busy loop; THREAD_YIELD = use Thread.yield(); THREAD_SPIN_WAIT = use Thread.onSpinWait(); LOCKSUPPORT_PARK_NANOS = use LockSupport.parkNanos().\")\n+                        \"HARD = hard busy loop; THREAD_YIELD = use Thread.yield(); THREAD_SPIN_WAIT = use Thread.onSpinWait(); LOCKSUPPORT_PARK_NANOS = use LockSupport.parkNanos().\")\n@@ -118,1 +120,1 @@\n-                \"with occasional forking.\")\n+                        \"with occasional forking.\")\n@@ -122,1 +124,1 @@\n-                \"This allows more efficient randomized testing, as each fork would use a different seed.\")\n+                        \"This allows more efficient randomized testing, as each fork would use a different seed.\")\n@@ -129,2 +131,2 @@\n-                \"and runs only the single JVM mode. Either a single space-separated option line, or multiple options are accepted. \" +\n-                \"This option only affects forked runs.\")\n+                        \"and runs only the single JVM mode. Either a single space-separated option line, or multiple options are accepted. \" +\n+                        \"This option only affects forked runs.\")\n@@ -134,2 +136,2 @@\n-                \"Either a single space-separated option line, or multiple options are accepted. \" +\n-                \"This option only affects forked runs.\")\n+                        \"Either a single space-separated option line, or multiple options are accepted. \" +\n+                        \"This option only affects forked runs.\")\n@@ -147,4 +149,4 @@\n-        OptionSpec<TimeValue> optTimeBudget = parser.accepts(\"tb\", \"Time budget to run the tests. Harness code would try to fit the entire \" +\n-                \"run in the desired timeframe. This value is expected to be reasonable, as it is not guaranteed that tests would succeed \" +\n-                \"in arbitrarily low time budget. If not set, harness would try to decide a reasonable time, given the number of tests to run. \" +\n-                \"Common time suffixes (s\/m\/h\/d) are accepted.\")\n+        OptionSpec<TimeValue> optTimeBudget = parser.accepts(TIME_BUDGET_SWITCH, \"Time budget to run the tests. Harness code would try to fit the entire \" +\n+                        \"run in the desired timeframe. This value is expected to be reasonable, as it is not guaranteed that tests would succeed \" +\n+                        \"in arbitrarily low time budget. If not set, harness would try to decide a reasonable time, given the number of tests to run. \" +\n+                        \"Common time suffixes (s\/m\/h\/d) are accepted.\")\n@@ -153,1 +155,1 @@\n-        parser.accepts(\"v\", \"Be verbose.\");\n+        parser.accepts(\"v\", \"Be verbose. Will print known properties in help\");\n@@ -164,1 +166,1 @@\n-            parser.printHelpOn(System.err);\n+            printHelp(parser, System.err);\n@@ -167,0 +169,1 @@\n+        setVerbosity(set);\n@@ -169,1 +172,1 @@\n-            parser.printHelpOn(System.out);\n+            printHelp(parser, System.out);\n@@ -188,9 +191,0 @@\n-        if (set.has(\"vvv\")) {\n-            this.verbosity = new Verbosity(3);\n-        } else if (set.has(\"vv\")) {\n-            this.verbosity = new Verbosity(2);\n-        } else if (set.has(\"v\")) {\n-            this.verbosity = new Verbosity(1);\n-        } else {\n-            this.verbosity = new Verbosity(0);\n-        }\n@@ -204,1 +198,1 @@\n-            parser.printHelpOn(System.err);\n+            printHelp(parser, System.err);\n@@ -230,1 +224,1 @@\n-            parser.printHelpOn(System.err);\n+            printHelp(parser, System.err);\n@@ -237,1 +231,1 @@\n-            parser.printHelpOn(System.err);\n+            printHelp(parser, System.err);\n@@ -244,1 +238,1 @@\n-            parser.printHelpOn(System.err);\n+            printHelp(parser, System.err);\n@@ -266,0 +260,20 @@\n+    private void setVerbosity(OptionSet set) {\n+        if (set.has(\"vvv\")) {\n+            this.verbosity = new Verbosity(3);\n+        } else if (set.has(\"vv\")) {\n+            this.verbosity = new Verbosity(2);\n+        } else if (set.has(\"v\")) {\n+            this.verbosity = new Verbosity(1);\n+        } else {\n+            this.verbosity = new Verbosity(0);\n+        }\n+    }\n+\n+    private void printHelp(OptionParser parser, PrintStream ouer) throws IOException {\n+        parser.printHelpOn(ouer);\n+        ouer.println();\n+        if (verbosity != null && verbosity.printAllTests()) {\n+            UsedProperties.printHelpOn(ouer);\n+        }\n+    }\n+\n@@ -300,1 +314,1 @@\n-        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks()*getForksStressMultiplier());\n+        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks() * getForksStressMultiplier());\n@@ -395,1 +409,3 @@\n-    public TimeValue timeBudget() { return timeBudget; }\n+    public TimeValue timeBudget() {\n+        return timeBudget;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":49,"deletions":33,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-    static final int DEFAULT_PER_TEST_MS = Integer.getInteger(\"jcstress.timeBudget.defaultPerTestMs\", 3000);\n-    static final int MIN_TIME_MS = Integer.getInteger(\"jcstress.timeBudget.minTimeMs\", 30);\n-    static final int MAX_TIME_MS = Integer.getInteger(\"jcstress.timeBudget.maxTimeMs\", 60_000);\n+    static final int DEFAULT_PER_TEST_MS =  UsedProperties.getJcstressTimeBudgetDefaultPerTestMs();\n+    static final int MIN_TIME_MS = UsedProperties.getJcstressTimeBudgetMinTimeMs();\n+    static final int MAX_TIME_MS = UsedProperties.getJcstressTimeBudgetMaxTimeMs();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress;\n+\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+\/**\n+ * Known Properties affecting JCStress. Some of them publicly document themselves, some do not need to.\n+ *\/\n+public class UsedProperties {\n+    private static final String JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS = \"jcstress.timeBudget.defaultPerTestMs\";\n+    private static final int JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT = 3000;\n+    private static final String JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_COMMENT = JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS +\n+            \" set default time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT +\n+            \"ms set to \" + getJcstressTimeBudgetDefaultPerTestMs() + \"ms\";\n+\n+    private static final String JCSTRESS_TIMEBUDGET_MINTIMEMS = \"jcstress.timeBudget.minTimeMs\";\n+    private static final int JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT = 30;\n+    private static final String JCSTRESS_TIMEBUDGET_MINTIMEMS_COMMENT = JCSTRESS_TIMEBUDGET_MINTIMEMS +\n+            \" set minimal time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT +\n+            \"ms set to \" + getJcstressTimeBudgetMinTimeMs() + \"ms\";\n+\n+    private static final String JCSTRESS_TIMEBUDGET_MAXTIMEMS = \"jcstress.timeBudget.maxTimeMs\";\n+    private static final int JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT = 60_000;\n+    private static final String JCSTRESS_TIMEBUDGET_MAXTIMEMS_COMMENT = JCSTRESS_TIMEBUDGET_MAXTIMEMS +\n+            \" set maximum time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT +\n+            \"ms set to \" + getJcstressTimeBudgetMaxTimeMs() + \"ms\";\n+\n+    private static final String JCSTRESS_TIMEBUDGET_ADDITIONAL_COMMENT = \"The time each test is run is (simplified) calculated as value of \" + Options.TIME_BUDGET_SWITCH + \" switch divided by number of tests (after all filters applied)\" +\n+            \" If te resulting time is smaller then \" + JCSTRESS_TIMEBUDGET_MINTIMEMS + \", it is used.  If it si bigger then \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS + \" it is used. If no \" + Options.TIME_BUDGET_SWITCH + \"  is set,\" +\n+            \" then \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS + \" is used. See \" + Options.TIME_BUDGET_SWITCH + \" for more info. Properties do not accept unit suffixes.\";\n+\n+    private static final String JCSTRESS_LINK_ADDRESS = \"jcstress.link.address\";\n+    private static final String JCSTRESS_LINK_ADDRESS_COMMENT = JCSTRESS_LINK_ADDRESS + \" is address where to connect to forked VMs. Defaults to loop-back. Set to '\" + getListenAddressForInfo() + \"'\";\n+\n+    private static final String JCSTRESS_LINK_PORT = \"jcstress.link.port\";\n+    private static final int JCSTRESS_LINK_PORT_DEFAULT = 0;\n+    private static final String JCSTRESS_LINK_PORT_COMMENT = JCSTRESS_LINK_PORT + \" is port where to connect to forked VMs on \" + JCSTRESS_LINK_ADDRESS + \". Defaults to \" + JCSTRESS_LINK_PORT_DEFAULT + \" (random free port).\" +\n+            \" Set to \" + getJcstressLinkPort();\n+\n+    private static final String JCSTRESS_LINK_TIMEOUTMS = \"jcstress.link.timeoutMs\";\n+    private static final int JCSTRESS_LINK_TIMEOUTMS_DEFAULT = 30 * 1000;\n+    private static final String JCSTRESS_LINK_TIMEOUTMS_COMMENT = JCSTRESS_LINK_TIMEOUTMS + \" set timeout to forked VM communication ms.\" +\n+            \" Defaults to \" + JCSTRESS_LINK_TIMEOUTMS_DEFAULT + \"ms. Set to \" + getJcstressLinkTimeoutMs() + \"ms.\";\n+\n+    private static final String JCSTRESS_CONSOLE_PRINTINTERVALMS = \"jcstress.console.printIntervalMs\";\n+    private static final long JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT = 1_000;\n+    private static final long JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT = 15_000;\n+    private static final String JCSTRESS_CONSOLE_PRINTINTERVALMS_COMMENT = JCSTRESS_CONSOLE_PRINTINTERVALMS + \" sets interval how often to print results to console in ms. Have two defaults: \" +\n+            JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT + \"ms in interactive mode and \" +\n+            JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT + \"ms in noninteractive mode. Set to \" +\n+            getPrintIntervalMs() + \"ms\";\n+\n+    public static int getJcstressTimeBudgetDefaultPerTestMs() {\n+        return Integer.getInteger(JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS, JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT);\n+    }\n+\n+    public static int getJcstressTimeBudgetMinTimeMs() {\n+        return Integer.getInteger(JCSTRESS_TIMEBUDGET_MINTIMEMS, JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT);\n+    }\n+\n+    public static int getJcstressTimeBudgetMaxTimeMs() {\n+        return Integer.getInteger(JCSTRESS_TIMEBUDGET_MAXTIMEMS, JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT);\n+    }\n+\n+    private static String getJcstressLinkAddress() {\n+        return System.getProperty(JCSTRESS_LINK_ADDRESS);\n+    }\n+\n+    public static String getListenAddressForInfo() {\n+        try {\n+            return getListenAddress().toString();\n+        } catch (Exception ex) {\n+            return ex.getMessage();\n+        }\n+    }\n+\n+    public static InetAddress getListenAddress() {\n+        \/\/ Try to use user-provided override first.\n+        if (getJcstressLinkAddress() != null) {\n+            try {\n+                return InetAddress.getByName(getJcstressLinkAddress());\n+            } catch (UnknownHostException e) {\n+                \/\/ override failed, notify user\n+                throw new IllegalStateException(\"Can not initialize binary link.\", e);\n+            }\n+        }\n+\n+        return InetAddress.getLoopbackAddress();\n+    }\n+\n+    public static int getJcstressLinkPort() {\n+        return Integer.getInteger(JCSTRESS_LINK_PORT, JCSTRESS_LINK_PORT_DEFAULT);\n+    }\n+\n+\n+    public static int getJcstressLinkTimeoutMs() {\n+        return Integer.getInteger(JCSTRESS_LINK_TIMEOUTMS, JCSTRESS_LINK_TIMEOUTMS_DEFAULT);\n+    }\n+\n+    public static boolean isProgressInteractive() {\n+        return System.console() != null;\n+    }\n+\n+    private static String getJcstressConsolePrintIntervalMs() {\n+        return System.getProperty(JCSTRESS_CONSOLE_PRINTINTERVALMS);\n+    }\n+\n+    public static long getPrintIntervalMs() {\n+        return (getJcstressConsolePrintIntervalMs() != null) ?\n+                Long.parseLong(getJcstressConsolePrintIntervalMs()) :\n+                isProgressInteractive() ? JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT : JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT;\n+    }\n+\n+    public static void printHelpOn(PrintStream ouer) {\n+        ouer.println(\"JCStress recognize several internal properties:\");\n+        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_MINTIMEMS_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_ADDITIONAL_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_LINK_ADDRESS_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_LINK_PORT_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_LINK_TIMEOUTMS_COMMENT);\n+        ouer.println(\"  \" + JCSTRESS_CONSOLE_PRINTINTERVALMS_COMMENT);\n+\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/UsedProperties.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.jcstress.UsedProperties;\n@@ -46,2 +47,0 @@\n-    private static final Integer PRINT_INTERVAL_MS = Integer.getInteger(\"jcstress.console.printIntervalMs\");\n-\n@@ -83,1 +82,1 @@\n-        progressInteractive = (System.console() != null);\n+        progressInteractive = UsedProperties.isProgressInteractive();\n@@ -87,3 +86,1 @@\n-        printIntervalMs = (PRINT_INTERVAL_MS != null) ?\n-                PRINT_INTERVAL_MS :\n-                progressInteractive ? 1_000 : 15_000;\n+        printIntervalMs = UsedProperties.getPrintIntervalMs();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jcstress.UsedProperties;\n@@ -35,1 +36,1 @@\n-    private static final int LINK_TIMEOUT_MS = Integer.getInteger(\"jcstress.link.timeoutMs\", 30 * 1000);\n+    private static final int LINK_TIMEOUT_MS = UsedProperties.getJcstressLinkTimeoutMs();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkClient.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jcstress.UsedProperties;\n@@ -40,3 +41,2 @@\n-    private static final String LINK_ADDRESS = System.getProperty(\"jcstress.link.address\");\n-    private static final int LINK_PORT = Integer.getInteger(\"jcstress.link.port\", 0);\n-    private static final int LINK_TIMEOUT_MS = Integer.getInteger(\"jcstress.link.timeoutMs\", 30 * 1000);\n+    private static final int LINK_PORT = UsedProperties.getJcstressLinkPort();\n+    private static final int LINK_TIMEOUT_MS = UsedProperties.getJcstressLinkTimeoutMs();\n@@ -52,1 +52,1 @@\n-        listenAddress = getListenAddress();\n+        listenAddress = UsedProperties.getListenAddress();\n@@ -60,10 +60,0 @@\n-    private InetAddress getListenAddress() {\n-        \/\/ Try to use user-provided override first.\n-        if (LINK_ADDRESS != null) {\n-            try {\n-                return InetAddress.getByName(LINK_ADDRESS);\n-            } catch (UnknownHostException e) {\n-                \/\/ override failed, notify user\n-                throw new IllegalStateException(\"Can not initialize binary link.\", e);\n-            }\n-        }\n@@ -71,2 +61,0 @@\n-        return InetAddress.getLoopbackAddress();\n-    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkServer.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        sb.append(\"Usage: java -jar jcstress.jar [options]\");\n+        sb.append(\"Usage: java [properties] -jar jcstress.jar [options]\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/OptionFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}