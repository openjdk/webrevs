{"files":[{"patch":"@@ -30,0 +30,3 @@\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n@@ -35,42 +38,136 @@\n-    private static final String JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS = \"jcstress.timeBudget.defaultPerTestMs\";\n-    private static final int JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT = 3000;\n-    private static final String JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_COMMENT = JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS +\n-            \" set default time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT +\n-            \"ms set to \" + getJcstressTimeBudgetDefaultPerTestMs() + \"ms\";\n-\n-    private static final String JCSTRESS_TIMEBUDGET_MINTIMEMS = \"jcstress.timeBudget.minTimeMs\";\n-    private static final int JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT = 30;\n-    private static final String JCSTRESS_TIMEBUDGET_MINTIMEMS_COMMENT = JCSTRESS_TIMEBUDGET_MINTIMEMS +\n-            \" set minimal time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT +\n-            \"ms set to \" + getJcstressTimeBudgetMinTimeMs() + \"ms\";\n-\n-    private static final String JCSTRESS_TIMEBUDGET_MAXTIMEMS = \"jcstress.timeBudget.maxTimeMs\";\n-    private static final int JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT = 60_000;\n-    private static final String JCSTRESS_TIMEBUDGET_MAXTIMEMS_COMMENT = JCSTRESS_TIMEBUDGET_MAXTIMEMS +\n-            \" set maximum time the individual test executes. Defaults to \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT +\n-            \"ms set to \" + getJcstressTimeBudgetMaxTimeMs() + \"ms\";\n-\n-    private static final String JCSTRESS_TIMEBUDGET_ADDITIONAL_COMMENT = \"The time each test is run is (simplified) calculated as value of \" + Options.TIME_BUDGET_SWITCH + \" switch divided by number of tests (after all filters applied)\" +\n-            \" If te resulting time is smaller then \" + JCSTRESS_TIMEBUDGET_MINTIMEMS + \", it is used.  If it si bigger then \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS + \" it is used. If no \" + Options.TIME_BUDGET_SWITCH + \"  is set,\" +\n-            \" then \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS + \" is used. See \" + Options.TIME_BUDGET_SWITCH + \" for more info. Properties do not accept unit suffixes.\";\n-\n-    private static final String JCSTRESS_LINK_ADDRESS = \"jcstress.link.address\";\n-    private static final String JCSTRESS_LINK_ADDRESS_COMMENT = JCSTRESS_LINK_ADDRESS + \" is address where to connect to forked VMs. Defaults to loop-back. Set to '\" + getListenAddressForInfo() + \"'\";\n-\n-    private static final String JCSTRESS_LINK_PORT = \"jcstress.link.port\";\n-    private static final int JCSTRESS_LINK_PORT_DEFAULT = 0;\n-    private static final String JCSTRESS_LINK_PORT_COMMENT = JCSTRESS_LINK_PORT + \" is port where to connect to forked VMs on \" + JCSTRESS_LINK_ADDRESS + \". Defaults to \" + JCSTRESS_LINK_PORT_DEFAULT + \" (random free port).\" +\n-            \" Set to \" + getJcstressLinkPort();\n-\n-    private static final String JCSTRESS_LINK_TIMEOUTMS = \"jcstress.link.timeoutMs\";\n-    private static final int JCSTRESS_LINK_TIMEOUTMS_DEFAULT = 30 * 1000;\n-    private static final String JCSTRESS_LINK_TIMEOUTMS_COMMENT = JCSTRESS_LINK_TIMEOUTMS + \" set timeout to forked VM communication ms.\" +\n-            \" Defaults to \" + JCSTRESS_LINK_TIMEOUTMS_DEFAULT + \"ms. Set to \" + getJcstressLinkTimeoutMs() + \"ms.\";\n-\n-    private static final String JCSTRESS_CONSOLE_PRINTINTERVALMS = \"jcstress.console.printIntervalMs\";\n-    private static final long JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT = 1_000;\n-    private static final long JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT = 15_000;\n-    private static final String JCSTRESS_CONSOLE_PRINTINTERVALMS_COMMENT = JCSTRESS_CONSOLE_PRINTINTERVALMS + \" sets interval how often to print results to console in ms. Have two defaults: \" +\n-            JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT + \"ms in interactive mode and \" +\n-            JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT + \"ms in noninteractive mode. Set to \" +\n-            getPrintIntervalMs() + \"ms\";\n+\n+    private static abstract class JcstressProperty<T> {\n+        private final String key;\n+        private final List<T> defaults;\n+\n+        public JcstressProperty(String key, T[] defaults) {\n+            this.key = key;\n+            this.defaults = Collections.unmodifiableList(Arrays.asList(defaults));\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        public List<T> getDefaults() {\n+            return defaults;\n+        }\n+\n+        public T getDefault() {\n+            return defaults.get(0);\n+        }\n+\n+        public boolean isCustom(){\n+            return System.getProperty(getKey()) != null;\n+        }\n+\n+        public abstract String getDescription();\n+\n+        public abstract T getValue();\n+    }\n+\n+    private static abstract class IntJcstressProperty extends JcstressProperty<Integer> {\n+\n+        public IntJcstressProperty(String key, Integer... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public Integer getValue() {\n+            return Integer.getInteger(getKey(), getDefault());\n+        }\n+    }\n+\n+    private static abstract class LongJcstressProperty extends JcstressProperty<Long> {\n+\n+        public LongJcstressProperty(String key, Long... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public Long getValue() {\n+            return Long.getLong(getKey(), getDefault());\n+        }\n+    }\n+\n+\n+    private static abstract class StringJcstressProperty extends JcstressProperty<String> {\n+\n+        public StringJcstressProperty(String key, String... defaults) {\n+            super(key, defaults);\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return System.getProperty(getKey(), getDefault());\n+        }\n+    }\n+\n+    private static final IntJcstressProperty TIMEBUDGET_DEFAULTPERTESTMS = new IntJcstressProperty(\"jcstress.timeBudget.defaultPerTestMs\", 3000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set default time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    private static final IntJcstressProperty TIMEBUDGET_MINTIMEMS = new IntJcstressProperty(\"jcstress.timeBudget.minTimeMs\", 30) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set minimal time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    private static final IntJcstressProperty TIMEBUDGET_MAXTIMEMS = new IntJcstressProperty(\"jcstress.timeBudget.maxTimeMs\", 60_000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() +\n+                    \" set maximum time the individual test executes. Defaults to \" + getDefault() +\n+                    \"ms set to \" + getValue() + \"ms\";\n+        }\n+    };\n+\n+    private static final String TIMEBUDGET_ADDITIONAL_COMMENT = \"The time each test is run is (simplified) calculated as value of \" + Options.TIME_BUDGET_SWITCH + \" switch divided by number of tests (after all filters applied)\" +\n+            \" If te resulting time is smaller then \" + TIMEBUDGET_MINTIMEMS.getKey() + \", it is used.  If it si bigger then \" + TIMEBUDGET_MAXTIMEMS.getKey() + \" it is used. If no \" + Options.TIME_BUDGET_SWITCH + \"  is set,\" +\n+            \" then \" + TIMEBUDGET_DEFAULTPERTESTMS.getKey() + \" is used. See \" + Options.TIME_BUDGET_SWITCH + \" for more info. Properties do not accept unit suffixes.\";\n+\n+    private static final StringJcstressProperty LINK_ADDRESS = new StringJcstressProperty(\"jcstress.link.address\", new String[]{null}) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" is address where to connect to forked VMs. Defaults to loop-back. Set to '\" + getListenAddressForInfo() + \"'\";\n+        }\n+    };\n+\n+\n+    private static final IntJcstressProperty LINK_PORT = new IntJcstressProperty(\"jcstress.link.port\", 0) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" is port where to connect to forked VMs on \" + LINK_ADDRESS.getKey() + \". Defaults to \" + getDefault() + \" (random free port).\" +\n+                    \" Set to \" + getJcstressLinkPort();\n+        }\n+    };\n+\n+    private static final IntJcstressProperty LINK_TIMEOUTMS = new IntJcstressProperty(\"jcstress.link.timeoutMs\", 30 * 1000) {\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" set timeout to forked VM communication ms.\" +\n+                    \" Defaults to \" + getDefault() + \"ms. Set to \" + getValue() + \"ms.\";\n+        }\n+    };\n+\n+    private static final LongJcstressProperty CONSOLE_PRINTINTERVALMS = new LongJcstressProperty(\"jcstress.console.printIntervalMs\", 1_000L, 15_000L) {\n+\n+        @Override\n+        public Long getValue() {\n+            return Long.getLong(getKey(), null);\n+        }\n+\n+        @Override\n+        public String getDescription() {\n+            return getKey() + \" sets interval how often to print results to console in ms. Have two defaults: \" +\n+                    getDefaults().get(0) + \"ms in interactive mode and \" +\n+                    getDefaults().get(1) + \"ms in noninteractive mode. Set to \" +\n+                    getPrintIntervalMs() + \"ms\";\n+        }\n+    };\n@@ -79,1 +176,1 @@\n-        return Integer.getInteger(JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS, JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_DEFAULT);\n+        return TIMEBUDGET_DEFAULTPERTESTMS.getValue();\n@@ -83,1 +180,1 @@\n-        return Integer.getInteger(JCSTRESS_TIMEBUDGET_MINTIMEMS, JCSTRESS_TIMEBUDGET_MINTIMEMS_DEFAULT);\n+        return TIMEBUDGET_MINTIMEMS.getValue();\n@@ -87,1 +184,1 @@\n-        return Integer.getInteger(JCSTRESS_TIMEBUDGET_MAXTIMEMS, JCSTRESS_TIMEBUDGET_MAXTIMEMS_DEFAULT);\n+        return TIMEBUDGET_MAXTIMEMS.getValue();\n@@ -91,1 +188,1 @@\n-        return System.getProperty(JCSTRESS_LINK_ADDRESS);\n+        return LINK_ADDRESS.getValue();\n@@ -94,1 +191,1 @@\n-    public static String getListenAddressForInfo() {\n+    private static String getListenAddressForInfo() {\n@@ -117,1 +214,1 @@\n-        return Integer.getInteger(JCSTRESS_LINK_PORT, JCSTRESS_LINK_PORT_DEFAULT);\n+        return LINK_PORT.getValue();\n@@ -122,1 +219,1 @@\n-        return Integer.getInteger(JCSTRESS_LINK_TIMEOUTMS, JCSTRESS_LINK_TIMEOUTMS_DEFAULT);\n+        return LINK_TIMEOUTMS.getValue();\n@@ -129,4 +226,0 @@\n-    private static String getJcstressConsolePrintIntervalMs() {\n-        return System.getProperty(JCSTRESS_CONSOLE_PRINTINTERVALMS);\n-    }\n-\n@@ -134,3 +227,3 @@\n-        return (getJcstressConsolePrintIntervalMs() != null) ?\n-                Long.parseLong(getJcstressConsolePrintIntervalMs()) :\n-                isProgressInteractive() ? JCSTRESS_CONSOLE_PRINTINTERVALMS_INTERACTIVE_DEFAULT : JCSTRESS_CONSOLE_PRINTINTERVALMS_NONINTERACTIVE_DEFAULT;\n+        return (CONSOLE_PRINTINTERVALMS.isCustom()) ?\n+                CONSOLE_PRINTINTERVALMS.getValue() :\n+                isProgressInteractive() ? CONSOLE_PRINTINTERVALMS.getDefaults().get(0) : CONSOLE_PRINTINTERVALMS.getDefaults().get(1);\n@@ -141,8 +234,8 @@\n-        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_DEFAULTPERTESTMS_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_MINTIMEMS_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_MAXTIMEMS_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_TIMEBUDGET_ADDITIONAL_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_LINK_ADDRESS_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_LINK_PORT_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_LINK_TIMEOUTMS_COMMENT);\n-        ouer.println(\"  \" + JCSTRESS_CONSOLE_PRINTINTERVALMS_COMMENT);\n+        ouer.println(\"  \" + TIMEBUDGET_DEFAULTPERTESTMS.getDescription());\n+        ouer.println(\"  \" + TIMEBUDGET_MINTIMEMS.getDescription());\n+        ouer.println(\"  \" + TIMEBUDGET_MAXTIMEMS.getDescription());\n+        ouer.println(\"  \" + TIMEBUDGET_ADDITIONAL_COMMENT);\n+        ouer.println(\"  \" + LINK_ADDRESS.getDescription());\n+        ouer.println(\"  \" + LINK_PORT.getDescription());\n+        ouer.println(\"  \" + LINK_TIMEOUTMS.getDescription());\n+        ouer.println(\"  \" + CONSOLE_PRINTINTERVALMS.getDescription());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/UsedProperties.java","additions":157,"deletions":64,"binary":false,"changes":221,"status":"modified"}]}