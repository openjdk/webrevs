{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.infra.grading.FailFastKiller;\n@@ -69,1 +70,8 @@\n-        TestResultCollector mux = MuxCollector.of(printer, diskCollector);\n+        FailFastKiller failFastKiller = null;\n+        TestResultCollector mux;\n+        if (opts.isFailOnError()) {\n+            failFastKiller = new FailFastKiller(opts, new PrintWriter(out, true), config.configs);\n+            mux = MuxCollector.of(printer, diskCollector, failFastKiller);\n+        } else {\n+            mux = MuxCollector.of(printer, diskCollector);\n+        }\n@@ -74,0 +82,3 @@\n+        if (failFastKiller != null) {\n+            failFastKiller.setExecutor(executor);\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+\n+    public static final String FAIL_ON_ERROR = \"foe\";\n+\n@@ -69,0 +72,1 @@\n+    private boolean failOnError;\n@@ -153,0 +157,4 @@\n+        parser.accepts(FAIL_ON_ERROR, \"Tells the framework to exit after \"\n+                + \"failure or error and no longer waste HW cycles. Soft errors do not count by default.\");\n+\n+\n@@ -263,0 +271,2 @@\n+        this.failOnError = set.has(FAIL_ON_ERROR);\n+\n@@ -395,0 +405,4 @@\n+    public boolean isFailOnError() {\n+        return failOnError;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    private boolean diedFast = false;\n@@ -145,1 +146,0 @@\n-\n@@ -170,0 +170,4 @@\n+            if (diedFast) {\n+                cleanup();\n+                return;\n+            }\n@@ -172,0 +176,4 @@\n+        cleanup();\n+    }\n+\n+    private void cleanup() {\n@@ -218,0 +226,8 @@\n+    public void setDiedFast() {\n+        diedFast=true;\n+    }\n+\n+    public boolean isDiedFast() {\n+        return diedFast;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Random;\n@@ -66,1 +67,3 @@\n-        status = Status.values()[dis.readInt()];\n+        \/\/status = Status.values()[dis.readInt()];\n+        dis.readInt();\n+        status = Status.values()[new Random().nextInt(6)];\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.openjdk.jcstress.infra.collectors.TestResultCollector;\n@@ -44,1 +43,1 @@\n-public class ConsoleReportPrinter implements TestResultCollector {\n+public class ConsoleReportPrinter extends CountingResultCollector {\n@@ -65,4 +64,0 @@\n-    private long passed;\n-    private long failed;\n-    private long softErrors;\n-    private long hardErrors;\n@@ -106,25 +101,1 @@\n-        TestGrading grading = r.grading();\n-\n-        boolean inHardError = false;\n-        switch (r.status()) {\n-            case TIMEOUT_ERROR:\n-            case CHECK_TEST_ERROR:\n-            case TEST_ERROR:\n-            case VM_ERROR:\n-                hardErrors++;\n-                inHardError = true;\n-                break;\n-            case API_MISMATCH:\n-                softErrors++;\n-                break;\n-            case NORMAL:\n-                if (grading.isPassed) {\n-                    passed++;\n-                } else {\n-                    failed++;\n-                }\n-                break;\n-            default:\n-                throw new IllegalStateException(\"Illegal status: \" + r.status());\n-        }\n-\n+        boolean inHardError = countResult(r);\n@@ -133,2 +104,2 @@\n-                !grading.isPassed ||\n-                grading.hasInteresting ||\n+                !r.grading().isPassed ||\n+                r.grading().hasInteresting ||\n@@ -219,0 +190,5 @@\n+        if (executor.isDiedFast()) {\n+            output.println(\"****************************************************\");\n+            output.println(\"To much failures occurred. Failing fast as requested\");\n+            output.println(\"****************************************************\");\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":9,"deletions":33,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.infra.grading;\n+\n+import org.openjdk.jcstress.infra.collectors.TestResult;\n+import org.openjdk.jcstress.infra.collectors.TestResultCollector;\n+\n+\n+\n+public abstract class  CountingResultCollector implements TestResultCollector {\n+\n+    protected long total;\n+    protected long passed;\n+    protected long failed;\n+    protected long softErrors;\n+    protected long hardErrors;\n+\n+    protected boolean countResult(TestResult r) {\n+        TestGrading grading = r.grading();\n+        total ++;\n+        boolean inHardError = false;\n+        switch (r.status()) {\n+            case TIMEOUT_ERROR:\n+            case CHECK_TEST_ERROR:\n+            case TEST_ERROR:\n+            case VM_ERROR:\n+                hardErrors++;\n+                inHardError = true;\n+                break;\n+            case API_MISMATCH:\n+                softErrors++;\n+                break;\n+            case NORMAL:\n+                if (grading.isPassed) {\n+                    passed++;\n+                } else {\n+                    failed++;\n+                }\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Illegal status: \" + r.status());\n+        }\n+        return inHardError;\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/CountingResultCollector.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2005, 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.infra.grading;\n+\n+import org.openjdk.jcstress.Options;\n+import org.openjdk.jcstress.TestExecutor;\n+import org.openjdk.jcstress.infra.collectors.TestResult;\n+import org.openjdk.jcstress.infra.runners.TestConfig;\n+\n+import java.io.PrintWriter;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+public class FailFastKiller extends CountingResultCollector {\n+\n+    private static final String INCLUDE_SOFT_ERRORS = \"jcstress.foe.countsoft\";\n+    private static final String LIMIT = \"jcstress.foe.limit\";\n+\n+    private TestExecutor executor;\n+    private final double absoluteThreshold;\n+    private final double relativeThreshold;\n+\n+    private final boolean includeSoftErrors;\n+\n+\n+    public FailFastKiller(Options opts, PrintWriter output, List<TestConfig> finalVariants) {\n+        output.println(\"  Fail-on-error enabled as:\");\n+        String originalValue = System.getProperty(LIMIT, \"1\");\n+        includeSoftErrors = Boolean.parseBoolean(System.getProperty(INCLUDE_SOFT_ERRORS, \"false\"));\n+        double userValue = Double.parseDouble(originalValue.replaceAll(\"%*\", \"\"));\n+        boolean relative = originalValue.endsWith(\"%\");\n+        List<TestConfig> variants = Collections.unmodifiableList(finalVariants);\n+        output.println(\"    all tests, \" + originalValue);\n+        output.println(\"    include soft errors: \" + includeSoftErrors);\n+        if (relative) {\n+            relativeThreshold = userValue;\n+            absoluteThreshold = (relativeThreshold * (double) variants.size()) \/ 100d;\n+        } else {\n+            absoluteThreshold = (long) userValue;\n+            relativeThreshold = (absoluteThreshold * 100d) \/ (double) variants.size();\n+        }\n+        output.println(\"    The suite will terminate once failure rate reaches \" + getRelativeThresholdNice() + \"% (\" + getAbsoluteThresholdNice() + \") of total tests (\" + variants.size() + \")\");\n+        output.println();\n+    }\n+\n+    @Override\n+    public synchronized void add(TestResult r) {\n+        addResult(r);\n+    }\n+\n+    private void addResult(TestResult r) {\n+        countResult(r);\n+        verifyState(r);\n+    }\n+\n+    private void verifyState(TestResult r) {\n+        long totalFailed = failed + hardErrors;\n+        if (includeSoftErrors) {\n+            totalFailed += softErrors;\n+        }\n+       if (totalFailed >= absoluteThreshold) {\n+            executor.setDiedFast();\n+        }\n+    }\n+\n+    public void setExecutor(TestExecutor executor) {\n+        this.executor = executor;\n+    }\n+\n+    private String getAbsoluteThresholdNice() {\n+        return String.format(\"%.0f\", absoluteThreshold);\n+    }\n+\n+    private String getRelativeThresholdNice() {\n+        return String.format(\"%.2f\", relativeThreshold);\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/FailFastKiller.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}