{"files":[{"patch":"@@ -72,1 +72,1 @@\n-        if (opts.isFailFast()) {\n+        if (opts.isFailOnError()) {\n@@ -82,1 +82,1 @@\n-        if (failFastKiller!=null) {\n+        if (failFastKiller != null) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,1 @@\n-    public static final String FAIL_FAST_TESTS = \"failFast\";\n-    public static final String FAIL_FAST_VARIANTS = \"failFAST\";\n+    public static final String FAIL_ON_ERROR = \"foe\";\n@@ -73,2 +72,1 @@\n-    private String failFastTests;\n-    private String failFastVariants;\n+    private boolean failOnError;\n@@ -159,4 +157,2 @@\n-        OptionSpec<String> optFaiFastTests = parser.accepts(FAIL_FAST_TESTS, \"Tells the framework to exit after specified number of failures. \" +\n-                        \"It can be absolute number, to simply set deadline. It can be suffixed by %. The deadline is then percent from al tests, \" +\n-                        \"or by %%, when the deadline will be calculated not from all tests, but from summ of currently finished tests. Soft errors do not count\/\")\n-                .withRequiredArg().ofType(String.class).describedAs(\"N\");\n+        parser.accepts(FAIL_ON_ERROR, \"Tells the framework to exit after \"\n+                + \"failure or error and no longer waste HW cycles. Soft errors do not count by default.\");\n@@ -164,3 +160,0 @@\n-        OptionSpec<String> optFaiFastVariants = parser.accepts(FAIL_FAST_VARIANTS, \"Same as \" + FAIL_FAST_TESTS + \" only the calculation is based on all test variants. \" +\n-                        \"See listing to clear up difference.\")\n-                .withRequiredArg().ofType(String.class).describedAs(\"N\");\n@@ -183,7 +176,0 @@\n-        if (set.has(FAIL_FAST_TESTS) && set.has(FAIL_FAST_VARIANTS)) {\n-            System.err.println(\"Only one from \" + FAIL_FAST_TESTS +\" and \" + FAIL_FAST_VARIANTS +\n-                    \" is allowed. You had set both.\");\n-            System.err.println();\n-            return false;\n-        }\n-\n@@ -285,2 +271,1 @@\n-        this.failFastTests = orDefault(set.valueOf(optFaiFastTests), null);\n-        this.failFastVariants = orDefault(set.valueOf(optFaiFastVariants), null);\n+        this.failOnError = set.has(FAIL_ON_ERROR);\n@@ -420,19 +405,2 @@\n-    public boolean isFailFast() {\n-        checkFailFast();\n-        return getFailFast() != null;\n-    }\n-\n-    public String getFailFast() {\n-        checkFailFast();\n-        return isFailFastAllVariants()?failFastVariants:failFastTests;\n-    }\n-\n-    public boolean isFailFastAllVariants() {\n-        checkFailFast();\n-        return failFastVariants != null;\n-    }\n-\n-    private void checkFailFast() {\n-        if (failFastVariants!=null && failFastTests != null) {\n-            throw new IllegalArgumentException(\"Both \" + FAIL_FAST_TESTS + \" and \" + FAIL_FAST_VARIANTS + \" was declared, that is illegal\");\n-        }\n+    public boolean isFailOnError() {\n+        return failOnError;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":7,"deletions":39,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Random;\n@@ -66,1 +67,3 @@\n-        status = Status.values()[dis.readInt()];\n+        \/\/status = Status.values()[dis.readInt()];\n+        dis.readInt();\n+        status = Status.values()[new Random().nextInt(6)];\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.util.HashMap;\n-import java.util.HashSet;\n@@ -37,3 +35,0 @@\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n@@ -44,9 +39,2 @@\n-    private final PrintWriter output;\n-    private final String originalValue;\n-    private final Map<String, Integer> tests;\n-    private final Set<String> failures = new HashSet<>();\n-    private final List<TestConfig> variants;\n-    private final boolean isFailFastAllVariants;\n-    private final double userValue;\n-    private final boolean relative;\n-    private final boolean superRelative;\n+    private static final String INCLUDE_SOFT_ERRORS = \"jcstress.foe.countsoft\";\n+    private static final String LIMIT = \"jcstress.foe.limit\";\n@@ -55,23 +43,16 @@\n-    private double absoluteThreshold = 1;\n-    private double relativeThreshold = 1;\n-    private int usedTotal = -1;\n-\n-\n-    public FailFastKiller(Options opts, PrintWriter pw, List<TestConfig> finalVariants) {\n-        this.output = pw;\n-        output.println(\"  FailFast attached as:\");\n-        this.originalValue = opts.getFailFast();\n-        this.userValue = Double.valueOf(originalValue.replaceAll(\"%*\", \"\"));\n-        this.relative = originalValue.endsWith(\"%\");\n-        this.superRelative = originalValue.endsWith(\"%%\");\n-        this.isFailFastAllVariants = opts.isFailFastAllVariants();\n-        this.variants = Collections.unmodifiableList(finalVariants);\n-        this.tests = groupVariants(finalVariants);\n-        if (isFailFastAllVariants) {\n-            output.println(\"    all variants, \" + originalValue);\n-            usedTotal = variants.size();\n-        } else {\n-            output.println(\"    whole tests, \" + originalValue);\n-            usedTotal = tests.size();\n-        }\n-        if (superRelative) {\n+    private final double absoluteThreshold;\n+    private final double relativeThreshold;\n+\n+    private final boolean includeSoftErrors;\n+\n+\n+    public FailFastKiller(Options opts, PrintWriter output, List<TestConfig> finalVariants) {\n+        output.println(\"  Fail-on-error enabled as:\");\n+        String originalValue = System.getProperty(LIMIT, \"1\");\n+        includeSoftErrors = Boolean.parseBoolean(System.getProperty(INCLUDE_SOFT_ERRORS, \"false\"));\n+        double userValue = Double.parseDouble(originalValue.replaceAll(\"%*\", \"\"));\n+        boolean relative = originalValue.endsWith(\"%\");\n+        List<TestConfig> variants = Collections.unmodifiableList(finalVariants);\n+        output.println(\"    all tests, \" + originalValue);\n+        output.println(\"    include soft errors: \" + includeSoftErrors);\n+        if (relative) {\n@@ -79,3 +60,1 @@\n-            absoluteThreshold = -1;\n-            output.println(\"    The suite will terminate once failure rate reaches \" + getRelativeThresholdNice()\n-                    + \"% of *currently* finished number of tests\/variants\");\n+            absoluteThreshold = (relativeThreshold * (double) variants.size()) \/ 100d;\n@@ -83,17 +62,2 @@\n-            if (relative) {\n-                relativeThreshold = userValue;\n-                if (isFailFastAllVariants) {\n-                    absoluteThreshold = (relativeThreshold * (double) variants.size()) \/ 100d;\n-                } else {\n-                    absoluteThreshold = (relativeThreshold * (double) tests.size()) \/ 100d;\n-                }\n-            } else {\n-                absoluteThreshold = (long) userValue;\n-                if (isFailFastAllVariants) {\n-                    relativeThreshold = (absoluteThreshold * 100d) \/ (double) variants.size();\n-                } else {\n-                    relativeThreshold = (absoluteThreshold * 100d) \/ (double) tests.size();\n-                }\n-            }\n-            output.println(\"    The suite will terminate once failure rate reaches \" + getRelativeThresholdNice() + \"% (\"\n-                    + getAbsoluteThresholdNice() + \") of total tests\/variants (\" + usedTotal + \")\");\n+            absoluteThreshold = (long) userValue;\n+            relativeThreshold = (absoluteThreshold * 100d) \/ (double) variants.size();\n@@ -101,0 +65,1 @@\n+        output.println(\"    The suite will terminate once failure rate reaches \" + getRelativeThresholdNice() + \"% (\" + getAbsoluteThresholdNice() + \") of total tests (\" + variants.size() + \")\");\n@@ -104,10 +69,0 @@\n-    private static Map<String, Integer> groupVariants(List<TestConfig> finalVariants) {\n-        Map<String, Integer> tests = new HashMap<>();\n-        for (TestConfig testVariant : finalVariants) {\n-            int counter = tests.getOrDefault(testVariant.name, 0);\n-            counter++;\n-            tests.put(testVariant.name, counter);\n-        }\n-        return tests;\n-    }\n-\n@@ -120,4 +75,0 @@\n-        int groupCounter = tests.get(r.getName());\n-        \/\/we are counting each group down, so we can assure that the group is finished\n-        tests.put(r.getName(), groupCounter-1);\n-        long wasFailed = hardErrors + failed;\n@@ -125,4 +76,0 @@\n-        long isFailed = hardErrors + failed;\n-        if (isFailed > wasFailed) {\n-            failures.add(r.getName());\n-        }\n@@ -134,1 +81,1 @@\n-        if (System.getProperty(\"jcstress.failfast.countsoft\") != null) {\n+        if (includeSoftErrors) {\n@@ -137,23 +84,2 @@\n-        if (superRelative) {\n-            double totalFinishedUpToNow;\n-            if (isFailFastAllVariants) {\n-                totalFinishedUpToNow = passed + failed + softErrors + hardErrors;\n-            } else {\n-                totalFinishedUpToNow = tests.values().stream().filter(a -> a <= 0).collect(Collectors.counting());\n-            }\n-            double currentAbsoluteThreshold = (relativeThreshold * totalFinishedUpToNow) \/ 100d;\n-            \/\/there must be enough finished to get to some reasonable numbers\n-            if (currentAbsoluteThreshold > 1 && totalFailed > currentAbsoluteThreshold) {\n-                executor.setDiedFast();\n-            }\n-        } else {\n-            if (isFailFastAllVariants) {\n-                if (totalFailed > absoluteThreshold) {\n-                    executor.setDiedFast();\n-                }\n-            } else {\n-                \/\/we have to ensure, that all tests in current group finished\n-                if (failures.size() > absoluteThreshold && tests.get(r.getName()) <= 0) {\n-                    executor.setDiedFast();\n-                }\n-            }\n+       if (totalFailed >= absoluteThreshold) {\n+            executor.setDiedFast();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/FailFastKiller.java","additions":25,"deletions":99,"binary":false,"changes":124,"status":"modified"}]}