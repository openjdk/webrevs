{"files":[{"patch":"@@ -219,1 +219,2 @@\n-        SortedSet<String> s = new TreeSet<>();\n+        return getTests(filter);\n+    }\n@@ -221,0 +222,2 @@\n+    public SortedSet<String> getTests(String filter) {\n+        SortedSet<String> s = new TreeSet<>();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jcstress.util.StringUtils;\n@@ -30,0 +31,1 @@\n+import java.io.PrintStream;\n@@ -38,0 +40,1 @@\n+    \/\/Will flatten the header of complex json headers, if it is undesired by user for some reason\n@@ -39,0 +42,4 @@\n+    \/\/with json mixed to stdout, onehave to sed the header off, which may be inconvenient. This property will move it to stderr\n+    \/\/it may be better to move all the diagnostics to stderr, but that would bw quite invasive touch\n+    \/\/jcstress is strongly redirecting all stderrs of nested vms to stdout, so the list\/json should remain clear\n+    public static final String LIST_TO_STDERR = \"jcstress.list.stderr\";\n@@ -64,0 +71,1 @@\n+    private final PrintStream listingOut;\n@@ -68,0 +76,16 @@\n+        if (isStderr()) {\n+            this.listingOut = System.err;\n+        } else {\n+            this.listingOut = jcstress.out;\n+        }\n+    }\n+\n+    private boolean isJsonHeader() {\n+        if (jcstress.opts.listingType() == ListingTypes.JSON_ALL || jcstress.opts.listingType() == ListingTypes.JSON_ALL_MATCHING) {\n+            return false;\n+        }\n+        return System.getProperty(FLAT_JSON_VARIANTS) == null;\n+    }\n+\n+    private boolean isStderr() {\n+        return System.getProperty(LIST_TO_STDERR) != null;\n@@ -72,0 +96,11 @@\n+        Map<String, Object> testsToPrint = gatherTests();\n+        if (jcstress.opts.listingType().toString().startsWith(\"TOTAL_\")) {\n+            return testsToPrint.size();\n+        } else {\n+            printTests(testsToPrint);\n+            return testsToPrint.size();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> gatherTests() {\n@@ -79,2 +114,2 @@\n-                    \/\/in json mode, see FIXME lower\n-                    testsToPrint.put(test.toDetailedTest(), null);\n+                    String id = test.toDetailedTest(isJsonWithHeader(), true, true, true);\n+                    testsToPrint.put(id, null);\n@@ -88,2 +123,2 @@\n-                    \/\/in json mode, see FIXME lower\n-                    Integer counter = (Integer) testsToPrint.getOrDefault(test.getTestVariant(false), 0);\n+                    String id = test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader());\n+                    Integer counter = (Integer) testsToPrint.getOrDefault(id, 0);\n@@ -91,1 +126,1 @@\n-                    testsToPrint.put(test.getTestVariant(false), counter);\n+                    testsToPrint.put(id, counter);\n@@ -99,1 +134,2 @@\n-                    Integer counter = (Integer) testsToPrint.getOrDefault(test.name, 0);\n+                    String id = StringUtils.fieldToString(\"name\", isJson(), false, test.name);\n+                    Integer counter = (Integer) testsToPrint.getOrDefault(id, 0);\n@@ -101,1 +137,1 @@\n-                    testsToPrint.put(test.name, counter);\n+                    testsToPrint.put(id, counter);\n@@ -109,2 +145,2 @@\n-                    Set<String> items = (Set<String>) testsToPrint.getOrDefault(test.getTestVariant(false), new TreeSet<String>());\n-                    \/\/in json mode, see FIXME lower\n+                    String id = test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader());\n+                    Set<String> items = (Set<String>) testsToPrint.getOrDefault(id, new TreeSet<String>());\n@@ -112,1 +148,1 @@\n-                    testsToPrint.put(test.getTestVariant(false), items);\n+                    testsToPrint.put(id, items);\n@@ -120,3 +156,4 @@\n-                    Set<String> items = (Set<String>) (testsToPrint.getOrDefault(test.name, new TreeSet<String>()));\n-                    items.add(test.getTestVariant(false));\n-                    testsToPrint.put(test.name, items);\n+                    String id = StringUtils.fieldToString(\"name\", isJson(), false, test.name);\n+                    Set<String> items = (Set<String>) (testsToPrint.getOrDefault(id, new TreeSet<String>()));\n+                    items.add(test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader()));\n+                    testsToPrint.put(id, items);\n@@ -137,1 +174,1 @@\n-                for (String test : jcstress.getTests()) {\n+                for (String test : jcstress.getTests(\".*\")) {\n@@ -145,6 +182,7 @@\n-        if (jcstress.opts.listingType().toString().startsWith(\"TOTAL_\")) {\n-            return testsToPrint.size();\n-        }\n-        if (jcstress.opts.listingType().toString().startsWith(\"JSON_\")) {\n-            jcstress.out.println(\"{\");\n-            jcstress.out.println(\"\\\"toal\\\": \" + testsToPrint.size() + \", \\\"list\\\": [\");\n+        return testsToPrint;\n+    }\n+\n+    private void printTests(Map<String, Object> testsToPrint) {\n+        if (isJson()) {\n+            listingOut.println(\"{\");\n+            listingOut.println(\"\\\"toal\\\": \" + testsToPrint.size() + \", \\\"list\\\": [\");\n@@ -157,2 +195,6 @@\n-                if (jcstress.opts.listingType().toString().startsWith(\"JSON_\")) {\n-                    jcstress.out.print(\"\\\"\" + test.getKey() + \"\\\"\");\n+                if (isJson()) {\n+                    if (isJsonHeader()) {\n+                        listingOut.println(\"{\" + test.getKey() + \"}\");\n+                    } else {\n+                        listingOut.print(\"\\\"\" + test.getKey() + \"\\\"\");\n+                    }\n@@ -161,1 +203,1 @@\n-                    jcstress.out.println(test.getKey());\n+                    listingOut.println(test.getKey());\n@@ -165,7 +207,6 @@\n-                    \/\/\"[publish, consume], spinLoopStyle: Thread.onSpinWait(), threads: 2, forkId: 2, maxFootprintMB: 64, compileMode: 8, shClass: (PG 0, CG 0), (PG 0, CG 1), strideSize: 256, strideCount: 40, cpuMap: null, [-XX:+UseBiasedLocking, -XX:+StressLCM, -XX:+StressGCM, -XX:+StressIGVN,\n-                    \/\/ -XX:+StressCCP, -XX:StressSeed=yyyyyyyy]\": 1\n-                    \/\/x\n-                    \/\/ \"org.openjdk.jcstress.tests.unsafe.UnsafeAddLong1\": 96\n-                    \/\/FIXME, refactor the first, long one, so individual parts are json elements\n-                    if (jcstress.opts.listingType().toString().startsWith(\"JSON_\")) {\n-                        jcstress.out.println(\"{\\\"\" + test.getKey() + \"\\\": \" + test.getValue() + \"}\");\n+                    if (isJson()) {\n+                        if (isJsonHeader() || isInvertedGroup()) {\n+                            listingOut.println(\"{\" + test.getKey() + \", \\\"testcount\\\":\" + test.getValue() + \"}\");\n+                        } else {\n+                            listingOut.println(\"{\\\"\" + test.getKey() + \"\\\": \" + test.getValue() + \"}\");\n+                        }\n@@ -174,1 +215,1 @@\n-                        jcstress.out.println(test.getValue() + \" \" + test.getKey());\n+                        listingOut.println(test.getValue() + \" \" + test.getKey());\n@@ -177,3 +218,6 @@\n-                    \/\/FIXME, same as above\n-                    if (jcstress.opts.listingType().toString().startsWith(\"JSON_\")) {\n-                        jcstress.out.println(\"{\\\"\" + test.getKey() + \"\\\": [\");\n+                    if (isJson()) {\n+                        if (isJsonHeader() || isInvertedGroup()) {\n+                            listingOut.println(\"{\" + test.getKey() + \", \\\"testlist\\\": [\");\n+                        } else {\n+                            listingOut.println(\"{\\\"\" + test.getKey() + \"\\\": [\");\n+                        }\n@@ -183,1 +227,8 @@\n-                            jcstress.out.println(\"\\\"\" + item + \"\\\"\");\n+                            if (jcstress.opts.listingType() == ListingTypes.JSON_MATCHING_GROUPS) {\n+                                \/\/?\n+                                listingOut.println(\"\\\"\" + item + \"\\\"\");\n+                            } else if (isJsonHeader()) {\n+                                listingOut.println(\"{\" + item + \"}\");\n+                            } else {\n+                                listingOut.println(\"\\\"\" + item + \"\\\"\");\n+                            }\n@@ -186,1 +237,1 @@\n-                        jcstress.out.println(\"]}\");\n+                        listingOut.println(\"]}\");\n@@ -189,1 +240,1 @@\n-                        jcstress.out.println(test.getKey() + \" \" + ((Collection) test.getValue()).size());\n+                        listingOut.println(test.getKey() + \" \" + ((Collection) test.getValue()).size());\n@@ -191,1 +242,1 @@\n-                            jcstress.out.println(\"    \" + item);\n+                            listingOut.println(\"    \" + item);\n@@ -195,1 +246,1 @@\n-                    jcstress.out.println(test.getKey() + \"=?=\" + test.getValue());\n+                    listingOut.println(test.getKey() + \"=?=\" + test.getValue());\n@@ -199,2 +250,2 @@\n-        if (jcstress.opts.listingType().toString().startsWith(\"JSON_\")) {\n-            jcstress.out.println(\"]}\");\n+        if (isJson()) {\n+            listingOut.println(\"]}\");\n@@ -202,1 +253,0 @@\n-        return testsToPrint.size();\n@@ -205,0 +255,13 @@\n+    private boolean isJsonWithHeader() {\n+        return isJson() && isJsonHeader();\n+    }\n+\n+    private boolean isJson() {\n+        return jcstress.opts.listingType().toString().startsWith(\"JSON_\");\n+    }\n+\n+    private boolean isInvertedGroup() {\n+        return jcstress.opts.listingType().toString().contains(\"IGROUPS\");\n+    }\n+\n+\n@@ -207,1 +270,1 @@\n-            jcstress.out.println(\",\");\n+            listingOut.println(\",\");\n@@ -209,1 +272,1 @@\n-            jcstress.out.println();\n+            listingOut.println();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestListing.java","additions":107,"deletions":44,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import org.openjdk.jcstress.util.StringUtils;\n@@ -39,0 +40,1 @@\n+import java.util.Collection;\n@@ -40,0 +42,1 @@\n+import java.util.stream.Collectors;\n@@ -249,2 +252,1 @@\n-\n-    public String getTestVariant(boolean seed) {\n+    public String getTestVariant(boolean seed, boolean json) {\n@@ -255,11 +257,11 @@\n-        idString.append(actorNames)\n-                .append(\", spinLoopStyle: \").append(spinLoopStyle)\n-                .append(\", threads: \").append(threads)\n-                .append(\", forkId: \").append(forkId)\n-                .append(\", maxFootprintMB: \").append(maxFootprintMB)\n-                .append(\", compileMode: \").append(compileMode)\n-                .append(\", shClass: \").append(shClass)\n-                .append(\", strideSize: \").append(strideSize)\n-                .append(\", strideCount: \").append(strideCount)\n-                .append(\", cpuMap: \").append(cpuMap)\n-                .append(\", \").append(seed ? jvmArgs : maskSeed(jvmArgs));\n+        idString.append(StringUtils.fieldToString(\"actorNames\", json, actorNames))\n+                .append(\", \").append(StringUtils.fieldToString(\"spinLoopStyle\", json, spinLoopStyle))\n+                .append(\", \").append(StringUtils.fieldToString(\"threads\", json, threads))\n+                .append(\", \").append(StringUtils.fieldToString(\"forkId\", json, forkId))\n+                .append(\", \").append(StringUtils.fieldToString(\"maxFootprintMB\", json, maxFootprintMB))\n+                .append(\", \").append(StringUtils.fieldToString(\"compileMode\", json, compileMode))\n+                .append(\", \").append(StringUtils.fieldToString(\"shClass\", json, shClass))\n+                .append(\", \").append(StringUtils.fieldToString(\"strideSize\", json, strideSize))\n+                .append(\", \").append(StringUtils.fieldToString(\"strideCount\", json, strideCount))\n+                .append(\", \").append(StringUtils.fieldToString(\"cpuMap\", json, cpuMap))\n+                .append(\", \").append(StringUtils.fieldToString(\"jvmArgs\", json, (seed ? jvmArgs : maskSeed(jvmArgs))));\n@@ -281,5 +283,17 @@\n-    public String toDetailedTest() {\n-        StringBuilder verboseOutput = new StringBuilder(name);\n-        verboseOutput.append(\" {\")\n-                .append(getTestVariant(true))\n-                .append(\"}\");\n+    public String toDetailedTest(boolean json, boolean showName, boolean seed, boolean keepBrackets) {\n+        StringBuilder verboseOutput = showName ? new StringBuilder(StringUtils.fieldToString(\"name\", json, false, name)) : new StringBuilder();\n+        if (json) {\n+            if (showName) {\n+                verboseOutput.append(\", \");\n+            }\n+            verboseOutput.append(\"\\\"metadata\\\": \");\n+        } else {\n+            if (showName) {\n+                verboseOutput.append(\" \");\n+            }\n+        }\n+        if (keepBrackets) {\n+            verboseOutput.append(\"{\").append(getTestVariant(seed, json)).append(\"}\");\n+        } else {\n+            verboseOutput.append(getTestVariant(seed, json));\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.stream.Collectors;\n@@ -176,0 +177,49 @@\n+\n+    public static String fieldToString(String name, boolean json, Collection<? extends Object> field) {\n+        String value;\n+        if (json) {\n+            value = \"\\\"\" + (field.stream().map( a -> String.valueOf(a)).collect(Collectors.joining(\"\\\",\\\"\"))) + \"\\\"\";\n+        } else {\n+            value = field.toString();\n+        }\n+        return fieldToStringImpl(name, json, false, value, true);\n+    }\n+\n+    public static String fieldToString(String name, boolean json, Object field) {\n+        return fieldToString(name, json, true, String.valueOf(field));\n+    }\n+\n+    public static String fieldToString(String name, boolean json, boolean showName, Object field) {\n+        return fieldToStringImpl(name, json, showName, String.valueOf(field), false);\n+    }\n+\n+    private static String fieldToStringImpl(String name, boolean json, boolean showName, String field, boolean arrayQuotes) {\n+        String finalForm;\n+        if (showName || json) {\n+            finalForm = key(json, name);\n+        } else {\n+            finalForm = \"\";\n+        }\n+        if (json) {\n+            if (arrayQuotes) {\n+                return finalForm + \"[\" + field + \"]\";\n+            } else {\n+                if (field.chars().allMatch( Character::isDigit )) {\n+                    \/\/all known usages use only int as numbers\n+                    return finalForm + field;\n+                } else {\n+                    return finalForm + \"\\\"\" + field + \"\\\"\";\n+                }\n+            }\n+        } else {\n+            return finalForm + field;\n+        }\n+    }\n+\n+    private static String key(boolean json, String title) {\n+        if (json) {\n+            return \"\\\"\" + title + \"\\\": \";\n+        } else {\n+            return title + \": \";\n+        }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/StringUtils.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}