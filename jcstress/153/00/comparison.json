{"files":[{"patch":"@@ -88,1 +88,1 @@\n-    private ConfigsWithScheduler getConfigs() {\n+    ConfigsWithScheduler getConfigs() {\n@@ -122,1 +122,1 @@\n-    private static class ConfigsWithScheduler {\n+    static class ConfigsWithScheduler {\n@@ -230,21 +230,0 @@\n-    public int listTests(Options opts) {\n-        JCStress.ConfigsWithScheduler configsWithScheduler = getConfigs();\n-        Set<String> testsToPrint = new TreeSet<>();\n-        for (TestConfig test : configsWithScheduler.configs) {\n-            if (opts.verbosity().printAllTests()) {\n-                testsToPrint.add(test.toDetailedTest());\n-            } else {\n-                testsToPrint.add(test.name);\n-            }\n-        }\n-        if (opts.verbosity().printAllTests()) {\n-            out.println(\"All matching tests combinations - \" + testsToPrint.size());\n-        } else {\n-            out.println(\"All matching tests - \" + testsToPrint.size());\n-        }\n-        for (String test : testsToPrint) {\n-            out.println(test);\n-        }\n-        return testsToPrint.size();\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-            jcstress.listTests(opts);\n+            TestListing testListing = new TestListing(jcstress);\n+            testListing.listTests();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Main.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private boolean list;\n+    private TestListing.ListingTypes list = TestListing.ListingTypes.NONE;\n@@ -84,3 +84,3 @@\n-        OptionSpec<Boolean> list = parser.accepts(\"l\", \"List the available tests matching the requested settings, \" +\n-                        \"after all filters (like CPU count) are applied. In verbose mode it prints all real combinations which will run.\")\n-                .withOptionalArg().ofType(Boolean.class).describedAs(\"bool\");\n+        OptionSpec<TestListing.ListingTypes> list = parser.accepts(\"l\", \"List the available tests. \"\n+                        + TestListing.ListingTypes.toDescription())\n+                .withOptionalArg().ofType(TestListing.ListingTypes.class).describedAs(\"ListingTypes\");\n@@ -187,1 +187,1 @@\n-        this.list = orDefault(set.has(list), false);\n+        this.list = getList(set, list);\n@@ -266,0 +266,12 @@\n+    private TestListing.ListingTypes getList(OptionSet set, OptionSpec<TestListing.ListingTypes> listSpec) {\n+        if (set.has(listSpec)) {\n+            if (set.hasArgument(listSpec)) {\n+                return set.valueOf(listSpec);\n+            } else {\n+                return TestListing.ListingTypes.ALL_MATCHING;\n+            }\n+        } else {\n+            return TestListing.ListingTypes.NONE;\n+        }\n+    }\n+\n@@ -300,1 +312,1 @@\n-        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks()*getForksStressMultiplier());\n+        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks() * getForksStressMultiplier());\n@@ -341,0 +353,4 @@\n+        return list != TestListing.ListingTypes.NONE;\n+    }\n+\n+    public TestListing.ListingTypes listingType() {\n@@ -395,1 +411,3 @@\n-    public TimeValue timeBudget() { return timeBudget; }\n+    public TimeValue timeBudget() {\n+        return timeBudget;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress;\n+\n+import org.openjdk.jcstress.infra.runners.TestConfig;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public class TestListing {\n+\n+    public enum ListingTypes {\n+        NONE, ALL, ALL_MATCHING, ALL_MATCHING_COMBINATIONS;\n+\n+        public static String toDescription() {\n+            return \"Optional parameter is: \"\n+                    + ALL + \" - all tests; \"\n+                    + ALL_MATCHING + \" all tests eligible for this system and configuration (like CPU count); \"\n+                    + ALL_MATCHING_COMBINATIONS + \" all real combinations which will run in this setup.\" +\n+                    \" Defaults to \" + ALL_MATCHING + \" if none provided.\";\n+        }\n+    }\n+\n+    private final JCStress jcstress;\n+\n+    public TestListing(JCStress jcstress) {\n+        this.jcstress = jcstress;\n+    }\n+\n+    public int listTests() {\n+        JCStress.ConfigsWithScheduler configsWithScheduler = jcstress.getConfigs();\n+        Set<String> testsToPrint = new TreeSet<>();\n+        switch (jcstress.opts.listingType()) {\n+            case ALL_MATCHING_COMBINATIONS:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    testsToPrint.add(test.toDetailedTest());\n+                }\n+                jcstress.out.println(\"All matching tests combinations - \" + testsToPrint.size());\n+                break;\n+            case ALL_MATCHING:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    testsToPrint.add(test.name);\n+                }\n+                jcstress.out.println(\"All matching tests - \" + testsToPrint.size());\n+                break;\n+            case ALL:\n+                for (String test : jcstress.getTests()) {\n+                    testsToPrint.add(test);\n+                }\n+                jcstress.out.println(\"All existing tests combinations - \" + testsToPrint.size());\n+                break;\n+            default:\n+                throw new RuntimeException(\"Invalid option for listing: \" + jcstress.opts.listingType());\n+        }\n+        for (String test : testsToPrint) {\n+            jcstress.out.println(test);\n+        }\n+        return testsToPrint.size();\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestListing.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}