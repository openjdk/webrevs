{"files":[{"patch":"@@ -88,1 +88,1 @@\n-    private ConfigsWithScheduler getConfigs() {\n+    ConfigsWithScheduler getConfigs() {\n@@ -122,1 +122,1 @@\n-    private static class ConfigsWithScheduler {\n+    static class ConfigsWithScheduler {\n@@ -219,1 +219,2 @@\n-        SortedSet<String> s = new TreeSet<>();\n+        return getTests(filter);\n+    }\n@@ -221,0 +222,2 @@\n+    public SortedSet<String> getTests(String filter) {\n+        SortedSet<String> s = new TreeSet<>();\n@@ -230,21 +233,0 @@\n-    public int listTests(Options opts) {\n-        JCStress.ConfigsWithScheduler configsWithScheduler = getConfigs();\n-        Set<String> testsToPrint = new TreeSet<>();\n-        for (TestConfig test : configsWithScheduler.configs) {\n-            if (opts.verbosity().printAllTests()) {\n-                testsToPrint.add(test.toDetailedTest());\n-            } else {\n-                testsToPrint.add(test.name);\n-            }\n-        }\n-        if (opts.verbosity().printAllTests()) {\n-            out.println(\"All matching tests combinations - \" + testsToPrint.size());\n-        } else {\n-            out.println(\"All matching tests - \" + testsToPrint.size());\n-        }\n-        for (String test : testsToPrint) {\n-            out.println(test);\n-        }\n-        return testsToPrint.size();\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":6,"deletions":24,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-            jcstress.listTests(opts);\n+            TestListing testListing = new TestListing(jcstress);\n+            testListing.listTests();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Main.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private boolean list;\n+    private TestListing.ListingTypes list = TestListing.ListingTypes.NONE;\n@@ -84,3 +84,3 @@\n-        OptionSpec<Boolean> list = parser.accepts(\"l\", \"List the available tests matching the requested settings, \" +\n-                        \"after all filters (like CPU count) are applied. In verbose mode it prints all real combinations which will run.\")\n-                .withOptionalArg().ofType(Boolean.class).describedAs(\"bool\");\n+        OptionSpec<TestListing.ListingTypes> list = parser.accepts(\"l\", \"List the available tests. \"\n+                        + TestListing.ListingTypes.toDescription())\n+                .withOptionalArg().ofType(TestListing.ListingTypes.class).describedAs(\"ListingTypes\");\n@@ -187,1 +187,1 @@\n-        this.list = orDefault(set.has(list), false);\n+        this.list = getList(set, list);\n@@ -266,0 +266,12 @@\n+    private TestListing.ListingTypes getList(OptionSet set, OptionSpec<TestListing.ListingTypes> listSpec) {\n+        if (set.has(listSpec)) {\n+            if (set.hasArgument(listSpec)) {\n+                return set.valueOf(listSpec);\n+            } else {\n+                return TestListing.ListingTypes.ALL_MATCHING;\n+            }\n+        } else {\n+            return TestListing.ListingTypes.NONE;\n+        }\n+    }\n+\n@@ -300,1 +312,1 @@\n-        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks()*getForksStressMultiplier());\n+        out.printf(\"    Forks per test: %d normal, %d stress%n\", getForks(), getForks() * getForksStressMultiplier());\n@@ -341,0 +353,4 @@\n+        return list != TestListing.ListingTypes.NONE;\n+    }\n+\n+    public TestListing.ListingTypes listingType() {\n@@ -395,1 +411,3 @@\n-    public TimeValue timeBudget() { return timeBudget; }\n+    public TimeValue timeBudget() {\n+        return timeBudget;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+\n+ *\/\n+package org.openjdk.jcstress;\n+\n+import org.openjdk.jcstress.infra.runners.TestConfig;\n+import org.openjdk.jcstress.util.StringUtils;\n+\n+import java.io.PrintStream;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+public class TestListing {\n+\n+    \/\/Will flatten the header of complex json headers, if it is undesired by user for some reason\n+    public static final String FLAT_JSON_VARIANTS = \"jcstress.list.json.flat\";\n+    \/\/with json mixed to stdout, onehave to sed the header off, which may be inconvenient. This property will move it to stderr\n+    \/\/it may be better to move all the diagnostics to stderr, but that would bw quite invasive touch\n+    \/\/jcstress is strongly redirecting all stderrs of nested vms to stdout, so the list\/json should remain clear\n+    public static final String LIST_TO_STDERR = \"jcstress.list.stderr\";\n+\n+    public enum ListingTypes {\n+        NONE, ALL, ALL_MATCHING, ALL_MATCHING_COMBINATIONS,\n+        MATCHING_GROUPS, MATCHING_GROUPS_COUNT,\n+        MATCHING_IGROUPS, MATCHING_IGROUPS_COUNT,\n+        TOTAL_ALL, TOTAL_ALL_MATCHING, TOTAL_ALL_MATCHING_COMBINATIONS,\n+        TOTAL_MATCHING_GROUPS, TOTAL_MATCHING_GROUPS_COUNT,\n+        TOTAL_MATCHING_IGROUPS, TOTAL_MATCHING_IGROUPS_COUNT,\n+        JSON_ALL, JSON_ALL_MATCHING, JSON_ALL_MATCHING_COMBINATIONS,\n+        JSON_MATCHING_GROUPS, JSON_MATCHING_GROUPS_COUNT,\n+        JSON_MATCHING_IGROUPS, JSON_MATCHING_IGROUPS_COUNT;\n+\n+        public static String toDescription() {\n+            return \"Optional parameter is: \"\n+                    + ALL + \" all tests; \"\n+                    + ALL_MATCHING + \" all tests eligible for this system and configuration (like CPU count); \"\n+                    + ALL_MATCHING_COMBINATIONS + \" all real combinations which will run in this setup; \"\n+                    + MATCHING_GROUPS + \" similar to above but the shared part is printed only once; \"\n+                    + MATCHING_GROUPS_COUNT + \" same as above, only instead of lsiting, just count is used; \"\n+                    + MATCHING_IGROUPS + \", \" + MATCHING_IGROUPS_COUNT + \" same as above, only inverted; \"\n+                    + \"Defaults to \" + ALL_MATCHING + \" if none provided. You can prefix by TOTAL_ or JSON_\"\n+                    + \"to print only summary line or to print valid jsons\";\n+        }\n+    }\n+\n+    private final PrintStream listingOut;\n+    private final JCStress jcstress;\n+\n+    public TestListing(JCStress jcstress) {\n+        this.jcstress = jcstress;\n+        if (isStderr()) {\n+            this.listingOut = System.err;\n+        } else {\n+            this.listingOut = jcstress.out;\n+        }\n+    }\n+\n+    private boolean isJsonHeader() {\n+        if (jcstress.opts.listingType() == ListingTypes.JSON_ALL || jcstress.opts.listingType() == ListingTypes.JSON_ALL_MATCHING) {\n+            return false;\n+        }\n+        return System.getProperty(FLAT_JSON_VARIANTS) == null;\n+    }\n+\n+    private boolean isStderr() {\n+        return System.getProperty(LIST_TO_STDERR) != null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public int listTests() {\n+        Map<String, Object> testsToPrint = gatherTests();\n+        if (jcstress.opts.listingType().toString().startsWith(\"TOTAL_\")) {\n+            return testsToPrint.size();\n+        } else {\n+            printTests(testsToPrint);\n+            return testsToPrint.size();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> gatherTests() {\n+        JCStress.ConfigsWithScheduler configsWithScheduler = jcstress.getConfigs();\n+        Map<String, Object> testsToPrint = new TreeMap<>();\n+        switch (jcstress.opts.listingType()) {\n+            case ALL_MATCHING_COMBINATIONS:\n+            case TOTAL_ALL_MATCHING_COMBINATIONS:\n+            case JSON_ALL_MATCHING_COMBINATIONS:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    String id = test.toDetailedTest(isJsonWithHeader(), true, true, true);\n+                    testsToPrint.put(id, null);\n+                }\n+                jcstress.out.println(\"All matching tests combinations - \" + testsToPrint.size());\n+                break;\n+            case MATCHING_GROUPS_COUNT:\n+            case TOTAL_MATCHING_GROUPS_COUNT:\n+            case JSON_MATCHING_GROUPS_COUNT:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    String id = test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader());\n+                    Integer counter = (Integer) testsToPrint.getOrDefault(id, 0);\n+                    counter++;\n+                    testsToPrint.put(id, counter);\n+                }\n+                jcstress.out.println(\"All existing combinations (each with count of test) \" + testsToPrint.size());\n+                break;\n+            case MATCHING_IGROUPS_COUNT:\n+            case TOTAL_MATCHING_IGROUPS_COUNT:\n+            case JSON_MATCHING_IGROUPS_COUNT:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    String id = StringUtils.fieldToString(\"name\", isJson(), false, test.name);\n+                    Integer counter = (Integer) testsToPrint.getOrDefault(id, 0);\n+                    counter++;\n+                    testsToPrint.put(id, counter);\n+                }\n+                jcstress.out.println(\"All matching tests (each with count of combinations) \" + testsToPrint.size());\n+                break;\n+            case MATCHING_GROUPS:\n+            case TOTAL_MATCHING_GROUPS:\n+            case JSON_MATCHING_GROUPS:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    String id = test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader());\n+                    Set<String> items = (Set<String>) testsToPrint.getOrDefault(id, new TreeSet<String>());\n+                    items.add(test.name);\n+                    testsToPrint.put(id, items);\n+                }\n+                jcstress.out.println(\"All existing combinations \" + testsToPrint.size());\n+                break;\n+            case MATCHING_IGROUPS:\n+            case TOTAL_MATCHING_IGROUPS:\n+            case JSON_MATCHING_IGROUPS:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    String id = StringUtils.fieldToString(\"name\", isJson(), false, test.name);\n+                    Set<String> items = (Set<String>) (testsToPrint.getOrDefault(id, new TreeSet<String>()));\n+                    items.add(test.toDetailedTest(isJsonWithHeader(), false, false, isJsonWithHeader()));\n+                    testsToPrint.put(id, items);\n+                }\n+                jcstress.out.println(\"All matching tests \" + testsToPrint.size());\n+                break;\n+            case ALL_MATCHING:\n+            case TOTAL_ALL_MATCHING:\n+            case JSON_ALL_MATCHING:\n+                for (TestConfig test : configsWithScheduler.configs) {\n+                    testsToPrint.put(test.name, null);\n+                }\n+                jcstress.out.println(\"All matching tests - \" + testsToPrint.size());\n+                break;\n+            case ALL:\n+            case TOTAL_ALL:\n+            case JSON_ALL:\n+                for (String test : jcstress.getTests(\".*\")) {\n+                    testsToPrint.put(test, null);\n+                }\n+                jcstress.out.println(\"All existing tests combinations - \" + testsToPrint.size());\n+                break;\n+            default:\n+                throw new RuntimeException(\"Invalid option for listing: \" + jcstress.opts.listingType());\n+        }\n+        return testsToPrint;\n+    }\n+\n+    private void printTests(Map<String, Object> testsToPrint) {\n+        if (isJson()) {\n+            listingOut.println(\"{\");\n+            listingOut.println(\"\\\"toal\\\": \" + testsToPrint.size() + \", \\\"list\\\": [\");\n+        }\n+        Set<Map.Entry<String, Object>> entries = testsToPrint.entrySet();\n+        int counter = entries.size();\n+        for (Map.Entry<String, Object> test : entries) {\n+            counter--;\n+            if (test.getValue() == null) {\n+                if (isJson()) {\n+                    if (isJsonHeader()) {\n+                        listingOut.println(\"{\" + test.getKey() + \"}\");\n+                    } else {\n+                        listingOut.print(\"\\\"\" + test.getKey() + \"\\\"\");\n+                    }\n+                    jsonArrayDelimiter(counter);\n+                } else {\n+                    listingOut.println(test.getKey());\n+                }\n+            } else {\n+                if (test.getValue() instanceof Integer) {\n+                    if (isJson()) {\n+                        if (isJsonHeader() || isInvertedGroup()) {\n+                            listingOut.println(\"{\" + test.getKey() + \", \\\"testcount\\\":\" + test.getValue() + \"}\");\n+                        } else {\n+                            listingOut.println(\"{\\\"\" + test.getKey() + \"\\\": \" + test.getValue() + \"}\");\n+                        }\n+                        jsonArrayDelimiter(counter);\n+                    } else {\n+                        listingOut.println(test.getValue() + \" \" + test.getKey());\n+                    }\n+                } else if (test.getValue() instanceof Collection) {\n+                    if (isJson()) {\n+                        if (isJsonHeader() || isInvertedGroup()) {\n+                            listingOut.println(\"{\" + test.getKey() + \", \\\"testlist\\\": [\");\n+                        } else {\n+                            listingOut.println(\"{\\\"\" + test.getKey() + \"\\\": [\");\n+                        }\n+                        int subcounter = ((Collection) test.getValue()).size();\n+                        for (Object item : (Collection) test.getValue()) {\n+                            subcounter--;\n+                            if (jcstress.opts.listingType() == ListingTypes.JSON_MATCHING_GROUPS) {\n+                                \/\/?\n+                                listingOut.println(\"\\\"\" + item + \"\\\"\");\n+                            } else if (isJsonHeader()) {\n+                                listingOut.println(\"{\" + item + \"}\");\n+                            } else {\n+                                listingOut.println(\"\\\"\" + item + \"\\\"\");\n+                            }\n+                            jsonArrayDelimiter(subcounter);\n+                        }\n+                        listingOut.println(\"]}\");\n+                        jsonArrayDelimiter(counter);\n+                    } else {\n+                        listingOut.println(test.getKey() + \" \" + ((Collection) test.getValue()).size());\n+                        for (Object item : (Collection) test.getValue()) {\n+                            listingOut.println(\"    \" + item);\n+                        }\n+                    }\n+                } else {\n+                    listingOut.println(test.getKey() + \"=?=\" + test.getValue());\n+                }\n+            }\n+        }\n+        if (isJson()) {\n+            listingOut.println(\"]}\");\n+        }\n+    }\n+\n+    private boolean isJsonWithHeader() {\n+        return isJson() && isJsonHeader();\n+    }\n+\n+    private boolean isJson() {\n+        return jcstress.opts.listingType().toString().startsWith(\"JSON_\");\n+    }\n+\n+    private boolean isInvertedGroup() {\n+        return jcstress.opts.listingType().toString().contains(\"IGROUPS\");\n+    }\n+\n+\n+    private void jsonArrayDelimiter(int counter) {\n+        if (counter != 0) {\n+            listingOut.println(\",\");\n+        } else {\n+            listingOut.println();\n+        }\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestListing.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+import org.openjdk.jcstress.util.StringUtils;\n@@ -38,0 +39,2 @@\n+import java.util.ArrayList;\n+import java.util.Collection;\n@@ -39,0 +42,1 @@\n+import java.util.stream.Collectors;\n@@ -248,2 +252,1 @@\n-\n-    public String toDetailedTest() {\n+    public String getTestVariant(boolean seed, boolean json) {\n@@ -253,14 +256,44 @@\n-        StringBuilder verboseOutput = new StringBuilder(name);\n-        verboseOutput.append(\" {\")\n-                .append(actorNames)\n-                .append(\", spinLoopStyle: \").append(spinLoopStyle)\n-                .append(\", threads: \").append(threads)\n-                .append(\", forkId: \").append(forkId)\n-                .append(\", maxFootprintMB: \").append(maxFootprintMB)\n-                .append(\", compileMode: \").append(compileMode)\n-                .append(\", shClass: \").append(shClass)\n-                .append(\", strideSize: \").append(strideSize)\n-                .append(\", strideCount: \").append(strideCount)\n-                .append(\", cpuMap: \").append(cpuMap)\n-                .append(\", \").append(jvmArgs)\n-                .append(\"}\");\n+        StringBuilder idString = new StringBuilder();\n+        idString.append(StringUtils.fieldToString(\"actorNames\", json, actorNames))\n+                .append(\", \").append(StringUtils.fieldToString(\"spinLoopStyle\", json, spinLoopStyle))\n+                .append(\", \").append(StringUtils.fieldToString(\"threads\", json, threads))\n+                .append(\", \").append(StringUtils.fieldToString(\"forkId\", json, forkId))\n+                .append(\", \").append(StringUtils.fieldToString(\"maxFootprintMB\", json, maxFootprintMB))\n+                .append(\", \").append(StringUtils.fieldToString(\"compileMode\", json, compileMode))\n+                .append(\", \").append(StringUtils.fieldToString(\"shClass\", json, shClass))\n+                .append(\", \").append(StringUtils.fieldToString(\"strideSize\", json, strideSize))\n+                .append(\", \").append(StringUtils.fieldToString(\"strideCount\", json, strideCount))\n+                .append(\", \").append(StringUtils.fieldToString(\"cpuMap\", json, cpuMap))\n+                .append(\", \").append(StringUtils.fieldToString(\"jvmArgs\", json, (seed ? jvmArgs : maskSeed(jvmArgs))));\n+        return idString.toString();\n+    }\n+\n+    private List<String> maskSeed(List<String> jvmArgs) {\n+        List<String> argsCopy = new ArrayList<>(jvmArgs.size());\n+        for (String arg : jvmArgs) {\n+            if (arg.startsWith(\"-XX:StressSeed=\")) {\n+                argsCopy.add(arg.replaceAll(\"[0-9]+\", \"yyyyyyyy\"));\n+            } else {\n+                argsCopy.add(arg);\n+            }\n+        }\n+        return argsCopy;\n+    }\n+\n+    public String toDetailedTest(boolean json, boolean showName, boolean seed, boolean keepBrackets) {\n+        StringBuilder verboseOutput = showName ? new StringBuilder(StringUtils.fieldToString(\"name\", json, false, name)) : new StringBuilder();\n+        if (json) {\n+            if (showName) {\n+                verboseOutput.append(\", \");\n+            }\n+            verboseOutput.append(\"\\\"metadata\\\": \");\n+        } else {\n+            if (showName) {\n+                verboseOutput.append(\" \");\n+            }\n+        }\n+        if (keepBrackets) {\n+            verboseOutput.append(\"{\").append(getTestVariant(seed, json)).append(\"}\");\n+        } else {\n+            verboseOutput.append(getTestVariant(seed, json));\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":49,"deletions":16,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.stream.Collectors;\n@@ -176,0 +177,49 @@\n+\n+    public static String fieldToString(String name, boolean json, Collection<? extends Object> field) {\n+        String value;\n+        if (json) {\n+            value = \"\\\"\" + (field.stream().map( a -> String.valueOf(a)).collect(Collectors.joining(\"\\\",\\\"\"))) + \"\\\"\";\n+        } else {\n+            value = field.toString();\n+        }\n+        return fieldToStringImpl(name, json, false, value, true);\n+    }\n+\n+    public static String fieldToString(String name, boolean json, Object field) {\n+        return fieldToString(name, json, true, String.valueOf(field));\n+    }\n+\n+    public static String fieldToString(String name, boolean json, boolean showName, Object field) {\n+        return fieldToStringImpl(name, json, showName, String.valueOf(field), false);\n+    }\n+\n+    private static String fieldToStringImpl(String name, boolean json, boolean showName, String field, boolean arrayQuotes) {\n+        String finalForm;\n+        if (showName || json) {\n+            finalForm = key(json, name);\n+        } else {\n+            finalForm = \"\";\n+        }\n+        if (json) {\n+            if (arrayQuotes) {\n+                return finalForm + \"[\" + field + \"]\";\n+            } else {\n+                if (field.chars().allMatch( Character::isDigit )) {\n+                    \/\/all known usages use only int as numbers\n+                    return finalForm + field;\n+                } else {\n+                    return finalForm + \"\\\"\" + field + \"\\\"\";\n+                }\n+            }\n+        } else {\n+            return finalForm + field;\n+        }\n+    }\n+\n+    private static String key(boolean json, String title) {\n+        if (json) {\n+            return \"\\\"\" + title + \"\\\": \";\n+        } else {\n+            return title + \": \";\n+        }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/StringUtils.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}