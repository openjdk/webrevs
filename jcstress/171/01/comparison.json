{"files":[{"patch":"@@ -89,2 +89,0 @@\n-        OSSupport.init();\n-\n@@ -93,0 +91,2 @@\n+        OSSupport.init();\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -288,0 +288,5 @@\n+                boolean localAffinity = task.shClass.mode() == AffinityMode.LOCAL;\n+                if (localAffinity && VMSupport.enableNativeAccessAvailable()) {\n+                    command.add(VMSupport.enableNativeAccessOpt());\n+                }\n+\n@@ -291,1 +296,1 @@\n-                command.add(Boolean.toString(task.shClass.mode() == AffinityMode.LOCAL));\n+                command.add(Boolean.toString(localAffinity));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os;\n+\n+import java.util.List;\n+\n+public class AffinitySupportPrepareMain {\n+\n+    public static void main(String... args) {\n+        List<String> list = AffinitySupport.prepare();\n+        for (String s : list) {\n+            System.out.println(OSSupport.AFFINITY_PREPARE_PREFIX + s);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/AffinitySupportPrepareMain.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jcstress.util.StringUtils;\n@@ -38,0 +39,2 @@\n+    static final String AFFINITY_PREPARE_PREFIX = \"AFFINITY-SUPPORT-PREPARE: \";\n+\n@@ -51,1 +54,1 @@\n-        System.out.println(\"Probing the target OS:\");\n+        System.out.println(\"Initializing and probing the target OS:\");\n@@ -55,1 +58,1 @@\n-        TASKSET_AVAILABLE = detectCommand(\"Trying to set global affinity with taskset\",\n+        TASKSET_AVAILABLE = detectCommand(\"Testing global affinity machinery (taskset)\",\n@@ -59,9 +62,11 @@\n-            \/\/ Prepare and dump affinity support collaterals\n-            AFFINITY_ADDITIONAL_OPTIONS = AffinitySupport.prepare();\n-\n-            \/\/ Test the unpacked mode works...\n-            List<String> test = new ArrayList<>(AFFINITY_ADDITIONAL_OPTIONS);\n-            test.add(AffinitySupportTestMain.class.getCanonicalName());\n-            VMSupport.tryWith(test.toArray(new String[0]));\n-\n-            System.out.printf(\"----- %s %s%n\", \"[OK]\", \"Trying to set per-thread affinity with syscalls\");\n+            \/\/ Prepare and dump affinity support files. We need to fork out to separate\n+            \/\/ JVM, because we need to set JVM flags.\n+            List<String> test = new ArrayList<>();\n+            if (VMSupport.enableNativeAccessAvailable()) {\n+                test.add(VMSupport.enableNativeAccessOpt());\n+            }\n+            test.add(AffinitySupportPrepareMain.class.getCanonicalName());\n+            String reply = VMSupport.tryWith(test.toArray(new String[0]));\n+            AFFINITY_ADDITIONAL_OPTIONS = StringUtils.select(AFFINITY_PREPARE_PREFIX, StringUtils.splitLines(reply));\n+\n+            System.out.printf(\"----- %s %s%n\", \"[OK]\", \"Preparing affinity support libraries\");\n@@ -70,1 +75,1 @@\n-            System.out.printf(\"----- %s %s%n\", \"[N\/A]\", \"Trying to set per-thread affinity with syscalls\");\n+            System.out.printf(\"----- %s %s%n\", \"[N\/A]\", \"Preparing affinity support libraries\");\n@@ -75,0 +80,18 @@\n+        if (AFFINITY_SUPPORT_AVAILABLE) {\n+            try {\n+                \/\/ Test the unpacked mode works...\n+                List<String> test = new ArrayList<>(AFFINITY_ADDITIONAL_OPTIONS);\n+                if (VMSupport.enableNativeAccessAvailable()) {\n+                    test.add(VMSupport.enableNativeAccessOpt());\n+                }\n+                test.add(AffinitySupportTestMain.class.getCanonicalName());\n+                VMSupport.tryWith(test.toArray(new String[0]));\n+\n+                System.out.printf(\"----- %s %s%n\", \"[OK]\", \"Testing local affinity machinery (syscalls)\");\n+            } catch (Throwable e) {\n+                System.out.printf(\"----- %s %s%n\", \"[N\/A]\", \"Testing local affinity machinery (syscalls)\");\n+                System.out.println(e.getMessage());\n+                AFFINITY_SUPPORT_AVAILABLE = false;\n+            }\n+        }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/OSSupport.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.BufferedReader;\n@@ -28,0 +29,1 @@\n+import java.io.StringReader;\n@@ -81,0 +83,6 @@\n+    public static List<String> splitLines(String src) {\n+        List<String> results = new ArrayList<>();\n+        new BufferedReader(new StringReader(src)).lines().forEach(results::add);\n+        return results;\n+    }\n+\n@@ -176,0 +184,10 @@\n+\n+    public static List<String> select(String prefix, List<String> src) {\n+        List<String> result = new ArrayList<>();\n+        for (String s : src) {\n+            if (s.startsWith(prefix)) {\n+                result.add(s.substring(prefix.length()));\n+            }\n+        }\n+        return result;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/StringUtils.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -60,0 +60,3 @@\n+    private static volatile boolean ENABLE_NATIVE_ACCESS_AVAILABLE;\n+    private static final String ENABLE_NATIVE_ACCESS_OPT = \"--enable-native-access=ALL-UNNAMED\";\n+\n@@ -80,0 +83,8 @@\n+    public static boolean enableNativeAccessAvailable() {\n+        return ENABLE_NATIVE_ACCESS_AVAILABLE;\n+    }\n+\n+    public static String enableNativeAccessOpt() {\n+        return ENABLE_NATIVE_ACCESS_OPT;\n+    }\n+\n@@ -122,0 +133,7 @@\n+        ENABLE_NATIVE_ACCESS_AVAILABLE = detect(\"Checking for native access warnings\",\n+                false,\n+                SimpleTestMain.class,\n+                null,\n+                ENABLE_NATIVE_ACCESS_OPT\n+        );\n+\n@@ -491,1 +509,1 @@\n-    public static void tryWith(String... lines) throws VMSupportException {\n+    public static String tryWith(String... lines) throws VMSupportException {\n@@ -515,2 +533,4 @@\n-            if (ecode != 0) {\n-                String msg = new String(baos.toByteArray());\n+            String msg = baos.toString();\n+            if (ecode == 0) {\n+                return msg;\n+            } else {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/VMSupport.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}