{"files":[{"patch":"@@ -90,1 +90,1 @@\n-        return timeBudget;\n+        return new TimeBudget(config.configs.size(), opts.timeBudget());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-            out.println(\" + FATAL: - your tests will never finish as expected. They will run much longer \");\n+            out.println(\"    FATAL: your tests will never finish as expected. They will run much longer \");\n@@ -156,1 +156,1 @@\n-            out.println(\" + WARNING:  your time budget will not be used. Tests will end much sooner.\");\n+            out.println(\"    WARNING:  your time budget will not be used. Tests will end much sooner.\");\n@@ -160,1 +160,1 @@\n-            out.println(\" | For \" + expectedTests + \" with concurrency factor of \" + getConcurentTestsFactor()\n+            out.println(\"    For \" + expectedTests + \" with concurrency factor of \" + getConcurentTestsFactor()\n@@ -162,4 +162,4 @@\n-            out.println(\" | That is ~\" + budget.milliseconds() \/ expectedTests + \" ms per test\");\n-            out.println(\" + +++ However the real time will be converging to: \" + ReportUtils.formatMsToDaysAndTime(expectedPerTest) + \" +++\");\n-            out.println(\" | You can play with internal  properties name(value\/eta):\\n\"\n-                    + \" |   jcstress.timeBudget.defaultPerTestMs(\" + DEFAULT_PER_TEST_MS + \"ms\/\" +\n+            out.println(\"    That is ~\" + budget.milliseconds() \/ expectedTests + \" ms per test\");\n+            out.println(\"    However the real time will be converging to: \" + ReportUtils.formatMsToDaysAndTime(expectedPerTest) + \" +++\");\n+            out.println(\"    You can play with internal  properties name(value\/eta):\\n\"\n+                    + \"        jcstress.timeBudget.defaultPerTestMs(\" + DEFAULT_PER_TEST_MS + \"ms\/\" +\n@@ -167,1 +167,1 @@\n-                    + \" |   jcstress.timeBudget.minTimeMs(\" + MIN_TIME_MS + \"ms\/\" +\n+                    + \"        jcstress.timeBudget.minTimeMs(\" + MIN_TIME_MS + \"ms\/\" +\n@@ -169,1 +169,1 @@\n-                    + \" |   jcstress.timeBudget.maxTimeMs(\" + MAX_TIME_MS + \"ms\/\" +\n+                    + \"        jcstress.timeBudget.maxTimeMs(\" + MAX_TIME_MS + \"ms\/\" +\n@@ -171,2 +171,2 @@\n-                    + \" | Which are setting up the exact times the individual tests are trying to converage to.\\n\"\n-                    + \" + Use with caution! Test run below 100ms is moreover jeopardize the purpose. And will not squeeze the time as you wish.\");\n+                    + \"      Which are setting up the exact times the individual tests are trying to converage to.\\n\"\n+                    + \"      Use with caution! Test run below 100ms is moreover jeopardize the purpose. And will not squeeze the time as you wish.\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}