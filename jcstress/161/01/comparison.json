{"files":[{"patch":"@@ -64,1 +64,1 @@\n-        TimeBudget timeBudget = new TimeBudget(config.configs.size(), opts.timeBudget());\n+        TimeBudget timeBudget = getTimeBudget(config);\n@@ -88,0 +88,8 @@\n+    private TimeBudget getTimeBudget(ConfigsWithScheduler config) {\n+        if (config == null) {\n+            return null;\n+        }\n+        TimeBudget timeBudget = new TimeBudget(config.configs.size(), opts.timeBudget());\n+        return timeBudget;\n+    }\n+\n@@ -232,0 +240,4 @@\n+\n+        TimeBudget timeBudget = getTimeBudget(configsWithScheduler);\n+        timeBudget.printOn(out);\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-\n@@ -65,1 +64,1 @@\n-        long expectedPerTest = expectedTotalTime \/ Math.max(1, VMSupport.figureOutHotCPUs() \/ 8);\n+        long expectedPerTest = expectedTotalTime \/ getConcurentTestsFactor();\n@@ -69,0 +68,4 @@\n+    private static int getConcurentTestsFactor() {\n+        return Math.max(1, VMSupport.figureOutHotCPUs() \/ 8);\n+    }\n+\n@@ -134,0 +137,1 @@\n+            printOvertimeWarning(out);\n@@ -138,0 +142,35 @@\n+    private long countEta(int msPerTest) {\n+        long expectedTotalTime = (long) expectedTests * msPerTest;\n+        long expectedPerTest = expectedTotalTime \/ getConcurentTestsFactor();\n+        return expectedPerTest;\n+    }\n+\n+    private boolean printOvertimeWarning(PrintStream out) {\n+        long expectedPerTest = countEta(DEFAULT_PER_TEST_MS);\n+        boolean print=false;\n+        if (expectedPerTest > budget.milliseconds() * 2l) {\n+            out.println(\" + +++ FATAL - your tests will never finish as expected. They will run much longer \");\n+            print=true;\n+        }\n+        if (expectedPerTest * 2 < budget.milliseconds() * 2l) {\n+            out.println(\" + +++ WARNING - your time budget will not be used. Tests will end much sooner.\");\n+            print=true;\n+        }\n+        if (print) {\n+            out.println(\" | For \" + expectedTests + \" with concurrency factor of \" + getConcurentTestsFactor()\n+                    + \" You have requested\/been given time budget of: \" + ReportUtils.getNiceMsTimeDate(budget.milliseconds()));\n+            out.println(\" | That is ~\" + budget.milliseconds() \/ expectedTests + \" ms per test\");\n+            out.println(\" + +++ However the real time will be converging to: \" + ReportUtils.getNiceMsTimeDate(expectedPerTest) + \" +++\");\n+            out.println(\" | You can play with internal properties name(value\/eta):\\n\"\n+                    + \" |   jcstress.timeBudget.defaultPerTestMs(\" + DEFAULT_PER_TEST_MS + \"ms\/\" +\n+                    ReportUtils.getNiceMsTimeDate(countEta(DEFAULT_PER_TEST_MS)) + \")\\n\"\n+                    + \" |   jcstress.timeBudget.minTimeMs(\" + MIN_TIME_MS + \"ms\/\" +\n+                    ReportUtils.getNiceMsTimeDate(countEta(MIN_TIME_MS)) + \")\\n\"\n+                    + \" |   jcstress.timeBudget.maxTimeMs(\" + MAX_TIME_MS + \"ms\/\" +\n+                    ReportUtils.getNiceMsTimeDate(countEta(MAX_TIME_MS)) + \")\\n\"\n+                    + \" | Which are setting up the exact times the individual tests are trying to converage to.\\n\"\n+                    + \" + Use with caution! Test run below 100ms is moreover jeopardize the purpose. And will not squeeze the time as you wish.\");\n+        }\n+        return print;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":41,"deletions":2,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -293,3 +293,0 @@\n-\n-        String result = \"\";\n-\n@@ -300,0 +297,12 @@\n+        String result = getNiceMsTimeDate(ms);\n+        if (overtime) {\n+            result = \"overtime \" + result;\n+        }\n+        if (!overtime) {\n+            result += \" left\";\n+        }\n+        if (finalDate) {\n+            result += \"; at \" + ldt.format(DATE_TIME_FORMATTER);\n+        }\n+        return result;\n+    }\n@@ -301,0 +310,2 @@\n+    public static String getNiceMsTimeDate(long ms) {\n+        String result = \"\";\n@@ -308,1 +319,0 @@\n-\n@@ -311,1 +321,0 @@\n-\n@@ -313,4 +322,0 @@\n-\n-        if (overtime) {\n-            result += \"overtime \";\n-        }\n@@ -318,6 +323,0 @@\n-        if (!overtime) {\n-            result += \" left\";\n-        }\n-        if (finalDate) {\n-            result += \"; at \" + ldt.format(DATE_TIME_FORMATTER);\n-        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"}]}