{"files":[{"patch":"@@ -27,1 +27,1 @@\n-modify the testMajorVersion method to increment the feature version number\n+modify the `FEATURE` variable to increment the feature version number\n","filename":"UPDATING-VERSION.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -641,2 +641,8 @@\n-\/\/ Creates the timestamp in UTC using the ISO 8601 extended format\n-def buildTimestamp = buildInstant.toString()\n+\/\/ Creates the timestamp in UTC using the ISO 8601 extended format.\n+def extendedTimestamp = buildInstant.toString()\n+\/\/ Creates the timestamp in UTC using the historical ad hoc format, which is\n+\/\/ valid for the OPT field of the version string. An alternative to the ad hoc\n+\/\/ format is the ISO 8601 basic format with the pattern \"yyyyMMdd'T'HHmmssX\".\n+def zonedTime = ZonedDateTime.ofInstant(buildInstant, ZoneOffset.UTC)\n+def formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HHmmss\")\n+def buildTimestamp = zonedTime.format(formatter)\n@@ -647,5 +653,0 @@\n-    \/\/ The version OPT field matches the regular expression \"([-a-zA-Z0-9.]+)\".\n-    \/\/ For the ISO 8601 basic format, use the pattern \"yyyyMMdd'T'HHmmssX\".\n-    def zonedTime = ZonedDateTime.ofInstant(buildInstant, ZoneOffset.UTC)\n-    def formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HHmmss\")\n-    String versionTimestamp = zonedTime.format(formatter)\n@@ -653,1 +654,1 @@\n-    relOpt = \"-${versionTimestamp}\"\n+    relOpt = \"-${buildTimestamp}\"\n@@ -2190,4 +2191,3 @@\n-        \"PROMOTED_BUILD_NUMBER\": PROMOTED_BUILD_NUMBER,\n-        \"PRODUCT_NAME\": PRODUCT_NAME,\n-        \"RELEASE_VERSION\": RELEASE_VERSION,\n-        \"RELEASE_SUFFIX\": RELEASE_SUFFIX];\n+        \"RELEASE_SUFFIX\": RELEASE_SUFFIX,\n+        \"RELEASE_VERSION_SHORT\": RELEASE_VERSION_SHORT,\n+        \"RELEASE_VERSION_LONG\": RELEASE_VERSION_LONG];\n@@ -5670,1 +5670,1 @@\n-                            args(\"--date\", buildTimestamp)\n+                            args(\"--date\", extendedTimestamp)\n","filename":"build.gradle","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -99,10 +99,0 @@\n-    \/**\n-     * Promoted build number used as part of the runtime version string.\n-     *\/\n-    private static final String PROMOTED_BUILD_NUMBER = \"@PROMOTED_BUILD_NUMBER@\";\n-\n-    \/**\n-     * Raw Version number string. (without milestone tag)\n-     *\/\n-    private static final String RELEASE_VERSION = \"@RELEASE_VERSION@\";\n-\n@@ -115,2 +105,1 @@\n-     * The composite version string. This is composed in the static\n-     * initializer for this class.\n+     * The composite version string.\n@@ -118,1 +107,1 @@\n-    private static final String VERSION;\n+    private static final String VERSION = \"@RELEASE_VERSION_SHORT@\";\n@@ -122,1 +111,0 @@\n-     * This is composed in the static initializer for this class.\n@@ -124,20 +112,1 @@\n-    private static final String RUNTIME_VERSION;\n-\n-    \/\/ The static initializer composes the VERSION and RUNTIME_VERSION strings\n-    static {\n-        String tmpVersion = RELEASE_VERSION;\n-\n-        \/\/ Construct the VERSION string adding milestone information,\n-        \/\/ such as beta, if present.\n-        \/\/ Note: RELEASE_SUFFIX is expected to be empty for fcs versions\n-        tmpVersion += RELEASE_SUFFIX;\n-        VERSION = tmpVersion;\n-\n-        \/\/ Append the RUNTIME_VERSION string that follow the VERSION string\n-        tmpVersion += \"+\" + PROMOTED_BUILD_NUMBER;\n-        if (getHudsonJobName().length() == 0) {\n-            \/\/ Non hudson (developer) build\n-            tmpVersion += \"-\" + BUILD_TIMESTAMP;\n-        }\n-        RUNTIME_VERSION = tmpVersion;\n-    }\n+    private static final String RUNTIME_VERSION = \"@RELEASE_VERSION_LONG@\";\n","filename":"modules\/javafx.base\/src\/main\/version-info\/VersionInfo.java","additions":3,"deletions":34,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.junit.Before;\n@@ -36,0 +40,13 @@\n+    \/\/ Increment this feature-release counter for every major release.\n+    private static final String FEATURE = \"21\";\n+\n+    \/\/ The working directory at runtime is 'modules\/javafx.base'.\n+    private static final String PROPERTIES_FILE = \"build\/module-lib\/javafx.properties\";\n+    private static final String VERSION_KEY = \"javafx.version\";\n+    private static final String RUNTIME_VERSION_KEY = \"javafx.runtime.version\";\n+\n+    \/\/ See 'java.lang.Runtime.Version' for the format of a short version string.\n+    private static final String VNUM = \"[1-9][0-9]*((\\\\.0)*\\\\.[1-9][0-9]*)*\";\n+    private static final String PRE = \"([a-zA-Z0-9]+)\";\n+    private static final String SVSTR = String.format(\"%s(-%s)?\", VNUM, PRE);\n+\n@@ -87,0 +104,13 @@\n+    private final Properties properties;\n+\n+    public VersionInfoTest() {\n+        properties = new Properties();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException {\n+        try (var reader = new FileReader(PROPERTIES_FILE)) {\n+            properties.load(reader);\n+        }\n+    }\n+\n@@ -90,3 +120,1 @@\n-        \/\/ Need to update major version number when we develop the next\n-        \/\/ major release.\n-        assertTrue(version.startsWith(\"21\"));\n+        assertTrue(version.startsWith(FEATURE));\n@@ -151,0 +179,30 @@\n+    @Test\n+    public void testVersionFormat() {\n+        String version = VersionInfo.getVersion();\n+        String message = String.format(\"Wrong short version string: '%s'\", version);\n+        assertTrue(message, version.matches(SVSTR));\n+    }\n+\n+    @Test\n+    public void testRuntimeVersionFormat() {\n+        String runtimeVersion = VersionInfo.getRuntimeVersion();\n+        try {\n+            Runtime.Version.parse(runtimeVersion);\n+        } catch (IllegalArgumentException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testVersionInFile() {\n+        String versionLive = VersionInfo.getVersion();\n+        String versionFile = properties.getProperty(VERSION_KEY);\n+        assertEquals(versionLive, versionFile);\n+    }\n+\n+    @Test\n+    public void testRuntimeVersionInFile() {\n+        String runtimeVersionLive = VersionInfo.getRuntimeVersion();\n+        String runtimeVersionFile = properties.getProperty(RUNTIME_VERSION_KEY);\n+        assertEquals(runtimeVersionLive, runtimeVersionFile);\n+    }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/VersionInfoTest.java","additions":61,"deletions":3,"binary":false,"changes":64,"status":"modified"}]}