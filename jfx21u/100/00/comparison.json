{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,1 @@\n-    public static final EventType<Event> ROOT =\n-            new EventType<>(\"EVENT\", null);\n+    public static final EventType<Event> ROOT = new EventType<>(\"EVENT\", true);\n@@ -132,1 +131,1 @@\n-     * Internal constructor that skips various checks\n+     * Internal constructor for the ROOT instance that skips various checks\n@@ -134,3 +133,2 @@\n-    EventType(final String name,\n-                      final EventType<? super T> superType) {\n-        this.superType = superType;\n+    private EventType(String name, boolean ignored) {\n+        this.superType = null;\n@@ -138,11 +136,0 @@\n-        if (superType != null) {\n-            if (superType.subTypes != null) {\n-                for (Iterator i = superType.subTypes.keySet().iterator(); i.hasNext();) {\n-                    EventType t  = (EventType) i.next();\n-                    if (name == null && t.name == null || (name != null && name.equals(t.name))) {\n-                        i.remove();\n-                    }\n-                }\n-            }\n-            superType.register(this);\n-        }\n@@ -179,1 +166,1 @@\n-    private void register(javafx.event.EventType<? extends T> subType) {\n+    private synchronized void register(javafx.event.EventType<? extends T> subType) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/EventType.java","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.event;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import javafx.event.Event;\n+import javafx.event.EventType;\n+import org.junit.jupiter.api.Test;\n+\n+\/**\n+ * Developers should be able to create EventTypes in background thread(s).\n+ *\/\n+public class EventTypeConcurrencyTest {\n+    @Test\n+    public void concurrentInitialization() {\n+        int N = 1_000;\n+        try (var executor = Executors.newCachedThreadPool()) {\n+            try {\n+                ArrayList<Callable<Object>> runs = new ArrayList<>(N);\n+                for (int i = 0; i < N; i++) {\n+                    String name = \"TEST\" + i;\n+                    runs.add(() -> {\n+                        return new EventType<>(Event.ANY, name);\n+                    });\n+                }\n+\n+                List<Future<Object>> futures = executor.invokeAll(runs);\n+\n+                for (Future<Object> future : futures) {\n+                    future.get();\n+                }\n+            } catch (Throwable e) {\n+                fail(e);\n+            }\n+        }\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventTypeConcurrencyTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}