{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.glass.ui.Application;\n@@ -675,0 +676,1 @@\n+        Application.checkEventThread();\n@@ -687,0 +689,1 @@\n+        Application.checkEventThread();\n@@ -822,0 +825,1 @@\n+        Application.checkEventThread();\n@@ -835,0 +839,1 @@\n+        Application.checkEventThread();\n@@ -844,0 +849,1 @@\n+        Application.checkEventThread();\n@@ -988,0 +994,1 @@\n+        Application.checkEventThread();\n@@ -1034,0 +1041,1 @@\n+        Application.checkEventThread();\n@@ -1089,0 +1097,1 @@\n+        Application.checkEventThread();\n@@ -1148,0 +1157,1 @@\n+        Application.checkEventThread();\n@@ -1175,0 +1185,1 @@\n+        Application.checkEventThread();\n@@ -1617,0 +1628,1 @@\n+        Application.checkEventThread();\n@@ -1708,0 +1720,1 @@\n+        Application.checkEventThread();\n@@ -1737,0 +1750,1 @@\n+        Application.checkEventThread();\n@@ -1857,0 +1871,1 @@\n+        Application.checkEventThread();\n@@ -1909,0 +1924,1 @@\n+        Application.checkEventThread();\n@@ -1918,0 +1934,1 @@\n+        Application.checkEventThread();\n@@ -1938,0 +1955,1 @@\n+        Application.checkEventThread();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacAccessible.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.glass.ui.Application;\n@@ -241,0 +242,1 @@\n+        Application.checkEventThread();\n@@ -250,0 +252,1 @@\n+        Application.checkEventThread();\n@@ -268,0 +271,1 @@\n+        Application.checkEventThread();\n@@ -411,0 +415,1 @@\n+        Application.checkEventThread();\n@@ -423,0 +428,1 @@\n+        Application.checkEventThread();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinAccessible.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.GridPane;\n+import javafx.stage.Stage;\n+\n+public class AccessibilityNotificationTest extends Application implements ChangeListener<Boolean> {\n+    volatile static int exitCode;\n+    static final String INSTRUCTIONS =\n+            \"This test is suitable for macOS and Windows only.\\n\" +\n+            \"Please carefully read instructions before start testing!\\n\" +\n+            \"1) Enable accessibility subsystem (Narrator on Windows, VoiceOver on macOS);\\n\" +\n+            \"2) Click \\\"Start test\\\" button. The 5 seconds countdown will start;\\n\" +\n+            \"3) Wait for the test to complete;\\n\" +\n+            \"4) The test passes if it doesn't crash; \" +\n+            \"exceptions logged to the file \\\"error.log\\\" are expected.\\n\";\n+    static CountDownLatch latch = new CountDownLatch(1);\n+    static Button button = new Button(\"Start test\");\n+    static TextField notificationArea = new TextField();\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        Application.launch(args);\n+    }\n+\n+    @Override\n+    public void start(Stage stage) throws InterruptedException {\n+        Platform.accessibilityActiveProperty().addListener(this);\n+        stage.setTitle(\"Accessibility Notification Test\");\n+        GridPane root = new GridPane();\n+        TextArea instructions = new TextArea();\n+        instructions.setText(INSTRUCTIONS);\n+        root.add(instructions, 0, 0);\n+        button = new Button(\"Start test\");\n+        button.setOnAction(e -> {\n+            button.setDisable(true);\n+            new Thread(this::performTest).start();\n+        });\n+        root.add(button, 0, 1);\n+        root.add(notificationArea, 0, 2);\n+        if (Platform.accessibilityActiveProperty().get()) {\n+            setNotificationArea(\"Ready\", \"palegreen\");\n+            button.setDisable(false);\n+        } else {\n+            setNotificationArea(\"Please enable accessibility\", \"red\");\n+            button.setDisable(true);\n+        }\n+        Scene scene = new Scene(root);\n+        stage.setScene(scene);\n+        stage.sizeToScene();\n+        stage.show();\n+    }\n+\n+    public void yieldFor(long ms) {\n+        long completiontime = System.currentTimeMillis() + ms;\n+        do {\n+            try {\n+                Thread.sleep(1);\n+            } catch (InterruptedException ignore) {}\n+        } while (System.currentTimeMillis() < completiontime);\n+    }\n+\n+    public void setNotificationArea(String notification, String color) {\n+        Platform.runLater(() -> {\n+            notificationArea.setText(notification);\n+            notificationArea.setStyle(\"-fx-background-color: \" + color);\n+        });\n+    }\n+\n+    public void performTest() {\n+        final String logFileName = \"error.log\";\n+        final String appName = \"AccessibilityNotificationTestApp\";\n+\n+        new Thread(() -> {\n+            try {\n+                latch.await();\n+            } catch (InterruptedException ignore) {\n+            } finally {\n+                if (exitCode == 0) {\n+                    setNotificationArea(\"Complete\", \"green\");\n+                }\n+            }\n+        }).start();\n+        for (int c = 5; c > 0 ; c--) {\n+            setNotificationArea(\"Start in \" + c, \"yellow\");\n+            yieldFor(1000);\n+        }\n+        setNotificationArea(\"Running...\", \"lightyellow\");\n+        new Thread(() -> {\n+            try {\n+                File logFile = new File(logFileName);\n+                String runArgs = \"@..\/..\/..\/build\/run.args\";\n+                ProcessBuilder pb = new ProcessBuilder(\"java\", runArgs, appName);\n+                pb.redirectErrorStream(true);\n+                pb.redirectOutput(logFile);\n+                Process process = pb.start();\n+                if (!process.waitFor(30, TimeUnit.SECONDS)) {\n+                    process.destroyForcibly();\n+                    System.err.println(\"FAIL: Timeout waiting for test to complete\");\n+                    System.err.println(\"See \" + logFileName + \" for more information\");\n+                    throw new AssertionError(\"Error\");\n+                }\n+                exitCode = process.exitValue();\n+                if (exitCode != 0) {\n+                    System.out.println(\"FAIL: Test exited abnormally; exitCode = \" + exitCode);\n+                    System.out.println(\"See \" + logFileName + \" for more information\");\n+                    setNotificationArea(\"TEST FAILED\", \"red\");\n+                    throw new AssertionError(\"Error\");\n+                }\n+            } catch (Throwable ignore) {\n+            } finally {\n+                latch.countDown();\n+            }\n+        }).start();\n+    }\n+\n+    @Override\n+    public void changed(ObservableValue<? extends Boolean> observableValue,\n+                        Boolean oldValue, Boolean newValue) {\n+        if (newValue) {\n+            setNotificationArea(\"Ready\", \"palegreen\");\n+            button.setDisable(false);\n+        } else {\n+            setNotificationArea(\"Please enable accessibility\", \"red\");\n+            button.setDisable(true);\n+        }}\n+}\n","filename":"tests\/manual\/a11y\/AccessibilityNotificationTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+\n+public class AccessibilityNotificationTestApp extends Application {\n+    static TextGenerator tg;\n+    static CountDownLatch latch = new CountDownLatch(1);\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        stage.setTitle(\"Accessibility Test Children\");\n+        tg = new TextGenerator();\n+        BorderPane root = new BorderPane();\n+        TextArea textArea = new TextArea();\n+        textArea.textProperty().bind(tg.getValue());\n+        root.setCenter(textArea);\n+        Scene scene = new Scene(root);\n+        stage.setScene(scene);\n+        stage.sizeToScene();\n+        stage.setOnShown(we -> {\n+            if (we.getEventType() == WindowEvent.WINDOW_SHOWN) {\n+                Platform.runLater(this::performTest);\n+            }\n+        });\n+        stage.show();\n+    }\n+\n+    public void performTest() {\n+        new Thread(() -> {\n+            try {\n+                latch.await();\n+            } catch (InterruptedException ignore) {\n+            } finally {\n+                Platform.exit();\n+            }\n+        }).start();\n+        yieldFor(1000);\n+        new Thread(() -> {\n+            try {\n+                for (int i = 0; i < 1000; i++) {\n+                    tg.addValue(String.valueOf(i));\n+                    yieldFor(10);\n+                }\n+            } catch (Throwable ignore) {\n+            } finally {\n+                latch.countDown();\n+            }\n+        }).start();\n+    }\n+\n+    public void yieldFor(long ms) {\n+        long completiontime = System.currentTimeMillis() + ms;\n+        do {\n+            try {\n+                Thread.sleep(1);\n+            } catch (InterruptedException ignore) {}\n+        } while (System.currentTimeMillis() < completiontime);\n+    }\n+\n+    public class TextGenerator{\n+        private final StringProperty value;\n+\n+        public TextGenerator() {\n+            value = new SimpleStringProperty(\"\");\n+        }\n+\n+        public StringProperty getValue() {\n+            return value;\n+        }\n+\n+        public void addValue(String s) {\n+            try {\n+                this.value.set(this.value.getValue() + s);\n+            } catch (Exception ignore) {}\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        Application.launch(args);\n+        System.out.println(\"Test completed\");\n+    }\n+}\n","filename":"tests\/manual\/a11y\/AccessibilityNotificationTestApp.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}