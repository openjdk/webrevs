{"files":[{"patch":"@@ -358,0 +358,16 @@\n+\n+                final T oldValue = currentValue;\n+\n+                if (curChangeSize > 0) {\n+\n+                    \/*\n+                     * Because invalidation listeners may get removed during notification, this may\n+                     * change the Helper type from Generic to SingleChange. When this transition\n+                     * occurs, it is essential the correct current value is passed to the new\n+                     * SingleChange instance. This is why the currentValue is already obtained\n+                     * before notifying the invalidation listeners.\n+                     *\/\n+\n+                    currentValue = observable.getValue();\n+                }\n+\n@@ -366,2 +382,0 @@\n-                    final T oldValue = currentValue;\n-                    currentValue = observable.getValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-                removeListener(invalidationListener);\n+                removeListener(invalidationListener);  \/\/ this removal occurs before notification\n@@ -696,0 +696,50 @@\n+\n+        p.set(\"a\");  \/\/ if current value wasn't copied correctly (it is still \"a\") then this wouldn't trigger a change\n+\n+        assertEquals(\"a\", currentValue.get());\n+    }\n+\n+    @Test\n+    public void shouldNotForgetCurrentValueWhenMovingFromChangeListenerAndInvalidationListenerToSingleChangeListener() {\n+        AtomicReference<String> currentValue = new AtomicReference<>();\n+        StringProperty p = new SimpleStringProperty(\"a\");\n+        InvalidationListener invalidationListener = new InvalidationListener() {\n+            @Override\n+            public void invalidated(Observable obs) {\n+                p.removeListener(this);  \/\/ this removal occurs during notification\n+            }\n+        };\n+\n+        p.addListener(invalidationListener);\n+        p.addListener((obs, old, current) -> currentValue.set(current));\n+\n+        p.set(\"b\");\n+\n+        assertEquals(\"b\", currentValue.get());\n+\n+        p.set(\"a\");  \/\/ if current value wasn't copied correctly (it is still \"a\") then this wouldn't trigger a change\n+\n+        assertEquals(\"a\", currentValue.get());\n+    }\n+\n+    @Test\n+    public void shouldNotForgetCurrentValueWhenMovingFromTwoChangeListenersToSingleChangeListener() {\n+        AtomicReference<String> currentValue = new AtomicReference<>();\n+        StringProperty p = new SimpleStringProperty(\"a\");\n+        ChangeListener<String> changeListener = new ChangeListener<>() {\n+            @Override\n+            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {\n+                p.removeListener(this);\n+            }\n+        };\n+\n+        p.addListener(changeListener);\n+        p.addListener((obs, old, current) -> currentValue.set(current));\n+\n+        p.set(\"b\");\n+\n+        assertEquals(\"b\", currentValue.get());\n+\n+        p.set(\"a\");  \/\/ if current value wasn't copied correctly (it is still \"a\") then this wouldn't trigger a change\n+\n+        assertEquals(\"a\", currentValue.get());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"}]}