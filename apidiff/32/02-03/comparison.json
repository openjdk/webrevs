{"files":[{"patch":"@@ -174,0 +174,1 @@\n+    Boolean showUnchanged;\n@@ -184,1 +185,0 @@\n-    boolean showEqual;\n@@ -339,0 +339,10 @@\n+        \/**\n+         * {@code --show-unchanged} <var>boolean-value<\/var>\n+         *\/\n+        SHOW_UNCHANGED(\"--show-unchanged\", \"opt.arg.boolean\") {\n+            @Override\n+            void process(String opt, String arg, Options options) throws BadOption {\n+                options.showUnchanged = asBoolean(arg);\n+            }\n+        },\n+\n@@ -912,0 +922,9 @@\n+    \/**\n+     * Returns whether unchanged API elements should be unconditionally shown.\n+     *\n+     * @return {@code true} if unchanged API elements should be unconditionally shown\n+     *\/\n+    public boolean showUnchanged() {\n+        return showUnchanged;\n+    }\n+\n@@ -984,4 +1003,0 @@\n-    public boolean showEqual() {\n-        return showEqual;\n-    }\n-\n@@ -1085,0 +1100,4 @@\n+        if (showUnchanged == null) {\n+            showUnchanged = false;\n+        }\n+\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/Options.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-        if (kind == InfoTextKind.HEADER) {\n+        if (kind == InfoTextKind.HEADER && !parent.options.showUnchanged()) {\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/report\/html\/PageReporter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,3 @@\n+opt.desc.show-unchanged=\\\n+    Unchanged elements should be unconditionally shown in the resulting diff\n+\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/resources\/help.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -290,0 +290,5 @@\n+<a id=\"option-show-unchanged\">`--show-unchanged` *boolean*<\/a>\n+:   If true, unchanged elements will be show unconditionally. When false or\n+    missing, the user viewing the diff will have an option to show or hide the\n+    unchanged elements.\n+\n","filename":"src\/share\/doc\/apidiff.md","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,511 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package apitest;\n+\n+import apitest.lib.APITester;\n+import com.sun.source.doctree.DocCommentTree;\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.EndElementTree;\n+import com.sun.source.doctree.StartElementTree;\n+import com.sun.source.doctree.TextTree;\n+import com.sun.source.util.DocTreeScanner;\n+import com.sun.source.util.DocTrees;\n+import com.sun.source.util.JavacTask;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.Stack;\n+import javax.tools.FileObject;\n+import javax.tools.ToolProvider;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import toolbox.ModuleBuilder;\n+\n+\/**\n+ * Tests the output for unchanged elements.\n+ *\/\n+public class UnchangedTest extends APITester {\n+\n+    @Test\n+    public void testAllUnchanged() throws IOException {\n+        Path base = getScratchDir();\n+        log.println(base);\n+\n+        List<String> options = new ArrayList<>();\n+\n+        Path originalDir = base.resolve(\"original\").resolve(\"src\");\n+        Path updatedDir = base.resolve(\"updated\").resolve(\"src\");\n+\n+        for (Path target : new Path[] {originalDir, updatedDir}) {\n+            ModuleBuilder m =\n+                    new ModuleBuilder(tb, \"m\")\n+                            .exports(\"p\").exports(\"p2\")\n+                            .opens(\"p\").opens(\"p2\")\n+                            .provides(\"java.lang.Runnable\", \"p.C1\", \"p.C2\")\n+                            .provides(\"java.lang.FunctionalInterface\", \"p2.C\")\n+                            .uses(\"java.lang.Runnable\")\n+                            .uses(\"java.lang.FunctionalInterface\")\n+                            .requiresTransitive(\"java.compiler\")\n+                            .requiresTransitive(\"jdk.compiler\");\n+\n+            m.classes(\"\"\"\n+                       package p;\n+                       \/** class documentation *\/\n+                       public class C1 implements Runnable {\n+                           \/** test field documentation1 *\/\n+                           public final int F1;\n+                           \/** test field documentation2 *\/\n+                           public final int F2;\n+                           \/** test constructor documentation1 *\/\n+                           public C1() {}\n+                           \/** test constructor documentation2 *\/\n+                           public C1(int i) {}\n+                           \/** test method documentation *\/\n+                           public void test() { }\n+                           \/** run method documentation *\/\n+                           public void run() { }\n+                       }\n+                       \"\"\");\n+\n+            m.classes(\"\"\"\n+                       package p;\n+                       \/** class documentation *\/\n+                       public class C2 implements Runnable {\n+                           \/** test method documentation *\/\n+                           public void test() { }\n+                           \/** run method documentation *\/\n+                           public void run() { }\n+                       }\n+                       \"\"\");\n+\n+            m.classes(\"\"\"\n+                       package p2;\n+                       \/** class documentation *\/\n+                       public class C implements FunctionalInterface {\n+                           \/** test method documentation *\/\n+                           public void test() { }\n+                           \/** run method documentation *\/\n+                           public void run() { }\n+                       }\n+                       \"\"\");\n+\n+            m.write(target);\n+\n+            new ModuleBuilder(tb, \"m2\").write(target);\n+\n+            options.addAll(List.of(\n+                    \"--api\", target.getParent().getFileName().toString(),\n+                    \"--module-source-path\", target.toString()));\n+        }\n+\n+        options.addAll(List.of(\n+                \"--include\", \"m\/**\",\n+                \"--include\", \"m2\/**\",\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"--verbose\", \"missing\"));\n+\n+        log.println(\"Options: \" + options);\n+\n+        run(options);\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/index.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\"\"\"\n+                            Modules\n+                             m m2\n+                            \"\"\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/module-summary.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\"\"\"\n+                            Exports\n+                             exports p exports p2\n+                            \"\"\",\n+                            \"\"\"\n+                            Opens\n+                             opens p opens p2\n+                            \"\"\",\n+                            \"\"\"\n+                            Requires\n+                             requires transitive java.compiler requires transitive jdk.compiler\n+                            \"\"\",\n+                            \"\"\"\n+                            Packages\n+                             p p2\n+                            \"\"\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/p\/package-summary.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\"\"\"\n+                            Types\n+                             C1 C2\n+                            \"\"\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/p\/C1.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\"\"\"\n+                            Fields\n+                            public final int F1\n+                            public final int F2\n+                            \"\"\",\n+                            \"\"\"\n+                            Constructors\n+                            public C1()\n+                            public C1(int i)\n+                            \"\"\",\n+                            \"\"\"\n+                            Methods\n+                            public void run()\n+                            public void test()\n+                            \"\"\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+    }\n+\n+    @Test\n+    public void testSomeUnchanged() throws IOException {\n+        \/\/one method in C1 with a changed javadoc, and module info changed:\n+        Path base = getScratchDir();\n+        log.println(base);\n+\n+        List<String> options = new ArrayList<>();\n+\n+        Path originalDir = base.resolve(\"original\").resolve(\"src\");\n+        Path updatedDir = base.resolve(\"updated\").resolve(\"src\");\n+\n+        for (Path target : new Path[] {originalDir, updatedDir}) {\n+            ModuleBuilder m;\n+            if (target == originalDir) {\n+                m =\n+                    new ModuleBuilder(tb, \"m\")\n+                            .exports(\"p\").exports(\"p2\").exports(\"p3\")\n+                            .opens(\"p\").opens(\"p2\").opens(\"p3\")\n+                            .provides(\"java.lang.Runnable\", \"p.C1\", \"p.C2\")\n+                            .provides(\"java.lang.FunctionalInterface\", \"p2.C\")\n+                            .uses(\"java.lang.Runnable\")\n+                            .uses(\"java.lang.FunctionalInterface\")\n+                            .requiresTransitive(\"java.compiler\")\n+                            .requiresTransitive(\"jdk.compiler\");\n+            } else {\n+                m =\n+                    new ModuleBuilder(tb, \"m\")\n+                            .exports(\"p\").exports(\"p3\").exports(\"p4\")\n+                            .opens(\"p\").opens(\"p3\").opens(\"p4\")\n+                            .provides(\"java.lang.Runnable\", \"p.C1\", \"p4.C\")\n+                            .provides(\"java.lang.FunctionalInterface\", \"p2.C\")\n+                            .provides(\"java.io.Serializable\", \"p4.C\")\n+                            .uses(\"java.io.Serializable\")\n+                            .uses(\"java.lang.FunctionalInterface\")\n+                            .requiresTransitive(\"java.compiler\")\n+                            .requiresTransitive(\"java.desktop\");\n+            }\n+\n+            if (target == originalDir) {\n+                m.classes(\"\"\"\n+                           package p;\n+                           \/** class documentation *\/\n+                           public class C1 implements Runnable {\n+                               \/** test field documentation1 *\/\n+                               public final int F1;\n+                               \/** test field documentation2 *\/\n+                               public final int F2;\n+                               \/** test constructor documentation1 *\/\n+                               public C1() {}\n+                               \/** test constructor documentation2 *\/\n+                               public C1(int i) {}\n+                               \/** test method documentation *\/\n+                               public void test() { }\n+                               \/** run method documentation *\/\n+                               public void run() { }\n+                           }\n+                           \"\"\");\n+            } else {\n+                m.classes(\"\"\"\n+                           package p;\n+                           \/** class documentation *\/\n+                           public class C1 implements Runnable {\n+                               \/** test field documentation1 - updated *\/\n+                               public final int F1;\n+                               \/** test field documentation2 *\/\n+                               public final int F2;\n+                               \/** test constructor documentation1 - updated *\/\n+                               public C1() {}\n+                               \/** test constructor documentation2 *\/\n+                               public C1(int i) {}\n+                               \/** test method documentation - updated *\/\n+                               public void test() { }\n+                               \/** run method documentation *\/\n+                               public void run() { }\n+                           }\n+                           \"\"\");\n+            }\n+\n+            m.classes(\"\"\"\n+                       package p;\n+                       \/** class documentation *\/\n+                       public class C2 implements Runnable {\n+                           \/** test method documentation *\/\n+                           public void test() { }\n+                           \/** run method documentation *\/\n+                           public void run() { }\n+                       }\n+                       \"\"\");\n+\n+            m.classes(\"\"\"\n+                       package p2;\n+                       \/** class documentation *\/\n+                       public class C implements FunctionalInterface {\n+                           \/** test method documentation *\/\n+                           public void test() { }\n+                           \/** run method documentation *\/\n+                           public void run() { }\n+                       }\n+                       \"\"\");\n+\n+            m.classes(\"\"\"\n+                       package p3;\n+                       \/** class documentation *\/\n+                       public class C {\n+                       }\n+                       \"\"\");\n+\n+            if (target == updatedDir) {\n+                m.classes(\"\"\"\n+                           package p4;\n+                           \/** class documentation *\/\n+                           public class C implements java.io.Serializable, Runnable {\n+                               \/** test method documentation *\/\n+                               public void test() { }\n+                               \/** run method documentation *\/\n+                               public void run() { }\n+                           }\n+                           \"\"\");\n+            }\n+\n+            m.write(target);\n+\n+            new ModuleBuilder(tb, \"m2\").write(target);\n+\n+            options.addAll(List.of(\n+                    \"--api\", target.getParent().getFileName().toString(),\n+                    \"--module-source-path\", target.toString()));\n+        }\n+\n+        options.addAll(List.of(\n+                \"--include\", \"m\/**\",\n+                \"--include\", \"m2\/**\",\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"--verbose\", \"missing\"));\n+\n+        log.println(\"Options: \" + options);\n+\n+        run(options);\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/index.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\" m2\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/module-summary.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\" exports p\", \" exports p3\",\n+                            \" opens p\", \" opens p3\",\n+                            \" requires transitive java.compiler\",\n+                            \" p3\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/p\/package-summary.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\" C2\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+\n+        {\n+            List<String> unchangedTexts =\n+                    gatherUnchangedTexts(base, \"out\/m\/p\/C1.html\");\n+            List<String> expectedUnchangedTextsModule =\n+                    List.of(\"public final int F2\\n\",\n+                            \"public C1(int i)\\n\",\n+                            \"public void run()\\n\");\n+            Assertions.assertEquals(expectedUnchangedTextsModule, unchangedTexts);\n+        }\n+    }\n+\n+    private List<String> gatherUnchangedTexts(Path base, String path) throws IOException {\n+        DocCommentTree html = parseHTML(base, path);\n+        List<String> unchangedTexts = new ArrayList<>();\n+\n+        new DocTreeScanner<>() {\n+            \/\/HTML elements which may hold the unchanged class:\n+            private static final Set<String> ELEMENTS_WITH_UNCHANGED_CLASS =\n+                    Set.of(\"span\", \"div\", \"li\");\n+            private final Stack<ElementDesc> nestedElements = new Stack<>();\n+            private boolean unchanged;\n+            private final StringBuilder unchangedText = new StringBuilder();\n+\n+            @Override\n+            public Object visitStartElement(StartElementTree node, Object p) {\n+                String name = node.getName().toString();\n+                \n+                if (ELEMENTS_WITH_UNCHANGED_CLASS.contains(name)) {\n+                    nestedElements.push(new ElementDesc(name, unchanged));\n+\n+                    for (DocTree t : node.getAttributes()) {\n+                        String treeText = t.toString();\n+                        if (treeText.contains(\"class=\") && treeText.contains(\"unchanged\")) {\n+                            unchanged = true;\n+                        }\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Object visitEndElement(EndElementTree node, Object p) {\n+                String name = node.getName().toString();\n+                \n+                if (ELEMENTS_WITH_UNCHANGED_CLASS.contains(name)) {\n+                    ElementDesc removed = nestedElements.pop();\n+\n+                    if (!removed.name().equals(name)) {\n+                        throw new IllegalStateException(\"Unexpected name!\");\n+                    }\n+\n+                    boolean wasUnchanged = unchanged;\n+\n+                    unchanged = removed.previousUnchanged();\n+\n+                    if (wasUnchanged && !unchanged) {\n+                        String text = unchangedText.toString();\n+\n+                        unchangedTexts.add(text.replaceAll(\"\\n+\", \"\\n\"));\n+                        unchangedText.delete(0, unchangedText.length());\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Object visitText(TextTree node, Object p) {\n+                if (unchanged) {\n+                    unchangedText.append(node.getBody());\n+                }\n+                return null;\n+            }\n+            \n+            record ElementDesc(String name, boolean previousUnchanged) {}\n+        }.scan(html, null);\n+\n+        return unchangedTexts;\n+    }\n+\n+    private DocCommentTree parseHTML(Path base, String path) throws IOException {\n+        String[] pathElements = path.split(\"\/\");\n+        Path fileToTest = base;\n+        for (String el : pathElements) {\n+            fileToTest = fileToTest.resolve(el);\n+        }\n+        String content = Files.readString(fileToTest);\n+        JavacTask task = (JavacTask) ToolProvider.getSystemJavaCompiler().getTask(null, null, null, null, null, null);\n+        DocTrees trees = DocTrees.instance(task);\n+        DocCommentTree html = trees.getDocCommentTree(new FileObject() {\n+            @Override\n+            public URI toUri() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"test.html\";\n+            }\n+\n+            @Override\n+            public InputStream openInputStream() throws IOException {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public OutputStream openOutputStream() throws IOException {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Reader openReader(boolean ignoreEncodingErrors) throws IOException {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n+                return content;\n+            }\n+\n+            @Override\n+            public Writer openWriter() throws IOException {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public long getLastModified() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean delete() {\n+                throw new UnsupportedOperationException();\n+            }\n+            \n+        });\n+        return html;\n+    }\n+}\n","filename":"test\/junit\/apitest\/UnchangedTest.java","additions":511,"deletions":0,"binary":false,"changes":511,"status":"added"}]}