{"files":[{"patch":"@@ -64,1 +64,12 @@\n-        apiOptions.addFileManagerOpt(\"--system\", getSystem().toString());\n+\n+        boolean verbose = options.isVerbose(Options.VerboseKind.OPTIONS);\n+        if (verbose) {\n+            log.err.println(\"Expanding --jdk-build for API \" + apiOptions.name);\n+            log.err.println(\"    --jdk-build: \" + buildDir);\n+        }\n+\n+        Path system = getSystem();\n+        if (verbose) {\n+            log.err.println(\"  --system \" + system);\n+        }\n+        apiOptions.addFileManagerOpt(\"--system\", system.toString());\n@@ -68,1 +79,5 @@\n-        apiOptions.apiDir = getAPIDirectory(options, log);\n+        Path apiDir = getAPIDirectory(options, log);\n+        if (verbose && apiDir != null) {\n+            log.err.println(\"  --api-directory \" + apiDir);\n+        }\n+        apiOptions.apiDir = apiDir;\n@@ -74,2 +89,5 @@\n-                apiOptions.addFileManagerOpt(\"--patch-module\",\n-                        m + \"=\" + tmpDir.resolve(m));\n+                String patchModule = m + \"=\" + tmpDir.resolve(m);\n+                if (verbose) {\n+                    log.err.println(\"  --patch-module \" + patchModule);\n+                }\n+                apiOptions.addFileManagerOpt(\"--patch-module\", patchModule);\n@@ -79,1 +97,5 @@\n-            apiOptions.source = getRelease(log);\n+            String release = getRelease(log);\n+            if (verbose) {\n+                log.err.println(\"  --source \" + release);\n+            }\n+            apiOptions.source = release;\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/JDKBuildOption.java","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -173,0 +173,5 @@\n+        boolean verboseOptions = options.isVerbose(VerboseKind.OPTIONS);\n+        if (verboseOptions) {\n+            options.allAPIOptions.values().forEach(a -> a.showVerboseSummary(log));\n+        }\n+\n@@ -174,1 +179,1 @@\n-                .map(a -> API.of(a, s, ak, log))\n+                .map(a -> API.of(a, s, ak, log, verboseOptions))\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/Main.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,0 +122,27 @@\n+        public void showVerboseSummary(Log log) {\n+            log.err.println(\"Summary of options for API \" + name);\n+            if (label != null && !label.equals(name)) {\n+                log.err.println(\"  label: \" + label);\n+            }\n+            if (jdkBuildDir != null) {\n+                log.err.println(\"  [--jdk-build \" + jdkBuildDir + \"]\");\n+            }\n+            if (!fileManagerOpts.isEmpty()) {\n+                fileManagerOpts.forEach((opt, list) -> {\n+                    log.err.println(\"  \" + opt + \" \" + String.join(\" \", list));\n+                });\n+            }\n+            if (release != null) {\n+                log.err.println(\"  --release \" + release);\n+            }\n+            if (source != null) {\n+                log.err.println(\"  --source \" + source);\n+            }\n+            if (enablePreview) {\n+                log.err.println(\"  --enable-preview\");\n+            }\n+            if (apiDir != null) {\n+                log.err.println(\"  --api-directory \" + apiDir);\n+            }\n+        }\n+\n@@ -205,1 +232,3 @@\n-        TIME\n+        TIME,\n+        \/** Generate messages about handling the command-line options. *\/\n+        OPTIONS\n@@ -213,1 +242,0 @@\n-    private boolean verbose;\n@@ -440,1 +468,1 @@\n-            void process(String opt, String arg, Options options) throws BadOption {\n+            void process(String opt, String arg, Options options) {\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/Options.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+     * @param verboseOptions whether to be verbose about internal opton details\n@@ -112,2 +113,2 @@\n-    public static API of(APIOptions opts, Selector s, AccessKind ak, Log log) {\n-        return new JavacAPI(opts, s, ak, log);\n+    public static API of(APIOptions opts, Selector s, AccessKind ak, Log log, boolean verboseOptions) {\n+        return new JavacAPI(opts, s, ak, log, verboseOptions);\n@@ -147,0 +148,5 @@\n+    \/**\n+     * Whether to be verbose about internal option details.\n+     *\/\n+    protected final boolean verboseOptions;\n+\n@@ -153,1 +159,1 @@\n-     * @param log   the log, to which any any problems will be reported\n+     * @param log   the log, to which any problems will be reported\n@@ -155,1 +161,1 @@\n-    protected API(APIOptions opts, Selector s, AccessKind ak, Log log) {\n+    protected API(APIOptions opts, Selector s, AccessKind ak, Log log, boolean verboseOptions) {\n@@ -161,0 +167,1 @@\n+        this.verboseOptions = verboseOptions;\n@@ -341,0 +348,1 @@\n+        private List<String> fmOpts; \/\/ just for verbose reporting\n@@ -354,1 +362,1 @@\n-        private class LocationAndKinds {\n+        private static class LocationAndKinds {\n@@ -383,2 +391,2 @@\n-        JavacAPI(APIOptions opts, Selector s, AccessKind ak, Log log) {\n-            super(opts, s, ak, log);\n+        JavacAPI(APIOptions opts, Selector s, AccessKind ak, Log log, boolean verboseOptions) {\n+            super(opts, s, ak, log, verboseOptions);\n@@ -386,0 +394,1 @@\n+            fmOpts = new ArrayList<>();\n@@ -388,0 +397,1 @@\n+                fmOpts.add(opt);\n@@ -390,0 +400,1 @@\n+                    fmOpts.add(arg);\n@@ -443,0 +454,3 @@\n+            if (verboseOptions) {\n+                showJavacOptions();\n+            }\n@@ -467,0 +481,26 @@\n+        private void showJavacOptions() {\n+            log.err.println(\"Effective javac options for API \" + name);\n+            boolean needNewline = false;\n+            \/\/ The following is a convenient fiction: to report all the javac options as \"equivalent\".\n+            \/\/ In reality, the file manager options have already been handled separately and are\n+            \/\/ now stashed in the file manager, without easy access (except via Locations).\n+            List<String> allOpts = new ArrayList<>();\n+            allOpts.addAll(fmOpts);\n+            allOpts.addAll(javacOpts);\n+            for (String opt : allOpts) {\n+                if (opt.startsWith(\"-\")) {\n+                    if (needNewline) {\n+                        log.err.println();\n+                    }\n+                    log.err.print(\"  \");\n+                } else {\n+                    log.err.print(\" \");\n+                }\n+                log.err.print(opt);\n+                needNewline = true;\n+            }\n+            if (needNewline) {\n+                log.err.println();\n+            }\n+        }\n+\n@@ -568,1 +608,1 @@\n-                    .map(d -> d.getPackage())\n+                    .map(ModuleElement.ExportsDirective::getPackage)\n@@ -1063,1 +1103,1 @@\n-                throw new IllegalArgumentException(t.getKind() + \" \" + t.toString());\n+                throw new IllegalArgumentException(t.getKind() + \" \" + t);\n","filename":"src\/share\/classes\/jdk\/codetools\/apidiff\/model\/API.java","additions":49,"deletions":9,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-    `module`, `package`, `type`, `time`.\n+    `module`, `package`, `type`, `time`, `options`.\n@@ -240,1 +240,1 @@\n-    one or more files that contain arguments for the `apidiff` command. This lets you to create\n+    one or more files that contain arguments for the `apidiff` command. This lets you create\n@@ -423,0 +423,3 @@\n+If you want to see or understand how the options are used internally, you\n+can use `--verbose options`, possibly implicitly as part of `--verbose all`.\n+\n","filename":"src\/share\/doc\/apidiff.md","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        super(new Options.APIOptions(name), null, null, null);\n+        super(new Options.APIOptions(name), null, null, null, false);\n","filename":"test\/junit\/apitest\/TestAPI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}