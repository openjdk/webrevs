{"files":[{"patch":"@@ -326,12 +326,6 @@\n-        private static final List<PseudoClass> ONLY_CHILD_CLASSES = List.of(ONLY_CHILD_PSEUDO_CLASS,\n-                                                                            FIRST_CHILD_PSEUDO_CLASS,\n-                                                                            LAST_CHILD_PSEUDO_CLASS);\n-\n-        private static final List<PseudoClass> FIRST_CHILD_CLASSES = List.of(FIRST_CHILD_PSEUDO_CLASS);\n-\n-        private static void toggleStructuralPseudoClasses(Node node, List<PseudoClass> active) {\n-            node.pseudoClassStateChanged(FIRST_CHILD_PSEUDO_CLASS, active.contains(FIRST_CHILD_PSEUDO_CLASS));\n-            node.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, active.contains(LAST_CHILD_PSEUDO_CLASS));\n-            node.pseudoClassStateChanged(ONLY_CHILD_PSEUDO_CLASS, active.contains(ONLY_CHILD_PSEUDO_CLASS));\n-            node.pseudoClassStateChanged(NTH_EVEN_CHILD_PSEUDO_CLASS, active.contains(NTH_EVEN_CHILD_PSEUDO_CLASS));\n-            node.pseudoClassStateChanged(NTH_ODD_CHILD_PSEUDO_CLASS, active.contains(NTH_ODD_CHILD_PSEUDO_CLASS));\n+        private static void clearStructuralPseudoClasses(Node node) {\n+            node.pseudoClassStateChanged(FIRST_CHILD_PSEUDO_CLASS, false);\n+            node.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, false);\n+            node.pseudoClassStateChanged(ONLY_CHILD_PSEUDO_CLASS, false);\n+            node.pseudoClassStateChanged(NTH_EVEN_CHILD_PSEUDO_CLASS, false);\n+            node.pseudoClassStateChanged(NTH_ODD_CHILD_PSEUDO_CLASS, false);\n@@ -375,1 +369,1 @@\n-                        toggleStructuralPseudoClasses(n, List.of());\n+                        clearStructuralPseudoClasses(n);\n@@ -456,15 +450,22 @@\n-            \/\/ Toggle the \"only-child\" \/ \"first-child\" pseudo-classes on the first child.\n-            if (size() == 1) {\n-                toggleStructuralPseudoClasses(getFirst(), ONLY_CHILD_CLASSES);\n-            } else if (size() > 1 && firstDirtyChildIndex == 0) {\n-                toggleStructuralPseudoClasses(getFirst(), FIRST_CHILD_CLASSES);\n-            }\n-\n-            \/\/ Clear the \"last-child\" pseudo-class if it was set on the last non-modified child.\n-            if (firstDirtyChildIndex > 0) {\n-                get(firstDirtyChildIndex - 1).pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, false);\n-            }\n-\n-            \/\/ Add the \"last-child\" pseudo-class to the last child.\n-            if (size() > 0) {\n-                getLast().pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, true);\n+            int size = size();\n+\n+            \/\/ Toggle the \"only-child\" \/ \"first-child\" \/ \"last-child\" pseudo-classes.\n+            if (size == 1) {\n+                Node first = getFirst();\n+                first.pseudoClassStateChanged(FIRST_CHILD_PSEUDO_CLASS, true);\n+                first.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, true);\n+                first.pseudoClassStateChanged(ONLY_CHILD_PSEUDO_CLASS, true);\n+            } else if (size > 1) {\n+                Node first = getFirst(), last = getLast();\n+                first.pseudoClassStateChanged(FIRST_CHILD_PSEUDO_CLASS, true);\n+                first.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, false);\n+                first.pseudoClassStateChanged(ONLY_CHILD_PSEUDO_CLASS, false);\n+                last.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, true);\n+\n+                if (firstDirtyChildIndex > 0) {\n+                    \/\/ Clear the \"last-child\" pseudo-class on the last non-modified child.\n+                    Node lastNonModified = get(firstDirtyChildIndex - 1);\n+                    if (last != lastNonModified) {\n+                        lastNonModified.pseudoClassStateChanged(LAST_CHILD_PSEUDO_CLASS, false);\n+                    }\n+                }\n@@ -475,1 +476,1 @@\n-                for (int i = firstDirtyChildIndex, max = size(); i < max; ++i) {\n+                for (int i = firstDirtyChildIndex; i < size; ++i) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Parent.java","additions":30,"deletions":29,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -783,0 +783,4 @@\n+        var _ = new Scene(root);\n+\n+        root.applyCss();\n+        assertNotEquals(Background.fill(Color.RED), root.getBackground());\n@@ -790,5 +794,1 @@\n-        assertNotEquals(Background.fill(Color.RED), root.getBackground());\n-\n-        Scene scene = new Scene(root);\n-        scene.getRoot().applyCss();\n-\n+        root.applyCss();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StylesheetTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene;\n-\n-import javafx.css.PseudoClass;\n-import javafx.scene.Group;\n-import javafx.scene.Node;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class Parent_pseudoClasses_Test {\n-\n-    static final PseudoClass FIRST_CHILD = PseudoClass.getPseudoClass(\"first-child\");\n-    static final PseudoClass LAST_CHILD = PseudoClass.getPseudoClass(\"last-child\");\n-    static final PseudoClass ONLY_CHILD = PseudoClass.getPseudoClass(\"only-child\");\n-    static final PseudoClass NTH_EVEN_CHILD = PseudoClass.getPseudoClass(\"nth-child(even)\");\n-    static final PseudoClass NTH_ODD_CHILD = PseudoClass.getPseudoClass(\"nth-child(odd)\");\n-\n-    @Test\n-    void onlyChildPseudoClass() {\n-        var group = new Group();\n-        var child1 = new Group();\n-        var child2 = new Group();\n-        assertNotPseudoClass(ONLY_CHILD, child1);\n-        assertNotPseudoClass(ONLY_CHILD, child2);\n-        group.getChildren().add(child1);\n-        assertPseudoClass(ONLY_CHILD, child1);\n-        group.getChildren().removeFirst();\n-        assertNotPseudoClass(ONLY_CHILD, child1);\n-        group.getChildren().addAll(child1, child2);\n-        assertNotPseudoClass(ONLY_CHILD, child1);\n-        assertNotPseudoClass(ONLY_CHILD, child2);\n-        group.getChildren().removeFirst();\n-        assertNotPseudoClass(ONLY_CHILD, child1);\n-        assertPseudoClass(ONLY_CHILD, child2);\n-    }\n-\n-    @Test\n-    void firstChildPseudoClass() {\n-        var group = new Group();\n-        var child1 = new Group();\n-        var child2 = new Group();\n-        assertNotPseudoClass(FIRST_CHILD, child1);\n-        assertNotPseudoClass(FIRST_CHILD, child2);\n-        group.getChildren().add(child1);\n-        assertPseudoClass(FIRST_CHILD, child1);\n-        group.getChildren().add(child2);\n-        assertPseudoClass(FIRST_CHILD, child1);\n-        assertNotPseudoClass(FIRST_CHILD, child2);\n-        group.getChildren().removeFirst();\n-        assertNotPseudoClass(FIRST_CHILD, child1);\n-        assertPseudoClass(FIRST_CHILD, child2);\n-    }\n-\n-    @Test\n-    void lastChildPseudoClass() {\n-        var group = new Group();\n-        var child1 = new Group();\n-        var child2 = new Group();\n-        assertNotPseudoClass(LAST_CHILD, child1);\n-        assertNotPseudoClass(LAST_CHILD, child2);\n-        group.getChildren().add(child1);\n-        assertPseudoClass(LAST_CHILD, child1);\n-        group.getChildren().add(child2);\n-        assertNotPseudoClass(LAST_CHILD, child1);\n-        assertPseudoClass(LAST_CHILD, child2);\n-        group.getChildren().removeFirst();\n-        assertNotPseudoClass(LAST_CHILD, child1);\n-        assertPseudoClass(LAST_CHILD, child2);\n-        group.getChildren().removeFirst();\n-        assertNotPseudoClass(LAST_CHILD, child2);\n-    }\n-\n-    @Test\n-    void nthChildEvenOddPseudoClass() {\n-        var group = new Group();\n-        var child1 = new Group();\n-        var child2 = new Group();\n-        var child3 = new Group();\n-        var child4 = new Group();\n-\n-        \/\/ [child1, child2, child3, child4]\n-        group.getChildren().addAll(child1, child2, child3, child4);\n-        assertPseudoClass(NTH_EVEN_CHILD, child2, child4);\n-        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child3);\n-        assertPseudoClass(NTH_ODD_CHILD, child1, child3);\n-        assertNotPseudoClass(NTH_ODD_CHILD, child2, child4);\n-\n-        \/\/ [child1, child2, child2b, child3, child4]\n-        var child2b = new Group();\n-        group.getChildren().add(2, child2b);\n-        assertPseudoClass(NTH_EVEN_CHILD, child2, child3);\n-        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child2b, child4);\n-        assertPseudoClass(NTH_ODD_CHILD, child1, child2b, child4);\n-        assertNotPseudoClass(NTH_ODD_CHILD, child2, child3);\n-\n-        \/\/ [child1, child3, child4]\n-        group.getChildren().remove(1, 3);\n-        assertPseudoClass(NTH_EVEN_CHILD, child3);\n-        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child2, child2b, child4);\n-        assertPseudoClass(NTH_ODD_CHILD, child1, child4);\n-        assertNotPseudoClass(NTH_ODD_CHILD, child2, child2b, child3);\n-    }\n-\n-    private void assertPseudoClass(PseudoClass pseudoClass, Node... nodes) {\n-        for (Node node : nodes) {\n-            assertTrue(node.getPseudoClassStates().contains(pseudoClass));\n-        }\n-    }\n-\n-    private void assertNotPseudoClass(PseudoClass pseudoClass, Node... nodes) {\n-        for (Node node : nodes) {\n-            assertFalse(node.getPseudoClassStates().contains(pseudoClass));\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Parent_pseudoClasses_Test.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -0,0 +1,340 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javafx.css.PseudoClass;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class Parent_structuralPseudoClasses_Test {\n+\n+    static final PseudoClass FIRST_CHILD = PseudoClass.getPseudoClass(\"first-child\");\n+    static final PseudoClass LAST_CHILD = PseudoClass.getPseudoClass(\"last-child\");\n+    static final PseudoClass ONLY_CHILD = PseudoClass.getPseudoClass(\"only-child\");\n+    static final PseudoClass NTH_EVEN_CHILD = PseudoClass.getPseudoClass(\"nth-child(even)\");\n+    static final PseudoClass NTH_ODD_CHILD = PseudoClass.getPseudoClass(\"nth-child(odd)\");\n+    static final PseudoClass[] EMPTY = new PseudoClass[0];\n+    static final PseudoClass[] ALL = new PseudoClass[] { FIRST_CHILD, LAST_CHILD, ONLY_CHILD, NTH_EVEN_CHILD, NTH_ODD_CHILD };\n+\n+    @Test\n+    void multipleNodes_removeFromFront() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = []\n+        \/\/ child2 = [first-child, last-child, nth-child(odd)]\n+        \/\/ child3 = [nth-child(even)]\n+        \/\/ child4 = [last-child, nth-child(odd)]\n+        group.getChildren().removeFirst();\n+        assertOnlyPseudoClasses(child1, EMPTY);\n+        assertOnlyPseudoClasses(child2, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_ODD_CHILD);\n+\n+        \/\/ child1 = []\n+        \/\/ child2 = []\n+        \/\/ child3 = [first-child, nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().removeFirst();\n+        assertOnlyPseudoClasses(child1, EMPTY);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = []\n+        \/\/ child2 = []\n+        \/\/ child3 = []\n+        \/\/ child4 = [only-child, first-child, last-child, nth-child(odd)]\n+        group.getChildren().removeFirst();\n+        assertOnlyPseudoClasses(child1, EMPTY);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, EMPTY);\n+        assertOnlyPseudoClasses(child4, ONLY_CHILD, FIRST_CHILD, LAST_CHILD, NTH_ODD_CHILD);\n+    }\n+\n+    @Test\n+    void multipleNodes_removeFromBack() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = [first-child, last-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [last-child, nth-child(odd)]\n+        \/\/ child4 = []\n+        group.getChildren().removeLast();\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, LAST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, EMPTY);\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [last-child, nth-child(even)]\n+        \/\/ child3 = []\n+        \/\/ child4 = []\n+        group.getChildren().removeLast();\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, LAST_CHILD, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, EMPTY);\n+        assertOnlyPseudoClasses(child4, EMPTY);\n+\n+        \/\/ child1 = [only-child, first-child, last-child, nth-child(odd)]\n+        \/\/ child2 = []\n+        \/\/ child3 = []\n+        \/\/ child4 = []\n+        group.getChildren().removeLast();\n+        assertOnlyPseudoClasses(child1, ONLY_CHILD, FIRST_CHILD, LAST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, EMPTY);\n+        assertOnlyPseudoClasses(child4, EMPTY);\n+    }\n+\n+    @Test\n+    void multipleNodes_removeInterior() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = []\n+        \/\/ child3 = [nth-child(even)]\n+        \/\/ child4 = [last-child, nth-child(odd)]\n+        group.getChildren().remove(1);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_ODD_CHILD);\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = []\n+        \/\/ child3 = []\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().remove(1);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, EMPTY);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+    }\n+\n+    @Test\n+    void multipleNodes_removeInteriorRange() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = []\n+        \/\/ child3 = []\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().removeAll(child2, child3);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, EMPTY);\n+        assertOnlyPseudoClasses(child3, EMPTY);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+    }\n+\n+    @Test\n+    @Disabled(\"JDK-8233179\")\n+    void multipleNodes_permutation() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child3 = [nth-child(odd)]\n+        \/\/ child4 = [last-child, nth-child(even)]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child3, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child4, LAST_CHILD, NTH_EVEN_CHILD);\n+\n+        \/\/ child1 = [first-child, nth-child(odd)]\n+        \/\/ child2 = [nth-child(even)]\n+        \/\/ child4 = [nth-child(odd)]\n+        \/\/ child3 = [last-child, nth-child(even)]\n+        group.getChildren().sort((o1, o2) -> { \/\/ swap child3 and child4\n+            if (o1 == child3) return o2 == child4 ? 1 : 0;\n+            if (o1 == child4) return o2 == child3 ? -1 : 0;\n+            return 0;\n+        });\n+\n+        assertOnlyPseudoClasses(child1, FIRST_CHILD, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child2, NTH_EVEN_CHILD);\n+        assertOnlyPseudoClasses(child4, NTH_ODD_CHILD);\n+        assertOnlyPseudoClasses(child3, LAST_CHILD, NTH_EVEN_CHILD);\n+    }\n+\n+    @Test\n+    void firstChildPseudoClass() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        assertNotPseudoClass(FIRST_CHILD, child1);\n+        assertNotPseudoClass(FIRST_CHILD, child2);\n+        group.getChildren().add(child1);\n+        assertPseudoClass(FIRST_CHILD, child1);\n+        group.getChildren().add(child2);\n+        assertPseudoClass(FIRST_CHILD, child1);\n+        assertNotPseudoClass(FIRST_CHILD, child2);\n+        group.getChildren().removeFirst();\n+        assertNotPseudoClass(FIRST_CHILD, child1);\n+        assertPseudoClass(FIRST_CHILD, child2);\n+    }\n+\n+    @Test\n+    void lastChildPseudoClass() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        assertNotPseudoClass(LAST_CHILD, child1);\n+        assertNotPseudoClass(LAST_CHILD, child2);\n+        group.getChildren().add(child1);\n+        assertPseudoClass(LAST_CHILD, child1);\n+        group.getChildren().add(child2);\n+        assertNotPseudoClass(LAST_CHILD, child1);\n+        assertPseudoClass(LAST_CHILD, child2);\n+        group.getChildren().removeFirst();\n+        assertNotPseudoClass(LAST_CHILD, child1);\n+        assertPseudoClass(LAST_CHILD, child2);\n+        group.getChildren().removeFirst();\n+        assertNotPseudoClass(LAST_CHILD, child2);\n+    }\n+\n+    @Test\n+    void nthChildEvenOddPseudoClass() {\n+        var group = new Group();\n+        var child1 = new Group();\n+        var child2 = new Group();\n+        var child3 = new Group();\n+        var child4 = new Group();\n+\n+        \/\/ [child1, child2, child3, child4]\n+        group.getChildren().addAll(child1, child2, child3, child4);\n+        assertPseudoClass(NTH_EVEN_CHILD, child2, child4);\n+        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child3);\n+        assertPseudoClass(NTH_ODD_CHILD, child1, child3);\n+        assertNotPseudoClass(NTH_ODD_CHILD, child2, child4);\n+\n+        \/\/ [child1, child2, child2b, child3, child4]\n+        var child2b = new Group();\n+        group.getChildren().add(2, child2b);\n+        assertPseudoClass(NTH_EVEN_CHILD, child2, child3);\n+        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child2b, child4);\n+        assertPseudoClass(NTH_ODD_CHILD, child1, child2b, child4);\n+        assertNotPseudoClass(NTH_ODD_CHILD, child2, child3);\n+\n+        \/\/ [child1, child3, child4]\n+        group.getChildren().remove(1, 3);\n+        assertPseudoClass(NTH_EVEN_CHILD, child3);\n+        assertNotPseudoClass(NTH_EVEN_CHILD, child1, child2, child2b, child4);\n+        assertPseudoClass(NTH_ODD_CHILD, child1, child4);\n+        assertNotPseudoClass(NTH_ODD_CHILD, child2, child2b, child3);\n+    }\n+\n+    private void assertOnlyPseudoClasses(Node node, PseudoClass... pseudoClass) {\n+        List<PseudoClass> remaining = new ArrayList<>(List.of(ALL));\n+\n+        for (PseudoClass pc : pseudoClass) {\n+            assertTrue(node.getPseudoClassStates().contains(pc));\n+            remaining.remove(pc);\n+        }\n+\n+        for (PseudoClass pc : remaining) {\n+            assertFalse(node.getPseudoClassStates().contains(pc));\n+        }\n+    }\n+\n+    private void assertPseudoClass(PseudoClass pseudoClass, Node... nodes) {\n+        for (Node node : nodes) {\n+            assertTrue(node.getPseudoClassStates().contains(pseudoClass));\n+        }\n+    }\n+\n+    private void assertNotPseudoClass(PseudoClass pseudoClass, Node... nodes) {\n+        for (Node node : nodes) {\n+            assertFalse(node.getPseudoClassStates().contains(pseudoClass));\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Parent_structuralPseudoClasses_Test.java","additions":340,"deletions":0,"binary":false,"changes":340,"status":"added"}]}