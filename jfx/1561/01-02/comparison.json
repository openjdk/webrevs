{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTimeout;\n@@ -34,1 +33,0 @@\n-import java.time.Duration;\n@@ -37,0 +35,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -49,0 +48,1 @@\n+import org.junit.jupiter.api.Timeout;\n@@ -260,0 +260,1 @@\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -261,7 +262,5 @@\n-        assertTimeout(Duration.ofMillis(1000), () -> {\n-            axis.setForceZeroInRange(false);\n-            axis.setSide(Side.LEFT);\n-            double minValue = 1.0;\n-            double maxValue = minValue + Math.ulp(minValue);\n-            NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n-        });\n+        axis.setForceZeroInRange(false);\n+        axis.setSide(Side.LEFT);\n+        double minValue = 1.0;\n+        double maxValue = minValue + Math.ulp(minValue);\n+        NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n@@ -271,0 +270,1 @@\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -272,9 +272,7 @@\n-        assertTimeout(Duration.ofMillis(1000), () -> {\n-            axis.setForceZeroInRange(false);\n-            axis.setSide(Side.LEFT);\n-            double minValue = 1.0;\n-            double maxValue = minValue + 11 * Math.ulp(minValue);\n-            Object range = NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n-            NumberAxisShim.setRange(axis, range, false);\n-            NumberAxisShim.calculateMinorTickMarks(axis);\n-        });\n+        axis.setForceZeroInRange(false);\n+        axis.setSide(Side.LEFT);\n+        double minValue = 1.0;\n+        double maxValue = minValue + 11 * Math.ulp(minValue);\n+        Object range = NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+        NumberAxisShim.setRange(axis, range, false);\n+        NumberAxisShim.calculateMinorTickMarks(axis);\n@@ -284,0 +282,1 @@\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -285,7 +284,5 @@\n-        assertTimeout(Duration.ofMillis(1000), () -> {\n-            axis.setForceZeroInRange(false);\n-            axis.setSide(Side.LEFT);\n-            double minValue = Math.pow(2, 52); \/\/ ulp == 1.0\n-            double maxValue = minValue;\n-            NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n-        });\n+        axis.setForceZeroInRange(false);\n+        axis.setSide(Side.LEFT);\n+        double minValue = Math.pow(2, 52); \/\/ ulp == 1.0\n+        double maxValue = minValue;\n+        NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n@@ -295,0 +292,1 @@\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -296,14 +294,12 @@\n-        assertTimeout(Duration.ofMillis(1000), () -> {\n-            axis.setForceZeroInRange(false);\n-            axis.setSide(Side.LEFT);\n-            axis.setAutoRanging(false);\n-            double minValue = 1.0;\n-            double maxValue = minValue + Math.ulp(minValue);\n-            axis.setLowerBound(minValue);\n-            axis.setUpperBound(maxValue);\n-            \/\/ minValue + tickUnit == minValue\n-            axis.setTickUnit(0.5 * Math.ulp(minValue));\n-            Object range = NumberAxisShim.getRange(axis);\n-            NumberAxisShim.calculateTickValues(axis, 500, range);\n-            NumberAxisShim.calculateMinorTickMarks(axis);\n-        });\n+        axis.setForceZeroInRange(false);\n+        axis.setSide(Side.LEFT);\n+        axis.setAutoRanging(false);\n+        double minValue = 1.0;\n+        double maxValue = minValue + Math.ulp(minValue);\n+        axis.setLowerBound(minValue);\n+        axis.setUpperBound(maxValue);\n+        \/\/ minValue + tickUnit == minValue\n+        axis.setTickUnit(0.5 * Math.ulp(minValue));\n+        Object range = NumberAxisShim.getRange(axis);\n+        NumberAxisShim.calculateTickValues(axis, 500, range);\n+        NumberAxisShim.calculateMinorTickMarks(axis);\n@@ -313,0 +309,1 @@\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -314,13 +311,11 @@\n-        assertTimeout(Duration.ofMillis(1000), () -> {\n-            axis.setForceZeroInRange(false);\n-            axis.setSide(Side.LEFT);\n-            axis.setAutoRanging(false);\n-            double minValue = 1.0;\n-            double maxValue = minValue + Math.ulp(minValue);\n-            axis.setLowerBound(minValue);\n-            axis.setUpperBound(maxValue);\n-            axis.setTickUnit(Math.ulp(minValue));\n-            Object range = NumberAxisShim.getRange(axis);\n-            NumberAxisShim.calculateTickValues(axis, 500, range);\n-            NumberAxisShim.calculateMinorTickMarks(axis);\n-        });\n+        axis.setForceZeroInRange(false);\n+        axis.setSide(Side.LEFT);\n+        axis.setAutoRanging(false);\n+        double minValue = 1.0;\n+        double maxValue = minValue + Math.ulp(minValue);\n+        axis.setLowerBound(minValue);\n+        axis.setUpperBound(maxValue);\n+        axis.setTickUnit(Math.ulp(minValue));\n+        Object range = NumberAxisShim.getRange(axis);\n+        NumberAxisShim.calculateTickValues(axis, 500, range);\n+        NumberAxisShim.calculateMinorTickMarks(axis);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/NumberAxisTest.java","additions":47,"deletions":52,"binary":false,"changes":99,"status":"modified"}]}