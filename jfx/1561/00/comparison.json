{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import com.sun.javafx.scene.control.LabeledImpl;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import java.net.URL;\n@@ -37,6 +39,2 @@\n-import org.junit.Test;\n-\n-import java.net.URL;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.LabeledImpl;\n@@ -46,2 +44,2 @@\n-\n-    @Test public void test_RT_21357() {\n+    @Test\n+    public void test_RT_21357() {\n@@ -63,2 +61,2 @@\n-    @Test public void test_RT_21617() {\n-\n+    @Test\n+    public void test_RT_21617() {\n@@ -90,1 +88,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/LabeledImplOtherTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,2 @@\n-import test.com.sun.javafx.pgstub.StubImageLoaderFactory;\n-import test.com.sun.javafx.pgstub.StubPlatformImageInfo;\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.scene.control.LabeledImpl;\n-import com.sun.javafx.scene.control.LabeledImplShim;\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -36,1 +31,0 @@\n-\n@@ -40,0 +34,1 @@\n+import javafx.css.CssMetaData;\n@@ -53,0 +48,10 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.scene.control.LabeledImpl;\n+import com.sun.javafx.scene.control.LabeledImplShim;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubImageLoaderFactory;\n+import test.com.sun.javafx.pgstub.StubPlatformImageInfo;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -54,9 +59,0 @@\n-import org.junit.BeforeClass;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-\n-@RunWith(Parameterized.class)\n@@ -65,1 +61,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -158,3 +154,0 @@\n-    private final Configuration configuration;\n-\n-    @Parameters\n@@ -183,2 +176,3 @@\n-    @Test\n-    public void testMirrorReflectsSource() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMirrorReflectsSource(Configuration configuration) {\n@@ -190,8 +184,1 @@\n-        assertEquals(mirror.toString(), expected, mirror.getValue());\n-    }\n-\n-    public LabeledImplTest(Configuration configuration) {\n-        this.configuration = configuration;\n-    }\n-\n-    static {\n+        assertEquals(expected, mirror.getValue(), mirror.toString());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/LabeledImplTest.java","additions":19,"deletions":32,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import com.sun.javafx.scene.control.LabeledText;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -42,2 +47,3 @@\n-import org.junit.*;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.LabeledText;\n@@ -60,1 +66,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -114,1 +121,0 @@\n-\n@@ -120,1 +126,0 @@\n-\n@@ -135,1 +140,0 @@\n-\n@@ -140,1 +144,0 @@\n-\n@@ -256,1 +259,0 @@\n-\n@@ -266,1 +268,0 @@\n-\n@@ -269,1 +270,0 @@\n-\n@@ -279,1 +279,0 @@\n-\n@@ -282,1 +281,0 @@\n-\n@@ -292,1 +290,0 @@\n-\n@@ -295,1 +292,0 @@\n-\n@@ -374,3 +370,2 @@\n-\n-    @Test public void test_RT_37787() {\n-\n+    @Test\n+    public void test_RT_37787() {\n@@ -395,1 +390,0 @@\n-\n@@ -398,2 +392,2 @@\n-    @Test public void test_RT_37787_with_inline_style() {\n-\n+    @Test\n+    public void test_RT_37787_with_inline_style() {\n@@ -415,1 +409,0 @@\n-\n@@ -417,1 +410,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/LabeledTextTest.java","additions":16,"deletions":24,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n@@ -32,9 +37,0 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -47,0 +43,3 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n@@ -92,3 +91,2 @@\n-        assertEquals(\"none of the removed listeners must be notified\",\n-                0, changes.size() + secondChanges.size());\n-       \/\/ manually add the chained listener\n+        assertEquals(0, changes.size() + secondChanges.size(), \"none of the removed listeners must be notified\");\n+        \/\/ manually add the chained listener\n@@ -193,1 +191,1 @@\n-        assertEquals(\"listener must not be invoked after dispose\", 0, changes.size());\n+        assertEquals(0, changes.size(), \"listener must not be invoked after dispose\");\n@@ -196,1 +194,1 @@\n-        assertEquals(\"listener must be invoked when re-registered after dispose\", 1, changes.size());\n+        assertEquals(1, changes.size(), \"listener must be invoked when re-registered after dispose\");\n@@ -216,1 +214,1 @@\n-        assertNull(\"handler must be gc'ed\", ref.get());\n+        assertNull(ref.get(), \"handler must be gc'ed\");\n@@ -218,1 +216,1 @@\n-        assertEquals(\"listener must not be invoked after gc\", 1, changes.size());\n+        assertEquals(1, changes.size(), \"listener must not be invoked after gc\");\n@@ -224,1 +222,1 @@\n-    @Before\n+    @BeforeEach\n@@ -245,2 +243,2 @@\n-        assertEquals(\"changeListener not notified\", 0, changes[0]);\n-        assertEquals(\"invalidationListener notified\", 1, invalidations[0]);\n+        assertEquals(0, changes[0], \"changeListener not notified\");\n+        assertEquals(1, invalidations[0], \"invalidationListener notified\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/LambdaMultipleListHandlerTest.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n@@ -32,11 +39,0 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -49,0 +45,4 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n@@ -56,1 +56,0 @@\n-@RunWith(Parameterized.class)\n@@ -60,1 +59,0 @@\n-    private boolean useChangeListener;\n@@ -68,2 +66,3 @@\n-    @Test\n-    public void testUnregistersSingleConsumerMultipleObservables() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUnregistersSingleConsumerMultipleObservables(boolean useChangeListener) {\n@@ -74,3 +73,3 @@\n-        registerListener(p, consumer);\n-        registerListener(other, consumer);\n-        unregisterListeners(other);\n+        registerListener(useChangeListener, p, consumer);\n+        registerListener(useChangeListener, other, consumer);\n+        unregisterListeners(useChangeListener, other);\n@@ -87,2 +86,3 @@\n-    @Test\n-    public void testUnregistersMultipleConsumers() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUnregistersMultipleConsumers(boolean useChangeListener) {\n@@ -94,2 +94,2 @@\n-        registerListener(p, c -> action[0] = actionValue);\n-        registerListener(p, c -> secondAction[0] = action[0]);\n+        registerListener(useChangeListener, p, c -> action[0] = actionValue);\n+        registerListener(useChangeListener, p, c -> secondAction[0] = action[0]);\n@@ -97,1 +97,1 @@\n-        Consumer removedChain = unregisterListeners(p);\n+        Consumer removedChain = unregisterListeners(useChangeListener, p);\n@@ -99,1 +99,1 @@\n-        assertEquals(\"none of the removed listeners must be notified\", 0, action[0] + secondAction[0]);\n+        assertEquals(0, action[0] + secondAction[0], \"none of the removed listeners must be notified\");\n@@ -102,1 +102,1 @@\n-        addListener(p, removedChain);\n+        addListener(useChangeListener, p, removedChain);\n@@ -105,2 +105,2 @@\n-        assertEquals(\"effect of removed consumer chain\", actionValue, action[0]);\n-        assertEquals(\"effect of removed consumer chain\", action[0], secondAction[0]);\n+        assertEquals(actionValue, action[0], \"effect of removed consumer chain\");\n+        assertEquals(action[0], secondAction[0], \"effect of removed consumer chain\");\n@@ -109,2 +109,3 @@\n-    @Test\n-    public void testUnregistersSingleConsumer() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUnregistersSingleConsumer(boolean useChangeListener) {\n@@ -114,2 +115,2 @@\n-        registerListener(p, consumer);\n-        Consumer<Observable> removed = unregisterListeners(p);\n+        registerListener(useChangeListener, p, consumer);\n+        Consumer<Observable> removed = unregisterListeners(useChangeListener, p);\n@@ -118,1 +119,1 @@\n-        assertSame(\"single registered listener must be returned\", consumer, removed);\n+        assertSame(consumer, removed, \"single registered listener must be returned\");\n@@ -124,2 +125,3 @@\n-    @Test\n-    public void testUnregistersNotRegistered() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUnregistersNotRegistered(boolean useChangeListener) {\n@@ -127,1 +129,1 @@\n-        assertNull(unregisterListeners(p));\n+        assertTrue(unregisterListeners(useChangeListener, p) == null);\n@@ -130,3 +132,4 @@\n-    @Test\n-    public void testUnregistersNull() {\n-        assertNull(unregisterListeners(null));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUnregistersNull(boolean useChangeListener) {\n+        assertTrue(unregisterListeners(useChangeListener, null) == null);\n@@ -138,2 +141,3 @@\n-    @Test\n-    public void testRegisterConsumerToMultipleObservables() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegisterConsumerToMultipleObservables(boolean useChangeListener) {\n@@ -144,2 +148,2 @@\n-        registerListener(p, consumer);\n-        registerListener(other, consumer);\n+        registerListener(useChangeListener, p, consumer);\n+        registerListener(useChangeListener, other, consumer);\n@@ -155,2 +159,3 @@\n-    @Test\n-    public void testRegisterMultipleConsumerToSingleObservable() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegisterMultipleConsumerToSingleObservable(boolean useChangeListener) {\n@@ -161,2 +166,2 @@\n-        registerListener(p, c -> action[0] = actionValue);\n-        registerListener(p, c -> secondAction[0] = action[0]);\n+        registerListener(useChangeListener, p, c -> action[0] = actionValue);\n+        registerListener(useChangeListener, p, c -> secondAction[0] = action[0]);\n@@ -168,2 +173,3 @@\n-    @Test\n-    public void testRegister() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegister(boolean useChangeListener) {\n@@ -172,1 +178,1 @@\n-        registerListener(p, c -> count[0]++);\n+        registerListener(useChangeListener, p, c -> count[0]++);\n@@ -177,2 +183,3 @@\n-    @Test\n-    public void testRegisterNullConsumer() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegisterNullConsumer(boolean useChangeListener) {\n@@ -180,1 +187,1 @@\n-        registerListener(p, null);\n+        registerListener(useChangeListener, p, null);\n@@ -183,3 +190,4 @@\n-    @Test\n-    public void testRegisterNullObservable() {\n-        registerListener(null, c -> {});\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegisterNullObservable(boolean useChangeListener) {\n+        registerListener(useChangeListener, null, c -> {});\n@@ -190,2 +198,3 @@\n-    @Test\n-    public void testDispose() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testDispose(boolean useChangeListener) {\n@@ -194,1 +203,1 @@\n-        registerListener(p, c -> count[0]++);\n+        registerListener(useChangeListener, p, c -> count[0]++);\n@@ -197,1 +206,1 @@\n-        assertEquals(\"listener must not be invoked after dispose\", 0, count[0]);\n+        assertEquals(0, count[0], \"listener must not be invoked after dispose\");\n@@ -199,1 +208,1 @@\n-        registerListener(p, c -> count[0]++);\n+        registerListener(useChangeListener, p, c -> count[0]++);\n@@ -201,1 +210,1 @@\n-        assertEquals(\"listener must be invoked when re-registered after dispose\", 1, count[0]);\n+        assertEquals(1, count[0], \"listener must be invoked when re-registered after dispose\");\n@@ -210,2 +219,3 @@\n-    @Test\n-    public void testRegisterMemoryLeak() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testRegisterMemoryLeak(boolean useChangeListener) {\n@@ -218,1 +228,1 @@\n-        registerListener(handler, p, consumer);\n+        registerListener(useChangeListener, handler, p, consumer);\n@@ -221,1 +231,1 @@\n-        assertEquals(\"sanity: listener invoked\", notified, count[0]);\n+        assertEquals(notified, count[0], \"sanity: listener invoked\");\n@@ -225,1 +235,1 @@\n-        assertNull(\"handler must be gc'ed\", ref.get());\n+        assertNull(ref.get(), \"handler must be gc'ed\");\n@@ -227,1 +237,1 @@\n-        assertEquals(\"listener must not be invoked after gc\", notified, count[0]);\n+        assertEquals(notified, count[0], \"listener must not be invoked after gc\");\n@@ -237,1 +247,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -244,1 +255,1 @@\n-        assertEquals(\"both listener types must be invoked\", 2, count[0]);\n+        assertEquals(2, count[0], \"both listener types must be invoked\");\n@@ -250,1 +261,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -258,1 +270,1 @@\n-        assertEquals(\"\", 1, count[0]);\n+        assertEquals(1, count[0]);\n@@ -264,1 +276,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -272,1 +285,1 @@\n-        assertEquals(\"\", 1, count[0]);\n+        assertEquals(1, count[0]);\n@@ -278,1 +291,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -288,2 +302,2 @@\n-        assertEquals(\"sanity: received invalidation\", 1, count[0]);\n-        assertFalse(\"binding must not be valid\", p.isValid());\n+        assertEquals(1, count[0], \"sanity: received invalidation\");\n+        assertFalse(p.isValid(), \"binding must not be valid\");\n@@ -300,2 +314,2 @@\n-    protected void registerListener(Observable p, Consumer consumer) {\n-        registerListener(handler, p, consumer);\n+    protected void registerListener(boolean useChangeListener, Observable p, Consumer consumer) {\n+        registerListener(useChangeListener, handler, p, consumer);\n@@ -308,1 +322,6 @@\n-    protected void registerListener(LambdaMultiplePropertyChangeListenerHandler handler, Observable p, Consumer consumer) {\n+    protected void registerListener(\n+        boolean useChangeListener,\n+        LambdaMultiplePropertyChangeListenerHandler handler,\n+        Observable p,\n+        Consumer consumer\n+    ) {\n@@ -319,2 +338,2 @@\n-    protected Consumer unregisterListeners(Observable p) {\n-        return unregisterListeners(handler, p);\n+    protected Consumer unregisterListeners(boolean useChangeListener, Observable p) {\n+        return unregisterListeners(useChangeListener, handler, p);\n@@ -326,1 +345,1 @@\n-    protected Consumer unregisterListeners(LambdaMultiplePropertyChangeListenerHandler handler, Observable p) {\n+    protected Consumer unregisterListeners(boolean useChangeListener, LambdaMultiplePropertyChangeListenerHandler handler, Observable p) {\n@@ -333,1 +352,1 @@\n-    protected void addListener(ObservableValue<?> p, Consumer<Observable> consumer) {\n+    protected void addListener(boolean useChangeListener, ObservableValue<?> p, Consumer<Observable> consumer) {\n@@ -342,5 +361,2 @@\n-\/\/-------------- parameters\n-\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters \/\/(name = \"{index}: changeListener {0} \")\n-    public static Collection<Object[]> data() {\n+    \/** parameters *\/\n+    private static Collection<Object[]> data() {\n@@ -354,4 +370,0 @@\n-    public LambdaMultipleObservableHandlerTest(boolean useChangeListener) {\n-        this.useChangeListener = useChangeListener;\n-    }\n-\n@@ -361,1 +373,1 @@\n-    @Before\n+    @BeforeEach\n@@ -365,1 +377,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/LambdaMultipleObservableHandlerTest.java","additions":106,"deletions":95,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,3 @@\n-import com.sun.javafx.collections.ObservableListWrapper;\n-import com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -32,7 +33,5 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.collections.ObservableListWrapper;\n+import com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList;\n@@ -47,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -105,1 +104,1 @@\n-    @Ignore(\"JDK-8267951\")\n+    @Disabled(\"JDK-8267951\")\n@@ -123,1 +122,1 @@\n-    @Ignore(\"JDK-8267951\")\n+    @Disabled(\"JDK-8267951\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/SelectedItemsReadOnlyObservableListTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -38,2 +38,2 @@\n-    @Test public void focusGainedIsCaughtByBehavior() {\n-\n+    @Test\n+    public void focusGainedIsCaughtByBehavior() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/AccordionBehaviorTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,11 @@\n+import static com.sun.javafx.scene.control.behavior.TextBehaviorShim.getRawBidi;\n+import static com.sun.javafx.scene.control.behavior.TextBehaviorShim.isRTLText;\n+import static javafx.collections.FXCollections.observableArrayList;\n+import static javafx.scene.control.skin.TextInputSkinShim.isCaretBlinking;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createBehavior;\n@@ -29,18 +40,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n-import com.sun.javafx.scene.control.behavior.TextFieldBehavior;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n-import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n-\n-import static com.sun.javafx.scene.control.behavior.TextBehaviorShim.*;\n-import static javafx.collections.FXCollections.*;\n-import static javafx.scene.control.skin.TextInputSkinShim.*;\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -59,0 +52,9 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n+import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n+import com.sun.javafx.scene.control.behavior.TextFieldBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n@@ -77,1 +79,1 @@\n-        assertTrue(\"caret must be blinking if focused\", isCaretBlinking(control));\n+        assertTrue(isCaretBlinking(control), \"caret must be blinking if focused\");\n@@ -80,1 +82,1 @@\n-        assertFalse(\"caret must not be blinking if not focused\", isCaretBlinking(control));\n+        assertFalse(isCaretBlinking(control), \"caret must not be blinking if not focused\");\n@@ -89,1 +91,1 @@\n-        assertTrue(\"caret must be blinking if focused\", isCaretBlinking(control));\n+        assertTrue(isCaretBlinking(control), \"caret must be blinking if focused\");\n@@ -92,1 +94,1 @@\n-        assertFalse(\"caret must not be blinking if not focused\", isCaretBlinking(control));\n+        assertFalse(isCaretBlinking(control), \"caret must not be blinking if not focused\");\n@@ -99,1 +101,1 @@\n-        assertEquals(\"all text selected\", control.getText(), control.getSelectedText());\n+        assertEquals(control.getText(), control.getSelectedText(), \"all text selected\");\n@@ -102,1 +104,1 @@\n-        assertEquals(\"selection cleared\", 0, control.getSelectedText().length());\n+        assertEquals(0, control.getSelectedText().length(), \"selection cleared\");\n@@ -122,1 +124,1 @@\n-        assertEquals(\"sanity: \", secondWord, control.getSelectedText());\n+        assertEquals(secondWord, control.getSelectedText(), \"sanity: \");\n@@ -125,1 +127,1 @@\n-        assertEquals(\"selection unchanged after remove\", secondWord, control.getSelectedText());\n+        assertEquals(secondWord, control.getSelectedText(), \"selection unchanged after remove\");\n@@ -129,2 +131,1 @@\n-        assertEquals(\"selection unchanged after focusOwner change in old scene\",\n-                secondWord, control.getSelectedText());\n+        assertEquals(secondWord, control.getSelectedText(), \"selection unchanged after focusOwner change in old scene\");\n@@ -134,2 +135,1 @@\n-        assertEquals(\"selection changed on becoming scene's focusOwner\",\n-                text, control.getSelectedText());\n+        assertEquals(text, control.getSelectedText(), \"selection changed on becoming scene's focusOwner\");\n@@ -152,1 +152,1 @@\n-        assertEquals(\"sanity: \", secondWord, control.getSelectedText());\n+        assertEquals(secondWord, control.getSelectedText(), \"sanity: \");\n@@ -163,2 +163,2 @@\n-            assertTrue(\"sanity: \", secondStage.isFocused());\n-            assertEquals(\"selection unchanged\", secondWord, control.getSelectedText());\n+            assertTrue(secondStage.isFocused(), \"sanity: \");\n+            assertEquals(secondWord, control.getSelectedText(), \"selection unchanged\");\n@@ -167,3 +167,3 @@\n-            assertTrue(\"sanity: \", stage.isFocused());\n-            assertTrue(\"sanity: \", control.isFocused());\n-            assertEquals(\"selection unchanged\", secondWord, control.getSelectedText());\n+            assertTrue(stage.isFocused(), \"sanity: \");\n+            assertTrue(control.isFocused(), \"sanity: \");\n+            assertEquals(secondWord, control.getSelectedText(), \"selection unchanged\");\n@@ -183,1 +183,1 @@\n-        assertFalse(\"sanity: inputMap has child maps\", inputMap.getChildInputMaps().isEmpty());\n+        assertFalse(inputMap.getChildInputMaps().isEmpty(), \"sanity: inputMap has child maps\");\n@@ -185,1 +185,1 @@\n-        assertEquals(\"default child maps must be cleared\", 0, inputMap.getChildInputMaps().size());\n+        assertEquals(0, inputMap.getChildInputMaps().size(), \"default child maps must be cleared\");\n@@ -193,1 +193,1 @@\n-        assertFalse(\"sanity: inputMap has mappings\", inputMap.getMappings().isEmpty());\n+        assertFalse(inputMap.getMappings().isEmpty(), \"sanity: inputMap has mappings\");\n@@ -195,1 +195,1 @@\n-        assertEquals(\"default mappings must be cleared\", 0, inputMap.getMappings().size());\n+        assertEquals(0, inputMap.getMappings().size(), \"default mappings must be cleared\");\n@@ -244,1 +244,1 @@\n-        assertNull(\"sanity: initial bidi\", getRawBidi(behavior));\n+        assertNull(getRawBidi(behavior), \"sanity: initial bidi\");\n@@ -249,1 +249,1 @@\n-        assertNull(\"listener working (bidi is reset)\", getRawBidi(behavior));\n+        assertNull(getRawBidi(behavior), \"listener working (bidi is reset)\");\n@@ -264,2 +264,1 @@\n-        assertNull(\"anchor must remain cleared on selecting when disposed\",\n-                treeView.getProperties().get(\"anchor\"));\n+        assertNull(treeView.getProperties().get(\"anchor\"), \"anchor must remain cleared on selecting when disposed\");\n@@ -274,1 +273,1 @@\n-        assertEquals(\"anchor must be set\", last, treeView.getProperties().get(\"anchor\"));\n+        assertEquals(last, treeView.getProperties().get(\"anchor\"), \"anchor must be set\");\n@@ -283,1 +282,1 @@\n-        assertNull(\"anchor must be cleared after dispose\", treeView.getProperties().get(\"anchor\"));\n+        assertNull(treeView.getProperties().get(\"anchor\"), \"anchor must be cleared after dispose\");\n@@ -310,1 +309,1 @@\n-        assertEquals(\"sanity: anchor unchanged\", last, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last, listView.getProperties().get(\"anchor\"), \"sanity: anchor unchanged\");\n@@ -312,2 +311,1 @@\n-        assertEquals(\"anchor must not be updated on items modification when disposed\",\n-                last, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last, listView.getProperties().get(\"anchor\"), \"anchor must not be updated on items modification when disposed\");\n@@ -323,1 +321,1 @@\n-        assertEquals(\"sanity: anchor unchanged\", last, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last, listView.getProperties().get(\"anchor\"), \"sanity: anchor unchanged\");\n@@ -325,2 +323,1 @@\n-        assertEquals(\"anchor must be updated on items modification\",\n-                last -1, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last -1, listView.getProperties().get(\"anchor\"), \"anchor must be updated on items modification\");\n@@ -340,3 +337,4 @@\n-        assertEquals(\"anchor must not be updated on items modification when disposed\",\n-                last,\n-                listView.getProperties().get(\"anchor\"));\n+        assertEquals(\n+            last,\n+            listView.getProperties().get(\"anchor\"),\n+            \"anchor must not be updated on items modification when disposed\");\n@@ -351,1 +349,1 @@\n-        assertEquals(\"behavior must set anchor on select\", last, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last, listView.getProperties().get(\"anchor\"), \"behavior must set anchor on select\");\n@@ -353,2 +351,1 @@\n-        assertEquals(\"anchor must be updated on items modification\",\n-                last -1, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last -1, listView.getProperties().get(\"anchor\"), \"anchor must be updated on items modification\");\n@@ -367,2 +364,1 @@\n-        assertNull(\"anchor must remain cleared on selecting when disposed\",\n-                listView.getProperties().get(\"anchor\"));\n+        assertNull(listView.getProperties().get(\"anchor\"), \"anchor must remain cleared on selecting when disposed\");\n@@ -377,1 +373,1 @@\n-        assertEquals(\"anchor must be set\", last, listView.getProperties().get(\"anchor\"));\n+        assertEquals(last, listView.getProperties().get(\"anchor\"), \"anchor must be set\");\n@@ -386,1 +382,1 @@\n-        assertNull(\"anchor must be cleared after dispose\", listView.getProperties().get(\"anchor\"));\n+        assertNull(listView.getProperties().get(\"anchor\"), \"anchor must be cleared after dispose\");\n@@ -426,1 +422,1 @@\n-    @After\n+    @AfterEach\n@@ -434,1 +430,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorCleanupTest.java","additions":61,"deletions":65,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createBehavior;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createControl;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.getControlClassesWithBehavior;\n@@ -29,1 +35,0 @@\n-import java.util.Collection;\n@@ -31,12 +36,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -47,0 +40,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n@@ -53,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -56,3 +53,0 @@\n-    private Class<Control> controlClass;\n-    private Control control;\n-\n@@ -60,1 +54,1 @@\n-     * Create behavior -> dispose behavior -> gc\n+     * Create control -> create behavior -> dispose behavior -> gc\n@@ -62,2 +56,5 @@\n-    @Test\n-    public void testMemoryLeakDisposeBehavior() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMemoryLeakDisposeBehavior(Class<Control> controlClass) {\n+        Control control = createControl(controlClass);\n+        assertNotNull(control);\n@@ -68,1 +65,1 @@\n-        assertNull(\"behavior must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"behavior must be gc'ed\");\n@@ -74,2 +71,1 @@\n-    @Parameterized.Parameters \/\/ (name = \"{index}: {0} \")\n-    public static Collection<Object[]> data() {\n+    public static List<Class<Control>> data() {\n@@ -88,5 +84,1 @@\n-        return asArrays(controlClasses);\n-    }\n-\n-    public BehaviorMemoryLeakTest(Class<Control> controlClass) {\n-        this.controlClass = controlClass;\n+        return controlClasses;\n@@ -97,1 +89,1 @@\n-    @After\n+    @AfterEach\n@@ -102,1 +94,1 @@\n-    @Before\n+    @BeforeEach\n@@ -111,2 +103,0 @@\n-        control = createControl(controlClass);\n-        assertNotNull(control);\n@@ -114,1 +104,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorMemoryLeakTest.java","additions":23,"deletions":34,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -30,3 +32,2 @@\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n@@ -144,1 +145,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/MnemonicInfoTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,9 +36,0 @@\n-\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-import com.sun.javafx.scene.control.behavior.ButtonBehavior;\n-import com.sun.javafx.scene.control.behavior.ComboBoxListViewBehavior;\n-import com.sun.javafx.scene.control.behavior.ToggleButtonBehavior;\n-\n-import static java.util.stream.Collectors.*;\n-import static org.junit.Assert.*;\n-\n@@ -128,0 +121,4 @@\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n+import com.sun.javafx.scene.control.behavior.ButtonBehavior;\n+import com.sun.javafx.scene.control.behavior.ComboBoxListViewBehavior;\n+import com.sun.javafx.scene.control.behavior.ToggleButtonBehavior;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/ControlSkinFactory.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import java.util.List;\n-\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +34,1 @@\n-\n+import java.util.List;\n@@ -38,0 +38,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -114,1 +115,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/ControlSkinFactoryTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n@@ -39,4 +45,0 @@\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n@@ -44,2 +46,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -59,1 +59,1 @@\n-        assertTrue(message, tab.getStyleClass().contains(styleClass));\n+        assertTrue(tab.getStyleClass().contains(styleClass), message);\n@@ -72,1 +72,1 @@\n-        assertTrue(message, mi.getStyleClass().contains(styleClass));\n+        assertTrue(mi.getStyleClass().contains(styleClass), message);\n@@ -85,1 +85,1 @@\n-        assertTrue(message, control.getStyleClass().contains(styleClass));\n+        assertTrue(control.getStyleClass().contains(styleClass), message);\n@@ -98,1 +98,1 @@\n-        assertTrue(message, control.getStyleClass().contains(styleClass));\n+        assertTrue(control.getStyleClass().contains(styleClass), message);\n@@ -113,1 +113,1 @@\n-        assertTrue(message, allStates.contains(state));\n+        assertTrue(allStates.contains(state), message);\n@@ -125,1 +125,1 @@\n-        assertFalse(message, allStates.contains(state));\n+        assertFalse(allStates.contains(state), message);\n@@ -140,1 +140,1 @@\n-        assertTrue(message, allStates.contains(state));\n+        assertTrue(allStates.contains(state), message);\n@@ -152,1 +152,1 @@\n-        assertFalse(message, allStates.contains(state));\n+        assertFalse(allStates.contains(state), message);\n@@ -165,1 +165,1 @@\n-        assertTrue(message, control.getStyleClass().contains(styleClass));\n+        assertTrue(control.getStyleClass().contains(styleClass), message);\n@@ -196,1 +196,1 @@\n-        assertTrue(message, listeners != null && listeners.contains(listener));\n+        assertTrue(listeners != null && listeners.contains(listener), message);\n@@ -205,1 +205,1 @@\n-        assertTrue(message, listeners == null || !listeners.contains(listener));\n+        assertTrue(listeners == null || !listeners.contains(listener), message);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/ControlTestUtils.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static javafx.scene.input.KeyCode.A;\n+import static javafx.scene.input.KeyEvent.KEY_PRESSED;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,9 +36,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static javafx.scene.input.KeyCode.*;\n-import static javafx.scene.input.KeyEvent.*;\n-import static org.junit.Assert.*;\n-\n@@ -47,0 +44,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -71,2 +71,2 @@\n-        assertEquals(\"button must have received the key\", 1, buttonEvents.size());\n-        assertEquals(\"textField must not have received the key\", 0, textFieldEvents.size());\n+        assertEquals(1, buttonEvents.size(), \"button must have received the key\");\n+        assertEquals(0, textFieldEvents.size(), \"textField must not have received the key\");\n@@ -88,2 +88,2 @@\n-        assertEquals(\"button must have received the key\", 1, buttonEvents.size());\n-        assertEquals(\"textField must not have received the key\", 0, textFieldEvents.size());\n+        assertEquals(1, buttonEvents.size(), \"button must have received the key\");\n+        assertEquals(0, textFieldEvents.size(), \"textField must not have received the key\");\n@@ -108,2 +108,2 @@\n-        assertEquals(\"false green - textField must have received the key\", 1, textFieldEvents.size());\n-        assertEquals(\"false green - button must not have received the key\", 0, buttonEvents.size());\n+        assertEquals(1, textFieldEvents.size(), \"false green - textField must have received the key\");\n+        assertEquals(0, buttonEvents.size(), \"false green - button must not have received the key\");\n@@ -119,1 +119,1 @@\n-    @Test (expected= NullPointerException.class)\n+    @Test\n@@ -121,1 +121,3 @@\n-        new KeyEventFirer(null, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyEventFirer(null, null);\n+        });\n@@ -124,1 +126,1 @@\n-    @Test (expected= NullPointerException.class)\n+    @Test\n@@ -126,1 +128,3 @@\n-        new KeyEventFirer(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyEventFirer(null);\n+        });\n@@ -153,1 +157,1 @@\n-    @Before\n+    @BeforeEach\n@@ -164,1 +168,1 @@\n-    @After\n+    @AfterEach\n@@ -170,1 +174,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/KeyEventFirerTest.java","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static javafx.scene.layout.AnchorPane.setBottomAnchor;\n+import static javafx.scene.layout.AnchorPane.setLeftAnchor;\n+import static javafx.scene.layout.AnchorPane.setRightAnchor;\n+import static javafx.scene.layout.AnchorPane.setTopAnchor;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,12 +37,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.layout.AnchorPane.*;\n-import static org.junit.Assert.*;\n-\n@@ -51,0 +46,6 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.tk.Toolkit;\n@@ -58,1 +59,0 @@\n-@RunWith(Parameterized.class)\n@@ -76,2 +76,3 @@\n-    @Test\n-    public void testLocalStandaloneDeltaNegative() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocalStandaloneDeltaNegative(boolean useAlternative) {\n@@ -79,1 +80,1 @@\n-        assertLocal(button, - 10, - 5);\n+        assertLocal(useAlternative, button, - 10, - 5);\n@@ -82,2 +83,3 @@\n-    @Test\n-    public void testLocalStandaloneDelta() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocalStandaloneDelta(boolean useAlternative) {\n@@ -85,1 +87,1 @@\n-        assertLocal(button, 10, 5);\n+        assertLocal(useAlternative, button, 10, 5);\n@@ -88,2 +90,3 @@\n-    @Test\n-    public void testLocalStandalone() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocalStandalone(boolean useAlternative) {\n@@ -91,1 +94,1 @@\n-        assertLocal(button, 0, 0);\n+        assertLocal(useAlternative, button, 0, 0);\n@@ -94,2 +97,3 @@\n-    @Test\n-    public void testMouseCoordinatesStandaloneDeltaNegative() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinatesStandaloneDeltaNegative(boolean useAlternative) {\n@@ -97,1 +101,1 @@\n-        assertMouseCoordinatesDelta(button, - 10, - 5);\n+        assertMouseCoordinatesDelta(useAlternative, button, - 10, - 5);\n@@ -100,2 +104,3 @@\n-    @Test\n-    public void testMouseCoordinatesStandaloneDelta() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinatesStandaloneDelta(boolean useAlternative) {\n@@ -103,1 +108,1 @@\n-        assertMouseCoordinatesDelta(button, 10, 5);\n+        assertMouseCoordinatesDelta(useAlternative, button, 10, 5);\n@@ -106,2 +111,3 @@\n-    @Test\n-    public void testMouseCoordinatesStandalone() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinatesStandalone(boolean useAlternative) {\n@@ -109,1 +115,1 @@\n-        assertMouseCoordinatesDelta(button, 0, 0);\n+        assertMouseCoordinatesDelta(useAlternative, button, 0, 0);\n@@ -114,3 +120,4 @@\n-    @Test\n-    public void testLocalDeltaNegative() {\n-        content.getChildren().forEach(child -> assertLocal(child, - 10, - 5));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocalDeltaNegative(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertLocal(useAlternative, child, - 10, - 5));\n@@ -119,3 +126,4 @@\n-    @Test\n-    public void testLocalDelta() {\n-        content.getChildren().forEach(child -> assertLocal(child, 10, 5));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocalDelta(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertLocal(useAlternative, child, 10, 5));\n@@ -124,3 +132,4 @@\n-    @Test\n-    public void testLocal() {\n-        content.getChildren().forEach(child -> assertLocal(child, 0, 0));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLocal(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertLocal(useAlternative, child, 0, 0));\n@@ -134,1 +143,1 @@\n-    protected void assertLocal(Node target, double deltaX, double deltaY) {\n+    protected void assertLocal(boolean useAlternative, Node target, double deltaX, double deltaY) {\n@@ -140,2 +149,2 @@\n-            assertEquals(\"local x of \" + text, width \/2 + deltaX, e.getX(), EPS);\n-            assertEquals(\"local y of \" + text, height \/ 2 + deltaY, e.getY(), EPS);\n+            assertEquals(width \/2 + deltaX, e.getX(), EPS, \"local x of \" + text);\n+            assertEquals(height \/ 2 + deltaY, e.getY(), EPS, \"local y of \" + text);\n@@ -148,3 +157,4 @@\n-    @Test\n-    public void testMouseCoordinatesDeltaNegative() {\n-        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(child, - 10, - 5));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinatesDeltaNegative(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(useAlternative, child, - 10, - 5));\n@@ -153,3 +163,4 @@\n-    @Test\n-    public void testMouseCoordinatesDelta() {\n-        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(child, 10, 5));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinatesDelta(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(useAlternative, child, 10, 5));\n@@ -158,3 +169,4 @@\n-    @Test\n-    public void testMouseCoordinates() {\n-        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(child, 0, 0));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMouseCoordinates(boolean useAlternative) {\n+        content.getChildren().forEach(child -> assertMouseCoordinatesDelta(useAlternative, child, 0, 0));\n@@ -167,1 +179,1 @@\n-    protected void assertMouseCoordinatesDelta(Node target, double deltaX, double deltaY) {\n+    protected void assertMouseCoordinatesDelta(boolean useAlternative, Node target, double deltaX, double deltaY) {\n@@ -182,2 +194,2 @@\n-        assertEquals(\"sceneX of \" + text, sceneP.getX(), mouse.getSceneX(), EPS);\n-        assertEquals(\"sceneY of \" + text, sceneP.getY(), mouse.getSceneY(), EPS);\n+        assertEquals(sceneP.getX(), mouse.getSceneX(), EPS, \"sceneX of \" + text);\n+        assertEquals(sceneP.getY(), mouse.getSceneY(), EPS, \"sceneY of \" + text);\n@@ -185,2 +197,2 @@\n-        assertEquals(\"screenX of \" + text, screenP.getX(), mouse.getScreenX(), EPS);\n-        assertEquals(\"screenY of \" + text, screenP.getY(), mouse.getScreenY(), EPS);\n+        assertEquals(screenP.getX(), mouse.getScreenX(), EPS, \"screenX of \" + text);\n+        assertEquals(screenP.getY(), mouse.getScreenY(), EPS, \"screenY of \" + text);\n@@ -191,3 +203,0 @@\n-    private boolean useAlternative;\n-\n-    @Parameterized.Parameters\n@@ -204,4 +213,0 @@\n-    public MouseEventFirerTest(boolean useAlternative) {\n-        this.useAlternative = useAlternative;\n-    }\n-\n@@ -213,2 +218,2 @@\n-        assertSame(\"sanity: firer must not change hierarchy\", scene, topLeft.getScene());\n-        assertSame(\"sanity: firer must not change hierarchy\", stage, topLeft.getScene().getWindow());\n+        assertSame(scene, topLeft.getScene(), \"sanity: firer must not change hierarchy\");\n+        assertSame(stage, topLeft.getScene().getWindow(), \"sanity: firer must not change hierarchy\");\n@@ -231,1 +236,1 @@\n-        assertEquals(\"sanity: layout bounds unchanged\", initial, topLeft.getLayoutBounds());\n+        assertEquals(initial, topLeft.getLayoutBounds(), \"sanity: layout bounds unchanged\");\n@@ -251,1 +256,1 @@\n-    @Before\n+    @BeforeEach\n@@ -284,1 +289,1 @@\n-    @After\n+    @AfterEach\n@@ -289,1 +294,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/MouseEventFirerTest.java","additions":75,"deletions":71,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n@@ -29,1 +34,8 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.Cell;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TreeTableRow;\n@@ -31,1 +43,0 @@\n-import com.sun.javafx.scene.control.LabeledText;\n@@ -37,1 +48,0 @@\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n@@ -39,3 +49,2 @@\n-import java.util.List;\n-\n-import static org.junit.Assert.*;\n+import com.sun.javafx.scene.control.LabeledText;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n@@ -116,1 +125,1 @@\n-            assertTrue(\"Expected null, found '\" + text + \"'\", text == null || text.isEmpty());\n+            assertTrue(text == null || text.isEmpty(), \"Expected null, found '\" + text + \"'\");\n@@ -119,1 +128,1 @@\n-            assertTrue(\"Expected null graphic, found \" + graphic, graphic == null);\n+            assertTrue(graphic == null, \"Expected null graphic, found \" + graphic);\n@@ -135,2 +144,1 @@\n-            assertTrue(\"Expected a non-null text or graphic property\",\n-                       (text != null && ! text.isEmpty()) || graphic != null);\n+            assertTrue((text != null && ! text.isEmpty()) || graphic != null, \"Expected a non-null text or graphic property\");\n@@ -232,1 +240,1 @@\n-            assertEquals(error, expectedLayoutX, labeledText.getLayoutX(), 0.0);\n+            assertEquals(expectedLayoutX, labeledText.getLayoutX(), 0.0, error);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/VirtualFlowTestUtils.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n@@ -44,0 +39,15 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -63,1 +73,1 @@\n-        assertEquals(\"sanity: initial value of scrollBar\", 0, scrollBar.getValue(), 0.1);\n+        assertEquals(0, scrollBar.getValue(), 0.1, \"sanity: initial value of scrollBar\");\n@@ -65,1 +75,1 @@\n-        assertTrue(\"mouse on track must have scrolled\", scrollBar.getValue() > 0);\n+        assertTrue(scrollBar.getValue() > 0, \"mouse on track must have scrolled\");\n@@ -75,1 +85,1 @@\n-        assertEquals(\"sanity: initial value of scrollBar\", 0, scrollBar.getValue(), 0.1);\n+        assertEquals(0, scrollBar.getValue(), 0.1, \"sanity: initial value of scrollBar\");\n@@ -77,1 +87,1 @@\n-        assertTrue(\"mouse on track must have scrolled\", scrollBar.getValue() > 0);\n+        assertTrue(scrollBar.getValue() > 0, \"mouse on track must have scrolled\");\n@@ -80,1 +90,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -82,2 +92,4 @@\n-        ListView<?> list = new ListView<>();\n-        getVerticalScrollBar(list);\n+        assertThrows(IllegalStateException.class, () -> {\n+            ListView<?> list = new ListView<>();\n+            getVerticalScrollBar(list);\n+        });\n@@ -86,1 +98,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -88,2 +100,4 @@\n-        ListView<?> list = new ListView<>();\n-        getHorizontalScrollBar(list);\n+        assertThrows(IllegalStateException.class, () -> {\n+            ListView<?> list = new ListView<>();\n+            getHorizontalScrollBar(list);\n+        });\n@@ -101,4 +115,2 @@\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getHorizontalScrollBar(control).isVisible());\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getVerticalScrollBar(control).isVisible());\n+        assertTrue(getHorizontalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertTrue(getVerticalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n@@ -175,1 +187,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -186,2 +199,4 @@\n-    @After public void cleanup() {\n-        if (stage != null) stage.hide();\n+    @AfterEach\n+    public void cleanup() {\n+        if (stage != null)\n+            stage.hide();\n@@ -190,1 +205,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/VirtualizedControlTestUtilsTest.java","additions":37,"deletions":23,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/inputmap\/InputMapTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n@@ -36,1 +36,2 @@\n-    @Test public void getSpecificity() {\n+    @Test\n+    public void getSpecificity() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/inputmap\/KeyBindingTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n+import java.util.stream.Collectors;\n@@ -42,5 +47,0 @@\n-\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -48,5 +48,2 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -59,0 +56,1 @@\n+\n@@ -60,1 +58,1 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n@@ -87,0 +85,2 @@\n+        ac.setAnimated(false);\n+    }\n@@ -88,0 +88,2 @@\n+    @Override\n+    protected Chart getChart() {\n@@ -105,1 +107,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -107,0 +110,1 @@\n+        createChart();\n@@ -119,0 +123,1 @@\n+        createChart();\n@@ -143,0 +148,1 @@\n+        createChart();\n@@ -149,1 +155,3 @@\n-    @Test public void testCreateSymbols() {\n+    @Test\n+    public void testCreateSymbols() {\n+         createChart();\n@@ -166,1 +174,3 @@\n-    @Test public void testPathInsideXAndInsideYBounds() {\n+    @Test\n+    public void testPathInsideXAndInsideYBounds() {\n+        createChart();\n@@ -175,1 +185,3 @@\n-    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -195,1 +207,3 @@\n-    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -215,1 +229,3 @@\n-    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -235,1 +251,3 @@\n-    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -255,1 +273,3 @@\n-    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -277,1 +297,3 @@\n-    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -299,1 +321,3 @@\n-    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -320,1 +344,3 @@\n-    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -341,1 +367,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -361,1 +389,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -381,1 +411,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -401,1 +433,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -421,1 +455,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -441,1 +477,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -461,1 +499,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -481,1 +521,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -502,1 +544,3 @@\n-    @Test public void testChartFillRemovedOnClearingSeries() {\n+    @Test\n+    public void testChartFillRemovedOnClearingSeries() {\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":75,"deletions":31,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,1 @@\n-\n-\n-import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -38,1 +36,1 @@\n-    private Axis axis;\/\/Empty string\n+    private Axis axis;\n@@ -71,1 +69,0 @@\n-\n@@ -74,1 +71,3 @@\n-    @Before public void setup() {\n+\n+    @BeforeEach\n+    public void setup() {\n@@ -94,2 +93,0 @@\n-\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AxisHelper.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,7 @@\n-import javafx.css.CssMetaData;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n@@ -37,0 +41,1 @@\n+import javafx.css.CssMetaData;\n@@ -42,5 +47,2 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +61,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -72,1 +75,2 @@\n-    @Test public void defaultSideNull() {\n+    @Test\n+    public void defaultSideNull() {\n@@ -76,1 +80,2 @@\n-    @Test public void defaultTickMarkVisibleIsTrue() {\n+    @Test\n+    public void defaultTickMarkVisibleIsTrue() {\n@@ -80,1 +85,2 @@\n-    @Test public void defaultTickLabelsVisibleIsTrue() {\n+    @Test\n+    public void defaultTickLabelsVisibleIsTrue() {\n@@ -84,3 +90,3 @@\n-\n-    @Test public void defaultTickLength() {\n-        assertEquals(axis.getTickLength(), 8.0 , 0.0);\n+    @Test\n+    public void defaultTickLength() {\n+        assertEquals(axis.getTickLength(), 8.0, 0.0);\n@@ -89,1 +95,2 @@\n-    @Test public void defaultAutoRangingIsTrue() {\n+    @Test\n+    public void defaultAutoRangingIsTrue() {\n@@ -93,1 +100,2 @@\n-    @Test public void defaultTickLabelFont() {\n+    @Test\n+    public void defaultTickLabelFont() {\n@@ -97,2 +105,3 @@\n-    @Test public void defaultTickLabelFill() {\n-        assertSame(axis.getTickLabelFill(), Color.BLACK );\n+    @Test\n+    public void defaultTickLabelFill() {\n+        assertSame(axis.getTickLabelFill(), Color.BLACK);\n@@ -101,2 +110,3 @@\n-    @Test public void defaultTickLabelGap() {\n-        assertEquals(axis.getTickLabelGap(), 3.0 , 0.0);\n+    @Test\n+    public void defaultTickLabelGap() {\n+        assertEquals(axis.getTickLabelGap(), 3.0, 0.0);\n@@ -105,1 +115,2 @@\n-    @Test public void defaultAnimatedIsTrue() {\n+    @Test\n+    public void defaultAnimatedIsTrue() {\n@@ -109,2 +120,3 @@\n-    @Test public void defaultTickLabelRotation() {\n-        assertEquals(axis.getTickLabelRotation(), 0.0 , 0.0);\n+    @Test\n+    public void defaultTickLabelRotation() {\n+        assertEquals(axis.getTickLabelRotation(), 0.0, 0.0);\n@@ -118,1 +130,2 @@\n-    @Test public void checkSidePropertyBind() {\n+    @Test\n+    public void checkSidePropertyBind() {\n@@ -121,1 +134,1 @@\n-        assertSame(\"side cannot be bound\", axis.sideProperty().getValue(), Side.TOP);\n+        assertSame(axis.sideProperty().getValue(), Side.TOP, \"side cannot be bound\");\n@@ -123,1 +136,1 @@\n-        assertSame(\"side cannot be bound\", axis.sideProperty().getValue(), Side.BOTTOM);\n+        assertSame(axis.sideProperty().getValue(), Side.BOTTOM, \"side cannot be bound\");\n@@ -126,1 +139,2 @@\n-    @Test public void checkTickMarkVisiblePropertyBind() {\n+    @Test\n+    public void checkTickMarkVisiblePropertyBind() {\n@@ -129,1 +143,1 @@\n-        assertTrue(\"tickMarkVisibleProperty cannot be bound\", axis.tickMarkVisibleProperty().getValue());\n+        assertTrue(axis.tickMarkVisibleProperty().getValue(), \"tickMarkVisibleProperty cannot be bound\");\n@@ -131,1 +145,1 @@\n-        assertFalse(\"tickMarkVisibleProperty cannot be bound\", axis.tickMarkVisibleProperty().getValue());\n+        assertFalse(axis.tickMarkVisibleProperty().getValue(), \"tickMarkVisibleProperty cannot be bound\");\n@@ -134,1 +148,2 @@\n-    @Test public void checkTickLabelsVisiblePropertyBind() {\n+    @Test\n+    public void checkTickLabelsVisiblePropertyBind() {\n@@ -137,1 +152,1 @@\n-        assertTrue(\"tickLabelsVisibleProperty cannot be bound\", axis.tickLabelsVisibleProperty().getValue());\n+        assertTrue(axis.tickLabelsVisibleProperty().getValue(), \"tickLabelsVisibleProperty cannot be bound\");\n@@ -139,1 +154,1 @@\n-        assertFalse(\"tickLabelsVisibleProperty cannot be bound\", axis.tickLabelsVisibleProperty().getValue());\n+        assertFalse(axis.tickLabelsVisibleProperty().getValue(), \"tickLabelsVisibleProperty cannot be bound\");\n@@ -142,1 +157,2 @@\n-    @Test public void checkTickLengthPropertyBind() {\n+    @Test\n+    public void checkTickLengthPropertyBind() {\n@@ -145,1 +161,1 @@\n-        assertEquals(\"tickLengthProperty cannot be bound\", axis.tickLengthProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.tickLengthProperty().getValue(),56.0,0.0, \"tickLengthProperty cannot be bound\");\n@@ -147,1 +163,1 @@\n-        assertEquals(\"tickLengthProperty cannot be bound\", axis.tickLengthProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.tickLengthProperty().getValue(),23.0,0.0, \"tickLengthProperty cannot be bound\");\n@@ -150,1 +166,2 @@\n-    @Test public void checkAutoRangingPropertyBind() {\n+    @Test\n+    public void checkAutoRangingPropertyBind() {\n@@ -153,1 +170,1 @@\n-        assertTrue(\"autoRangingProperty cannot be bound\", axis.autoRangingProperty().getValue());\n+        assertTrue(axis.autoRangingProperty().getValue(), \"autoRangingProperty cannot be bound\");\n@@ -155,1 +172,1 @@\n-        assertFalse(\"autoRangingProperty cannot be bound\", axis.autoRangingProperty().getValue());\n+        assertFalse(axis.autoRangingProperty().getValue(), \"autoRangingProperty cannot be bound\");\n@@ -158,1 +175,2 @@\n-    @Test public void checkTickLabelFontPropertyBind() {\n+    @Test\n+    public void checkTickLabelFontPropertyBind() {\n@@ -161,1 +179,1 @@\n-        assertNull(\"tickLabelFontProperty cannot be bound\", axis.tickLabelFontProperty().getValue());\n+        assertNull(axis.tickLabelFontProperty().getValue(), \"tickLabelFontProperty cannot be bound\");\n@@ -163,1 +181,1 @@\n-        assertSame(\"tickLabelFontProperty cannot be bound\", axis.tickLabelFontProperty().getValue(), Font.getDefault());\n+        assertSame(axis.tickLabelFontProperty().getValue(), Font.getDefault(), \"tickLabelFontProperty cannot be bound\");\n@@ -166,1 +184,2 @@\n-    @Test public void checkTickLabelFillPropertyBind() {\n+    @Test\n+    public void checkTickLabelFillPropertyBind() {\n@@ -169,1 +188,1 @@\n-        assertSame(\"tickLabelFillProperty cannot be bound\", axis.tickLabelFillProperty().getValue(), Color.WHEAT);\n+        assertSame(axis.tickLabelFillProperty().getValue(), Color.WHEAT, \"tickLabelFillProperty cannot be bound\");\n@@ -171,1 +190,1 @@\n-        assertSame(\"tickLabelFillProperty cannot be bound\", axis.tickLabelFillProperty().getValue(), Color.BLUE);\n+        assertSame(axis.tickLabelFillProperty().getValue(), Color.BLUE, \"tickLabelFillProperty cannot be bound\");\n@@ -174,1 +193,2 @@\n-    @Test public void checkTickLabelGapPropertyBind() {\n+    @Test\n+    public void checkTickLabelGapPropertyBind() {\n@@ -177,1 +197,1 @@\n-        assertEquals(\"tickLabelGapProperty cannot be bound\", axis.tickLabelGapProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.tickLabelGapProperty().getValue(),56.0,0.0, \"tickLabelGapProperty cannot be bound\");\n@@ -179,1 +199,1 @@\n-        assertEquals(\"tickLabelGapProperty cannot be bound\", axis.tickLabelGapProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.tickLabelGapProperty().getValue(),23.0,0.0, \"tickLabelGapProperty cannot be bound\");\n@@ -182,1 +202,2 @@\n-    @Test public void checkAnimatedPropertyBind() {\n+    @Test\n+    public void checkAnimatedPropertyBind() {\n@@ -185,1 +206,1 @@\n-        assertTrue(\"animatedProperty cannot be bound\", axis.animatedProperty().getValue());\n+        assertTrue(axis.animatedProperty().getValue(), \"animatedProperty cannot be bound\");\n@@ -187,1 +208,1 @@\n-        assertFalse(\"animatedProperty cannot be bound\", axis.animatedProperty().getValue());\n+        assertFalse(axis.animatedProperty().getValue(), \"animatedProperty cannot be bound\");\n@@ -190,1 +211,2 @@\n-    @Test public void checkTickLabelRotationPropertyBind() {\n+    @Test\n+    public void checkTickLabelRotationPropertyBind() {\n@@ -193,1 +215,1 @@\n-        assertEquals(\"tickLabelRotationProperty cannot be bound\", axis.tickLabelRotationProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.tickLabelRotationProperty().getValue(),56.0,0.0, \"tickLabelRotationProperty cannot be bound\");\n@@ -195,1 +217,1 @@\n-        assertEquals(\"tickLabelRotationProperty cannot be bound\", axis.tickLabelRotationProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.tickLabelRotationProperty().getValue(),23.0,0.0, \"tickLabelRotationProperty cannot be bound\");\n@@ -198,3 +220,2 @@\n-\n-\n-    @Test public void sidePropertyHasBeanReference() {\n+    @Test\n+    public void sidePropertyHasBeanReference() {\n@@ -204,1 +225,2 @@\n-    @Test public void sidePropertyHasName() {\n+    @Test\n+    public void sidePropertyHasName() {\n@@ -208,1 +230,2 @@\n-    @Test public void tickMarkVisiblePropertyHasBeanReference() {\n+    @Test\n+    public void tickMarkVisiblePropertyHasBeanReference() {\n@@ -212,1 +235,2 @@\n-    @Test public void tickMarkVisiblePropertyHasName() {\n+    @Test\n+    public void tickMarkVisiblePropertyHasName() {\n@@ -216,1 +240,2 @@\n-    @Test public void tickLabelsVisiblePropertyHasBeanReference() {\n+    @Test\n+    public void tickLabelsVisiblePropertyHasBeanReference() {\n@@ -220,1 +245,2 @@\n-    @Test public void tickLabelsVisiblePropertyHasName() {\n+    @Test\n+    public void tickLabelsVisiblePropertyHasName() {\n@@ -224,1 +250,2 @@\n-    @Test public void tickLengthPropertyHasBeanReference() {\n+    @Test\n+    public void tickLengthPropertyHasBeanReference() {\n@@ -228,1 +255,2 @@\n-    @Test public void tickLengthPropertyHasName() {\n+    @Test\n+    public void tickLengthPropertyHasName() {\n@@ -232,1 +260,2 @@\n-    @Test public void autoRangingPropertyHasBeanReference() {\n+    @Test\n+    public void autoRangingPropertyHasBeanReference() {\n@@ -236,1 +265,2 @@\n-    @Test public void autoRangingPropertyHasName() {\n+    @Test\n+    public void autoRangingPropertyHasName() {\n@@ -240,1 +270,2 @@\n-    @Test public void tickLabelFontPropertyHasBeanReference() {\n+    @Test\n+    public void tickLabelFontPropertyHasBeanReference() {\n@@ -244,1 +275,2 @@\n-    @Test public void tickLabelFontPropertyHasName() {\n+    @Test\n+    public void tickLabelFontPropertyHasName() {\n@@ -248,1 +280,2 @@\n-    @Test public void tickLabelFillPropertyHasBeanReference() {\n+    @Test\n+    public void tickLabelFillPropertyHasBeanReference() {\n@@ -252,1 +285,2 @@\n-    @Test public void tickLabelFillPropertyHasName() {\n+    @Test\n+    public void tickLabelFillPropertyHasName() {\n@@ -256,1 +290,2 @@\n-    @Test public void tickLabelGapPropertyHasBeanReference() {\n+    @Test\n+    public void tickLabelGapPropertyHasBeanReference() {\n@@ -260,1 +295,2 @@\n-    @Test public void tickLabelGapPropertyHasName() {\n+    @Test\n+    public void tickLabelGapPropertyHasName() {\n@@ -264,1 +300,2 @@\n-    @Test public void animatedPropertyHasBeanReference() {\n+    @Test\n+    public void animatedPropertyHasBeanReference() {\n@@ -268,1 +305,2 @@\n-    @Test public void animatedPropertyHasName() {\n+    @Test\n+    public void animatedPropertyHasName() {\n@@ -272,1 +310,2 @@\n-    @Test public void tickLabelRotationPropertyHasBeanReference() {\n+    @Test\n+    public void tickLabelRotationPropertyHasBeanReference() {\n@@ -276,1 +315,2 @@\n-    @Test public void tickLabelRotationPropertyHasName() {\n+    @Test\n+    public void tickLabelRotationPropertyHasName() {\n@@ -285,1 +325,2 @@\n-    @Test public void settingSideTopSetsTopAndClearsOther3SidesPseudoClass() {\n+    @Test\n+    public void settingSideTopSetsTopAndClearsOther3SidesPseudoClass() {\n@@ -293,1 +334,2 @@\n-    @Test public void settingSideLeftSetsLeftAndClearsOther3SidesPseudoClass() {\n+    @Test\n+    public void settingSideLeftSetsLeftAndClearsOther3SidesPseudoClass() {\n@@ -301,1 +343,2 @@\n-    @Test public void settingSideRightSetsRightAndClearsOther3SidesPseudoClass() {\n+    @Test\n+    public void settingSideRightSetsRightAndClearsOther3SidesPseudoClass() {\n@@ -309,1 +352,2 @@\n-    @Test public void settingSideBottomSetsBottomAndClearsOther3SidesPseudoClass() {\n+    @Test\n+    public void settingSideBottomSetsBottomAndClearsOther3SidesPseudoClass() {\n@@ -322,1 +366,2 @@\n-    @Test public void whenSideIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenSideIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -330,1 +375,2 @@\n-    @Test public void whenSideIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenSideIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -335,1 +381,2 @@\n-    @Test public void canSpecifySideViaCSS() {\n+    @Test\n+    public void canSpecifySideViaCSS() {\n@@ -340,1 +387,2 @@\n-    @Test public void whenTickMarkVisibleIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickMarkVisibleIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -348,1 +396,2 @@\n-    @Test public void whenTickMarkVisibleIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickMarkVisibleIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -353,1 +402,2 @@\n-    @Test public void canSpecifyTickMarkVisibleViaCSS() {\n+    @Test\n+    public void canSpecifyTickMarkVisibleViaCSS() {\n@@ -358,1 +408,2 @@\n-    @Test public void whenTickLabelsVisibleIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickLabelsVisibleIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -366,1 +417,2 @@\n-    @Test public void whenTickLabelsVisibleIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickLabelsVisibleIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -371,1 +423,2 @@\n-    @Test public void canSpecifyTickLabelsVisibleViaCSS() {\n+    @Test\n+    public void canSpecifyTickLabelsVisibleViaCSS() {\n@@ -376,1 +429,2 @@\n-    @Test public void whenTickLengthIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickLengthIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -384,1 +438,2 @@\n-    @Test public void whenTickLengthIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickLengthIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -389,1 +444,2 @@\n-    @Test public void canSpecifyTickLengthViaCSS() {\n+    @Test\n+    public void canSpecifyTickLengthViaCSS() {\n@@ -394,1 +450,2 @@\n-    @Test public void whenTickLabelFontIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickLabelFontIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -402,1 +459,2 @@\n-    @Test public void whenTickLabelFontIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickLabelFontIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -407,1 +465,2 @@\n-    @Test public void canSpecifyTickLabelFontViaCSS() {\n+    @Test\n+    public void canSpecifyTickLabelFontViaCSS() {\n@@ -412,1 +471,2 @@\n-    @Test public void whenTickLabelFillIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickLabelFillIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -420,1 +480,2 @@\n-    @Test public void whenTickLabelFillIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickLabelFillIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -425,1 +486,2 @@\n-    @Test public void canSpecifyTickLabelFillViaCSS() {\n+    @Test\n+    public void canSpecifyTickLabelFillViaCSS() {\n@@ -430,1 +492,2 @@\n-    @Test public void whenTickLabelGapIsBound_CssMetaData_isSettable_ReturnsFalse() {\n+    @Test\n+    public void whenTickLabelGapIsBound_CssMetaData_isSettable_ReturnsFalse() {\n@@ -438,1 +501,2 @@\n-    @Test public void whenTickLabelGapIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test\n+    public void whenTickLabelGapIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -443,1 +507,2 @@\n-    @Test public void canSpecifyTickLabelGapViaCSS() {\n+    @Test\n+    public void canSpecifyTickLabelGapViaCSS() {\n@@ -453,1 +518,2 @@\n-    @Test public void setSideAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setSideAndSeeValueIsReflectedInModel() {\n@@ -458,1 +524,2 @@\n-    @Test public void setHbarPolicyAndSeeValue() {\n+    @Test\n+    public void setHbarPolicyAndSeeValue() {\n@@ -463,1 +530,2 @@\n-    @Test public void setTickMarkVisibleAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickMarkVisibleAndSeeValueIsReflectedInModel() {\n@@ -473,1 +541,2 @@\n-    @Test public void setTickLabelsVisibleAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLabelsVisibleAndSeeValueIsReflectedInModel() {\n@@ -478,1 +547,2 @@\n-    @Test public void setTickLabelsVisibleAndSeeValue() {\n+    @Test\n+    public void setTickLabelsVisibleAndSeeValue() {\n@@ -483,1 +553,2 @@\n-    @Test public void setTickLengthAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLengthAndSeeValueIsReflectedInModel() {\n@@ -488,1 +559,2 @@\n-    @Test public void setTickLengthAndSeeValue() {\n+    @Test\n+    public void setTickLengthAndSeeValue() {\n@@ -493,1 +565,2 @@\n-    @Test public void setAutoRangingAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setAutoRangingAndSeeValueIsReflectedInModel() {\n@@ -498,1 +571,2 @@\n-    @Test public void setAutoRangingAndSeeValue() {\n+    @Test\n+    public void setAutoRangingAndSeeValue() {\n@@ -503,1 +577,2 @@\n-    @Test public void setTickLabelFontAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLabelFontAndSeeValueIsReflectedInModel() {\n@@ -508,1 +583,2 @@\n-    @Test public void setTickLabelFontAndSeeValue() {\n+    @Test\n+    public void setTickLabelFontAndSeeValue() {\n@@ -513,1 +589,2 @@\n-    @Test public void setTickLabelFillAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLabelFillAndSeeValueIsReflectedInModel() {\n@@ -518,1 +595,2 @@\n-    @Test public void setTickLabelFillAndSeeValue() {\n+    @Test\n+    public void setTickLabelFillAndSeeValue() {\n@@ -523,1 +601,2 @@\n-    @Test public void setTickLabelGapAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLabelGapAndSeeValueIsReflectedInModel() {\n@@ -528,1 +607,2 @@\n-    @Test public void setTickLabelGapAndSeeValue() {\n+    @Test\n+    public void setTickLabelGapAndSeeValue() {\n@@ -533,1 +613,2 @@\n-    @Test public void setAnimatedAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setAnimatedAndSeeValueIsReflectedInModel() {\n@@ -538,1 +619,2 @@\n-    @Test public void setAnimatedAndSeeValue() {\n+    @Test\n+    public void setAnimatedAndSeeValue() {\n@@ -543,1 +625,2 @@\n-    @Test public void setTickLabelRotationAndSeeValueIsReflectedInModel() {\n+    @Test\n+    public void setTickLabelRotationAndSeeValueIsReflectedInModel() {\n@@ -548,1 +631,2 @@\n-    @Test public void setTickLabelRotationAndSeeValue() {\n+    @Test\n+    public void setTickLabelRotationAndSeeValue() {\n@@ -552,2 +636,0 @@\n-\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AxisTest.java","additions":205,"deletions":123,"binary":false,"changes":328,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -30,1 +33,0 @@\n-\n@@ -32,7 +34,1 @@\n-import javafx.scene.shape.MoveTo;\n-import javafx.scene.shape.Path;\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import javafx.collections.*;\n-\n+import javafx.collections.ObservableList;\n@@ -48,1 +44,4 @@\n-import org.junit.Ignore;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +57,1 @@\n-    final BarChart<String,Number> bc = new BarChart<>(xAxis,yAxis);\n+    BarChart<String,Number> bc;\n@@ -61,1 +60,2 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n+        bc = new BarChart<>(xAxis,yAxis);\n@@ -79,0 +79,5 @@\n+        bc.setAnimated(false);\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -82,1 +87,1 @@\n-    @Ignore(\"JDK-8162547\")\n+    @Disabled(\"JDK-8162547\")\n@@ -85,0 +90,1 @@\n+        createChart();\n@@ -102,0 +108,1 @@\n+        createChart();\n@@ -123,0 +130,1 @@\n+        createChart();\n@@ -133,0 +141,1 @@\n+        createChart();\n@@ -142,0 +151,1 @@\n+        createChart();\n@@ -178,0 +188,1 @@\n+        createChart();\n@@ -189,0 +200,1 @@\n+        createChart();\n@@ -202,0 +214,1 @@\n+        createChart();\n@@ -215,0 +228,1 @@\n+        createChart();\n@@ -238,0 +252,1 @@\n+        createChart();\n@@ -280,0 +295,1 @@\n+        createChart();\n@@ -290,0 +306,1 @@\n+        createChart();\n@@ -301,0 +318,1 @@\n+        createChart();\n@@ -309,1 +327,1 @@\n-        Assert.assertFalse(bar.getStyleClass().contains(\"negative\"));\n+        assertFalse(bar.getStyleClass().contains(\"negative\"));\n@@ -314,1 +332,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> Assert.fail(\"Exception: \" + e));\n+        createChart();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"Exception: \" + e));\n@@ -330,1 +349,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> Assert.fail(\"Exception: \" + e));\n+        createChart();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"Exception: \" + e));\n@@ -345,1 +365,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> Assert.fail(\"Exception: \" + e));\n+        createChart();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"Exception: \" + e));\n@@ -363,0 +384,1 @@\n+        createChart();\n@@ -403,0 +425,1 @@\n+        createChart();\n@@ -449,1 +472,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/BarChartTest.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,0 +40,1 @@\n+import javafx.css.CssMetaData;\n@@ -37,6 +42,0 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -44,0 +43,2 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +51,1 @@\n-    private CategoryAxis axis;\/\/Empty string\n+    private CategoryAxis axis;\n@@ -57,1 +58,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -98,1 +100,1 @@\n-        assertEquals(\"startMarginProperty cannot be bound\", axis.startMarginProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.startMarginProperty().getValue(),56.0,0.0, \"startMarginProperty cannot be bound\");\n@@ -100,1 +102,1 @@\n-        assertEquals(\"startMarginProperty cannot be bound\", axis.startMarginProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.startMarginProperty().getValue(),23.0,0.0, \"startMarginProperty cannot be bound\");\n@@ -106,1 +108,1 @@\n-        assertEquals(\"endMarginProperty cannot be bound\", axis.endMarginProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.endMarginProperty().getValue(),56.0,0.0, \"endMarginProperty cannot be bound\");\n@@ -108,1 +110,1 @@\n-        assertEquals(\"endMarginProperty cannot be bound\", axis.endMarginProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.endMarginProperty().getValue(),23.0,0.0, \"endMarginProperty cannot be bound\");\n@@ -111,1 +113,0 @@\n-\n@@ -115,1 +116,1 @@\n-        assertTrue(\"gapStartAndEndProperty cannot be bound\", axis.gapStartAndEndProperty().getValue());\n+        assertTrue(axis.gapStartAndEndProperty().getValue(), \"gapStartAndEndProperty cannot be bound\");\n@@ -117,1 +118,1 @@\n-        assertFalse(\"gapStartAndEndProperty cannot be bound\", axis.gapStartAndEndProperty().getValue());\n+        assertFalse(axis.gapStartAndEndProperty().getValue(), \"gapStartAndEndProperty cannot be bound\");\n@@ -120,1 +121,0 @@\n-\n@@ -271,1 +271,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/CategoryAxisTest.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,1 @@\n-import org.junit.Before;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,1 +33,0 @@\n-import javafx.stage.Stage;\n@@ -38,2 +34,6 @@\n-import javafx.scene.shape.*;\n-import static org.junit.Assert.assertTrue;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.stage.Stage;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -42,0 +42,7 @@\n+\n+    \/** creates the chart instance, not animated, (as a part of each test setup) *\/\n+    protected abstract void createChart();\n+\n+    \/** returns the chart instance created by initChart() *\/\n+    protected abstract Chart getChart();\n+\n@@ -45,7 +52,0 @@\n-    private Chart chart;\n-\n-    @Before\n-    public void setUp() {\n-        chart = createChart();\n-        chart.setAnimated(false);\n-    }\n@@ -54,1 +54,1 @@\n-        scene = new Scene(chart,800,600);\n+        scene = new Scene(getChart(), 800, 600);\n@@ -82,2 +82,0 @@\n-    protected abstract Chart createChart();\n-\n@@ -113,3 +111,1 @@\n-        assertTrue(\"\\\"\" + item.getStyleClass() + \"\\\" doesn't contain all of the \" +\n-                Arrays.toString(styleClass),\n-                item.getStyleClass().containsAll(Arrays.asList(styleClass)));\n+        assertTrue(item.getStyleClass().containsAll(Arrays.asList(styleClass)), \"\\\"\" + item.getStyleClass() + \"\\\" doesn't contain all of the \" + Arrays.toString(styleClass));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/ChartTestBase.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n+import java.util.stream.Collectors;\n@@ -39,9 +44,2 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -54,1 +52,2 @@\n-    @Override protected Chart createChart() {\n+    @Override\n+    protected void createChart() {\n@@ -58,0 +57,1 @@\n+        lineChart.setAnimated(false);\n@@ -67,0 +67,4 @@\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -82,0 +86,1 @@\n+        createChart();\n@@ -99,0 +104,1 @@\n+        createChart();\n@@ -108,1 +114,2 @@\n-     @Test @Ignore\n+     @Test\n+     @Disabled\n@@ -113,10 +120,11 @@\n-    public void testDataItemAddWithAnimation() {\n-        startApp();\n-        lineChart.setAnimated(true);\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        series1.getData().add(new XYChart.Data(60d, 30d));\n-        pulse();\n-        \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\n-        assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\n-    }\n+     public void testDataItemAddWithAnimation() {\n+         createChart();\n+         startApp();\n+         lineChart.setAnimated(true);\n+         lineChart.getData().addAll(series1);\n+         pulse();\n+         series1.getData().add(new XYChart.Data(60d, 30d));\n+         pulse();\n+         \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\n+         assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\n+     }\n@@ -126,0 +134,1 @@\n+        createChart();\n@@ -137,1 +146,1 @@\n-     @Test\n+    @Test\n@@ -139,0 +148,1 @@\n+        createChart();\n@@ -166,0 +176,1 @@\n+        createChart();\n@@ -172,1 +183,3 @@\n-    @Test public void testPathInsideXAndInsideYBounds() {\n+    @Test\n+    public void testPathInsideXAndInsideYBounds() {\n+        createChart();\n@@ -181,1 +194,3 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -201,1 +216,3 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -221,1 +238,3 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideYBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -242,1 +261,3 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideYBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -263,1 +284,3 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherY() {\n+    @Test\n+    public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherY() {\n+        createChart();\n@@ -283,1 +306,3 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerY() {\n+    @Test\n+    public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerY() {\n+        createChart();\n@@ -303,1 +328,3 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherX() {\n+    @Test\n+    public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherX() {\n+        createChart();\n@@ -323,1 +350,3 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerX() {\n+    @Test\n+    public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerX() {\n+        createChart();\n@@ -343,1 +372,3 @@\n-    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        createChart();\n@@ -365,1 +396,3 @@\n-    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        createChart();\n@@ -387,1 +420,3 @@\n-    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        createChart();\n@@ -409,1 +444,3 @@\n-    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        createChart();\n@@ -431,1 +468,3 @@\n-    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        createChart();\n@@ -452,1 +491,3 @@\n-    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        createChart();\n@@ -473,1 +514,3 @@\n-    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        createChart();\n@@ -493,1 +536,3 @@\n-    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        createChart();\n@@ -514,1 +559,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        createChart();\n@@ -536,1 +583,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        createChart();\n@@ -557,1 +606,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        createChart();\n@@ -578,1 +629,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        createChart();\n@@ -599,1 +652,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        createChart();\n@@ -620,1 +675,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        createChart();\n@@ -641,1 +698,3 @@\n-    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        createChart();\n@@ -662,1 +721,3 @@\n-    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test\n+    public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        createChart();\n@@ -686,0 +747,1 @@\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/LineChartTest.java","additions":110,"deletions":48,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,9 @@\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -33,0 +41,1 @@\n+import javafx.css.CssMetaData;\n@@ -34,9 +43,0 @@\n-import javafx.util.StringConverter;\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.util.Arrays;\n-import java.util.List;\n@@ -46,0 +46,3 @@\n+import javafx.util.StringConverter;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,3 +55,3 @@\n-    private NumberAxis axis;\/\/Empty string\n-    private NumberAxis threeValueAxis;\/\/Empty string\n-    private NumberAxis fourValueAxis;\/\/Empty string\n+    private NumberAxis axis;\n+    private NumberAxis threeValueAxis;\n+    private NumberAxis fourValueAxis;\n@@ -60,1 +63,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -111,2 +115,2 @@\n-\n-    @Test public void checkForceZeroInRangePropertyBind() {\n+    @Test\n+    public void checkForceZeroInRangePropertyBind() {\n@@ -115,1 +119,1 @@\n-        assertTrue(\"forceZeroInRange cannot be bound\", axis.forceZeroInRangeProperty().getValue());\n+        assertTrue(axis.forceZeroInRangeProperty().getValue(), \"forceZeroInRange cannot be bound\");\n@@ -117,1 +121,1 @@\n-        assertFalse(\"forceZeroInRange cannot be bound\", axis.forceZeroInRangeProperty().getValue());\n+        assertFalse(axis.forceZeroInRangeProperty().getValue(), \"forceZeroInRange cannot be bound\");\n@@ -120,2 +124,2 @@\n-\n-    @Test public void checkTickUnitPropertyBind() {\n+    @Test\n+    public void checkTickUnitPropertyBind() {\n@@ -124,1 +128,1 @@\n-        assertEquals(\"tickUnitProperty cannot be bound\", axis.tickUnitProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.tickUnitProperty().getValue(), 56.0, 0.0, \"tickUnitProperty cannot be bound\");\n@@ -126,1 +130,1 @@\n-        assertEquals(\"tickUnitProperty cannot be bound\", axis.tickUnitProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.tickUnitProperty().getValue(), 23.0, 0.0, \"tickUnitProperty cannot be bound\");\n@@ -129,1 +133,0 @@\n-\n@@ -256,1 +259,1 @@\n-    @Test(timeout = 1000)\n+    @Test\n@@ -258,5 +261,7 @@\n-        axis.setForceZeroInRange(false);\n-        axis.setSide(Side.LEFT);\n-        double minValue = 1.0;\n-        double maxValue = minValue + Math.ulp(minValue);\n-        NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+        assertTimeout(Duration.ofMillis(1000), () -> {\n+            axis.setForceZeroInRange(false);\n+            axis.setSide(Side.LEFT);\n+            double minValue = 1.0;\n+            double maxValue = minValue + Math.ulp(minValue);\n+            NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+        });\n@@ -265,1 +270,1 @@\n-    @Test(timeout = 1000)\n+    @Test\n@@ -267,7 +272,9 @@\n-        axis.setForceZeroInRange(false);\n-        axis.setSide(Side.LEFT);\n-        double minValue = 1.0;\n-        double maxValue = minValue + 11*Math.ulp(minValue);\n-        Object range = NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n-        NumberAxisShim.setRange(axis, range, false);\n-        NumberAxisShim.calculateMinorTickMarks(axis);\n+        assertTimeout(Duration.ofMillis(1000), () -> {\n+            axis.setForceZeroInRange(false);\n+            axis.setSide(Side.LEFT);\n+            double minValue = 1.0;\n+            double maxValue = minValue + 11 * Math.ulp(minValue);\n+            Object range = NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+            NumberAxisShim.setRange(axis, range, false);\n+            NumberAxisShim.calculateMinorTickMarks(axis);\n+        });\n@@ -276,1 +283,1 @@\n-    @Test(timeout = 1000)\n+    @Test\n@@ -278,5 +285,7 @@\n-        axis.setForceZeroInRange(false);\n-        axis.setSide(Side.LEFT);\n-        double minValue = Math.pow(2, 52); \/\/ ulp == 1.0\n-        double maxValue = minValue;\n-        NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+        assertTimeout(Duration.ofMillis(1000), () -> {\n+            axis.setForceZeroInRange(false);\n+            axis.setSide(Side.LEFT);\n+            double minValue = Math.pow(2, 52); \/\/ ulp == 1.0\n+            double maxValue = minValue;\n+            NumberAxisShim.autoRange(axis, minValue, maxValue, 500, 50);\n+        });\n@@ -285,1 +294,1 @@\n-    @Test(timeout = 1000)\n+    @Test\n@@ -287,12 +296,14 @@\n-        axis.setForceZeroInRange(false);\n-        axis.setSide(Side.LEFT);\n-        axis.setAutoRanging(false);\n-        double minValue = 1.0;\n-        double maxValue = minValue + Math.ulp(minValue);\n-        axis.setLowerBound(minValue);\n-        axis.setUpperBound(maxValue);\n-        \/\/ minValue + tickUnit == minValue\n-        axis.setTickUnit(0.5*Math.ulp(minValue));\n-        Object range = NumberAxisShim.getRange(axis);\n-        NumberAxisShim.calculateTickValues(axis, 500, range);\n-        NumberAxisShim.calculateMinorTickMarks(axis);\n+        assertTimeout(Duration.ofMillis(1000), () -> {\n+            axis.setForceZeroInRange(false);\n+            axis.setSide(Side.LEFT);\n+            axis.setAutoRanging(false);\n+            double minValue = 1.0;\n+            double maxValue = minValue + Math.ulp(minValue);\n+            axis.setLowerBound(minValue);\n+            axis.setUpperBound(maxValue);\n+            \/\/ minValue + tickUnit == minValue\n+            axis.setTickUnit(0.5 * Math.ulp(minValue));\n+            Object range = NumberAxisShim.getRange(axis);\n+            NumberAxisShim.calculateTickValues(axis, 500, range);\n+            NumberAxisShim.calculateMinorTickMarks(axis);\n+        });\n@@ -301,1 +312,1 @@\n-    @Test(timeout = 1000)\n+    @Test\n@@ -303,11 +314,13 @@\n-        axis.setForceZeroInRange(false);\n-        axis.setSide(Side.LEFT);\n-        axis.setAutoRanging(false);\n-        double minValue = 1.0;\n-        double maxValue = minValue + Math.ulp(minValue);\n-        axis.setLowerBound(minValue);\n-        axis.setUpperBound(maxValue);\n-        axis.setTickUnit(Math.ulp(minValue));\n-        Object range = NumberAxisShim.getRange(axis);\n-        NumberAxisShim.calculateTickValues(axis, 500, range);\n-        NumberAxisShim.calculateMinorTickMarks(axis);\n+        assertTimeout(Duration.ofMillis(1000), () -> {\n+            axis.setForceZeroInRange(false);\n+            axis.setSide(Side.LEFT);\n+            axis.setAutoRanging(false);\n+            double minValue = 1.0;\n+            double maxValue = minValue + Math.ulp(minValue);\n+            axis.setLowerBound(minValue);\n+            axis.setUpperBound(maxValue);\n+            axis.setTickUnit(Math.ulp(minValue));\n+            Object range = NumberAxisShim.getRange(axis);\n+            NumberAxisShim.calculateTickValues(axis, 500, range);\n+            NumberAxisShim.calculateMinorTickMarks(axis);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/NumberAxisTest.java","additions":82,"deletions":69,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import com.sun.javafx.charts.Legend;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +33,0 @@\n-\n@@ -41,2 +40,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.charts.Legend;\n@@ -54,1 +53,1 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n@@ -57,0 +56,5 @@\n+        pc.setAnimated(false);\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -70,0 +74,1 @@\n+        createChart();\n@@ -77,0 +82,1 @@\n+        createChart();\n@@ -88,0 +94,1 @@\n+        createChart();\n@@ -96,0 +103,1 @@\n+        createChart();\n@@ -107,2 +115,1 @@\n-        assertTrue(item.getStyleClass().toString(),\n-                item.getStyleClass().contains(styleClass));\n+        assertTrue(item.getStyleClass().contains(styleClass), item.getStyleClass().toString());\n@@ -110,2 +117,1 @@\n-        assertTrue(legendItem.getStyleClass().toString(),\n-                legendItem.getStyleClass().contains(styleClass));\n+        assertTrue(legendItem.getStyleClass().contains(styleClass), legendItem.getStyleClass().toString());\n@@ -116,0 +122,1 @@\n+        createChart();\n@@ -135,0 +142,1 @@\n+        createChart();\n@@ -161,0 +169,1 @@\n+        createChart();\n@@ -171,0 +180,1 @@\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/PieChartTest.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,4 +44,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -52,0 +52,1 @@\n+\n@@ -53,1 +54,1 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n@@ -61,5 +62,5 @@\n-        series1.getData().add(new XYChart.Data(countries[0], 10d));\n-        series1.getData().add(new XYChart.Data(countries[1], 20d));\n-        series1.getData().add(new XYChart.Data(countries[2], 15d));\n-        series1.getData().add(new XYChart.Data(countries[3], 15d));\n-        series1.getData().add(new XYChart.Data(countries[4], 10d));\n+            series1.getData().add(new XYChart.Data(countries[0], 10d));\n+            series1.getData().add(new XYChart.Data(countries[1], 20d));\n+            series1.getData().add(new XYChart.Data(countries[2], 15d));\n+            series1.getData().add(new XYChart.Data(countries[3], 15d));\n+            series1.getData().add(new XYChart.Data(countries[4], 10d));\n@@ -68,1 +69,0 @@\n-            ac = new StackedAreaChart<Number,Number>(xAxis,yAxis);\n@@ -70,5 +70,5 @@\n-        series1.getData().add(new XYChart.Data(10d, 10d));\n-        series1.getData().add(new XYChart.Data(25d, 20d));\n-        series1.getData().add(new XYChart.Data(30d, 15d));\n-        series1.getData().add(new XYChart.Data(50d, 15d));\n-        series1.getData().add(new XYChart.Data(80d, 10d));\n+            series1.getData().add(new XYChart.Data(10d, 10d));\n+            series1.getData().add(new XYChart.Data(25d, 20d));\n+            series1.getData().add(new XYChart.Data(30d, 15d));\n+            series1.getData().add(new XYChart.Data(50d, 15d));\n+            series1.getData().add(new XYChart.Data(80d, 10d));\n@@ -79,0 +79,2 @@\n+\n+        ac = new StackedAreaChart<Number, Number>(xAxis, yAxis);\n@@ -80,0 +82,2 @@\n+        ac.setAnimated(false);\n+    }\n@@ -81,0 +85,2 @@\n+    @Override\n+    protected Chart getChart() {\n@@ -98,1 +104,2 @@\n-    @Test @Ignore(\"pending RT-28373\")\n+    @Test\n+    @Disabled(\"pending RT-28373\")\n@@ -100,0 +107,1 @@\n+        createChart();\n@@ -108,1 +116,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -110,0 +119,1 @@\n+        createChart();\n@@ -120,1 +130,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -122,0 +133,1 @@\n+        createChart();\n@@ -132,1 +144,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -134,0 +147,1 @@\n+        createChart();\n@@ -144,1 +158,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -146,0 +161,1 @@\n+        createChart();\n@@ -161,0 +177,1 @@\n+        createChart();\n@@ -165,1 +182,3 @@\n-    @Test public void testCreateSymbols() {\n+    @Test\n+    public void testCreateSymbols() {\n+        createChart();\n@@ -183,0 +202,1 @@\n+        createChart();\n@@ -213,0 +233,1 @@\n+        createChart();\n@@ -243,0 +264,1 @@\n+        createChart();\n@@ -273,0 +295,1 @@\n+        createChart();\n@@ -303,0 +326,1 @@\n+        createChart();\n@@ -333,0 +357,1 @@\n+        createChart();\n@@ -363,0 +388,1 @@\n+        createChart();\n@@ -386,0 +412,1 @@\n+        createChart();\n@@ -421,0 +448,1 @@\n+        createChart();\n@@ -456,0 +484,1 @@\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/StackedAreaChartTest.java","additions":51,"deletions":22,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n-\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import javafx.collections.*;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,1 +30,2 @@\n-\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n@@ -43,1 +40,2 @@\n-import org.junit.Ignore;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +53,1 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n@@ -62,0 +60,1 @@\n+        sbc.setAnimated(false);\n@@ -73,0 +72,4 @@\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -78,0 +81,1 @@\n+        createChart();\n@@ -100,0 +104,1 @@\n+        createChart();\n@@ -126,0 +131,1 @@\n+        createChart();\n@@ -139,0 +145,1 @@\n+        createChart();\n@@ -149,0 +156,1 @@\n+        createChart();\n@@ -159,0 +167,1 @@\n+        createChart();\n@@ -169,1 +178,2 @@\n-    @Test @Ignore\n+    @Test\n+    @Disabled\n@@ -171,0 +181,1 @@\n+        createChart();\n@@ -220,0 +231,1 @@\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/StackedBarChartTest.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,1 +34,0 @@\n-import javafx.css.CssMetaData;\n@@ -37,0 +41,1 @@\n+import javafx.css.CssMetaData;\n@@ -41,5 +46,2 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,2 +54,2 @@\n-    private ValueAxis axis;\/\/Empty string\n-    private ValueAxis twoValueAxis;\/\/Empty string\n+    private ValueAxis axis;\n+    private ValueAxis twoValueAxis;\n@@ -59,1 +61,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -145,2 +148,2 @@\n-\n-    @Test public void checkMinorTickVisiblePropertyBind() {\n+    @Test\n+    public void checkMinorTickVisiblePropertyBind() {\n@@ -149,1 +152,1 @@\n-        assertTrue(\"minorTickVisibleProperty cannot be bound\", axis.minorTickVisibleProperty().getValue());\n+        assertTrue(axis.minorTickVisibleProperty().getValue(), \"minorTickVisibleProperty cannot be bound\");\n@@ -151,1 +154,1 @@\n-        assertFalse(\"minorTickVisibleProperty cannot be bound\", axis.minorTickVisibleProperty().getValue());\n+        assertFalse(axis.minorTickVisibleProperty().getValue(), \"minorTickVisibleProperty cannot be bound\");\n@@ -154,2 +157,2 @@\n-\n-    @Test public void checkMinorTickLengthPropertyBind() {\n+    @Test\n+    public void checkMinorTickLengthPropertyBind() {\n@@ -158,1 +161,1 @@\n-        assertEquals(\"minorTickLengthProperty cannot be bound\", axis.minorTickLengthProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.minorTickLengthProperty().getValue(), 56.0, 0.0, \"minorTickLengthProperty cannot be bound\");\n@@ -160,1 +163,1 @@\n-        assertEquals(\"minorTickLengthProperty cannot be bound\", axis.minorTickLengthProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.minorTickLengthProperty().getValue(), 23.0, 0.0, \"minorTickLengthProperty cannot be bound\");\n@@ -163,1 +166,2 @@\n-    @Test public void checkMinorTickCountPropertyBind() {\n+    @Test\n+    public void checkMinorTickCountPropertyBind() {\n@@ -166,1 +170,1 @@\n-        assertEquals(\"minorTickCountProperty cannot be bound\", axis.minorTickCountProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.minorTickCountProperty().getValue(), 56.0, 0.0, \"minorTickCountProperty cannot be bound\");\n@@ -168,1 +172,1 @@\n-        assertEquals(\"minorTickCountProperty cannot be bound\", axis.minorTickCountProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.minorTickCountProperty().getValue(), 23.0, 0.0, \"minorTickCountProperty cannot be bound\");\n@@ -172,1 +176,2 @@\n-    @Test public void checkScaleIsReadOnlyPropertyAndHenceCannotBeBound() {\n+    @Test\n+    public void checkScaleIsReadOnlyPropertyAndHenceCannotBeBound() {\n@@ -176,1 +181,2 @@\n-    @Test public void checkUpperBoundPropertyBind() {\n+    @Test\n+    public void checkUpperBoundPropertyBind() {\n@@ -179,1 +185,1 @@\n-        assertEquals(\"upperBoundProperty cannot be bound\", axis.upperBoundProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.upperBoundProperty().getValue(), 56.0, 0.0, \"upperBoundProperty cannot be bound\");\n@@ -181,1 +187,1 @@\n-        assertEquals(\"upperBoundProperty cannot be bound\", axis.upperBoundProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.upperBoundProperty().getValue(), 23.0, 0.0, \"upperBoundProperty cannot be bound\");\n@@ -184,1 +190,2 @@\n-    @Test public void checkLowerBoundPropertyBind() {\n+    @Test\n+    public void checkLowerBoundPropertyBind() {\n@@ -187,1 +194,1 @@\n-        assertEquals(\"lowerBoundProperty cannot be bound\", axis.lowerBoundProperty().getValue(),56.0,0.0);\n+        assertEquals(axis.lowerBoundProperty().getValue(), 56.0, 0.0, \"lowerBoundProperty cannot be bound\");\n@@ -189,1 +196,1 @@\n-        assertEquals(\"lowerBoundProperty cannot be bound\", axis.lowerBoundProperty().getValue(),23.0,0.0);\n+        assertEquals(axis.lowerBoundProperty().getValue(), 23.0, 0.0, \"lowerBoundProperty cannot be bound\");\n@@ -192,1 +199,2 @@\n-    @Test public void checkTickLabelFormatterPropertyBind() {\n+    @Test\n+    public void checkTickLabelFormatterPropertyBind() {\n@@ -195,1 +203,1 @@\n-        assertNull(\"tickLabelFormatterProperty cannot be bound\", axis.tickLabelFormatterProperty().getValue());\n+        assertNull(axis.tickLabelFormatterProperty().getValue(), \"tickLabelFormatterProperty cannot be bound\");\n@@ -197,1 +205,1 @@\n-        assertSame(\"tickLabelFormatterProperty cannot be bound\", axis.tickLabelFormatterProperty().getValue(), formatter);\n+        assertSame(axis.tickLabelFormatterProperty().getValue(), formatter, \"tickLabelFormatterProperty cannot be bound\");\n@@ -200,1 +208,0 @@\n-\n@@ -409,1 +416,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/ValueAxisTest.java","additions":39,"deletions":33,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,3 +36,1 @@\n-import org.junit.Test;\n-\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYChartDataTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -31,3 +32,3 @@\n-import org.junit.Test;\n-import javafx.collections.*;\n-import javafx.scene.chart.Axis.TickMark;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.css.CssParserShim;\n@@ -36,1 +37,0 @@\n-import javafx.css.CssParserShim;\n@@ -42,0 +42,1 @@\n+import javafx.scene.chart.Axis.TickMark;\n@@ -50,1 +51,0 @@\n-\n@@ -54,2 +54,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n+import org.junit.jupiter.api.Test;\n@@ -64,1 +63,1 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n@@ -67,0 +66,5 @@\n+        areachart.setAnimated(false);\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -72,0 +76,1 @@\n+        createChart();\n@@ -75,1 +80,0 @@\n-        \/\/System.out.println(\" --- \"+yaxis.getTickMarks().toString());\n@@ -79,1 +83,3 @@\n-    @Test public void testTickLabelFont() {\n+    @Test\n+    public void testTickLabelFont() {\n+        createChart();\n@@ -104,1 +110,3 @@\n-    @Test public void testSetTickLabelFill() {\n+    @Test\n+    public void testSetTickLabelFill() {\n+        createChart();\n@@ -117,1 +125,3 @@\n-    @Test public void testAddAxisWithoutSpecifyingSide() {\n+    @Test\n+    public void testAddAxisWithoutSpecifyingSide() {\n+        createChart();\n@@ -132,1 +142,3 @@\n-    @Test public void testLegendSizeWhenThereIsNoChartData() {\n+    @Test\n+    public void testLegendSizeWhenThereIsNoChartData() {\n+        createChart();\n@@ -138,2 +150,3 @@\n-\n-    @Test public void canModifySeriesWithoutChart() {\n+    @Test\n+    public void canModifySeriesWithoutChart() {\n+        createChart();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYChartTest.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,1 +32,0 @@\n-\n@@ -35,2 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYChartTestBase.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.stream.Stream;\n@@ -40,3 +41,22 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -44,1 +64,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,2 +65,0 @@\n-    private Class chartClass;\n-    int nodesPerSeries;\n@@ -49,9 +66,8 @@\n-    @Parameterized.Parameters\n-    public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { AreaChart.class, 1, },\n-            { BubbleChart.class, 0, },\n-            { LineChart.class, 1, },\n-            { ScatterChart.class, 0, },\n-            { StackedAreaChart.class, 1, },\n-        });\n+    private static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            Arguments.of(AreaChart.class, 1),\n+            Arguments.of(BubbleChart.class, 0),\n+            Arguments.of(LineChart.class, 1),\n+            Arguments.of(ScatterChart.class, 0),\n+            Arguments.of(StackedAreaChart.class, 1)\n+        );\n@@ -60,3 +76,3 @@\n-    public XYNumberChartsTest(Class chartClass, int nodesPerSeries) {\n-        this.chartClass = chartClass;\n-        this.nodesPerSeries = nodesPerSeries;\n+    @Override\n+    protected void createChart() {\n+        \/\/ will be using createChart() below\n@@ -65,2 +81,1 @@\n-    @Override\n-    protected Chart createChart() {\n+    protected void createChart(Class chartClass, int nodesPerSeries) {\n@@ -68,2 +83,2 @@\n-            chart = (XYChart<Number, Number>) chartClass.getConstructor(Axis.class, Axis.class).\n-                newInstance(new NumberAxis(), new NumberAxis());\n+            chart = (XYChart<Number, Number>)chartClass.getConstructor(Axis.class, Axis.class).newInstance(new NumberAxis(), new NumberAxis());\n+            chart.setAnimated(false);\n@@ -75,0 +90,4 @@\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -78,2 +97,4 @@\n-    @Test\n-    public void testSeriesClearAnimated_rt_40632() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesClearAnimated_rt_40632(Class chartClass, int nodesPerSeries) {\n+        createChart(chartClass, nodesPerSeries);\n@@ -83,2 +104,4 @@\n-    @Test\n-    public void testSeriesRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesRemove(Class chartClass, int nodesPerSeries) {\n+        createChart(chartClass, nodesPerSeries);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYNumberChartsTest.java","additions":49,"deletions":26,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import static org.junit.Assert.assertEquals;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYNumberChartsTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-import javafx.scene.shape.MoveTo;\n-import javafx.scene.shape.Path;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +31,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -36,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -44,4 +41,6 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n@@ -49,1 +48,0 @@\n-@RunWith(Parameterized.class)\n@@ -51,12 +49,0 @@\n-    private final Class chartClass;\n-    private final int seriesFadeOutTime;\n-    private final int dataFadeOutTime;\n-\n-    @Parameterized.Parameters\n-    public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { AreaChart.class, 400, 800 },\n-            { LineChart.class, 900, 500 },\n-            { StackedAreaChart.class, 400, 800 }\n-        });\n-    }\n@@ -64,4 +50,6 @@\n-    public XYNumberLineChartsTest(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n-        this.chartClass = chartClass;\n-        this.seriesFadeOutTime = seriesFadeOutTime;\n-        this.dataFadeOutTime = dataFadeOutTime;\n+    private static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            Arguments.of(AreaChart.class, 400, 800),\n+            Arguments.of(LineChart.class, 900, 500),\n+            Arguments.of(StackedAreaChart.class, 400, 800)\n+        );\n@@ -71,1 +59,5 @@\n-    protected Chart createChart() {\n+    protected void createChart() {\n+        \/\/ will be using createChart() below\n+    }\n+\n+    protected void createChart(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n@@ -73,2 +65,1 @@\n-            chart = (XYChart<Number, Number>) chartClass.getConstructor(Axis.class, Axis.class).\n-                newInstance(new NumberAxis(), new NumberAxis());\n+            chart = (XYChart<Number, Number>) chartClass.getConstructor(Axis.class, Axis.class).newInstance(new NumberAxis(), new NumberAxis());\n@@ -77,0 +68,1 @@\n+            chart.setAnimated(false);\n@@ -82,0 +74,4 @@\n+    }\n+\n+    @Override\n+    protected Chart getChart() {\n@@ -85,2 +81,4 @@\n-    @Test\n-    public void testSeriesClearAnimatedWithoutSymbols_rt_40632() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesClearAnimatedWithoutSymbols_rt_40632(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n@@ -90,2 +88,4 @@\n-    @Test\n-    public void testSeriesRemoveWithoutSymbols() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesRemoveWithoutSymbols(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n@@ -96,2 +96,4 @@\n-    @Test\n-    public void testSeriesRemoveWithoutSymbolsAnimated_rt_22124() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesRemoveWithoutSymbolsAnimated_rt_22124(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n@@ -115,2 +117,4 @@\n-    @Test\n-    public void testDataWithoutSymbolsAddWithAnimation_rt_39353() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDataWithoutSymbolsAddWithAnimation_rt_39353(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n@@ -125,2 +129,4 @@\n-    @Test\n-    public void testSeriesClearWithoutSymbolsAnimated_8150264() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSeriesClearWithoutSymbolsAnimated_8150264(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n@@ -143,2 +149,4 @@\n-    @Test\n-    public void testMinorTicksMatchMajorTicksAfterAnimation() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMinorTicksMatchMajorTicksAfterAnimation(Class chartClass, int seriesFadeOutTime, int dataFadeOutTime) {\n+        createChart(chartClass, seriesFadeOutTime, dataFadeOutTime);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYNumberLineChartsTest.java","additions":49,"deletions":41,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,6 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getListenerCount;\n+import java.util.List;\n+import java.util.stream.Stream;\n@@ -33,12 +35,0 @@\n-import javafx.scene.Scene;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.input.KeyCombination;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -46,0 +36,1 @@\n+import javafx.scene.Scene;\n@@ -56,0 +47,13 @@\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCombination;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -57,5 +61,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.fail;\n-\n-@RunWith(Parameterized.class)\n@@ -65,1 +64,0 @@\n-\n@@ -68,1 +66,0 @@\n-\n@@ -70,1 +67,0 @@\n-\n@@ -75,1 +71,0 @@\n-\n@@ -80,10 +75,7 @@\n-    private Class<?> testClass;\n-\n-    @Parameterized.Parameters\n-    public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-            {Button.class},\n-            {Tab.class},\n-            {TableColumn.class},\n-            {TreeTableColumn.class}\n-        });\n+    private static List<Class> parameters() {\n+        return List.of(\n+            Button.class,\n+            Tab.class,\n+            TableColumn.class,\n+            TreeTableColumn.class\n+        );\n@@ -92,5 +84,3 @@\n-    public AcceleratorParameterizedTest(Class<?> testClass) {\n-        this.testClass = testClass;\n-    }\n-\n-    @Before public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setup(Class<?> testClass) {\n@@ -144,1 +134,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -155,2 +146,4 @@\n-\n-    @Test public void rt_28136_assertContextMenuAcceleratorWorks() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertContextMenuAcceleratorWorks(Class c) {\n+        setup(c);\n@@ -165,1 +158,4 @@\n-    @Test public void rt_28136_assertContextMenuAcceleratorWorksWithNewMenuItemAdded() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertContextMenuAcceleratorWorksWithNewMenuItemAdded(Class c) {\n+        setup(c);\n@@ -180,1 +176,4 @@\n-    @Test public void rt_28136_assertContextMenuStopsFiringWhenMenuItemRemoved() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertContextMenuStopsFiringWhenMenuItemRemoved(Class c) {\n+        setup(c);\n@@ -192,1 +191,4 @@\n-    @Test public void rt_28136_assertAcceleratorChangeToNullWorks_oldAcceleratorStopsFiring() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertAcceleratorChangeToNullWorks_oldAcceleratorStopsFiring(Class c) {\n+        setup(c);\n@@ -200,1 +202,4 @@\n-    @Test public void rt_28136_assertAcceleratorChangeToNonNullWorks_oldAcceleratorStopsFiring() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertAcceleratorChangeToNonNullWorks_oldAcceleratorStopsFiring(Class c) {\n+        setup(c);\n@@ -208,1 +213,4 @@\n-    @Test public void rt_28136_assertAcceleratorChangeToNonNullWorks_newAcceleratorStartsFiring() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertAcceleratorChangeToNonNullWorks_newAcceleratorStartsFiring(Class c) {\n+        setup(c);\n@@ -216,1 +224,4 @@\n-    @Test public void rt_28136_assertNewMenuWithMenuItemAcceleratorsFire() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertNewMenuWithMenuItemAcceleratorsFire(Class c) {\n+        setup(c);\n@@ -235,1 +246,4 @@\n-    @Test public void rt_28136_assertRemovedMenuItemAcceleratorInSubmenuDoesNotFire() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertRemovedMenuItemAcceleratorInSubmenuDoesNotFire(Class c) {\n+        setup(c);\n@@ -266,1 +280,4 @@\n-    @Test public void rt_28136_assertRemovedMenuWithMenuItemAcceleratorsDoesNotFire() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertRemovedMenuWithMenuItemAcceleratorsDoesNotFire(Class c) {\n+        setup(c);\n@@ -297,1 +314,4 @@\n-    @Test public void rt_28136_assertAcceleratorIsNotFiredWhenContextMenuIsRemoved() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void rt_28136_assertAcceleratorIsNotFiredWhenContextMenuIsRemoved(Class c) {\n+        setup(c);\n@@ -304,1 +324,4 @@\n-    @Test public void testAcceleratorShouldNotGetFiredWhenMenuItemRemovedFromScene() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAcceleratorShouldNotGetFiredWhenMenuItemRemovedFromScene(Class c) {\n+        setup(c);\n@@ -320,1 +343,4 @@\n-    @Test public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedBackToScene() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedBackToScene(Class c) {\n+        setup(c);\n@@ -335,1 +361,4 @@\n-    @Test public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedToDifferentScene() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedToDifferentScene(Class c) {\n+        setup(c);\n@@ -352,2 +381,5 @@\n-    @Ignore(\"JDK-8268374\")\n-    @Test public void testAcceleratorShouldNotGetFiredWhenControlsIsRemovedFromSceneThenContextMenuIsSetToNullAndControlIsAddedBackToScene() {\n+    @Disabled(\"JDK-8268374\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAcceleratorShouldNotGetFiredWhenControlsIsRemovedFromSceneThenContextMenuIsSetToNullAndControlIsAddedBackToScene(Class testClass) {\n+        setup(testClass);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/AcceleratorParameterizedTest.java","additions":90,"deletions":58,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,5 @@\n-import com.sun.javafx.application.PlatformImpl;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.Scene;\n-import javafx.scene.layout.StackPane;\n-import javafx.stage.Stage;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,0 +35,1 @@\n+import javafx.scene.Scene;\n@@ -41,5 +40,6 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.tk.Toolkit;\n@@ -47,0 +47,2 @@\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n@@ -57,1 +59,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/AccordionTest.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.Locale;\n@@ -35,5 +39,2 @@\n-import java.util.Locale;\n-import org.junit.After;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +61,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/AlertTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,6 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -43,3 +42,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +50,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ButtonBaseTest.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,0 +28,10 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import java.util.List;\n@@ -32,0 +42,4 @@\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.Skin;\n@@ -42,1 +56,4 @@\n-import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -47,17 +64,0 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.Skin;\n-import org.junit.Before;\n-import org.junit.After;\n-import org.junit.Test;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -78,1 +78,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -90,1 +91,2 @@\n-    @After public void after() {\n+    @AfterEach\n+    public void after() {\n@@ -267,3 +269,3 @@\n-    @Test public void defaultButtonSceneAccelerators() {\n-        assertEquals(\"Scene.getAccelerators() should contain no accelerators.\",\n-            0, scene.getAccelerators().size());\n+    @Test\n+    public void defaultButtonSceneAccelerators() {\n+        assertEquals(0, scene.getAccelerators().size(), \"Scene.getAccelerators() should contain no accelerators.\");\n@@ -276,2 +278,1 @@\n-        assertEquals(\"Scene.getAccelerators() should contain one accelerator\" +\n-            \" for Default button.\", 1, scene.getAccelerators().size());\n+        assertEquals(1, scene.getAccelerators().size(), \"Scene.getAccelerators() should contain one accelerator for Default button.\");\n@@ -280,2 +281,1 @@\n-        assertEquals(\"Default button accelerator should be removed from\" +\n-            \" Scene.getAccelerators().\", 0, scene.getAccelerators().size());\n+        assertEquals(0, scene.getAccelerators().size(), \"Default button accelerator should be removed from Scene.getAccelerators().\");\n@@ -342,3 +342,3 @@\n-    @Test public void cancelButtonSceneAccelerators() {\n-        assertEquals(\"Scene.getAccelerators() should contain no accelerators.\",\n-            0, scene.getAccelerators().size());\n+    @Test\n+    public void cancelButtonSceneAccelerators() {\n+        assertEquals(0, scene.getAccelerators().size(), \"Scene.getAccelerators() should contain no accelerators.\");\n@@ -351,2 +351,1 @@\n-        assertEquals(\"Scene.getAccelerators() should contain one accelerator\" +\n-            \" for Cancel button.\", 1, scene.getAccelerators().size());\n+        assertEquals(1, scene.getAccelerators().size(), \"Scene.getAccelerators() should contain one accelerator for Cancel button.\");\n@@ -355,2 +354,1 @@\n-        assertEquals(\"Cancel button accelerator should be removed from\" +\n-            \" Scene.getAccelerators().\", 0, scene.getAccelerators().size());\n+        assertEquals(0, scene.getAccelerators().size(), \"Cancel button accelerator should be removed from Scene.getAccelerators().\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ButtonTest.java","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static javafx.scene.control.TableColumn.*;\n-import static org.junit.Assert.*;\n-\n+import static javafx.scene.control.TableColumn.editAnyEvent;\n+import static javafx.scene.control.TableColumn.editCommitEvent;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -43,0 +40,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -74,1 +74,1 @@\n-        assertNull(\"table must be null for null pos\", ev.getTableView());\n+        assertNull(ev.getTableView(), \"table must be null for null pos\");\n@@ -80,1 +80,1 @@\n-        assertNull(\"column must be null for null pos\", ev.getTableColumn());\n+        assertNull(ev.getTableColumn(), \"column must be null for null pos\");\n@@ -86,1 +86,1 @@\n-        assertNull(\"oldValue must be null for null pos\", ev.getOldValue());\n+        assertNull(ev.getOldValue(), \"oldValue must be null for null pos\");\n@@ -92,1 +92,1 @@\n-        assertNull(\"rowValue must be null for null pos\", ev.getRowValue());\n+        assertNull(ev.getRowValue(), \"rowValue must be null for null pos\");\n@@ -99,1 +99,1 @@\n-        assertEquals(\"editedValue must be available for null pos\", editedValue, ev.getNewValue());\n+        assertEquals(editedValue, ev.getNewValue(), \"editedValue must be available for null pos\");\n@@ -107,1 +107,1 @@\n-        assertNull(\"rowValue must be null for null pos\", ev.getRowValue());\n+        assertNull(ev.getRowValue(), \"rowValue must be null for null pos\");\n@@ -166,1 +166,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -182,1 +183,1 @@\n-    @After\n+    @AfterEach\n@@ -186,1 +187,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CellEditEventOfTableColumnTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.stream.Collectors;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import static javafx.scene.control.TreeTableColumn.editAnyEvent;\n@@ -35,3 +30,3 @@\n-import static javafx.scene.control.TreeTableColumn.*;\n-import static org.junit.Assert.*;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import java.util.stream.Collectors;\n@@ -46,0 +41,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -77,1 +75,1 @@\n-        assertNull(\"treeTable must be null if pos is null\", ev.getTreeTableView());\n+        assertNull(ev.getTreeTableView(), \"treeTable must be null if pos is null\");\n@@ -83,1 +81,1 @@\n-        assertNull(\"column must be null for null pos\", ev.getTableColumn());\n+        assertNull(ev.getTableColumn(), \"column must be null for null pos\");\n@@ -89,1 +87,1 @@\n-        assertNull(\"oldValue must be null for null pos\", ev.getOldValue());\n+        assertNull(ev.getOldValue(), \"oldValue must be null for null pos\");\n@@ -95,1 +93,1 @@\n-        assertNull(\"rowValue must be null for null pos\", ev.getRowValue());\n+        assertNull(ev.getRowValue(), \"rowValue must be null for null pos\");\n@@ -102,1 +100,1 @@\n-        assertEquals(\"editedValue must be available for null pos\", editedValue, ev.getNewValue());\n+        assertEquals(editedValue, ev.getNewValue(), \"editedValue must be available for null pos\");\n@@ -110,1 +108,1 @@\n-        assertNull(\"rowValue must be null for null pos\", ev.getRowValue());\n+        assertNull(ev.getRowValue(), \"rowValue must be null for null pos\");\n@@ -171,1 +169,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -190,1 +189,1 @@\n-    @After\n+    @AfterEach\n@@ -194,1 +193,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CellEditEventOfTreeTableColumnTest.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,6 @@\n-import com.sun.javafx.tk.Toolkit;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.stream.Stream;\n@@ -34,4 +38,0 @@\n-import javafx.stage.Stage;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -49,6 +49,4 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n+import javafx.stage.Stage;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.tk.Toolkit;\n@@ -57,2 +55,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -61,1 +57,0 @@\n-@RunWith(Parameterized.class)\n@@ -63,6 +58,5 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                {Cell.class},\n-                {ListCell.class},\n-                {TableRow.class},\n+    private static Stream<Class> parameters() {\n+        return Stream.of(\n+                Cell.class,\n+                ListCell.class,\n+                TableRow.class,\n@@ -70,3 +64,3 @@\n-                {TableCellShim.class},\n-                {TreeCell.class},\n-                {TreeTableRow.class},\n+                TableCellShim.class,\n+                TreeCell.class,\n+                TreeTableRow.class,\n@@ -74,2 +68,2 @@\n-                {TreeTableCellShim.class}\n-        });\n+                TreeTableCellShim.class\n+        );\n@@ -79,5 +73,0 @@\n-    private Class type;\n-\n-    public CellTest(Class type) {\n-        this.type = type;\n-    }\n@@ -85,2 +74,8 @@\n-    @Before public void setup() throws Exception {\n-        cell = (Cell<String>) type.getDeclaredConstructor().newInstance();\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setup(Class type) {\n+        try {\n+            cell = (Cell<String>)type.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -108,1 +103,4 @@\n-    @Test public void cellsShouldBeNonFocusableByDefault() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cellsShouldBeNonFocusableByDefault(Class c) {\n+        setup(c);\n@@ -118,1 +116,4 @@\n-    @Test public void styleClassShouldDefaultTo_cell() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void styleClassShouldDefaultTo_cell(Class c) {\n+        setup(c);\n@@ -122,1 +123,4 @@\n-    @Test public void pseudoClassStateShouldBe_empty_ByDefault() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pseudoClassStateShouldBe_empty_ByDefault(Class c) {\n+        setup(c);\n@@ -133,1 +137,4 @@\n-    @Test public void updatingItemAffectsBothItemAndEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingItemAffectsBothItemAndEmpty(Class c) {\n+        setup(c);\n@@ -139,1 +146,4 @@\n-    @Test public void updatingItemWithEmptyTrueAndItemNotNullIsWeirdButOK() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingItemWithEmptyTrueAndItemNotNullIsWeirdButOK(Class c) {\n+        setup(c);\n@@ -145,1 +155,4 @@\n-    @Test public void updatingItemWithEmptyFalseAndNullItemIsOK() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingItemWithEmptyFalseAndNullItemIsOK(Class c) {\n+        setup(c);\n@@ -151,1 +164,4 @@\n-    @Test public void selectingANonEmptyCellIsOK() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectingANonEmptyCellIsOK(Class c) {\n+        setup(c);\n@@ -157,1 +173,4 @@\n-    @Test public void unSelectingANonEmptyCellIsOK() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unSelectingANonEmptyCellIsOK(Class c) {\n+        setup(c);\n@@ -164,1 +183,1 @@\n-    public void selectingAnEmptyCellResultsInNoChange() {\n+    public void selectingAnEmptyCellResultsInNoChange(Class c) {\n@@ -170,1 +189,4 @@\n-    @Test public void updatingASelectedCellToBeEmptyClearsSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingASelectedCellToBeEmptyClearsSelection(Class c) {\n+        setup(c);\n@@ -177,1 +199,4 @@\n-    @Test public void updatingItemWithEmptyTrueResultsIn_empty_pseudoClassAndNot_filled() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingItemWithEmptyTrueResultsIn_empty_pseudoClassAndNot_filled(Class c) {\n+        setup(c);\n@@ -183,1 +208,4 @@\n-    @Test public void updatingItemWithEmptyFalseResultsIn_filled_pseudoClassAndNot_empty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingItemWithEmptyFalseResultsIn_filled_pseudoClassAndNot_empty(Class c) {\n+        setup(c);\n@@ -189,1 +217,4 @@\n-    @Test public void updatingSelectedToTrueResultsIn_selected_pseudoClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingSelectedToTrueResultsIn_selected_pseudoClass(Class c) {\n+        setup(c);\n@@ -195,1 +226,4 @@\n-    @Test public void updatingSelectedToFalseResultsInNo_selected_pseudoClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingSelectedToFalseResultsInNo_selected_pseudoClass(Class c) {\n+        setup(c);\n@@ -202,1 +236,4 @@\n-    @Test public void editableIsTrueByDefault() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableIsTrueByDefault(Class c) {\n+        setup(c);\n@@ -207,1 +244,4 @@\n-    @Test public void editableCanBeSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableCanBeSet(Class c) {\n+        setup(c);\n@@ -212,1 +252,4 @@\n-    @Test public void editableSetToNonDefaultValueIsReflectedInModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableSetToNonDefaultValueIsReflectedInModel(Class c) {\n+        setup(c);\n@@ -217,1 +260,4 @@\n-    @Test public void editableCanBeCleared() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableCanBeCleared(Class c) {\n+        setup(c);\n@@ -223,1 +269,4 @@\n-    @Test public void editableCanBeBound() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableCanBeBound(Class c) {\n+        setup(c);\n@@ -231,1 +280,4 @@\n-    @Test public void cannotSpecifyEditableViaCSS() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cannotSpecifyEditableViaCSS(Class c) {\n+        setup(c);\n@@ -248,1 +300,4 @@\n-    @Test public void editingAnEmptyCellResultsInNoChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editingAnEmptyCellResultsInNoChange(Class c) {\n+        setup(c);\n@@ -253,1 +308,4 @@\n-    @Test public void editingAnEmptyCellResultsInNoChange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editingAnEmptyCellResultsInNoChange2(Class c) {\n+        setup(c);\n@@ -260,1 +318,4 @@\n-    @Test public void updatingACellBeingEditedDoesNotResultInACancelOfEdit() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingACellBeingEditedDoesNotResultInACancelOfEdit(Class c) {\n+        setup(c);\n@@ -269,1 +330,4 @@\n-    @Test public void updatingACellBeingEditedDoesNotResultInACancelOfEdit2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void updatingACellBeingEditedDoesNotResultInACancelOfEdit2(Class c) {\n+        setup(c);\n@@ -278,1 +342,4 @@\n-    @Test public void startEditWhenEditableIsTrue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void startEditWhenEditableIsTrue(Class c) {\n+        setup(c);\n@@ -284,1 +351,4 @@\n-    @Test public void startEditWhenEditableIsFalse() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void startEditWhenEditableIsFalse(Class c) {\n+        setup(c);\n@@ -291,1 +361,4 @@\n-    @Test public void startEditWhileAlreadyEditingIsIgnored() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void startEditWhileAlreadyEditingIsIgnored(Class c) {\n+        setup(c);\n@@ -298,1 +371,4 @@\n-    @Test public void cancelEditWhenEditableIsTrue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cancelEditWhenEditableIsTrue(Class c) {\n+        setup(c);\n@@ -305,2 +381,5 @@\n-    @Test public void cancelEditWhenEditableIsFalse() {\n-        CellShim.updateItem(cell, \"Apples\", false);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cancelEditWhenEditableIsFalse(Class c) {\n+        setup(c);\n+       CellShim.updateItem(cell, \"Apples\", false);\n@@ -313,1 +392,4 @@\n-    @Test public void commitEditWhenEditableIsTrue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void commitEditWhenEditableIsTrue(Class c) {\n+        setup(c);\n@@ -320,1 +402,4 @@\n-    @Test public void commitEditWhenEditableIsFalse() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void commitEditWhenEditableIsFalse(Class c) {\n+        setup(c);\n@@ -328,1 +413,4 @@\n-    @Test public void getBeanIsCorrectForItemProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getBeanIsCorrectForItemProperty(Class c) {\n+        setup(c);\n@@ -332,1 +420,4 @@\n-    @Test public void getNameIsCorrectForItemProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getNameIsCorrectForItemProperty(Class c) {\n+        setup(c);\n@@ -336,1 +427,4 @@\n-    @Test public void getBeanIsCorrectForEmptyProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getBeanIsCorrectForEmptyProperty(Class c) {\n+        setup(c);\n@@ -340,1 +434,4 @@\n-    @Test public void getNameIsCorrectForEmptyProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getNameIsCorrectForEmptyProperty(Class c) {\n+        setup(c);\n@@ -344,1 +441,4 @@\n-    @Test public void getBeanIsCorrectForSelectedProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getBeanIsCorrectForSelectedProperty(Class c) {\n+        setup(c);\n@@ -348,1 +448,4 @@\n-    @Test public void getNameIsCorrectForSelectedProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getNameIsCorrectForSelectedProperty(Class c) {\n+        setup(c);\n@@ -352,1 +455,4 @@\n-    @Test public void getBeanIsCorrectForEditingProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getBeanIsCorrectForEditingProperty(Class c) {\n+        setup(c);\n@@ -356,1 +462,4 @@\n-    @Test public void getNameIsCorrectForEditingProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getNameIsCorrectForEditingProperty(Class c) {\n+        setup(c);\n@@ -360,1 +469,4 @@\n-    @Test public void getBeanIsCorrectForEditableProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getBeanIsCorrectForEditableProperty(Class c) {\n+        setup(c);\n@@ -364,1 +476,4 @@\n-    @Test public void getNameIsCorrectForEditableProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getNameIsCorrectForEditableProperty(Class c) {\n+        setup(c);\n@@ -368,1 +483,4 @@\n-    @Test public void loseFocusWhileEditing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void loseFocusWhileEditing(Class c) {\n+        setup(c);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CellTest.java","additions":195,"deletions":77,"binary":false,"changes":272,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,8 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -32,6 +40,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +48,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CheckBoxTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,4 +36,3 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +51,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -66,1 +66,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CheckBoxTreeItemTest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,7 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -36,5 +39,4 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -52,1 +54,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -221,1 +224,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CheckMenuItemTest.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,9 +33,1 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -52,0 +46,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -61,1 +58,0 @@\n-@RunWith(Parameterized.class)\n@@ -67,1 +63,0 @@\n-\n@@ -69,2 +64,0 @@\n-\n-    private StringConverter<String> converter;\n@@ -75,2 +68,4 @@\n-    @Test\n-    public void testChangeUncontainedSelectIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeUncontainedSelectIndex(StringConverter<String> converter) {\n+        setup(converter);\n@@ -80,1 +75,1 @@\n-        assertEquals(\"label updated after select index \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select index \");\n@@ -83,2 +78,4 @@\n-    @Test\n-    public void testChangeUncontainedSelectItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeUncontainedSelectItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -88,1 +85,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -91,2 +88,4 @@\n-    @Test\n-    public void testChangeUncontainedSelectItemOtherUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeUncontainedSelectItemOtherUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -96,1 +95,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -99,2 +98,4 @@\n-    @Test\n-    public void testChangeUncontainedSetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeUncontainedSetValue(StringConverter<String> converter) {\n+        setup(converter);\n@@ -104,1 +105,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -107,2 +108,4 @@\n-    @Test\n-    public void testChangeContainedSetValueOtherUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSetValueOtherUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -112,1 +115,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -115,2 +118,4 @@\n-    @Test\n-    public void testChangeUncontainedClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeUncontainedClear(StringConverter<String> converter) {\n+        setup(converter);\n@@ -120,1 +125,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -126,2 +131,4 @@\n-    @Test\n-    public void testChangeContainedSelectIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSelectIndex(StringConverter<String> converter) {\n+        setup(converter);\n@@ -132,1 +139,1 @@\n-        assertEquals(\"label updated after select index \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select index \");\n@@ -135,2 +142,4 @@\n-    @Test\n-    public void testChangeContainedSelectItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSelectItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -141,1 +150,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -144,2 +153,4 @@\n-    @Test\n-    public void testChangeContainedSelectItemUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSelectItemUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -150,1 +161,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -153,2 +164,4 @@\n-    @Test\n-    public void testChangeContainedSetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSetValue(StringConverter<String> converter) {\n+        setup(converter);\n@@ -159,1 +172,1 @@\n-        assertEquals(\"label updated after set value \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after set value \");\n@@ -162,2 +175,4 @@\n-    @Test\n-    public void testChangeContainedSetValueUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedSetValueUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -168,1 +183,1 @@\n-        assertEquals(\"label updated after set value \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after set value \");\n@@ -171,2 +186,4 @@\n-    @Test\n-    public void testChangeContainedClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeContainedClear(StringConverter<String> converter) {\n+        setup(converter);\n@@ -177,1 +194,1 @@\n-        assertEquals(\"label updated after clear selection \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after clear selection \");\n@@ -182,2 +199,4 @@\n-    @Test\n-    public void testChangeEmptySelectIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeEmptySelectIndex(StringConverter<String> converter) {\n+        setup(converter);\n@@ -186,1 +205,1 @@\n-        assertEquals(\"label updated after select index \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select index \");\n@@ -189,2 +208,4 @@\n-    @Test\n-    public void testChangeEmptySelectItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeEmptySelectItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -193,1 +214,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -196,2 +217,4 @@\n-    @Test\n-    public void testChangeEmptySelectItemUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeEmptySelectItemUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -200,1 +223,1 @@\n-        assertEquals(\"label updated after select item \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after select item \");\n@@ -203,2 +226,4 @@\n-    @Test\n-    public void testChangeEmptySetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeEmptySetValue(StringConverter<String> converter) {\n+        setup(converter);\n@@ -207,1 +232,1 @@\n-        assertEquals(\"label updated after set value \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after set value \");\n@@ -210,2 +235,4 @@\n-    @Test\n-    public void testChangeEmptySetValueUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeEmptySetValueUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -214,1 +241,1 @@\n-        assertEquals(\"label updated after set value \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label updated after set value \");\n@@ -220,2 +247,4 @@\n-    @Test\n-    public void testInitialEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitialEmpty(StringConverter<String> converter) {\n+        setup(converter);\n@@ -223,1 +252,1 @@\n-        assertEquals(\"label has empty value \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has empty value \");\n@@ -226,2 +255,4 @@\n-    @Test\n-    public void testInitialUncontained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitialUncontained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -230,1 +261,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -233,2 +264,4 @@\n-    @Test\n-    public void testInitialUncontained1999() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitialUncontained1999(StringConverter<String> converter) {\n+        setup(converter);\n@@ -238,1 +271,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -241,2 +274,4 @@\n-    @Test\n-    public void testInitialContained() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitialContained(StringConverter<String> converter) {\n+        setup(converter);\n@@ -246,1 +281,1 @@\n-        assertEquals(\"label has contained value\", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has contained value\");\n@@ -251,2 +286,4 @@\n-    @Test\n-    public void testModifyItemsSetEqualList() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsSetEqualList(StringConverter<String> converter) {\n+        setup(converter);\n@@ -256,1 +293,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -259,2 +296,4 @@\n-    @Test\n-    public void testModifyItemsSetItems() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsSetItems(StringConverter<String> converter) {\n+        setup(converter);\n@@ -264,1 +303,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -267,2 +306,4 @@\n-    @Test\n-    public void testModifyItemsSetAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsSetAll(StringConverter<String> converter) {\n+        setup(converter);\n@@ -272,1 +313,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -275,2 +316,4 @@\n-    @Test\n-    public void testModifyItemsRemoveItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsRemoveItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -280,2 +323,2 @@\n-        assertEquals(\"sanity: is still set to uncontained\", uncontained, box.getValue());\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(uncontained, box.getValue(), \"sanity: is still set to uncontained\");\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -284,2 +327,4 @@\n-    @Test\n-    public void testModifyItemsReplaceItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsReplaceItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -289,1 +334,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -292,2 +337,4 @@\n-    @Test\n-    public void testModifyItemsAddItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testModifyItemsAddItem(StringConverter<String> converter) {\n+        setup(converter);\n@@ -297,1 +344,1 @@\n-        assertEquals(\"label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"label has uncontainedValue \");\n@@ -300,2 +347,4 @@\n-    @Test\n-    public void testToggleText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testToggleText(StringConverter<String> converter) {\n+        setup(converter);\n@@ -306,1 +355,1 @@\n-            assertEquals(\"menuItem text at \" + i, getItemText(box.getItems().get(i)), item.getText());\n+            assertEquals(getItemText(box.getItems().get(i)), item.getText(), \"menuItem text at \" + i);\n@@ -310,2 +359,4 @@\n-    @Test\n-    public void testToggleConverter() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testToggleConverter(StringConverter<String> converter) {\n+        setup(converter);\n@@ -315,1 +366,1 @@\n-        assertEquals(\"sanity: label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(getValueText(), getLabelText(), \"sanity: label has uncontainedValue \");\n@@ -321,2 +372,2 @@\n-        assertEquals(\"after change converter - sanity: value is set to uncontained\", uncontained, box.getValue());\n-        assertEquals(\"after change converter - label has uncontainedValue \", getValueText(), getLabelText());\n+        assertEquals(uncontained, box.getValue(), \"after change converter - sanity: value is set to uncontained\");\n+        assertEquals(getValueText(), getLabelText(), \"after change converter - label has uncontainedValue \");\n@@ -365,11 +416,5 @@\n-\n-\/\/------------------ parameterized\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        \/\/ converter\n-        Object[][] data = new Object[][] {\n-            {null},\n-            {createStringConverter()},\n-        };\n-        return Arrays.asList(data);\n+    private static Stream<StringConverter<String>> parameters() {\n+        return Stream.of(\n+            null,\n+            createStringConverter()\n+        );\n@@ -391,1 +436,0 @@\n-\n@@ -395,4 +439,0 @@\n-    public ChoiceBoxLabelTextTest(StringConverter<String> converter) {\n-        this.converter = converter;\n-    }\n-\n@@ -401,2 +441,4 @@\n-    @Test\n-    public void testSetupState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetupState(StringConverter<String> converter) {\n+        setup(converter);\n@@ -418,1 +460,1 @@\n-    @After\n+    @AfterEach\n@@ -423,2 +465,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @Before\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(StringConverter<String> converter) {\n@@ -434,2 +477,0 @@\n-\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ChoiceBoxLabelTextTest.java","additions":170,"deletions":129,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,7 +34,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n@@ -54,0 +52,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -265,3 +266,5 @@\n-                assertEquals(\"toggle \" + selectedToggle.getText() + \" at index: \" + i + \" must be selected: \" + shouldBeSelected,\n-                        shouldBeSelected,\n-                        selectedToggle.isSelected());\n+                assertEquals(\n+                    shouldBeSelected,\n+                    selectedToggle.isSelected(),\n+                    \"toggle \" + selectedToggle.getText() + \" at index: \" + i + \" must be selected: \" + shouldBeSelected\n+                );\n@@ -294,1 +297,1 @@\n-        assertEquals(\"selectedIndex for uncontained value \", -1, box.getSelectionModel().getSelectedIndex());\n+        assertEquals(-1, box.getSelectionModel().getSelectedIndex(), \"selectedIndex for uncontained value \");\n@@ -306,1 +309,1 @@\n-        assertEquals(\"uncontained value must be unchanged after clearSelection\", uncontained, box.getValue());\n+        assertEquals(uncontained, box.getValue(), \"uncontained value must be unchanged after clearSelection\");\n@@ -381,1 +384,1 @@\n-    @After\n+    @AfterEach\n@@ -386,1 +389,1 @@\n-    @Before\n+    @BeforeEach\n@@ -396,1 +399,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ChoiceBoxSelectionTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,6 @@\n-import javafx.scene.control.Separator;\n-import org.junit.After;\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,2 +37,0 @@\n-import javafx.scene.control.skin.ChoiceBoxSkin;\n-import javafx.scene.control.skin.ChoiceBoxSkinNodesShim;\n@@ -39,6 +38,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -57,0 +50,1 @@\n+import javafx.scene.control.Separator;\n@@ -58,0 +52,2 @@\n+import javafx.scene.control.skin.ChoiceBoxSkin;\n+import javafx.scene.control.skin.ChoiceBoxSkinNodesShim;\n@@ -60,4 +56,6 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -71,1 +69,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -85,1 +84,2 @@\n-    @After public void cleanUp() {\n+    @AfterEach\n+    public void cleanUp() {\n@@ -247,1 +247,1 @@\n-    @Ignore\n+    @Disabled\n@@ -541,2 +541,1 @@\n-        assertEquals(\"sanity: model is selecting index and item\", items.get(index),\n-                model.getSelectedItem());\n+        assertEquals(items.get(index), model.getSelectedItem(), \"sanity: model is selecting index and item\");\n@@ -544,1 +543,1 @@\n-        assertEquals(\"box value must be same as selected item\", items.get(index), box.getValue());\n+        assertEquals(items.get(index), box.getValue(), \"box value must be same as selected item\");\n@@ -556,1 +555,1 @@\n-        assertEquals(\"selecting next must move over separator\", 3, sm.getSelectedIndex());\n+        assertEquals(3, sm.getSelectedIndex(), \"selecting next must move over separator\");\n@@ -569,1 +568,1 @@\n-        assertEquals(\"selecting previous must move over separator\", 1, sm.getSelectedIndex());\n+        assertEquals(1, sm.getSelectedIndex(), \"selecting previous must move over separator\");\n@@ -582,2 +581,1 @@\n-            assertEquals(\"event is not of type ChoiceBox.ON_SHOWING\",\n-                event.getEventType(), ChoiceBox.ON_SHOWING);\n+            assertEquals(event.getEventType(), ChoiceBox.ON_SHOWING, \"event is not of type ChoiceBox.ON_SHOWING\");\n@@ -587,2 +585,1 @@\n-            assertEquals(\"event is not of type ChoiceBox.ON_SHOWN\",\n-                event.getEventType(), ChoiceBox.ON_SHOWN);\n+            assertEquals(event.getEventType(), ChoiceBox.ON_SHOWN, \"event is not of type ChoiceBox.ON_SHOWN\");\n@@ -592,2 +589,1 @@\n-            assertEquals(\"event is not of type ChoiceBox.ON_HIDING\",\n-                event.getEventType(), ChoiceBox.ON_HIDING);\n+            assertEquals(event.getEventType(), ChoiceBox.ON_HIDING, \"event is not of type ChoiceBox.ON_HIDING\");\n@@ -597,2 +593,1 @@\n-            assertEquals(\"event is not of type ChoiceBox.ON_HIDDEN\",\n-                event.getEventType(), ChoiceBox.ON_HIDDEN);\n+            assertEquals(event.getEventType(), ChoiceBox.ON_HIDDEN, \"event is not of type ChoiceBox.ON_HIDDEN\");\n@@ -605,4 +600,4 @@\n-        assertTrue(\"OnShowing event not received\", onShowingPass);\n-        assertTrue(\"onShown event not received\", onShownPass);\n-        assertTrue(\"onHiding event not received\", onHidingPass);\n-        assertTrue(\"onHidden event not received\", onHiddenPass);\n+        assertTrue(onShowingPass, \"OnShowing event not received\");\n+        assertTrue(onShownPass, \"onShown event not received\");\n+        assertTrue(onHidingPass, \"onHiding event not received\");\n+        assertTrue(onHiddenPass, \"onHidden event not received\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ChoiceBoxTest.java","additions":33,"deletions":38,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,3 +44,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +57,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -72,1 +73,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ColorPickerTest.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,17 +28,8 @@\n-import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n-import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n-import com.sun.javafx.tk.Toolkit;\n-import com.sun.javafx.util.Utils;\n-\n-import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import javafx.css.PseudoClass;\n-\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import javafx.scene.control.skin.ComboBoxListViewSkin;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -46,4 +37,4 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n@@ -51,1 +42,0 @@\n-\n@@ -58,0 +48,1 @@\n+import javafx.css.PseudoClass;\n@@ -77,0 +68,1 @@\n+import javafx.scene.control.skin.ComboBoxListViewSkin;\n@@ -87,5 +79,16 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.javafx.util.Utils;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -120,1 +123,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -134,1 +138,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -489,1 +494,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -491,1 +496,3 @@\n-        ComboBoxShim.<String>get_ComboBoxSelectionModel(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ComboBoxShim.<String>get_ComboBoxSelectionModel(null);\n+        });\n@@ -579,1 +586,1 @@\n-        assertNull(\"Expected null, actual value: \" + comboBox.getValue(), comboBox.getValue());\n+        assertNull(comboBox.getValue(), \"Expected null, actual value: \" + comboBox.getValue());\n@@ -723,1 +730,1 @@\n-    @Test(expected=ClassCastException.class)\n+    @Test\n@@ -725,3 +732,5 @@\n-        ComboBox<Integer> cb = new ComboBox<>();\n-        StringConverter<Integer> sc = cb.getConverter();\n-        Integer value = sc.fromString(\"42\");\n+        assertThrows(ClassCastException.class, () -> {\n+            ComboBox<Integer> cb = new ComboBox<>();\n+            StringConverter<Integer> sc = cb.getConverter();\n+            Integer value = sc.fromString(\"42\");\n+        });\n@@ -884,1 +893,1 @@\n-        assertTrue(\"PromptText cannot be bound\", comboBox.getPromptText().equals(\"value\"));\n+        assertTrue(comboBox.getPromptText().equals(\"value\"), \"PromptText cannot be bound\");\n@@ -886,1 +895,1 @@\n-        assertTrue(\"PromptText cannot be bound\", comboBox.getPromptText().equals(\"newvalue\"));\n+        assertTrue(comboBox.getPromptText().equals(\"newvalue\"), \"PromptText cannot be bound\");\n@@ -892,1 +901,1 @@\n-        assertTrue(\"value cannot be bound\", comboBox.getValue().equals(\"value\"));\n+        assertTrue(comboBox.getValue().equals(\"value\"), \"value cannot be bound\");\n@@ -894,1 +903,1 @@\n-        assertTrue(\"value cannot be bound\", comboBox.getValue().equals(\"newvalue\"));\n+        assertTrue(comboBox.getValue().equals(\"newvalue\"), \"value cannot be bound\");\n@@ -929,1 +938,1 @@\n-        assertTrue(\"Selected Index: \" + sm.getSelectedIndex(), sm.isSelected(1));\n+        assertTrue(sm.isSelected(1), \"Selected Index: \" + sm.getSelectedIndex());\n@@ -940,1 +949,1 @@\n-    @Ignore(\"JDK-8091127 Test not working as the heights being returned are not accurate\")\n+    @Disabled(\"JDK-8091127 Test not working as the heights being returned are not accurate\")\n@@ -952,1 +961,1 @@\n-        assertFalse(\"initialHeight: \" + initialHeight, Double.compare(0.0, initialHeight) == 0);\n+        assertFalse(Double.compare(0.0, initialHeight) == 0, \"initialHeight: \" + initialHeight);\n@@ -956,2 +965,1 @@\n-        assertTrue(\"smallHeight: \" + smallHeight + \", initialHeight: \" + initialHeight,\n-                smallHeight != initialHeight && smallHeight < initialHeight);\n+        assertTrue(smallHeight != initialHeight && smallHeight < initialHeight, \"smallHeight: \" + smallHeight + \", initialHeight: \" + initialHeight);\n@@ -975,1 +983,1 @@\n-        assertTrue(\"count: \" + count, count == 1);\n+        assertTrue(count == 1, \"count: \" + count);\n@@ -978,1 +986,1 @@\n-        assertTrue(\"count: \" + count, count == 2);\n+        assertTrue(count == 2, \"count: \" + count);\n@@ -981,1 +989,1 @@\n-        assertTrue(\"count: \" + count, count == 2);\n+        assertTrue(count == 2, \"count: \" + count);\n@@ -985,1 +993,1 @@\n-        assertTrue(\"count: \" + count, count == 3);\n+        assertTrue(count == 3, \"count: \" + count);\n@@ -988,1 +996,1 @@\n-    @Ignore(\"Test not working as the skin is not being properly instantiated\")\n+    @Disabled(\"Test not working as the skin is not being properly instantiated\")\n@@ -1961,2 +1969,1 @@\n-        assertTrue(\"Expect cb2 to be focused, but actual focus owner is: \" + scene.getFocusOwner(),\n-                cb2.isFocused());\n+        assertTrue(cb2.isFocused(), \"Expect cb2 to be focused, but actual focus owner is: \" + scene.getFocusOwner());\n@@ -1967,2 +1974,1 @@\n-        assertEquals(\"Expect cb2 to be focused, but actual focus owner is: \" + scene.getFocusOwner(),\n-                     cb2, scene.getFocusOwner());\n+        assertEquals(cb2, scene.getFocusOwner(), \"Expect cb2 to be focused, but actual focus owner is: \" + scene.getFocusOwner());\n@@ -2161,1 +2167,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -2208,2 +2214,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -2231,2 +2237,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -2319,1 +2325,1 @@\n-        assertEquals(\"ComboBox skinProperty changed more than once, which is not expected.\", 1, skinChangedCount);\n+        assertEquals(1, skinChangedCount, \"ComboBox skinProperty changed more than once, which is not expected.\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":66,"deletions":60,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static javafx.scene.input.KeyCode.F4;\n+import static javafx.scene.input.KeyEvent.KEY_RELEASED;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,2 +36,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -33,13 +38,1 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.input.KeyCode.*;\n-import static javafx.scene.input.KeyEvent.*;\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -52,1 +45,0 @@\n-import javafx.scene.control.skin.ComboBoxPopupControl;\n@@ -57,0 +49,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.tk.Toolkit;\n@@ -63,2 +60,0 @@\n- * <p>\n- * Parameterized in concrete sub of ComboBoxBase and editable.\n@@ -66,1 +61,0 @@\n-@RunWith(Parameterized.class)\n@@ -72,1 +66,0 @@\n-\n@@ -74,2 +67,0 @@\n-    private Supplier<ComboBoxBase> comboFactory;\n-    private boolean editable;\n@@ -77,2 +68,4 @@\n-    @Test\n-    public void testF4TogglePopup() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testF4TogglePopup(Supplier<ComboBoxBase> factory, boolean editable) {\n+        setup(factory);\n@@ -84,1 +77,1 @@\n-        assertTrue(failPrefix(), comboBox.isShowing());\n+        assertTrue(comboBox.isShowing(), failPrefix(editable));\n@@ -86,1 +79,1 @@\n-        assertFalse(failPrefix(), comboBox.isShowing());\n+        assertFalse(comboBox.isShowing(), failPrefix(editable));\n@@ -89,2 +82,4 @@\n-    @Test\n-    public void testF4ConsumeFilterNotTogglePopup() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testF4ConsumeFilterNotTogglePopup(Supplier<ComboBoxBase> factory, boolean editable) {\n+        setup(factory);\n@@ -102,1 +97,1 @@\n-        assertFalse(failPrefix() + \": popup must not be showing\", comboBox.isShowing());\n+        assertFalse(comboBox.isShowing(), failPrefix(editable) + \": popup must not be showing\");\n@@ -105,1 +100,1 @@\n-    protected String failPrefix() {\n+    protected String failPrefix(boolean editable) {\n@@ -112,3 +107,1 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters\/\/(name = \"{index}: editable {1} \")\n-    public static Collection<Object[]> data() {\n+    private static Stream<Arguments> parameters() {\n@@ -116,13 +109,7 @@\n-        Object[][] data = new Object[][] {\n-            {(Supplier)ComboBox::new, false},\n-            {(Supplier)ComboBox::new, true },\n-            {(Supplier)DatePicker::new, false },\n-            {(Supplier)DatePicker::new, true},\n-            {(Supplier)ColorPicker::new, false },\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public ComboSpecialKeyTest(Supplier<ComboBoxBase> factory, boolean editable) {\n-        this.comboFactory = factory;\n-        this.editable = editable;\n+        return Stream.of(\n+            Arguments.of((Supplier)ComboBox::new, false),\n+            Arguments.of((Supplier)ComboBox::new, true),\n+            Arguments.of((Supplier)DatePicker::new, false),\n+            Arguments.of((Supplier)DatePicker::new, true),\n+            Arguments.of((Supplier)ColorPicker::new, false)\n+        );\n@@ -133,2 +120,4 @@\n-    @Test\n-    public void testInitialState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitialState(Supplier<ComboBoxBase> factory, boolean editable) {\n+        setup(factory);\n@@ -153,1 +142,1 @@\n-    @After\n+    @AfterEach\n@@ -158,4 +147,3 @@\n-    @Before\n-    public void setup() {\n-        ComboBoxPopupControl c;\n-\n+    \/\/ @Before\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Supplier<ComboBoxBase> factory) {\n@@ -163,1 +151,0 @@\n-\n@@ -168,1 +155,1 @@\n-        comboBox = comboFactory.get();\n+        comboBox = factory.get();\n@@ -171,2 +158,0 @@\n-\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboSpecialKeyTest.java","additions":43,"deletions":58,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,11 @@\n-import com.sun.javafx.scene.control.ContextMenuContent;\n-import com.sun.javafx.scene.control.ContextMenuContentShim;\n-import javafx.geometry.Insets;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.text.Font;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import static com.sun.javafx.scene.control.ContextMenuContentShim.getCurrentFocusedIndex;\n+import static com.sun.javafx.scene.control.ContextMenuContentShim.getCurrentFocusedItem;\n+import static com.sun.javafx.scene.control.ContextMenuContentShim.getOpenSubMenu;\n+import static com.sun.javafx.scene.control.ContextMenuContentShim.getShowingMenuContent;\n+import static com.sun.javafx.scene.control.ContextMenuContentShim.getShowingSubMenu;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.Optional;\n@@ -38,0 +43,1 @@\n+import javafx.geometry.Insets;\n@@ -40,0 +46,1 @@\n+import javafx.scene.Node;\n@@ -49,9 +56,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static com.sun.javafx.scene.control.ContextMenuContentShim.*;\n-\n-import java.util.Optional;\n-import javafx.scene.Node;\n@@ -59,0 +57,7 @@\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.text.Font;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.ContextMenuContent;\n+import com.sun.javafx.scene.control.ContextMenuContentShim;\n@@ -61,0 +66,1 @@\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -128,1 +134,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -155,1 +162,2 @@\n-    @After public void after() {\n+    @AfterEach\n+    public void after() {\n@@ -329,2 +337,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -356,2 +363,1 @@\n-        assertEquals(\"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText(),\n-                menuItem, focusedItem);\n+        assertEquals(menuItem, focusedItem, \"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText());\n@@ -363,2 +369,1 @@\n-        assertEquals(\"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText(),\n-                subMenu, focusedItem);\n+        assertEquals(subMenu, focusedItem, \"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText());\n@@ -373,2 +378,1 @@\n-        assertEquals(\"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText(),\n-                menuItem, focusedItem);\n+        assertEquals(menuItem, focusedItem, \"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText());\n@@ -387,2 +391,1 @@\n-        assertEquals(\"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText(),\n-                subMenu, focusedItem);\n+        assertEquals(subMenu, focusedItem, \"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText());\n@@ -394,2 +397,1 @@\n-        assertEquals(\"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText(),\n-                menuItem, focusedItem);\n+        assertEquals(menuItem, focusedItem, \"Expected \" + menuItem.getText() + \", found \" + focusedItem.getText());\n@@ -409,2 +411,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -416,2 +417,1 @@\n-        assertEquals(\"Expected \" + customMenuItem.getText() + \", found \" + focusedItem.getText(),\n-                customMenuItem, focusedItem);\n+        assertEquals(customMenuItem, focusedItem, \"Expected \" + customMenuItem.getText() + \", found \" + focusedItem.getText());\n@@ -423,2 +423,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -434,2 +433,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -441,2 +439,1 @@\n-        assertEquals(\"Expected \" + customMenuItem.getText() + \", found \" + focusedItem.getText(),\n-                customMenuItem, focusedItem);\n+        assertEquals(customMenuItem, focusedItem, \"Expected \" + customMenuItem.getText() + \", found \" + focusedItem.getText());\n@@ -448,2 +445,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -460,2 +456,1 @@\n-        assertEquals(\"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText(),\n-                subMenuItem1, focusedItem);\n+        assertEquals(subMenuItem1, focusedItem, \"Expected \" + subMenuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -490,2 +485,1 @@\n-        assertEquals(\"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText(),\n-                subMenu, focusedItem);\n+        assertEquals(subMenu, focusedItem, \"Expected \" + subMenu.getText() + \", found \" + focusedItem.getText());\n@@ -591,1 +585,1 @@\n-        assertEquals(\"Expected \" + menuItem1.getText() + \", found \" + focusedItem.getText(), menuItem1, focusedItem);\n+        assertEquals(menuItem1, focusedItem, \"Expected \" + menuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -596,1 +590,1 @@\n-        assertEquals(\"Expected \" + menuItem3.getText() + \", found \" + focusedItem.getText(), menuItem3, focusedItem);\n+        assertEquals(menuItem3, focusedItem, \"Expected \" + menuItem3.getText() + \", found \" + focusedItem.getText());\n@@ -601,1 +595,1 @@\n-        assertEquals(\"Expected \" + menuItem1.getText() + \", found \" + focusedItem.getText(), menuItem1, focusedItem);\n+        assertEquals(menuItem1, focusedItem, \"Expected \" + menuItem1.getText() + \", found \" + focusedItem.getText());\n@@ -620,2 +614,1 @@\n-        assertEquals(\"Expected \" + item1.getText() + \", found \" + focusedItem.getText(),\n-                item1, focusedItem);\n+        assertEquals(item1, focusedItem, \"Expected \" + item1.getText() + \", found \" + focusedItem.getText());\n@@ -627,2 +620,1 @@\n-        assertEquals(\"Expected \" + item2.getText() + \", found \" + focusedItem.getText(),\n-                item2, focusedItem);\n+        assertEquals(item2, focusedItem, \"Expected \" + item2.getText() + \", found \" + focusedItem.getText());\n@@ -645,2 +637,1 @@\n-        assertEquals(\"Expected \" + item1.getText() + \", found \" + focusedItem.getText(),\n-                item1, focusedItem);\n+        assertEquals(item1, focusedItem, \"Expected \" + item1.getText() + \", found \" + focusedItem.getText());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ContextMenuTest.java","additions":46,"deletions":55,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getListenerCount;\n+import java.lang.ref.WeakReference;\n@@ -32,1 +36,7 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n@@ -35,2 +45,3 @@\n-\n-import org.junit.Ignore;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -40,5 +51,0 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import org.junit.Test;\n-\n-import java.lang.ref.WeakReference;\n@@ -46,3 +52,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertFalse;\n@@ -235,1 +238,1 @@\n-    @Ignore(\"JDK-8283449\")\n+    @Disabled(\"JDK-8283449\")\n@@ -304,1 +307,1 @@\n-    @Ignore \/\/ Only the first tab's context menu gets a scene change listener right now\n+    @Disabled \/\/ Only the first tab's context menu gets a scene change listener right now\n@@ -395,1 +398,1 @@\n-    @Ignore(\"JDK-8268374\")\n+    @Disabled(\"JDK-8268374\")\n@@ -420,1 +423,1 @@\n-    @Ignore(\"JDK-8268374\")\n+    @Disabled(\"JDK-8268374\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlAcceleratorSupportTest.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -33,4 +33,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +40,1 @@\n-@Ignore\n+@Disabled\n@@ -49,1 +48,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlChildrenTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,5 +37,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -41,3 +41,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +52,1 @@\n-@Ignore\n+@Disabled\n@@ -64,1 +65,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -68,1 +70,0 @@\n-\/\/        t.setSkin(new SkinStub<Tooltip>(t));\n@@ -105,1 +106,1 @@\n-    @Ignore (\"I need some means of being able to check whether CSS has been told this property is set manually\")\n+    @Disabled(\"I need some means of being able to check whether CSS has been told this property is set manually\")\n@@ -131,1 +132,3 @@\n-                if (calledOnce) org.junit.Assert.fail();\n+                if (calledOnce) {\n+                    fail();\n+                }\n@@ -149,1 +152,1 @@\n-    @Ignore (\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n+    @Disabled(\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n@@ -156,1 +159,1 @@\n-    @Ignore (\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n+    @Disabled(\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n@@ -163,1 +166,1 @@\n-    @Ignore (\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n+    @Disabled(\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n@@ -170,1 +173,1 @@\n-    @Ignore (\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n+    @Disabled(\"This spits out annoying debug statements, re-enable when we can disable all logging\")\n@@ -198,1 +201,2 @@\n-    @Test public void getUserAgentStylesheet() {\n+    @Test\n+    public void getUserAgentStylesheet() {\n@@ -200,1 +204,1 @@\n-        org.junit.Assume.assumeNotNull(ControlSkinTest.class.getResource(\"ControlSkinTest.css\"));\n+        Assumptions.assumeTrue(ControlSkinTest.class.getResource(\"ControlSkinTest.css\") != null);\n@@ -217,1 +221,0 @@\n-\n@@ -220,1 +223,2 @@\n-    @Test public void getUserAgentStylesheetDoesNotOverrideUserSetValue() {\n+    @Test\n+    public void getUserAgentStylesheetDoesNotOverrideUserSetValue() {\n@@ -222,1 +226,1 @@\n-        org.junit.Assume.assumeNotNull(ControlSkinTest.class.getResource(\"ControlSkinTest.css\"));\n+        Assumptions.assumeTrue(ControlSkinTest.class.getResource(\"ControlSkinTest.css\") != null);\n@@ -239,1 +243,0 @@\n-\n@@ -242,1 +245,2 @@\n-    @Test public void getUserAgentStylesheetInlineStylePrevails() {\n+    @Test\n+    public void getUserAgentStylesheetInlineStylePrevails() {\n@@ -244,1 +248,1 @@\n-        org.junit.Assume.assumeNotNull(ControlSkinTest.class.getResource(\"ControlSkinTest.css\"));\n+        Assumptions.assumeTrue(ControlSkinTest.class.getResource(\"ControlSkinTest.css\") != null);\n@@ -262,1 +266,0 @@\n-\n@@ -265,1 +268,2 @@\n-    @Test public void getUserAgentStylesheetWithSkin() {\n+    @Test\n+    public void getUserAgentStylesheetWithSkin() {\n@@ -267,1 +271,1 @@\n-        org.junit.Assume.assumeNotNull(ControlSkinTest.class.getResource(\"ControlSkinTest.css\"));\n+        Assumptions.assumeTrue(ControlSkinTest.class.getResource(\"ControlSkinTest.css\") != null);\n@@ -289,1 +293,0 @@\n-\n@@ -291,1 +294,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlSkinTest.java","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -43,4 +50,1 @@\n-import javafx.scene.Group;\n-import javafx.scene.Node;\n-import javafx.scene.shape.Rectangle;\n-import com.sun.javafx.scene.control.Logging;\n+import javafx.css.CssMetaData;\n@@ -49,0 +53,2 @@\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n@@ -54,3 +60,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import javafx.scene.shape.Rectangle;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -59,2 +66,1 @@\n-\n-import static org.junit.Assert.*;\n+import com.sun.javafx.scene.control.Logging;\n@@ -89,1 +95,0 @@\n-\n@@ -92,1 +97,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -627,1 +633,1 @@\n-    @Ignore (\"What should happen when the pref width is set to USE_PREF_SIZE? Seems it should be an exception\")\n+    @Disabled(\"What should happen when the pref width is set to USE_PREF_SIZE? Seems it should be an exception\")\n@@ -712,1 +718,1 @@\n-    @Ignore (\"What should happen when the pref width is set to USE_PREF_SIZE? Seems it should be an exception\")\n+    @Disabled(\"What should happen when the pref width is set to USE_PREF_SIZE? Seems it should be an exception\")\n@@ -808,1 +814,1 @@\n-        assertTrue(\"Control.setSkin() must call Skin.install()\", skin.installed);\n+        assertTrue(skin.installed, \"Control.setSkin() must call Skin.install()\");\n@@ -1035,2 +1041,1 @@\n-            \/\/System.err.println(f.getPath());\n-            assertTrue(\"\" + f.getCanonicalPath() + \" is not a directory\", f.isDirectory());\n+            assertTrue(f.isDirectory(), f.getCanonicalPath() + \" is not a directory\");\n@@ -1061,1 +1066,1 @@\n-                    assertNotNull(what, writable);\n+                    assertNotNull(writable, what);\n@@ -1072,2 +1077,1 @@\n-                        assertEquals(what, d1, d2, .001);\n-\n+                        assertEquals(d1, d2, .001, what);\n@@ -1075,1 +1079,1 @@\n-                        assertTrue(what, Arrays.equals((Object[])defaultValue, (Object[])initialValue));\n+                        assertTrue(Arrays.equals((Object[])defaultValue, (Object[])initialValue), what);\n@@ -1077,1 +1081,1 @@\n-                        assertEquals(what, defaultValue, initialValue);\n+                        assertEquals(defaultValue, initialValue, what);\n@@ -1079,1 +1083,0 @@\n-\n@@ -1081,1 +1084,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlTest.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,20 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n@@ -39,1 +53,1 @@\n-@Ignore\n+@Disabled\n@@ -45,1 +59,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -50,1 +65,0 @@\n-\/\/        t.setSkin(new SkinStub<Tooltip>(t));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlTooltipTest.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,3 +31,0 @@\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -47,0 +43,1 @@\n+import com.sun.javafx.tk.Toolkit;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlUtils.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -33,0 +40,1 @@\n+import javafx.scene.control.CustomMenuItem;\n@@ -34,2 +42,2 @@\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -37,6 +45,1 @@\n-import javafx.scene.control.CustomMenuItem;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -49,1 +52,1 @@\n-    private CustomMenuItem customMenuItem, cmi;\/\/Empty string\n+    private CustomMenuItem customMenuItem, cmi;\n@@ -54,1 +57,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -97,1 +101,1 @@\n-        assertTrue(\"hideOnClickProperty cannot be bound\", customMenuItem.hideOnClickProperty().getValue());\n+        assertTrue(customMenuItem.hideOnClickProperty().getValue(), \"hideOnClickProperty cannot be bound\");\n@@ -99,1 +103,1 @@\n-        assertFalse(\"hideOnClickProperty cannot be bound\", customMenuItem.hideOnClickProperty().getValue());\n+        assertFalse(customMenuItem.hideOnClickProperty().getValue(), \"hideOnClickProperty cannot be bound\");\n@@ -105,1 +109,1 @@\n-        assertNull(\"contentProperty cannot be bound\", customMenuItem.contentProperty().getValue());\n+        assertNull(customMenuItem.contentProperty().getValue(), \"contentProperty cannot be bound\");\n@@ -107,1 +111,1 @@\n-        assertSame(\"contentProperty cannot be bound\", customMenuItem.contentProperty().getValue(), node);\n+        assertSame(customMenuItem.contentProperty().getValue(), node, \"contentProperty cannot be bound\");\n@@ -309,1 +313,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CustomMenuItemTest.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,3 +34,0 @@\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -40,4 +42,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -46,2 +47,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -54,1 +53,2 @@\n-    @Before public void setup() throws Exception {\n+    @BeforeEach\n+    public void setup() throws Exception {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DateCellTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,9 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -30,1 +39,9 @@\n-import java.time.chrono.*;\n+import java.time.chrono.AbstractChronology;\n+import java.time.chrono.ChronoLocalDate;\n+import java.time.chrono.Chronology;\n+import java.time.chrono.Era;\n+import java.time.chrono.IsoChronology;\n+import java.time.chrono.JapaneseChronology;\n+import java.time.chrono.MinguoChronology;\n+import java.time.chrono.MinguoDate;\n+import java.time.chrono.MinguoEra;\n@@ -34,8 +51,2 @@\n-import java.util.*;\n-\n-import javafx.scene.control.Button;\n-import javafx.scene.layout.HBox;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import com.sun.javafx.tk.Toolkit;\n+import java.util.List;\n+import java.util.Locale;\n@@ -50,0 +61,1 @@\n+import javafx.scene.control.Button;\n@@ -53,0 +65,1 @@\n+import javafx.scene.control.skin.DatePickerSkin;\n@@ -54,0 +67,1 @@\n+import javafx.scene.layout.HBox;\n@@ -57,12 +71,8 @@\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-\n-import javafx.scene.control.skin.DatePickerSkin;\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -94,1 +104,2 @@\n-    @BeforeClass public static void setupOnce() {\n+    @BeforeAll\n+    public static void setupOnce() {\n@@ -99,1 +110,2 @@\n-    @AfterClass public static void tearDownOnce() {\n+    @AfterAll\n+    public static void tearDownOnce() {\n@@ -103,1 +115,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -376,1 +389,1 @@\n-        assertTrue(\"PromptText cannot be bound\", datePicker.getPromptText().equals(\"value\"));\n+        assertTrue(datePicker.getPromptText().equals(\"value\"), \"PromptText cannot be bound\");\n@@ -378,1 +391,1 @@\n-        assertTrue(\"PromptText cannot be bound\", datePicker.getPromptText().equals(\"newvalue\"));\n+        assertTrue(datePicker.getPromptText().equals(\"newvalue\"), \"PromptText cannot be bound\");\n@@ -384,1 +397,1 @@\n-        assertTrue(\"value cannot be bound\", datePicker.getValue().equals(today));\n+        assertTrue(datePicker.getValue().equals(today), \"value cannot be bound\");\n@@ -387,1 +400,1 @@\n-        assertTrue(\"value cannot be bound\", datePicker.getValue().equals(tomorrow));\n+        assertTrue(datePicker.getValue().equals(tomorrow), \"value cannot be bound\");\n@@ -393,1 +406,1 @@\n-        assertTrue(\"Chronology cannot be bound\", datePicker.getChronology().equals(IsoChronology.INSTANCE));\n+        assertTrue(datePicker.getChronology().equals(IsoChronology.INSTANCE), \"Chronology cannot be bound\");\n@@ -395,1 +408,1 @@\n-        assertTrue(\"Chronology cannot be bound\", datePicker.getChronology().equals(JapaneseChronology.INSTANCE));\n+        assertTrue(datePicker.getChronology().equals(JapaneseChronology.INSTANCE), \"Chronology cannot be bound\");\n@@ -609,2 +622,1 @@\n-        assertTrue(\"Expect dp2 to be focused, but actual focus owner is: \" + scene.getFocusOwner(),\n-                dp2.isFocused());\n+        assertTrue(dp2.isFocused(), \"Expect dp2 to be focused, but actual focus owner is: \" + scene.getFocusOwner());\n@@ -615,2 +627,1 @@\n-        assertEquals(\"Expect dp2 to be focused, but actual focus owner is: \" + scene.getFocusOwner(),\n-                     dp2, scene.getFocusOwner());\n+        assertEquals(dp2, scene.getFocusOwner(), \"Expect dp2 to be focused, but actual focus owner is: \" + scene.getFocusOwner());\n@@ -671,1 +682,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -673,3 +684,4 @@\n-        datePicker.setEditable(true);\n-        datePicker.getEditor().setText(\"Some Date\");\n-        datePicker.commitValue();\n+        assertThrows(RuntimeException.class, () -> {\n+            datePicker.setEditable(true);\n+            datePicker.getEditor().setText(\"Some Date\");\n+            datePicker.commitValue();\n@@ -677,2 +689,3 @@\n-        assertNull(datePicker.getValue());\n-        assertEquals(\"Some Date\", datePicker.getEditor().getText());\n+            assertNull(datePicker.getValue());\n+            assertEquals(\"Some Date\", datePicker.getEditor().getText());\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DatePickerTest.java","additions":53,"deletions":40,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static javafx.scene.input.KeyCode.ENTER;\n+import static javafx.scene.input.KeyCode.ESCAPE;\n+import static javafx.scene.input.KeyEvent.KEY_PRESSED;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,2 +35,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -33,12 +37,1 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.input.KeyCode.*;\n-import static javafx.scene.input.KeyEvent.*;\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -54,0 +47,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.tk.Toolkit;\n@@ -75,1 +73,0 @@\n-@RunWith(Parameterized.class)\n@@ -162,2 +159,0 @@\n-\n-\n@@ -172,28 +167,12 @@\n-    private ButtonType buttonType;\n-    private boolean consume;\n-    private boolean registerAfterShowing;\n-\n-    \/\/ TODO name doesn't compile with gradle :controls:test\n-    \/\/ because the junit version is 4.8.2 - name was introduced in 4.11\n-    \/\/ commenting for now until upgrade to newer junit\n-    @Parameterized.Parameters \/\/( name = \"{index}: Button {0}, consuming {1}, registerAfterShowing {2} \" )\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            \/\/ buttonType, consuming, registerAfterShowing\n-            {new ButtonType(ButtonState.DEFAULT), true, true},\n-            {new ButtonType(ButtonState.DEFAULT), true, false},\n-            {new ButtonType(ButtonState.DEFAULT), false, true},\n-            {new ButtonType(ButtonState.DEFAULT), false, false},\n-            {new ButtonType(ButtonState.CANCEL), true, true},\n-            {new ButtonType(ButtonState.CANCEL), true, false},\n-            {new ButtonType(ButtonState.CANCEL), false, true},\n-            {new ButtonType(ButtonState.CANCEL), false, false},\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public DefaultCancelButtonTestBase(ButtonType buttonType, boolean consume,\n-            boolean registerAfterShowing) {\n-        this.buttonType = buttonType;\n-        this.consume = consume;\n-        this.registerAfterShowing = registerAfterShowing;\n+    \/\/( name = \"{index}: Button {0}, consuming {1}, registerAfterShowing {2} \" )\n+    static Stream<Arguments> parameters() {\n+        return Stream.of(\n+                Arguments.of(new ButtonType(ButtonState.DEFAULT), true, true),\n+                Arguments.of(new ButtonType(ButtonState.DEFAULT), true, false),\n+                Arguments.of(new ButtonType(ButtonState.DEFAULT), false, true),\n+                Arguments.of(new ButtonType(ButtonState.DEFAULT), false, false),\n+                Arguments.of(new ButtonType(ButtonState.CANCEL), true, true),\n+                Arguments.of(new ButtonType(ButtonState.CANCEL), true, false),\n+                Arguments.of(new ButtonType(ButtonState.CANCEL), false, true),\n+                Arguments.of(new ButtonType(ButtonState.CANCEL), false, false)\n+        );\n@@ -202,4 +181,5 @@\n-\n-    @Test\n-    public void testFallbackFilter() {\n-        registerHandlerAndAssertFallbackNotification(this::addEventFilter);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFallbackFilter(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        setup(buttonType);\n+        registerHandlerAndAssertFallbackNotification(buttonType, consume, registerAfterShowing, this::addEventFilter);\n@@ -208,4 +188,5 @@\n-    @Test\n-    public void testFallbackHandler() {\n-        registerHandlerAndAssertFallbackNotification(this::addEventHandler);\n-\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFallbackHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        setup(buttonType);\n+        registerHandlerAndAssertFallbackNotification(buttonType, consume, registerAfterShowing, this::addEventHandler);\n@@ -214,4 +195,5 @@\n-    @Test\n-    public void testFallbackSingletonHandler() {\n-        registerHandlerAndAssertFallbackNotification(this::setOnKeyPressed);\n-\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFallbackSingletonHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        setup(buttonType);\n+        registerHandlerAndAssertFallbackNotification(buttonType, consume, registerAfterShowing, this::setOnKeyPressed);\n@@ -220,2 +202,3 @@\n-    @Test\n-    public void testFallbackNoHandler() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFallbackNoHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n@@ -223,0 +206,1 @@\n+        setup(buttonType);\n@@ -227,1 +211,6 @@\n-    protected void registerHandlerAndAssertFallbackNotification(Consumer<EventHandler<KeyEvent>> consumer) {\n+    protected void registerHandlerAndAssertFallbackNotification(\n+        ButtonType buttonType,\n+        boolean consume,\n+        boolean registerAfterShowing,\n+        Consumer<EventHandler<KeyEvent>> consumer\n+    ) {\n@@ -281,1 +270,1 @@\n-        assertEquals(key + exp + \" trigger \", expected, actions.size());\n+        assertEquals(expected, actions.size(), key + exp + \" trigger \");\n@@ -288,2 +277,4 @@\n-    @Test\n-    public void testInitial() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInitial(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        setup(buttonType);\n@@ -296,2 +287,1 @@\n-\n-    protected boolean isEnter() {\n+    protected boolean isEnter(ButtonType buttonType) {\n@@ -323,2 +313,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    protected void setup(ButtonType buttonType) {\n@@ -327,1 +318,0 @@\n-\n@@ -330,1 +320,0 @@\n-\n@@ -333,1 +322,1 @@\n-    @After\n+    @AfterEach\n@@ -339,1 +328,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DefaultCancelButtonTestBase.java","additions":60,"deletions":72,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -42,3 +43,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,2 +48,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -54,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -60,1 +59,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DialogPaneTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.stream.Stream;\n@@ -47,5 +47,3 @@\n-import static org.junit.Assert.assertTrue;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -53,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -55,22 +52,20 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { CheckBoxTreeItem.TreeModificationEvent.ANY, checkBoxTreeEvent(), Rectangle.class, true},\n-            { CheckBoxTreeItem.TreeModificationEvent.ANY, listViewEditEvent(), Rectangle.class, false},\n-            { ListView.EditEvent.ANY, listViewEditEvent(), ListView.class, true},\n-            { ListView.EditEvent.ANY, checkBoxTreeEvent(), ListView.class, false},\n-            { ScrollToEvent.ANY, scrollToEvent(), Rectangle.class, true},\n-            { ScrollToEvent.ANY, listViewEditEvent(), Rectangle.class, false},\n-            { SortEvent.ANY, sortEvent(), Rectangle.class, true},\n-            { SortEvent.ANY, scrollToEvent(), Rectangle.class, false},\n-            { TableColumn.CellEditEvent.ANY, tableColumnCellEditEvent(), Rectangle.class, true },\n-            { TableColumn.CellEditEvent.ANY, listViewEditEvent(), Rectangle.class, false },\n-            { TreeItem.TreeModificationEvent.ANY, treeItemModificationEvent(), Rectangle.class, true},\n-            { TreeItem.TreeModificationEvent.ANY, checkBoxTreeEvent(), Rectangle.class, false},\n-            { TreeTableColumn.CellEditEvent.ANY, treeTableColumnCellEditEvent(), Rectangle.class, true },\n-            { TreeTableColumn.CellEditEvent.ANY, tableColumnCellEditEvent(), Rectangle.class, false },\n-            { TreeTableView.EditEvent.ANY, treeTableViewEditEvent(), TreeTableView.class, true },\n-            { TreeTableView.EditEvent.ANY, treeTableColumnCellEditEvent(), TreeTableView.class, false },\n-            { TreeView.EditEvent.ANY, treeViewEditEvent(), TreeView.class, true },\n-            { TreeView.EditEvent.ANY, treeTableViewEditEvent(), TreeView.class, false },\n-        });\n+    private static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            Arguments.of(CheckBoxTreeItem.TreeModificationEvent.ANY, checkBoxTreeEvent(), Rectangle.class, true),\n+            Arguments.of(CheckBoxTreeItem.TreeModificationEvent.ANY, listViewEditEvent(), Rectangle.class, false),\n+            Arguments.of(ListView.EditEvent.ANY, listViewEditEvent(), ListView.class, true),\n+            Arguments.of(ListView.EditEvent.ANY, checkBoxTreeEvent(), ListView.class, false),\n+            Arguments.of(ScrollToEvent.ANY, scrollToEvent(), Rectangle.class, true),\n+            Arguments.of(ScrollToEvent.ANY, listViewEditEvent(), Rectangle.class, false),\n+            Arguments.of(SortEvent.ANY, sortEvent(), Rectangle.class, true),\n+            Arguments.of(SortEvent.ANY, scrollToEvent(), Rectangle.class, false),\n+            Arguments.of(TableColumn.CellEditEvent.ANY, tableColumnCellEditEvent(), Rectangle.class, true),\n+            Arguments.of(TableColumn.CellEditEvent.ANY, listViewEditEvent(), Rectangle.class, false),\n+            Arguments.of(TreeItem.TreeModificationEvent.ANY, treeItemModificationEvent(), Rectangle.class, true),\n+            Arguments.of(TreeItem.TreeModificationEvent.ANY, checkBoxTreeEvent(), Rectangle.class, false),\n+            Arguments.of(TreeTableColumn.CellEditEvent.ANY, treeTableColumnCellEditEvent(), Rectangle.class, true),\n+            Arguments.of(TreeTableColumn.CellEditEvent.ANY, tableColumnCellEditEvent(), Rectangle.class, false),\n+            Arguments.of(TreeTableView.EditEvent.ANY, treeTableViewEditEvent(), TreeTableView.class, true),\n+            Arguments.of(TreeTableView.EditEvent.ANY, treeTableColumnCellEditEvent(), TreeTableView.class, false),\n+            Arguments.of(TreeView.EditEvent.ANY, treeViewEditEvent(), TreeView.class, true),\n+            Arguments.of(TreeView.EditEvent.ANY, treeTableViewEditEvent(), TreeView.class, false));\n@@ -80,4 +75,0 @@\n-    private EventType type;\n-    private Event event;\n-    private Class target;\n-    private boolean matches;\n@@ -85,9 +76,3 @@\n-    public EventAnyTest(EventType type, Event event, Class target, boolean matches) {\n-        this.type = type;\n-        this.event = event;\n-        this.matches = matches;\n-        this.target = target;\n-    }\n-\n-    @Test\n-    public void testEventDelivery() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEventDelivery(EventType type, Event event, Class target, boolean matches) throws Exception {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/EventAnyTest.java","additions":29,"deletions":44,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import javafx.event.ActionEvent;\n-import javafx.event.EventHandler;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,0 +31,2 @@\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n@@ -40,7 +41,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,1 +46,0 @@\n-@RunWith(Parameterized.class)\n@@ -52,11 +47,10 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                {Button.class},\n-                {CheckBox.class},\n-                {Hyperlink.class},\n-                {RadioButton.class},\n-                {MenuButton.class},\n-                {SplitMenuButton.class},\n-                {ToggleButton.class}\n-        });\n+    public static Collection<Class> parameters() {\n+        return Arrays.asList(\n+            Button.class,\n+            CheckBox.class,\n+            Hyperlink.class,\n+            RadioButton.class,\n+            MenuButton.class,\n+            SplitMenuButton.class,\n+            ToggleButton.class\n+        );\n@@ -66,5 +60,0 @@\n-    private Class type;\n-\n-    public FireButtonBaseTest(Class type) {\n-        this.type = type;\n-    }\n@@ -72,2 +61,8 @@\n-    @Before public void setup() throws Exception {\n-        btn = (ButtonBase) type.getDeclaredConstructor().newInstance();\n+    \/\/@BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class type) {\n+        try {\n+            btn = (ButtonBase) type.getDeclaredConstructor().newInstance();\n+        } catch(Exception e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -76,1 +71,4 @@\n-    @Test public void onActionCalledWhenButtonIsFired() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void onActionCalledWhenButtonIsFired(Class type) {\n+        setup(type);\n@@ -83,1 +81,4 @@\n-    @Test public void onActionCalledWhenNullWhenButtonIsFiredIsNoOp() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void onActionCalledWhenNullWhenButtonIsFiredIsNoOp(Class type) {\n+        setup(type);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/FireButtonBaseTest.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,5 +37,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -41,0 +41,1 @@\n+import javafx.css.CssMetaData;\n@@ -48,3 +49,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +55,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -174,1 +175,1 @@\n-            org.junit.Assert.fail(e.toString());\n+            fail(e);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/HyperlinkTest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -29,3 +32,1 @@\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +54,1 @@\n-    @Test (expected = IllegalArgumentException.class)\n+    @Test\n@@ -55,1 +56,3 @@\n-        new IndexRange(20, 10);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new IndexRange(20, 10);\n+        });\n@@ -65,1 +68,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -67,1 +70,3 @@\n-        new IndexRange(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new IndexRange(null);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/IndexRangeTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,6 +34,2 @@\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,1 +39,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,2 +40,1 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameterized.Parameters public static Collection implementations() {\n+    public static Collection<TestParameters> parameters() {\n@@ -62,1 +58,1 @@\n-        List params = new LinkedList();\n+        List<TestParameters> params = new LinkedList<>();\n@@ -87,1 +83,1 @@\n-                    params.add(new Object[] {param});\n+                    params.add(param);\n@@ -95,7 +91,3 @@\n-    private TestParameters params;\n-\n-    public IndexRangeValueOfTest(TestParameters params) {\n-        this.params = params;\n-    }\n-\n-    @Test public void testValueOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testValueOf(TestParameters params) {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/IndexRangeValueOfTest.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -29,5 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/IndexedCellTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/InputMapTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,8 +28,8 @@\n-import com.sun.javafx.scene.NodeHelper;\n-import javafx.css.CssMetaData;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getListenerCount;\n@@ -38,0 +38,1 @@\n+import javafx.css.CssMetaData;\n@@ -42,3 +43,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -49,1 +50,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -154,1 +156,1 @@\n-            org.junit.Assert.fail(e.toString());\n+            fail(e);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/LabelTest.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,7 @@\n-import javafx.css.CssMetaData;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -43,0 +43,1 @@\n+import javafx.css.CssMetaData;\n@@ -56,4 +57,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -71,1 +71,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -163,1 +164,1 @@\n-            org.junit.Assert.fail(e.toString());\n+            fail(e);\n@@ -584,1 +585,1 @@\n-    @Ignore (\"CSS Graphic must be a URL, and then it will try to load the image. Not sure how to test.\")\n+    @Disabled(\"CSS Graphic must be a URL, and then it will try to load the image. Not sure how to test.\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/LabeledTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,3 +28,17 @@\n-import javafx.scene.control.IndexedCell;\n-import javafx.scene.control.skin.ListCellSkin;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertListenerListContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertListenerListDoesNotContain;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertValueListenersContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertValueListenersDoesNotContain;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getInvalidationListener;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getListChangeListener;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -35,1 +49,0 @@\n-\n@@ -37,0 +50,1 @@\n+import javafx.scene.control.IndexedCell;\n@@ -44,10 +58,4 @@\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import javafx.scene.control.skin.ListCellSkin;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -55,0 +63,1 @@\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -57,4 +66,0 @@\n-import static javafx.scene.control.ControlShim.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n-\n@@ -69,1 +74,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -83,1 +89,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -378,3 +385,3 @@\n-        assertEquals(\"off range index\", index, cell.getIndex());\n-        assertNull(\"off range cell item must be null\", cell.getItem());\n-        assertTrue(\"off range cell must be empty\", cell.isEmpty());\n+        assertEquals(index, cell.getIndex(), \"off range index\");\n+        assertNull(cell.getItem(), \"off range cell item must be null\");\n+        assertTrue(cell.isEmpty(), \"off range cell must be empty\");\n@@ -388,3 +395,3 @@\n-        assertEquals(\"in range index\", index, cell.getIndex());\n-        assertEquals(\"in range cell item must be same as model item\", model.get(index), cell.getItem());\n-        assertFalse(\"in range cell must not be empty\", cell.isEmpty());\n+        assertEquals(index, cell.getIndex(), \"in range index\");\n+        assertEquals(model.get(index), cell.getItem(), \"in range cell item must be same as model item\");\n+        assertFalse(cell.isEmpty(), \"in range cell must not be empty\");\n@@ -688,1 +695,1 @@\n-        assertEquals(\"startEdit must not fire event while editing\", 0, events.size());\n+        assertEquals(0, events.size(), \"startEdit must not fire event while editing\");\n@@ -786,1 +793,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -800,1 +807,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -814,1 +821,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -828,1 +835,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -842,1 +849,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -855,1 +862,1 @@\n-        assertEquals(\"removing item must cancel edit on list\", -1, list.getEditingIndex());\n+        assertEquals(-1, list.getEditingIndex(), \"removing item must cancel edit on list\");\n@@ -857,1 +864,1 @@\n-        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+        assertEquals(editingIndex, events.get(0).getIndex(), \"editing location of cancel event\");\n@@ -868,2 +875,2 @@\n-        assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-        assertEquals(\"must not fire editStart\", 0, events.size());\n+        assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+        assertEquals(0, events.size(), \"must not fire editStart\");\n@@ -878,2 +885,2 @@\n-        assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-        assertEquals(\"list editing location must not be updated\", -1, list.getEditingIndex());\n+        assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+        assertEquals(-1, list.getEditingIndex(), \"list editing location must not be updated\");\n@@ -899,2 +906,2 @@\n-        assertEquals(\"sanity: value committed\", value, list.getItems().get(editingIndex));\n-        assertEquals(\"commit must not have fired editCancel\", 0, events.size());\n+        assertEquals(value, list.getItems().get(editingIndex), \"sanity: value committed\");\n+        assertEquals(0, events.size(), \"commit must not have fired editCancel\");\n@@ -991,9 +998,3 @@\n-        assertEquals(\"pref height must be fixedCellSize\",\n-                listView.getFixedCellSize(),\n-                cell.prefHeight(-1), 1);\n-        assertEquals(\"min height must be fixedCellSize\",\n-                listView.getFixedCellSize(),\n-                cell.minHeight(-1), 1);\n-        assertEquals(\"max height must be fixedCellSize\",\n-                listView.getFixedCellSize(),\n-                cell.maxHeight(-1), 1);\n+        assertEquals(listView.getFixedCellSize(), cell.prefHeight(-1), 1, \"pref height must be fixedCellSize\");\n+        assertEquals(listView.getFixedCellSize(), cell.minHeight(-1), 1, \"min height must be fixedCellSize\");\n+        assertEquals(listView.getFixedCellSize(), cell.maxHeight(-1), 1, \"max height must be fixedCellSize\");\n@@ -1034,2 +1035,2 @@\n-        assertEquals(\"sanity: list editingIndex \", listEditingIndex, list.getEditingIndex());\n-        assertFalse(\"sanity: cell must not be editing\", cell.isEditing());\n+        assertEquals(listEditingIndex, list.getEditingIndex(), \"sanity: list editingIndex \");\n+        assertFalse(cell.isEditing(), \"sanity: cell must not be editing\");\n@@ -1037,2 +1038,2 @@\n-        assertEquals(\"sanity: index updated \", listEditingIndex, cell.getIndex());\n-        assertEquals(\"list editingIndex unchanged by cell\", listEditingIndex, list.getEditingIndex());\n+        assertEquals(listEditingIndex, cell.getIndex(), \"sanity: index updated \");\n+        assertEquals(listEditingIndex, list.getEditingIndex(), \"list editingIndex unchanged by cell\");\n@@ -1070,2 +1071,2 @@\n-        assertEquals(\"sanity: list editingIndex \", editingIndex, list.getEditingIndex());\n-        assertTrue(\"sanity: cell must be editing\", cell.isEditing());\n+        assertEquals(editingIndex, list.getEditingIndex(), \"sanity: list editingIndex \");\n+        assertTrue(cell.isEditing(), \"sanity: cell must be editing\");\n@@ -1073,3 +1074,3 @@\n-        assertEquals(\"sanity: index updated \", cancelIndex, cell.getIndex());\n-        assertEquals(\"list editingIndex unchanged by cell\", editingIndex, list.getEditingIndex());\n-        assertFalse(\"cell must not be editing if cell index is \" + cell.getIndex(), cell.isEditing());\n+        assertEquals(cancelIndex, cell.getIndex(), \"sanity: index updated \");\n+        assertEquals(editingIndex, list.getEditingIndex(), \"list editingIndex unchanged by cell\");\n+        assertFalse(cell.isEditing(), \"cell must not be editing if cell index is \" + cell.getIndex());\n@@ -1091,1 +1092,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -1097,2 +1098,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertEquals(\"list must be editing at intermediate index\", intermediate, list.getEditingIndex());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertEquals(intermediate, list.getEditingIndex(), \"list must be editing at intermediate index\");\n@@ -1103,1 +1104,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -1109,2 +1110,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertEquals(\"list editing must be cancelled by cell\", notEditingIndex, list.getEditingIndex());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertEquals(notEditingIndex, list.getEditingIndex(), \"list editing must be cancelled by cell\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellTest.java","additions":65,"deletions":64,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,7 @@\n-import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n@@ -34,0 +40,6 @@\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.FocusModelShim;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.SelectionMode;\n@@ -35,1 +47,5 @@\n-import java.util.List;\n+import javafx.scene.layout.HBox;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -37,0 +53,2 @@\n+import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -44,18 +62,0 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.FocusModel;\n-import javafx.scene.control.FocusModelShim;\n-import javafx.scene.control.IndexedCell;\n-import javafx.scene.control.ListView;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.SelectionMode;\n-import javafx.scene.layout.HBox;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -72,1 +72,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -85,1 +86,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -226,1 +228,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -283,1 +285,1 @@\n-        assertTrue(debug(), isSelected(0));\n+        assertTrue(isSelected(0), debug());\n@@ -322,1 +324,1 @@\n-        assertTrue(debug(), fm.isFocused(5));\n+        assertTrue(fm.isFocused(5), debug());\n@@ -379,1 +381,1 @@\n-        assertTrue(debug(), sm.isSelected(0));\n+        assertTrue(sm.isSelected(0), debug());\n@@ -532,1 +534,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -572,1 +574,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -591,1 +593,1 @@\n-        assertTrue(debug(), isSelected(1, 2, 3));\n+        assertTrue(isSelected(1, 2, 3), debug());\n@@ -695,1 +697,1 @@\n-        assertTrue(debug(),isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -715,1 +717,1 @@\n-        assertTrue(debug(),isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -762,1 +764,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -830,1 +832,1 @@\n-        assertTrue(debug(),isSelected(0,2,3,4));\n+        assertTrue(isSelected(0,2,3,4), debug());\n@@ -1041,1 +1043,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1053,1 +1055,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1069,1 +1071,1 @@\n-        assertTrue(debug(), fm.isFocused(listView.getItems().size() - 1));\n+        assertTrue(fm.isFocused(listView.getItems().size() - 1), debug());\n@@ -1075,1 +1077,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -1313,1 +1315,1 @@\n-    @Ignore(\"Fix not yet implemented\")\n+    @Disabled(\"Fix not yet implemented\")\n@@ -1347,1 +1349,1 @@\n-    @Ignore(\"Fix not yet implemented\")\n+    @Disabled(\"Fix not yet implemented\")\n@@ -1574,1 +1576,1 @@\n-        assertTrue(\"Focus index incorrectly at: \" + fm.getFocusedIndex(), fm.isFocused(4));\n+        assertTrue(fm.isFocused(4), \"Focus index incorrectly at: \" + fm.getFocusedIndex());\n@@ -1835,1 +1837,1 @@\n-    @Ignore(\"JDK-8289909\") \/\/ there is no guarantee that there will be 8 selected items (can be 7 as well)\n+    @Disabled(\"JDK-8289909\") \/\/ there is no guarantee that there will be 8 selected items (can be 7 as well)\n@@ -2219,1 +2221,1 @@\n-        assertTrue(debug(),sm.isSelected(0));\n+        assertTrue(sm.isSelected(0), debug());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewKeyInputTest.java","additions":45,"deletions":43,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,3 +36,0 @@\n-\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import com.sun.javafx.tk.Toolkit;\n@@ -42,4 +44,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -48,0 +50,1 @@\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n@@ -51,4 +54,0 @@\n-import static org.junit.Assert.*;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-\n-\/\/@Ignore(\"Disabling tests as they fail with OOM in continuous builds\")\n@@ -62,1 +61,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -73,1 +73,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -136,1 +137,1 @@\n-        assertTrue(debug(), isSelected(7,8,9));\n+        assertTrue(isSelected(7,8,9), debug());\n@@ -140,1 +141,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -150,1 +151,1 @@\n-        assertTrue(debug(), isSelected(5,6,7));\n+        assertTrue(isSelected(5,6,7), debug());\n@@ -154,1 +155,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewMouseInputTest.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,8 +28,11 @@\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n-import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n-import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n-import com.sun.javafx.tk.Toolkit;\n+import static javafx.collections.FXCollections.observableArrayList;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -77,17 +80,11 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import static javafx.collections.FXCollections.*;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n+import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import com.sun.javafx.tk.Toolkit;\n@@ -109,1 +106,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -123,1 +121,1 @@\n-    @After\n+    @AfterEach\n@@ -972,1 +970,1 @@\n-        assertNotNull(\"sanity: \", selectedItem);\n+        assertNotNull(selectedItem, \"sanity: \");\n@@ -983,1 +981,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -1433,1 +1431,1 @@\n-        assertEquals(sm.getSelectedIndices() +\"\", 2, rt_38341_indices_count);\n+        assertEquals(2, rt_38341_indices_count, sm.getSelectedIndices() + \"\");\n@@ -1914,1 +1912,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -1961,2 +1959,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -1984,2 +1982,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -2024,1 +2022,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -2026,1 +2024,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -2029,1 +2027,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -2218,4 +2216,2 @@\n-        assertEquals(\"type is startEdit\",\n-                     ListView.editStartEvent(), editEvent.get().getEventType());\n-        assertEquals(\"index on start event\",\n-                     editIndex, editEvent.get().getIndex());\n+        assertEquals(ListView.editStartEvent(), editEvent.get().getEventType(), \"type is startEdit\");\n+        assertEquals(editIndex, editEvent.get().getIndex(), \"index on start event\");\n@@ -2238,3 +2234,3 @@\n-                assertEquals(\"Two items should be selected.\", 2, ch.getList().size());\n-                assertEquals(\"Selection range should be from index 1 \", 1, ch.getFrom());\n-                assertEquals(\"Selection range should be till index 2 \", 2, ch.getTo());\n+                assertEquals(2, ch.getList().size(), \"Two items should be selected.\");\n+                assertEquals(1, ch.getFrom(), \"Selection range should be from index 1 \");\n+                assertEquals(2, ch.getTo(), \"Selection range should be till index 2 \");\n@@ -2246,1 +2242,1 @@\n-        assertEquals(\"Selected item should be focused.\", selected, focus);\n+        assertEquals(selected, focus, \"Selected item should be focused.\");\n@@ -2249,3 +2245,3 @@\n-        assertEquals(\"Two items should be selected.\", 2, sm.getSelectedIndices().size());\n-        assertEquals(\"List item at index 1 should be selected\", 1, (int) sm.getSelectedIndices().get(0));\n-        assertEquals(\"List item at index 2 should be selected\", 2, (int) sm.getSelectedIndices().get(1));\n+        assertEquals(2, sm.getSelectedIndices().size(), \"Two items should be selected.\");\n+        assertEquals(1, (int) sm.getSelectedIndices().get(0), \"List item at index 1 should be selected\");\n+        assertEquals(2, (int) sm.getSelectedIndices().get(1), \"List item at index 2 should be selected\");\n@@ -2302,1 +2298,1 @@\n-        assertNull(\"ListView is not GCed.\", listViewRef.get());\n+        assertNull(listViewRef.get(), \"ListView is not GCed.\");\n@@ -2312,1 +2308,1 @@\n-        assertNull(\"ListView item is not GCed.\", itemRef.get());\n+        assertNull(itemRef.get(), \"ListView item is not GCed.\");\n@@ -2416,1 +2412,1 @@\n-                assertEquals(\"Last cell doesn't end at listview end\", viewportLength - 20, cell.getLayoutY(), 1.);\n+                assertEquals(viewportLength - 20, cell.getLayoutY(), 1., \"Last cell doesn't end at listview end\");\n@@ -2420,1 +2416,1 @@\n-                assertEquals(\"Secondlast cell doesn't end properly\", viewportLength - 20 - 70, cell.getLayoutY(), 1.);\n+                assertEquals(viewportLength - 20 - 70, cell.getLayoutY(), 1., \"Secondlast cell doesn't end properly\");\n@@ -2437,1 +2433,1 @@\n-                assertEquals(\"Last cell doesn't end at listview end\", viewportLength - 21, cell.getLayoutY(), 1.);\n+                assertEquals(viewportLength - 21, cell.getLayoutY(), 1., \"Last cell doesn't end at listview end\");\n@@ -2441,1 +2437,1 @@\n-                assertEquals(\"Secondlast cell doesn't end properly\", viewportLength - 21 - 20, cell.getLayoutY(), 1.);\n+                assertEquals(viewportLength - 21 - 20, cell.getLayoutY(), 1., \"Secondlast cell doesn't end properly\");\n@@ -2602,1 +2598,1 @@\n-        assertTrue(\"Our cell must be visible!\", scrollToCell.isVisible());\n+        assertTrue(scrollToCell.isVisible(), \"Our cell must be visible!\");\n@@ -2606,1 +2602,1 @@\n-            assertTrue(\"Last cell shouldn't leave space between itself and the bottom\", lastCell.getLayoutY() + 1 > (viewportLength - lastCellSize));\n+            assertTrue(lastCell.getLayoutY() + 1 > (viewportLength - lastCellSize), \"Last cell shouldn't leave space between itself and the bottom\");\n@@ -2610,1 +2606,1 @@\n-            assertEquals(\"Last cell should be at the bottom, if we scroll to it\", sumOfHeights - lastCellSize, lastCell.getLayoutY(), 1.);\n+            assertEquals(sumOfHeights - lastCellSize, lastCell.getLayoutY(), 1., \"Last cell should be at the bottom, if we scroll to it\");\n@@ -2614,1 +2610,1 @@\n-            assertEquals(\"Our cell mut be at the top\", 0, scrollToCell.getLayoutY(), 1.);\n+            assertEquals(0, scrollToCell.getLayoutY(), 1., \"Our cell mut be at the top\");\n@@ -2624,1 +2620,1 @@\n-            assertEquals(\"Upper cell shouldn't move after changing heights\", previousLayoutY, scrollToCell.getLayoutY(), 1.);\n+            assertEquals(previousLayoutY, scrollToCell.getLayoutY(), 1., \"Upper cell shouldn't move after changing heights\");\n@@ -2627,1 +2623,1 @@\n-            assertEquals(\"Upper cell should move 1 pixels, after scrolling 1 pixel\", previousLayoutY + 1, scrollToCell.getLayoutY(), 1.);\n+            assertEquals(previousLayoutY + 1, scrollToCell.getLayoutY(), 1., \"Upper cell should move 1 pixels, after scrolling 1 pixel\");\n@@ -2663,1 +2659,1 @@\n-        assertTrue(\"Cell should be visible\", cell.isVisible());\n+        assertTrue(cell.isVisible(), \"Cell should be visible\");\n@@ -2666,1 +2662,1 @@\n-        assertNotNull(\"Cell should have parent\", cell.getParent());\n+        assertNotNull(cell.getParent(), \"Cell should have parent\");\n@@ -2671,1 +2667,0 @@\n-\n@@ -2673,1 +2668,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":59,"deletions":65,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -28,5 +28,3 @@\n-import com.sun.javafx.scene.SceneHelper;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,0 +34,6 @@\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.skin.MenuBarSkin;\n@@ -42,5 +46,7 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.scene.control.ContextMenuContent;\n+import com.sun.javafx.scene.control.MenuBarMenuButtonShim;\n+import com.sun.javafx.tk.Toolkit;\n@@ -51,10 +57,0 @@\n-import com.sun.javafx.scene.control.ContextMenuContent;\n-import com.sun.javafx.scene.control.MenuBarMenuButtonShim;\n-import javafx.scene.control.skin.MenuBarSkin;\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.control.MenuButton;\n-import javafx.scene.control.MenuItem;\n-\n@@ -66,1 +62,0 @@\n-\n@@ -73,1 +68,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -84,1 +80,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuBarTest.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,4 +50,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +54,0 @@\n-\n@@ -67,1 +63,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -342,8 +339,4 @@\n-            assertEquals(\"event \" + i + \" is not of type MenuButton.ON_SHOWN\",\n-                    MenuButton.ON_SHOWING, onShowingEventTypes[i]);\n-            assertEquals(\"event \" + i + \" is not of type MenuButton.ON_SHOWN\",\n-                    MenuButton.ON_SHOWN, onShownEventTypes[i]);\n-            assertEquals(\"event \" + i + \" is not of type MenuButton.ON_HIDING\",\n-                    MenuButton.ON_HIDING, onHidingEventTypes[i]);\n-            assertEquals(\"event \" + i + \" is not of type  MenuButton.ON_HIDDEN\",\n-                    MenuButton.ON_HIDDEN, onHiddenEventTypes[i]);\n+            assertEquals(MenuButton.ON_SHOWING, onShowingEventTypes[i], \"event \" + i + \" is not of type MenuButton.ON_SHOWN\");\n+            assertEquals(MenuButton.ON_SHOWN, onShownEventTypes[i], \"event \" + i + \" is not of type MenuButton.ON_SHOWN\");\n+            assertEquals(MenuButton.ON_HIDING, onHidingEventTypes[i], \"event \" + i + \" is not of type MenuButton.ON_HIDING\");\n+            assertEquals(MenuButton.ON_HIDDEN, onHiddenEventTypes[i], \"event \" + i + \" is not of type  MenuButton.ON_HIDDEN\");\n@@ -352,8 +345,4 @@\n-        assertEquals(\"MenuButton.ON_SHOWING event listener should \"\n-            + \"get called 5 times. \", 5, onShowing);\n-        assertEquals(\"MenuButton.ON_SHOWN event listener should \"\n-            + \"get called 5 times. \", 5, onShown);\n-        assertEquals(\"MenuButton.ON_HIDING event listener should \"\n-            + \"get called 5 times. \", 5, onHiding);\n-        assertEquals(\"MenuButton.ON_HIDDEN event listener should \"\n-            + \"get called 5 times. \", 5, onHidden);\n+        assertEquals(5, onShowing, \"MenuButton.ON_SHOWING event listener should get called 5 times. \");\n+        assertEquals(5, onShown, \"MenuButton.ON_SHOWN event listener should get called 5 times. \");\n+        assertEquals(5, onHiding, \"MenuButton.ON_HIDING event listener should get called 5 times. \");\n+        assertEquals(5, onHidden, \"MenuButton.ON_HIDDEN event listener should get called 5 times. \");\n@@ -396,17 +385,9 @@\n-        assertEquals(\"event is not of type MenuButton.ON_SHOWING\",\n-            MenuButton.ON_SHOWING, onShowingEventType);\n-        assertEquals(\"event is not of type MenuButton.ON_SHOWN\",\n-            MenuButton.ON_SHOWN, onShownEventType);\n-        assertEquals(\"event is not of type MenuButton.ON_HIDING\",\n-            MenuButton.ON_HIDING, onHidingEventType);\n-        assertEquals(\"event is not of type MenuButton.ON_HIDDEN\",\n-            MenuButton.ON_HIDDEN, onHiddenEventType);\n-\n-        assertEquals(\"MenuButton.ON_SHOWING event listener should \"\n-            + \"get called once.\", 1, onShowing);\n-        assertEquals(\"MenuButton.ON_SHOWN event listener should \"\n-            + \"get called once.\", 1, onShown);\n-        assertEquals(\"MenuButton.ON_HIDING event listener should \"\n-            + \"get called once.\", 1, onHiding);\n-        assertEquals(\"MenuButton.ON_HIDDEN event listener should \"\n-            + \"get called once.\", 1, onHidden);\n+        assertEquals(MenuButton.ON_SHOWING, onShowingEventType, \"event is not of type MenuButton.ON_SHOWING\");\n+        assertEquals(MenuButton.ON_SHOWN, onShownEventType, \"event is not of type MenuButton.ON_SHOWN\");\n+        assertEquals(MenuButton.ON_HIDING, onHidingEventType, \"event is not of type MenuButton.ON_HIDING\");\n+        assertEquals(MenuButton.ON_HIDDEN, onHiddenEventType, \"event is not of type MenuButton.ON_HIDDEN\");\n+\n+        assertEquals(1, onShowing, \"MenuButton.ON_SHOWING event listener should get called once.\");\n+        assertEquals(1, onShown, \"MenuButton.ON_SHOWN event listener should get called once.\");\n+        assertEquals(1, onHiding, \"MenuButton.ON_HIDING event listener should get called once.\");\n+        assertEquals(1, onHidden, \"MenuButton.ON_HIDDEN event listener should get called once.\");\n@@ -434,17 +415,9 @@\n-        assertEquals(\"getOnShowing() should return same handler as set using \"\n-            + \"setOnShowing()\", handlers[0], mbtn.getOnShowing());\n-        assertEquals(\"getOnShown() should return same handler as set using \"\n-            + \"setOnShown()\", handlers[1], mbtn.getOnShown());\n-        assertEquals(\"getOnHiding() should return same handler as set using \"\n-            + \"setOnHiding()\", handlers[2], mbtn.getOnHiding());\n-        assertEquals(\"getOnHidden() should return same handler as set using \"\n-            + \"setOnHidden()\", handlers[3], mbtn.getOnHidden());\n-\n-        assertEquals(\"onShowingProperty().get() should return same handler as \"\n-            + \"set using setOnShowing()\", handlers[0], mbtn.onShowingProperty().get());\n-        assertEquals(\"onShownProperty().get() should return same handler as \"\n-            + \"set using setOnShown()\", handlers[1], mbtn.onShownProperty().get());\n-        assertEquals(\"onHidingProperty().get() should return same handler as \"\n-            + \"set using setOnHiding()\", handlers[2], mbtn.onHidingProperty().get());\n-        assertEquals(\"onHiddenProperty().get() should return same handler as \"\n-            + \"set using setOnHidden()\", handlers[3], mbtn.onHiddenProperty().get());\n+        assertEquals(handlers[0], mbtn.getOnShowing(), \"getOnShowing() should return same handler as set using setOnShowing()\");\n+        assertEquals(handlers[1], mbtn.getOnShown(), \"getOnShown() should return same handler as set using setOnShown()\");\n+        assertEquals(handlers[2], mbtn.getOnHiding(), \"getOnHiding() should return same handler as set using setOnHiding()\");\n+        assertEquals(handlers[3], mbtn.getOnHidden(), \"getOnHidden() should return same handler as set using setOnHidden()\");\n+\n+        assertEquals(handlers[0], mbtn.onShowingProperty().get(), \"onShowingProperty().get() should return same handler as set using setOnShowing()\");\n+        assertEquals(handlers[1], mbtn.onShownProperty().get(), \"onShownProperty().get() should return same handler as set using setOnShown()\");\n+        assertEquals(handlers[2], mbtn.onHidingProperty().get(), \"onHidingProperty().get() should return same handler as set using setOnHiding()\");\n+        assertEquals(handlers[3], mbtn.onHiddenProperty().get(), \"onHiddenProperty().get() should return same handler as set using setOnHidden()\");\n@@ -457,17 +430,9 @@\n-        assertEquals(\"getOnShowing() should return same handler as set using \"\n-            + \"setOnShowing()\", null, mbtn.getOnShowing());\n-        assertEquals(\"getOnShown() should return same handler as set using \"\n-            + \"setOnShown()\", null, mbtn.getOnShown());\n-        assertEquals(\"getOnHiding() should return same handler as set using \"\n-            + \"setOnHiding()\", null, mbtn.getOnHiding());\n-        assertEquals(\"getOnHidden() should return same handler as set using \"\n-            + \"setOnHidden()\", null, mbtn.getOnHidden());\n-\n-        assertEquals(\"onShowingProperty().get() should return same handler as \"\n-            + \"set using setOnShowing()\", null, mbtn.onShowingProperty().get());\n-        assertEquals(\"onShownProperty().get() should return same handler as \"\n-            + \"set using setOnShown()\", null, mbtn.onShownProperty().get());\n-        assertEquals(\"onHidingProperty().get() should return same handler as \"\n-            + \"set using setOnHiding()\", null, mbtn.onHidingProperty().get());\n-        assertEquals(\"onHiddenProperty().get() should return same handler as \"\n-            + \"set using setOnHidden()\", null, mbtn.onHiddenProperty().get());\n+        assertEquals(null, mbtn.getOnShowing(), \"getOnShowing() should return same handler as set using setOnShowing()\");\n+        assertEquals(null, mbtn.getOnShown(), \"getOnShown() should return same handler as set using setOnShown()\");\n+        assertEquals(null, mbtn.getOnHiding(), \"getOnHiding() should return same handler as set using setOnHiding()\");\n+        assertEquals(null, mbtn.getOnHidden(), \"getOnHidden() should return same handler as set using setOnHidden()\");\n+\n+        assertEquals(null, mbtn.onShowingProperty().get(), \"onShowingProperty().get() should return same handler as set using setOnShowing()\");\n+        assertEquals(null, mbtn.onShownProperty().get(), \"onShownProperty().get() should return same handler as set using setOnShown()\");\n+        assertEquals(null, mbtn.onHidingProperty().get(), \"onHidingProperty().get() should return same handler as set using setOnHiding()\");\n+        assertEquals(null, mbtn.onHiddenProperty().get(), \"onHiddenProperty().get() should return same handler as set using setOnHidden()\");\n@@ -495,17 +460,9 @@\n-        assertEquals(\"getOnShowing() should return same handler as set using \"\n-            + \"onShowingProperty().set()\", handlers[0], mbtn.getOnShowing());\n-        assertEquals(\"getOnShown() should return same handler as set using \"\n-            + \"onShownProperty().set()\", handlers[1], mbtn.getOnShown());\n-        assertEquals(\"getOnHiding() should return same handler as set using \"\n-            + \"onHidingProperty().set()\", handlers[2], mbtn.getOnHiding());\n-        assertEquals(\"getOnHidden() should return same handler as set using \"\n-            + \"onHiddenProperty().set()\", handlers[3], mbtn.getOnHidden());\n-\n-        assertEquals(\"onShowingProperty().get() should return same handler as \"\n-            + \"set using onShowingProperty().set()\", handlers[0], mbtn.onShowingProperty().get());\n-        assertEquals(\"onShownProperty().get() should return same handler as \"\n-            + \"set using onShownProperty().set()\", handlers[1], mbtn.onShownProperty().get());\n-        assertEquals(\"onHidingProperty().get() should return same handler as \"\n-            + \"set using onHidingProperty().set()\", handlers[2], mbtn.onHidingProperty().get());\n-        assertEquals(\"onHiddenProperty().get() should return same handler as \"\n-            + \"set using onHiddenProperty().set()\", handlers[3], mbtn.onHiddenProperty().get());\n+        assertEquals(handlers[0], mbtn.getOnShowing(), \"getOnShowing() should return same handler as set using onShowingProperty().set()\");\n+        assertEquals(handlers[1], mbtn.getOnShown(), \"getOnShown() should return same handler as set using onShownProperty().set()\");\n+        assertEquals(handlers[2], mbtn.getOnHiding(), \"getOnHiding() should return same handler as set using onHidingProperty().set()\");\n+        assertEquals(handlers[3], mbtn.getOnHidden(), \"getOnHidden() should return same handler as set using onHiddenProperty().set()\");\n+\n+        assertEquals(handlers[0], mbtn.onShowingProperty().get(), \"onShowingProperty().get() should return same handler as set using onShowingProperty().set()\");\n+        assertEquals(handlers[1], mbtn.onShownProperty().get(), \"onShownProperty().get() should return same handler as set using onShownProperty().set()\");\n+        assertEquals(handlers[2], mbtn.onHidingProperty().get(), \"onHidingProperty().get() should return same handler as set using onHidingProperty().set()\");\n+        assertEquals(handlers[3], mbtn.onHiddenProperty().get(), \"onHiddenProperty().get() should return same handler as set using onHiddenProperty().set()\");\n@@ -518,17 +475,9 @@\n-        assertEquals(\"getOnShowing() should return same handler as set using \"\n-            + \"onShowingProperty().set()\", null, mbtn.getOnShowing());\n-        assertEquals(\"getOnShown() should return same handler as set using \"\n-            + \"onShownProperty().set()\", null, mbtn.getOnShown());\n-        assertEquals(\"getOnHiding() should return same handler as set using \"\n-            + \"onHidingProperty().set()\", null, mbtn.getOnHiding());\n-        assertEquals(\"getOnHidden() should return same handler as set using \"\n-            + \"onHiddenProperty().set()\", null, mbtn.getOnHidden());\n-\n-        assertEquals(\"onShowingProperty().get() should return same handler as \"\n-            + \"set using onShowingProperty().set()\", null, mbtn.onShowingProperty().get());\n-        assertEquals(\"onShownProperty().get() should return same handler as \"\n-            + \"set using onShownProperty().set()\", null, mbtn.onShownProperty().get());\n-        assertEquals(\"onHidingProperty().get() should return same handler as \"\n-            + \"set using onHidingProperty().set()\", null, mbtn.onHidingProperty().get());\n-        assertEquals(\"onHiddenProperty().get() should return same handler as \"\n-            + \"set using onHiddenProperty().set()\", null, mbtn.onHiddenProperty().get());\n+        assertEquals(null, mbtn.getOnShowing(), \"getOnShowing() should return same handler as set using onShowingProperty().set()\");\n+        assertEquals(null, mbtn.getOnShown(), \"getOnShown() should return same handler as set using onShownProperty().set()\");\n+        assertEquals(null, mbtn.getOnHiding(), \"getOnHiding() should return same handler as set using onHidingProperty().set()\");\n+        assertEquals(null, mbtn.getOnHidden(), \"getOnHidden() should return same handler as set using onHiddenProperty().set()\");\n+\n+        assertEquals(null, mbtn.onShowingProperty().get(), \"onShowingProperty().get() should return same handler as set using onShowingProperty().set()\");\n+        assertEquals(null, mbtn.onShownProperty().get(), \"onShownProperty().get() should return same handler as set using onShownProperty().set()\");\n+        assertEquals(null, mbtn.onHidingProperty().get(), \"onHidingProperty().get() should return same handler as set using onHidingProperty().set()\");\n+        assertEquals(null, mbtn.onHiddenProperty().get(), \"onHiddenProperty().get() should return same handler as set using onHiddenProperty().set()\");\n@@ -558,8 +507,4 @@\n-        assertEquals(\"MenuButton.ON_SHOWING event listener should  \"\n-            + \"get called once.\", 1, onShowing);\n-        assertEquals(\"MenuButton.ON_SHOWN event listener should  \"\n-            + \"get called once.\", 1, onShown);\n-        assertTrue(\"MenuButton.ON_SHOWING event should be received \"\n-            + \"before MenuButton.ON_SHOWN.\", onShowingOrderTest);\n-        assertTrue(\"MenuButton.ON_SHOWN event should be received \"\n-            + \"after MenuButton.ON_SHOWING.\", onShownOrderTest);\n+        assertEquals(1, onShowing, \"MenuButton.ON_SHOWING event listener should get called once.\");\n+        assertEquals(1, onShown, \"MenuButton.ON_SHOWN event listener should get called once.\");\n+        assertTrue(onShowingOrderTest, \"MenuButton.ON_SHOWING event should be received before MenuButton.ON_SHOWN.\");\n+        assertTrue(onShownOrderTest, \"MenuButton.ON_SHOWN event should be received after MenuButton.ON_SHOWING.\");\n@@ -589,8 +534,4 @@\n-        assertEquals(\"MenuButton.ON_HIDING event listener should \"\n-            + \"get called once.\", 1, onHiding);\n-        assertEquals(\"MenuButton.ON_HIDDEN event listener should \"\n-            + \"get called once.\", 1, onHidden);\n-        assertTrue(\"MenuButton.ON_HIDING event should be received \"\n-            + \"before MenuButton.ON_HIDDEN.\", onHidingOrderTest);\n-        assertTrue(\"MenuButton.ON_HIDDEN event should be received \"\n-            + \"after MenuButton.ON_HIDING.\", onHiddenOrderTest);\n+        assertEquals(1, onHiding, \"MenuButton.ON_HIDING event listener should get called once.\");\n+        assertEquals(1, onHidden, \"MenuButton.ON_HIDDEN event listener should get called once.\");\n+        assertTrue(onHidingOrderTest, \"MenuButton.ON_HIDING event should be received before MenuButton.ON_HIDDEN.\");\n+        assertTrue(onHiddenOrderTest, \"MenuButton.ON_HIDDEN event should be received after MenuButton.ON_HIDING.\");\n@@ -622,8 +563,4 @@\n-        assertEquals(\"MenuButton.ON_SHOWING event listener should \"\n-            + \"get called once.\", 1, onShowing);\n-        assertEquals(\"MenuButton.ON_SHOWN event listener should \"\n-            + \"get called once.\", 1, onShown);\n-        assertEquals(\"MenuButton.ON_HIDING event should not be \"\n-            + \"received while showing.\", 0, onHiding);\n-        assertEquals(\"MenuButton.ON_HIDDEN event should not be \"\n-            + \"received while showing.\", 0, onHidden);\n+        assertEquals(1, onShowing, \"MenuButton.ON_SHOWING event listener should get called once.\");\n+        assertEquals(1, onShown, \"MenuButton.ON_SHOWN event listener should get called once.\");\n+        assertEquals(0, onHiding, \"MenuButton.ON_HIDING event should not be received while showing.\");\n+        assertEquals(0, onHidden, \"MenuButton.ON_HIDDEN event should not be received while showing.\");\n@@ -634,8 +571,4 @@\n-        assertEquals(\"MenuButton.ON_HIDING event listener should \"\n-            + \"get called once.\", 1, onHiding);\n-        assertEquals(\"MenuButton.ON_HIDDEN event listener should \"\n-            + \"get called once.\", 1, onHidden);\n-        assertEquals(\"MenuButton.ON_SHOWING event should not be \"\n-            + \"received while hiding.\", 0, onShowing);\n-        assertEquals(\"MenuButton.ON_SHOWN event should not be \"\n-            + \"received while showing.\", 0, onShown);\n+        assertEquals(1, onHiding, \"MenuButton.ON_HIDING event listener should get called once.\");\n+        assertEquals(1, onHidden, \"MenuButton.ON_HIDDEN event listener should get called once.\");\n+        assertEquals(0, onShowing, \"MenuButton.ON_SHOWING event should not be received while hiding.\");\n+        assertEquals(0, onShown, \"MenuButton.ON_SHOWN event should not be received while showing.\");\n@@ -648,17 +581,9 @@\n-        assertEquals(\"MenuButton.onShowing name should be \\\"onShowing\\\".\",\n-            \"onShowing\", mbtn.onShowingProperty().getName());\n-        assertEquals(\"MenuButton.onShown name should be \\\"onShown\\\".\",\n-            \"onShown\", mbtn.onShownProperty().getName());\n-        assertEquals(\"MenuButton.onHiding name should be \\\"onHiding\\\".\",\n-            \"onHiding\", mbtn.onHidingProperty().getName());\n-        assertEquals(\"MenuButton.onHidden name should be \\\"onHidden\\\".\",\n-            \"onHidden\", mbtn.onHiddenProperty().getName());\n-\n-        assertEquals(\"MenuButton.onShowing bean should be MenuButton object.\",\n-            mbtn, mbtn.onShowingProperty().getBean());\n-        assertEquals(\"MenuButton.onShown bean should be MenuButton object.\",\n-            mbtn, mbtn.onShownProperty().getBean());\n-        assertEquals(\"MenuButton.onHiding bean should be MenuButton object.\",\n-            mbtn, mbtn.onHidingProperty().getBean());\n-        assertEquals(\"MenuButton.onHidden bean should be MenuButton object.\",\n-            mbtn, mbtn.onHiddenProperty().getBean());\n+        assertEquals(\"onShowing\", mbtn.onShowingProperty().getName(), \"MenuButton.onShowing name should be \\\"onShowing\\\".\");\n+        assertEquals(\"onShown\", mbtn.onShownProperty().getName(), \"MenuButton.onShown name should be \\\"onShown\\\".\");\n+        assertEquals(\"onHiding\", mbtn.onHidingProperty().getName(), \"MenuButton.onHiding name should be \\\"onHiding\\\".\");\n+        assertEquals(\"onHidden\", mbtn.onHiddenProperty().getName(), \"MenuButton.onHidden name should be \\\"onHidden\\\".\");\n+\n+        assertEquals(mbtn, mbtn.onShowingProperty().getBean(), \"MenuButton.onShowing bean should be MenuButton object.\");\n+        assertEquals(mbtn, mbtn.onShownProperty().getBean(), \"MenuButton.onShown bean should be MenuButton object.\");\n+        assertEquals(mbtn, mbtn.onHidingProperty().getBean(), \"MenuButton.onHiding bean should be MenuButton object.\");\n+        assertEquals(mbtn, mbtn.onHiddenProperty().getBean(), \"MenuButton.onHidden bean should be MenuButton object.\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuButtonTest.java","additions":89,"deletions":164,"binary":false,"changes":253,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,6 @@\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,6 +53,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n@@ -57,6 +54,6 @@\n-\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -72,1 +69,2 @@\n-    @BeforeClass public static void classSetup() {\n+    @BeforeAll\n+    public static void classSetup() {\n@@ -76,1 +74,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuItemTest.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,10 +39,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +51,2 @@\n-    @BeforeClass public static void classSetup() {\n+    @BeforeAll\n+    public static void classSetup() {\n@@ -57,1 +56,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -41,6 +43,3 @@\n-import junit.framework.Assert;\n-import org.junit.Test;\n-\n-import static junit.framework.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -158,1 +157,1 @@\n-        Assert.assertEquals(rb1.getWidth(), rb2.getWidth(), 0.00001);\n+        assertEquals(rb1.getWidth(), rb2.getWidth(), 0.00001);\n@@ -160,1 +159,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MiscellaneousTests.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,12 +28,15 @@\n-import javafx.beans.property.IntegerProperty;\n-import javafx.beans.property.SimpleIntegerProperty;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import java.util.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n@@ -43,2 +46,2 @@\n-\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import javafx.beans.property.IntegerProperty;\n+import javafx.beans.property.SimpleIntegerProperty;\n@@ -67,11 +70,7 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -87,1 +86,0 @@\n-@RunWith(Parameterized.class)\n@@ -93,1 +91,0 @@\n-    private Class<? extends MultipleSelectionModel> modelClass;\n@@ -120,11 +117,7 @@\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { ListViewShim.get_ListViewBitSetSelectionModel_class() },\n-            { TreeViewShim.get_TreeViewBitSetSelectionModel_class() },\n-            { TableViewShim.get_TableViewArrayListSelectionModel_class() },\n-            { TreeTableViewShim.get_TreeTableViewArrayListSelectionModel_class() },\n-        });\n-    }\n-\n-    public MultipleSelectionModelImplTest(Class<? extends MultipleSelectionModel> modelClass) {\n-        this.modelClass = modelClass;\n+    private static Collection<Class<? extends MultipleSelectionModel>> parameters() {\n+        return Arrays.asList(\n+            ListViewShim.get_ListViewBitSetSelectionModel_class(),\n+            TreeViewShim.get_TreeViewBitSetSelectionModel_class(),\n+            TableViewShim.get_TableViewArrayListSelectionModel_class(),\n+            TreeTableViewShim.get_TreeTableViewArrayListSelectionModel_class()\n+        );\n@@ -133,1 +126,2 @@\n-    @AfterClass public static void tearDownClass() throws Exception {    }\n+    @AfterAll\n+    public static void tearDownClass() throws Exception {    }\n@@ -135,1 +129,3 @@\n-    @Before public void setUp() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setUp(Class<? extends MultipleSelectionModel> modelClass) {\n@@ -214,1 +210,1 @@\n-            throw ex;\n+            throw new RuntimeException(ex);\n@@ -218,1 +214,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -261,1 +258,8 @@\n-    @Test public void ensureInDefaultState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureInDefaultState(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n+        ensureInDefaultStateImpl();\n+    }\n+\n+    private void ensureInDefaultStateImpl() {\n@@ -276,1 +280,4 @@\n-    @Test public void selectValidIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectValidIndex(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -299,1 +306,4 @@\n-    @Test public void testSelectAllWithSingleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectAllWithSingleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -302,1 +312,1 @@\n-        ensureInDefaultState();\n+        ensureInDefaultStateImpl();\n@@ -305,1 +315,4 @@\n-    @Test public void testSelectAllWithMultipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectAllWithMultipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -321,1 +334,4 @@\n-    @Test public void clearAllSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearAllSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -327,1 +343,4 @@\n-    @Test public void clearPartialSelectionWithSingleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearPartialSelectionWithSingleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -339,1 +358,4 @@\n-    @Test public void clearPartialSelectionWithMultipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearPartialSelectionWithMultipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -349,1 +371,4 @@\n-    @Test public void selectedIndicesListenerReportsCorrectIndexOnClearSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedIndicesListenerReportsCorrectIndexOnClearSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -361,1 +386,4 @@\n-    @Test public void clearAndSelectFiresDisjointRemovedChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearAndSelectFiresDisjointRemovedChanges(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -387,1 +415,4 @@\n-    @Test public void clearAndSelectFirstSelectedItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearAndSelectFirstSelectedItem(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -412,1 +443,4 @@\n-    @Test public void clearAndSelectLastSelectedItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearAndSelectLastSelectedItem(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -437,1 +471,4 @@\n-    @Test public void testSelectedIndicesObservableListIsEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesObservableListIsEmpty(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -441,1 +478,4 @@\n-    @Test public void testSelectedIndicesIteratorIsNotNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesIteratorIsNotNull(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -445,1 +485,4 @@\n-    @Test public void testSelectedIndicesIteratorHasNoNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesIteratorHasNoNext(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -449,1 +492,4 @@\n-    @Test public void testSelectedIndicesIteratorWorksWithSingleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesIteratorWorksWithSingleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -458,1 +504,4 @@\n-    @Test public void testSelectedIndicesIteratorWorksWithMultipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesIteratorWorksWithMultipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -464,3 +513,3 @@\n-        assertEquals(indices(msModel()), 1, (int) it.next());\n-        assertEquals(indices(msModel()), 2, (int) it.next());\n-        assertEquals(indices(msModel()), 5, (int) it.next());\n+        assertEquals(1, (int) it.next(), indices(msModel()));\n+        assertEquals(2, (int) it.next(), indices(msModel()));\n+        assertEquals(5, (int) it.next(), indices(msModel()));\n@@ -470,1 +519,4 @@\n-    @Test public void testSelectedIndicesContains() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesContains(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -475,1 +527,4 @@\n-    @Test public void testSelectedItemsObservableListIsEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedItemsObservableListIsEmpty(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -479,1 +534,4 @@\n-    @Test public void testSelectedItemsIndexOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedItemsIndexOf(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -492,1 +550,4 @@\n-    @Test public void testSelectedItemsIteratorIsNotNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedItemsIteratorIsNotNull(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -496,1 +557,4 @@\n-    @Test public void testSelectedItemsLastIndexOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedItemsLastIndexOf(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -509,1 +573,4 @@\n-    @Test public void testSelectedItemsContains() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedItemsContains(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -514,1 +581,4 @@\n-    @Test public void testSingleSelectionMode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingleSelectionMode(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -530,1 +600,4 @@\n-    @Test public void testMultipleSelectionMode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultipleSelectionMode(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -545,1 +618,4 @@\n-    @Test public void testChangeSelectionMode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeSelectionMode(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -549,1 +625,1 @@\n-        assertEquals(indices(msModel()), 3, msModel().getSelectedIndices().size());\n+        assertEquals(3, msModel().getSelectedIndices().size(), indices(msModel()));\n@@ -558,3 +634,3 @@\n-        assertFalse(indices(msModel()), model.isSelected(5));\n-        assertFalse(indices(msModel()), model.isSelected(10));\n-        assertTrue(indices(msModel()), model.isSelected(15));\n+        assertFalse(model.isSelected(5), indices(msModel()));\n+        assertFalse(model.isSelected(10), indices(msModel()));\n+        assertTrue(model.isSelected(15), indices(msModel()));\n@@ -563,5 +639,4 @@\n-\/\/    @Test public void testSelectNullObject() {\n-\/\/        model.select(null);\n-\/\/    }\n-\n-    @Test public void testSelectRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -573,1 +648,1 @@\n-        assertEquals(indices(msModel()), 5, msModel().getSelectedIndices().size());\n+        assertEquals(5, msModel().getSelectedIndices().size(), indices(msModel()));\n@@ -584,1 +659,4 @@\n-    @Test public void testDeselectionFromASelectionRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDeselectionFromASelectionRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -588,3 +666,3 @@\n-        assertTrue(indices(msModel()), model.isSelected(4));\n-        assertFalse(indices(msModel()), model.isSelected(5));\n-        assertTrue(indices(msModel()), model.isSelected(6));\n+        assertTrue(model.isSelected(4), indices(msModel()));\n+        assertFalse(model.isSelected(5), indices(msModel()));\n+        assertTrue(model.isSelected(6), indices(msModel()));\n@@ -593,1 +671,4 @@\n-    @Test public void testAccurateItemSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAccurateItemSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -615,1 +696,4 @@\n-    @Test public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithSelect(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -650,1 +734,4 @@\n-    @Test public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithMultipleSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithMultipleSelect(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -679,1 +766,4 @@\n-    @Test public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithSelectRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureSelectedIndexAndItemIsAlwaysTheLastSelectionWithSelectRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -706,1 +796,4 @@\n-    @Test public void testMultipleSelectionWithEmptyArray() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultipleSelectionWithEmptyArray(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -721,1 +814,4 @@\n-    @Test public void selectOnlyValidIndicesInSingleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectOnlyValidIndicesInSingleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -737,1 +833,4 @@\n-    @Test public void selectOnlyValidIndicesInMultipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectOnlyValidIndicesInMultipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -754,1 +853,4 @@\n-    @Test public void testNullArrayInMultipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNullArrayInMultipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -760,2 +862,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -764,1 +866,4 @@\n-    @Test public void testMultipleSelectionWithInvalidIndices() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultipleSelectionWithInvalidIndices(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -770,2 +875,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -774,1 +879,4 @@\n-    @Test public void testInvalidSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInvalidSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -780,2 +888,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -784,1 +892,4 @@\n-    @Test public void ensureSwappedSelectRangeWorks() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureSwappedSelectRangeWorks(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -789,1 +900,1 @@\n-        assertEquals(indices(model), 7, model.getSelectedIndices().size());\n+        assertEquals(7, model.getSelectedIndices().size(), indices(model));\n@@ -802,1 +913,1 @@\n-        assertEquals(indices(model), 4, model.getSelectedIndex());\n+        assertEquals(4, model.getSelectedIndex(), indices(model));\n@@ -810,1 +921,4 @@\n-    @Test public void testInvalidSelectRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInvalidSelectRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -816,2 +930,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -820,1 +934,4 @@\n-    @Test public void testEmptySelectRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEmptySelectRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -826,2 +943,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -830,1 +947,4 @@\n-    @Test public void testNegativeSelectRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNegativeSelectRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -836,2 +956,2 @@\n-        assertEquals(indices(msModel()), 0, msModel().getSelectedIndices().size());\n-        assertEquals(items(msModel()), 0, msModel().getSelectedItems().size());\n+        assertEquals(0, msModel().getSelectedIndices().size(), indices(msModel()));\n+        assertEquals(0, msModel().getSelectedItems().size(), items(msModel()));\n@@ -840,3 +960,7 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testNullListViewInSelectionModel() {\n-        ListViewShim.getListViewBitSetSelectionModel(null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNullListViewInSelectionModel(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            ListViewShim.getListViewBitSetSelectionModel(null);\n+        });\n@@ -845,3 +969,7 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testNullTreeViewInSelectionModel() {\n-        TreeViewShim.<String>get_TreeViewBitSetSelectionModel(null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNullTreeViewInSelectionModel(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            TreeViewShim.<String>get_TreeViewBitSetSelectionModel(null);\n+        });\n@@ -850,1 +978,4 @@\n-    @Test public void selectAllInEmptySingleSelectionMode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectAllInEmptySingleSelectionMode(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -858,1 +989,4 @@\n-    @Test public void selectAllInSingleSelectionModeWithSelectedRow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectAllInSingleSelectionModeWithSelectedRow(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -868,1 +1002,4 @@\n-    @Test public void selectionModePropertyHasReferenceToBean() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionModePropertyHasReferenceToBean(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -872,1 +1009,4 @@\n-    @Test public void selectionModePropertyHasName() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionModePropertyHasName(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -876,2 +1016,5 @@\n-    @Ignore(\"Not yet implemented in TreeView and TableView\")\n-    @Test public void testSelectionChangesWhenItemIsInsertedAtStartOfModel() {\n+    @Disabled(\"Not yet implemented in TreeView and TableView\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectionChangesWhenItemIsInsertedAtStartOfModel(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -891,1 +1034,4 @@\n-    @Test public void test_rt_28615() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_28615(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -930,1 +1076,4 @@\n-    @Test public void test_rt_29860_add() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_29860_add(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -948,1 +1097,1 @@\n-        assertEquals(msModel().getSelectedIndices().toString(), 4, rt_29860_size_count);\n+        assertEquals(4, rt_29860_size_count, msModel().getSelectedIndices().toString());\n@@ -952,1 +1101,1 @@\n-        assertEquals(msModel().getSelectedIndices().toString(), 1, rt_29860_size_count);   \/\/ only 4 was selected\n+        assertEquals(1, rt_29860_size_count, msModel().getSelectedIndices().toString());   \/\/ only 4 was selected\n@@ -959,1 +1108,4 @@\n-    @Test public void test_rt_29821() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_29821(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -981,1 +1133,4 @@\n-    @Test public void test_rt_32411_selectedItems() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_32411_selectedItems(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1007,1 +1162,4 @@\n-    @Test public void test_rt_32411_selectedIndices() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_32411_selectedIndices(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1034,1 +1192,4 @@\n-    @Test public void test_rt32618_multipleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt32618_multipleSelection(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1048,1 +1209,4 @@\n-    @Test public void test_rt33324_selectedIndices() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt33324_selectedIndices(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1069,1 +1233,4 @@\n-    @Test public void test_rt33324_selectedItems() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt33324_selectedItems(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1090,1 +1257,4 @@\n-    @Test public void test_rt33324_selectedCells() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt33324_selectedCells(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1117,1 +1287,4 @@\n-    @Test public void test_rt35624_selectedIndices_downwards() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt35624_selectedIndices_downwards(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1125,2 +1298,2 @@\n-                Assert.assertEquals(2, change.getAddedSize());\n-                Assert.assertEquals(FXCollections.observableArrayList(3, 4), change.getAddedSubList());\n+                assertEquals(2, change.getAddedSize());\n+                assertEquals(FXCollections.observableArrayList(3, 4), change.getAddedSubList());\n@@ -1130,2 +1303,2 @@\n-            Assert.assertEquals(3, change.getList().size());\n-            Assert.assertEquals(FXCollections.observableArrayList(2, 3, 4), change.getList());\n+            assertEquals(3, change.getList().size());\n+            assertEquals(FXCollections.observableArrayList(2, 3, 4), change.getList());\n@@ -1137,1 +1310,4 @@\n-    @Test public void test_rt35624_selectedIndices_upwards() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt35624_selectedIndices_upwards(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1157,1 +1333,4 @@\n-    @Test public void test_rt35624_selectedItems_downwards() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt35624_selectedItems_downwards(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1202,1 +1381,4 @@\n-    @Test public void test_rt35624_selectedItems_upwards() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt35624_selectedItems_upwards(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1247,1 +1429,4 @@\n-    @Test public void test_rt39548_positiveValue_outOfRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt39548_positiveValue_outOfRange(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1254,1 +1439,4 @@\n-    @Test public void test_rt39548_negativeValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt39548_negativeValue(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1261,1 +1449,4 @@\n-    @Test public void test_rt38884_invalidChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt38884_invalidChange(Class<? extends MultipleSelectionModel> cls) {\n+        setUp(cls);\n@@ -1279,1 +1470,4 @@\n-    @Test public void test_rt40804() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt40804(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1292,1 +1486,4 @@\n-    @Test public void test_jdk_8088752() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_jdk_8088752(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1303,2 +1500,2 @@\n-        assertEquals(\"sanity: having uncontained selectedItem\", uncontained, model.getSelectedItem());\n-        assertEquals(\"sanity: selected index removed \", -1, model.getSelectedIndex());\n+        assertEquals(uncontained, model.getSelectedItem(), \"sanity: having uncontained selectedItem\");\n+        assertEquals(-1, model.getSelectedIndex(), \"sanity: selected index removed \");\n@@ -1309,2 +1506,2 @@\n-        assertEquals(\"selectedItem unchanged\", uncontained, model.getSelectedItem());\n-        assertEquals(\"selectedIndex updated\", insertIndex, model.getSelectedIndex());\n+        assertEquals(uncontained, model.getSelectedItem(), \"selectedItem unchanged\");\n+        assertEquals(insertIndex, model.getSelectedIndex(), \"selectedIndex updated\");\n@@ -1325,2 +1522,4 @@\n-    @Test\n-    public void test_jdk_8088467_selectedIndicesReselect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_jdk_8088467_selectedIndicesReselect(Class<? extends MultipleSelectionModel> cls) {\n+        setUp(cls);\n@@ -1340,5 +1539,5 @@\n-        assertSame(\"sanity: state unchanged\", selected, model.getSelectedItems().get(0));\n-        assertEquals(\"sanity: state unchanged\", 0, selectedIndex);\n-        assertEquals(\"sanity: state unchanged\", selectedItems, model.getSelectedItems());\n-        assertEquals(\"sanity: state unchanged\", selectedIndices, model.getSelectedIndices());\n-        assertEquals(\"must not fire if nothing changed\", 0, counter.get());\n+        assertSame(selected, model.getSelectedItems().get(0), \"sanity: state unchanged\");\n+        assertEquals(0, selectedIndex, \"sanity: state unchanged\");\n+        assertEquals(selectedItems, model.getSelectedItems(), \"sanity: state unchanged\");\n+        assertEquals(selectedIndices, model.getSelectedIndices(), \"sanity: state unchanged\");\n+        assertEquals(0, counter.get(), \"must not fire if nothing changed\");\n@@ -1347,2 +1546,4 @@\n-    @Test\n-    public void test_jdk_8088467_selectedItemsReselect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_jdk_8088467_selectedItemsReselect(Class<? extends MultipleSelectionModel> cls) {\n+        setUp(cls);\n@@ -1362,5 +1563,5 @@\n-        assertSame(\"sanity: state unchanged\", selected, model.getSelectedItems().get(0));\n-        assertEquals(\"sanity: state unchanged\", 0, selectedIndex);\n-        assertEquals(\"sanity: state unchanged\", selectedItems, model.getSelectedItems());\n-        assertEquals(\"sanity: state unchanged\", selectedIndices, model.getSelectedIndices());\n-        assertEquals(\"must not fire if nothing changed\", 0, counter.get());\n+        assertSame(selected, model.getSelectedItems().get(0), \"sanity: state unchanged\");\n+        assertEquals(0, selectedIndex, \"sanity: state unchanged\");\n+        assertEquals(selectedItems, model.getSelectedItems(), \"sanity: state unchanged\");\n+        assertEquals(selectedIndices, model.getSelectedIndices(), \"sanity: state unchanged\");\n+        assertEquals(0, counter.get(), \"must not fire if nothing changed\");\n@@ -1369,2 +1570,4 @@\n-    @Test\n-    public void test_jdk_8088896() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_jdk_8088896(Class<? extends MultipleSelectionModel> cls) {\n+        setUp(cls);\n@@ -1402,1 +1605,4 @@\n-    @Test public void testSelectedIndicesList_SetMethod() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesList_SetMethod(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1411,1 +1617,4 @@\n-    @Test public void testSelectedIndicesList_SetRangeMethod() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesList_SetRangeMethod(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1420,1 +1629,4 @@\n-    @Test public void testSelectedIndicesList_SetIndicesMethod() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesList_SetIndicesMethod(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1432,1 +1644,4 @@\n-    @Test public void testSelectedIndicesList_ClearMethod() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesList_ClearMethod(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1441,1 +1656,4 @@\n-    @Test public void testSelectedIndicesList_ClearIndexMethod() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesList_ClearIndexMethod(Class<? extends MultipleSelectionModel> c) {\n+        setUp(c);\n@@ -1450,3 +1668,4 @@\n-\n-    @Test\n-    public void testSelectedIndicesChangeEvents() throws InterruptedException {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectedIndicesChangeEvents(Class<? extends MultipleSelectionModel> c) throws InterruptedException {\n+        setUp(c);\n@@ -1510,1 +1729,1 @@\n-        assertTrue(\"A ListEvent was missing: \" + Arrays.deepToString(expectedEntries.toArray()), expectedEntries.isEmpty());\n+        assertTrue(expectedEntries.isEmpty(), \"A ListEvent was missing: \" + Arrays.deepToString(expectedEntries.toArray()));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":398,"deletions":179,"binary":false,"changes":577,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,7 @@\n-import com.sun.javafx.scene.SceneHelper;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -30,6 +36,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -44,0 +44,2 @@\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Pagination;\n@@ -49,5 +51,5 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.Toolkit;\n@@ -57,3 +59,0 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.Pagination;\n@@ -68,1 +67,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -80,1 +80,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -120,1 +121,2 @@\n-    @Test public void checkMaxPageIndicatorCountPropertyBind() {\n+    @Test\n+    public void checkMaxPageIndicatorCountPropertyBind() {\n@@ -123,1 +125,1 @@\n-        assertEquals(\"number of visible pages cannot be bound\", pagination.maxPageIndicatorCountProperty().getValue(), 200.0, 0.0);\n+        assertEquals(pagination.maxPageIndicatorCountProperty().getValue(), 200.0, 0.0, \"number of visible pages cannot be bound\");\n@@ -125,1 +127,1 @@\n-        assertEquals(\"number of visible pages cannot be bound\", pagination.maxPageIndicatorCountProperty().getValue(), 105.0, 0.0);\n+        assertEquals(pagination.maxPageIndicatorCountProperty().getValue(), 105.0, 0.0, \"number of visible pages cannot be bound\");\n@@ -128,3 +130,6 @@\n-    @Test(expected = java.lang.UnsupportedOperationException.class) public void checkPageIndexPropertyBind() {\n-        IntegerProperty intPr = new SimpleIntegerProperty(10);\n-        pagination.currentPageIndexProperty().bind(intPr);\n+    @Test\n+    public void checkPageIndexPropertyBind() {\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            IntegerProperty intPr = new SimpleIntegerProperty(10);\n+            pagination.currentPageIndexProperty().bind(intPr);\n+        });\n@@ -133,1 +138,2 @@\n-    @Test public void checkPageFactoryPropertyBind() {\n+    @Test\n+    public void checkPageFactoryPropertyBind() {\n@@ -137,1 +143,1 @@\n-        assertSame(\"page factory cannot be bound\", pagination.pageFactoryProperty().getValue(), callback);\n+        assertSame(pagination.pageFactoryProperty().getValue(), callback, \"page factory cannot be bound\");\n@@ -344,1 +350,1 @@\n-        assertTrue(\"pagination prefWidth() is incorrect\", (pagination.prefWidth(-1) > 200));\n+        assertTrue((pagination.prefWidth(-1) > 200), \"pagination prefWidth() is incorrect\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/PaginationTest.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,6 +35,0 @@\n-\n-     public PasswordFieldDefaultCancelButtonTest(ButtonType buttonType,\n-            boolean consume, boolean registerAfterShowing) {\n-        super(buttonType, consume, registerAfterShowing);\n-    }\n-\n@@ -45,1 +39,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/PasswordFieldDefaultCancelButtonTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -30,6 +34,2 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    private PasswordField pwdField;\/\/Empty string\n+    private PasswordField pwdField;\n@@ -44,1 +44,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/PasswordFieldTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,7 @@\n-import javafx.scene.control.skin.TooltipSkin;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import java.lang.ref.WeakReference;\n@@ -32,1 +38,0 @@\n-\n@@ -37,7 +42,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.lang.ref.WeakReference;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import javafx.scene.control.skin.TooltipSkin;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +59,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -668,1 +670,1 @@\n-        assertNull(\"Unused Skin must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"Unused Skin must be gc'ed\");\n@@ -678,1 +680,1 @@\n-        assertNotEquals(\"New skin was not set\", oldSkin, newSkin);\n+        assertNotEquals(oldSkin, newSkin, \"New skin was not set\");\n@@ -680,1 +682,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/PopupControlTest.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,0 +33,1 @@\n+import javafx.scene.Scene;\n@@ -36,2 +36,0 @@\n-import javafx.scene.Scene;\n-import javafx.stage.Stage;\n@@ -41,0 +39,3 @@\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,3 +44,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -51,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorTest.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,7 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -43,2 +43,0 @@\n-import javafx.scene.control.RadioMenuItem;\n-import javafx.scene.control.ToggleGroup;\n@@ -47,1 +45,2 @@\n-import javafx.scene.input.KeyCombination;\n+import javafx.scene.control.RadioMenuItem;\n+import javafx.scene.control.ToggleGroup;\n@@ -49,0 +48,1 @@\n+import javafx.scene.input.KeyCombination;\n@@ -50,5 +50,7 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -62,1 +64,1 @@\n-    private RadioMenuItem radioMenuItem, rmi;\/\/Empty string\n+    private RadioMenuItem radioMenuItem, rmi;\n@@ -66,1 +68,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -110,1 +113,1 @@\n-        assertTrue(\"selectedProperty cannot be bound\", radioMenuItem.selectedProperty().getValue());\n+        assertTrue(radioMenuItem.selectedProperty().getValue(), \"selectedProperty cannot be bound\");\n@@ -112,1 +115,1 @@\n-        assertFalse(\"selectedProperty cannot be bound\", radioMenuItem.selectedProperty().getValue());\n+        assertFalse(radioMenuItem.selectedProperty().getValue(), \"selectedProperty cannot be bound\");\n@@ -118,1 +121,1 @@\n-        assertNull(\"toggleGroupProperty cannot be bound\", radioMenuItem.toggleGroupProperty().getValue());\n+        assertNull(radioMenuItem.toggleGroupProperty().getValue(), \"toggleGroupProperty cannot be bound\");\n@@ -120,1 +123,1 @@\n-        assertSame(\"toggleGroupProperty cannot be bound\", radioMenuItem.toggleGroupProperty().getValue(), toggleGroup);\n+        assertSame(radioMenuItem.toggleGroupProperty().getValue(), toggleGroup, \"toggleGroupProperty cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/RadioMenuItemTest.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,1 +31,1 @@\n-import org.junit.After;\n+import org.junit.jupiter.api.AfterEach;\n@@ -52,1 +52,1 @@\n-    @After\n+    @AfterEach\n@@ -61,4 +61,2 @@\n-            assertTrue(\"violated min constraint: w=\" + c.getWidth() + \" min=\" + c.getMinWidth(),\n-                       c.getWidth() >= c.getMinWidth());\n-            assertTrue(\"violated max constraint: w=\" + c.getWidth() + \" max=\" + c.getMaxWidth(),\n-                       c.getWidth() <= c.getMaxWidth());\n+            assertTrue(c.getWidth() >= c.getMinWidth(), \"violated min constraint: w=\" + c.getWidth() + \" min=\" + c.getMinWidth());\n+            assertTrue(c.getWidth() <= c.getMaxWidth(), \"violated max constraint: w=\" + c.getWidth() + \" max=\" + c.getMaxWidth());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ResizeHelperTestBase.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,7 @@\n-import com.sun.javafx.scene.control.Properties;\n-import javafx.css.CssMetaData;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -38,0 +39,1 @@\n+import javafx.css.CssMetaData;\n@@ -41,5 +43,5 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.Properties;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -52,1 +54,1 @@\n-    private ScrollBar scrollBar;\/\/Empty string\n+    private ScrollBar scrollBar;\n@@ -54,1 +56,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -119,1 +122,1 @@\n-        assertEquals(\"minProperty cannot be bound\", scrollBar.minProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.minProperty().getValue(), 2.0, 0.0, \"minProperty cannot be bound\");\n@@ -121,1 +124,1 @@\n-        assertEquals(\"minProperty cannot be bound\", scrollBar.minProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.minProperty().getValue(), 5.0, 0.0, \"minProperty cannot be bound\");\n@@ -127,1 +130,1 @@\n-        assertEquals(\"maxProperty cannot be bound\", scrollBar.maxProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.maxProperty().getValue(), 2.0, 0.0, \"maxProperty cannot be bound\");\n@@ -129,1 +132,1 @@\n-        assertEquals(\"maxProperty cannot be bound\", scrollBar.maxProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.maxProperty().getValue(), 5.0, 0.0, \"maxProperty cannot be bound\");\n@@ -135,1 +138,1 @@\n-        assertEquals(\"valueProperty cannot be bound\", scrollBar.valueProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.valueProperty().getValue(), 2.0, 0.0, \"valueProperty cannot be bound\");\n@@ -137,1 +140,1 @@\n-        assertEquals(\"valueProperty cannot be bound\", scrollBar.valueProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.valueProperty().getValue(), 5.0, 0.0, \"valueProperty cannot be bound\");\n@@ -143,1 +146,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", scrollBar.orientationProperty().getValue(), Orientation.HORIZONTAL);\n+        assertSame(scrollBar.orientationProperty().getValue(), Orientation.HORIZONTAL, \"orientationProperty cannot be bound\");\n@@ -145,1 +148,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", scrollBar.orientationProperty().getValue(), Orientation.VERTICAL);\n+        assertSame(scrollBar.orientationProperty().getValue(), Orientation.VERTICAL, \"orientationProperty cannot be bound\");\n@@ -151,1 +154,1 @@\n-        assertEquals(\"unitIncrementProperty cannot be bound\", scrollBar.unitIncrementProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.unitIncrementProperty().getValue(), 2.0, 0.0, \"unitIncrementProperty cannot be bound\");\n@@ -153,1 +156,1 @@\n-        assertEquals(\"unitIncrementProperty cannot be bound\", scrollBar.unitIncrementProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.unitIncrementProperty().getValue(), 5.0, 0.0, \"unitIncrementProperty cannot be bound\");\n@@ -159,1 +162,1 @@\n-        assertEquals(\"blockIncrementProperty cannot be bound\", scrollBar.blockIncrementProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.blockIncrementProperty().getValue(), 2.0, 0.0, \"blockIncrementProperty cannot be bound\");\n@@ -161,1 +164,1 @@\n-        assertEquals(\"blockIncrementProperty cannot be bound\", scrollBar.blockIncrementProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.blockIncrementProperty().getValue(), 5.0, 0.0, \"blockIncrementProperty cannot be bound\");\n@@ -167,1 +170,1 @@\n-        assertEquals(\"visibleAmountProperty cannot be bound\", scrollBar.visibleAmountProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollBar.visibleAmountProperty().getValue(), 2.0, 0.0, \"visibleAmountProperty cannot be bound\");\n@@ -169,1 +172,1 @@\n-        assertEquals(\"visibleAmountProperty cannot be bound\", scrollBar.visibleAmountProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollBar.visibleAmountProperty().getValue(), 5.0, 0.0, \"visibleAmountProperty cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ScrollBarTest.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,8 @@\n-import javafx.css.CssMetaData;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -39,0 +42,1 @@\n+import javafx.css.CssMetaData;\n@@ -43,5 +47,4 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -54,1 +57,1 @@\n-    private ScrollPane scrollPane;\/\/Empty string\n+    private ScrollPane scrollPane;\n@@ -56,1 +59,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -139,1 +143,1 @@\n-        assertSame(\"HBarPolicyProperty cannot be bound\", scrollPane.hbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.ALWAYS);\n+        assertSame(scrollPane.hbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.ALWAYS, \"HBarPolicyProperty cannot be bound\");\n@@ -141,1 +145,1 @@\n-        assertSame(\"HBarPolicyProperty cannot be bound\", scrollPane.hbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.NEVER);\n+        assertSame(scrollPane.hbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.NEVER, \"HBarPolicyProperty cannot be bound\");\n@@ -147,1 +151,1 @@\n-        assertSame(\"VBarPolicyProperty cannot be bound\", scrollPane.vbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.ALWAYS);\n+        assertSame(scrollPane.vbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.ALWAYS, \"VBarPolicyProperty cannot be bound\");\n@@ -149,1 +153,1 @@\n-        assertSame(\"VBarPolicyProperty cannot be bound\", scrollPane.vbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.NEVER);\n+        assertSame(scrollPane.vbarPolicyProperty().getValue(), ScrollPane.ScrollBarPolicy.NEVER, \"VBarPolicyProperty cannot be bound\");\n@@ -155,1 +159,1 @@\n-        assertEquals(\"hvalueProperty cannot be bound\", scrollPane.hvalueProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.hvalueProperty().getValue(), 2.0, 0.0, \"hvalueProperty cannot be bound\");\n@@ -157,1 +161,1 @@\n-        assertEquals(\"hvalueProperty cannot be bound\", scrollPane.hvalueProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.hvalueProperty().getValue(), 5.0, 0.0, \"hvalueProperty cannot be bound\");\n@@ -163,1 +167,1 @@\n-        assertEquals(\"hminProperty cannot be bound\", scrollPane.hminProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.hminProperty().getValue(), 2.0, 0.0, \"hminProperty cannot be bound\");\n@@ -165,1 +169,1 @@\n-        assertEquals(\"hminProperty cannot be bound\", scrollPane.hminProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.hminProperty().getValue(), 5.0, 0.0, \"hminProperty cannot be bound\");\n@@ -171,1 +175,1 @@\n-        assertEquals(\"hmaxProperty cannot be bound\", scrollPane.hmaxProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.hmaxProperty().getValue(), 2.0, 0.0, \"hmaxProperty cannot be bound\");\n@@ -173,1 +177,1 @@\n-        assertEquals(\"hmaxProperty cannot be bound\", scrollPane.hmaxProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.hmaxProperty().getValue(), 5.0, 0.0, \"hmaxProperty cannot be bound\");\n@@ -179,1 +183,1 @@\n-        assertEquals(\"vvalueProperty cannot be bound\", scrollPane.vvalueProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.vvalueProperty().getValue(), 2.0, 0.0, \"vvalueProperty cannot be bound\");\n@@ -181,1 +185,1 @@\n-        assertEquals(\"vvalueProperty cannot be bound\", scrollPane.vvalueProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.vvalueProperty().getValue(), 5.0, 0.0, \"vvalueProperty cannot be bound\");\n@@ -187,1 +191,1 @@\n-        assertEquals(\"vminProperty cannot be bound\", scrollPane.vminProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.vminProperty().getValue(), 2.0, 0.0, \"vminProperty cannot be bound\");\n@@ -189,1 +193,1 @@\n-        assertEquals(\"vminProperty cannot be bound\", scrollPane.vminProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.vminProperty().getValue(), 5.0, 0.0, \"vminProperty cannot be bound\");\n@@ -195,1 +199,1 @@\n-        assertEquals(\"vmaxProperty cannot be bound\", scrollPane.vmaxProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.vmaxProperty().getValue(), 2.0, 0.0, \"vmaxProperty cannot be bound\");\n@@ -197,1 +201,1 @@\n-        assertEquals(\"vmaxProperty cannot be bound\", scrollPane.vmaxProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.vmaxProperty().getValue(), 5.0, 0.0, \"vmaxProperty cannot be bound\");\n@@ -203,1 +207,1 @@\n-        assertEquals(\"FitToWidth cannot be bound\", scrollPane.fitToWidthProperty().getValue(), true);\n+        assertEquals(scrollPane.fitToWidthProperty().getValue(), true, \"FitToWidth cannot be bound\");\n@@ -205,1 +209,1 @@\n-        assertEquals(\"FitToWidth cannot be bound\", scrollPane.fitToWidthProperty().getValue(), false);\n+        assertEquals(scrollPane.fitToWidthProperty().getValue(), false, \"FitToWidth cannot be bound\");\n@@ -211,1 +215,1 @@\n-        assertEquals(\"FitToHeigt cannot be bound\", scrollPane.fitToHeightProperty().getValue(), true);\n+        assertEquals(scrollPane.fitToHeightProperty().getValue(), true, \"FitToHeigt cannot be bound\");\n@@ -213,1 +217,1 @@\n-        assertEquals(\"FitToHeigt cannot be bound\", scrollPane.fitToHeightProperty().getValue(), false);\n+        assertEquals(scrollPane.fitToHeightProperty().getValue(), false, \"FitToHeigt cannot be bound\");\n@@ -219,1 +223,1 @@\n-        assertEquals(\"Pannable cannot be bound\", scrollPane.pannableProperty().getValue(), true);\n+        assertEquals(scrollPane.pannableProperty().getValue(), true, \"Pannable cannot be bound\");\n@@ -221,1 +225,1 @@\n-        assertEquals(\"Pannable cannot be bound\", scrollPane.pannableProperty().getValue(), false);\n+        assertEquals(scrollPane.pannableProperty().getValue(), false, \"Pannable cannot be bound\");\n@@ -227,1 +231,1 @@\n-        assertEquals(\"prefViewportWidthProperty cannot be bound\", scrollPane.prefViewportWidthProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.prefViewportWidthProperty().getValue(), 2.0, 0.0, \"prefViewportWidthProperty cannot be bound\");\n@@ -229,1 +233,1 @@\n-        assertEquals(\"prefViewportWidthProperty cannot be bound\", scrollPane.prefViewportWidthProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.prefViewportWidthProperty().getValue(), 5.0, 0.0, \"prefViewportWidthProperty cannot be bound\");\n@@ -235,1 +239,1 @@\n-        assertEquals(\"prefViewportHeightProperty cannot be bound\", scrollPane.prefViewportHeightProperty().getValue(), 2.0, 0.0);\n+        assertEquals(scrollPane.prefViewportHeightProperty().getValue(), 2.0, 0.0, \"prefViewportHeightProperty cannot be bound\");\n@@ -237,1 +241,1 @@\n-        assertEquals(\"prefViewportHeightProperty cannot be bound\", scrollPane.prefViewportHeightProperty().getValue(), 5.0, 0.0);\n+        assertEquals(scrollPane.prefViewportHeightProperty().getValue(), 5.0, 0.0, \"prefViewportHeightProperty cannot be bound\");\n@@ -244,1 +248,1 @@\n-        assertNull(\"viewportBoundsProperty cannot be bound\", scrollPane.viewportBoundsProperty().getValue());\n+        assertNull(scrollPane.viewportBoundsProperty().getValue(), \"viewportBoundsProperty cannot be bound\");\n@@ -247,1 +251,1 @@\n-        assertSame(\"viewportBoundsProperty cannot be bound\", scrollPane.viewportBoundsProperty().getValue(), b);\n+        assertSame(scrollPane.viewportBoundsProperty().getValue(), b, \"viewportBoundsProperty cannot be bound\");\n@@ -250,1 +254,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ScrollPaneTest.java","additions":45,"deletions":42,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -31,8 +32,0 @@\n-\n-import org.junit.After;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n@@ -70,0 +63,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -83,1 +79,0 @@\n-@RunWith(Parameterized.class)\n@@ -89,2 +84,0 @@\n-    private boolean showBeforeReplaceSM;\n-\n@@ -93,2 +86,3 @@\n-    @Test\n-    public void testTreeViewFocusModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTreeViewFocusModel(boolean showBeforeReplaceSM) {\n@@ -101,1 +95,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -104,1 +98,1 @@\n-        assertNull(\"focusModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"focusModel must be gc'ed\");\n@@ -107,2 +101,3 @@\n-    @Test\n-    public void testTreeTableViewFocusModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTreeTableViewFocusModel(boolean showBeforeReplaceSM) {\n@@ -115,1 +110,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -118,1 +113,1 @@\n-        assertNull(\"focusModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"focusModel must be gc'ed\");\n@@ -121,2 +116,3 @@\n-    @Test\n-    public void testTableViewFocusModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTableViewFocusModel(boolean showBeforeReplaceSM) {\n@@ -126,1 +122,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -129,1 +125,1 @@\n-        assertNull(\"focusModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"focusModel must be gc'ed\");\n@@ -132,2 +128,3 @@\n-    @Test\n-    public void testListViewFocusModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testListViewFocusModel(boolean showBeforeReplaceSM) {\n@@ -137,1 +134,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -140,1 +137,1 @@\n-        assertNull(\"focusModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"focusModel must be gc'ed\");\n@@ -145,2 +142,3 @@\n-    @Test\n-    public void testTreeViewSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTreeViewSelectionModel(boolean showBeforeReplaceSM) {\n@@ -153,1 +151,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -156,1 +154,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -159,2 +157,3 @@\n-    @Test\n-    public void testTreeTableViewSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTreeTableViewSelectionModel(boolean showBeforeReplaceSM) {\n@@ -167,1 +166,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -170,1 +169,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -173,2 +172,3 @@\n-    @Test\n-    public void testTableViewSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTableViewSelectionModel(boolean showBeforeReplaceSM) {\n@@ -178,1 +178,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -181,1 +181,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -184,2 +184,3 @@\n-    @Test\n-    public void testListViewSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testListViewSelectionModel(boolean showBeforeReplaceSM) {\n@@ -189,1 +190,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -192,1 +193,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -195,2 +196,3 @@\n-    @Test\n-    public void testTabPaneSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTabPaneSelectionModel(boolean showBeforeReplaceSM) {\n@@ -202,1 +204,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -205,1 +207,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -208,2 +210,3 @@\n-    @Test\n-    public void testComboBoxSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testComboBoxSelectionModel(boolean showBeforeReplaceSM) {\n@@ -213,1 +216,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -216,1 +219,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -219,2 +222,3 @@\n-    @Test\n-    public void testChoiceBoxSelectionModel() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChoiceBoxSelectionModel(boolean showBeforeReplaceSM) {\n@@ -224,1 +228,1 @@\n-        maybeShowControl(control);\n+        maybeShowControl(control, showBeforeReplaceSM);\n@@ -227,1 +231,1 @@\n-        assertNull(\"selectionModel must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"selectionModel must be gc'ed\");\n@@ -246,1 +250,1 @@\n-    protected void maybeShowControl(Control control) {\n+    protected void maybeShowControl(Control control, boolean showBeforeReplaceSM) {\n@@ -253,2 +257,1 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<Boolean> parameters() {\n@@ -256,9 +259,1 @@\n-        Object[][] data = new Object[][] {\n-            {false},\n-            {true },\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public SelectionFocusModelMemoryTest(boolean showBeforeReplaceSM) {\n-        this.showBeforeReplaceSM = showBeforeReplaceSM;\n+        return Arrays.asList(false, true);\n@@ -282,1 +277,1 @@\n-    @After\n+    @AfterEach\n@@ -288,1 +283,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SelectionFocusModelMemoryTest.java","additions":64,"deletions":70,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -30,1 +37,0 @@\n-\n@@ -37,2 +43,0 @@\n-import javafx.scene.control.TableView.TableViewFocusModel;\n-import javafx.scene.control.TableView.TableViewSelectionModel;\n@@ -51,0 +55,2 @@\n+import javafx.scene.control.TableView.TableViewFocusModel;\n+import javafx.scene.control.TableView.TableViewSelectionModel;\n@@ -57,10 +63,5 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -69,3 +70,0 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n-\n@@ -80,1 +78,0 @@\n-@RunWith(Parameterized.class)\n@@ -85,2 +82,0 @@\n-\n-    private Class<? extends SelectionModel> modelClass;\n@@ -93,1 +88,0 @@\n-\/\/    private static ObservableList<String> defaultData = FXCollections.<String>observableArrayList();\n@@ -122,13 +116,9 @@\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { ListViewShim.get_ListViewBitSetSelectionModel_class() },\n-            { TreeViewShim.get_TreeViewBitSetSelectionModel_class() },\n-            { TableViewShim.get_TableViewArrayListSelectionModel_class() },\n-            { TreeTableViewShim.get_TreeTableViewArrayListSelectionModel_class() }\n-\/\/            { ChoiceBox.ChoiceBoxSelectionModel.class } TODO re-enable\n-\/\/            { ComboBox.ComboBoxSelectionModel.class }  TODO re-enable\n-        });\n-    }\n-\n-    public SelectionModelImplTest(Class<? extends SelectionModel> modelClass) {\n-        this.modelClass = modelClass;\n+    private static Collection<Class<? extends SelectionModel>> parameters() {\n+        return Arrays.asList(\n+            ListViewShim.get_ListViewBitSetSelectionModel_class(),\n+            TreeViewShim.get_TreeViewBitSetSelectionModel_class(),\n+            TableViewShim.get_TableViewArrayListSelectionModel_class(),\n+            TreeTableViewShim.get_TreeTableViewArrayListSelectionModel_class()\n+\/\/          ChoiceBox.ChoiceBoxSelectionModel.class, TODO re-enable\n+\/\/          ComboBox.ComboBoxSelectionModel.class  TODO re-enable\n+        );\n@@ -137,1 +127,2 @@\n-    @AfterClass public static void tearDownClass() throws Exception {    }\n+    @AfterAll\n+    public static void tearDownClass() throws Exception {    }\n@@ -139,1 +130,3 @@\n-    @Before public void setUp() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setUp(Class<? extends SelectionModel> modelClass) {\n@@ -182,2 +175,0 @@\n-\n-\n@@ -247,2 +238,1 @@\n-            ex.printStackTrace();\n-            throw ex;\n+            fail(ex);\n@@ -252,1 +242,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -268,1 +259,8 @@\n-    @Test public void testDefaultState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDefaultState(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n+        testDefaultState2();\n+    }\n+\n+    private void testDefaultState2() {\n@@ -278,1 +276,4 @@\n-    @Test public void selectInvalidIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectInvalidIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -283,1 +284,1 @@\n-        testDefaultState();\n+        testDefaultState2();\n@@ -286,1 +287,4 @@\n-    @Test public void selectRowAfterInvalidIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectRowAfterInvalidIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -302,1 +306,4 @@\n-    @Test public void selectInvalidItem() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectInvalidItem(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -312,1 +319,4 @@\n-    @Test public void selectValidIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectValidIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -327,1 +337,4 @@\n-    @Test public void clearPartialSelectionWithSingleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void clearPartialSelectionWithSingleSelection(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -335,1 +348,4 @@\n-    @Test public void ensureIsEmptyIsAccurate() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void ensureIsEmptyIsAccurate(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -343,1 +359,4 @@\n-    @Test public void testSingleSelectionMode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingleSelectionMode(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -348,1 +367,1 @@\n-        assertTrue(\"Selected: \" + model.getSelectedIndex() + \", expected: 5\",  model.isSelected(5));\n+        assertTrue(model.isSelected(5), \"Selected: \" + model.getSelectedIndex() + \", expected: 5\");\n@@ -355,1 +374,4 @@\n-    @Test public void testSelectNullObject() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectNullObject(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -359,1 +381,4 @@\n-    @Test public void testFocusOnNegativeIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFocusOnNegativeIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -367,1 +392,4 @@\n-    @Test public void testFocusOnOutOfBoundsIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFocusOnOutOfBoundsIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -376,1 +404,4 @@\n-    @Test public void testFocusOnValidIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFocusOnValidIndex(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -390,2 +421,5 @@\n-    @Ignore(\"Not yet implemented in TreeView\")\n-    @Test public void testSelectionChangesWhenItemIsInsertedAtStartOfModel() {\n+    @Disabled(\"Not yet implemented in TreeView\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectionChangesWhenItemIsInsertedAtStartOfModel(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -403,1 +437,4 @@\n-    @Test public void test_rt_29821() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_29821(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -436,2 +473,4 @@\n-    @Test public void test_rt_30356_selectRowAtIndex0() throws Exception {\n-        setUp();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_30356_selectRowAtIndex0(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -462,1 +501,1 @@\n-            assertEquals(\"model is \" + model, ROW_1_VALUE, model.getSelectedItem());\n+            assertEquals(ROW_1_VALUE, model.getSelectedItem(), \"model is \" + model);\n@@ -477,2 +516,4 @@\n-    @Test public void test_rt_30356_selectRowAtIndex1() throws Exception {\n-        setUp();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt_30356_selectRowAtIndex1(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n@@ -528,1 +569,4 @@\n-    @Test public void test_rt32618_singleSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt32618_singleSelection(Class<? extends SelectionModel> modelClass) {\n+        setUp(modelClass);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SelectionModelImplTest.java","additions":108,"deletions":64,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,7 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -37,5 +40,4 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -51,1 +53,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SeparatorMenuItemTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import javafx.css.CssMetaData;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,5 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -38,0 +37,1 @@\n+import javafx.css.CssMetaData;\n@@ -43,4 +43,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +52,3 @@\n-    @Before public void setup() {\n+\n+    @BeforeEach\n+    public void setup() {\n@@ -158,3 +159,1 @@\n-    @Ignore(\"This is an unreliable test because it uses the string version \" +\n-            \"of the function instead of the other, and no check is made \" +\n-            \"for bits set\")\n+    @Disabled(\"This is an unreliable test because it uses the string version of the function instead of the other, and no check is made for bits set\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SeparatorTest.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -31,6 +34,0 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n@@ -46,0 +43,2 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +50,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -82,1 +82,1 @@\n-        assertEquals(\"change listener must be notified\", 1, count[0]);\n+        assertEquals(1, count[0], \"change listener must be notified\");\n@@ -85,1 +85,1 @@\n-        assertEquals(\"changeListener must not be notified\", 1, count[0]);\n+        assertEquals(1, count[0], \"changeListener must not be notified\");\n@@ -96,1 +96,1 @@\n-        assertEquals(\"invalidation listener must be notified\", 1, count[0]);\n+        assertEquals(1, count[0], \"invalidation listener must be notified\");\n@@ -99,1 +99,1 @@\n-        assertEquals(\"invalidation listener must not be notified\", 1, count[0]);\n+        assertEquals(1, count[0], \"invalidation listener must not be notified\");\n@@ -161,1 +161,0 @@\n-\n@@ -163,1 +162,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SkinBaseTest.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-\n-import javafx.css.ParsedValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -31,2 +33,1 @@\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import javafx.css.ParsedValue;\n@@ -39,6 +40,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -51,1 +50,0 @@\n-\n@@ -57,1 +55,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -81,1 +80,1 @@\n-            Assert.fail(e.toString());\n+            fail(e);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SliderTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import static junit.framework.Assert.*;\n-\n@@ -32,7 +30,23 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -97,1 +111,2 @@\n-    @BeforeClass public static void setupOnce() {\n+    @BeforeAll\n+    public static void setupOnce() {\n@@ -102,1 +117,2 @@\n-    @AfterClass public static void tearDownOnce() {\n+    @AfterAll\n+    public static void tearDownOnce() {\n@@ -106,1 +122,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -140,1 +157,1 @@\n-    @After\n+    @AfterEach\n@@ -245,1 +262,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -247,1 +264,3 @@\n-        spinner.increment();\n+        assertThrows(IllegalStateException.class, () -> {\n+            spinner.increment();\n+        });\n@@ -250,1 +269,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -252,1 +271,3 @@\n-        spinner.increment(2);\n+        assertThrows(IllegalStateException.class, () -> {\n+            spinner.increment(2);\n+        });\n@@ -255,1 +276,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -257,1 +278,3 @@\n-        spinner.decrement();\n+        assertThrows(IllegalStateException.class, () -> {\n+            spinner.decrement();\n+        });\n@@ -260,1 +283,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -262,1 +285,3 @@\n-        spinner.decrement(2);\n+        assertThrows(IllegalStateException.class, () -> {\n+            spinner.decrement(2);\n+        });\n@@ -341,2 +366,3 @@\n-    @Ignore(\"JDK-8328701\")\n-    @Test public void editing_commitValidInput() {\n+    @Disabled(\"JDK-8328701\")\n+    @Test\n+    public void editing_commitValidInput() {\n@@ -352,2 +378,3 @@\n-    @Ignore(\"JDK-8328701\")\n-    @Test public void editing_commitInvalidInput() {\n+    @Disabled(\"JDK-8328701\")\n+    @Test\n+    public void editing_commitInvalidInput() {\n@@ -1295,2 +1322,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testIncrement_oneStep() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testIncrement_oneStep() {\n@@ -1301,2 +1329,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testIncrement_twoSteps() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testIncrement_twoSteps() {\n@@ -1307,2 +1336,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testIncrement_manyCalls() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testIncrement_manyCalls() {\n@@ -1315,2 +1345,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testIncrement_bigStepPastMaximum() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testIncrement_bigStepPastMaximum() {\n@@ -1321,2 +1352,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testDecrement_oneStep() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testDecrement_oneStep() {\n@@ -1327,2 +1359,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testDecrement_twoSteps() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testDecrement_twoSteps() {\n@@ -1333,2 +1366,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testDecrement_manyCalls() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testDecrement_manyCalls() {\n@@ -1341,2 +1375,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testDecrement_bigStepPastMinimum() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testDecrement_bigStepPastMinimum() {\n@@ -1347,2 +1382,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testWrapAround_increment_oneStep() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testWrapAround_increment_oneStep() {\n@@ -1363,2 +1399,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testWrapAround_increment_twoSteps() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testWrapAround_increment_twoSteps() {\n@@ -1391,2 +1428,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testWrapAround_decrement_twoSteps() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testWrapAround_decrement_twoSteps() {\n@@ -1404,2 +1442,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_assertDefaultConverterIsNonNull() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_assertDefaultConverterIsNonNull() {\n@@ -1409,2 +1448,3 @@\n-    @Ignore(\"Not safe when run early in the morning - needs refining when time permits\")\n-    @Test public void localTimeSpinner_testSetMin_doesNotChangeSpinnerValueWhenMinIsLessThanCurrentValue() {\n+    @Disabled(\"Not safe when run early in the morning - needs refining when time permits\")\n+    @Test\n+    public void localTimeSpinner_testSetMin_doesNotChangeSpinnerValueWhenMinIsLessThanCurrentValue() {\n@@ -1418,2 +1458,3 @@\n-    @Ignore(\"Not safe when late at night - needs refining when time permits\")\n-    @Test public void localTimeSpinner_testSetMin_changesSpinnerValueWhenMinIsGreaterThanCurrentValue() {\n+    @Disabled(\"Not safe when late at night - needs refining when time permits\")\n+    @Test\n+    public void localTimeSpinner_testSetMin_changesSpinnerValueWhenMinIsGreaterThanCurrentValue() {\n@@ -1436,2 +1477,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testSetMax_doesNotChangeSpinnerValueWhenMaxIsGreaterThanCurrentValue() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testSetMax_doesNotChangeSpinnerValueWhenMaxIsGreaterThanCurrentValue() {\n@@ -1445,2 +1487,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testSetMax_changesSpinnerValueWhenMaxIsLessThanCurrentValue() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testSetMax_changesSpinnerValueWhenMaxIsLessThanCurrentValue() {\n@@ -1456,2 +1499,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testSetMax_ensureThatMaxCanNotGoLessThanMin() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testSetMax_ensureThatMaxCanNotGoLessThanMin() {\n@@ -1465,2 +1509,3 @@\n-    @Ignore\n-    @Test public void localTimeSpinner_testSetMax_ensureThatMaxCanEqualMin() {\n+    @Disabled\n+    @Test\n+    public void localTimeSpinner_testSetMax_ensureThatMaxCanEqualMin() {\n@@ -1522,1 +1567,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -1524,6 +1569,8 @@\n-        Spinner<Double> spinner = new Spinner<>(-100, 100, 0, 0.5);\n-        spinner.setEditable(true);\n-        assertEquals(0.0, spinner.getValue());\n-        spinner.getEditor().setText(\"Hello, World!\");\n-        spinner.commitValue();\n-        assertEquals(0.0, spinner.getValue());\n+        assertThrows(RuntimeException.class, () -> {\n+            Spinner<Double> spinner = new Spinner<>(-100, 100, 0, 0.5);\n+            spinner.setEditable(true);\n+            assertEquals(0.0, spinner.getValue());\n+            spinner.getEditor().setText(\"Hello, World!\");\n+            spinner.commitValue();\n+            assertEquals(0.0, spinner.getValue());\n+        });\n@@ -1588,2 +1635,2 @@\n-        assertTrue(defMsg, enterDefaultPass);\n-        assertTrue(canMsg, escapeCancelPass);\n+        assertTrue(enterDefaultPass, defMsg);\n+        assertTrue(escapeCancelPass, canMsg);\n@@ -1600,2 +1647,2 @@\n-        assertTrue(defMsg, enterDefaultPass);\n-        assertTrue(canMsg, escapeCancelPass);\n+        assertTrue(enterDefaultPass, defMsg);\n+        assertTrue(escapeCancelPass, canMsg);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SpinnerTest.java","additions":119,"deletions":72,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,4 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +46,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SplitMenuButtonTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,12 +28,9 @@\n-import javafx.collections.FXCollections;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.Tab;\n-import javafx.scene.control.TabPane;\n-import org.junit.After;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import javafx.css.CssMetaData;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import javafx.scene.control.skin.SplitPaneSkin;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -45,0 +42,2 @@\n+import javafx.collections.FXCollections;\n+import javafx.css.CssMetaData;\n@@ -49,0 +48,1 @@\n+import javafx.scene.control.ComboBox;\n@@ -51,0 +51,3 @@\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.skin.SplitPaneSkin;\n@@ -55,7 +58,6 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -68,1 +70,1 @@\n-    private SplitPane splitPane;\/\/Empty string\n+    private SplitPane splitPane;\n@@ -76,1 +78,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -90,1 +93,1 @@\n-    @After\n+    @AfterEach\n@@ -155,1 +158,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", splitPane.orientationProperty().getValue(), Orientation.VERTICAL);\n+        assertSame(splitPane.orientationProperty().getValue(), Orientation.VERTICAL, \"orientationProperty cannot be bound\");\n@@ -157,1 +160,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", splitPane.orientationProperty().getValue(), Orientation.HORIZONTAL);\n+        assertSame(splitPane.orientationProperty().getValue(), Orientation.HORIZONTAL, \"orientationProperty cannot be bound\");\n@@ -163,1 +166,1 @@\n-        assertEquals(\"positionProperty cannot be bound\", divider1.positionProperty().getValue(), 0.6, 0.0);\n+        assertEquals(divider1.positionProperty().getValue(), 0.6, 0.0, \"positionProperty cannot be bound\");\n@@ -165,1 +168,1 @@\n-        assertEquals(\"positionProperty cannot be bound\", divider1.positionProperty().getValue(), 0.9, 0.0);\n+        assertEquals(divider1.positionProperty().getValue(), 0.9, 0.0, \"positionProperty cannot be bound\");\n@@ -171,1 +174,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", splitPane.orientationProperty().getValue(), Orientation.HORIZONTAL);\n+        assertSame(splitPane.orientationProperty().getValue(), Orientation.HORIZONTAL, \"orientationProperty cannot be bound\");\n@@ -173,1 +176,1 @@\n-        assertSame(\"orientationProperty cannot be bound\", splitPane.orientationProperty().getValue(), Orientation.VERTICAL);\n+        assertSame(splitPane.orientationProperty().getValue(), Orientation.VERTICAL, \"orientationProperty cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SplitPaneTest.java","additions":32,"deletions":29,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -28,1 +28,7 @@\n-import com.sun.javafx.scene.SceneHelper;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,11 +38,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import javafx.scene.control.SelectionModel;\n-import javafx.scene.input.ScrollEvent;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import java.lang.ref.WeakReference;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n@@ -58,20 +59,0 @@\n-import javafx.scene.input.KeyEvent;\n-import javafx.scene.input.MouseEvent;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.layout.VBox;\n-import javafx.stage.Stage;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n-import com.sun.javafx.scene.input.KeyCodeMap;\n-import com.sun.javafx.tk.Toolkit;\n-\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n@@ -81,0 +62,1 @@\n+import javafx.scene.control.SelectionModel;\n@@ -83,2 +65,0 @@\n-import javafx.scene.control.skin.TabPaneSkin;\n-import javafx.scene.control.skin.TabPaneSkinShim;\n@@ -89,2 +69,17 @@\n-\n-import java.lang.ref.WeakReference;\n+import javafx.scene.control.skin.TabPaneSkin;\n+import javafx.scene.control.skin.TabPaneSkinShim;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.ScrollEvent;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.scene.input.KeyCodeMap;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -93,1 +88,1 @@\n-    private TabPane tabPane;\/\/Empty string\n+    private TabPane tabPane;\n@@ -103,1 +98,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -194,1 +190,1 @@\n-        assertNull(\"selectionModel cannot be bound\", tabPane.selectionModelProperty().getValue());\n+        assertNull(tabPane.selectionModelProperty().getValue(), \"selectionModel cannot be bound\");\n@@ -196,1 +192,1 @@\n-        assertSame(\"selectionModel cannot be bound\", tabPane.selectionModelProperty().getValue(), sm);\n+        assertSame(tabPane.selectionModelProperty().getValue(), sm, \"selectionModel cannot be bound\");\n@@ -202,1 +198,1 @@\n-        assertSame(\"side cannot be bound\", tabPane.sideProperty().getValue(), Side.BOTTOM);\n+        assertSame(tabPane.sideProperty().getValue(), Side.BOTTOM, \"side cannot be bound\");\n@@ -204,1 +200,1 @@\n-        assertSame(\"side cannot be bound\", tabPane.sideProperty().getValue(), Side.RIGHT);\n+        assertSame(tabPane.sideProperty().getValue(), Side.RIGHT, \"side cannot be bound\");\n@@ -210,1 +206,1 @@\n-        assertSame(\"side cannot be bound\", tabPane.tabClosingPolicyProperty().getValue(), TabPane.TabClosingPolicy.UNAVAILABLE);\n+        assertSame(tabPane.tabClosingPolicyProperty().getValue(), TabPane.TabClosingPolicy.UNAVAILABLE, \"side cannot be bound\");\n@@ -212,1 +208,1 @@\n-        assertSame(\"side cannot be bound\", tabPane.tabClosingPolicyProperty().getValue(), TabPane.TabClosingPolicy.ALL_TABS);\n+        assertSame(tabPane.tabClosingPolicyProperty().getValue(), TabPane.TabClosingPolicy.ALL_TABS, \"side cannot be bound\");\n@@ -218,1 +214,1 @@\n-        assertFalse(\"rotateGraphic cannot be bound\", tabPane.rotateGraphicProperty().getValue());\n+        assertFalse(tabPane.rotateGraphicProperty().getValue(), \"rotateGraphic cannot be bound\");\n@@ -220,1 +216,1 @@\n-        assertTrue(\"rotateGraphic cannot be bound\", tabPane.rotateGraphicProperty().getValue());\n+        assertTrue(tabPane.rotateGraphicProperty().getValue(), \"rotateGraphic cannot be bound\");\n@@ -226,1 +222,1 @@\n-        assertEquals(\"tabMinWidthProperty cannot be bound\", tabPane.tabMinWidthProperty().getValue(), 2.0, 0.0);\n+        assertEquals(tabPane.tabMinWidthProperty().getValue(), 2.0, 0.0, \"tabMinWidthProperty cannot be bound\");\n@@ -228,1 +224,1 @@\n-        assertEquals(\"tabMinWidthProperty cannot be bound\", tabPane.tabMinWidthProperty().getValue(), 5.0, 0.0);\n+        assertEquals(tabPane.tabMinWidthProperty().getValue(), 5.0, 0.0, \"tabMinWidthProperty cannot be bound\");\n@@ -234,1 +230,1 @@\n-        assertEquals(\"tabMaxWidthProperty cannot be bound\", tabPane.tabMaxWidthProperty().getValue(), 2.0, 0.0);\n+        assertEquals(tabPane.tabMaxWidthProperty().getValue(), 2.0, 0.0, \"tabMaxWidthProperty cannot be bound\");\n@@ -236,1 +232,1 @@\n-        assertEquals(\"tabMaxWidthProperty cannot be bound\", tabPane.tabMaxWidthProperty().getValue(), 5.0, 0.0);\n+        assertEquals(tabPane.tabMaxWidthProperty().getValue(), 5.0, 0.0, \"tabMaxWidthProperty cannot be bound\");\n@@ -243,1 +239,1 @@\n-        assertEquals(\"tabMinHeightProperty cannot be bound\", tabPane.tabMinHeightProperty().getValue(), 2.0, 0.0);\n+        assertEquals(tabPane.tabMinHeightProperty().getValue(), 2.0, 0.0, \"tabMinHeightProperty cannot be bound\");\n@@ -245,1 +241,1 @@\n-        assertEquals(\"tabMinHeightProperty cannot be bound\", tabPane.tabMinHeightProperty().getValue(), 5.0, 0.0);\n+        assertEquals(tabPane.tabMinHeightProperty().getValue(), 5.0, 0.0, \"tabMinHeightProperty cannot be bound\");\n@@ -251,1 +247,1 @@\n-        assertEquals(\"tabMaxHeightProperty cannot be bound\", tabPane.tabMaxHeightProperty().getValue(), 2.0, 0.0);\n+        assertEquals(tabPane.tabMaxHeightProperty().getValue(), 2.0, 0.0, \"tabMaxHeightProperty cannot be bound\");\n@@ -253,1 +249,1 @@\n-        assertEquals(\"tabMaxHeightProperty cannot be bound\", tabPane.tabMaxHeightProperty().getValue(), 5.0, 0.0);\n+        assertEquals(tabPane.tabMaxHeightProperty().getValue(), 5.0, 0.0, \"tabMaxHeightProperty cannot be bound\");\n@@ -1003,1 +999,1 @@\n-        assertEquals(tab2.getText() + \" != \" +  tab2.getText(), tab2, selectedTab);\n+        assertEquals(tab2, selectedTab, tab2.getText() + \" != \" +  tab2.getText());\n@@ -1155,2 +1151,2 @@\n-        assertEquals(\"Tabpane should have 3 tabs.\", 3, tabPane.getTabs().size());\n-        assertEquals(\"tab2 should be at index 0.\", tab2, tabPane.getSelectionModel().getSelectedItem());\n+        assertEquals(3, tabPane.getTabs().size(), \"Tabpane should have 3 tabs.\");\n+        assertEquals(tab2, tabPane.getSelectionModel().getSelectedItem(), \"tab2 should be at index 0.\");\n@@ -1200,1 +1196,1 @@\n-        assertEquals(\"ContextMenu should contain 3 items.\", 3, tabsMenu.getItems().size());\n+        assertEquals(3, tabsMenu.getItems().size(), \"ContextMenu should contain 3 items.\");\n@@ -1204,1 +1200,1 @@\n-        assertEquals(\"ContextMenu should contain 3 items.\", 3, tabsMenu.getItems().size());\n+        assertEquals(3, tabsMenu.getItems().size(), \"ContextMenu should contain 3 items.\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TabPaneTest.java","additions":55,"deletions":59,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,6 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -46,1 +48,0 @@\n-import javafx.scene.shape.Rectangle;\n@@ -48,5 +49,5 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import javafx.scene.shape.Rectangle;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -59,2 +60,2 @@\n-    private TabShim tab;\/\/Empty string\n-    private TabShim tabWithStr;\/\/\n+    private TabShim tab;\n+    private TabShim tabWithStr;\n@@ -64,1 +65,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -155,1 +157,1 @@\n-        assertEquals(\"idProperty cannot be bound\", tab.idProperty().getValue(), \"one\");\n+        assertEquals(tab.idProperty().getValue(), \"one\", \"idProperty cannot be bound\");\n@@ -157,1 +159,1 @@\n-        assertEquals(\"idProperty cannot be bound\", tab.idProperty().getValue(), \"another\");\n+        assertEquals(tab.idProperty().getValue(), \"another\", \"idProperty cannot be bound\");\n@@ -163,1 +165,1 @@\n-        assertEquals(\"styleProperty cannot be bound\", tab.styleProperty().getValue(), \"one\");\n+        assertEquals(tab.styleProperty().getValue(), \"one\", \"styleProperty cannot be bound\");\n@@ -165,1 +167,1 @@\n-        assertEquals(\"styleProperty cannot be bound\", tab.styleProperty().getValue(), \"another\");\n+        assertEquals(tab.styleProperty().getValue(), \"another\", \"styleProperty cannot be bound\");\n@@ -171,1 +173,1 @@\n-        assertEquals(\"Text cannot be bound\", tab.textProperty().getValue(), \"value\");\n+        assertEquals(tab.textProperty().getValue(), \"value\", \"Text cannot be bound\");\n@@ -173,1 +175,1 @@\n-        assertEquals(\"Text cannot be bound\", tab.textProperty().getValue(), \"newvalue\");\n+        assertEquals(tab.textProperty().getValue(), \"newvalue\", \"Text cannot be bound\");\n@@ -180,1 +182,1 @@\n-        assertNull(\"Graphic cannot be bound\", tab.graphicProperty().getValue());\n+        assertNull(tab.graphicProperty().getValue(), \"Graphic cannot be bound\");\n@@ -182,1 +184,1 @@\n-        assertSame(\"Graphic cannot be bound\", tab.graphicProperty().getValue(), rect);\n+        assertSame(tab.graphicProperty().getValue(), rect, \"Graphic cannot be bound\");\n@@ -189,1 +191,1 @@\n-        assertNull(\"content cannot be bound\", tab.contentProperty().getValue());\n+        assertNull(tab.contentProperty().getValue(), \"content cannot be bound\");\n@@ -191,1 +193,1 @@\n-        assertSame(\"content cannot be bound\", tab.contentProperty().getValue(), rect);\n+        assertSame(tab.contentProperty().getValue(), rect, \"content cannot be bound\");\n@@ -198,1 +200,1 @@\n-        assertNull(\"contextMenu cannot be bound\", tab.contextMenuProperty().getValue());\n+        assertNull(tab.contextMenuProperty().getValue(), \"contextMenu cannot be bound\");\n@@ -200,1 +202,1 @@\n-        assertSame(\"contextMenu cannot be bound\", tab.contextMenuProperty().getValue(), mnu);\n+        assertSame(tab.contextMenuProperty().getValue(), mnu, \"contextMenu cannot be bound\");\n@@ -206,1 +208,1 @@\n-        assertTrue(\"closable cannot be bound\", tab.closableProperty().getValue());\n+        assertTrue(tab.closableProperty().getValue(), \"closable cannot be bound\");\n@@ -208,1 +210,1 @@\n-        assertFalse(\"closable cannot be bound\", tab.closableProperty().getValue());\n+        assertFalse(tab.closableProperty().getValue(), \"closable cannot be bound\");\n@@ -214,1 +216,1 @@\n-        assertNull(\"onSelectionChanged cannot be bound\", tab.onSelectionChangedProperty().getValue());\n+        assertNull(tab.onSelectionChangedProperty().getValue(), \"onSelectionChanged cannot be bound\");\n@@ -216,1 +218,1 @@\n-        assertSame(\"onSelectionChanged cannot be bound\", tab.onSelectionChangedProperty().getValue(), eh);\n+        assertSame(tab.onSelectionChangedProperty().getValue(), eh, \"onSelectionChanged cannot be bound\");\n@@ -222,1 +224,1 @@\n-        assertNull(\"onSelectionChanged cannot be bound\", tab.onClosedProperty().getValue());\n+        assertNull(tab.onClosedProperty().getValue(), \"onSelectionChanged cannot be bound\");\n@@ -224,1 +226,1 @@\n-        assertSame(\"onSelectionChanged cannot be bound\", tab.onClosedProperty().getValue(), eh);\n+        assertSame(tab.onClosedProperty().getValue(), eh, \"onSelectionChanged cannot be bound\");\n@@ -230,1 +232,1 @@\n-        assertNull(\"tooltip cannot be bound\", tab.tooltipProperty().getValue());\n+        assertNull(tab.tooltipProperty().getValue(), \"tooltip cannot be bound\");\n@@ -233,1 +235,1 @@\n-        assertSame(\"tooltip cannot be bound\", tab.tooltipProperty().getValue(), tt);\n+        assertSame(tab.tooltipProperty().getValue(), tt, \"tooltip cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TabTest.java","additions":36,"deletions":34,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,2 +32,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -32,8 +33,1 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -46,0 +40,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -52,1 +49,0 @@\n-@RunWith(Parameterized.class)\n@@ -59,3 +55,0 @@\n-    private int cellIndex;\n-    private int editingIndex;\n-\n@@ -64,2 +57,4 @@\n-    @Test\n-    public void testOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -69,5 +64,4 @@\n-        assertEquals(\"sanity: cell index changed\", cellIndex, cell.getIndex());\n-        assertEquals(\"sanity: table editingIndex must be unchanged\", editingIndex, table.getEditingCell().getRow());\n-        assertEquals(\"sanity: table editingColumn must be unchanged\", editingColumn, table.getEditingCell().getTableColumn());\n-        assertFalse(\"cell must not be editing on update from editingIndex\" + editingIndex\n-                + \" to cellIndex \" + cellIndex, cell.isEditing());\n+        assertEquals(cellIndex, cell.getIndex(), \"sanity: cell index changed\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"sanity: table editingIndex must be unchanged\");\n+        assertEquals(editingColumn, table.getEditingCell().getTableColumn(), \"sanity: table editingColumn must be unchanged\");\n+        assertFalse(cell.isEditing(), \"cell must not be editing on update from editingIndex\" + editingIndex + \" to cellIndex \" + cellIndex);\n@@ -76,2 +70,4 @@\n-    @Test\n-    public void testCancelOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCancelOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -85,5 +81,3 @@\n-        assertEquals(\"cell must have fired edit cancel\", 1, events.size());\n-        assertEquals(\"cancel event index must be same as editingIndex\", editingIndex,\n-                events.get(0).getTablePosition().getRow());\n-        assertEquals(\"cancel event index must be same as editingIndex\",\n-                editingIndex, table.getEditingCell().getRow());\n+        assertEquals(1, events.size(), \"cell must have fired edit cancel\");\n+        assertEquals(editingIndex, events.get(0).getTablePosition().getRow(), \"cancel event index must be same as editingIndex\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"cancel event index must be same as editingIndex\");\n@@ -94,2 +88,4 @@\n-    @Test\n-    public void testToEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testToEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -99,5 +95,4 @@\n-        assertEquals(\"sanity: cell at editing index\", editingIndex, cell.getIndex());\n-        assertEquals(\"sanity: table editingIndex must be unchanged\", editingIndex, table.getEditingCell().getRow());\n-        assertEquals(\"sanity: table editingColumn must be unchanged\", editingColumn, table.getEditingCell().getTableColumn());\n-        assertTrue(\"cell must be editing on update from \" + cellIndex\n-                + \" to editingIndex \" + editingIndex, cell.isEditing());\n+        assertEquals(editingIndex, cell.getIndex(), \"sanity: cell at editing index\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"sanity: table editingIndex must be unchanged\");\n+        assertEquals(editingColumn, table.getEditingCell().getTableColumn(), \"sanity: table editingColumn must be unchanged\");\n+        assertTrue(cell.isEditing(), \"cell must be editing on update from \" + cellIndex + \" to editingIndex \" + editingIndex);\n@@ -106,2 +101,4 @@\n-    @Test\n-    public void testStartEvent() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEvent(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -115,4 +112,2 @@\n-        assertEquals(\"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex,\n-                1, events.size());\n-        assertEquals(\"start event index must be same as editingIndex\", editingIndex,\n-                events.get(0).getTablePosition().getRow());\n+        assertEquals(1, events.size(), \"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex);\n+        assertEquals(editingIndex, events.get(0).getTablePosition().getRow(), \"start event index must be same as editingIndex\");\n@@ -123,16 +118,8 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters \/\/ (name = \"{index}: cellIndex {0}, editingIndex {1}\")\n-    public static Collection<Object[]> data() {\n-     \/\/ [0] is cellIndex, [1] is editingIndex\n-        Object[][] data = new Object[][] {\n-            {1, 2}, \/\/ normal\n-            {0, 1}, \/\/ zero cell index\n-            {1, 0}, \/\/ zero editing index\n-            {-1, 1}, \/\/ negative cell - JDK-8265206\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public TableCellEditingTest(int cellIndex, int editingIndex) {\n-        this.cellIndex = cellIndex;\n-        this.editingIndex = editingIndex;\n+    private static Stream<Arguments> parameters() {\n+        \/\/ [0] is cellIndex, [1] is editingIndex\n+        return Stream.of(\n+                Arguments.of(1, 2), \/\/ normal\n+                Arguments.of(0, 1), \/\/ zero cell index\n+                Arguments.of(1, 0), \/\/ zero editing index\n+                Arguments.of(-1, 1) \/\/ negative cell - JDK-8265206\n+        );\n@@ -146,2 +133,4 @@\n-    @Test\n-    public void testEditOnCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOnCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -150,1 +139,1 @@\n-        assertTrue(\"sanity: cell must be editing\", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: cell must be editing\");\n@@ -156,2 +145,4 @@\n-    @Test\n-    public void testEditOffCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOffCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -160,1 +151,1 @@\n-        assertFalse(\"sanity: cell editing must be unchanged\", cell.isEditing());\n+        assertFalse(cell.isEditing(), \"sanity: cell editing must be unchanged\");\n@@ -163,2 +154,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(int cellIndex, int editingIndex) {\n@@ -180,2 +172,2 @@\n-        assertFalse(\"sanity: cellIndex not same as editingIndex\", cellIndex == editingIndex);\n-        assertTrue(\"sanity: valid editingIndex\", editingIndex < model.size());\n+        assertFalse(cellIndex == editingIndex, \"sanity: cellIndex not same as editingIndex\");\n+        assertTrue(editingIndex < model.size(), \"sanity: valid editingIndex\");\n@@ -183,1 +175,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellEditingTest.java","additions":59,"deletions":68,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -33,13 +41,0 @@\n-\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.IndexedCell;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -47,0 +42,1 @@\n+import javafx.beans.property.SimpleStringProperty;\n@@ -50,0 +46,1 @@\n+import javafx.scene.control.IndexedCell;\n@@ -59,0 +56,4 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -72,1 +73,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -89,1 +91,1 @@\n-    @After\n+    @AfterEach\n@@ -495,2 +497,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of cancel event\");\n@@ -509,2 +511,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of cancel event\");\n@@ -523,2 +525,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of cancel event\");\n@@ -538,2 +540,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of cancel event\");\n@@ -557,3 +559,3 @@\n-        assertNull(\"sanity: editing terminated on items modification\", table.getEditingCell());\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTablePosition());\n+        assertNull(table.getEditingCell(), \"sanity: editing terminated on items modification\");\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of cancel event\");\n@@ -582,1 +584,1 @@\n-        assertEquals(\"item must be gc'ed\", null, itemRef.get());\n+        assertEquals(null, itemRef.get(), \"item must be gc'ed\");\n@@ -592,1 +594,1 @@\n-        assertEquals(\"startEdit must fire\", 1, events.size());\n+        assertEquals(1, events.size(), \"startEdit must fire\");\n@@ -602,1 +604,1 @@\n-        assertEquals(\"table must be editing at\", editingCell, table.getEditingCell());\n+        assertEquals(editingCell, table.getEditingCell(), \"table must be editing at\");\n@@ -614,1 +616,1 @@\n-        assertEquals(\"table must be editing at\", editingCell, table.getEditingCell());\n+        assertEquals(editingCell, table.getEditingCell(), \"table must be editing at\");\n@@ -625,1 +627,1 @@\n-        assertEquals(\"startEdit must not fire while editing\", 0, events.size());\n+        assertEquals(0, events.size(), \"startEdit must not fire while editing\");\n@@ -671,2 +673,2 @@\n-        assertEquals(\"sanity: value committed\", value, table.getItems().get(editingRow));\n-        assertEquals(\"commit must not have fired editCancel\", 0, events.size());\n+        assertEquals(value, table.getItems().get(editingRow), \"sanity: value committed\");\n+        assertEquals(0, events.size(), \"commit must not have fired editCancel\");\n@@ -688,3 +690,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event must be same as table's editingCell\",\n-                 editingPosition, events.get(0).getTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingPosition, events.get(0).getTablePosition(), \"editing location of commit event must be same as table's editingCell\");\n@@ -703,3 +704,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event  must be same as editingCellAtStartEdit\",\n-                 editingCellAtStartEdit, events.get(0).getTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingCellAtStartEdit, events.get(0).getTablePosition(), \"editing location of commit event  must be same as editingCellAtStartEdit\");\n@@ -716,3 +716,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event must be same as editingCellAtStartEdit\",\n-                 editingCellAtStartEdit, events.get(0).getTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingCellAtStartEdit, events.get(0).getTablePosition(), \"editing location of commit event must be same as editingCellAtStartEdit\");\n@@ -805,2 +804,2 @@\n-         assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-         assertEquals(\"must not fire editStart\", 0, events.size());\n+         assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+         assertEquals(0, events.size(), \"must not fire editStart\");\n@@ -815,2 +814,2 @@\n-         assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-         assertNull(\"table editing location must not be updated\", table.getEditingCell());\n+         assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+         assertNull(table.getEditingCell(), \"table editing location must not be updated\");\n@@ -885,1 +884,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -891,2 +890,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertEquals(\"table must be editing at intermediate index\", intermediate, table.getEditingCell().getRow());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertEquals(intermediate, table.getEditingCell().getRow(), \"table must be editing at intermediate index\");\n@@ -897,1 +896,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -903,2 +902,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertNull(\"table editing must be cancelled by cell\", table.getEditingCell());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertNull(table.getEditingCell(), \"table editing must be cancelled by cell\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":51,"deletions":52,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,10 @@\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import javafx.scene.control.skin.TableColumnHeader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n@@ -45,7 +52,0 @@\n-import javafx.scene.shape.Rectangle;\n-import javafx.util.Callback;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n@@ -59,1 +59,7 @@\n-\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.shape.Rectangle;\n+import javafx.util.Callback;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n@@ -61,4 +67,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n@@ -77,1 +79,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableColumnTest.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import org.junit.Test;\n-\n@@ -34,0 +32,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +58,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TablePositionBaseTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,8 +30,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n@@ -51,1 +43,22 @@\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -57,1 +70,0 @@\n-@RunWith(Parameterized.class)\n@@ -59,6 +71,5 @@\n-    @Parameterized.Parameters\n-    public static Collection<?> implementations() {\n-        return Arrays.asList(new Object[][] {\n-            {NodeOrientation.LEFT_TO_RIGHT},\n-            {NodeOrientation.RIGHT_TO_LEFT}\n-        });\n+    public static Collection<NodeOrientation> parameters() {\n+        return Arrays.asList(\n+            NodeOrientation.LEFT_TO_RIGHT,\n+            NodeOrientation.RIGHT_TO_LEFT\n+        );\n@@ -81,6 +92,4 @@\n-    public TableViewHorizontalArrowsTest(NodeOrientation val) {\n-        orientation = val;\n-    }\n-\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(NodeOrientation orientation) {\n+        this.orientation = orientation;\n@@ -110,1 +119,1 @@\n-    @After\n+    @AfterEach\n@@ -122,2 +131,1 @@\n-        orientation = (orientation == NodeOrientation.LEFT_TO_RIGHT?\n-            NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.LEFT_TO_RIGHT);\n+        orientation = (orientation == NodeOrientation.LEFT_TO_RIGHT ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.LEFT_TO_RIGHT);\n@@ -168,2 +176,4 @@\n-    @Test\n-    public void testForwardSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testForwardSelect(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -172,2 +182,2 @@\n-        assertTrue(\"next cell must be selected\", sm.isSelected(0, col1));\n-        assertFalse(\"old cell not be selected\", sm.isSelected(0, col0));\n+        assertTrue(sm.isSelected(0, col1), \"next cell must be selected\");\n+        assertFalse(sm.isSelected(0, col0), \"old cell not be selected\");\n@@ -176,2 +186,4 @@\n-    @Test\n-    public void testBackwardSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBackwardSelect(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -180,2 +192,2 @@\n-        assertTrue(\"next cell must be selected\", sm.isSelected(0, col3));\n-        assertFalse(\"old cell not be selected\", sm.isSelected(0, col4));\n+        assertTrue(sm.isSelected(0, col3), \"next cell must be selected\");\n+        assertFalse(sm.isSelected(0, col4), \"old cell not be selected\");\n@@ -184,2 +196,4 @@\n-    @Test\n-    public void testForwardFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testForwardFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -188,2 +202,2 @@\n-        assertTrue(\"selected cell must still be selected\", sm.isSelected(0, col0));\n-        assertFalse(\"next cell must not be selected\", sm.isSelected(0, col1));\n+        assertTrue(sm.isSelected(0, col0), \"selected cell must still be selected\");\n+        assertFalse(sm.isSelected(0, col1), \"next cell must not be selected\");\n@@ -191,1 +205,1 @@\n-        assertEquals(\"focused cell must moved to next\", col1, focusedCell.getTableColumn());\n+        assertEquals(col1, focusedCell.getTableColumn(), \"focused cell must moved to next\");\n@@ -194,2 +208,4 @@\n-    @Test\n-    public void testBackwardFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBackwardFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -198,2 +214,2 @@\n-        assertTrue(\"selected cell must still be selected\", sm.isSelected(0, col4));\n-        assertFalse(\"previous cell must not be selected\", sm.isSelected(0, col3));\n+        assertTrue(sm.isSelected(0, col4), \"selected cell must still be selected\");\n+        assertFalse(sm.isSelected(0, col3), \"previous cell must not be selected\");\n@@ -201,1 +217,1 @@\n-        assertEquals(\"focused cell must moved to prev\", col3, focusedCell.getTableColumn());\n+        assertEquals(col3, focusedCell.getTableColumn(), \"focused cell must moved to prev\");\n@@ -204,2 +220,4 @@\n-    @Test\n-    public void testChangeOrientationSimpleForwardSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeOrientationSimpleForwardSelect(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -220,2 +238,4 @@\n-    @Test\n-    public void testChangeOrientationSimpleBackwardSelect() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeOrientationSimpleBackwardSelect(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -235,1 +255,4 @@\n-    @Test public void testShiftBackwardWhenAtFirstCol() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testShiftBackwardWhenAtFirstCol(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -239,1 +262,1 @@\n-        assertTrue(\"Selected cell remains selected\", sm.isSelected(0, col0));\n+        assertTrue(sm.isSelected(0, col0), \"Selected cell remains selected\");\n@@ -242,1 +265,1 @@\n-        assertFalse(\"sanity - forward cell must not be selected\", sm.isSelected(0, col1));\n+        assertFalse(sm.isSelected(0, col1), \"sanity - forward cell must not be selected\");\n@@ -245,1 +268,4 @@\n-    @Test public void testShiftForwardWhenAtFirstCol() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testShiftForwardWhenAtFirstCol(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -249,2 +275,2 @@\n-        assertTrue(\"Selected cell remains selected\", sm.isSelected(0, col0));\n-        assertTrue(\"forward cell must also be selected\", sm.isSelected(0, col1));\n+        assertTrue(sm.isSelected(0, col0), \"Selected cell remains selected\");\n+        assertTrue(sm.isSelected(0, col1), \"forward cell must also be selected\");\n@@ -253,1 +279,4 @@\n-    @Test public void testShiftBackwardWhenAtLastCol() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testShiftBackwardWhenAtLastCol(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -256,2 +285,2 @@\n-        assertTrue(\"Selected cell remains selected\", sm.isSelected(0, col4));\n-        assertTrue(\"backward cell must also be selected\", sm.isSelected(0, col3));\n+        assertTrue(sm.isSelected(0, col4), \"Selected cell remains selected\");\n+        assertTrue(sm.isSelected(0, col3), \"backward cell must also be selected\");\n@@ -260,1 +289,4 @@\n-    @Test public void testShiftForwardWhenAtLastCol() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testShiftForwardWhenAtLastCol(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -263,1 +295,1 @@\n-        assertTrue(\"Selected cell remains selected\", sm.isSelected(0, col4));\n+        assertTrue(sm.isSelected(0, col4), \"Selected cell remains selected\");\n@@ -266,1 +298,1 @@\n-        assertFalse(\"sanity - backward cell must not be selected\", sm.isSelected(0, col3));\n+        assertFalse(sm.isSelected(0, col3), \"sanity - backward cell must not be selected\");\n@@ -269,1 +301,4 @@\n-    @Test public void testCtrlBackwardDoesNotMoveRowFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCtrlBackwardDoesNotMoveRowFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -276,2 +311,2 @@\n-        assertTrue(\"Focus should not change\", fm.isFocused(0));\n-        assertTrue(\"Selection should not change\", sm.isSelected(0));\n+        assertTrue(fm.isFocused(0), \"Focus should not change\");\n+        assertTrue(sm.isSelected(0), \"Selection should not change\");\n@@ -280,1 +315,4 @@\n-    @Test public void testCtrlForwardDoesNotMoveRowFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCtrlForwardDoesNotMoveRowFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -287,2 +325,2 @@\n-        assertTrue(\"Focus should not change\", fm.isFocused(0));\n-        assertTrue(\"Selection should not change\", sm.isSelected(0));\n+        assertTrue(fm.isFocused(0), \"Focus should not change\");\n+        assertTrue(sm.isSelected(0), \"Selection should not change\");\n@@ -292,1 +330,4 @@\n-    @Test public void test_rt18591_select_forward_then_backward() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt18591_select_forward_then_backward(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -315,1 +356,0 @@\n-\n@@ -327,1 +367,4 @@\n-    @Test public void test_rt18591_select_backward_then_forward() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt18591_select_backward_then_forward(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -362,1 +405,4 @@\n-    @Test public void test_rt18536_forward_focus_and_selectAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt18536_forward_focus_and_selectAll(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -382,1 +428,4 @@\n-    @Test public void test_rt18536_backward_focus_and_selectAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt18536_backward_focus_and_selectAll(NodeOrientation orientation) {\n+        setup(orientation);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewHorizontalArrowsTest.java","additions":119,"deletions":70,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -28,6 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,3 +53,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -83,1 +83,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -106,1 +107,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -418,1 +420,1 @@\n-        assertTrue(debug(), sm.isSelected(0));\n+        assertTrue(sm.isSelected(0), debug());\n@@ -458,1 +460,1 @@\n-        assertFalse(debug(), sm.isSelected(0));\n+        assertFalse(sm.isSelected(0), debug());\n@@ -571,1 +573,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -611,1 +613,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -734,1 +736,1 @@\n-        assertTrue(debug(),isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -754,1 +756,1 @@\n-        assertTrue(debug(),isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -801,1 +803,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -810,1 +812,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -839,1 +841,1 @@\n-        assertTrue(debug(), isSelected(0,1,2));\n+        assertTrue(isSelected(0,1,2), debug());\n@@ -1113,1 +1115,1 @@\n-        assertTrue(debug(), isSelected(8,10));\n+        assertTrue(isSelected(8,10), debug());\n@@ -1117,1 +1119,1 @@\n-        assertTrue(debug(), isSelected(0,1,2,3,4,5,6,7,8,10));\n+        assertTrue(isSelected(0,1,2,3,4,5,6,7,8,10), debug());\n@@ -1468,1 +1470,1 @@\n-            assertTrue(debug(),sm.isSelected(i,col1));\n+            assertTrue(sm.isSelected(i,col1), debug());\n@@ -1501,1 +1503,1 @@\n-        assertTrue(debug(), isAnchor(5,1));\n+        assertTrue(isAnchor(5,1), debug());\n@@ -1507,1 +1509,1 @@\n-        assertTrue(debug(), isAnchor(5,1));\n+        assertTrue(isAnchor(5,1), debug());\n@@ -1614,1 +1616,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col1), debug());\n@@ -1681,1 +1683,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col3));\n+        assertTrue(sm.isSelected(1, col3), debug());\n@@ -1701,1 +1703,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col4));\n+        assertTrue(sm.isSelected(1, col4), debug());\n@@ -1789,1 +1791,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1801,1 +1803,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1817,1 +1819,1 @@\n-        assertTrue(debug(), fm.isFocused(tableView.getItems().size() - 1));\n+        assertTrue(fm.isFocused(tableView.getItems().size() - 1), debug());\n@@ -1823,1 +1825,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -1857,1 +1859,1 @@\n-        assertTrue(debug(), fm.isFocused(0, col0));\n+        assertTrue(fm.isFocused(0, col0), debug());\n@@ -1874,1 +1876,1 @@\n-        assertTrue(debug(), fm.isFocused(11, col0));\n+        assertTrue(fm.isFocused(11, col0), debug());\n@@ -1890,1 +1892,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -1907,1 +1909,1 @@\n-        assertTrue(debug(), fm.isFocused(11));\n+        assertTrue(fm.isFocused(11), debug());\n@@ -2191,1 +2193,1 @@\n-        assertNotSame(initialSelectionOwner + \" == \" + newSelectionOwner, initialSelectionOwner, newSelectionOwner);\n+        assertNotSame(initialSelectionOwner, newSelectionOwner, initialSelectionOwner + \" == \" + newSelectionOwner);\n@@ -2467,1 +2469,1 @@\n-        assertTrue(\"Focus index incorrectly at: \" + fm.getFocusedIndex(), fm.isFocused(4));\n+        assertTrue(fm.isFocused(4), \"Focus index incorrectly at: \" + fm.getFocusedIndex());\n@@ -2705,1 +2707,1 @@\n-        assertEquals(debug(), 2, getAnchor().getRow());\n+        assertEquals(2, getAnchor().getRow(), debug());\n@@ -4222,1 +4224,1 @@\n-        assertEquals(debug(), 4, sm.getSelectedCells().size());\n+        assertEquals(4, sm.getSelectedCells().size(), debug());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewKeyInputTest.java","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,3 +36,0 @@\n-\n-import test.com.sun.javafx.scene.control.test.Person;\n-import com.sun.javafx.tk.Toolkit;\n@@ -54,4 +56,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -63,0 +65,1 @@\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -64,3 +67,0 @@\n-import static org.junit.Assert.*;\n-\n-\/\/@Ignore(\"Disabling tests as they fail with OOM in continuous builds\")\n@@ -78,1 +78,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -92,1 +93,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -162,1 +164,1 @@\n-        assertTrue(debug(), isSelected(7,8,9));\n+        assertTrue(isSelected(7,8,9), debug());\n@@ -166,1 +168,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -177,1 +179,1 @@\n-        assertTrue(debug(), isSelected(5,6,7));\n+        assertTrue(isSelected(5,6,7), debug());\n@@ -181,1 +183,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -666,1 +668,1 @@\n-                assertFalse(\"cell[row: \" + row + \", column: \" + column + \"] is selected, but shouldn't be\", cell.isSelected());\n+                assertFalse(cell.isSelected(), \"cell[row: \" + row + \", column: \" + column + \"] is selected, but shouldn't be\");\n@@ -834,1 +836,1 @@\n-            assertEquals(\"Expected Last Name column, but got \" + cell.getTableColumn().getText(), lastNameCol, cell.getTableColumn());\n+            assertEquals(lastNameCol, cell.getTableColumn(), \"Expected Last Name column, but got \" + cell.getTableColumn().getText());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewMouseInputTest.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -37,2 +37,1 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -252,1 +251,1 @@\n-                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+                assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n@@ -261,1 +260,1 @@\n-                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+                assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewResizeTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,2 +37,2 @@\n-import org.junit.After;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +48,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewRowTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,4 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,0 +45,4 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,10 +51,0 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import static org.junit.Assert.*;\n-\n@@ -63,1 +58,0 @@\n-@RunWith(Parameterized.class)\n@@ -69,1 +63,2 @@\n-    private Class<? extends TableViewSelectionModel >modelClass;\n+    \/\/ converted from parameterized test with just one choice\n+    private static final Class<? extends TableViewSelectionModel>modelClass = TableViewShim.get_TableViewArrayListSelectionModel_class();\n@@ -100,13 +95,0 @@\n-\n-\n-        \/\/ --- TableView init\n-    }\n-\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { TableViewShim.get_TableViewArrayListSelectionModel_class() }\n-        });\n-    }\n-\n-    public TableViewSelectionModelImplTest(Class<? extends TableViewSelectionModel> modelClass) {\n-        this.modelClass = modelClass;\n@@ -115,1 +97,2 @@\n-    @AfterClass public static void tearDownClass() throws Exception {    }\n+    @AfterAll\n+    public static void tearDownClass() throws Exception {    }\n@@ -117,1 +100,2 @@\n-    @Before public void setUp() throws Exception {\n+    @BeforeEach\n+    public void setUp() throws Exception {\n@@ -132,1 +116,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -176,1 +161,1 @@\n-        assertFalse(cells(model), model.isSelected(3, null));\n+        assertFalse(model.isSelected(3, null), cells(model));\n@@ -189,1 +174,1 @@\n-        assertFalse(cells(model), model.isSelected(3, null));\n+        assertFalse(model.isSelected(3, null), cells(model));\n@@ -322,2 +307,2 @@\n-        assertFalse(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col2));\n+        assertFalse(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col2), cells(model));\n@@ -364,2 +349,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col0));\n+        assertTrue(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col0), cells(model));\n@@ -375,2 +360,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col2));\n+        assertTrue(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col2), cells(model));\n@@ -385,1 +370,1 @@\n-        assertFalse(cells(model), model.isSelected(10, null));\n+        assertFalse(model.isSelected(10, null), cells(model));\n@@ -394,2 +379,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col2));\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2, col2), cells(model));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -418,2 +403,2 @@\n-        assertFalse(indices(model), model.isSelected(2));\n-        assertTrue(indices(model), model.isSelected(3));\n+        assertFalse(model.isSelected(2), indices(model));\n+        assertTrue(model.isSelected(3), indices(model));\n@@ -426,1 +411,1 @@\n-        assertTrue(cells(model), model.isSelected(1, col0));\n+        assertTrue(model.isSelected(1, col0), cells(model));\n@@ -436,2 +421,2 @@\n-        assertTrue(cells(model), model.isSelected(0, null));\n-        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(model.isSelected(0, null), cells(model));\n+        assertTrue(model.isSelected(0), cells(model));\n@@ -448,3 +433,3 @@\n-        assertTrue(cells(model), model.isSelected(0, col1));\n-        assertFalse(cells(model), model.isSelected(0, null));\n-        assertFalse(cells(model), model.isSelected(0, col0));\n+        assertTrue(model.isSelected(0, col1), cells(model));\n+        assertFalse(model.isSelected(0, null), cells(model));\n+        assertFalse(model.isSelected(0, col0), cells(model));\n@@ -459,3 +444,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(0, null));\n-        assertTrue(cells(model), model.isSelected(4));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(0, null), cells(model));\n+        assertTrue(model.isSelected(4), cells(model));\n@@ -471,2 +456,2 @@\n-        assertTrue(cells(model), model.isSelected(0, col1));\n-        assertTrue(cells(model), model.isSelected(4, col1));\n+        assertTrue(model.isSelected(0, col1), cells(model));\n+        assertTrue(model.isSelected(4, col1), cells(model));\n@@ -483,1 +468,1 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getItems().size() - 1));\n+        assertTrue(model.isSelected(tableView.getItems().size() - 1), cells(model));\n@@ -492,1 +477,1 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getItems().size() - 1, col1));\n+        assertTrue(model.isSelected(tableView.getItems().size() - 1, col1), cells(model));\n@@ -502,2 +487,2 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getItems().size() - 1));\n-        assertTrue(cells(model), model.isSelected(4));\n+        assertTrue(model.isSelected(tableView.getItems().size() - 1), cells(model));\n+        assertTrue(model.isSelected(4), cells(model));\n@@ -513,2 +498,2 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getItems().size() - 1, col1));\n-        assertTrue(cells(model), model.isSelected(4, col1));\n+        assertTrue(model.isSelected(tableView.getItems().size() - 1, col1), cells(model));\n+        assertTrue(model.isSelected(4, col1), cells(model));\n@@ -521,1 +506,1 @@\n-        assertEquals(cells(model), col0, model.getSelectedCells().get(0).getTableColumn());\n+        assertEquals(col0, model.getSelectedCells().get(0).getTableColumn(), cells(model));\n@@ -534,3 +519,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertFalse(cells(model), model.isSelected(1));\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertFalse(model.isSelected(1), cells(model));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -540,3 +525,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(1));\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(1), cells(model));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -547,3 +532,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(1));\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(1), cells(model));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -551,1 +536,1 @@\n-        assertFalse(cells(model), model.isSelected(3));\n+        assertFalse(model.isSelected(3), cells(model));\n@@ -556,1 +541,1 @@\n-        assertFalse(cells(model), model.isSelected(0));\n+        assertFalse(model.isSelected(0), cells(model));\n@@ -559,1 +544,1 @@\n-        assertTrue(cells(model), model.isSelected(1));\n+        assertTrue(model.isSelected(1), cells(model));\n@@ -561,1 +546,1 @@\n-        assertFalse(cells(model), model.isSelected(1));\n+        assertFalse(model.isSelected(1), cells(model));\n@@ -564,1 +549,1 @@\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -566,1 +551,1 @@\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -568,1 +553,1 @@\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -581,2 +566,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -590,1 +575,1 @@\n-        assertFalse(focusedCell(), focusModel.isFocused(-20, null));\n+        assertFalse(focusModel.isFocused(-20, null), focusedCell());\n@@ -596,1 +581,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -602,2 +587,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -607,2 +592,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(2));\n-        assertTrue(focusedCell(), focusModel.isFocused(2, null));\n+        assertTrue(focusModel.isFocused(2), focusedCell());\n+        assertTrue(focusModel.isFocused(2, null), focusedCell());\n@@ -614,1 +599,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0, null));\n+        assertTrue(focusModel.isFocused(0, null), focusedCell());\n@@ -621,2 +606,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0));\n-        assertTrue(focusedCell(), focusModel.isFocused(0, null));\n+        assertTrue(focusModel.isFocused(0), focusedCell());\n+        assertTrue(focusModel.isFocused(0, null), focusedCell());\n@@ -630,2 +615,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(4));\n-        assertTrue(focusedCell(), focusModel.isFocused(4, null));\n+        assertTrue(focusModel.isFocused(4), focusedCell());\n+        assertTrue(focusModel.isFocused(4, null), focusedCell());\n@@ -640,2 +625,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(1));\n-        assertTrue(focusedCell(), focusModel.isFocused(1, null));\n+        assertTrue(focusModel.isFocused(1), focusedCell());\n+        assertTrue(focusModel.isFocused(1, null), focusedCell());\n@@ -650,2 +635,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount));\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount, null));\n+        assertTrue(focusModel.isFocused(rowCount), focusedCell());\n+        assertTrue(focusModel.isFocused(rowCount, null), focusedCell());\n@@ -657,1 +642,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col1));\n+        assertTrue(focusModel.isFocused(3, col1), focusedCell());\n@@ -662,2 +647,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(2));\n-        assertTrue(focusedCell(), focusModel.isFocused(2, col1));\n+        assertTrue(focusModel.isFocused(2), focusedCell());\n+        assertTrue(focusModel.isFocused(2, col1), focusedCell());\n@@ -670,2 +655,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0));\n-        assertTrue(focusedCell(), focusModel.isFocused(0, col1));\n+        assertTrue(focusModel.isFocused(0), focusedCell());\n+        assertTrue(focusModel.isFocused(0, col1), focusedCell());\n@@ -679,2 +664,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(4));\n-        assertTrue(focusedCell(), focusModel.isFocused(4, col1));\n+        assertTrue(focusModel.isFocused(4), focusedCell());\n+        assertTrue(focusModel.isFocused(4, col1), focusedCell());\n@@ -689,2 +674,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount));\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount, col1));\n+        assertTrue(focusModel.isFocused(rowCount), focusedCell());\n+        assertTrue(focusModel.isFocused(rowCount, col1), focusedCell());\n@@ -698,2 +683,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col0));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col0), focusedCell());\n@@ -707,2 +692,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col0));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col0), focusedCell());\n@@ -716,2 +701,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -725,2 +710,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col1));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col1), focusedCell());\n@@ -737,2 +722,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, rightEdge));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, rightEdge), focusedCell());\n@@ -918,2 +903,2 @@\n-        assertEquals(\"selected index\", 3, model.getSelectedIndex());\n-        assertTrue(\"contained in selected indices\", model.getSelectedIndices().contains(3));\n+        assertEquals(3, model.getSelectedIndex(), \"selected index\");\n+        assertTrue(model.getSelectedIndices().contains(3), \"contained in selected indices\");\n@@ -921,1 +906,1 @@\n-        assertEquals(\"is selected index\", model.getSelectedIndices().contains(3), model.isSelected(3));\n+        assertEquals(model.getSelectedIndices().contains(3), model.isSelected(3), \"is selected index\");\n@@ -960,2 +945,2 @@\n-        assertTrue(\"sanity: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n-        assertTrue(\"sanity: row must be selected\" , sm.isSelected(row));\n+        assertTrue(sm.getSelectedIndices().contains(row), \"sanity: row \" + row + \"contained in selectedIndices\");\n+        assertTrue(sm.isSelected(row), \"sanity: row must be selected\");\n@@ -963,2 +948,2 @@\n-        assertTrue(\"after hiding column: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n-        assertTrue(\"after hiding column: row must be selected\" , sm.isSelected(row));\n+        assertTrue(sm.getSelectedIndices().contains(row), \"after hiding column: row \" + row + \"contained in selectedIndices\");\n+        assertTrue(sm.isSelected(row), \"after hiding column: row must be selected\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewSelectionModelImplTest.java","additions":107,"deletions":122,"binary":false,"changes":229,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import static javafx.collections.FXCollections.observableArrayList;\n@@ -31,4 +31,15 @@\n-import static javafx.collections.FXCollections.*;\n-import static org.junit.Assert.*;\n-\n-import java.util.*;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n@@ -39,17 +50,0 @@\n-\n-import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n-import com.sun.javafx.scene.control.SelectedCellsMap;\n-import com.sun.javafx.scene.control.TableColumnBaseHelper;\n-import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n-import javafx.collections.ObservableSet;\n-import javafx.collections.SetChangeListener;\n-import javafx.css.PseudoClass;\n-import javafx.scene.control.Slider;\n-import javafx.scene.control.TitledPane;\n-import javafx.scene.layout.Region;\n-import org.junit.After;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -59,1 +53,8 @@\n-import javafx.beans.property.*;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ReadOnlyBooleanWrapper;\n+import javafx.beans.property.ReadOnlyIntegerWrapper;\n+import javafx.beans.property.ReadOnlyObjectWrapper;\n+import javafx.beans.property.ReadOnlyStringWrapper;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n@@ -63,0 +64,2 @@\n+import javafx.collections.ObservableSet;\n+import javafx.collections.SetChangeListener;\n@@ -64,0 +67,1 @@\n+import javafx.css.PseudoClass;\n@@ -69,21 +73,0 @@\n-import javafx.scene.control.cell.*;\n-import javafx.scene.control.skin.TableCellSkin;\n-import javafx.scene.control.skin.TableColumnHeader;\n-import javafx.scene.control.skin.TableColumnHeaderShim;\n-import javafx.scene.control.skin.TableHeaderRow;\n-import javafx.scene.control.skin.VirtualFlow;\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.paint.Color;\n-import javafx.scene.shape.Rectangle;\n-import javafx.util.Callback;\n-\n-import com.sun.javafx.tk.Toolkit;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.scene.control.TableColumnComparatorBase.TableColumnComparator;\n@@ -100,0 +83,1 @@\n+import javafx.scene.control.Slider;\n@@ -111,0 +95,1 @@\n+import javafx.scene.control.TitledPane;\n@@ -113,0 +98,35 @@\n+import javafx.scene.control.cell.CheckBoxTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTableCell;\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import javafx.scene.control.cell.TextFieldTableCell;\n+import javafx.scene.control.skin.TableCellSkin;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TableHeaderRow;\n+import javafx.scene.control.skin.TableHeaderRowShim;\n+import javafx.scene.control.skin.VirtualFlow;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.util.Callback;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n+import com.sun.javafx.scene.control.SelectedCellsMap;\n+import com.sun.javafx.scene.control.TableColumnBaseHelper;\n+import com.sun.javafx.scene.control.TableColumnComparatorBase.TableColumnComparator;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.TableColumnHeaderUtil;\n@@ -117,3 +137,0 @@\n-import javafx.scene.control.skin.TableHeaderRowShim;\n-import test.com.sun.javafx.scene.control.infrastructure.TableColumnHeaderUtil;\n-\n@@ -129,1 +146,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -142,1 +160,1 @@\n-    @After\n+    @AfterEach\n@@ -297,1 +315,1 @@\n-        assertNull(\"Selected Item: \" + sm.getSelectedItem(), sm.getSelectedItem());\n+        assertNull(sm.getSelectedItem(), \"Selected Item: \" + sm.getSelectedItem());\n@@ -484,1 +502,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -512,1 +530,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -550,1 +568,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -587,1 +605,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -880,1 +898,1 @@\n-        assertTrue(\"Focus is on \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focus is on \" + fm.getFocusedIndex());\n@@ -2959,1 +2977,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2961,1 +2979,3 @@\n-        readOnlyUnbackedObservableListSubListTest(-1, 0);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            readOnlyUnbackedObservableListSubListTest(-1, 0);\n+        });\n@@ -2964,1 +2984,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2966,1 +2986,3 @@\n-        readOnlyUnbackedObservableListSubListTest(0, 10);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            readOnlyUnbackedObservableListSubListTest(0, 10);\n+        });\n@@ -2969,1 +2991,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2971,1 +2993,3 @@\n-        readOnlyUnbackedObservableListSubListTest(1, 1);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            readOnlyUnbackedObservableListSubListTest(1, 1);\n+        });\n@@ -3036,1 +3060,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -4011,1 +4035,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -4016,1 +4040,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -4021,1 +4045,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -4026,1 +4050,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -5312,1 +5336,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -5367,2 +5391,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -5394,2 +5418,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -5419,1 +5443,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -5421,1 +5445,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -5424,1 +5448,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -5677,1 +5701,1 @@\n-        assertTrue(\"Nested column header should be larger.\", nestedHeaderHeight > initialHeight);\n+        assertTrue(nestedHeaderHeight > initialHeight, \"Nested column header should be larger.\");\n@@ -5680,1 +5704,1 @@\n-        assertEquals(\"Header should shrink to initial size.\", initialHeight, row.getHeight(), 0.01);\n+        assertEquals(initialHeight, row.getHeight(), 0.01, \"Header should shrink to initial size.\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":100,"deletions":76,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,1 +49,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,6 +37,0 @@\n-\n-    public TextAreaDefaultCancelButtonTest(ButtonType buttonType,\n-            boolean consume, boolean registerAfterShowing) {\n-        super(buttonType, consume, registerAfterShowing);\n-    }\n-\n@@ -44,0 +40,2 @@\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n@@ -45,3 +43,3 @@\n-    public void testFallbackFilter() {\n-        if (isEnter()) return;\n-        super.testFallbackFilter();\n+    public void testFallbackFilter(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        if (isEnter(buttonType)) return;\n+        super.testFallbackFilter(buttonType, consume, registerAfterShowing);\n@@ -53,0 +51,2 @@\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n@@ -54,3 +54,3 @@\n-    public void testFallbackHandler() {\n-        if (isEnter()) return;\n-        super.testFallbackHandler();\n+    public void testFallbackHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        if (isEnter(buttonType)) return;\n+        super.testFallbackHandler(buttonType, consume, registerAfterShowing);\n@@ -62,0 +62,2 @@\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n@@ -63,3 +65,3 @@\n-    public void testFallbackSingletonHandler() {\n-        if (isEnter()) return;\n-        super.testFallbackSingletonHandler();\n+    public void testFallbackSingletonHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        if (isEnter(buttonType)) return;\n+        super.testFallbackSingletonHandler(buttonType, consume, registerAfterShowing);\n@@ -71,0 +73,2 @@\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n@@ -72,3 +76,3 @@\n-    public void testFallbackNoHandler() {\n-        if (isEnter()) return;\n-        super.testFallbackNoHandler();\n+    public void testFallbackNoHandler(ButtonType buttonType, boolean consume, boolean registerAfterShowing) {\n+        if (isEnter(buttonType)) return;\n+        super.testFallbackNoHandler(buttonType, consume, registerAfterShowing);\n@@ -81,1 +85,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextAreaDefaultCancelButtonTest.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -37,6 +44,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +56,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -58,1 +63,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -190,1 +196,1 @@\n-        assertTrue(\"PromptText cannot be bound\", txtArea.getPromptText().equals(\"value\"));\n+        assertTrue(txtArea.getPromptText().equals(\"value\"), \"PromptText cannot be bound\");\n@@ -192,1 +198,1 @@\n-        assertTrue(\"PromptText cannot be bound\", txtArea.getPromptText().equals(\"newvalue\"));\n+        assertTrue(txtArea.getPromptText().equals(\"newvalue\"), \"PromptText cannot be bound\");\n@@ -198,1 +204,1 @@\n-        assertEquals(\"Text cannot be bound\", txtArea.getText(), \"value\");\n+        assertEquals(txtArea.getText(), \"value\", \"Text cannot be bound\");\n@@ -200,1 +206,1 @@\n-        assertEquals(\"Text cannot be bound\", txtArea.getText(),  \"newvalue\");\n+        assertEquals(txtArea.getText(),  \"newvalue\", \"Text cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextAreaTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-    public TextFieldDefaultCancelButtonTest(ButtonType buttonType, boolean consume,\n-            boolean registerAfterShowing) {\n-        super(buttonType, consume, registerAfterShowing);\n-    }\n-\n@@ -45,1 +40,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextFieldDefaultCancelButtonTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,5 +31,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n@@ -37,1 +32,23 @@\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -41,1 +58,0 @@\n-import static org.junit.Assert.*;\n@@ -75,1 +91,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -222,1 +239,1 @@\n-        assertTrue(\"PromptText cannot be bound\", txtField.getPromptText().equals(\"value\"));\n+        assertTrue(txtField.getPromptText().equals(\"value\"), \"PromptText cannot be bound\");\n@@ -224,1 +241,1 @@\n-        assertTrue(\"PromptText cannot be bound\", txtField.getPromptText().equals(\"newvalue\"));\n+        assertTrue(txtField.getPromptText().equals(\"newvalue\"), \"PromptText cannot be bound\");\n@@ -230,1 +247,1 @@\n-        assertEquals(\"Text cannot be bound\", txtField.getText(), \"value\");\n+        assertEquals(txtField.getText(), \"value\", \"Text cannot be bound\");\n@@ -232,1 +249,1 @@\n-        assertEquals(\"Text cannot be bound\", txtField.getText(),  \"newvalue\");\n+        assertEquals(txtField.getText(),  \"newvalue\", \"Text cannot be bound\");\n@@ -352,1 +369,1 @@\n-    @Ignore(\"JDK-8229914\")\n+    @Disabled(\"JDK-8229914\")\n@@ -385,1 +402,1 @@\n-        assertEquals(\"event count\", 3, events.size());\n+        assertEquals(3, events.size(), \"event count\");\n@@ -406,1 +423,1 @@\n-        assertEquals(\"event count\", 3, events.size());\n+        assertEquals(3, events.size(), \"event count\");\n@@ -466,2 +483,2 @@\n-        assertEquals(\"actionHandler must be notified\", 1, actions.size());\n-        assertTrue(\"action must be consumed \", actions.get(0).isConsumed());\n+        assertEquals(1, actions.size(), \"actionHandler must be notified\");\n+        assertTrue(actions.get(0).isConsumed(), \"action must be consumed \");\n@@ -664,1 +681,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextFieldTest.java","additions":35,"deletions":18,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import org.junit.Ignore;\n-\n+import org.junit.jupiter.api.Disabled;\n@@ -41,1 +40,1 @@\n-@Ignore\n+@Disabled\n@@ -43,6 +42,1 @@\n-        extends TextFieldDefaultCancelButtonTest {\n-\n-    public TextFieldWithFormatterDefaultCancelButtonTest(ButtonType buttonType,\n-            boolean consume, boolean registerAfterShowing) {\n-        super(buttonType, consume, registerAfterShowing);\n-    }\n+    extends TextFieldDefaultCancelButtonTest {\n@@ -56,1 +50,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextFieldWithFormatterDefaultCancelButtonTest.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,6 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -36,9 +35,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -63,0 +53,4 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.tk.Toolkit;\n@@ -65,0 +59,1 @@\n+\n@@ -67,1 +62,0 @@\n-@RunWith(Parameterized.class)\n@@ -69,7 +63,6 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                {TextField.class},\n-                {PasswordField.class},\n-                {TextArea.class}\n-        });\n+    private static Collection<Class> parameters() {\n+        return Arrays.asList(\n+            TextField.class,\n+            PasswordField.class,\n+            TextArea.class\n+        );\n@@ -79,1 +72,0 @@\n-    private Class type;\n@@ -81,6 +73,3 @@\n-    public TextInputControlTest(Class type) {\n-        this.type = type;\n-    }\n-\n-    @Before public void setup() throws Exception {\n-        textInput = (TextInputControl) type.getDeclaredConstructor().newInstance();\n+    \/\/@BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class type) {\n@@ -88,0 +77,5 @@\n+        try {\n+            textInput = (TextInputControl)type.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            fail(e);\n+        }\n@@ -90,1 +84,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -112,1 +107,4 @@\n-    @Test public void textDefaultsToEmptyString() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textDefaultsToEmptyString(Class type) {\n+        setup(type);\n@@ -116,1 +114,4 @@\n-    @Test public void editableDefaultsToTrue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableDefaultsToTrue(Class type) {\n+        setup(type);\n@@ -120,1 +121,4 @@\n-    @Test public void anchorDefaultsToZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void anchorDefaultsToZero(Class type) {\n+        setup(type);\n@@ -124,1 +128,4 @@\n-    @Test public void caretPositionDefaultsToZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void caretPositionDefaultsToZero(Class type) {\n+        setup(type);\n@@ -128,1 +135,4 @@\n-    @Test public void lengthDefaultsToZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void lengthDefaultsToZero(Class type) {\n+        setup(type);\n@@ -132,1 +142,4 @@\n-    @Test public void selectedTextDefaultsToEmptyString() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextDefaultsToEmptyString(Class type) {\n+        setup(type);\n@@ -136,1 +149,4 @@\n-    @Test public void selectionDefaultsToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionDefaultsToEmpty(Class type) {\n+        setup(type);\n@@ -140,1 +156,4 @@\n-    @Test public void selectionStartDefaultsToZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionStartDefaultsToZero(Class type) {\n+        setup(type);\n@@ -144,1 +163,4 @@\n-    @Test public void selectionEndDefaultsToZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionEndDefaultsToZero(Class type) {\n+        setup(type);\n@@ -152,1 +174,4 @@\n-    @Test public void fontSetFromCSS() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void fontSetFromCSS(Class type) {\n+        setup(type);\n@@ -165,1 +190,4 @@\n-    @Test public void settingTextUpdatesTheText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void settingTextUpdatesTheText(Class type) {\n+        setup(type);\n@@ -171,1 +199,4 @@\n-    @Test public void textCanBeNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textCanBeNull(Class type) {\n+        setup(type);\n@@ -176,1 +207,4 @@\n-    @Test public void textCanBeSwitchedBetweenNullAndAValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textCanBeSwitchedBetweenNullAndAValue(Class type) {\n+        setup(type);\n@@ -182,1 +216,4 @@\n-    @Test public void textCanBeSwitchedFromAValueToNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textCanBeSwitchedFromAValueToNull(Class type) {\n+        setup(type);\n@@ -188,1 +225,4 @@\n-    @Test public void textIsNullThenBoundThenUnboundAndShouldReturnTheValueWhenBound() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textIsNullThenBoundThenUnboundAndShouldReturnTheValueWhenBound(Class type) {\n+        setup(type);\n@@ -196,1 +236,4 @@\n-    @Test public void textHasValueThenIsBoundToNullShouldReturnNullFromGet() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textHasValueThenIsBoundToNullShouldReturnNullFromGet(Class type) {\n+        setup(type);\n@@ -203,1 +246,4 @@\n-    @Test public void textHasValueThenIsBoundToNullAndUnboundShouldReturnNullFromGet() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textHasValueThenIsBoundToNullAndUnboundShouldReturnNullFromGet(Class type) {\n+        setup(type);\n@@ -211,1 +257,4 @@\n-    @Test public void textHasValueThenIsBoundToNullAndUnboundThenSetShouldReturnNewValueFromGet() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textHasValueThenIsBoundToNullAndUnboundThenSetShouldReturnNewValueFromGet(Class type) {\n+        setup(type);\n@@ -220,1 +269,4 @@\n-    @Test public void textCanBeBound() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void textCanBeBound(Class type) {\n+        setup(type);\n@@ -228,1 +280,4 @@\n-    @Test public void cannotSpecifyTextViaCSS() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cannotSpecifyTextViaCSS(Class type) {\n+        setup(type);\n@@ -235,1 +290,1 @@\n-            org.junit.Assert.fail(e.toString());\n+            fail(e);\n@@ -239,1 +294,4 @@\n-    @Test public void settingTextNotifiesOfChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void settingTextNotifiesOfChange(Class type) {\n+        setup(type);\n@@ -249,1 +307,4 @@\n-    @Test public void testControlCharacters() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testControlCharacters(Class type) {\n+        setup(type);\n@@ -275,1 +336,4 @@\n-    @Test public void controlCharactersAreOmitted_setText_getText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void controlCharactersAreOmitted_setText_getText(Class type) {\n+        setup(type);\n@@ -281,1 +345,4 @@\n-    @Test public void controlCharactersAreOmitted_setText_textProperty_get() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void controlCharactersAreOmitted_setText_textProperty_get(Class type) {\n+        setup(type);\n@@ -287,1 +354,4 @@\n-    @Test public void controlCharactersAreOmitted_bound_getText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void controlCharactersAreOmitted_bound_getText(Class type) {\n+        setup(type);\n@@ -295,1 +365,4 @@\n-    @Test public void controlCharactersAreOmitted_bound_textProperty_get() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void controlCharactersAreOmitted_bound_textProperty_get(Class type) {\n+        setup(type);\n@@ -312,1 +385,4 @@\n-    @Test public void settingEditableValueShouldWork() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void settingEditableValueShouldWork(Class type) {\n+        setup(type);\n@@ -317,1 +393,4 @@\n-    @Test public void settingEditableAndThenCreatingAModelAndReadingTheValueStillWorks() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void settingEditableAndThenCreatingAModelAndReadingTheValueStillWorks(Class type) {\n+        setup(type);\n@@ -322,1 +401,4 @@\n-    @Test public void editableCanBeBound() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void editableCanBeBound(Class type) {\n+        setup(type);\n@@ -330,1 +412,4 @@\n-    @Test public void cannotSpecifyEditableViaCSS() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cannotSpecifyEditableViaCSS(Class type) {\n+        setup(type);\n@@ -337,1 +422,1 @@\n-            org.junit.Assert.fail(e.toString());\n+            fail(e);\n@@ -341,1 +426,4 @@\n-    @Test public void settingEditableNotifiesOfChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void settingEditableNotifiesOfChange(Class type) {\n+        setup(type);\n@@ -354,1 +442,4 @@\n-    @Test public void anchorIsSetWhenSelectionChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void anchorIsSetWhenSelectionChanges(Class type) {\n+        setup(type);\n@@ -360,1 +451,4 @@\n-    @Test public void anchorIsSetWhenSelectionChanges2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void anchorIsSetWhenSelectionChanges2(Class type) {\n+        setup(type);\n@@ -367,1 +461,4 @@\n-    @Test public void anchorIsSetToCaretPositionWhenTextChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void anchorIsSetToCaretPositionWhenTextChanges(Class type) {\n+        setup(type);\n@@ -378,1 +475,4 @@\n-    @Test public void caretPositionIsSetWhenSelectionChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void caretPositionIsSetWhenSelectionChanges(Class type) {\n+        setup(type);\n@@ -384,1 +484,4 @@\n-    @Test public void caretPositionIsSetWhenSelectionChanges2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void caretPositionIsSetWhenSelectionChanges2(Class type) {\n+        setup(type);\n@@ -390,2 +493,4 @@\n-    @Test\n-    public void caretAndAnchorPositionAfterSettingText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void caretAndAnchorPositionAfterSettingText(Class type) {\n+        setup(type);\n@@ -398,1 +503,4 @@\n-    @Test public void caretPositionUndo() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void caretPositionUndo(Class type) {\n+        setup(type);\n@@ -437,1 +545,4 @@\n-    @Test public void emptyTextResultsInZeroLength() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void emptyTextResultsInZeroLength(Class type) {\n+        setup(type);\n@@ -443,1 +554,4 @@\n-    @Test public void lengthMatchesStringLength() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void lengthMatchesStringLength(Class type) {\n+        setup(type);\n@@ -449,1 +563,4 @@\n-    @Test public void lengthChangeNotificationWhenTextIsUpdatedToNonEmptyResult() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void lengthChangeNotificationWhenTextIsUpdatedToNonEmptyResult(Class type) {\n+        setup(type);\n@@ -458,1 +575,4 @@\n-    @Test public void lengthChangeNotificationWhenTextIsSetToEmptyResult() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void lengthChangeNotificationWhenTextIsSetToEmptyResult(Class type) {\n+        setup(type);\n@@ -480,1 +600,4 @@\n-    @Test public void selectedTextMatchesTextAndSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextMatchesTextAndSelection(Class type) {\n+        setup(type);\n@@ -486,1 +609,4 @@\n-    @Test public void selectedTextMatchesTextAndSelection2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextMatchesTextAndSelection2(Class type) {\n+        setup(type);\n@@ -492,1 +618,4 @@\n-    @Test public void selectedTextMatchesTextAndSelection3() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextMatchesTextAndSelection3(Class type) {\n+        setup(type);\n@@ -498,1 +627,4 @@\n-    @Test public void selectedTextIsClearedWhenTextChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextIsClearedWhenTextChanges(Class type) {\n+        setup(type);\n@@ -505,1 +637,4 @@\n-    @Test public void selectedTextWorksWhenSelectionExceedsPossibleRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextWorksWhenSelectionExceedsPossibleRange(Class type) {\n+        setup(type);\n@@ -511,1 +646,4 @@\n-    @Test public void selectedTextWorksWhenSelectionExceedsPossibleRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextWorksWhenSelectionExceedsPossibleRange2(Class type) {\n+        setup(type);\n@@ -517,10 +655,4 @@\n-\/\/    @Test public void selectedTextWorksWhenSelectionIsBound() {\n-\/\/        ObjectProperty<IndexRange> other = new SimpleObjectProperty<IndexRange>(new IndexRange(4, 9));\n-\/\/        textInput.setText(\"The quick brown fox\");\n-\/\/        textInput.selectionProperty().bind(other);\n-\/\/        assertEquals(\"quick\", textInput.getSelectedText());\n-\/\/        other.set(new IndexRange(10, 19));\n-\/\/        assertEquals(\"brown fox\", textInput.getSelectedText());\n-\/\/    }\n-\n-    @Test public void selectedTextWorksWhenTextIsBound() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextWorksWhenTextIsBound(Class type) {\n+        setup(type);\n@@ -535,1 +667,4 @@\n-    @Test public void selectedTextChangeEvents() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextChangeEvents(Class type) {\n+        setup(type);\n@@ -545,1 +680,4 @@\n-    @Test public void selectedTextChangeEvents2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextChangeEvents2(Class type) {\n+        setup(type);\n@@ -556,1 +694,4 @@\n-    @Test public void selectedTextChangeEvents3() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectedTextChangeEvents3(Class type) {\n+        setup(type);\n@@ -572,1 +713,4 @@\n-    @Test public void selectionIsClearedWhenTextChanges() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionIsClearedWhenTextChanges(Class type) {\n+        setup(type);\n@@ -579,1 +723,4 @@\n-    @Test public void selectionCannotBeSetToBeOutOfRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionCannotBeSetToBeOutOfRange(Class type) {\n+        setup(type);\n@@ -585,1 +732,4 @@\n-    @Test public void selectionCannotBeSetToBeOutOfRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionCannotBeSetToBeOutOfRange2(Class type) {\n+        setup(type);\n@@ -591,9 +741,4 @@\n-\/\/    @Test public void selectionCanBeBound() {\n-\/\/        ObjectProperty<IndexRange> other = new SimpleObjectProperty<IndexRange>(new IndexRange(4, 9));\n-\/\/        textInput.selectionProperty().bind(other);\n-\/\/        assertEquals(new IndexRange(4, 9), textInput.getSelection());\n-\/\/        other.set(new IndexRange(10, 19));\n-\/\/        assertEquals(new IndexRange(10, 19), textInput.getSelection());\n-\/\/    }\n-\n-    @Test public void selectionChangeEventsHappen() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionChangeEventsHappen(Class type) {\n+        setup(type);\n@@ -608,27 +753,4 @@\n-\/\/    @Test public void selectionChangeEventsHappenWhenBound() {\n-\/\/        final boolean[] passed = new boolean[] { false };\n-\/\/        ObjectProperty<IndexRange> other = new SimpleObjectProperty<IndexRange>(new IndexRange(0, 5));\n-\/\/        textInput.selectionProperty().addListener(new InvalidationListener() {\n-\/\/            @Override public void invalidated(Observable observable) {\n-\/\/                passed[0] = true;\n-\/\/            }\n-\/\/        });\n-\/\/        textInput.selectionProperty().bind(other);\n-\/\/        assertTrue(passed[0]);\n-\/\/    }\n-\n-\/\/    @Test public void selectionChangeEventsHappenWhenBound2() {\n-\/\/        final boolean[] passed = new boolean[] { false };\n-\/\/        ObjectProperty<IndexRange> other = new SimpleObjectProperty<IndexRange>(new IndexRange(0, 5));\n-\/\/        textInput.selectionProperty().bind(other);\n-\/\/        textInput.selectionProperty().addListener(new InvalidationListener() {\n-\/\/            @Override public void invalidated(Observable observable) {\n-\/\/                passed[0] = true;\n-\/\/            }\n-\/\/        });\n-\/\/        assertFalse(passed[0]);\n-\/\/        other.set(new IndexRange(1, 2));\n-\/\/        assertTrue(passed[0]);\n-\/\/    }\n-\n-    @Test public void selectionChangeEventsHappenWhenTextIsChanged() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectionChangeEventsHappenWhenTextIsChanged(Class type) {\n+        setup(type);\n@@ -650,1 +772,4 @@\n-    @Test public void cutRemovesSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cutRemovesSelection(Class type) {\n+        setup(type);\n@@ -659,1 +784,4 @@\n-    @Test public void pasteReplacesSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteReplacesSelection(Class type) {\n+        setup(type);\n@@ -667,1 +795,4 @@\n-    @Test public void pasteIllegalCharacters() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteIllegalCharacters(Class type) {\n+        setup(type);\n@@ -675,1 +806,4 @@\n-    @Test public void pasteIllegalCharactersCaretNotAtZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteIllegalCharactersCaretNotAtZero(Class type) {\n+        setup(type);\n@@ -684,1 +818,4 @@\n-    @Test public void pasteIllegalCharactersSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteIllegalCharactersSelection(Class type) {\n+        setup(type);\n@@ -692,1 +829,4 @@\n-    @Test public void pasteIllegalCharactersIntoSelectionPositionsCaretCorrectly() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteIllegalCharactersIntoSelectionPositionsCaretCorrectly(Class type) {\n+        setup(type);\n@@ -706,1 +846,4 @@\n-    @Test public void cutRemovesSelectionAndResetsAnchorAndCaretPositionToIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void cutRemovesSelectionAndResetsAnchorAndCaretPositionToIndex(Class type) {\n+        setup(type);\n@@ -718,1 +861,4 @@\n-    @Test public void pasteWithEmptySelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteWithEmptySelection(Class type) {\n+        setup(type);\n@@ -729,1 +875,4 @@\n-    @Test public void pasteWithSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteWithSelection(Class type) {\n+        setup(type);\n@@ -740,1 +889,4 @@\n-    @Test public void pasteAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pasteAll(Class type) {\n+        setup(type);\n@@ -751,1 +903,4 @@\n-    @Test public void selectBackwardHasNoEffectWhenCaretPositionIsAlreadyZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectBackwardHasNoEffectWhenCaretPositionIsAlreadyZero(Class type) {\n+        setup(type);\n@@ -759,1 +914,4 @@\n-    @Test public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionRightOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionRightOfAnchor(Class type) {\n+        setup(type);\n@@ -767,1 +925,4 @@\n-    @Test public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -775,1 +936,4 @@\n-    @Test public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionLeftOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectBackwardMovesCaretPositionOnePlaceLeft_CaretPositionLeftOfAnchor(Class type) {\n+        setup(type);\n@@ -783,1 +947,4 @@\n-    @Test public void selectForwardHasNoEffectWhenCaretPositionIsAtLength() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectForwardHasNoEffectWhenCaretPositionIsAtLength(Class type) {\n+        setup(type);\n@@ -791,1 +958,4 @@\n-    @Test public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionRightOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionRightOfAnchor(Class type) {\n+        setup(type);\n@@ -799,1 +969,4 @@\n-    @Test public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -807,1 +980,4 @@\n-    @Test public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionLeftOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectForwardMovesCaretPositionOnePlaceRight_CaretPositionLeftOfAnchor(Class type) {\n+        setup(type);\n@@ -815,1 +991,4 @@\n-    @Test public void previousWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWordWithNoText(Class type) {\n+        setup(type);\n@@ -822,1 +1001,4 @@\n-    @Test public void previousWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -831,1 +1013,4 @@\n-    @Test public void previousWordWithSelection_caretPositionBeforeAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWordWithSelection_caretPositionBeforeAnchor2(Class type) {\n+        setup(type);\n@@ -840,1 +1025,4 @@\n-    @Test public void previousWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -849,1 +1037,4 @@\n-    @Test public void previousWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -858,1 +1049,4 @@\n-    @Test public void previousWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -867,1 +1061,4 @@\n-    @Test public void previousWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -876,1 +1073,4 @@\n-    @Test public void previousWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -885,1 +1085,4 @@\n-    @Test public void previousWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -894,1 +1097,4 @@\n-    @Test public void previousWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -903,1 +1109,4 @@\n-    @Test public void previousWord_withANumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_withANumber(Class type) {\n+        setup(type);\n@@ -912,1 +1121,4 @@\n-    @Test public void previousWord_withALongNumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_withALongNumber(Class type) {\n+        setup(type);\n@@ -921,1 +1133,4 @@\n-    @Test public void nextWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWordWithNoText(Class type) {\n+        setup(type);\n@@ -928,1 +1143,4 @@\n-    @Test public void nextWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -937,1 +1155,4 @@\n-    @Test public void nextWordWithSelection_caretPositionBeforeAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWordWithSelection_caretPositionBeforeAnchor2(Class type) {\n+        setup(type);\n@@ -946,1 +1167,4 @@\n-    @Test public void nextWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -955,1 +1179,4 @@\n-    @Test public void nextWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -964,1 +1191,4 @@\n-    @Test public void nextWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -973,1 +1203,4 @@\n-    @Test public void nextWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -982,1 +1215,4 @@\n-    @Test public void nextWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -991,1 +1227,4 @@\n-    @Test public void nextWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -1000,1 +1239,4 @@\n-    @Test public void nextWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -1009,1 +1251,4 @@\n-    @Test public void nextWord_toTheEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_toTheEnd(Class type) {\n+        setup(type);\n@@ -1018,1 +1263,4 @@\n-    @Test public void nextWord_withANumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_withANumber(Class type) {\n+        setup(type);\n@@ -1027,1 +1275,4 @@\n-    @Test public void nextWord_withALongNumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nextWord_withALongNumber(Class type) {\n+        setup(type);\n@@ -1036,1 +1287,4 @@\n-    @Test public void endOfNextWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWordWithNoText(Class type) {\n+        setup(type);\n@@ -1043,1 +1297,4 @@\n-    @Test public void endOfNextWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -1052,1 +1309,4 @@\n-    @Test public void endOfNextWordWithSelection_caretPositionBeforeAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWordWithSelection_caretPositionBeforeAnchor2(Class type) {\n+        setup(type);\n@@ -1061,1 +1321,4 @@\n-    @Test public void endOfNextWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -1070,1 +1333,4 @@\n-    @Test public void endOfNextWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -1079,1 +1345,4 @@\n-    @Test public void endOfNextWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -1088,1 +1357,4 @@\n-    @Test public void endOfNextWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -1097,1 +1369,4 @@\n-    @Test public void endOfNextWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -1106,1 +1381,4 @@\n-    @Test public void endOfNextWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -1115,1 +1393,4 @@\n-    @Test public void endOfNextWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -1124,1 +1405,4 @@\n-    @Test public void endOfNextWord_withANumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_withANumber(Class type) {\n+        setup(type);\n@@ -1133,1 +1417,4 @@\n-    @Test public void endOfNextWord_withANumber_CaretOnANumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_withANumber_CaretOnANumber(Class type) {\n+        setup(type);\n@@ -1142,1 +1429,4 @@\n-    @Test public void endOfNextWord_withALongNumber_CaretOnANumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endOfNextWord_withALongNumber_CaretOnANumber(Class type) {\n+        setup(type);\n@@ -1151,1 +1441,4 @@\n-    @Test public void selectPreviousWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWordWithNoText(Class type) {\n+        setup(type);\n@@ -1158,1 +1451,4 @@\n-    @Test public void selectPreviousWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -1167,1 +1463,4 @@\n-    @Test public void selectPreviousWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -1176,1 +1475,4 @@\n-    @Test public void selectPreviousWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -1185,1 +1487,4 @@\n-    @Test public void selectPreviousWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -1194,1 +1499,4 @@\n-    @Test public void selectPreviousWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -1203,1 +1511,4 @@\n-    @Test public void selectPreviousWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -1212,1 +1523,4 @@\n-    @Test public void selectPreviousWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -1221,1 +1535,4 @@\n-    @Test public void selectPreviousWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPreviousWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -1230,1 +1547,4 @@\n-    @Test public void selectNextWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWordWithNoText(Class type) {\n+        setup(type);\n@@ -1237,1 +1557,4 @@\n-    @Test public void selectNextWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -1246,1 +1569,4 @@\n-    @Test public void selectNextWordWithSelection_caretPositionBeforeAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWordWithSelection_caretPositionBeforeAnchor2(Class type) {\n+        setup(type);\n@@ -1255,1 +1581,4 @@\n-    @Test public void selectNextWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -1264,1 +1593,4 @@\n-    @Test public void selectNextWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -1273,1 +1605,4 @@\n-    @Test public void selectNextWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -1282,1 +1617,4 @@\n-    @Test public void selectNextWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -1291,1 +1629,4 @@\n-    @Test public void selectNextWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -1300,1 +1641,4 @@\n-    @Test public void selectNextWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -1309,1 +1653,4 @@\n-    @Test public void selectNextWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -1318,1 +1665,4 @@\n-    @Test public void selectNextWord_toTheEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectNextWord_toTheEnd(Class type) {\n+        setup(type);\n@@ -1327,1 +1677,4 @@\n-    @Test public void selectEndOfNextWordWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWordWithNoText(Class type) {\n+        setup(type);\n@@ -1334,1 +1687,4 @@\n-    @Test public void selectEndOfNextWordWithSelection_caretPositionBeforeAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWordWithSelection_caretPositionBeforeAnchor(Class type) {\n+        setup(type);\n@@ -1343,1 +1699,4 @@\n-    @Test public void selectEndOfNextWordWithSelection_caretPositionBeforeAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWordWithSelection_caretPositionBeforeAnchor2(Class type) {\n+        setup(type);\n@@ -1352,1 +1711,4 @@\n-    @Test public void selectEndOfNextWordWithSelection_caretPositionAfterAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWordWithSelection_caretPositionAfterAnchor(Class type) {\n+        setup(type);\n@@ -1361,1 +1723,4 @@\n-    @Test public void selectEndOfNextWordWithSelection_caretPositionAfterAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWordWithSelection_caretPositionAfterAnchor2(Class type) {\n+        setup(type);\n@@ -1370,1 +1735,4 @@\n-    @Test public void selectEndOfNextWord_caretWithinAWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWord_caretWithinAWord(Class type) {\n+        setup(type);\n@@ -1379,1 +1747,4 @@\n-    @Test public void selectEndOfNextWord_caretAfterWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWord_caretAfterWord(Class type) {\n+        setup(type);\n@@ -1388,1 +1759,4 @@\n-    @Test public void selectEndOfNextWord_caretBeforeWord() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWord_caretBeforeWord(Class type) {\n+        setup(type);\n@@ -1397,1 +1771,4 @@\n-    @Test public void selectEndOfNextWord_caretWithinWhitespace() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWord_caretWithinWhitespace(Class type) {\n+        setup(type);\n@@ -1406,1 +1783,4 @@\n-    @Test public void selectEndOfNextWord_multipleWhitespaceInARow() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndOfNextWord_multipleWhitespaceInARow(Class type) {\n+        setup(type);\n@@ -1415,1 +1795,4 @@\n-    @Test public void selectAllWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectAllWithNoText(Class type) {\n+        setup(type);\n@@ -1423,1 +1806,4 @@\n-    @Test public void selectAllWithText_caretPositionIsAlwaysAtTheEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectAllWithText_caretPositionIsAlwaysAtTheEnd(Class type) {\n+        setup(type);\n@@ -1431,1 +1817,4 @@\n-    @Test public void homeClearsSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void homeClearsSelection(Class type) {\n+        setup(type);\n@@ -1440,1 +1829,4 @@\n-    @Test public void endClearsSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void endClearsSelection(Class type) {\n+        setup(type);\n@@ -1449,1 +1841,4 @@\n-    @Test public void selectHomeHasNoEffectWhenCaretPositionIsAtZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectHomeHasNoEffectWhenCaretPositionIsAtZero(Class type) {\n+        setup(type);\n@@ -1458,1 +1853,4 @@\n-    @Test public void selectHomeMovesCaretPositionToZero_CaretPositionRightOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectHomeMovesCaretPositionToZero_CaretPositionRightOfAnchor(Class type) {\n+        setup(type);\n@@ -1467,1 +1865,4 @@\n-    @Test public void selectHomeMovesCaretPositionToZero_CaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectHomeMovesCaretPositionToZero_CaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -1476,1 +1877,4 @@\n-    @Test public void selectHomeMovesCaretPositionToZero_CaretPositionLeftOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectHomeMovesCaretPositionToZero_CaretPositionLeftOfAnchor(Class type) {\n+        setup(type);\n@@ -1485,1 +1889,4 @@\n-    @Test public void selectEndHasNoEffectWhenCaretPositionIsAtLength() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndHasNoEffectWhenCaretPositionIsAtLength(Class type) {\n+        setup(type);\n@@ -1494,1 +1901,4 @@\n-    @Test public void selectEndMovesCaretPositionToLength_CaretPositionRightOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndMovesCaretPositionToLength_CaretPositionRightOfAnchor(Class type) {\n+        setup(type);\n@@ -1503,1 +1913,4 @@\n-    @Test public void selectEndMovesCaretPositionToLength_CaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndMovesCaretPositionToLength_CaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -1512,1 +1925,4 @@\n-    @Test public void selectEndMovesCaretPositionToLength_CaretPositionLeftOfAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectEndMovesCaretPositionToLength_CaretPositionLeftOfAnchor(Class type) {\n+        setup(type);\n@@ -1521,1 +1937,4 @@\n-    @Test public void deletePreviousCharDeletesOnlySelectedText_anchorLessThanCaretPosition() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deletePreviousCharDeletesOnlySelectedText_anchorLessThanCaretPosition(Class type) {\n+        setup(type);\n@@ -1531,1 +1950,4 @@\n-    @Test public void deletePreviousCharDeletesOnlySelectedText_caretPositionLessThanAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deletePreviousCharDeletesOnlySelectedText_caretPositionLessThanAnchor(Class type) {\n+        setup(type);\n@@ -1541,1 +1963,4 @@\n-    @Test public void deletePreviousCharDeletesPreviousCharWhenCaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deletePreviousCharDeletesPreviousCharWhenCaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -1551,1 +1976,4 @@\n-    @Test public void deletePreviousCharDoesNothingWhenSelectionIs0_0() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deletePreviousCharDoesNothingWhenSelectionIs0_0(Class type) {\n+        setup(type);\n@@ -1561,1 +1989,4 @@\n-    @Test public void deleteNextCharDeletesOnlySelectedText_anchorLessThanCaretPosition() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deleteNextCharDeletesOnlySelectedText_anchorLessThanCaretPosition(Class type) {\n+        setup(type);\n@@ -1571,1 +2002,4 @@\n-    @Test public void deleteNextCharDeletesOnlySelectedText_caretPositionLessThanAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deleteNextCharDeletesOnlySelectedText_caretPositionLessThanAnchor(Class type) {\n+        setup(type);\n@@ -1581,1 +2015,4 @@\n-    @Test public void deleteNextCharDeletesNextCharWhenCaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deleteNextCharDeletesNextCharWhenCaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -1591,1 +2028,4 @@\n-    @Test public void deleteNextCharDoesNothingWhenSelectionIsEmptyAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void deleteNextCharDoesNothingWhenSelectionIsEmptyAtEnd(Class type) {\n+        setup(type);\n@@ -1601,1 +2041,4 @@\n-    @Test public void forwardSkipsSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void forwardSkipsSelection(Class type) {\n+        setup(type);\n@@ -1610,1 +2053,4 @@\n-    @Test public void forwardSkipsSelection2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void forwardSkipsSelection2(Class type) {\n+        setup(type);\n@@ -1619,1 +2065,4 @@\n-    @Test public void forwardMovesForwardWhenNotAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void forwardMovesForwardWhenNotAtEnd(Class type) {\n+        setup(type);\n@@ -1628,1 +2077,4 @@\n-    @Test public void forwardDoesNothingWhenAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void forwardDoesNothingWhenAtEnd(Class type) {\n+        setup(type);\n@@ -1637,1 +2089,4 @@\n-    @Test public void backwardSkipsSelection() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void backwardSkipsSelection(Class type) {\n+        setup(type);\n@@ -1646,1 +2101,4 @@\n-    @Test public void backwardSkipsSelection2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void backwardSkipsSelection2(Class type) {\n+        setup(type);\n@@ -1655,1 +2113,4 @@\n-    @Test public void backwardMovesBackwardWhenNotAtStart() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void backwardMovesBackwardWhenNotAtStart(Class type) {\n+        setup(type);\n@@ -1664,1 +2125,4 @@\n-    @Test public void backwardDoesNothingWhenAtStart() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void backwardDoesNothingWhenAtStart(Class type) {\n+        setup(type);\n@@ -1673,1 +2137,4 @@\n-    @Test public void positionCaretAtStart() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void positionCaretAtStart(Class type) {\n+        setup(type);\n@@ -1681,1 +2148,4 @@\n-    @Test public void positionCaretInMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void positionCaretInMiddle(Class type) {\n+        setup(type);\n@@ -1689,1 +2159,4 @@\n-    @Test public void positionCaretAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void positionCaretAtEnd(Class type) {\n+        setup(type);\n@@ -1697,1 +2170,4 @@\n-    @Test public void positionCaretBeyondStartClamps() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void positionCaretBeyondStartClamps(Class type) {\n+        setup(type);\n@@ -1705,1 +2181,4 @@\n-    @Test public void positionCaretBeyondEndClamps() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void positionCaretBeyondEndClamps(Class type) {\n+        setup(type);\n@@ -1713,1 +2192,4 @@\n-    @Test public void selectPositionCaretWhenAnchorAndCaretAreBothZero() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaretWhenAnchorAndCaretAreBothZero(Class type) {\n+        setup(type);\n@@ -1722,1 +2204,4 @@\n-    @Test public void selectPositionCaret_anchorLessThanCaretPosition() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_anchorLessThanCaretPosition(Class type) {\n+        setup(type);\n@@ -1731,1 +2216,4 @@\n-    @Test public void selectPositionCaret_anchorLessThanCaretPosition2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_anchorLessThanCaretPosition2(Class type) {\n+        setup(type);\n@@ -1740,1 +2228,4 @@\n-    @Test public void selectPositionCaret_anchorLessThanCaretPosition3() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_anchorLessThanCaretPosition3(Class type) {\n+        setup(type);\n@@ -1749,1 +2240,4 @@\n-    @Test public void selectPositionCaret_caretPositionLessThanAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_caretPositionLessThanAnchor(Class type) {\n+        setup(type);\n@@ -1758,1 +2252,4 @@\n-    @Test public void selectPositionCaret_caretPositionLessThanAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_caretPositionLessThanAnchor2(Class type) {\n+        setup(type);\n@@ -1767,1 +2264,4 @@\n-    @Test public void selectPositionCaret_caretPositionLessThanAnchor3() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaret_caretPositionLessThanAnchor3(Class type) {\n+        setup(type);\n@@ -1776,1 +2276,4 @@\n-    @Test public void selectPositionCaretWhenCaretPositionEqualsAnchor() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaretWhenCaretPositionEqualsAnchor(Class type) {\n+        setup(type);\n@@ -1785,1 +2288,4 @@\n-    @Test public void selectPositionCaretWhenCaretPositionEqualsAnchor2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void selectPositionCaretWhenCaretPositionEqualsAnchor2(Class type) {\n+        setup(type);\n@@ -1794,1 +2300,4 @@\n-    @Test public void extendSelectionWithNoText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void extendSelectionWithNoText(Class type) {\n+        setup(type);\n@@ -1801,1 +2310,4 @@\n-    @Test public void extendSelectionWithOutOfRangePos() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void extendSelectionWithOutOfRangePos(Class type) {\n+        setup(type);\n@@ -1810,1 +2322,4 @@\n-    @Test public void extendSelectionWithOutOfRangePos2() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void extendSelectionWithOutOfRangePos2(Class type) {\n+        setup(type);\n@@ -1819,1 +2334,4 @@\n-    @Test public void test_rt26250_caret_issue_for_thai_characters() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt26250_caret_issue_for_thai_characters(Class type) {\n+        setup(type);\n@@ -1848,1 +2366,4 @@\n-    @Test public void test_rt40376_delete_next_when_text_is_null() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_rt40376_delete_next_when_text_is_null(Class type) {\n+        setup(type);\n@@ -1853,1 +2374,4 @@\n-    @Test public void test_jdk_8171229_replaceText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_jdk_8171229_replaceText(Class type) {\n+        setup(type);\n@@ -1891,1 +2415,4 @@\n-    @Test public void test_redo_replaceText_selectionShortening() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_redo_replaceText_selectionShortening(Class type) {\n+        setup(type);\n@@ -1905,1 +2432,4 @@\n-    @Test public void replaceSelectionAtEndWithListener() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void replaceSelectionAtEndWithListener(Class type) {\n+        setup(type);\n@@ -1918,1 +2448,4 @@\n-    @Test public void testSelectionProperties() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSelectionProperties(Class type) {\n+        setup(type);\n@@ -1950,1 +2483,4 @@\n-    @Test public void UndoRedoSpaceSequence() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void UndoRedoSpaceSequence(Class type) {\n+        setup(type);\n@@ -1992,1 +2528,4 @@\n-    @Test public void UndoRedoReverseSpaceSequence() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void UndoRedoReverseSpaceSequence(Class type) {\n+        setup(type);\n@@ -2042,1 +2581,4 @@\n-    @Test public void UndoRedoWords() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void UndoRedoWords(Class type) {\n+        setup(type);\n@@ -2094,1 +2636,4 @@\n-    @Test public void UndoRedoTimestampBased() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void UndoRedoTimestampBased(Class type) {\n+        setup(type);\n@@ -2149,2 +2694,4 @@\n-    @Test\n-    public void previousWord_Bhojpuri() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void previousWord_Bhojpuri(Class type) {\n+        setup(type);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextInputControlTest.java","additions":824,"deletions":277,"binary":false,"changes":1101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.scene.SceneHelper;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,5 +36,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -46,0 +45,3 @@\n+import javafx.scene.control.Button;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.skin.TitledPaneSkin;\n@@ -51,4 +53,4 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.Toolkit;\n@@ -58,4 +60,0 @@\n-import javafx.scene.control.skin.TitledPaneSkin;\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.TitledPane;\n@@ -76,1 +74,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -141,1 +140,1 @@\n-        assertEquals(\"ContentProperty cannot be bound\", titledPane.contentProperty().getValue(), null);\n+        assertEquals(titledPane.contentProperty().getValue(), null, \"ContentProperty cannot be bound\");\n@@ -144,1 +143,1 @@\n-        assertEquals(\"ContentProperty cannot be bound\", titledPane.contentProperty().getValue(), nde);\n+        assertEquals(titledPane.contentProperty().getValue(), nde, \"ContentProperty cannot be bound\");\n@@ -150,1 +149,1 @@\n-        assertEquals(\"Expanded cannot be bound\", titledPane.expandedProperty().getValue(), true);\n+        assertEquals(titledPane.expandedProperty().getValue(), true, \"Expanded cannot be bound\");\n@@ -152,1 +151,1 @@\n-        assertEquals(\"Expanded cannot be bound\", titledPane.expandedProperty().getValue(), false);\n+        assertEquals(titledPane.expandedProperty().getValue(), false, \"Expanded cannot be bound\");\n@@ -158,1 +157,1 @@\n-        assertEquals(\"Animated cannot be bound\", titledPane.animatedProperty().getValue(), true);\n+        assertEquals(titledPane.animatedProperty().getValue(), true, \"Animated cannot be bound\");\n@@ -160,1 +159,1 @@\n-        assertEquals(\"Animated cannot be bound\", titledPane.animatedProperty().getValue(), false);\n+        assertEquals(titledPane.animatedProperty().getValue(), false, \"Animated cannot be bound\");\n@@ -166,1 +165,1 @@\n-        assertEquals(\"Collapsible cannot be bound\", titledPane.collapsibleProperty().getValue(), true);\n+        assertEquals(titledPane.collapsibleProperty().getValue(), true, \"Collapsible cannot be bound\");\n@@ -168,1 +167,1 @@\n-        assertEquals(\"Collapsible cannot be bound\", titledPane.collapsibleProperty().getValue(), false);\n+        assertEquals(titledPane.collapsibleProperty().getValue(), false, \"Collapsible cannot be bound\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TitledPaneTest.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,5 +28,8 @@\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.logging.PlatformLogger;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -40,4 +43,5 @@\n-import static org.junit.Assert.*;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.logging.PlatformLogger;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -57,1 +61,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -245,1 +250,1 @@\n-        assertTrue(\"fire() doesnt emit ActionEvent!\", flag[0]);\n+        assertTrue(flag[0], \"fire() doesnt emit ActionEvent!\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToggleButtonTest.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,7 @@\n-import com.sun.javafx.event.EventUtil;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -38,7 +44,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertNotNull;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.event.EventUtil;\n@@ -67,1 +69,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToggleGroupTest.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,8 +31,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n@@ -40,1 +32,22 @@\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -57,1 +70,0 @@\n-@RunWith(Parameterized.class)\n@@ -59,6 +71,5 @@\n-    @Parameterized.Parameters\n-    public static Collection<?> implementations() {\n-        return Arrays.asList(new Object[][] {\n-            {NodeOrientation.LEFT_TO_RIGHT},\n-            {NodeOrientation.RIGHT_TO_LEFT}\n-        });\n+    private static Collection<NodeOrientation> parameters() {\n+        return Arrays.asList(\n+            NodeOrientation.LEFT_TO_RIGHT,\n+            NodeOrientation.RIGHT_TO_LEFT\n+        );\n@@ -78,5 +89,4 @@\n-    public ToolBarHorizontalArrowsTest(NodeOrientation val) {\n-        orientation = val;\n-    }\n-\n-    @Before public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(NodeOrientation orientation) {\n+        this.orientation = orientation;\n@@ -107,1 +117,1 @@\n-    @After\n+    @AfterEach\n@@ -154,2 +164,4 @@\n-    @Test\n-    public void testForwardFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testForwardFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -177,2 +189,4 @@\n-    @Test\n-    public void testBackwardFocus() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBackwardFocus(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -198,2 +212,4 @@\n-    @Test\n-    public void testForwardFocusArrows() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testForwardFocusArrows(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -218,2 +234,4 @@\n-    @Test\n-    public void testBackwardFocusArrows() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBackwardFocusArrows(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -243,2 +261,4 @@\n-    @Test\n-    public void testForwardFocusArrows_toggleOrientation() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testForwardFocusArrows_toggleOrientation(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -271,2 +291,4 @@\n-    @Test\n-    public void testBackwardFocusArrows_toggleOrientation() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBackwardFocusArrows_toggleOrientation(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -300,2 +322,4 @@\n-    @Test\n-    public void testMixedFocusArrows_toggleOrientation() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMixedFocusArrows_toggleOrientation(NodeOrientation orientation) {\n+        setup(orientation);\n@@ -327,2 +351,4 @@\n-    @Test\n-    public void testFocusExtremeNodesOfToolBar() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testFocusExtremeNodesOfToolBar(NodeOrientation orientation) {\n+        setup(orientation);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToolBarHorizontalArrowsTest.java","additions":65,"deletions":39,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -30,1 +30,23 @@\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -52,5 +74,0 @@\n-import static org.junit.Assert.*;\n-\n-\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -76,1 +93,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -305,4 +323,7 @@\n-            assertTrue(\"'\" + node.getId() + \"' is overlapping the overflowButton.\" +\n-                            \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n-                            + \" The overflow button \" + \"<\" + overflowButton.getLayoutX() + \"..\" + (overflowButton.getLayoutX() + overflowButton.getWidth()) + \">\",\n-                    nodeX + nodeWidth < overflowButton.getLayoutX());\n+            assertTrue(\n+                nodeX + nodeWidth < overflowButton.getLayoutX(),\n+                \"'\" + node.getId() + \"' is overlapping the overflowButton.\" +\n+                \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+                + \" The overflow button \" + \"<\" + overflowButton.getLayoutX() + \"..\"\n+                + (overflowButton.getLayoutX() + overflowButton.getWidth()) + \">\"\n+            );\n@@ -311,5 +332,6 @@\n-        assertTrue(\"'\" + node.getId() + \"' bounds are outside the toolbar.\" +\n-                        \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n-                        + \" The toolbar width \" + toolBar.getWidth(),\n-                nodeX + nodeWidth < toolBar.getWidth());\n-\n+        assertTrue(\n+            nodeX + nodeWidth < toolBar.getWidth(),\n+            \"'\" + node.getId() + \"' bounds are outside the toolbar.\" +\n+            \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+            + \" The toolbar width \" + toolBar.getWidth()\n+        );\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToolbarTest.java","additions":38,"deletions":16,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,8 +28,10 @@\n-import javafx.css.CssMetaData;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n-import javafx.scene.input.MouseEvent;\n-import javafx.util.Duration;\n-import test.com.sun.javafx.pgstub.StubToolkit;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n@@ -44,0 +46,1 @@\n+import javafx.css.CssMetaData;\n@@ -50,0 +53,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -53,7 +57,7 @@\n-\n-import static org.junit.Assert.*;\n-\n-import org.junit.Before;\n-import org.junit.After;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import javafx.util.Duration;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n@@ -63,3 +67,0 @@\n-import java.nio.charset.StandardCharsets;\n-import java.util.Base64;\n-\n@@ -73,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n@@ -82,1 +83,1 @@\n-    @After\n+    @AfterEach\n@@ -162,1 +163,1 @@\n-        assertTrue(\"Text cannot be bound\", toolTip.textProperty().getValue().equals(\"value\"));\n+        assertTrue(toolTip.textProperty().getValue().equals(\"value\"), \"Text cannot be bound\");\n@@ -164,1 +165,1 @@\n-        assertTrue(\"Text cannot be bound\", toolTip.textProperty().getValue().equals(\"newvalue\"));\n+        assertTrue(toolTip.textProperty().getValue().equals(\"newvalue\"), \"Text cannot be bound\");\n@@ -170,1 +171,1 @@\n-        assertSame(\"TextAlignment cannot be bound\", toolTip.textAlignmentProperty().getValue(), TextAlignment.CENTER);\n+        assertSame(toolTip.textAlignmentProperty().getValue(), TextAlignment.CENTER, \"TextAlignment cannot be bound\");\n@@ -172,1 +173,1 @@\n-        assertSame(\"TextAlignment cannot be bound\", toolTip.textAlignmentProperty().getValue(), TextAlignment.JUSTIFY);\n+        assertSame(toolTip.textAlignmentProperty().getValue(), TextAlignment.JUSTIFY, \"TextAlignment cannot be bound\");\n@@ -178,1 +179,1 @@\n-        assertSame(\"TextOverrun cannot be bound\", toolTip.textOverrunProperty().getValue(), OverrunStyle.CENTER_WORD_ELLIPSIS);\n+        assertSame(toolTip.textOverrunProperty().getValue(), OverrunStyle.CENTER_WORD_ELLIPSIS, \"TextOverrun cannot be bound\");\n@@ -180,1 +181,1 @@\n-        assertSame(\"TextOverrun cannot be bound\", toolTip.textOverrunProperty().getValue(), OverrunStyle.LEADING_ELLIPSIS);\n+        assertSame(toolTip.textOverrunProperty().getValue(), OverrunStyle.LEADING_ELLIPSIS, \"TextOverrun cannot be bound\");\n@@ -186,1 +187,1 @@\n-        assertEquals(\"TextWrap cannot be bound\", toolTip.wrapTextProperty().getValue(), true);\n+        assertEquals(toolTip.wrapTextProperty().getValue(), true, \"TextWrap cannot be bound\");\n@@ -188,1 +189,1 @@\n-        assertEquals(\"TextWrap cannot be bound\", toolTip.wrapTextProperty().getValue(), false);\n+        assertEquals(toolTip.wrapTextProperty().getValue(), false, \"TextWrap cannot be bound\");\n@@ -194,1 +195,1 @@\n-        assertNull(\"Font cannot be bound\", toolTip.fontProperty().getValue());\n+        assertNull(toolTip.fontProperty().getValue(), \"Font cannot be bound\");\n@@ -196,1 +197,1 @@\n-        assertSame(\"Font cannot be bound\", toolTip.fontProperty().getValue(), Font.getDefault());\n+        assertSame(toolTip.fontProperty().getValue(), Font.getDefault(), \"Font cannot be bound\");\n@@ -203,1 +204,1 @@\n-        assertNull(\"Graphic cannot be bound\", toolTip.graphicProperty().getValue());\n+        assertNull(toolTip.graphicProperty().getValue(), \"Graphic cannot be bound\");\n@@ -205,1 +206,1 @@\n-        assertSame(\"Graphic cannot be bound\", toolTip.graphicProperty().getValue(), rect);\n+        assertSame(toolTip.graphicProperty().getValue(), rect, \"Graphic cannot be bound\");\n@@ -212,1 +213,1 @@\n-        assertNull(\"ContentDisplay cannot be bound\", toolTip.contentDisplayProperty().getValue());\n+        assertNull(toolTip.contentDisplayProperty().getValue(), \"ContentDisplay cannot be bound\");\n@@ -214,1 +215,1 @@\n-        assertSame(\"ContentDisplay cannot be bound\", toolTip.contentDisplayProperty().getValue(), cont);\n+        assertSame(toolTip.contentDisplayProperty().getValue(), cont, \"ContentDisplay cannot be bound\");\n@@ -220,1 +221,1 @@\n-        assertEquals(\"GraphicTextGap cannot be bound\", toolTip.graphicTextGapProperty().getValue(), 2.0, 0.0);\n+        assertEquals(toolTip.graphicTextGapProperty().getValue(), 2.0, 0.0, \"GraphicTextGap cannot be bound\");\n@@ -222,1 +223,1 @@\n-        assertEquals(\"GraphicTextGap cannot be bound\", toolTip.graphicTextGapProperty().getValue(), 5.0, 0.0);\n+        assertEquals(toolTip.graphicTextGapProperty().getValue(), 5.0, 0.0, \"GraphicTextGap cannot be bound\");\n@@ -379,1 +380,1 @@\n-    @Ignore(\"CSS sets graphicProperty indirectly\")\n+    @Disabled(\"CSS sets graphicProperty indirectly\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TooltipTest.java","additions":38,"deletions":37,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import org.junit.Test;\n-import com.sun.javafx.tk.Toolkit;\n@@ -47,0 +45,2 @@\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,2 +32,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -32,8 +33,1 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -46,0 +40,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -53,1 +50,0 @@\n-@RunWith(Parameterized.class)\n@@ -59,3 +55,0 @@\n-    private int cellIndex;\n-    private int editingIndex;\n-\n@@ -64,2 +57,4 @@\n-    @Test\n-    public void testOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -69,1 +64,1 @@\n-        assertTrue(\"sanity: cell is editing\", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: cell is editing\");\n@@ -71,3 +66,2 @@\n-        assertEquals(\"sanity: cell index changed\", cellIndex, cell.getIndex());\n-        assertFalse(\"cell must not be editing on update from editingIndex \" + editingIndex\n-                + \" to cellIndex \" + cellIndex, cell.isEditing());\n+        assertEquals(cellIndex, cell.getIndex(), \"sanity: cell index changed\");\n+        assertFalse(cell.isEditing(), \"cell must not be editing on update from editingIndex \" + editingIndex + \" to cellIndex \" + cellIndex);\n@@ -76,2 +70,4 @@\n-    @Test\n-    public void testCancelOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCancelOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -84,5 +80,4 @@\n-        assertEquals(\"sanity: tree editing unchanged\", editingItem, tree.getEditingItem());\n-        assertEquals(\"sanity: editingIndex unchanged\", editingIndex, tree.getRow(editingItem));\n-        assertEquals(\"cell must have fired edit cancel\", 1, events.size());\n-        assertEquals(\"cancel on updateIndex from \" + editingIndex + \" to \" + cellIndex + \"\\n  \",\n-                editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, tree.getEditingItem(), \"sanity: tree editing unchanged\");\n+        assertEquals(editingIndex, tree.getRow(editingItem), \"sanity: editingIndex unchanged\");\n+        assertEquals(1, events.size(), \"cell must have fired edit cancel\");\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"cancel on updateIndex from \" + editingIndex + \" to \" + cellIndex + \"\\n  \");\n@@ -93,2 +88,4 @@\n-    @Test\n-    public void testToEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testToEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -98,1 +95,1 @@\n-        assertFalse(\"sanity: cell must not be editing\", cell.isEditing());\n+        assertFalse(cell.isEditing(), \"sanity: cell must not be editing\");\n@@ -100,3 +97,2 @@\n-        assertEquals(\"sanity: cell at editing index\", editingIndex, cell.getIndex());\n-        assertTrue(\"cell must be editing on update from \" + cellIndex\n-                + \" to editingIndex \" + editingIndex, cell.isEditing());\n+        assertEquals(editingIndex, cell.getIndex(), \"sanity: cell at editing index\");\n+        assertTrue(cell.isEditing(), \"cell must be editing on update from \" + cellIndex + \" to editingIndex \" + editingIndex);\n@@ -105,2 +101,4 @@\n-    @Test\n-    public void testStartEvent() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEvent(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -113,3 +111,2 @@\n-        assertEquals(\"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex,\n-                1, events.size());\n-        assertEquals(\"treeItem of start event \", editingItem, events.get(0).getTreeItem());\n+        assertEquals(1, events.size(), \"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex);\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"treeItem of start event \");\n@@ -120,16 +117,8 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters \/\/(name = \"{index}: cellIndex {0}, editingIndex {1}\")\n-    public static Collection<Object[]> data() {\n-     \/\/ [0] is cellIndex, [1] is editingIndex\n-        Object[][] data = new Object[][] {\n-            {1, 2}, \/\/ normal\n-            {0, 1}, \/\/ zero cell index\n-            {1, 0}, \/\/ zero editing index\n-            {-1, 1}, \/\/ negative cell\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public TreeCellEditingTest(int cellIndex, int editingIndex) {\n-        this.cellIndex = cellIndex;\n-        this.editingIndex = editingIndex;\n+    private static Stream<Arguments> parameters() {\n+        \/\/ (name = \"{index}: cellIndex {0}, editingIndex {1}\")\n+        return Stream.of(\n+            Arguments.of(1, 2), \/\/ normal\n+            Arguments.of(0, 1), \/\/ zero cell index\n+            Arguments.of(1, 0), \/\/ zero editing index\n+            Arguments.of(-1, 1) \/\/ negative cell\n+        );\n@@ -143,2 +132,4 @@\n-    @Test\n-    public void testEditOnCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOnCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -148,1 +139,1 @@\n-        assertTrue(\"sanity: cell must be editing\", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: cell must be editing\");\n@@ -154,2 +145,4 @@\n-    @Test\n-    public void testEditOffCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOffCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -159,1 +152,1 @@\n-        assertFalse(\"sanity: cell editing must be unchanged\", cell.isEditing());\n+        assertFalse(cell.isEditing(), \"sanity: cell editing must be unchanged\");\n@@ -165,2 +158,4 @@\n-    @Test\n-    public void testUpdateSameIndexWhileEdititing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUpdateSameIndexWhileEdititing(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -183,2 +178,4 @@\n-    @Test\n-    public void testUpdateSameIndexWhileNotEdititing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUpdateSameIndexWhileNotEdititing(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -198,1 +195,3 @@\n-    @Before public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setup(int cellIndex, int editingIndex) {\n@@ -212,2 +211,2 @@\n-        assertFalse(\"sanity: cellIndex not same as editingIndex\", cellIndex == editingIndex);\n-        assertTrue(\"sanity: valid editingIndex\", editingIndex < model.size());\n+        assertFalse(cellIndex == editingIndex, \"sanity: cellIndex not same as editingIndex\");\n+        assertTrue(editingIndex < model.size(), \"sanity: valid editingIndex\");\n@@ -215,1 +214,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellEditingTest.java","additions":66,"deletions":68,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -28,0 +28,15 @@\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertListenerListContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertListenerListDoesNotContain;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertValueListenersContains;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertValueListenersDoesNotContain;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getInvalidationListener;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.getListChangeListener;\n@@ -33,14 +48,0 @@\n-\n-import javafx.scene.control.IndexedCell;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.control.ControlShim.*;\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n@@ -50,0 +51,1 @@\n+import javafx.scene.control.IndexedCell;\n@@ -59,0 +61,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -77,1 +84,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -90,1 +98,1 @@\n-    @After\n+    @AfterEach\n@@ -241,1 +249,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -249,1 +257,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -259,1 +267,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -273,1 +281,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -293,1 +301,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -465,1 +473,3 @@\n-    @Ignore @Test public void replacingTheSelectionModelRemovesTheListenerFromTheOldModel() {\n+    @Disabled\n+    @Test\n+    public void replacingTheSelectionModelRemovesTheListenerFromTheOldModel() {\n@@ -722,1 +732,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -737,1 +747,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -752,1 +762,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -767,1 +777,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -782,1 +792,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -800,1 +810,1 @@\n-        assertNull(\"removing item must cancel edit on tree\", tree.getEditingItem());\n+        assertNull(tree.getEditingItem(), \"removing item must cancel edit on tree\");\n@@ -802,1 +812,1 @@\n-        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+        assertEquals(editingItem, events.get(0).getTreeItem(), \"editing location of cancel event\");\n@@ -820,1 +830,1 @@\n-        assertNull(\"removing item must cancel edit on tree\", tree.getEditingItem());\n+        assertNull(tree.getEditingItem(), \"removing item must cancel edit on tree\");\n@@ -823,1 +833,1 @@\n-        assertEquals(\"treeItem must be gc'ed\", null, itemRef.get());\n+        assertEquals(null, itemRef.get(), \"treeItem must be gc'ed\");\n@@ -844,1 +854,1 @@\n-        assertNull(\"removing item must cancel edit on tree\", tree.getEditingItem());\n+        assertNull(tree.getEditingItem(), \"removing item must cancel edit on tree\");\n@@ -847,1 +857,1 @@\n-        assertEquals(\"treeItem must be gc'ed\", null, itemRef.get());\n+        assertEquals(null, itemRef.get(), \"treeItem must be gc'ed\");\n@@ -859,2 +869,2 @@\n-        assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-        assertEquals(\"cell must not fire editStart if not editing\", 0, events.size());\n+        assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+        assertEquals(0, events.size(), \"cell must not fire editStart if not editing\");\n@@ -870,2 +880,2 @@\n-        assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-        assertNull(\"tree editing location must not be updated\", tree.getEditingItem());\n+        assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+        assertNull(tree.getEditingItem(), \"tree editing location must not be updated\");\n@@ -891,2 +901,2 @@\n-        assertEquals(\"sanity: value committed\", value, tree.getTreeItem(editingIndex).getValue());\n-        assertEquals(\"commit must not have fired editCancel\", 0, events.size());\n+        assertEquals(value, tree.getTreeItem(editingIndex).getValue(), \"sanity: value committed\");\n+        assertEquals(0, events.size(), \"commit must not have fired editCancel\");\n@@ -899,1 +909,1 @@\n-        assertNotNull(\"treeView must have default commit handler\", tree.getOnEditCommit());\n+        assertNotNull(tree.getOnEditCommit(), \"treeView must have default commit handler\");\n@@ -908,1 +918,1 @@\n-        assertEquals(\"value committed\", value, editingItem.getValue());\n+        assertEquals(value, editingItem.getValue(), \"value committed\");\n@@ -918,1 +928,1 @@\n-        assertEquals(\"cell text updated to committed value\", value, cell.getText());\n+        assertEquals(value, cell.getText(), \"cell text updated to committed value\");\n@@ -930,1 +940,1 @@\n-        assertEquals(\"edited value must not be committed\", oldValue, editingItem.getValue());\n+        assertEquals(oldValue, editingItem.getValue(), \"edited value must not be committed\");\n@@ -943,1 +953,1 @@\n-        assertEquals(\"cell text must not have changed\", oldValue, cell.getText());\n+        assertEquals(oldValue, cell.getText(), \"cell text must not have changed\");\n@@ -965,2 +975,2 @@\n-        assertTrue(\"sanity: tree must be editable\", tree.isEditable());\n-        assertEquals(\"sanity: returned treeItem\", cellTreeItem, cell.getTreeItem());\n+        assertTrue(tree.isEditable(), \"sanity: tree must be editable\");\n+        assertEquals(cellTreeItem, cell.getTreeItem(), \"sanity: returned treeItem\");\n@@ -968,3 +978,2 @@\n-        assertEquals(\"sanity: cell configured with tree's treeItem at index\",\n-                tree.getTreeItem(cell.getIndex()), cell.getTreeItem());\n-        assertNull(\"sanity: config doesn't change tree state\", tree.getEditingItem());\n+        assertEquals(tree.getTreeItem(cell.getIndex()), cell.getTreeItem(), \"sanity: cell configured with tree's treeItem at index\");\n+        assertNull(tree.getEditingItem(), \"sanity: config doesn't change tree state\");\n@@ -1031,9 +1040,3 @@\n-        assertEquals(\"pref height must be fixedCellSize\",\n-                treeView.getFixedCellSize(),\n-                cell.prefHeight(-1), 1);\n-        assertEquals(\"min height must be fixedCellSize\",\n-                treeView.getFixedCellSize(),\n-                cell.minHeight(-1), 1);\n-        assertEquals(\"max height must be fixedCellSize\",\n-                treeView.getFixedCellSize(),\n-                cell.maxHeight(-1), 1);\n+        assertEquals(treeView.getFixedCellSize(), cell.prefHeight(-1), 1, \"pref height must be fixedCellSize\");\n+        assertEquals(treeView.getFixedCellSize(), cell.minHeight(-1), 1, \"min height must be fixedCellSize\");\n+        assertEquals(treeView.getFixedCellSize(), cell.maxHeight(-1), 1, \"max height must be fixedCellSize\");\n@@ -1114,1 +1117,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellTest.java","additions":61,"deletions":59,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,8 +35,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +50,2 @@\n-    @BeforeClass public static void setUp() {\n+    @BeforeAll\n+    public static void setUp() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeItemTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,2 +32,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -32,8 +33,1 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static org.junit.Assert.*;\n-\n+import java.util.stream.Stream;\n@@ -47,0 +41,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -54,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,3 +57,0 @@\n-    private int cellIndex;\n-    private int editingIndex;\n-\n@@ -66,2 +59,4 @@\n-    @Test\n-    public void testOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -71,5 +66,4 @@\n-        assertEquals(\"sanity: cell index changed\", cellIndex, cell.getIndex());\n-        assertEquals(\"sanity: treeTable editingIndex must be unchanged\", editingIndex, table.getEditingCell().getRow());\n-        assertEquals(\"sanity: treeTable editingColumn must be unchanged\", editingColumn, table.getEditingCell().getTableColumn());\n-        assertFalse(\"cell must not be editing on update from editingIndex\" + editingIndex\n-                + \" to cellIndex \" + cellIndex, cell.isEditing());\n+        assertEquals(cellIndex, cell.getIndex(), \"sanity: cell index changed\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"sanity: treeTable editingIndex must be unchanged\");\n+        assertEquals(editingColumn, table.getEditingCell().getTableColumn(), \"sanity: treeTable editingColumn must be unchanged\");\n+        assertFalse(cell.isEditing(), \"cell must not be editing on update from editingIndex\" + editingIndex + \" to cellIndex \" + cellIndex);\n@@ -78,2 +72,4 @@\n-    @Test\n-    public void testCancelOffEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCancelOffEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -87,5 +83,3 @@\n-        assertEquals(\"cell must have fired edit cancel\", 1, events.size());\n-        assertEquals(\"cancel event index must be same as editingIndex\", editingIndex,\n-                events.get(0).getTreeTablePosition().getRow());\n-        assertEquals(\"cancel event index must be same as editingIndex\",\n-                editingIndex, table.getEditingCell().getRow());\n+        assertEquals(1, events.size(), \"cell must have fired edit cancel\");\n+        assertEquals(editingIndex, events.get(0).getTreeTablePosition().getRow(), \"cancel event index must be same as editingIndex\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"cancel event index must be same as editingIndex\");\n@@ -96,2 +90,4 @@\n-    @Test\n-    public void testToEditingIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testToEditingIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -101,5 +97,4 @@\n-        assertEquals(\"sanity: cell at editing index\", editingIndex, cell.getIndex());\n-        assertEquals(\"sanity: treeTable editingIndex must be unchanged\", editingIndex, table.getEditingCell().getRow());\n-        assertEquals(\"sanity: treeTable editingColumn must be unchanged\", editingColumn, table.getEditingCell().getTableColumn());\n-        assertTrue(\"cell must be editing on update from \" + cellIndex\n-                + \" to editingIndex \" + editingIndex, cell.isEditing());\n+        assertEquals(editingIndex, cell.getIndex(), \"sanity: cell at editing index\");\n+        assertEquals(editingIndex, table.getEditingCell().getRow(), \"sanity: treeTable editingIndex must be unchanged\");\n+        assertEquals(editingColumn, table.getEditingCell().getTableColumn(), \"sanity: treeTable editingColumn must be unchanged\");\n+        assertTrue(cell.isEditing(), \"cell must be editing on update from \" + cellIndex + \" to editingIndex \" + editingIndex);\n@@ -108,2 +103,4 @@\n-    @Test\n-    public void testStartEvent() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEvent(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -117,4 +114,2 @@\n-        assertEquals(\"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex,\n-                1, events.size());\n-        assertEquals(\"start event index must be same as editingIndex\", editingIndex,\n-                events.get(0).getTreeTablePosition().getRow());\n+        assertEquals(1, events.size(), \"cell must have fired edit start on update from \" + cellIndex + \" to \" + editingIndex);\n+        assertEquals(editingIndex, events.get(0).getTreeTablePosition().getRow(), \"start event index must be same as editingIndex\");\n@@ -125,16 +120,9 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters \/\/(name = \"{index}: cellIndex {0}, editingIndex {1}\")\n-    public static Collection<Object[]> data() {\n-     \/\/ [0] is cellIndex, [1] is editingIndex\n-        Object[][] data = new Object[][] {\n-            {1, 2}, \/\/ normal\n-            {0, 1}, \/\/ zero cell index\n-            {1, 0}, \/\/ zero editing index\n-            {-1, 1}, \/\/ negative cell - JDK-8265206\n-        };\n-        return Arrays.asList(data);\n-    }\n-\n-    public TreeTableCellEditingTest(int cellIndex, int editingIndex) {\n-        this.cellIndex = cellIndex;\n-        this.editingIndex = editingIndex;\n+    \/\/ (name = \"{index}: cellIndex {0}, editingIndex {1}\")\n+    private static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            \/\/ [0] is cellIndex, [1] is editingIndex\n+            Arguments.of(1, 2), \/\/ normal\n+            Arguments.of(0, 1), \/\/ zero cell index\n+            Arguments.of(1, 0), \/\/ zero editing index\n+            Arguments.of(-1, 1) \/\/ negative cell - JDK-8265206\n+        );\n@@ -148,2 +136,4 @@\n-    @Test\n-    public void testEditOnCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOnCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -152,1 +142,1 @@\n-        assertTrue(\"sanity: cell must be editing\", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: cell must be editing\");\n@@ -158,2 +148,4 @@\n-    @Test\n-    public void testEditOffCellIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEditOffCellIndex(int cellIndex, int editingIndex) {\n+        setup(cellIndex, editingIndex);\n@@ -162,1 +154,1 @@\n-        assertFalse(\"sanity: cell editing must be unchanged\", cell.isEditing());\n+        assertFalse(cell.isEditing(), \"sanity: cell editing must be unchanged\");\n@@ -165,2 +157,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setup(int cellIndex, int editingIndex) {\n@@ -186,2 +179,2 @@\n-        assertFalse(\"sanity: cellIndex not same as editingIndex\", cellIndex == editingIndex);\n-        assertTrue(\"sanity: valid editingIndex\", editingIndex < model.size());\n+        assertFalse(cellIndex == editingIndex, \"sanity: cellIndex not same as editingIndex\");\n+        assertTrue(editingIndex < model.size(), \"sanity: valid editingIndex\");\n@@ -189,1 +182,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellEditingTest.java","additions":60,"deletions":68,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -28,6 +28,13 @@\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.IndexedCell;\n-import javafx.scene.control.skin.TreeTableCellSkin;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import javafx.beans.property.SimpleObjectProperty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -35,0 +42,2 @@\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n@@ -36,0 +45,1 @@\n+import javafx.scene.control.IndexedCell;\n@@ -44,12 +54,5 @@\n-\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import javafx.scene.control.skin.TreeTableCellSkin;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -57,4 +60,2 @@\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n@@ -80,1 +81,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -104,1 +106,1 @@\n-    @After\n+    @AfterEach\n@@ -129,1 +131,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -140,1 +142,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -173,1 +175,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -181,1 +183,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -191,1 +193,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -205,1 +207,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -225,1 +227,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -233,1 +235,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -261,1 +263,1 @@\n-@Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -280,1 +282,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -351,1 +353,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -836,2 +838,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -850,2 +852,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -864,2 +866,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -879,2 +881,2 @@\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -894,3 +896,3 @@\n-        assertNull(\"sanity: editing terminated on items modification\", tree.getEditingCell());\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertNull(tree.getEditingCell(), \"sanity: editing terminated on items modification\");\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -914,3 +916,3 @@\n-        assertNull(\"sanity: editing terminated on items modification\", tree.getEditingCell());\n-        assertEquals(\"column must have received editCancel\", 1, events.size());\n-        assertEquals(\"editing location of cancel event\", editingPosition, events.get(0).getTreeTablePosition());\n+        assertNull(tree.getEditingCell(), \"sanity: editing terminated on items modification\");\n+        assertEquals(1, events.size(), \"column must have received editCancel\");\n+        assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of cancel event\");\n@@ -937,1 +939,1 @@\n-        assertEquals(\"treeItem must be gc'ed\", null, itemRef.get());\n+        assertEquals(null, itemRef.get(), \"treeItem must be gc'ed\");\n@@ -984,2 +986,2 @@\n-        assertEquals(\"sanity: value committed\", value, tree.getTreeItem(editingRow).getValue());\n-        assertEquals(\"commit must not have fired editCancel\", 0, events.size());\n+        assertEquals(value, tree.getTreeItem(editingRow).getValue(), \"sanity: value committed\");\n+        assertEquals(0, events.size(), \"commit must not have fired editCancel\");\n@@ -1000,3 +1002,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event must be same as table's editingCell\",\n-                 editingPosition, events.get(0).getTreeTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingPosition, events.get(0).getTreeTablePosition(), \"editing location of commit event must be same as table's editingCell\");\n@@ -1015,3 +1016,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event must be same as editingCellAtStartEdit\",\n-                 editingCellAtStartEdit, events.get(0).getTreeTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingCellAtStartEdit, events.get(0).getTreeTablePosition(), \"editing location of commit event must be same as editingCellAtStartEdit\");\n@@ -1028,3 +1028,2 @@\n-         assertEquals(\"column must have received editCommit\", 1, events.size());\n-         assertEquals(\"editing location of commit event must be same as editingCellAtStartEdit\",\n-                 editingCellAtStartEdit, events.get(0).getTreeTablePosition());\n+         assertEquals(1, events.size(), \"column must have received editCommit\");\n+         assertEquals(editingCellAtStartEdit, events.get(0).getTreeTablePosition(), \"editing location of commit event must be same as editingCellAtStartEdit\");\n@@ -1116,2 +1115,2 @@\n-         assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-         assertEquals(\"cell must not fire editStart if not editing\", 0, events.size());\n+         assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+         assertEquals(0, events.size(), \"cell must not fire editStart if not editing\");\n@@ -1125,2 +1124,2 @@\n-         assertFalse(\"sanity: off-range cell must not be editing\", cell.isEditing());\n-         assertNull(\"treetable editing location must not be updated\", tree.getEditingCell());\n+         assertFalse(cell.isEditing(), \"sanity: off-range cell must not be editing\");\n+         assertNull(tree.getEditingCell(), \"treetable editing location must not be updated\");\n@@ -1197,1 +1196,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -1203,2 +1202,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertEquals(\"table must be editing at intermediate index\", intermediate, tree.getEditingCell().getRow());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertEquals(intermediate, tree.getEditingCell().getRow(), \"table must be editing at intermediate index\");\n@@ -1209,1 +1208,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -1215,2 +1214,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertNull(\"table editing must be cancelled by cell\", tree.getEditingCell());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertNull(tree.getEditingCell(), \"table editing must be cancelled by cell\");\n@@ -1301,1 +1300,0 @@\n-\n@@ -1303,1 +1301,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":70,"deletions":73,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,11 @@\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import javafx.scene.control.skin.TableColumnHeader;\n-import test.com.sun.javafx.scene.control.test.Person;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import javafx.beans.property.BooleanProperty;\n@@ -43,8 +50,0 @@\n-import javafx.scene.shape.Rectangle;\n-import javafx.util.Callback;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import javafx.beans.property.BooleanProperty;\n@@ -60,7 +59,9 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.shape.Rectangle;\n+import javafx.util.Callback;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -79,1 +80,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -469,1 +471,1 @@\n-    @Ignore (\"Fails with hardcoded value of 10\")\n+    @Disabled(\"Fails with hardcoded value of 10\")\n@@ -501,1 +503,1 @@\n-    @Ignore (\"Fails with hardcoded value of 5000\")\n+    @Disabled(\"Fails with hardcoded value of 5000\")\n@@ -533,1 +535,1 @@\n-    @Ignore (\"Fails with hardcoded value of 80\")\n+    @Disabled(\"Fails with hardcoded value of 80\")\n@@ -1156,1 +1158,1 @@\n-    @Ignore(\"This started failing when I upgraded to Java 7\")\n+    @Disabled(\"This started failing when I upgraded to Java 7\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableColumnTest.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,4 +43,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -65,1 +65,1 @@\n-    @After\n+    @AfterEach\n@@ -72,1 +72,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -231,1 +232,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -239,1 +240,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -249,1 +250,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -263,1 +264,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -283,1 +284,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -302,1 +303,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -319,1 +320,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -349,1 +350,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -386,1 +387,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -486,1 +487,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -601,1 +602,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n@@ -697,1 +698,1 @@\n-    @Ignore \/\/ TODO file bug!\n+    @Disabled \/\/ TODO file bug!\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n+import java.util.function.Function;\n@@ -35,13 +42,0 @@\n-import javafx.scene.input.KeyCode;\n-import java.util.List;\n-import java.util.function.Function;\n-\n-import com.sun.javafx.PlatformUtil;\n-import com.sun.javafx.util.Utils;\n-import test.com.sun.javafx.scene.control.behavior.TreeTableViewAnchorRetriever;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import com.sun.javafx.tk.Toolkit;\n@@ -58,10 +52,15 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.javafx.util.Utils;\n+import test.com.sun.javafx.scene.control.behavior.TreeTableViewAnchorRetriever;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n@@ -99,1 +98,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -148,1 +148,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -474,2 +475,2 @@\n-        assertTrue(debug(), isSelected(0, 1));\n-        assertTrue(debug(), isNotSelected(2));\n+        assertTrue(isSelected(0, 1), debug());\n+        assertTrue(isNotSelected(2), debug());\n@@ -513,1 +514,1 @@\n-        assertFalse(debug(), sm.isSelected(0));\n+        assertFalse(sm.isSelected(0), debug());\n@@ -626,1 +627,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -666,1 +667,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -789,1 +790,1 @@\n-        assertTrue(debug(),isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -809,1 +810,1 @@\n-        assertTrue(debug(),isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -856,1 +857,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -865,1 +866,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -1168,1 +1169,1 @@\n-        assertTrue(debug(), isSelected(8,10));\n+        assertTrue(isSelected(8,10), debug());\n@@ -1523,1 +1524,1 @@\n-            assertTrue(debug(),sm.isSelected(i,col1));\n+            assertTrue(sm.isSelected(i,col1), debug());\n@@ -1561,1 +1562,1 @@\n-        assertTrue(debug(), isAnchor(5,1));\n+        assertTrue(isAnchor(5,1), debug());\n@@ -1668,1 +1669,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col1), debug());\n@@ -1735,1 +1736,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col3));\n+        assertTrue(sm.isSelected(1, col3), debug());\n@@ -1755,1 +1756,1 @@\n-        assertTrue(debug(), sm.isSelected(1, col4));\n+        assertTrue(sm.isSelected(1, col4), debug());\n@@ -1917,1 +1918,1 @@\n-        assertTrue(debug(), fm.isFocused(5));\n+        assertTrue(fm.isFocused(5), debug());\n@@ -1938,1 +1939,1 @@\n-        assertTrue(debug(),isSelected(0,2,3,4));\n+        assertTrue(isSelected(0,2,3,4), debug());\n@@ -2249,1 +2250,1 @@\n-        assertTrue(debug(), isSelected(0,1,2,3,4,5,6,7,8,9));\n+        assertTrue(isSelected(0,1,2,3,4,5,6,7,8,9), debug());\n@@ -2254,1 +2255,1 @@\n-    @Ignore(\"Not yet working\")\n+    @Disabled(\"Not yet working\")\n@@ -2334,1 +2335,1 @@\n-        assertTrue(debug(), isSelected(0,1,2,3,4,5));\n+        assertTrue(isSelected(0,1,2,3,4,5), debug());\n@@ -2343,1 +2344,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -2355,1 +2356,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -2371,1 +2372,1 @@\n-        assertTrue(debug(), fm.isFocused(getItemCount()));\n+        assertTrue(fm.isFocused(getItemCount()), debug());\n@@ -2377,1 +2378,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -2410,1 +2411,1 @@\n-        assertTrue(debug(), fm.isFocused(0, col0));\n+        assertTrue(fm.isFocused(0, col0), debug());\n@@ -2429,1 +2430,1 @@\n-        assertTrue(debug(), fm.isFocused(13, col0));\n+        assertTrue(fm.isFocused(13, col0), debug());\n@@ -2445,1 +2446,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0), debug());\n@@ -2464,1 +2465,1 @@\n-        assertTrue(debug(), fm.isFocused(13));\n+        assertTrue(fm.isFocused(13), debug());\n@@ -2486,1 +2487,1 @@\n-        assertTrue(debug(), isNotSelected(0,1));\n+        assertTrue(isNotSelected(0,1), debug());\n@@ -2703,1 +2704,1 @@\n-        assertNotSame(initialSelectionOwner + \" == \" + newSelectionOwner, initialSelectionOwner, newSelectionOwner);\n+        assertNotSame(initialSelectionOwner, newSelectionOwner, initialSelectionOwner + \" == \" + newSelectionOwner);\n@@ -2944,1 +2945,1 @@\n-        assertTrue(\"Focus index incorrectly at: \" + fm.getFocusedIndex(), fm.isFocused(4));\n+        assertTrue(fm.isFocused(4), \"Focus index incorrectly at: \" + fm.getFocusedIndex());\n@@ -3445,1 +3446,1 @@\n-        assertEquals(debug(), 0, getAnchor().getColumn());              \/\/ anchor does not move\n+        assertEquals(0, getAnchor().getColumn(), debug());              \/\/ anchor does not move\n@@ -4668,1 +4669,1 @@\n-        assertEquals(debug(), 4, sm.getSelectedCells().size());\n+        assertEquals(4, sm.getSelectedCells().size(), debug());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewKeyInputTest.java","additions":61,"deletions":60,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,11 +28,8 @@\n-import javafx.scene.control.*;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import test.com.sun.javafx.scene.control.behavior.TreeTableViewAnchorRetriever;\n-import test.com.sun.javafx.scene.control.test.Person;\n-\n-import static org.junit.Assert.*;\n-\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -44,0 +41,14 @@\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Cell;\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumnBaseShim;\n+import javafx.scene.control.TableFocusModel;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTablePosition;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n@@ -45,1 +56,0 @@\n-\n@@ -47,9 +57,11 @@\n-import org.junit.After;\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.behavior.TreeTableViewAnchorRetriever;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -57,1 +69,0 @@\n-\/\/@Ignore(\"Disabling tests as they fail with OOM in continuous builds\")\n@@ -84,1 +95,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -137,1 +149,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -216,1 +229,1 @@\n-        assertTrue(debug(), isSelected(7,8,9));\n+        assertTrue(isSelected(7,8,9), debug());\n@@ -220,1 +233,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -231,1 +244,1 @@\n-        assertTrue(debug(), isSelected(5,6,7));\n+        assertTrue(isSelected(5,6,7), debug());\n@@ -235,1 +248,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -445,1 +458,1 @@\n-        assertEquals(sm.getSelectedItems().toString(), 6, sm.getSelectedItems().size());\n+        assertEquals(6, sm.getSelectedItems().size(), sm.getSelectedItems().toString());\n@@ -450,1 +463,1 @@\n-        assertEquals(debug(), 1, sm.getSelectedItems().size());\n+        assertEquals(1, sm.getSelectedItems().size(), debug());\n@@ -477,4 +490,4 @@\n-        assertEquals(\"Actual selected index: \" + sm.getSelectedIndex(), 5, sm.getSelectedIndex());\n-        assertEquals(\"Actual focused index: \" + fm.getFocusedIndex(), 5, fm.getFocusedIndex());\n-        assertTrue(\"Selected indices: \" + sm.getSelectedIndices(), sm.getSelectedIndices().contains(0));\n-        assertTrue(\"Selected items: \" + sm.getSelectedItems(), sm.getSelectedItems().contains(root));\n+        assertEquals(5, sm.getSelectedIndex(), \"Actual selected index: \" + sm.getSelectedIndex());\n+        assertEquals(5, fm.getFocusedIndex(), \"Actual focused index: \" + fm.getFocusedIndex());\n+        assertTrue(sm.getSelectedIndices().contains(0), \"Selected indices: \" + sm.getSelectedIndices());\n+        assertTrue(sm.getSelectedItems().contains(root), \"Selected items: \" + sm.getSelectedItems());\n@@ -484,1 +497,1 @@\n-    @Ignore(\"Test doesn't work - mouse event not firing as expected\")\n+    @Disabled(\"Test doesn't work - mouse event not firing as expected\")\n@@ -836,1 +849,1 @@\n-                assertFalse(\"cell[row: \" + row + \", column: \" + column + \"] is selected, but shouldn't be\", cell.isSelected());\n+                assertFalse(cell.isSelected(), \"cell[row: \" + row + \", column: \" + column + \"] is selected, but shouldn't be\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewMouseInputTest.java","additions":50,"deletions":37,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -29,3 +29,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import com.sun.javafx.tk.Toolkit;\n@@ -41,0 +38,2 @@\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -254,1 +253,1 @@\n-                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+                assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n@@ -263,1 +262,1 @@\n-                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+                assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewResizeTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,16 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +43,0 @@\n-import javafx.scene.control.TreeTableViewShim;\n@@ -58,0 +45,5 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -75,7 +67,2 @@\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { TreeTableViewShim.get_TreeTableViewArrayListSelectionModel_class() }\n-        });\n-    }\n-\n-    @AfterClass public static void tearDownClass() throws Exception {    }\n+    @AfterAll\n+    public static void tearDownClass() throws Exception {    }\n@@ -83,1 +70,2 @@\n-    @Before public void setUp() throws Exception {\n+    @BeforeEach\n+    public void setUp() throws Exception {\n@@ -100,1 +88,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -141,1 +130,1 @@\n-        assertFalse(cells(model), model.isSelected(3, null));\n+        assertFalse(model.isSelected(3, null), cells(model));\n@@ -155,1 +144,1 @@\n-        assertFalse(cells(model), model.isSelected(3, null));\n+        assertFalse(model.isSelected(3, null), cells(model));\n@@ -288,2 +277,2 @@\n-        assertFalse(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col2));\n+        assertFalse(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col2));\n@@ -330,2 +319,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col0));\n+        assertTrue(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col0), cells(model));\n@@ -341,2 +330,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col1));\n-        assertTrue(cells(model), model.isSelected(2, col2));\n+        assertTrue(model.isSelected(2, col1), cells(model));\n+        assertTrue(model.isSelected(2, col2), cells(model));\n@@ -351,1 +340,1 @@\n-        assertFalse(cells(model), model.isSelected(10, null));\n+        assertFalse(model.isSelected(10, null), cells(model));\n@@ -360,2 +349,2 @@\n-        assertTrue(cells(model), model.isSelected(2, col2));\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2, col2), cells(model));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -384,2 +373,2 @@\n-        assertFalse(indices(model), model.isSelected(2));\n-        assertTrue(indices(model), model.isSelected(3));\n+        assertFalse(model.isSelected(2), indices(model));\n+        assertTrue(model.isSelected(3), indices(model));\n@@ -392,1 +381,1 @@\n-        assertTrue(cells(model), model.isSelected(1, col0));\n+        assertTrue(model.isSelected(1, col0), cells(model));\n@@ -402,2 +391,2 @@\n-        assertTrue(cells(model), model.isSelected(0, null));\n-        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(model.isSelected(0, null), cells(model));\n+        assertTrue(model.isSelected(0), cells(model));\n@@ -414,3 +403,3 @@\n-        assertTrue(cells(model), model.isSelected(0, col1));\n-        assertFalse(cells(model), model.isSelected(0, null));\n-        assertFalse(cells(model), model.isSelected(0, col0));\n+        assertTrue(model.isSelected(0, col1), cells(model));\n+        assertFalse(model.isSelected(0, null), cells(model));\n+        assertFalse(model.isSelected(0, col0), cells(model));\n@@ -425,3 +414,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(0, null));\n-        assertTrue(cells(model), model.isSelected(4));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(0, null), cells(model));\n+        assertTrue(model.isSelected(4), cells(model));\n@@ -437,2 +426,2 @@\n-        assertTrue(cells(model), model.isSelected(0, col1));\n-        assertTrue(cells(model), model.isSelected(4, col1));\n+        assertTrue(model.isSelected(0, col1), cells(model));\n+        assertTrue(model.isSelected(4, col1), cells(model));\n@@ -442,2 +431,0 @@\n-\n-\n@@ -449,1 +436,1 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getExpandedItemCount() - 1));\n+        assertTrue(model.isSelected(tableView.getExpandedItemCount() - 1), cells(model));\n@@ -458,1 +445,1 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getExpandedItemCount() - 1, col1));\n+        assertTrue(model.isSelected(tableView.getExpandedItemCount() - 1, col1), cells(model));\n@@ -468,2 +455,2 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getExpandedItemCount() - 1));\n-        assertTrue(cells(model), model.isSelected(4));\n+        assertTrue(model.isSelected(tableView.getExpandedItemCount() - 1), cells(model));\n+        assertTrue(model.isSelected(4), cells(model));\n@@ -479,2 +466,2 @@\n-        assertTrue(cells(model), model.isSelected(tableView.getExpandedItemCount() - 1, col1));\n-        assertTrue(cells(model), model.isSelected(4, col1));\n+        assertTrue(model.isSelected(tableView.getExpandedItemCount() - 1, col1), cells(model));\n+        assertTrue(model.isSelected(4, col1), cells(model));\n@@ -487,1 +474,1 @@\n-        assertEquals(cells(model), col0, model.getSelectedCells().get(0).getTableColumn());\n+        assertEquals(col0, model.getSelectedCells().get(0).getTableColumn(), cells(model));\n@@ -500,3 +487,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertFalse(cells(model), model.isSelected(1));\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertFalse(model.isSelected(1), cells(model));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -506,3 +493,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(1));\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(1), cells(model));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -513,3 +500,3 @@\n-        assertTrue(cells(model), model.isSelected(0));\n-        assertTrue(cells(model), model.isSelected(1));\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(0), cells(model));\n+        assertTrue(model.isSelected(1), cells(model));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -517,1 +504,1 @@\n-        assertFalse(cells(model), model.isSelected(3));\n+        assertFalse(model.isSelected(3), cells(model));\n@@ -522,1 +509,1 @@\n-        assertFalse(cells(model), model.isSelected(0));\n+        assertFalse(model.isSelected(0), cells(model));\n@@ -525,1 +512,1 @@\n-        assertTrue(cells(model), model.isSelected(1));\n+        assertTrue(model.isSelected(1), cells(model));\n@@ -527,1 +514,1 @@\n-        assertFalse(cells(model), model.isSelected(1));\n+        assertFalse(model.isSelected(1), cells(model));\n@@ -530,1 +517,1 @@\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -532,1 +519,1 @@\n-        assertTrue(cells(model), model.isSelected(2));\n+        assertTrue(model.isSelected(2), cells(model));\n@@ -534,1 +521,1 @@\n-        assertFalse(cells(model), model.isSelected(2));\n+        assertFalse(model.isSelected(2), cells(model));\n@@ -547,2 +534,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -556,1 +543,1 @@\n-        assertFalse(focusedCell(), focusModel.isFocused(-20, null));\n+        assertFalse(focusModel.isFocused(-20, null), focusedCell());\n@@ -562,1 +549,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -568,2 +555,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -573,2 +560,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(2));\n-        assertTrue(focusedCell(), focusModel.isFocused(2, null));\n+        assertTrue(focusModel.isFocused(2), focusedCell());\n+        assertTrue(focusModel.isFocused(2, null), focusedCell());\n@@ -580,1 +567,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0, null));\n+        assertTrue(focusModel.isFocused(0, null), focusedCell());\n@@ -587,2 +574,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0));\n-        assertTrue(focusedCell(), focusModel.isFocused(0, null));\n+        assertTrue(focusModel.isFocused(0), focusedCell());\n+        assertTrue(focusModel.isFocused(0, null), focusedCell());\n@@ -596,2 +583,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(4));\n-        assertTrue(focusedCell(), focusModel.isFocused(4, null));\n+        assertTrue(focusModel.isFocused(4), focusedCell());\n+        assertTrue(focusModel.isFocused(4, null), focusedCell());\n@@ -606,2 +593,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(1));\n-        assertTrue(focusedCell(), focusModel.isFocused(1, null));\n+        assertTrue(focusModel.isFocused(1), focusedCell());\n+        assertTrue(focusModel.isFocused(1, null), focusedCell());\n@@ -616,2 +603,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount));\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount, null));\n+        assertTrue(focusModel.isFocused(rowCount), focusedCell());\n+        assertTrue(focusModel.isFocused(rowCount, null), focusedCell());\n@@ -623,1 +610,1 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col1));\n+        assertTrue(focusModel.isFocused(3, col1), focusedCell());\n@@ -628,2 +615,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(2));\n-        assertTrue(focusedCell(), focusModel.isFocused(2, col1));\n+        assertTrue(focusModel.isFocused(2), focusedCell());\n+        assertTrue(focusModel.isFocused(2, col1), focusedCell());\n@@ -636,2 +623,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(0));\n-        assertTrue(focusedCell(), focusModel.isFocused(0, col1));\n+        assertTrue(focusModel.isFocused(0), focusedCell());\n+        assertTrue(focusModel.isFocused(0, col1), focusedCell());\n@@ -645,2 +632,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(4));\n-        assertTrue(focusedCell(), focusModel.isFocused(4, col1));\n+        assertTrue(focusModel.isFocused(4), focusedCell());\n+        assertTrue(focusModel.isFocused(4, col1), focusedCell());\n@@ -655,2 +642,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount));\n-        assertTrue(focusedCell(), focusModel.isFocused(rowCount, col1));\n+        assertTrue(focusModel.isFocused(rowCount), focusedCell());\n+        assertTrue(focusModel.isFocused(rowCount, col1), focusedCell());\n@@ -664,2 +651,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col0));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col0), focusedCell());\n@@ -673,2 +660,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col0));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col0), focusedCell());\n@@ -682,2 +669,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, null));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, null), focusedCell());\n@@ -691,2 +678,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, col1));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, col1), focusedCell());\n@@ -702,2 +689,2 @@\n-        assertTrue(focusedCell(), focusModel.isFocused(3));\n-        assertTrue(focusedCell(), focusModel.isFocused(3, rightEdge));\n+        assertTrue(focusModel.isFocused(3), focusedCell());\n+        assertTrue(focusModel.isFocused(3, rightEdge), focusedCell());\n@@ -1020,2 +1007,2 @@\n-        assertEquals(\"selected index\", 3, model.getSelectedIndex());\n-        assertTrue(\"contained in selected indices\", model.getSelectedIndices().contains(3));\n+        assertEquals(3, model.getSelectedIndex(), \"selected index\");\n+        assertTrue(model.getSelectedIndices().contains(3), \"contained in selected indices\");\n@@ -1023,1 +1010,1 @@\n-        assertEquals(\"is selected index\", model.getSelectedIndices().contains(3), model.isSelected(3));\n+        assertEquals(model.getSelectedIndices().contains(3), model.isSelected(3), \"is selected index\");\n@@ -1062,2 +1049,2 @@\n-        assertTrue(\"sanity: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n-        assertTrue(\"sanity: row must be selected\" , sm.isSelected(row));\n+        assertTrue(sm.getSelectedIndices().contains(row), \"sanity: row \" + row + \"contained in selectedIndices\");\n+        assertTrue(sm.isSelected(row), \"sanity: row must be selected\");\n@@ -1065,2 +1052,2 @@\n-        assertTrue(\"after hiding column: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n-        assertTrue(\"after hiding column: row must be selected\" , sm.isSelected(row));\n+        assertTrue(sm.getSelectedIndices().contains(row), \"after hiding column: row \" + row + \"contained in selectedIndices\");\n+        assertTrue(sm.isSelected(row), \"after hiding column: row must be selected\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewSelectionModelImplTest.java","additions":106,"deletions":119,"binary":false,"changes":225,"status":"modified"},{"patch":"@@ -30,9 +30,0 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -48,4 +39,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -130,0 +117,24 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.params.provider.Arguments;\n+import java.util.stream.Stream;\n@@ -159,1 +170,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -198,1 +210,1 @@\n-    @After\n+    @AfterEach\n@@ -433,1 +445,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -444,1 +456,1 @@\n-    @Ignore(\"JDK-8248389\")\n+    @Disabled(\"JDK-8248389\")\n@@ -464,1 +476,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -474,1 +486,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -483,1 +495,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -608,2 +620,1 @@\n-            assertTrue(\"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n-                    \") lost selection during permutation\", isCellStillSelected);\n+            assertTrue(isCellStillSelected, \"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() + \") lost selection during permutation\");\n@@ -616,2 +627,1 @@\n-            assertTrue(\"The item (\" + item + \") lost selection during permutation\",\n-                    selectedItems.contains(item));\n+            assertTrue(selectedItems.contains(item), \"The item (\" + item + \") lost selection during permutation\");\n@@ -634,2 +644,2 @@\n-        assertEquals(\"Selected Item should remain same\", selectedItemBefore, sm.getSelectedItem());\n-        assertEquals(\"Selected index should be updated\", treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex());\n+        assertEquals(selectedItemBefore, sm.getSelectedItem(), \"Selected Item should remain same\");\n+        assertEquals(treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex(), \"Selected index should be updated\");\n@@ -642,1 +652,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -670,1 +680,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -708,1 +718,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -745,1 +755,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -1242,1 +1252,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1250,1 +1260,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1259,1 +1269,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1268,1 +1278,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1381,1 +1391,3 @@\n-    @Ignore @Test public void test_rt17112() {\n+    @Disabled\n+    @Test\n+    public void test_rt17112() {\n@@ -1452,1 +1464,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(2));\n+        assertTrue(fm.isFocused(2), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1463,1 +1475,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1694,1 +1706,1 @@\n-    @Ignore(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n+    @Disabled(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n@@ -2326,1 +2338,1 @@\n-        assertTrue(sm.getSelectedIndices().toString(), sm.isSelected(1));   \/\/ salesDepartment\n+        assertTrue(sm.isSelected(1), sm.getSelectedIndices().toString());   \/\/ salesDepartment\n@@ -2346,1 +2358,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2366,1 +2378,1 @@\n-        assertEquals(debug(), 3, sm.getSelectedIndices().size());\n+        assertEquals(3, sm.getSelectedIndices().size(), debug());\n@@ -2369,1 +2381,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2391,1 +2403,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2414,1 +2426,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2442,1 +2454,1 @@\n-    @Ignore(\"This bug is not yet fixed\")\n+    @Disabled(\"This bug is not yet fixed\")\n@@ -2737,1 +2749,1 @@\n-        assertTrue(debug(), sm.isSelected(1));\n+        assertTrue(sm.isSelected(1), debug());\n@@ -3768,1 +3780,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -4351,1 +4363,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4358,1 +4370,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4369,1 +4381,1 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n@@ -4374,1 +4386,1 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n@@ -5555,1 +5567,1 @@\n-        assertEquals(debug(), expectedIndex, fm.getFocusedIndex());\n+        assertEquals(expectedIndex, fm.getFocusedIndex(), debug());\n@@ -5638,2 +5650,1 @@\n-        assertTrue(\"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild),\n-                treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount());\n+        assertTrue(treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount(), \"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild));\n@@ -5708,2 +5719,1 @@\n-        assertNotSame(\"getRow must depend on expansionState \" + collapedGrandIndex,\n-                collapedGrandIndex, treeTableView.getRow(expandedGrandChild));\n+        assertNotSame(collapedGrandIndex, treeTableView.getRow(expandedGrandChild), \"getRow must depend on expansionState \" + collapedGrandIndex);\n@@ -5724,1 +5734,1 @@\n-        assertEquals(\"grandChild not visible\", -1, row);\n+        assertEquals(-1, row, \"grandChild not visible\");\n@@ -6006,1 +6016,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -6083,2 +6093,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -6121,2 +6131,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -6185,1 +6195,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -6187,1 +6197,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -6190,1 +6200,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -6214,1 +6224,1 @@\n-        assertFalse(\"sanity: test setup such that root is not showing\", view.isShowRoot());\n+        assertFalse(view.isShowRoot(), \"sanity: test setup such that root is not showing\");\n@@ -6232,1 +6242,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6250,1 +6260,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6533,2 +6543,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -6565,2 +6576,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)),\n+                            \"added: \" + c.getAddedSubList());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":84,"deletions":72,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,7 @@\n-import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n@@ -34,0 +40,7 @@\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeView;\n@@ -35,1 +48,4 @@\n-import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -37,0 +53,2 @@\n+import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -44,18 +62,0 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.control.FocusModel;\n-import javafx.scene.control.IndexedCell;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.SelectionMode;\n-import javafx.scene.control.TreeItem;\n-import javafx.scene.control.TreeTableColumn;\n-import javafx.scene.control.TreeView;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -86,1 +86,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -128,1 +129,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -205,1 +207,1 @@\n-        assertTrue(debug(), sm.isSelected(endIndex));\n+        assertTrue(sm.isSelected(endIndex), debug());\n@@ -327,1 +329,1 @@\n-        assertTrue(debug(), isSelected(getItemCount()));\n+        assertTrue(isSelected(getItemCount()), debug());\n@@ -355,1 +357,1 @@\n-        assertTrue(debug(), fm.isFocused(5));\n+        assertTrue(fm.isFocused(5), debug());\n@@ -412,1 +414,1 @@\n-        assertTrue(debug(), sm.isSelected(0));\n+        assertTrue(sm.isSelected(0), debug());\n@@ -557,1 +559,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -595,1 +597,1 @@\n-        assertTrue(debug(), isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -714,1 +716,1 @@\n-        assertTrue(debug(),isAnchor(2));\n+        assertTrue(isAnchor(2), debug());\n@@ -733,1 +735,1 @@\n-        assertTrue(debug(),isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -779,1 +781,1 @@\n-        assertTrue(debug(), isAnchor(3));\n+        assertTrue(isAnchor(3), debug());\n@@ -844,1 +846,1 @@\n-        assertTrue(debug(),isSelected(0,2,3,4));\n+        assertTrue(isSelected(0,2,3,4));\n@@ -1153,1 +1155,1 @@\n-    @Ignore(\"Not yet working\")\n+    @Disabled(\"Not yet working\")\n@@ -1240,1 +1242,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1252,1 +1254,1 @@\n-        assertTrue(debug(), isNotSelected(6,7,8,9));\n+        assertTrue(isNotSelected(6,7,8,9), debug());\n@@ -1268,1 +1270,1 @@\n-        assertTrue(debug(), fm.isFocused(getItemCount()));\n+        assertTrue(fm.isFocused(getItemCount()), debug());\n@@ -1274,1 +1276,1 @@\n-        assertTrue(debug(), fm.isFocused(0));\n+        assertTrue(fm.isFocused(0));\n@@ -1755,1 +1757,1 @@\n-        assertTrue(\"Focus index incorrectly at: \" + fm.getFocusedIndex(), fm.isFocused(4));\n+        assertTrue(fm.isFocused(4), \"Focus index incorrectly at: \" + fm.getFocusedIndex());\n@@ -1891,1 +1893,1 @@\n-        assertTrue(debug(), isSelected(0,1,2,3));\n+        assertTrue(isSelected(0,1,2,3), debug());\n@@ -2399,1 +2401,1 @@\n-        assertEquals(debug(), expectedSize, indices.size());\n+        assertEquals(expectedSize, indices.size(), debug());\n@@ -2412,1 +2414,1 @@\n-        assertTrue(debug(),sm.isSelected(0));\n+        assertTrue(sm.isSelected(0), debug());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewKeyInputTest.java","additions":44,"deletions":42,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,3 +35,0 @@\n-\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import com.sun.javafx.tk.Toolkit;\n@@ -44,5 +45,4 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -51,0 +51,1 @@\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n@@ -54,4 +55,0 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertNotNull;\n-\n-\/\/@Ignore(\"Disabling tests as they fail with OOM in continuous builds\")\n@@ -78,1 +75,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -128,1 +126,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -191,1 +190,1 @@\n-        assertTrue(debug(), isSelected(7,8,9));\n+        assertTrue(isSelected(7,8,9), debug());\n@@ -195,1 +194,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -205,1 +204,1 @@\n-        assertTrue(debug(), isSelected(5,6,7));\n+        assertTrue(isSelected(5,6,7), debug());\n@@ -209,1 +208,1 @@\n-        assertTrue(debug(),isSelected(5,6,7,8,9));\n+        assertTrue(isSelected(5,6,7,8,9), debug());\n@@ -353,4 +352,4 @@\n-        assertEquals(\"Actual selected index: \" + sm.getSelectedIndex(), 5, sm.getSelectedIndex());\n-        assertEquals(\"Actual focused index: \" + fm.getFocusedIndex(), 5, fm.getFocusedIndex());\n-        assertTrue(\"Selected indices: \" + sm.getSelectedIndices(), sm.getSelectedIndices().contains(0));\n-        assertTrue(\"Selected items: \" + sm.getSelectedItems(), sm.getSelectedItems().contains(root));\n+        assertEquals(5, sm.getSelectedIndex(), \"Actual selected index: \" + sm.getSelectedIndex());\n+        assertEquals(5, fm.getFocusedIndex(), \"Actual focused index: \" + fm.getFocusedIndex());\n+        assertTrue(sm.getSelectedIndices().contains(0), \"Selected indices: \" + sm.getSelectedIndices());\n+        assertTrue(sm.getSelectedItems().contains(root), \"Selected items: \" + sm.getSelectedItems());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewMouseInputTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,0 +28,10 @@\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -34,15 +44,0 @@\n-\n-import javafx.scene.control.skin.TreeCellSkin;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.application.PlatformImpl;\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-\n@@ -78,0 +73,1 @@\n+import javafx.scene.control.skin.TreeCellSkin;\n@@ -86,0 +82,8 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -137,1 +141,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -184,1 +189,1 @@\n-    @After\n+    @AfterEach\n@@ -307,1 +312,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -315,1 +320,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -324,1 +329,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -333,1 +338,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -448,1 +453,3 @@\n-    @Ignore @Test public void test_rt17112() {\n+    @Disabled\n+    @Test\n+    public void test_rt17112() {\n@@ -519,1 +526,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(2));\n+        assertTrue(fm.isFocused(2), \"Focused index: \" + fm.getFocusedIndex());\n@@ -530,1 +537,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focused index: \" + fm.getFocusedIndex());\n@@ -921,1 +928,1 @@\n-    @Ignore(\"Test passes from within IDE but not when run from command line. Needs more investigation.\")\n+    @Disabled(\"Test passes from within IDE but not when run from command line. Needs more investigation.\")\n@@ -1797,1 +1804,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -2205,1 +2212,1 @@\n-    @Ignore(\"Fix not yet developed for TreeView\")\n+    @Disabled(\"Fix not yet developed for TreeView\")\n@@ -2210,1 +2217,1 @@\n-    @Ignore(\"Fix not yet developed for TreeView\")\n+    @Disabled(\"Fix not yet developed for TreeView\")\n@@ -3027,1 +3034,1 @@\n-        assertEquals(debug(), expectedIndex, fm.getFocusedIndex());\n+        assertEquals(expectedIndex, fm.getFocusedIndex(), debug());\n@@ -3055,2 +3062,3 @@\n-        assertTrue(\"row of item must be less than expandedItemCount, but was: \" + treeView.getRow(grandChild),\n-                treeView.getRow(grandChild) < treeView.getExpandedItemCount());\n+        assertTrue(\n+                treeView.getRow(grandChild) < treeView.getExpandedItemCount(),\n+                \"row of item must be less than expandedItemCount, but was: \" + treeView.getRow(grandChild));\n@@ -3121,2 +3129,3 @@\n-        assertNotSame(\"getRow must depend on expansionState \" + collapedGrandIndex,\n-                collapedGrandIndex, treeView.getRow(expandedGrandChild));\n+        assertNotSame(\n+                collapedGrandIndex, treeView.getRow(expandedGrandChild),\n+                \"getRow must depend on expansionState \" + collapedGrandIndex);\n@@ -3137,1 +3146,1 @@\n-        assertEquals(\"grandChild not visible\", -1, row);\n+        assertEquals(-1, row, \"grandChild not visible\");\n@@ -3250,1 +3259,1 @@\n-                assertTrue(debug(), table.getSelectionModel().isEmpty());\n+                assertTrue(table.getSelectionModel().isEmpty(), debug());\n@@ -3260,1 +3269,1 @@\n-        assertTrue(debug(),table.getSelectionModel().isEmpty());\n+        assertTrue(table.getSelectionModel().isEmpty(), debug());\n@@ -3298,1 +3307,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -3367,2 +3376,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -3401,2 +3410,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -3469,1 +3478,1 @@\n-    @Ignore(\"RT-39674 not yet fixed\")\n+    @Disabled(\"RT-39674 not yet fixed\")\n@@ -3559,1 +3568,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -3561,1 +3570,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -3564,1 +3573,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -3587,1 +3596,1 @@\n-        assertFalse(\"sanity: test setup such that root is not showing\", view.isShowRoot());\n+        assertFalse(view.isShowRoot(), \"sanity: test setup such that root is not showing\");\n@@ -3605,1 +3614,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -3623,1 +3632,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -3733,2 +3742,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -3765,2 +3775,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -3907,1 +3918,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -3913,3 +3924,4 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertEquals(\"table must be editing at intermediate index\",\n-                    intermediateTreeItem, treeView.getEditingItem());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertEquals(\n+                    intermediateTreeItem, treeView.getEditingItem(),\n+                    \"table must be editing at intermediate index\");\n@@ -3920,1 +3932,1 @@\n-        assertTrue(\"sanity: \", cell.isEditing());\n+        assertTrue(cell.isEditing(), \"sanity: \");\n@@ -3926,2 +3938,2 @@\n-            assertFalse(\"cell must not be editing\", cell.isEditing());\n-            assertNull(\"table editing must be cancelled by cell\", treeView.getEditingItem());\n+            assertFalse(cell.isEditing(), \"cell must not be editing\");\n+            assertNull(treeView.getEditingItem(), \"table editing must be cancelled by cell\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":71,"deletions":59,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,3 +42,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +51,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -238,1 +243,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -240,2 +245,4 @@\n-        CheckBoxListCell<Object> cell = new CheckBoxListCell<>();\n-        cell.updateItem(\"TEST\", false);\n+        assertThrows(NullPointerException.class, () -> {\n+            CheckBoxListCell<Object> cell = new CheckBoxListCell<>();\n+            cell.updateItem(\"TEST\", false);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/CheckBoxListCellTest.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,3 +43,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -54,1 +54,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -254,1 +255,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -256,2 +257,4 @@\n-        CheckBoxTableCell<Object, Object> cell = new CheckBoxTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n+        assertThrows(NullPointerException.class, () -> {\n+            CheckBoxTableCell<Object, Object> cell = new CheckBoxTableCell<>();\n+            cell.updateItem(\"TEST\", false);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/CheckBoxTableCellTest.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,1 +38,0 @@\n-import javafx.scene.control.TreeView;\n@@ -39,0 +39,1 @@\n+import javafx.scene.control.TreeView;\n@@ -42,3 +43,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +52,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -285,1 +286,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -287,2 +288,4 @@\n-        CheckBoxTreeCell<Object> cell = new CheckBoxTreeCell<>(null);\n-        cell.updateItem(\"TEST\", false);\n+        assertThrows(NullPointerException.class, () -> {\n+            CheckBoxTreeCell<Object> cell = new CheckBoxTreeCell<>(null);\n+            cell.updateItem(\"TEST\", false);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/CheckBoxTreeCellTest.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,3 +43,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -54,1 +54,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -253,1 +254,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -255,2 +256,4 @@\n-        CheckBoxTreeTableCell<Object, Object> cell = new CheckBoxTreeTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n+        assertThrows(NullPointerException.class, () -> {\n+            CheckBoxTreeTableCell<Object, Object> cell = new CheckBoxTreeTableCell<>();\n+            cell.updateItem(\"TEST\", false);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/CheckBoxTreeTableCellTest.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,4 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +48,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxListCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTableCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTreeCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,1 +35,5 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n@@ -34,4 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +50,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTreeTableCellTest.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,4 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +48,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxListCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTableCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTreeCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,1 +35,5 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n@@ -35,4 +44,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +51,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTreeTableCellTest.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n@@ -37,13 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -55,1 +50,0 @@\n-@RunWith(Parameterized.class)\n@@ -60,2 +54,0 @@\n-    private final Supplier<ListCell<String>> listCellSupplier;\n-\n@@ -65,8 +57,8 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(ListCell::new, ComboBoxListCell::new, TextFieldListCell::new,\n-                ChoiceBoxListCell::new, () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<ListCell<?>>> listCells) {\n-        return listCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    private static Collection<Supplier<ListCell<String>>> parameters() {\n+        return List.of(\n+            ListCell::new,\n+            ComboBoxListCell::new,\n+            TextFieldListCell::new,\n+            ChoiceBoxListCell::new,\n+            () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())\n+        );\n@@ -75,6 +67,3 @@\n-    public ListCellStartEditTest(Supplier<ListCell<String>> listCellSupplier) {\n-        this.listCellSupplier = listCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Supplier<ListCell<String>> listCellSupplier) {\n@@ -87,2 +76,4 @@\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditMustNotThrowNPE(Supplier<ListCell<String>> listCellSupplier) {\n+        setup(listCellSupplier);\n@@ -93,2 +84,4 @@\n-    @Test\n-    public void testStartEditRespectsEditable() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditRespectsEditable(Supplier<ListCell<String>> listCellSupplier) {\n+        setup(listCellSupplier);\n@@ -136,1 +129,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ListCellStartEditTest.java","additions":28,"deletions":36,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import java.util.Arrays;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -30,1 +32,1 @@\n-\n+import java.util.List;\n@@ -38,0 +40,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,9 +43,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import static org.junit.Assert.*;\n-\n-@RunWith(Parameterized.class)\n@@ -50,7 +45,7 @@\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { CheckBoxListCell.class },\n-            { CheckBoxTableCell.class },\n-            { CheckBoxTreeCell.class },\n-            { CheckBoxTreeTableCell.class },\n-        });\n+    private static Collection<Class> parameters() {\n+        return List.of(\n+            CheckBoxListCell.class,\n+            CheckBoxTableCell.class,\n+            CheckBoxTreeCell.class,\n+            CheckBoxTreeTableCell.class\n+        );\n@@ -59,1 +54,0 @@\n-    private Class<? extends Cell> cellClass;\n@@ -61,1 +55,0 @@\n-\n@@ -64,5 +57,3 @@\n-    public ParameterisedPrebuiltCellTest(Class<? extends Cell> cellClass) {\n-        this.cellClass = cellClass;\n-    }\n-\n-    @Before public void setup() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setup(Class<? extends Cell> cellClass) {\n@@ -70,1 +61,5 @@\n-        cell = cellClass.getDeclaredConstructor().newInstance();\n+        try {\n+            cell = cellClass.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            fail(e);\n+        }\n@@ -80,1 +75,4 @@\n-    @Test public void testSetText() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetText(Class<? extends Cell> cellClass) {\n+        setup(cellClass);\n@@ -86,1 +84,4 @@\n-    @Test public void testTextProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTextProperty(Class<? extends Cell> cellClass) {\n+        setup(cellClass);\n@@ -112,1 +113,4 @@\n-    @Test public void testSetGraphic() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetGraphic(Class<? extends Cell> cellClass) {\n+        setup(cellClass);\n@@ -118,1 +122,4 @@\n-    @Test public void testGraphicProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testGraphicProperty(Class<? extends Cell> cellClass) {\n+        setup(cellClass);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ParameterisedPrebuiltCellTest.java","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +53,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ProgressBarTableCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,4 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +53,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ProgressBarTreeTableCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n@@ -39,13 +45,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -57,1 +52,0 @@\n-@RunWith(Parameterized.class)\n@@ -62,2 +56,0 @@\n-    private final Supplier<TableCell<String, ?>> tableCellSupplier;\n-\n@@ -69,9 +61,9 @@\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(TableCell::new, ComboBoxTableCell::new, TextFieldTableCell::new,\n-                ChoiceBoxTableCell::new, CheckBoxTableCell::new, ProgressBarTableCell::new));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TableCell<Object, ?>>> tableCells) {\n-        return tableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    private static Collection<Supplier<TableCell<String, ?>>> parameters() {\n+        return List.of(\n+            TableCell::new,\n+            ComboBoxTableCell::new,\n+            TextFieldTableCell::new,\n+            ChoiceBoxTableCell::new,\n+            CheckBoxTableCell::new,\n+            ProgressBarTableCell::new\n+        );\n@@ -80,6 +72,3 @@\n-    public TableCellStartEditTest(Supplier<TableCell<String, ?>> tableCellSupplier) {\n-        this.tableCellSupplier = tableCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Supplier<TableCell<String, ?>> tableCellSupplier) {\n@@ -97,2 +86,4 @@\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditMustNotThrowNPE(Supplier<TableCell<String, ?>> tableCellSupplier) {\n+        setup(tableCellSupplier);\n@@ -103,2 +94,4 @@\n-    @Test\n-    public void testStartEditRespectsEditable() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditRespectsEditable(Supplier<TableCell<String, ?>> tableCellSupplier) {\n+        setup(tableCellSupplier);\n@@ -162,1 +155,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TableCellStartEditTest.java","additions":29,"deletions":37,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,4 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +45,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldListCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,4 +43,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n@@ -48,1 +51,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTableCellTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,4 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +46,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTreeCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -35,4 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +47,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTreeTableCellTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n@@ -36,8 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -45,4 +45,0 @@\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n@@ -54,1 +50,0 @@\n-@RunWith(Parameterized.class)\n@@ -59,2 +54,0 @@\n-    private final Supplier<TreeCell<String>> treeCellSupplier;\n-\n@@ -64,12 +57,8 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(TreeCell::new, ComboBoxTreeCell::new, TextFieldTreeCell::new,\n-                ChoiceBoxTreeCell::new,() -> new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeCell<String>>> treeCells) {\n-        return treeCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n-    }\n-\n-    public TreeCellStartEditTest(Supplier<TreeCell<String>> treeCellSupplier) {\n-        this.treeCellSupplier = treeCellSupplier;\n+    private static Collection<Supplier<TreeCell<String>>> parameters() {\n+        return List.of(\n+            TreeCell::new,\n+            ComboBoxTreeCell::new,\n+            TextFieldTreeCell::new,\n+            ChoiceBoxTreeCell::new,\n+            () -> new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())\n+        );\n@@ -78,2 +67,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Supplier<TreeCell<String>> treeCellSupplier) {\n@@ -87,2 +77,4 @@\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditMustNotThrowNPE(Supplier<TreeCell<String>> treeCellSupplier) {\n+        setup(treeCellSupplier);\n@@ -93,2 +85,4 @@\n-    @Test\n-    public void testStartEditRespectsEditable() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditRespectsEditable(Supplier<TreeCell<String>> treeCellSupplier) {\n+        setup(treeCellSupplier);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeCellStartEditTest.java","additions":28,"deletions":34,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n@@ -38,13 +44,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -57,1 +52,0 @@\n-@RunWith(Parameterized.class)\n@@ -62,2 +56,0 @@\n-    private final Supplier<TreeTableCell<String, ?>> treeTableCellSupplier;\n-\n@@ -69,14 +61,9 @@\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(\n-                List.of(TreeTableCell::new , ComboBoxTreeTableCell::new, TextFieldTreeTableCell::new,\n-                        ChoiceBoxTreeTableCell::new, CheckBoxTreeTableCell::new, ProgressBarTreeTableCell::new));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeTableCell<Object, ?>>> treeTableCells) {\n-        return treeTableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n-    }\n-\n-    public TreeTableCellStartEditTest(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n-        this.treeTableCellSupplier = treeTableCellSupplier;\n+    private static Collection<Supplier<TreeTableCell<String, ?>>> parameters() {\n+        return List.of(\n+            TreeTableCell::new,\n+            ComboBoxTreeTableCell::new,\n+            TextFieldTreeTableCell::new,\n+            ChoiceBoxTreeTableCell::new,\n+            CheckBoxTreeTableCell::new,\n+            ProgressBarTreeTableCell::new\n+        );\n@@ -85,2 +72,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n@@ -99,2 +87,4 @@\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditMustNotThrowNPE(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n+        setup(treeTableCellSupplier);\n@@ -105,2 +95,4 @@\n-    @Test\n-    public void testStartEditRespectsEditable() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testStartEditRespectsEditable(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n+        setup(treeTableCellSupplier);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeTableCellStartEditTest.java","additions":29,"deletions":37,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,6 +33,3 @@\n-\n-import org.junit.Test;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -104,12 +102,10 @@\n-            assertEquals(\"Incorrect padding\", padding.getValue(fontSize), label.getPadding().getLeft(), 0.1);\n-            assertEquals(\"Incorrect labelPadding\", labelPadding.getValue(fontSize), label.getLabelPadding().getLeft(), 0.1);\n-            assertEquals(\"Incorrect max width\", maxW.getValue(fontSize), label.getMaxWidth(), 0.1);\n-            assertEquals(\"Incorrect min width\", minW.getValue(fontSize), label.getMinWidth(), 0.1);\n-            assertEquals(\"Incorrect pref width\", prefW.getValue(fontSize), label.getPrefWidth(), 0.1);\n-            assertEquals(\"Incorrect max Height\", maxH.getValue(fontSize), label.getMaxHeight(), 0.1);\n-            assertEquals(\"Incorrect min height\", minH.getValue(fontSize), label.getMinHeight(), 0.1);\n-            assertEquals(\"Incorrect pref height\", prefH.getValue(fontSize), label.getPrefHeight(), 0.1);\n-            assertEquals(\"Incorrect background radius\", bgRadius.getValue(fontSize),\n-                    label.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.1);\n-            assertEquals(\"Incorrect background insets\", bgInsets.getValue(fontSize),\n-                    label.getBackground().getFills().get(0).getInsets().getLeft(), 0.1);\n+            assertEquals(padding.getValue(fontSize), label.getPadding().getLeft(), 0.1, \"Incorrect padding\");\n+            assertEquals(labelPadding.getValue(fontSize), label.getLabelPadding().getLeft(), 0.1, \"Incorrect labelPadding\");\n+            assertEquals(maxW.getValue(fontSize), label.getMaxWidth(), 0.1, \"Incorrect max width\");\n+            assertEquals(minW.getValue(fontSize), label.getMinWidth(), 0.1, \"Incorrect min width\");\n+            assertEquals(prefW.getValue(fontSize), label.getPrefWidth(), 0.1, \"Incorrect pref width\");\n+            assertEquals(maxH.getValue(fontSize), label.getMaxHeight(), 0.1, \"Incorrect max Height\");\n+            assertEquals(minH.getValue(fontSize), label.getMinHeight(), 0.1, \"Incorrect min height\");\n+            assertEquals(prefH.getValue(fontSize), label.getPrefHeight(), 0.1, \"Incorrect pref height\");\n+            assertEquals(bgRadius.getValue(fontSize), label.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.1, \"Incorrect background radius\");\n+            assertEquals(bgInsets.getValue(fontSize), label.getBackground().getFills().get(0).getInsets().getLeft(), 0.1, \"Incorrect background insets\");\n@@ -121,5 +117,5 @@\n-        assertEquals(\"l0 font size is incorrect.\", l0Font, l0.getFont().getSize(), 0.1);\n-        assertEquals(\"l1 font size is incorrect.\", l1Font, l1.getFont().getSize(), 0.1);\n-        assertEquals(\"l2 font size is incorrect.\", l2Font, l2.getFont().getSize(), 0.1);\n-        assertEquals(\"l3 font size is incorrect.\", l3Font, l3.getFont().getSize(), 0.1);\n-        assertEquals(\"l4 font size is incorrect.\", l4Font, l4.getFont().getSize(), 0.1);\n+        assertEquals(l0Font, l0.getFont().getSize(), 0.1, \"l0 font size is incorrect.\");\n+        assertEquals(l1Font, l1.getFont().getSize(), 0.1, \"l1 font size is incorrect.\");\n+        assertEquals(l2Font, l2.getFont().getSize(), 0.1, \"l2 font size is incorrect.\");\n+        assertEquals(l3Font, l3.getFont().getSize(), 0.1, \"l3 font size is incorrect.\");\n+        assertEquals(l4Font, l4.getFont().getSize(), 0.1, \"l4 font size is incorrect.\");\n@@ -128,1 +124,1 @@\n-    @Before\n+    @BeforeEach\n@@ -240,1 +236,1 @@\n-    @Ignore()\n+    @Disabled\n@@ -295,1 +291,1 @@\n-    @Ignore()\n+    @Disabled\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/css\/PropertySizeTest.java","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,7 +34,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -87,2 +88,3 @@\n-    @Test public void testArrayLinkedList_Empty_GetResultsInArrayIndexOutOfBounds() {\n-        try {\n+    @Test\n+    public void testArrayLinkedList_Empty_GetResultsInArrayIndexOutOfBounds() {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n@@ -90,4 +92,1 @@\n-            assertTrue(\"get didn't return an IndexOutOfBoundsException\", false);\n-        } catch (IndexOutOfBoundsException e) {\n-            assertTrue(true);\n-        }\n+        });\n@@ -104,2 +103,3 @@\n-    @Test public void testArrayLinkedList_Empty_RemoveResultsInArrayIndexOutOfBounds() {\n-        try {\n+    @Test\n+    public void testArrayLinkedList_Empty_RemoveResultsInArrayIndexOutOfBounds() {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n@@ -107,4 +107,1 @@\n-            assertTrue(\"remove didn't return an IndexOutOfBoundsException\", false);\n-        } catch (IndexOutOfBoundsException e) {\n-            assertTrue(true);\n-        }\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ArrayLinkedListTest.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import java.lang.ref.WeakReference;\n@@ -34,0 +34,1 @@\n+import javafx.collections.ObservableList;\n@@ -35,2 +36,0 @@\n-import javafx.scene.control.Button;\n-\n@@ -38,0 +37,1 @@\n+import javafx.scene.Node;\n@@ -39,1 +39,2 @@\n-import javafx.stage.Stage;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.skin.ButtonSkin;\n@@ -42,2 +43,0 @@\n-import javafx.scene.input.Mnemonic;\n-import javafx.collections.ObservableList;\n@@ -45,4 +44,1 @@\n-\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo.MnemonicKeyCombination;\n-import javafx.scene.Node;\n-import javafx.scene.control.skin.ButtonSkin;\n+import javafx.scene.input.Mnemonic;\n@@ -50,6 +46,5 @@\n-\n-import org.junit.Before;\n-import org.junit.After;\n-import org.junit.Test;\n-\n-import java.lang.ref.WeakReference;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo.MnemonicKeyCombination;\n@@ -63,1 +58,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -79,1 +75,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n@@ -204,3 +201,3 @@\n-        assertNull(\"Old ButtonSkin must be GCed.\", oldSkinRef.get());\n-        assertNull(\"Default ButtonSkin must be GCed.\", defSkinRef.get());\n-        assertNotNull(\"Current ButtonSkin must NOT be GCed.\", currSkinRef.get());\n+        assertNull(oldSkinRef.get(), \"Old ButtonSkin must be GCed.\");\n+        assertNull(defSkinRef.get(), \"Default ButtonSkin must be GCed.\");\n+        assertNotNull(currSkinRef.get(), \"Current ButtonSkin must NOT be GCed.\");\n@@ -226,3 +223,3 @@\n-        assertNull(\"Unused ButtonSkin must be GCed.\", skinRef1.get());\n-        assertNull(\"Unused ButtonSkin must be GCed.\", skinRef2.get());\n-        assertNotNull(\"Default ButtonSkin must NOT be GCed.\", defSkinRef.get());\n+        assertNull(skinRef1.get(), \"Unused ButtonSkin must be GCed.\");\n+        assertNull(skinRef2.get(), \"Unused ButtonSkin must be GCed.\");\n+        assertNotNull(defSkinRef.get(), \"Default ButtonSkin must NOT be GCed.\");\n@@ -242,2 +239,2 @@\n-        assertNull(\"Button must be GCed.\", buttonRef.get());\n-        assertNull(\"ButtonSkin must be GCed.\", skinRef.get());\n+        assertNull(buttonRef.get(), \"Button must be GCed.\");\n+        assertNull(skinRef.get(), \"ButtonSkin must be GCed.\");\n@@ -275,1 +272,1 @@\n-        assertNull(\"ButtonSkin must be GCed\", defSkinRef.get());\n+        assertNull(defSkinRef.get(), \"ButtonSkin must be GCed\");\n@@ -294,1 +291,1 @@\n-        assertNull(\"ButtonSkin must be GCed\", defSkinRef.get());\n+        assertNull(defSkinRef.get(), \"ButtonSkin must be GCed\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ButtonSkinTest.java","additions":30,"deletions":33,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,3 +31,0 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.skin.CheckBoxSkin;\n-import com.sun.javafx.tk.Toolkit;\n@@ -37,0 +33,2 @@\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.skin.CheckBoxSkin;\n@@ -38,4 +36,4 @@\n-\n-import org.junit.BeforeClass;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -52,1 +50,2 @@\n-    @BeforeClass public static void initToolKit() {\n+    @BeforeAll\n+    public static void initToolKit() {\n@@ -56,1 +55,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/CheckBoxSkinTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +43,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ChoiceBoxSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,3 @@\n-import com.sun.javafx.scene.SceneHelper;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,6 +41,7 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n@@ -55,1 +54,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ColorPickerSkinTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assert.*;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -34,3 +34,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +44,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ComboBoxListViewSkinTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,5 +33,0 @@\n-\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n@@ -47,0 +43,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -62,2 +59,1 @@\n-                assertEquals(\"flow's cellCount must be initialized\", control.getItems().size(),\n-                        getVirtualFlow().getCellCount());\n+                assertEquals(control.getItems().size(), getVirtualFlow().getCellCount(), \"flow's cellCount must be initialized\");\n@@ -79,2 +75,1 @@\n-                assertEquals(\"flow's cellCount must be initialized\", treeItems.size() + 1,\n-                        getVirtualFlow().getCellCount());\n+                assertEquals(treeItems.size() + 1, getVirtualFlow().getCellCount(), \"flow's cellCount must be initialized\");\n@@ -96,2 +91,1 @@\n-                assertEquals(\"flow's cellCount must be initialized\", treeItems.size() +1,\n-                        getVirtualFlow().getCellCount());\n+                assertEquals(treeItems.size() + 1, getVirtualFlow().getCellCount(), \"flow's cellCount must be initialized\");\n@@ -107,2 +101,1 @@\n-                assertEquals(\"flow's cellCount must be initialized\", control.getItems().size(),\n-                        getVirtualFlow().getCellCount());\n+                assertEquals(control.getItems().size(), getVirtualFlow().getCellCount(), \"flow's cellCount must be initialized\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ConcreteVirtualContainerTest.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +33,0 @@\n-import javafx.scene.control.skin.VirtualFlowShim;\n@@ -36,3 +34,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -92,1 +90,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/CustomListViewSkinTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,7 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.*;\n-import static org.junit.Assert.*;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.fireMouseOnHorizontalTrack;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.fireMouseOnVerticalTrack;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.getHorizontalScrollBar;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.getVerticalScrollBar;\n@@ -61,0 +61,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -130,4 +133,2 @@\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getHorizontalScrollBar(control).isVisible());\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getVerticalScrollBar(control).isVisible());\n+        assertTrue(getHorizontalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertTrue(getVerticalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n@@ -135,1 +136,1 @@\n-        assertEquals(\"control must be editing at\", editingItem, control.getEditingCell());\n+        assertEquals(editingItem, control.getEditingCell(), \"control must be editing at\");\n@@ -209,4 +210,2 @@\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getHorizontalScrollBar(control).isVisible());\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getVerticalScrollBar(control).isVisible());\n+        assertTrue(getHorizontalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertTrue(getVerticalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n@@ -214,1 +213,1 @@\n-        assertEquals(\"control must be editing at\", editingItem, control.getEditingCell());\n+        assertEquals(editingItem, control.getEditingCell(), \"control must be editing at\");\n@@ -285,4 +284,2 @@\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getHorizontalScrollBar(control).isVisible());\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getVerticalScrollBar(control).isVisible());\n+        assertTrue(getHorizontalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertTrue(getVerticalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n@@ -290,1 +287,1 @@\n-        assertEquals(\"control must be editing at\", editingItem, control.getEditingItem());\n+        assertEquals(editingItem, control.getEditingItem(), \"control must be editing at\");\n@@ -352,5 +349,3 @@\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getHorizontalScrollBar(control).isVisible());\n-        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n-                getVerticalScrollBar(control).isVisible());\n-        assertEquals(\"control must be editing at\", editingRow, control.getEditingIndex());\n+        assertTrue(getHorizontalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertTrue(getVerticalScrollBar(control).isVisible(), \"sanity: vertical scrollbar visible for list \");\n+        assertEquals(editingRow, control.getEditingIndex(), \"control must be editing at\");\n@@ -396,2 +391,1 @@\n-        assertEquals(\"virtualized control must be focusOwner after mouse on scrollbar\",\n-                control, scene.getFocusOwner());\n+        assertEquals(control, scene.getFocusOwner(), \"virtualized control must be focusOwner after mouse on scrollbar\");\n@@ -459,1 +453,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -471,1 +466,2 @@\n-    @After public void cleanup() {\n+    @AfterEach\n+    public void cleanup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/EditAndScrollTest.java","additions":28,"deletions":32,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/HyperlinkSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-\n-import java.util.Arrays;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -33,1 +31,1 @@\n-\n+import java.util.List;\n@@ -37,0 +35,3 @@\n+import javafx.scene.control.SkinBaseShim;\n+import javafx.scene.control.skin.LabelSkin;\n+import javafx.scene.control.skin.LabeledSkinBaseShim;\n@@ -43,11 +44,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import javafx.scene.control.SkinBaseShim;\n-import javafx.scene.control.skin.LabelSkin;\n-import javafx.scene.control.skin.LabeledSkinBaseShim;\n-\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -60,1 +52,0 @@\n-@RunWith(Parameterized.class)\n@@ -62,7 +53,0 @@\n-    private Paint fill;\n-    private Font font;\n-    private TextAlignment align;\n-    private boolean underline;\n-    private boolean wrapText;\n-    private ContentDisplay contentDisplay;\n-    private Node graphic;\n@@ -74,2 +58,1 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameters public static Collection implementations() {\n+    private static Collection<Parameter> parameters() {\n@@ -79,1 +62,1 @@\n-        return Arrays.asList(new Object[][] {\n+        return List.of(\n@@ -81,1 +64,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null),\n@@ -83,1 +66,1 @@\n-            { Color.RED,   Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null },\n+            new Parameter(Color.RED,   Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null),\n@@ -85,1 +68,1 @@\n-            { Color.BLACK, Font.font(\"Arial\", 64), TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null },\n+            new Parameter(Color.BLACK, Font.font(\"Arial\", 64), TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   null),\n@@ -87,1 +70,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.JUSTIFY, false, false, ContentDisplay.LEFT,   null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.JUSTIFY, false, false, ContentDisplay.LEFT,   null),\n@@ -89,1 +72,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    true,  false, ContentDisplay.LEFT,   null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    true,  false, ContentDisplay.LEFT,   null),\n@@ -91,1 +74,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, true,  ContentDisplay.LEFT,   null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, true,  ContentDisplay.LEFT,   null),\n@@ -93,1 +76,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM, null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM, null),\n@@ -95,1 +78,1 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   rect },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,   rect),\n@@ -97,7 +80,7 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM,       null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.CENTER,       null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.GRAPHIC_ONLY, null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,         null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.RIGHT,        null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TEXT_ONLY,    null },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TOP,          null },\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM,       null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.CENTER,       null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.GRAPHIC_ONLY, null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,         null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.RIGHT,        null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TEXT_ONLY,    null),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TOP,          null),\n@@ -105,8 +88,8 @@\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM,       rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.CENTER,       rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.GRAPHIC_ONLY, rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,         rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.RIGHT,        rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TEXT_ONLY,    rect },\n-            { Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TOP,          rect },\n-        });\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.BOTTOM,       rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.CENTER,       rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.GRAPHIC_ONLY, rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.LEFT,         rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.RIGHT,        rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TEXT_ONLY,    rect),\n+            new Parameter(Color.BLACK, Font.getDefault(),      TextAlignment.LEFT,    false, false, ContentDisplay.TOP,          rect)\n+        );\n@@ -115,1 +98,1 @@\n-    public LabelSkinCreationTest(\n+    public record Parameter(\n@@ -122,10 +105,1 @@\n-            Node graphic)\n-    {\n-        this.fill = fill;\n-        this.font = font;\n-        this.align = align;\n-        this.underline = underline;\n-        this.wrapText = wrapText;\n-        this.contentDisplay = contentDisplay;\n-        this.graphic = graphic;\n-    }\n+            Node graphic) { }\n@@ -133,1 +107,3 @@\n-    @Before public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Parameter p) {\n@@ -135,7 +111,7 @@\n-        label.setTextFill(fill);\n-        label.setFont(font);\n-        label.setTextAlignment(align);\n-        label.setUnderline(underline);\n-        label.setWrapText(wrapText);\n-        label.setContentDisplay(contentDisplay);\n-        label.setGraphic(graphic);\n+        label.setTextFill(p.fill);\n+        label.setFont(p.font);\n+        label.setTextAlignment(p.align);\n+        label.setUnderline(p.underline);\n+        label.setWrapText(p.wrapText);\n+        label.setContentDisplay(p.contentDisplay);\n+        label.setGraphic(p.graphic);\n@@ -149,1 +125,4 @@\n-    @Test public void labelWasInitializedCorrectly() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void labelWasInitializedCorrectly(Parameter p) {\n+        setup(p);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/LabelSkinCreationTest.java","additions":50,"deletions":71,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-\n-import java.util.Arrays;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -33,1 +31,1 @@\n-\n+import java.util.List;\n@@ -45,6 +43,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -54,1 +48,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,6 +54,7 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-                {-10},\n-                {0},\n-                {10}\n+    private static Collection<Integer> parameters() {\n+        return List.of(\n+            -10,\n+            0,\n+            10\n+        );\n+    }\n@@ -94,2 +88,0 @@\n-        });\n-    }\n@@ -97,1 +89,0 @@\n-    private int graphicTextGap = 0;\n@@ -104,7 +95,0 @@\n-    public LabelSkinLayoutTest(int graphicTextGap) {\n-\/\/    public LabelSkinLayoutTest(HPos hpos, VPos vpos, int graphicTextGap) {\n-        this.graphicTextGap = graphicTextGap;\n-\/\/        this.hpos = hpos;\n-\/\/        this.vpos = vpos;\n-    }\n-\n@@ -114,1 +98,3 @@\n-    @Before public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(int graphicTextGap) {\n@@ -186,1 +172,4 @@\n-    @Test public void graphic_nullText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -202,1 +191,4 @@\n-    @Test public void graphic_emptyText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -218,1 +210,4 @@\n-    @Test public void graphic_Text_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -240,1 +235,4 @@\n-    @Test public void unmanagedGraphic_nullText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -251,1 +249,4 @@\n-    @Test public void unmanagedGraphic_emptyText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -262,1 +263,4 @@\n-    @Test public void unmanagedGraphic_Text_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -279,1 +283,4 @@\n-    @Test public void noGraphic_nullText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -287,1 +294,4 @@\n-    @Test public void noGraphic_emptyText_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -295,1 +305,4 @@\n-    @Test public void noGraphic_Text_TOP() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_TOP(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -310,1 +323,4 @@\n-    @Test public void graphic_nullText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -326,1 +342,4 @@\n-    @Test public void graphic_emptyText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -342,1 +361,4 @@\n-    @Test public void graphic_Text_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -363,1 +385,4 @@\n-    @Test public void unmanagedGraphic_nullText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -374,1 +399,4 @@\n-    @Test public void unmanagedGraphic_emptyText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -385,1 +413,4 @@\n-    @Test public void unmanagedGraphic_Text_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -402,1 +433,4 @@\n-    @Test public void noGraphic_nullText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -410,1 +444,4 @@\n-    @Test public void noGraphic_emptyText_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -418,1 +455,4 @@\n-    @Test public void noGraphic_Text_RIGHT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_RIGHT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -433,1 +473,4 @@\n-    @Test public void graphic_nullText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -449,1 +492,4 @@\n-    @Test public void graphic_emptyText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -465,1 +511,4 @@\n-    @Test public void graphic_Text_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -487,1 +536,4 @@\n-    @Test public void unmanagedGraphic_nullText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -498,1 +550,4 @@\n-    @Test public void unmanagedGraphic_emptyText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -509,1 +564,4 @@\n-    @Test public void unmanagedGraphic_Text_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -526,1 +584,4 @@\n-    @Test public void noGraphic_nullText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -534,1 +595,4 @@\n-    @Test public void noGraphic_emptyText_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -542,1 +606,4 @@\n-    @Test public void noGraphic_Text_BOTTOM() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_BOTTOM(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -557,1 +624,4 @@\n-    @Test public void graphic_nullText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -573,1 +643,4 @@\n-    @Test public void graphic_emptyText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -589,1 +662,4 @@\n-    @Test public void graphic_Text_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -610,1 +686,4 @@\n-    @Test public void unmanagedGraphic_nullText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -621,1 +700,4 @@\n-    @Test public void unmanagedGraphic_emptyText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -632,1 +714,4 @@\n-    @Test public void unmanagedGraphic_Text_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -649,1 +734,4 @@\n-    @Test public void noGraphic_nullText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -657,1 +745,4 @@\n-    @Test public void noGraphic_emptyText_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -665,1 +756,4 @@\n-    @Test public void noGraphic_Text_LEFT() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_LEFT(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -680,1 +774,4 @@\n-    @Test public void graphic_nullText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -696,1 +793,4 @@\n-    @Test public void graphic_emptyText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -712,1 +812,4 @@\n-    @Test public void graphic_Text_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -734,1 +837,4 @@\n-    @Test public void unmanagedGraphic_nullText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -745,1 +851,4 @@\n-    @Test public void unmanagedGraphic_emptyText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -756,1 +865,4 @@\n-    @Test public void unmanagedGraphic_Text_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -773,1 +885,4 @@\n-    @Test public void noGraphic_nullText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -781,1 +896,4 @@\n-    @Test public void noGraphic_emptyText_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -789,1 +907,4 @@\n-    @Test public void noGraphic_Text_CENTER() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_CENTER(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -804,1 +925,4 @@\n-    @Test public void graphic_nullText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -820,1 +944,4 @@\n-    @Test public void graphic_emptyText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -836,1 +963,4 @@\n-    @Test public void graphic_Text_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -852,1 +982,4 @@\n-    @Test public void unmanagedGraphic_nullText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -863,1 +996,4 @@\n-    @Test public void unmanagedGraphic_emptyText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -874,1 +1010,4 @@\n-    @Test public void unmanagedGraphic_Text_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -885,1 +1024,4 @@\n-    @Test public void noGraphic_nullText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -893,1 +1035,4 @@\n-    @Test public void noGraphic_emptyText_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -901,1 +1046,4 @@\n-    @Test public void noGraphic_Text_GRAPHIC_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_GRAPHIC_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -910,1 +1058,4 @@\n-    @Test public void graphic_nullText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_nullText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -920,1 +1071,4 @@\n-    @Test public void graphic_emptyText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_emptyText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -930,1 +1084,4 @@\n-    @Test public void graphic_Text_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void graphic_Text_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -946,1 +1103,4 @@\n-    @Test public void unmanagedGraphic_nullText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_nullText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -957,1 +1117,4 @@\n-    @Test public void unmanagedGraphic_emptyText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_emptyText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -968,1 +1131,4 @@\n-    @Test public void unmanagedGraphic_Text_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void unmanagedGraphic_Text_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -985,1 +1151,4 @@\n-    @Test public void noGraphic_nullText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_nullText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -993,1 +1162,4 @@\n-    @Test public void noGraphic_emptyText_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_emptyText_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n@@ -1001,1 +1173,4 @@\n-    @Test public void noGraphic_Text_TEXT_ONLY() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void noGraphic_Text_TEXT_ONLY(int graphicTextGap) {\n+        setup(graphicTextGap);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/LabelSkinLayoutTest.java","additions":268,"deletions":93,"binary":false,"changes":361,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,0 +34,2 @@\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n@@ -51,3 +50,0 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.Group;\n-import javafx.scene.Scene;\n@@ -55,3 +51,5 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.skin.Utils;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -69,1 +67,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/LabelSkinTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,9 +31,0 @@\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import com.sun.javafx.menu.MenuBase;\n-import com.sun.javafx.stage.WindowHelper;\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -52,0 +42,6 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.menu.MenuBase;\n+import com.sun.javafx.stage.WindowHelper;\n+import com.sun.javafx.tk.Toolkit;\n@@ -65,2 +61,2 @@\n-\n-    @BeforeClass public static void initToolKit() {\n+    @BeforeAll\n+    public static void initToolKit() {\n@@ -70,1 +66,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/MenuBarSkinTest.java","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,2 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -40,0 +38,2 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -59,1 +59,1 @@\n-            Assert.fail(\"No exception expected, but was a \" + e);\n+            fail(\"No exception expected, but was a \" + e);\n@@ -90,1 +90,1 @@\n-                    Assert.fail(\"Test failure: More than one Mnemonic registered.\");\n+                    fail(\"Test failure: More than one Mnemonic registered.\");\n@@ -112,1 +112,1 @@\n-        Assert.assertNull(\"Mnemonic was not removed from the scene,\", menuItemMnemonic.get());\n+        assertNull(menuItemMnemonic.get(), \"Mnemonic was not removed from the scene,\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/MenuButtonSkinBaseTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,1 +33,0 @@\n-\n@@ -36,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +44,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/MenuButtonSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -29,9 +32,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static org.junit.Assert.*;\n-\n@@ -46,0 +40,4 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -57,1 +55,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -75,1 +74,1 @@\n-    @After\n+    @AfterEach\n@@ -101,2 +100,1 @@\n-        assertEquals(\"progressbar fills root\", root.getWidth(),\n-                progressbar.getWidth(), 0.5);\n+        assertEquals(root.getWidth(), progressbar.getWidth(), 0.5, \"progressbar fills root\");\n@@ -104,2 +102,1 @@\n-        assertEquals(\"inner bar width updated\",\n-                progressbar.getWidth() * progress, innerBar.getWidth(), 0.5);\n+        assertEquals(progressbar.getWidth() * progress, innerBar.getWidth(), 0.5, \"inner bar width updated\");\n@@ -117,1 +114,1 @@\n-        assertNull(\"skin must be gc'ed\", weakSkinRef.get());\n+        assertNull(weakSkinRef.get(), \"skin must be gc'ed\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ProgressBarSkinTest.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,1 +30,0 @@\n-import javafx.scene.control.ProgressIndicator;\n@@ -33,1 +31,0 @@\n-import javafx.scene.paint.Color;\n@@ -35,0 +32,1 @@\n+import javafx.scene.control.ProgressIndicator;\n@@ -37,0 +35,1 @@\n+import javafx.scene.paint.Color;\n@@ -39,3 +38,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +47,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ProgressIndicatorSkinTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -29,6 +29,0 @@\n-import java.util.List;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -38,0 +32,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -44,1 +41,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,1 +42,0 @@\n-    private Class<Node> nodeClass;\n@@ -49,4 +44,2 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> nodesUnderTest() {\n-        List<Class<Control>> cs = ControlSkinFactory.getControlClasses();\n-        return ControlSkinFactory.asArrays(cs);\n+    private static Collection<Class<Control>> parameters() {\n+        return ControlSkinFactory.getControlClasses();\n@@ -55,6 +48,3 @@\n-    public QueryAccessibleAttributeTest(Class<Node> nodeClass) {\n-        this.nodeClass = nodeClass;\n-    }\n-\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class<Node> nodeClass) {\n@@ -73,1 +63,1 @@\n-    @After\n+    @AfterEach\n@@ -86,2 +76,4 @@\n-    @Test\n-    public void queryAllAttributes() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void queryAllAttributes(Class<Node> nodeClass) {\n+        setup(nodeClass);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/QueryAccessibleAttributeTest.java","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/RadioButtonSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ScrollBarSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -57,5 +55,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -63,1 +59,0 @@\n-\n@@ -66,1 +61,0 @@\n-\n@@ -71,1 +65,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -643,1 +638,1 @@\n-    @Ignore\n+    @Disabled\n@@ -703,1 +698,1 @@\n-    @Ignore\n+    @Disabled\n@@ -912,1 +907,1 @@\n-        assertEquals(\"One instance should be held by the 'content' label\", 1, ct);\n+        assertEquals(1, ct, \"One instance should be held by the 'content' label\");\n@@ -924,1 +919,1 @@\n-        assertEquals(ct + \" references of ScrollPane are not freed.\", 0, ct);\n+        assertEquals(0, ct, ct + \" references of ScrollPane are not freed.\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ScrollPaneSkinTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -38,3 +38,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +48,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SeparatorSkinLayoutTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -41,4 +40,3 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +51,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -139,1 +138,1 @@\n-    @Ignore\n+    @Disabled\n@@ -156,1 +155,1 @@\n-    @Ignore\n+    @Disabled\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SeparatorSkinTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,7 +43,7 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -102,4 +102,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -124,1 +124,1 @@\n-    @Ignore(\"JDK-8277000\")\n+    @Disabled(\"JDK-8277000\")\n@@ -131,2 +131,3 @@\n-        assertNull(\"row skin must not have listener to fixedCellSize\",\n-                unregisterChangeListeners(rowSkin, tableView.fixedCellSizeProperty()));\n+        assertNull(\n+                unregisterChangeListeners(rowSkin, tableView.fixedCellSizeProperty()),\n+                \"row skin must not have listener to fixedCellSize\");\n@@ -147,1 +148,1 @@\n-        assertEquals(\"pref row width for fixed cell size\", totalColumnWidth, tableRow.prefWidth(-1), .1);\n+        assertEquals(totalColumnWidth, tableRow.prefWidth(-1), .1, \"pref row width for fixed cell size\");\n@@ -161,1 +162,1 @@\n-        assertEquals(\"sanity: pref row witdh for not fixed cell size\", totalColumnWidth, tableRow.prefWidth(-1), .1);\n+        assertEquals(totalColumnWidth, tableRow.prefWidth(-1), .1, \"sanity: pref row witdh for not fixed cell size\");\n@@ -176,1 +177,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -189,1 +190,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -231,1 +232,1 @@\n-        assertEquals(\"fixed cell size: \", fixed, tableRow.prefHeight(-1), 1);\n+        assertEquals(fixed, tableRow.prefHeight(-1), 1, \"fixed cell size: \");\n@@ -244,1 +245,1 @@\n-        assertEquals(\"fixed cell size: \", fixed, tableRow.prefHeight(-1), 1);\n+        assertEquals(fixed, tableRow.prefHeight(-1), 1, \"fixed cell size: \");\n@@ -253,1 +254,1 @@\n-        assertFalse(\"fixed cell size disabled initially\", isFixedCellSizeEnabled(tableRow));\n+        assertFalse(isFixedCellSizeEnabled(tableRow), \"fixed cell size disabled initially\");\n@@ -256,1 +257,1 @@\n-        assertTrue(\"fixed cell size enabled\", isFixedCellSizeEnabled(tableRow));\n+        assertTrue(isFixedCellSizeEnabled(tableRow), \"fixed cell size enabled\");\n@@ -267,1 +268,1 @@\n-        assertFalse(\"fixed cell size disabled initially\", isFixedCellSizeEnabled(tableRow));\n+        assertFalse(isFixedCellSizeEnabled(tableRow), \"fixed cell size disabled initially\");\n@@ -270,1 +271,1 @@\n-        assertTrue(\"fixed cell size enabled\", isFixedCellSizeEnabled(tableRow));\n+        assertTrue(isFixedCellSizeEnabled(tableRow), \"fixed cell size enabled\");\n@@ -310,1 +311,1 @@\n-        assertTrue(\"TreeTableRowSkin must follow the VirtualFlow width\", widthAfter < (widthBefore - 10));\n+        assertTrue(widthAfter < (widthBefore - 10), \"TreeTableRowSkin must follow the VirtualFlow width\");\n@@ -367,1 +368,1 @@\n-    @Ignore(\"JDK-8274065\")\n+    @Disabled(\"JDK-8274065\")\n@@ -386,1 +387,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -392,1 +393,1 @@\n-    @Ignore(\"JDK-8274065\")\n+    @Disabled(\"JDK-8274065\")\n@@ -401,1 +402,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -417,1 +418,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -429,1 +430,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -446,1 +447,1 @@\n-        assertEquals(\"cell index must be updated\", index, cells.get(0).getIndex());\n+        assertEquals(index, cells.get(0).getIndex(), \"cell index must be updated\");\n@@ -462,1 +463,1 @@\n-        assertEquals(\"cell index must be updated\", index, cells.get(0).getIndex());\n+        assertEquals(index, cells.get(0).getIndex(), \"cell index must be updated\");\n@@ -519,1 +520,1 @@\n-        assertFalse(\"sanity: row must not be empty at index: \" + index, tableRow.isEmpty());\n+        assertFalse(tableRow.isEmpty(), \"sanity: row must not be empty at index: \" + index);\n@@ -552,1 +553,1 @@\n-    @Ignore(\"JDK-8277000\")\n+    @Disabled(\"JDK-8277000\")\n@@ -559,2 +560,3 @@\n-        assertNull(\"row skin must not have listener to fixedCellSize\",\n-                unregisterChangeListeners(rowSkin, tableView.fixedCellSizeProperty()));\n+        assertNull(\n+                unregisterChangeListeners(rowSkin, tableView.fixedCellSizeProperty()),\n+                \"row skin must not have listener to fixedCellSize\");\n@@ -575,1 +577,1 @@\n-        assertEquals(\"pref row width for fixed cell size\", totalColumnWidth, tableRow.prefWidth(-1), .1);\n+        assertEquals(totalColumnWidth, tableRow.prefWidth(-1), .1, \"pref row width for fixed cell size\");\n@@ -589,1 +591,1 @@\n-        assertEquals(\"sanity: pref row witdh for not fixed cell size\", totalColumnWidth, tableRow.prefWidth(-1), .1);\n+        assertEquals(totalColumnWidth, tableRow.prefWidth(-1), .1, \"sanity: pref row witdh for not fixed cell size\");\n@@ -600,1 +602,1 @@\n-        assertEquals(\"fixed cell size: \", fixed, tableRow.prefHeight(-1), 1);\n+        assertEquals(fixed, tableRow.prefHeight(-1), 1, \"fixed cell size: \");\n@@ -613,1 +615,1 @@\n-        assertEquals(\"fixed cell size: \", fixed, tableRow.prefHeight(-1), 1);\n+        assertEquals(fixed, tableRow.prefHeight(-1), 1, \"fixed cell size: \");\n@@ -622,1 +624,1 @@\n-        assertFalse(\"fixed cell size disabled initially\", isFixedCellSizeEnabled(tableRow));\n+        assertFalse(isFixedCellSizeEnabled(tableRow), \"fixed cell size disabled initially\");\n@@ -625,1 +627,1 @@\n-        assertTrue(\"fixed cell size enabled\", isFixedCellSizeEnabled(tableRow));\n+        assertTrue(isFixedCellSizeEnabled(tableRow), \"fixed cell size enabled\");\n@@ -636,1 +638,1 @@\n-        assertFalse(\"fixed cell size disabled initially\", isFixedCellSizeEnabled(tableRow));\n+        assertFalse(isFixedCellSizeEnabled(tableRow), \"fixed cell size disabled initially\");\n@@ -639,1 +641,1 @@\n-        assertTrue(\"fixed cell size enabled\", isFixedCellSizeEnabled(tableRow));\n+        assertTrue(isFixedCellSizeEnabled(tableRow), \"fixed cell size enabled\");\n@@ -651,2 +653,3 @@\n-        assertNotNull(\"row skin must have listener to virtualFlow width\",\n-                unregisterChangeListeners(rowSkin, flow.widthProperty()));\n+        assertNotNull(\n+                unregisterChangeListeners(rowSkin, flow.widthProperty()),\n+                \"row skin must have listener to virtualFlow width\");\n@@ -665,2 +668,3 @@\n-        assertNotNull(\"row skin must have listener to virtualFlow width\",\n-                unregisterChangeListeners(rowSkin, flow.widthProperty()));\n+        assertNotNull(\n+                unregisterChangeListeners(rowSkin, flow.widthProperty()),\n+                \"row skin must have listener to virtualFlow width\");\n@@ -725,1 +729,1 @@\n-    @Ignore(\"JDK-8274065\")\n+    @Disabled(\"JDK-8274065\")\n@@ -749,1 +753,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -762,1 +766,1 @@\n-        assertTrue(\"dirty marker must have been set\", isDirty(tableRow));\n+        assertTrue(isDirty(tableRow), \"dirty marker must have been set\");\n@@ -779,1 +783,1 @@\n-        assertEquals(\"cell index must be updated\", index, cells.get(0).getIndex());\n+        assertEquals(index, cells.get(0).getIndex(), \"cell index must be updated\");\n@@ -796,1 +800,1 @@\n-        assertEquals(\"cell index must be updated\", index, cells.get(0).getIndex());\n+        assertEquals(index, cells.get(0).getIndex(), \"cell index must be updated\");\n@@ -855,1 +859,1 @@\n-        assertFalse(\"sanity: row must not be empty at index: \" + index, tableRow.isEmpty());\n+        assertFalse(tableRow.isEmpty(), \"sanity: row must not be empty at index: \" + index);\n@@ -890,1 +894,1 @@\n-        assertTrue(\"sanity: created a fake direct event\", scrollEvent.isDirect());\n+        assertTrue(scrollEvent.isDirect(), \"sanity: created a fake direct event\");\n@@ -894,1 +898,1 @@\n-        assertTrue(\"scrollEvent must be consumed\", copy.isConsumed());\n+        assertTrue(copy.isConsumed(), \"scrollEvent must be consumed\");\n@@ -908,3 +912,3 @@\n-        assertEquals(\"sanity: area caret moved to end\", end, area.getCaretPosition());\n-        assertEquals(\"sanity: area selection updated\", end, area.getSelection().getEnd());\n-        assertEquals(\"textNode end\", end, textNode.getSelectionEnd());\n+        assertEquals(end, area.getCaretPosition(), \"sanity: area caret moved to end\");\n+        assertEquals(end, area.getSelection().getEnd(), \"sanity: area selection updated\");\n+        assertEquals(end, textNode.getSelectionEnd(), \"textNode end\");\n@@ -934,1 +938,1 @@\n-        assertEquals(\"sanity: initial count\", TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn);\n+        assertEquals(TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn, \"sanity: initial count\");\n@@ -947,1 +951,1 @@\n-        assertEquals(\"sanity: initial count\", TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn);\n+        assertEquals(TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn, \"sanity: initial count\");\n@@ -952,1 +956,1 @@\n-        assertEquals(\"prefViewportWidth must be updated\", prefViewportWidth * 2, scrollPane.getPrefViewportWidth(), 1);\n+        assertEquals(prefViewportWidth * 2, scrollPane.getPrefViewportWidth(), 1, \"prefViewportWidth must be updated\");\n@@ -974,1 +978,1 @@\n-        assertEquals(\"sanity: initial row count\", TextArea.DEFAULT_PREF_ROW_COUNT, prefRows);\n+        assertEquals(TextArea.DEFAULT_PREF_ROW_COUNT, prefRows, \"sanity: initial row count\");\n@@ -979,1 +983,1 @@\n-        assertEquals(\"prefViewportHeight must be updated\", prefViewportHeight * 2, scrollPane.getPrefViewportHeight(), 1);\n+        assertEquals(prefViewportHeight * 2, scrollPane.getPrefViewportHeight(), 1, \"prefViewportHeight must be updated\");\n@@ -991,1 +995,1 @@\n-        assertEquals(\"sanity initial text sync'ed to textNode\", initial, textNode.getText());\n+        assertEquals(initial, textNode.getText(), \"sanity initial text sync'ed to textNode\");\n@@ -1015,1 +1019,1 @@\n-        assertNull(\"sanity: default prompt is null\", getPromptNode(area));\n+        assertNull(getPromptNode(area), \"sanity: default prompt is null\");\n@@ -1017,1 +1021,1 @@\n-        assertNotNull(\"prompt node must be created\", getPromptNode(area));\n+        assertNotNull(getPromptNode(area), \"prompt node must be created\");\n@@ -1026,1 +1030,1 @@\n-        assertEquals(\"children size must be unchanged: \", children, area.getChildrenUnmodifiable().size());\n+        assertEquals(children, area.getChildrenUnmodifiable().size(), \"children size must be unchanged: \");\n@@ -1051,2 +1055,2 @@\n-        assertEquals(\"sanity: scrollLeft updated\", scrollLeft, area.getScrollLeft(), 0.1);\n-        assertTrue(\"scrollPane hValue > 0\", scrollPane.getHvalue() > 0.0);\n+        assertEquals(scrollLeft, area.getScrollLeft(), 0.1, \"sanity: scrollLeft updated\");\n+        assertTrue(scrollPane.getHvalue() > 0.0, \"scrollPane hValue > 0\");\n@@ -1070,1 +1074,1 @@\n-    @Ignore(\"8272082\")\n+    @Disabled(\"8272082\")\n@@ -1080,2 +1084,2 @@\n-        assertEquals(\"sanity: scrollTop updated\", scrollTop, area.getScrollTop(), 0.1);\n-        assertTrue(\"scrollPane vValue > 0\", scrollPane.getVvalue() > 0.0);\n+        assertEquals(scrollTop, area.getScrollTop(), 0.1, \"sanity: scrollTop updated\");\n+        assertTrue(scrollPane.getVvalue() > 0.0, \"scrollPane vValue > 0\");\n@@ -1116,1 +1120,1 @@\n-        assertEquals(\"textNode caret\", field.getCaretPosition(), textNode.getCaretPosition());\n+        assertEquals(field.getCaretPosition(), textNode.getCaretPosition(), \"textNode caret\");\n@@ -1140,3 +1144,3 @@\n-        assertEquals(\"sanity: field caret moved to end\", end, field.getCaretPosition());\n-        assertEquals(\"sanity: field selection updated\", end, field.getSelection().getEnd());\n-        assertEquals(\"textNode end\", end, textNode.getSelectionEnd());\n+        assertEquals(end, field.getCaretPosition(), \"sanity: field caret moved to end\");\n+        assertEquals(end, field.getSelection().getEnd(), \"sanity: field selection updated\");\n+        assertEquals(end, textNode.getSelectionEnd(), \"textNode end\");\n@@ -1193,1 +1197,1 @@\n-        assertEquals(\"sanity: \", Pos.CENTER_LEFT, field.getAlignment());\n+        assertEquals(Pos.CENTER_LEFT, field.getAlignment(), \"sanity: \");\n@@ -1197,1 +1201,1 @@\n-        assertEquals(\"sanity:\", 0, textTranslate, 1);\n+        assertEquals(0, textTranslate, 1, \"sanity:\");\n@@ -1199,1 +1203,1 @@\n-        assertEquals(\"translateX must be updated\", rightTranslate, getTextTranslateX(field), 1);\n+        assertEquals(rightTranslate, getTextTranslateX(field), 1, \"translateX must be updated\");\n@@ -1220,1 +1224,1 @@\n-        assertNull(\"sanity: default prompt is null\", getPromptNode(field));\n+        assertNull(getPromptNode(field), \"sanity: default prompt is null\");\n@@ -1222,1 +1226,1 @@\n-        assertNotNull(\"prompt node must be created\", getPromptNode(field));\n+        assertNotNull(getPromptNode(field), \"prompt node must be created\");\n@@ -1231,1 +1235,1 @@\n-        assertEquals(\"children size must be unchanged: \", children, field.getChildrenUnmodifiable().size());\n+        assertEquals(children, field.getChildrenUnmodifiable().size(), \"children size must be unchanged: \");\n@@ -1248,1 +1252,1 @@\n-        assertEquals(\"sanity: skin has set requests\", selected, field.getInputMethodRequests().getSelectedText());\n+        assertEquals(selected, field.getInputMethodRequests().getSelectedText(), \"sanity: skin has set requests\");\n@@ -1261,1 +1265,1 @@\n-        assertNull(\"skin dispose must remove handler it has installed\", field.getOnInputMethodTextChanged());\n+        assertNull(field.getOnInputMethodTextChanged(), \"skin dispose must remove handler it has installed\");\n@@ -1270,1 +1274,1 @@\n-        assertSame(\"sanity: skin must not replace handler\", handler, field.getOnInputMethodTextChanged());\n+        assertSame(handler, field.getOnInputMethodTextChanged(), \"sanity: skin must not replace handler\");\n@@ -1272,2 +1276,3 @@\n-        assertSame(\"skin dispose must not remove handler that was installed by control\",\n-                handler, field.getOnInputMethodTextChanged());\n+        assertSame(\n+                handler, field.getOnInputMethodTextChanged(),\n+                \"skin dispose must not remove handler that was installed by control\");\n@@ -1287,2 +1292,3 @@\n-        assertSame(\"skin dispose must not remove handler that was installed by control\",\n-                handler, field.getOnInputMethodTextChanged());\n+        assertSame(\n+                handler, field.getOnInputMethodTextChanged(),\n+                \"skin dispose must not remove handler that was installed by control\");\n@@ -1304,1 +1310,1 @@\n-        assertEquals(\"sanity: prefix must be committed\", prefix + initialText, field.getText());\n+        assertEquals(prefix + initialText, field.getText(), \"sanity: prefix must be committed\");\n@@ -1307,1 +1313,1 @@\n-        assertEquals(\" prefix must be committed again\", prefix + prefix + initialText, field.getText());\n+        assertEquals(prefix + prefix + initialText, field.getText(), \" prefix must be committed again\");\n@@ -1325,2 +1331,2 @@\n-        assertSame(\"user handler must not be changed\", h, handler);\n-        assertSame(\"replaced skin must not change handler\", handler, field.getOnInputMethodTextChanged());\n+        assertSame(h, handler, \"user handler must not be changed\");\n+        assertSame(handler, field.getOnInputMethodTextChanged(), \"replaced skin must not change handler\");\n@@ -1341,1 +1347,1 @@\n-        assertNotEquals(\"InputMethodRequests set by an old skin must be replaced by the new skin\", im, im2);\n+        assertNotEquals(im, im2, \"InputMethodRequests set by an old skin must be replaced by the new skin\");\n@@ -1355,2 +1361,2 @@\n-        assertNotNull(\"InputMethodRequests must be set by a skin\", mr1);\n-        assertNotNull(\"onInputMethodTextChanged must be set by a skin\", tc1);\n+        assertNotNull(mr1, \"InputMethodRequests must be set by a skin\");\n+        assertNotNull(tc1, \"onInputMethodTextChanged must be set by a skin\");\n@@ -1362,2 +1368,2 @@\n-        assertNotNull(\"InputMethodRequests must be set by a skin 2\", mr2);\n-        assertNotNull(\"onInputMethodTextChanged must be set by a skin 2\", tc2);\n+        assertNotNull(mr2, \"InputMethodRequests must be set by a skin 2\");\n+        assertNotNull(tc2, \"onInputMethodTextChanged must be set by a skin 2\");\n@@ -1365,2 +1371,2 @@\n-        assertNotEquals(\"InputMethodRequests set by an old skin must be replaced by the new skin\", mr1, mr2);\n-        assertNotEquals(\"onInputMethodTextChanged set by an old skin must be replaced by the new skin\", tc1, tc2);\n+        assertNotEquals(mr1, mr2, \"InputMethodRequests set by an old skin must be replaced by the new skin\");\n+        assertNotEquals(tc1, tc2, \"onInputMethodTextChanged set by an old skin must be replaced by the new skin\");\n@@ -1371,2 +1377,2 @@\n-        assertNull(\"InputMethodRequests must be cleared by uninstalling a skin\", mr3);\n-        assertNull(\"onInputMethodTextChanged must be cleared by uninstalling a skin\", tc3);\n+        assertNull(mr3, \"InputMethodRequests must be cleared by uninstalling a skin\");\n+        assertNull(tc3, \"onInputMethodTextChanged must be cleared by uninstalling a skin\");\n@@ -1384,1 +1390,1 @@\n-        assertEquals(\"skin must not alter user-set InputMethodRequests\", im, t.getInputMethodRequests());\n+        assertEquals(im, t.getInputMethodRequests(), \"skin must not alter user-set InputMethodRequests\");\n@@ -1468,1 +1474,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -1503,1 +1509,1 @@\n-        assertEquals(\"fixed cell set to value of new treeView\",\n+        assertEquals(\n@@ -1505,1 +1511,2 @@\n-                cell.prefHeight(-1), 1);\n+                cell.prefHeight(-1), 1,\n+                \"fixed cell set to value of new treeView\");\n@@ -1529,1 +1536,1 @@\n-       assertEquals(\"fixed cell set to value of new listView\",\n+       assertEquals(\n@@ -1531,1 +1538,2 @@\n-               cell.prefHeight(-1), 1);\n+               cell.prefHeight(-1), 1,\n+               \"fixed cell set to value of new listView\");\n@@ -1605,1 +1613,1 @@\n-        assertEquals(\"first item in toolbar must be focused\", bar.getItems().get(0), scene.getFocusOwner());\n+        assertEquals(bar.getItems().get(0), scene.getFocusOwner(), \"first item in toolbar must be focused\");\n@@ -1711,1 +1719,1 @@\n-    @After\n+    @AfterEach\n@@ -1717,1 +1725,1 @@\n-    @Before\n+    @BeforeEach\n@@ -1727,1 +1735,0 @@\n-\n@@ -1729,2 +1736,0 @@\n-\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinCleanupTest.java","additions":121,"deletions":116,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createControl;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.getControlClasses;\n@@ -29,11 +32,0 @@\n-import java.util.List;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static javafx.scene.control.ControlShim.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -41,0 +33,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -48,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -52,1 +46,0 @@\n-    private Class<Control> controlClass;\n@@ -64,2 +57,4 @@\n-    @Test\n-    public void testDefaultDispose() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDefaultDispose(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -73,10 +68,2 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    \/\/ Note: collection of single values supported since 4.12\n-    @Parameterized.Parameters \/\/(name = \"{index}: {0} \")\n-    public static Collection<Object[]> data() {\n-        List<Class<Control>> controlClasses = getControlClasses();\n-        return asArrays(controlClasses);\n-    }\n-\n-    public SkinDisposeContractTest(Class<Control> controlClass) {\n-        this.controlClass = controlClass;\n+    private static Collection<Class<Control>> parameters() {\n+        return getControlClasses();\n@@ -87,1 +74,1 @@\n-    @After\n+    @AfterEach\n@@ -92,2 +79,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class<Control> controlClass) {\n@@ -103,1 +91,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinDisposeContractTest.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createControl;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.replaceSkin;\n@@ -31,11 +37,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import static javafx.scene.control.ControlShim.*;\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -51,0 +46,3 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -58,1 +56,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,1 +58,0 @@\n-    private Class<Labeled> labeledClass;\n@@ -67,2 +63,4 @@\n-    @Test\n-    public void testLabeledGraphicDispose() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testLabeledGraphicDispose(Class<Labeled> labeledClass) {\n+        setup(labeledClass);\n@@ -75,2 +73,4 @@\n-    @Test\n-    public void testMemoryLeakAlternativeSkin() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakAlternativeSkin(Class<Labeled> labeledClass) {\n+        setup(labeledClass);\n@@ -81,1 +81,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -86,19 +86,13 @@\n-    @Parameterized.Parameters \/\/(name = \"{index}: {0} \")\n-    public static Collection<Object[]> data() {\n-        List<Class> labeledClasses = List.of(\n-               Button.class,\n-               CheckBox.class,\n-               Hyperlink.class,\n-               Label.class,\n-               \/\/ MenuButton is-a Labeled but its skin is-not-a LabeledSkinBase\n-               \/\/ leaking has different reason\/s\n-               \/\/ MenuButton.class,\n-               ToggleButton.class,\n-               RadioButton.class,\n-               TitledPane.class\n-                );\n-        return asArrays(labeledClasses);\n-    }\n-\n-    public SkinLabeledCleanupTest(Class<Labeled> labeledClass) {\n-        this.labeledClass = labeledClass;\n+    private static Collection<Class> parameters() {\n+        return List.of(\n+            Button.class,\n+            CheckBox.class,\n+            Hyperlink.class,\n+            Label.class,\n+            \/\/ MenuButton is-a Labeled but its skin is-not-a LabeledSkinBase\n+            \/\/ leaking has different reason\/s\n+            \/\/ MenuButton.class,\n+            ToggleButton.class,\n+            RadioButton.class,\n+            TitledPane.class\n+        );\n@@ -109,2 +103,4 @@\n-    @Test\n-    public void testSetupState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetupState(Class<Labeled> labeledClass) {\n+        setup(labeledClass);\n@@ -115,1 +111,1 @@\n-    @After\n+    @AfterEach\n@@ -120,2 +116,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class<Labeled> labeledClass) {\n@@ -133,1 +130,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinLabeledCleanupTest.java","additions":40,"deletions":44,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.asArrays;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,1 +39,0 @@\n-\n@@ -43,2 +41,0 @@\n-import java.util.List;\n-\n@@ -51,7 +47,3 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -65,1 +57,0 @@\n-@RunWith(Parameterized.class)\n@@ -68,1 +59,0 @@\n-    private Class<Control> controlClass;\n@@ -76,2 +66,4 @@\n-    @Test\n-    public void testMemoryLeakSameSkinClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakSameSkinClass(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -88,1 +80,1 @@\n-        assertNull(\"Unused Skin must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"Unused Skin must be gc'ed\");\n@@ -95,2 +87,4 @@\n-    @Test\n-    public void testMemoryLeakSameSkinClassWithScene() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakSameSkinClassWithScene(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -108,1 +102,1 @@\n-        assertNull(\"Unused Skin must be gc'ed\", weakRef.get());\n+        assertNull(weakRef.get(), \"Unused Skin must be gc'ed\");\n@@ -111,2 +105,4 @@\n-    @Test\n-    public void testControlChildrenSameSkinClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testControlChildrenSameSkinClass(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -116,2 +112,3 @@\n-        assertEquals(\"Old skin should dispose children when a new skin is set\",\n-                childCount, control.getChildrenUnmodifiable().size());\n+        assertEquals(\n+                childCount, control.getChildrenUnmodifiable().size(),\n+                \"Old skin should dispose children when a new skin is set\");\n@@ -120,2 +117,4 @@\n-    @Test\n-    public void testSetSkinOfSameClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetSkinOfSameClass(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -127,1 +126,1 @@\n-        assertNotEquals(\"New skin was not set\", oldSkin, newSkin);\n+        assertNotEquals(oldSkin, newSkin, \"New skin was not set\");\n@@ -133,2 +132,4 @@\n-    @Test\n-    public void testMemoryLeakAlternativeSkin() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakAlternativeSkin(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -145,1 +146,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -152,2 +153,4 @@\n-    @Test\n-    public void testMemoryLeakAlternativeSkinWithScene() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakAlternativeSkinWithScene(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -165,1 +168,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -171,2 +174,4 @@\n-    @Test\n-    public void testMemoryLeakAlternativeSkinShowing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMemoryLeakAlternativeSkinShowing(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -183,1 +188,1 @@\n-        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+        assertEquals(null, weakRef.get(), \"Skin must be gc'ed\");\n@@ -186,2 +191,4 @@\n-    @Test\n-    public void testControlChildren() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testControlChildren(Class<Control> controlClass) {\n+        setup(controlClass);\n@@ -192,2 +199,3 @@\n-        assertEquals(skinClass + \" must remove direct children that it has added\",\n-                childCount, control.getChildrenUnmodifiable().size());\n+        assertEquals(\n+                childCount, control.getChildrenUnmodifiable().size(),\n+                skinClass + \" must remove direct children that it has added\");\n@@ -198,9 +206,2 @@\n-    \/\/ Note: name property not supported before junit 4.11\n-    @Parameterized.Parameters \/\/(name = \"{index}: {0} \")\n-    public static Collection<Object[]> data() {\n-        List<Class<Control>> controlClasses = getControlClasses();\n-        return asArrays(controlClasses);\n-    }\n-\n-    public SkinMemoryLeakTest(Class<Control> controlClass) {\n-        this.controlClass = controlClass;\n+    private static Collection<Class<Control>> parameters() {\n+        return getControlClasses();\n@@ -241,2 +242,3 @@\n-    @Before\n-    public void setup() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class<Control> controlClass) {\n@@ -254,1 +256,1 @@\n-    @After\n+    @AfterEach\n@@ -259,1 +261,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":60,"deletions":59,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import org.junit.Test;\n-\n@@ -34,0 +32,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +54,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinPopupContractTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -30,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SliderSkinTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -39,2 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -74,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SpinnerSkinTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,10 @@\n+import static javafx.scene.control.skin.TabPaneSkinShim.disableAnimations;\n+import static javafx.scene.control.skin.TabPaneSkinShim.getHeaderAreaScrollOffset;\n+import static javafx.scene.control.skin.TabPaneSkinShim.getTabHeaders;\n+import static javafx.scene.control.skin.TabPaneSkinShim.isTabsFit;\n+import static javafx.scene.control.skin.TabPaneSkinShim.setHeaderAreaScrollOffset;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,11 +42,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.scene.control.TabObservableList;\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.control.skin.TabPaneSkinShim.*;\n-import static org.junit.Assert.*;\n-\n@@ -53,0 +52,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.TabObservableList;\n+import com.sun.javafx.tk.Toolkit;\n@@ -87,1 +91,1 @@\n-        assertEquals(\"scrolled to leading edge\", 0, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(0, getHeaderAreaScrollOffset(tabPane), 1, \"scrolled to leading edge\");\n@@ -104,1 +108,1 @@\n-        assertEquals(\"scrolled to leading edge\", 0, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(0, getHeaderAreaScrollOffset(tabPane), 1, \"scrolled to leading edge\");\n@@ -135,1 +139,1 @@\n-        assertEquals(\"scrollOffset adjusted: \", scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1, \"scrollOffset adjusted: \");\n@@ -170,1 +174,1 @@\n-        assertEquals(\"scrollOffset adjusted: \", scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1, \"scrollOffset adjusted: \");\n@@ -183,1 +187,1 @@\n-        assertEquals(\"sanity: tab visible but not scrolled\", 0, scrollOffset, 1);\n+        assertEquals(0, scrollOffset, 1, \"sanity: tab visible but not scrolled\");\n@@ -188,1 +192,1 @@\n-        assertEquals(\"sanity: really scrolled\", - selectedTabOffset, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(-selectedTabOffset, getHeaderAreaScrollOffset(tabPane), 1, \"sanity: really scrolled\");\n@@ -191,1 +195,1 @@\n-        assertEquals(\"scroll offset\", - getTabHeaderOffset(tabPane, selectedTab), getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(-getTabHeaderOffset(tabPane, selectedTab), getHeaderAreaScrollOffset(tabPane), 1, \"scroll offset\");\n@@ -210,2 +214,2 @@\n-        assertEquals(\"sanity\", selectedTabOffset + addedWidth, getTabHeaderOffset(tabPane, selectedTab), 1);\n-        assertEquals(\"scroll offset\", scrollOffset - addedWidth, getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(selectedTabOffset + addedWidth, getTabHeaderOffset(tabPane, selectedTab), 1, \"sanity\");\n+        assertEquals(scrollOffset - addedWidth, getHeaderAreaScrollOffset(tabPane), 1, \"scroll offset\");\n@@ -242,2 +246,2 @@\n-        assertEquals(\"scrollOffset for fitting tabs\", 0, noScrollOffset, 1);\n-        assertEquals(\"bounds minX\", tabOffset, header.getBoundsInParent().getMinX(), 1);\n+        assertEquals(0, noScrollOffset, 1, \"scrollOffset for fitting tabs\");\n+        assertEquals(tabOffset, header.getBoundsInParent().getMinX(), 1, \"bounds minX\");\n@@ -255,3 +259,3 @@\n-        assertFalse(\"sanity: not fitting after resize\", isTabsFit(tabPane));\n-        assertTrue(\"header must be scrolled\", scrollOffset < 0);\n-        assertEquals(\"bounds minX\", tabOffset, - scrollOffset + header.getBoundsInParent().getMinX(), 0);\n+        assertFalse(isTabsFit(tabPane), \"sanity: not fitting after resize\");\n+        assertTrue(scrollOffset < 0, \"header must be scrolled\");\n+        assertEquals(tabOffset, - scrollOffset + header.getBoundsInParent().getMinX(), 0, \"bounds minX\");\n@@ -332,3 +336,4 @@\n-        assertTrue(\"scrollOffset must be negative\", scrollOffset < 0);\n-        assertTrue(\"scrollOffset \" + scrollOffset + \"must be much greater than multiple tab widths \" + scrollPerThirdOfTabs ,\n-                scrollPerThirdOfTabs < - scrollOffset);\n+        assertTrue(scrollOffset < 0, \"scrollOffset must be negative\");\n+        assertTrue(\n+                scrollPerThirdOfTabs < - scrollOffset,\n+                \"scrollOffset \" + scrollOffset + \"must be much greater than multiple tab widths \" + scrollPerThirdOfTabs);\n@@ -338,1 +343,1 @@\n-        assertEquals(\"scrollOffset\", scrollPerTab, - getHeaderAreaScrollOffset(tabPane), 1);\n+        assertEquals(scrollPerTab, - getHeaderAreaScrollOffset(tabPane), 1, \"scrollOffset\");\n@@ -408,1 +413,1 @@\n-    @Before\n+    @BeforeEach\n@@ -420,1 +425,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TabPaneHeaderScrollTest.java","additions":37,"deletions":32,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -30,1 +33,0 @@\n-\n@@ -39,6 +41,4 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -69,1 +69,1 @@\n-    @Ignore(\"JDK-8245528\")\n+    @Disabled(\"JDK-8245528\")\n@@ -77,1 +77,1 @@\n-    @Ignore(\"JDK-8245528\")\n+    @Disabled(\"JDK-8245528\")\n@@ -200,1 +200,1 @@\n-    @Ignore(\"JDK-8245528\")\n+    @Disabled(\"JDK-8245528\")\n@@ -207,1 +207,1 @@\n-    @Ignore(\"JDK-8245528\")\n+    @Disabled(\"JDK-8245528\")\n@@ -254,1 +254,1 @@\n-        assertEquals(\"sanity: same size\", tabs.size(), headers.size());\n+        assertEquals(tabs.size(), headers.size(), \"sanity: same size\");\n@@ -257,3 +257,3 @@\n-            assertSame(\"tab at \" + i + \", is: \" + tabs.get(i).getText()\n-                + \" but in header it is: \" + headerTab.getText(),\n-                tabs.get(i), headerTab);\n+            assertSame(\n+                tabs.get(i), headerTab,\n+                \"tab at \" + i + \", is: \" + tabs.get(i).getText() + \" but in header it is: \" + headerTab.getText());\n@@ -272,1 +272,1 @@\n-    @After\n+    @AfterEach\n@@ -277,1 +277,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TabPaneSkinHeaderOrderTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,0 +44,1 @@\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n@@ -45,1 +48,0 @@\n-\n@@ -47,3 +49,4 @@\n-import org.junit.Before;\n-import org.junit.After;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -54,5 +57,0 @@\n-import javafx.scene.control.skin.TableColumnHeaderShim;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -70,1 +68,1 @@\n-    @Before\n+    @BeforeEach\n@@ -92,1 +90,1 @@\n-    @After\n+    @AfterEach\n@@ -146,2 +144,1 @@\n-        assertEquals(\"Width must be the same\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be the same\");\n@@ -162,2 +159,1 @@\n-        assertEquals(\"Width must be the same\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be the same\");\n@@ -166,2 +162,1 @@\n-        assertTrue(\"Column width must be greater\",\n-                width < column.getWidth());\n+        assertTrue(width < column.getWidth(), \"Column width must be greater\");\n@@ -173,2 +168,1 @@\n-        assertEquals(\"Width must be equal to initial value\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be equal to initial value\");\n@@ -192,2 +186,3 @@\n-        assertEquals(\"Width must be the same\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be the same\");\n@@ -196,2 +191,3 @@\n-        assertTrue(\"Column width must be smaller\",\n-                width > column.getWidth());\n+        assertTrue(\n+                width > column.getWidth(),\n+                \"Column width must be smaller\");\n@@ -206,2 +202,3 @@\n-        assertEquals(\"Width must be equal to initial value\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be equal to initial value\");\n@@ -222,2 +219,3 @@\n-        assertEquals(\"Width must be the same\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be the same\");\n@@ -226,2 +224,3 @@\n-        assertTrue(\"Column width must be greater\",\n-                width < column.getWidth());\n+        assertTrue(\n+                width < column.getWidth(),\n+                \"Column width must be greater\");\n@@ -232,2 +231,3 @@\n-        assertEquals(\"Width must be equal to initial value\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be equal to initial value\");\n@@ -250,2 +250,3 @@\n-        assertEquals(\"Width must be the same\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be the same\");\n@@ -259,2 +260,3 @@\n-        assertEquals(\"Width must be equal to initial value\",\n-                width, column.getWidth(), 0.001);\n+        assertEquals(\n+                width, column.getWidth(), 0.001,\n+                \"Width must be equal to initial value\");\n@@ -274,1 +276,1 @@\n-        assertTrue(\"Column width must be greater\", width < column.getWidth());\n+        assertTrue(width < column.getWidth(), \"Column width must be greater\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTest.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,3 +47,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -51,5 +55,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -62,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -341,1 +340,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableRowSkinTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -30,0 +33,1 @@\n+import javafx.scene.control.PasswordField;\n@@ -32,1 +36,0 @@\n-import javafx.scene.control.PasswordField;\n@@ -35,4 +38,1 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TextInputControlSkinTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,3 +33,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +42,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ToggleButtonSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -36,3 +35,2 @@\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +45,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ToolBarSkinTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n@@ -39,3 +40,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -46,4 +48,0 @@\n-import java.util.List;\n-\n-import static org.junit.Assert.assertTrue;\n-\n@@ -60,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -86,1 +84,1 @@\n-    @After\n+    @AfterEach\n@@ -102,1 +100,1 @@\n-        assertTrue(\"Column width must be greater\", width < column.getWidth());\n+        assertTrue(width < column.getWidth(), \"Column width must be greater\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableColumnHeaderTest.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils.getCell;\n@@ -29,11 +36,0 @@\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils.*;\n-\n@@ -53,0 +49,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -90,2 +91,2 @@\n-        assertTrue(\"sanity: grandChild is leaf\", grandChild.isLeaf());\n-        assertFalse(\"sanity: grandChild not selected\", sm.isSelected(grandChildRowIndex));\n+        assertTrue(grandChild.isLeaf(), \"sanity: grandChild is leaf\");\n+        assertFalse(sm.isSelected(grandChildRowIndex), \"sanity: grandChild not selected\");\n@@ -93,1 +94,1 @@\n-        assertTrue(\"grandChild must be selected \" + grandChildRowIndex, sm.isSelected(grandChildRowIndex));\n+        assertTrue(sm.isSelected(grandChildRowIndex), \"grandChild must be selected \" + grandChildRowIndex);\n@@ -100,1 +101,2 @@\n-    @Test @Ignore(\"real-cleanup\")\n+    @Test\n+    @Disabled(\"real-cleanup\")\n@@ -106,1 +108,1 @@\n-        assertNull(\"leaf must not have disclosureNode\", getDisclosureNode(grandChildRowIndex));\n+        assertNull(getDisclosureNode(grandChildRowIndex), \"leaf must not have disclosureNode\");\n@@ -112,1 +114,1 @@\n-        assertNull(\"leaf must not have disclosureNode\", getDisclosureNode(grandChildRowIndex));\n+        assertNull(getDisclosureNode(grandChildRowIndex), \"leaf must not have disclosureNode\");\n@@ -125,1 +127,1 @@\n-        assertTrue(\"row must be selected\" + grandChildRowIndex, sm.isSelected(grandChildRowIndex));\n+        assertTrue(sm.isSelected(grandChildRowIndex), \"row must be selected\" + grandChildRowIndex);\n@@ -137,1 +139,1 @@\n-        assertTrue(\"row must be selected\" + leafChildRowIndex, sm.isSelected(leafChildRowIndex));\n+        assertTrue(sm.isSelected(leafChildRowIndex), \"row must be selected\" + leafChildRowIndex);\n@@ -149,1 +151,1 @@\n-        assertEquals(\"expansion state changed\" + child.getValue(), !expanded,  child.isExpanded());\n+        assertEquals(!expanded,  child.isExpanded(), \"expansion state changed\" + child.getValue());\n@@ -191,2 +193,2 @@\n-        assertNotNull(\"disclosureNode must added\", disclosure);\n-        assertTrue(\"disclosureNode must be visible\", disclosure.isVisible());\n+        assertNotNull(disclosure, \"disclosureNode must added\");\n+        assertTrue(disclosure.isVisible(), \"disclosureNode must be visible\");\n@@ -220,2 +222,2 @@\n-        assertTrue(\"sanity: expect TreeTableRow but was: \" + tableRow, tableRow instanceof TreeTableRow);\n-        assertEquals(\"sanity: row index\", rowIndex, tableRow.getIndex());\n+        assertTrue(tableRow instanceof TreeTableRow, \"sanity: expect TreeTableRow but was: \" + tableRow);\n+        assertEquals(rowIndex, tableRow.getIndex(), \"sanity: row index\");\n@@ -294,1 +296,1 @@\n-    @Before\n+    @BeforeEach\n@@ -318,1 +320,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableViewDisclosureNodeTest.java","additions":29,"deletions":27,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.util.List;\n@@ -38,3 +39,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -44,4 +46,0 @@\n-import java.util.List;\n-\n-import static org.junit.Assert.assertEquals;\n-\n@@ -57,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n@@ -71,1 +69,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableViewIndentationTest.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -30,4 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +51,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/VirtualFlowSubClassTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -29,9 +37,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n@@ -41,1 +40,3 @@\n-\n+import java.util.List;\n+import java.util.function.DoubleSupplier;\n+import java.util.function.Supplier;\n@@ -44,1 +45,0 @@\n-import javafx.scene.control.IndexedCell;\n@@ -47,15 +47,1 @@\n-import javafx.scene.shape.Circle;\n-\n-import test.javafx.scene.control.SkinStub;\n-import javafx.scene.input.ScrollEvent;\n-import javafx.scene.layout.HBox;\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-\n-import java.util.List;\n-import java.util.function.DoubleSupplier;\n-import java.util.function.Supplier;\n-\n+import javafx.scene.control.IndexedCell;\n@@ -66,0 +52,7 @@\n+import javafx.scene.input.ScrollEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.shape.Circle;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import test.javafx.scene.control.SkinStub;\n@@ -85,1 +78,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -145,3 +139,4 @@\n-        assertEquals(\"The control and list did not have the same sizes. \" +\n-                     \"Expected \" + control.size() + \" but was \" + list.size(),\n-                     control.size(), list.size());\n+        assertEquals(\n+                     control.size(), list.size(),\n+                     \"The control and list did not have the same sizes. \" +\n+                     \"Expected \" + control.size() + \" but was \" + list.size());\n@@ -153,3 +148,4 @@\n-            assertSame(\"The control and list did not have the same item at \" +\n-                       \"index \" + index + \". Expected \" + cell + \" but was \" + cell2,\n-                       cell, cell2);\n+            assertSame(\n+                       cell, cell2,\n+                       \"The control and list did not have the same item at \" +\n+                       \"index \" + index + \". Expected \" + cell + \" but was \" + cell2);\n@@ -169,4 +165,6 @@\n-            assertTrue(\"There is a gap between the top of the viewport and the first cell\",\n-                       firstCell.getLayoutY() <= 0);\n-            assertTrue(\"There is a gap between the bottom of the last cell and the bottom of the viewport\",\n-                       lastCell.getLayoutY() + lastCell.getHeight() >= flow.getViewportLength());\n+            assertTrue(\n+                       firstCell.getLayoutY() <= 0,\n+                       \"There is a gap between the top of the viewport and the first cell\");\n+            assertTrue(\n+                       lastCell.getLayoutY() + lastCell.getHeight() >= flow.getViewportLength(),\n+                       \"There is a gap between the bottom of the last cell and the bottom of the viewport\");\n@@ -178,6 +176,8 @@\n-                assertFalse(\"There are more cells created before the start of \" +\n-                            \"the flow than necessary\",\n-                            secondCell.getLayoutY() <= 0);\n-                assertFalse(\"There are more cells created after the end of the \" +\n-                            \"flow than necessary\",\n-                            secondLastCell.getLayoutY() + secondLastCell.getHeight() >= flow.getViewportLength());\n+                assertFalse(\n+                            secondCell.getLayoutY() <= 0,\n+                            \"There are more cells created before the start of \" +\n+                            \"the flow than necessary\");\n+                assertFalse(\n+                            secondLastCell.getLayoutY() + secondLastCell.getHeight() >= flow.getViewportLength(),\n+                            \"There are more cells created after the end of the \" +\n+                            \"flow than necessary\");\n@@ -187,4 +187,6 @@\n-            assertTrue(\"There is a gap between the left of the viewport and the first cell\",\n-                       firstCell.getLayoutX() <= 0);\n-            assertTrue(\"There is a gap between the right of the last cell and the right of the viewport\",\n-                       lastCell.getLayoutX() + lastCell.getWidth() >= flow.getViewportLength());\n+            assertTrue(\n+                       firstCell.getLayoutX() <= 0,\n+                       \"There is a gap between the left of the viewport and the first cell\");\n+            assertTrue(\n+                       lastCell.getLayoutX() + lastCell.getWidth() >= flow.getViewportLength(),\n+                       \"There is a gap between the right of the last cell and the right of the viewport\");\n@@ -196,6 +198,8 @@\n-                assertFalse(\"There are more cells created before the start of \" +\n-                            \"the flow than necessary\",\n-                            secondCell.getLayoutX() <= 0);\n-                assertFalse(\"There are more cells created after the end of the \" +\n-                            \"flow than necessary\",\n-                            secondLastCell.getLayoutX() + secondLastCell.getWidth() >= flow.getViewportLength());\n+                assertFalse(\n+                            secondCell.getLayoutX() <= 0,\n+                            \"There are more cells created before the start of \" +\n+                            \"the flow than necessary\");\n+                assertFalse(\n+                            secondLastCell.getLayoutX() + secondLastCell.getWidth() >= flow.getViewportLength(),\n+                            \"There are more cells created after the end of the \" +\n+                            \"flow than necessary\");\n@@ -251,3 +255,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -260,3 +264,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -278,3 +282,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -288,3 +292,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -306,3 +310,3 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -317,3 +321,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertTrue(\"The vbar should have been visible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar should have been visible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -337,3 +341,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -349,3 +353,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -366,3 +370,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertTrue(\"The vbar should have been visible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar should have been visible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -376,3 +380,3 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -394,3 +398,3 @@\n-        assertFalse(\"The hbar should have been invisible\", flow.shim_getHbar().isVisible());\n-        assertTrue(\"The vbar should have been visible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertFalse(flow.shim_getHbar().isVisible(), \"The hbar should have been invisible\");\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar should have been visible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -407,3 +411,3 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n-        assertFalse(\"The vbar should have been invisible\", flow.shim_getVbar().isVisible());\n-        assertFalse(\"The corner should have been invisible\", flow.get_corner().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n+        assertFalse(flow.shim_getVbar().isVisible(), \"The vbar should have been invisible\");\n+        assertFalse(flow.get_corner().isVisible(), \"The corner should have been invisible\");\n@@ -423,3 +427,3 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n-        assertTrue(\"The vbar should have been visible\", flow.shim_getVbar().isVisible());\n-        assertTrue(\"The corner should have been visible\", flow.get_corner().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar should have been visible\");\n+        assertTrue(flow.get_corner().isVisible(), \"The corner should have been visible\");\n@@ -440,3 +444,3 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n-        assertTrue(\"The vbar should have been visible\", flow.shim_getVbar().isVisible());\n-        assertTrue(\"The corner should have been visible\", flow.get_corner().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar should have been visible\");\n+        assertTrue(flow.get_corner().isVisible(), \"The corner should have been visible\");\n@@ -506,1 +510,1 @@\n-    @Ignore\n+    @Disabled\n@@ -517,1 +521,1 @@\n-    @Ignore\n+    @Disabled\n@@ -537,1 +541,1 @@\n-    @Ignore\n+    @Disabled\n@@ -604,1 +608,1 @@\n-        assertTrue(\"The vbar was expected to be visible\", flow.shim_getVbar().isVisible());\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar was expected to be visible\");\n@@ -607,1 +611,1 @@\n-        assertTrue(\"The vbar was expected to be visible\", flow.shim_getVbar().isVisible());\n+        assertTrue(flow.shim_getVbar().isVisible(), \"The vbar was expected to be visible\");\n@@ -612,1 +616,1 @@\n-        assertTrue(\"The hbar was expected to be visible\", flow.shim_getHbar().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar was expected to be visible\");\n@@ -615,1 +619,1 @@\n-        assertTrue(\"The hbar was expected to be visible\", flow.shim_getHbar().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar was expected to be visible\");\n@@ -647,1 +651,1 @@\n-        assertTrue(\"All of the cells were created\", VirtualFlowShim.cells_size(flow.cells) < flow.getCellCount());\n+        assertTrue(VirtualFlowShim.cells_size(flow.cells) < flow.getCellCount(), \"All of the cells were created\");\n@@ -730,1 +734,1 @@\n-    @Ignore\n+    @Disabled\n@@ -853,1 +857,1 @@\n-        assertTrue(\"The cells didn't get created\", VirtualFlowShim.cells_size(flow.cells) > 0);\n+        assertTrue(VirtualFlowShim.cells_size(flow.cells) > 0, \"The cells didn't get created\");\n@@ -934,1 +938,1 @@\n-        assertNotNull(\"Accum cell was null\", flow.get_accumCell());\n+        assertNotNull(flow.get_accumCell(), \"Accum cell was null\");\n@@ -937,1 +941,1 @@\n-        assertNull(\"accumCell didn't get cleared\", flow.get_accumCell());\n+        assertNull(flow.get_accumCell(), \"accumCell didn't get cleared\");\n@@ -957,1 +961,1 @@\n-            if (i != 29) assertEquals(\"Bad index: \" + i, 25, flow.getCellLength(i), 0.0);\n+            if (i != 29) assertEquals(25, flow.getCellLength(i), 0.0, \"Bad index: \" + i);\n@@ -1053,1 +1057,1 @@\n-            assertTrue(Integer.toString(count), count <= 100);\n+            assertTrue(count <= 100, Integer.toString(count));\n@@ -1120,1 +1124,1 @@\n-        assertTrue(\"The hbar should have been visible\", flow.shim_getHbar().isVisible());\n+        assertTrue(flow.shim_getHbar().isVisible(), \"The hbar should have been visible\");\n@@ -1152,1 +1156,1 @@\n-        assertEquals(\"Last cell must end on viewport size\", viewportLength, (cellPosition + cellLength), 0.1);\n+        assertEquals(viewportLength, (cellPosition + cellLength), 0.1, \"Last cell must end on viewport size\");\n@@ -1189,1 +1193,1 @@\n-        assertEquals(\"Last cell must be aligned to top of the viewport\", 0, cellPosition, 0.1);\n+        assertEquals(0, cellPosition, 0.1, \"Last cell must be aligned to top of the viewport\");\n@@ -1224,1 +1228,1 @@\n-        assertEquals(\"Wrong first cell position\", -10d, cellPosition, 0d);\n+        assertEquals(-10d, cellPosition, 0d, \"Wrong first cell position\");\n@@ -1231,1 +1235,1 @@\n-            assertEquals(\"Wrong first cell position after inserting \" + i + \" cells\", -10d, cellPosition, 0d);\n+            assertEquals(-10d, cellPosition, 0d, \"Wrong first cell position after inserting \" + i + \" cells\");\n@@ -1254,1 +1258,1 @@\n-        assertEquals(\"Wrong first cell position\", -11d, cellPosition, 0d);\n+        assertEquals(-11d, cellPosition, 0d, \"Wrong first cell position\");\n@@ -1261,1 +1265,1 @@\n-            assertEquals(\"First cell position changed after adding \" + i + \" cells on large irregular list\", -11d, cellPosition, 0d);\n+            assertEquals(-11d, cellPosition, 0d, \"First cell position changed after adding \" + i + \" cells on large irregular list\");\n@@ -1276,1 +1280,1 @@\n-        assertEquals(\"Wrong number of sheet children\", 12, sheetChildrenSize);\n+        assertEquals(12, sheetChildrenSize, \"Wrong number of sheet children\");\n@@ -1282,1 +1286,1 @@\n-            assertEquals(\"Wrong number of sheet children after inserting \" + i + \" items\", 12, sheetChildrenSize);\n+            assertEquals(12, sheetChildrenSize, \"Wrong number of sheet children after inserting \" + i + \" items\");\n@@ -1289,1 +1293,1 @@\n-            assertEquals(\"Wrong number of sheet children after removing \" + i + \" items\", 12, sheetChildrenSize);\n+            assertEquals(12, sheetChildrenSize, \"Wrong number of sheet children after removing \" + i + \" items\");\n@@ -1295,1 +1299,1 @@\n-        assertEquals(\"Wrong number of sheet children after removing all items\", 12, sheetChildrenSize);\n+        assertEquals(12, sheetChildrenSize, \"Wrong number of sheet children after removing all items\");\n@@ -1326,1 +1330,1 @@\n-            assertTrue(Integer.toString(count), count < 101);\n+            assertTrue(count < 101, Integer.toString(count));\n@@ -1456,1 +1460,1 @@\n-        assertFalse(\"Moving in positive direction should not decrease position\", pos < orig);\n+        assertFalse(pos < orig, \"Moving in positive direction should not decrease position\");\n@@ -1459,1 +1463,1 @@\n-        assertFalse(\"Moving in negative direction should not increase position\", neg > pos);\n+        assertFalse(neg > pos, \"Moving in negative direction should not increase position\");\n@@ -1467,1 +1471,1 @@\n-        assertFalse(\"Moving in positive direction should not decrease position\", pos < orig);\n+        assertFalse(pos < orig, \"Moving in positive direction should not decrease position\");\n@@ -1470,1 +1474,1 @@\n-        assertFalse(\"Moving in negative direction should not increase position\", neg > pos);\n+        assertFalse(neg > pos, \"Moving in negative direction should not increase position\");\n@@ -1496,1 +1500,1 @@\n-                assertTrue(\"Too much variation while scrolling (from \"+s0+\" to \"+s1+\")\", diff < 0.1);\n+                assertTrue(diff < 0.1, \"Too much variation while scrolling (from \"+s0+\" to \"+s1+\")\");\n@@ -1500,1 +1504,1 @@\n-            assertFalse(\"Thumb moving in the wrong direction at index \", s1 < s0);\n+            assertFalse(s1 < s0, \"Thumb moving in the wrong direction at index \");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/VirtualFlowTest.java","additions":131,"deletions":127,"binary":false,"changes":258,"status":"modified"}]}