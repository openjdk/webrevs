{"files":[{"patch":"@@ -676,1 +676,0 @@\n-        double length;\n@@ -678,1 +677,1 @@\n-            length = snapSizeY(toolbar.getHeight()) - snappedTopInset() - snappedBottomInset() + getSpacing();\n+            return snapSizeY(snapSizeY(toolbar.getHeight()) - snappedTopInset() - snappedBottomInset() + getSpacing());\n@@ -680,1 +679,1 @@\n-            length = snapSizeX(toolbar.getWidth()) - snappedLeftInset() - snappedRightInset() + getSpacing();\n+            return snapSizeX(snapSizeX(toolbar.getWidth()) - snappedLeftInset() - snappedRightInset() + getSpacing());\n@@ -682,1 +681,0 @@\n-        return length;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ToolBarSkin.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -32,0 +34,2 @@\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Scene;\n@@ -35,0 +39,4 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n@@ -37,0 +45,1 @@\n+import com.sun.javafx.binding.DoubleConstant;\n@@ -39,1 +48,1 @@\n- * This fails with IllegalStateException because of the toolkit's check for the FX application thread\n+ * Tests the ToolBarSkin.\n@@ -54,1 +63,0 @@\n-\n@@ -57,1 +65,2 @@\n-    @Test public void horizontalMaxHeightTracksPreferred() {\n+    @Test\n+    public void horizontalMaxHeightTracksPreferred() {\n@@ -63,1 +72,2 @@\n-    @Test public void verticalMaxWidthTracksPreferred() {\n+    @Test\n+    public void verticalMaxWidthTracksPreferred() {\n@@ -69,0 +79,40 @@\n+    @Test\n+    public void overflowMenuNotShowingWithDifferentRenderScales() {\n+        double[] renderScales = {\n+            1.0,\n+            1.25,\n+            1.5,\n+            1.75,\n+            2.0,\n+            2.25\n+        };\n+\n+        Rectangle rect = new Rectangle(100, 100);\n+        ToolBar toolBar = new ToolBar(rect);\n+        toolBar.setSkin(new ToolBarSkin(toolBar));\n+\n+        for (var orientation : Orientation.values()) {\n+            toolBar.setOrientation(orientation);\n+\n+            for (double scale : renderScales) {\n+                Stage stage = new Stage();\n+                stage.renderScaleXProperty().bind(DoubleConstant.valueOf(scale));\n+                stage.renderScaleYProperty().bind(DoubleConstant.valueOf(scale));\n+                stage.setScene(new Scene(new HBox(toolBar), 600, 600));\n+                stage.show();\n+\n+                try {\n+                    assertOverflowNotShown(toolBar);\n+                } finally {\n+                    stage.hide();\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void assertOverflowNotShown(ToolBar tb) {\n+        Pane p = (Pane)tb.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+        assertNotNull(p, \"failed to obtain the overflow button\");\n+        assertFalse(p.isVisible(), \"the overflow button is expected to be hidden\");\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ToolBarSkinTest.java","additions":55,"deletions":5,"binary":false,"changes":60,"status":"modified"}]}