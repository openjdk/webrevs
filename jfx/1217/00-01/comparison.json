{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,3 @@\n-import com.sun.javafx.scene.control.behavior.TextAreaBehavior;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static com.sun.javafx.PlatformUtil.isMac;\n+import static com.sun.javafx.PlatformUtil.isWindows;\n+import java.util.List;\n@@ -59,1 +60,0 @@\n-import javafx.scene.text.Text;\n@@ -61,0 +61,1 @@\n+import javafx.scene.text.Text;\n@@ -62,5 +63,3 @@\n-\n-import java.util.List;\n-\n-import static com.sun.javafx.PlatformUtil.isMac;\n-import static com.sun.javafx.PlatformUtil.isWindows;\n+import com.sun.javafx.scene.LayoutFlags;\n+import com.sun.javafx.scene.control.behavior.TextAreaBehavior;\n+import com.sun.javafx.scene.control.skin.Utils;\n@@ -1318,2 +1317,1 @@\n-            double wrappingWidth = Math.max(width - (leftPadding + snappedRightInset()), 0);\n-\n+            double wrappingWidth = textArea.isWrapText() ? Math.max(width - (leftPadding + snappedRightInset()), 0) : 0;\n@@ -1479,1 +1477,1 @@\n-            \/\/ RT-36454: Fit to width\/height only if smaller than viewport.\n+            \/\/ RT-36454 (JDK-8097060): Fit to width\/height only if smaller than viewport.\n@@ -1487,0 +1485,6 @@\n+                scrollPane.setFitToWidth(setFitToWidth);\n+                scrollPane.setFitToHeight(setFitToHeight);\n+                getParent().requestLayout();\n+\n+                \/\/ if only there was a way to force a layout from within the layout!\n+                \/\/ runlater causes flicker\n@@ -1488,2 +1492,2 @@\n-                    scrollPane.setFitToWidth(setFitToWidth);\n-                    scrollPane.setFitToHeight(setFitToHeight);\n+                    scrollPane.layout();\n+                    scrollCaretToVisible();\n@@ -1491,1 +1495,0 @@\n-                getParent().requestLayout();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextAreaSkin.java","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,4 @@\n-    private static Scene scene;\n-    private static Stage stage;\n+    \/** Scene valid only during test *\/\n+    protected static Scene scene;\n+    \/** Stage valid only during test *\/\n+    protected static Stage stage;\n@@ -58,0 +60,1 @@\n+    \/** The Robot instance *\/\n@@ -341,0 +344,7 @@\n+\n+    \/**\n+     * Triggers and waits for 10 pulses to complete in this test's scene.\n+     *\/\n+    protected void waitForIdle() {\n+        Util.waitForIdle(scene);\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/BehaviorRobotTestBase.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene.control.behavior;\n+\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.control.Skin;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.skin.TextAreaSkin;\n+import javafx.scene.text.Font;\n+import javafx.stage.Window;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+\/**\n+ * Tests TextArea layout functionality.\n+ *\/\n+public class TextAreaLayoutRobotTest extends TextInputBehaviorRobotTest<TextArea> {\n+    private static final String TEXT = \"| one two three four five six seven eight nine ten eleven twelve thirteen |\";\n+    private static final double EPSILON = 0.0001;\n+\n+    public TextAreaLayoutRobotTest() {\n+        super(new TextArea());\n+    }\n+\n+    \/**\n+     * Tests that the wrap text property is honored when changing font.\n+     * JDK-8314683\n+     *\/\n+    @Test\n+    public void testWrapWhenChangingFont() {\n+        waitForIdle();\n+\n+        Util.runAndWait(() -> {\n+            Window w = control.getScene().getWindow();\n+            w.setWidth(200);\n+            w.setHeight(200);\n+            control.setWrapText(false);\n+            control.setText(TEXT);\n+        });\n+\n+        waitForIdle();\n+        \n+        Util.runAndWait(() -> {\n+            int len = TEXT.length() - 1;\n+            double y0 = getCharPositionY(0);\n+            double y1 = getCharPositionY(len);\n+            System.out.println(\"y0=\" + y0 + \" y1=\" + y1);\n+            sleep(10_000); \/\/ FIX\n+            Assertions.assertEquals(y0, y1, EPSILON, snapshot());\n+        });\n+        \n+        waitForIdle();\n+        \n+        Util.runAndWait(() -> {\n+            control.setFont(Font.font(\"Dialog\", 24));\n+        });\n+        \n+        waitForIdle();\n+        \n+        Util.runAndWait(() -> {\n+            int len = TEXT.length() - 1;\n+            double y0 = getCharPositionY(0);\n+            double y1 = getCharPositionY(len);\n+            System.out.println(\"y0=\" + y0 + \" y1=\" + y1);\n+            sleep(10_000); \/\/ FIX\n+\n+            Assertions.assertEquals(y0, y1, EPSILON, snapshot());\n+        });\n+        \n+        sleep(10000000);\n+    }\n+\n+    private double getCharPositionY(int ix) {\n+        TextAreaSkin skin = (TextAreaSkin)control.getSkin();\n+        Rectangle2D r = skin.getCharacterBounds(ix);\n+        System.out.println(\"r=\" + r);\n+        return r.getMinY();\n+    }\n+\n+\/\/    private void whenSkinAvailable(Runnable r) {\n+\/\/        TextAreaSkin skin = (TextAreaSkin)control.getSkin();\n+\/\/        if (skin == null) {\n+\/\/            control.skinProperty().addListener(new ChangeListener<Skin>() {\n+\/\/                @Override\n+\/\/                public void changed(ObservableValue<? extends Skin> src, Skin old, Skin value) {\n+\/\/                    if (value != null) {\n+\/\/                        control.skinProperty().removeListener(this);\n+\/\/                        r.run();\n+\/\/                    }\n+\/\/                }\n+\/\/            });\n+\/\/        } else {\n+\/\/            r.run();\n+\/\/        }\n+\/\/    }\n+\n+    \/\/ could take a snapshot of the scene and return a PNG in base64\n+    private String snapshot() {\n+        return \"error\";\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/TextAreaLayoutRobotTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}