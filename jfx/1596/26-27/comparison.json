{"files":[{"patch":"@@ -242,9 +242,0 @@\n-     * <p>\n-     * The geometry is encoded as a sequence of coordinates using two different formats,\n-     * depending on whether the caret is drawn as a single vertical line or as two separate\n-     * lines (a \"split\" caret).\n-     * <ul>\n-     * <li>{@code [x, y, h]} - corresponds to a single line from (x, y) to (x, y + h)\n-     * <li>{@code [x, y, x2, h]} - corresponds to a split caret drawn as two lines, the first line\n-     * drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n-     * <\/ul>\n@@ -256,1 +247,1 @@\n-    public float[] getCaretGeometry(int offset, boolean leading);\n+    public CaretGeometry getCaretGeometry(int offset, boolean leading);\n@@ -272,0 +263,19 @@\n+\n+    \/**\n+     * Encodes the caret geometry, which can be either a single vertical line,\n+     * or two vertical lines (a \"split\" caret), represented by {@code Single}\n+     * and {@code Split} classes respectively.\n+     *\/\n+    public sealed interface CaretGeometry {\n+        \/**\n+         * Represents a single line from (x, y) to (x, y + height)\n+         *\/\n+        public record Single(float x, float y, float height) implements CaretGeometry {}\n+\n+        \/**\n+         * Represents a split caret drawn as two lines, the first line\n+         * from (x1, y) to (x1, y + height\/2),\n+         * the second line from (x2, y + height\/2) to (x2, y + height).\n+         *\/\n+        public record Split(float x1, float x2, float y, float height) implements CaretGeometry {}\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+        TextLayout.CaretGeometry g = layout.getCaretGeometry(charIndex, leading);\n@@ -134,23 +135,1 @@\n-        float[] c = layout.getCaretGeometry(charIndex, leading);\n-\n-        Rectangle2D[] parts;\n-        if (c.length == 3) {\n-            \/\/ [x, y, h] - corresponds to a single line from (x, y) to (x, y + h)\n-            double x = c[0] + dx;\n-            double y = c[1] + dy;\n-            double h = c[2];\n-            parts = new Rectangle2D[] {\n-                new Rectangle2D(x, y, 0.0, h)\n-            };\n-        } else {\n-            \/\/ [x, y, x2, h] - corresponds to a split caret drawn as two lines, the first line\n-            \/\/ drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n-            double x = c[0] + dx;\n-            double y = c[1] + dy;\n-            double x2 = c[2] + dx;\n-            double h2 = c[3] \/ 2.0;\n-            parts = new Rectangle2D[] {\n-                new Rectangle2D(x, y, 0.0, h2),\n-                new Rectangle2D(x2, y + h2, 0.0, h2)\n-            };\n-        }\n+        Rectangle2D[] parts = TextUtils.getCaretRectangles(g, dx, dy);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismLayoutInfo.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import javafx.scene.shape.LineTo;\n-import javafx.scene.shape.MoveTo;\n@@ -317,1 +315,1 @@\n-    public float[] getCaretGeometry(int offset, boolean isLeading) {\n+    public TextLayout.CaretGeometry getCaretGeometry(int offset, boolean isLeading) {\n@@ -407,1 +405,1 @@\n-                        return new float[] {\n+                        return new TextLayout.CaretGeometry.Split(\n@@ -412,1 +410,1 @@\n-                        };\n+                        );\n@@ -418,1 +416,1 @@\n-        return new float[] {\n+        return new TextLayout.CaretGeometry.Single(\n@@ -422,1 +420,1 @@\n-        };\n+        );\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -98,9 +98,5 @@\n-    public static PathElement[] getCaretShape(float[] c, double dx, double dy) {\n-        if (c == null) {\n-            return null;\n-        } else if (c.length == 3) {\n-            \/\/ [x, y, h] - corresponds to a single line from (x, y) to (x, y + h)\n-            double x = c[0] + dx;\n-            double y = c[1] + dy;\n-            double h = c[2];\n-\n+    public static PathElement[] getCaretPathElements(TextLayout.CaretGeometry g, double dx, double dy) {\n+        switch (g) {\n+        case TextLayout.CaretGeometry.Single s:\n+            double x = s.x() + dx;\n+            double y = s.y() + dy;\n@@ -109,1 +105,1 @@\n-                new LineTo(x, y + h)\n+                new LineTo(x, y + s.height())\n@@ -111,9 +107,5 @@\n-        } else {\n-            \/\/ [x, y, x2, h] - corresponds to a split caret drawn as two lines, the first line\n-            \/\/ drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n-            double x = c[0] + dx;\n-            double y = c[1] + dy;\n-            double x2 = c[2] + dx;\n-            double h = c[3];\n-            double y2 = y + h\/2.0;\n-\n+        case TextLayout.CaretGeometry.Split s:\n+            double x1 = s.x1() + dx;\n+            double x2 = s.x2() + dx;\n+            double y1 = s.y() + dy;\n+            double y2 = y1 + s.height() \/ 2.0;\n@@ -121,2 +113,2 @@\n-                new MoveTo(x, y),\n-                new LineTo(x, y2),\n+                new MoveTo(x1, y1),\n+                new LineTo(x1, y2),\n@@ -124,1 +116,19 @@\n-                new LineTo(x2, y + h)\n+                new LineTo(x2, y1 + s.height())\n+            };\n+        }\n+    }\n+\n+    public static Rectangle2D[] getCaretRectangles(TextLayout.CaretGeometry g, double dx, double dy) {\n+        switch (g) {\n+        case TextLayout.CaretGeometry.Single s:\n+            return new Rectangle2D[] {\n+                new Rectangle2D(s.x() + dx, s.y() + dy, 0.0, s.height())\n+            };\n+        case TextLayout.CaretGeometry.Split s:\n+            double x1 = s.x1() + dx;\n+            double x2 = s.x2() + dx;\n+            double y = s.y() + dy;\n+            double h2 = s.height() \/ 2.0;\n+            return new Rectangle2D[] {\n+                new Rectangle2D(x1, y, 0.0, h2),\n+                new Rectangle2D(x2, y + h2, 0.0, h2)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextUtils.java","additions":32,"deletions":22,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,25 +28,3 @@\n-import javafx.css.converter.BooleanConverter;\n-import javafx.css.converter.EnumConverter;\n-import javafx.css.converter.SizeConverter;\n-import com.sun.javafx.geom.BaseBounds;\n-import com.sun.javafx.geom.Path2D;\n-import com.sun.javafx.geom.RectBounds;\n-import com.sun.javafx.geom.TransformedShape;\n-import com.sun.javafx.geom.transform.BaseTransform;\n-import com.sun.javafx.scene.DirtyBits;\n-import com.sun.javafx.scene.NodeHelper;\n-import com.sun.javafx.scene.shape.ShapeHelper;\n-import com.sun.javafx.scene.shape.TextHelper;\n-import com.sun.javafx.scene.text.GlyphList;\n-import com.sun.javafx.scene.text.TextLayout;\n-import com.sun.javafx.scene.text.TextLayoutFactory;\n-import com.sun.javafx.scene.text.TextLine;\n-import com.sun.javafx.scene.text.TextSpan;\n-import com.sun.javafx.sg.prism.NGNode;\n-import com.sun.javafx.sg.prism.NGShape;\n-import com.sun.javafx.sg.prism.NGText;\n-import com.sun.javafx.scene.text.FontHelper;\n-import com.sun.javafx.text.PrismLayoutInfo;\n-import com.sun.javafx.text.TextRun;\n-import com.sun.javafx.text.TextUtils;\n-import com.sun.javafx.tk.Toolkit;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -57,12 +35,0 @@\n-import javafx.scene.AccessibleAttribute;\n-import javafx.scene.AccessibleRole;\n-import javafx.scene.paint.Color;\n-import javafx.scene.paint.Paint;\n-import javafx.scene.shape.LineTo;\n-import javafx.scene.shape.MoveTo;\n-import javafx.scene.shape.PathElement;\n-import javafx.scene.shape.Shape;\n-import javafx.scene.shape.StrokeType;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n@@ -91,0 +57,3 @@\n+import javafx.css.converter.BooleanConverter;\n+import javafx.css.converter.EnumConverter;\n+import javafx.css.converter.SizeConverter;\n@@ -97,0 +66,2 @@\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.AccessibleRole;\n@@ -98,0 +69,28 @@\n+import javafx.scene.paint.Color;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.shape.Shape;\n+import javafx.scene.shape.StrokeType;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.geom.Path2D;\n+import com.sun.javafx.geom.RectBounds;\n+import com.sun.javafx.geom.TransformedShape;\n+import com.sun.javafx.geom.transform.BaseTransform;\n+import com.sun.javafx.scene.DirtyBits;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.scene.shape.ShapeHelper;\n+import com.sun.javafx.scene.shape.TextHelper;\n+import com.sun.javafx.scene.text.FontHelper;\n+import com.sun.javafx.scene.text.GlyphList;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLayoutFactory;\n+import com.sun.javafx.scene.text.TextLine;\n+import com.sun.javafx.scene.text.TextSpan;\n+import com.sun.javafx.sg.prism.NGNode;\n+import com.sun.javafx.sg.prism.NGShape;\n+import com.sun.javafx.sg.prism.NGText;\n+import com.sun.javafx.text.PrismLayoutInfo;\n+import com.sun.javafx.text.TextUtils;\n+import com.sun.javafx.tk.Toolkit;\n@@ -1084,2 +1083,2 @@\n-            float[] c = getTextLayout().getCaretGeometry(charIndex, caretBias);\n-            return TextUtils.getCaretShape(c, dx, dy);\n+            TextLayout.CaretGeometry g = getTextLayout().getCaretGeometry(charIndex, caretBias);\n+            return TextUtils.getCaretPathElements(g, dx, dy);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":38,"deletions":39,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-        float[] c = getTextLayout().getCaretGeometry(charIndex, leading);\n+        TextLayout.CaretGeometry g = getTextLayout().getCaretGeometry(charIndex, leading);\n@@ -224,1 +224,1 @@\n-        return TextUtils.getCaretShape(c, 0.0, 0.0);\n+        return TextUtils.getCaretPathElements(g, 0.0, 0.0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}