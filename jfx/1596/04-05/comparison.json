{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Objects;\n@@ -32,2 +33,0 @@\n-import java.util.Objects;\n-\n@@ -82,0 +81,6 @@\n+    \/** Callback to be called for each rectangular shape *\/\n+    @FunctionalInterface\n+    public static interface GeometryCallback {\n+        public void addRectangle(float left, float top, float right, float bottom);\n+    }\n+\n@@ -238,2 +243,15 @@\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y);\n+\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout for one of the three possible types:\n+     * <ul>\n+     * <li>{@link #TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link #TYPE_TEXT} - text selection shape\n+     * <li>{@link #TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param the type of the geometry\n+     * @param client the callback to invoke for each rectangular shape\n+     *\/\n+    public void getRange(int start, int end, int type, GeometryCallback client);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -29,1 +31,1 @@\n-import com.sun.javafx.geom.BaseBounds;\n+import javafx.scene.text.TextLineInfo;\n@@ -39,1 +41,1 @@\n-    private PrismLayoutInfo(TextLayout layout) {\n+    public PrismLayoutInfo(TextLayout layout) {\n@@ -43,4 +45,0 @@\n-    public static LayoutInfo of(TextLayout layout) {\n-        return new PrismLayoutInfo(layout);\n-    }\n-\n@@ -49,1 +47,1 @@\n-        return toRectangle2D(layout.getBounds());\n+        return TextUtils.toRectangle2D(layout.getBounds());\n@@ -58,2 +56,8 @@\n-    public int getTextLineStart(int ix) {\n-        return line(ix).getStart();\n+    public List<TextLineInfo> getTextLines() {\n+        TextLine[] lines = layout.getLines();\n+        int sz = lines.length;\n+        ArrayList<TextLineInfo> rv = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            rv.add(TextUtils.toLineInfo(lines[i]));\n+        }\n+        return rv;\n@@ -63,3 +67,2 @@\n-    public int getTextLineEnd(int ix) {\n-        TextLine line = line(ix);\n-        return line.getStart() + line.getLength();\n+    public TextLineInfo getTextLine(int index) {\n+        return TextUtils.toLineInfo(layout.getLines()[index]);\n@@ -69,2 +72,2 @@\n-    public Rectangle2D getLineBounds(int ix) {\n-        return toRectangle2D(line(ix).getBounds());\n+    public List<Rectangle2D> selectionShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_TEXT);\n@@ -73,2 +76,21 @@\n-    private TextLine line(int ix) {\n-        return layout.getLines()[ix];\n+    @Override\n+    public List<Rectangle2D> strikeThroughShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> underlineShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_UNDERLINE);\n+    }\n+\n+    \/\/ TODO padding?\n+    private List<Rectangle2D> getGeometry(int start, int end, int type) {\n+        ArrayList<Rectangle2D> rv = new ArrayList<>();\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            if (left < right) {\n+                rv.add(new Rectangle2D(left, top, right - left, bottom - top));\n+            } else {\n+                rv.add(new Rectangle2D(right, top, left - right, bottom - top));\n+            }\n+        });\n+        return rv;\n@@ -77,2 +99,2 @@\n-    private static Rectangle2D toRectangle2D(BaseBounds b) {\n-        return new Rectangle2D(b.getMinX(), b.getMinY(), b.getWidth(), b.getHeight());\n+    private TextLine line(int ix) {\n+        return layout.getLines()[ix];\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismLayoutInfo.java","additions":40,"deletions":18,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -481,2 +481,1 @@\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y) {\n+    public void getRange(int start, int end, int type, GeometryCallback client) {\n@@ -578,5 +577,1 @@\n-                            result.add(new MoveTo(x + l,  y + top));\n-                            result.add(new LineTo(x + r, y + top));\n-                            result.add(new LineTo(x + r, y + bottom));\n-                            result.add(new LineTo(x + l,  y + bottom));\n-                            result.add(new LineTo(x + l,  y + top));\n+                            client.addRectangle(l, top, r, bottom);\n@@ -595,5 +590,1 @@\n-                        result.add(new MoveTo(x + l,  y + top));\n-                        result.add(new LineTo(x + r, y + top));\n-                        result.add(new LineTo(x + r, y + bottom));\n-                        result.add(new LineTo(x + l,  y + bottom));\n-                        result.add(new LineTo(x + l,  y + top));\n+                        client.addRectangle(l, top, r, bottom);\n@@ -607,1 +598,0 @@\n-        return result.toArray(new PathElement[result.size()]);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.ArrayList;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.TextLineInfo;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+\n+\/**\n+ * Text-related Utilities.\n+ *\/\n+public final class TextUtils {\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout as\n+     * an array of {@code PathElement}s, for for one of the three possible types:\n+     * <ul>\n+     * <li>{@link #TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link #TYPE_TEXT} - text selection shape\n+     * <li>{@link #TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param layout the text layout\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param type the type of geometry to query\n+     * @param dx the x offset to add to each path element\n+     * @param dy the y offset to add to each path element\n+     * @return the array of {@code PathElement}s\n+     *\/\n+    public static PathElement[] getRange(TextLayout layout, int start, int end, int type, double dx, double dy) {\n+        ArrayList<PathElement> a = new ArrayList<>();\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            left += dx;\n+            right += dx;\n+            top += dy;\n+            bottom += dy;\n+            a.add(new MoveTo(left, top));\n+            a.add(new LineTo(right, top));\n+            a.add(new LineTo(right, bottom));\n+            a.add(new LineTo(left, bottom));\n+            a.add(new LineTo(left, top));\n+        });\n+        return a.toArray(PathElement[]::new);\n+    }\n+\n+    public static TextLineInfo toLineInfo(TextLine line) {\n+        int start = line.getStart();\n+        int end = line.getStart() + line.getLength();\n+        Rectangle2D bounds = toRectangle2D(line.getBounds());\n+        return new TextLineInfo(start, end, bounds);\n+    }\n+\n+    public static Rectangle2D toRectangle2D(BaseBounds b) {\n+        return new Rectangle2D(b.getMinX(), b.getMinY(), b.getWidth(), b.getHeight());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextUtils.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.List;\n@@ -30,7 +31,3 @@\n- * Provides a think wrapper of the text layout used in a {@code Text} or a {@code TextFlow} node,\n- * with the purpose of querying the details of the layout such as break up of the text into lines\n- * and their bounds.\n- * <p>\n- * The information obtained via this object may change to reflect the underlying layout changes\n- * as a result of actions such as resizing of the container,\n- * or modification of certain properties.\n+ * Provides a view into the text layout used in a {@code Text} or a {@code TextFlow} node,\n+ * with purpose of querying the details of the layout such as break up of the text into lines,\n+ * as well as geometry of other shapes derived from the layout (selection, underline, etc.).\n@@ -38,0 +35,2 @@\n+ * The information obtained via this object may change after the next layout cycle, which may come as a result\n+ * of actions such as resizing of the container, or modification of certain properties.\n@@ -39,2 +38,0 @@\n- * <p>\n- * It is safe to cache this object.\n@@ -71,1 +68,1 @@\n-     * Returns the start offset for the line at index {@code index}.\n+     * Returns the list of text lines in the layout.\n@@ -73,2 +70,1 @@\n-     * @param index the line index\n-     * @return the start offset\n+     * @return the list of {@code TextLineInfo} objects\n@@ -76,1 +72,1 @@\n-    public abstract int getTextLineStart(int index);\n+    public abstract List<TextLineInfo> getTextLines();\n@@ -79,1 +75,2 @@\n-     * Returns the end offset for the line at index {@code index}.\n+     * Returns the {@code TextLineInfo} object which contains information about\n+     * the text line at index {@code index}.\n@@ -82,1 +79,1 @@\n-     * @return the end offset\n+     * @return the {@code TextLineInfo} object\n@@ -84,1 +81,1 @@\n-    public abstract int getTextLineEnd(int index);\n+    public abstract TextLineInfo getTextLine(int index);\n@@ -87,19 +84,2 @@\n-     * Returns the information about the line:\n-     * <ul>\n-     * <li>\n-     * {@code minX} - the x origin of the line (relative to the layout).\n-     * The x origin is defined by TextAlignment of the text layout, always zero\n-     * for left-aligned text.\n-     * <li>\n-     * {@code minY} - the ascent of the line (negative).\n-     * The ascent of the line is the max ascent of all fonts in the line.\n-     * <li>\n-     * {@code width} - the width of the line.\n-     * The width for the line is sum of all the run widths in the line, it is not\n-     * affect by the wrapping width but it will include any changes caused by\n-     * justification.\n-     * <li>\n-     * {@code height} - the height of the line.\n-     * The height of the line is sum of the max ascent, max descent, and\n-     * max line gap of all the fonts in the line.\n-     * <\/ul>\n+     * Returns the geometry of the text selection, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n@@ -107,2 +87,23 @@\n-     * @param index the line index\n-     * @return the line bounds\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> selectionShape(int start, int end);\n+\n+    \/**\n+     * Returns the geometry of the strike-through shape, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> strikeThroughShape(int start, int end);\n+\n+    \/**\n+     * Returns the geometry of the underline shape, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n@@ -110,1 +111,1 @@\n-    public abstract Rectangle2D getLineBounds(int index);\n+    public abstract List<Rectangle2D> underlineShape(int start, int end);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/LayoutInfo.java","additions":39,"deletions":38,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import com.sun.javafx.text.TextUtils;\n@@ -1058,3 +1059,3 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return layout.getRange(start, end, type, x, y);\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            return TextUtils.getRange(layout, start, end, type, dx, dy);\n@@ -1107,0 +1108,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 24\n+     *\/\n+    public final PathElement[] strikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -2071,3 +2084,1 @@\n-     * Obtains the text layout information.\n-     * <p>\n-     * The object returned is a thin wrapper of the this node text layout, allowing for querying\n+     * Returns the object which provides a view into the text layout for this node, which allows for querying\n@@ -2075,0 +2086,8 @@\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to cache this object, as the information obtained from it remains valid until the next\n+     * layout cycle.\n+     * <p>\n+     * The information obtained after the next layout cycle might be different as a result\n+     * of actions such as resizing of the container, or modification of certain properties.\n+     * For example updating the text or the font might change the layout, but a change of color would not.\n@@ -2080,1 +2099,1 @@\n-        return PrismLayoutInfo.of(getTextLayout());\n+        return new PrismLayoutInfo(getTextLayout());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import com.sun.javafx.text.TextUtils;\n@@ -246,0 +247,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 24\n+     *\/\n+    public final PathElement[] strikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -368,1 +381,1 @@\n-        return layout.getRange(start, end, type, 0, 0);\n+        return TextUtils.getRange(layout, start, end, type, 0, 0);\n@@ -693,3 +706,1 @@\n-     * Obtains the text layout information.\n-     * <p>\n-     * The object returned is a thin wrapper of the this node text layout, allowing for querying\n+     * Returns the object which provides a view into the text layout for this node, which allows for querying\n@@ -697,0 +708,8 @@\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to cache this object, as the information obtained from it remains valid until the next\n+     * layout cycle.\n+     * <p>\n+     * The information obtained after the next layout cycle might be different as a result\n+     * of actions such as resizing of the container, or modification of certain properties.\n+     * For example updating the text or the font might change the layout, but a change of color would not.\n@@ -702,1 +721,1 @@\n-        return PrismLayoutInfo.of(getTextLayout());\n+        return new PrismLayoutInfo(getTextLayout());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import javafx.geometry.Rectangle2D;\n+\n+\/**\n+ * Provides the information about a text line in a text layout.\n+ *\n+ * @param start the start offset for the line\n+ * @param end the end offset for the line (index of the last character + 1)\n+ * @param bounds the bounds of the text line, in local coordinates:\n+ * <ul>\n+ * <li>\n+ * {@code minX} - the x origin of the line (relative to the layout).\n+ * The x origin is defined by TextAlignment of the text layout, always zero\n+ * for left-aligned text.\n+ * <li>\n+ * {@code minY} - the ascent of the line (negative).\n+ * The ascent of the line is the max ascent of all fonts in the line.\n+ * <li>\n+ * {@code width} - the width of the line.\n+ * The width for the line is sum of all the run widths in the line, it is not\n+ * affect by the wrapping width but it will include any changes caused by\n+ * justification.\n+ * <li>\n+ * {@code height} - the height of the line.\n+ * The height of the line is sum of the max ascent, max descent, and\n+ * max line gap of all the fonts in the line.\n+ * <\/ul>\n+ * @since 24\n+ *\/\n+public record TextLineInfo(int start, int end, Rectangle2D bounds) {\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextLineInfo.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -28,0 +28,2 @@\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.Font;\n@@ -32,3 +34,4 @@\n-import com.sun.javafx.scene.text.*;\n-import javafx.scene.shape.PathElement;\n-import javafx.scene.text.Font;\n+import com.sun.javafx.scene.text.GlyphList;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+import com.sun.javafx.scene.text.TextSpan;\n@@ -213,2 +216,2 @@\n-    public PathElement[] getRange(int start, int end, int type, float x, float y) {\n-        return new PathElement[0];\n+    public void getRange(int start, int end, int type, GeometryCallback client) {\n+        \/\/ FIX this can be implemented later, following the logic used in getBounds() and getHitInfo()\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}