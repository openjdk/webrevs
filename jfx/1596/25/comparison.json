{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import javafx.scene.shape.PathElement;\n+import java.util.Objects;\n@@ -32,2 +32,0 @@\n-import java.util.Objects;\n-\n@@ -82,0 +80,6 @@\n+    \/** Callback to be called for each rectangular shape *\/\n+    @FunctionalInterface\n+    public static interface GeometryCallback {\n+        public void addRectangle(float left, float top, float right, float bottom);\n+    }\n+\n@@ -236,4 +240,32 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y);\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y);\n+    \/**\n+     * Queries the caret geometry and associated information at the specified text position.\n+     * <p>\n+     * The geometry is encoded as a sequence of coordinates using two different formats,\n+     * depending on whether the caret is drawn as a single vertical line or as two separate\n+     * lines (a \"split\" caret).\n+     * <ul>\n+     * <li>{@code [x, y, h]} - corresponds to a single line from (x, y) to (x, y + h)\n+     * <li>{@code [x, y, x2, h]} - corresponds to a split caret drawn as two lines, the first line\n+     * drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n+     * <\/ul>\n+     *\n+     * @param offset the character offset\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the caret geometry\n+     *\/\n+    public float[] getCaretGeometry(int offset, boolean leading);\n+\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout for one of the three possible types:\n+     * <ul>\n+     * <li>{@link #TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link #TYPE_TEXT} - text selection shape\n+     * <li>{@link #TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param type the type of the geometry\n+     * @param client the callback to invoke for each rectangular shape\n+     *\/\n+    public void getRange(int start, int end, int type, GeometryCallback client);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":40,"deletions":8,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-     * Returns metrics information about the line as follow:\n+     * Returns metrics information about the line as follows:\n@@ -44,1 +44,1 @@\n-     * affect by any wrapping width but it will include any changes caused by\n+     * affected by any wrapping width but it will include any changes caused by\n@@ -76,1 +76,1 @@\n-     * Returns the line length in character.\n+     * Returns the line length in characters.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLine.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.Objects;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.text.CaretInfo;\n+\n+\/**\n+ * CaretInfo as reported by the PrismTextLayout.\n+ *\/\n+public final class PrismCaretInfo extends CaretInfo {\n+\n+    private final Rectangle2D[] parts;\n+\n+    public PrismCaretInfo(Rectangle2D[] parts) {\n+        this.parts = parts;\n+    }\n+\n+    @Override\n+    public int getSegmentCount() {\n+        return parts.length;\n+    }\n+\n+    @Override\n+    public Rectangle2D getSegmentAt(int index) {\n+        Objects.checkIndex(index, parts.length);\n+        return parts[index];\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        for (int i = 0; i < getSegmentCount(); i++) {\n+            if (i > 0) {\n+                sb.append(\",\");\n+            }\n+            sb.append(getSegmentAt(i));\n+        }\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismCaretInfo.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.TextLineInfo;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+\n+\/**\n+ * Layout information as reported by PrismLayout.\n+ *\/\n+public abstract non-sealed class PrismLayoutInfo extends LayoutInfo {\n+\n+    protected abstract double lineSpacing();\n+\n+    protected abstract Insets insets();\n+\n+    private final TextLayout layout;\n+\n+    public PrismLayoutInfo(TextLayout layout) {\n+        this.layout = layout;\n+    }\n+\n+    @Override\n+    public Rectangle2D getLogicalBounds(boolean includeLineSpacing) {\n+        BaseBounds b = layout.getBounds();\n+        Insets m = insets();\n+        double dx = m.getLeft(); \/\/ TODO rtl?\n+        double dy = m.getTop();\n+        double sp = includeLineSpacing ? lineSpacing() : 0.0;\n+        return TextUtils.toRectangle2D(b, dx, dy, sp);\n+    }\n+\n+    @Override\n+    public int getTextLineCount() {\n+        return layout.getLines().length;\n+    }\n+\n+    @Override\n+    public List<TextLineInfo> getTextLines(boolean includeLineSpacing) {\n+        TextLine[] lines = layout.getLines();\n+        Insets m = insets();\n+        double dx = m.getLeft(); \/\/ TODO rtl?\n+        double dy = m.getTop();\n+        double sp = includeLineSpacing ? lineSpacing() : 0.0;\n+        int sz = lines.length;\n+\n+        ArrayList<TextLineInfo> rv = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            rv.add(TextUtils.toLineInfo(lines[i], dx, dy, sp));\n+        }\n+        return Collections.unmodifiableList(rv);\n+    }\n+\n+    @Override\n+    public TextLineInfo getTextLine(int index, boolean includeLineSpacing) {\n+        TextLine[] lines = layout.getLines();\n+        Objects.checkIndex(index, lines.length);\n+        Insets m = insets();\n+        double dx = m.getLeft(); \/\/ TODO rtl?\n+        double dy = m.getTop();\n+        double sp = includeLineSpacing ? lineSpacing() : 0.0;\n+        return TextUtils.toLineInfo(lines[index], dx, dy, sp);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> getSelectionGeometry(int start, int end, boolean includeLineSpacing) {\n+        double sp = includeLineSpacing ? lineSpacing() : 0.0;\n+        return getGeometry(start, end, TextLayout.TYPE_TEXT, sp);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> getStrikeThroughGeometry(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_STRIKETHROUGH, 0.0);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> getUnderlineGeometry(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_UNDERLINE, 0.0);\n+    }\n+\n+    private List<Rectangle2D> getGeometry(int start, int end, int type, double lineSpacing) {\n+        Insets m = insets();\n+        double dx = m.getLeft(); \/\/ TODO RTL?\n+        double dy = m.getTop();\n+\n+        ArrayList<Rectangle2D> rv = new ArrayList<>();\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            if (left < right) {\n+                rv.add(new Rectangle2D(left + dx, top + dy, right - left, bottom - top + lineSpacing));\n+            } else {\n+                rv.add(new Rectangle2D(right + dx, top + dy, left - right, bottom - top + lineSpacing));\n+            }\n+        });\n+        return Collections.unmodifiableList(rv);\n+    }\n+\n+    @Override\n+    public CaretInfo caretInfoAt(int charIndex, boolean leading) {\n+        Insets m = insets();\n+        double dx = m.getLeft(); \/\/ TODO RTL?\n+        double dy = m.getTop();\n+        float[] c = layout.getCaretGeometry(charIndex, leading);\n+\n+        Rectangle2D[] parts;\n+        if (c.length == 3) {\n+            \/\/ [x, y, h] - corresponds to a single line from (x, y) to (x, y + h)\n+            double x = c[0] + dx;\n+            double y = c[1] + dy;\n+            double h = c[2];\n+            parts = new Rectangle2D[] {\n+                new Rectangle2D(x, y, 0.0, h)\n+            };\n+        } else {\n+            \/\/ [x, y, x2, h] - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n+            double x = c[0] + dx;\n+            double y = c[1] + dy;\n+            double x2 = c[2] + dx;\n+            double h2 = c[3] \/ 2.0;\n+            parts = new Rectangle2D[] {\n+                new Rectangle2D(x, y, 0.0, h2),\n+                new Rectangle2D(x2, y + h2, 0.0, h2)\n+            };\n+        }\n+        return new PrismCaretInfo(parts);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismLayoutInfo.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -317,2 +317,1 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y) {\n+    public float[] getCaretGeometry(int offset, boolean isLeading) {\n@@ -389,2 +388,1 @@\n-        lineX += x;\n-        lineY += y;\n+\n@@ -408,7 +406,7 @@\n-                        lineX2 += x;\n-                        PathElement[] result = new PathElement[4];\n-                        result[0] = new MoveTo(lineX, lineY);\n-                        result[1] = new LineTo(lineX, lineY + lineHeight \/ 2);\n-                        result[2] = new MoveTo(lineX2, lineY + lineHeight \/ 2);\n-                        result[3] = new LineTo(lineX2, lineY + lineHeight);\n-                        return result;\n+                        \/\/ split caret\n+                        return new float[] {\n+                            lineX,\n+                            lineY,\n+                            lineX2,\n+                            lineHeight\n+                        };\n@@ -419,4 +417,6 @@\n-        PathElement[] result = new PathElement[2];\n-        result[0] = new MoveTo(lineX, lineY);\n-        result[1] = new LineTo(lineX, lineY + lineHeight);\n-        return result;\n+        \/\/ regular caret\n+        return new float[] {\n+            lineX,\n+            lineY,\n+            lineHeight\n+        };\n@@ -485,2 +485,1 @@\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y) {\n+    public void getRange(int start, int end, int type, GeometryCallback client) {\n@@ -582,5 +581,1 @@\n-                            result.add(new MoveTo(x + l,  y + top));\n-                            result.add(new LineTo(x + r, y + top));\n-                            result.add(new LineTo(x + r, y + bottom));\n-                            result.add(new LineTo(x + l,  y + bottom));\n-                            result.add(new LineTo(x + l,  y + top));\n+                            client.addRectangle(l, top, r, bottom);\n@@ -599,5 +594,1 @@\n-                        result.add(new MoveTo(x + l,  y + top));\n-                        result.add(new LineTo(x + r, y + top));\n-                        result.add(new LineTo(x + r, y + bottom));\n-                        result.add(new LineTo(x + l,  y + bottom));\n-                        result.add(new LineTo(x + l,  y + top));\n+                        client.addRectangle(l, top, r, bottom);\n@@ -611,1 +602,0 @@\n-        return result.toArray(new PathElement[result.size()]);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.ArrayList;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.TextLineInfo;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.geom.Point2D;\n+import com.sun.javafx.scene.text.GlyphList;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+\n+\/**\n+ * Text-related Utilities.\n+ *\/\n+public final class TextUtils {\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout as\n+     * an array of {@code PathElement}s, for one of the three possible types:\n+     * <ul>\n+     * <li>{@link TextLayout#TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link TextLayout#TYPE_TEXT} - text selection shape\n+     * <li>{@link TextLayout#TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param layout the text layout\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param type the type of geometry to query\n+     * @param dx the x offset to add to each path element\n+     * @param dy the y offset to add to each path element\n+     * @return the array of {@code PathElement}s\n+     *\/\n+    public static PathElement[] getRange(TextLayout layout, int start, int end, int type, double dx, double dy) {\n+        ArrayList<PathElement> a = new ArrayList<>();\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            double leftEdge = left + dx;\n+            double rightEdge = right + dx;\n+            double topEdge = top + dy;\n+            double bottomEdge = bottom + dy;\n+            a.add(new MoveTo(leftEdge, topEdge));\n+            a.add(new LineTo(rightEdge, topEdge));\n+            a.add(new LineTo(rightEdge, bottomEdge));\n+            a.add(new LineTo(leftEdge, bottomEdge));\n+            a.add(new LineTo(leftEdge, topEdge));\n+        });\n+        return a.toArray(PathElement[]::new);\n+    }\n+\n+    public static TextLineInfo toLineInfo(TextLine line, double dx, double dy, double lineSpacing) {\n+        int start = line.getStart();\n+        int end = line.getStart() + line.getLength();\n+\n+        \/\/ all the runs on the same line have the same y coordinate\n+        for (GlyphList g : line.getRuns()) {\n+            Point2D p = g.getLocation();\n+            dx += p.x;\n+            dy += p.y;\n+            break;\n+        }\n+\n+        Rectangle2D bounds = toRectangle2D(line.getBounds(), dx, dy, lineSpacing);\n+        return new TextLineInfo(start, end, bounds);\n+    }\n+\n+    public static Rectangle2D toRectangle2D(BaseBounds b, double dx, double dy, double lineSpacing) {\n+        \/\/ you wouldn't believe it, but width can be negative in BaseBounds\n+        double w = Math.abs(b.getWidth());\n+        return new Rectangle2D(b.getMinX() + dx, dy, w, b.getHeight() + lineSpacing);\n+    }\n+\n+    public static PathElement[] getCaretShape(float[] c, double dx, double dy) {\n+        if (c == null) {\n+            return null;\n+        } else if (c.length == 3) {\n+            \/\/ [x, y, h] - corresponds to a single line from (x, y) to (x, y + h)\n+            double x = c[0] + dx;\n+            double y = c[1] + dy;\n+            double h = c[2];\n+\n+            return new PathElement[] {\n+                new MoveTo(x, y),\n+                new LineTo(x, y + h)\n+            };\n+        } else {\n+            \/\/ [x, y, x2, h] - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x, y) to (x, y + h\/2), the second line drawn from (x2, y + h\/2) to (x2, y + h).\n+            double x = c[0] + dx;\n+            double y = c[1] + dy;\n+            double x2 = c[2] + dx;\n+            double h = c[3];\n+            double y2 = y + h\/2.0;\n+\n+            return new PathElement[] {\n+                new MoveTo(x, y),\n+                new LineTo(x, y2),\n+                new MoveTo(x2, y2),\n+                new LineTo(x2, y + h)\n+            };\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextUtils.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import javafx.geometry.Rectangle2D;\n+import com.sun.javafx.text.PrismCaretInfo;\n+\n+\/**\n+ * Provides the information associated with the caret.\n+ * <p>\n+ * Typically, the caret is represented by a single vertical line which visually indicates the\n+ * position within the text.  In some cases, where the caret is positioned between left-to-right and\n+ * right-to-left text, two line segments will be shown, indicating the insertion position for both left-to-right\n+ * and right-to-left character.\n+ *\n+ * @since 25\n+ *\/\n+public sealed abstract class CaretInfo permits PrismCaretInfo {\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected CaretInfo() {\n+    }\n+\n+    \/**\n+     * Returns the number of segments representing the caret.\n+     *\n+     * @return the number of segments representing the caret\n+     *\/\n+    public abstract int getSegmentCount();\n+\n+    \/**\n+     * Returns the geometry of the segment at the specified index.\n+     *\n+     * @param index the line index\n+     * @return the bounds of the caret segment\n+     * @throws IndexOutOfBoundsException if the index is out of range\n+     *     {@code (index < 0 || index >= getSegmentCount())}\n+     *\/\n+    public abstract Rectangle2D getSegmentAt(int index);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/CaretInfo.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import java.util.List;\n+import javafx.geometry.Rectangle2D;\n+import com.sun.javafx.text.PrismLayoutInfo;\n+\n+\/**\n+ * Provides a snapshot of the text layout geometry in a {@code Text} or a {@code TextFlow} node,\n+ * such as break up of the text into lines, as well as other shapes derived from the layout\n+ * (selection, underline, etc.).\n+ * <p>\n+ * The information in this object is valid until the next layout cycle.\n+ *\n+ * @since 25\n+ *\/\n+public abstract sealed class LayoutInfo permits PrismLayoutInfo {\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected LayoutInfo() {\n+    }\n+\n+    \/**\n+     * Returns the logical bounds of the layout.\n+     * Depending on {@code includeLineSpacing}, the return value may include the line spacing after the\n+     * last line of text.\n+     *\n+     * @param includeLineSpacing determines whether the line spacing after last text line should be included\n+     * @return the layout bounds\n+     *\/\n+    public abstract Rectangle2D getLogicalBounds(boolean includeLineSpacing);\n+\n+    \/**\n+     * Returns the number of text lines in the layout.\n+     * @return the number of text lines\n+     *\/\n+    public abstract int getTextLineCount();\n+\n+    \/**\n+     * Returns the immutable list of text lines in the layout.\n+     *\n+     * @param includeLineSpacing determines whether the result includes the line spacing\n+     * @return the immutable list of {@code TextLineInfo} objects\n+     *\/\n+    public abstract List<TextLineInfo> getTextLines(boolean includeLineSpacing);\n+\n+    \/**\n+     * Returns the {@code TextLineInfo} object which contains information about\n+     * the text line at index {@code index}.\n+     *\n+     * @param index the line index\n+     * @param includeLineSpacing determines whether the result includes the line spacing\n+     * @return the {@code TextLineInfo} object\n+     * @throws IndexOutOfBoundsException if the index is out of range\n+     *     {@code (index < 0 || index >= getTextLineCount())}\n+     *\/\n+    public abstract TextLineInfo getTextLine(int index, boolean includeLineSpacing);\n+\n+    \/**\n+     * Returns the geometry of the text selection, as an immutable list of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param includeLineSpacing determines whether the result includes the line spacing\n+     * @return the immutable list of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> getSelectionGeometry(int start, int end, boolean includeLineSpacing);\n+\n+    \/**\n+     * Returns the geometry of the strike-through shape, as an immutable list of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the immutable list of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> getStrikeThroughGeometry(int start, int end);\n+\n+    \/**\n+     * Returns the geometry of the underline shape, as an immutable list of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the immutable list of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> getUnderlineGeometry(int start, int end);\n+\n+    \/**\n+     * Returns the information related to the caret at the specified character index and the character bias.\n+     *\n+     * @param charIndex the character index\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the {@code CaretInfo} object\n+     *\/\n+    public abstract CaretInfo caretInfoAt(int charIndex, boolean leading);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/LayoutInfo.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.javafx.text.PrismLayoutInfo;\n@@ -50,0 +51,1 @@\n+import com.sun.javafx.text.TextUtils;\n@@ -91,0 +93,1 @@\n+import javafx.geometry.Insets;\n@@ -1062,3 +1065,3 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return layout.getRange(start, end, type, x, y);\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            return TextUtils.getRange(layout, start, end, type, dx, dy);\n@@ -1079,3 +1082,4 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return getTextLayout().getCaretShape(charIndex, caretBias, x, y);\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            float[] c = getTextLayout().getCaretGeometry(charIndex, caretBias);\n+            return TextUtils.getCaretShape(c, dx, dy);\n@@ -1111,0 +1115,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 25\n+     *\/\n+    public final PathElement[] getStrikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -1843,2 +1859,6 @@\n-                    {bind(caretPositionProperty(), caretBiasProperty());}\n-                    @Override protected PathElement[] computeValue() {\n+                    {\n+                        bind(caretPositionProperty(), caretBiasProperty());\n+                    }\n+\n+                    @Override\n+                    protected PathElement[] computeValue() {\n@@ -1846,7 +1866,3 @@\n-                        int length = getTextInternal().length();\n-                        if (0 <= pos && pos <= length) {\n-                            boolean bias = isCaretBias();\n-                            float x = (float)getX();\n-                            float y = (float)getY() - getYRendering();\n-                            TextLayout layout = getTextLayout();\n-                            return layout.getCaretShape(pos, bias, x, y);\n+                        PathElement[] pe = caretShape(pos, isCaretBias());\n+                        if (pe == null) {\n+                            return EMPTY_PATH_ELEMENT_ARRAY;\n@@ -1854,1 +1870,1 @@\n-                        return EMPTY_PATH_ELEMENT_ARRAY;\n+                        return pe;\n@@ -2073,0 +2089,24 @@\n+\n+    \/**\n+     * Returns the object which provides a snapshot of the text layout geometry for this node.\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n+     *\n+     * @return the layout information\n+     * @since 25\n+     *\/\n+    public final LayoutInfo getLayoutInfo() {\n+        return new PrismLayoutInfo(getTextLayout()) {\n+            @Override\n+            public double lineSpacing() {\n+                return getLineSpacing();\n+            }\n+\n+            @Override\n+            public Insets insets() {\n+                return Insets.EMPTY;\n+            }\n+        };\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":56,"deletions":16,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,2 @@\n+import com.sun.javafx.text.PrismLayoutInfo;\n+import com.sun.javafx.text.TextUtils;\n@@ -220,1 +222,3 @@\n-        return getTextLayout().getCaretShape(charIndex, leading, 0, 0);\n+        float[] c = getTextLayout().getCaretGeometry(charIndex, leading);\n+        \/\/ TODO padding JDK-8341438?\n+        return TextUtils.getCaretShape(c, 0.0, 0.0);\n@@ -247,0 +251,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 25\n+     *\/\n+    public final PathElement[] getStrikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -369,1 +385,1 @@\n-        return layout.getRange(start, end, type, 0, 0);\n+        return TextUtils.getRange(layout, start, end, type, 0, 0);\n@@ -701,0 +717,24 @@\n+\n+    \/**\n+     * Returns the object which provides a snapshot of the text layout geometry for this node.\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n+     *\n+     * @return the layout information\n+     * @since 25\n+     *\/\n+    public final LayoutInfo getLayoutInfo() {\n+        return new PrismLayoutInfo(getTextLayout()) {\n+            @Override\n+            public double lineSpacing() {\n+                return getLineSpacing();\n+            }\n+\n+            @Override\n+            public Insets insets() {\n+                return getInsets();\n+            }\n+        };\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import javafx.geometry.Rectangle2D;\n+\n+\/**\n+ * Provides the information about a text line in a text layout.\n+ *\n+ * @param start the start offset for the line\n+ * @param end the end offset for the line (index of the last character + 1)\n+ * @param bounds the bounds of the text line, in local coordinates:\n+ * <ul>\n+ *   <li>\n+ *     {@code minX} - the x origin of the line (relative to the layout).\n+ *     The x origin is defined by TextAlignment of the text layout, always zero\n+ *     for left-aligned text.\n+ *   <li>\n+ *     {@code minY} - the ascent of the line (negative).\n+ *     The ascent of the line is the max ascent of all fonts in the line.\n+ *   <li>\n+ *     {@code width} - the width of the line.\n+ *     The width for the line is sum of all the run widths in the line, it is not\n+ *     affect by the wrapping width but it will include any changes caused by\n+ *     justification.\n+ *   <li>\n+ *     {@code height} - the height of the line.\n+ *     The height of the line is sum of the max ascent, max descent, and\n+ *     max line gap of all the fonts in the line.\n+ * <\/ul>\n+ *\n+ * @since 25\n+ *\/\n+public record TextLineInfo(int start, int end, Rectangle2D bounds) {\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextLineInfo.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,382 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Consumer;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.scene.text.TextLineInfo;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+\/*\n+ * Tests new LayoutInfo API in the TextFlow.\n+ *\/\n+public class TextFlow_TextLayout_Test {\n+    private static final int WIDTH = 500;\n+    private static final int HEIGHT = 500;\n+    private static final int FONT_SIZE = 24;\n+    private static final double LINE_SPACING = 33;\n+    private static final double EPS = 0.1;\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Robot robot;\n+    private static TextFlow textFlow;\n+    private static volatile Stage stage;\n+    private static volatile Scene scene;\n+\n+    \/\/ testing caret info\n+    @Test\n+    public void testCaretInfo() {\n+        setText(\"__________\\n\", \"______\\n\", \"_\\n\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        CaretInfo ci = la.caretInfoAt(0, true);\n+\n+        \/\/ caret is one line\n+        assertEquals(ci.getSegmentCount(), 1);\n+\n+        \/\/ basic size checks\n+        Rectangle2D r = ci.getSegmentAt(0);\n+        assertTrue(r.getMinX() >= 0);\n+        assertTrue(r.getMinY() >= 0);\n+        assertTrue(r.getWidth() < 0.1);\n+        assertTrue(r.getHeight() >= FONT_SIZE);\n+\n+        \/\/ caret at the end\n+        int len = textLength();\n+        ci = la.caretInfoAt(len - 1, false);\n+        assertEquals(ci.getSegmentCount(), 1);\n+        Rectangle2D r2 = ci.getSegmentAt(0);\n+\n+        \/\/ basic checks\n+        assertTrue(r2.getMinY() > r.getMinY());\n+        assertTrue(r2.getMinX() > r.getMinX());\n+    }\n+\n+    \/\/ testing layout bounds\n+    @Test\n+    public void testBounds() {\n+        setText(\"__\\n\", \"____\\n\", \"______\");\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        Rectangle2D r0 = la.getLogicalBounds(false);\n+        Rectangle2D r1 = la.getLogicalBounds(true);\n+\n+        \/\/ non-empty\n+        assertTrue((r0.getWidth() > 0) && (r0.getHeight() > 0));\n+        assertTrue((r1.getWidth() > 0) && (r1.getHeight() > 0));\n+\n+        \/\/ same width\n+        assertEquals(r0.getWidth(), r1.getWidth(), EPS);\n+\n+        \/\/ one is taller by one line spacing\n+        assertEquals(r0.getHeight() + LINE_SPACING, r1.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing text lines\n+    @Test\n+    public void testTextLines() {\n+        setText(\"__\\n\", \"____\\n\", \"______\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        \/\/ spacing = 0\n+\n+        assertEquals(la.getTextLineCount(), 3);\n+        List<TextLineInfo> ls = la.getTextLines(false);\n+        assertNotNull(ls);\n+        TextLineInfo l0 = la.getTextLine(0, false);\n+        TextLineInfo l1 = la.getTextLine(1, false);\n+        TextLineInfo l2 = la.getTextLine(2, false);\n+        assertEquals(l0, ls.get(0));\n+        assertEquals(l1, ls.get(1));\n+        assertEquals(l2, ls.get(2));\n+\n+        \/\/ position check\n+        assertEquals(0, l0.start());\n+        assertEquals(3, l0.end());\n+        assertEquals(3, l1.start());\n+        assertEquals(8, l1.end());\n+        assertEquals(8, l2.start());\n+        assertEquals(14, l2.end());\n+\n+        \/\/ geometry check\n+        assertEquals(0, l0.bounds().getMinX(), EPS);\n+        assertEquals(0, l0.bounds().getMinY(), EPS);\n+        assertTrue(l0.bounds().getWidth() < l1.bounds().getWidth());\n+        assertTrue(l1.bounds().getWidth() < l2.bounds().getWidth());\n+        assertTrue(l0.bounds().getMinY() < l1.bounds().getMinY());\n+        assertTrue(l1.bounds().getMinY() < l2.bounds().getMinY());\n+\n+        \/\/ line spacing\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+\n+        List<TextLineInfo> LS = la.getTextLines(true);\n+        assertNotNull(LS);\n+        TextLineInfo L0 = la.getTextLine(0, true);\n+        TextLineInfo L1 = la.getTextLine(1, true);\n+        TextLineInfo L2 = la.getTextLine(2, true);\n+        assertEquals(L0, LS.get(0));\n+        assertEquals(L1, LS.get(1));\n+        assertEquals(L2, LS.get(2));\n+\n+        \/\/ widths should be same\n+        assertEquals(l0.bounds().getWidth(), L0.bounds().getWidth());\n+        assertEquals(l1.bounds().getWidth(), L1.bounds().getWidth());\n+        assertEquals(l2.bounds().getWidth(), L2.bounds().getWidth());\n+\n+        \/\/ heights should differ\n+        assertEquals(l0.bounds().getHeight() + LINE_SPACING, L0.bounds().getHeight(), EPS);\n+        assertEquals(l1.bounds().getHeight() + LINE_SPACING, L1.bounds().getHeight(), EPS);\n+        assertEquals(l2.bounds().getHeight() + LINE_SPACING, L2.bounds().getHeight(), EPS);\n+    }\n+\n+    \/\/ testing selection shape\n+    @Test\n+    public void testSelection() {\n+        setText(\"__\\n\", \"____\\n\", \"______\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        \/\/ spacing = 0\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getSelectionGeometry(0, len, false);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+        assertEquals(0, s0.getMinY(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() >= FONT_SIZE);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+\n+        \/\/ line spacing\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+\n+        List<Rectangle2D> SS = la.getSelectionGeometry(0, len, true);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D S0 = SS.get(0);\n+        Rectangle2D S1 = SS.get(1);\n+        Rectangle2D S2 = SS.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, S0.getMinX(), EPS);\n+        assertEquals(0, S0.getMinY(), EPS);\n+\n+        assertTrue(S0.getWidth() < S1.getWidth());\n+        assertTrue(S1.getWidth() < S2.getWidth());\n+\n+        assertTrue(S0.getMinY() < S1.getMinY());\n+        assertTrue(S1.getMinY() < S2.getMinY());\n+\n+        assertTrue(S0.getHeight() >= FONT_SIZE);\n+        assertEquals(S0.getHeight(), S1.getHeight(), EPS);\n+        assertEquals(S1.getHeight(), S2.getHeight(), EPS);\n+\n+        \/\/ includes line space\n+        assertEquals(s0.getHeight() + LINE_SPACING, S0.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing strike-through shape\n+    @Test\n+    public void testStrikeThrough() {\n+        setText(\"__\\n\", \"____\\n\", \"______\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getStrikeThroughGeometry(0, len);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() > 0);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing underline shape\n+    @Test\n+    public void testUnderline() {\n+        setText(\"__\\n\", \"____\\n\", \"______\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getUnderlineGeometry(0, len);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() > 0);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing IOOBE exceptions\n+    @Test\n+    public void testIOOBExceptions() {\n+        setText(\"__________\\n\", \"______\\n\", \"_\\n\");\n+        waitForIdle();\n+        LayoutInfo la = textFlow.getLayoutInfo();\n+        assertThrows(IndexOutOfBoundsException.class, () -> la.getTextLine(-1, true));\n+        assertThrows(IndexOutOfBoundsException.class, () -> la.getTextLine(la.getTextLineCount(), true));\n+\n+        CaretInfo ci = la.caretInfoAt(0, true);\n+        assertThrows(IndexOutOfBoundsException.class, () -> ci.getSegmentAt(-1));\n+        assertThrows(IndexOutOfBoundsException.class, () -> ci.getSegmentAt(ci.getSegmentCount()));\n+    }\n+\n+    private void setText(String... segments) {\n+        Util.runAndWait(() -> {\n+            textFlow.getChildren().clear();\n+            for (String s : segments) {\n+                Text t = new Text(s);\n+                t.setFont(new Font(FONT_SIZE));\n+                textFlow.getChildren().add(t);\n+            }\n+        });\n+    }\n+\n+    private void waitForIdle() {\n+        Util.waitForIdle(scene);\n+    }\n+\n+    public static int textLength() {\n+        int len = 0;\n+        for (Node n : textFlow.getChildrenUnmodifiable()) {\n+            if (n instanceof Text t) {\n+                len += t.getText().length();\n+            } else {\n+                \/\/ treat non-Text nodes as having 1 character\n+                len++;\n+            }\n+        }\n+        return len;\n+    }\n+\n+    private void apply(Consumer<TextFlow> c) {\n+        Util.runAndWait(() -> {\n+            c.accept(textFlow);\n+        });\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        apply((t) -> {\n+            t.setLineSpacing(0);\n+        });\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        Util.shutdown();\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage st) {\n+            robot = new Robot();\n+            stage = st;\n+\n+            textFlow = new TextFlow();\n+            scene = new Scene(textFlow, WIDTH, HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlow_TextLayout_Test.java","additions":382,"deletions":0,"binary":false,"changes":382,"status":"added"},{"patch":"@@ -0,0 +1,364 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Consumer;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.scene.text.TextLineInfo;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+\/*\n+ * Tests new LayoutInfo API in the Text.\n+ *\/\n+public class Text_TextLayout_Test {\n+    private static final int WIDTH = 500;\n+    private static final int HEIGHT = 500;\n+    private static final int FONT_SIZE = 24;\n+    private static final double LINE_SPACING = 33;\n+    private static final double EPS = 0.1;\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Robot robot;\n+    private static Text text;\n+    private static volatile Stage stage;\n+    private static volatile Scene scene;\n+    private static volatile Group root;\n+\n+    \/\/ testing caret info\n+    @Test\n+    public void testCaretInfo() {\n+        setText(\"__________\\n______\\n_\\n\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        CaretInfo ci = la.caretInfoAt(0, true);\n+\n+        \/\/ caret is one line\n+        assertEquals(ci.getSegmentCount(), 1);\n+\n+        \/\/ basic size checks\n+        Rectangle2D r = ci.getSegmentAt(0);\n+        assertTrue(r.getMinX() >= 0);\n+        assertTrue(r.getMinY() >= 0);\n+        assertTrue(r.getWidth() < 0.1);\n+        assertTrue(r.getHeight() >= FONT_SIZE);\n+\n+        \/\/ caret at the end\n+        int len = textLength();\n+        ci = la.caretInfoAt(len - 1, false);\n+        assertEquals(ci.getSegmentCount(), 1);\n+        Rectangle2D r2 = ci.getSegmentAt(0);\n+\n+        \/\/ basic checks\n+        assertTrue(r2.getMinY() > r.getMinY());\n+        assertTrue(r2.getMinX() > r.getMinX());\n+    }\n+\n+    \/\/ testing layout bounds\n+    @Test\n+    public void testBounds() {\n+        setText(\"__\\n____\\n______\");\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        Rectangle2D r0 = la.getLogicalBounds(false);\n+        Rectangle2D r1 = la.getLogicalBounds(true);\n+\n+        \/\/ non-empty\n+        assertTrue((r0.getWidth() > 0) && (r0.getHeight() > 0));\n+        assertTrue((r1.getWidth() > 0) && (r1.getHeight() > 0));\n+\n+        \/\/ same width\n+        assertEquals(r0.getWidth(), r1.getWidth(), EPS);\n+\n+        \/\/ one is taller by one line spacing\n+        assertEquals(r0.getHeight() + LINE_SPACING, r1.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing text lines\n+    @Test\n+    public void testTextLines() {\n+        setText(\"__\\n____\\n______\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        \/\/ spacing = 0\n+\n+        assertEquals(la.getTextLineCount(), 3);\n+        List<TextLineInfo> ls = la.getTextLines(false);\n+        assertNotNull(ls);\n+        TextLineInfo l0 = la.getTextLine(0, false);\n+        TextLineInfo l1 = la.getTextLine(1, false);\n+        TextLineInfo l2 = la.getTextLine(2, false);\n+        assertEquals(l0, ls.get(0));\n+        assertEquals(l1, ls.get(1));\n+        assertEquals(l2, ls.get(2));\n+\n+        \/\/ position check\n+        assertEquals(0, l0.start());\n+        assertEquals(3, l0.end());\n+        assertEquals(3, l1.start());\n+        assertEquals(8, l1.end());\n+        assertEquals(8, l2.start());\n+        assertEquals(14, l2.end());\n+\n+        \/\/ geometry check\n+        assertEquals(0, l0.bounds().getMinX(), EPS);\n+        assertEquals(0, l0.bounds().getMinY(), EPS);\n+        assertTrue(l0.bounds().getWidth() < l1.bounds().getWidth());\n+        assertTrue(l1.bounds().getWidth() < l2.bounds().getWidth());\n+        assertTrue(l0.bounds().getMinY() < l1.bounds().getMinY());\n+        assertTrue(l1.bounds().getMinY() < l2.bounds().getMinY());\n+\n+        \/\/ line spacing\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+\n+        List<TextLineInfo> LS = la.getTextLines(true);\n+        assertNotNull(LS);\n+        TextLineInfo L0 = la.getTextLine(0, true);\n+        TextLineInfo L1 = la.getTextLine(1, true);\n+        TextLineInfo L2 = la.getTextLine(2, true);\n+        assertEquals(L0, LS.get(0));\n+        assertEquals(L1, LS.get(1));\n+        assertEquals(L2, LS.get(2));\n+\n+        \/\/ widths should be same\n+        assertEquals(l0.bounds().getWidth(), L0.bounds().getWidth());\n+        assertEquals(l1.bounds().getWidth(), L1.bounds().getWidth());\n+        assertEquals(l2.bounds().getWidth(), L2.bounds().getWidth());\n+\n+        \/\/ heights should differ\n+        assertEquals(l0.bounds().getHeight() + LINE_SPACING, L0.bounds().getHeight(), EPS);\n+        assertEquals(l1.bounds().getHeight() + LINE_SPACING, L1.bounds().getHeight(), EPS);\n+        assertEquals(l2.bounds().getHeight() + LINE_SPACING, L2.bounds().getHeight(), EPS);\n+    }\n+\n+    \/\/ testing selection shape\n+    @Test\n+    public void testSelection() {\n+        setText(\"__\\n____\\n______\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        \/\/ spacing = 0\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getSelectionGeometry(0, len, false);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+        assertEquals(0, s0.getMinY(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() >= FONT_SIZE);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+\n+        \/\/ line spacing\n+        apply((f) -> {\n+            f.setLineSpacing(LINE_SPACING);\n+        });\n+        waitForIdle();\n+\n+        List<Rectangle2D> SS = la.getSelectionGeometry(0, len, true);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D S0 = SS.get(0);\n+        Rectangle2D S1 = SS.get(1);\n+        Rectangle2D S2 = SS.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, S0.getMinX(), EPS);\n+        assertEquals(0, S0.getMinY(), EPS);\n+\n+        assertTrue(S0.getWidth() < S1.getWidth());\n+        assertTrue(S1.getWidth() < S2.getWidth());\n+\n+        assertTrue(S0.getMinY() < S1.getMinY());\n+        assertTrue(S1.getMinY() < S2.getMinY());\n+\n+        assertTrue(S0.getHeight() >= FONT_SIZE);\n+        assertEquals(S0.getHeight(), S1.getHeight(), EPS);\n+        assertEquals(S1.getHeight(), S2.getHeight(), EPS);\n+\n+        \/\/ includes line space\n+        assertEquals(s0.getHeight() + LINE_SPACING, S0.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing strike-through shape\n+    @Test\n+    public void testStrikeThrough() {\n+        setText(\"__\\n____\\n______\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getStrikeThroughGeometry(0, len);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() > 0);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing underline shape\n+    @Test\n+    public void testUnderline() {\n+        setText(\"__\\n____\\n______\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+\n+        int len = textLength();\n+        List<Rectangle2D> ss = la.getUnderlineGeometry(0, len);\n+        assertEquals(ss.size(), 3);\n+        Rectangle2D s0 = ss.get(0);\n+        Rectangle2D s1 = ss.get(1);\n+        Rectangle2D s2 = ss.get(2);\n+\n+        \/\/ geometry check\n+        assertEquals(0, s0.getMinX(), EPS);\n+\n+        assertTrue(s0.getWidth() < s1.getWidth());\n+        assertTrue(s1.getWidth() < s2.getWidth());\n+\n+        assertTrue(s0.getMinY() < s1.getMinY());\n+        assertTrue(s1.getMinY() < s2.getMinY());\n+\n+        assertTrue(s0.getHeight() > 0);\n+        assertEquals(s0.getHeight(), s1.getHeight(), EPS);\n+        assertEquals(s1.getHeight(), s2.getHeight(), EPS);\n+    }\n+\n+    \/\/ testing IOOBE exceptions\n+    @Test\n+    public void testIOOBExceptions() {\n+        setText(\"__\\n____\\n______\");\n+        waitForIdle();\n+        LayoutInfo la = text.getLayoutInfo();\n+        assertThrows(IndexOutOfBoundsException.class, () -> la.getTextLine(-1, true));\n+        assertThrows(IndexOutOfBoundsException.class, () -> la.getTextLine(la.getTextLineCount(), true));\n+\n+        CaretInfo ci = la.caretInfoAt(0, true);\n+        assertThrows(IndexOutOfBoundsException.class, () -> ci.getSegmentAt(-1));\n+        assertThrows(IndexOutOfBoundsException.class, () -> ci.getSegmentAt(ci.getSegmentCount()));\n+    }\n+\n+    private void setText(String s) {\n+        Util.runAndWait(() -> {\n+            text = new Text(s);\n+            text.setFont(new Font(FONT_SIZE));\n+            root.getChildren().setAll(text);\n+        });\n+    }\n+\n+    private void waitForIdle() {\n+        Util.waitForIdle(scene);\n+    }\n+\n+    public static int textLength() {\n+        return text.getText().length();\n+    }\n+\n+    private void apply(Consumer<Text> c) {\n+        Util.runAndWait(() -> {\n+            c.accept(text);\n+        });\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        Util.shutdown();\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage st) {\n+            robot = new Robot();\n+            stage = st;\n+\n+            root = new Group();\n+            scene = new Scene(root, WIDTH, HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/Text_TextLayout_Test.java","additions":364,"deletions":0,"binary":false,"changes":364,"status":"added"}]}