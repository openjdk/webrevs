{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    public int getPartCount() {\n+    public int getSegmentCount() {\n@@ -47,1 +47,1 @@\n-    public Rectangle2D getPartAt(int index) {\n+    public Rectangle2D getSegmentAt(int index) {\n@@ -55,1 +55,1 @@\n-        for (int i = 0; i < getPartCount(); i++) {\n+        for (int i = 0; i < getSegmentCount(); i++) {\n@@ -59,1 +59,1 @@\n-            sb.append(getPartAt(i));\n+            sb.append(getSegmentAt(i));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismCaretInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+ * <p>\n+ * Typically, the caret is represented by a single vertical line which visually indicates the\n+ * position within the text.  In some cases, where the caret is positioned between left-to-right and\n+ * right-to-left text, two line segments will be shown, indicating the insertion position for both left-to-right\n+ * and right-to-left character.\n@@ -43,1 +48,1 @@\n-     * Returns the number of parts representing the caret.\n+     * Returns the number of segments representing the caret.\n@@ -45,1 +50,1 @@\n-     * @return the number of parts representing the caret\n+     * @return the number of segments representing the caret\n@@ -47,1 +52,1 @@\n-    public abstract int getPartCount();\n+    public abstract int getSegmentCount();\n@@ -50,1 +55,1 @@\n-     * Returns the geometry of the part at the specified index.\n+     * Returns the geometry of the segment at the specified index.\n@@ -53,1 +58,1 @@\n-     * @return the bounds of the caret part\n+     * @return the bounds of the caret segment\n@@ -55,2 +60,1 @@\n-    public abstract Rectangle2D getPartAt(int index);\n-    \/\/ TODO variant: CaretLineInfo, with bounds and (character index + bias)\n+    public abstract Rectangle2D getSegmentAt(int index);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/CaretInfo.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        assertEquals(ci.getPartCount(), 1);\n+        assertEquals(ci.getSegmentCount(), 1);\n@@ -83,1 +83,1 @@\n-        Rectangle2D r = ci.getPartAt(0);\n+        Rectangle2D r = ci.getSegmentAt(0);\n@@ -92,2 +92,2 @@\n-        assertEquals(ci.getPartCount(), 1);\n-        Rectangle2D r2 = ci.getPartAt(0);\n+        assertEquals(ci.getSegmentCount(), 1);\n+        Rectangle2D r2 = ci.getSegmentAt(0);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlow_TextLayout_Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        assertEquals(ci.getPartCount(), 1);\n+        assertEquals(ci.getSegmentCount(), 1);\n@@ -84,1 +84,1 @@\n-        Rectangle2D r = ci.getPartAt(0);\n+        Rectangle2D r = ci.getSegmentAt(0);\n@@ -93,2 +93,2 @@\n-        assertEquals(ci.getPartCount(), 1);\n-        Rectangle2D r2 = ci.getPartAt(0);\n+        assertEquals(ci.getSegmentCount(), 1);\n+        Rectangle2D r2 = ci.getSegmentAt(0);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/Text_TextLayout_Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}