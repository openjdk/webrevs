{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import javafx.scene.shape.PathElement;\n+import java.util.Objects;\n@@ -32,2 +32,0 @@\n-import java.util.Objects;\n-\n@@ -82,0 +80,6 @@\n+    \/** Callback to be called for each rectangular shape *\/\n+    @FunctionalInterface\n+    public static interface GeometryCallback {\n+        public void addRectangle(float left, float top, float right, float bottom);\n+    }\n+\n@@ -236,4 +240,32 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y);\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y);\n+    \/**\n+     * Queries the caret geometry and associated information at the specified text position.\n+     * <p>\n+     * The geometry is encoded as a sequence of coordinates using two different formats,\n+     * depending on whether the caret is drawn as a single vertical line or as two separate\n+     * lines (a \"split\" caret).\n+     * <ul>\n+     * <li>{@code x, ymin, ymax} - corresponds to a single line from (x, ymin) tp (x, ymax)\n+     * <li>{@code x, ymin, y2, x2, ymax} - corresponds to a split caret drawn as two lines, the first line\n+     * drawn from (x,ymin) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+     * <\/ul>\n+     *\n+     * @param offset the character offset\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the caret geometry\n+     *\/\n+    public float[] getCaretInf(int offset, boolean leading);\n+\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout for one of the three possible types:\n+     * <ul>\n+     * <li>{@link #TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link #TYPE_TEXT} - text selection shape\n+     * <li>{@link #TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param the type of the geometry\n+     * @param client the callback to invoke for each rectangular shape\n+     *\/\n+    public void getRange(int start, int end, int type, GeometryCallback client);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-     * Returns metrics information about the line as follow:\n+     * Returns metrics information about the line as follows:\n@@ -44,1 +44,1 @@\n-     * affect by any wrapping width but it will include any changes caused by\n+     * affected by any wrapping width but it will include any changes caused by\n@@ -76,1 +76,1 @@\n-     * Returns the line length in character.\n+     * Returns the line length in characters.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLine.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import javafx.scene.text.CaretInfo;\n+\n+\/**\n+ * CaretInfo as reported by the PrismTextLayout.\n+ *\/\n+public final class PrismCaretInfo extends CaretInfo {\n+    private final double[][] lines;\n+\n+    public PrismCaretInfo(double[][] lines) {\n+        this.lines = lines;\n+    }\n+\n+    @Override\n+    public int getLineCount() {\n+        return lines.length;\n+    }\n+\n+    @Override\n+    public double[] getLineAt(int index) {\n+        return lines[index];\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismCaretInfo.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.TextLineInfo;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+\n+\/**\n+ * Layout information as reported by PrismLayout.\n+ *\/\n+public final class PrismLayoutInfo extends LayoutInfo {\n+    private final TextLayout layout;\n+\n+    public PrismLayoutInfo(TextLayout layout) {\n+        this.layout = layout;\n+    }\n+\n+    @Override\n+    public Rectangle2D getBounds() {\n+        return TextUtils.toRectangle2D(layout.getBounds());\n+    }\n+\n+    @Override\n+    public int getTextLineCount() {\n+        return layout.getLines().length;\n+    }\n+\n+    @Override\n+    public List<TextLineInfo> getTextLines() {\n+        TextLine[] lines = layout.getLines();\n+        int sz = lines.length;\n+        ArrayList<TextLineInfo> rv = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            rv.add(TextUtils.toLineInfo(lines[i]));\n+        }\n+        return rv;\n+    }\n+\n+    @Override\n+    public TextLineInfo getTextLine(int index) {\n+        return TextUtils.toLineInfo(layout.getLines()[index]);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> selectionShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_TEXT);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> strikeThroughShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n+    @Override\n+    public List<Rectangle2D> underlineShape(int start, int end) {\n+        return getGeometry(start, end, TextLayout.TYPE_UNDERLINE);\n+    }\n+\n+    private List<Rectangle2D> getGeometry(int start, int end, int type) {\n+        ArrayList<Rectangle2D> rv = new ArrayList<>();\n+        \/\/ TODO padding\/border JDK-8341438?\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            if (left < right) {\n+                rv.add(new Rectangle2D(left, top, right - left, bottom - top));\n+            } else {\n+                rv.add(new Rectangle2D(right, top, left - right, bottom - top));\n+            }\n+        });\n+        return rv;\n+    }\n+\n+    private TextLine line(int ix) {\n+        return layout.getLines()[ix];\n+    }\n+\n+    @Override\n+    public CaretInfo caretInfo(int charIndex, boolean leading) {\n+        float[] c = layout.getCaretInf(charIndex, leading);\n+\n+        \/\/ TODO padding\/border JDK-8341438?\n+        double[][] lines;\n+        if (c.length == 3) {\n+            \/\/ {x, ymin, ymax} - corresponds to a single line from (x, ymin) tp (x, ymax)\n+            lines = new double[][] {\n+                new double[] {\n+                    c[0], c[1], c[2]\n+                }\n+            };\n+        } else {\n+            \/\/ {x, y, y2, x2, ymax} - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x,y) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+            double y2 = c[2];\n+            lines = new double[][] {\n+                new double[] {\n+                    c[0], c[1], y2\n+                },\n+                new double[] {\n+                    c[3], y2, c[4]\n+                }\n+            };\n+        }\n+        return new PrismCaretInfo(lines);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismLayoutInfo.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -33,2 +33,0 @@\n-import javafx.scene.shape.LineTo;\n-import javafx.scene.shape.MoveTo;\n@@ -313,2 +311,1 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y) {\n+    public float[] getCaretInf(int offset, boolean isLeading) {\n@@ -385,2 +382,1 @@\n-        lineX += x;\n-        lineY += y;\n+\n@@ -404,7 +400,7 @@\n-                        lineX2 += x;\n-                        PathElement[] result = new PathElement[4];\n-                        result[0] = new MoveTo(lineX, lineY);\n-                        result[1] = new LineTo(lineX, lineY + lineHeight \/ 2);\n-                        result[2] = new MoveTo(lineX2, lineY + lineHeight \/ 2);\n-                        result[3] = new LineTo(lineX2, lineY + lineHeight);\n-                        return result;\n+                        return new float[] {\n+                            lineX,\n+                            lineY,\n+                            lineY + lineHeight \/ 2,\n+                            lineX2,\n+                            lineY + lineHeight\n+                        };\n@@ -415,4 +411,5 @@\n-        PathElement[] result = new PathElement[2];\n-        result[0] = new MoveTo(lineX, lineY);\n-        result[1] = new LineTo(lineX, lineY + lineHeight);\n-        return result;\n+        return new float[] {\n+            lineX,\n+            lineY,\n+            lineY + lineHeight\n+        };\n@@ -481,2 +478,1 @@\n-    public PathElement[] getRange(int start, int end, int type,\n-                                  float x, float y) {\n+    public void getRange(int start, int end, int type, GeometryCallback client) {\n@@ -578,5 +574,1 @@\n-                            result.add(new MoveTo(x + l,  y + top));\n-                            result.add(new LineTo(x + r, y + top));\n-                            result.add(new LineTo(x + r, y + bottom));\n-                            result.add(new LineTo(x + l,  y + bottom));\n-                            result.add(new LineTo(x + l,  y + top));\n+                            client.addRectangle(l, top, r, bottom);\n@@ -595,5 +587,1 @@\n-                        result.add(new MoveTo(x + l,  y + top));\n-                        result.add(new LineTo(x + r, y + top));\n-                        result.add(new LineTo(x + r, y + bottom));\n-                        result.add(new LineTo(x + l,  y + bottom));\n-                        result.add(new LineTo(x + l,  y + top));\n+                        client.addRectangle(l, top, r, bottom);\n@@ -607,1 +595,0 @@\n-        return result.toArray(new PathElement[result.size()]);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import java.util.ArrayList;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.TextLineInfo;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+\n+\/**\n+ * Text-related Utilities.\n+ *\/\n+public final class TextUtils {\n+    \/**\n+     * Queries the range geometry of the range of text within the text layout as\n+     * an array of {@code PathElement}s, for for one of the three possible types:\n+     * <ul>\n+     * <li>{@link #TYPE_STRIKETHROUGH} - strike-through shape\n+     * <li>{@link #TYPE_TEXT} - text selection shape\n+     * <li>{@link #TYPE_UNDERLINE} - underline shape\n+     * <\/ul>\n+     *\n+     * @param layout the text layout\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @param type the type of geometry to query\n+     * @param dx the x offset to add to each path element\n+     * @param dy the y offset to add to each path element\n+     * @return the array of {@code PathElement}s\n+     *\/\n+    public static PathElement[] getRange(TextLayout layout, int start, int end, int type, double dx, double dy) {\n+        ArrayList<PathElement> a = new ArrayList<>();\n+        layout.getRange(start, end, type, (left, top, right, bottom) -> {\n+            left += dx;\n+            right += dx;\n+            top += dy;\n+            bottom += dy;\n+            a.add(new MoveTo(left, top));\n+            a.add(new LineTo(right, top));\n+            a.add(new LineTo(right, bottom));\n+            a.add(new LineTo(left, bottom));\n+            a.add(new LineTo(left, top));\n+        });\n+        return a.toArray(PathElement[]::new);\n+    }\n+\n+    public static TextLineInfo toLineInfo(TextLine line) {\n+        int start = line.getStart();\n+        int end = line.getStart() + line.getLength();\n+        Rectangle2D bounds = toRectangle2D(line.getBounds());\n+        return new TextLineInfo(start, end, bounds);\n+    }\n+\n+    public static Rectangle2D toRectangle2D(BaseBounds b) {\n+        return new Rectangle2D(b.getMinX(), b.getMinY(), b.getWidth(), b.getHeight());\n+    }\n+\n+    public static PathElement[] getCaretShape(float[] c, double dx, double dy) {\n+        if (c == null) {\n+            return null;\n+        } else if (c.length == 3) {\n+            \/\/ [x, ymin, ymax] - corresponds to a single line from (x, ymin) tp (x, ymax)\n+            double x = c[0] + dx;\n+            double ymin = c[1] + dy;\n+            double ymax = c[2] + dy;\n+\n+            return new PathElement[] {\n+                new MoveTo(x, ymin),\n+                new LineTo(x, ymax)\n+            };\n+        } else {\n+            \/\/ [x, ymin, y2, x2, ymax] - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x,ymin) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+            double x = c[0];\n+            double ymin = c[1];\n+            double y2 = c[2];\n+            double x2 = c[3];\n+            double ymax = c[4];\n+\n+            return new PathElement[] {\n+                new MoveTo(x, ymin),\n+                new LineTo(x, y2),\n+                new MoveTo(x2, y2),\n+                new LineTo(x2, ymax)\n+            };\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextUtils.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import com.sun.javafx.text.PrismCaretInfo;\n+\n+\/**\n+ * Provides the information associated with the caret.\n+ *\n+ * @since 24\n+ *\/\n+public sealed abstract class CaretInfo permits PrismCaretInfo {\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected CaretInfo() {\n+    }\n+\n+    \/**\n+     * Returns the number of lines representing the caret.\n+     *\n+     * @return the number of parts representing the caret\n+     *\/\n+    public abstract int getLineCount();\n+\n+    \/**\n+     * Returns the geometry of the line at the specified index.\n+     * <p>\n+     * The geometry is encoded in an array of [x, ymin, ymax] values which\n+     * represent a line drawn from (x, ymin) to (x, ymax).\n+     *\n+     * @param index the line index\n+     * @return the array of [x, ymin, ymax] values\n+     *\/\n+    public abstract double[] getLineAt(int index);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/CaretInfo.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import java.util.List;\n+import javafx.geometry.Rectangle2D;\n+\n+\/**\n+ * Provides a view into the text layout used in a {@code Text} or a {@code TextFlow} node,\n+ * with purpose of querying the details of the layout such as break up of the text into lines,\n+ * as well as geometry of other shapes derived from the layout (selection, underline, etc.).\n+ * <p>\n+ * The information obtained via this object may change after the next layout cycle, which may come as a result\n+ * of actions such as resizing of the container, or modification of certain properties.\n+ * For example updating the text or the font might change the layout, but a change of color would not.\n+ *\n+ * @since 24\n+ *\/\n+public sealed abstract class LayoutInfo permits com.sun.javafx.text.PrismLayoutInfo {\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected LayoutInfo() {\n+    }\n+\n+    \/**\n+     * Returns the logical bounds of the layout:\n+     * <ul>\n+     * <li>{@code minX} is always zero\n+     * <li>{@code minY} is the ascent of the first line (negative)\n+     * <li>{@code width} the width of the widest line\n+     * <li>{@code height} the sum of all lines height\n+     * <\/ul>\n+     *\n+     * @return the layout bounds\n+     *\/\n+    public abstract Rectangle2D getBounds();\n+\n+    \/**\n+     * Returns the number of text lines in the layout.\n+     * @return the number of text lines\n+     *\/\n+    public abstract int getTextLineCount();\n+\n+    \/**\n+     * Returns the list of text lines in the layout.\n+     *\n+     * @return the list of {@code TextLineInfo} objects\n+     *\/\n+    public abstract List<TextLineInfo> getTextLines();\n+\n+    \/**\n+     * Returns the {@code TextLineInfo} object which contains information about\n+     * the text line at index {@code index}.\n+     *\n+     * @param index the line index\n+     * @return the {@code TextLineInfo} object\n+     *\/\n+    public abstract TextLineInfo getTextLine(int index);\n+\n+    \/**\n+     * Returns the geometry of the text selection, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> selectionShape(int start, int end);\n+\n+    \/**\n+     * Returns the geometry of the strike-through shape, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> strikeThroughShape(int start, int end);\n+\n+    \/**\n+     * Returns the geometry of the underline shape, as an array of {@code Rectangle2D} objects,\n+     * for the given start and end offsets.\n+     *\n+     * @param start the start offset\n+     * @param end the end offset\n+     * @return the array of {@code Rectangle2D} objects\n+     *\/\n+    public abstract List<Rectangle2D> underlineShape(int start, int end);\n+\n+    \/**\n+     * Returns the information related to the caret at the specified character index and the character bias.\n+     *\n+     * @param charIndex the character index\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the {@code CaretInfo} object\n+     *\/\n+    public abstract CaretInfo caretInfo(int charIndex, boolean leading);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/LayoutInfo.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.javafx.text.PrismLayoutInfo;\n@@ -50,0 +51,1 @@\n+import com.sun.javafx.text.TextUtils;\n@@ -1057,3 +1059,3 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return layout.getRange(start, end, type, x, y);\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            return TextUtils.getRange(layout, start, end, type, dx, dy);\n@@ -1074,3 +1076,5 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return getTextLayout().getCaretShape(charIndex, caretBias, x, y);\n+            \/\/ TODO padding JDK-8341438?\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            float[] c = getTextLayout().getCaretInf(charIndex, caretBias);\n+            return TextUtils.getCaretShape(c, dx, dy);\n@@ -1106,0 +1110,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 24\n+     *\/\n+    public final PathElement[] strikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -1838,2 +1854,6 @@\n-                    {bind(caretPositionProperty(), caretBiasProperty());}\n-                    @Override protected PathElement[] computeValue() {\n+                    {\n+                        bind(caretPositionProperty(), caretBiasProperty());\n+                    }\n+\n+                    @Override\n+                    protected PathElement[] computeValue() {\n@@ -1841,7 +1861,3 @@\n-                        int length = getTextInternal().length();\n-                        if (0 <= pos && pos <= length) {\n-                            boolean bias = isCaretBias();\n-                            float x = (float)getX();\n-                            float y = (float)getY() - getYRendering();\n-                            TextLayout layout = getTextLayout();\n-                            return layout.getCaretShape(pos, bias, x, y);\n+                        PathElement[] pe = caretShape(pos, isCaretBias());\n+                        if (pe == null) {\n+                            return EMPTY_PATH_ELEMENT_ARRAY;\n@@ -1849,1 +1865,1 @@\n-                        return EMPTY_PATH_ELEMENT_ARRAY;\n+                        return pe;\n@@ -2068,0 +2084,19 @@\n+\n+    \/**\n+     * Returns the object which provides a view into the text layout for this node, which allows for querying\n+     * the details of the layout.\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n+     * <p>\n+     * The information obtained after the next layout cycle might be different as a result\n+     * of actions such as resizing of the container, or modification of certain properties.\n+     * For example updating the text or the font might change the layout, but a change of color would not.\n+     *\n+     * @return the layout information\n+     * @since 24\n+     *\/\n+    public final LayoutInfo getLayoutInfo() {\n+        return new PrismLayoutInfo(getTextLayout());\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":51,"deletions":16,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.beans.property.IntegerProperty;\n@@ -33,0 +34,8 @@\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableDoubleProperty;\n+import javafx.css.StyleableIntegerProperty;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.css.converter.EnumConverter;\n+import javafx.css.converter.SizeConverter;\n@@ -43,5 +52,0 @@\n-import javafx.css.StyleableDoubleProperty;\n-import javafx.css.StyleableObjectProperty;\n-import javafx.css.CssMetaData;\n-import javafx.css.converter.EnumConverter;\n-import javafx.css.converter.SizeConverter;\n@@ -55,0 +59,2 @@\n+import com.sun.javafx.text.PrismLayoutInfo;\n+import com.sun.javafx.text.TextUtils;\n@@ -56,4 +62,0 @@\n-import javafx.beans.property.IntegerProperty;\n-import javafx.css.Styleable;\n-import javafx.css.StyleableIntegerProperty;\n-import javafx.css.StyleableProperty;\n@@ -218,1 +220,3 @@\n-        return getTextLayout().getCaretShape(charIndex, leading, 0, 0);\n+        float[] c = getTextLayout().getCaretInf(charIndex, leading);\n+        \/\/ TODO padding JDK-8341438?\n+        return TextUtils.getCaretShape(c, 0.0, 0.0);\n@@ -245,0 +249,12 @@\n+    \/**\n+     * Returns the shape for the strike-through in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 24\n+     *\/\n+    public final PathElement[] strikeThroughShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_STRIKETHROUGH);\n+    }\n+\n@@ -367,1 +383,1 @@\n-        return layout.getRange(start, end, type, 0, 0);\n+        return TextUtils.getRange(layout, start, end, type, 0, 0);\n@@ -690,0 +706,19 @@\n+\n+    \/**\n+     * Returns the object which provides a view into the text layout for this node, which allows for querying\n+     * the details of the layout.\n+     * <p>\n+     * While there is no general guarantee that successive invocations of this method return the same instance,\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n+     * <p>\n+     * The information obtained after the next layout cycle might be different as a result\n+     * of actions such as resizing of the container, or modification of certain properties.\n+     * For example updating the text or the font might change the layout, but a change of color would not.\n+     *\n+     * @return the layout information\n+     * @since 24\n+     *\/\n+    public final LayoutInfo getLayoutInfo() {\n+        return new PrismLayoutInfo(getTextLayout());\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import javafx.geometry.Rectangle2D;\n+\n+\/**\n+ * Provides the information about a text line in a text layout.\n+ *\n+ * @param start the start offset for the line\n+ * @param end the end offset for the line (index of the last character + 1)\n+ * @param bounds the bounds of the text line, in local coordinates:\n+ * <ul>\n+ * <li>\n+ * {@code minX} - the x origin of the line (relative to the layout).\n+ * The x origin is defined by TextAlignment of the text layout, always zero\n+ * for left-aligned text.\n+ * <li>\n+ * {@code minY} - the ascent of the line (negative).\n+ * The ascent of the line is the max ascent of all fonts in the line.\n+ * <li>\n+ * {@code width} - the width of the line.\n+ * The width for the line is sum of all the run widths in the line, it is not\n+ * affect by the wrapping width but it will include any changes caused by\n+ * justification.\n+ * <li>\n+ * {@code height} - the height of the line.\n+ * The height of the line is sum of the max ascent, max descent, and\n+ * max line gap of all the fonts in the line.\n+ * <\/ul>\n+ *\n+ * @since 24\n+ *\/\n+public record TextLineInfo(int start, int end, Rectangle2D bounds) {\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextLineInfo.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.scene.text.Font;\n@@ -32,3 +33,4 @@\n-import com.sun.javafx.scene.text.*;\n-import javafx.scene.shape.PathElement;\n-import javafx.scene.text.Font;\n+import com.sun.javafx.scene.text.GlyphList;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.scene.text.TextLine;\n+import com.sun.javafx.scene.text.TextSpan;\n@@ -80,1 +82,0 @@\n-\n@@ -207,3 +208,3 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading, float x,\n-            float y) {\n-        return new PathElement[0];\n+    public float[] getCaretInf(int offset, boolean isLeading) {\n+        \/\/ FIX this can be implemented if needed, following the logic used in getBounds() and getHitInfo()\n+        return null;\n@@ -213,2 +214,2 @@\n-    public PathElement[] getRange(int start, int end, int type, float x, float y) {\n-        return new PathElement[0];\n+    public void getRange(int start, int end, int type, GeometryCallback client) {\n+        \/\/ FIX this can be implemented if needed, following the logic used in getBounds() and getHitInfo()\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}