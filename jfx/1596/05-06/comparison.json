{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import javafx.scene.shape.PathElement;\n@@ -241,2 +240,17 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y);\n+    \/**\n+     * Queries the caret geometry and associated information at the specified text position.\n+     * <p>\n+     * The geometry is encoded as a sequence of coordinates using two different formats,\n+     * depending on whether the caret is drawn as a single vertical line or as two separate\n+     * lines (a \"split\" caret).\n+     * <ul>\n+     * <li>{@code x, ymin, ymax} - corresponds to a single line from (x, ymin) tp (x, ymax)\n+     * <li>{@code x, ymin, y2, x2, ymax} - corresponds to a split caret drawn as two lines, the first line\n+     * drawn from (x,ymin) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+     * <\/ul>\n+     *\n+     * @param offset the character offset\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the caret geometry\n+     *\/\n+    public float[] getCaretInf(int offset, boolean leading);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.text;\n+\n+import javafx.scene.text.CaretInfo;\n+\n+\/**\n+ * CaretInfo as reported by the PrismTextLayout.\n+ *\/\n+public final class PrismCaretInfo extends CaretInfo {\n+    private final double[][] lines;\n+\n+    public PrismCaretInfo(double[][] lines) {\n+        this.lines = lines;\n+    }\n+\n+    @Override\n+    public int getLineCount() {\n+        return lines.length;\n+    }\n+\n+    @Override\n+    public double[] getLineAt(int index) {\n+        return lines[index];\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismCaretInfo.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.text.CaretInfo;\n@@ -86,1 +87,0 @@\n-    \/\/ TODO padding?\n@@ -89,0 +89,1 @@\n+        \/\/ TODO padding\/border JDK-8341438?\n@@ -102,0 +103,29 @@\n+\n+    @Override\n+    public CaretInfo caretInfo(int charIndex, boolean leading) {\n+        float[] c = layout.getCaretInf(charIndex, leading);\n+\n+        \/\/ TODO padding\/border JDK-8341438?\n+        double[][] lines;\n+        if (c.length == 3) {\n+            \/\/ {x, ymin, ymax} - corresponds to a single line from (x, ymin) tp (x, ymax)\n+            lines = new double[][] {\n+                new double[] {\n+                    c[0], c[1], c[2]\n+                }\n+            };\n+        } else {\n+            \/\/ {x, y, y2, x2, ymax} - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x,y) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+            double y2 = c[2];\n+            lines = new double[][] {\n+                new double[] {\n+                    c[0], c[1], y2\n+                },\n+                new double[] {\n+                    c[3], y2, c[4]\n+                }\n+            };\n+        }\n+        return new PrismCaretInfo(lines);\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismLayoutInfo.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import javafx.scene.shape.LineTo;\n-import javafx.scene.shape.MoveTo;\n@@ -313,2 +311,1 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading,\n-                                       float x, float y) {\n+    public float[] getCaretInf(int offset, boolean isLeading) {\n@@ -385,2 +382,1 @@\n-        lineX += x;\n-        lineY += y;\n+\n@@ -404,7 +400,7 @@\n-                        lineX2 += x;\n-                        PathElement[] result = new PathElement[4];\n-                        result[0] = new MoveTo(lineX, lineY);\n-                        result[1] = new LineTo(lineX, lineY + lineHeight \/ 2);\n-                        result[2] = new MoveTo(lineX2, lineY + lineHeight \/ 2);\n-                        result[3] = new LineTo(lineX2, lineY + lineHeight);\n-                        return result;\n+                        return new float[] {\n+                            lineX,\n+                            lineY,\n+                            lineY + lineHeight \/ 2,\n+                            lineX2,\n+                            lineY + lineHeight\n+                        };\n@@ -415,4 +411,5 @@\n-        PathElement[] result = new PathElement[2];\n-        result[0] = new MoveTo(lineX, lineY);\n-        result[1] = new LineTo(lineX, lineY + lineHeight);\n-        return result;\n+        return new float[] {\n+            lineX,\n+            lineY,\n+            lineY + lineHeight\n+        };\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -84,0 +84,31 @@\n+\n+    public static PathElement[] getCaretShape(float[] c, double dx, double dy) {\n+        if (c == null) {\n+            return null;\n+        } else if (c.length == 3) {\n+            \/\/ [x, ymin, ymax] - corresponds to a single line from (x, ymin) tp (x, ymax)\n+            double x = c[0] + dx;\n+            double ymin = c[1] + dy;\n+            double ymax = c[2] + dy;\n+\n+            return new PathElement[] {\n+                new MoveTo(x, ymin),\n+                new LineTo(x, ymax)\n+            };\n+        } else {\n+            \/\/ [x, ymin, y2, x2, ymax] - corresponds to a split caret drawn as two lines, the first line\n+            \/\/ drawn from (x,ymin) to (x, y2), the second line drawn from (x2, y2) to (x2, ymax).\n+            double x = c[0];\n+            double ymin = c[1];\n+            double y2 = c[2];\n+            double x2 = c[3];\n+            double ymax = c[4];\n+\n+            return new PathElement[] {\n+                new MoveTo(x, ymin),\n+                new LineTo(x, y2),\n+                new MoveTo(x2, y2),\n+                new LineTo(x2, ymax)\n+            };\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextUtils.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+import com.sun.javafx.text.PrismCaretInfo;\n+\n+\/**\n+ * Provides the information associated with the caret.\n+ *\n+ * @since 24\n+ *\/\n+public sealed abstract class CaretInfo permits PrismCaretInfo {\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected CaretInfo() {\n+    }\n+\n+    \/**\n+     * Returns the number of lines representing the caret.\n+     *\n+     * @return the number of parts representing the caret\n+     *\/\n+    public abstract int getLineCount();\n+\n+    \/**\n+     * Returns the geometry of the line at the specified index.\n+     * <p>\n+     * The geometry is encoded in an array of [x, ymin, ymax] values which\n+     * represent a line drawn from (x, ymin) to (x, ymax).\n+     *\n+     * @param index the line index\n+     * @return the array of [x, ymin, ymax] values\n+     *\/\n+    public abstract double[] getLineAt(int index);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/CaretInfo.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -112,0 +112,9 @@\n+\n+    \/**\n+     * Returns the information related to the caret at the specified character index and the character bias.\n+     *\n+     * @param charIndex the character index\n+     * @param leading whether the caret is biased on the leading edge of the character\n+     * @return the {@code CaretInfo} object\n+     *\/\n+    public abstract CaretInfo caretInfo(int charIndex, boolean leading);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/LayoutInfo.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1076,3 +1076,5 @@\n-            float x = (float)getX();\n-            float y = (float)getY() - getYRendering();\n-            return getTextLayout().getCaretShape(charIndex, caretBias, x, y);\n+            \/\/ TODO padding JDK-8341438?\n+            double dx = getX();\n+            double dy = getY() - getYRendering();\n+            float[] c = getTextLayout().getCaretInf(charIndex, caretBias);\n+            return TextUtils.getCaretShape(c, dx, dy);\n@@ -1852,2 +1854,6 @@\n-                    {bind(caretPositionProperty(), caretBiasProperty());}\n-                    @Override protected PathElement[] computeValue() {\n+                    {\n+                        bind(caretPositionProperty(), caretBiasProperty());\n+                    }\n+\n+                    @Override\n+                    protected PathElement[] computeValue() {\n@@ -1855,7 +1861,3 @@\n-                        int length = getTextInternal().length();\n-                        if (0 <= pos && pos <= length) {\n-                            boolean bias = isCaretBias();\n-                            float x = (float)getX();\n-                            float y = (float)getY() - getYRendering();\n-                            TextLayout layout = getTextLayout();\n-                            return layout.getCaretShape(pos, bias, x, y);\n+                        PathElement[] pe = caretShape(pos, isCaretBias());\n+                        if (pe == null) {\n+                            return EMPTY_PATH_ELEMENT_ARRAY;\n@@ -1863,1 +1865,1 @@\n-                        return EMPTY_PATH_ELEMENT_ARRAY;\n+                        return pe;\n@@ -2088,2 +2090,2 @@\n-     * it is safe to cache this object, as the information obtained from it remains valid until the next\n-     * layout cycle.\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -220,1 +220,3 @@\n-        return getTextLayout().getCaretShape(charIndex, leading, 0, 0);\n+        float[] c = getTextLayout().getCaretInf(charIndex, leading);\n+        \/\/ TODO padding JDK-8341438?\n+        return TextUtils.getCaretShape(c, 0.0, 0.0);\n@@ -710,2 +712,2 @@\n-     * it is safe to cache this object, as the information obtained from it remains valid until the next\n-     * layout cycle.\n+     * it is safe to either cache this object or call this method each time, since the information obtained from\n+     * this lightweight object remains valid until the next layout cycle.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ *\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextLineInfo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import javafx.scene.shape.PathElement;\n@@ -83,1 +82,0 @@\n-\n@@ -210,3 +208,3 @@\n-    public PathElement[] getCaretShape(int offset, boolean isLeading, float x,\n-            float y) {\n-        return new PathElement[0];\n+    public float[] getCaretInf(int offset, boolean isLeading) {\n+        \/\/ FIX this can be implemented if needed, following the logic used in getBounds() and getHitInfo()\n+        return null;\n@@ -217,1 +215,1 @@\n-        \/\/ FIX this can be implemented later, following the logic used in getBounds() and getHitInfo()\n+        \/\/ FIX this can be implemented if needed, following the logic used in getBounds() and getHitInfo()\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}