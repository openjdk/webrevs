{"files":[{"patch":"@@ -32,1 +32,1 @@\n-- (void)draggingEnded;\n+- (void)draggingEnded:(NSDragOperation)operation;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDragSource.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#import \"GlassDragSource.h\"\n@@ -33,1 +34,1 @@\n-\n+    id<GlassDragSourceDelegate> dragDelegate;\n@@ -36,1 +37,1 @@\n-- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation;\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation delegate:(id<GlassDragSourceDelegate>)delegate;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation delegate:(id<GlassDragSourceDelegate>)delegate\n@@ -59,0 +59,2 @@\n+    \/\/ The delegate retains this object\n+    dragDelegate = delegate;\n@@ -72,0 +74,2 @@\n+    LOG(\"Dragging session ended\");\n+    [dragDelegate draggingEnded: operation];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.m","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -587,1 +587,0 @@\n-    [self->_delegate draggingEnded];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1084,1 +1084,1 @@\n-    self->draggingSource = [[GlassDraggingSource alloc] initWithOperation:operation];\n+    self->draggingSource = [[GlassDraggingSource alloc] initWithOperation:operation delegate:self];\n@@ -1105,1 +1105,1 @@\n-- (void)draggingEnded\n+- (void)draggingEnded:(NSDragOperation)operation\n@@ -1117,0 +1117,15 @@\n+    \/\/ At the end of dragging we're handed a single definitive\n+    \/\/ drag operation (no Generic or Any).\n+    jint mask = com_sun_glass_ui_Clipboard_ACTION_NONE;\n+    if (operation == NSDragOperationNone) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_NONE;\n+    } else if (operation == NSDragOperationCopy) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_COPY;\n+    } else if (operation == NSDragOperationMove) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_MOVE;\n+    } else if (operation == NSDragOperationLink) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_REFERENCE;\n+    } else {\n+        DNDLOG(\"Invalid drag operation\");\n+    }\n+\n@@ -1118,1 +1133,1 @@\n-    (*env)->CallVoidMethod(env, self->jView, jViewNotifyDragEnd,  [GlassDragSource getMask]);\n+    (*env)->CallVoidMethod(env, self->jView, jViewNotifyDragEnd, mask);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.UUID;\n+import java.util.Set;\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.Group;\n+import javafx.scene.control.Label;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+\n+public class DndBasic extends Application {\n+\n+\tArrayList<Text> sourceResults = new ArrayList<Text>();\n+\tArrayList<Text> targetResults = new ArrayList<Text>();\n+\tRectangle lastDropTarget = null;\n+\n+\t@Override\n+\tpublic void start(Stage primaryStage) throws Exception {\n+\n+\t\tTransferMode[] copyOnly = new TransferMode[]{TransferMode.COPY};\n+\t\tTransferMode[] moveOnly = new TransferMode[]{TransferMode.MOVE};\n+\t\tTransferMode[] linkOnly = new TransferMode[]{TransferMode.LINK};\n+\n+\t\tLabel sourcesLabel = new Label(\"Sources\");\n+    \tGroup sourceAll = createSource(TransferMode.ANY);\n+\t\tGroup sourceCopyMove = createSource(TransferMode.COPY_OR_MOVE);\n+\t\tGroup sourceCopyOnly = createSource(copyOnly);\n+\t\tGroup sourceMoveOnly = createSource(moveOnly);\n+\t\tGroup sourceLinkOnly = createSource(linkOnly);\n+\n+\t\tVBox sources = new VBox(sourcesLabel,\n+\t\t\tsourceAll, sourceCopyMove, sourceCopyOnly,\n+\t\t\tsourceMoveOnly, sourceLinkOnly);\n+\t\tsources.setSpacing(10);\n+\n+\t\tLabel targetLabel = new Label(\"Destinations\");\n+\t\tGroup targetAll = createTarget(TransferMode.ANY);\n+\t\tGroup targetCopyMove = createTarget(TransferMode.COPY_OR_MOVE);\n+\t\tGroup targetCopyOnly = createTarget(copyOnly);\n+\t\tGroup targetMoveOnly = createTarget(moveOnly);\n+\t\tGroup targetLinkOnly = createTarget(linkOnly);\n+\n+\t\tVBox targets = new VBox(targetLabel,\n+\t\t\ttargetAll, targetCopyMove, targetCopyOnly,\n+\t\t\ttargetMoveOnly, targetLinkOnly);\n+\t\ttargets.setSpacing(10);\n+\n+\t\tHBox columns = new HBox(sources, targets);\n+\t\tcolumns.setSpacing(10);\n+\n+\t\tLabel instructions = new Label(\"Drag from a source to a destination (the desktop can be either)\");\n+\t\tVBox withInstructions = new VBox(instructions, columns);\n+\t\twithInstructions.setSpacing(20);\n+\t\twithInstructions.setPadding(new Insets(10, 10, 10, 10));\n+\t\tScene s = new Scene(withInstructions);\n+\t\tprimaryStage.setScene(s);\n+\t\tprimaryStage.show();\n+\t}\n+\n+\tprivate Text modesToText(String l, TransferMode[] modes) {\n+\t\tString label = \"\";\n+\t\tfor (TransferMode c : modes) {\n+\t\t\tif (label != \"\") {\n+\t\t\t\tlabel = label + \" \";\n+\t\t\t}\n+\t\t\tlabel += c;\n+\t\t}\n+\t\tText text = new Text(label);\n+\t\treturn text;\n+\t}\n+\n+\tprivate String modesToString(Set<TransferMode> modes) {\n+\t\tString label = \"\";\n+\t\tif (modes.contains(TransferMode.COPY)) {\n+\t\t\tlabel += \" \" + TransferMode.COPY;\n+\t\t}\n+\t\tif (modes.contains(TransferMode.MOVE)) {\n+\t\t\tlabel += \" \" + TransferMode.MOVE;\n+\t\t}\n+\t\tif (modes.contains(TransferMode.LINK)) {\n+\t\t\tlabel += \" \" + TransferMode.LINK;\n+\t\t}\n+\t\treturn label;\n+\t}\n+\n+\tprivate void clearSourceResults() {\n+\t\tfor (Text t : sourceResults) {\n+\t        t.setText(\"\");\n+\t    }\n+\t}\n+\n+\tprivate void clearTargetResults() {\n+\t\tfor (Text t : targetResults) {\n+\t\t\tt.setText(\"\");\n+\t\t}\n+\t}\n+\n+\tprivate Group createSource(TransferMode[] modes) {\n+\t\tText title = modesToText(\"Source\", modes);\n+\t\tText result = new Text(\"\");\n+\t\ttitle.setMouseTransparent(true);\n+\t\tresult.setMouseTransparent(true);\n+\t\tsourceResults.add(result);\n+\n+\t\tVBox labels = new VBox(title, result);\n+        labels.setMouseTransparent(true);\n+        labels.setSpacing(3);\n+\t\tlabels.setPadding(new Insets(5, 5, 5, 5));\n+\n+\t\tRectangle source = new Rectangle(300, 75);\n+\t\tsource.setOnDragDetected( evt -> {\n+\t\t\tDragboard dragboard = source.startDragAndDrop(modes);\n+\t\t\tClipboardContent content = new ClipboardContent();\n+\t        content.putString(UUID.randomUUID().toString());\n+\t        dragboard.setContent(content);\n+\t        evt.consume();\n+\t        clearSourceResults();\n+\t        clearTargetResults();\n+\t\t\tresult.setText(\"Dragging\");\n+\t\t});\n+\t\tsource.setOnDragDone( evt -> {\n+\t\t\tString message = \"Drag done, \";\n+\t\t\tmessage = message + (evt.isAccepted() ? \"accepted\" : \"rejected\");\n+\t\t\tif (evt.getTransferMode() != null) {\n+\t\t\t    message = message + \" \" + evt.getTransferMode();\n+\t\t\t}\n+\t\t    result.setText(message);\n+\t\t\tevt.consume();\n+\t\t});\n+\t\tsource.setFill(Color.LIGHTGREEN);\n+\n+\t\treturn new Group(source, labels);\n+\t}\n+\n+\tprivate Group createTarget(TransferMode[] modes)\n+\t{\n+\t\tText title = modesToText(\"Destination\", modes);\n+\t\tText available = new Text(\"\");\n+\t\tText result = new Text(\"\");\n+\t\ttargetResults.add(result);\n+\t\ttitle.setMouseTransparent(true);\n+        available.setMouseTransparent(true);\n+        result.setMouseTransparent(true);\n+\n+        VBox labels = new VBox(title, available, result);\n+        labels.setMouseTransparent(true);\n+        labels.setSpacing(3);\n+\t\tlabels.setPadding(new Insets(5, 5, 5, 5));\n+\n+\t\tRectangle target = new Rectangle(300, 75);\n+\t\ttarget.setOnDragOver(evt -> {\n+\t\t\tevt.acceptTransferModes(modes);\n+\t\t\tclearTargetResults();\n+\t\t\tif (evt.getGestureSource() == null) {\n+\t\t\t\tclearSourceResults();\n+\t\t\t}\n+\t\t\tif (evt.getTransferMode() != null) {\n+\t\t\t\tresult.setText(\"Proposed \" + evt.getTransferMode());\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tresult.setText(\"\");\n+\t\t\t}\n+\t\t\t\/\/ Note: we always show the source modes to illustrate how the Mac filters the\n+\t\t\t\/\/ available modes based on the modifier key states.\n+\t\t\tavailable.setText(\"Source\" + modesToString(evt.getDragboard().getTransferModes()));\n+\t\t\tevt.consume();\n+\t\t});\n+\t\ttarget.setOnDragDropped(evt -> {\n+\t\t\tlastDropTarget = target;\n+\t\t\tString text = \"Dropped here\";\n+\t\t\tif (evt.getTransferMode() != null) {\n+\t\t\t\ttext += \", proposed \" + evt.getTransferMode();\n+\t\t\t}\n+\t\t\tresult.setText(text);\n+\t\t\tevt.setDropCompleted(true);\n+\t\t\tevt.consume();\n+\t\t});\n+\t\ttarget.setOnDragExited(evt -> {\n+\t\t\tavailable.setText(\"\");\n+\t\t\tif (target != lastDropTarget) {\n+\t\t\t    result.setText(\"\");\n+\t\t\t}\n+\t\t\tevt.consume();\n+\t\t});\n+\t\ttarget.setFill(Color.LIGHTBLUE);\n+\n+\t\treturn new Group(target, labels);\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\tlaunch(DndBasic.class, args);\n+\t}\n+}\n","filename":"tests\/manual\/dnd\/DndBasic.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"}]}