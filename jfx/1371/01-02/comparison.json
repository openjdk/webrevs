{"files":[{"patch":"@@ -46,93 +46,93 @@\n-\tArrayList<Text> sourceResults = new ArrayList<Text>();\n-\tArrayList<Text> targetResults = new ArrayList<Text>();\n-\tRectangle lastDropTarget = null;\n-\n-\t@Override\n-\tpublic void start(Stage primaryStage) throws Exception {\n-\n-\t\tTransferMode[] copyOnly = new TransferMode[]{TransferMode.COPY};\n-\t\tTransferMode[] moveOnly = new TransferMode[]{TransferMode.MOVE};\n-\t\tTransferMode[] linkOnly = new TransferMode[]{TransferMode.LINK};\n-\n-\t\tLabel sourcesLabel = new Label(\"Sources\");\n-    \tGroup sourceAll = createSource(TransferMode.ANY);\n-\t\tGroup sourceCopyMove = createSource(TransferMode.COPY_OR_MOVE);\n-\t\tGroup sourceCopyOnly = createSource(copyOnly);\n-\t\tGroup sourceMoveOnly = createSource(moveOnly);\n-\t\tGroup sourceLinkOnly = createSource(linkOnly);\n-\n-\t\tVBox sources = new VBox(sourcesLabel,\n-\t\t\tsourceAll, sourceCopyMove, sourceCopyOnly,\n-\t\t\tsourceMoveOnly, sourceLinkOnly);\n-\t\tsources.setSpacing(10);\n-\n-\t\tLabel targetLabel = new Label(\"Destinations\");\n-\t\tGroup targetAll = createTarget(TransferMode.ANY);\n-\t\tGroup targetCopyMove = createTarget(TransferMode.COPY_OR_MOVE);\n-\t\tGroup targetCopyOnly = createTarget(copyOnly);\n-\t\tGroup targetMoveOnly = createTarget(moveOnly);\n-\t\tGroup targetLinkOnly = createTarget(linkOnly);\n-\n-\t\tVBox targets = new VBox(targetLabel,\n-\t\t\ttargetAll, targetCopyMove, targetCopyOnly,\n-\t\t\ttargetMoveOnly, targetLinkOnly);\n-\t\ttargets.setSpacing(10);\n-\n-\t\tHBox columns = new HBox(sources, targets);\n-\t\tcolumns.setSpacing(10);\n-\n-\t\tLabel instructions = new Label(\"Drag from a source to a destination (the desktop can be either)\");\n-\t\tVBox withInstructions = new VBox(instructions, columns);\n-\t\twithInstructions.setSpacing(20);\n-\t\twithInstructions.setPadding(new Insets(10, 10, 10, 10));\n-\t\tScene s = new Scene(withInstructions);\n-\t\tprimaryStage.setScene(s);\n-\t\tprimaryStage.show();\n-\t}\n-\n-\tprivate Text modesToText(String l, TransferMode[] modes) {\n-\t\tString label = \"\";\n-\t\tfor (TransferMode c : modes) {\n-\t\t\tif (label != \"\") {\n-\t\t\t\tlabel = label + \" \";\n-\t\t\t}\n-\t\t\tlabel += c;\n-\t\t}\n-\t\tText text = new Text(label);\n-\t\treturn text;\n-\t}\n-\n-\tprivate String modesToString(Set<TransferMode> modes) {\n-\t\tString label = \"\";\n-\t\tif (modes.contains(TransferMode.COPY)) {\n-\t\t\tlabel += \" \" + TransferMode.COPY;\n-\t\t}\n-\t\tif (modes.contains(TransferMode.MOVE)) {\n-\t\t\tlabel += \" \" + TransferMode.MOVE;\n-\t\t}\n-\t\tif (modes.contains(TransferMode.LINK)) {\n-\t\t\tlabel += \" \" + TransferMode.LINK;\n-\t\t}\n-\t\treturn label;\n-\t}\n-\n-\tprivate void clearSourceResults() {\n-\t\tfor (Text t : sourceResults) {\n-\t        t.setText(\"\");\n-\t    }\n-\t}\n-\n-\tprivate void clearTargetResults() {\n-\t\tfor (Text t : targetResults) {\n-\t\t\tt.setText(\"\");\n-\t\t}\n-\t}\n-\n-\tprivate Group createSource(TransferMode[] modes) {\n-\t\tText title = modesToText(\"Source\", modes);\n-\t\tText result = new Text(\"\");\n-\t\ttitle.setMouseTransparent(true);\n-\t\tresult.setMouseTransparent(true);\n-\t\tsourceResults.add(result);\n-\n-\t\tVBox labels = new VBox(title, result);\n+    ArrayList<Text> sourceResults = new ArrayList<Text>();\n+    ArrayList<Text> targetResults = new ArrayList<Text>();\n+    Rectangle lastDropTarget = null;\n+\n+    @Override\n+    public void start(Stage primaryStage) throws Exception {\n+\n+        TransferMode[] copyOnly = new TransferMode[]{TransferMode.COPY};\n+        TransferMode[] moveOnly = new TransferMode[]{TransferMode.MOVE};\n+        TransferMode[] linkOnly = new TransferMode[]{TransferMode.LINK};\n+\n+        Label sourcesLabel = new Label(\"Sources\");\n+        Group sourceAll = createSource(TransferMode.ANY);\n+        Group sourceCopyMove = createSource(TransferMode.COPY_OR_MOVE);\n+        Group sourceCopyOnly = createSource(copyOnly);\n+        Group sourceMoveOnly = createSource(moveOnly);\n+        Group sourceLinkOnly = createSource(linkOnly);\n+\n+        VBox sources = new VBox(sourcesLabel,\n+            sourceAll, sourceCopyMove, sourceCopyOnly,\n+            sourceMoveOnly, sourceLinkOnly);\n+        sources.setSpacing(10);\n+\n+        Label targetLabel = new Label(\"Destinations\");\n+        Group targetAll = createTarget(TransferMode.ANY);\n+        Group targetCopyMove = createTarget(TransferMode.COPY_OR_MOVE);\n+        Group targetCopyOnly = createTarget(copyOnly);\n+        Group targetMoveOnly = createTarget(moveOnly);\n+        Group targetLinkOnly = createTarget(linkOnly);\n+\n+        VBox targets = new VBox(targetLabel,\n+            targetAll, targetCopyMove, targetCopyOnly,\n+            targetMoveOnly, targetLinkOnly);\n+        targets.setSpacing(10);\n+\n+        HBox columns = new HBox(sources, targets);\n+        columns.setSpacing(10);\n+\n+        Label instructions = new Label(\"Drag from a source to a destination (the desktop can be either)\");\n+        VBox withInstructions = new VBox(instructions, columns);\n+        withInstructions.setSpacing(20);\n+        withInstructions.setPadding(new Insets(10, 10, 10, 10));\n+        Scene s = new Scene(withInstructions);\n+        primaryStage.setScene(s);\n+        primaryStage.show();\n+    }\n+\n+    private Text modesToText(String l, TransferMode[] modes) {\n+        String label = \"\";\n+        for (TransferMode c : modes) {\n+            if (label != \"\") {\n+                label = label + \" \";\n+            }\n+            label += c;\n+        }\n+        Text text = new Text(label);\n+        return text;\n+    }\n+\n+    private String modesToString(Set<TransferMode> modes) {\n+        String label = \"\";\n+        if (modes.contains(TransferMode.COPY)) {\n+            label += \" \" + TransferMode.COPY;\n+        }\n+        if (modes.contains(TransferMode.MOVE)) {\n+            label += \" \" + TransferMode.MOVE;\n+        }\n+        if (modes.contains(TransferMode.LINK)) {\n+            label += \" \" + TransferMode.LINK;\n+        }\n+        return label;\n+    }\n+\n+    private void clearSourceResults() {\n+        for (Text t : sourceResults) {\n+            t.setText(\"\");\n+        }\n+    }\n+\n+    private void clearTargetResults() {\n+        for (Text t : targetResults) {\n+            t.setText(\"\");\n+        }\n+    }\n+\n+    private Group createSource(TransferMode[] modes) {\n+        Text title = modesToText(\"Source\", modes);\n+        Text result = new Text(\"\");\n+        title.setMouseTransparent(true);\n+        result.setMouseTransparent(true);\n+        sourceResults.add(result);\n+\n+        VBox labels = new VBox(title, result);\n@@ -141,34 +141,34 @@\n-\t\tlabels.setPadding(new Insets(5, 5, 5, 5));\n-\n-\t\tRectangle source = new Rectangle(300, 75);\n-\t\tsource.setOnDragDetected( evt -> {\n-\t\t\tDragboard dragboard = source.startDragAndDrop(modes);\n-\t\t\tClipboardContent content = new ClipboardContent();\n-\t        content.putString(UUID.randomUUID().toString());\n-\t        dragboard.setContent(content);\n-\t        evt.consume();\n-\t        clearSourceResults();\n-\t        clearTargetResults();\n-\t\t\tresult.setText(\"Dragging\");\n-\t\t});\n-\t\tsource.setOnDragDone( evt -> {\n-\t\t\tString message = \"Drag done, \";\n-\t\t\tmessage = message + (evt.isAccepted() ? \"accepted\" : \"rejected\");\n-\t\t\tif (evt.getTransferMode() != null) {\n-\t\t\t    message = message + \" \" + evt.getTransferMode();\n-\t\t\t}\n-\t\t    result.setText(message);\n-\t\t\tevt.consume();\n-\t\t});\n-\t\tsource.setFill(Color.LIGHTGREEN);\n-\n-\t\treturn new Group(source, labels);\n-\t}\n-\n-\tprivate Group createTarget(TransferMode[] modes)\n-\t{\n-\t\tText title = modesToText(\"Destination\", modes);\n-\t\tText available = new Text(\"\");\n-\t\tText result = new Text(\"\");\n-\t\ttargetResults.add(result);\n-\t\ttitle.setMouseTransparent(true);\n+        labels.setPadding(new Insets(5, 5, 5, 5));\n+\n+        Rectangle source = new Rectangle(300, 75);\n+        source.setOnDragDetected( evt -> {\n+            Dragboard dragboard = source.startDragAndDrop(modes);\n+            ClipboardContent content = new ClipboardContent();\n+            content.putString(UUID.randomUUID().toString());\n+            dragboard.setContent(content);\n+            evt.consume();\n+            clearSourceResults();\n+            clearTargetResults();\n+            result.setText(\"Dragging\");\n+        });\n+        source.setOnDragDone( evt -> {\n+            String message = \"Drag done, \";\n+            message = message + (evt.isAccepted() ? \"accepted\" : \"rejected\");\n+            if (evt.getTransferMode() != null) {\n+                message = message + \" \" + evt.getTransferMode();\n+            }\n+            result.setText(message);\n+            evt.consume();\n+        });\n+        source.setFill(Color.LIGHTGREEN);\n+\n+        return new Group(source, labels);\n+    }\n+\n+    private Group createTarget(TransferMode[] modes)\n+    {\n+        Text title = modesToText(\"Destination\", modes);\n+        Text available = new Text(\"\");\n+        Text result = new Text(\"\");\n+        targetResults.add(result);\n+        title.setMouseTransparent(true);\n@@ -181,45 +181,45 @@\n-\t\tlabels.setPadding(new Insets(5, 5, 5, 5));\n-\n-\t\tRectangle target = new Rectangle(300, 75);\n-\t\ttarget.setOnDragOver(evt -> {\n-\t\t\tevt.acceptTransferModes(modes);\n-\t\t\tclearTargetResults();\n-\t\t\tif (evt.getGestureSource() == null) {\n-\t\t\t\tclearSourceResults();\n-\t\t\t}\n-\t\t\tif (evt.getTransferMode() != null) {\n-\t\t\t\tresult.setText(\"Proposed \" + evt.getTransferMode());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tresult.setText(\"\");\n-\t\t\t}\n-\t\t\t\/\/ Note: we always show the source modes to illustrate how the Mac filters the\n-\t\t\t\/\/ available modes based on the modifier key states.\n-\t\t\tavailable.setText(\"Source\" + modesToString(evt.getDragboard().getTransferModes()));\n-\t\t\tevt.consume();\n-\t\t});\n-\t\ttarget.setOnDragDropped(evt -> {\n-\t\t\tlastDropTarget = target;\n-\t\t\tString text = \"Dropped here\";\n-\t\t\tif (evt.getTransferMode() != null) {\n-\t\t\t\ttext += \", proposed \" + evt.getTransferMode();\n-\t\t\t}\n-\t\t\tresult.setText(text);\n-\t\t\tevt.setDropCompleted(true);\n-\t\t\tevt.consume();\n-\t\t});\n-\t\ttarget.setOnDragExited(evt -> {\n-\t\t\tavailable.setText(\"\");\n-\t\t\tif (target != lastDropTarget) {\n-\t\t\t    result.setText(\"\");\n-\t\t\t}\n-\t\t\tevt.consume();\n-\t\t});\n-\t\ttarget.setFill(Color.LIGHTBLUE);\n-\n-\t\treturn new Group(target, labels);\n-\t}\n-\n-\tpublic static void main(String[] args) {\n-\t\tlaunch(DndBasic.class, args);\n-\t}\n+        labels.setPadding(new Insets(5, 5, 5, 5));\n+\n+        Rectangle target = new Rectangle(300, 75);\n+        target.setOnDragOver(evt -> {\n+            evt.acceptTransferModes(modes);\n+            clearTargetResults();\n+            if (evt.getGestureSource() == null) {\n+                clearSourceResults();\n+            }\n+            if (evt.getTransferMode() != null) {\n+                result.setText(\"Proposed \" + evt.getTransferMode());\n+            }\n+            else {\n+                result.setText(\"\");\n+            }\n+            \/\/ Note: we always show the source modes to illustrate how the Mac filters the\n+            \/\/ available modes based on the modifier key states.\n+            available.setText(\"Source\" + modesToString(evt.getDragboard().getTransferModes()));\n+            evt.consume();\n+        });\n+        target.setOnDragDropped(evt -> {\n+            lastDropTarget = target;\n+            String text = \"Dropped here\";\n+            if (evt.getTransferMode() != null) {\n+                text += \", proposed \" + evt.getTransferMode();\n+            }\n+            result.setText(text);\n+            evt.setDropCompleted(true);\n+            evt.consume();\n+        });\n+        target.setOnDragExited(evt -> {\n+            available.setText(\"\");\n+            if (target != lastDropTarget) {\n+                result.setText(\"\");\n+            }\n+            evt.consume();\n+        });\n+        target.setFill(Color.LIGHTBLUE);\n+\n+        return new Group(target, labels);\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(DndBasic.class, args);\n+    }\n","filename":"tests\/manual\/dnd\/DndBasic.java","additions":172,"deletions":172,"binary":false,"changes":344,"status":"modified"}]}