{"files":[{"patch":"@@ -32,1 +32,1 @@\n-- (void)draggingEnded;\n+- (void)draggingEnded:(NSDragOperation)operation;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDragSource.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#import \"GlassDragSource.h\"\n@@ -33,1 +34,1 @@\n-\n+    id<GlassDragSourceDelegate> dragDelegate;\n@@ -36,1 +37,1 @@\n-- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation;\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation delegate:(id<GlassDragSourceDelegate>)delegate;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation delegate:(id<GlassDragSourceDelegate>)delegate\n@@ -59,0 +59,2 @@\n+    \/\/ The delegate retains this object\n+    dragDelegate = delegate;\n@@ -72,0 +74,2 @@\n+    LOG(\"Dragging session ended\");\n+    [dragDelegate draggingEnded: operation];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.m","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -587,1 +587,0 @@\n-    [self->_delegate draggingEnded];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1084,1 +1084,1 @@\n-    self->draggingSource = [[GlassDraggingSource alloc] initWithOperation:operation];\n+    self->draggingSource = [[GlassDraggingSource alloc] initWithOperation:operation delegate:self];\n@@ -1105,1 +1105,1 @@\n-- (void)draggingEnded\n+- (void)draggingEnded:(NSDragOperation)operation\n@@ -1117,0 +1117,15 @@\n+    \/\/ At the end of dragging we're handed a single definitive\n+    \/\/ drag operation (no Generic or Any).\n+    jint mask = com_sun_glass_ui_Clipboard_ACTION_NONE;\n+    if (operation == NSDragOperationNone) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_NONE;\n+    } else if (operation == NSDragOperationCopy) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_COPY;\n+    } else if (operation == NSDragOperationMove) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_MOVE;\n+    } else if (operation == NSDragOperationLink) {\n+        mask = com_sun_glass_ui_Clipboard_ACTION_REFERENCE;\n+    } else {\n+        DNDLOG(\"Invalid drag operation\");\n+    }\n+\n@@ -1118,1 +1133,1 @@\n-    (*env)->CallVoidMethod(env, self->jView, jViewNotifyDragEnd,  [GlassDragSource getMask]);\n+    (*env)->CallVoidMethod(env, self->jView, jViewNotifyDragEnd, mask);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.UUID;\n+import java.util.Set;\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.Group;\n+import javafx.scene.control.Label;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+\n+public class DndBasic extends Application {\n+\n+    ArrayList<Text> sourceResults = new ArrayList<Text>();\n+    ArrayList<Text> targetResults = new ArrayList<Text>();\n+    Rectangle lastDropTarget = null;\n+\n+    @Override\n+    public void start(Stage primaryStage) throws Exception {\n+\n+        TransferMode[] copyOnly = new TransferMode[]{TransferMode.COPY};\n+        TransferMode[] moveOnly = new TransferMode[]{TransferMode.MOVE};\n+        TransferMode[] linkOnly = new TransferMode[]{TransferMode.LINK};\n+\n+        Label sourcesLabel = new Label(\"Sources\");\n+        Group sourceAll = createSource(TransferMode.ANY);\n+        Group sourceCopyMove = createSource(TransferMode.COPY_OR_MOVE);\n+        Group sourceCopyOnly = createSource(copyOnly);\n+        Group sourceMoveOnly = createSource(moveOnly);\n+        Group sourceLinkOnly = createSource(linkOnly);\n+\n+        VBox sources = new VBox(sourcesLabel,\n+            sourceAll, sourceCopyMove, sourceCopyOnly,\n+            sourceMoveOnly, sourceLinkOnly);\n+        sources.setSpacing(10);\n+\n+        Label targetLabel = new Label(\"Destinations\");\n+        Group targetAll = createTarget(TransferMode.ANY);\n+        Group targetCopyMove = createTarget(TransferMode.COPY_OR_MOVE);\n+        Group targetCopyOnly = createTarget(copyOnly);\n+        Group targetMoveOnly = createTarget(moveOnly);\n+        Group targetLinkOnly = createTarget(linkOnly);\n+\n+        VBox targets = new VBox(targetLabel,\n+            targetAll, targetCopyMove, targetCopyOnly,\n+            targetMoveOnly, targetLinkOnly);\n+        targets.setSpacing(10);\n+\n+        HBox columns = new HBox(sources, targets);\n+        columns.setSpacing(10);\n+\n+        Label instructions = new Label(\"Drag from a source to a destination (the desktop can be either)\");\n+        VBox withInstructions = new VBox(instructions, columns);\n+        withInstructions.setSpacing(20);\n+        withInstructions.setPadding(new Insets(10, 10, 10, 10));\n+        Scene s = new Scene(withInstructions);\n+        primaryStage.setScene(s);\n+        primaryStage.show();\n+    }\n+\n+    private Text modesToText(String l, TransferMode[] modes) {\n+        String label = \"\";\n+        for (TransferMode c : modes) {\n+            if (label != \"\") {\n+                label = label + \" \";\n+            }\n+            label += c;\n+        }\n+        Text text = new Text(label);\n+        return text;\n+    }\n+\n+    private String modesToString(Set<TransferMode> modes) {\n+        String label = \"\";\n+        if (modes.contains(TransferMode.COPY)) {\n+            label += \" \" + TransferMode.COPY;\n+        }\n+        if (modes.contains(TransferMode.MOVE)) {\n+            label += \" \" + TransferMode.MOVE;\n+        }\n+        if (modes.contains(TransferMode.LINK)) {\n+            label += \" \" + TransferMode.LINK;\n+        }\n+        return label;\n+    }\n+\n+    private void clearSourceResults() {\n+        for (Text t : sourceResults) {\n+            t.setText(\"\");\n+        }\n+    }\n+\n+    private void clearTargetResults() {\n+        for (Text t : targetResults) {\n+            t.setText(\"\");\n+        }\n+    }\n+\n+    private Group createSource(TransferMode[] modes) {\n+        Text title = modesToText(\"Source\", modes);\n+        Text result = new Text(\"\");\n+        title.setMouseTransparent(true);\n+        result.setMouseTransparent(true);\n+        sourceResults.add(result);\n+\n+        VBox labels = new VBox(title, result);\n+        labels.setMouseTransparent(true);\n+        labels.setSpacing(3);\n+        labels.setPadding(new Insets(5, 5, 5, 5));\n+\n+        Rectangle source = new Rectangle(300, 75);\n+        source.setOnDragDetected( evt -> {\n+            Dragboard dragboard = source.startDragAndDrop(modes);\n+            ClipboardContent content = new ClipboardContent();\n+            content.putString(UUID.randomUUID().toString());\n+            dragboard.setContent(content);\n+            evt.consume();\n+            clearSourceResults();\n+            clearTargetResults();\n+            result.setText(\"Dragging\");\n+        });\n+        source.setOnDragDone( evt -> {\n+            String message = \"Drag done, \";\n+            message = message + (evt.isAccepted() ? \"accepted\" : \"rejected\");\n+            if (evt.getTransferMode() != null) {\n+                message = message + \" \" + evt.getTransferMode();\n+            }\n+            result.setText(message);\n+            evt.consume();\n+        });\n+        source.setFill(Color.LIGHTGREEN);\n+\n+        return new Group(source, labels);\n+    }\n+\n+    private Group createTarget(TransferMode[] modes) {\n+        Text title = modesToText(\"Destination\", modes);\n+        Text available = new Text(\"\");\n+        Text result = new Text(\"\");\n+        targetResults.add(result);\n+        title.setMouseTransparent(true);\n+        available.setMouseTransparent(true);\n+        result.setMouseTransparent(true);\n+\n+        VBox labels = new VBox(title, available, result);\n+        labels.setMouseTransparent(true);\n+        labels.setSpacing(3);\n+        labels.setPadding(new Insets(5, 5, 5, 5));\n+\n+        Rectangle target = new Rectangle(300, 75);\n+        target.setOnDragOver(evt -> {\n+            evt.acceptTransferModes(modes);\n+            clearTargetResults();\n+            if (evt.getGestureSource() == null) {\n+                clearSourceResults();\n+            }\n+            if (evt.getTransferMode() != null) {\n+                result.setText(\"Proposed \" + evt.getTransferMode());\n+            }\n+            else {\n+                result.setText(\"\");\n+            }\n+            \/\/ Note: we always show the source modes to illustrate how the Mac filters the\n+            \/\/ available modes based on the modifier key states.\n+            available.setText(\"Source\" + modesToString(evt.getDragboard().getTransferModes()));\n+            evt.consume();\n+        });\n+        target.setOnDragDropped(evt -> {\n+            lastDropTarget = target;\n+            String text = \"Dropped here\";\n+            if (evt.getTransferMode() != null) {\n+                text += \", proposed \" + evt.getTransferMode();\n+            }\n+            result.setText(text);\n+            evt.setDropCompleted(true);\n+            evt.consume();\n+        });\n+        target.setOnDragExited(evt -> {\n+            available.setText(\"\");\n+            if (target != lastDropTarget) {\n+                result.setText(\"\");\n+            }\n+            evt.consume();\n+        });\n+        target.setFill(Color.LIGHTBLUE);\n+\n+        return new Group(target, labels);\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(DndBasic.class, args);\n+    }\n+}\n","filename":"tests\/manual\/dnd\/DndBasic.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"}]}