{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import javafx.beans.value.ChangeListener;\n@@ -65,1 +66,1 @@\n-        reducedMotionFlag = new ReadOnlyBooleanWrapper(bean, reducedMotion.getName());\n+        reducedMotionFlag = new ReadOnlyBooleanPropertyImpl(bean, reducedMotion.getName());\n@@ -68,1 +69,1 @@\n-        reducedTransparencyFlag = new ReadOnlyBooleanWrapper(bean, reducedTransparency.getName());\n+        reducedTransparencyFlag = new ReadOnlyBooleanPropertyImpl(bean, reducedTransparency.getName());\n@@ -71,1 +72,1 @@\n-        reducedDataFlag = new ReadOnlyBooleanWrapper(bean, reducedData.getName());\n+        reducedDataFlag = new ReadOnlyBooleanPropertyImpl(bean, reducedData.getName());\n@@ -74,1 +75,1 @@\n-        persistentScrollBarsFlag = new ReadOnlyBooleanWrapper(bean, persistentScrollBars.getName());\n+        persistentScrollBarsFlag = new ReadOnlyBooleanPropertyImpl(bean, persistentScrollBars.getName());\n@@ -224,1 +225,1 @@\n-        public T get() {\n+        public synchronized T get() {\n@@ -233,1 +234,1 @@\n-        public void setPlatformValue(Object value) {\n+        public synchronized void setPlatformValue(Object value) {\n@@ -239,1 +240,1 @@\n-        public void setValueOverride(T value) {\n+        public synchronized void setValueOverride(T value) {\n@@ -245,1 +246,1 @@\n-        public void fireValueChangedIfNecessary() {\n+        public synchronized void fireValueChangedIfNecessary() {\n@@ -271,1 +272,1 @@\n-        public void setValueOverride(ColorScheme colorScheme) {\n+        public synchronized void setValueOverride(ColorScheme colorScheme) {\n@@ -276,1 +277,1 @@\n-        private void update() {\n+        private synchronized void update() {\n@@ -286,0 +287,76 @@\n+\n+        @Override\n+        public synchronized ReadOnlyObjectProperty<ColorScheme> getReadOnlyProperty() {\n+            return super.getReadOnlyProperty();\n+        }\n+\n+        @Override\n+        public synchronized ColorScheme get() {\n+            return super.get();\n+        }\n+\n+        @Override\n+        protected synchronized void fireValueChangedEvent() {\n+            super.fireValueChangedEvent();\n+        }\n+\n+        @Override\n+        public synchronized void addListener(ChangeListener<? super ColorScheme> listener) {\n+            super.addListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void removeListener(ChangeListener<? super ColorScheme> listener) {\n+            super.removeListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void addListener(InvalidationListener listener) {\n+            super.addListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void removeListener(InvalidationListener listener) {\n+            super.removeListener(listener);\n+        }\n+    }\n+\n+    private static class ReadOnlyBooleanPropertyImpl extends ReadOnlyBooleanWrapper {\n+        ReadOnlyBooleanPropertyImpl(Object bean, String name) {\n+            super(bean, name);\n+        }\n+\n+        @Override\n+        public synchronized ReadOnlyBooleanProperty getReadOnlyProperty() {\n+            return super.getReadOnlyProperty();\n+        }\n+\n+        @Override\n+        public synchronized boolean get() {\n+            return super.get();\n+        }\n+\n+        @Override\n+        protected synchronized void fireValueChangedEvent() {\n+            super.fireValueChangedEvent();\n+        }\n+\n+        @Override\n+        public synchronized void addListener(ChangeListener<? super Boolean> listener) {\n+            super.addListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void removeListener(ChangeListener<? super Boolean> listener) {\n+            super.removeListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void addListener(InvalidationListener listener) {\n+            super.addListener(listener);\n+        }\n+\n+        @Override\n+        public synchronized void removeListener(InvalidationListener listener) {\n+            super.removeListener(listener);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":88,"deletions":11,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-            return scene != null && mediaRule.evaluate(scene);\n+            return scene != null && mediaRule.evaluate(scene.getPreferences());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/SimpleSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,0 +70,3 @@\n+            case \"prefers-reduced-data\" -> booleanPreferenceExpression(\n+                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedData);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaFeatures.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n+import javafx.application.ColorScheme;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+\n+public final class ScenePreferences implements Scene.Preferences {\n+\n+    private final Scene scene;\n+\n+    public ScenePreferences(Scene scene) {\n+        this.scene = scene;\n+    }\n+\n+    private final ObjectProperty<ColorScheme> colorScheme = new MediaProperty<>(\n+            \"colorScheme\", PlatformImpl.getPlatformPreferences().colorSchemeProperty());\n+\n+    @Override\n+    public ObjectProperty<ColorScheme> colorSchemeProperty() {\n+        return colorScheme;\n+    }\n+\n+    @Override\n+    public ColorScheme getColorScheme() {\n+        return colorScheme.get();\n+    }\n+\n+    @Override\n+    public void setColorScheme(ColorScheme colorScheme) {\n+        this.colorScheme.set(colorScheme);\n+    }\n+\n+    private final ObjectProperty<Boolean> persistentScrollBars = new MediaProperty<>(\n+            \"persistentScrollBars\", PlatformImpl.getPlatformPreferences().persistentScrollBarsProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> persistentScrollBarsProperty() {\n+        return persistentScrollBars;\n+    }\n+\n+    @Override\n+    public boolean isPersistentScrollBars() {\n+        return persistentScrollBars.get();\n+    }\n+\n+    @Override\n+    public void setPersistentScrollBars(Boolean value) {\n+        this.persistentScrollBars.set(value);\n+    }\n+\n+    private final ObjectProperty<Boolean> reducedMotion = new MediaProperty<>(\n+            \"reducedMotion\", PlatformImpl.getPlatformPreferences().reducedMotionProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedMotionProperty() {\n+        return reducedMotion;\n+    }\n+\n+    @Override\n+    public boolean isReducedMotion() {\n+        return reducedMotion.get();\n+    }\n+\n+    @Override\n+    public void setReducedMotion(Boolean value) {\n+        this.reducedMotion.set(value);\n+    }\n+\n+    private final ObjectProperty<Boolean> reducedTransparency = new MediaProperty<>(\n+            \"reducedTransparency\", PlatformImpl.getPlatformPreferences().reducedTransparencyProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedTransparencyProperty() {\n+        return reducedTransparency;\n+    }\n+\n+    @Override\n+    public boolean isReducedTransparency() {\n+        return reducedTransparency.get();\n+    }\n+\n+    @Override\n+    public void setReducedTransparency(Boolean value) {\n+        this.reducedTransparency.set(value);\n+    }\n+\n+    private final ObjectProperty<Boolean> reducedData = new MediaProperty<>(\n+            \"reducedData\", PlatformImpl.getPlatformPreferences().reducedDataProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedDataProperty() {\n+        return reducedData;\n+    }\n+\n+    @Override\n+    public boolean isReducedData() {\n+        return reducedData.get();\n+    }\n+\n+    @Override\n+    public void setReducedData(Boolean value) {\n+        this.reducedData.set(value);\n+    }\n+\n+    \/**\n+     * Property implementation for media features that causes CSS to be re-applied when the property\n+     * value is changed. This is required to re-evaluate media queries in stylesheets.\n+     *\/\n+    private class MediaProperty<T> extends NullCoalescingPropertyBase<T> {\n+        private final String name;\n+\n+        MediaProperty(String name, ObservableValue<T> defaultValue) {\n+            super(defaultValue);\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public Object getBean() {\n+            return scene;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        protected void invalidated() {\n+            Node root = scene.getRoot();\n+            if (root != null) {\n+                NodeHelper.reapplyCSS(root);\n+            }\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/ScenePreferences.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-public sealed interface MediaQueryContext permits Scene {\n+public sealed interface MediaQueryContext permits Scene.Preferences {\n@@ -60,0 +60,7 @@\n+    \/**\n+     * Provides the value for the {@code prefers-reduced-data} media feature.\n+     *\n+     * @return {@code true} if the application should reduce internet traffic\n+     *\/\n+    boolean isReducedData();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/MediaQueryContext.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n+import com.sun.javafx.scene.ScenePreferences;\n@@ -71,1 +71,0 @@\n-import javafx.beans.value.ObservableValue;\n@@ -181,1 +180,1 @@\n-public non-sealed class Scene implements EventTarget, MediaQueryContext {\n+public class Scene implements EventTarget {\n@@ -1232,209 +1231,0 @@\n-    \/**\n-     * Specifies whether the scene should prefer light text on dark backgrounds, or dark text\n-     * on light backgrounds.\n-     * <p>\n-     * This is a <em>null-coalescing<\/em> property: if set to {@code null}, it evaluates to the\n-     * value of {@link Platform.Preferences#colorSchemeProperty()}. Therefore, specifying a\n-     * non-null value for this property overrides the platform-provided value.\n-     * <p>\n-     * This property corresponds to the following CSS media feature:\n-     * <table class=\"striped\">\n-     *     <caption>Media Feature<\/caption>\n-     *     <tbody>\n-     *         <tr><th>Name<\/th><td><code>prefers-color-scheme<\/code><\/td><\/tr>\n-     *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n-     *         <tr><th>Value<\/th><td><code>light<\/code> | <code>dark<\/code><\/td><\/tr>\n-     *         <tr><th>Boolean Context<\/th><td>not applicable<\/td><\/tr>\n-     *     <\/tbody>\n-     * <\/table>\n-     *\n-     * @defaultValue {@link Platform.Preferences#getColorScheme()}\n-     * @since 25\n-     *\/\n-    private final ObjectProperty<ColorScheme> colorScheme = new MediaProperty<>(\n-            \"colorScheme\", PlatformImpl.getPlatformPreferences().colorSchemeProperty());\n-\n-    public final ObjectProperty<ColorScheme> colorSchemeProperty() {\n-        return colorScheme;\n-    }\n-\n-    @Override\n-    public final ColorScheme getColorScheme() {\n-        return colorScheme.get();\n-    }\n-\n-    public final void setColorScheme(ColorScheme colorScheme) {\n-        this.colorScheme.set(colorScheme);\n-    }\n-\n-    private final ObjectProperty<Boolean> persistentScrollBars = new MediaProperty<>(\n-            \"persistentScrollBars\", PlatformImpl.getPlatformPreferences().persistentScrollBarsProperty());\n-\n-    \/**\n-     * Specifies whether applications should always show scroll bars. If set to {@code false}, applications\n-     * may choose to hide scroll bars that are not actively used, or make them smaller or less noticeable.\n-     * <p>\n-     * This is a <em>null-coalescing<\/em> property: if set to {@code null}, it evaluates to the\n-     * value of {@link Platform.Preferences#persistentScrollBarsProperty()}. Therefore, specifying\n-     * a non-null value for this property overrides the platform-provided value.\n-     * <p>\n-     * This property corresponds to the following CSS media feature:\n-     * <table class=\"striped\">\n-     *     <caption>Media Feature<\/caption>\n-     *     <tbody>\n-     *         <tr><th>Name<\/th><td><code>prefers-persistent-scrollbars<\/code><\/td><\/tr>\n-     *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n-     *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>persistent<\/code><\/td><\/tr>\n-     *         <tr><th>Boolean Context<\/th>\n-     *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n-     *         <\/tr>\n-     *     <\/tbody>\n-     * <\/table>\n-     *\n-     * @return the {@code persistentScrollBars} property\n-     * @defaultValue {@link Platform.Preferences#isPersistentScrollBars()}\n-     * @since 25\n-     *\/\n-    public final ObjectProperty<Boolean> persistentScrollBarsProperty() {\n-        return persistentScrollBars;\n-    }\n-\n-    \/**\n-     * Gets the value of the {@code persistentScrollBars} property.\n-     *\n-     * @return the value of the {@code persistentScrollBars} property\n-     * @see #persistentScrollBarsProperty()\n-     * @see #setPersistentScrollBars(Boolean)\n-     * @since 25\n-     *\/\n-    @Override\n-    public final boolean isPersistentScrollBars() {\n-        return persistentScrollBars.get();\n-    }\n-\n-    \/**\n-     * Sets the value of the {@code persistentScrollBars} property.\n-     *\n-     * @param value the value\n-     * @see #persistentScrollBarsProperty()\n-     * @see #isPersistentScrollBars()\n-     * @since 25\n-     *\/\n-    public final void setPersistentScrollBars(Boolean value) {\n-        this.persistentScrollBars.set(value);\n-    }\n-\n-    private final ObjectProperty<Boolean> reducedMotion = new MediaProperty<>(\n-            \"reducedMotion\", PlatformImpl.getPlatformPreferences().reducedMotionProperty());\n-\n-    \/**\n-     * Specifies whether the scene should minimize the amount of non-essential animations,\n-     * reducing discomfort for users who experience motion sickness or vertigo.\n-     * <p>\n-     * This is a <em>null-coalescing<\/em> property: if set to {@code null}, it evaluates to the\n-     * value of {@link Platform.Preferences#reducedMotionProperty()}. Therefore, specifying a\n-     * non-null value for this property overrides the platform-provided value.\n-     * <p>\n-     * This property corresponds to the following CSS media feature:\n-     * <table class=\"striped\">\n-     *     <caption>Media Feature<\/caption>\n-     *     <tbody>\n-     *         <tr><th>Name<\/th><td><code>prefers-reduced-motion<\/code><\/td><\/tr>\n-     *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n-     *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n-     *         <tr><th>Boolean Context<\/th>\n-     *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n-     *         <\/tr>\n-     *     <\/tbody>\n-     * <\/table>\n-     *\n-     * @return the {@code reducedMotion} property\n-     * @defaultValue {@link Platform.Preferences#isReducedMotion()}\n-     * @since 25\n-     *\/\n-    public final ObjectProperty<Boolean> reducedMotionProperty() {\n-        return reducedMotion;\n-    }\n-\n-    \/**\n-     * Gets the value of the {@code reducedMotion} property.\n-     *\n-     * @return the value of the {@code reducedMotion} property\n-     * @see #reducedMotionProperty()\n-     * @see #setReducedMotion(Boolean)\n-     * @since 25\n-     *\/\n-    @Override\n-    public final boolean isReducedMotion() {\n-        return reducedMotion.get();\n-    }\n-\n-    \/**\n-     * Sets the value of the {@code reducedMotion} property.\n-     *\n-     * @param value the value\n-     * @see #reducedMotionProperty()\n-     * @see #isReducedMotion()\n-     * @since 25\n-     *\/\n-    public final void setReducedMotion(Boolean value) {\n-        this.reducedMotion.set(value);\n-    }\n-\n-    private final ObjectProperty<Boolean> reducedTransparency = new MediaProperty<>(\n-            \"reducedTransparency\", PlatformImpl.getPlatformPreferences().reducedTransparencyProperty());\n-\n-    \/**\n-     * Specifies whether the scene should minimize the amount of transparent or translucent\n-     * layer effects, which can help to increase contrast and readability for some users.\n-     * <p>\n-     * This is a <em>null-coalescing<\/em> property: if set to {@code null}, it evaluates to the\n-     * value of {@link Platform.Preferences#reducedTransparencyProperty()}. Therefore, specifying\n-     * a non-null value for this property overrides the platform-provided value.\n-     * <p>\n-     * This property corresponds to the following CSS media feature:\n-     * <table class=\"striped\">\n-     *     <caption>Media Feature<\/caption>\n-     *     <tbody>\n-     *         <tr><th>Name<\/th><td><code>prefers-reduced-transparency<\/code><\/td><\/tr>\n-     *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n-     *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n-     *         <tr><th>Boolean Context<\/th>\n-     *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n-     *         <\/tr>\n-     *     <\/tbody>\n-     * <\/table>\n-     *\n-     * @return the {@code reducedTransparency} property\n-     * @defaultValue {@link Platform.Preferences#isReducedTransparency()}\n-     * @since 25\n-     *\/\n-    public final ObjectProperty<Boolean> reducedTransparencyProperty() {\n-        return reducedTransparency;\n-    }\n-\n-    \/**\n-     * Gets the value of the {@code reducedTransparency} property.\n-     *\n-     * @return the value of the {@code reducedTransparency} property\n-     * @see #reducedTransparencyProperty()\n-     * @see #setReducedTransparency(Boolean)\n-     * @since 25\n-     *\/\n-    @Override\n-    public final boolean isReducedTransparency() {\n-        return reducedTransparency.get();\n-    }\n-\n-    \/**\n-     * Sets the value of the {@code reducedTransparency} property.\n-     *\n-     * @param value the value\n-     * @see #reducedTransparencyProperty()\n-     * @see #isReducedTransparency()\n-     * @since 25\n-     *\/\n-    public final void setReducedTransparency(Boolean value) {\n-        this.reducedTransparency.set(value);\n-    }\n-\n@@ -6465,0 +6255,12 @@\n+    private final Preferences preferences = new ScenePreferences(this);\n+\n+    \/**\n+     * Gets the scene preferences that can be queried with {@code @media} CSS rules.\n+     *\n+     * @return the {@code Preferences} instance\n+     * @since 25\n+     *\/\n+    public final Preferences getPreferences() {\n+        return preferences;\n+    }\n+\n@@ -6724,2 +6526,9 @@\n-     * Property implementation for media features that causes CSS to be re-applied when the property\n-     * value is changed. This is required to re-evaluate media queries in stylesheets.\n+     * Contains preferences of the scene that can be queried with {@code @media} CSS rules.\n+     * <p>\n+     * All preferences are <em>null-coalesting<\/em> properties: if set to {@code null} (using the setter method,\n+     * {@link Property#setValue(Object)}, or with a binding), the property evalutes to the value of the corresponding\n+     * platform-provided preference (see {@link Platform.Preferences}. Likewise, specifying a non-null value for any\n+     * given property will override the platform-provided value.\n+     *\n+     * @see Platform.Preferences\n+     * @since 25\n@@ -6727,2 +6536,1 @@\n-    private class MediaProperty<T> extends NullCoalescingPropertyBase<T> {\n-        private final String name;\n+    public sealed interface Preferences extends MediaQueryContext permits ScenePreferences {\n@@ -6730,4 +6538,19 @@\n-        MediaProperty(String name, ObservableValue<T> defaultValue) {\n-            super(defaultValue);\n-            this.name = name;\n-        }\n+        \/**\n+         * Specifies whether the scene should prefer light text on dark backgrounds, or dark text\n+         * on light backgrounds.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-color-scheme<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>light<\/code> | <code>dark<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th><td>not applicable<\/td><\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @defaultValue {@link Platform.Preferences#getColorScheme()}\n+         * @see Platform.Preferences#colorSchemeProperty()\n+         *\/\n+        ObjectProperty<ColorScheme> colorSchemeProperty();\n@@ -6736,3 +6559,26 @@\n-        public Object getBean() {\n-            return Scene.this;\n-        }\n+        ColorScheme getColorScheme();\n+\n+        void setColorScheme(ColorScheme colorScheme);\n+\n+        \/**\n+         * Specifies whether applications should always show scroll bars. If set to {@code false}, applications\n+         * may choose to hide scroll bars that are not actively used, or make them smaller or less noticeable.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-persistent-scrollbars<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>persistent<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code persistentScrollBars} property\n+         * @defaultValue {@link Platform.Preferences#isPersistentScrollBars()}\n+         * @see Platform.Preferences#persistentScrollBarsProperty()\n+         *\/\n+        ObjectProperty<Boolean> persistentScrollBarsProperty();\n@@ -6740,0 +6586,7 @@\n+        \/**\n+         * Gets the value of the {@code persistentScrollBars} property.\n+         *\n+         * @return the value of the {@code persistentScrollBars} property\n+         * @see #persistentScrollBarsProperty()\n+         * @see #setPersistentScrollBars(Boolean)\n+         *\/\n@@ -6741,3 +6594,33 @@\n-        public String getName() {\n-            return name;\n-        }\n+        boolean isPersistentScrollBars();\n+\n+        \/**\n+         * Sets the value of the {@code persistentScrollBars} property.\n+         *\n+         * @param value the value\n+         * @see #persistentScrollBarsProperty()\n+         * @see #isPersistentScrollBars()\n+         *\/\n+        void setPersistentScrollBars(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of non-essential animations,\n+         * reducing discomfort for users who experience motion sickness or vertigo.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-motion<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedMotion} property\n+         * @defaultValue {@link Platform.Preferences#isReducedMotion()}\n+         * @see Platform.Preferences#reducedMotionProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedMotionProperty();\n@@ -6745,0 +6628,7 @@\n+        \/**\n+         * Gets the value of the {@code reducedMotion} property.\n+         *\n+         * @return the value of the {@code reducedMotion} property\n+         * @see #reducedMotionProperty()\n+         * @see #setReducedMotion(Boolean)\n+         *\/\n@@ -6746,6 +6636,94 @@\n-        protected void invalidated() {\n-            Node root = getRoot();\n-            if (root != null) {\n-                NodeHelper.reapplyCSS(root);\n-            }\n-        }\n+        boolean isReducedMotion();\n+\n+        \/**\n+         * Sets the value of the {@code reducedMotion} property.\n+         *\n+         * @param value the value\n+         * @see #reducedMotionProperty()\n+         * @see #isReducedMotion()\n+         *\/\n+        void setReducedMotion(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of transparent or translucent\n+         * layer effects, which can help to increase contrast and readability for some users.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-transparency<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedTransparency} property\n+         * @defaultValue {@link Platform.Preferences#isReducedTransparency()}\n+         * @see Platform.Preferences#reducedTransparencyProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedTransparencyProperty();\n+\n+        \/**\n+         * Gets the value of the {@code reducedTransparency} property.\n+         *\n+         * @return the value of the {@code reducedTransparency} property\n+         * @see #reducedTransparencyProperty()\n+         * @see #setReducedTransparency(Boolean)\n+         *\/\n+        @Override\n+        boolean isReducedTransparency();\n+\n+        \/**\n+         * Sets the value of the {@code reducedTransparency} property.\n+         *\n+         * @param value the value\n+         * @see #reducedTransparencyProperty()\n+         * @see #isReducedTransparency()\n+         *\/\n+        void setReducedTransparency(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of internet traffic, which users\n+         * might request because they are on a metered network or a limited data plan.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-data<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedData} property\n+         * @defaultValue {@link Platform.Preferences#isReducedData()}\n+         * @see Platform.Preferences#reducedDataProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedDataProperty();\n+\n+        \/**\n+         * Gets the value of the {@code reducedData} property.\n+         *\n+         * @return the value of the {@code reducedData} property\n+         * @see #reducedDataProperty()\n+         * @see #setReducedData(Boolean)\n+         *\/\n+        @Override\n+        boolean isReducedData();\n+\n+        \/**\n+         * Sets the value of the {@code reducedData} property.\n+         *\n+         * @param value the value\n+         * @see #reducedDataProperty()\n+         * @see #isReducedData()\n+         *\/\n+        void setReducedData(Boolean value);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":210,"deletions":232,"binary":false,"changes":442,"status":"modified"}]}