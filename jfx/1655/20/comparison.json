{"files":[{"patch":"@@ -780,0 +780,1 @@\n+    <h4>@import<\/h4>\n@@ -782,1 +783,1 @@\n-        <a href=\"http:\/\/www.w3.org\/TR\/CSS21\/cascade.html#at-import\">@import<\/a> is also partially supported.\n+        <a href=\"http:\/\/www.w3.org\/TR\/CSS21\/cascade.html#at-import\">@import<\/a> is partially supported.\n@@ -788,0 +789,1 @@\n+    <h4>@font-face<\/h4>\n@@ -827,0 +829,84 @@\n+    <h4>@media<\/h4>\n+    <p>A media query is a method of testing certain aspects of the <a href=\"..\/..\/..\/javafx\/scene\/Scene.html\">Scene<\/a>.\n+        Media queries are independent of the contents of the scene graph, its styling, or any other internal aspect;\n+        they're only dependent on \"external\" configuration of the <code>Scene<\/code>.\n+    <p>Several media queries can be combined into a comma-separated <strong>media query list<\/strong>.\n+        A media query list evaluates to <code>true<\/code> if <em>any<\/em> of the media queries is <code>true<\/code>,\n+        and evaluates to <code>false<\/code> only if <em>all<\/em> the media queries are <code>false<\/code>.\n+        An empty media query list evaluates to <code>true<\/code>.\n+        <figure style=\"margin: 0\">\n+            <img src=\"media-query.svg\" width=\"210\" alt=\"Media Query List\">\n+            <figcaption style=\"float: left; margin-top: 27px\">\n+                <span class=\"grammar\">&lt;media-query-list&gt;:<\/span>\n+            <\/figcaption>\n+        <\/figure>\n+    <p>A <strong>media query<\/strong> consists of one or more <strong>media features<\/strong>.\n+        A media feature tests a single, specific feature of the <code>Scene<\/code>.\n+        <figure style=\"margin: 0\">\n+            <img src=\"media-feature.svg\" width=\"430\" alt=\"Media Feature\">\n+            <figcaption style=\"float: left; margin-top: 16px\">\n+                <span class=\"grammar\">&lt;media-feature&gt;:<\/span>\n+            <\/figcaption>\n+        <\/figure>\n+    <p>Syntactically, media features resemble CSS properties: they consist of a feature name, a colon, and a value to\n+        test for. Media features are always enclosed in parentheses. They may also be written in boolean form as just a\n+        feature name. In this case, the media feature is evaluated in a <strong>boolean context<\/strong>. This is a\n+        convenient shorthand for features that have a reasonable default value. A media feature that is evaluated in a\n+        boolean context evaluates to <code>true<\/code> if it would be <code>true<\/code> for any value <em>other<\/em>\n+        than the reasonable default value.\n+    <p>For example, the <code>prefers-reduced-motion<\/code> media feature has a default value of <code>no-preference<\/code>.\n+        When evaluated in a boolean context, the media feature evaluates to <code>false<\/code> if the user has indicated no\n+        preference, and evaluates to <code>true<\/code> if the user has indicated the <code>reduce<\/code> preference.\n+    <p>Media features can be combined using boolean algebra (<code>not<\/code>, <code>and<\/code>, <code>or<\/code>):\n+    <ul>\n+        <li>Any media feature can be negated by placing the <code>not<\/code> operator before it:<br\/>\n+            <code>not (prefers-color-scheme: light)<\/code>\n+        <li>Two or more media features can be chained together, such that the query is only true if <em>all<\/em> the\n+            media features are true, by placing the <code>and<\/code> operator between them:<br\/>\n+            <code>(prefers-color-scheme: dark) and (prefers-reduced-motion) and (prefers-reduced-transparency)<\/code>\n+        <li>Two or more media features can be chained together, such that the query is true if <em>any<\/em> of the\n+            media features are true, by placing the <code>or<\/code> operator between them:<br\/>\n+            <code>(prefers-color-scheme: dark) or (prefers-reduced-motion) or (prefers-reduced-transparency)<\/code>\n+        <li>Expressions can be grouped by wrapping them in parentheses.\n+        <li>It is invalid to mix different boolean operators at the same \"level\" of a media query. For example,\n+            the following expression is invalid, as it is unclear what was meant:<br\/>\n+            <code>(prefers-color-scheme: dark) and (prefers-reduced-motion) or (prefers-reduced-transparency)<\/code><br\/>\n+            In this case, parentheses must be used to group expressions.\n+    <\/ul>\n+    <table class=\"cssmisctable\">\n+        <caption>Available media features<\/caption>\n+        <thead>\n+            <tr>\n+                <th>Media feature<\/th>\n+                <th>Values<\/th>\n+                <th>Boolean Context<\/th>\n+            <\/tr>\n+        <\/thead>\n+        <tbody>\n+            <tr>\n+                <td class=\"value\">prefers-color-scheme<\/td>\n+                <td class=\"value\">light | dark<\/td>\n+                <td>not applicable<\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">prefers-reduced-data<\/td>\n+                <td class=\"value\">no-preference | reduce<\/td>\n+                <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">prefers-reduced-motion<\/td>\n+                <td class=\"value\">no-preference | reduce<\/td>\n+                <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">prefers-reduced-transparency<\/td>\n+                <td class=\"value\">no-preference | reduce<\/td>\n+                <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">prefers-persistent-scrollbars<\/td>\n+                <td class=\"value\">no-preference | persistent<\/td>\n+                <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+            <\/tr>\n+        <\/tbody>\n+    <\/table>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":87,"deletions":1,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   width=\"92.604164mm\"\n+   height=\"19.843748mm\"\n+   viewBox=\"0 0 92.604164 19.843748\"\n+   version=\"1.1\"\n+   id=\"svg1\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\">\n+  <defs\n+     id=\"defs1\" \/>\n+  <g\n+     id=\"layer1\"\n+     transform=\"translate(-15.875,-15.875001)\">\n+    <rect\n+       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect11\"\n+       width=\"92.604164\"\n+       height=\"19.84375\"\n+       x=\"15.875\"\n+       y=\"15.875002\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 18.520833,18.520834 V 23.8125\"\n+       id=\"path1\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 19.843749,18.520834 V 23.8125\"\n+       id=\"path2\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 18.520833,21.166667 h 5.291666\"\n+       id=\"path3\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect3\"\n+       width=\"4.791666\"\n+       height=\"4.791667\"\n+       x=\"24.0625\"\n+       y=\"18.770834\"\n+       ry=\"1.1979167\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect3-3\"\n+       width=\"4.7916636\"\n+       height=\"4.791667\"\n+       x=\"95.5\"\n+       y=\"18.770834\"\n+       ry=\"1.1979167\" \/>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"26.020889\"\n+       y=\"21.951246\"\n+       id=\"text3\"><tspan\n+         id=\"tspan3\"\n+         style=\"font-size:2.82222px;stroke-width:0.264583\"\n+         x=\"26.020889\"\n+         y=\"21.951246\">(<\/tspan><\/text>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"97.458389\"\n+       y=\"21.951244\"\n+       id=\"text3-4\"><tspan\n+         id=\"tspan3-3\"\n+         style=\"font-size:2.82222px;stroke-width:0.264583\"\n+         x=\"97.458389\"\n+         y=\"21.951244\">)<\/tspan><\/text>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect3-0\"\n+       width=\"4.7916646\"\n+       height=\"4.791667\"\n+       x=\"59.78125\"\n+       y=\"18.770834\"\n+       ry=\"1.1979167\" \/>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"61.739639\"\n+       y=\"21.951244\"\n+       id=\"text3-8\"><tspan\n+         id=\"tspan3-8\"\n+         style=\"font-size:2.82222px;stroke-width:0.264583\"\n+         x=\"61.739639\"\n+         y=\"21.951244\">:<\/tspan><\/text>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 29.104166,21.166667 h 5.291667\"\n+       id=\"path4\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect4\"\n+       width=\"20.666666\"\n+       height=\"4.791667\"\n+       x=\"34.645832\"\n+       y=\"18.770834\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect4-9\"\n+       width=\"20.666664\"\n+       height=\"4.791666\"\n+       x=\"51.84375\"\n+       y=\"28.031252\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect4-3\"\n+       width=\"20.666666\"\n+       height=\"4.791667\"\n+       x=\"69.041664\"\n+       y=\"18.770834\" \/>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"36.079296\"\n+       y=\"22.232056\"\n+       id=\"text3-1\"><tspan\n+         id=\"tspan3-6\"\n+         style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:2.82222px;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583\"\n+         x=\"36.079296\"\n+         y=\"22.232056\">feature name<\/tspan><\/text>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"53.277214\"\n+       y=\"31.492472\"\n+       id=\"text3-1-1\"><tspan\n+         id=\"tspan3-6-8\"\n+         style=\"font-size:2.82222px;stroke-width:0.264583\"\n+         x=\"53.277214\"\n+         y=\"31.492472\">feature name<\/tspan><\/text>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"70.475128\"\n+       y=\"22.232056\"\n+       id=\"text3-1-0\"><tspan\n+         id=\"tspan3-6-5\"\n+         style=\"font-size:2.82222px;stroke-width:0.264583\"\n+         x=\"70.475128\"\n+         y=\"22.232056\">feature value<\/tspan><\/text>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 55.562497,21.166667 h 3.96875\"\n+       id=\"path5\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 64.822913,21.166667 h 3.96875\"\n+       id=\"path6\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 89.95833,21.166667 h 5.291666\"\n+       id=\"path7\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 100.54166,21.166667 h 5.29167\"\n+       id=\"path8\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 104.51041,18.520834 V 23.8125\"\n+       id=\"path9\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 105.83333,18.520834 V 23.8125\"\n+       id=\"path10\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 30.427083,21.166667 c 0,0 2.645833,0 2.645833,2.645833 v 3.96875 c 0,2.645834 2.645834,2.645833 2.645834,2.645833 -10e-7,1e-6 16.0075,0 16.0075,0\"\n+       id=\"path11\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 93.92708,21.166668 c 0,0 -2.645833,0 -2.645833,2.645833 v 3.96875 c 0,2.645834 -2.645834,2.645833 -2.645834,2.645833 10e-7,1e-6 -16.0075,0 -16.0075,0\"\n+       id=\"path11-8\" \/>\n+  <\/g>\n+<\/svg>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/media-feature.svg","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   width=\"47.625mm\"\n+   height=\"21.166668mm\"\n+   viewBox=\"0 0 47.625 21.166668\"\n+   version=\"1.1\"\n+   id=\"svg1\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\">\n+  <defs\n+     id=\"defs1\" \/>\n+  <g\n+     id=\"layer1\"\n+     transform=\"translate(-15.875,-44.979167)\">\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 18.520833,50.270835 v 5.291666\"\n+       id=\"path1-8\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 19.843749,50.270835 v 5.291666\"\n+       id=\"path2-9\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 59.281248,50.270835 v 5.291666\"\n+       id=\"path1-8-9\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 60.604164,50.270835 v 5.291666\"\n+       id=\"path2-9-8\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.499999;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 18.520834,52.916668 H 29.104167\"\n+       id=\"path3-1\" \/>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect3-4\"\n+       width=\"4.791666\"\n+       height=\"4.791667\"\n+       x=\"37.306248\"\n+       y=\"58.472919\"\n+       ry=\"1.1979167\" \/>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:normal;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"39.264637\"\n+       y=\"61.653336\"\n+       id=\"text3-0\"><tspan\n+         id=\"tspan3-83\"\n+         style=\"font-size:2.82222px;font-weight:bold;stroke-width:0.264583\"\n+         x=\"39.264637\"\n+         y=\"61.653336\">,<\/tspan><\/text>\n+    <rect\n+       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect4-1\"\n+       width=\"20.666666\"\n+       height=\"4.791667\"\n+       x=\"29.354166\"\n+       y=\"50.520836\" \/>\n+    <text\n+       xml:space=\"preserve\"\n+       style=\"font-style:normal;font-weight:normal;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+       x=\"31.223663\"\n+       y=\"53.900444\"\n+       id=\"text3-1-16\"><tspan\n+         id=\"tspan3-6-6\"\n+         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:2.82222px;font-family:sans-serif;-inkscape-font-specification:sans-serif;font-weight:bold;stroke-width:0.264583\"\n+         x=\"31.223663\"\n+         y=\"53.900444\">media query<\/tspan><\/text>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 50.27083,52.916669 c 2e-6,-10e-7 2.645834,-10e-7 2.645833,2.645833 l -10e-7,2.645834 c -1e-6,2.645833 -2.645831,2.645833 -2.645833,2.645833 h -7.937497\"\n+       id=\"path12\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 29.104166,52.916669 c -2e-6,-10e-7 -2.645835,-10e-7 -2.645833,2.645833 1e-6,1.322916 1e-6,1.322917 0,2.645834 -2e-6,2.645833 2.645831,2.645833 2.645833,2.645833 h 7.937497\"\n+       id=\"path12-5\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"m 22.545616,52.916669 c 0,0 2.5898,-10e-7 2.5898,-2.645834 0,-2.645833 2.645834,-2.645833 2.645834,-2.645833 h 23.812497 c 0,0 2.645835,0 2.645833,2.645833 -2e-6,2.645833 2.645833,2.645834 2.645833,2.645834\"\n+       id=\"path13\" \/>\n+    <path\n+       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+       d=\"M 50.27083,52.916669 H 60.854163\"\n+       id=\"path14\" \/>\n+    <rect\n+       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+       id=\"rect14\"\n+       width=\"47.625\"\n+       height=\"21.166666\"\n+       x=\"15.875\"\n+       y=\"44.979168\" \/>\n+  <\/g>\n+<\/svg>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/media-query.svg","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -920,1 +920,1 @@\n-    private static PlatformPreferences platformPreferences;\n+    private static final PlatformPreferences platformPreferences = new PlatformPreferences();\n@@ -923,4 +923,0 @@\n-        if (platformPreferences == null) {\n-            throw new IllegalStateException(\"Toolkit not initialized\");\n-        }\n-\n@@ -939,1 +935,1 @@\n-        platformPreferences = new PlatformPreferences(platformKeys, platformKeyMappings);\n+        platformPreferences.initialize(platformKeys, platformKeyMappings);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    private final Map<String, Class<?>> platformKeys;\n+    private final Map<String, Class<?>> platformKeys = new HashMap<>();\n@@ -67,1 +67,1 @@\n-    private final Map<String, PreferenceMapping<?, ?>> platformKeyMappings;\n+    private final Map<String, PreferenceMapping<?, ?>> platformKeyMappings = new HashMap<>();\n@@ -83,1 +83,1 @@\n-     * Initializes a new {@code PlatformPreferences} instance with the given platform-specific keys and key mappings.\n+     * Initializes this {@code PlatformPreferences} instance with the given platform-specific keys and key mappings.\n@@ -90,4 +90,4 @@\n-    public PlatformPreferences(Map<String, Class<?>> platformKeys,\n-                               Map<String, PreferenceMapping<?, ?>> platformKeyMappings) {\n-        this.platformKeys = Map.copyOf(platformKeys);\n-        this.platformKeyMappings = Map.copyOf(platformKeyMappings);\n+    public void initialize(Map<String, Class<?>> platformKeys,\n+                           Map<String, PreferenceMapping<?, ?>> platformKeyMappings) {\n+        this.platformKeys.putAll(platformKeys);\n+        this.platformKeyMappings.putAll(platformKeyMappings);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import com.sun.javafx.scene.ScenePreferences;\n+import com.sun.javafx.tk.Toolkit;\n@@ -30,1 +32,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -33,1 +34,1 @@\n-import javafx.beans.property.ReadOnlyBooleanWrapper;\n+import javafx.beans.property.ReadOnlyBooleanPropertyBase;\n@@ -37,0 +38,1 @@\n+import javafx.beans.property.ReadOnlyProperty;\n@@ -44,0 +46,6 @@\n+ * <p>\n+ * All properties in this class can be read from any thread in order to allow {@link ScenePreferences} to safely\n+ * initialize its values on a background thread (creating and configuring a {@code Scene} on a background thread\n+ * is allowed by its specification). This is not a specified capability for users, it is an implementation detail.\n+ * <p>\n+ * Importantly, even though properties can be read from any thread, changes always happen on the FX thread.\n@@ -47,0 +55,2 @@\n+    private final Object mutex = new Object();\n+    private final Object bean;\n@@ -56,5 +66,4 @@\n-    private final ReadOnlyBooleanWrapper reducedMotionFlag;\n-    private final ReadOnlyBooleanWrapper reducedTransparencyFlag;\n-    private final ReadOnlyBooleanWrapper reducedDataFlag;\n-    private final ReadOnlyBooleanWrapper persistentScrollBarsFlag;\n-    private final Object bean;\n+    private final ReadOnlyBooleanWrapperImpl reducedMotionFlag = new ReadOnlyBooleanWrapperImpl(reducedMotion);\n+    private final ReadOnlyBooleanWrapperImpl reducedTransparencyFlag = new ReadOnlyBooleanWrapperImpl(reducedTransparency);\n+    private final ReadOnlyBooleanWrapperImpl reducedDataFlag = new ReadOnlyBooleanWrapperImpl(reducedData);\n+    private final ReadOnlyBooleanWrapperImpl persistentScrollBarsFlag = new ReadOnlyBooleanWrapperImpl(persistentScrollBars);\n@@ -64,12 +73,0 @@\n-\n-        reducedMotionFlag = new ReadOnlyBooleanWrapper(bean, reducedMotion.getName());\n-        reducedMotionFlag.bind(reducedMotion);\n-\n-        reducedTransparencyFlag = new ReadOnlyBooleanWrapper(bean, reducedTransparency.getName());\n-        reducedTransparencyFlag.bind(reducedTransparency);\n-\n-        reducedDataFlag = new ReadOnlyBooleanWrapper(bean, reducedData.getName());\n-        reducedDataFlag.bind(reducedData);\n-\n-        persistentScrollBarsFlag = new ReadOnlyBooleanWrapper(bean, persistentScrollBars.getName());\n-        persistentScrollBarsFlag.bind(persistentScrollBars);\n@@ -79,1 +76,1 @@\n-        return reducedMotionFlag.getReadOnlyProperty();\n+        return reducedMotionFlag;\n@@ -91,1 +88,1 @@\n-        return reducedTransparencyFlag.getReadOnlyProperty();\n+        return reducedTransparencyFlag;\n@@ -103,1 +100,1 @@\n-        return reducedDataFlag.getReadOnlyProperty();\n+        return reducedDataFlag;\n@@ -115,1 +112,1 @@\n-        return persistentScrollBarsFlag.getReadOnlyProperty();\n+        return persistentScrollBarsFlag;\n@@ -176,4 +173,6 @@\n-        for (Map.Entry<String, ChangedValue> entry : changedPreferences.entrySet()) {\n-            if (platformKeyMappings.get(entry.getKey()) instanceof PreferenceMapping<?, ?> mapping\n-                    && deferredProperties.get(mapping.keyName()) instanceof DeferredProperty<?> property) {\n-                property.setPlatformValue(mapping.map(entry.getValue().newValue()));\n+        synchronized (mutex) {\n+            for (Map.Entry<String, ChangedValue> entry : changedPreferences.entrySet()) {\n+                if (platformKeyMappings.get(entry.getKey()) instanceof PreferenceMapping<?, ?> mapping\n+                        && deferredProperties.get(mapping.keyName()) instanceof DeferredProperty<?> property) {\n+                    property.setPlatformValue(mapping.map(entry.getValue().newValue()));\n+                }\n@@ -181,1 +180,0 @@\n-        }\n@@ -183,2 +181,5 @@\n-        for (DeferredProperty<?> property : deferredProperties.values()) {\n-            property.fireValueChangedIfNecessary();\n+            colorScheme.update();\n+\n+            for (DeferredProperty<?> property : deferredProperties.values()) {\n+                property.fireValueChangedIfNecessary();\n+            }\n@@ -225,1 +226,3 @@\n-            return effectiveValue;\n+            synchronized (mutex) {\n+                return effectiveValue;\n+            }\n@@ -234,0 +237,2 @@\n+            \/\/ No need to synchronize here, because the update() method already synchronizes on 'mutex'.\n+            Toolkit.getToolkit().checkFxUserThread();\n@@ -235,1 +240,1 @@\n-            this.platformValue = expectedType.isInstance(value) ? (T)value : null;\n+            this.platformValue = expectedType.isInstance(value) ? (T) value : null;\n@@ -240,3 +245,7 @@\n-            this.overrideValue = value;\n-            updateEffectiveValue();\n-            fireValueChangedEvent();\n+            Toolkit.getToolkit().checkFxUserThread();\n+\n+            synchronized (mutex) {\n+                this.overrideValue = value;\n+                updateEffectiveValue();\n+                fireValueChangedIfNecessary();\n+            }\n@@ -245,0 +254,1 @@\n+        \/\/ This method must only be called when synchronized on 'mutex'.\n@@ -252,0 +262,1 @@\n+        \/\/ This method must only be called when synchronized on 'mutex'.\n@@ -260,1 +271,1 @@\n-    private class ColorSchemeProperty extends ReadOnlyObjectWrapper<ColorScheme> {\n+    private final class ColorSchemeProperty extends ReadOnlyObjectWrapper<ColorScheme> {\n@@ -265,4 +276,0 @@\n-            InvalidationListener listener = observable -> update();\n-            backgroundColor.addListener(listener);\n-            foregroundColor.addListener(listener);\n-            update();\n@@ -272,2 +279,24 @@\n-            colorSchemeOverride = colorScheme;\n-            update();\n+            synchronized (mutex) {\n+                colorSchemeOverride = colorScheme;\n+                update();\n+            }\n+        }\n+\n+        public void update() {\n+            synchronized (mutex) {\n+                if (colorSchemeOverride != null) {\n+                    super.set(colorSchemeOverride);\n+                } else {\n+                    Color background = backgroundColor.get();\n+                    Color foreground = foregroundColor.get();\n+                    boolean isDark = Utils.calculateBrightness(background) < Utils.calculateBrightness(foreground);\n+                    super.set(isDark ? ColorScheme.DARK : ColorScheme.LIGHT);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public ReadOnlyObjectProperty<ColorScheme> getReadOnlyProperty() {\n+            synchronized (mutex) {\n+                return super.getReadOnlyProperty();\n+            }\n@@ -276,8 +305,4 @@\n-        private void update() {\n-            if (colorSchemeOverride != null) {\n-                set(colorSchemeOverride);\n-            } else {\n-                Color background = backgroundColor.get();\n-                Color foreground = foregroundColor.get();\n-                boolean isDark = Utils.calculateBrightness(background) < Utils.calculateBrightness(foreground);\n-                set(isDark ? ColorScheme.DARK : ColorScheme.LIGHT);\n+        @Override\n+        public ColorScheme get() {\n+            synchronized (mutex) {\n+                return super.get();\n@@ -286,0 +311,30 @@\n+\n+        @Override\n+        public void set(ColorScheme newValue) {\n+            \/\/ Make sure that we only set the value in the update() method.\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    private static final class ReadOnlyBooleanWrapperImpl extends ReadOnlyBooleanPropertyBase {\n+        private final ReadOnlyProperty<Boolean> observable;\n+\n+        ReadOnlyBooleanWrapperImpl(ReadOnlyProperty<Boolean> observable) {\n+            this.observable = observable;\n+            observable.addListener((_, _, _) -> fireValueChangedEvent());\n+        }\n+\n+        @Override\n+        public Object getBean() {\n+            return observable.getBean();\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return observable.getName();\n+        }\n+\n+        @Override\n+        public boolean get() {\n+            return observable.getValue();\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":106,"deletions":51,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.beans.property;\n+\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.beans.value.WeakChangeListener;\n+import java.util.Objects;\n+\n+\/**\n+ * Base class for null-coalescing properties that evaluate to their local value if non-{@code null},\n+ * or to their base value if the local value is {@code null}.\n+ *\n+ * @param <T> the value type\n+ *\/\n+public abstract class NullCoalescingPropertyBase<T> extends ObjectPropertyBase<T> {\n+\n+    private final ChangeListener<T> listener = (_, _, _) -> {\n+        invalidated();\n+        fireValueChangedEvent();\n+    };\n+\n+    private final WeakChangeListener<T> weakListener = new WeakChangeListener<>(listener);\n+    private final ObservableValue<T> baseObservable;\n+    private boolean currentValueChanged;\n+    private T currentValue;\n+\n+    \/**\n+     * Initializes a new {@code NullCoalescingPropertyBase} with the specified base value.\n+     *\n+     * @param baseObservable the base observable\n+     * @throws NullPointerException if {@code baseObservable} is {@code null}\n+     *\/\n+    protected NullCoalescingPropertyBase(ObservableValue<T> baseObservable) {\n+        this.baseObservable = Objects.requireNonNull(baseObservable, \"baseObservable\");\n+        this.currentValue = baseObservable.getValue();\n+    }\n+\n+    \/**\n+     * Connects this property to the base observable and starts observing.\n+     *\/\n+    public final void connect() {\n+        baseObservable.addListener(weakListener);\n+        invalidated();\n+        fireValueChangedEvent();\n+    }\n+\n+    \/**\n+     * Disconnects this property from the base observable and stops observing.\n+     *\/\n+    public final void disconnect() {\n+        baseObservable.removeListener(weakListener);\n+    }\n+\n+    @Override\n+    public final T get() {\n+        return currentValue;\n+    }\n+\n+    @Override\n+    protected final void fireValueChangedEvent() {\n+        if (currentValueChanged) {\n+            currentValueChanged = false;\n+            super.fireValueChangedEvent();\n+        }\n+    }\n+\n+    @Override\n+    protected final void invalidated() {\n+        T localValue = super.get();\n+        T newValue = localValue != null ? localValue : baseObservable.getValue();\n+\n+        if (currentValue != newValue) {\n+            currentValue = newValue;\n+            currentValueChanged = true;\n+            onInvalidated();\n+        }\n+    }\n+\n+    \/**\n+     * Called when the current value has changed.\n+     *\/\n+    protected void onInvalidated() {}\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/beans\/property\/NullCoalescingPropertyBase.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import com.sun.javafx.util.Utils;\n+import com.sun.javafx.css.media.MediaRule;\n+import javafx.css.Rule;\n+\n+public final class RuleHelper {\n+\n+    private RuleHelper() {}\n+\n+    static {\n+        Utils.forceInit(Rule.class);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    public static void setAccessor(Accessor accessor) {\n+        RuleHelper.accessor = accessor;\n+    }\n+\n+    public static MediaRule getMediaRule(Rule rule) {\n+        return accessor.getMediaRule(rule);\n+    }\n+\n+    public interface Accessor {\n+        MediaRule getMediaRule(Rule rule);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/RuleHelper.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import com.sun.javafx.css.media.MediaRule;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -29,0 +32,1 @@\n+import javafx.css.Rule;\n@@ -34,1 +38,0 @@\n-\n@@ -278,0 +281,15 @@\n+        Rule rule = getRule();\n+        MediaRule mediaRule = rule != null ? RuleHelper.getMediaRule(rule) : null;\n+\n+        \/\/ If we have a media rule, evaluate it against the scene's media query context.\n+        \/\/ If the media rule evaluates to false, the selector doesn't apply.\n+        if (mediaRule != null) {\n+            Node node = styleable instanceof Node n ? n : styleable.getStyleableNode();\n+            if (node == null) {\n+                return false;\n+            }\n+\n+            MediaQueryContext context = NodeHelper.getMediaQueryContext(node);\n+            return context != null && mediaRule.evaluate(context);\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/SimpleSelector.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import javafx.application.ColorScheme;\n+import java.util.Locale;\n+import java.util.function.Function;\n+\n+\/**\n+ * Contains the implementations of all supported media feature queries.\n+ *\/\n+final class MediaFeatures {\n+\n+    private MediaFeatures() {}\n+\n+    \/**\n+     * Returns a {@code MediaQuery} that evaluates the specified feature.\n+     *\n+     * @param featureName the name of the media feature\n+     * @param featureValue the value of the media feature, or {@code null} to indicate no value\n+     * @throws IllegalArgumentException if {@code featureName} or {@code featureValue} is invalid\n+     * @return the {@code MediaQuery}\n+     *\/\n+    public static MediaQuery featureQueryExpression(String featureName, String featureValue) {\n+        featureName = featureName.toLowerCase(Locale.ROOT).intern();\n+\n+        if (featureValue != null) {\n+            featureValue = featureValue.toLowerCase(Locale.ROOT).intern();\n+        }\n+\n+        return switch (featureName) {\n+            case \"prefers-color-scheme\" -> new FunctionExpression<>(\n+                featureName,\n+                checkNotNullValue(featureName, featureValue),\n+                MediaQueryContext::getColorScheme,\n+                ColorScheme.valueOf(featureValue.toUpperCase(Locale.ROOT)));\n+\n+            case \"prefers-reduced-motion\" -> booleanPreferenceExpression(\n+                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedMotion);\n+\n+            case \"prefers-reduced-transparency\" -> booleanPreferenceExpression(\n+                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedTransparency);\n+\n+            case \"prefers-reduced-data\" -> booleanPreferenceExpression(\n+                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedData);\n+\n+            case \"prefers-persistent-scrollbars\" -> booleanPreferenceExpression(\n+                featureName, featureValue, \"persistent\", MediaQueryContext::isPersistentScrollBars);\n+\n+            default -> throw new IllegalArgumentException(\n+                String.format(\"Unknown media feature <%s>\", featureName));\n+        };\n+    }\n+\n+    private static MediaQuery booleanPreferenceExpression(String featureName,\n+                                                          String featureValue,\n+                                                          String trueValue,\n+                                                          Function<MediaQueryContext, Boolean> argument) {\n+        if (\"no-preference\".equals(featureValue)) {\n+            return new FunctionExpression<>(featureName, featureValue, argument, false);\n+        }\n+\n+        if (featureValue == null || trueValue.equals(featureValue)) {\n+            return new FunctionExpression<>(featureName, featureValue, argument, true);\n+        }\n+\n+        throw new IllegalArgumentException(\n+            String.format(\"Unknown value <%s> for media feature <%s>\", featureValue, featureName));\n+    }\n+\n+    private static String checkNotNullValue(String featureName, String featureValue) {\n+        if (featureValue == null) {\n+            throw new IllegalArgumentException(\n+                String.format(\"Media feature <%s> cannot be evaluated in a boolean context\", featureName));\n+        }\n+\n+        return featureValue;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaFeatures.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import com.sun.javafx.css.media.expression.NegationExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+\n+\/**\n+ * {@code MediaQuery} is the runtime representation of a CSS media query expression.\n+ * <p>\n+ * It is evaluated against a context that provides the values that are referenced in the expression,\n+ * and evaluates to either {@code true} or {@code false}.\n+ *\/\n+public sealed interface MediaQuery\n+        permits ConstantExpression,\n+                ConjunctionExpression,\n+                DisjunctionExpression,\n+                FunctionExpression,\n+                NegationExpression {\n+\n+    \/**\n+     * Evaluates this media query against the provided context.\n+     *\n+     * @param context the evaluation context\n+     * @return {@code true} if the media query matches, {@code false} otherwise\n+     *\/\n+    boolean evaluate(MediaQueryContext context);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQuery.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.scene.ScenePreferences;\n+import javafx.application.ColorScheme;\n+\n+\/**\n+ * A media query is evaluated against a {@code MediaQueryContext}, which provides the media feature\n+ * values that can be referenced in a media query expression.\n+ *\/\n+public sealed interface MediaQueryContext permits ScenePreferences {\n+\n+    \/**\n+     * Provides the value for the {@code prefers-color-scheme} media feature.\n+     *\n+     * @return the color scheme\n+     *\/\n+    ColorScheme getColorScheme();\n+\n+    \/**\n+     * Provides the value for the {@code prefers-reduced-motion} media feature.\n+     *\n+     * @return {@code true} if the application should reduce motion\n+     *\/\n+    boolean isReducedMotion();\n+\n+    \/**\n+     * Provides the value for the {@code prefers-reduced-transparency} media feature.\n+     *\n+     * @return {@code true} if the application should reduce transparency\n+     *\/\n+    boolean isReducedTransparency();\n+\n+    \/**\n+     * Provides the value for the {@code prefers-reduced-data} media feature.\n+     *\n+     * @return {@code true} if the application should reduce internet traffic\n+     *\/\n+    boolean isReducedData();\n+\n+    \/**\n+     * Provides the value for the {@code prefers-persistent-scrollbars} media feature.\n+     *\n+     * @return {@code true} if the application should use persistent scroll bars\n+     *\/\n+    boolean isPersistentScrollBars();\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryContext.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,285 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+import com.sun.javafx.css.media.expression.NegationExpression;\n+import com.sun.javafx.css.parser.CssLexer;\n+import com.sun.javafx.css.parser.TokenStream;\n+import com.sun.javafx.css.parser.Token;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+\n+\/**\n+ * Parser for the media query grammar.\n+ * <p>\n+ * This parser implements the subset of the grammar that is required for JavaFX CSS.\n+ *\n+ * @see <a href=\"https:\/\/www.w3.org\/TR\/mediaqueries-5\/#mq-syntax\">Media query syntax<\/a>\n+ *\/\n+public final class MediaQueryParser {\n+\n+    private final BiConsumer<Token, String> errorHandler;\n+\n+    \/**\n+     * Creates a new {@code MediaQueryParser} instance.\n+     *\/\n+    public MediaQueryParser(BiConsumer<Token, String> errorHandler) {\n+        this.errorHandler = Objects.requireNonNull(errorHandler);\n+    }\n+\n+    \/**\n+     * Parses a {@code media-query-list} production.\n+     *\n+     * <pre>{@code\n+     *     <media-query-list> = <media-condition> [ , <media-condition> ]*\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return the expression\n+     *\/\n+    public List<MediaQuery> parseMediaQueryList(List<Token> tokens) {\n+        var stream = new TokenStream(tokens);\n+        var expressions = new ArrayList<MediaQuery>();\n+        boolean lastWasComma = false;\n+\n+        while (stream.consume() != null) {\n+            switch (stream.current().getType()) {\n+                case CssLexer.COMMA -> {\n+                    if (lastWasComma || expressions.isEmpty()) {\n+                        errorHandler.accept(stream.current(), \"Unexpected token\");\n+                    }\n+\n+                    lastWasComma = true;\n+                }\n+\n+                case CssLexer.IDENT, CssLexer.LPAREN -> {\n+                    lastWasComma = false;\n+                    stream.reconsume();\n+                    MediaQuery expression = parseMediaCondition(stream);\n+                    if (expression != null) {\n+                        expressions.add(expression);\n+                    } else {\n+                        while (stream.consumeIf(NOT_COMMA) != null) {\n+                            \/\/ If the expression is null, this means that we have encountered a parse error.\n+                            \/\/ Skip forward to the next comma and resume parsing with the next media query.\n+                        }\n+\n+                        \/\/ Invalid expressions always evaluate to false.\n+                        expressions.add(new ConstantExpression(false));\n+                    }\n+                }\n+\n+                default -> {\n+                    errorHandler.accept(stream.current(), \"Unexpected token\");\n+                    return expressions;\n+                }\n+            }\n+        }\n+\n+        return expressions;\n+    }\n+\n+    \/**\n+     * Parses a {@code media-condition} production.\n+     *\n+     * <pre>{@code\n+     *     <media-condition> = <media-not> | <media-in-parens> [ <media-and>* | <media-or>* ]\n+     *     <media-not> = not <media-in-parens>\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return the expression\n+     *\/\n+    private MediaQuery parseMediaCondition(TokenStream tokens) {\n+        \/\/ <media-not>\n+        if (tokens.consumeIf(NOT_KEYWORD) != null) {\n+            MediaQuery mediaInParens = parseMediaInParens(tokens);\n+            return mediaInParens != null ? new NegationExpression(mediaInParens) : null;\n+        }\n+\n+        List<MediaQuery> expressions = new ArrayList<>();\n+\n+        \/\/ <media-in-parens>\n+        MediaQuery expression = parseMediaInParens(tokens);\n+        if (expression == null) {\n+            return null;\n+        }\n+\n+        expressions.add(expression);\n+\n+        \/\/ <media-and>*\n+        if (!parseRepeatingMediaCondition(tokens, expressions, AND_KEYWORD, OR_KEYWORD)) {\n+            return null;\n+        }\n+\n+        if (expressions.size() >= 2) {\n+            return ConjunctionExpression.of(expressions);\n+        }\n+\n+        \/\/ <media-or>*\n+        if (!parseRepeatingMediaCondition(tokens, expressions, OR_KEYWORD, AND_KEYWORD)) {\n+            return null;\n+        }\n+\n+        if (expressions.size() >= 2) {\n+            return DisjunctionExpression.of(expressions);\n+        }\n+\n+        return expressions.getFirst();\n+    }\n+\n+    \/**\n+     * Parses a repeating {@code media-and} or {@code media-or} production.\n+     *\n+     * <pre>{@code\n+     *     <media-and> = and <media-in-parens>\n+     *     <media-or> = or <media-in-parens>\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return {@code true} if at least one {@code media-and} or {@code media-or} production was parsed\n+     *\/\n+    private boolean parseRepeatingMediaCondition(TokenStream tokens,\n+                                                 List<MediaQuery> expressions,\n+                                                 Predicate<Token> keyword,\n+                                                 Predicate<Token> otherKeyword) {\n+        while (tokens.consumeIf(keyword) != null) {\n+            MediaQuery expression = parseMediaInParens(tokens);\n+            if (expression == null) {\n+                return false;\n+            }\n+\n+            expressions.add(expression);\n+        }\n+\n+        if (expressions.size() >= 2) {\n+            Token nextToken = tokens.peek();\n+            if (nextToken != null && otherKeyword.test(nextToken)) {\n+                errorHandler.accept(tokens.consume(), \"Unexpected token\");\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    \/**\n+     * Parses a {@code media-in-parens} production.\n+     *\n+     * <pre>{@code\n+     *     <media-in-parens> = ( <media-condition> ) | <media-feature>\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return the expression\n+     *\/\n+    private MediaQuery parseMediaInParens(TokenStream tokens) {\n+        \/\/ <media-feature>\n+        if (tokens.matches(LPAREN, IDENT, RPAREN) || tokens.matches(LPAREN, IDENT, COLON)) {\n+            return parseMediaFeature(tokens);\n+        }\n+\n+        \/\/ ( <media-condition> )\n+        if (tokens.consumeIf(LPAREN) != null) {\n+            MediaQuery expression = parseMediaCondition(tokens);\n+\n+            if (tokens.consumeIf(RPAREN) == null) {\n+                errorHandler.accept(tokens.consume(), \"Expected RPAREN\");\n+                return null;\n+            }\n+\n+            return expression;\n+        }\n+\n+        errorHandler.accept(tokens.consume(), \"Expected LPAREN\");\n+        return null;\n+    }\n+\n+    \/**\n+     * Parses a {@code media-feature} production.\n+     *\n+     * <pre>{@code\n+     *     <media-feature> = ( [ <mf-plain> | <mf-boolean> ] )\n+     *     <mf-plain> = <ident> : <any>\n+     *     <mf-boolean> = <ident>\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return the expression\n+     *\/\n+    private MediaQuery parseMediaFeature(TokenStream tokens) {\n+        if (tokens.consumeIf(LPAREN) == null) {\n+            errorHandler.accept(tokens.consume(), \"Expected LPAREN\");\n+            return null;\n+        }\n+\n+        Token featureName = tokens.consumeIf(IDENT);\n+        if (featureName == null) {\n+            errorHandler.accept(tokens.consume(), \"Expected IDENT\");\n+            return null;\n+        }\n+\n+        Token featureValue = null;\n+        if (tokens.consumeIf(COLON) != null && (featureValue = tokens.consume()) == null) {\n+            while (tokens.peek() != null) tokens.consume(); \/\/ Skip forward to the last token\n+            errorHandler.accept(tokens.current(), \"Expected token\");\n+            return null;\n+        }\n+\n+        if (tokens.consumeIf(RPAREN) == null) {\n+            errorHandler.accept(tokens.consume(), \"Expected RPAREN\");\n+            return null;\n+        }\n+\n+        try {\n+            return MediaFeatures.featureQueryExpression(\n+                featureName.getText(),\n+                featureValue != null ? featureValue.getText() : null);\n+        } catch (IllegalArgumentException ex) {\n+            errorHandler.accept(featureValue, ex.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private static final Predicate<Token> IDENT = token -> token.getType() == CssLexer.IDENT;\n+    private static final Predicate<Token> LPAREN = token -> token.getType() == CssLexer.LPAREN;\n+    private static final Predicate<Token> RPAREN = token -> token.getType() == CssLexer.RPAREN;\n+    private static final Predicate<Token> COLON = token -> token.getType() == CssLexer.COLON;\n+    private static final Predicate<Token> NOT_COMMA = token -> token.getType() != CssLexer.COMMA;\n+    private static final Predicate<Token> NOT_KEYWORD = token -> equalsIdentIgnoreCase(token, \"not\");\n+    private static final Predicate<Token> AND_KEYWORD = token -> equalsIdentIgnoreCase(token, \"and\");\n+    private static final Predicate<Token> OR_KEYWORD = token -> equalsIdentIgnoreCase(token, \"or\");\n+\n+    private static boolean equalsIdentIgnoreCase(Token token, String value) {\n+        return token.getType() == CssLexer.IDENT && value.equalsIgnoreCase(token.getText());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryParser.java","additions":285,"deletions":0,"binary":false,"changes":285,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import com.sun.javafx.css.media.expression.NegationExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+import javafx.css.StyleConverter;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+\/**\n+ * Serializes and deserializes a {@link MediaQuery} expression into and from a binary representation.\n+ *\/\n+public final class MediaQuerySerializer {\n+\n+    private MediaQuerySerializer() {}\n+\n+    \/**\n+     * The order of {@code QueryType} enum values is important!\n+     * It is part of the binary serialization protocol for media query expressions.\n+     *\/\n+    private enum QueryType {\n+        CONSTANT,\n+        FUNCTION,\n+        CONJUNCTION,\n+        DISJUNCTION,\n+        NEGATION;\n+\n+        static QueryType of(MediaQuery expression) {\n+            return switch (expression) {\n+                case ConstantExpression _ -> CONSTANT;\n+                case FunctionExpression<?> _ -> FUNCTION;\n+                case ConjunctionExpression _ -> CONJUNCTION;\n+                case DisjunctionExpression _ -> DISJUNCTION;\n+                case NegationExpression _ -> NEGATION;\n+            };\n+        }\n+\n+        static final QueryType[] VALUES = values();\n+    }\n+\n+    public static void writeBinary(MediaQuery mediaQuery,\n+                                   DataOutputStream os,\n+                                   StyleConverter.StringStore stringStore) throws IOException {\n+        os.writeByte(QueryType.of(mediaQuery).ordinal());\n+\n+        switch (mediaQuery) {\n+            case ConstantExpression expr ->\n+                os.writeBoolean(expr.value());\n+\n+            case FunctionExpression<?> expr -> {\n+                os.writeInt(stringStore.addString(expr.featureName()));\n+\n+                if (expr.featureValue() != null) {\n+                    os.writeInt(stringStore.addString(expr.featureValue()));\n+                } else {\n+                    os.writeInt(-1);\n+                }\n+            }\n+\n+            case NegationExpression expr ->\n+                writeBinary(expr.expression(), os, stringStore);\n+\n+            case ConjunctionExpression expr -> {\n+                writeBinary(expr.left(), os, stringStore);\n+                writeBinary(expr.right(), os, stringStore);\n+            }\n+\n+            case DisjunctionExpression expr -> {\n+                writeBinary(expr.left(), os, stringStore);\n+                writeBinary(expr.right(), os, stringStore);\n+            }\n+        }\n+    }\n+\n+    public static MediaQuery readBinary(DataInputStream is, String[] strings) throws IOException {\n+        return switch (QueryType.VALUES[is.readByte()]) {\n+            case FUNCTION -> {\n+                String featureName = strings[is.readInt()];\n+                int featureValueIdx = is.readInt();\n+                String featureValue = featureValueIdx >= 0 ? strings[featureValueIdx] : null;\n+                yield MediaFeatures.featureQueryExpression(featureName, featureValue);\n+            }\n+            case CONSTANT -> new ConstantExpression(is.readBoolean());\n+            case NEGATION -> new NegationExpression(readBinary(is, strings));\n+            case CONJUNCTION -> new ConjunctionExpression(readBinary(is, strings), readBinary(is, strings));\n+            case DISJUNCTION -> new DisjunctionExpression(readBinary(is, strings), readBinary(is, strings));\n+        };\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQuerySerializer.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import javafx.css.StyleConverter;\n+import javafx.scene.Scene;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+\/**\n+ * CSS media rules are @-rules that contain media queries. A media query tests the \"external\"\n+ * configuration of a {@link Scene}, and is independent of its scene graph content.\n+ *\/\n+public final class MediaRule {\n+\n+    private final List<MediaQuery> queries;\n+    private final MediaRule parent;\n+    private final int hash;\n+\n+    public MediaRule(List<MediaQuery> queries, MediaRule parent) {\n+        this.queries = List.copyOf(queries);\n+        this.parent = parent;\n+        this.hash = queries.hashCode();\n+    }\n+\n+    \/**\n+     * Returns the list of media queries.\n+     *\n+     * @return the list of media queries\n+     *\/\n+    public List<MediaQuery> getQueries() {\n+        return queries;\n+    }\n+\n+    \/**\n+     * Returns the parent media rule if this media rule is nested.\n+     *\n+     * @return the parent {@code MediaRule}, or {@code null}\n+     *\/\n+    public MediaRule getParent() {\n+        return parent;\n+    }\n+\n+    \/**\n+     * Evaluates whether any of the media queries is {@code true}.\n+     *\n+     * @param context the evaluation context\n+     * @return {@code true} if any of the media queries is {@code true} or if the list is empty,\n+     *         {@code false} otherwise\n+     *\/\n+    public boolean evaluate(MediaQueryContext context) {\n+        if (parent != null && !parent.evaluate(context)) {\n+            return false;\n+        }\n+\n+        if (queries.isEmpty()) {\n+            return true;\n+        }\n+\n+        for (int i = 0, max = queries.size(); i < max; i++) {\n+            if (queries.get(i).evaluate(context)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public void writeBinary(DataOutputStream stream, StyleConverter.StringStore stringStore) throws IOException {\n+        stream.writeInt(queries.size());\n+\n+        for (MediaQuery query : queries) {\n+            MediaQuerySerializer.writeBinary(query, stream, stringStore);\n+        }\n+\n+        stream.writeBoolean(parent != null);\n+\n+        if (parent != null) {\n+            parent.writeBinary(stream, stringStore);\n+        }\n+    }\n+\n+    public static MediaRule readBinary(DataInputStream stream, String[] strings) throws IOException {\n+        int size = stream.readInt();\n+        var queries = new MediaQuery[size];\n+\n+        for (int i = 0; i < size; i++) {\n+            queries[i] = MediaQuerySerializer.readBinary(stream, strings);\n+        }\n+\n+        boolean hasParent = stream.readBoolean();\n+\n+        return new MediaRule(List.of(queries), hasParent ? readBinary(stream, strings) : null);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof MediaRule rule && rule.getQueries().equals(queries);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return hash;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaRule.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/**\n+ * Logical conjunction of the specified expressions.\n+ *\/\n+public record ConjunctionExpression(MediaQuery left, MediaQuery right) implements MediaQuery {\n+\n+    public ConjunctionExpression {\n+        Objects.requireNonNull(left, \"left cannot be null\");\n+        Objects.requireNonNull(right, \"right cannot be null\");\n+    }\n+\n+    \/**\n+     * Returns the conjunction of all specified expressions.\n+     *\/\n+    public static ConjunctionExpression of(List<MediaQuery> expressions) {\n+        if (expressions.size() < 2) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        var result = new ConjunctionExpression(expressions.get(0), expressions.get(1));\n+\n+        for (int i = 2; i < expressions.size(); i++) {\n+            result = new ConjunctionExpression(result, expressions.get(i));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return left.evaluate(context) && right.evaluate(context);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + left.toString() + \" and \" + right.toString() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/ConjunctionExpression.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+\n+\/**\n+ * Evaluates to a constant boolean value.\n+ *\/\n+public record ConstantExpression(boolean value) implements MediaQuery {\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + value + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/ConstantExpression.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/**\n+ * Logical disjunction of the specified expressions.\n+ *\/\n+public record DisjunctionExpression(MediaQuery left, MediaQuery right) implements MediaQuery {\n+\n+    public DisjunctionExpression {\n+        Objects.requireNonNull(left, \"left cannot be null\");\n+        Objects.requireNonNull(right, \"right cannot be null\");\n+    }\n+\n+    \/**\n+     * Returns the disjunction of all specified expressions.\n+     *\/\n+    public static DisjunctionExpression of(List<MediaQuery> expressions) {\n+        if (expressions.size() < 2) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        var result = new DisjunctionExpression(expressions.get(0), expressions.get(1));\n+\n+        for (int i = 2; i < expressions.size(); i++) {\n+            result = new DisjunctionExpression(result, expressions.get(i));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return left.evaluate(context) || right.evaluate(context);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + left.toString() + \" or \" + right.toString() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/DisjunctionExpression.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+\/**\n+ * Evaluates to {@code true} if the return value of the specified function is equal to {@code value}.\n+ *\n+ * @param featureName the feature name\n+ * @param featureValue the feature value, or {@code null} to indicate a boolean context\n+ * @param function the evaluation function\n+ * @param value the expected return value of the function\n+ *\/\n+public record FunctionExpression<T>(String featureName,\n+                                    String featureValue,\n+                                    Function<MediaQueryContext, T> function,\n+                                    T value) implements MediaQuery {\n+\n+    public FunctionExpression {\n+        Objects.requireNonNull(featureName, \"featureName cannot be null\");\n+        Objects.requireNonNull(function, \"function cannot be null\");\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return Objects.equals(function.apply(context), value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof FunctionExpression<?> expr\n+            && expr.featureName.equals(featureName)\n+            && Objects.equals(expr.featureValue, featureValue)\n+            && Objects.equals(expr.value, value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(featureName, featureValue, value);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + (featureValue != null ? featureName + \": \" + featureValue : featureName) + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/FunctionExpression.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import java.util.Objects;\n+\n+\/**\n+ * Logical negation of the specified expression.\n+ *\/\n+public record NegationExpression(MediaQuery expression) implements MediaQuery {\n+\n+    public NegationExpression {\n+        Objects.requireNonNull(expression, \"expression cannot be null\");\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return !expression.evaluate(context);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"not \" + expression;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/NegationExpression.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-package javafx.css;\n+package com.sun.javafx.css.parser;\n@@ -33,44 +33,39 @@\n-import com.sun.javafx.css.parser.LexerState;\n-import com.sun.javafx.css.parser.Recognizer;\n-import com.sun.javafx.css.parser.Token;\n-\n-\n-final class CssLexer {\n-    final static int STRING = 10;\n-    final static int IDENT = 11;\n-    final static int FUNCTION = 12;\n-    final static int NUMBER = 13;\n-    final static int CM = 14;\n-    final static int EMS = 15;\n-    final static int EXS = 16;\n-    final static int IN = 17;\n-    final static int MM = 18;\n-    final static int PC = 19;\n-    final static int PT = 20;\n-    final static int PX = 21;\n-    final static int PERCENTAGE = 22;\n-    final static int DEG = 23;\n-    final static int GRAD = 24;\n-    final static int RAD = 25;\n-    final static int TURN = 26;\n-    final static int GREATER = 27;\n-    final static int LBRACE = 28;\n-    final static int RBRACE = 29;\n-    final static int SEMI = 30;\n-    final static int COLON = 31;\n-    final static int SOLIDUS = 32;\n-    final static int STAR = 33;\n-    final static int LPAREN = 34;\n-    final static int RPAREN = 35;\n-    final static int COMMA = 36;\n-    final static int HASH = 37;\n-    final static int DOT = 38;\n-    final static int IMPORTANT_SYM = 39;\n-    final static int WS = 40;\n-    final static int NL = 41;\n-    final static int FONT_FACE = 42;\n-    final static int URL = 43;\n-    final static int IMPORT = 44;\n-    final static int SECONDS = 45;\n-    final static int MS = 46;\n-    final static int AT_KEYWORD = 47;\n+public final class CssLexer {\n+    public final static int STRING = 10;\n+    public final static int IDENT = 11;\n+    public final static int FUNCTION = 12;\n+    public final static int NUMBER = 13;\n+    public final static int CM = 14;\n+    public final static int EMS = 15;\n+    public final static int EXS = 16;\n+    public final static int IN = 17;\n+    public final static int MM = 18;\n+    public final static int PC = 19;\n+    public final static int PT = 20;\n+    public final static int PX = 21;\n+    public final static int PERCENTAGE = 22;\n+    public final static int DEG = 23;\n+    public final static int GRAD = 24;\n+    public final static int RAD = 25;\n+    public final static int TURN = 26;\n+    public final static int GREATER = 27;\n+    public final static int LBRACE = 28;\n+    public final static int RBRACE = 29;\n+    public final static int SEMI = 30;\n+    public final static int COLON = 31;\n+    public final static int SOLIDUS = 32;\n+    public final static int STAR = 33;\n+    public final static int LPAREN = 34;\n+    public final static int RPAREN = 35;\n+    public final static int COMMA = 36;\n+    public final static int HASH = 37;\n+    public final static int DOT = 38;\n+    public final static int IMPORTANT_SYM = 39;\n+    public final static int WS = 40;\n+    public final static int NL = 41;\n+    public final static int FONT_FACE = 42;\n+    public final static int URL = 43;\n+    public final static int IMPORT = 44;\n+    public final static int SECONDS = 45;\n+    public final static int MS = 46;\n+    public final static int AT_KEYWORD = 47;\n@@ -351,1 +346,1 @@\n-    CssLexer() {\n+    public CssLexer() {\n@@ -357,1 +352,1 @@\n-    void setReader(Reader reader) {\n+    public void setReader(Reader reader) {\n@@ -749,1 +744,1 @@\n-    Token nextToken() {\n+    public Token nextToken() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/parser\/CssLexer.java","additions":44,"deletions":49,"binary":false,"changes":93,"previous_filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssLexer.java","status":"renamed"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.parser;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+public final class TokenStream {\n+\n+    private final List<Token> source;\n+    private final int size;\n+    private int currentIndex = -1;\n+    private Token currentItem;\n+\n+    public TokenStream(List<Token> source) {\n+        this.source = source;\n+        this.size = source.size();\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    public Token current() {\n+        return currentItem;\n+    }\n+\n+    public Token consume() {\n+        if (currentIndex < size - 1) {\n+            return currentItem = source.get(++currentIndex);\n+        }\n+\n+        if (currentIndex < size) {\n+            currentIndex++;\n+        }\n+\n+        return null;\n+    }\n+\n+    public Token consumeIf(Predicate<Token> predicate) {\n+        Token nextToken = consume();\n+        if (nextToken != null && predicate.test(nextToken)) {\n+            return nextToken;\n+        }\n+\n+        reconsume();\n+        return null;\n+    }\n+\n+    public void reconsume() {\n+        if (currentIndex > 0) {\n+            currentItem = source.get(--currentIndex);\n+        } else {\n+            currentItem = null;\n+            currentIndex = -1;\n+        }\n+    }\n+\n+    public Token peek() {\n+        return currentIndex < size - 1 ? source.get(currentIndex + 1) : null;\n+    }\n+\n+    \/**\n+     * Returns whether the next tokens in the stream satisfy the specified predicates.\n+     *\/\n+    @SafeVarargs\n+    public final boolean matches(Predicate<Token>... predicates) {\n+        int index = currentIndex;\n+\n+        try {\n+            for (Predicate<Token> predicate : predicates) {\n+                if (consumeIf(predicate) == null) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        } finally {\n+            currentIndex = index;\n+            currentItem = index >= 0 ? source.get(index) : null;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/parser\/TokenStream.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import com.sun.javafx.css.media.MediaQueryContext;\n@@ -328,0 +329,4 @@\n+    public static MediaQueryContext getMediaQueryContext(Node node) {\n+        return nodeAccessor.getMediaQueryContext(node);\n+    }\n+\n@@ -396,0 +401,1 @@\n+        MediaQueryContext getMediaQueryContext(Node node);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import java.util.List;\n+import javafx.application.ColorScheme;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.stage.Window;\n+\n+public final class ScenePreferences implements Scene.Preferences, MediaQueryContext {\n+\n+    private final Scene scene;\n+\n+    public ScenePreferences(Scene scene) {\n+        this.scene = scene;\n+\n+        scene.windowProperty()\n+            .flatMap(Window::showingProperty)\n+            .orElse(false)\n+            .subscribe(this::onShowingChanged);\n+    }\n+\n+    private final MediaProperty<ColorScheme> colorScheme = new MediaProperty<>(\n+            \"colorScheme\", PlatformImpl.getPlatformPreferences().colorSchemeProperty());\n+\n+    @Override\n+    public ObjectProperty<ColorScheme> colorSchemeProperty() {\n+        return colorScheme;\n+    }\n+\n+    @Override\n+    public ColorScheme getColorScheme() {\n+        return colorScheme.get();\n+    }\n+\n+    @Override\n+    public void setColorScheme(ColorScheme colorScheme) {\n+        this.colorScheme.set(colorScheme);\n+    }\n+\n+    private final MediaProperty<Boolean> persistentScrollBars = new MediaProperty<>(\n+            \"persistentScrollBars\", PlatformImpl.getPlatformPreferences().persistentScrollBarsProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> persistentScrollBarsProperty() {\n+        return persistentScrollBars;\n+    }\n+\n+    @Override\n+    public boolean isPersistentScrollBars() {\n+        return persistentScrollBars.get();\n+    }\n+\n+    @Override\n+    public void setPersistentScrollBars(Boolean value) {\n+        this.persistentScrollBars.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedMotion = new MediaProperty<>(\n+            \"reducedMotion\", PlatformImpl.getPlatformPreferences().reducedMotionProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedMotionProperty() {\n+        return reducedMotion;\n+    }\n+\n+    @Override\n+    public boolean isReducedMotion() {\n+        return reducedMotion.get();\n+    }\n+\n+    @Override\n+    public void setReducedMotion(Boolean value) {\n+        this.reducedMotion.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedTransparency = new MediaProperty<>(\n+            \"reducedTransparency\", PlatformImpl.getPlatformPreferences().reducedTransparencyProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedTransparencyProperty() {\n+        return reducedTransparency;\n+    }\n+\n+    @Override\n+    public boolean isReducedTransparency() {\n+        return reducedTransparency.get();\n+    }\n+\n+    @Override\n+    public void setReducedTransparency(Boolean value) {\n+        this.reducedTransparency.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedData = new MediaProperty<>(\n+            \"reducedData\", PlatformImpl.getPlatformPreferences().reducedDataProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedDataProperty() {\n+        return reducedData;\n+    }\n+\n+    @Override\n+    public boolean isReducedData() {\n+        return reducedData.get();\n+    }\n+\n+    @Override\n+    public void setReducedData(Boolean value) {\n+        this.reducedData.set(value);\n+    }\n+\n+    private void onShowingChanged(Boolean showing) {\n+        for (var property : List.of(colorScheme, persistentScrollBars, reducedData,\n+                                    reducedMotion, reducedTransparency)) {\n+            if (showing) {\n+                property.connect();\n+            } else {\n+                property.disconnect();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Property implementation for media features that causes CSS to be re-applied when the property\n+     * value is changed. This is required to re-evaluate media queries in stylesheets.\n+     *\/\n+    private class MediaProperty<T> extends NullCoalescingPropertyBase<T> {\n+        private final String name;\n+\n+        MediaProperty(String name, ObservableValue<T> defaultValue) {\n+            super(defaultValue);\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public Object getBean() {\n+            return scene;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        protected void onInvalidated() {\n+            Node root = scene.getRoot();\n+            if (root != null) {\n+                NodeHelper.reapplyCSS(root);\n+            }\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/ScenePreferences.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import com.sun.javafx.css.media.MediaRule;\n+import com.sun.javafx.css.parser.CssLexer;\n@@ -37,0 +39,1 @@\n+import com.sun.javafx.css.media.MediaQueryParser;\n@@ -291,0 +294,1 @@\n+                        null, \/\/ inline styles don't have media rules\n@@ -4155,0 +4159,2 @@\n+        MediaRule mediaRule = null;\n+        int expectedRBraces = 0;\n@@ -4238,0 +4244,14 @@\n+            } else if (\"media\".equals(keyword)) {\n+                mediaRule = mediaRule(lexer, mediaRule);\n+\n+                if (currentToken != null) {\n+                    if (currentToken.getType() == CssLexer.LBRACE) {\n+                        expectedRBraces++;\n+                    }\n+\n+                    currentToken = nextToken(lexer);\n+                    break; \/\/ break out of the loop here, as we might encounter a selector next\n+                }\n+            } else {\n+                \/\/ Skip the unexpected at-rule.\n+                skipAtRule(lexer);\n@@ -4244,0 +4264,20 @@\n+            if (currentToken.getType() == CssLexer.AT_KEYWORD) {\n+                currentToken = lexer.nextToken();\n+                String keyword = currentToken.getText().toLowerCase(Locale.ROOT);\n+                if (\"media\".equals(keyword)) {\n+                    mediaRule = mediaRule(lexer, mediaRule);\n+\n+                    if (currentToken != null) {\n+                        if (currentToken.getType() == CssLexer.LBRACE) {\n+                            expectedRBraces++;\n+                        }\n+\n+                        currentToken = nextToken(lexer);\n+                        continue;\n+                    }\n+                } else {\n+                    \/\/ Skip the unexpected at-rule.\n+                    skipAtRule(lexer);\n+                }\n+            }\n+\n@@ -4285,1 +4325,1 @@\n-            stylesheet.getRules().add(new Rule(selectors, declarations));\n+            stylesheet.getRules().add(new Rule(mediaRule, selectors, declarations));\n@@ -4289,0 +4329,12 @@\n+            while (expectedRBraces > 0) {\n+                if (!consumeRBrace(lexer)) {\n+                    return;\n+                }\n+\n+                if (mediaRule != null) {\n+                    mediaRule = mediaRule.getParent();\n+                }\n+\n+                currentToken = nextToken(lexer);\n+                expectedRBraces--;\n+            }\n@@ -4290,0 +4342,1 @@\n+\n@@ -4293,0 +4346,67 @@\n+    private void skipAtRule(CssLexer lexer) {\n+        String msg = MessageFormat.format(\n+            \"Unexpected at-rule [{0,number,#},{1,number,#}]\",\n+            currentToken.getLine(), currentToken.getOffset());\n+\n+        ParseError error = createError(msg);\n+        if (LOGGER.isLoggable(Level.WARNING)) {\n+            LOGGER.warning(error.toString());\n+        }\n+\n+        reportError(error);\n+\n+        while ((currentToken = lexer.nextToken()) != null\n+                && currentToken.getType() != CssLexer.SEMI\n+                && currentToken.getType() != CssLexer.RBRACE) {\n+            \/\/ Skip forward to the next SEMI or RBRACE.\n+        }\n+    }\n+\n+    private boolean consumeRBrace(CssLexer lexer) {\n+        if (currentToken == null || currentToken.getType() != CssLexer.RBRACE) {\n+            int line = currentToken != null ? currentToken.getLine() : -1;\n+            int pos = currentToken != null ? currentToken.getOffset() : -1;\n+            String msg = String.format(\"Expected RBRACE at [%d,%d]\", line, pos);\n+            ParseError error = createError(msg);\n+            if (LOGGER.isLoggable(Level.WARNING)) {\n+                LOGGER.warning(error.toString());\n+            }\n+\n+            reportError(error);\n+            currentToken = null;\n+            return false;\n+        }\n+\n+        currentToken = lexer.nextToken();\n+        return true;\n+    }\n+\n+    private MediaRule mediaRule(CssLexer lexer, MediaRule mediaRule) {\n+        \/\/ The media query expression contains all tokens (except for WS and NL) up to the\n+        \/\/ next SEMI or LBRACE. We collect all of these tokens and hand them over to the\n+        \/\/ special-purpose MediaQueryParser.\n+        List<Token> mediaQueryTokens = new ArrayList<>();\n+        while ((currentToken = lexer.nextToken()) != null\n+                && currentToken.getType() != CssLexer.SEMI\n+                && currentToken.getType() != CssLexer.LBRACE) {\n+            if (currentToken.getType() != CssLexer.WS && currentToken.getType() != CssLexer.NL) {\n+                mediaQueryTokens.add(currentToken);\n+            }\n+        }\n+\n+        var mediaQueryParser = new MediaQueryParser((token, errorMsg) -> {\n+            String formattedErrorMsg = token != null\n+                ? String.format(\"%s at [%d,%d]\", errorMsg, token.getLine(), token.getOffset())\n+                : errorMsg;\n+\n+            ParseError error = createError(formattedErrorMsg);\n+            if (LOGGER.isLoggable(Level.WARNING)) {\n+                LOGGER.warning(error.toString());\n+            }\n+\n+            reportError(error);\n+        });\n+\n+        return new MediaRule(mediaQueryParser.parseMediaQueryList(mediaQueryTokens), mediaRule);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssParser.java","additions":122,"deletions":2,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import com.sun.javafx.css.RuleHelper;\n+import com.sun.javafx.css.media.MediaRule;\n@@ -51,0 +53,11 @@\n+    static {\n+        RuleHelper.setAccessor(new RuleHelper.Accessor() {\n+            @Override\n+            public MediaRule getMediaRule(Rule rule) {\n+                return rule.mediaRule;\n+            }\n+        });\n+    }\n+\n+    private final MediaRule mediaRule;\n+\n@@ -172,3 +185,2 @@\n-\n-    Rule(List<Selector> selectors, List<Declaration> declarations) {\n-\n+    Rule(MediaRule mediaRule, List<Selector> selectors, List<Declaration> declarations) {\n+        this.mediaRule = mediaRule;\n@@ -177,1 +189,1 @@\n-        serializedDecls = null;\n+        this.serializedDecls = null;\n@@ -196,2 +208,2 @@\n-    private Rule(List<Selector> selectors, byte[] buf, int bssVersion) {\n-\n+    private Rule(MediaRule mediaRule, List<Selector> selectors, byte[] buf, int bssVersion) {\n+        this.mediaRule = mediaRule;\n@@ -330,0 +342,6 @@\n+        if (mediaRule != null) {\n+            os.writeBoolean(true); \/\/ flag to indicate whether we have a media rule\n+            mediaRule.writeBinary(os, stringStore);\n+        } else {\n+            os.writeBoolean(false);\n+        }\n@@ -364,0 +382,9 @@\n+        MediaRule mediaRule = null;\n+\n+        if (bssVersion >= 7) {\n+            boolean hasMediaRule = is.readBoolean();\n+            if (hasMediaRule) {\n+                mediaRule = MediaRule.readBinary(is, strings);\n+            }\n+        }\n+\n@@ -379,1 +406,1 @@\n-            return new Rule(selectors, declarations);\n+            return new Rule(null, selectors, declarations);\n@@ -389,1 +416,1 @@\n-        return new Rule(selectors, buf, bssVersion);\n+        return new Rule(mediaRule, selectors, buf, bssVersion);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Rule.java","additions":36,"deletions":9,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import com.sun.javafx.css.RuleHelper;\n@@ -66,0 +67,1 @@\n+     * Version 7: media queries\n@@ -67,1 +69,1 @@\n-    final static int BINARY_CSS_VERSION = 6;\n+    final static int BINARY_CSS_VERSION = 7;\n@@ -416,1 +418,1 @@\n-            importedRules.add(new Rule(selectors, declarations));\n+            importedRules.add(new Rule(RuleHelper.getMediaRule(rule), selectors, declarations));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Stylesheet.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,0 +134,1 @@\n+import com.sun.javafx.css.media.MediaQueryContext;\n@@ -679,0 +680,5 @@\n+\n+            @Override\n+            public MediaQueryContext getMediaQueryContext(Node node) {\n+                return node.getMediaQueryContext();\n+            }\n@@ -10120,0 +10126,5 @@\n+    private MediaQueryContext getMediaQueryContext() {\n+        Scene scene = getScene();\n+        return scene != null ? scene.preferences : null;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.scene.ScenePreferences;\n@@ -36,0 +37,1 @@\n+import com.sun.javafx.css.media.MediaQueryContext;\n@@ -63,0 +65,1 @@\n+import javafx.application.ColorScheme;\n@@ -6252,0 +6255,12 @@\n+    final ScenePreferences preferences = new ScenePreferences(this);\n+\n+    \/**\n+     * Gets the scene preferences that can be queried with {@code @media} CSS rules.\n+     *\n+     * @return the {@code Preferences} instance\n+     * @since 25\n+     *\/\n+    public final Preferences getPreferences() {\n+        return preferences;\n+    }\n+\n@@ -6509,0 +6524,203 @@\n+\n+    \/**\n+     * Contains preferences of the scene that can be queried with {@code @media} CSS rules.\n+     * <p>\n+     * All preferences are <em>null-coalesting<\/em> properties: if set to {@code null} (using the setter method,\n+     * {@link Property#setValue(Object)}, or with a binding), the property evalutes to the value of the corresponding\n+     * platform-provided preference (see {@link Platform.Preferences}. Likewise, specifying a non-null value for any\n+     * given property will override the platform-provided value.\n+     *\n+     * @see Platform.Preferences\n+     * @since 25\n+     *\/\n+    public sealed interface Preferences permits ScenePreferences {\n+\n+        \/**\n+         * Specifies whether the scene should prefer light text on dark backgrounds, or dark text\n+         * on light backgrounds.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-color-scheme<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>light<\/code> | <code>dark<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th><td>not applicable<\/td><\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code colorScheme} property\n+         * @defaultValue {@link Platform.Preferences#getColorScheme()}\n+         * @see Platform.Preferences#colorSchemeProperty()\n+         *\/\n+        ObjectProperty<ColorScheme> colorSchemeProperty();\n+\n+        ColorScheme getColorScheme();\n+\n+        void setColorScheme(ColorScheme colorScheme);\n+\n+        \/**\n+         * Specifies whether applications should always show scroll bars. If set to {@code false}, applications\n+         * may choose to hide scroll bars that are not actively used, or make them smaller or less noticeable.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-persistent-scrollbars<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>persistent<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code persistentScrollBars} property\n+         * @defaultValue {@link Platform.Preferences#isPersistentScrollBars()}\n+         * @see Platform.Preferences#persistentScrollBarsProperty()\n+         *\/\n+        ObjectProperty<Boolean> persistentScrollBarsProperty();\n+\n+        \/**\n+         * Gets the value of the {@code persistentScrollBars} property.\n+         *\n+         * @return the value of the {@code persistentScrollBars} property\n+         * @see #persistentScrollBarsProperty()\n+         * @see #setPersistentScrollBars(Boolean)\n+         *\/\n+        boolean isPersistentScrollBars();\n+\n+        \/**\n+         * Sets the value of the {@code persistentScrollBars} property.\n+         *\n+         * @param value the value\n+         * @see #persistentScrollBarsProperty()\n+         * @see #isPersistentScrollBars()\n+         *\/\n+        void setPersistentScrollBars(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of non-essential animations,\n+         * reducing discomfort for users who experience motion sickness or vertigo.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-motion<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedMotion} property\n+         * @defaultValue {@link Platform.Preferences#isReducedMotion()}\n+         * @see Platform.Preferences#reducedMotionProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedMotionProperty();\n+\n+        \/**\n+         * Gets the value of the {@code reducedMotion} property.\n+         *\n+         * @return the value of the {@code reducedMotion} property\n+         * @see #reducedMotionProperty()\n+         * @see #setReducedMotion(Boolean)\n+         *\/\n+        boolean isReducedMotion();\n+\n+        \/**\n+         * Sets the value of the {@code reducedMotion} property.\n+         *\n+         * @param value the value\n+         * @see #reducedMotionProperty()\n+         * @see #isReducedMotion()\n+         *\/\n+        void setReducedMotion(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of transparent or translucent\n+         * layer effects, which can help to increase contrast and readability for some users.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-transparency<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedTransparency} property\n+         * @defaultValue {@link Platform.Preferences#isReducedTransparency()}\n+         * @see Platform.Preferences#reducedTransparencyProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedTransparencyProperty();\n+\n+        \/**\n+         * Gets the value of the {@code reducedTransparency} property.\n+         *\n+         * @return the value of the {@code reducedTransparency} property\n+         * @see #reducedTransparencyProperty()\n+         * @see #setReducedTransparency(Boolean)\n+         *\/\n+        boolean isReducedTransparency();\n+\n+        \/**\n+         * Sets the value of the {@code reducedTransparency} property.\n+         *\n+         * @param value the value\n+         * @see #reducedTransparencyProperty()\n+         * @see #isReducedTransparency()\n+         *\/\n+        void setReducedTransparency(Boolean value);\n+\n+        \/**\n+         * Specifies whether the scene should minimize the amount of internet traffic, which users\n+         * might request because they are on a metered network or a limited data plan.\n+         * <p>\n+         * This property corresponds to the following CSS media feature:\n+         * <table class=\"striped\">\n+         *     <caption>Media Feature<\/caption>\n+         *     <tbody>\n+         *         <tr><th>Name<\/th><td><code>prefers-reduced-data<\/code><\/td><\/tr>\n+         *         <tr><th>For<\/th><td><code>@media<\/code><\/td><\/tr>\n+         *         <tr><th>Value<\/th><td><code>no-preference<\/code> | <code>reduce<\/code><\/td><\/tr>\n+         *         <tr><th>Boolean Context<\/th>\n+         *             <td><code>no-preference<\/code> evaluates as <code>false<\/code><\/td>\n+         *         <\/tr>\n+         *     <\/tbody>\n+         * <\/table>\n+         *\n+         * @return the {@code reducedData} property\n+         * @defaultValue {@link Platform.Preferences#isReducedData()}\n+         * @see Platform.Preferences#reducedDataProperty()\n+         *\/\n+        ObjectProperty<Boolean> reducedDataProperty();\n+\n+        \/**\n+         * Gets the value of the {@code reducedData} property.\n+         *\n+         * @return the value of the {@code reducedData} property\n+         * @see #reducedDataProperty()\n+         * @see #setReducedData(Boolean)\n+         *\/\n+        boolean isReducedData();\n+\n+        \/**\n+         * Sets the value of the {@code reducedData} property.\n+         *\n+         * @param value the value\n+         * @see #reducedDataProperty()\n+         * @see #isReducedData()\n+         *\/\n+        void setReducedData(Boolean value);\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":218,"deletions":0,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.javafx.css.parser;\n-\n-public class TokenShim {\n-\n-    public static final int EOF = Token.EOF;\n-    public static final int INVALID = Token.INVALID;\n-    public static final int SKIP = Token.SKIP;\n-\n-    public final static TokenShim EOF_TOKEN = new TokenShim(Token.EOF_TOKEN);\n-    public final static TokenShim INVALID_TOKEN = new TokenShim(Token.INVALID_TOKEN);\n-    public final static TokenShim SKIP_TOKEN = new TokenShim(Token.SKIP_TOKEN);\n-\n-    private final Token token;\n-\n-    public TokenShim(int type, String text, int line, int offset) {\n-        token = new Token(type, text, line, offset);\n-    }\n-\n-    public TokenShim(int type, String text) {\n-        token = new Token(type, text);\n-    }\n-\n-    public TokenShim(Token t) {\n-        token = t;\n-    }\n-\n-    public int getType() {\n-        return token.getType();\n-    }\n-\n-    public int getLine() {\n-        return token.getLine();\n-    }\n-\n-    public int getOffset() {\n-        return token.getOffset();\n-    }\n-\n-    public String getText() {\n-        return token.getText();\n-    }\n-\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/javafx\/css\/parser\/TokenShim.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package javafx.css;\n-\n-import com.sun.javafx.css.parser.Token;\n-import com.sun.javafx.css.parser.TokenShim;\n-import java.io.Reader;\n-\n-public class CssLexerShim {\n-\n-    public final static int STRING = CssLexer.STRING;\n-    public final static int IDENT = CssLexer.IDENT;\n-    public final static int FUNCTION = CssLexer.FUNCTION;\n-    public final static int NUMBER = CssLexer.NUMBER;\n-    public final static int CM = CssLexer.CM;\n-    public final static int EMS = CssLexer.EMS;\n-    public final static int EXS = CssLexer.EXS;\n-    public final static int IN = CssLexer.IN;\n-    public final static int MM = CssLexer.MM;\n-    public final static int PC = CssLexer.PC;\n-    public final static int PT = CssLexer.PT;\n-    public final static int PX = CssLexer.PX;\n-    public final static int PERCENTAGE = CssLexer.PERCENTAGE;\n-    public final static int DEG = CssLexer.DEG;\n-    public final static int GRAD = CssLexer.GRAD;\n-    public final static int RAD = CssLexer.RAD;\n-    public final static int TURN = CssLexer.TURN;\n-    public final static int GREATER = CssLexer.GREATER;\n-    public final static int LBRACE = CssLexer.LBRACE;\n-    public final static int RBRACE = CssLexer.RBRACE;\n-    public final static int SEMI = CssLexer.SEMI;\n-    public final static int COLON = CssLexer.COLON;\n-    public final static int SOLIDUS = CssLexer.SOLIDUS;\n-    public final static int STAR = CssLexer.STAR;\n-    public final static int LPAREN = CssLexer.LPAREN;\n-    public final static int RPAREN = CssLexer.RPAREN;\n-    public final static int COMMA = CssLexer.COMMA;\n-    public final static int HASH = CssLexer.HASH;\n-    public final static int DOT = CssLexer.DOT;\n-    public final static int IMPORTANT_SYM = CssLexer.IMPORTANT_SYM;\n-    public final static int WS = CssLexer.WS;\n-    public final static int NL = CssLexer.NL;\n-    public final static int FONT_FACE = CssLexer.FONT_FACE;\n-    public final static int URL = CssLexer.URL;\n-    public final static int IMPORT = CssLexer.IMPORT;\n-    public final static int SECONDS = CssLexer.SECONDS;\n-    public final static int MS = CssLexer.MS;\n-    public final static int AT_KEYWORD = CssLexer.AT_KEYWORD;\n-\n-\n-    CssLexer lexer;\n-\n-    public CssLexerShim(CssLexer lexer) {\n-        this.lexer = lexer;\n-    }\n-\n-    public CssLexerShim() {\n-        this.lexer = new CssLexer();\n-    }\n-\n-    public TokenShim nextToken() {\n-        Token t = this.lexer.nextToken();\n-        return new TokenShim(t);\n-    }\n-\n-    public void setReader(Reader reader) {\n-        lexer.setReader(reader);\n-    }\n-\n-    \/\/------------\n-\n-    public static TokenShim nextToken(CssLexerShim l) {\n-        Token t = l.lexer.nextToken();\n-        return new TokenShim(t);\n-    }\n-\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/css\/CssLexerShim.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        return new Rule(selectors, declarations);\n+        return new Rule(null, selectors, declarations);\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/css\/RuleShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11,0 +11,1 @@\n+--add-exports javafx.graphics\/com.sun.javafx.beans.property=ALL-UNNAMED\n@@ -12,0 +13,2 @@\n+--add-exports javafx.graphics\/com.sun.javafx.css.media=ALL-UNNAMED\n+--add-exports javafx.graphics\/com.sun.javafx.css.media.expression=ALL-UNNAMED\n@@ -57,0 +60,1 @@\n+--add-opens javafx.graphics\/javafx.stage=ALL-UNNAMED\n","filename":"modules\/javafx.graphics\/src\/test\/addExports","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-        prefs = new PlatformPreferences(\n+        prefs = new PlatformPreferences();\n+        prefs.initialize(\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.beans.property;\n+\n+import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.value.ObservableValue;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class NullCoalescingPropertyBaseTest {\n+\n+    @Test\n+    void nullEvaluatesToBaseValue() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property = new NullCoalescingPropertyImpl<>(base, true);\n+        property.set(null);\n+        assertEquals(\"foo\", property.get());\n+        assertEquals(\"foo\", property.getValue());\n+    }\n+\n+    @Test\n+    void nonNullEvaluatesToLocalValue() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property = new NullCoalescingPropertyImpl<>(base, true);\n+        property.set(\"bar\");\n+        assertEquals(\"bar\", property.get());\n+        assertEquals(\"bar\", property.getValue());\n+    }\n+\n+    @Test\n+    void baseValueChangeIsVisible() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property = new NullCoalescingPropertyImpl<>(base, true);\n+        property.set(null);\n+        assertEquals(\"foo\", property.get());\n+        base.set(\"bar\");\n+        assertEquals(\"bar\", property.get());\n+    }\n+\n+    @Test\n+    void propertiesCanBeChained() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property1 = new NullCoalescingPropertyImpl<>(base, true);\n+        var property2 = new NullCoalescingPropertyImpl<>(property1, true);\n+\n+        property2.set(null);\n+        assertEquals(\"foo\", property2.get());\n+\n+        property1.set(\"bar\");\n+        assertEquals(\"bar\", property2.get());\n+\n+        property2.set(\"baz\");\n+        assertEquals(\"baz\", property2.get());\n+    }\n+\n+    @Test\n+    void bindingOverridesBaseValueIfNotNull() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property = new NullCoalescingPropertyImpl<>(base, true);\n+        assertEquals(\"foo\", property.get());\n+\n+        var bindSource = new SimpleStringProperty(\"bar\");\n+        property.bind(bindSource);\n+        assertEquals(\"bar\", property.get());\n+\n+        bindSource.set(null);\n+        assertEquals(\"foo\", property.get());\n+    }\n+\n+    @Test\n+    void changeEventObservableIsCorrectlyReported() {\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base, true);\n+        var trace = new ArrayList<>();\n+        property.addListener(((observable, _, _) -> trace.add(observable)));\n+        base.set(\"foo\");\n+        assertEquals(List.of(property), trace);\n+        base.set(\"bar\");\n+        assertEquals(List.of(property, property), trace);\n+    }\n+\n+    @Test\n+    void currentValueInOnInvalidatedMethodIsCorrect() {\n+        var actual = new String[1];\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base, true) {\n+            @Override\n+            protected void onInvalidated() {\n+                actual[0] = get();\n+            }\n+        };\n+\n+        base.set(\"foo\");\n+        assertEquals(\"foo\", actual[0]);\n+\n+        property.set(\"bar\");\n+        assertEquals(\"bar\", actual[0]);\n+\n+        property.set(null);\n+        assertEquals(\"foo\", actual[0]);\n+    }\n+\n+    @Test\n+    void notificationsAreOnlyFiredWhenCurrentValueHasChanged() {\n+        var invalidatedCount = new int[1];\n+        var listenerCount = new int[1];\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base, true) {\n+            @Override\n+            protected void onInvalidated() {\n+                invalidatedCount[0]++;\n+            }\n+        };\n+\n+        property.addListener((_, _, _) -> listenerCount[0]++);\n+\n+        base.set(\"foo\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        property.set(\"foo\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        base.set(\"bar\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        property.set(null);\n+        assertEquals(2, invalidatedCount[0]);\n+        assertEquals(2, listenerCount[0]);\n+    }\n+\n+    @Test\n+    void baseChangedNotificationsAreNotFiredWhenPropertyIsDisconnected() {\n+        var invalidatedCount = new int[1];\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base, false) {\n+            @Override\n+            protected void onInvalidated() {\n+                invalidatedCount[0]++;\n+            }\n+        };\n+\n+        base.set(\"foo\");\n+        assertEquals(0, invalidatedCount[0]);\n+\n+        base.set(\"bar\");\n+        assertEquals(0, invalidatedCount[0]);\n+\n+        property.connect();\n+        assertEquals(1, invalidatedCount[0]);\n+\n+        base.set(\"baz\");\n+        assertEquals(2, invalidatedCount[0]);\n+    }\n+\n+    @Test\n+    void connectingPropertyUpdatesCurrentValue() {\n+        var base = new SimpleStringProperty(\"foo\");\n+        var property = new NullCoalescingPropertyImpl<>(base, false);\n+        assertEquals(\"foo\", property.getValue());\n+        base.set(\"bar\");\n+        assertEquals(\"foo\", property.getValue());\n+        property.connect();\n+        assertEquals(\"bar\", property.getValue());\n+    }\n+\n+    private static class NullCoalescingPropertyImpl<T> extends NullCoalescingPropertyBase<T> {\n+        public NullCoalescingPropertyImpl(ObservableValue<T> baseValue, boolean connected) {\n+            super(baseValue);\n+\n+            if (connected) {\n+                connect();\n+            }\n+        }\n+\n+        @Override public Object getBean() { return null; }\n+        @Override public String getName() { return \"\"; }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/beans\/property\/NullCoalescingPropertyBaseTest.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.MediaQuerySerializer;\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import com.sun.javafx.css.media.expression.NegationExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+import com.sun.javafx.css.media.MediaQuery;\n+import javafx.css.StyleConverter;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class MediaQuerySerializerTest {\n+\n+    private StyleConverter.StringStore stringStore;\n+\n+    @BeforeEach\n+    void setup() {\n+        stringStore = new StyleConverter.StringStore();\n+    }\n+\n+    @Test\n+    void serializeConstantExpression() throws IOException {\n+        var expected = new ConstantExpression(true);\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+\n+        expected = new ConstantExpression(false);\n+        actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeFunctionExpression() throws IOException {\n+        var expected = new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true);\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+\n+        expected = new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true);\n+        actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeNotExpression() throws IOException {\n+        var expected = new NegationExpression(new ConstantExpression(true));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeConjunctionExpression() throws IOException {\n+        var expected = new ConjunctionExpression(new ConstantExpression(true), new ConstantExpression(false));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeDisjunctionExpression() throws IOException {\n+        var expected = new DisjunctionExpression(new ConstantExpression(true), new ConstantExpression(false));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeComplexExpression() throws IOException {\n+        var expected = new ConjunctionExpression(\n+            new DisjunctionExpression(\n+                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n+            ),\n+            new ConjunctionExpression(\n+                new NegationExpression(\n+                    new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true)\n+                ),\n+                new ConstantExpression(true)\n+            )\n+        );\n+\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    private byte[] serialize(MediaQuery mediaQuery) throws IOException {\n+        var output = new ByteArrayOutputStream();\n+        MediaQuerySerializer.writeBinary(mediaQuery, new DataOutputStream(output), stringStore);\n+        return output.toByteArray();\n+    }\n+\n+    private MediaQuery deserialize(byte[] data) throws IOException {\n+        var input = new ByteArrayInputStream(data);\n+        return MediaQuerySerializer.readBinary(\n+            new DataInputStream(input), stringStore.strings.toArray(new String[0]));\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/media\/MediaQuerySerializerTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,847 @@\n+\/*\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css.parser;\n+\n+import com.sun.javafx.css.parser.CssLexer;\n+import com.sun.javafx.css.parser.Token;\n+\n+import java.io.CharArrayReader;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class CssLexerTest {\n+\n+    public CssLexerTest() {\n+    }\n+\n+    private void checkTokens(List<Token> resultTokens, Token... expectedTokens) {\n+\n+        if (expectedTokens.length != resultTokens.size()) {\n+            fail(\n+                \"lengths do not match; \" +\n+                \"expected: \" + Arrays.toString(expectedTokens) +\n+                \"actual: \" + resultTokens.toString()\n+            );\n+        }\n+        for (int n = 0; n<expectedTokens.length; n++) {\n+\n+            final Token result = resultTokens.get(n);\n+            final Token expected = expectedTokens[n];\n+\n+            if (expected.getType() != result.getType()) {\n+                fail(\n+                    \"token \" + n + \" types do not match; \" +\n+                    \"expected: \" + Arrays.toString(expectedTokens) +\n+                    \"actual: \" + resultTokens.toString()\n+                );\n+            }\n+\n+            final String expectedText = expected.getText();\n+            final String resultText = result.getText();\n+\n+            if (expectedText == null ? resultText != null : !expectedText.equals(resultText)) {\n+                fail(\n+                    \"token \" + n + \" text does not match; \" +\n+                    \"expected: \" + Arrays.toString(expectedTokens) +\n+                    \"actual: \" + resultTokens.toString()\n+                );\n+            }\n+        }\n+    }\n+\n+    List<Token> getTokens(String string) {\n+\n+        Reader reader = new CharArrayReader(string.toCharArray());\n+        final CssLexer lexer = new CssLexer();\n+        lexer.setReader(reader);\n+\n+        final List<Token> tokens = new ArrayList<>();\n+\n+        Token token = null;\n+        do {\n+            token = lexer.nextToken();\n+            tokens.add(token);\n+        } while (token.getType() != Token.EOF);\n+\n+        return Collections.unmodifiableList(tokens);\n+    }\n+\n+    private void lexDigitsWithUnits(String units, int type) {\n+\n+        checkTokens(getTokens(\"123\"+units), new Token(type, \"123\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\"123.45\"+units), new Token(type, \"123.45\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\".45\"+units), new Token(type, \".45\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\"-123\"+units), new Token(type, \"-123\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\"-.45\"+units), new Token(type, \"-.45\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\"+123\"+units), new Token(type, \"+123\"+units), Token.EOF_TOKEN);\n+        checkTokens(getTokens(\"+.45\"+units), new Token(type, \"+.45\"+units), Token.EOF_TOKEN);\n+    }\n+\n+    @Test\n+    public void testLexValidDigits() {\n+        lexDigitsWithUnits(\"\", CssLexer.NUMBER);\n+    }\n+\n+    @Test\n+    public void testLexValidDigitsWithCM() {\n+        lexDigitsWithUnits(\"cm\", CssLexer.CM);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"cM\", CssLexer.CM);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithDEG() {\n+        lexDigitsWithUnits(\"deg\", CssLexer.DEG);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"dEg\", CssLexer.DEG);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithEM() {\n+        lexDigitsWithUnits(\"em\", CssLexer.EMS);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"Em\", CssLexer.EMS);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithEX() {\n+        lexDigitsWithUnits(\"ex\", CssLexer.EXS);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"Ex\", CssLexer.EXS);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithGRAD() {\n+        lexDigitsWithUnits(\"grad\", CssLexer.GRAD);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"gRad\", CssLexer.GRAD);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithIN() {\n+        lexDigitsWithUnits(\"in\", CssLexer.IN);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"In\", CssLexer.IN);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithMM() {\n+        lexDigitsWithUnits(\"mm\", CssLexer.MM);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"mM\", CssLexer.MM);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithPC() {\n+        lexDigitsWithUnits(\"pc\", CssLexer.PC);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"Pc\", CssLexer.PC);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithPT() {\n+        lexDigitsWithUnits(\"pt\", CssLexer.PT);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"PT\", CssLexer.PT);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithPX() {\n+        lexDigitsWithUnits(\"px\", CssLexer.PX);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"Px\", CssLexer.PX);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithRAD() {\n+        lexDigitsWithUnits(\"rad\", CssLexer.RAD);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"RaD\", CssLexer.RAD);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithTURN() {\n+        lexDigitsWithUnits(\"turn\", CssLexer.TURN);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"TurN\", CssLexer.TURN);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithS() {\n+        lexDigitsWithUnits(\"s\", CssLexer.SECONDS);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"S\", CssLexer.SECONDS);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithMS() {\n+        lexDigitsWithUnits(\"ms\", CssLexer.MS);\n+        \/\/ case should be ignored\n+        lexDigitsWithUnits(\"mS\", CssLexer.MS);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithPCT() {\n+        lexDigitsWithUnits(\"%\", CssLexer.PERCENTAGE);\n+    }\n+    @Test\n+    public void testLexValidDigitsWithBadUnits() {\n+        lexDigitsWithUnits(\"xyzzy\", Token.INVALID);\n+    }\n+    @Test\n+    public void textLexValidDigitsValidDigits() {\n+        checkTokens(\n+            getTokens(\"foo: 10pt; bar: 20%;\"),\n+            new Token(CssLexer.IDENT, \"foo\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PT, \"10pt\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.IDENT, \"bar\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PERCENTAGE, \"20%\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+    @Test\n+    public void textLexInvalidDigitsValidDigits() {\n+        checkTokens(\n+            getTokens(\"foo: 10pz; bar: 20%;\"),\n+            new Token(CssLexer.IDENT, \"foo\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(Token.INVALID, \"10pz\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.IDENT, \"bar\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PERCENTAGE, \"20%\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+    @Test\n+    public void textLexValidDigitsBangImportant() {\n+        checkTokens(\n+            getTokens(\"foo: 10pt !important;\"),\n+            new Token(CssLexer.IDENT, \"foo\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PT, \"10pt\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.IMPORTANT_SYM, \"!important\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+    @Test\n+    public void textLexInvalidDigitsBangImportant() {\n+        checkTokens(\n+            getTokens(\"foo: 10pz !important;\"),\n+            new Token(CssLexer.IDENT, \"foo\"),\n+            new Token(CssLexer.COLON, \":\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(Token.INVALID, \"10pz\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.IMPORTANT_SYM, \"!important\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+    @Test\n+    public void textLexValidDigitsInSequence() {\n+        checkTokens(\n+            getTokens(\"-1 0px 1pt .5em;\"),\n+            new Token(CssLexer.NUMBER, \"-1\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PX, \"0px\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PT, \"1pt\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.EMS, \".5em\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+    @Test\n+    public void textLexInvalidDigitsInSequence() {\n+        checkTokens(\n+            getTokens(\"-1 0px 1pz .5em;\"),\n+            new Token(CssLexer.NUMBER, \"-1\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.PX, \"0px\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(Token.INVALID, \"1pz\"),\n+            new Token(CssLexer.WS, \" \"),\n+            new Token(CssLexer.EMS, \".5em\"),\n+            new Token(CssLexer.SEMI, \";\"),\n+            Token.EOF_TOKEN\n+        );\n+    }\n+\n+    @Test\n+    public void testTokenOffset() {\n+\n+        String str =  \"a: b;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 4),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testTokenLineAndOffsetWithCR() {\n+\n+        String str =  \"a: b;\\rc: d;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 4),\n+            new Token(CssLexer.NL,  \"\\\\r\", 1, 5),\n+            new Token(CssLexer.IDENT, \"c\", 2, 0),\n+            new Token(CssLexer.COLON, \":\", 2, 1),\n+            new Token(CssLexer.WS,    \" \", 2, 2),\n+            new Token(CssLexer.IDENT, \"d\", 2, 3),\n+            new Token(CssLexer.SEMI,  \";\", 2, 4),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testTokenLineAndOffsetWithLF() {\n+\n+        String str =  \"a: b;\\nc: d;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 4),\n+            new Token(CssLexer.NL,  \"\\\\n\", 1, 5),\n+            new Token(CssLexer.IDENT, \"c\", 2, 0),\n+            new Token(CssLexer.COLON, \":\", 2, 1),\n+            new Token(CssLexer.WS,    \" \", 2, 2),\n+            new Token(CssLexer.IDENT, \"d\", 2, 3),\n+            new Token(CssLexer.SEMI,  \";\", 2, 4),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testTokenLineAndOffsetWithCRLF() {\n+        \/\/             012345   01234\n+        String str =  \"a: b;\\r\\nc: d;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 4),\n+            new Token(CssLexer.NL,  \"\\\\r\\\\n\", 1, 5),\n+            new Token(CssLexer.IDENT, \"c\", 2, 0),\n+            new Token(CssLexer.COLON, \":\", 2, 1),\n+            new Token(CssLexer.WS,    \" \", 2, 2),\n+            new Token(CssLexer.IDENT, \"d\", 2, 3),\n+            new Token(CssLexer.SEMI,  \";\", 2, 4),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithEmbeddedComment() {\n+        \/\/             0123456789012345\n+        String str =  \"a: \/*comment*\/b;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 14),\n+            new Token(CssLexer.SEMI,  \";\", 1, 15),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenLineAndOffsetWithLeadingComment() {\n+        \/\/             012345678901 01234\n+        String str =  \"\/*comment*\/\\na: b;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.NL, \"\\\\n\", 1, 11),\n+            new Token(CssLexer.IDENT, \"a\", 2, 0),\n+            new Token(CssLexer.COLON, \":\", 2, 1),\n+            new Token(CssLexer.WS,    \" \", 2, 2),\n+            new Token(CssLexer.IDENT, \"b\", 2, 3),\n+            new Token(CssLexer.SEMI,  \";\", 2, 4),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithFunction() {\n+        \/\/             01234567890\n+        String str =  \"a: b(arg);\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.LPAREN, \"(\", 1, 4),\n+            new Token(CssLexer.IDENT, \"arg\", 1, 5),\n+            new Token(CssLexer.RPAREN, \")\", 1, 8),\n+            new Token(CssLexer.SEMI,  \";\", 1, 9),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithHash() {\n+        \/\/             01234567890\n+        String str =  \"a: #012345;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.HASH, \"#012345\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 10),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithDigits() {\n+        \/\/             01234567890\n+        String str =  \"a: 123.45;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.NUMBER, \"123.45\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 9),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithBangImportant() {\n+        \/\/             0123456789012345\n+        String str =  \"a: b !important;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.WS,    \" \", 1, 4),\n+            new Token(CssLexer.IMPORTANT_SYM, \"!important\", 1, 5),\n+            new Token(CssLexer.SEMI,  \";\", 1, 15),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithSkip() {\n+        \/\/             0123456789012345\n+        String str =  \"a: b !imporzant;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(CssLexer.IDENT, \"b\", 1, 3),\n+            new Token(CssLexer.WS,    \" \", 1, 4),\n+            new Token(Token.SKIP, \"!imporz\", 1, 5),\n+            new Token(CssLexer.SEMI,  \";\", 1, 15),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenOffsetWithInvalid() {\n+        \/\/             0123456789012345\n+        String str =  \"a: 1pz;\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.IDENT, \"a\", 1, 0),\n+            new Token(CssLexer.COLON, \":\", 1, 1),\n+            new Token(CssLexer.WS,    \" \", 1, 2),\n+            new Token(Token.INVALID, \"1pz\", 1, 3),\n+            new Token(CssLexer.SEMI,  \";\", 1, 6),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testTokenLineAndOffsetMoreFully() {\n+        \/\/             1            2                 3         4\n+        \/\/             012345678901 0123456789012345  012345678 0\n+        String str =  \"\/*comment*\/\\n*.foo#bar:baz {\\n\\ta: 1em;\\n}\";\n+        \/\/ [?][0] = line\n+        \/\/ [?][1] = offset\n+        Token[] expected = {\n+            new Token(CssLexer.NL,     \"\\\\n\",  1, 11),\n+            new Token(CssLexer.STAR,   \"*\",    2, 0),\n+            new Token(CssLexer.DOT,    \".\",    2, 1),\n+            new Token(CssLexer.IDENT,  \"foo\",  2, 2),\n+            new Token(CssLexer.HASH,   \"#bar\", 2, 5),\n+            new Token(CssLexer.COLON,  \":\",    2, 9),\n+            new Token(CssLexer.IDENT,  \"baz\",  2, 10),\n+            new Token(CssLexer.WS,     \" \",    2, 13),\n+            new Token(CssLexer.LBRACE, \"{\",    2, 14),\n+            new Token(CssLexer.NL,     \"\\\\n\",  2, 15),\n+            new Token(CssLexer.WS,     \"\\t\",   3, 0),\n+            new Token(CssLexer.IDENT,  \"a\",    3, 1),\n+            new Token(CssLexer.COLON,  \":\",    3, 2),\n+            new Token(CssLexer.WS,     \" \",    3, 3),\n+            new Token(CssLexer.EMS,    \"1em\",  3, 4),\n+            new Token(CssLexer.SEMI,   \";\",    3, 7),\n+            new Token(CssLexer.NL,     \"\\\\n\",  3, 8),\n+            new Token(CssLexer.RBRACE, \"}\",    4, 0),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+    }\n+\n+    @Test\n+    public void testScanUrl() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf)\";\n+        Token[] expected = new Token[]{\n+            new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n+            Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanUrlWithWhiteSpace() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(    http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\\t)\";\n+        Token[] expected = new Token[]{\n+                new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanQuotedUrlWithWhiteSpace() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(    'http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf'\\t)\";\n+        Token[] expected = new Token[]{\n+                new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanQuotedUrl() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(\\\"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\\\")\";\n+        Token[] expected = new Token[]{\n+                new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanUrlWithEscapes() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(http:\/\/foo.bar.com\/fonts\/true\\\\ type\/fubar.ttf)\";\n+        Token[] expected = new Token[]{\n+                new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/true type\/fubar.ttf\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanQuotedUrlWithEscapes() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(\\\"http:\/\/foo.bar.com\/fonts\/true\\\\ type\/fubar.ttf\\\")\";\n+        Token[] expected = new Token[]{\n+                new Token(CssLexer.URL, \"http:\/\/foo.bar.com\/fonts\/true type\/fubar.ttf\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanUrlWithSyntaxError() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url(http:\/\/foo.bar.com\/fonts\/true'type\/fubar.ttf)\";\n+        Token[] expected = new Token[]{\n+                new Token(Token.INVALID, \"http:\/\/foo.bar.com\/fonts\/true\", 1, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testScanQuotedUrlWithSyntaxError() {\n+\n+        \/\/             1           2               3        4\n+        \/\/             01234567890101234567890123450123456780123456789\n+        String str =  \"url('http:\/\/foo.bar.com\/fonts\/true\\rtype\/fubar.ttf')\";\n+        Token[] expected = new Token[]{\n+                new Token(Token.INVALID, \"http:\/\/foo.bar.com\/fonts\/true\", 2, 0),\n+                Token.EOF_TOKEN\n+        };\n+\n+        List<Token> tlist = getTokens(str);\n+        checkTokens(tlist, expected);\n+\n+        for(int n=0; n<tlist.size(); n++) {\n+            Token tok = tlist.get(n);\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n+        }\n+\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/parser\/CssLexerTest.java","additions":847,"deletions":0,"binary":false,"changes":847,"status":"added"},{"patch":"@@ -1,848 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.css;\n-\n-import com.sun.javafx.css.parser.Token;\n-import com.sun.javafx.css.parser.TokenShim;\n-\n-import java.io.CharArrayReader;\n-import java.io.Reader;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import javafx.css.CssLexerShim;\n-\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class CssLexerTest {\n-\n-    public CssLexerTest() {\n-    }\n-\n-    private void checkTokens(List<TokenShim> resultTokens, TokenShim... expectedTokens) {\n-\n-        if (expectedTokens.length != resultTokens.size()) {\n-            fail(\n-                \"lengths do not match; \" +\n-                \"expected: \" + Arrays.toString(expectedTokens) +\n-                \"actual: \" + resultTokens.toString()\n-            );\n-        }\n-        for (int n = 0; n<expectedTokens.length; n++) {\n-\n-            final TokenShim result = resultTokens.get(n);\n-            final TokenShim expected = expectedTokens[n];\n-\n-            if (expected.getType() != result.getType()) {\n-                fail(\n-                    \"token \" + n + \" types do not match; \" +\n-                    \"expected: \" + Arrays.toString(expectedTokens) +\n-                    \"actual: \" + resultTokens.toString()\n-                );\n-            }\n-\n-            final String expectedText = expected.getText();\n-            final String resultText = result.getText();\n-\n-            if (expectedText == null ? resultText != null : !expectedText.equals(resultText)) {\n-                fail(\n-                    \"token \" + n + \" text does not match; \" +\n-                    \"expected: \" + Arrays.toString(expectedTokens) +\n-                    \"actual: \" + resultTokens.toString()\n-                );\n-            }\n-        }\n-    }\n-\n-    List<TokenShim> getTokens(String string) {\n-\n-        Reader reader = new CharArrayReader(string.toCharArray());\n-        final CssLexerShim lexer = new CssLexerShim();\n-        lexer.setReader(reader);\n-\n-        final List<TokenShim> tokens = new ArrayList<>();\n-\n-        TokenShim token = null;\n-        do {\n-            token = lexer.nextToken();\n-            tokens.add(token);\n-        } while (token.getType() != Token.EOF);\n-\n-        return Collections.unmodifiableList(tokens);\n-    }\n-\n-    private void lexDigitsWithUnits(String units, int type) {\n-\n-        checkTokens(getTokens(\"123\"+units), new TokenShim(type, \"123\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\"123.45\"+units), new TokenShim(type, \"123.45\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\".45\"+units), new TokenShim(type, \".45\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\"-123\"+units), new TokenShim(type, \"-123\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\"-.45\"+units), new TokenShim(type, \"-.45\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\"+123\"+units), new TokenShim(type, \"+123\"+units), TokenShim.EOF_TOKEN);\n-        checkTokens(getTokens(\"+.45\"+units), new TokenShim(type, \"+.45\"+units), TokenShim.EOF_TOKEN);\n-    }\n-\n-    @Test\n-    public void testLexValidDigits() {\n-        lexDigitsWithUnits(\"\", CssLexerShim.NUMBER);\n-    }\n-\n-    @Test\n-    public void testLexValidDigitsWithCM() {\n-        lexDigitsWithUnits(\"cm\", CssLexerShim.CM);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"cM\", CssLexerShim.CM);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithDEG() {\n-        lexDigitsWithUnits(\"deg\", CssLexerShim.DEG);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"dEg\", CssLexerShim.DEG);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithEM() {\n-        lexDigitsWithUnits(\"em\", CssLexerShim.EMS);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"Em\", CssLexerShim.EMS);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithEX() {\n-        lexDigitsWithUnits(\"ex\", CssLexerShim.EXS);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"Ex\", CssLexerShim.EXS);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithGRAD() {\n-        lexDigitsWithUnits(\"grad\", CssLexerShim.GRAD);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"gRad\", CssLexerShim.GRAD);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithIN() {\n-        lexDigitsWithUnits(\"in\", CssLexerShim.IN);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"In\", CssLexerShim.IN);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithMM() {\n-        lexDigitsWithUnits(\"mm\", CssLexerShim.MM);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"mM\", CssLexerShim.MM);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithPC() {\n-        lexDigitsWithUnits(\"pc\", CssLexerShim.PC);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"Pc\", CssLexerShim.PC);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithPT() {\n-        lexDigitsWithUnits(\"pt\", CssLexerShim.PT);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"PT\", CssLexerShim.PT);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithPX() {\n-        lexDigitsWithUnits(\"px\", CssLexerShim.PX);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"Px\", CssLexerShim.PX);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithRAD() {\n-        lexDigitsWithUnits(\"rad\", CssLexerShim.RAD);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"RaD\", CssLexerShim.RAD);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithTURN() {\n-        lexDigitsWithUnits(\"turn\", CssLexerShim.TURN);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"TurN\", CssLexerShim.TURN);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithS() {\n-        lexDigitsWithUnits(\"s\", CssLexerShim.SECONDS);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"S\", CssLexerShim.SECONDS);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithMS() {\n-        lexDigitsWithUnits(\"ms\", CssLexerShim.MS);\n-        \/\/ case should be ignored\n-        lexDigitsWithUnits(\"mS\", CssLexerShim.MS);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithPCT() {\n-        lexDigitsWithUnits(\"%\", CssLexerShim.PERCENTAGE);\n-    }\n-    @Test\n-    public void testLexValidDigitsWithBadUnits() {\n-        lexDigitsWithUnits(\"xyzzy\", Token.INVALID);\n-    }\n-    @Test\n-    public void textLexValidDigitsValidDigits() {\n-        checkTokens(\n-            getTokens(\"foo: 10pt; bar: 20%;\"),\n-            new TokenShim(CssLexerShim.IDENT, \"foo\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PT, \"10pt\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.IDENT, \"bar\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PERCENTAGE, \"20%\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-    @Test\n-    public void textLexInvalidDigitsValidDigits() {\n-        checkTokens(\n-            getTokens(\"foo: 10pz; bar: 20%;\"),\n-            new TokenShim(CssLexerShim.IDENT, \"foo\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(Token.INVALID, \"10pz\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.IDENT, \"bar\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PERCENTAGE, \"20%\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-    @Test\n-    public void textLexValidDigitsBangImportant() {\n-        checkTokens(\n-            getTokens(\"foo: 10pt !important;\"),\n-            new TokenShim(CssLexerShim.IDENT, \"foo\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PT, \"10pt\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.IMPORTANT_SYM, \"!important\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-    @Test\n-    public void textLexInvalidDigitsBangImportant() {\n-        checkTokens(\n-            getTokens(\"foo: 10pz !important;\"),\n-            new TokenShim(CssLexerShim.IDENT, \"foo\"),\n-            new TokenShim(CssLexerShim.COLON, \":\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(Token.INVALID, \"10pz\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.IMPORTANT_SYM, \"!important\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-    @Test\n-    public void textLexValidDigitsInSequence() {\n-        checkTokens(\n-            getTokens(\"-1 0px 1pt .5em;\"),\n-            new TokenShim(CssLexerShim.NUMBER, \"-1\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PX, \"0px\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PT, \"1pt\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.EMS, \".5em\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-    @Test\n-    public void textLexInvalidDigitsInSequence() {\n-        checkTokens(\n-            getTokens(\"-1 0px 1pz .5em;\"),\n-            new TokenShim(CssLexerShim.NUMBER, \"-1\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.PX, \"0px\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(Token.INVALID, \"1pz\"),\n-            new TokenShim(CssLexerShim.WS, \" \"),\n-            new TokenShim(CssLexerShim.EMS, \".5em\"),\n-            new TokenShim(CssLexerShim.SEMI, \";\"),\n-            TokenShim.EOF_TOKEN\n-        );\n-    }\n-\n-    @Test\n-    public void testTokenOffset() {\n-\n-        String str =  \"a: b;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 4),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testTokenLineAndOffsetWithCR() {\n-\n-        String str =  \"a: b;\\rc: d;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 4),\n-            new TokenShim(CssLexerShim.NL,  \"\\\\r\", 1, 5),\n-            new TokenShim(CssLexerShim.IDENT, \"c\", 2, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 2, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 2, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"d\", 2, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 2, 4),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testTokenLineAndOffsetWithLF() {\n-\n-        String str =  \"a: b;\\nc: d;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 4),\n-            new TokenShim(CssLexerShim.NL,  \"\\\\n\", 1, 5),\n-            new TokenShim(CssLexerShim.IDENT, \"c\", 2, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 2, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 2, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"d\", 2, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 2, 4),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testTokenLineAndOffsetWithCRLF() {\n-        \/\/             012345   01234\n-        String str =  \"a: b;\\r\\nc: d;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 4),\n-            new TokenShim(CssLexerShim.NL,  \"\\\\r\\\\n\", 1, 5),\n-            new TokenShim(CssLexerShim.IDENT, \"c\", 2, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 2, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 2, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"d\", 2, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 2, 4),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithEmbeddedComment() {\n-        \/\/             0123456789012345\n-        String str =  \"a: \/*comment*\/b;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 14),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 15),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenLineAndOffsetWithLeadingComment() {\n-        \/\/             012345678901 01234\n-        String str =  \"\/*comment*\/\\na: b;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.NL, \"\\\\n\", 1, 11),\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 2, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 2, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 2, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 2, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 2, 4),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithFunction() {\n-        \/\/             01234567890\n-        String str =  \"a: b(arg);\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.LPAREN, \"(\", 1, 4),\n-            new TokenShim(CssLexerShim.IDENT, \"arg\", 1, 5),\n-            new TokenShim(CssLexerShim.RPAREN, \")\", 1, 8),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 9),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithHash() {\n-        \/\/             01234567890\n-        String str =  \"a: #012345;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.HASH, \"#012345\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 10),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithDigits() {\n-        \/\/             01234567890\n-        String str =  \"a: 123.45;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.NUMBER, \"123.45\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 9),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithBangImportant() {\n-        \/\/             0123456789012345\n-        String str =  \"a: b !important;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 4),\n-            new TokenShim(CssLexerShim.IMPORTANT_SYM, \"!important\", 1, 5),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 15),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithSkip() {\n-        \/\/             0123456789012345\n-        String str =  \"a: b !imporzant;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(CssLexerShim.IDENT, \"b\", 1, 3),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 4),\n-            new TokenShim(Token.SKIP, \"!imporz\", 1, 5),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 15),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenOffsetWithInvalid() {\n-        \/\/             0123456789012345\n-        String str =  \"a: 1pz;\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.IDENT, \"a\", 1, 0),\n-            new TokenShim(CssLexerShim.COLON, \":\", 1, 1),\n-            new TokenShim(CssLexerShim.WS,    \" \", 1, 2),\n-            new TokenShim(Token.INVALID, \"1pz\", 1, 3),\n-            new TokenShim(CssLexerShim.SEMI,  \";\", 1, 6),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testTokenLineAndOffsetMoreFully() {\n-        \/\/             1            2                 3         4\n-        \/\/             012345678901 0123456789012345  012345678 0\n-        String str =  \"\/*comment*\/\\n*.foo#bar:baz {\\n\\ta: 1em;\\n}\";\n-        \/\/ [?][0] = line\n-        \/\/ [?][1] = offset\n-        TokenShim[] expected = {\n-            new TokenShim(CssLexerShim.NL,     \"\\\\n\",  1, 11),\n-            new TokenShim(CssLexerShim.STAR,   \"*\",    2, 0),\n-            new TokenShim(CssLexerShim.DOT,    \".\",    2, 1),\n-            new TokenShim(CssLexerShim.IDENT,  \"foo\",  2, 2),\n-            new TokenShim(CssLexerShim.HASH,   \"#bar\", 2, 5),\n-            new TokenShim(CssLexerShim.COLON,  \":\",    2, 9),\n-            new TokenShim(CssLexerShim.IDENT,  \"baz\",  2, 10),\n-            new TokenShim(CssLexerShim.WS,     \" \",    2, 13),\n-            new TokenShim(CssLexerShim.LBRACE, \"{\",    2, 14),\n-            new TokenShim(CssLexerShim.NL,     \"\\\\n\",  2, 15),\n-            new TokenShim(CssLexerShim.WS,     \"\\t\",   3, 0),\n-            new TokenShim(CssLexerShim.IDENT,  \"a\",    3, 1),\n-            new TokenShim(CssLexerShim.COLON,  \":\",    3, 2),\n-            new TokenShim(CssLexerShim.WS,     \" \",    3, 3),\n-            new TokenShim(CssLexerShim.EMS,    \"1em\",  3, 4),\n-            new TokenShim(CssLexerShim.SEMI,   \";\",    3, 7),\n-            new TokenShim(CssLexerShim.NL,     \"\\\\n\",  3, 8),\n-            new TokenShim(CssLexerShim.RBRACE, \"}\",    4, 0),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-    }\n-\n-    @Test\n-    public void testScanUrl() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf)\";\n-        TokenShim[] expected = new TokenShim[]{\n-            new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n-            TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanUrlWithWhiteSpace() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(    http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\\t)\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanQuotedUrlWithWhiteSpace() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(    'http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf'\\t)\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanQuotedUrl() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(\\\"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\\\")\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/serif\/fubar.ttf\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanUrlWithEscapes() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(http:\/\/foo.bar.com\/fonts\/true\\\\ type\/fubar.ttf)\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/true type\/fubar.ttf\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanQuotedUrlWithEscapes() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(\\\"http:\/\/foo.bar.com\/fonts\/true\\\\ type\/fubar.ttf\\\")\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(CssLexerShim.URL, \"http:\/\/foo.bar.com\/fonts\/true type\/fubar.ttf\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanUrlWithSyntaxError() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url(http:\/\/foo.bar.com\/fonts\/true'type\/fubar.ttf)\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(Token.INVALID, \"http:\/\/foo.bar.com\/fonts\/true\", 1, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testScanQuotedUrlWithSyntaxError() {\n-\n-        \/\/             1           2               3        4\n-        \/\/             01234567890101234567890123450123456780123456789\n-        String str =  \"url('http:\/\/foo.bar.com\/fonts\/true\\rtype\/fubar.ttf')\";\n-        TokenShim[] expected = new TokenShim[]{\n-                new TokenShim(Token.INVALID, \"http:\/\/foo.bar.com\/fonts\/true\", 2, 0),\n-                TokenShim.EOF_TOKEN\n-        };\n-\n-        List<TokenShim> tlist = getTokens(str);\n-        checkTokens(tlist, expected);\n-\n-        for(int n=0; n<tlist.size(); n++) {\n-            TokenShim tok = tlist.get(n);\n-            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n-            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n-        }\n-\n-    }\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssLexerTest.java","additions":0,"deletions":848,"binary":false,"changes":848,"status":"deleted"},{"patch":"@@ -0,0 +1,310 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.css;\n+\n+import com.sun.javafx.css.RuleHelper;\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import javafx.application.ColorScheme;\n+import javafx.css.CssParser;\n+import javafx.css.Stylesheet;\n+import org.junit.jupiter.api.Test;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CssParser_mediaQuery_Test {\n+\n+    @Test\n+    void parseSimpleMediaQuery() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+            mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parseNestedMediaQuery() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-motion: reduce) {\n+                @media (prefers-color-scheme: light) {\n+                    .foo { bar: baz; }\n+                }\n+            }\n+            \"\"\");\n+\n+        var innerMediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        var outerMediaRule = innerMediaRule.getParent();\n+        assertEquals(1, innerMediaRule.getQueries().size());\n+        assertEquals(1, outerMediaRule.getQueries().size());\n+        assertNull(outerMediaRule.getParent());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+            innerMediaRule.getQueries().getFirst());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+            outerMediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parseMediaQueryList() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: dark),\n+                   (prefers-reduced-motion),\n+                   (prefers-reduced-transparency: no-preference) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(\n+            List.of(\n+                new FunctionExpression<>(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n+                new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true),\n+                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n+            ),\n+            mediaRule.getQueries());\n+    }\n+\n+    @Test\n+    void parseConjunction() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) and (prefers-reduced-motion: reduce) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            List.of(new ConjunctionExpression(\n+                new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+            )),\n+            mediaRule.getQueries());\n+    }\n+\n+    @Test\n+    void parseMultiConjunction() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) and\n+                   (prefers-reduced-motion: reduce) and\n+                   (prefers-reduced-transparency: no-preference) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new ConjunctionExpression(\n+                new ConjunctionExpression(\n+                    new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                    new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n+                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> false, false)\n+            ),\n+            mediaRule.getQueries().getFirst()\n+        );\n+    }\n+\n+    @Test\n+    void parseDisjunction() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) or (prefers-reduced-motion: reduce) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new DisjunctionExpression(\n+                new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+            ),\n+            mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parseMultiDisjunction() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) or\n+                   (prefers-reduced-motion: reduce) or\n+                   (prefers-persistent-scrollbars: persistent) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new DisjunctionExpression(\n+                new DisjunctionExpression(\n+                    new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                    new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n+                new FunctionExpression<>(\"prefers-persistent-scrollbars\", \"persistent\", _ -> false, true)\n+            ),\n+            mediaRule.getQueries().getFirst()\n+        );\n+    }\n+\n+    @Test\n+    void disjunctionAndConjunctionCanNotBeCombined() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: light) or\n+                   (prefers-reduced-motion: reduce) and\n+                   (prefers-reduced-transparency: no-preference) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parsePrefersReducedMotion_booleanContext() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-motion) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true),\n+            mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parsePrefersReducedTransparency_booleanContext() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-transparency) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-reduced-transparency\", null, _ -> null, true),\n+            mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parsePrefersPersistentScrollBars_booleanContext() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-persistent-scrollbars) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-persistent-scrollbars\", null, _ -> null, true),\n+            mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void emptyMediaQuery() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(0, mediaRule.getQueries().size());\n+    }\n+\n+    @Test\n+    void emptyMediaQueryWithNotKeywordEvaluatesToFalse() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media not {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void invalidMediaFeatureEvaluatesToFalse() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (invalid-media-feature) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void invalidFeatureValueEvaluatesToFalse() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-motion: invalid-value) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+    }\n+\n+    @Test\n+    void parserRecoversWhenMediaQueryIsMalformed() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (#123foo=malformed-query), (prefers-reduced-motion: reduce) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(\n+            List.of(\n+                new ConstantExpression(false), \/\/ the malformed query evaluates to false\n+                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+            ),\n+            mediaRule.getQueries());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_mediaQuery_Test.java","additions":310,"deletions":0,"binary":false,"changes":310,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.RuleHelper;\n@@ -30,0 +31,2 @@\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import javafx.application.ColorScheme;\n@@ -797,0 +800,19 @@\n+\n+    @Test\n+    void serializeStylesheetWithMediaRule() throws IOException {\n+        byte[] data = convertCssTextToBinary(\"\"\"\n+            .rect { -fx-fill: blue; }\n+            @media (prefers-color-scheme: dark) {\n+                .rect { -fx-fill: red; }\n+            }\n+            \"\"\");\n+\n+        var stylesheet = Stylesheet.loadBinary(new ByteArrayInputStream(data));\n+        assertEquals(2, stylesheet.getRules().size());\n+        assertNull(RuleHelper.getMediaRule(stylesheet.getRules().get(0)));\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().get(1));\n+        assertEquals(\n+            new FunctionExpression<>(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n+            mediaRule.getQueries().getFirst());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StylesheetTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import javafx.application.ColorScheme;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class Scene_preferences_Test {\n+\n+    private Stage stage;\n+    private Scene scene;\n+    private Rectangle rect;\n+\n+    @BeforeEach\n+    void setup() {\n+        rect = new Rectangle();\n+        rect.setId(\"rect\");\n+        scene = new Scene(new Group(rect));\n+        stage = new Stage();\n+        stage.setScene(scene);\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        stage.close();\n+    }\n+\n+    record TestRun(String mediaQuery,\n+                   Consumer<Scene.Preferences> state1,\n+                   Consumer<Scene.Preferences> state2) {}\n+\n+    static Stream<TestRun> changedScenePreferenceReappliesCSS_testRuns() {\n+        return Stream.of(\n+            new TestRun(\n+                \"prefers-color-scheme: dark\",\n+                prefs -> prefs.setColorScheme(ColorScheme.LIGHT),\n+                prefs -> prefs.setColorScheme(ColorScheme.DARK)),\n+            new TestRun(\n+                \"prefers-persistent-scrollbars\",\n+                prefs -> prefs.setPersistentScrollBars(false),\n+                prefs -> prefs.setPersistentScrollBars(true)),\n+            new TestRun(\n+                \"prefers-reduced-motion\",\n+                prefs -> prefs.setReducedMotion(false),\n+                prefs -> prefs.setReducedMotion(true)),\n+            new TestRun(\n+                \"prefers-reduced-transparency\",\n+                prefs -> prefs.setReducedTransparency(false),\n+                prefs -> prefs.setReducedTransparency(true)),\n+            new TestRun(\n+                \"prefers-reduced-data\",\n+                prefs -> prefs.setReducedData(false),\n+                prefs -> prefs.setReducedData(true))\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"changedScenePreferenceReappliesCSS_testRuns\")\n+    void changedScenePreferenceReappliesCSS(TestRun testRun) {\n+        scene.getStylesheets().add(\"data:base64,\" + Base64.getEncoder().encodeToString(\"\"\"\n+            #rect { -fx-fill: red; }\n+            @media (%s) {\n+                #rect { -fx-fill: green; }\n+            }\n+            \"\"\".formatted(testRun.mediaQuery).getBytes(StandardCharsets.UTF_8)));\n+\n+        testRun.state1.accept(scene.getPreferences());\n+        rect.applyCss();\n+        assertEquals(Color.RED, rect.getFill());\n+\n+        testRun.state2.accept(scene.getPreferences());\n+        rect.applyCss();\n+        assertEquals(Color.GREEN, rect.getFill());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Scene_preferences_Test.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}