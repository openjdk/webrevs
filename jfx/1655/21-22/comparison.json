{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import javafx.beans.property.ReadOnlyObjectWrapper;\n@@ -124,1 +123,1 @@\n-        return colorScheme.getReadOnlyProperty();\n+        return colorScheme;\n@@ -181,1 +180,2 @@\n-            colorScheme.update();\n+            colorScheme.updateEffectiveValue();\n+        }\n@@ -183,3 +183,2 @@\n-            for (DeferredProperty<?> property : deferredProperties.values()) {\n-                property.fireValueChangedIfNecessary();\n-            }\n+        for (DeferredProperty<?> property : deferredProperties.values()) {\n+            property.fireValueChangedIfNecessary();\n@@ -187,0 +186,2 @@\n+\n+        colorScheme.fireValueChangeIfNecessary();\n@@ -226,0 +227,2 @@\n+            \/\/ We need to synchronized on 'mutex' to see 'effectiveValue', because get() may be called\n+            \/\/ on a thread other than the FX application thread.\n@@ -238,1 +241,0 @@\n-            Toolkit.getToolkit().checkFxUserThread();\n@@ -245,0 +247,1 @@\n+            \/\/ This method may be called by user code, so make sure that we are on the FX application thread.\n@@ -250,1 +253,0 @@\n-                fireValueChangedIfNecessary();\n@@ -252,0 +254,2 @@\n+\n+            fireValueChangedIfNecessary();\n@@ -254,1 +258,1 @@\n-        \/\/ This method must only be called when synchronized on 'mutex'.\n+        \/\/ This method must only be called on the FX application thread.\n@@ -271,2 +275,4 @@\n-    private final class ColorSchemeProperty extends ReadOnlyObjectWrapper<ColorScheme> {\n-        private ColorScheme colorSchemeOverride;\n+    private final class ColorSchemeProperty extends ReadOnlyObjectPropertyBase<ColorScheme> {\n+        private ColorScheme overrideValue;\n+        private ColorScheme effectiveValue = ColorScheme.LIGHT;\n+        private ColorScheme lastEffectiveValue = ColorScheme.LIGHT;\n@@ -274,2 +280,3 @@\n-        ColorSchemeProperty() {\n-            super(bean, \"colorScheme\");\n+        @Override\n+        public Object getBean() {\n+            return bean;\n@@ -278,5 +285,3 @@\n-        public void setValueOverride(ColorScheme colorScheme) {\n-            synchronized (mutex) {\n-                colorSchemeOverride = colorScheme;\n-                update();\n-            }\n+        @Override\n+        public String getName() {\n+            return \"colorScheme\";\n@@ -285,1 +290,4 @@\n-        public void update() {\n+        @Override\n+        public ColorScheme get() {\n+            \/\/ We need to synchronized on 'mutex' to see 'effectiveValue', because get() may be called\n+            \/\/ on a thread other than the FX application thread.\n@@ -287,8 +295,1 @@\n-                if (colorSchemeOverride != null) {\n-                    super.set(colorSchemeOverride);\n-                } else {\n-                    Color background = backgroundColor.get();\n-                    Color foreground = foregroundColor.get();\n-                    boolean isDark = Utils.calculateBrightness(background) < Utils.calculateBrightness(foreground);\n-                    super.set(isDark ? ColorScheme.DARK : ColorScheme.LIGHT);\n-                }\n+                return effectiveValue;\n@@ -298,2 +299,4 @@\n-        @Override\n-        public ReadOnlyObjectProperty<ColorScheme> getReadOnlyProperty() {\n+        public void setValueOverride(ColorScheme colorScheme) {\n+            \/\/ This method may be called by user code, so make sure that we are on the FX application thread.\n+            Toolkit.getToolkit().checkFxUserThread();\n+\n@@ -301,1 +304,2 @@\n-                return super.getReadOnlyProperty();\n+                overrideValue = colorScheme;\n+                updateEffectiveValue();\n@@ -303,0 +307,2 @@\n+\n+            fireValueChangeIfNecessary();\n@@ -305,4 +311,9 @@\n-        @Override\n-        public ColorScheme get() {\n-            synchronized (mutex) {\n-                return super.get();\n+        \/\/ This method must only be called when synchronized on 'mutex'.\n+        public void updateEffectiveValue() {\n+            if (overrideValue != null) {\n+                effectiveValue = overrideValue;\n+            } else {\n+                Color background = backgroundColor.get();\n+                Color foreground = foregroundColor.get();\n+                boolean isDark = Utils.calculateBrightness(background) < Utils.calculateBrightness(foreground);\n+                effectiveValue = isDark ? ColorScheme.DARK : ColorScheme.LIGHT;\n@@ -312,4 +323,6 @@\n-        @Override\n-        public void set(ColorScheme newValue) {\n-            \/\/ Make sure that we only set the value in the update() method.\n-            throw new UnsupportedOperationException();\n+        \/\/ This method must only be called on the FX application thread.\n+        public void fireValueChangeIfNecessary() {\n+            if (lastEffectiveValue != effectiveValue) {\n+                lastEffectiveValue = effectiveValue;\n+                fireValueChangedEvent();\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":51,"deletions":38,"binary":false,"changes":89,"status":"modified"}]}