{"files":[{"patch":"@@ -50,0 +50,9 @@\n+    private static final Predicate<Token> IDENT = token -> token.getType() == CssLexer.IDENT;\n+    private static final Predicate<Token> LPAREN = token -> token.getType() == CssLexer.LPAREN;\n+    private static final Predicate<Token> RPAREN = token -> token.getType() == CssLexer.RPAREN;\n+    private static final Predicate<Token> COLON = token -> token.getType() == CssLexer.COLON;\n+    private static final Predicate<Token> NOT_COMMA = token -> token.getType() != CssLexer.COMMA;\n+    private static final Predicate<Token> NOT_KEYWORD = token -> equalsIdentIgnoreCase(token, \"not\");\n+    private static final Predicate<Token> AND_KEYWORD = token -> equalsIdentIgnoreCase(token, \"and\");\n+    private static final Predicate<Token> OR_KEYWORD = token -> equalsIdentIgnoreCase(token, \"or\");\n+\n@@ -273,9 +282,0 @@\n-    private static final Predicate<Token> IDENT = token -> token.getType() == CssLexer.IDENT;\n-    private static final Predicate<Token> LPAREN = token -> token.getType() == CssLexer.LPAREN;\n-    private static final Predicate<Token> RPAREN = token -> token.getType() == CssLexer.RPAREN;\n-    private static final Predicate<Token> COLON = token -> token.getType() == CssLexer.COLON;\n-    private static final Predicate<Token> NOT_COMMA = token -> token.getType() != CssLexer.COMMA;\n-    private static final Predicate<Token> NOT_KEYWORD = token -> equalsIdentIgnoreCase(token, \"not\");\n-    private static final Predicate<Token> AND_KEYWORD = token -> equalsIdentIgnoreCase(token, \"and\");\n-    private static final Predicate<Token> OR_KEYWORD = token -> equalsIdentIgnoreCase(token, \"or\");\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryParser.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,4 +45,0 @@\n-    \/**\n-     * The order of {@code QueryType} enum values is important!\n-     * It is part of the binary serialization protocol for media query expressions.\n-     *\/\n@@ -50,5 +46,5 @@\n-        CONSTANT,\n-        FUNCTION,\n-        CONJUNCTION,\n-        DISJUNCTION,\n-        NEGATION;\n+        CONSTANT(1),\n+        FUNCTION(2),\n+        CONJUNCTION(3),\n+        DISJUNCTION(4),\n+        NEGATION(5);\n@@ -66,1 +62,17 @@\n-        static final QueryType[] VALUES = values();\n+        static QueryType of(int serializedId) {\n+            for (QueryType value : VALUES) {\n+                if (value.serializedId == serializedId) {\n+                    return value;\n+                }\n+            }\n+\n+            throw new IllegalArgumentException(\"serializedId\");\n+        }\n+\n+        QueryType(int serializedId) {\n+            this.serializedId = serializedId;\n+        }\n+\n+        private final int serializedId;\n+\n+        private static final QueryType[] VALUES = values();\n@@ -72,1 +84,1 @@\n-        os.writeByte(QueryType.of(mediaQuery).ordinal());\n+        os.writeByte(QueryType.of(mediaQuery).serializedId);\n@@ -104,1 +116,1 @@\n-        return switch (QueryType.VALUES[is.readByte()]) {\n+        return switch (QueryType.of(is.readByte())) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQuerySerializer.java","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-    private final int hash;\n@@ -48,1 +47,0 @@\n-        this.hash = queries.hashCode();\n@@ -52,1 +50,1 @@\n-     * Returns the list of media queries.\n+     * Returns the unmodifiable list of media queries.\n@@ -54,1 +52,1 @@\n-     * @return the list of media queries\n+     * @return the unmodifiable list of media queries\n@@ -117,0 +115,1 @@\n+        MediaRule parentRule = hasParent ? readBinary(stream, strings) : null;\n@@ -118,11 +117,1 @@\n-        return new MediaRule(List.of(queries), hasParent ? readBinary(stream, strings) : null);\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        return obj instanceof MediaRule rule && rule.getQueries().equals(queries);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return hash;\n+        return new MediaRule(List.of(queries), parentRule);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaRule.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        return \"(\" + left.toString() + \" and \" + right.toString() + \")\";\n+        return \"(\" + left + \" and \" + right + \")\";\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/ConjunctionExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        return \"(\" + left.toString() + \" or \" + right.toString() + \")\";\n+        return \"(\" + left + \" or \" + right + \")\";\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/DisjunctionExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,5 @@\n+    \/**\n+     * Returns the number of tokens in the stream.\n+     *\n+     * @return the number of tokens in the stream\n+     *\/\n@@ -47,0 +52,5 @@\n+    \/**\n+     * Returns the last token that was consumed from the stream.\n+     *\n+     * @return the token, or {@code null} if no token was consumed\n+     *\/\n@@ -51,0 +61,5 @@\n+    \/**\n+     * Consumes and returns the next token in the token stream.\n+     *\n+     * @return the token, or {@code null} if there are no tokens left in the stream\n+     *\/\n@@ -63,0 +78,7 @@\n+    \/**\n+     * Consumes and returns the next token in the token stream if it satisfies the specified predicate.\n+     *\n+     * @param predicate the predicate\n+     * @return the token, or {@code null} if there are no tokens left in the stream,\n+     *         or if the next token didn't satisfy the predicate\n+     *\/\n@@ -73,0 +95,4 @@\n+    \/**\n+     * Pushes the current token back onto the front of the token stream, so that the next\n+     * time a token is read from the stream, the current token will be reconsumed.\n+     *\/\n@@ -82,0 +108,5 @@\n+    \/**\n+     * Returns the next token in the stream, but does not consume it.\n+     *\n+     * @return the token, or {@code null} if there are no tokens left in the stream\n+     *\/\n@@ -88,0 +119,3 @@\n+     *\n+     * @param predicates the predicates\n+     * @return {@code true} if the tokens satisfy the predicates\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/parser\/TokenStream.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -384,0 +384,1 @@\n+        \/\/ see Stylesheet.BINARY_CSS_VERSION\n@@ -398,0 +399,1 @@\n+        \/\/ see Stylesheet.BINARY_CSS_VERSION\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Rule.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -294,0 +294,32 @@\n+    @Test\n+    void unbalancedParenthesisEvaluatesToFalse() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-motion: reduce),\n+                   (prefers-color-scheme: dark,\n+                   (prefers-reduced-transparency: reduce) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(\n+            List.of(\n+                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+                new ConstantExpression(false) \/\/ the rest of the query is malformed and evaluates to false\n+            ),\n+            mediaRule.getQueries());\n+    }\n+\n+    @Test\n+    void invalidCombinationOfConjunctionAndNegationEvaluatesToFalse() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-reduced-motion: reduce) and not (prefers-color-scheme: dark) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n+        assertEquals(1, mediaRule.getQueries().size());\n+        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+    }\n+\n@@ -310,0 +342,15 @@\n+\n+    @Test\n+    void parserRecoversFromUnbalancedCurlyBrace() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (prefers-color-scheme: dark) {{\n+                .foo { bar: baz; }\n+            }\n+\n+            .foo { qux: quux; }\n+            \"\"\");\n+\n+        assertEquals(2, stylesheet.getRules().size());\n+        assertEquals(List.of(), stylesheet.getRules().get(0).getDeclarations());\n+        assertEquals(\"qux\", stylesheet.getRules().get(1).getDeclarations().getFirst().getProperty());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_mediaQuery_Test.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}