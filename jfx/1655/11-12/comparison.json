{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -41,2 +42,1 @@\n-    private final ChangeListener<T> listener = (_, _, value) -> {\n-        baseValue = value;\n+    private final ChangeListener<T> listener = (_, _, _) -> {\n@@ -47,1 +47,2 @@\n-    private T baseValue;\n+    private final ObservableValue<T> baseObservable;\n+    private boolean currentValueChanged;\n@@ -53,2 +54,2 @@\n-     * @param baseValue the base value\n-     * @throws NullPointerException if {@code baseValue} is {@code null}\n+     * @param baseObservable the base observable\n+     * @throws NullPointerException if {@code baseObservable} is {@code null}\n@@ -56,3 +57,4 @@\n-    protected NullCoalescingPropertyBase(ObservableValue<T> baseValue) {\n-        this.currentValue = this.baseValue = baseValue.getValue();\n-        baseValue.addListener(new WeakChangeListener<>(listener));\n+    protected NullCoalescingPropertyBase(ObservableValue<T> baseObservable) {\n+        this.baseObservable = Objects.requireNonNull(baseObservable, \"baseObservable\");\n+        this.currentValue = baseObservable.getValue();\n+        baseObservable.addListener(new WeakChangeListener<>(listener));\n@@ -62,3 +64,2 @@\n-    public T get() {\n-        T value = super.get();\n-        return value != null ? value : baseValue;\n+    public final T get() {\n+        return currentValue;\n@@ -68,3 +69,3 @@\n-    protected void fireValueChangedEvent() {\n-        if (currentValue != get()) {\n-            currentValue = get();\n+    protected final void fireValueChangedEvent() {\n+        if (currentValueChanged) {\n+            currentValueChanged = false;\n@@ -74,0 +75,17 @@\n+\n+    @Override\n+    protected final void invalidated() {\n+        T localValue = super.get();\n+        T newValue = localValue != null ? localValue : baseObservable.getValue();\n+\n+        if (currentValue != newValue) {\n+            currentValue = newValue;\n+            currentValueChanged = true;\n+            onInvalidated();\n+        }\n+    }\n+\n+    \/**\n+     * Called when the current value has changed.\n+     *\/\n+    protected void onInvalidated() {}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/beans\/property\/NullCoalescingPropertyBase.java","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-        protected void invalidated() {\n+        protected void onInvalidated() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/ScenePreferences.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,0 +109,52 @@\n+    @Test\n+    void currentValueInOnInvalidatedMethodIsCorrect() {\n+        var actual = new String[1];\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base) {\n+            @Override\n+            protected void onInvalidated() {\n+                actual[0] = get();\n+            }\n+        };\n+\n+        base.set(\"foo\");\n+        assertEquals(\"foo\", actual[0]);\n+\n+        property.set(\"bar\");\n+        assertEquals(\"bar\", actual[0]);\n+\n+        property.set(null);\n+        assertEquals(\"foo\", actual[0]);\n+    }\n+\n+    @Test\n+    void notificationsAreOnlyFiredWhenCurrentValueHasChanged() {\n+        var invalidatedCount = new int[1];\n+        var listenerCount = new int[1];\n+        var base = new SimpleStringProperty();\n+        var property = new NullCoalescingPropertyImpl<>(base) {\n+            @Override\n+            protected void onInvalidated() {\n+                invalidatedCount[0]++;\n+            }\n+        };\n+\n+        property.addListener((_, _, _) -> listenerCount[0]++);\n+\n+        base.set(\"foo\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        property.set(\"foo\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        base.set(\"bar\");\n+        assertEquals(1, invalidatedCount[0]);\n+        assertEquals(1, listenerCount[0]);\n+\n+        property.set(null);\n+        assertEquals(2, invalidatedCount[0]);\n+        assertEquals(2, listenerCount[0]);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/beans\/property\/NullCoalescingPropertyBaseTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}