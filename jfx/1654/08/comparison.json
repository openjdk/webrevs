{"files":[{"patch":"@@ -1105,0 +1105,2 @@\n+    } else {\n+        newW = geometry_get_content_width(&geometry);\n@@ -1115,0 +1117,2 @@\n+    } else {\n+        newH = geometry_get_content_height(&geometry);\n@@ -1117,0 +1121,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.util.Duration;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import test.robot.testharness.VisualTestBase;\n+\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.util.Util.TIMEOUT;\n+\n+public class StageMixedSizeTest extends VisualTestBase {\n+    private static final Color BACKGROUND_COLOR = Color.YELLOW;\n+    private static final double TOLERANCE = 0.07;\n+    private Stage testStage;\n+\n+    @Test\n+    public void testSetWidthOnlyAfterShownOnContentSizeWindow() throws Exception {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        final int finalWidth = 200;\n+        final int initialContentSize = 300;\n+\n+        setupContentSizeTestStage(initialContentSize, initialContentSize,\n+                () -> doTimeLine(Map.of(500L, () -> testStage.setWidth(finalWidth),\n+                                        1000L, latch::countDown)));\n+\n+        assertTrue(latch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+\n+        runAndWait(() -> assertColorDoesNotEqual(BACKGROUND_COLOR,\n+                getColor(initialContentSize - 10, initialContentSize \/ 2), TOLERANCE));\n+        Assertions.assertEquals(finalWidth, testStage.getWidth(), \"Window width should be \" + finalWidth);\n+    }\n+\n+    @Test\n+    public void testSetHeightOnlyAfterShownOnContentSizeWindow() throws Exception {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        final int finalHeight = 200;\n+        final int initialContentSize = 300;\n+\n+        setupContentSizeTestStage(initialContentSize, initialContentSize,\n+                () -> doTimeLine(Map.of(500L, () -> testStage.setHeight(finalHeight),\n+                                        1000L, latch::countDown)));\n+\n+        assertTrue(latch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+\n+        runAndWait(() -> assertColorDoesNotEqual(BACKGROUND_COLOR,\n+                getColor(initialContentSize \/ 2, initialContentSize - 10), TOLERANCE));\n+        Assertions.assertEquals(finalHeight, testStage.getHeight(), \"Window height should be \" + finalHeight);\n+    }\n+\n+    private void setupContentSizeTestStage(int width, int height, Runnable onShown) {\n+        runAndWait(() -> {\n+            testStage = getStage(true);\n+            testStage.initStyle(StageStyle.TRANSPARENT);\n+            Pane pane = new Pane();\n+            pane.setPrefSize(width, height);\n+            pane.setBackground(new Background(new BackgroundFill(BACKGROUND_COLOR, CornerRadii.EMPTY, Insets.EMPTY)));\n+            Scene scene = new Scene(pane);\n+            testStage.setScene(scene);\n+            testStage.setX(0);\n+            testStage.setY(0);\n+            testStage.setOnShown(e -> onShown.run());\n+            testStage.show();\n+        });\n+    }\n+\n+    private void doTimeLine(Map<Long, Runnable> keyFrames) {\n+        Timeline timeline = new Timeline();\n+        timeline.setCycleCount(1);\n+        keyFrames.forEach((duration, runnable) ->\n+                timeline.getKeyFrames().add(new KeyFrame(Duration.millis(duration), e -> runnable.run())));\n+        timeline.play();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageMixedSizeTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}