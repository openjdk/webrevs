{"files":[{"patch":"@@ -1105,0 +1105,2 @@\n+    } else {\n+        newW = geometry_get_content_width(&geometry);\n@@ -1115,0 +1117,2 @@\n+    } else {\n+        newH = geometry_get_content_height(&geometry);\n@@ -1117,0 +1121,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import javafx.application.Platform;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.BiConsumer;\n+\n+public class StageMixedSizingTest {\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n+    private Stage mainStage;\n+\n+    @BeforeAll\n+    static void initFX() {\n+        Platform.setImplicitExit(false);\n+        Util.startup(startupLatch, startupLatch::countDown);\n+    }\n+\n+    @AfterAll\n+    static void teardown() {\n+        Util.shutdown();\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        Util.runAndWait(() -> {\n+            if (mainStage != null) {\n+                mainStage.hide();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testSetWidthOnlyAfterShownOnContentSizeWindow() throws Exception {\n+        int contentSize = 300;\n+        int windowWidth = 200;\n+\n+        createStage((s, sp) -> {\n+            s.setTitle(\"Width only after content size window\");\n+            sp.setPrefWidth(contentSize);\n+            sp.setPrefHeight(contentSize);\n+        }, (s, sp) -> s.setWidth(windowWidth));\n+\n+        Assertions.assertEquals(windowWidth, mainStage.getWidth(), \"Window width should be \" + windowWidth);\n+    }\n+\n+    private void createStage(BiConsumer<Stage, StackPane> beforeShown,\n+                             BiConsumer<Stage, StackPane> afterShown) throws InterruptedException {\n+        CountDownLatch showLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            mainStage = new Stage();\n+\n+            var sp = new StackPane();\n+            sp.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));\n+            if (beforeShown != null) {\n+                beforeShown.accept(mainStage, sp);\n+            }\n+\n+            mainStage.setScene(new Scene(sp));\n+            mainStage.setOnShown(e -> {\n+                if (afterShown != null) {\n+                    afterShown.accept(mainStage, sp);\n+                }\n+\n+                showLatch.countDown();\n+            });\n+\n+            mainStage.show();\n+        });\n+\n+        Util.waitForLatch(showLatch, 5, \"Stage failed to setup and show\");\n+        Util.sleep(500);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/StageMixedSizeTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}