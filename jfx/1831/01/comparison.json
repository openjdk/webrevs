{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.javafx.binding.ObjectConstant;\n@@ -267,0 +266,1 @@\n+    private final boolean modal;\n@@ -272,1 +272,3 @@\n-    public HeaderButtonOverlay(ObservableValue<String> stylesheet, boolean utility, boolean rightToLeft) {\n+    public HeaderButtonOverlay(ObservableValue<String> stylesheet, boolean modal,\n+                               boolean utility, boolean rightToLeft) {\n+        this.modal = modal;\n@@ -313,2 +315,0 @@\n-            iconifyButton.managedProperty().bind(ObjectConstant.valueOf(false));\n-            maximizeButton.managedProperty().bind(ObjectConstant.valueOf(false));\n@@ -316,1 +316,0 @@\n-            getStyleClass().add(UTILITY_STYLE_CLASS);\n@@ -453,0 +452,3 @@\n+        boolean utilityStyle = utility || (modal && !resizable);\n+        toggleStyleClass(this, UTILITY_STYLE_CLASS, utilityStyle);\n+        iconifyButton.setDisable(utility || modal);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/HeaderButtonOverlay.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -283,0 +283,1 @@\n+        this.isModal = (this.styleMask & Window.MODAL) != 0;\n@@ -1160,37 +1161,0 @@\n-    \/\/ *****************************************************\n-    \/\/ modality (prototype using native platform feature)\n-    \/\/ *****************************************************\n-    protected abstract void _enterModal(long ptr);\n-    \/**\n-     * Enter modal state blocking everything except our window.\n-     *\/\n-    public void enterModal() {\n-        checkNotClosed();\n-        if (this.isModal == false) {\n-            this.isModal = true;\n-            _enterModal(this.ptr);\n-        }\n-    }\n-\n-    protected abstract void _enterModalWithWindow(long dialog, long window);\n-    \/**\n-     * Enter modal state only blocking the given window.\n-     * On Mac OS X this is done using a dialog sheet.\n-     *\/\n-    public void enterModal(final Window window) {\n-        checkNotClosed();\n-        if (this.isModal == false) {\n-            this.isModal = true;\n-            _enterModalWithWindow(this.ptr, window.getNativeHandle());\n-        }\n-    }\n-\n-    protected abstract void _exitModal(long ptr);\n-    public void exitModal() {\n-        checkNotClosed();\n-        if (this.isModal == true) {\n-            _exitModal(this.ptr);\n-            this.isModal = false;\n-        }\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Window.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -118,9 +118,0 @@\n-    @Override\n-    protected native void _enterModal(long ptr);\n-\n-    @Override\n-    protected native void _enterModalWithWindow(long dialog, long window);\n-\n-    @Override\n-    protected native void _exitModal(long ptr);\n-\n@@ -258,1 +249,1 @@\n-            isUtilityWindow(),\n+            isModal() || getOwner() != null, isUtilityWindow(),\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n-    @Override native protected void _enterModal(long ptr);\n-    @Override native protected void _enterModalWithWindow(long dialog, long window);\n-    @Override native protected void _exitModal(long ptr);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/ios\/IosWindow.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,3 +118,0 @@\n-    @Override native protected void _enterModal(long ptr);\n-    @Override native protected void _enterModalWithWindow(long dialog, long window);\n-    @Override native protected void _exitModal(long ptr);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -395,22 +395,0 @@\n-    \/**\n-     * The functions below are used when the platform support modality natively.\n-     * Currently only GTK is using it. This functionality is disabled by\n-     * default. In order to enable it this class need to override Window::\n-     * supportsPlatformModality() to return true.\n-     *\n-     *\/\n-    @Override\n-    protected void _enterModal(long ptr) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    protected void _enterModalWithWindow(long dialog, long window) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    protected void _exitModal(long ptr) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleWindow.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-    public WinHeaderButtonOverlay(boolean utility, boolean rightToLeft) {\n-        super(getStylesheet(), utility, rightToLeft);\n+    public WinHeaderButtonOverlay(boolean modal, boolean utility, boolean rightToLeft) {\n+        super(getStylesheet(), modal, utility, rightToLeft);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinHeaderButtonOverlay.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -292,3 +292,0 @@\n-    @Override native protected void _enterModal(long ptr);\n-    @Override native protected void _enterModalWithWindow(long dialog, long window);\n-    @Override native protected void _exitModal(long ptr);\n@@ -384,1 +381,1 @@\n-            isUtilityWindow(),\n+            isModal() || getOwner() != null, isUtilityWindow(),\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinWindow.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.event.Event;\n@@ -34,0 +35,1 @@\n+import javafx.scene.input.MouseButton;\n@@ -38,0 +40,2 @@\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n@@ -41,1 +45,1 @@\n-public final class HeaderButtonBehavior implements EventHandler<MouseEvent> {\n+public final class HeaderButtonBehavior implements EventHandler<Event> {\n@@ -57,0 +61,10 @@\n+        Subscription subscription = Subscription.combine(\n+            stage.flatMap(Stage::fullScreenProperty).subscribe(this::onFullScreenChanged),\n+            () -> node.removeEventHandler(MouseEvent.MOUSE_RELEASED, this));\n+\n+        if (type != HeaderButtonType.CLOSE) {\n+            subscription = Subscription.combine(subscription,\n+                stage.subscribe(this::onStageChanged),\n+                stage.flatMap(Stage::resizableProperty).subscribe(this::onResizableChanged));\n+        }\n+\n@@ -58,11 +72,2 @@\n-            subscription = Subscription.combine(\n-                stage.flatMap(Stage::resizableProperty).subscribe(this::onResizableChanged),\n-                stage.flatMap(Stage::fullScreenProperty).subscribe(this::onFullScreenChanged),\n-                stage.flatMap(Stage::maximizedProperty).subscribe(this::onMaximizedChanged),\n-                () -> node.removeEventHandler(MouseEvent.MOUSE_RELEASED, this)\n-            );\n-        } else {\n-            subscription = Subscription.combine(\n-                stage.flatMap(Stage::fullScreenProperty).subscribe(this::onFullScreenChanged),\n-                () -> node.removeEventHandler(MouseEvent.MOUSE_RELEASED, this)\n-            );\n+            subscription = Subscription.combine(subscription,\n+                stage.flatMap(Stage::maximizedProperty).subscribe(this::onMaximizedChanged));\n@@ -71,0 +76,2 @@\n+        this.subscription = subscription;\n+\n@@ -80,0 +87,4 @@\n+\n+        if (getStage() instanceof Stage stage) {\n+            stage.removeEventFilter(WindowEvent.WINDOW_SHOWING, this);\n+        }\n@@ -83,2 +94,10 @@\n-    public void handle(MouseEvent event) {\n-        if (!node.getLayoutBounds().contains(event.getX(), event.getY())) {\n+    public void handle(Event event) {\n+        if (event instanceof MouseEvent mouseEvent) {\n+            handleMouseEvent(mouseEvent);\n+        } else if (event instanceof WindowEvent windowEvent) {\n+            handleWindowEvent(windowEvent);\n+        }\n+    }\n+\n+    private void handleMouseEvent(MouseEvent event) {\n+        if (!node.getLayoutBounds().contains(event.getX(), event.getY()) || event.getButton() != MouseButton.PRIMARY) {\n@@ -108,0 +127,6 @@\n+    private void handleWindowEvent(WindowEvent event) {\n+        if (event.getEventType() == WindowEvent.WINDOW_SHOWING && getStage() instanceof Stage stage) {\n+            updateButtonDisableState(stage);\n+        }\n+    }\n+\n@@ -117,1 +142,17 @@\n-    private void onResizableChanged(Boolean resizable) {\n+    private void onStageChanged(Stage oldStage, Stage newStage) {\n+        if (oldStage != null) {\n+            oldStage.removeEventFilter(WindowEvent.WINDOW_SHOWING, this);\n+        }\n+\n+        if (newStage != null) {\n+            newStage.addEventFilter(WindowEvent.WINDOW_SHOWING, this);\n+        }\n+    }\n+\n+    private void onResizableChanged(Boolean unused) {\n+        if (getStage() instanceof Stage stage) {\n+            updateButtonDisableState(stage);\n+        }\n+    }\n+\n+    private void updateButtonDisableState(Stage stage) {\n@@ -119,1 +160,8 @@\n-            node.setDisable(resizable == Boolean.FALSE);\n+            boolean utility = stage.getStyle() == StageStyle.UTILITY;\n+            boolean modal = stage.getOwner() != null || stage.getModality() != Modality.NONE;\n+            boolean resizable = stage.isResizable();\n+\n+            switch (type) {\n+                case ICONIFY -> node.setDisable(utility || modal);\n+                case MAXIMIZE -> node.setDisable(!resizable);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/HeaderButtonBehavior.java","additions":64,"deletions":16,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -469,46 +469,0 @@\n-\/*\n- * Class:     com_sun_glass_ui_gtk_GtkWindow\n- * Method:    _enterModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1enterModal\n-  (JNIEnv * env, jobject obj, jlong ptr)\n-{\n-    (void)env;\n-    (void)obj;\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n-    ctx->set_modal(true);\n-}\n-\n-\/*\n- * Class:     com_sun_glass_ui_gtk_GtkWindow\n- * Method:    _enterModalWithWindow\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1enterModalWithWindow\n-  (JNIEnv * env, jobject obj, jlong ptrDialog, jlong ptrWindow)\n-{\n-    (void)env;\n-    (void)obj;\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptrDialog);\n-    WindowContext* parent_ctx = JLONG_TO_WINDOW_CTX(ptrWindow);\n-    ctx->set_modal(true, parent_ctx);\n-}\n-\n-\/*\n- * Class:     com_sun_glass_ui_gtk_GtkWindow\n- * Method:    _exitModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1exitModal\n-  (JNIEnv * env, jobject obj, jlong ptr)\n-{\n-    (void)env;\n-    (void)obj;\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n-    ctx->set_modal(false);\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1590,54 +1590,0 @@\n-\/*\n- * Class:     com_sun_glass_ui_ios_IosWindow\n- * Method:    _enterModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_ios_IosWindow__1enterModal\n-(JNIEnv *env, jobject jwindow, jlong windowPtr) {\n-    GLASS_LOG(\"Java_com_sun_glass_ui_ios_IosWindow__1enterModal called.\");\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        \/\/ implementation omes here\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-\n-\/*\n- * Class:     com_sun_glass_ui_ios_IosWindow\n- * Method:    _enterModalWithWindow\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_ios_IosWindow__1enterModalWithWindow\n-(JNIEnv *env, jobject jwindow, jlong windowPtr, jlong window) {\n-    GLASS_LOG(\"Java_com_sun_glass_ui_ios_IosWindow__1enterModalWithWindow called.\");\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        \/\/ implemenation comes here\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-\n-\/*\n- * Class:     com_sun_glass_ui_ios_IosWindow\n- * Method:    _exitModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_ios_IosWindow__1exitModal\n-(JNIEnv *env, jobject jwindow, jlong windowPtr) {\n-    GLASS_LOG(\"Java_com_sun_glass_ui_ios_IosWindow__1exitModal called.\");\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        \/\/ implementation comes here\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassWindow.m","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1407,63 +1407,0 @@\n-\n-\/*\n- * Class:     com_sun_glass_ui_mac_MacWindow\n- * Method:    _enterModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacWindow__1enterModal\n-(JNIEnv *env, jobject jWindow, jlong jPtr)\n-{\n-    LOG(\"Java_com_sun_glass_ui_mac_MacWindow__1enterModal\");\n-    if (!jPtr) return;\n-\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        GlassWindow *window = getGlassWindow(env, jPtr);\n-        [NSApp runModalForWindow:window->nsWindow];\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-\/*\n- * Class:     com_sun_glass_ui_mac_MacWindow\n- * Method:    _enterModalWithWindow\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacWindow__1enterModalWithWindow\n-(JNIEnv *env, jobject jWindow, jlong jDialogPtr, jlong jWindowPtr)\n-{\n-    LOG(\"Java_com_sun_glass_ui_mac_MacWindow__1enterModalWithWindow\");\n-\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        \/\/GlassWindow *window = getGlassWindow(env, jDialogPtr);\n-        \/\/ TODO: implement _enterModalWithWindow\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-\/*\n- * Class:     com_sun_glass_ui_mac_MacWindow\n- * Method:    _exitModal\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacWindow__1exitModal\n-(JNIEnv *env, jobject jWindow, jlong jPtr)\n-{\n-    LOG(\"Java_com_sun_glass_ui_mac_MacWindow__1exitModal\");\n-    if (!jPtr) return;\n-\n-    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n-    GLASS_POOL_ENTER;\n-    {\n-        GlassWindow *window = getGlassWindow(env, jPtr);\n-        [NSApp stop:window->nsWindow];\n-    }\n-    GLASS_POOL_EXIT;\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":0,"deletions":63,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -927,1 +927,1 @@\n-        if (::GetWindowRect(GetHWND(), &windowRect) && y < windowRect.top + topBorderHeight) {\n+        if (m_isResizable && ::GetWindowRect(GetHWND(), &windowRect) && y < windowRect.top + topBorderHeight) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,6 +104,6 @@\n-.-FX-INTERNAL-maximize-button:disabled {\n-    -fx-background-color: transparent;\n-}\n-\n-.-FX-INTERNAL-maximize-button:disabled > .-FX-INTERNAL-glyph {\n-    -fx-background-color: #777;\n+.-FX-INTERNAL-iconify-button:disabled,\n+.-FX-INTERNAL-maximize-button:disabled,\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-iconify-button,\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-maximize-button {\n+    -fx-managed: false;\n+    visibility: hidden;\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/glass\/ui\/gtk\/WindowDecorationGnome.css","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -92,1 +92,4 @@\n-.-FX-INTERNAL-maximize-button:disabled {\n+.-FX-INTERNAL-iconify-button:disabled,\n+.-FX-INTERNAL-maximize-button:disabled,\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-iconify-button,\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-maximize-button {\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/glass\/ui\/gtk\/WindowDecorationKDE.css","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -90,0 +90,7 @@\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-iconify-button,\n+.-FX-INTERNAL-header-button-container.utility > .-FX-INTERNAL-maximize-button {\n+    -fx-managed: false;\n+    visibility: hidden;\n+}\n+\n+.-FX-INTERNAL-iconify-button:disabled,\n@@ -94,0 +101,1 @@\n+.-FX-INTERNAL-iconify-button:disabled > .-FX-INTERNAL-glyph,\n@@ -98,0 +106,1 @@\n+.-FX-INTERNAL-iconify-button.dark:disabled > .-FX-INTERNAL-glyph,\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/glass\/ui\/win\/WindowDecoration.css","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n@@ -60,1 +62,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -86,1 +88,1 @@\n-            \"\"\"), false, true);\n+            \"\"\"), false, false, true);\n@@ -114,1 +116,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -141,1 +143,1 @@\n-            \"\"\"), false, true);\n+            \"\"\"), false, false, true);\n@@ -168,1 +170,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -194,1 +196,1 @@\n-            \"\"\"), false, true);\n+            \"\"\"), false, false, true);\n@@ -222,1 +224,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -249,1 +251,1 @@\n-            \"\"\"), false, true);\n+            \"\"\"), false, false, true);\n@@ -277,1 +279,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -304,1 +306,1 @@\n-            \"\"\"), false, true);\n+            \"\"\"), false, false, true);\n@@ -325,1 +327,1 @@\n-            \"\"\"), true, false);\n+            \"\"\"), false, true, false);\n@@ -332,0 +334,48 @@\n+    enum ButtonDisabledStateTest {\n+        RESIZABLE(true, false, false, false),\n+        UNRESIZABLE(false, false, false, true),\n+        MODAL_RESIZABLE(true, true, true, false),\n+        MODAL_UNRESIZABLE(false, true, true, true);\n+\n+        ButtonDisabledStateTest(boolean resizable, boolean modal, boolean iconifyDisabled, boolean maximizeDisabled) {\n+            this.resizable = resizable;\n+            this.modal = modal;\n+            this.iconifyDisabled = iconifyDisabled;\n+            this.maximizeDisabled = maximizeDisabled;\n+        }\n+\n+        final boolean resizable;\n+        final boolean modal;\n+        final boolean iconifyDisabled;\n+        final boolean maximizeDisabled;\n+    }\n+\n+    \/**\n+     * Tests the disabled states of the iconify and maximize buttons for all combinations\n+     * of resizable and modal window attributes.\n+     *\/\n+    @ParameterizedTest\n+    @EnumSource(ButtonDisabledStateTest.class)\n+    void buttonDisabledStateIsCorrect(ButtonDisabledStateTest test) {\n+        var overlay = new HeaderButtonOverlay(getStylesheet(\"\"\"\n+                .-FX-INTERNAL-header-button { -fx-pref-width: 20; -fx-pref-height: 10; }\n+            \"\"\"), test.modal, false, false);\n+\n+        var scene = new Scene(overlay);\n+        var stage = new Stage();\n+        stage.setScene(scene);\n+        stage.setResizable(test.resizable);\n+\n+        var children = overlay.getChildrenUnmodifiable();\n+        assertEquals(3, children.size());\n+\n+        assertTrue(children.get(0).getStyleClass().contains(\"-FX-INTERNAL-iconify-button\"));\n+        assertEquals(test.iconifyDisabled, children.get(0).isDisabled());\n+\n+        assertTrue(children.get(1).getStyleClass().contains(\"-FX-INTERNAL-maximize-button\"));\n+        assertEquals(test.maximizeDisabled, children.get(1).isDisabled());\n+\n+        assertTrue(children.get(2).getStyleClass().contains(\"-FX-INTERNAL-close-button\"));\n+        assertFalse(children.get(2).isDisabled());\n+    }\n+\n@@ -337,1 +387,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -363,1 +413,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -387,1 +437,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -410,1 +460,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n@@ -429,1 +479,1 @@\n-            \"\"\"), false, false);\n+            \"\"\"), false, false, false);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/glass\/ui\/HeaderButtonOverlayTest.java","additions":66,"deletions":16,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene.layout;\n+\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.HeaderBar;\n+import javafx.scene.layout.HeaderButtonType;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class HeaderButtonBehaviorTest {\n+\n+    enum ButtonDisabledStateTest {\n+        RESIZABLE(true, false, false, false, false),\n+        UNRESIZABLE(false, false, false, false, true),\n+        MODAL_RESIZABLE(true, true, false, true, false),\n+        MODAL_UNRESIZABLE(false, true, false, true, true),\n+        OWNER_RESIZABLE(true, false, true, true, false),\n+        OWNER_UNRESIZABLE(false, false, true, true, true),\n+        OWNER_MODAL_RESIZABLE(true, true, true, true, false),\n+        OWNER_MODAL_UNRESIZABLE(false, true, true, true, true);\n+\n+        ButtonDisabledStateTest(boolean resizable, boolean modal, boolean hasOwner,\n+                                boolean iconifyDisabled, boolean maximizeDisabled) {\n+            this.resizable = resizable;\n+            this.modal = modal;\n+            this.hasOwner = hasOwner;\n+            this.iconifyDisabled = iconifyDisabled;\n+            this.maximizeDisabled = maximizeDisabled;\n+        }\n+\n+        final boolean resizable;\n+        final boolean modal;\n+        final boolean hasOwner;\n+        final boolean iconifyDisabled;\n+        final boolean maximizeDisabled;\n+    }\n+\n+    \/**\n+     * Tests the disabled states of the iconify and maximize buttons for all combinations\n+     * of resizable, modal, and owner window attributes.\n+     *\/\n+    @ParameterizedTest\n+    @EnumSource(ButtonDisabledStateTest.class)\n+    void buttonDisabledStateIsCorrect(ButtonDisabledStateTest test) {\n+        Node iconify = new Group(), maximize = new Group(), close = new Group();\n+        HeaderBar.setButtonType(iconify, HeaderButtonType.ICONIFY);\n+        HeaderBar.setButtonType(maximize, HeaderButtonType.MAXIMIZE);\n+        HeaderBar.setButtonType(close, HeaderButtonType.CLOSE);\n+\n+        var stage = new Stage();\n+        stage.initModality(test.modal ? Modality.WINDOW_MODAL : Modality.NONE);\n+        stage.setResizable(test.resizable);\n+        stage.setScene(new Scene(new Group(iconify, maximize, close)));\n+\n+        if (test.hasOwner) {\n+            stage.initOwner(new Stage());\n+        }\n+\n+        stage.show();\n+        assertEquals(test.iconifyDisabled, iconify.isDisabled());\n+        assertEquals(test.maximizeDisabled, maximize.isDisabled());\n+        assertFalse(close.isDisabled());\n+        stage.close();\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/HeaderButtonBehaviorTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}