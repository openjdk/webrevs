{"files":[{"patch":"@@ -658,0 +658,4 @@\n+    public boolean canStartNestedEventLoop() {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -218,0 +218,5 @@\n+    native private boolean _canStartNestedEventLoop();\n+    @Override public boolean canStartNestedEventLoop() {\n+        return _canStartNestedEventLoop();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-        return inPulse == 0;\n+        return inPulse == 0 && Application.GetApplication().canStartNestedEventLoop();\n@@ -636,1 +636,5 @@\n-            throw new IllegalStateException(\"Cannot enter nested loop during animation or layout processing\");\n+            if (!Application.GetApplication().canStartNestedEventLoop()) {\n+                throw new RuntimeException(\"Exceeded limit on nested event loops\");\n+            } else {\n+                throw new IllegalStateException(\"Cannot enter nested loop during animation or layout processing\");\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n++ (BOOL)canStartNestedEventLoop;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+static NSInteger nestedRunLoopRunCount = 0;\n@@ -756,0 +757,10 @@\n++ (BOOL)canStartNestedEventLoop\n+{\n+    \/\/ Starting with macOS 15 there is an undocumented limit of 255 nested\n+    \/\/ calls to CFRunLoopRun. Exceeding that limit will crash the app with a\n+    \/\/ log that contains the phrase \"Too many nested CFRunLoopRuns\". We use a\n+    \/\/ lower value here to account for calls in the Java runtime and testing\n+    \/\/ environment.\n+    return nestedRunLoopRunCount <= 250;\n+}\n+\n@@ -765,7 +776,15 @@\n-    while (shouldKeepRunningNestedLoop && [theRL runMode:NSDefaultRunLoopMode\n-                                              beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.010]])\n-    {\n-        NSEvent * event = [app nextEventMatchingMask: 0xFFFFFFFF untilDate:nil inMode:NSDefaultRunLoopMode dequeue:YES];\n-\n-        if (event != nil) {\n-            [app sendEvent: event];\n+    while (shouldKeepRunningNestedLoop) {\n+        \/\/ Platform.runLater runnables are executed from the runMode:beforeDate: call.\n+        nestedRunLoopRunCount += 1;\n+        BOOL ran = [theRL runMode:NSDefaultRunLoopMode\n+                       beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.010]];\n+        nestedRunLoopRunCount -= 1;\n+        if (ran) {\n+            NSEvent * event = [app nextEventMatchingMask: 0xFFFFFFFF untilDate:nil inMode:NSDefaultRunLoopMode dequeue:YES];\n+\n+            if (event != nil) {\n+                [app sendEvent: event];\n+            }\n+        }\n+        else {\n+            break;\n@@ -1102,0 +1121,14 @@\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacApplication\n+ * Method:    _canStartNestedEventLoop\n+ * Signature: ()Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_com_sun_glass_ui_mac_MacApplication__1canStartNestedEventLoop\n+(JNIEnv *env, jobject japplication)\n+{\n+    LOG(\"Java_com_sun_glass_ui_mac_MacApplication__1canStartNestedEventLoop\");\n+\n+    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n+    return (jboolean) [GlassApplication canStartNestedEventLoop];\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":40,"deletions":7,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import com.sun.javafx.PlatformUtil;\n@@ -314,0 +315,48 @@\n+\n+    \/\/ On some platforms there is a limit on the number of nested event loops.\n+    \/\/ An exception is thrown if we exceed this limit.\n+    private void createManyNestedLoops(int n, Object previousLoop, AtomicBoolean exceptionThrown) {\n+        if (exceptionThrown.get()) {\n+            \/\/ Previous run loop was not created.\n+            return;\n+        }\n+\n+        if (n <= 0) {\n+            \/\/ We created all the nested loops successfully. Unwind them.\n+            if (previousLoop != null) {\n+                Platform.exitNestedEventLoop(previousLoop, null);\n+            }\n+        } else {\n+            final Integer thisLoop = n;\n+            Platform.runLater(() -> {\n+                createManyNestedLoops(n - 1, thisLoop, exceptionThrown);\n+            });\n+\n+            try {\n+                Platform.enterNestedEventLoop(thisLoop);\n+            } catch (RuntimeException ex) {\n+                exceptionThrown.set(true);\n+            }\n+\n+            if (previousLoop != null) {\n+                Platform.exitNestedEventLoop(previousLoop, null);\n+            }\n+        }\n+    }\n+\n+    @Test public void maxNestedLoops() {\n+        Util.runAndWait(() -> {\n+            \/\/ Test the exception case first to ensure the system recovers\n+            \/\/ correctly.\n+            AtomicBoolean expectedException = new AtomicBoolean(false);\n+            createManyNestedLoops(260, null, expectedException);\n+            assertFalse(Platform.isNestedLoopRunning());\n+\n+            AtomicBoolean noExceptionExpected = new AtomicBoolean(false);\n+            createManyNestedLoops(240, null, noExceptionExpected);\n+            assertFalse(Platform.isNestedLoopRunning());\n+\n+            assertEquals(expectedException.get(), PlatformUtil.isMac());\n+            assertFalse(noExceptionExpected.get());\n+        });\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}