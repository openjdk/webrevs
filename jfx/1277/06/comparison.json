{"files":[{"patch":"@@ -52,0 +52,1 @@\n+        macMenu.ptr = 0;\n@@ -58,0 +59,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacMenuBarDelegate.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+        if (ptr == 0) return false;\n@@ -79,0 +80,1 @@\n+        if (ptr == 0) return false;\n@@ -86,0 +88,1 @@\n+        if (ptr == 0) return false;\n@@ -87,0 +90,1 @@\n+        macMenu.ptr = 0;\n@@ -92,0 +96,1 @@\n+        if (ptr == 0) return false;\n@@ -93,0 +98,3 @@\n+        if (macMenu != null) {\n+            macMenu.ptr = 0L;\n+        }\n@@ -98,0 +106,1 @@\n+        if (ptr == 0) return false;\n@@ -104,0 +113,1 @@\n+        if (ptr == 0) return false;\n@@ -110,0 +120,1 @@\n+        if (ptr == 0) return false;\n@@ -116,0 +127,1 @@\n+        if (ptr == 0) return false;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacMenuDelegate.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -374,0 +374,1 @@\n+            [glassmenu release];\n@@ -536,0 +537,1 @@\n+                [submenu release];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMenu.m","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+import test.util.memory.JMemoryBuddy;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n@@ -45,0 +48,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -63,0 +67,1 @@\n+    CountDownLatch memoryLatch = new CountDownLatch(1);\n@@ -111,0 +116,59 @@\n+\n+    @Test\n+    public void testMemoryLeak() throws InterruptedException {\n+        Util.runAndWait(() -> {\n+            Thread.currentThread().setUncaughtExceptionHandler((t,e) -> {\n+                e.printStackTrace();\n+                failed.set(true);\n+                memoryLatch.countDown();\n+            });\n+            createMenuBarWithItemsStage();\n+        });\n+        memoryLatch.await();\n+        assertFalse(failed.get());\n+    }\n+\n+    private void createMenuBarWithItemsStage() {\n+        final ArrayList<WeakReference<MenuItem>> uncollectedMenuItems = new ArrayList<>();\n+\n+        Stage stage = new Stage();\n+        VBox root = new VBox();\n+        final MenuBar menuBar = new MenuBar();\n+        final Menu menu = new Menu(\"MyMenu\");\n+        menuBar.getMenus().add(menu);\n+        menuBar.setUseSystemMenuBar(true);\n+        root.getChildren().add(menuBar);\n+\n+        Scene scene = new Scene(root);\n+        stage.setScene(scene);\n+        stage.show();\n+        stage.requestFocus();\n+        Thread t = new Thread() {\n+            @Override public void run() {\n+                for (int i = 0; i < 10; i++) {\n+                    try {\n+                        Thread.sleep(20);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                    Platform.runLater(() -> {\n+                        menu.getItems().clear();\n+                        MenuItem menuItem = new MenuItem(\"MyItem\");\n+                        WeakReference<MenuItem> wr = new WeakReference<>(menuItem);\n+                        uncollectedMenuItems.add(wr);\n+                        menu.getItems().add(menuItem);\n+                    });\n+                }\n+                Platform.runLater( () -> {\n+                    int strongCount = 0;\n+                    for (WeakReference<MenuItem> wr: uncollectedMenuItems) {\n+                        if (!JMemoryBuddy.checkCollectable(wr)) strongCount++;\n+                    }\n+                    assertEquals(1, strongCount, \"Only the last menuItem should be alive\");\n+                    memoryLatch.countDown();\n+                });\n+            }\n+        };\n+        t.start();\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SystemMenuBarTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"}]}