{"files":[{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.robot.javafx.scene.control.behavior;\n-\n-import java.awt.image.BufferedImage;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.util.Base64;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javax.imageio.ImageIO;\n-import javafx.embed.swing.SwingFXUtils;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.image.WritableImage;\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Screen;\n-import org.junit.jupiter.api.extension.ExtensionContext;\n-import org.junit.jupiter.api.extension.TestWatcher;\n-import test.util.Util;\n-\n-\/**\n- * Takes a screenshot of any failed test, then outputs it to {@code stderr}\n- * in a base-64-encoded data URL.  This string can be copied to a browser address bar\n- * to see the image (the image might be truncated by the browser, so try different browsers\n- * or use a dedicated program).\n- * <p>\n- * To use, simply add the following annotation to your class:\n- * <pre>{@code\n- * @ExtendWith(ScreenshotFailedTestWatcher.class)\n- * }<\/pre>\n- * <p>\n- * For Eclipse users, override dependencies with the following entries:\n- * <pre>{@code\n- * --add-modules=javafx.base,javafx.graphics,javafx.controls,javafx.swing\n- * --add-opens javafx.controls\/test.com.sun.javafx.scene.control.test=javafx.base\n- * --add-exports javafx.base\/com.sun.javafx=ALL-UNNAMED\n- * -Djava.library.path=\"..\/..\/..\/..\/build\/sdk\/lib\"\n- * -ea\n- * }<\/pre>\n- * <p>\n- * WARNING: using this utility may significantly increase the size of your logs!\n- * Make sure there is plenty of free disk space.\n- *\/\n-public class ScreenshotFailedTestWatcher implements TestWatcher {\n-    @Override\n-    public void testFailed(ExtensionContext cx, Throwable e) {\n-        System.err.println(generateScreenshot(\"Screenshot:\\ndata:image\/png;base64,\", \"\\n\"));\n-    }\n-\n-    private String generateScreenshot(String prefix, String postfix) {\n-        AtomicReference<String> ref = new AtomicReference<>();\n-        Util.runAndWait(() -> {\n-            String s = generateScreenshotFX(prefix, postfix);\n-            ref.set(s);\n-        });\n-        return ref.get();\n-    }\n-\n-    private String generateScreenshotFX(String prefix, String postfix) {\n-        try {\n-            \/\/ there should be a JavaFX way to create images without requiring ImageIO and Swing!\n-            ImageIO.setUseCache(false);\n-\n-            Rectangle2D bounds = Screen.getPrimary().getBounds();\n-            Robot r = new Robot();\n-            \/\/ do not scale to fit, capture all pixels\n-            WritableImage im = r.getScreenCapture(null, bounds, false);\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            BufferedImage im2 = SwingFXUtils.fromFXImage(im, null);\n-            ImageIO.write(im2, \"PNG\", os);\n-            byte[] b = os.toByteArray();\n-            String b64 = Base64.getEncoder().encodeToString(b);\n-\n-            int len0 = (prefix == null) ? 0 : prefix.length();\n-            int len1 = (postfix == null) ? 0 : postfix.length();\n-\n-            if ((len0 + len1) == 0) {\n-                return b64;\n-            }\n-\n-            int sz = b64.length() + len0 + len1;\n-            StringBuilder sb = new StringBuilder(sz);\n-            if (prefix != null) {\n-                sb.append(prefix);\n-            }\n-            sb.append(b64);\n-            if (postfix != null) {\n-                sb.append(postfix);\n-            }\n-            return sb.toString();\n-        } catch (IOException e) {\n-            return \"error generating screenshot: \" + e;\n-        }\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/ScreenshotFailedTestWatcher.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -33,0 +34,1 @@\n+import test.util.ScreenCaptureTestWatcher;\n@@ -38,0 +40,1 @@\n+@ExtendWith(ScreenCaptureTestWatcher.class)\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/TextAreaBehaviorRobotTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import test.util.ScreenCaptureTestWatcher;\n@@ -51,1 +52,1 @@\n-@ExtendWith(ScreenshotFailedTestWatcher.class)\n+@ExtendWith(ScreenCaptureTestWatcher.class)\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/TextAreaRTLTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.util;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.imageio.ImageIO;\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Screen;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+\n+\/**\n+ * This TestWatcher writes a base-64 encoded PNG screenshot of the desktop to {@code stderr}\n+ * when a test fails.\n+ * <p>\n+ * To use, simply add the following annotation to your class:\n+ * <pre>{@code\n+ * @ExtendWith(ScreenCaptureTestWatcher.class)\n+ * }<\/pre>\n+ * <p>\n+ * WARNING: using this utility may significantly increase the size of your logs!\n+ * Make sure there is plenty of free disk space.\n+ *\/\n+public class ScreenCaptureTestWatcher implements TestWatcher {\n+    @Override\n+    public void testFailed(ExtensionContext extensionContext, Throwable err) {\n+        \/\/ can be pasted into Safari address bar\n+        System.err.println(generateScreenshot(\"Screenshot:{\\ndata:image\/png;base64,\", null));\n+    }\n+\n+    private String generateScreenshot(String prefix, String postfix) {\n+        AtomicReference<String> ref = new AtomicReference<>();\n+        Util.runAndWait(() -> {\n+            String s = generateScreenshotFX(prefix, postfix);\n+            ref.set(s);\n+        });\n+        return ref.get();\n+    }\n+\n+    private String generateScreenshotFX(String prefix, String postfix) {\n+        try {\n+            \/\/ there should be a JavaFX way to create images without requiring ImageIO and Swing!\n+            ImageIO.setUseCache(false);\n+\n+            Rectangle2D bounds = Screen.getPrimary().getBounds();\n+            Robot r = new Robot();\n+            \/\/ do not scale to fit, capture all pixels\n+            WritableImage im = r.getScreenCapture(null, bounds, false);\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            BufferedImage im2 = SwingFXUtils.fromFXImage(im, null);\n+            ImageIO.write(im2, \"PNG\", os);\n+            byte[] b = os.toByteArray();\n+            String s = Base64.getEncoder().encodeToString(b);\n+            if ((prefix == null) && (postfix == null)) {\n+                return s;\n+            }\n+            return\n+                (prefix == null ? \"\" : prefix) +\n+                s +\n+                (postfix == null ? \"\" : postfix);\n+        } catch (IOException e) {\n+            return \"error generating screenshot: \" + e;\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/util\/ScreenCaptureTestWatcher.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}