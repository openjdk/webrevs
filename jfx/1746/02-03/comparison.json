{"files":[{"patch":"@@ -27,13 +27,0 @@\n-import java.awt.image.BufferedImage;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.util.Base64;\n-import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javax.imageio.ImageIO;\n-import javafx.embed.swing.SwingFXUtils;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.image.WritableImage;\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Screen;\n-import org.junit.jupiter.api.extension.ExtendWith;\n@@ -59,36 +46,1 @@\n-        System.err.println(generateScreenshot(\"Screenshot:{\\ndata:image\/png;base64,\", null));\n-    }\n-\n-    private String generateScreenshot(String prefix, String postfix) {\n-        AtomicReference<String> ref = new AtomicReference<>();\n-        Util.runAndWait(() -> {\n-            String s = generateScreenshotFX(prefix, postfix);\n-            ref.set(s);\n-        });\n-        return ref.get();\n-    }\n-\n-    private String generateScreenshotFX(String prefix, String postfix) {\n-        try {\n-            \/\/ there should be a JavaFX way to create images without requiring ImageIO and Swing!\n-            ImageIO.setUseCache(false);\n-\n-            Rectangle2D bounds = Screen.getPrimary().getBounds();\n-            Robot r = new Robot();\n-            \/\/ do not scale to fit, capture all pixels\n-            WritableImage im = r.getScreenCapture(null, bounds, false);\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            BufferedImage im2 = SwingFXUtils.fromFXImage(im, null);\n-            ImageIO.write(im2, \"PNG\", os);\n-            byte[] b = os.toByteArray();\n-            String s = Base64.getEncoder().encodeToString(b);\n-            if ((prefix == null) && (postfix == null)) {\n-                return s;\n-            }\n-            return\n-                (prefix == null ? \"\" : prefix) +\n-                s +\n-                (postfix == null ? \"\" : postfix);\n-        } catch (IOException e) {\n-            return \"error generating screenshot: \" + e;\n-        }\n+        ScreenshotCapture.writeScreenshot(System.err);\n","filename":"tests\/system\/src\/test\/java\/test\/util\/ScreenCaptureTestWatcher.java","additions":1,"deletions":49,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.util;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.Base64;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.imageio.ImageIO;\n+import javafx.application.Platform;\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Screen;\n+\n+\/**\n+ * A utility to capture a screenshot via JavaFX {@link Robot}.\n+ *\/\n+public class ScreenshotCapture {\n+    \/**\n+     * Captures a screenshot using JavaFX {@link Robot} in the PNG format.\n+     * <p>\n+     * This method can be called from any thread.  If called from a thread other than\n+     * the JavaFX Application Thread, the current thread will be paused until the screenshot is taken.\n+     *\n+     * @return the byte array containing the screenshot\n+     * @throws IOException when an I\/O error occurs\n+     *\/\n+    public static byte[] takeScreenshot() throws IOException {\n+        if (Platform.isFxApplicationThread()) {\n+            return screenshotFX();\n+        } else {\n+            AtomicReference<Object> ref = new AtomicReference<>();\n+            Util.runAndWait(() -> {\n+                try {\n+                    Object s = screenshotFX();\n+                    ref.set(s);\n+                } catch (IOException e) {\n+                    ref.set(e);\n+                }\n+            });\n+            Object result = ref.get();\n+            if (result instanceof IOException e) {\n+                throw e;\n+            }\n+            return (byte[])result;\n+        }\n+    }\n+\n+    \/**\n+     * Captures a screenshot using JavaFX {@link Robot} in the PNG format,\n+     * then writes it in a Base-64 encoding to the specified {@code PrintStream}.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * Screenshot:\n+     * data:image\/png;base64,iVBORw0KGgoA...<\/pre>\n+     *\n+     * @param out the output print stream\n+     *\/\n+    public static void writeScreenshot(PrintStream out) {\n+        out.println(ScreenshotCapture.takeScreenshotBase64(\"Screenshot:\\ndata:image\/png;base64,\", null));\n+    }\n+\n+    \/**\n+     * Captures a screenshot using JavaFX {@link Robot} in the PNG format,\n+     * in the form of a Base-64 encoded {@code String}.\n+     * <p>\n+     * This method can be called from any thread.  If called from a thread other than\n+     * the JavaFX Application Thread, the current thread will be paused until the screenshot is taken.\n+     *\n+     * @param prefix the string to append before the base-64 representation, or null\n+     * @param postfix the string to append after the base-64 representation, or null\n+     * @return the screenshot in Base-64 encoded PNG, or an error message\n+     *\/\n+    public static String takeScreenshotBase64(String prefix, String postfix) {\n+        Object result;\n+        if (Platform.isFxApplicationThread()) {\n+            try {\n+                result = screenshotFX();\n+            } catch (IOException e) {\n+                result = e;\n+            }\n+        } else {\n+            AtomicReference<Object> ref = new AtomicReference<>();\n+            Util.runAndWait(() -> {\n+                try {\n+                    Object s = screenshotFX();\n+                    ref.set(s);\n+                } catch (IOException e) {\n+                    ref.set(e);\n+                }\n+            });\n+            result = ref.get();\n+        }\n+\n+        if (result instanceof IOException e) {\n+            return \"error generating screenshot: \" + e;\n+        }\n+\n+        byte[] b = (byte[])result;\n+        String s = Base64.getEncoder().encodeToString(b);\n+        if ((prefix == null) && (postfix == null)) {\n+            return s;\n+        }\n+        return\n+            (prefix == null ? \"\" : prefix) +\n+            s +\n+            (postfix == null ? \"\" : postfix);\n+    }\n+\n+    private static byte[] screenshotFX() throws IOException {\n+        \/\/ there should be a JavaFX way to create images without requiring ImageIO and Swing!\n+        ImageIO.setUseCache(false);\n+\n+        Rectangle2D bounds = Screen.getPrimary().getBounds();\n+        Robot r = new Robot();\n+        \/\/ do not scale to fit, capture all pixels\n+        WritableImage im = r.getScreenCapture(null, bounds, false);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        BufferedImage im2 = SwingFXUtils.fromFXImage(im, null);\n+        ImageIO.write(im2, \"PNG\", os);\n+        return os.toByteArray();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/util\/ScreenshotCapture.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}