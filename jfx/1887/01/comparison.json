{"files":[{"patch":"@@ -4,1 +4,1 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=21\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=24\n@@ -6,1 +6,1 @@\n-org.eclipse.jdt.core.compiler.compliance=21\n+org.eclipse.jdt.core.compiler.compliance=24\n@@ -14,2 +14,2 @@\n-org.eclipse.jdt.core.compiler.release=enabled\n-org.eclipse.jdt.core.compiler.source=21\n+org.eclipse.jdt.core.compiler.release=disabled\n+org.eclipse.jdt.core.compiler.source=24\n","filename":"tests\/manual\/monkey\/.settings\/org.eclipse.jdt.core.prefs","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-JavaFX SDK 24+ and JDK 23+ are required to build and run the tool.\n+JavaFX SDK 24+ and JDK 24+ are required to build and run the tool.\n@@ -30,1 +30,1 @@\n-java -p <JAVAFX>\/javafx-sdk-24\/lib\/ --add-modules ALL-MODULE-PATH -jar MonkeyTester.jar\n+java -p <JAVAFX>\/lib\/ --add-modules ALL-MODULE-PATH -jar MonkeyTester.jar\n@@ -42,1 +42,1 @@\n-To disable loading and saving, specify `-Ddisable.settings=true` VM agrument.\n+To disable loading and saving, specify `-Ddisable.settings=true` VM argument.\n","filename":"tests\/manual\/monkey\/README.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-\t\t\tsource=\"23\"\n-\t\t\ttarget=\"23\"\n+\t\t\tsource=\"24\"\n+\t\t\ttarget=\"24\"\n","filename":"tests\/manual\/monkey\/build.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import com.oracle.tools.fx.monkey.tools.JTextPanel;\n@@ -54,0 +55,1 @@\n+import com.oracle.tools.fx.monkey.tools.ModalWindow;\n@@ -60,0 +62,1 @@\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -149,0 +152,1 @@\n+        FX.item(m, \"JTextArea\/JTextField in Pure Swing\", this::openJTextAreaSwing);\n@@ -160,1 +164,2 @@\n-\n+        FX.separator(m);\n+        FX.item(m, \"Open Modal Window\", this::openModalWindow);\n@@ -166,0 +171,3 @@\n+        if (contentPane.getCenter() instanceof TestPaneBase t) {\n+            t.deactivate();\n+        }\n@@ -221,1 +229,5 @@\n-     }\n+    }\n+\n+    private void openModalWindow() {\n+        new ModalWindow(this).show();\n+    }\n@@ -271,0 +283,4 @@\n+    private void openJTextAreaSwing() {\n+        JTextPanel.openSwing();\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+            new DemoPage(\"AudioClip\", AudioClipPage::new),\n@@ -49,1 +50,1 @@\n-            \/\/ TODO DialogPane\n+            new DemoPage(\"Dialog\", DialogPage::new),\n@@ -56,0 +57,1 @@\n+            new DemoPage(\"ImageView\", ImageViewPage::new),\n@@ -65,0 +67,1 @@\n+            new DemoPage(\"ProgressBar\", ProgressBarPage::new),\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/media\/Note1.wav","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"apps\/samples\/Ensemble8\/src\/samples\/resources\/ensemble\/samples\/shared-resources\/Note1.wav","status":"copied"},{"patch":"","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/media\/Note2.wav","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"apps\/samples\/Ensemble8\/src\/samples\/resources\/ensemble\/samples\/shared-resources\/Note2.wav","status":"copied"},{"patch":"","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/media\/Note3.wav","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"apps\/samples\/Ensemble8\/src\/samples\/resources\/ensemble\/samples\/shared-resources\/Note3.wav","status":"copied"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and\/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package com.oracle.tools.fx.monkey.media;\n+\n+import java.net.URL;\n+\n+\/**\n+ * The notes are copied from Ensemble8 project.\n+ *\/\n+public class Notes {\n+    public static String getNoteURI(String name) {\n+        URL u = Notes.class.getResource(name);\n+        return u == null ? null : u.toExternalForm();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/media\/Notes.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/media\/yo.mp3","binary":true,"status":"added"},{"patch":"@@ -48,0 +48,2 @@\n+        addChoice(\"Empty (33.3)\", createBorder(Color.TRANSPARENT, 33.3, null));\n+        addChoice(\"Empty (66)\", createBorder(Color.TRANSPARENT, 66, null));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/BorderOption.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.oracle.tools.fx.monkey.util.CustomPane;\n@@ -44,1 +45,3 @@\n-        \/\/ TODO include active content (see tooltip)\n+        addChoiceSupplier(\"Complex Pane\", () -> {\n+            return CustomPane.create();\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/GraphicOption.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleIntegerProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.AudioClip;\n+import com.oracle.tools.fx.monkey.media.Notes;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * AudioClip Page.\n+ *\/\n+public class AudioClipPage extends TestPaneBase {\n+\n+    private final SimpleStringProperty sourceURI = new SimpleStringProperty();\n+    private final SimpleDoubleProperty balance = new SimpleDoubleProperty(1.0);\n+    private final SimpleIntegerProperty cycleCount = new SimpleIntegerProperty(1);\n+    private final SimpleDoubleProperty pan = new SimpleDoubleProperty(1.0);\n+    private final SimpleIntegerProperty priority = new SimpleIntegerProperty(1);\n+    private final SimpleDoubleProperty rate = new SimpleDoubleProperty(1.0);\n+    private final SimpleDoubleProperty volume = new SimpleDoubleProperty(1.0);\n+\n+    public AudioClipPage() {\n+        super(\"AudioClipPage\");\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"AudioClip\");\n+        op.option(\"Source URI:\", Options.createSourceUriOption(this, \"source\", sourceURI));\n+        op.option(new HBox(5, button(\"Play\", this::play)));\n+        op.option(\"Balance:\", DoubleOption.of(\"balance\", balance, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        op.option(\"Cycle Count:\", new IntOption(\"cycleCount\", 0, Integer.MAX_VALUE, cycleCount));\n+        op.option(\"Pan:\", DoubleOption.of(\"pan\", pan, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        op.option(\"Priority:\", new IntOption(\"priority\", 0, Integer.MAX_VALUE, priority));\n+        op.option(\"Rate:\", DoubleOption.of(\"rate\", rate, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        op.option(\"Volume:\", DoubleOption.of(\"volume\", volume, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+\n+        \/\/ all notes?\n+        VBox p = new VBox(\n+            button(\"Play Note1.wav\", () -> playNote(\"Note1.wav\")),\n+            button(\"Play Note2.wav\", () -> playNote(\"Note2.wav\")),\n+            button(\"Play Note3.wav\", () -> playNote(\"Note3.wav\")),\n+            button(\"Play yo.mp3\", () -> playNote(\"yo.mp3\"))\n+        );\n+\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    private Button button(String text, Runnable action) {\n+        Button b = new Button(text);\n+        b.setOnAction((ev) -> action.run());\n+        return b;\n+    }\n+\n+    private void playNote(String name) {\n+        play(Notes.getNoteURI(name));\n+    }\n+\n+    private void play() {\n+        String uri = sourceURI.get();\n+        play(uri);\n+    }\n+\n+    private void play(String uri) {\n+        if (Utils.isBlank(uri)) {\n+            return;\n+        }\n+\n+        AudioClip c = new AudioClip(uri);\n+        c.setBalance(balance.get());\n+        c.setCycleCount(cycleCount.get());\n+        c.setPan(pan.get());\n+        c.setPriority(priority.get());\n+        c.setRate(rate.get());\n+        c.setVolume(volume.get());\n+        c.play();\n+        System.out.println(\"AudioClip.source=\" + uri);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AudioClipPage.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,2 +109,6 @@\n-        FX.item(m, \"Show Properties Monitor...\", () -> PropertiesMonitor.open(source));\n-        FX.item(m, \"Accessibility Attributes...\", () -> AccessibilityPropertyViewer.open(pick));\n+        FX.item(m, \"Accessibility Attributes...\", () -> {\n+            AccessibilityPropertyViewer.open(pick);\n+        });\n+        FX.item(m, \"Show Properties Monitor...\", () -> {\n+            PropertiesMonitor.open(source);\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CanvasPage.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.Dialog;\n+import javafx.scene.control.DialogPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n+import javafx.stage.StageStyle;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.GraphicOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * Dialog\/DialogPane Page.\n+ *\/\n+public class DialogPage extends TestPaneBase {\n+    private final ToggleButton button;\n+    private Dialog dialog;\n+    \/\/ dialog\n+    private final SimpleStringProperty contentText = new SimpleStringProperty();\n+    private final SimpleStringProperty headerText = new SimpleStringProperty();\n+    private final SimpleObjectProperty<Modality> modality = new SimpleObjectProperty<>(Modality.NONE);\n+    private final SimpleBooleanProperty owner = new SimpleBooleanProperty();\n+    private final SimpleBooleanProperty resizable = new SimpleBooleanProperty(true);\n+    private final SimpleBooleanProperty showing = new SimpleBooleanProperty();\n+    private final SimpleObjectProperty<StageStyle> stageStyle = new SimpleObjectProperty<>(StageStyle.DECORATED);\n+    private final SimpleStringProperty title = new SimpleStringProperty();\n+    \/\/ dialog pane\n+    private final SimpleBooleanProperty useDialogPane = new SimpleBooleanProperty(true);\n+    private final SimpleObjectProperty<Node> dpContent = new SimpleObjectProperty<>();\n+    private final SimpleStringProperty dpContentText = new SimpleStringProperty();\n+    private final SimpleObjectProperty<Node> dpExpandableContent = new SimpleObjectProperty<>();\n+    private final SimpleBooleanProperty dpExpanded = new SimpleBooleanProperty();\n+    private final SimpleObjectProperty<Node> dpGraphic = new SimpleObjectProperty<>();\n+    private final SimpleObjectProperty<Node> dpGHeader = new SimpleObjectProperty<>();\n+    private final SimpleStringProperty dpHeaderText = new SimpleStringProperty();\n+\n+    public DialogPage() {\n+        super(\"DialogPage\");\n+\n+        button = new ToggleButton(\"Show Dialog\");\n+        button.setOnAction((ev) -> {\n+            toggleDialog();\n+        });\n+\n+        OptionPane op = createOptionPane();\n+\n+        HBox p = new HBox(4, button);\n+        p.setPadding(new Insets(4));\n+\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    private OptionPane createOptionPane() {\n+        OptionPane op = new OptionPane();\n+\n+        \/\/ dialog pane\n+        op.section(\"DialogPane\");\n+        op.option(new BooleanOption(\"set DialogPane\", \"setDialogPane\", useDialogPane));\n+        op.option(\"Content:\", new GraphicOption(\"dpContent\", dpContent));\n+        op.option(\"Expandable Content:\", new GraphicOption(\"dpExpandableContent\", dpExpandableContent));\n+        op.option(new BooleanOption(\"expanded\", \"dpExpanded\", dpExpanded));\n+        op.option(\"Graphic:\", new GraphicOption(\"dpGraphic\", dpGraphic));\n+        op.option(\"Header:\", new GraphicOption(\"dpHeader\", dpGHeader));\n+        op.option(\"Header Text:\", textChoices(\"dpHeaderText\", dpHeaderText));\n+\n+        \/\/ dialog\n+        op.section(\"Dialog\");\n+        op.option(\"Content Text:\", textChoices(\"contentText\", contentText));\n+        \/\/ graphic\n+        op.option(\"Header Text:\", textChoices(\"headerText\", headerText));\n+        op.option(new BooleanOption(\"resizable\", \"resizable\", resizable));\n+        op.option(\"Title:\", textChoices(\"title\", title));\n+\n+        \/\/ init\n+        op.section(\"Initialization\");\n+        op.option(\"Stage Style:\", new EnumOption(\"stageStyle\", StageStyle.class, stageStyle));\n+        op.option(\"Modality:\", new EnumOption(\"modality\", Modality.class, modality));\n+        op.option(new BooleanOption(\"owner\", \"set owner\", owner));\n+\n+        return op;\n+    }\n+\n+    private Dialog createDialog() {\n+        Dialog d = new Dialog();\n+        d.setResult(new Object()); \/\/ allow to close\n+\n+        \/\/ init\n+        d.initStyle(stageStyle.get());\n+        d.initModality(modality.get());\n+        d.initOwner(owner.get() ? FX.getParentWindow(this) : null);\n+\n+        \/\/ dialog\n+        d.contentTextProperty().bindBidirectional(contentText);\n+        d.headerTextProperty().bindBidirectional(headerText);\n+        d.resizableProperty().bindBidirectional(resizable);\n+        d.titleProperty().bindBidirectional(title);\n+\n+        \/\/ dialog pane\n+        if (useDialogPane.get()) {\n+            DialogPane p = new DialogPane();\n+            p.contentProperty().bindBidirectional(dpContent);\n+            p.expandableContentProperty().bindBidirectional(dpExpandableContent);\n+            p.expandedProperty().bindBidirectional(dpExpanded);\n+            p.graphicProperty().bindBidirectional(dpGraphic);\n+            p.headerProperty().bindBidirectional(dpGHeader);\n+            p.headerTextProperty().bindBidirectional(dpHeaderText);\n+            d.setDialogPane(p);\n+        }\n+        d.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);\n+\n+        \/\/ window\n+        Utils.link(showing, d.showingProperty(), null);\n+        return d;\n+    }\n+\n+    private static Node textChoices(String name, SimpleStringProperty p) {\n+        return Options.textOption(name, true, true, p);\n+    }\n+\n+    private void toggleDialog() {\n+        if (dialog == null) {\n+            dialog = createDialog();\n+            dialog.show();\n+            updateButton(true);\n+            dialog.showingProperty().addListener((s, p, on) -> {\n+                if (!on) {\n+                    updateButton(false);\n+                    dialog = null;\n+                }\n+            });\n+            dialog.setOnHiding((ev) -> {\n+                dialog.hide();\n+            });\n+        } else {\n+            dialog.hide();\n+            dialog = null;\n+            updateButton(false);\n+        }\n+    }\n+\n+    private void close() {\n+        if (dialog != null) {\n+            dialog.hide();\n+            dialog = null;\n+            updateButton(false);\n+        }\n+    }\n+\n+    private void updateButton(boolean on) {\n+        button.setSelected(on);\n+        button.setText(on ? \"Hide Dialog\" : \"Show Dialog\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        close();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DialogPage.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -40,0 +40,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -47,1 +48,1 @@\n-import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n@@ -49,1 +50,0 @@\n-import com.oracle.tools.fx.monkey.util.ImageTools;\n@@ -52,0 +52,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -57,1 +58,6 @@\n-    \/\/private static final DataFormat FORMAT = new DataFormat(\"DnDPage\");\n+    enum DragType {\n+        DRAG_AND_DROP,\n+        FULL,\n+        SIMPLE\n+    }\n+\n@@ -60,0 +66,1 @@\n+    private final SimpleObjectProperty<DragType> type = new SimpleObjectProperty<>(DragType.DRAG_AND_DROP);\n@@ -81,9 +88,21 @@\n-            Dragboard db = source.startDragAndDrop(TransferMode.ANY);\n-            ClipboardContent content = new ClipboardContent();\n-            content.putString(source.getText());\n-            db.setContent(content);\n-\n-            Image im = dragImage.get();\n-            db.setDragView(im);\n-            db.setDragViewOffsetX(offsetX.get());\n-            db.setDragViewOffsetY(offsetY.get());\n+            DragType t = type.get();\n+            switch(t) {\n+            case DRAG_AND_DROP:\n+                Dragboard db = source.startDragAndDrop(TransferMode.ANY);\n+                ClipboardContent content = new ClipboardContent();\n+                content.putString(source.getText());\n+                db.setContent(content);\n+\n+                Image im = dragImage.get();\n+                db.setDragView(im);\n+                db.setDragViewOffsetX(offsetX.get());\n+                db.setDragViewOffsetY(offsetY.get());\n+                break;\n+            case FULL:\n+                source.startFullDrag();\n+                break;\n+            case SIMPLE:\n+                break;\n+            default:\n+                throw new Error(\"?\" + t);\n+            }\n@@ -93,1 +112,1 @@\n-            print(ev);\n+            \/\/print(ev);\n@@ -97,1 +116,1 @@\n-            print(ev);\n+            \/\/print(ev);\n@@ -115,1 +134,1 @@\n-            print(ev);\n+            \/\/print(ev);\n@@ -120,1 +139,1 @@\n-            print(ev);\n+            \/\/print(ev);\n@@ -125,0 +144,14 @@\n+            \/\/print(ev);\n+        });\n+\n+        \/\/ listeners\n+        source.addEventHandler(DragEvent.ANY, (ev) -> {\n+            print(ev);\n+        });\n+        target.addEventHandler(DragEvent.ANY, (ev) -> {\n+            print(ev);\n+        });\n+        source.addEventHandler(MouseEvent.ANY, (ev) -> {\n+            print(ev);\n+        });\n+        target.addEventHandler(MouseEvent.ANY, (ev) -> {\n@@ -133,0 +166,1 @@\n+        op.option(\"Drag Mode:\", createTypeOption(\"type\", type));\n@@ -134,1 +168,1 @@\n-        op.option(createImageOption());\n+        op.option(Options.createImageOption(\"image\", dragImage));\n@@ -146,12 +180,2 @@\n-    private ObjectOption<Image> createImageOption() {\n-        ObjectOption<Image> op = new ObjectOption<>(\"image\", dragImage);\n-        op.addChoice(\"<null>\", null);\n-        op.addChoice(\"1x1\", ImageTools.createImage(1, 1));\n-        op.addChoice(\"16 x 16\", ImageTools.createImage(16, 16));\n-        op.addChoice(\"32 x 32\", ImageTools.createImage(32, 32));\n-        op.addChoice(\"64 x 64\", ImageTools.createImage(64, 64));\n-        op.addChoiceSupplier(\"128 x 16\", () -> ImageTools.createImage(128, 16));\n-        op.addChoiceSupplier(\"16 x 128\", () -> ImageTools.createImage(16, 128));\n-        op.addChoiceSupplier(\"256 x 256\", () -> ImageTools.createImage(256, 256));\n-        op.addChoiceSupplier(\"4096 x 4096\", () -> ImageTools.createImage(4096, 4096));\n-        op.selectFirst();\n+    private Node createTypeOption(String name, SimpleObjectProperty<DragType> p) {\n+        EnumOption<DragType> op = new EnumOption<>(name, false, DragType.class, p);\n@@ -178,7 +202,15 @@\n-        sb.append(\", screenX=\" + ev.getScreenX());\n-        sb.append(\", screenY=\" + ev.getScreenY());\n-        sb.append(\", sceneX=\" + ev.getSceneX());\n-        sb.append(\", sceneY=\" + ev.getSceneY());\n-        sb.append(\"}\");\n-        String s = sb.toString();\n-        System.out.println(s);\n+        sb.append(\", x\/y=(\").append(Utils.f2(ev.getX())).append(\", \").append(Utils.f2(ev.getY()));\n+        sb.append(\"), screen=(\").append(Utils.f2(ev.getScreenX())).append(\", \").append(Utils.f2(ev.getScreenY()));\n+        sb.append(\"), scene=(\").append(Utils.f2(ev.getSceneX())).append(\", \").append(Utils.f2(ev.getSceneY()));\n+        sb.append(\")}\");\n+        System.out.println(sb);\n+    }\n+\n+    private void print(MouseEvent ev) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{event=\" + ev.getEventType());\n+        sb.append(\", x\/y=(\").append(Utils.f2(ev.getX())).append(\", \").append(Utils.f2(ev.getY()));\n+        sb.append(\"), screen=(\").append(Utils.f2(ev.getScreenX())).append(\", \").append(Utils.f2(ev.getScreenY()));\n+        sb.append(\"), scene=(\").append(Utils.f2(ev.getSceneX())).append(\", \").append(Utils.f2(ev.getSceneY()));\n+        sb.append(\")}\");\n+        System.out.println(sb);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DnDPage.java","additions":68,"deletions":36,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.Random;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.sheets.NodePropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ImageView Page.\n+ *\/\n+public class ImageViewPage extends TestPaneBase {\n+\n+    private final ImageView imageView;\n+\n+    public ImageViewPage() {\n+        super(\"ImageViewPage\");\n+\n+        imageView = new ImageView() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+        FX.setPopupMenu(imageView, this::createPopupMenu);\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ImageView\");\n+        op.option(\"Fit Height:\", DoubleOption.of(\"fitHeight\", imageView.fitHeightProperty(), -1.0, 10.0, 100.0, 500.0));\n+        op.option(\"Fit Width:\", DoubleOption.of(\"fitWidth\", imageView.fitWidthProperty(), -1.0, 10.0, 100.0, 500.0));\n+        op.option(\"Image:\", Options.createImageOption(\"image\", imageView.imageProperty()));\n+        op.option(new BooleanOption(\"preserveRatio\", \"preserve ratio\", imageView.preserveRatioProperty()));\n+        op.option(new BooleanOption(\"smooth\", \"smooth\", imageView.smoothProperty()));\n+        \/\/ setViewport(Rectangle2D)\n+        op.option(\"X:\", DoubleOption.of(\"x\", imageView.xProperty(), -10.0, 0.0, 10));\n+        op.option(\"Y:\", DoubleOption.of(\"y\", imageView.yProperty(), -10.0, 0.0, 10));\n+        NodePropertySheet.appendTo(op, imageView);\n+\n+        setContent(imageView);\n+        setOptions(op);\n+    }\n+\n+    private ContextMenu createPopupMenu() {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Load from Input Stream\", () -> loadImageFromInputStream(false));\n+        FX.item(m, \"Load from Input Stream in Background\", () -> loadImageFromInputStream(true));\n+        FX.separator(m);\n+        FX.item(m, \"Clear Image\", () -> imageView.setImage(null));\n+        return m;\n+    }\n+\n+    private void loadImageFromInputStream(boolean loadInBackground) {\n+        try {\n+            String ts = String.valueOf(System.nanoTime());\n+            Random r = new Random();\n+            int w = 10 + r.nextInt(300);\n+            int h = 10 + r.nextInt(300);\n+            Image src = ImageTools.createImage(ts, w, h);\n+            byte[] b = ImageTools.writePNG(src);\n+            ByteArrayInputStream in = new ByteArrayInputStream(b) {\n+                @Override\n+                public void close() throws IOException {\n+                    System.out.println(\"Closed \" + Thread.currentThread());\n+                }\n+            };\n+\n+\/\/ TODO requires JDK-8361286: Allow enabling of background loading for images loaded from an InputStream\n+\/\/            Image im = new Image(in, loadInBackground);\n+\/\/            imageView.setImage(im);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ImageViewPage.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import java.io.File;\n@@ -31,1 +30,1 @@\n-import javafx.scene.Node;\n+import javafx.beans.property.SimpleStringProperty;\n@@ -35,1 +34,0 @@\n-import javafx.scene.control.TextField;\n@@ -37,1 +35,0 @@\n-import javafx.scene.layout.Priority;\n@@ -41,1 +38,0 @@\n-import javafx.stage.FileChooser;\n@@ -46,1 +42,1 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -58,1 +54,1 @@\n-    private String sourceURI;\n+    private final SimpleStringProperty sourceURI = new SimpleStringProperty();\n@@ -103,1 +99,1 @@\n-        op.option(\"Source URI:\", createSourceOption(\"source\"));\n+        op.option(\"Source URI:\", Options.createSourceUriOption(this, \"source\", sourceURI));\n@@ -136,30 +132,0 @@\n-    private Node createSourceOption(String name) {\n-        TextField uri = new TextField();\n-        uri.setPromptText(\"URI\");\n-        Button button = new Button(\"Browse...\");\n-        button.setOnAction((ev) -> {\n-            FileChooser fc = new FileChooser();\n-            if (sourceURI != null) {\n-                File f = parseFileURI(sourceURI);\n-                if (f != null) {\n-                    fc.setInitialDirectory(f.getParentFile());\n-                    fc.setInitialFileName(f.getName());\n-                }\n-            }\n-            File file = fc.showOpenDialog(FX.getParentWindow(this));\n-            if (file != null) {\n-                String s = file.toURI().toString();\n-                uri.setText(s);\n-                sourceURI = s;\n-            }\n-        });\n-        HBox hb = new HBox(5, uri, button);\n-        HBox.setHgrow(uri, Priority.ALWAYS);\n-        return hb;\n-    }\n-\n-    private static File parseFileURI(String text) {\n-        \/\/ FIX\n-        return null;\n-    }\n-\n@@ -168,1 +134,1 @@\n-            String uri = sourceURI;\n+            String uri = sourceURI.get();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MediaPlayerPage.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -117,0 +117,3 @@\n+        Menu m3 = FX.menu(m2, \"Submenu (2)\");\n+        FX.item(m3, \"Sub-submenu 1\");\n+        FX.item(m3, \"Sub-submenu 2\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MenuBarPage.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.ProgressBar;\n+import javafx.scene.control.skin.ProgressBarSkin;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ProgressBar Page.\n+ *\/\n+public class ProgressBarPage extends TestPaneBase implements HasSkinnable {\n+    private final ProgressBar control;\n+\n+    public ProgressBarPage() {\n+        super(\"ProgressBarPage\");\n+\n+        control = new ProgressBar() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ProgressBar\");\n+        op.option(\"Progress:\", DoubleOption.of(\"progress\", control.progressProperty(), -1.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ProgressBarSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ProgressBarPage.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n-import javafx.beans.property.BooleanProperty;\n+import javafx.beans.binding.Bindings;\n@@ -29,1 +29,0 @@\n-import javafx.beans.property.ReadOnlyBooleanProperty;\n@@ -36,0 +35,1 @@\n+import javafx.scene.control.Label;\n@@ -38,0 +38,2 @@\n+import javafx.scene.layout.VBox;\n+import javafx.scene.text.Font;\n@@ -44,1 +46,1 @@\n-import com.oracle.tools.fx.monkey.options.TextChoiceOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -46,1 +48,0 @@\n-import com.oracle.tools.fx.monkey.util.BooleanConsumer;\n@@ -48,0 +49,1 @@\n+import com.oracle.tools.fx.monkey.util.Formats;\n@@ -50,1 +52,1 @@\n-import com.oracle.tools.fx.monkey.util.TextTemplates;\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -57,0 +59,1 @@\n+    private final Label status;\n@@ -86,0 +89,3 @@\n+        status = new Label();\n+        status.setFont(Font.font(\"Monospace\"));\n+\n@@ -88,2 +94,4 @@\n-        HBox p = new HBox(4, button);\n-        p.setPadding(new Insets(4));\n+        HBox hb = new HBox(4, button);\n+\n+        VBox vb = new VBox(10, hb, status);\n+        vb.setPadding(new Insets(10));\n@@ -91,1 +99,1 @@\n-        setContent(p);\n+        setContent(vb);\n@@ -136,1 +144,1 @@\n-        link(fullScreen, s.fullScreenProperty(), s::setFullScreen);\n+        Utils.link(fullScreen, s.fullScreenProperty(), s::setFullScreen);\n@@ -139,2 +147,2 @@\n-        link(iconified, s.iconifiedProperty(), s::setIconified);\n-        link(maximized, s.maximizedProperty(), s::setMaximized);\n+        Utils.link(iconified, s.iconifiedProperty(), s::setIconified);\n+        Utils.link(maximized, s.maximizedProperty(), s::setMaximized);\n@@ -150,1 +158,1 @@\n-        link(focused, s.focusedProperty(), null);\n+        Utils.link(focused, s.focusedProperty(), null);\n@@ -159,1 +167,1 @@\n-        link(showing, s.showingProperty(), null);\n+        Utils.link(showing, s.showingProperty(), null);\n@@ -212,6 +220,1 @@\n-        TextChoiceOption op = new TextChoiceOption(name, true, p);\n-        op.addChoice(\"<null>\", null);\n-        op.addChoice(\"Short\", \"We are now full screen\");\n-        op.addChoice(\"Multi-line\", \"One.\\nTwo.\\nThree.\");\n-        op.addChoice(\"Lorem Impsum\", TextTemplates.loremIpsum());\n-        return op;\n+        return Options.textOption(name, true, true, p);\n@@ -228,0 +231,1 @@\n+                    clearStatus();\n@@ -230,0 +234,14 @@\n+            status.textProperty().bind(Bindings.createStringBinding(\n+                () -> {\n+                    String s = getStatusText(stage);\n+                    System.out.println(s.replace('\\n', ' '));\n+                    return s;\n+                },\n+                stage.xProperty(),\n+                stage.yProperty(),\n+                stage.widthProperty(),\n+                stage.heightProperty(),\n+                stage.iconifiedProperty(),\n+                stage.maximizedProperty(),\n+                stage.fullScreenProperty()\n+            ));\n@@ -234,0 +252,1 @@\n+            clearStatus();\n@@ -237,0 +256,10 @@\n+    private void clearStatus() {\n+        status.textProperty().unbind();\n+        status.setText(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        close();\n+    }\n+\n@@ -245,13 +274,11 @@\n-    private static void link(BooleanProperty ui, ReadOnlyBooleanProperty main, BooleanConsumer c) {\n-        main.addListener((s, p, v) -> {\n-            ui.set(v);\n-        });\n-        if (c != null) {\n-            ui.addListener((s, p, v) -> {\n-                if (main.get() != v) {\n-                    c.consume(v);\n-                }\n-            });\n-            boolean val = ui.get();\n-            c.consume(val);\n-        }\n+    private static String getStatusText(Stage s) {\n+        return\n+            \"P: \" + f(s.getX()) + \", \" + f(s.getY()) + \"\\n\" +\n+            \"S: \" + f(s.getWidth()) + \", \" + f(s.getHeight()) + \"\\n\" +\n+            \"   \" + (s.isFullScreen() ? \"FullScreen \" : \"\") +\n+                    (s.isIconified() ? \"Iconified \" : \"\") +\n+                    (s.isMaximized() ? \"Maximized \" : \"\");\n+    }\n+\n+    private static String f(double v) {\n+        return Formats.formatDouble(v);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StagePage.java","additions":59,"deletions":32,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,3 @@\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Rectangle;\n@@ -126,1 +129,1 @@\n-                    switch (r.nextInt(5)) {\n+                    switch (r.nextInt(6)) {\n@@ -136,0 +139,8 @@\n+                    case 4:\n+                        im = null;\n+                        t.setText(\"Circle\" + i);\n+                        \/\/ Add a custom graphic, this will not be visible in the drop-down menu\n+                        Circle rectangle = new Circle(30);\n+                        rectangle.setFill(new Color(Math.random(), Math.random(), Math.random(), 1.0));\n+                        t.setGraphic(rectangle);\n+                        break;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TabPanePage.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n@@ -38,0 +40,2 @@\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.Menu;\n@@ -39,0 +43,1 @@\n+import javafx.scene.control.TableCell;\n@@ -48,0 +53,1 @@\n+import javafx.scene.text.Font;\n@@ -116,1 +122,1 @@\n-    private ContextMenu createPopupMenu(TableColumn<?,?> tc) {\n+    private ContextMenu createColumnPopupMenu(TableColumn tc) {\n@@ -124,0 +130,32 @@\n+        Menu m2 = FX.menu(m, \"Cell Factory\");\n+        FX.item(m2, \"Default\", () -> tc.setCellFactory(TableColumn.DEFAULT_CELL_FACTORY));\n+        FX.item(m2, \"Canvas\", () -> tc.setCellFactory(new Callback<TableColumn<?,?>, TableCell<?,?>>() {\n+            @Override\n+            public TableCell call(TableColumn param) {\n+                return new TableCell() {\n+                    @Override\n+                    protected void updateItem(Object item, boolean empty) {\n+                        if (item == getItem()) {\n+                            return;\n+                        }\n+\n+                        super.updateItem(item, empty);\n+\n+                        if (item == null) {\n+                            super.setText(null);\n+                            super.setGraphic(null);\n+                        } else if (item instanceof Node) {\n+                            super.setText(null);\n+                            super.setGraphic((Node)item);\n+                        } else {\n+                            String text = item.toString();\n+                            Canvas c = createCanvas(this, text);\n+\n+                            super.setText(null);\n+                            super.setGraphic(c);\n+                        }\n+                    }\n+                };\n+            }\n+        }));\n+        FX.separator(m);\n@@ -138,1 +176,1 @@\n-        tc.setContextMenu(createPopupMenu(tc));\n+        tc.setContextMenu(createColumnPopupMenu(tc));\n@@ -335,1 +373,1 @@\n-    private Callback<TableView<DataRow>, TableRow<DataRow>> createRowFactory(Color c) {\n+    private static Callback<TableView<DataRow>, TableRow<DataRow>> createRowFactory(Color c) {\n@@ -343,0 +381,24 @@\n+    private static Callback<TableView<DataRow>, TableRow<DataRow>> createCanvasRowFactory() {\n+        return (v) -> {\n+            TableRow<DataRow> row = new TableRow<>();\n+            Canvas c = createCanvas(row, null);\n+            row.setGraphic(c);\n+            row.setText(null);\n+            return row;\n+        };\n+    }\n+\n+    private static Canvas createCanvas(Labeled r, String text) {\n+        Font f = r.getFont();\n+        double w = r.getWidth() - r.snappedLeftInset() - r.snappedRightInset();\n+        double h = r.getHeight() - r.snappedTopInset() - r.snappedBottomInset();\n+        Canvas c = new Canvas(w, h);\n+        GraphicsContext g = c.getGraphicsContext2D();\n+        g.setFill(Color.rgb(0, 255, 0, 0.1));\n+        g.fillRect(0, 0, w, h);\n+        g.setFill(r.getTextFill());\n+        g.setFont(f);\n+        g.fillText(text, 0, f.getSize(), w);\n+        return c;\n+    }\n+\n@@ -349,0 +411,1 @@\n+        s.addChoice(\"Canvas-based\", createCanvasRowFactory());\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":66,"deletions":3,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.beans.property.ObjectProperty;\n@@ -39,0 +40,2 @@\n+import javafx.scene.text.TabStop;\n+import javafx.scene.text.TabStopPolicy;\n@@ -47,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n@@ -48,0 +52,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -56,0 +61,1 @@\n+import com.oracle.tools.fx.monkey.util.TabStopPane;\n@@ -57,0 +63,1 @@\n+import com.oracle.tools.fx.monkey.util.TextShapeLogic;\n@@ -68,1 +75,2 @@\n-    private final Label hitInfo2;\n+    private final Label hitInfoNew;\n+    private final Label hitInfoText;\n@@ -78,1 +86,1 @@\n-            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object ... ps) {\n@@ -85,0 +93,3 @@\n+        textFlow.tabStopPolicyProperty().addListener((p) -> {\n+            updateTabStopPolicy();\n+        });\n@@ -90,2 +101,2 @@\n-\n-        hitInfo2 = new Label();\n+        hitInfoNew = new Label();\n+        hitInfoText = new Label();\n@@ -121,0 +132,1 @@\n+        op.option(\"Tab Stop Policy:\", createTabStopPolicyOption(\"tabStopPolicy\", textFlow.tabStopPolicyProperty()));\n@@ -124,4 +136,4 @@\n-\/\/        op.option(new BooleanOption(\"useLegacyAPI\", \"(use TextFlow API)\", visualizer.legacyAPI));\n-\/\/        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n-\/\/        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n-\/\/        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing \", visualizer.includeLineSpace));\n+        op.option(\"API:\", new EnumOption<>(\"api\", TextShapeLogic.class, visualizer.shapeLogic));\n+        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n+        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n+        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing \", visualizer.includeLineSpace));\n@@ -130,1 +142,1 @@\n-        op.option(\"Text.hitTest:\", hitInfo2);\n+        op.option(\"Text.hitTest:\", hitInfoText);\n@@ -132,0 +144,1 @@\n+        op.option(\"TextFlow.getHitInfo:\", hitInfoNew);\n@@ -217,1 +230,1 @@\n-        hitInfo2.setText(null);\n+        hitInfoText.setText(null);\n@@ -226,1 +239,1 @@\n-                hitInfo2.setText(String.valueOf(h));\n+                hitInfoText.setText(String.valueOf(h));\n@@ -233,0 +246,2 @@\n+        HitInfo h2 = textFlow.getHitInfo(p);\n+        hitInfoNew.setText(String.valueOf(h2));\n@@ -265,0 +280,1 @@\n+        Node source = pick.getIntersectedNode();\n@@ -266,1 +282,6 @@\n-        FX.item(m, \"Accessibility Attributes\", () -> AccessibilityPropertyViewer.open(pick));\n+        FX.item(m, \"Accessibility Attributes\", () -> {\n+            AccessibilityPropertyViewer.open(pick);\n+        });\n+        FX.item(m, \"Show Properties Monitor...\", () -> {\n+            PropertiesMonitor.open(source);\n+        });\n@@ -269,0 +290,41 @@\n+\n+    private Node createTabStopPolicyOption(String name, ObjectProperty<TabStopPolicy> prop) {\n+        ObjectOption<TabStopPolicy> op = new ObjectOption<>(name, prop);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"50 px\", () -> fixedTabStopPolicy(50));\n+        op.addChoiceSupplier(\"200 px\", () -> fixedTabStopPolicy(200));\n+        op.addChoiceSupplier(\"With Tab Stops\", () -> {\n+            TabStopPolicy p = new TabStopPolicy();\n+            p.tabStops().setAll(\n+                new TabStop(50),\n+                new TabStop(175)\n+            );\n+            p.setDefaultInterval(100);\n+            return p;\n+        });\n+        op.addChoiceSupplier(\"Tab Stops, w\/o default stops\", () -> {\n+            TabStopPolicy p = new TabStopPolicy();\n+            p.tabStops().setAll(\n+                new TabStop(50),\n+                new TabStop(175)\n+            );\n+            return p;\n+        });\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static TabStopPolicy fixedTabStopPolicy(double defaultStops) {\n+        TabStopPolicy p = new TabStopPolicy();\n+        p.setDefaultInterval(defaultStops);\n+        return p;\n+    }\n+\n+    private void updateTabStopPolicy() {\n+        TabStopPolicy p = textFlow.getTabStopPolicy();\n+        if (p == null) {\n+            container.setTop(null);\n+        } else {\n+            container.setTop(new TabStopPane(p));\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":74,"deletions":12,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import javafx.scene.Group;\n+import javafx.scene.Node;\n@@ -49,0 +49,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -56,0 +57,1 @@\n+import com.oracle.tools.fx.monkey.util.TextShapeLogic;\n@@ -100,5 +102,5 @@\n-\/\/        op.option(new BooleanOption(\"useLegacyAPI\", \"(use Text API)\", visualizer.legacyAPI));\n-\/\/        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n-\/\/        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n-\/\/        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing\", visualizer.includeLineSpace));\n-\/\/        op.separator();\n+        op.option(\"API:\", new EnumOption<>(\"api\", TextShapeLogic.class, visualizer.shapeLogic));\n+        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n+        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n+        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing\", visualizer.includeLineSpace));\n+        op.separator();\n@@ -142,0 +144,1 @@\n+        Node source = pick.getIntersectedNode();\n@@ -146,0 +149,3 @@\n+        FX.item(m, \"Show Properties Monitor...\", () -> {\n+            PropertiesMonitor.open(source);\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-    private Supplier<TreeItem<DataRow>> mk(int count) {\n+    private Supplier<TreeItem<DataRow>> mk(boolean nullValue, int count) {\n@@ -349,2 +349,1 @@\n-            \/\/ root cannot have null value JDK-8341281\n-            TreeItem<DataRow> root = new TreeItem<>(new DataRow());\n+            TreeItem<DataRow> root = new TreeItem<>(nullValue ? null : new DataRow());\n@@ -360,3 +359,5 @@\n-        s.addChoiceSupplier(\"1 Row\", mk(1));\n-        s.addChoiceSupplier(\"10 Rows\", mk(10));\n-        s.addChoiceSupplier(\"1_000 Rows\", mk(1_000));\n+        s.addChoiceSupplier(\"1 Row\", mk(false, 1));\n+        s.addChoiceSupplier(\"10 Rows\", mk(false, 10));\n+        s.addChoiceSupplier(\"1_000 Rows\", mk(false, 1_000));\n+        s.addChoiceSupplier(\"null value + 5 Rows\", mk(true, 5));\n+        s.addChoiceSupplier(\"null value + 15 Rows\", mk(true, 15));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-    private Supplier<TreeItem<Object>> mk(int count) {\n+    private Supplier<TreeItem<Object>> mk(boolean nullValue, int count) {\n@@ -143,1 +143,1 @@\n-            TreeItem<Object> root = new TreeItem<>(\"ROOT\");\n+            TreeItem<Object> root = new TreeItem<>(nullValue ? null : \"ROOT\");\n@@ -153,3 +153,5 @@\n-        s.addChoiceSupplier(\"1 Row\", mk(1));\n-        s.addChoiceSupplier(\"10 Rows\", mk(10));\n-        s.addChoiceSupplier(\"1,000 Rows\", mk(1_000));\n+        s.addChoiceSupplier(\"1 Row\", mk(false, 1));\n+        s.addChoiceSupplier(\"10 Rows\", mk(false, 10));\n+        s.addChoiceSupplier(\"1,000 Rows\", mk(false, 1_000));\n+        s.addChoiceSupplier(\"null value + 5 Rows\", mk(true, 5));\n+        s.addChoiceSupplier(\"null value + 15 Rows\", mk(true, 15));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeViewPage.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n@@ -28,0 +31,1 @@\n+import javafx.scene.layout.Background;\n@@ -29,0 +33,3 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.paint.Color;\n@@ -38,0 +45,1 @@\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n@@ -49,0 +57,1 @@\n+    private static final SimpleStringProperty htmlContent = new SimpleStringProperty();\n@@ -70,0 +79,5 @@\n+        Button contentButton = new Button(\"Edit HTML\");\n+        contentButton.setOnAction((ev) -> {\n+            openContentEditor();\n+        });\n+\n@@ -85,0 +99,9 @@\n+        HBox tb = new HBox(\n+            5,\n+            addressField,\n+            contentButton\n+        );\n+        HBox.setHgrow(addressField, Priority.ALWAYS);\n+        tb.setBackground(Background.fill(Color.gray(0.8)));\n+        tb.setPadding(new Insets(0, 2, 2, 2));\n+\n@@ -86,1 +109,1 @@\n-        bp.setTop(addressField);\n+        bp.setTop(tb);\n@@ -93,1 +116,1 @@\n-    protected void handleUrlEntered() {\n+    private void handleUrlEntered() {\n@@ -99,0 +122,10 @@\n+\n+    private void openContentEditor() {\n+        String old = htmlContent.get();\n+        EnterTextDialog d = new EnterTextDialog(this, old, (html) -> {\n+            engine.loadContent(html);\n+            htmlContent.set(html);\n+        });\n+        d.setTitle(\"Edit HTML Content\");\n+        d.show();\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/WebViewPage.java","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -103,3 +103,0 @@\n-        FX.item(m, \"Show Properties Monitor...\", () -> {\n-            PropertiesMonitor.open(source);\n-        });\n@@ -109,0 +106,3 @@\n+        FX.item(m, \"Show Properties Monitor...\", () -> {\n+            PropertiesMonitor.open(source);\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ControlPropertySheet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.File;\n@@ -34,0 +35,1 @@\n+import javafx.beans.property.SimpleStringProperty;\n@@ -41,0 +43,2 @@\n+import javafx.scene.control.TextField;\n+import javafx.scene.image.Image;\n@@ -44,0 +48,2 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n@@ -58,0 +64,1 @@\n+import javafx.stage.FileChooser;\n@@ -62,0 +69,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -99,0 +107,15 @@\n+    public static ObjectOption<Image> createImageOption(String name, ObjectProperty<Image> p) {\n+        ObjectOption<Image> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoice(\"1x1\", ImageTools.createImage(1, 1));\n+        op.addChoice(\"16 x 16\", ImageTools.createImage(16, 16));\n+        op.addChoice(\"32 x 32\", ImageTools.createImage(32, 32));\n+        op.addChoice(\"64 x 64\", ImageTools.createImage(64, 64));\n+        op.addChoiceSupplier(\"128 x 16\", () -> ImageTools.createImage(128, 16));\n+        op.addChoiceSupplier(\"16 x 128\", () -> ImageTools.createImage(16, 128));\n+        op.addChoiceSupplier(\"256 x 256\", () -> ImageTools.createImage(256, 256));\n+        op.addChoiceSupplier(\"4096 x 4096\", () -> ImageTools.createImage(4096, 4096));\n+        op.selectFirst();\n+        return op;\n+    }\n+\n@@ -326,0 +349,31 @@\n+\n+    public static Node createSourceUriOption(Node parent, String name, SimpleStringProperty sourceURI) {\n+        TextField uriField = new TextField();\n+        uriField.setPromptText(\"URI\");\n+        Button button = new Button(\"Browse...\");\n+        button.setOnAction((ev) -> {\n+            FileChooser fc = new FileChooser();\n+            String uri = sourceURI.get();\n+            if (uri != null) {\n+                File f = parseFileURI(uri);\n+                if (f != null) {\n+                    fc.setInitialDirectory(f.getParentFile());\n+                    fc.setInitialFileName(f.getName());\n+                }\n+            }\n+            File file = fc.showOpenDialog(FX.getParentWindow(parent));\n+            if (file != null) {\n+                String s = file.toURI().toString();\n+                uriField.setText(s);\n+                sourceURI.set(s);\n+            }\n+        });\n+        HBox hb = new HBox(5, uriField, button);\n+        HBox.setHgrow(uriField, Priority.ALWAYS);\n+        return hb;\n+    }\n+\n+    private static File parseFileURI(String text) {\n+        \/\/ TODO\n+        return null;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/Options.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -81,0 +81,4 @@\n+        FX.checkItem(m, \"Full Screen\", isFullScreen(), this::setFullScreen);\n+        FX.checkItem(m, \"Iconified\", isIconified(), this::setIconified);\n+        FX.checkItem(m, \"Maximize\", isMaximized(), this::setMaximized);\n+        FX.separator(m);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/CustomStage.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.ComponentOrientation;\n@@ -30,9 +28,0 @@\n-import java.awt.Font;\n-import java.awt.GraphicsEnvironment;\n-import javax.swing.JComboBox;\n-import javax.swing.JPanel;\n-import javax.swing.JScrollPane;\n-import javax.swing.JTextArea;\n-import javax.swing.JTextField;\n-import javax.swing.border.EmptyBorder;\n-import javax.swing.text.JTextComponent;\n@@ -50,2 +39,1 @@\n-    private JTextArea textArea;\n-    private JTextField textField;\n+    private JTextPanel panel;\n@@ -56,1 +44,1 @@\n-        CheckBox rtl = new CheckBox(\"right-to-left (Swing ComponentOrientation)\");\n+        CheckBox rtl = new CheckBox(\"right-to-left (FX Scene.NodeOrientation)\");\n@@ -58,10 +46,2 @@\n-            EventQueue.invokeLater(() -> {\n-                ComponentOrientation ori = c ? ComponentOrientation.RIGHT_TO_LEFT : ComponentOrientation.LEFT_TO_RIGHT;\n-                textArea.setComponentOrientation(ori);\n-                textField.setComponentOrientation(ori);\n-            });\n-        });\n-\n-        CheckBox rtl2 = new CheckBox(\"right-to-left (FX Scene.NodeOrientation)\");\n-        rtl2.selectedProperty().addListener((s, p, c) -> {\n-            \/\/ ha ha mirror images the text area, including text!\n+            \/\/ why does it mirror images the text area, including text??\n+            \/\/ https:\/\/bugs.openjdk.org\/browse\/JDK-8317835\n@@ -72,1 +52,1 @@\n-        ToolBar tb = new ToolBar(rtl, rtl2);\n+        ToolBar tb = new ToolBar(rtl);\n@@ -78,23 +58,2 @@\n-            int fontSize = 36;\n-\n-            textArea = new JTextArea(\"Arabic: العربية\\nHebrew: עברית\");\n-            updateFont(textArea, fontSize);\n-            textField = new JTextField(\"Arabic: العربية Hebrew: עברית\");\n-            updateFont(textField, fontSize);\n-\n-            String[] names = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n-            JComboBox<String> fonts = new JComboBox(names);\n-            fonts.addActionListener((ev) -> {\n-                String name = (String)fonts.getSelectedItem();\n-                Font f = new Font(name, Font.PLAIN, fontSize);\n-                textArea.setFont(f);\n-                textField.setFont(f);\n-            });\n-\n-            JPanel p = new JPanel(new BorderLayout());\n-            JScrollPane sp = new JScrollPane(textArea);\n-            p.add(fonts, BorderLayout.NORTH);\n-            p.add(sp, BorderLayout.CENTER);\n-            p.add(textField, BorderLayout.SOUTH);\n-            p.setBorder(new EmptyBorder(10, 10, 10, 10));\n-            swingNode.setContent(p);\n+            panel = new JTextPanel();\n+            swingNode.setContent(panel);\n@@ -103,5 +62,0 @@\n-\n-    private static void updateFont(JTextComponent c, float size) {\n-        Font f = c.getFont().deriveFont(size);\n-        c.setFont(f);\n-    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/EmbeddedJTextAreaWindow.java","additions":7,"deletions":53,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.awt.BorderLayout;\n+import java.awt.ComponentOrientation;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.GraphicsEnvironment;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.text.JTextComponent;\n+\n+\/**\n+ * JTextField\/JTextArea panel with the font selector.\n+ *\/\n+public class JTextPanel extends JPanel {\n+    private final JComboBox<String> fonts;\n+    private final JTextArea textArea;\n+    private final JTextField textField;\n+    private final JCheckBox rtl;\n+\n+    public JTextPanel() {\n+        super(new BorderLayout());\n+\n+        int fontSize = 36;\n+\n+        textArea = new JTextArea(\"Arabic: العربية\\nHebrew: עברית\");\n+        updateFont(textArea, fontSize);\n+        textField = new JTextField(\"Arabic: العربية Hebrew: עברית\");\n+        updateFont(textField, fontSize);\n+\n+        String[] names = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n+\n+        fonts = new JComboBox(names);\n+        fonts.addActionListener((ev) -> {\n+            String name = (String)fonts.getSelectedItem();\n+            Font f = new Font(name, Font.PLAIN, fontSize);\n+            textArea.setFont(f);\n+            textField.setFont(f);\n+        });\n+\n+        rtl = new JCheckBox(\"right-to-left (Swing ComponentOrientation)\");\n+        rtl.addActionListener((ev) -> {\n+            boolean isRtl = rtl.isSelected();\n+            ComponentOrientation ori = isRtl ? ComponentOrientation.RIGHT_TO_LEFT : ComponentOrientation.LEFT_TO_RIGHT;\n+            setOrientation(ori);\n+        });\n+\n+        JPanel p = new JPanel(new BorderLayout());\n+        p.add(fonts, BorderLayout.NORTH);\n+        p.add(rtl, BorderLayout.SOUTH);\n+\n+        JScrollPane sp = new JScrollPane(textArea);\n+        add(p, BorderLayout.NORTH);\n+        add(sp, BorderLayout.CENTER);\n+        add(textField, BorderLayout.SOUTH);\n+        setBorder(new EmptyBorder(10, 10, 10, 10));\n+    }\n+\n+    public static void openSwing() {\n+        EventQueue.invokeLater(() -> {\n+            JFrame f = new JFrame();\n+            f.setTitle(\"JTextArea\/JTextField in Swing JFrame\");\n+            f.setSize(500, 400);\n+            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+            f.add(new JTextPanel());\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    private void setOrientation(ComponentOrientation ori) {\n+        fonts.setComponentOrientation(ori);\n+        rtl.setComponentOrientation(ori);\n+        textArea.setComponentOrientation(ori);\n+        textField.setComponentOrientation(ori);\n+    }\n+\n+    private static void updateFont(JTextComponent c, float size) {\n+        Font f = c.getFont().deriveFont(size);\n+        c.setFont(f);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/JTextPanel.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Test Modal Window\n+ *\/\n+public class ModalWindow extends Stage {\n+    public ModalWindow(Window owner) {\n+        Button b1 = new Button(\"Does Nothing\");\n+        b1.setDefaultButton(false);\n+\n+        Button b2 = new Button(\"Platform.exit()\");\n+        b2.setDefaultButton(false);\n+        b2.setOnAction((ev) -> Platform.exit());\n+\n+        Button b3 = new Button(\"OK\");\n+        b3.setOnAction((ev) -> hide());\n+\n+        HBox bp = new HBox(b1, b2, b3);\n+        \/\/ FIX BUG: default button property ignored on macOS, ENTER goes to the first button\n+        b3.setDefaultButton(true);\n+\n+        BorderPane p = new BorderPane();\n+        p.setBottom(bp);\n+        System.out.println(b2.isDefaultButton() + \" \" + b3.isDefaultButton());\n+\n+        setTitle(\"Modal Window\");\n+        setScene(new Scene(p));\n+        initModality(Modality.APPLICATION_MODAL);\n+        initOwner(owner);\n+        setWidth(500);\n+        setHeight(200);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ModalWindow.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.control.Hyperlink;\n@@ -53,1 +54,1 @@\n-        HBox spacer = new HBox(10, rb1, rb2, rb3);\n+        HBox spacer = new HBox(10, rb1, rb2, rb3, new Hyperlink(\"hyperlink\"));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/CustomPane.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n@@ -29,0 +31,1 @@\n+import javax.imageio.ImageIO;\n@@ -88,0 +91,15 @@\n+\n+    \/**\n+     * Writes an Image to a byte array in PNG format.\n+     *\n+     * @param im source image\n+     * @return byte array containing PNG image\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n+    public static byte[] writePNG(Image im) throws IOException {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(65536);\n+        \/\/ this might conflict with user-set value\n+        ImageIO.setUseCache(false);\n+        ImageIO.write(ImgUtil.fromFXImage(im, null), \"PNG\", out);\n+        return out.toByteArray();\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ImageTools.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.jfx.incubator.scene.control.richtext.util;\n+package com.oracle.tools.fx.monkey.util;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ImgUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/util\/ImgUtil.java","status":"copied"},{"patch":"@@ -36,1 +36,1 @@\n-import javafx.geometry.Insets;\n+import javafx.geometry.Bounds;\n@@ -43,1 +43,0 @@\n-import javafx.scene.layout.Region;\n@@ -50,1 +49,1 @@\n-\/\/import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.CaretInfo;\n@@ -52,1 +51,1 @@\n-\/\/import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.LayoutInfo;\n@@ -55,1 +54,1 @@\n-\/\/import javafx.scene.text.TextLineInfo;\n+import javafx.scene.text.TextLineInfo;\n@@ -81,1 +80,1 @@\n-\/\/    public final SimpleBooleanProperty legacyAPI = new SimpleBooleanProperty();\n+    public final SimpleObjectProperty<TextShapeLogic> shapeLogic = new SimpleObjectProperty<>(TextShapeLogic.LAYOUT_INFO);\n@@ -83,3 +82,3 @@\n-\/\/    public final SimpleBooleanProperty showLines = new SimpleBooleanProperty();\n-\/\/    public final SimpleBooleanProperty showLayoutBounds = new SimpleBooleanProperty();\n-\/\/    public final SimpleBooleanProperty includeLineSpace = new SimpleBooleanProperty();\n+    public final SimpleBooleanProperty showLines = new SimpleBooleanProperty();\n+    public final SimpleBooleanProperty showLayoutBounds = new SimpleBooleanProperty();\n+    public final SimpleBooleanProperty includeLineSpace = new SimpleBooleanProperty();\n@@ -91,1 +90,1 @@\n-\/\/    private Path boundsPath;\n+    private Path boundsPath;\n@@ -96,1 +95,1 @@\n-\/\/    private Group lines;\n+    private Group lines;\n@@ -103,4 +102,0 @@\n-    \/** FIX JDK-8341438 TextFlow: incorrect caretShape(), hitTest(), rangeShape() with non-empty padding\/border *\/\n-    \/\/ show the problem in the legacy code\n-    private static final boolean CORRECT_FOR_8341438_BUG = false;\n-\n@@ -115,6 +110,6 @@\n-                    (owner.get() != null);\n-\/\/                &&\n-\/\/                    (\n-\/\/                        showLines.get() ||\n-\/\/                        showLayoutBounds.get()\n-\/\/                    );\n+                    \/\/ FIX stop animation if not showing\n+                    (owner.get() != null) &&\n+                    (\n+                        showLines.get() ||\n+                        showLayoutBounds.get()\n+                    );\n@@ -122,3 +117,3 @@\n-            owner\n-\/\/            showLines,\n-\/\/            showLayoutBounds\n+            owner,\n+            showLines,\n+            showLayoutBounds\n@@ -141,1 +136,1 @@\n-        String ctrl = FX.isMac() ? \"command\" : \"ctrl\";\n+        String ctrl = FX.isMac() ? \"⌘\" : \"ctrl\";\n@@ -169,2 +164,2 @@\n-\/\/        updateLayoutBounds();\n-\/\/        updateTextLines();\n+        updateLayoutBounds();\n+        updateTextLines();\n@@ -199,1 +194,1 @@\n-                strikeThroughPath.setFill(Color.rgb(0, 128, 0, 0.3));\n+                strikeThroughPath.setFill(Color.rgb(0, 128, 0, 0.7));\n@@ -253,50 +248,48 @@\n-\/\/    private void updateLayoutBounds() {\n-\/\/        if (showLayoutBounds.get()) {\n-\/\/            if (boundsPath == null) {\n-\/\/                boundsPath = new Path();\n-\/\/                boundsPath.setViewOrder(BOUNDS_VIEW_ORDER);\n-\/\/                boundsPath.setStrokeWidth(0);\n-\/\/                boundsPath.setFill(Color.rgb(255, 128, 0, 0.1));\n-\/\/                boundsPath.setManaged(false);\n-\/\/                parent.getChildren().add(boundsPath);\n-\/\/            }\n-\/\/\n-\/\/            LayoutInfo la = layoutInfo();\n-\/\/            List<Rectangle2D> rs = List.of(la.getBounds(includeLineSpace.get()));\n-\/\/            PathElement[] ps = toPathElementsArray(rs);\n-\/\/            boundsPath.getElements().setAll(ps);\n-\/\/        } else {\n-\/\/            if (boundsPath != null) {\n-\/\/                parent.getChildren().remove(boundsPath);\n-\/\/                boundsPath = null;\n-\/\/            }\n-\/\/        }\n-\/\/    }\n-\n-\/\/    private void updateTextLines() {\n-\/\/        if (showLines.get()) {\n-\/\/            if (lines == null) {\n-\/\/                lines = new Group();\n-\/\/                lines.setAutoSizeChildren(false);\n-\/\/                lines.setViewOrder(TEXT_LINES_VIEW_ORDER);\n-\/\/                lines.setManaged(false);\n-\/\/                parent.getChildren().add(lines);\n-\/\/            }\n-\/\/            lines.getChildren().setAll(createTextLinesShapes());\n-\/\/        } else {\n-\/\/            if (lines != null) {\n-\/\/                parent.getChildren().remove(lines);\n-\/\/                lines = null;\n-\/\/            }\n-\/\/        }\n-\/\/    }\n-\n-\/\/    private LayoutInfo layoutInfo() {\n-\/\/        Node n = owner();\n-\/\/        if (n instanceof Text t) {\n-\/\/            return t.getLayoutInfo();\n-\/\/        } else if (n instanceof TextFlow t) {\n-\/\/            return t.getLayoutInfo();\n-\/\/        }\n-\/\/        return null;\n-\/\/    }\n+    private void updateLayoutBounds() {\n+        if (showLayoutBounds.get()) {\n+            if (boundsPath == null) {\n+                boundsPath = new Path();\n+                boundsPath.setViewOrder(BOUNDS_VIEW_ORDER);\n+                boundsPath.setStrokeWidth(0);\n+                boundsPath.setFill(Color.rgb(255, 128, 0, 0.1));\n+                boundsPath.setManaged(false);\n+                parent.getChildren().add(boundsPath);\n+            }\n+\n+            PathElement[] ps = createLayoutBoundsShape();\n+            boundsPath.getElements().setAll(ps);\n+        } else {\n+            if (boundsPath != null) {\n+                parent.getChildren().remove(boundsPath);\n+                boundsPath = null;\n+            }\n+        }\n+    }\n+\n+    private void updateTextLines() {\n+        if (showLines.get()) {\n+            if (lines == null) {\n+                lines = new Group();\n+                lines.setAutoSizeChildren(false);\n+                lines.setViewOrder(TEXT_LINES_VIEW_ORDER);\n+                lines.setManaged(false);\n+                parent.getChildren().add(lines);\n+            }\n+            lines.getChildren().setAll(createTextLinesShapes());\n+        } else {\n+            if (lines != null) {\n+                parent.getChildren().remove(lines);\n+                lines = null;\n+            }\n+        }\n+    }\n+\n+    private LayoutInfo layoutInfo() {\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+            return t.getLayoutInfo();\n+        } else if (n instanceof TextFlow t) {\n+            return t.getLayoutInfo();\n+        }\n+        return null;\n+    }\n@@ -322,3 +315,8 @@\n-            if (CORRECT_FOR_8341438_BUG) {\n-                Insets m = t.getInsets();\n-                p = p.subtract(m.getLeft(), m.getTop()); \/\/ TODO rtl?\n+            TextShapeLogic logic = textShapeLogic();\n+            switch(logic) {\n+            case NEW:\n+                return t.getHitInfo(p);\n+            case LAYOUT_INFO:\n+                return t.getHitInfo(p);\n+            case LEGACY:\n+                return t.hitTest(p);\n@@ -326,1 +324,0 @@\n-            return t.hitTest(p);\n@@ -354,38 +351,31 @@\n-\/\/    private List<Node> createTextLinesShapes() {\n-\/\/        LayoutInfo la = layoutInfo();\n-\/\/        List<TextLineInfo> lines = la.getTextLines(includeLineSpace.get());\n-\/\/        ArrayList<Node> a = new ArrayList<>();\n-\/\/        int i = 0;\n-\/\/        for (TextLineInfo line : lines) {\n-\/\/            Rectangle2D b = line.bounds();\n-\/\/            Color c = color(i++);\n-\/\/            Rectangle r = new Rectangle(b.getMinX(), b.getMinY(), b.getWidth(), b.getHeight());\n-\/\/            r.setFill(c);\n-\/\/            r.setStrokeWidth(0);\n-\/\/            r.setManaged(false);\n-\/\/            a.add(r);\n-\/\/        }\n-\/\/        return a;\n-\/\/    }\n-\n-    private PathElement[] fix_8341438(PathElement[] es) {\n-        Insets m = ((TextFlow)owner()).getInsets();\n-        double dx = m.getLeft(); \/\/ FIX rtl?\n-        double dy = m.getTop();\n-\n-        if (CORRECT_FOR_8341438_BUG) {\n-            PathElement[] rv = new PathElement[es.length];\n-            for (int i = 0; i < es.length; i++) {\n-                PathElement em = es[i];\n-                PathElement shifted;\n-                if (em instanceof MoveTo v) {\n-                    shifted = new MoveTo(v.getX() + dx, v.getY() + dy);\n-                } else if (em instanceof LineTo v) {\n-                    shifted = new LineTo(v.getX() + dx, v.getY() + dy);\n-                } else {\n-                    shifted = em;\n-                }\n-                rv[i] = shifted;\n-            }\n-            return rv;\n-        } else {\n+    private List<Node> createTextLinesShapes() {\n+        LayoutInfo la = layoutInfo();\n+        List<TextLineInfo> lines = la.getTextLines(includeLineSpace.get());\n+\n+        double dx = 0.0;\n+        double dy = 0.0;\n+        if (owner() instanceof Text t) {\n+            Bounds b = t.getBoundsInLocal();\n+            dx = b.getMinX();\n+            dy = b.getMinY();\n+        }\n+\n+        ArrayList<Node> rv = new ArrayList<>();\n+        int i = 0;\n+        for (TextLineInfo line : lines) {\n+            Rectangle2D b = line.bounds();\n+            Color c = color(i++);\n+            Rectangle r = new Rectangle(b.getMinX() - dx, b.getMinY() - dy, b.getWidth(), b.getHeight());\n+            r.setFill(c);\n+            r.setStrokeWidth(0);\n+            r.setManaged(false);\n+            rv.add(r);\n+        }\n+        return rv;\n+    }\n+\n+    private PathElement[] correctForTextOrigin(Text t, PathElement[] es) {\n+        Bounds b = t.getBoundsInLocal();\n+        double dx = b.getMinX();\n+        double dy = b.getMinY();\n+        if (dx == 0.0 && dy == 0.0) {\n@@ -394,0 +384,18 @@\n+\n+        dx = -dx;\n+        dy = -dy;\n+\n+        PathElement[] rv = new PathElement[es.length];\n+        for (int i = 0; i < es.length; i++) {\n+            PathElement em = es[i];\n+            PathElement shifted;\n+            if (em instanceof MoveTo v) {\n+                shifted = new MoveTo(v.getX() + dx, v.getY() + dy);\n+            } else if (em instanceof LineTo v) {\n+                shifted = new LineTo(v.getX() + dx, v.getY() + dy);\n+            } else {\n+                shifted = em;\n+            }\n+            rv[i] = shifted;\n+        }\n+        return rv;\n@@ -396,9 +404,9 @@\n-\/\/    private static PathElement[] createCaretShape(CaretInfo ci) {\n-\/\/        ArrayList<PathElement> a = new ArrayList<>();\n-\/\/        for (int i = 0; i < ci.getPartCount(); i++) {\n-\/\/            Rectangle2D r = ci.getPartAt(i);\n-\/\/            a.add(new MoveTo(r.getMinX(), r.getMinY()));\n-\/\/            a.add(new LineTo(r.getMaxX(), r.getMaxY()));\n-\/\/        }\n-\/\/        return a.toArray(PathElement[]::new);\n-\/\/    }\n+    private static PathElement[] createCaretShape(CaretInfo ci) {\n+        ArrayList<PathElement> a = new ArrayList<>();\n+        for (int i = 0; i < ci.getSegmentCount(); i++) {\n+            Rectangle2D r = ci.getSegmentAt(i);\n+            a.add(new MoveTo(r.getMinX(), r.getMinY()));\n+            a.add(new LineTo(r.getMaxX(), r.getMaxY()));\n+        }\n+        return a.toArray(PathElement[]::new);\n+    }\n@@ -407,1 +415,1 @@\n-        boolean legacy = true; \/\/legacyAPI.get();\n+        TextShapeLogic logic = textShapeLogic();\n@@ -410,2 +418,10 @@\n-            if (legacy) {\n-                return t.caretShape(charIndex, leading);\n+            switch (logic) {\n+            case NEW:\n+                break;\n+            case LAYOUT_INFO:\n+                CaretInfo ci = layoutInfo().caretInfoAt(charIndex, leading);\n+                return correctForTextOrigin(t, createCaretShape(ci));\n+            case LEGACY:\n+                return correctForTextOrigin(t, t.caretShape(charIndex, leading));\n+            default:\n+                break;\n@@ -413,4 +429,0 @@\n-\/\/            else {\n-\/\/                CaretInfo ci = layoutInfo().caretInfo(charIndex, leading);\n-\/\/                return createCaretShape(ci);\n-\/\/            }\n@@ -418,2 +430,10 @@\n-            if (legacy) {\n-                return fix_8341438(t.caretShape(charIndex, leading));\n+            switch (logic) {\n+            case NEW:\n+                return t.getCaretShape(charIndex, leading);\n+            case LAYOUT_INFO:\n+                CaretInfo ci = layoutInfo().caretInfoAt(charIndex, leading);\n+                return createCaretShape(ci);\n+            case LEGACY:\n+                return t.caretShape(charIndex, leading);\n+            default:\n+                break;\n@@ -421,4 +441,0 @@\n-\/\/            else {\n-\/\/                CaretInfo ci = layoutInfo().caretInfo(charIndex, leading);\n-\/\/                return createCaretShape(ci);\n-\/\/            }\n@@ -429,0 +445,10 @@\n+    private PathElement[] createLayoutBoundsShape() {\n+        LayoutInfo la = layoutInfo();\n+        List<Rectangle2D> rs = List.of(la.getLogicalBounds(includeLineSpace.get()));\n+        PathElement[] es = toPathElementsArray(rs);\n+        if (owner() instanceof Text t) {\n+            es = correctForTextOrigin(t, es);\n+        }\n+        return es;\n+    }\n+\n@@ -479,1 +505,1 @@\n-        boolean legacy = true; \/\/legacyAPI.get();\n+        TextShapeLogic logic = textShapeLogic();\n@@ -482,2 +508,9 @@\n-            if (legacy) {\n-                return t.rangeShape(start, end);\n+            switch (logic) {\n+            case NEW:\n+                return correctForTextOrigin(t, t.getRangeShape(start, end, includeLineSpace.get()));\n+            case LAYOUT_INFO:\n+                return correctForTextOrigin(t, selectionShape(t.getLayoutInfo(), start, end));\n+            case LEGACY:\n+                return correctForTextOrigin(t, t.rangeShape(start, end));\n+            default:\n+                break;\n@@ -485,3 +518,0 @@\n-\/\/            else {\n-\/\/                return createSelectionShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n@@ -489,2 +519,9 @@\n-            if (legacy) {\n-                return fix_8341438(t.rangeShape(start, end));\n+            switch (logic) {\n+            case NEW:\n+                return t.getRangeShape(start, end, includeLineSpace.get());\n+            case LAYOUT_INFO:\n+                return selectionShape(t.getLayoutInfo(), start, end);\n+            case LEGACY:\n+                return t.rangeShape(start, end);\n+            default:\n+                break;\n@@ -492,3 +529,0 @@\n-\/\/            else {\n-\/\/                return createSelectionShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n@@ -500,1 +534,1 @@\n-        boolean legacy = true; \/\/legacyAPI.get();\n+        TextShapeLogic logic = textShapeLogic();\n@@ -503,5 +537,11 @@\n-\/\/            if (legacy) {\n-\/\/                return t.strikeThroughShape(start, end);\n-\/\/            } else {\n-\/\/                return createStrikeThroughShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n+            switch (logic) {\n+            case NEW:\n+                return correctForTextOrigin(t, t.getStrikeThroughShape(start, end));\n+            case LAYOUT_INFO:\n+                return correctForTextOrigin(t, strikeThroughShape(t.getLayoutInfo(), start, end));\n+            case LEGACY:\n+                \/\/ not available\n+                break;\n+            default:\n+                break;\n+            }\n@@ -509,6 +549,11 @@\n-\/\/            if (legacy) {\n-\/\/                return fix_8341438(t.strikeThroughShape(start, end));\n-\/\/            }\n-\/\/            else {\n-\/\/                return createStrikeThroughShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n+            switch (logic) {\n+            case NEW:\n+                return t.getStrikeThroughShape(start, end);\n+            case LAYOUT_INFO:\n+                return strikeThroughShape(t.getLayoutInfo(), start, end);\n+            case LEGACY:\n+                \/\/ not available\n+                break;\n+            default:\n+                break;\n+            }\n@@ -520,1 +565,1 @@\n-        boolean legacy = true; \/\/legacyAPI.get();\n+        TextShapeLogic logic = textShapeLogic();\n@@ -523,2 +568,10 @@\n-            if (legacy) {\n-                return t.underlineShape(start, end);\n+            switch (logic) {\n+            case NEW:\n+                \/\/ using legacy API\n+                return correctForTextOrigin(t, t.underlineShape(start, end));\n+            case LAYOUT_INFO:\n+                return correctForTextOrigin(t, underlineShape(t.getLayoutInfo(), start, end));\n+            case LEGACY:\n+                return correctForTextOrigin(t, t.underlineShape(start, end));\n+            default:\n+                break;\n@@ -526,3 +579,0 @@\n-\/\/            else {\n-\/\/                return createUnderlineShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n@@ -530,2 +580,9 @@\n-            if (legacy) {\n-                return fix_8341438(t.underlineShape(start, end));\n+            switch (logic) {\n+            case NEW:\n+                return t.getUnderlineShape(start, end);\n+            case LAYOUT_INFO:\n+                return underlineShape(t.getLayoutInfo(), start, end);\n+            case LEGACY:\n+                return t.underlineShape(start, end);\n+            default:\n+                break;\n@@ -533,3 +590,0 @@\n-\/\/            else {\n-\/\/                return createUnderlineShape(t.getLayoutInfo(), start, end);\n-\/\/            }\n@@ -540,14 +594,19 @@\n-\/\/    private PathElement[] createSelectionShape(LayoutInfo la, int start, int end) {\n-\/\/        List<Rectangle2D> rs = la.selectionShape(start, end, includeLineSpace.get());\n-\/\/        return toPathElementsArray(rs);\n-\/\/    }\n-\/\/\n-\/\/    private PathElement[] createStrikeThroughShape(LayoutInfo la, int start, int end) {\n-\/\/        List<Rectangle2D> rs = la.strikeThroughShape(start, end);\n-\/\/        return toPathElementsArray(rs);\n-\/\/    }\n-\/\/\n-\/\/    private PathElement[] createUnderlineShape(LayoutInfo la, int start, int end) {\n-\/\/        List<Rectangle2D> rs = la.underlineShape(start, end);\n-\/\/        return toPathElementsArray(rs);\n-\/\/    }\n+    private PathElement[] selectionShape(LayoutInfo la, int start, int end) {\n+        List<Rectangle2D> rs = la.getSelectionGeometry(start, end, includeLineSpace.get());\n+        return toPathElementsArray(rs);\n+    }\n+\n+    private PathElement[] strikeThroughShape(LayoutInfo la, int start, int end) {\n+        List<Rectangle2D> rs = la.getStrikeThroughGeometry(start, end);\n+        return toPathElementsArray(rs);\n+    }\n+\n+    private PathElement[] underlineShape(LayoutInfo la, int start, int end) {\n+        List<Rectangle2D> rs = la.getUnderlineGeometry(start, end);\n+        return toPathElementsArray(rs);\n+    }\n+\n+    private TextShapeLogic textShapeLogic() {\n+        TextShapeLogic v = shapeLogic.get();\n+        return v == null ? TextShapeLogic.LEGACY : v;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/LayoutInfoVisualizer.java","additions":249,"deletions":190,"binary":false,"changes":439,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        sb.append(Utils.fmt(ev.getX())).append(\", \").append(Utils.fmt(ev.getY()));\n+        sb.append(Utils.f2(ev.getX())).append(\", \").append(Utils.f2(ev.getY()));\n@@ -73,1 +73,1 @@\n-        sb.append(Utils.fmt(ev.getScreenX())).append(\", \").append(Utils.fmt(ev.getScreenY()));\n+        sb.append(Utils.f2(ev.getScreenX())).append(\", \").append(Utils.f2(ev.getScreenY()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/StdoutMouseListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,265 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import javafx.scene.Node;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.PickResult;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.ClosePath;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.shape.StrokeLineJoin;\n+import javafx.scene.text.TabStop;\n+import javafx.scene.text.TabStopPolicy;\n+\n+\/**\n+ * Visual editor for a TabStopPolicy.\n+ *\/\n+public class TabStopPane extends Pane {\n+\n+    private final TabStopPolicy policy;\n+    private int seq;\n+    private List<Tick> ticks;\n+    private Tick clickedStop;\n+    private boolean dragged;\n+    private boolean modified;\n+    private static final double HALFWIDTH = 4;\n+    private static final double TOO_CLOSE = 2;\n+\n+    public TabStopPane(TabStopPolicy p) {\n+        this.policy = p;\n+        setPrefHeight(15);\n+        setBackground(Background.fill(Color.WHITE));\n+\n+        p.tabStops().subscribe(this::update);\n+        p.defaultIntervalProperty().subscribe(this::update);\n+        widthProperty().subscribe(this::update);\n+\n+        addEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMousePressed);\n+        addEventHandler(MouseEvent.MOUSE_RELEASED, this::handleMouseReleased);\n+        addEventHandler(MouseEvent.MOUSE_DRAGGED, this::handleMouseDragged);\n+    }\n+\n+    private void update() {\n+        ticks = null;\n+        requestLayout();\n+    }\n+\n+    \/\/ ticks: Paths (with TabStop in properties)\n+    \/\/ init: create from policy\n+    \/\/ layout: create\/update paths, setAll\n+    \/\/ edit: add\/remove ticks, setAll\n+    \/\/ release: update policy\n+    private List<Tick> createTicks() {\n+        double width = getWidth();\n+        double x = 0.0;\n+        ArrayList<Tick> ts = new ArrayList<>(16);\n+\n+        \/\/ tab stops\n+        for (TabStop t : policy.tabStops()) {\n+            x = (float)t.getPosition();\n+            if ((x - HALFWIDTH) > width) {\n+                break;\n+            }\n+            ts.add(createTabStop(t));\n+        }\n+\n+        \/\/ default stops\n+        double defaultStops = policy.getDefaultInterval();\n+        if (defaultStops > 0.0) {\n+            for (;;) {\n+                x = nextPosition(x, defaultStops);\n+                if ((x - HALFWIDTH) > width) {\n+                    break;\n+                }\n+                ts.add(createTick(x));\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    \/\/ similar to FixedTabAdvancePolicy.nextPosition()\n+    private static double nextPosition(double position, double tabAdvance) {\n+        double n = (position \/ tabAdvance);\n+        return ((int)(n + Math.ulp(n)) + 1) * tabAdvance;\n+    }\n+\n+    @Override\n+    protected void layoutChildren() {\n+        if (ticks == null) {\n+            ticks = createTicks();\n+            getChildren().setAll(ticks);\n+        }\n+    }\n+\n+    private Tick findTabStop(MouseEvent ev) {\n+        PickResult pick = ev.getPickResult();\n+        Node n = pick.getIntersectedNode();\n+        if (n instanceof Tick t) {\n+            if (t.isTabStop()) {\n+                return t;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/\/ returns true if the current tick should be removed\n+    private boolean deduplicate() {\n+        double pos = clickedStop.position;\n+        for (Tick t : ticks) {\n+            if (t != clickedStop) {\n+                if (t.isTabStop()) {\n+                    if (Math.abs(pos - t.position) < TOO_CLOSE) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void handleMousePressed(MouseEvent ev) {\n+        double x = ev.getX();\n+        dragged = false;\n+        modified = false;\n+        clickedStop = findTabStop(ev);\n+        ev.consume();\n+    }\n+\n+    private void handleMouseReleased(MouseEvent ev) {\n+        \/\/ was dragged? update tab stops\n+        \/\/ was tabstop? remove\n+        if (clickedStop == null) {\n+            double x = ev.getX();\n+            Tick t = createTabStop(new TabStop(x));\n+            getChildren().add(t);\n+            ticks.add(t);\n+            modified = true;\n+        } else {\n+            boolean remove = (dragged && deduplicate()) | (!dragged);\n+            if (remove) {\n+                getChildren().remove(clickedStop);\n+                ticks.remove(clickedStop);\n+                modified = true;\n+            }\n+        }\n+        clickedStop = null;\n+        dragged = false;\n+        if (modified) {\n+            List<TabStop> ts = toTabStops();\n+            policy.tabStops().setAll(ts);\n+        }\n+        ev.consume();\n+    }\n+\n+    private void handleMouseDragged(MouseEvent ev) {\n+        \/\/ update the tabstop being dragged\n+        if (clickedStop != null) {\n+            double x = ev.getX();\n+            clickedStop.position = x;\n+            clickedStop.tabStop = new TabStop(x);\n+            clickedStop.getElements().setAll(createTabStopPathElements(x));\n+            dragged = true;\n+            modified = true;\n+            ev.consume();\n+        }\n+    }\n+\n+    private List<PathElement> createTabStopPathElements(double x) {\n+        double height = getHeight();\n+        double h2 = height \/ 2.0;\n+        ArrayList<PathElement> es = new ArrayList<>(5);\n+        es.add(new MoveTo(x, 0));\n+        es.add(new LineTo(x + HALFWIDTH, h2));\n+        es.add(new LineTo(x, height));\n+        es.add(new LineTo(x - HALFWIDTH, h2));\n+        es.add(new ClosePath());\n+        return es;\n+    }\n+\n+    private Tick createTabStop(TabStop tab) {\n+        double x = tab.getPosition();\n+        Tick t = new Tick(x);\n+        t.tabStop = tab;\n+        t.setStroke(Color.BLACK);\n+        t.setStrokeWidth(0.5);\n+        t.setStrokeLineJoin(StrokeLineJoin.BEVEL);\n+        t.getElements().setAll(createTabStopPathElements(x));\n+        return t;\n+    }\n+\n+    private Tick createTick(double x) {\n+        Tick t = new Tick(x);\n+        t.setStroke(Color.BLACK);\n+        t.setStrokeWidth(1.0);\n+        ArrayList<PathElement> es = new ArrayList<>(2);\n+        es.add(new MoveTo(x, 0));\n+        es.add(new LineTo(x, getHeight()));\n+        t.getElements().setAll(es);\n+        return t;\n+    }\n+\n+    private List<TabStop> toTabStops() {\n+        ArrayList<TabStop> rv = new ArrayList<>();\n+        \/\/ ticks cannot be null at this point\n+        for (Tick t : ticks) {\n+            if (t.isTabStop()) {\n+                rv.add(t.tabStop);\n+            }\n+        }\n+        \/\/ sort\n+        rv.sort(new Comparator<TabStop>() {\n+            @Override\n+            public int compare(TabStop a, TabStop b) {\n+                return (int)Math.signum(a.getPosition() - b.getPosition());\n+            }\n+        });\n+        return rv;\n+    }\n+\n+    private static class Tick extends Path {\n+        public double position;\n+        public TabStop tabStop;\n+\n+        public Tick(double position) {\n+            this.position = position;\n+            setManaged(false);\n+            setPickOnBounds(true);\n+        }\n+\n+        private boolean isTabStop() {\n+            return tabStop != null;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TabStopPane.java","additions":265,"deletions":0,"binary":false,"changes":265,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,4 @@\n+    \/** called before replacing this page with another *\/\n+    public void deactivate() {\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TestPaneBase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Encodes user selection of which APIs to use for obtaining text shapes.\n+ *\/\n+public enum TextShapeLogic {\n+    \/** Selects the LayoutInfo API *\/\n+    LAYOUT_INFO,\n+    \/** Selects the legacy (buggy, deprecated) Text\/TextFlow methods *\/\n+    LEGACY,\n+    \/** Selects the new methods in TextFlow that account for padding\/border.  Not applicable to Text *\/\n+    NEW\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextShapeLogic.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -53,0 +53,2 @@\n+            \"Multi-line\", \"Line One.\\nLine Two.\\nLine Three.\",\n+            \"Khmer\", \"បានស្នើសុំនៅតែត្រូវបានបដិសេធ\\n\\nSegment: បានស្នើសុំ 0\\nSegment: នៅតែត្រូវ 10\\nSegment: បានបដិសេ 19\\nSegment: ធ 27\",\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextTemplates.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.ArrayList;\n@@ -32,0 +31,2 @@\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n@@ -48,1 +49,1 @@\n-    private static final DecimalFormat DOUBLE_FORMAT = new DecimalFormat(\"0.###\");\n+    private static final DecimalFormat DOUBLE_FORMAT_2 = new DecimalFormat(\"0.##\");\n@@ -104,2 +105,2 @@\n-    public static String fmt(double v) {\n-        return DOUBLE_FORMAT.format(v);\n+    public static String f2(double v) {\n+        return DOUBLE_FORMAT_2.format(v);\n@@ -139,0 +140,15 @@\n+\n+    public static void link(BooleanProperty ui, ReadOnlyBooleanProperty main, BooleanConsumer c) {\n+        main.addListener((s, p, v) -> {\n+            ui.set(v);\n+        });\n+        if (c != null) {\n+            ui.addListener((s, p, v) -> {\n+                if (main.get() != v) {\n+                    c.consume(v);\n+                }\n+            });\n+            boolean val = ui.get();\n+            c.consume(val);\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+        \"Amharic\", \"አማርኛ ይጻፉ\",\n+        \"Ancient South Arabian\", \"𐩣𐩯𐩬𐩵\",\n@@ -54,0 +56,3 @@\n+        \"Dinka\", \"Thuɔŋjäŋ\",\n+        \"Egyptian (Ancient)\", \"𓅂𓁹𓁋𓁨\",\n+        \"Emoji\", \"(◕‿◕)\",\n@@ -76,0 +81,1 @@\n+        \"Lao\", \"ພາສາລາວ\",\n@@ -85,0 +91,1 @@\n+        \"Nepali\", \"नेपाली गोरखा\",\n@@ -89,0 +96,1 @@\n+        \"Polish\", \"Zażółć gęślą jaźń\",\n@@ -94,1 +102,2 @@\n-        \"Sindhi\", \"سِنڌِي‎ • सिन्धी\",\n+        \"Sindhi\", \"سِنڌِي‎ सिन्धी\",\n+        \"Sinhala\", \"සිංහල බස\",\n@@ -103,0 +112,1 @@\n+        \"Tigrinya\", \"ትግርኛ\",\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/WritingSystemsDemo.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}