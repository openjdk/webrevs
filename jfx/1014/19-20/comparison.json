{"files":[{"patch":"@@ -58,4 +58,11 @@\n-    final Map<String, String> platformKeyMappings;\n-    final Map<String, Object> effectivePreferences = new HashMap<>();\n-    final Map<String, Object> unmodifiableEffectivePreferences = Collections.unmodifiableMap(effectivePreferences);\n-    final PreferenceProperties properties = new PreferenceProperties(this);\n+    private final Map<String, String> platformKeyMappings;\n+\n+    \/**\n+     * Contains the current set of effective preferences, i.e. the set of preferences that\n+     * we know to be the current state of the world, and are exposed to users of this map.\n+     *\/\n+    private final Map<String, Object> effectivePreferences = new HashMap<>();\n+    private final Map<String, Object> unmodifiableEffectivePreferences = Collections.unmodifiableMap(effectivePreferences);\n+\n+    \/** Contains the implementation of the property-based API. *\/\n+    private final PreferenceProperties properties = new PreferenceProperties(this);\n@@ -66,0 +73,7 @@\n+    \/**\n+     * Initializes a new {@code PlatformPreferences} instance with the given platform-specific key mappings.\n+     *\n+     * @param platformKeyMappings the platform-specific key mappings\n+     * @throws NullPointerException if {@code platformKeyMappings} is {@code null} or contains\n+     *                              {@code null} keys or values\n+     *\/\n@@ -67,1 +81,1 @@\n-        this.platformKeyMappings = platformKeyMappings;\n+        this.platformKeyMappings = Map.copyOf(platformKeyMappings);\n@@ -194,0 +208,3 @@\n+     * The absence of a mapping in the specified preferences does not indicate that it should be removed;\n+     * instead, a key must be explicitly mapped to {@code null} to remove the mapping. Consequently, this\n+     * map will never contain {@code null} values.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"}]}