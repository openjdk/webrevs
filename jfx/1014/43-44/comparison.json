{"files":[{"patch":"@@ -54,1 +54,0 @@\n-import java.util.function.Function;\n@@ -729,49 +728,0 @@\n-    \/**\n-     * Enumeration of possible high contrast scheme values.\n-     *\n-     * For each scheme, a theme key is defined. These keys can be\n-     * used, for instance, in a resource bundle that defines the theme name values\n-     * for supported locales.\n-     *\n-     * The high contrast feature may not be available on all platforms.\n-     *\/\n-    public enum HighContrastScheme {\n-        HIGH_CONTRAST_BLACK(\"high.contrast.black.theme\"),\n-        HIGH_CONTRAST_WHITE(\"high.contrast.white.theme\"),\n-        HIGH_CONTRAST_1(\"high.contrast.1.theme\"),\n-        HIGH_CONTRAST_2(\"high.contrast.2.theme\");\n-\n-        private final String themeKey;\n-        HighContrastScheme(String themeKey) {\n-            this.themeKey = themeKey;\n-        }\n-\n-        public String getThemeKey() {\n-            return themeKey;\n-        }\n-\n-        \/**\n-         * Given a theme name string, this method finds the possible enum constant\n-         * for which the result of a function, applying its theme key, matches the theme name.\n-         *\n-         * An example of such function can be {@code ResourceBundle::getString},\n-         * as {@link java.util.ResourceBundle#getString(String)} returns a string for\n-         * the given key.\n-         *\n-         * @param keyFunction a {@link Function} that returns a string for a given theme key string.\n-         * @param themeName a string with the theme name\n-         * @return the name of the enum constant or null if not found\n-         *\/\n-        public static String fromThemeName(Function<String, String> keyFunction, String themeName) {\n-            if (keyFunction == null || themeName == null) {\n-                return null;\n-            }\n-            for (HighContrastScheme item : values()) {\n-                if (themeName.equalsIgnoreCase(keyFunction.apply(item.getThemeKey()))) {\n-                    return item.toString();\n-                }\n-            }\n-            return null;\n-        }\n-    }\n-\n@@ -826,1 +776,6 @@\n-                    switch (HighContrastScheme.valueOf(platformTheme)) {\n+                    var highContrastScheme = WindowsHighContrastScheme.fromThemeName(platformTheme);\n+                    if (highContrastScheme == null) {\n+                        return;\n+                    }\n+\n+                    switch (highContrastScheme) {\n@@ -837,1 +792,0 @@\n-                        default:\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":6,"deletions":52,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+\/**\n+ * Enumeration of possible high contrast scheme values.\n+ * <p>\n+ * For each scheme, a theme key is defined. These keys can be\n+ * used in a resource bundle that defines the theme name values\n+ * for supported locales.\n+ * <p>\n+ * The high contrast feature may not be available on all platforms.\n+ *\/\n+enum WindowsHighContrastScheme {\n+\n+    HIGH_CONTRAST_BLACK(\"high.contrast.black.theme\"),\n+    HIGH_CONTRAST_WHITE(\"high.contrast.white.theme\"),\n+    HIGH_CONTRAST_1(\"high.contrast.1.theme\"),\n+    HIGH_CONTRAST_2(\"high.contrast.2.theme\");\n+\n+    private static final List<ResourceBundle> resourceBundles = Arrays.stream(Locale.getAvailableLocales())\n+        .map(locale -> ResourceBundle.getBundle(\"com\/sun\/glass\/ui\/win\/themes\", locale))\n+        .distinct()\n+        .toList();\n+\n+    private final String themeKey;\n+\n+    WindowsHighContrastScheme(String themeKey) {\n+        this.themeKey = themeKey;\n+    }\n+\n+    public String getThemeKey() {\n+        return themeKey;\n+    }\n+\n+    \/**\n+     * Given a theme name string, this method finds the possible enum constant\n+     * for which the result of a function, applying its theme key, matches the theme name.\n+     *\n+     * @param themeName a string with the localized theme name (for the locale of the OS, not the JVM)\n+     * @return the enum constant or null if not found\n+     *\/\n+    public static WindowsHighContrastScheme fromThemeName(String themeName) {\n+        if (themeName == null) {\n+            return null;\n+        }\n+\n+        \/\/ Iterate over all resource bundles and try to find a value that matches the theme name\n+        \/\/ we got from the OS. We can't just look in the properties file for the current locale,\n+        \/\/ since we might be running on a JVM with a locale that is different from the OS.\n+        for (WindowsHighContrastScheme item : values()) {\n+            for (ResourceBundle resourceBundle : resourceBundles) {\n+                if (themeName.equalsIgnoreCase(resourceBundle.getString(item.getThemeKey()))) {\n+                    return item;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/WindowsHighContrastScheme.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -72,1 +72,3 @@\n-            new Label(\"2. Observe whether the changed preferences are reported in the log below.\"),\n+            new VBox(\n+                new Label(\"2. Observe whether the changed preferences are reported in the log below.\"),\n+                new Label(\"    Added or removed preferences are marked with a plus or minus sign.\")),\n@@ -90,1 +92,7 @@\n-            appendText(textArea, \"\\t\" + change.getKey() + \" = \" + change.getValueAdded());\n+            if (change.wasRemoved() && change.wasAdded()) {\n+                appendText(textArea, \"\\t\" + formatEntry(change.getKey(), change.getValueAdded()));\n+            } else if (change.wasRemoved()) {\n+                appendText(textArea, \"\\t-\" + change.getKey());\n+            } else {\n+                appendText(textArea, \"\\t+\" + formatEntry(change.getKey(), change.getValueAdded()));\n+            }\n@@ -108,11 +116,12 @@\n-        String entries = prefs.stream()\n-                .sorted(Map.Entry.comparingByKey())\n-                .map(entry -> {\n-                    if (entry.getValue() instanceof Object[] array) {\n-                        return entry.getKey() + \"=\" + Arrays.toString(array);\n-                    }\n-                    return entry.getKey() + \"=\" + entry.getValue();\n-                })\n-                .collect(Collectors.joining(\"\\r\\n\\t\"));\n-\n-        return \"\\r\\n\\t\" + entries;\n+        return \"\\r\\n\\t\" + prefs.stream()\n+            .sorted(Map.Entry.comparingByKey())\n+            .map(entry -> formatEntry(entry.getKey(), entry.getValue()))\n+            .collect(Collectors.joining(\"\\r\\n\\t\"));\n+    }\n+\n+    private static String formatEntry(String key, Object value) {\n+        if (value instanceof Object[] array) {\n+            return key + \"=\" + Arrays.toString(array);\n+        }\n+\n+        return key + \"=\" + value;\n","filename":"tests\/manual\/events\/PlatformPreferencesChangedTest.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"}]}