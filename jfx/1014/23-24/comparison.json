{"files":[{"patch":"@@ -789,0 +789,14 @@\n+\n+    \/**\n+     * Returns a mapping of platform-specific keys to the types of their values.\n+     * <p>\n+     * Implementors must keep this map in sync with the mappings reported by the native Glass toolkit.\n+     * If a native toolkit reports mappings for keys that are not contained in this map, the typed getters\n+     * in {@link javafx.application.Platform.Preferences} might not throw IllegalArgumentException as\n+     * specified.\n+     *\n+     * @return a map of platform-specific keys to types\n+     *\/\n+    public Map<String, Class<?>> getPlatformKeys() {\n+        return Map.of();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import javafx.scene.paint.Color;\n@@ -49,0 +50,1 @@\n+import java.util.HashMap;\n@@ -480,0 +482,26 @@\n+\n+    \/\/ This list needs to be kept in sync with PlatformSupport.cpp in the Glass toolkit for GTK.\n+    @Override\n+    public Map<String, Class<?>> getPlatformKeys() {\n+        return new HashMap<>() {{\n+            put(\"GTK.theme_name\", String.class);\n+            put(\"GTK.theme_fg_color\", Color.class);\n+            put(\"GTK.theme_bg_color\", Color.class);\n+            put(\"GTK.theme_base_color\", Color.class);\n+            put(\"GTK.theme_selected_bg_color\", Color.class);\n+            put(\"GTK.theme_selected_fg_color\", Color.class);\n+            put(\"GTK.theme_unfocused_fg_color\", Color.class);\n+            put(\"GTK.theme_unfocused_bg_color\", Color.class);\n+            put(\"GTK.theme_unfocused_base_color\", Color.class);\n+            put(\"GTK.theme_unfocused_selected_bg_color\", Color.class);\n+            put(\"GTK.theme_unfocused_selected_fg_color\", Color.class);\n+            put(\"GTK.insensitive_bg_color\", Color.class);\n+            put(\"GTK.insensitive_fg_color\", Color.class);\n+            put(\"GTK.insensitive_base_color\", Color.class);\n+            put(\"GTK.borders\", Color.class);\n+            put(\"GTK.unfocused_borders\", Color.class);\n+            put(\"GTK.warning_color\", Color.class);\n+            put(\"GTK.error_color\", Color.class);\n+            put(\"GTK.success_color\", Color.class);\n+        }};\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.scene.paint.Color;\n@@ -39,0 +40,1 @@\n+import java.util.HashMap;\n@@ -404,0 +406,53 @@\n+\n+    \/\/ This list needs to be kept in sync with PlatformSupport.m in the Glass toolkit for macOS.\n+    @Override\n+    public Map<String, Class<?>> getPlatformKeys() {\n+        return new HashMap<>() {{\n+            put(\"macOS.NSColor.labelColor\", Color.class);\n+            put(\"macOS.NSColor.secondaryLabelColor\", Color.class);\n+            put(\"macOS.NSColor.tertiaryLabelColor\", Color.class);\n+            put(\"macOS.NSColor.quaternaryLabelColor\", Color.class);\n+            put(\"macOS.NSColor.textColor\", Color.class);\n+            put(\"macOS.NSColor.placeholderTextColor\", Color.class);\n+            put(\"macOS.NSColor.selectedTextColor\", Color.class);\n+            put(\"macOS.NSColor.textBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.selectedTextBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.keyboardFocusIndicatorColor\", Color.class);\n+            put(\"macOS.NSColor.unemphasizedSelectedTextColor\", Color.class);\n+            put(\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.linkColor\", Color.class);\n+            put(\"macOS.NSColor.separatorColor\", Color.class);\n+            put(\"macOS.NSColor.selectedContentBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.selectedMenuItemTextColor\", Color.class);\n+            put(\"macOS.NSColor.gridColor\", Color.class);\n+            put(\"macOS.NSColor.headerTextColor\", Color.class);\n+            put(\"macOS.NSColor.alternatingContentBackgroundColors\", Color[].class);\n+            put(\"macOS.NSColor.controlAccentColor\", Color.class);\n+            put(\"macOS.NSColor.controlColor\", Color.class);\n+            put(\"macOS.NSColor.controlBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.controlTextColor\", Color.class);\n+            put(\"macOS.NSColor.disabledControlTextColor\", Color.class);\n+            put(\"macOS.NSColor.selectedControlColor\", Color.class);\n+            put(\"macOS.NSColor.selectedControlTextColor\", Color.class);\n+            put(\"macOS.NSColor.alternateSelectedControlTextColor\", Color.class);\n+            put(\"macOS.NSColor.currentControlTint\", String.class);\n+            put(\"macOS.NSColor.windowBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.windowFrameTextColor\", Color.class);\n+            put(\"macOS.NSColor.underPageBackgroundColor\", Color.class);\n+            put(\"macOS.NSColor.findHighlightColor\", Color.class);\n+            put(\"macOS.NSColor.highlightColor\", Color.class);\n+            put(\"macOS.NSColor.shadowColor\", Color.class);\n+            put(\"macOS.NSColor.systemBlueColor\", Color.class);\n+            put(\"macOS.NSColor.systemBrownColor\", Color.class);\n+            put(\"macOS.NSColor.systemGrayColor\", Color.class);\n+            put(\"macOS.NSColor.systemGreenColor\", Color.class);\n+            put(\"macOS.NSColor.systemIndigoColor\", Color.class);\n+            put(\"macOS.NSColor.systemOrangeColor\", Color.class);\n+            put(\"macOS.NSColor.systemPinkColor\", Color.class);\n+            put(\"macOS.NSColor.systemPurpleColor\", Color.class);\n+            put(\"macOS.NSColor.systemRedColor\", Color.class);\n+            put(\"macOS.NSColor.systemTealColor\", Color.class);\n+            put(\"macOS.NSColor.systemYellowColor\", Color.class);\n+        }};\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.scene.paint.Color;\n@@ -38,0 +39,1 @@\n+import java.util.HashMap;\n@@ -382,0 +384,26 @@\n+\n+    \/\/ This list needs to be kept in sync with PlatformSupport.cpp in the Glass toolkit for Windows.\n+    @Override\n+    public Map<String, Class<?>> getPlatformKeys() {\n+        return new HashMap<>() {{\n+            put(\"Windows.SPI.HighContrast\", Boolean.class);\n+            put(\"Windows.SPI.HighContrastColorScheme\", String.class);\n+            put(\"Windows.SysColor.COLOR_3DFACE\", Color.class);\n+            put(\"Windows.SysColor.COLOR_BTNTEXT\", Color.class);\n+            put(\"Windows.SysColor.COLOR_GRAYTEXT\", Color.class);\n+            put(\"Windows.SysColor.COLOR_HIGHLIGHT\", Color.class);\n+            put(\"Windows.SysColor.COLOR_HIGHLIGHTTEXT\", Color.class);\n+            put(\"Windows.SysColor.COLOR_HOTLIGHT\", Color.class);\n+            put(\"Windows.SysColor.COLOR_WINDOW\", Color.class);\n+            put(\"Windows.SysColor.COLOR_WINDOWTEXT\", Color.class);\n+            put(\"Windows.UIColor.Background\", Color.class);\n+            put(\"Windows.UIColor.Foreground\", Color.class);\n+            put(\"Windows.UIColor.AccentDark3\", Color.class);\n+            put(\"Windows.UIColor.AccentDark2\", Color.class);\n+            put(\"Windows.UIColor.AccentDark1\", Color.class);\n+            put(\"Windows.UIColor.Accent\", Color.class);\n+            put(\"Windows.UIColor.AccentLight1\", Color.class);\n+            put(\"Windows.UIColor.AccentLight2\", Color.class);\n+            put(\"Windows.UIColor.AccentLight3\", Color.class);\n+        }};\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1065,2 +1065,4 @@\n-    public static void initPreferences(Map<String, String> platformKeyMappings, Map<String, Object> preferences) {\n-        platformPreferences = new PlatformPreferences(platformKeyMappings);\n+    public static void initPreferences(Map<String, Class<?>> platformKeys,\n+                                       Map<String, String> platformKeyMappings,\n+                                       Map<String, Object> preferences) {\n+        platformPreferences = new PlatformPreferences(platformKeys, platformKeyMappings);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,7 @@\n+    \/**\n+     * Contains mappings from platform-specific keys to their types. This information is\n+     * used to catch misuse of typed getters even if the preferences map doesn't contain\n+     * the preference mapping at runtime.\n+     *\/\n+    private final Map<String, Class<?>> platformKeys;\n+\n@@ -74,1 +81,1 @@\n-     * Initializes a new {@code PlatformPreferences} instance with the given platform-specific key mappings.\n+     * Initializes a new {@code PlatformPreferences} instance with the given platform-specific keys and key mappings.\n@@ -76,0 +83,1 @@\n+     * @param platformKeys the platform-specific keys and the types of their values\n@@ -77,2 +85,2 @@\n-     * @throws NullPointerException if {@code platformKeyMappings} is {@code null} or contains\n-     *                              {@code null} keys or values\n+     * @throws NullPointerException if {@code platformKeys} or {@code platformKeyMappings} is {@code null} or\n+     *                              contains {@code null} keys or values\n@@ -80,1 +88,2 @@\n-    public PlatformPreferences(Map<String, String> platformKeyMappings) {\n+    public PlatformPreferences(Map<String, Class<?>> platformKeys, Map<String, String> platformKeyMappings) {\n+        this.platformKeys = Map.copyOf(platformKeys);\n@@ -118,0 +127,1 @@\n+        Class<?> platformType = platformKeys.get(key);\n@@ -120,1 +130,17 @@\n-        if (value == null) {\n+        if (platformType == null) {\n+            \/\/ Well-behaved toolkits shouldn't report values for keys that are not listed in the\n+            \/\/ platform key-type map. However, if they do, we need to respect the invariant that\n+            \/\/ Map.getValue(key, type) should only return an empty value if Map.get(key) would\n+            \/\/ return null. In all other cases we need to return the value if the cast succeeds.\n+            if (value != null) {\n+                if (type.isInstance(value)) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    T v = (T)value;\n+                    return Optional.of(v);\n+                }\n+\n+                throw new IllegalArgumentException(\n+                    \"Incompatible types: requested = \" + type.getName() +\n+                    \", actual = \" + value.getClass().getName());\n+            }\n+\n@@ -124,4 +150,8 @@\n-        if (type.isInstance(value)) {\n-            @SuppressWarnings(\"unchecked\")\n-            T v = (T)value;\n-            return Optional.of(v);\n+        if (!type.isAssignableFrom(platformType)) {\n+            throw new IllegalArgumentException(\n+                \"Incompatible types: requested = \" + type.getName() +\n+                \", actual = \" + platformType.getName());\n+        }\n+\n+        if (value == null) {\n+            return Optional.empty();\n@@ -130,3 +160,3 @@\n-        throw new IllegalArgumentException(\n-            \"Incompatible types: requested = \" + type.getName() +\n-            \", actual = \" + value.getClass().getName());\n+        @SuppressWarnings(\"unchecked\")\n+        T v = (T)value;\n+        return Optional.of(v);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":42,"deletions":12,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -364,0 +364,1 @@\n+                Application.GetApplication().getPlatformKeys(),\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -628,1 +628,1 @@\n-         * @throws IllegalArgumentException if a mapping exists, but the key is not mapped to an {@code Integer}\n+         * @throws IllegalArgumentException if the key is not mappable to an {@code Integer}\n@@ -638,1 +638,1 @@\n-         * @throws IllegalArgumentException if a mapping exists, but the key is not mapped to a {@code Double}\n+         * @throws IllegalArgumentException if the key is not mappable to a {@code Double}\n@@ -648,1 +648,1 @@\n-         * @throws IllegalArgumentException if a mapping exists, but the key is not mapped to a {@code Boolean}\n+         * @throws IllegalArgumentException if the key is not mappable to a {@code Boolean}\n@@ -658,1 +658,1 @@\n-         * @throws IllegalArgumentException if the mapping exists, but the key is not mapped to a {@code String}\n+         * @throws IllegalArgumentException if the key is not mappable to a {@code String}\n@@ -668,1 +668,1 @@\n-         * @throws IllegalArgumentException if the mapping exists, but the key is not mapped to a {@code Color}\n+         * @throws IllegalArgumentException if the key is not mappable to a {@code Color}\n@@ -678,1 +678,1 @@\n-         * @throws IllegalArgumentException if the mapping exists, but the key is not mapped to a {@code Paint}\n+         * @throws IllegalArgumentException if the key is not mappable to a {@code Paint}\n@@ -690,1 +690,1 @@\n-         * @throws IllegalArgumentException if the mapping exists, but the key is not mapped to a value of type {@code T}\n+         * @throws IllegalArgumentException if the key is not mappable to a value of type {@code T}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.paint.Paint;\n@@ -50,5 +51,37 @@\n-        prefs = new PlatformPreferences(Map.of(\n-            \"test.foregroundColor\", \"foregroundColor\",\n-            \"test.backgroundColor\", \"backgroundColor\",\n-            \"test.accentColor\", \"accentColor\"\n-        ));\n+        prefs = new PlatformPreferences(\n+            \/\/ Well-known platform keys and their associated type\n+            Map.of(\n+                \"test.anInt\", Integer.class,\n+                \"test.aDouble\", Double.class,\n+                \"test.aBoolean\", Boolean.class,\n+                \"test.aString\", String.class,\n+                \"test.aColor\", Color.class,\n+                \"test.aPaint\", Paint.class\n+            ),\n+            \/\/ Platform-specific key mappings\n+            Map.of(\n+                \"test.foregroundColor\", \"foregroundColor\",\n+                \"test.backgroundColor\", \"backgroundColor\",\n+                \"test.accentColor\", \"accentColor\"\n+            ));\n+    }\n+\n+    @Test\n+    void testWellKnownKeyThrowsExceptionWithWrongGetter() {\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getDouble(\"test.anInt\"));\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getInteger(\"test.aDouble\"));\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getString(\"test.aBoolean\"));\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getColor(\"test.aString\"));\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getInteger(\"test.aColor\"));\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getString(\"test.aPaint\"));\n+    }\n+\n+    @Test\n+    void testWellKnownKeyReturnsEmptyValueWhenMappingNotPresent() {\n+        assertEquals(Optional.empty(), prefs.getInteger(\"test.anInt\"));\n+        assertEquals(Optional.empty(), prefs.getDouble(\"test.aDouble\"));\n+        assertEquals(Optional.empty(), prefs.getBoolean(\"test.aBoolean\"));\n+        assertEquals(Optional.empty(), prefs.getString(\"test.aString\"));\n+        assertEquals(Optional.empty(), prefs.getColor(\"test.aColor\"));\n+        assertEquals(Optional.empty(), prefs.getPaint(\"test.aColor\"));\n+        assertEquals(Optional.empty(), prefs.getPaint(\"test.aPaint\"));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":38,"deletions":5,"binary":false,"changes":43,"status":"modified"}]}