{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import javafx.application.Appearance;\n+import javafx.application.ColorScheme;\n@@ -166,2 +166,2 @@\n-    public ReadOnlyObjectProperty<Appearance> appearanceProperty() {\n-        return properties.appearanceProperty();\n+    public ReadOnlyObjectProperty<ColorScheme> colorSchemeProperty() {\n+        return properties.colorSchemeProperty();\n@@ -171,2 +171,2 @@\n-    public Appearance getAppearance() {\n-        return properties.getAppearance();\n+    public ColorScheme getColorScheme() {\n+        return properties.getColorScheme();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import javafx.application.Appearance;\n+import javafx.application.ColorScheme;\n@@ -50,1 +50,1 @@\n-    private final AppearanceProperty appearance = new AppearanceProperty();\n+    private final ColorSchemeProperty colorScheme = new ColorSchemeProperty();\n@@ -57,2 +57,2 @@\n-    public ReadOnlyObjectProperty<Appearance> appearanceProperty() {\n-        return appearance.getReadOnlyProperty();\n+    public ReadOnlyObjectProperty<ColorScheme> colorSchemeProperty() {\n+        return colorScheme.getReadOnlyProperty();\n@@ -61,2 +61,2 @@\n-    public Appearance getAppearance() {\n-        return appearance.get();\n+    public ColorScheme getColorScheme() {\n+        return colorScheme.get();\n@@ -65,2 +65,2 @@\n-    public void setAppearance(Appearance value) {\n-        appearance.setValueOverride(value);\n+    public void setColorScheme(ColorScheme value) {\n+        colorScheme.setValueOverride(value);\n@@ -211,2 +211,2 @@\n-    private class AppearanceProperty extends ReadOnlyObjectWrapper<Appearance> {\n-        private Appearance appearanceOverride;\n+    private class ColorSchemeProperty extends ReadOnlyObjectWrapper<ColorScheme> {\n+        private ColorScheme colorSchemeOverride;\n@@ -214,2 +214,2 @@\n-        AppearanceProperty() {\n-            super(bean, \"appearance\");\n+        ColorSchemeProperty() {\n+            super(bean, \"colorScheme\");\n@@ -222,2 +222,2 @@\n-        public void setValueOverride(Appearance appearance) {\n-            appearanceOverride = appearance;\n+        public void setValueOverride(ColorScheme colorScheme) {\n+            colorSchemeOverride = colorScheme;\n@@ -228,2 +228,2 @@\n-            if (appearanceOverride != null) {\n-                set(appearanceOverride);\n+            if (colorSchemeOverride != null) {\n+                set(colorSchemeOverride);\n@@ -234,1 +234,1 @@\n-                set(isDark ? Appearance.DARK : Appearance.LIGHT);\n+                set(isDark ? ColorScheme.DARK : ColorScheme.LIGHT);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javafx.application;\n-\n-\/**\n- * Defines the appearance of the user interface.\n- *\n- * @see javafx.application.Platform.Preferences#appearanceProperty()\n- * @since 22\n- *\/\n-public enum Appearance {\n-    \/**\n-     * A light appearance uses bright backgrounds and dark text.\n-     *\/\n-    LIGHT,\n-\n-    \/**\n-     * A dark appearance uses dark backgrounds and bright text.\n-     *\/\n-    DARK\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Appearance.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+\/**\n+ * Defines the color scheme of the user interface, which specifies whether applications\n+ * should prefer light text on dark backgrounds, or dark text on light backgrounds.\n+ *\n+ * @see javafx.application.Platform.Preferences#colorSchemeProperty()\n+ * @since 22\n+ *\/\n+public enum ColorScheme {\n+    \/**\n+     * A light color scheme uses bright backgrounds and dark text.\n+     *\/\n+    LIGHT,\n+\n+    \/**\n+     * A dark color scheme uses dark backgrounds and bright text.\n+     *\/\n+    DARK\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/ColorScheme.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -574,4 +574,4 @@\n-         * The platform appearance, which specifies whether applications should use a light\n-         * or dark color scheme. The value of this property is derived from the perceptual\n-         * brightness of {@link #backgroundColorProperty() backgroundColor} in relation to\n-         * {@link #foregroundColorProperty() foregroundColor} and defaults to {@link Appearance#LIGHT}\n+         * The platform color scheme, which specifies whether applications should prefer light text on\n+         * dark backgrounds, or dark text on light backgrounds. The value of this property is derived\n+         * from the perceptual brightness of {@link #backgroundColorProperty() backgroundColor} in relation\n+         * to {@link #foregroundColorProperty() foregroundColor} and defaults to {@link ColorScheme#LIGHT}\n@@ -580,2 +580,2 @@\n-         * @return the {@code appearance} property\n-         * @defaultValue {@link Appearance#LIGHT}\n+         * @return the {@code colorScheme} property\n+         * @defaultValue {@link ColorScheme#LIGHT}\n@@ -583,1 +583,1 @@\n-        ReadOnlyObjectProperty<Appearance> appearanceProperty();\n+        ReadOnlyObjectProperty<ColorScheme> colorSchemeProperty();\n@@ -585,1 +585,1 @@\n-        Appearance getAppearance();\n+        ColorScheme getColorScheme();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-    void testColorPropertyChangesAreAtomicWhenAppearancePropertyIsObserved() {\n+    void testColorPropertyChangesAreAtomicWhenColorSchemePropertyIsObserved() {\n@@ -224,1 +224,1 @@\n-        prefs.appearanceProperty().addListener((observable, oldValue, newValue) -> trace.add(\n+        prefs.colorSchemeProperty().addListener((observable, oldValue, newValue) -> trace.add(\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}