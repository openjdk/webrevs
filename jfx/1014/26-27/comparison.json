{"files":[{"patch":"@@ -792,0 +792,2 @@\n+     * Polymorphic types are supported by specifying the common base type; for example, a key can\n+     * be mapped to {@code Paint.class} to support any type of paint.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-        if (!type.isAssignableFrom(platformType)) {\n+        if (!platformType.isAssignableFrom(type)) {\n@@ -160,3 +160,9 @@\n-        @SuppressWarnings(\"unchecked\")\n-        T v = (T)value;\n-        return Optional.of(v);\n+        if (type.isInstance(value)) {\n+            @SuppressWarnings(\"unchecked\")\n+            T v = (T)value;\n+            return Optional.of(v);\n+        }\n+\n+        throw new IllegalArgumentException(\n+            \"Incompatible types: requested = \" + type.getName() +\n+            \", actual = \" + value.getClass().getName());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import javafx.scene.paint.CycleMethod;\n+import javafx.scene.paint.LinearGradient;\n@@ -88,0 +90,15 @@\n+        assertEquals(Optional.empty(), prefs.getValue(\"test.aPaint\", Color.class));\n+    }\n+\n+    @Test\n+    void testPolymorphicValues() {\n+        prefs.update(Map.of(\"test.aPaint\", Color.RED));\n+        assertEquals(Color.RED, prefs.getColor(\"test.aPaint\").orElseThrow());\n+        assertEquals(Color.RED, prefs.getValue(\"test.aPaint\", Paint.class).orElseThrow());\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getValue(\"test.aPaint\", LinearGradient.class));\n+\n+        var gradient = new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE);\n+        prefs.update(Map.of(\"test.aPaint\", gradient));\n+        assertEquals(gradient, prefs.getValue(\"test.aPaint\", Paint.class).orElseThrow());\n+        assertEquals(gradient, prefs.getValue(\"test.aPaint\", LinearGradient.class).orElseThrow());\n+        assertThrows(IllegalArgumentException.class, () -> prefs.getColor(\"test.aPaint\").orElseThrow());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}