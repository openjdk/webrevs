{"files":[{"patch":"@@ -160,1 +160,3 @@\n-                updateSceneState();\n+                if (host != null) {\n+                    updateSceneState();\n+                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/EmbeddedScene.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.embed.swing;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.embed.swing.JFXPanel;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.stage.Stage;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+public class JFXPanelNPETest implements Thread.UncaughtExceptionHandler {\n+    \/\/ Used to launch the application before running any test\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+    private static CountDownLatch latch = new CountDownLatch(1);\n+    private static Throwable th;\n+    private static JFrame frame;\n+\n+    JFrame jframe;\n+\n+    \/\/ Application class. An instance is created and initialized before running\n+    \/\/ the first test, and it lives through the execution of all tests.\n+    public static class MyApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            Assert.assertTrue(Platform.isFxApplicationThread());\n+            Assert.assertNotNull(primaryStage);\n+\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void doSetupOnce() throws Exception {\n+        Util.launch(launchLatch, MyApp.class);\n+        Assert.assertEquals(0, launchLatch.getCount());\n+    }\n+\n+    @AfterClass\n+    public static void doTeardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @After\n+    public void doCleanup() {\n+        if (frame != null) {\n+            SwingUtilities.invokeLater(() -> frame.dispose());\n+        }\n+    }\n+\n+    @Test\n+    public void testRemoveAddJFXPanel() throws Throwable {\n+\n+        frame = new JFrame(\"FX\");\n+        final JFXPanel fxPanel = new JFXPanel();\n+        \/\/ fxPanel added to frame for the first time\n+        frame.add(fxPanel);\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+\n+        Platform.runLater(() -> {\n+            Scene scene = new Scene(new Button(\"Testbutton\"));\n+            fxPanel.setScene(scene);\n+            Thread.currentThread().setUncaughtExceptionHandler(this);\n+            SwingUtilities.invokeLater(() -> {\n+                \/\/ fxPanel removed from frame\n+                frame.remove(fxPanel);\n+                \/\/ fxPanel added to frame again\n+                frame.add(fxPanel); \/\/ <-- leads to NullPointerException\n+            });\n+        });\n+        latch.await(5, TimeUnit.SECONDS);\n+        System.out.println(\"throwable \" + th);\n+        if (th != null) {\n+            throw th;\n+        }\n+    }\n+\n+    public void uncaughtException(Thread thread, Throwable throwable) {\n+        th = throwable;\n+        latch.countDown();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/JFXPanelNPETest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}