{"files":[{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.scene.control;\n+\n+import javafx.scene.control.Labeled;\n+import com.sun.javafx.util.Utils;\n+\n+\/**\n+ * Labeled Helper.\n+ *\/\n+public class LabeledHelper {\n+    \/** Accessor *\/\n+    public interface Accessor {\n+        \/**\n+         * Returns true when the Labeled must compute the actual content width in computePrefWidth().\n+         * @return whether computePrefWidth() must compute the actual content width\n+         *\/\n+        public boolean isUseContentWidth();\n+    }\n+\n+    private static Accessor accessor;\n+\n+    static {\n+        Utils.forceInit(Labeled.class);\n+    }\n+\n+    private LabeledHelper() {\n+    }\n+\n+    public static void setAccessor(Accessor a) {\n+        accessor = a;\n+    }\n+\n+    \/**\n+     * Returns true when the Labeled must compute the actual content width in computePrefWidth().\n+     * @return whether computePrefWidth() must compute the actual content width\n+     *\/\n+    public static boolean isUseContentWidth() {\n+        return accessor.isUseContentWidth();\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/LabeledHelper.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -28,9 +28,0 @@\n-import com.sun.javafx.css.StyleManager;\n-import com.sun.javafx.scene.NodeHelper;\n-import javafx.css.converter.BooleanConverter;\n-import javafx.css.converter.EnumConverter;\n-import javafx.css.converter.InsetsConverter;\n-import javafx.css.converter.PaintConverter;\n-import javafx.css.converter.SizeConverter;\n-import javafx.css.converter.StringConverter;\n-\n@@ -40,1 +31,2 @@\n-\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.binding.Bindings;\n@@ -44,0 +36,2 @@\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanWrapper;\n@@ -49,0 +43,15 @@\n+import javafx.css.CssMetaData;\n+import javafx.css.FontCssMetaData;\n+import javafx.css.StyleOrigin;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableBooleanProperty;\n+import javafx.css.StyleableDoubleProperty;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.css.StyleableStringProperty;\n+import javafx.css.converter.BooleanConverter;\n+import javafx.css.converter.EnumConverter;\n+import javafx.css.converter.InsetsConverter;\n+import javafx.css.converter.PaintConverter;\n+import javafx.css.converter.SizeConverter;\n+import javafx.css.converter.StringConverter;\n@@ -59,10 +68,3 @@\n-import javafx.beans.DefaultProperty;\n-import javafx.css.CssMetaData;\n-import javafx.css.FontCssMetaData;\n-import javafx.css.StyleOrigin;\n-import javafx.css.Styleable;\n-import javafx.css.StyleableBooleanProperty;\n-import javafx.css.StyleableDoubleProperty;\n-import javafx.css.StyleableObjectProperty;\n-import javafx.css.StyleableProperty;\n-import javafx.css.StyleableStringProperty;\n+import com.sun.javafx.css.StyleManager;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.scene.control.LabeledHelper;\n@@ -99,0 +101,23 @@\n+    \/**\n+     * Setting this flag to true causes\n+     * TableCellSkinBase.computePrefWidth() and\n+     * TreeTableCellSkin.computePrefWidth()\n+     * to compute the actual content width rather than table column width.\n+     * (We should have never used such a logic without exposing the way to obtain\n+     * the content width!).\n+     * It is safe to use a public global flag because:\n+     * a) it's an implementation detail and\n+     * b) we are always in the content of the FX app thread\n+     * This functionality is made separate from Properties.DEFER_TO_PARENT_PREF_WIDTH which\n+     * by itself looks rather weird.\n+     *\/\n+    private static boolean useContentWidth;\n+\n+    static {\n+        LabeledHelper.setAccessor(new LabeledHelper.Accessor() {\n+            @Override\n+            public boolean isUseContentWidth() {\n+                return useContentWidth;\n+            }\n+        });\n+    }\n@@ -821,0 +846,45 @@\n+    \/**\n+     * Indicates whether the text has been truncated\n+     * when it cannot fit into the available width.\n+     * <p>\n+     * When truncated, the {@link #ellipsisStringProperty() ellipsis string}\n+     * gets inserted in the place dictated by the\n+     * {@link #textOverrun} property.\n+     *\n+     * @since 23\n+     *\/\n+    private ReadOnlyBooleanWrapper textTruncated;\n+\n+    public final ReadOnlyBooleanProperty textTruncatedProperty() {\n+        if (textTruncated == null) {\n+            textTruncated = new ReadOnlyBooleanWrapper(this, \"textTruncated\");\n+            textTruncated.bind(\n+                Bindings.createBooleanBinding(() -> {\n+                    \/\/ make sure prefWidth always returns the actual content width\n+                    \/\/ rather than the column width if inside a table\n+                    useContentWidth = true;\n+                    try {\n+                        if (isWrapText()) {\n+                            return (getHeight() < prefHeight(getWidth()));\n+                        }\n+\n+                        return (getWidth() < prefWidth(getHeight()));\n+                    } finally {\n+                        useContentWidth = false;\n+                    }\n+                },\n+                ellipsisStringProperty(),\n+                fontProperty(),\n+                heightProperty(),\n+                textProperty(),\n+                widthProperty(),\n+                wrapTextProperty()\n+            ));\n+        }\n+        return textTruncated.getReadOnlyProperty();\n+    }\n+\n+    public final boolean isTextTruncated() {\n+        return textTruncatedProperty().get();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Labeled.java","additions":90,"deletions":20,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.scene.control.Properties;\n@@ -36,0 +35,2 @@\n+import com.sun.javafx.scene.control.Properties;\n+import com.sun.javafx.scene.control.LabeledHelper;\n@@ -152,2 +153,3 @@\n-    @Override protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {\n-        if (isDeferToParentForPrefWidth) {\n+    @Override\n+    protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {\n+        if (LabeledHelper.isUseContentWidth() || isDeferToParentForPrefWidth) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableCellSkinBase.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n@@ -33,1 +31,10 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import com.sun.javafx.scene.control.LabeledHelper;\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n+import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n@@ -126,1 +133,1 @@\n-        if (isDeferToParentForPrefWidth) {\n+        if (LabeledHelper.isUseContentWidth() || isDeferToParentForPrefWidth) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableCellSkin.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.skin.LabelSkin;\n+import javafx.scene.control.skin.TableCellSkin;\n+import javafx.scene.control.skin.TreeTableCellSkin;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.layout.RegionHelper;\n+import com.sun.javafx.tk.Toolkit;\n+\n+\/**\n+ * Tests textTruncated property of Labeled, using Label, TableCell, and TreeTableCell controls\n+ * (the last two contain conditional code that redirects the execution of computePrefWidth()\n+ * in their skins to different code paths.\n+ *\/\n+public class LabeledTruncatedTest {\n+    private static final String TEXT = \"testing.truncated\";\n+\n+    private void firePulse() {\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    @Test\n+    public void testTruncatedLabel2() {\n+        Label control = new Label();\n+        control.setSkin(new LabelSkin(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    @Test\n+    public void testTruncatedTableCellSkin() {\n+        TableCell<String, String> control = new TableCell<>();\n+        control.setSkin(new TableCellSkin<>(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    @Test\n+    public void testTruncatedTreeTableCellSkin() {\n+        TreeTableCell<String, String> control = new TreeTableCell<>();\n+        control.setSkin(new TreeTableCellSkin<>(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    private void test(Labeled control) {\n+        RegionHelper.setWidth(control, 1000);\n+        firePulse();\n+        double w = control.prefWidth(-1);\n+        double h = control.prefHeight(-1);\n+\n+        assertFalse(control.isTextTruncated());\n+\n+        RegionHelper.setWidth(control, 10);\n+        RegionHelper.setHeight(control, h);\n+        firePulse();\n+\n+        assertTrue(control.isTextTruncated());\n+\n+        control.setWrapText(true);\n+        firePulse();\n+\n+        assertFalse(control.isTextTruncated());\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/LabeledTruncatedTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,8 @@\n+    public static void setWidth(Node node, double width) {\n+        regionAccessor.setWidth(node, width);\n+    }\n+\n+    public static void setHeight(Node node, double height) {\n+        regionAccessor.setHeight(node, height);\n+    }\n+\n@@ -116,0 +124,2 @@\n+        void setWidth(Node node, double width);\n+        void setHeight(Node node, double height);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/RegionHelper.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,0 +184,10 @@\n+\n+            @Override\n+            public void setWidth(Node node, double width) {\n+                ((Region)node).setWidth(width);\n+            }\n+\n+            @Override\n+            public void setHeight(Node node, double height) {\n+                ((Region)node).setHeight(height);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}