{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.scene.control;\n+\n+import javafx.scene.control.Labeled;\n+import com.sun.javafx.util.Utils;\n+\n+\/**\n+ * Labeled Helper.\n+ *\/\n+public class LabeledHelper {\n+    \/** Accessor *\/\n+    public interface Accessor {\n+        \/**\n+         * Sets the text truncated flag.\n+         * @param c the Labeled control\n+         * @param on the value of the text truncated flag\n+         *\/\n+        public void setTextTruncated(Labeled c, boolean on);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    static {\n+        Utils.forceInit(Labeled.class);\n+    }\n+\n+    private LabeledHelper() {\n+    }\n+\n+    public static void setAccessor(Accessor a) {\n+        accessor = a;\n+    }\n+\n+    public static void setTextTruncated(Labeled c, boolean on) {\n+        accessor.setTextTruncated(c, on);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/LabeledHelper.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,13 @@\n-import com.sun.javafx.scene.NodeHelper;\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n-import com.sun.javafx.scene.text.TextLayout;\n-import com.sun.javafx.tk.Toolkit;\n+import static javafx.scene.control.OverrunStyle.CENTER_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.CENTER_WORD_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.CLIP;\n+import static javafx.scene.control.OverrunStyle.ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.LEADING_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.LEADING_WORD_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.WORD_ELLIPSIS;\n+import java.net.URL;\n+import java.text.Bidi;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n@@ -51,3 +60,0 @@\n-import com.sun.javafx.scene.control.ContextMenuContent;\n-import com.sun.javafx.scene.text.FontHelper;\n-import java.net.URL;\n@@ -60,13 +66,6 @@\n-\n-import java.text.Bidi;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.function.Consumer;\n-\n-import static javafx.scene.control.OverrunStyle.CENTER_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.CENTER_WORD_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.CLIP;\n-import static javafx.scene.control.OverrunStyle.ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.LEADING_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.LEADING_WORD_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.WORD_ELLIPSIS;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.scene.control.ContextMenuContent;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import com.sun.javafx.scene.text.FontHelper;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.tk.Toolkit;\n@@ -216,2 +215,8 @@\n-    public static String computeClippedText(Font font, String text, double width,\n-                                     OverrunStyle type, String ellipsisString) {\n+    public static String computeClippedText(\n+        Font font,\n+        String text,\n+        double width,\n+        OverrunStyle type,\n+        String ellipsisString,\n+        AtomicBoolean textTruncated\n+    ) {\n@@ -245,0 +250,1 @@\n+            textTruncated.set(true);\n@@ -285,0 +291,1 @@\n+                        textTruncated.set(true);\n@@ -323,0 +330,1 @@\n+            textTruncated.set(true);\n@@ -393,0 +401,1 @@\n+                textTruncated.set(true);\n@@ -396,0 +405,1 @@\n+                textTruncated.set(true);\n@@ -401,0 +411,1 @@\n+                textTruncated.set(true);\n@@ -417,3 +428,11 @@\n-    public static String computeClippedWrappedText(Font font, String text, double width,\n-                                            double height, double lineSpacing, OverrunStyle truncationStyle,\n-                                            String ellipsisString, TextBoundsType boundsType) {\n+    public static String computeClippedWrappedText(\n+        Font font,\n+        String text,\n+        double width,\n+        double height,\n+        double lineSpacing,\n+        OverrunStyle truncationStyle,\n+        String ellipsisString,\n+        AtomicBoolean textTruncated,\n+        TextBoundsType boundsType\n+    ) {\n@@ -442,1 +461,2 @@\n-            return text; \/\/ RT-30868 - return text, not empty string.\n+            textTruncated.set(true);\n+            return text; \/\/ JDK-8092895 (RT-30868) - return text, not empty string.\n@@ -461,0 +481,1 @@\n+        boolean truncated = false;\n@@ -504,0 +525,1 @@\n+                truncated = true;\n@@ -534,0 +556,1 @@\n+                    truncated = true;\n@@ -548,0 +571,1 @@\n+                    \/\/ should have used StringBuilder\n@@ -549,0 +573,1 @@\n+                    truncated = true;\n@@ -560,0 +585,1 @@\n+                        truncated = true;\n@@ -578,0 +604,1 @@\n+                        truncated = true;\n@@ -589,0 +616,1 @@\n+        textTruncated.set(truncated);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/skin\/Utils.java","additions":55,"deletions":27,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -28,9 +28,0 @@\n-import com.sun.javafx.css.StyleManager;\n-import com.sun.javafx.scene.NodeHelper;\n-import javafx.css.converter.BooleanConverter;\n-import javafx.css.converter.EnumConverter;\n-import javafx.css.converter.InsetsConverter;\n-import javafx.css.converter.PaintConverter;\n-import javafx.css.converter.SizeConverter;\n-import javafx.css.converter.StringConverter;\n-\n@@ -40,1 +31,2 @@\n-\n+import javafx.beans.DefaultProperty;\n+import javafx.beans.binding.Bindings;\n@@ -44,0 +36,2 @@\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanWrapper;\n@@ -49,0 +43,15 @@\n+import javafx.css.CssMetaData;\n+import javafx.css.FontCssMetaData;\n+import javafx.css.StyleOrigin;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableBooleanProperty;\n+import javafx.css.StyleableDoubleProperty;\n+import javafx.css.StyleableObjectProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.css.StyleableStringProperty;\n+import javafx.css.converter.BooleanConverter;\n+import javafx.css.converter.EnumConverter;\n+import javafx.css.converter.InsetsConverter;\n+import javafx.css.converter.PaintConverter;\n+import javafx.css.converter.SizeConverter;\n+import javafx.css.converter.StringConverter;\n@@ -59,10 +68,3 @@\n-import javafx.beans.DefaultProperty;\n-import javafx.css.CssMetaData;\n-import javafx.css.FontCssMetaData;\n-import javafx.css.StyleOrigin;\n-import javafx.css.Styleable;\n-import javafx.css.StyleableBooleanProperty;\n-import javafx.css.StyleableDoubleProperty;\n-import javafx.css.StyleableObjectProperty;\n-import javafx.css.StyleableProperty;\n-import javafx.css.StyleableStringProperty;\n+import com.sun.javafx.css.StyleManager;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.scene.control.LabeledHelper;\n@@ -99,0 +101,8 @@\n+    static {\n+        LabeledHelper.setAccessor(new LabeledHelper.Accessor() {\n+            @Override\n+            public void setTextTruncated(Labeled c, boolean on) {\n+                c.setTextTruncated(on);\n+            }\n+        });\n+    }\n@@ -821,0 +831,31 @@\n+    \/**\n+     * Indicates whether the text has been truncated\n+     * because it cannot fit into the available width.\n+     * <p>\n+     * When truncated, the {@link #ellipsisStringProperty() ellipsisString}\n+     * gets inserted in the place dictated by the\n+     * {@link #textOverrun} property.\n+     *\n+     * @since 23\n+     *\/\n+    private ReadOnlyBooleanWrapper textTruncated;\n+\n+    public final ReadOnlyBooleanProperty textTruncatedProperty() {\n+        return textTruncated().getReadOnlyProperty();\n+    }\n+\n+    public final boolean isTextTruncated() {\n+        return textTruncated().get();\n+    }\n+\n+    private final void setTextTruncated(boolean on) {\n+        textTruncated().set(on);\n+    }\n+\n+    private ReadOnlyBooleanWrapper textTruncated() {\n+        if (textTruncated == null) {\n+            textTruncated = new ReadOnlyBooleanWrapper(this, \"textTruncated\");\n+        }\n+        return textTruncated;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Labeled.java","additions":61,"deletions":20,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -28,3 +28,6 @@\n-import com.sun.javafx.scene.control.LabeledText;\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static javafx.scene.control.ContentDisplay.BOTTOM;\n+import static javafx.scene.control.ContentDisplay.LEFT;\n+import static javafx.scene.control.ContentDisplay.RIGHT;\n+import static javafx.scene.control.ContentDisplay.TOP;\n+import static javafx.scene.control.OverrunStyle.CLIP;\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -54,6 +57,4 @@\n-\n-import static javafx.scene.control.ContentDisplay.BOTTOM;\n-import static javafx.scene.control.ContentDisplay.LEFT;\n-import static javafx.scene.control.ContentDisplay.RIGHT;\n-import static javafx.scene.control.ContentDisplay.TOP;\n-import static javafx.scene.control.OverrunStyle.CLIP;\n+import com.sun.javafx.scene.control.LabeledHelper;\n+import com.sun.javafx.scene.control.LabeledText;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import com.sun.javafx.scene.control.skin.Utils;\n@@ -136,0 +137,1 @@\n+    private final AtomicBoolean textTruncated = new AtomicBoolean();\n@@ -960,0 +962,1 @@\n+        textTruncated.set(false);\n@@ -1105,1 +1108,11 @@\n-                result = Utils.computeClippedWrappedText(font, cleanText, wrapWidth, wrapHeight, labeled.getLineSpacing(), truncationStyle, ellipsisString, text.getBoundsType());\n+                result = Utils.computeClippedWrappedText(\n+                    font,\n+                    cleanText,\n+                    wrapWidth,\n+                    wrapHeight,\n+                    labeled.getLineSpacing(),\n+                    truncationStyle,\n+                    ellipsisString,\n+                    textTruncated,\n+                    text.getBoundsType()\n+                );\n@@ -1111,1 +1124,8 @@\n-                    sb.append(Utils.computeClippedText(font, splits[i], wrapWidth, truncationStyle, ellipsisString));\n+                    sb.append(Utils.computeClippedText(\n+                        font,\n+                        splits[i],\n+                        wrapWidth,\n+                        truncationStyle,\n+                        ellipsisString,\n+                        textTruncated\n+                    ));\n@@ -1137,1 +1157,1 @@\n-                result = Utils.computeClippedText(font, cleanText, wrapWidth, truncationStyle, ellipsisString);\n+                result = Utils.computeClippedText(font, cleanText, wrapWidth, truncationStyle, ellipsisString, textTruncated);\n@@ -1147,0 +1167,1 @@\n+            LabeledHelper.setTextTruncated(getSkinnable(), textTruncated.get());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/LabeledSkinBase.java","additions":33,"deletions":12,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -19,0 +19,1 @@\n+--add-exports javafx.graphics\/com.sun.javafx.scene.layout=ALL-UNNAMED\n","filename":"modules\/javafx.controls\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.skin.ButtonSkin;\n+import javafx.scene.control.skin.LabelSkin;\n+import javafx.scene.control.skin.LabeledSkinBase;\n+import javafx.scene.control.skin.LabeledSkinBaseShim;\n+import javafx.scene.control.skin.TableCellSkin;\n+import javafx.scene.control.skin.TreeTableCellSkin;\n+import javafx.scene.layout.RegionShim;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.tk.Toolkit;\n+\n+\/**\n+ * Tests textTruncated property of Labeled, using Label, TableCell, and TreeTableCell controls\n+ * (the last two contain conditional code that redirects the execution of computePrefWidth())\n+ * in their skins to different code paths.\n+ *\/\n+public class LabeledTruncatedTest {\n+    private static final String TEXT = \"testing.truncated\";\n+\n+    private void firePulse() {\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    @Test\n+    public void testTruncatedLabel() {\n+        Label control = new Label();\n+        control.setSkin(new LabelSkin(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    @Test\n+    public void testTruncatedButton() {\n+        Button control = new Button();\n+        control.setSkin(new ButtonSkin(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    @Test\n+    public void testTruncatedTableCellSkin() {\n+        TableCell<String, String> control = new TableCell<>();\n+        control.setSkin(new TableCellSkin<>(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    @Test\n+    public void testTruncatedTreeTableCellSkin() {\n+        TreeTableCell<String, String> control = new TreeTableCell<>();\n+        control.setSkin(new TreeTableCellSkin<>(control));\n+        control.setText(TEXT);\n+        test(control);\n+    }\n+\n+    private void test(Labeled control) {\n+        RegionShim.setWidth(control, 1000);\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n+        firePulse();\n+        double h = control.prefHeight(-1);\n+\n+        assertFalse(control.isTextTruncated());\n+\n+        RegionShim.setWidth(control, 10);\n+        RegionShim.setHeight(control, h);\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n+        firePulse();\n+\n+        assertTrue(control.isTextTruncated());\n+\n+        control.setWrapText(true);\n+        RegionShim.setWidth(control, 40);\n+        RegionShim.setHeight(control, 10000);\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n+        firePulse();\n+\n+        assertFalse(control.isTextTruncated());\n+\n+        RegionShim.setHeight(control, 2);\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n+        firePulse();\n+\n+        assertTrue(control.isTextTruncated());\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/LabeledTruncatedTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -161,0 +161,8 @@\n+    public static void setWidth(Region r, double width) {\n+        r.setWidth(width);\n+    }\n+\n+    public static void setHeight(Region r, double height) {\n+        r.setHeight(height);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/scene\/layout\/RegionShim.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}