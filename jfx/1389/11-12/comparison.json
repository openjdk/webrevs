{"files":[{"patch":"@@ -37,4 +37,3 @@\n-         * Determines whether {@code computePrefWidth()} must compute the actual content width,\n-         * or the width of the table header.\n-         * @param c the instance of Labeled\n-         * @return true to use the actual content width, false to delegate to the parent\n+         * Sets the text truncated flag. \n+         * @param c the Labeled control\n+         * @param on the value of the text truncated flag\n@@ -42,1 +41,1 @@\n-        public boolean isUseActualContentWidth(Labeled c);\n+        public void setTextTruncated(Labeled c, boolean on);\n@@ -58,8 +57,2 @@\n-    \/**\n-     * Determines whether {@code computePrefWidth()} must compute the actual content width,\n-     * or the width of the table header.\n-     * @param c the instance of Labeled\n-     * @return true to use the actual content width, false to delegate to the parent\n-     *\/\n-    public static boolean isUseActualContentWidth(Labeled c) {\n-        return accessor.isUseActualContentWidth(c);\n+    public static void setTextTruncated(Labeled c, boolean on) {\n+        accessor.setTextTruncated(c, on);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/LabeledHelper.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,13 @@\n-import com.sun.javafx.scene.NodeHelper;\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n-import com.sun.javafx.scene.text.TextLayout;\n-import com.sun.javafx.tk.Toolkit;\n+import static javafx.scene.control.OverrunStyle.CENTER_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.CENTER_WORD_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.CLIP;\n+import static javafx.scene.control.OverrunStyle.ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.LEADING_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.LEADING_WORD_ELLIPSIS;\n+import static javafx.scene.control.OverrunStyle.WORD_ELLIPSIS;\n+import java.net.URL;\n+import java.text.Bidi;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n@@ -51,3 +60,0 @@\n-import com.sun.javafx.scene.control.ContextMenuContent;\n-import com.sun.javafx.scene.text.FontHelper;\n-import java.net.URL;\n@@ -60,13 +66,6 @@\n-\n-import java.text.Bidi;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.function.Consumer;\n-\n-import static javafx.scene.control.OverrunStyle.CENTER_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.CENTER_WORD_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.CLIP;\n-import static javafx.scene.control.OverrunStyle.ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.LEADING_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.LEADING_WORD_ELLIPSIS;\n-import static javafx.scene.control.OverrunStyle.WORD_ELLIPSIS;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.scene.control.ContextMenuContent;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import com.sun.javafx.scene.text.FontHelper;\n+import com.sun.javafx.scene.text.TextLayout;\n+import com.sun.javafx.tk.Toolkit;\n@@ -216,2 +215,8 @@\n-    public static String computeClippedText(Font font, String text, double width,\n-                                     OverrunStyle type, String ellipsisString) {\n+    public static String computeClippedText(\n+        Font font,\n+        String text,\n+        double width,\n+        OverrunStyle type,\n+        String ellipsisString,\n+        AtomicBoolean textTruncated\n+    ) {\n@@ -245,0 +250,1 @@\n+            textTruncated.set(true);\n@@ -285,0 +291,1 @@\n+                        textTruncated.set(true);\n@@ -323,0 +330,1 @@\n+            textTruncated.set(true);\n@@ -393,0 +401,1 @@\n+                textTruncated.set(true);\n@@ -396,0 +405,1 @@\n+                textTruncated.set(true);\n@@ -401,0 +411,1 @@\n+                textTruncated.set(true);\n@@ -417,3 +428,11 @@\n-    public static String computeClippedWrappedText(Font font, String text, double width,\n-                                            double height, double lineSpacing, OverrunStyle truncationStyle,\n-                                            String ellipsisString, TextBoundsType boundsType) {\n+    public static String computeClippedWrappedText(\n+        Font font,\n+        String text,\n+        double width,\n+        double height,\n+        double lineSpacing,\n+        OverrunStyle truncationStyle,\n+        String ellipsisString,\n+        AtomicBoolean textTruncated,\n+        TextBoundsType boundsType\n+    ) {\n@@ -442,1 +461,2 @@\n-            return text; \/\/ RT-30868 - return text, not empty string.\n+            textTruncated.set(true);\n+            return text; \/\/ JDK-8092895 (RT-30868) - return text, not empty string.\n@@ -461,0 +481,1 @@\n+        boolean truncated = false;\n@@ -504,0 +525,1 @@\n+                truncated = true;\n@@ -534,0 +556,1 @@\n+                    truncated = true;\n@@ -548,0 +571,1 @@\n+                    \/\/ should have used StringBuilder\n@@ -549,0 +573,1 @@\n+                    truncated = true;\n@@ -560,0 +585,1 @@\n+                        truncated = true;\n@@ -578,0 +604,1 @@\n+                        truncated = true;\n@@ -589,0 +616,1 @@\n+        textTruncated.set(truncated);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/skin\/Utils.java","additions":55,"deletions":27,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-    private static final Object PROP_USE_ACTUAL_CONTENT_WIDTH = new Object();\n@@ -105,2 +104,2 @@\n-            public boolean isUseActualContentWidth(Labeled c) {\n-                return c.isUseActualContentWidth();\n+            public void setTextTruncated(Labeled c, boolean on) {\n+                c.setTextTruncated(on);\n@@ -845,26 +844,1 @@\n-        if (textTruncated == null) {\n-            textTruncated = new ReadOnlyBooleanWrapper(this, \"textTruncated\");\n-            textTruncated.bind(\n-                Bindings.createBooleanBinding(() -> {\n-                    \/\/ make sure prefWidth always returns the actual content width\n-                    \/\/ rather than the column width if inside a table\n-                    setUseActualContentWidth(true);\n-                    try {\n-                        if (isWrapText()) {\n-                            return (getHeight() < prefHeight(getWidth()));\n-                        }\n-\n-                        return (getWidth() < prefWidth(getHeight()));\n-                    } finally {\n-                        setUseActualContentWidth(false);\n-                    }\n-                },\n-                ellipsisStringProperty(),\n-                fontProperty(),\n-                heightProperty(),\n-                textProperty(),\n-                widthProperty(),\n-                wrapTextProperty()\n-            ));\n-        }\n-        return textTruncated.getReadOnlyProperty();\n+        return textTruncated().getReadOnlyProperty();\n@@ -874,1 +848,1 @@\n-        return textTruncatedProperty().get();\n+        return textTruncated().get();\n@@ -877,6 +851,2 @@\n-    private void setUseActualContentWidth(boolean on) {\n-        if (on) {\n-            getProperties().put(PROP_USE_ACTUAL_CONTENT_WIDTH, Boolean.TRUE);\n-        } else {\n-            getProperties().remove(PROP_USE_ACTUAL_CONTENT_WIDTH);\n-        }\n+    private final void setTextTruncated(boolean on) {\n+        textTruncated().set(on);\n@@ -885,2 +855,5 @@\n-    private boolean isUseActualContentWidth() {\n-        return Boolean.TRUE.equals(getProperties().get(PROP_USE_ACTUAL_CONTENT_WIDTH));\n+    private ReadOnlyBooleanWrapper textTruncated() {\n+        if (textTruncated == null) {\n+            textTruncated = new ReadOnlyBooleanWrapper(this, \"textTruncated\");\n+        }\n+        return textTruncated;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Labeled.java","additions":11,"deletions":38,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,3 +28,6 @@\n-import com.sun.javafx.scene.control.LabeledText;\n-import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static javafx.scene.control.ContentDisplay.BOTTOM;\n+import static javafx.scene.control.ContentDisplay.LEFT;\n+import static javafx.scene.control.ContentDisplay.RIGHT;\n+import static javafx.scene.control.ContentDisplay.TOP;\n+import static javafx.scene.control.OverrunStyle.CLIP;\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -54,6 +57,4 @@\n-\n-import static javafx.scene.control.ContentDisplay.BOTTOM;\n-import static javafx.scene.control.ContentDisplay.LEFT;\n-import static javafx.scene.control.ContentDisplay.RIGHT;\n-import static javafx.scene.control.ContentDisplay.TOP;\n-import static javafx.scene.control.OverrunStyle.CLIP;\n+import com.sun.javafx.scene.control.LabeledHelper;\n+import com.sun.javafx.scene.control.LabeledText;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import com.sun.javafx.scene.control.skin.Utils;\n@@ -136,0 +137,1 @@\n+    private final AtomicBoolean textTruncated = new AtomicBoolean();\n@@ -960,0 +962,1 @@\n+        textTruncated.set(false);\n@@ -1105,1 +1108,11 @@\n-                result = Utils.computeClippedWrappedText(font, cleanText, wrapWidth, wrapHeight, labeled.getLineSpacing(), truncationStyle, ellipsisString, text.getBoundsType());\n+                result = Utils.computeClippedWrappedText(\n+                    font,\n+                    cleanText,\n+                    wrapWidth,\n+                    wrapHeight,\n+                    labeled.getLineSpacing(),\n+                    truncationStyle,\n+                    ellipsisString,\n+                    textTruncated,\n+                    text.getBoundsType()\n+                );\n@@ -1111,1 +1124,8 @@\n-                    sb.append(Utils.computeClippedText(font, splits[i], wrapWidth, truncationStyle, ellipsisString));\n+                    sb.append(Utils.computeClippedText(\n+                        font,\n+                        splits[i],\n+                        wrapWidth,\n+                        truncationStyle,\n+                        ellipsisString,\n+                        textTruncated\n+                    ));\n@@ -1137,1 +1157,1 @@\n-                result = Utils.computeClippedText(font, cleanText, wrapWidth, truncationStyle, ellipsisString);\n+                result = Utils.computeClippedText(font, cleanText, wrapWidth, truncationStyle, ellipsisString, textTruncated);\n@@ -1147,0 +1167,1 @@\n+            LabeledHelper.setTextTruncated(getSkinnable(), textTruncated.get());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/LabeledSkinBase.java","additions":33,"deletions":12,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.scene.control.Properties;\n@@ -35,2 +36,0 @@\n-import com.sun.javafx.scene.control.Properties;\n-import com.sun.javafx.scene.control.LabeledHelper;\n@@ -153,3 +152,2 @@\n-    @Override\n-    protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {\n-        if (LabeledHelper.isUseActualContentWidth(getSkinnable()) || isDeferToParentForPrefWidth) {\n+    @Override protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {\n+        if (isDeferToParentForPrefWidth) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableCellSkinBase.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n+import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n@@ -31,10 +33,1 @@\n-import javafx.scene.control.Control;\n-import javafx.scene.control.TableColumnBase;\n-import javafx.scene.control.TreeItem;\n-import javafx.scene.control.TreeTableCell;\n-import javafx.scene.control.TreeTableColumn;\n-import javafx.scene.control.TreeTableRow;\n-import javafx.scene.control.TreeTableView;\n-import com.sun.javafx.scene.control.LabeledHelper;\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n+import javafx.scene.control.*;\n@@ -133,1 +126,1 @@\n-        if (LabeledHelper.isUseActualContentWidth(getSkinnable()) || isDeferToParentForPrefWidth) {\n+        if (isDeferToParentForPrefWidth) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableCellSkin.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import javafx.scene.control.skin.LabeledSkinBase;\n+import javafx.scene.control.skin.LabeledSkinBaseShim;\n@@ -88,0 +90,1 @@\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n@@ -89,1 +92,0 @@\n-        double w = control.prefWidth(-1);\n@@ -96,0 +98,1 @@\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n@@ -101,0 +104,3 @@\n+        RegionShim.setWidth(control, 40);\n+        RegionShim.setHeight(control, 10000);\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n@@ -106,0 +112,1 @@\n+        LabeledSkinBaseShim.updateDisplayedText((LabeledSkinBase)control.getSkin());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/LabeledTruncatedTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}