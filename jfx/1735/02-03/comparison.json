{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +76,7 @@\n-            boolean div = ((a != null) && (!a.isEmpty()));\n-            if (div) {\n+            String styles;\n+            if ((a != null) && (!a.isEmpty())) {\n+                styles = extractStyles(a);\n+            } else {\n+                styles = null;\n+            }\n+            if (styles != null) {\n@@ -79,1 +84,1 @@\n-                writeAttributes(a);\n+                wr.write(styles);\n@@ -85,1 +90,1 @@\n-            if (div) {\n+            if (styles != null) {\n@@ -96,1 +101,2 @@\n-    private void writeAttributes(StyleAttributeMap attrs) throws IOException {\n+    private String extractStyles(StyleAttributeMap attrs) {\n+        StringBuilder sb = new StringBuilder();\n@@ -104,1 +110,1 @@\n-                        wr.write(' ');\n+                        sb.append(' ');\n@@ -110,4 +116,6 @@\n-                    if (inlineStyles) {\n-                        wr.write(val.css);\n-                    } else {\n-                        wr.write(val.name);\n+                    if (val != null) {\n+                        if (inlineStyles) {\n+                            sb.append(val.css);\n+                        } else {\n+                            sb.append(val.name);\n+                        }\n@@ -118,0 +126,4 @@\n+        if (sb.length() == 0) {\n+            return null;\n+        }\n+        return sb.toString();\n@@ -313,1 +325,1 @@\n-            return \"font-weight: bold;\";\n+            return Boolean.TRUE.equals(v) ? \"font-weight: bold;\" : null;\n@@ -317,1 +329,1 @@\n-            return \"font-size: \" + v + \"pt;\";\n+            return \"font-size: \" + v + \"px;\";\n@@ -319,2 +331,2 @@\n-            return \"font-style: italic;\";\n-        } else if (a == StyleAttributeMap.STRIKE_THROUGH) {\n+            return Boolean.TRUE.equals(v) ? \"font-style: italic;\" : null;\n+        } else if (a == StyleAttributeMap.STRIKE_THROUGH && Boolean.TRUE.equals(v)) {\n@@ -325,1 +337,1 @@\n-            return \"text-decoration: underline;\";\n+            return Boolean.TRUE.equals(v) ? \"text-decoration: underline;\" : null;\n@@ -327,1 +339,1 @@\n-            return \"text-decoration: line-through underline;\";\n+            return Boolean.TRUE.equals(v) ? \"text-decoration: line-through underline;\" : null;\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/HtmlStyledOutput.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1233,0 +1233,1 @@\n+                    e.printStackTrace();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.jfx.incubator.scene.control.richtext.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import javafx.scene.input.DataFormat;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import jfx.incubator.scene.control.richtext.TextPos;\n+import jfx.incubator.scene.control.richtext.model.DataFormatHandler;\n+import jfx.incubator.scene.control.richtext.model.RichTextModel;\n+import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n+import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n+\n+\/**\n+ * Tests RichTextModel -> HTML export.\n+ *\/\n+public class HTMLExportTest {\n+    private RichTextModel model;\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        model = new RichTextModel();\n+    }\n+\n+    @Test\n+    public void characterAttributes() throws Exception {\n+        model.replace(null, TextPos.ZERO, TextPos.ZERO, \"111\\n\", false);\n+        check(\n+            \"\"\"\n+            <html>\n+            <head>\n+            <meta charset=\"utf-8\">\n+            <\/head>\n+            <body>\n+            111<p\/>\n+\n+            <\/body><\/html>\n+            \"\"\");\n+\n+        \/\/ bold\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.BOLD, Boolean.TRUE), false);\n+        checkContains(\"<span style='font-weight: bold;'>1<\/span>11<p\/>\");\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.BOLD, Boolean.FALSE), false);\n+        checkContains(\"111<p\/>\");\n+        \/\/ italic\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.ITALIC, Boolean.TRUE), false);\n+        checkContains(\"<span style='font-style: italic;'>1<\/span>11<p\/>\");\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.ITALIC, Boolean.FALSE), false);\n+        checkContains(\"111<p\/>\");\n+        \/\/ strikethrough\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.STRIKE_THROUGH, Boolean.TRUE), false);\n+        checkContains(\"<span style='text-decoration: line-through;'>1<\/span>11<p\/>\");\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE), false);\n+        checkContains(\"111<p\/>\");\n+        \/\/ underline\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.UNDERLINE, Boolean.TRUE), false);\n+        checkContains(\"<span style='text-decoration: underline;'>1<\/span>11<p\/>\");\n+        model.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), mk(StyleAttributeMap.UNDERLINE, Boolean.FALSE), false);\n+        checkContains(\"111<p\/>\");\n+    }\n+\n+    private String toHtml() throws Exception {\n+        DataFormatHandler h = model.getDataFormatHandler(DataFormat.HTML, true);\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        h.save(model, null, TextPos.ZERO, model.getDocumentEnd(), out);\n+        byte[] b = out.toByteArray();\n+        return new String(b, StandardCharsets.UTF_8);\n+    }\n+\n+    private static <T> StyleAttributeMap mk(StyleAttribute<T> attr, T value) {\n+        return StyleAttributeMap.builder().set(attr, value).build();\n+    }\n+\n+    private void check(String expected) throws Exception {\n+        String html = toHtml();\n+        assertEquals(expected, html);\n+    }\n+\n+    private void checkContains(String pattern) throws Exception {\n+        String html = toHtml();\n+        assertTrue(html.contains(pattern), html);\n+    }\n+}\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/HTMLExportTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}