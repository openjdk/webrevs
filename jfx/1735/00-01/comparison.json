{"files":[{"patch":"@@ -44,0 +44,1 @@\n+        addAttributes(a);\n@@ -87,1 +88,2 @@\n-        return StyleAttributeMap.builder().\n+        StyleAttributeMap.Builder b = StyleAttributeMap.builder();\n+        b.\n@@ -90,1 +92,0 @@\n-            setFontSize(getDouble(StyleAttributeMap.FONT_SIZE)).\n@@ -92,0 +93,1 @@\n+            setStrikeThrough(getBoolean(StyleAttributeMap.STRIKE_THROUGH)).\n@@ -93,2 +95,6 @@\n-            setUnderline(getBoolean(StyleAttributeMap.UNDERLINE)).\n-            build();\n+            setUnderline(getBoolean(StyleAttributeMap.UNDERLINE));\n+        Double d = getDouble(StyleAttributeMap.FONT_SIZE);\n+        if (d != null) {\n+            b.setFontSize(d);\n+        }\n+        return b.build();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/rtf\/AttrSet.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.jfx.incubator.scene.control.richtext.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.io.ByteArrayInputStream;\n+import java.nio.charset.StandardCharsets;\n+import javafx.scene.input.DataFormat;\n+import javafx.scene.paint.Color;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import jfx.incubator.scene.control.richtext.TextPos;\n+import jfx.incubator.scene.control.richtext.model.RichTextModel;\n+import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n+import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n+\n+\/**\n+ * Tests RTF Import in RichTextModel.\n+ *\/\n+public class RTFImportTest {\n+    private RichTextModel model;\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        model = new RichTextModel();\n+    }\n+\n+    @Test\n+    public void characterAttributes() throws Exception {\n+        initModel(\n+            \"\"\"\n+            {\/rtf1\/ansi\/ansicpg1252\/cocoartf2821\n+            \/cocoatextscaling0\/cocoaplatform0{\/fonttbl\/f0\/fswiss\/fcharset0 Helvetica-Bold;\/f1\/fswiss\/fcharset0 Helvetica;\/f2\/fswiss\/fcharset0 ArialMT;\n+            \/f3\/fswiss\/fcharset0 Helvetica-Oblique;}\n+            {\/colortbl;\/red255\/green255\/blue255;\/red0\/green0\/blue0;\/red251\/green0\/blue7;}\n+            {\/*\/expandedcolortbl;;\/cssrgb\/c0\/c0\/c0;\/cssrgb\/c100000\/c0\/c0;}\n+            \/margl1440\/margr1440\/vieww11520\/viewh9000\/viewkind0\n+            \/deftab720\n+            \/pard\/pardeftab720\/partightenfactor0\n+\n+            \/f0\/b\/fs24 \/cf2 \/expnd0\/expndtw0\/kerning0\n+            bold\n+            \/f1\/b0 \/\n+\n+            \/f2\/fs36 font\n+            \/f1\/fs24 \/\n+            \/pard\/pardeftab720\/partightenfactor0\n+\n+            \/f3\/i \/cf2 italic\n+            \/f1\/i0 \/\n+            \/pard\/pardeftab720\/partightenfactor0\n+            \/cf2 \/strike \/strikec2 strikethrough\/strike0\/striked0 \/\n+            \/pard\/pardeftab720\/partightenfactor0\n+            \/cf3 text color\/cf2 \/\n+            \/pard\/pardeftab720\/sl398\/sa213\/partightenfactor0\n+            \/cf2 \/ul \/ulc2 underline\/ulnone \/\n+            }\n+            \"\"\");\n+\n+        assertEquals(7, model.size());\n+        \/\/ bold\n+        int ix = 0;\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.TRUE);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.FALSE);\n+        ix++;\n+        \/\/ font\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.FONT_FAMILY, \"ArialMT\");\n+        checkCharAttr(ix, StyleAttributeMap.FONT_SIZE, 18.0);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.FALSE);\n+        ix++;\n+        \/\/ italic\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.TRUE);\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.FALSE);\n+        ix++;\n+        \/\/ strikethrough\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.TRUE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.FALSE);\n+        ix++;\n+        \/\/ text color\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.TEXT_COLOR, Color.rgb(251, 0, 7));\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.FALSE);\n+        ix++;\n+        \/\/ underline\n+        checkCharAttr(ix, StyleAttributeMap.BOLD, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.ITALIC, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.STRIKE_THROUGH, Boolean.FALSE);\n+        checkCharAttr(ix, StyleAttributeMap.UNDERLINE, Boolean.TRUE);\n+    }\n+\n+    @Test\n+    public void paragraphAttributes() throws Exception {\n+        \/\/ TODO\n+        \/\/ background color\n+        \/\/ bullet point\n+        \/\/ first line indent\n+        \/\/ line spacing\n+        \/\/ paragraph direction\n+        \/\/ space (above | below | left | right)\n+        \/\/ text alignment\n+    }\n+\n+    private <T> void checkCharAttr(int paragraphIndex, StyleAttribute<T> attribute, T value) {\n+        TextPos end = model.getEndOfParagraphTextPos(paragraphIndex);\n+        TextPos p = TextPos.ofLeading(paragraphIndex, end.charIndex() \/ 2);\n+        StyleAttributeMap attrs = model.getStyleAttributeMap(null, p);\n+\n+        assertEquals(value, attrs.get(attribute));\n+    }\n+\n+    private void initModel(String mangledRTF) throws Exception {\n+        \/\/ demangle to RTF (replace \/ with \\ characters)\n+        String rtf = mangledRTF.replace('\/', '\\\\');\n+        ByteArrayInputStream in = new ByteArrayInputStream(rtf.getBytes(StandardCharsets.US_ASCII));\n+        model.read(null, DataFormat.RTF, in);\n+    }\n+}\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/RTFImportTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"}]}