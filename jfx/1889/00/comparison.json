{"files":[{"patch":"@@ -318,4 +318,6 @@\n-            HandleMoveEvent(NULL);\n-            HandleSizeEvent(com_sun_glass_events_WindowEvent_RESIZE, NULL);\n-            \/\/ The call below may be restricted to WS_POPUP windows\n-            NotifyViewSize(GetHWND());\n+            if (!::IsIconic(GetHWND())) {\n+                HandleMoveEvent(NULL);\n+                HandleSizeEvent(com_sun_glass_events_WindowEvent_RESIZE, NULL);\n+                \/\/ The call below may be restricted to WS_POPUP windows\n+                NotifyViewSize(GetHWND());\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import javafx.application.Platform;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class HideIconifiedTest {\n+\n+    private static final int STAGE_WIDTH = 400;\n+    private static final int STAGE_HEIGHT = 350;\n+    private static final int STAGE_X = 150;\n+    private static final int STAGE_Y = 200;\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static volatile Stage stage;\n+\n+    @BeforeAll\n+    static void initFX() throws Exception {\n+        Platform.setImplicitExit(false);\n+        Util.startup(startupLatch, startupLatch::countDown);\n+    }\n+\n+    @AfterAll\n+    static void teardown() {\n+        Util.shutdown();\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        Util.runAndWait(() -> {\n+            if (stage != null) {\n+                stage.hide();\n+                stage = null;\n+            }\n+        });\n+    }\n+\n+    private void assertStageProperties() {\n+        assertEquals(STAGE_WIDTH, stage.getWidth(), 0.1, \"Stage width changed\");\n+        assertEquals(STAGE_HEIGHT, stage.getHeight(), 0.1, \"Stage height changed\");\n+        assertEquals(STAGE_X, stage.getX(), 0.1, \"Stage x position changed\");\n+        assertEquals(STAGE_Y, stage.getY(), 0.1, \"Stage y position changed\");\n+    }\n+\n+    private void createAndShowStage(StageStyle stageStyle) {\n+        Util.runAndWait(() -> {\n+            stage = new Stage();\n+            stage.initStyle(stageStyle);\n+            stage.setWidth(STAGE_WIDTH);\n+            stage.setHeight(STAGE_HEIGHT);\n+            stage.setX(STAGE_X);\n+            stage.setY(STAGE_Y);\n+            stage.show();\n+            stage.setIconified(true);\n+            stage.hide();\n+        });\n+\n+        \/\/ We're not waiting for the stage to be iconified since that's\n+        \/\/ a synchronous operation. But on some systems OS notifications\n+        \/\/ arrive later so we wait for them.\n+        Util.sleep(100);\n+        assertStageProperties();\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(names = { \"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"EXTENDED\" })\n+    void hideWhileIconifiedThenShow(StageStyle stageStyle) {\n+        createAndShowStage(stageStyle);\n+\n+        Util.runAndWait(() -> {\n+            stage.show();\n+            stage.setIconified(false);\n+        });\n+        Util.sleep(100);\n+        assertStageProperties();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/HideIconifiedTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}