{"files":[{"patch":"@@ -176,1 +176,1 @@\n-                doSelect(e.getX(), e.getY(), e.getButton(), e.getClickCount(),\n+                doSelect(e, e.getX(), e.getY(), e.getButton(), e.getClickCount(),\n@@ -185,1 +185,1 @@\n-            doSelect(e.getX(), e.getY(), e.getButton(), e.getClickCount(),\n+            doSelect(e, e.getX(), e.getY(), e.getButton(), e.getClickCount(),\n@@ -202,1 +202,1 @@\n-    protected void doSelect(final double x, final double y, final MouseButton button,\n+    protected void doSelect(MouseEvent e, final double x, final double y, final MouseButton button,\n@@ -246,1 +246,1 @@\n-                simpleSelect(button, clickCount, shortcutDown);\n+                simpleSelect(e, button, clickCount, shortcutDown);\n@@ -266,1 +266,1 @@\n-                    simpleSelect(button, clickCount, shortcutDown);\n+                    simpleSelect(e, button, clickCount, shortcutDown);\n@@ -272,1 +272,1 @@\n-    protected void simpleSelect(MouseButton button, int clickCount, boolean shortcutDown) {\n+    protected void simpleSelect(MouseEvent e, MouseButton button, int clickCount, boolean shortcutDown) {\n@@ -291,1 +291,4 @@\n-        handleClicks(button, clickCount, isAlreadySelected);\n+        \/\/ Consume the event if we handled the click.\n+        if (handleClicks(button, clickCount, isAlreadySelected)) {\n+            e.consume();\n+        }\n@@ -294,1 +297,1 @@\n-    protected void handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n+    protected boolean handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n@@ -299,0 +302,1 @@\n+                return true;\n@@ -300,1 +304,1 @@\n-                \/\/ cancel editing\n+                \/\/ stop editing\n@@ -302,0 +306,1 @@\n+                return true;\n@@ -304,0 +309,1 @@\n+                return true;\n@@ -306,0 +312,1 @@\n+        return false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/CellBehaviorBase.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -98,1 +99,1 @@\n-    protected void doSelect(final double x, final double y, final MouseButton button,\n+    protected void doSelect(MouseEvent e, final double x, final double y, final MouseButton button,\n@@ -149,1 +150,1 @@\n-                simpleSelect(button, clickCount, shortcutDown);\n+                simpleSelect(e, button, clickCount, shortcutDown);\n@@ -198,1 +199,1 @@\n-                    simpleSelect(button, clickCount, shortcutDown);\n+                    simpleSelect(e, button, clickCount, shortcutDown);\n@@ -205,1 +206,1 @@\n-    protected void simpleSelect(MouseButton button, int clickCount, boolean shortcutDown) {\n+    protected void simpleSelect(MouseEvent e, MouseButton button, int clickCount, boolean shortcutDown) {\n@@ -226,1 +227,4 @@\n-        handleClicks(button, clickCount, isAlreadySelected);\n+        \/\/ Consume the event if we handled the click.\n+        if (handleClicks(button, clickCount, isAlreadySelected)) {\n+            e.consume();\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableCellBehaviorBase.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    @Override protected void doSelect(final double x, final double y, final MouseButton button,\n+    @Override protected void doSelect(MouseEvent e, final double x, final double y, final MouseButton button,\n@@ -115,1 +115,1 @@\n-                    simpleSelect(button, clickCount, shortcutDown);\n+                    simpleSelect(e, button, clickCount, shortcutDown);\n@@ -119,1 +119,1 @@\n-            simpleSelect(button, clickCount, shortcutDown);\n+            simpleSelect(e, button, clickCount, shortcutDown);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableRowBehaviorBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -78,1 +79,1 @@\n-    protected void handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n+    protected boolean handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n@@ -84,0 +85,1 @@\n+                return true;\n@@ -85,1 +87,1 @@\n-                \/\/ cancel editing\n+                \/\/ stop editing\n@@ -87,0 +89,1 @@\n+                return true;\n@@ -90,0 +93,1 @@\n+                return true;\n@@ -95,0 +99,1 @@\n+        return false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeCellBehavior.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -143,1 +144,1 @@\n-    protected void handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n+    protected boolean handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n@@ -149,0 +150,1 @@\n+                return true;\n@@ -150,1 +152,1 @@\n-                \/\/ cancel editing\n+                \/\/ stop editing\n@@ -152,0 +154,1 @@\n+                return true;\n@@ -155,0 +158,1 @@\n+                return true;\n@@ -160,0 +164,1 @@\n+        return false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeTableCellBehavior.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -80,1 +81,1 @@\n-    protected void handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n+    protected boolean handleClicks(MouseButton button, int clickCount, boolean isAlreadySelected) {\n@@ -86,0 +87,1 @@\n+                return true;\n@@ -87,1 +89,1 @@\n-                \/\/ cancel editing\n+                \/\/ stop editing\n@@ -89,0 +91,1 @@\n+                return true;\n@@ -92,0 +95,1 @@\n+                return true;\n@@ -97,0 +101,1 @@\n+        return false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeTableRowBehavior.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-                \/\/ The user has shifted focus, so we should cancel the editing on this cell\n+                \/\/ The user has shifted focus, so we should stop the editing on this cell.\n@@ -367,1 +367,1 @@\n-                    cancelEdit();\n+                    stopEdit();\n@@ -376,0 +376,15 @@\n+    \/**\n+     * Stops the edit operation of the cell.\n+     * This method is called when another cell is edited or the focus changed.\n+     * <p>\n+     * The default behavior is to cancel the edit.\n+     * This method is meant to be subclassed in case the default behavior is not enough.\n+     * For example, subclasses decide to rather commit the edit operation instead of cancelling.\n+     *\/\n+    public void stopEdit() {\n+        if (!isEditing()) {\n+            return;\n+        }\n+\n+        cancelEdit();\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Cell.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -595,13 +595,1 @@\n-            \/\/ If my index is not the one being edited then I need to cancel\n-            \/\/ the edit. The tricky thing here is that as part of this call\n-            \/\/ I cannot end up calling list.edit(-1) the way that the standard\n-            \/\/ cancelEdit method would do. Yet, I need to call cancelEdit\n-            \/\/ so that subclasses which override cancelEdit can execute. So,\n-            \/\/ I have to use a kind of hacky flag workaround.\n-            try {\n-                \/\/ try-finally to make certain that the flag is reliably reset to true\n-                updateEditingIndex = false;\n-                cancelEdit();\n-            } finally {\n-                updateEditingIndex = true;\n-            }\n+            doStopEdit();\n@@ -611,1 +599,18 @@\n-\n+    \/**\n+     * Stops the edit operation.\n+     * If not overwritten, will cancel the edit without changing control'sediting state.\n+     *\/\n+    private void doStopEdit() {\n+        \/\/ If my index is not the one being edited then I need to cancel\n+        \/\/ the edit. The tricky thing here is that as part of this call\n+        \/\/ I cannot end up calling list.edit(-1) the way that the standard\n+        \/\/ cancelEdit method would do. Yet, I need to call cancelEdit\n+        \/\/ so that subclasses which override cancelEdit can execute. So,\n+        \/\/ I have to use a kind of hacky flag workaround.\n+        try {\n+            updateEditingIndex = false;\n+            stopEdit();\n+        } finally {\n+            updateEditingIndex = true;\n+        }\n+    }\n@@ -657,1 +662,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -572,4 +572,6 @@\n-        if (getIndex() == -1 || getTableView() == null) {\n-            \/\/ JDK-8265206: must cancel edit if index changed to -1 by re-use\n-            if (isEditing()) {\n-                doCancelEdit();\n+        TableView<S> tv = getTableView();\n+        boolean editing = isEditing();\n+        if (getIndex() == -1 || tv == null) {\n+            \/\/ JDK-8265206: must stop\/cancel edit if index changed to -1 by re-use\n+            if (editing) {\n+                doStopEdit();\n@@ -580,1 +582,1 @@\n-        TablePosition<S,?> editCell = getTableView().getEditingCell();\n+        TablePosition<S, ?> editCell = tv.getEditingCell();\n@@ -583,1 +585,1 @@\n-        if (match && ! isEditing()) {\n+        if (match && !editing) {\n@@ -585,2 +587,2 @@\n-        } else if (! match && isEditing()) {\n-            doCancelEdit();\n+        } else if (!match && editing) {\n+            doStopEdit();\n@@ -591,2 +593,2 @@\n-     * Switches an editing cell into not editing without changing control's\n-     * editing state.\n+     * Stops the edit operation.\n+     * If not overwritten, will cancel the edit without changing control'sediting state.\n@@ -594,1 +596,1 @@\n-    private void doCancelEdit() {\n+    private void doStopEdit() {\n@@ -602,1 +604,0 @@\n-            \/\/ try-finally to make certain that the flag is reliably reset to true\n@@ -604,1 +605,1 @@\n-            cancelEdit();\n+            stopEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-        if (! isEditing() && rowMatch) {\n+        if (!isEditing() && rowMatch) {\n@@ -327,2 +327,2 @@\n-        } else if (isEditing() && ! rowMatch) {\n-            cancelEdit();\n+        } else if (isEditing() && !rowMatch) {\n+            stopEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableRow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -595,2 +595,2 @@\n-                \/\/ JDK-8265210: must cancel edit if index changed to -1 by re-use\n-                doCancelEditing();\n+                \/\/ JDK-8265210: must stop\/cancel edit if index changed to -1 by re-use\n+                doStopEdit();\n@@ -603,1 +603,1 @@\n-        \/\/ If my tree item is the item being edited and I'm not currently in\n+        \/\/ If my tree item is the item being edited, and I'm not currently in\n@@ -607,2 +607,2 @@\n-        } else if (! match && editing) {\n-            doCancelEditing();\n+        } else if (!match && editing) {\n+            doStopEdit();\n@@ -612,2 +612,6 @@\n-    private void doCancelEditing() {\n-        \/\/ If my tree item is not the one being edited then I need to cancel\n+    \/**\n+     * Stops the edit operation.\n+     * If not overwritten, will cancel the edit without changing control'sediting state.\n+     *\/\n+    private void doStopEdit() {\n+        \/\/ If my index is not the one being edited then I need to cancel\n@@ -615,1 +619,1 @@\n-        \/\/ I cannot end up calling tree.edit(null) the way that the standard\n+        \/\/ I cannot end up calling list.edit(-1) the way that the standard\n@@ -620,1 +624,0 @@\n-            \/\/ try-finally to make certain that the flag is reliably reset to true\n@@ -622,1 +625,1 @@\n-            cancelEdit();\n+            stopEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeCell.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -567,0 +567,1 @@\n+        boolean editing = isEditing();\n@@ -568,3 +569,3 @@\n-            \/\/ JDK-8265206: must cancel edit if index changed to -1 by re-use\n-            if (isEditing()) {\n-                doCancelEdit();\n+            \/\/ JDK-8265206: must stop\/cancel edit if index changed to -1 by re-use\n+            if (editing) {\n+                doStopEdit();\n@@ -575,1 +576,1 @@\n-        TreeTablePosition<S,?> editCell = tv.getEditingCell();\n+        TreeTablePosition<S, ?> editCell = tv.getEditingCell();\n@@ -578,1 +579,1 @@\n-        if (match && ! isEditing()) {\n+        if (match && !editing) {\n@@ -580,2 +581,2 @@\n-        } else if (! match && isEditing()) {\n-            doCancelEdit();\n+        } else if (!match && editing) {\n+            doStopEdit();\n@@ -586,2 +587,2 @@\n-     * Switches an editing cell into not editing without changing control's\n-     * editing state.\n+     * Stops the edit operation.\n+     * If not overwritten, will cancel the edit without changing control'sediting state.\n@@ -589,1 +590,1 @@\n-    private void doCancelEdit() {\n+    private void doStopEdit() {\n@@ -597,1 +598,0 @@\n-            \/\/ try-finally to make certain that the flag is reliably reset to true\n@@ -599,1 +599,1 @@\n-            cancelEdit();\n+            stopEdit();\n@@ -604,1 +604,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -479,1 +479,1 @@\n-        if (! isEditing() && getTreeItem().equals(editItem)) {\n+        if (!isEditing() && getTreeItem().equals(editItem)) {\n@@ -481,2 +481,2 @@\n-        } else if (isEditing() && ! getTreeItem().equals(editItem)) {\n-            cancelEdit();\n+        } else if (isEditing() && !getTreeItem().equals(editItem)) {\n+            stopEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableRow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -245,0 +245,5 @@\n+        textField.focusedProperty().addListener(_ -> {\n+            if (!textField.isFocused() && cell.isEditing()) {\n+                cell.stopEdit();\n+            }\n+        });\n@@ -258,1 +263,1 @@\n-        textField.setOnKeyReleased(t -> {\n+        textField.setOnKeyPressed(t -> {\n@@ -267,0 +272,8 @@\n+    static <T> void stopEdit(Cell<T> cell, StringConverter<T> converter, String text) {\n+        if (converter != null) {\n+            cell.commitEdit(converter.fromString(text));\n+        } else {\n+            cell.cancelEdit();\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/CellUtils.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -205,0 +205,10 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public void stopEdit() {\n+        if (!isEditing()) {\n+            return;\n+        }\n+\n+        CellUtils.stopEdit(this, getConverter(), textField.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldListCell.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -209,0 +209,10 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public void stopEdit() {\n+        if (!isEditing()) {\n+            return;\n+        }\n+\n+        CellUtils.stopEdit(this, getConverter(), textField.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTableCell.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -220,0 +220,9 @@\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public void stopEdit() {\n+        if (!isEditing()) {\n+            return;\n+        }\n+\n+        CellUtils.stopEdit(this, getConverter(), textField.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTreeCell.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -211,0 +211,10 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override\n+    public void stopEdit() {\n+        if (!isEditing()) {\n+            return;\n+        }\n+\n+        CellUtils.stopEdit(this, getConverter(), textField.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTreeTableCell.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1188,0 +1188,63 @@\n+    @Test\n+    void testEditStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        list.setEditable(true);\n+        list.setCellFactory(_ -> new ListCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(list);\n+\n+        list.edit(0);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        list.edit(-1);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n+    @Test\n+    void testUpdateItemStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        list.setEditable(true);\n+        list.setCellFactory(_ -> new ListCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(list);\n+\n+        list.edit(0);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        IndexedCell<String> cell = VirtualFlowTestUtils.getCell(list, 0);\n+        cell.updateIndex(-1);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -1310,2 +1310,2 @@\n-        assertEquals(1, rt_37853_cancelCount);\n-        assertEquals(0, rt_37853_commitCount);\n+        assertEquals(0, rt_37853_cancelCount);\n+        assertEquals(1, rt_37853_commitCount);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -981,0 +981,69 @@\n+    @Test\n+    void testEditStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        TableColumn<String, Object> tableColumn = new TableColumn<>(\"column\");\n+        table.setEditable(true);\n+        table.getColumns().add(tableColumn);\n+\n+        tableColumn.setCellFactory(_ -> new TableCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(table);\n+\n+        table.edit(0, tableColumn);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        table.edit(-1, null);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n+    @Test\n+    void testUpdateItemStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        TableColumn<String, Object> tableColumn = new TableColumn<>(\"column\");\n+        table.setEditable(true);\n+        table.getColumns().add(tableColumn);\n+\n+        tableColumn.setCellFactory(_ -> new TableCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(table);\n+\n+        table.edit(0, tableColumn);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        IndexedCell<String> cell = VirtualFlowTestUtils.getCell(table, 0);\n+        cell.updateIndex(-1);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -4498,2 +4498,2 @@\n-        assertEquals(1, rt_37853_cancelCount);\n-        assertEquals(0, rt_37853_commitCount);\n+        assertEquals(0, rt_37853_cancelCount);\n+        assertEquals(1, rt_37853_commitCount);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1117,0 +1117,63 @@\n+\n+    @Test\n+    void testEditStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        tree.setEditable(true);\n+        tree.setCellFactory(_ -> new TreeCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(tree);\n+\n+        tree.edit(tree.getTreeItem(0));\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        tree.edit(null);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n+    @Test\n+    void testUpdateItemStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        tree.setEditable(true);\n+        tree.setCellFactory(_ -> new TreeCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(tree);\n+\n+        tree.edit(tree.getTreeItem(0));\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        IndexedCell<String> cell = VirtualFlowTestUtils.getCell(tree, 0);\n+        cell.updateIndex(-1);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -1293,0 +1293,69 @@\n+    @Test\n+    void testEditStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        TreeTableColumn<String, Object> tableColumn = new TreeTableColumn<>(\"column\");\n+        tree.setEditable(true);\n+        tree.getColumns().add(tableColumn);\n+\n+        tableColumn.setCellFactory(_ -> new TreeTableCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(tree);\n+\n+        tree.edit(0, tableColumn);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        tree.edit(-1, null);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n+    @Test\n+    void testUpdateItemStopEditIsCalledAndCancelsEdit() {\n+        AtomicBoolean stopEditCalled = new AtomicBoolean();\n+        AtomicBoolean cancelEditCalled = new AtomicBoolean();\n+\n+        TreeTableColumn<String, Object> tableColumn = new TreeTableColumn<>(\"column\");\n+        tree.setEditable(true);\n+        tree.getColumns().add(tableColumn);\n+\n+        tableColumn.setCellFactory(_ -> new TreeTableCell<>() {\n+            @Override\n+            public void stopEdit() {\n+                super.stopEdit();\n+                stopEditCalled.set(true);\n+            }\n+\n+            @Override\n+            public void cancelEdit() {\n+                super.cancelEdit();\n+                cancelEditCalled.set(true);\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(tree);\n+\n+        tree.edit(0, tableColumn);\n+        assertFalse(stopEditCalled.get());\n+        assertFalse(cancelEditCalled.get());\n+\n+        IndexedCell<String> cell = VirtualFlowTestUtils.getCell(tree, 0);\n+        cell.updateIndex(-1);\n+        assertTrue(stopEditCalled.get());\n+        assertTrue(cancelEditCalled.get());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -4826,2 +4826,2 @@\n-        assertEquals(1, rt_37853_cancelCount);\n-        assertEquals(0, rt_37853_commitCount);\n+        assertEquals(0, rt_37853_cancelCount);\n+        assertEquals(1, rt_37853_commitCount);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2371,2 +2371,2 @@\n-        assertEquals(1, rt_37853_cancelCount);\n-        assertEquals(0, rt_37853_commitCount);\n+        assertEquals(0, rt_37853_cancelCount);\n+        assertEquals(1, rt_37853_commitCount);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -99,1 +100,0 @@\n-        TreeTablePosition<?, ?> editingItem = new TreeTablePosition(control, editingRow, control.getColumns().get(0));\n@@ -101,1 +101,1 @@\n-        assertEquals(editingItem, control.getEditingCell());\n+        assertNull(control.getEditingCell());\n@@ -107,1 +107,0 @@\n-        TreeTablePosition<?, ?> editingItem = new TreeTablePosition(control, editingRow, control.getColumns().get(0));\n@@ -109,1 +108,1 @@\n-        assertEquals(editingItem, control.getEditingCell());\n+        assertNull(control.getEditingCell());\n@@ -176,1 +175,0 @@\n-        TablePosition<?, ?> editingItem = new TablePosition(control, editingRow, control.getColumns().get(0));\n@@ -178,1 +176,1 @@\n-        assertEquals(editingItem, control.getEditingCell());\n+        assertNull(control.getEditingCell());\n@@ -184,1 +182,0 @@\n-        TablePosition<?, ?> editingItem = new TablePosition(control, editingRow, control.getColumns().get(0));\n@@ -186,1 +183,1 @@\n-        assertEquals(editingItem, control.getEditingCell());\n+        assertNull(control.getEditingCell());\n@@ -250,1 +247,0 @@\n-        TreeItem<?> editingItem = control.getTreeItem(editingRow);\n@@ -252,1 +248,1 @@\n-        assertEquals(editingItem, control.getEditingItem());\n+        assertNull(control.getEditingItem());\n@@ -258,1 +254,0 @@\n-        TreeItem<?> editingItem = control.getTreeItem(editingRow);\n@@ -260,1 +255,1 @@\n-        assertEquals(editingItem, control.getEditingItem());\n+        assertNull(control.getEditingItem());\n@@ -318,1 +313,1 @@\n-        assertEquals(editingRow, control.getEditingIndex());\n+        assertEquals(-1, control.getEditingIndex());\n@@ -325,1 +320,1 @@\n-        assertEquals(editingRow, control.getEditingIndex());\n+        assertEquals(-1, control.getEditingIndex());\n@@ -387,1 +382,1 @@\n-           fireMouseOnHorizontalTrack(control);\n+            fireMouseOnHorizontalTrack(control);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/EditAndScrollTest.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"}]}