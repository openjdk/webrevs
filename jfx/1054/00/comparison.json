{"files":[{"patch":"@@ -352,0 +352,1 @@\n+    protected abstract void _updateViewSize(long ptr);\n@@ -373,0 +374,4 @@\n+            \/\/ JDK-8299968: View size update (especially notifyResize event) have to happen\n+            \/\/ after we call view.setWindow(this); otherwise with UI scaling different than\n+            \/\/ 100% some platforms might display scenes wrong after Window was shown.\n+            _updateViewSize(this.ptr);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Window.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+    \/\/ empty - not needed by this implementation\n+    @Override\n+    protected void _updateViewSize(long ptr) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    \/\/ empty - not needed by this implementation\n+    @Override\n+    protected void _updateViewSize(long ptr) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/ios\/IosWindow.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+    \/\/ empty - not needed by this implementation\n+    @Override protected void _updateViewSize(long ptr) {}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,0 +182,4 @@\n+    \/\/ empty - not needed by this implementation\n+    @Override\n+    protected void _updateViewSize(long ptr) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleWindow.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -263,0 +263,1 @@\n+    @Override native protected void _updateViewSize(long ptr);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinWindow.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1300,0 +1300,22 @@\n+    }\n+    GlassView * view;\n+    LEAVE_MAIN_THREAD_WITH_hWnd;\n+\n+    ARG(view) = view == NULL ? NULL : (GlassView*)env->GetLongField(view, javaIDs.View.ptr);\n+\n+    PERFORM();\n+    return JNI_TRUE;\n+}\n+\n+\/**\n+ * Class:     com_sun_glass_ui_win_WinWindow\n+ * Method:    _updateViewSize\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_win_WinWindow__1updateViewSize\n+    (JNIEnv * env, jobject jThis, jlong ptr)\n+{\n+    ENTER_MAIN_THREAD()\n+    {\n+        GlassWindow *pWindow = GlassWindow::FromHandle(hWnd);\n+\n@@ -1308,2 +1330,0 @@\n-    ARG(view) = view == NULL ? NULL : (GlassView*)env->GetLongField(view, javaIDs.View.ptr);\n-\n@@ -1311,1 +1331,0 @@\n-    return JNI_TRUE;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Platform;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+public class SetSceneScalingTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Robot robot;\n+\n+    TestApp app;\n+\n+\n+    public abstract class TestApp {\n+        protected CountDownLatch shownLatch = new CountDownLatch(1);\n+        protected Stage stage;\n+        protected Button button;\n+        protected boolean wasClicked = false;\n+\n+        protected void testButtonClick() {\n+            robot.mouseMove(400, 400);\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        }\n+\n+        protected Scene createTestScene() {\n+            button = new Button(\"I should be centered\");\n+            button.setOnAction((ActionEvent e) -> wasClicked = true);\n+\n+            VBox box = new VBox(button);\n+            box.setAlignment(Pos.CENTER);\n+            return new Scene(box);\n+        }\n+\n+        protected abstract void test();\n+        protected abstract void sceneShowSetup();\n+\n+        public void runTest() {\n+            start();\n+\n+            Assert.assertNotNull(stage);\n+            Assert.assertNotNull(button);\n+\n+            test();\n+        }\n+\n+        public void start() {\n+            Util.runAndWait(() -> {\n+                stage = new Stage(StageStyle.UNDECORATED);\n+                stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n+                                        Platform.runLater(shownLatch::countDown));\n+                stage.setX(200);\n+                stage.setY(200);\n+                stage.setWidth(400);\n+                stage.setHeight(400);\n+                stage.setAlwaysOnTop(true);\n+\n+                sceneShowSetup();\n+            });\n+\n+            Util.waitForLatch(shownLatch, 5, \"Stage not shown\");\n+        }\n+\n+        public void hideStage() {\n+            stage.hide();\n+        }\n+    }\n+\n+    public class TestSetSceneShowApp extends TestApp {\n+        @Override\n+        protected void test() {\n+            wasClicked = false;\n+            Util.runAndWait(() -> testButtonClick());\n+            Assert.assertTrue(wasClicked);\n+        }\n+\n+        @Override\n+        public void sceneShowSetup() {\n+            stage.setScene(createTestScene());\n+            stage.show();\n+        }\n+    }\n+\n+    public class TestShowSetSceneApp extends TestApp {\n+        @Override\n+        protected void test() {\n+            wasClicked = false;\n+            Util.runAndWait(() -> testButtonClick());\n+            Assert.assertTrue(wasClicked);\n+        }\n+\n+        @Override\n+        public void sceneShowSetup() {\n+            stage.show();\n+            stage.setScene(createTestScene());\n+        }\n+    }\n+\n+    public class TestSecondSetSceneApp extends TestApp {\n+        @Override\n+        protected void test() {\n+            \/\/ Test that everything is okay for start\n+            wasClicked = false;\n+            Util.runAndWait(() -> testButtonClick());\n+            Assert.assertTrue(wasClicked);\n+\n+            \/\/ Recreate scene and set it\n+            Util.runAndWait(() -> stage.setScene(createTestScene()));\n+\n+            \/\/ retest - if DPI scaling is mishandled the button should\n+            \/\/ NOT be where it was (and thus, the test fails)\n+            wasClicked = false;\n+            Util.runAndWait(() -> testButtonClick());\n+            Assert.assertTrue(wasClicked);\n+        }\n+\n+        @Override\n+        public void sceneShowSetup() {\n+            stage.setScene(createTestScene());\n+            stage.show();\n+        }\n+    }\n+\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        Platform.setImplicitExit(false);\n+        Util.startup(startupLatch, startupLatch::countDown);\n+\n+        Util.runAndWait(() -> robot = new Robot());\n+    }\n+\n+    @After\n+    public void cleanupTest() {\n+        if (app != null) {\n+            Platform.runLater(() -> app.hideStage());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void teardownFX() {\n+        Util.shutdown();\n+    }\n+\n+\n+    @Test\n+    public void testSetSceneAndShow() throws Exception {\n+        app = new TestSetSceneShowApp();\n+        app.runTest();\n+    }\n+\n+    @Test\n+    public void testShowAndSetScene() throws Exception {\n+        app = new TestShowSetSceneApp();\n+        app.runTest();\n+    }\n+\n+    @Test\n+    public void testSecondSetScene() throws Exception {\n+        app = new TestSecondSetSceneApp();\n+        app.runTest();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SetSceneScalingTest.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"}]}