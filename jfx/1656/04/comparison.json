{"files":[{"patch":"@@ -159,0 +159,1 @@\n+        \"-framework\", \"Network\",\n","filename":"buildSrc\/mac.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -457,1 +457,2 @@\n-            \"GTK.overlay_scrolling\", new PreferenceMapping<>(\"persistentScrollBars\", Boolean.class, b -> !b)\n+            \"GTK.overlay_scrolling\", new PreferenceMapping<>(\"persistentScrollBars\", Boolean.class, b -> !b),\n+            \"GTK.network_metered\", new PreferenceMapping<>(\"reducedData\", Boolean.class)\n@@ -485,1 +486,2 @@\n-            Map.entry(\"GTK.overlay_scrolling\", Boolean.class)\n+            Map.entry(\"GTK.overlay_scrolling\", Boolean.class),\n+            Map.entry(\"GTK.network_metered\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -434,1 +434,2 @@\n-            \"macOS.NSScroller.preferredScrollerStyle\", new PreferenceMapping<>(\"persistentScrollBars\", String.class, \"NSScrollerStyleLegacy\"::equals)\n+            \"macOS.NSScroller.preferredScrollerStyle\", new PreferenceMapping<>(\"persistentScrollBars\", String.class, \"NSScrollerStyleLegacy\"::equals),\n+            \"macOS.NWPathMonitor.currentPathConstrained\", new PreferenceMapping<>(\"reducedData\", Boolean.class)\n@@ -490,1 +491,3 @@\n-            Map.entry(\"macOS.NSScroller.preferredScrollerStyle\", String.class)\n+            Map.entry(\"macOS.NSScroller.preferredScrollerStyle\", String.class),\n+            Map.entry(\"macOS.NWPathMonitor.currentPathConstrained\", Boolean.class),\n+            Map.entry(\"macOS.NWPathMonitor.currentPathExpensive\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -367,1 +367,6 @@\n-            \"Windows.SPI.ClientAreaAnimation\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b)\n+            \"Windows.SPI.ClientAreaAnimation\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b),\n+            \"Windows.NetworkInformation.InternetCostType\", new PreferenceMapping<>(\n+                \"reducedData\", String.class, v -> switch (v) {\n+                    case \"Unknown\", \"Unrestricted\" -> false;\n+                    default -> true;\n+                })\n@@ -396,1 +401,2 @@\n-            Map.entry(\"Windows.UISettings.AutoHideScrollBars\", Boolean.class)\n+            Map.entry(\"Windows.UISettings.AutoHideScrollBars\", Boolean.class),\n+            Map.entry(\"Windows.NetworkInformation.InternetCostType\", String.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -226,0 +226,10 @@\n+    @Override\n+    public ReadOnlyBooleanProperty reducedDataProperty() {\n+        return properties.reducedDataProperty();\n+    }\n+\n+    @Override\n+    public boolean isReducedData() {\n+        return properties.isReducedData();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private final DeferredProperty<Boolean> reducedData = new DeferredProperty<>(\"reducedData\", false);\n@@ -57,0 +58,1 @@\n+    private final ReadOnlyBooleanWrapper reducedDataFlag;\n@@ -69,0 +71,3 @@\n+        reducedDataFlag = new ReadOnlyBooleanWrapper(bean, reducedData.getName());\n+        reducedDataFlag.bind(reducedData);\n+\n@@ -97,0 +102,12 @@\n+    public ReadOnlyBooleanProperty reducedDataProperty() {\n+        return reducedDataFlag.getReadOnlyProperty();\n+    }\n+\n+    public boolean isReducedData() {\n+        return reducedData.get();\n+    }\n+\n+    public void setReducedData(boolean value) {\n+        reducedData.setValueOverride(value);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-     * Contains UI preferences of the current platform.\n+     * Contains preferences of the current platform.\n@@ -501,0 +501,1 @@\n+     *         <tr><td>{@code Windows.NetworkInformation.InternetCostType}<\/td><td>{@link String}<\/td><\/tr>\n@@ -556,0 +557,2 @@\n+     *         <tr><td>{@code macOS.NWPathMonitor.currentPathConstrained}<\/td><td>{@link Boolean}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NWPathMonitor.currentPathExpensive}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -583,0 +586,1 @@\n+     *         <tr><td>{@code GTK.network_metered}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -634,0 +638,14 @@\n+        \/**\n+         * Specifies whether applications should minimize the amount of internet traffic, which users\n+         * might request because they are on a metered network or a limited data plan.\n+         * <p>\n+         * If the platform does not report this preference, this property defaults to {@code false}.\n+         *\n+         * @return the {@code reducedData} property\n+         * @defaultValue {@code false}\n+         * @since 24\n+         *\/\n+        ReadOnlyBooleanProperty reducedDataProperty();\n+\n+        boolean isReducedData();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,7 +77,0 @@\n-static void call_update_preferences()\n-{\n-    if (platformSupport) {\n-        platformSupport->updatePreferences();\n-    }\n-}\n-\n@@ -200,8 +193,0 @@\n-\n-    GtkSettings* settings = gtk_settings_get_default();\n-    if (settings != NULL) {\n-        for (const auto& setting : PlatformSupport::observedSettings) {\n-            g_signal_connect_after(G_OBJECT(settings), setting,\n-                                   G_CALLBACK(call_update_preferences), NULL);\n-        }\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -74,0 +74,8 @@\n+\n+    void notifySettingChanged(GObject*, GParamSpec*, PlatformSupport* instance) {\n+        instance->updatePreferences();\n+    }\n+\n+    void notifyNetworkChanged(GNetworkMonitor*, gboolean, PlatformSupport* instance) {\n+        instance->updatePreferences();\n+    }\n@@ -77,1 +85,16 @@\n-    : env(env), application(env->NewGlobalRef(application)), preferences(NULL) {}\n+        : env(env), application(env->NewGlobalRef(application)), preferences(NULL) {\n+    GtkSettings* settings = gtk_settings_get_default();\n+    if (settings != NULL) {\n+        for (int i = 0; i < NUM_OBSERVED_SETTINGS; ++i) {\n+            settingChangedHandlers[i] = g_signal_connect_data(\n+                G_OBJECT(settings), OBSERVED_SETTINGS[i],\n+                G_CALLBACK(notifySettingChanged), this,\n+                NULL, G_CONNECT_AFTER);\n+        }\n+    }\n+\n+    networkChangedHandler = g_signal_connect_data(\n+        G_OBJECT(g_network_monitor_get_default()), \"network-changed\",\n+        G_CALLBACK(notifyNetworkChanged), this,\n+        NULL, G_CONNECT_AFTER);\n+}\n@@ -80,0 +103,10 @@\n+    GtkSettings* settings = gtk_settings_get_default();\n+\n+    for (int i = 0; i < NUM_OBSERVED_SETTINGS; ++i) {\n+        if (settingChangedHandlers[i] != 0) {\n+            g_signal_handler_disconnect(G_OBJECT(settings), settingChangedHandlers[i]);\n+        }\n+    }\n+\n+    g_signal_handler_disconnect(G_OBJECT(g_network_monitor_get_default()), networkChangedHandler);\n+\n@@ -132,0 +165,4 @@\n+    GNetworkMonitor* networkMonitor = g_network_monitor_get_default();\n+    bool metered = g_network_monitor_get_network_metered(networkMonitor);\n+    putBoolean(env, prefs, \"GTK.network_metered\", metered);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -33,6 +33,0 @@\n-    static constexpr const char* observedSettings[] = {\n-        \"notify::gtk-theme-name\",\n-        \"notify::gtk-enable-animations\",\n-        \"notify::gtk-overlay-scrolling\"\n-    };\n-\n@@ -56,0 +50,8 @@\n+    static constexpr const char* OBSERVED_SETTINGS[] = {\n+        \"notify::gtk-theme-name\",\n+        \"notify::gtk-enable-animations\",\n+        \"notify::gtk-overlay-scrolling\"\n+    };\n+\n+    static constexpr int NUM_OBSERVED_SETTINGS = sizeof(OBSERVED_SETTINGS) \/ sizeof(const char*);\n+\n@@ -58,0 +60,2 @@\n+    unsigned long settingChangedHandlers[NUM_OBSERVED_SETTINGS] = {};\n+    unsigned long networkChangedHandler = 0;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.h","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+- (jobject)getPlatformPreferences;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -142,1 +142,3 @@\n-@implementation GlassApplication\n+@implementation GlassApplication {\n+    PlatformSupport* platformSupport;\n+}\n@@ -180,19 +182,0 @@\n-- (void)platformPreferencesDidChange {\n-    \/\/ Some dynamic colors like NSColor.controlAccentColor don't seem to be reliably updated\n-    \/\/ at the exact moment AppleColorPreferencesChangedNotification is received.\n-    \/\/ As a workaround, we wait for a short period of time (one second seems sufficient) before\n-    \/\/ we query the updated platform preferences.\n-\n-    [NSObject cancelPreviousPerformRequestsWithTarget:self\n-              selector:@selector(updatePlatformPreferences)\n-              object:nil];\n-\n-    [self performSelector:@selector(updatePlatformPreferences)\n-          withObject:nil\n-          afterDelay:1.0];\n-}\n-\n-- (void)updatePlatformPreferences {\n-    [PlatformSupport updatePreferences:self->jApplication];\n-}\n-\n@@ -207,0 +190,1 @@\n+        self->platformSupport = [[PlatformSupport alloc] initWithEnv:env application:jApplication];\n@@ -238,21 +222,0 @@\n-                        [[NSNotificationCenter defaultCenter] addObserver:self\n-                                                              selector:@selector(platformPreferencesDidChange)\n-                                                              name:NSPreferredScrollerStyleDidChangeNotification\n-                                                              object:nil];\n-\n-                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n-                                                                         selector:@selector(platformPreferencesDidChange)\n-                                                                         name:@\"AppleInterfaceThemeChangedNotification\"\n-                                                                         object:nil];\n-\n-                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n-                                                                         selector:@selector(platformPreferencesDidChange)\n-                                                                         name:@\"AppleColorPreferencesChangedNotification\"\n-                                                                         object:nil];\n-\n-                        [[[NSWorkspace sharedWorkspace] notificationCenter]\n-                            addObserver:self\n-                            selector:@selector(platformPreferencesDidChange)\n-                            name:NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification\n-                            object:nil];\n-\n@@ -782,0 +745,5 @@\n+- (jobject)getPlatformPreferences\n+{\n+    return platformSupport != nil ? [platformSupport collectPreferences] : nil;\n+}\n+\n@@ -1302,1 +1270,2 @@\n-    return [PlatformSupport collectPreferences];\n+    GlassApplication* app = (GlassApplication*)[NSApp delegate];\n+    return [app getPlatformPreferences];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":11,"deletions":42,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,4 @@\n-@interface PlatformSupport : NSObject\n+@interface PlatformSupport : NSObject {\n+    JNIEnv* env;\n+    jobject application;\n+}\n@@ -36,1 +39,1 @@\n- * Collect all platform preferences and return them as a new java\/util\/Map.\n+ * Initializes a new PlatformSupport instance.\n@@ -38,1 +41,1 @@\n-+ (jobject)collectPreferences;\n+- (id)initWithEnv:(JNIEnv*)env application:(jobject)app;\n@@ -41,2 +44,1 @@\n- * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n- * The change notification includes all preferences, not only the changed preferences.\n+ * Collect all platform preferences and return them as a new java\/util\/Map.\n@@ -44,1 +46,1 @@\n-+ (void)updatePreferences:(jobject)application;\n+- (jobject)collectPreferences;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.h","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#import <Network\/Network.h>\n@@ -66,3 +67,5 @@\n-static jobject currentPreferences = nil;\n-\n-@implementation PlatformSupport\n+@implementation PlatformSupport {\n+    jobject currentPreferences;\n+    bool currentPathConstrained;\n+    bool currentPathExpensive;\n+}\n@@ -91,2 +94,62 @@\n-+ (jobject)collectPreferences {\n-    GET_MAIN_JENV;\n+- (id)initWithEnv:(JNIEnv*)jEnv application:(jobject)jApp {\n+    if (!(self = [super init])) {\n+        return nil;\n+    }\n+\n+    self->env = jEnv;\n+    self->application = jApp;\n+    self->currentPreferences = nil;\n+    self->currentPathConstrained = false;\n+    self->currentPathExpensive = false;\n+\n+    [[NSNotificationCenter defaultCenter]\n+        addObserver:self\n+        selector:@selector(platformPreferencesDidChange)\n+        name:NSPreferredScrollerStyleDidChangeNotification\n+        object:nil];\n+\n+    [[NSDistributedNotificationCenter defaultCenter]\n+        addObserver:self\n+        selector:@selector(platformPreferencesDidChange)\n+        name:@\"AppleInterfaceThemeChangedNotification\"\n+        object:nil];\n+\n+    [[NSDistributedNotificationCenter defaultCenter]\n+        addObserver:self\n+        selector:@selector(platformPreferencesDidChange)\n+        name:@\"AppleColorPreferencesChangedNotification\"\n+        object:nil];\n+\n+    [[[NSWorkspace sharedWorkspace] notificationCenter]\n+        addObserver:self\n+        selector:@selector(platformPreferencesDidChange)\n+        name:NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification\n+        object:nil];\n+\n+    nw_path_monitor_t pathMonitor = nw_path_monitor_create();\n+    nw_path_monitor_set_update_handler(pathMonitor, ^(nw_path_t path) {\n+        self->currentPathConstrained = nw_path_is_constrained(path);\n+        self->currentPathExpensive = nw_path_is_expensive(path);\n+        [self updatePreferences];\n+    });\n+\n+    nw_path_monitor_set_queue(pathMonitor, dispatch_get_main_queue());\n+    nw_path_monitor_start(pathMonitor);\n+\n+    return self;\n+}\n+\n+- (void)platformPreferencesDidChange {\n+    \/\/ Some dynamic colors like NSColor.controlAccentColor don't seem to be reliably updated\n+    \/\/ at the exact moment AppleColorPreferencesChangedNotification is received.\n+    \/\/ As a workaround, we wait for a short period of time (one second seems sufficient) before\n+    \/\/ we query the updated platform preferences.\n+\n+    [NSObject cancelPreviousPerformRequestsWithTarget:self\n+              selector:@selector(updatePreferences)\n+              object:nil];\n+\n+    [self performSelector:@selector(updatePreferences)\n+          withObject:nil\n+          afterDelay:1.0];\n+}\n@@ -94,0 +157,1 @@\n+- (jobject)collectPreferences {\n@@ -106,1 +170,1 @@\n-    [PlatformSupport queryNSColors:preferences];\n+    [self queryNSColors:preferences];\n@@ -109,3 +173,12 @@\n-    [PlatformSupport putBoolean:preferences\n-                     key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion\"\n-                     value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceMotion]];\n+    [self putBoolean:preferences\n+          key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion\"\n+          value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceMotion]];\n+\n+    [self putBoolean:preferences\n+          key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\"\n+          value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceTransparency]];\n+\n+    [self putString:preferences\n+          key:\"macOS.NSScroller.preferredScrollerStyle\"\n+          value:[NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay\n+              ? \"NSScrollerStyleOverlay\" : \"NSScrollerStyleLegacy\"];\n@@ -113,3 +186,3 @@\n-    [PlatformSupport putBoolean:preferences\n-                     key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\"\n-                     value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceTransparency]];\n+    [self putBoolean:preferences\n+          key:\"macOS.NWPathMonitor.currentPathConstrained\"\n+          value:currentPathConstrained];\n@@ -117,4 +190,3 @@\n-    [PlatformSupport putString:preferences\n-                     key:\"macOS.NSScroller.preferredScrollerStyle\"\n-                     value:[NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay\n-                        ? \"NSScrollerStyleOverlay\" : \"NSScrollerStyleLegacy\"];\n+    [self putBoolean:preferences\n+          key:\"macOS.NWPathMonitor.currentPathExpensive\"\n+          value:currentPathExpensive];\n@@ -125,1 +197,1 @@\n-+ (void)queryNSColors:(jobject)preferences {\n+- (void)queryNSColors:(jobject)preferences {\n@@ -127,4 +199,4 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n@@ -133,8 +205,8 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n@@ -143,4 +215,4 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n@@ -149,1 +221,1 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n@@ -152,3 +224,3 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n-    [PlatformSupport putColors:preferences key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n+    [self putColor:preferences key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n+    [self putColors:preferences key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n@@ -157,8 +229,8 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n@@ -174,1 +246,1 @@\n-        [PlatformSupport putString:preferences key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n+        [self putString:preferences key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n@@ -178,3 +250,3 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n@@ -183,3 +255,3 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n@@ -188,11 +260,11 @@\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n-    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n+    [self putColor:preferences key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n@@ -201,3 +273,5 @@\n-+ (void)updatePreferences:(jobject)application {\n-    GET_MAIN_JENV;\n-\n+\/**\n+ * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+ * The change notification includes all preferences, not only the changed preferences.\n+ *\/\n+- (void)updatePreferences {\n@@ -238,3 +312,1 @@\n-+ (void)putBoolean:(jobject)preferences key:(const char*)key value:(bool)value {\n-    GET_MAIN_JENV;\n-\n+- (void)putBoolean:(jobject)preferences key:(const char*)key value:(bool)value {\n@@ -251,3 +323,1 @@\n-+ (void)putString:(jobject)preferences key:(const char*)key value:(const char*)value {\n-    GET_MAIN_JENV;\n-\n+- (void)putString:(jobject)preferences key:(const char*)key value:(const char*)value {\n@@ -267,3 +337,1 @@\n-+ (void)putColor:(jobject)preferences key:(const char*)colorName value:(NSColor*)color {\n-    GET_MAIN_JENV;\n-\n+- (void)putColor:(jobject)preferences key:(const char*)colorName value:(NSColor*)color {\n@@ -286,3 +354,1 @@\n-+ (void)putColors:(jobject)preferences key:(const char*)colorName value:(NSArray*)colors {\n-    GET_MAIN_JENV;\n-\n+- (void)putColors:(jobject)preferences key:(const char*)colorName value:(NSArray*)colors {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":144,"deletions":78,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+using namespace ABI::Windows::Networking::Connectivity;\n@@ -36,1 +37,1 @@\n-    : env(env), application(application), initialized(false), preferences(NULL)\n+    : env(env), application(application), initialized(false), networkInformation(NULL), preferences(NULL)\n@@ -91,6 +92,0 @@\n-    } catch (RoException const&) {\n-        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n-        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n-        \/\/ we don't report the UISettings properties back to the JavaFX application.\n-        return;\n-    }\n@@ -98,1 +93,0 @@\n-    try {\n@@ -112,1 +106,27 @@\n-        return;\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+    }\n+\n+    try {\n+        IActivationFactory* activationFactory = NULL;\n+\n+        RO_CHECKED(\"RoGetActivationFactory\",\n+                   RoGetActivationFactory(hstring(\"Windows.Networking.Connectivity.NetworkInformation\"),\n+                                          IID_IActivationFactory,\n+                                          (void**)&activationFactory));\n+\n+        RO_CHECKED(\"IActivationFactory::QueryInterface<INetworkInformationStatics>\",\n+                   activationFactory->QueryInterface(&networkInformation));\n+\n+        EventRegistrationToken token;\n+        networkInformation->add_NetworkStatusChanged(\n+            Callback<INetworkStatusChangedEventHandler>(\n+                [this](IInspectable*) {\n+                    updatePreferences();\n+                    return S_OK;\n+                }).Get(),\n+            &token);\n+    } catch (RoException const&) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the NetworkInformation API.\n@@ -134,0 +154,1 @@\n+    queryNetworkInformation(prefs);\n@@ -279,0 +300,33 @@\n+void PlatformSupport::queryNetworkInformation(jobject properties) const\n+{\n+    if (!this->networkInformation) {\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IConnectionProfile> connectionProfile;\n+        ComPtr<IConnectionCost> connectionCost;\n+        NetworkCostType networkCostType;\n+        const char* internetCostType;\n+\n+        RO_CHECKED(\"INetworkInformation::GetInternetConnectionProfile\",\n+                   this->networkInformation->GetInternetConnectionProfile(&connectionProfile));\n+\n+        RO_CHECKED(\"IConnectionProfile::GetConnectionCost\",\n+                   connectionProfile->GetConnectionCost(&connectionCost));\n+\n+        RO_CHECKED(\"IConnectionCost::get_NetworkCostType\",\n+                   connectionCost->get_NetworkCostType(&networkCostType));\n+\n+        switch (networkCostType) {\n+            case NetworkCostType_Unrestricted: internetCostType = \"Unrestricted\"; break;\n+            case NetworkCostType_Variable: internetCostType = \"Variable\"; break;\n+            case NetworkCostType_Fixed: internetCostType = \"Fixed\"; break;\n+            default: internetCostType = \"Unknown\"; break;\n+        }\n+\n+        putString(properties, \"Windows.NetworkInformation.InternetCostType\", internetCostType);\n+    } catch (RoException const&) {\n+    }\n+}\n+\n@@ -301,1 +355,1 @@\n-        prefValue = env->NewString((jchar*)value, wcslen(value));\n+        prefValue = env->NewString((jchar*)value, (jsize)wcslen(value));\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":64,"deletions":10,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include <windows.networking.connectivity.h>\n@@ -67,0 +68,1 @@\n+    ABI::Windows::Networking::Connectivity::INetworkInformationStatics* networkInformation;\n@@ -81,0 +83,1 @@\n+    void queryNetworkInformation(jobject properties) const;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+    typedef HRESULT WINAPI FnRoGetActivationFactory(HSTRING activatableClassId, REFIID  iid, void** factory);\n@@ -46,0 +47,1 @@\n+    FnRoGetActivationFactory* pRoGetActivationFactory = NULL;\n@@ -95,0 +97,1 @@\n+        loadFunction(hLibComBase, pRoGetActivationFactory, \"RoGetActivationFactory\") &&\n@@ -125,0 +128,1 @@\n+        pRoGetActivationFactory = NULL;\n@@ -150,0 +154,5 @@\n+HRESULT WINAPI RoGetActivationFactory(HSTRING activatableClassId, REFIID iid, void** factory)\n+{\n+    return pRoGetActivationFactory(activatableClassId, iid, factory);\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/RoActivationSupport.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+        var reducedDataLabel = new Label();\n@@ -79,0 +80,1 @@\n+            reducedDataLabel.setText(Boolean.toString(preferences.isReducedData()));\n@@ -99,0 +101,1 @@\n+                new HBox(new BoldLabel(\"    reducedData: \"), reducedDataLabel),\n","filename":"tests\/manual\/events\/PlatformPreferencesChangedTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}