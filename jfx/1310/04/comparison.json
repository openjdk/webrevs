{"files":[{"patch":"@@ -2006,0 +2006,1 @@\n+                    clearDirtyTree();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+package test.com.sun.prism.impl;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Bounds;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.robot.Robot;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Line;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class NGNodeDirtyFlagTest {\n+\n+    \/\/ Used to launch the application before running any test\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Singleton Application instance\n+    static MyApp myApp;\n+\n+    private CountDownLatch latch = new CountDownLatch(1);\n+\n+    public static class MyApp extends Application {\n+\n+        private StackPane root;\n+\n+        public MyApp() {\n+            super();\n+        }\n+\n+        @Override\n+        public void init() {\n+            myApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            root = new StackPane();\n+            primaryStage.setScene(new Scene(root, 500, 400));\n+            primaryStage.show();\n+\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        Util.launch(launchLatch, MyApp.class);\n+        assertEquals(0, launchLatch.getCount());\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    public void testNGNodesNotDirty() throws InterruptedException {\n+        ObjectProperty<Color> lineColor = new SimpleObjectProperty<>(Color.DARKGREEN);\n+        ObjectProperty<Color> circleColor = new SimpleObjectProperty<>(Color.DARKGREEN);\n+\n+        StackPane root = myApp.root;\n+\n+        runAndWait(() -> {\n+            var contents = new HBox();\n+            contents.setSpacing(10);\n+            contents.setPadding(new Insets(10));\n+            contents.getChildren().add(contentElement(\"L\", lineColor, circleColor));\n+            contents.getChildren().add(contentElement(\"R\", lineColor, circleColor));\n+            root.getChildren().add(contents);\n+\n+            Pane sideArea = createSideArea();\n+            StackPane.setAlignment(sideArea, Pos.CENTER_RIGHT);\n+            root.getChildren().add(sideArea);\n+        });\n+\n+        Thread.sleep(500);\n+\n+        for (int i = 0; i < 5; i++) {\n+            Platform.runLater(() -> lineColor.set(Color.LIGHTGREEN));\n+            Thread.sleep(300);\n+            Platform.runLater(() -> circleColor.set(Color.LIGHTGREEN));\n+            Thread.sleep(300);\n+\n+            checkLineColor(root, lineColor.get());\n+\n+            Platform.runLater(() -> lineColor.set(Color.DARKGREEN));\n+            Thread.sleep(300);\n+            Platform.runLater(() -> circleColor.set(Color.DARKGREEN));\n+            Thread.sleep(300);\n+\n+            checkLineColor(root, lineColor.get());\n+        }\n+\n+    }\n+\n+    private void checkLineColor(StackPane root, Color expected) {\n+        runAndWait(() -> {\n+            checkColor(root.lookup(\"#Line-L\"), expected);\n+            checkColor(root.lookup(\"#Line-R\"), expected);\n+        });\n+    }\n+\n+    private void checkColor(Node node, Color expected) {\n+        Robot robot = new Robot();\n+        Bounds screenBounds = node.localToScreen(node.getBoundsInLocal());\n+        WritableImage image = robot.getScreenCapture(null, screenBounds.getMinX(), screenBounds.getMinY(), 100, 100);\n+        Assert.assertEquals(\"A node was not rendered properly. Wrong color found\", expected, image.getPixelReader().getColor(1, 1));\n+    }\n+\n+    private void runAndWait(Runnable action) {\n+        try {\n+            CompletableFuture.runAsync(action, Platform::runLater).get(5000, TimeUnit.MILLISECONDS);\n+        } catch (ExecutionException e) {\n+            if (e.getCause() instanceof AssertionError error) {\n+                throw error;\n+            } else {\n+                throw new RuntimeException(e);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private Pane contentElement(String id, ObjectProperty<Color> lineColor, ObjectProperty<Color> circleColor) {\n+        var group = new Group();\n+        group.setId(id);\n+        group.setManaged(false);\n+\n+        double lineWidth = 220;\n+\n+        var line = new Line(20, 50, lineWidth, 50);\n+        line.setId(\"Line-\" + id);\n+        line.setStrokeWidth(4);\n+        lineColor.addListener((ov, o, n) -> line.setStroke(n));\n+        group.getChildren().add(line);\n+\n+        var circle = new Circle(5);\n+        circle.setCenterX(lineWidth + 20);\n+        circle.setCenterY(50);\n+        circle.setId(\"Circle-\" + id);\n+        circleColor.addListener((ov, o, n) -> circle.setFill(n));\n+        circle.setFill(Color.LIGHTGREEN);\n+        group.getChildren().add(circle);\n+\n+        var result = new StackPane(group);\n+        result.setId(id);\n+        result.setStyle(\"-fx-background-color: lightgrey; -fx-border-color: black; -fx-border-width: 1;\");\n+        result.setMinSize(lineWidth + 40, 200);\n+\n+        return result;\n+    }\n+\n+    private Pane createSideArea() {\n+        VBox result = new VBox();\n+        result.setPrefSize(150, 9900);\n+        result.setMaxWidth(200);\n+        result.setStyle(\"-fx-background-color: lightblue;\");\n+        result.getChildren().add(new Label(\"SideArea\"));\n+        return result;\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/NGNodeDirtyFlagTest.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}