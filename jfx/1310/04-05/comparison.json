{"files":[{"patch":"@@ -8,0 +8,2 @@\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n@@ -66,1 +68,0 @@\n-            primaryStage.show();\n@@ -68,1 +69,2 @@\n-            launchLatch.countDown();\n+            primaryStage.setOnShown(e -> Platform.runLater(launchLatch::countDown));\n+            primaryStage.show();\n@@ -75,1 +77,0 @@\n-        assertEquals(0, launchLatch.getCount());\n@@ -90,1 +91,1 @@\n-        runAndWait(() -> {\n+        Util.runAndWait(() -> {\n@@ -103,1 +104,1 @@\n-        Thread.sleep(500);\n+        Util.waitForIdle(root.getScene());\n@@ -106,4 +107,4 @@\n-            Platform.runLater(() -> lineColor.set(Color.LIGHTGREEN));\n-            Thread.sleep(300);\n-            Platform.runLater(() -> circleColor.set(Color.LIGHTGREEN));\n-            Thread.sleep(300);\n+            Util.runAndWait(() -> lineColor.set(Color.LIGHTGREEN));\n+            Util.waitForIdle(root.getScene());\n+            Util.runAndWait(() -> circleColor.set(Color.LIGHTGREEN));\n+            Util.waitForIdle(root.getScene());\n@@ -113,4 +114,4 @@\n-            Platform.runLater(() -> lineColor.set(Color.DARKGREEN));\n-            Thread.sleep(300);\n-            Platform.runLater(() -> circleColor.set(Color.DARKGREEN));\n-            Thread.sleep(300);\n+            Util.runAndWait(() -> lineColor.set(Color.DARKGREEN));\n+            Util.waitForIdle(root.getScene());\n+            Util.runAndWait(() -> circleColor.set(Color.DARKGREEN));\n+            Util.waitForIdle(root.getScene());\n@@ -124,1 +125,1 @@\n-        runAndWait(() -> {\n+        Util.runAndWait(() -> {\n@@ -134,1 +135,1 @@\n-        Assert.assertEquals(\"A node was not rendered properly. Wrong color found\", expected, image.getPixelReader().getColor(1, 1));\n+        Assert.assertEquals(\"A node was not rendered properly. Wrong color found\", name(expected), name(image.getPixelReader().getColor(1, 1)));\n@@ -137,8 +138,10 @@\n-    private void runAndWait(Runnable action) {\n-        try {\n-            CompletableFuture.runAsync(action, Platform::runLater).get(5000, TimeUnit.MILLISECONDS);\n-        } catch (ExecutionException e) {\n-            if (e.getCause() instanceof AssertionError error) {\n-                throw error;\n-            } else {\n-                throw new RuntimeException(e);\n+    private String name(Color color) {\n+        for (Field field : Color.class.getFields()) {\n+            if (field.getType().isAssignableFrom(Color.class) && (field.getModifiers() & Modifier.STATIC) != 0) {\n+                try {\n+                    Color c = (Color) field.get(null);\n+                    if (c.getRed() == color.getRed() && c.getGreen() == color.getGreen() && c.getBlue() == color.getBlue() && c.getOpacity() == color.getOpacity()) {\n+                        return field.getName();\n+                    }\n+                } catch (IllegalAccessException e) {\n+                }\n@@ -146,2 +149,0 @@\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n@@ -149,0 +150,1 @@\n+        return color.toString();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/NGNodeDirtyFlagTest.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"}]}