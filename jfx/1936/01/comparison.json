{"files":[{"patch":"@@ -33,0 +33,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n@@ -41,1 +44,0 @@\n-import javafx.beans.value.ObservableValue;\n@@ -68,1 +70,1 @@\n- * {@link #leadingProperty() leading}, {@link #centerProperty() center}, and {@link #trailingProperty() trailing}.\n+ * {@link #leftProperty() left}, {@link #centerProperty() center}, and {@link #rightProperty() right}.\n@@ -75,1 +77,1 @@\n- * {@link #leftSystemInsetProperty() leftSystemInset} and {@link #rightSystemInsetProperty() rightSystemInset},\n+ * {@link #leftSystemInsetProperty(Stage) leftSystemInset} and {@link #rightSystemInsetProperty(Stage) rightSystemInset},\n@@ -83,2 +85,2 @@\n- * two header bars. In this case, the {@link #leadingSystemPaddingProperty() leadingSystemPadding} and\n- * {@link #trailingSystemPaddingProperty() trailingSystemPadding} properties can be used to remove the padding\n+ * two header bars. In this case, the {@link #leftSystemPaddingProperty() leftSystemPadding} and\n+ * {@link #rightSystemPaddingProperty() rightSystemPadding} properties can be used to remove the padding\n@@ -93,0 +95,6 @@\n+ * <h2>Color scheme<\/h2>\n+ * The color scheme of the default header buttons is automatically adjusted to remain easily recognizable\n+ * by inspecting the {@link Scene#fillProperty() Scene.fill} property to gauge the brightness of the user\n+ * interface. Applications should set the scene fill to a color that matches the user interface of the header\n+ * bar area, even if the scene fill is not visible because it is obscured by other controls.\n+ *\n@@ -109,1 +117,1 @@\n- * The {@code leading} and {@code trailing} children will be resized to their preferred widths and extend the\n+ * The {@code left} and {@code right} children will be resized to their preferred widths and extend the\n@@ -273,0 +281,69 @@\n+    \/**\n+     * Describes the size of the left system-reserved inset, which is an area reserved for the iconify, maximize,\n+     * and close window buttons. If there are no window buttons on the left side of the window, the returned area\n+     * is an empty {@code Dimension2D}.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code leftSystemInset} property\n+     *\/\n+    public static ReadOnlyObjectProperty<Dimension2D> leftSystemInsetProperty(Stage stage) {\n+        return AttachedProperties.of(stage).leftSystemInset.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #leftSystemInsetProperty(Stage) leftSystemInset} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the size of the left system-reserved inset\n+     *\/\n+    public static Dimension2D getLeftSystemInset(Stage stage) {\n+        return AttachedProperties.of(stage).leftSystemInset.get();\n+    }\n+\n+    \/**\n+     * Describes the size of the right system-reserved inset, which is an area reserved for the iconify, maximize,\n+     * and close window buttons. If there are no window buttons on the right side of the window, the returned area\n+     * is an empty {@code Dimension2D}.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code rightSystemInset} property\n+     *\/\n+    public static ReadOnlyObjectProperty<Dimension2D> rightSystemInsetProperty(Stage stage) {\n+        return AttachedProperties.of(stage).rightSystemInset.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #rightSystemInsetProperty(Stage) rightSystemInset} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the size of the right system-reserved inset\n+     *\/\n+    public static Dimension2D getRightSystemInset(Stage stage) {\n+        return AttachedProperties.of(stage).rightSystemInset.get();\n+    }\n+\n+    \/**\n+     * The system-provided minimum recommended height for the {@code HeaderBar}, which usually corresponds\n+     * to the height of the default header buttons. Applications can use this value as a sensible lower limit\n+     * for the height of the {@code HeaderBar}.\n+     * <p>\n+     * By default, {@code HeaderBar}.{@link #minHeightProperty() minHeight} is set to the value of\n+     * {@code minSystemHeight}, unless {@code minHeight} is explicitly set by a stylesheet or application code.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code minSystemHeight} property\n+     *\/\n+    public static ReadOnlyDoubleProperty minSystemHeightProperty(Stage stage) {\n+        return AttachedProperties.of(stage).minSystemHeight.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #minSystemHeightProperty(Stage) minSystemHeight} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the system-provided minimum recommended height for the {@code HeaderBar}\n+     *\/\n+    public static double getMinSystemHeight(Stage stage) {\n+        return AttachedProperties.of(stage).minSystemHeight.get();\n+    }\n+\n@@ -317,3 +394,1 @@\n-    private Subscription subscription = Subscription.EMPTY;\n-    private HeaderButtonMetrics currentMetrics;\n-    private boolean currentFullScreen;\n+    private Subscription subscriptions = Subscription.EMPTY;\n@@ -331,1 +406,1 @@\n-        ObservableValue<Stage> stage = sceneProperty()\n+        sceneProperty()\n@@ -333,7 +408,2 @@\n-            .map(w -> w instanceof Stage s ? s : null);\n-\n-        stage.flatMap(Stage::fullScreenProperty)\n-            .orElse(false)\n-            .subscribe(this::onFullScreenChanged);\n-\n-        stage.subscribe(this::onStageChanged);\n+            .map(w -> w instanceof Stage stage ? stage : null)\n+            .subscribe(this::onStageChanged);\n@@ -345,1 +415,1 @@\n-     * @param leading the leading node, or {@code null}\n+     * @param left the left node, or {@code null}\n@@ -347,1 +417,1 @@\n-     * @param trailing the trailing node, or {@code null}\n+     * @param right the right node, or {@code null}\n@@ -349,1 +419,1 @@\n-    public HeaderBar(Node leading, Node center, Node trailing) {\n+    public HeaderBar(Node left, Node center, Node right) {\n@@ -351,1 +421,1 @@\n-        setLeading(leading);\n+        setLeft(left);\n@@ -353,31 +423,1 @@\n-        setTrailing(trailing);\n-    }\n-\n-    private void onStageChanged(Stage stage) {\n-        subscription.unsubscribe();\n-\n-        if (stage != null) {\n-            subscription = StageHelper.getHeaderButtonMetrics(stage).subscribe(this::onMetricsChanged);\n-        }\n-    }\n-\n-    private void onMetricsChanged(HeaderButtonMetrics metrics) {\n-        currentMetrics = metrics;\n-        updateInsets();\n-    }\n-\n-    private void onFullScreenChanged(boolean fullScreen) {\n-        currentFullScreen = fullScreen;\n-        updateInsets();\n-    }\n-\n-    private void updateInsets() {\n-        if (currentFullScreen || currentMetrics == null) {\n-            leftSystemInset.set(EMPTY);\n-            rightSystemInset.set(EMPTY);\n-            minSystemHeight.set(0);\n-        } else {\n-            leftSystemInset.set(currentMetrics.leftInset());\n-            rightSystemInset.set(currentMetrics.rightInset());\n-            minSystemHeight.set(currentMetrics.minHeight());\n-        }\n+        setRight(right);\n@@ -387,80 +427,1 @@\n-     * Describes the size of the left system-reserved inset, which is an area reserved for the iconify, maximize,\n-     * and close window buttons. If there are no window buttons on the left side of the window, the returned area\n-     * is an empty {@code Dimension2D}.\n-     * <p>\n-     * Note that the left system inset refers to the left side of the window, independent of layout orientation.\n-     *\/\n-    private final ReadOnlyObjectWrapper<Dimension2D> leftSystemInset =\n-        new ReadOnlyObjectWrapper<>(this, \"leftSystemInset\", EMPTY) {\n-            @Override\n-            protected void invalidated() {\n-                requestLayout();\n-            }\n-        };\n-\n-    public final ReadOnlyObjectProperty<Dimension2D> leftSystemInsetProperty() {\n-        return leftSystemInset.getReadOnlyProperty();\n-    }\n-\n-    public final Dimension2D getLeftSystemInset() {\n-        return leftSystemInset.get();\n-    }\n-\n-    \/**\n-     * Describes the size of the right system-reserved inset, which is an area reserved for the iconify, maximize,\n-     * and close window buttons. If there are no window buttons on the right side of the window, the returned area\n-     * is an empty {@code Dimension2D}.\n-     * <p>\n-     * Note that the right system inset refers to the right side of the window, independent of layout orientation.\n-     *\/\n-    private final ReadOnlyObjectWrapper<Dimension2D> rightSystemInset =\n-        new ReadOnlyObjectWrapper<>(this, \"rightSystemInset\", EMPTY) {\n-            @Override\n-            protected void invalidated() {\n-                requestLayout();\n-            }\n-        };\n-\n-    public final ReadOnlyObjectProperty<Dimension2D> rightSystemInsetProperty() {\n-        return rightSystemInset.getReadOnlyProperty();\n-    }\n-\n-    public final Dimension2D getRightSystemInset() {\n-        return rightSystemInset.get();\n-    }\n-\n-    \/**\n-     * The system-provided minimum recommended height for the {@code HeaderBar}, which usually corresponds\n-     * to the height of the default header buttons. Applications can use this value as a sensible lower limit\n-     * for the height of the {@code HeaderBar}.\n-     * <p>\n-     * By default, {@link #minHeightProperty() minHeight} is set to the value of {@code minSystemHeight},\n-     * unless {@code minHeight} is explicitly set by a stylesheet or application code.\n-     *\/\n-    private final ReadOnlyDoubleWrapper minSystemHeight =\n-        new ReadOnlyDoubleWrapper(this, \"minSystemHeight\") {\n-            @Override\n-            protected void invalidated() {\n-                double height = get();\n-                var minHeight = (StyleableDoubleProperty)minHeightProperty();\n-\n-                \/\/ Only change minHeight if it was not set by a stylesheet or application code.\n-                if (minHeight.getStyleOrigin() == null) {\n-                    minHeight.applyStyle(null, height);\n-                }\n-            }\n-        };\n-\n-    public final ReadOnlyDoubleProperty minSystemHeightProperty() {\n-        return minSystemHeight.getReadOnlyProperty();\n-    }\n-\n-    public final double getMinSystemHeight() {\n-        return minSystemHeight.get();\n-    }\n-\n-    \/**\n-     * The leading area of the {@code HeaderBar}.\n-     * <p>\n-     * The leading area corresponds to the left area in a left-to-right layout, and to the right area\n-     * in a right-to-left layout.\n+     * The left area of the {@code HeaderBar}.\n@@ -470,1 +431,1 @@\n-    private final ObjectProperty<Node> leading = new NodeProperty(\"leading\");\n+    private final ObjectProperty<Node> left = new NodeProperty(\"left\");\n@@ -472,2 +433,2 @@\n-    public final ObjectProperty<Node> leadingProperty() {\n-        return leading;\n+    public final ObjectProperty<Node> leftProperty() {\n+        return left;\n@@ -476,2 +437,2 @@\n-    public final Node getLeading() {\n-        return leading.get();\n+    public final Node getLeft() {\n+        return left.get();\n@@ -480,2 +441,2 @@\n-    public final void setLeading(Node value) {\n-        leading.set(value);\n+    public final void setLeft(Node value) {\n+        left.set(value);\n@@ -504,4 +465,1 @@\n-     * The trailing area of the {@code HeaderBar}.\n-     * <p>\n-     * The trailing area corresponds to the right area in a left-to-right layout, and to the left area\n-     * in a right-to-left layout.\n+     * The right area of the {@code HeaderBar}.\n@@ -511,1 +469,1 @@\n-    private final ObjectProperty<Node> trailing = new NodeProperty(\"trailing\");\n+    private final ObjectProperty<Node> right = new NodeProperty(\"right\");\n@@ -513,2 +471,2 @@\n-    public final ObjectProperty<Node> trailingProperty() {\n-        return trailing;\n+    public final ObjectProperty<Node> rightProperty() {\n+        return right;\n@@ -517,2 +475,2 @@\n-    public final Node getTrailing() {\n-        return trailing.get();\n+    public final Node getRight() {\n+        return right.get();\n@@ -521,2 +479,2 @@\n-    public final void setTrailing(Node value) {\n-        trailing.set(value);\n+    public final void setRight(Node value) {\n+        right.set(value);\n@@ -526,1 +484,1 @@\n-     * Specifies whether additional padding should be added to the leading side of the {@code HeaderBar}.\n+     * Specifies whether additional padding should be added to the left side of the {@code HeaderBar}.\n@@ -529,1 +487,1 @@\n-     * header buttons, no additional padding is added to the leading side of the {@code HeaderBar}.\n+     * header buttons, no additional padding is added to the left side of the {@code HeaderBar}.\n@@ -536,1 +494,1 @@\n-     * @see #trailingSystemPaddingProperty() trailingSystemPadding\n+     * @see #rightSystemPaddingProperty() rightSystemPadding\n@@ -538,1 +496,1 @@\n-    private final BooleanProperty leadingSystemPadding = new BooleanPropertyBase(true) {\n+    private final BooleanProperty leftSystemPadding = new BooleanPropertyBase(true) {\n@@ -546,1 +504,1 @@\n-            return \"leadingSystemPadding\";\n+            return \"leftSystemPadding\";\n@@ -555,2 +513,2 @@\n-    public final BooleanProperty leadingSystemPaddingProperty() {\n-        return leadingSystemPadding;\n+    public final BooleanProperty leftSystemPaddingProperty() {\n+        return leftSystemPadding;\n@@ -559,2 +517,2 @@\n-    public final boolean isLeadingSystemPadding() {\n-        return leadingSystemPadding.get();\n+    public final boolean isLeftSystemPadding() {\n+        return leftSystemPadding.get();\n@@ -563,2 +521,2 @@\n-    public final void setLeadingSystemPadding(boolean value) {\n-        leadingSystemPadding.set(value);\n+    public final void setLeftSystemPadding(boolean value) {\n+        leftSystemPadding.set(value);\n@@ -568,1 +526,1 @@\n-     * Specifies whether additional padding should be added to the trailing side of the {@code HeaderBar}.\n+     * Specifies whether additional padding should be added to the right side of the {@code HeaderBar}.\n@@ -571,1 +529,1 @@\n-     * header buttons, no additional padding is added to the trailing side of the {@code HeaderBar}.\n+     * header buttons, no additional padding is added to the right side of the {@code HeaderBar}.\n@@ -578,1 +536,1 @@\n-     * @see #leadingSystemPaddingProperty() leadingSystemPadding\n+     * @see #leftSystemPaddingProperty() leftSystemPadding\n@@ -580,1 +538,1 @@\n-    private final BooleanProperty trailingSystemPadding = new BooleanPropertyBase(true) {\n+    private final BooleanProperty rightSystemPadding = new BooleanPropertyBase(true) {\n@@ -588,1 +546,1 @@\n-            return \"trailingSystemPadding\";\n+            return \"rightSystemPadding\";\n@@ -597,10 +555,2 @@\n-    public final BooleanProperty trailingSystemPaddingProperty() {\n-        return trailingSystemPadding;\n-    }\n-\n-    public final boolean isTrailingSystemPadding() {\n-        return trailingSystemPadding.get();\n-    }\n-\n-    public final void setTrailingSystemPadding(boolean value) {\n-        trailingSystemPadding.set(value);\n+    public final BooleanProperty rightSystemPaddingProperty() {\n+        return rightSystemPadding;\n@@ -609,3 +559,2 @@\n-    private boolean isLeftSystemPadding(NodeOrientation nodeOrientation) {\n-        return nodeOrientation == NodeOrientation.LEFT_TO_RIGHT && isLeadingSystemPadding()\n-            || nodeOrientation == NodeOrientation.RIGHT_TO_LEFT && isTrailingSystemPadding();\n+    public final boolean isRightSystemPadding() {\n+        return rightSystemPadding.get();\n@@ -614,3 +563,2 @@\n-    private boolean isRightSystemPadding(NodeOrientation nodeOrientation) {\n-        return nodeOrientation == NodeOrientation.LEFT_TO_RIGHT && isTrailingSystemPadding()\n-            || nodeOrientation == NodeOrientation.RIGHT_TO_LEFT && isLeadingSystemPadding();\n+    public final void setRightSystemPadding(boolean value) {\n+        rightSystemPadding.set(value);\n@@ -621,1 +569,1 @@\n-        Node leading = getLeading();\n+        Node left = getLeft();\n@@ -623,1 +571,1 @@\n-        Node trailing = getTrailing();\n+        Node right = getRight();\n@@ -628,1 +576,2 @@\n-        double systemPaddingWidth = 0;\n+        double leftSystemPaddingWidth = 0;\n+        double rightSystemPaddingWidth = 0;\n@@ -631,2 +580,2 @@\n-                && (childHasContentBias(leading, Orientation.VERTICAL) ||\n-                    childHasContentBias(trailing, Orientation.VERTICAL) ||\n+                && (childHasContentBias(left, Orientation.VERTICAL) ||\n+                    childHasContentBias(right, Orientation.VERTICAL) ||\n@@ -635,2 +584,2 @@\n-            leftPrefWidth = getAreaWidth(leading, areaHeight, false);\n-            rightPrefWidth = getAreaWidth(trailing, areaHeight, false);\n+            leftPrefWidth = getAreaWidth(left, areaHeight, false);\n+            rightPrefWidth = getAreaWidth(right, areaHeight, false);\n@@ -639,2 +588,2 @@\n-            leftPrefWidth = getAreaWidth(leading, -1, false);\n-            rightPrefWidth = getAreaWidth(trailing, -1, false);\n+            leftPrefWidth = getAreaWidth(left, -1, false);\n+            rightPrefWidth = getAreaWidth(right, -1, false);\n@@ -644,1 +593,4 @@\n-        NodeOrientation nodeOrientation = getEffectiveNodeOrientation();\n+        Scene scene = getScene();\n+        Stage stage = scene != null\n+            ? scene.getWindow() instanceof Stage s ? s : null\n+            : null;\n@@ -646,3 +598,2 @@\n-        if (isLeftSystemPadding(nodeOrientation)) {\n-            systemPaddingWidth += getLeftSystemInset().getWidth();\n-        }\n+        if (stage != null) {\n+            var attachedProperties = AttachedProperties.of(stage);\n@@ -650,2 +601,7 @@\n-        if (isRightSystemPadding(nodeOrientation)) {\n-            systemPaddingWidth += getRightSystemInset().getWidth();\n+            if (scene.getEffectiveNodeOrientation() != getEffectiveNodeOrientation()) {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+            } else {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+            }\n@@ -659,1 +615,2 @@\n-             + systemPaddingWidth;\n+             + leftSystemPaddingWidth\n+             + rightSystemPaddingWidth;\n@@ -664,1 +621,1 @@\n-        Node leading = getLeading();\n+        Node left = getLeft();\n@@ -666,1 +623,1 @@\n-        Node trailing = getTrailing();\n+        Node right = getRight();\n@@ -668,2 +625,2 @@\n-        double leadingMinHeight = getAreaHeight(leading, -1, true);\n-        double trailingMinHeight = getAreaHeight(trailing, -1, true);\n+        double leftMinHeight = getAreaHeight(left, -1, true);\n+        double rightMinHeight = getAreaHeight(right, -1, true);\n@@ -673,3 +630,3 @@\n-            double leadingPrefWidth = getAreaWidth(leading, -1, false);\n-            double trailingPrefWidth = getAreaWidth(trailing, -1, false);\n-            centerMinHeight = getAreaHeight(center, Math.max(0, width - leadingPrefWidth - trailingPrefWidth), true);\n+            double leftPrefWidth = getAreaWidth(left, -1, false);\n+            double rightPrefWidth = getAreaWidth(right, -1, false);\n+            centerMinHeight = getAreaHeight(center, Math.max(0, width - leftPrefWidth - rightPrefWidth), true);\n@@ -682,1 +639,1 @@\n-             + Math.max(centerMinHeight, Math.max(trailingMinHeight, leadingMinHeight));\n+             + Math.max(centerMinHeight, Math.max(rightMinHeight, leftMinHeight));\n@@ -687,1 +644,1 @@\n-        Node leading = getLeading();\n+        Node left = getLeft();\n@@ -689,1 +646,1 @@\n-        Node trailing = getTrailing();\n+        Node right = getRight();\n@@ -691,2 +648,2 @@\n-        double leadingPrefHeight = getAreaHeight(leading, -1, false);\n-        double trailingPrefHeight = getAreaHeight(trailing, -1, false);\n+        double leftPrefHeight = getAreaHeight(left, -1, false);\n+        double rightPrefHeight = getAreaHeight(right, -1, false);\n@@ -696,3 +653,3 @@\n-            double leadingPrefWidth = getAreaWidth(leading, -1, false);\n-            double trailingPrefWidth = getAreaWidth(trailing, -1, false);\n-            centerPrefHeight = getAreaHeight(center, Math.max(0, width - leadingPrefWidth - trailingPrefWidth), false);\n+            double leftPrefWidth = getAreaWidth(left, -1, false);\n+            double rightPrefWidth = getAreaWidth(right, -1, false);\n+            centerPrefHeight = getAreaHeight(center, Math.max(0, width - leftPrefWidth - rightPrefWidth), false);\n@@ -705,6 +662,1 @@\n-             + Math.max(centerPrefHeight, Math.max(trailingPrefHeight, leadingPrefHeight));\n-    }\n-\n-    @Override\n-    public boolean usesMirroring() {\n-        return false;\n+             + Math.max(centerPrefHeight, Math.max(rightPrefHeight, leftPrefHeight));\n@@ -715,0 +667,1 @@\n+        Node left = getLeft();\n@@ -716,1 +669,1 @@\n-        Node left, right;\n+        Node right = getRight();\n@@ -718,2 +671,0 @@\n-        NodeOrientation nodeOrientation = getEffectiveNodeOrientation();\n-        boolean rtl = nodeOrientation == NodeOrientation.RIGHT_TO_LEFT;\n@@ -726,14 +677,18 @@\n-        double insideX, insideWidth;\n-        double leftSystemPaddingWidth = isLeftSystemPadding(nodeOrientation) ? getLeftSystemInset().getWidth() : 0;\n-        double rightSystemPaddingWidth = isRightSystemPadding(nodeOrientation) ? getRightSystemInset().getWidth() : 0;\n-\n-        if (rtl) {\n-            left = getTrailing();\n-            right = getLeading();\n-            insideX = insets.getRight() + leftSystemPaddingWidth;\n-            insideWidth = width - insideX - insets.getLeft() - rightSystemPaddingWidth;\n-        } else {\n-            left = getLeading();\n-            right = getTrailing();\n-            insideX = insets.getLeft() + leftSystemPaddingWidth;\n-            insideWidth = width - insideX - insets.getRight() - rightSystemPaddingWidth;\n+        double rightSystemPaddingWidth = 0;\n+        double leftSystemPaddingWidth = 0;\n+\n+        Scene scene = getScene();\n+        Stage stage = scene != null\n+            ? scene.getWindow() instanceof Stage s ? s : null\n+            : null;\n+\n+        if (stage != null) {\n+            AttachedProperties attachedProperties = AttachedProperties.of(stage);\n+\n+            if (scene.getEffectiveNodeOrientation() != getEffectiveNodeOrientation()) {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+            } else {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+            }\n@@ -742,0 +697,3 @@\n+        double insideX = insets.getLeft() + leftSystemPaddingWidth;\n+        double insideWidth = width - insideX - insets.getRight() - rightSystemPaddingWidth;\n+\n@@ -743,1 +701,1 @@\n-            Insets leftMargin = adjustMarginForRTL(getNodeMargin(left), rtl);\n+            Insets leftMargin = getNodeMargin(left);\n@@ -759,1 +717,1 @@\n-            Insets rightMargin = adjustMarginForRTL(getNodeMargin(right), rtl);\n+            Insets rightMargin = getNodeMargin(right);\n@@ -775,1 +733,1 @@\n-            Insets centerMargin = adjustMarginForRTL(getNodeMargin(center), rtl);\n+            Insets centerMargin = getNodeMargin(center);\n@@ -812,10 +770,0 @@\n-    private Insets adjustMarginForRTL(Insets margin, boolean rtl) {\n-        if (margin == null) {\n-            return null;\n-        }\n-\n-        return rtl\n-            ? new Insets(margin.getTop(), margin.getLeft(), margin.getBottom(), margin.getRight())\n-            : margin;\n-    }\n-\n@@ -867,0 +815,20 @@\n+    private void onStageChanged(Stage stage) {\n+        subscriptions.unsubscribe();\n+\n+        if (stage != null) {\n+            var attachedProperties = AttachedProperties.of(stage);\n+\n+            subscriptions = Subscription.combine(\n+                attachedProperties.minSystemHeight.subscribe(height -> {\n+                    var minHeight = (StyleableDoubleProperty)minHeightProperty();\n+\n+                    \/\/ Only change minHeight if it was not set by a stylesheet or application code.\n+                    if (minHeight.getStyleOrigin() == null) {\n+                        minHeight.applyStyle(null, height);\n+                    }\n+                }),\n+                attachedProperties.subscribeLayoutInvalidated(this::requestLayout)\n+            );\n+        }\n+    }\n+\n@@ -898,0 +866,81 @@\n+\n+    \/**\n+     * This class holds attached properties that are defined on {@code HeaderBar}, but associated\n+     * with and stored per {@code Stage}. {@code HeaderBar} uses these properties for layout purposes,\n+     * and also subscribes to invalidation notifications that cause {@code HeaderBar} to request a\n+     * new layout pass.\n+     *\/\n+    private static final class AttachedProperties {\n+\n+        private final Stage stage;\n+        private final ReadOnlyObjectWrapper<Dimension2D> leftSystemInset;\n+        private final ReadOnlyObjectWrapper<Dimension2D> rightSystemInset;\n+        private final ReadOnlyDoubleWrapper minSystemHeight;\n+        private final List<Runnable> layoutInvalidatedListeners = new ArrayList<>();\n+\n+        private boolean currentFullScreen;\n+        private HeaderButtonMetrics currentMetrics;\n+\n+        AttachedProperties(Stage stage) {\n+            this.stage = stage;\n+            this.leftSystemInset = new ReadOnlyObjectWrapper<>(stage, \"HeaderBar.leftSystemInset\", EMPTY);\n+            this.rightSystemInset = new ReadOnlyObjectWrapper<>(stage, \"HeaderBar.rightSystemInset\", EMPTY);\n+            this.minSystemHeight = new ReadOnlyDoubleWrapper(stage, \"HeaderBar.minSystemHeight\");\n+\n+            StageHelper.getHeaderButtonMetrics(stage).subscribe(this::onMetricsChanged);\n+            stage.fullScreenProperty().subscribe(this::onFullScreenChanged);\n+            stage.sceneProperty().flatMap(Scene::effectiveNodeOrientationProperty).subscribe(this::updateInsets);\n+        }\n+\n+        public static AttachedProperties of(Stage stage) {\n+            var instance = (AttachedProperties)Objects.requireNonNull(stage, \"Stage cannot be null\")\n+                .getProperties()\n+                .get(AttachedProperties.class);\n+\n+            if (instance == null) {\n+                instance = new AttachedProperties(stage);\n+                stage.getProperties().put(AttachedProperties.class, instance);\n+            }\n+\n+            return instance;\n+        }\n+\n+        public Subscription subscribeLayoutInvalidated(Runnable listener) {\n+            layoutInvalidatedListeners.add(listener);\n+            return () -> layoutInvalidatedListeners.remove(listener);\n+        }\n+\n+        private void onMetricsChanged(HeaderButtonMetrics metrics) {\n+            currentMetrics = metrics;\n+\n+            updateInsets(stage.getScene() instanceof Scene scene\n+                ? scene.getEffectiveNodeOrientation()\n+                : NodeOrientation.LEFT_TO_RIGHT);\n+        }\n+\n+        private void onFullScreenChanged(boolean fullScreen) {\n+            currentFullScreen = fullScreen;\n+\n+            updateInsets(stage.getScene() instanceof Scene scene\n+                ? scene.getEffectiveNodeOrientation()\n+                : NodeOrientation.LEFT_TO_RIGHT);\n+        }\n+\n+        private void updateInsets(NodeOrientation orientation) {\n+            if (currentFullScreen || currentMetrics == null) {\n+                leftSystemInset.set(EMPTY);\n+                rightSystemInset.set(EMPTY);\n+                minSystemHeight.set(0);\n+            } else if (orientation == NodeOrientation.LEFT_TO_RIGHT) {\n+                leftSystemInset.set(currentMetrics.leftInset());\n+                rightSystemInset.set(currentMetrics.rightInset());\n+                minSystemHeight.set(currentMetrics.minHeight());\n+            } else {\n+                leftSystemInset.set(currentMetrics.rightInset());\n+                rightSystemInset.set(currentMetrics.leftInset());\n+                minSystemHeight.set(currentMetrics.minHeight());\n+            }\n+\n+            layoutInvalidatedListeners.forEach(Runnable::run);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBar.java","additions":298,"deletions":249,"binary":false,"changes":547,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.Method;\n@@ -43,0 +44,1 @@\n+import org.junit.jupiter.api.AfterEach;\n@@ -55,0 +57,2 @@\n+    Stage stage;\n+    Scene scene;\n@@ -60,0 +64,20 @@\n+        scene = new Scene(headerBar);\n+        stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        stage.close();\n+    }\n+\n+    <T> T getAttachedProperty(String name) {\n+        try {\n+            Class<?> propertiesClass = Class.forName(HeaderBar.class.getName() + \"$AttachedProperties\");\n+            Method method = propertiesClass.getMethod(\"of\", Stage.class);\n+            method.setAccessible(true);\n+            return ReflectionUtils.getFieldValue(method.invoke(null, stage), name);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n@@ -64,1 +88,1 @@\n-        assertNull(headerBar.getLeading());\n+        assertNull(headerBar.getLeft());\n@@ -66,1 +90,1 @@\n-        assertNull(headerBar.getTrailing());\n+        assertNull(headerBar.getRight());\n@@ -71,1 +95,1 @@\n-        DoubleProperty minSystemHeight = ReflectionUtils.getFieldValue(headerBar, \"minSystemHeight\");\n+        DoubleProperty minSystemHeight = getAttachedProperty(\"minSystemHeight\");\n@@ -94,1 +118,1 @@\n-        void alignmentOfLeadingChildOnly_resizable(Pos pos, double x, double y, double width, double height) {\n+        void alignmentOfLeftChildOnly_resizable(Pos pos, double x, double y, double width, double height) {\n@@ -98,1 +122,1 @@\n-            headerBar.setLeading(content);\n+            headerBar.setLeft(content);\n@@ -117,1 +141,1 @@\n-        void alignmentOfLeadingChildOnly_notResizable(Pos pos, double x, double y, double width, double height) {\n+        void alignmentOfLeftChildOnly_notResizable(Pos pos, double x, double y, double width, double height) {\n@@ -121,1 +145,1 @@\n-            headerBar.setLeading(content);\n+            headerBar.setLeft(content);\n@@ -140,1 +164,1 @@\n-        void alignmentOfTrailingChildOnly_resizable(Pos pos, double x, double y, double width, double height) {\n+        void alignmentOfRightChildOnly_resizable(Pos pos, double x, double y, double width, double height) {\n@@ -144,1 +168,1 @@\n-            headerBar.setTrailing(content);\n+            headerBar.setRight(content);\n@@ -163,1 +187,1 @@\n-        void alignmentOfTrailingChildOnly_notResizable(Pos pos, double x, double y, double width, double height) {\n+        void alignmentOfRightChildOnly_notResizable(Pos pos, double x, double y, double width, double height) {\n@@ -167,1 +191,1 @@\n-            headerBar.setTrailing(content);\n+            headerBar.setRight(content);\n@@ -233,1 +257,1 @@\n-        void alignmentOfCenterChild_resizable_withNonEmptyLeadingAndTrailingChild(\n+        void alignmentOfCenterChild_resizable_withNonEmptyLeftAndRightChild(\n@@ -235,1 +259,1 @@\n-            var leading = new MockResizable(50, 50);\n+            var left = new MockResizable(50, 50);\n@@ -237,1 +261,1 @@\n-            var trailing = new MockResizable(150, 50);\n+            var right = new MockResizable(150, 50);\n@@ -240,1 +264,1 @@\n-            headerBar.setLeading(leading);\n+            headerBar.setLeft(left);\n@@ -242,1 +266,1 @@\n-            headerBar.setTrailing(trailing);\n+            headerBar.setRight(right);\n@@ -261,1 +285,1 @@\n-        void alignmentOfCenterChild_notResizable_withNonEmptyLeadingAndTrailingChild(\n+        void alignmentOfCenterChild_notResizable_withNonEmptyLeftAndRightChild(\n@@ -263,1 +287,1 @@\n-            var leading = new Rectangle(50, 50);\n+            var left = new Rectangle(50, 50);\n@@ -265,1 +289,1 @@\n-            var trailing = new Rectangle(150, 50);\n+            var right = new Rectangle(150, 50);\n@@ -268,1 +292,1 @@\n-            headerBar.setLeading(leading);\n+            headerBar.setLeft(left);\n@@ -270,1 +294,1 @@\n-            headerBar.setTrailing(trailing);\n+            headerBar.setRight(right);\n@@ -290,1 +314,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -309,1 +333,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -327,1 +351,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -346,1 +370,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -359,1 +383,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -372,1 +396,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -379,1 +403,1 @@\n-            var leading = new MockResizable(50, 50);\n+            var left = new MockResizable(50, 50);\n@@ -381,1 +405,1 @@\n-            var trailing = new MockResizable(150, 50);\n+            var right = new MockResizable(150, 50);\n@@ -384,1 +408,1 @@\n-            headerBar.setLeading(leading);\n+            headerBar.setLeft(left);\n@@ -386,1 +410,1 @@\n-            headerBar.setTrailing(trailing);\n+            headerBar.setRight(right);\n@@ -399,1 +423,1 @@\n-        void alignmentOfLeadingChild_notResizable_withoutReservedArea(\n+        void alignmentOfLeftChild_notResizable_withoutReservedArea(\n@@ -401,1 +425,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -403,5 +427,5 @@\n-            var leading = new Rectangle(50, 50);\n-            HeaderBar.setAlignment(leading, pos);\n-            HeaderBar.setMargin(leading, new Insets(10));\n-            headerBar.setLeadingSystemPadding(false);\n-            headerBar.setLeading(leading);\n+            var left = new Rectangle(50, 50);\n+            HeaderBar.setAlignment(left, pos);\n+            HeaderBar.setMargin(left, new Insets(10));\n+            headerBar.setLeftSystemPadding(false);\n+            headerBar.setLeft(left);\n@@ -411,1 +435,1 @@\n-            assertBounds(x, y, width, height, leading);\n+            assertBounds(x, y, width, height, left);\n@@ -420,1 +444,1 @@\n-        void alignmentOfTrailingChild_notResizable_withoutReservedArea(\n+        void alignmentOfRightChild_notResizable_withoutReservedArea(\n@@ -422,1 +446,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -424,5 +448,5 @@\n-            var trailing = new Rectangle(50, 50);\n-            HeaderBar.setAlignment(trailing, pos);\n-            HeaderBar.setMargin(trailing, new Insets(10));\n-            headerBar.setTrailingSystemPadding(false);\n-            headerBar.setTrailing(trailing);\n+            var right = new Rectangle(50, 50);\n+            HeaderBar.setAlignment(right, pos);\n+            HeaderBar.setMargin(right, new Insets(10));\n+            headerBar.setRightSystemPadding(false);\n+            headerBar.setRight(right);\n@@ -432,1 +456,1 @@\n-            assertBounds(x, y, width, height, trailing);\n+            assertBounds(x, y, width, height, right);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/HeaderBarTest.java","additions":71,"deletions":47,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-                default -> headerBar.getMinSystemHeight();\n+                default -> HeaderBar.getMinSystemHeight(stage);\n@@ -187,1 +187,1 @@\n-        headerBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+        HeaderBar.minSystemHeightProperty(stage).subscribe(event -> updateMinHeight.run());\n@@ -201,3 +201,3 @@\n-        var leadingContent = new HBox(menuBar);\n-        HeaderBar.setDragType(leadingContent, HeaderDragType.DRAGGABLE);\n-        headerBar.setLeading(leadingContent);\n+        var leftContent = new HBox(menuBar);\n+        HeaderBar.setDragType(leftContent, HeaderDragType.DRAGGABLE);\n+        headerBar.setLeft(leftContent);\n@@ -225,1 +225,1 @@\n-            leadingContent.getChildren().add(adaptiveButtonHeight);\n+            leftContent.getChildren().add(adaptiveButtonHeight);\n@@ -228,4 +228,4 @@\n-        var trailingNodes = new HBox(sizeComboBox);\n-        trailingNodes.setAlignment(Pos.CENTER);\n-        trailingNodes.setSpacing(5);\n-        headerBar.setTrailing(trailingNodes);\n+        var rightNodes = new HBox(sizeComboBox);\n+        rightNodes.setAlignment(Pos.CENTER);\n+        rightNodes.setSpacing(5);\n+        headerBar.setRight(rightNodes);\n@@ -234,1 +234,1 @@\n-            trailingNodes.getChildren().addAll(createCustomWindowButtons());\n+            rightNodes.getChildren().addAll(createCustomWindowButtons());\n@@ -247,1 +247,1 @@\n-        leftHeaderBar.setLeading(new Button(\"\\u2728\"));\n+        leftHeaderBar.setLeft(new Button(\"\\u2728\"));\n@@ -249,1 +249,1 @@\n-        leftHeaderBar.setTrailingSystemPadding(false);\n+        leftHeaderBar.setRightSystemPadding(false);\n@@ -253,1 +253,1 @@\n-        rightHeaderBar.setLeadingSystemPadding(false);\n+        rightHeaderBar.setLeftSystemPadding(false);\n@@ -262,1 +262,1 @@\n-                default -> rightHeaderBar.getMinSystemHeight();\n+                default -> HeaderBar.getMinSystemHeight(stage);\n@@ -266,1 +266,1 @@\n-        rightHeaderBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+        HeaderBar.minSystemHeightProperty(stage).subscribe(event -> updateMinHeight.run());\n@@ -268,4 +268,4 @@\n-        var trailingNodes = new HBox(sizeComboBox);\n-        trailingNodes.setAlignment(Pos.CENTER);\n-        trailingNodes.setSpacing(5);\n-        rightHeaderBar.setTrailing(trailingNodes);\n+        var rightNodes = new HBox(sizeComboBox);\n+        rightNodes.setAlignment(Pos.CENTER);\n+        rightNodes.setSpacing(5);\n+        rightHeaderBar.setRight(rightNodes);\n@@ -274,1 +274,1 @@\n-            trailingNodes.getChildren().addAll(createCustomWindowButtons());\n+            rightNodes.getChildren().addAll(createCustomWindowButtons());\n@@ -278,1 +278,1 @@\n-        rightHeaderBar.setTrailing(trailingNodes);\n+        rightHeaderBar.setRight(rightNodes);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/StageTesterWindow.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"}]}