{"files":[{"patch":"@@ -33,0 +33,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n@@ -41,1 +44,0 @@\n-import javafx.beans.value.ObservableValue;\n@@ -75,1 +77,1 @@\n- * {@link #leftSystemInsetProperty() leftSystemInset} and {@link #rightSystemInsetProperty() rightSystemInset},\n+ * {@link #leftSystemInsetProperty(Stage) leftSystemInset} and {@link #rightSystemInsetProperty(Stage) rightSystemInset},\n@@ -279,0 +281,69 @@\n+    \/**\n+     * Describes the size of the left system-reserved inset, which is an area reserved for the iconify, maximize,\n+     * and close window buttons. If there are no window buttons on the left side of the window, the returned area\n+     * is an empty {@code Dimension2D}.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code leftSystemInset} property\n+     *\/\n+    public static ReadOnlyObjectProperty<Dimension2D> leftSystemInsetProperty(Stage stage) {\n+        return AttachedProperties.of(stage).leftSystemInset.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #leftSystemInsetProperty(Stage) leftSystemInset} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the size of the left system-reserved inset\n+     *\/\n+    public static Dimension2D getLeftSystemInset(Stage stage) {\n+        return AttachedProperties.of(stage).leftSystemInset.get();\n+    }\n+\n+    \/**\n+     * Describes the size of the right system-reserved inset, which is an area reserved for the iconify, maximize,\n+     * and close window buttons. If there are no window buttons on the right side of the window, the returned area\n+     * is an empty {@code Dimension2D}.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code rightSystemInset} property\n+     *\/\n+    public static ReadOnlyObjectProperty<Dimension2D> rightSystemInsetProperty(Stage stage) {\n+        return AttachedProperties.of(stage).rightSystemInset.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #rightSystemInsetProperty(Stage) rightSystemInset} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the size of the right system-reserved inset\n+     *\/\n+    public static Dimension2D getRightSystemInset(Stage stage) {\n+        return AttachedProperties.of(stage).rightSystemInset.get();\n+    }\n+\n+    \/**\n+     * The system-provided minimum recommended height for the {@code HeaderBar}, which usually corresponds\n+     * to the height of the default header buttons. Applications can use this value as a sensible lower limit\n+     * for the height of the {@code HeaderBar}.\n+     * <p>\n+     * By default, {@code HeaderBar}.{@link #minHeightProperty() minHeight} is set to the value of\n+     * {@code minSystemHeight}, unless {@code minHeight} is explicitly set by a stylesheet or application code.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the {@code minSystemHeight} property\n+     *\/\n+    public static ReadOnlyDoubleProperty minSystemHeightProperty(Stage stage) {\n+        return AttachedProperties.of(stage).minSystemHeight.getReadOnlyProperty();\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #minSystemHeightProperty(Stage) minSystemHeight} property.\n+     *\n+     * @param stage the {@code Stage}\n+     * @return the system-provided minimum recommended height for the {@code HeaderBar}\n+     *\/\n+    public static double getMinSystemHeight(Stage stage) {\n+        return AttachedProperties.of(stage).minSystemHeight.get();\n+    }\n+\n@@ -323,3 +394,1 @@\n-    private Subscription subscription = Subscription.EMPTY;\n-    private HeaderButtonMetrics currentMetrics;\n-    private boolean currentFullScreen;\n+    private Subscription subscriptions = Subscription.EMPTY;\n@@ -337,3 +406,1 @@\n-        effectiveNodeOrientationProperty().subscribe(this::updateInsets);\n-\n-        ObservableValue<Stage> stage = sceneProperty()\n+        sceneProperty()\n@@ -341,7 +408,2 @@\n-            .map(w -> w instanceof Stage s ? s : null);\n-\n-        stage.flatMap(Stage::fullScreenProperty)\n-            .orElse(false)\n-            .subscribe(this::onFullScreenChanged);\n-\n-        stage.subscribe(this::onStageChanged);\n+            .map(w -> w instanceof Stage stage ? stage : null)\n+            .subscribe(this::onStageChanged);\n@@ -364,106 +426,0 @@\n-    private void onStageChanged(Stage stage) {\n-        subscription.unsubscribe();\n-\n-        if (stage != null) {\n-            subscription = StageHelper.getHeaderButtonMetrics(stage).subscribe(this::onMetricsChanged);\n-        }\n-    }\n-\n-    private void onMetricsChanged(HeaderButtonMetrics metrics) {\n-        currentMetrics = metrics;\n-        updateInsets(getEffectiveNodeOrientation());\n-    }\n-\n-    private void onFullScreenChanged(boolean fullScreen) {\n-        currentFullScreen = fullScreen;\n-        updateInsets(getEffectiveNodeOrientation());\n-    }\n-\n-    private void updateInsets(NodeOrientation orientation) {\n-        if (currentFullScreen || currentMetrics == null) {\n-            leftSystemInset.set(EMPTY);\n-            rightSystemInset.set(EMPTY);\n-            minSystemHeight.set(0);\n-        } else if (orientation == NodeOrientation.LEFT_TO_RIGHT) {\n-            leftSystemInset.set(currentMetrics.leftInset());\n-            rightSystemInset.set(currentMetrics.rightInset());\n-            minSystemHeight.set(currentMetrics.minHeight());\n-        } else {\n-            leftSystemInset.set(currentMetrics.rightInset());\n-            rightSystemInset.set(currentMetrics.leftInset());\n-            minSystemHeight.set(currentMetrics.minHeight());\n-        }\n-    }\n-\n-    \/**\n-     * Describes the size of the left system-reserved inset, which is an area reserved for the iconify, maximize,\n-     * and close window buttons. If there are no window buttons on the left side of the window, the returned area\n-     * is an empty {@code Dimension2D}.\n-     *\/\n-    private final ReadOnlyObjectWrapper<Dimension2D> leftSystemInset =\n-        new ReadOnlyObjectWrapper<>(this, \"leftSystemInset\", EMPTY) {\n-            @Override\n-            protected void invalidated() {\n-                requestLayout();\n-            }\n-        };\n-\n-    public final ReadOnlyObjectProperty<Dimension2D> leftSystemInsetProperty() {\n-        return leftSystemInset.getReadOnlyProperty();\n-    }\n-\n-    public final Dimension2D getLeftSystemInset() {\n-        return leftSystemInset.get();\n-    }\n-\n-    \/**\n-     * Describes the size of the right system-reserved inset, which is an area reserved for the iconify, maximize,\n-     * and close window buttons. If there are no window buttons on the right side of the window, the returned area\n-     * is an empty {@code Dimension2D}.\n-     *\/\n-    private final ReadOnlyObjectWrapper<Dimension2D> rightSystemInset =\n-        new ReadOnlyObjectWrapper<>(this, \"rightSystemInset\", EMPTY) {\n-            @Override\n-            protected void invalidated() {\n-                requestLayout();\n-            }\n-        };\n-\n-    public final ReadOnlyObjectProperty<Dimension2D> rightSystemInsetProperty() {\n-        return rightSystemInset.getReadOnlyProperty();\n-    }\n-\n-    public final Dimension2D getRightSystemInset() {\n-        return rightSystemInset.get();\n-    }\n-\n-    \/**\n-     * The system-provided minimum recommended height for the {@code HeaderBar}, which usually corresponds\n-     * to the height of the default header buttons. Applications can use this value as a sensible lower limit\n-     * for the height of the {@code HeaderBar}.\n-     * <p>\n-     * By default, {@link #minHeightProperty() minHeight} is set to the value of {@code minSystemHeight},\n-     * unless {@code minHeight} is explicitly set by a stylesheet or application code.\n-     *\/\n-    private final ReadOnlyDoubleWrapper minSystemHeight =\n-        new ReadOnlyDoubleWrapper(this, \"minSystemHeight\") {\n-            @Override\n-            protected void invalidated() {\n-                double height = get();\n-                var minHeight = (StyleableDoubleProperty)minHeightProperty();\n-\n-                \/\/ Only change minHeight if it was not set by a stylesheet or application code.\n-                if (minHeight.getStyleOrigin() == null) {\n-                    minHeight.applyStyle(null, height);\n-                }\n-            }\n-        };\n-\n-    public final ReadOnlyDoubleProperty minSystemHeightProperty() {\n-        return minSystemHeight.getReadOnlyProperty();\n-    }\n-\n-    public final double getMinSystemHeight() {\n-        return minSystemHeight.get();\n-    }\n-\n@@ -620,0 +576,2 @@\n+        double leftSystemPaddingWidth = 0;\n+        double rightSystemPaddingWidth = 0;\n@@ -635,2 +593,16 @@\n-        double leftSystemPaddingWidth = isLeftSystemPadding() ? getLeftSystemInset().getWidth() : 0;\n-        double rightSystemPaddingWidth = isRightSystemPadding() ? getRightSystemInset().getWidth() : 0;\n+        Scene scene = getScene();\n+        Stage stage = scene != null\n+            ? scene.getWindow() instanceof Stage s ? s : null\n+            : null;\n+\n+        if (stage != null) {\n+            var attachedProperties = AttachedProperties.of(stage);\n+\n+            if (scene.getEffectiveNodeOrientation() != getEffectiveNodeOrientation()) {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+            } else {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+            }\n+        }\n@@ -705,2 +677,20 @@\n-        double leftSystemPaddingWidth = isLeftSystemPadding() ? getLeftSystemInset().getWidth() : 0;\n-        double rightSystemPaddingWidth = isRightSystemPadding() ? getRightSystemInset().getWidth() : 0;\n+        double rightSystemPaddingWidth = 0;\n+        double leftSystemPaddingWidth = 0;\n+\n+        Scene scene = getScene();\n+        Stage stage = scene != null\n+            ? scene.getWindow() instanceof Stage s ? s : null\n+            : null;\n+\n+        if (stage != null) {\n+            AttachedProperties attachedProperties = AttachedProperties.of(stage);\n+\n+            if (scene.getEffectiveNodeOrientation() != getEffectiveNodeOrientation()) {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+            } else {\n+                leftSystemPaddingWidth = isLeftSystemPadding() ? attachedProperties.leftSystemInset.get().getWidth() : 0;\n+                rightSystemPaddingWidth = isRightSystemPadding() ? attachedProperties.rightSystemInset.get().getWidth() : 0;\n+            }\n+        }\n+\n@@ -825,0 +815,20 @@\n+    private void onStageChanged(Stage stage) {\n+        subscriptions.unsubscribe();\n+\n+        if (stage != null) {\n+            var attachedProperties = AttachedProperties.of(stage);\n+\n+            subscriptions = Subscription.combine(\n+                attachedProperties.minSystemHeight.subscribe(height -> {\n+                    var minHeight = (StyleableDoubleProperty)minHeightProperty();\n+\n+                    \/\/ Only change minHeight if it was not set by a stylesheet or application code.\n+                    if (minHeight.getStyleOrigin() == null) {\n+                        minHeight.applyStyle(null, height);\n+                    }\n+                }),\n+                attachedProperties.subscribeLayoutInvalidated(this::requestLayout)\n+            );\n+        }\n+    }\n+\n@@ -856,0 +866,81 @@\n+\n+    \/**\n+     * This class holds attached properties that are defined on {@code HeaderBar}, but associated\n+     * with and stored per {@code Stage}. {@code HeaderBar} uses these properties for layout purposes,\n+     * and also subscribes to invalidation notifications that cause {@code HeaderBar} to request a\n+     * new layout pass.\n+     *\/\n+    private static final class AttachedProperties {\n+\n+        private final Stage stage;\n+        private final ReadOnlyObjectWrapper<Dimension2D> leftSystemInset;\n+        private final ReadOnlyObjectWrapper<Dimension2D> rightSystemInset;\n+        private final ReadOnlyDoubleWrapper minSystemHeight;\n+        private final List<Runnable> layoutInvalidatedListeners = new ArrayList<>();\n+\n+        private boolean currentFullScreen;\n+        private HeaderButtonMetrics currentMetrics;\n+\n+        AttachedProperties(Stage stage) {\n+            this.stage = stage;\n+            this.leftSystemInset = new ReadOnlyObjectWrapper<>(stage, \"HeaderBar.leftSystemInset\", EMPTY);\n+            this.rightSystemInset = new ReadOnlyObjectWrapper<>(stage, \"HeaderBar.rightSystemInset\", EMPTY);\n+            this.minSystemHeight = new ReadOnlyDoubleWrapper(stage, \"HeaderBar.minSystemHeight\");\n+\n+            StageHelper.getHeaderButtonMetrics(stage).subscribe(this::onMetricsChanged);\n+            stage.fullScreenProperty().subscribe(this::onFullScreenChanged);\n+            stage.sceneProperty().flatMap(Scene::effectiveNodeOrientationProperty).subscribe(this::updateInsets);\n+        }\n+\n+        public static AttachedProperties of(Stage stage) {\n+            var instance = (AttachedProperties)Objects.requireNonNull(stage, \"Stage cannot be null\")\n+                .getProperties()\n+                .get(AttachedProperties.class);\n+\n+            if (instance == null) {\n+                instance = new AttachedProperties(stage);\n+                stage.getProperties().put(AttachedProperties.class, instance);\n+            }\n+\n+            return instance;\n+        }\n+\n+        public Subscription subscribeLayoutInvalidated(Runnable listener) {\n+            layoutInvalidatedListeners.add(listener);\n+            return () -> layoutInvalidatedListeners.remove(listener);\n+        }\n+\n+        private void onMetricsChanged(HeaderButtonMetrics metrics) {\n+            currentMetrics = metrics;\n+\n+            updateInsets(stage.getScene() instanceof Scene scene\n+                ? scene.getEffectiveNodeOrientation()\n+                : NodeOrientation.LEFT_TO_RIGHT);\n+        }\n+\n+        private void onFullScreenChanged(boolean fullScreen) {\n+            currentFullScreen = fullScreen;\n+\n+            updateInsets(stage.getScene() instanceof Scene scene\n+                ? scene.getEffectiveNodeOrientation()\n+                : NodeOrientation.LEFT_TO_RIGHT);\n+        }\n+\n+        private void updateInsets(NodeOrientation orientation) {\n+            if (currentFullScreen || currentMetrics == null) {\n+                leftSystemInset.set(EMPTY);\n+                rightSystemInset.set(EMPTY);\n+                minSystemHeight.set(0);\n+            } else if (orientation == NodeOrientation.LEFT_TO_RIGHT) {\n+                leftSystemInset.set(currentMetrics.leftInset());\n+                rightSystemInset.set(currentMetrics.rightInset());\n+                minSystemHeight.set(currentMetrics.minHeight());\n+            } else {\n+                leftSystemInset.set(currentMetrics.rightInset());\n+                rightSystemInset.set(currentMetrics.leftInset());\n+                minSystemHeight.set(currentMetrics.minHeight());\n+            }\n+\n+            layoutInvalidatedListeners.forEach(Runnable::run);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBar.java","additions":216,"deletions":125,"binary":false,"changes":341,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.Method;\n@@ -43,0 +44,1 @@\n+import org.junit.jupiter.api.AfterEach;\n@@ -55,0 +57,2 @@\n+    Stage stage;\n+    Scene scene;\n@@ -60,0 +64,20 @@\n+        scene = new Scene(headerBar);\n+        stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+    }\n+\n+    @AfterEach\n+    void teardown() {\n+        stage.close();\n+    }\n+\n+    <T> T getAttachedProperty(String name) {\n+        try {\n+            Class<?> propertiesClass = Class.forName(HeaderBar.class.getName() + \"$AttachedProperties\");\n+            Method method = propertiesClass.getMethod(\"of\", Stage.class);\n+            method.setAccessible(true);\n+            return ReflectionUtils.getFieldValue(method.invoke(null, stage), name);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n@@ -71,1 +95,1 @@\n-        DoubleProperty minSystemHeight = ReflectionUtils.getFieldValue(headerBar, \"minSystemHeight\");\n+        DoubleProperty minSystemHeight = getAttachedProperty(\"minSystemHeight\");\n@@ -290,1 +314,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -309,1 +333,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -327,1 +351,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -346,1 +370,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -359,1 +383,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -372,1 +396,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n@@ -401,1 +425,1 @@\n-            ObjectProperty<Dimension2D> leftSystemInset = ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+            ObjectProperty<Dimension2D> leftSystemInset = getAttachedProperty(\"leftSystemInset\");\n@@ -422,1 +446,1 @@\n-            ObjectProperty<Dimension2D> rightSystemInset = ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+            ObjectProperty<Dimension2D> rightSystemInset = getAttachedProperty(\"rightSystemInset\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/HeaderBarTest.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-                default -> headerBar.getMinSystemHeight();\n+                default -> HeaderBar.getMinSystemHeight(stage);\n@@ -187,1 +187,1 @@\n-        headerBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+        HeaderBar.minSystemHeightProperty(stage).subscribe(event -> updateMinHeight.run());\n@@ -262,1 +262,1 @@\n-                default -> rightHeaderBar.getMinSystemHeight();\n+                default -> HeaderBar.getMinSystemHeight(stage);\n@@ -266,1 +266,1 @@\n-        rightHeaderBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+        HeaderBar.minSystemHeightProperty(stage).subscribe(event -> updateMinHeight.run());\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/StageTesterWindow.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}