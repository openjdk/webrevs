{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,2 @@\n-     * @param progress the progress of the transition, ranging from 0 to 1\n+     * @param progress the progress of the transition along the output progress axis,\n+     *                 can be less than 0 or larger than 1\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionMediator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,6 +277,3 @@\n-\n-        if (progress > 0 && progress < 1) {\n-            double oldFactor = existingTimer.reversingShorteningFactor;\n-            double newFactor = progress * oldFactor + (1 - oldFactor);\n-            reversingShorteningFactor = Utils.clamp(0, newFactor, 1);\n-        }\n+        double oldFactor = existingTimer.reversingShorteningFactor;\n+        double newFactor = progress * oldFactor + (1 - oldFactor);\n+        reversingShorteningFactor = Utils.clamp(0, newFactor, 1);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionTimer.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        if (t <= 0 || equals(endValue)) {\n+        if (t == 0 || equals(endValue)) {\n@@ -66,1 +66,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/region\/BorderImageSlices.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * and are in the range 0..1, although this is not enforced.\n+ * where 0 corresponds to 0%, and 1 corresponds to 100%.\n@@ -79,1 +79,1 @@\n-        if (t <= 0 || equals(endValue)) {\n+        if (t == 0 || equals(endValue)) {\n@@ -83,1 +83,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -92,4 +92,4 @@\n-            InterpolationUtils.interpolate(top, endValue.top, t),\n-            InterpolationUtils.interpolate(right, endValue.right, t),\n-            InterpolationUtils.interpolate(bottom, endValue.bottom, t),\n-            InterpolationUtils.interpolate(left, endValue.left, t),\n+            Math.max(0, InterpolationUtils.interpolate(top, endValue.top, t)),\n+            Math.max(0, InterpolationUtils.interpolate(right, endValue.right, t)),\n+            Math.max(0, InterpolationUtils.interpolate(bottom, endValue.bottom, t)),\n+            Math.max(0, InterpolationUtils.interpolate(left, endValue.left, t)),\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/region\/Margins.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,1 @@\n- * given by the user, where px1, py1, px1, and px2 are all in the range [0,1]. A\n- * property of this specially constrained Bezier curve is that it is strictly\n- * monotonically increasing in both X and Y with t in range [0,1].\n+ * given by the user, where px1 and px2 are in the range [0,1].\n@@ -44,3 +42,1 @@\n- * increases from 0 to 1, and correspondingly Y increases from 0 to 1. The\n- * X-to-Y mapping is not a function of path\/curve length.\n- *\n+ * increases from 0 to 1. The X-to-Y mapping is not a function of path\/curve length.\n@@ -52,2 +48,2 @@\n-     * implicit start point (0,0) and end point (1,1) -- each individual\n-     * coordinate value must be in range [0,1].\n+     * implicit start point (0,0) and end point (1,1) -- the x1 and x2\n+     * coordinate values must be in range [0,1].\n@@ -83,1 +79,1 @@\n-     * (1,1) -- px1, py1, px2, py2 all in range [0,1].\n+     * (1,1) -- px1, px2 are in range [0,1].\n@@ -88,1 +84,1 @@\n-     *            Y coordinate of first control point, in range [0,1]\n+     *            Y coordinate of first control point\n@@ -92,1 +88,1 @@\n-     *            Y coordinate of second control point, in range [0,1]\n+     *            Y coordinate of second control point\n@@ -96,4 +92,6 @@\n-        if (px1 < 0 || px1 > 1 || py1 < 0 || py1 > 1 || px2 < 0 || px2 > 1\n-                || py2 < 0 || py2 > 1) {\n-            throw new IllegalArgumentException(\n-                    \"Control point coordinates must \" + \"all be in range [0,1]\");\n+        if (px1 < 0 || px1 > 1) {\n+            throw new IllegalArgumentException(\"x1 must be in range [0,1]\");\n+        }\n+\n+        if (px2 < 0 || px2 > 1) {\n+            throw new IllegalArgumentException(\"x2 must be in range [0,1]\");\n@@ -175,1 +173,1 @@\n-     * @return corresponding y-value of cubic bezier curve -- in range [0,1]\n+     * @return corresponding y-value of cubic bezier curve\n@@ -197,1 +195,1 @@\n-     * p1, p2, 1), where p1 and p2 are in range [0,1], and there is no ordering\n+     * p1, p2, 1), where p1 and p2 can be any value, and there is no ordering\n@@ -203,1 +201,1 @@\n-     *            is 1st control point coordinate in range [0,1]\n+     *            is 1st control point coordinate\n@@ -205,1 +203,1 @@\n-     *            is 2nd control point coordinate in range [0,1]\n+     *            is 2nd control point coordinate\n@@ -226,1 +224,1 @@\n-     *            is 1st control point coordinate in range [0,1]\n+     *            is 1st control point coordinate\n@@ -228,1 +226,1 @@\n-     *            is 2nd control point coordinate in range [0,1]\n+     *            is 2nd control point coordinate\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/SplineInterpolator.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,4 +42,4 @@\n- *             <td>Two components are combined by linear interpolation such that {@code t = 0} produces\n- *                 the start value, {@code t = 1} produces the end value, and {@code 0 < t < 1} produces\n- *                 {@code (1 - t) * start + t * end}. This interpolation type is usually applicable for\n- *                 numeric components.<\/td>\n+ *             <td>Two components are combined by linear interpolation such that the intermediate value is\n+ *                 produced by computing {@code (1 - t) * start + t * end}. Note that this formula produces\n+ *                 values less than {@code start} for {@code t < 0} and values greater than {@code end} for\n+ *                 {@code t > 1}. This interpolation type is usually applicable for numeric components.<\/td>\n@@ -73,2 +73,2 @@\n-     * {@code endValue} using the linear interpolation factor {@code t}, ranging from 0 (inclusive)\n-     * to 1 (inclusive).\n+     * {@code endValue} using the linear interpolation factor {@code t}. The interpolation factor can\n+     * be any finite value.\n@@ -81,4 +81,2 @@\n-     * @implSpec An implementation is not required to reject interpolation factors less than 0 or larger\n-     *           than 1, but this specification gives no meaning to values returned outside of this range.\n-     *           For example, an implementation might clamp the interpolation factor to [0..1], or it might\n-     *           continue the linear interpolation outside of this range.\n+     * @implSpec An implementation must accept any interpolation factor, but it can return a clamped\n+     *           intermediate value that falls within its value range.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Interpolatable.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -4066,2 +4066,7 @@\n-                    if (arg == null || arg.token == null || arg.token.getType() != CssLexer.NUMBER\n-                            || (args[j] = Double.parseDouble(arg.token.getText())) < 0 || args[j] > 1) {\n+                    if (arg == null || arg.token == null || arg.token.getType() != CssLexer.NUMBER) {\n+                        error(arg != null ? arg : term,  \"Expected \\'<number>\\'\");\n+                    } else {\n+                        args[j] = Double.parseDouble(arg.token.getText());\n+                    }\n+\n+                    if (j % 2 == 0 && (args[j] < 0 || args[j] > 1)) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssParser.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-                progress < 1 ? startValue + (endValue - startValue) * progress : endValue);\n+                progress != 1 ? startValue + (endValue - startValue) * progress : endValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableDoubleProperty.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-                progress < 1 ? startValue + (endValue - startValue) * (float)progress : endValue);\n+                progress != 1 ? startValue + (endValue - startValue) * (float)progress : endValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableFloatProperty.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-                progress < 1 ? (int)Math.round(startValue + (endValue - startValue) * progress) : endValue);\n+                progress != 1 ? (int)Math.round(startValue + (endValue - startValue) * progress) : endValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableIntegerProperty.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,1 @@\n-            StyleableLongProperty.super.set(progress < 1 ? Utils.clamp(startValue, result, endValue) : endValue);\n+            StyleableLongProperty.super.set(progress != 1 ? Utils.clamp(startValue, result, endValue) : endValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableLongProperty.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -359,1 +359,1 @@\n-                progress < 1 ? ((Interpolatable<T>)startValue).interpolate(endValue, progress) : endValue);\n+                progress != 1 ? ((Interpolatable<T>)startValue).interpolate(endValue, progress) : endValue);\n@@ -529,1 +529,1 @@\n-            if (progress < 1) {\n+            if (progress != 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        if (t <= 0 || equals(endValue)) {\n+        if (t == 0 || equals(endValue)) {\n@@ -127,1 +127,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Insets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -373,2 +373,2 @@\n-        if (t <= 0.0) return this;\n-        if (t >= 1.0) return endValue;\n+        if (t == 0.0) return this;\n+        if (t == 1.0) return endValue;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Point2D.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -413,2 +413,2 @@\n-        if (t <= 0.0) return this;\n-        if (t >= 1.0) return endValue;\n+        if (t == 0.0) return this;\n+        if (t == 1.0) return endValue;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Point3D.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -651,1 +651,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -655,1 +655,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Background.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -131,1 +131,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundFill.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -169,1 +169,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundImage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,1 +206,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -210,1 +210,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -216,1 +216,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -220,1 +220,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -266,1 +266,1 @@\n-            InterpolationUtils.interpolate(start, end, t) :\n+            Math.max(0, InterpolationUtils.interpolate(start, end, t)) :\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundSize.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -425,1 +425,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -429,1 +429,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Border.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,1 +217,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -221,1 +221,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -255,2 +255,1 @@\n-        return new BorderImage(endValue.image, newWidths, newInsets, newSlices,\n-                               endValue.filled, endValue.repeatX, endValue.repeatY);\n+        return new BorderImage(newImage, newWidths, newInsets, newSlices, newFilled, newRepeatX, newRepeatY);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderImage.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,1 +390,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -394,1 +394,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderStroke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,1 +266,1 @@\n-        if (t <= 0 || equals(endValue)) {\n+        if (t == 0 || equals(endValue)) {\n@@ -270,1 +270,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -340,1 +340,1 @@\n-            InterpolationUtils.interpolate(start, end, t) :\n+            Math.max(0, InterpolationUtils.interpolate(start, end, t)) :\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderWidths.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -422,1 +422,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -426,1 +426,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -549,1 +549,1 @@\n-        return startIsPercentage == endIsPercentage ?\n+        double value = startIsPercentage == endIsPercentage ?\n@@ -552,0 +552,2 @@\n+\n+        return Math.max(0, value);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/CornerRadii.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1956,2 +1956,2 @@\n-        if (t <= 0.0 || equals(endValue)) return this;\n-        if (t >= 1.0) return endValue;\n+        if (t == 0.0 || equals(endValue)) return this;\n+        if (t == 1.0) return endValue;\n@@ -1960,4 +1960,4 @@\n-            red     + (endValue.red     - red)     * ft,\n-            green   + (endValue.green   - green)   * ft,\n-            blue    + (endValue.blue    - blue)    * ft,\n-            opacity + (endValue.opacity - opacity) * ft\n+            Math.clamp(red + (endValue.red - red) * ft, 0, 1),\n+            Math.clamp(green + (endValue.green - green) * ft, 0, 1),\n+            Math.clamp(blue + (endValue.blue - blue) * ft, 0, 1),\n+            Math.clamp(opacity + (endValue.opacity - opacity) * ft, 0, 1)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/Color.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-        if (t <= 0 || equals(endValue)) {\n+        if (t == 0 || equals(endValue)) {\n@@ -308,1 +308,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/ImagePattern.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-        if (t <= 0.0) {\n+        if (t == 0.0) {\n@@ -349,1 +349,1 @@\n-        if (t >= 1.0) {\n+        if (t == 1.0) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/LinearGradient.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -237,0 +237,1 @@\n+     *\n@@ -238,1 +239,1 @@\n-     * to the focus point to which the first color is mapped\n+     *                   to the focus point to which the first color is mapped\n@@ -240,1 +241,2 @@\n-     * focus point to which the first color is mapped\n+     *                      focus point to which the first color is mapped,\n+     *                      must be greater than or equal to zero\n@@ -243,1 +245,2 @@\n-     * @param radius the radius of the circle defining the extents of the color gradient\n+     * @param radius the radius of the circle defining the extents of the color gradient,\n+     *               must be greater than or equal to zero\n@@ -245,1 +248,1 @@\n-     * to the shape which this gradient fills\n+     *                     to the shape which this gradient fills\n@@ -248,0 +251,1 @@\n+     * @throws IllegalArgumentException if {@code focusDistance} or {@code radius} is negative\n@@ -258,0 +262,1 @@\n+        checkInvariants(radius, focusDistance);\n@@ -271,0 +276,1 @@\n+     *\n@@ -272,1 +278,1 @@\n-     * to the focus point to which the first color is mapped\n+     *                   to the focus point to which the first color is mapped\n@@ -274,1 +280,2 @@\n-     * focus point to which the first color is mapped\n+     *                      focus point to which the first color is mapped,\n+     *                      must be greater than or equal to zero\n@@ -277,1 +284,2 @@\n-     * @param radius the radius of the circle defining the extents of the color gradient\n+     * @param radius the radius of the circle defining the extents of the color gradient,\n+     *               must be greater than or equal to zero\n@@ -279,1 +287,1 @@\n-     * to the shape which this gradient fills\n+     *                     to the shape which this gradient fills\n@@ -282,0 +290,1 @@\n+     * @throws IllegalArgumentException if {@code focusDistance} or {@code radius} is negative\n@@ -292,0 +301,1 @@\n+        checkInvariants(radius, focusDistance);\n@@ -321,0 +331,10 @@\n+    private static void checkInvariants(double radius, double focusDistance) {\n+        if (radius < 0) {\n+            throw new IllegalArgumentException(\"radius cannot be negative\");\n+        }\n+\n+        if (focusDistance < 0) {\n+            throw new IllegalArgumentException(\"focusDistance cannot be negative\");\n+        }\n+    }\n+\n@@ -363,1 +383,1 @@\n-        if (t <= 0.0) {\n+        if (t == 0.0) {\n@@ -367,1 +387,1 @@\n-        if (t >= 1.0) {\n+        if (t == 1.0) {\n@@ -377,1 +397,1 @@\n-            newRadius = InterpolationUtils.interpolate(this.radius, endValue.radius, t);\n+            newRadius = Math.max(0, InterpolationUtils.interpolate(this.radius, endValue.radius, t));\n@@ -392,1 +412,1 @@\n-        double newFocusDistance = InterpolationUtils.interpolate(this.focusDistance, endValue.focusDistance, t);\n+        double newFocusDistance = Math.max(0, InterpolationUtils.interpolate(this.focusDistance, endValue.focusDistance, t));\n@@ -588,1 +608,0 @@\n-\n@@ -590,0 +609,4 @@\n+\n+            if (distance < 0) {\n+                throw new IllegalArgumentException(\"Invalid gradient specification: focus-distance cannot be negative\");\n+            }\n@@ -608,0 +631,4 @@\n+\n+            if (radius.value < 0) {\n+                throw new IllegalArgumentException(\"Invalid gradient specification: radius cannot be negative\");\n+            }\n@@ -609,2 +636,1 @@\n-            throw new IllegalArgumentException(\"Invalid gradient specification: \"\n-                    + \"radius must be specified\");\n+            throw new IllegalArgumentException(\"Invalid gradient specification: radius must be specified\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/RadialGradient.java","additions":41,"deletions":15,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,1 @@\n-        if (t <= 0) {\n+        if (t == 0) {\n@@ -162,1 +162,1 @@\n-        if (t >= 1) {\n+        if (t == 1) {\n@@ -286,1 +286,1 @@\n-        if (t <= 0.0) {\n+        if (t == 0.0) {\n@@ -290,1 +290,1 @@\n-        if (t >= 1.0) {\n+        if (t == 1.0) {\n@@ -298,1 +298,1 @@\n-        double offset = InterpolationUtils.interpolate(this.offset, endValue.offset, t);\n+        double offset = Math.clamp(InterpolationUtils.interpolate(this.offset, endValue.offset, t), 0, 1);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/Stop.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -96,1 +96,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -100,1 +99,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -104,1 +103,17 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new BorderImageSlices(new BorderWidths(1), true);\n+            var endValue = new BorderImageSlices(new BorderWidths(2), true);\n+            var expected = new BorderImageSlices(new BorderWidths(0), true);\n+            assertEquals(expected, startValue.interpolate(endValue, -1));\n+            assertEquals(expected, startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new BorderImageSlices(new BorderWidths(1), true);\n+            var endValue = new BorderImageSlices(new BorderWidths(2), true);\n+            assertEquals(new BorderImageSlices(new BorderWidths(3), true), startValue.interpolate(endValue, 2));\n+            assertEquals(new BorderImageSlices(new BorderWidths(4), true), startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/BorderImageSlicesTest.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -110,1 +110,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -114,1 +113,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -118,1 +117,17 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Margins(2, 4, 6, 8, false);\n+            var endValue = new Margins(4, 8, 12, 16, false);\n+            var expected = new Margins(0, 0, 0, 0, false);\n+            assertEquals(expected, startValue.interpolate(endValue, -1));\n+            assertEquals(expected, startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Margins(2, 4, 6, 8, false);\n+            var endValue = new Margins(4, 8, 12, 16, false);\n+            assertEquals(new Margins(6, 12, 18, 24, false), startValue.interpolate(endValue, 2));\n+            assertEquals(new Margins(8, 16, 24, 32, false), startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/MarginsTest.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n@@ -80,0 +83,34 @@\n+\n+    public enum CubicBezierCurve {\n+        YCoordinateWithinIntervalZeroToOne(0.17, 0.67, 1, 0.29, new double[] {\n+            0, 0.1364, 0.2175, 0.2750, 0.3187, 0.3535, 0.3821, 0.4062, 0.4272, 0.4460, 0.4635,\n+            0.4804, 0.4974, 0.5155, 0.5355, 0.5588, 0.5869, 0.6230, 0.6723, 0.7489, 1\n+        }),\n+\n+        YCoordinateLessThanZeroAndGreaterThanOne(0.1, 4, 1, -3, new double[] {\n+            0, 0.8725, 1.1568, 1.2653, 1.2807, 1.2379, 1.1555, 1.0451, 0.9148, 0.7707, 0.6178,\n+            0.4605, 0.3031, 0.1503, 0.0072, -0.1192, -0.2193, -0.2775, -0.2643, -0.1041, 1\n+        });\n+\n+        CubicBezierCurve(double x1, double y1, double x2, double y2, double[] expectedOutputs) {\n+            this.x1 = x1;\n+            this.y1 = y1;\n+            this.x2 = x2;\n+            this.y2 = y2;\n+            this.expectedOutputs = expectedOutputs;\n+        }\n+\n+        final double x1, y1, x2, y2;\n+        final double[] expectedOutputs;\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(CubicBezierCurve.class)\n+    public void testSampleCurve(CubicBezierCurve curve) {\n+        var interpolator = new SplineInterpolator(curve.x1, curve.y1, curve.x2, curve.y2);\n+\n+        for (int i = 0; i < curve.expectedOutputs.length; i++) {\n+            double actual = interpolator.curve(i * (1.0 \/ (curve.expectedOutputs.length - 1)));\n+            assertEquals(curve.expectedOutputs[i], actual, 0.001);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/SplineInterpolatorTest.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,2 @@\n-            .rule2 { transition-timing-function: ease, ease-in, ease-out, ease-in-out, cubic-bezier(0.1, 0.2, 0.3, 0.4); }\n+            .rule2 { transition-timing-function: ease, ease-in, ease-out, ease-in-out, cubic-bezier(0.1, 0.2, 0.3, 0.4),\n+                                                 cubic-bezier(0.5, 2, 0.5, -1); }\n@@ -185,0 +186,1 @@\n+        assertInterpolatorEquals(SPLINE(0.5, 2, 0.5, -1), values[5]);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_transition_Test.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -87,1 +87,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -91,1 +90,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -95,1 +94,16 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Insets(2, 4, 6, 8);\n+            var endValue = new Insets(4, 8, 12, 16);\n+            var expected = new Insets(-2, -4, -6, -8);\n+            assertEquals(expected, startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Insets(2, 4, 6, 8);\n+            var endValue = new Insets(4, 8, 12, 16);\n+            var expected = new Insets(6, 12, 18, 24);\n+            assertEquals(expected, startValue.interpolate(endValue, 2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/InsetsTest.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -224,1 +224,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -228,1 +227,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -232,1 +231,18 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            BackgroundFill startValue = new BackgroundFill(new Color(0.5, 0.5, 0.5, 1), new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(4), new Insets(6));\n+            assertEquals(new BackgroundFill(new Color(0, 0, 0, 1), new CornerRadii(0), new Insets(-2)),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new BackgroundFill(new Color(0, 0, 0, 1), new CornerRadii(0), new Insets(-6)),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            BackgroundFill startValue = new BackgroundFill(new Color(0.5, 0.5, 0.5, 1), new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(4), new Insets(6));\n+            assertEquals(new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(6), new Insets(10)),\n+                         startValue.interpolate(endValue, 2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundFillTest.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,1 +291,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -293,1 +293,0 @@\n-            assertSame(BACKGROUND_IMAGE_A, BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, -0.5));\n@@ -297,1 +296,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -299,1 +298,34 @@\n-            assertSame(BACKGROUND_IMAGE_B, BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            assertEquals(\n+                new BackgroundImage(\n+                    IMAGE_1, NO_REPEAT, NO_REPEAT,\n+                    new BackgroundPosition(Side.LEFT, -10, false, Side.TOP, -20, false),\n+                    new BackgroundSize(0, 0, false, false, false, false)),\n+                BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, -1));\n+\n+            assertEquals(\n+                new BackgroundImage(\n+                    IMAGE_1, NO_REPEAT, NO_REPEAT,\n+                    new BackgroundPosition(Side.LEFT, -20, false, Side.TOP, -40, false),\n+                    new BackgroundSize(0, 0, false, false, false, false)),\n+                BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            assertEquals(\n+                new BackgroundImage(\n+                    IMAGE_2, REPEAT, SPACE,\n+                    new BackgroundPosition(Side.LEFT, 20, false, Side.TOP, 40, false),\n+                    new BackgroundSize(150, 300, false, false, false, false)),\n+                BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, 2));\n+\n+            assertEquals(\n+                new BackgroundImage(\n+                    IMAGE_2, REPEAT, SPACE,\n+                    new BackgroundPosition(Side.LEFT, 30, false, Side.TOP, 60, false),\n+                    new BackgroundSize(200, 400, false, false, false, false)),\n+                BACKGROUND_IMAGE_A.interpolate(BACKGROUND_IMAGE_B, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundImageTest.java","additions":37,"deletions":5,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,1 +239,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -243,1 +243,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -247,1 +246,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -251,1 +250,20 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new BackgroundPosition(Side.LEFT, 5, false, Side.TOP, 10, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            assertEquals(new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new BackgroundPosition(Side.LEFT, -5, false, Side.TOP, -10, false),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new BackgroundPosition(Side.LEFT, 5, false, Side.TOP, 10, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            assertEquals(new BackgroundPosition(Side.LEFT, 15, false, Side.TOP, 30, false),\n+                         startValue.interpolate(endValue, 2));\n+            assertEquals(new BackgroundPosition(Side.LEFT, 20, false, Side.TOP, 40, false),\n+                         startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundPositionTest.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -355,1 +355,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -359,1 +359,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -363,1 +362,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -367,1 +366,20 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(20, 40, false, false, false, false);\n+            assertEquals(new BackgroundSize(0, 0, false, false, false, false),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new BackgroundSize(0, 0, false, false, false, false),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(20, 40, false, false, false, false);\n+            assertEquals(new BackgroundSize(30, 60, false, false, false, false),\n+                         startValue.interpolate(endValue, 2));\n+            assertEquals(new BackgroundSize(40, 80, false, false, false, false),\n+                         startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundSizeTest.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -870,1 +870,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -874,1 +874,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -878,1 +877,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -882,1 +881,18 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Background(new BackgroundFill(new Color(0.5, 0.5, 0.5, 1), new CornerRadii(10), new Insets(10)));\n+            var endValue = new Background(new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(20), new Insets(20)));\n+            assertEquals(new Background(new BackgroundFill(new Color(0, 0, 0, 1), new CornerRadii(0), new Insets(0))),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new Background(new BackgroundFill(new Color(0, 0, 0, 1), new CornerRadii(0), new Insets(-10))),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Background(new BackgroundFill(new Color(0.5, 0.5, 0.5, 1), new CornerRadii(10), new Insets(10)));\n+            var endValue = new Background(new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(20), new Insets(20)));\n+            assertEquals(new Background(new BackgroundFill(new Color(1, 1, 1, 1), new CornerRadii(30), new Insets(30))),\n+                         startValue.interpolate(endValue, 2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundTest.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -74,1 +74,0 @@\n-            assertSame(BORDER_IMAGE_A, BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, -0.5));\n@@ -78,1 +77,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -80,1 +79,26 @@\n-            assertSame(BORDER_IMAGE_B, BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            assertEquals(\n+                new BorderImage(IMAGE_1, new BorderWidths(0), new Insets(12), new BorderWidths(0),\n+                                false, BorderRepeat.REPEAT, BorderRepeat.REPEAT),\n+                BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, -1));\n+\n+            assertEquals(\n+                new BorderImage(IMAGE_1, new BorderWidths(0), new Insets(16), new BorderWidths(0),\n+                                false, BorderRepeat.REPEAT, BorderRepeat.REPEAT),\n+                BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            assertEquals(\n+                new BorderImage(IMAGE_2, new BorderWidths(30), new Insets(0), new BorderWidths(18),\n+                                false, BorderRepeat.REPEAT, BorderRepeat.REPEAT),\n+                BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, 2));\n+\n+            assertEquals(\n+                new BorderImage(IMAGE_2, new BorderWidths(40), new Insets(-4), new BorderWidths(24),\n+                                false, BorderRepeat.REPEAT, BorderRepeat.REPEAT),\n+                BORDER_IMAGE_A.interpolate(BORDER_IMAGE_B, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderImageTest.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import javafx.scene.paint.Color;\n@@ -65,1 +66,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -69,1 +70,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -73,1 +73,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -77,1 +77,20 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new BorderStroke(new Color(0.5, 0.5, 0.5, 1), SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(new Color(1, 1, 1, 1), SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n+            assertEquals(new BorderStroke(new Color(0, 0, 0, 1), SOLID, new CornerRadii(0), new BorderWidths(0), new Insets(-2)),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new BorderStroke(new Color(0, 0, 0, 1), SOLID, new CornerRadii(0), new BorderWidths(0), new Insets(-6)),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new BorderStroke(new Color(0.5, 0.5, 0.5, 1), SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(new Color(1, 1, 1, 1), SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n+            assertEquals(new BorderStroke(new Color(1, 1, 1, 1), SOLID, new CornerRadii(30), new BorderWidths(25), new Insets(10)),\n+                         startValue.interpolate(endValue, 2));\n+            assertEquals(new BorderStroke(new Color(1, 1, 1, 1), SOLID, new CornerRadii(40), new BorderWidths(35), new Insets(14)),\n+                         startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderStrokeTest.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -694,1 +694,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -698,1 +698,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -702,1 +701,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -706,1 +705,20 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Border(new BorderStroke(new Color(0.5, 0.5, 0.5, 1), BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            var endValue = new Border(new BorderStroke(new Color(1, 1, 1, 1), BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n+            assertEquals(new Border(new BorderStroke(new Color(0, 0, 0, 1), BorderStrokeStyle.SOLID, new CornerRadii(0), new BorderWidths(0))),\n+                         startValue.interpolate(endValue, -1));\n+            assertEquals(new Border(new BorderStroke(new Color(0, 0, 0, 1), BorderStrokeStyle.SOLID, new CornerRadii(0), new BorderWidths(0))),\n+                         startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Border(new BorderStroke(new Color(0.5, 0.5, 0.5, 1), BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            var endValue = new Border(new BorderStroke(new Color(1, 1, 1, 1), BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n+            assertEquals(new Border(new BorderStroke(new Color(1, 1, 1, 1), BorderStrokeStyle.SOLID, new CornerRadii(30), new BorderWidths(30))),\n+                         startValue.interpolate(endValue, 2));\n+            assertEquals(new Border(new BorderStroke(new Color(1, 1, 1, 1), BorderStrokeStyle.SOLID, new CornerRadii(40), new BorderWidths(40))),\n+                         startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderTest.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,1 +327,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -331,1 +331,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -335,1 +334,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -339,1 +338,19 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n+            var expected = new BorderWidths(0, 0, 0, 0, true, false, true, false);\n+            assertEquals(expected, startValue.interpolate(endValue, -1));\n+            assertEquals(expected, startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n+            assertEquals(new BorderWidths(30, 60, 90, 120, true, false, true, false),\n+                         startValue.interpolate(endValue, 2));\n+            assertEquals(new BorderWidths(40, 80, 120, 160, true, false, true, false),\n+                         startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderWidthsTest.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,1 +283,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -287,1 +287,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -291,1 +290,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -295,1 +294,16 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(20, 30, 40, 50, false);\n+            assertEquals(new CornerRadii(0, 10, 20, 30, false), startValue.interpolate(endValue, -1));\n+            assertEquals(new CornerRadii(0, 0, 10, 20, false), startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(20, 30, 40, 50, false);\n+            assertEquals(new CornerRadii(30, 40, 50, 60, false), startValue.interpolate(endValue, 2));\n+            assertEquals(new CornerRadii(40, 50, 60, 70, false), startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/CornerRadiiTest.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1022,1 +1022,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -1026,1 +1026,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -1030,1 +1029,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -1034,1 +1033,27 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.3, 0.5, 0.7, 0.9);\n+            assertSimilar(new Color(0.1, 0.3, 0.5, 0.7), startValue.interpolate(endValue, -1));\n+            assertSimilar(new Color(0, 0.2, 0.4, 0.6), startValue.interpolate(endValue, -2));\n+            assertSimilar(new Color(0, 0.1, 0.3, 0.5), startValue.interpolate(endValue, -3));\n+            assertSimilar(new Color(0, 0, 0.2, 0.4), startValue.interpolate(endValue, -4));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.3, 0.5, 0.7, 0.9);\n+            assertSimilar(new Color(0.4, 0.6, 0.8, 1), startValue.interpolate(endValue, 2));\n+            assertSimilar(new Color(0.5, 0.7, 0.9, 1), startValue.interpolate(endValue, 3));\n+            assertSimilar(new Color(0.6, 0.8, 1, 1), startValue.interpolate(endValue, 4));\n+            assertSimilar(new Color(0.7, 0.9, 1, 1), startValue.interpolate(endValue, 5));\n+        }\n+\n+        private static void assertSimilar(Color expected, Color actual) {\n+            assertEquals(expected.getRed(), actual.getRed(), 0.0001);\n+            assertEquals(expected.getGreen(), actual.getGreen(), 0.0001);\n+            assertEquals(expected.getBlue(), actual.getBlue(), 0.0001);\n+            assertEquals(expected.getOpacity(), actual.getOpacity(), 0.0001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ColorTest.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -123,1 +123,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -127,1 +126,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -132,1 +131,18 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var image = createImage();\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, false);\n+            assertEquals(new ImagePattern(image, 0, 10, 20, 30, false), startValue.interpolate(endValue, -1));\n+            assertEquals(new ImagePattern(image, -10, 0, 10, 20, false), startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var image = createImage();\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, false);\n+            assertEquals(new ImagePattern(image, 30, 40, 50, 60, false), startValue.interpolate(endValue, 2));\n+            assertEquals(new ImagePattern(image, 40, 50, 60, 70, false), startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ImagePatternTest.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -522,1 +522,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -534,1 +534,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -538,1 +537,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -550,1 +549,54 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new LinearGradient(\n+                10, 20, 30, 40,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, new Color(0.5, 0.5, 0.5, 1))));\n+\n+            var endValue = new LinearGradient(\n+                20, 40, 60, 80,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, new Color(1, 1, 1, 1))));\n+\n+            assertEquals(\n+                new LinearGradient(\n+                    0, 0, 0, 0,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, new Color(0, 0, 0, 1)))),\n+                startValue.interpolate(endValue, -1));\n+\n+            assertEquals(\n+                new LinearGradient(\n+                    -10, -20, -30, -40,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, new Color(0, 0, 0, 1)))),\n+                startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new LinearGradient(\n+                10, 20, 30, 40,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, new Color(0, 0, 0, 1))));\n+\n+            var endValue = new LinearGradient(\n+                20, 40, 60, 80,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, new Color(0.5, 0.5, 0.5, 1))));\n+\n+            assertEquals(\n+                new LinearGradient(\n+                    30, 60, 90, 120,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, new Color(1, 1, 1, 1)))),\n+                startValue.interpolate(endValue, 2));\n+\n+            assertEquals(\n+                new LinearGradient(\n+                    40, 80, 120, 160,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, new Color(1, 1, 1, 1)))),\n+                startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/LinearGradientTest.java","additions":57,"deletions":5,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -287,0 +287,16 @@\n+\n+        \/\/ radius can't be negative\n+        try {\n+            RadialGradient.valueOf(\"radial-gradient(radius -100, red 0%, blue 30%, black 100%)\");\n+            fail(\"IllegalArgument should have been thrown.\");\n+        } catch (IllegalArgumentException iae) {\n+            assertTrue(iae.getMessage().contains(\"radius cannot be negative\"));\n+        }\n+\n+        \/\/ focusDistance can't be negative\n+        try {\n+            RadialGradient.valueOf(\"radial-gradient(focus-distance -100%, red 0%, blue 30%, black 100%)\");\n+            fail(\"IllegalArgument should have been thrown.\");\n+        } catch (IllegalArgumentException iae) {\n+            assertTrue(iae.getMessage().contains(\"focus-distance cannot be negative\"));\n+        }\n@@ -550,1 +566,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -562,1 +578,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -566,1 +581,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -578,1 +593,54 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new RadialGradient(\n+                10, 20, 30, 40, 20,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, Color.BLUE)));\n+\n+            var endValue = new RadialGradient(\n+                20, 40, 40, 50, 40,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, Color.RED)));\n+\n+            assertEquals(\n+                new RadialGradient(\n+                    0, 0, 20, 30, 0,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, Color.BLUE.interpolate(Color.RED, -1)))),\n+                startValue.interpolate(endValue, -1));\n+\n+            assertEquals(\n+                new RadialGradient(\n+                    -10, 0, 10, 20, 0,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, Color.BLUE.interpolate(Color.RED, -2)))),\n+                startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new RadialGradient(\n+                10, 20, 30, 40, 50,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, Color.BLUE)));\n+\n+            var endValue = new RadialGradient(\n+                20, 30, 40, 50, 60,\n+                true, CycleMethod.NO_CYCLE,\n+                List.of(new Stop(0, Color.RED)));\n+\n+            assertEquals(\n+                new RadialGradient(\n+                    30, 40, 50, 60, 70,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, Color.BLUE.interpolate(Color.RED, 2)))),\n+                startValue.interpolate(endValue, 2));\n+\n+            assertEquals(\n+                new RadialGradient(\n+                    40, 50, 60, 70, 80,\n+                    true, CycleMethod.NO_CYCLE,\n+                    List.of(new Stop(0, Color.BLUE.interpolate(Color.RED, 3)))),\n+                startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/RadialGradientTest.java","additions":73,"deletions":5,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,0 @@\n-        assertSame(zerostop, zerostop.interpolate(onestop, -0.5));\n@@ -161,1 +160,0 @@\n-        assertSame(onestop, zerostop.interpolate(onestop, 1.5));\n@@ -163,0 +161,2 @@\n+        assertEquals(new Stop(0, color1.interpolate(color3, -0.5)), zerostop.interpolate(onestop, -0.5));\n+        assertEquals(new Stop(1, color1.interpolate(color3, 1.5)), zerostop.interpolate(onestop, 1.5));\n@@ -168,1 +168,1 @@\n-        public void returnFirstListBeforeInterval() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -172,1 +172,0 @@\n-            assertSame(firstList, StopShim.interpolateLists(firstList, secondList, -0.5));\n@@ -176,1 +175,1 @@\n-        public void returnSecondListAfterInterval() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -180,1 +179,18 @@\n-            assertSame(secondList, StopShim.interpolateLists(firstList, secondList, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThenZero() {\n+            var firstList = List.of(new Stop(0, color1), new Stop(1, color2));\n+            var secondList = List.of(new Stop(0, color2), new Stop(1, color1));\n+            var expected = List.of(new Stop(0, color1.interpolate(color2, -0.5)),\n+                                   new Stop(1, color2.interpolate(color1, -0.5)));\n+            assertEquals(expected, StopShim.interpolateLists(firstList, secondList, -0.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var firstList = List.of(new Stop(0, color1), new Stop(1, color2));\n+            var secondList = List.of(new Stop(0, color2), new Stop(1, color1));\n+            var expected = List.of(new Stop(0, color1.interpolate(color2, 2)),\n+                                   new Stop(1, color2.interpolate(color1, 2)));\n+            assertEquals(expected, StopShim.interpolateLists(firstList, secondList, 2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopListTest.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-        public void interpolationFactorSmallerThanOrEqualToZeroReturnsStartInstance() {\n+        public void interpolationFactorZeroReturnsStartInstance() {\n@@ -127,1 +127,0 @@\n-            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -131,1 +130,1 @@\n-        public void interpolationFactorGreaterThanOrEqualToOneReturnsEndInstance() {\n+        public void interpolationFactorOneReturnsEndInstance() {\n@@ -135,1 +134,16 @@\n-            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n+        }\n+\n+        @Test\n+        public void interpolationFactorLessThanZero() {\n+            var startValue = new Stop(0.25, new Color(0.5, 0.5, 0.5, 1));\n+            var endValue = new Stop(0.75, new Color(1, 1, 1, 1));\n+            assertEquals(new Stop(0, new Color(0, 0, 0, 1)), startValue.interpolate(endValue, -1));\n+            assertEquals(new Stop(0, new Color(0, 0, 0, 1)), startValue.interpolate(endValue, -2));\n+        }\n+\n+        @Test\n+        public void interpolationFactorGreaterThanOne() {\n+            var startValue = new Stop(0.25, new Color(0, 0, 0, 1));\n+            var endValue = new Stop(0.75, new Color(0.5, 0.5, 0.5, 1));\n+            assertEquals(new Stop(1, new Color(1, 1, 1, 1)), startValue.interpolate(endValue, 2));\n+            assertEquals(new Stop(1, new Color(1, 1, 1, 1)), startValue.interpolate(endValue, 3));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopTest.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-              -fx-min-width: 100;\n+              -fx-min-width: 150;\n@@ -99,2 +99,2 @@\n-              -fx-background-color: red;\n-              transition-property: -fx-min-width;\n+              -fx-background-color: purple;\n+              transition-property: -fx-min-width, -fx-background-color;\n@@ -105,1 +105,2 @@\n-              -fx-min-width: 300;\n+              -fx-min-width: 400;\n+              -fx-background-color: green;\n@@ -113,0 +114,1 @@\n+            #rect6 { transition-timing-function: cubic-bezier(0.34, 2.2, 0.64, 1); }\n@@ -114,5 +116,6 @@\n-            new RectInfo(\"#rect1\", \"rect1\"),\n-            new RectInfo(\"#rect2\", \"rect2\"),\n-            new RectInfo(\"#rect3\", \"rect3\"),\n-            new RectInfo(\"#rect4\", \"rect4\"),\n-            new RectInfo(\"#rect5\", \"rect5\"));\n+            new RectInfo(\"#rect1\", \"rect1\", Color.WHITE),\n+            new RectInfo(\"#rect2\", \"rect2\", Color.WHITE),\n+            new RectInfo(\"#rect3\", \"rect3\", Color.WHITE),\n+            new RectInfo(\"#rect4\", \"rect4\", Color.WHITE),\n+            new RectInfo(\"#rect5\", \"rect5\", Color.WHITE),\n+            new RectInfo(\"#rect6\", \"rect6\", Color.WHITE));\n@@ -207,0 +210,1 @@\n+            rect.setTextFill(rectInfo.textFill());\n@@ -213,1 +217,5 @@\n-    private record RectInfo(String caption, String id) {}\n+    private record RectInfo(String caption, String id, Color textFill) {\n+        public RectInfo(String caption, String id) {\n+            this(caption, id, Color.BLACK);\n+        }\n+    }\n","filename":"tests\/manual\/graphics\/CssTransitionsTest.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"}]}