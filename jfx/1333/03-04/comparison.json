{"files":[{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javafx.css.PseudoClass;\n+import javafx.css.Selector;\n+import javafx.css.StyleConverter;\n+import javafx.geometry.NodeOrientation;\n+\n+import static javafx.geometry.NodeOrientation.LEFT_TO_RIGHT;\n+import static javafx.geometry.NodeOrientation.RIGHT_TO_LEFT;\n+\n+\/**\n+ * Class which can read and write selectors in a binary format.\n+ *\/\n+public class BinarySerializer {\n+    private static final int TYPE_SIMPLE = 1;\n+    private static final int TYPE_COMPOUND = 2;\n+\n+    public static Selector read(DataInputStream is, String[] strings) throws IOException {\n+        int type = is.readByte();\n+\n+        if (type == TYPE_SIMPLE) {\n+            return readSimpleSelector(is, strings);\n+        }\n+\n+        \/\/ Backwards compatible, if it is not TYPE_SIMPLE any other value is considered TYPE_COMPOUND\n+        return readCompoundSelector(is, strings);\n+    }\n+\n+    public static void write(Selector selector, DataOutputStream os, StyleConverter.StringStore stringStore) throws IOException {\n+        if (selector instanceof SimpleSelector s) {\n+            writeSimpleSelector(s, os, stringStore);\n+        }\n+        else if(selector instanceof CompoundSelector s) {\n+            writeCompoundSelector(s, os, stringStore);\n+        }\n+\n+        throw new IllegalStateException(\"support missing for selector type: \" + selector);\n+    }\n+\n+    private static SimpleSelector readSimpleSelector(DataInputStream is, String[] strings) throws IOException {\n+        String name = strings[is.readShort()];\n+        int nStyleClasses = is.readShort();\n+        List<String> styleClasses = new ArrayList<>();\n+\n+        for (int n = 0; n < nStyleClasses; n++) {\n+            styleClasses.add(strings[is.readShort()]);\n+        }\n+\n+        String id = strings[is.readShort()];\n+        int nPseudoclasses = is.readShort();\n+        List<String> pseudoclasses = new ArrayList<>();\n+\n+        for (int n = 0; n < nPseudoclasses; n++) {\n+            pseudoclasses.add(strings[is.readShort()]);\n+        }\n+\n+        return new SimpleSelector(name, styleClasses, pseudoclasses, id);\n+    }\n+\n+    private static CompoundSelector readCompoundSelector(DataInputStream is, String[] strings) throws IOException {\n+        int nSelectors = is.readShort();\n+        List<SimpleSelector> selectors = new ArrayList<>();\n+\n+        for (int n = 0; n < nSelectors; n++) {\n+\n+            \/*\n+             * An extra byte is part of the binary format containing TYPE_SIMPLE that\n+             * isn't strictly needed. However, to remain backwards compatible with the\n+             * first (and only) supported binary format, this byte must be skipped over\n+             * before attempting to read what is known to be a simple selector.\n+             *\/\n+\n+            is.readByte();\n+\n+            selectors.add(readSimpleSelector(is, strings));\n+        }\n+\n+        int nRelationships = is.readShort();\n+\n+        List<Combinator> relationships = new ArrayList<>();\n+\n+        for (int n = 0; n < nRelationships; n++) {\n+            int ordinal = is.readByte();\n+\n+            if (ordinal == Combinator.CHILD.ordinal()) {\n+                relationships.add(Combinator.CHILD);\n+            }\n+            else if (ordinal == Combinator.DESCENDANT.ordinal()) {\n+                relationships.add(Combinator.DESCENDANT);\n+            }\n+            else {\n+                assert false : \"error deserializing CompoundSelector: Combinator = \" + ordinal;\n+                relationships.add(Combinator.DESCENDANT);\n+            }\n+        }\n+\n+        return new CompoundSelector(selectors, relationships);\n+    }\n+\n+    private static void writeCompoundSelector(CompoundSelector selector, DataOutputStream os, StyleConverter.StringStore stringStore) throws IOException {\n+        os.writeByte(TYPE_COMPOUND);\n+\n+        List<SimpleSelector> selectors = selector.getSelectors();\n+\n+        os.writeShort(selectors.size());\n+\n+        for (int n = 0; n < selectors.size(); n++) {\n+            writeSimpleSelector(selectors.get(n), os, stringStore);\n+        }\n+\n+        List<Combinator> relationships = selector.getRelationships();\n+\n+        os.writeShort(relationships.size());\n+\n+        for (int n = 0; n < relationships.size(); n++) {\n+            os.writeByte(relationships.get(n).ordinal());\n+        }\n+    }\n+\n+    private static void writeSimpleSelector(SimpleSelector selector, DataOutputStream os, StyleConverter.StringStore stringStore) throws IOException {\n+        os.writeByte(TYPE_SIMPLE);\n+\n+        List<String> selectorStyleClassNames = selector.getStyleClasses();\n+\n+        os.writeShort(stringStore.addString(selector.getName()));\n+        os.writeShort(selectorStyleClassNames.size());\n+\n+        for (String sc : selectorStyleClassNames) {\n+            os.writeShort(stringStore.addString(sc));\n+        }\n+\n+        os.writeShort(stringStore.addString(selector.getId()));\n+\n+        Set<PseudoClass> pseudoClassStates = selector.getPseudoClassStates();\n+        NodeOrientation nodeOrientation = selector.getNodeOrientation();\n+\n+        int pclassSize = pseudoClassStates.size()\n+                + (nodeOrientation == RIGHT_TO_LEFT || nodeOrientation == LEFT_TO_RIGHT ? 1 : 0);\n+\n+        os.writeShort(pclassSize);\n+\n+        for (PseudoClass pc : pseudoClassStates) {\n+            os.writeShort(stringStore.addString(pc.getPseudoClassName()));\n+        }\n+\n+        if (nodeOrientation == RIGHT_TO_LEFT) {\n+            os.writeShort(stringStore.addString(\"dir(rtl)\"));\n+        }\n+        else if (nodeOrientation == LEFT_TO_RIGHT) {\n+            os.writeShort(stringStore.addString(\"dir(ltr)\"));\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BinarySerializer.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -28,4 +28,0 @@\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.util.ArrayList;\n@@ -40,1 +36,0 @@\n-import javafx.css.StyleConverter;\n@@ -43,1 +38,0 @@\n-\n@@ -78,7 +72,8 @@\n-    \/\/ \/**\n-    \/\/  * The relationships between the selectors\n-    \/\/  * @return Immutable List&lt;Combinator&gt;\n-    \/\/  *\/\n-    \/\/ public List<Combinator> getRelationships() {\n-    \/\/     return relationships;\n-    \/\/ }\n+\n+    \/**\n+     * The relationships between the selectors\n+     * @return Immutable List&lt;Combinator&gt;\n+     *\/\n+    List<Combinator> getRelationships() {\n+        return relationships;\n+    }\n@@ -289,37 +284,0 @@\n-\n-    @Override protected final void writeBinary(final DataOutputStream os, final StyleConverter.StringStore stringStore)\n-            throws IOException\n-    {\n-        super.writeBinary(os, stringStore);\n-        os.writeShort(selectors.size());\n-        for (int n=0; n< selectors.size(); n++) selectors.get(n).writeBinary(os,stringStore);\n-        os.writeShort(relationships.size());\n-        for (int n=0; n< relationships.size(); n++) os.writeByte(relationships.get(n).ordinal());\n-    }\n-\n-    public static CompoundSelector readBinary(int bssVersion, final DataInputStream is, final String[] strings)\n-            throws IOException\n-    {\n-\n-        final int nSelectors = is.readShort();\n-        final List<SimpleSelector> selectors = new ArrayList<>();\n-        for (int n=0; n<nSelectors; n++) {\n-            selectors.add((SimpleSelector)Selector.readBinary(bssVersion, is,strings));\n-        }\n-\n-        final int nRelationships = is.readShort();\n-\n-        final List<Combinator> relationships = new ArrayList<>();\n-        for (int n=0; n<nRelationships; n++) {\n-            final int ordinal = is.readByte();\n-            if (ordinal == Combinator.CHILD.ordinal())\n-                relationships.add(Combinator.CHILD);\n-            else if (ordinal == Combinator.DESCENDANT.ordinal())\n-                relationships.add(Combinator.DESCENDANT);\n-            else {\n-                assert false : \"error deserializing CompoundSelector: Combinator = \" + ordinal;\n-                relationships.add(Combinator.DESCENDANT);\n-            }\n-        }\n-        return new CompoundSelector(selectors, relationships);\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/CompoundSelector.java","additions":8,"deletions":50,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import javafx.css.StyleConverter;\n@@ -36,3 +35,0 @@\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n@@ -395,45 +391,0 @@\n-\n-    @Override protected final void writeBinary(final DataOutputStream os, final StyleConverter.StringStore stringStore)\n-        throws IOException\n-    {\n-        super.writeBinary(os, stringStore);\n-        os.writeShort(stringStore.addString(name));\n-        os.writeShort(selectorStyleClassNames.size());\n-        Iterator<String> iter1 = selectorStyleClassNames.iterator();\n-        while(iter1.hasNext()) {\n-            final String sc = iter1.next();\n-            os.writeShort(stringStore.addString(sc));\n-        }\n-        os.writeShort(stringStore.addString(id));\n-        int pclassSize = pseudoClassState.size()\n-                + (nodeOrientation == RIGHT_TO_LEFT || nodeOrientation == LEFT_TO_RIGHT ? 1 : 0);\n-        os.writeShort(pclassSize);\n-        Iterator<PseudoClass> iter2 = pseudoClassState.iterator();\n-        while(iter2.hasNext()) {\n-            final PseudoClass pc = iter2.next();\n-            os.writeShort(stringStore.addString(pc.getPseudoClassName()));\n-        }\n-        if (nodeOrientation == RIGHT_TO_LEFT) {\n-            os.writeShort(stringStore.addString(\"dir(rtl)\"));\n-        } else if (nodeOrientation == LEFT_TO_RIGHT) {\n-            os.writeShort(stringStore.addString(\"dir(ltr)\"));\n-        }\n-    }\n-\n-    public static SimpleSelector readBinary(int bssVersion, final DataInputStream is, final String[] strings)\n-        throws IOException\n-    {\n-        final String name = strings[is.readShort()];\n-        final int nStyleClasses = is.readShort();\n-        final List<String> styleClasses = new ArrayList<>();\n-        for (int n=0; n < nStyleClasses; n++) {\n-            styleClasses.add(strings[is.readShort()]);\n-        }\n-        final String id = strings[is.readShort()];\n-        final int nPseudoclasses = is.readShort();\n-        final List<String> pseudoclasses = new ArrayList<>();\n-        for(int n=0; n < nPseudoclasses; n++) {\n-            pseudoclasses.add(strings[is.readShort()]);\n-        }\n-        return new SimpleSelector(name, styleClasses, pseudoclasses, id);\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/SimpleSelector.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.css.CompoundSelector;\n@@ -31,0 +32,1 @@\n+import com.sun.javafx.css.PseudoClassState;\n@@ -33,0 +35,1 @@\n+import java.util.List;\n@@ -46,0 +49,31 @@\n+    static Match of(Selector selector) {\n+        return switch(selector) {\n+            case SimpleSelector s -> ofSimpleSelector(s);\n+            case CompoundSelector cs -> ofCompoundSelector(cs);\n+        };\n+    }\n+\n+    private static Match ofCompoundSelector(CompoundSelector selector) {\n+        PseudoClassState pseudoClasses = new PseudoClassState();\n+        int idCount = 0;\n+        int styleClassCount = 0;\n+        List<SimpleSelector> containedSelectors = selector.getSelectors();\n+\n+        for (int n = 0, max = containedSelectors.size(); n < max; n++) {\n+            Match match = ofSimpleSelector(containedSelectors.get(n));\n+\n+            pseudoClasses.addAll(match.getPseudoClasses());\n+            idCount += match.idCount;\n+            styleClassCount += match.styleClassCount;\n+        }\n+\n+        return new Match(selector, pseudoClasses, idCount, styleClassCount);\n+    }\n+\n+    private static Match ofSimpleSelector(SimpleSelector selector) {\n+        int idCount = selector.getId().isEmpty() ? 0 : 1;\n+        int styleClassCount = selector.getStyleClassSet().size();\n+\n+        return new Match(selector, selector.getPseudoClassStates(), idCount, styleClassCount);\n+    }\n+\n@@ -49,2 +83,2 @@\n-    final int styleClassCount;\n-    final int idCount;\n+    private final int styleClassCount;\n+    private final int idCount;\n@@ -54,1 +88,1 @@\n-    final int specificity;\n+    private final int specificity;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.javafx.css.BinarySerializer;\n@@ -334,1 +335,1 @@\n-            sel.writeBinary(os, stringStore);\n+            BinarySerializer.write(sel, os, stringStore);\n@@ -366,1 +367,1 @@\n-            Selector s = Selector.readBinary(bssVersion, is, strings);\n+            Selector s = BinarySerializer.read(is, strings);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Rule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.javafx.css.PseudoClassState;\n@@ -33,3 +32,0 @@\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n@@ -114,25 +110,1 @@\n-        if (this instanceof SimpleSelector s) {\n-            int idCount = s.getId().isEmpty() ? 0 : 1;\n-            int styleClassCount = s.getStyleClassSet().size();\n-\n-            return new Match(this, s.getPseudoClassStates(), idCount, styleClassCount);\n-        }\n-\n-        if (this instanceof CompoundSelector cs) {\n-            PseudoClassState pseudoClasses = new PseudoClassState();\n-            int idCount = 0;\n-            int styleClassCount = 0;\n-\n-            for (int n = 0, max = cs.getSelectors().size(); n < max; n++) {\n-                Selector selector = cs.getSelectors().get(n);\n-                Match match = selector.createMatch();\n-\n-                pseudoClasses.addAll(match.getPseudoClasses());\n-                idCount += match.idCount;\n-                styleClassCount += match.styleClassCount;\n-            }\n-\n-            return new Match(this, pseudoClasses, idCount, styleClassCount);\n-        }\n-\n-        throw new AssertionError(\"unreachable, class is sealed\");\n+        return Match.of(this);\n@@ -170,36 +142,0 @@\n-    private static final int TYPE_SIMPLE = 1;\n-    private static final int TYPE_COMPOUND = 2;\n-\n-    \/**\n-     * Writes {@code Selector} data in binary form to given {@code DataOutputStream}.\n-     * @param os {@code DataOutputStream} to write {@code Selector} data to\n-     * @param stringStore unused\n-     * @throws IOException if writing to {@code DataOutputStream} fails\n-     *\/\n-    protected void writeBinary(DataOutputStream os, StyleConverter.StringStore stringStore)\n-        throws IOException {\n-        if (this instanceof SimpleSelector) {\n-            os.writeByte(TYPE_SIMPLE);\n-        } else {\n-            os.writeByte(TYPE_COMPOUND);\n-        }\n-    }\n-\n-    \/**\n-     * Reads binary {@code Selector} data from a given {@code DataInputStream}.\n-     * @param bssVersion bss version identifier\n-     * @param is {@code DataInputStream} to read {@code Selector} data from\n-     * @param strings string array containing selector details\n-     * @return a selector, never {@code null}\n-     * @throws IOException if reading from {@code DataInputStream} fails\n-     * @since 24\n-     *\/\n-    protected static Selector readBinary(int bssVersion, DataInputStream is, String[] strings)\n-        throws IOException {\n-        final int type = is.readByte();\n-        if (type == TYPE_SIMPLE)\n-            return SimpleSelector.readBinary(bssVersion, is,strings);\n-        else\n-            return CompoundSelector.readBinary(bssVersion, is,strings);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Selector.java","additions":1,"deletions":65,"binary":false,"changes":66,"status":"modified"}]}