{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,8 @@\n+    private InvalidationListener visibleColumnListener = observable -> {\n+        TableColumnBase<?, ?> column = (TableColumnBase<?, ?>) ((BooleanProperty) observable).getBean();\n+        CheckMenuItem menuItem = columnMenuItems.get(column);\n+        if (menuItem != null) {\n+            menuItem.setSelected(column.isVisible());\n+        }\n+    };\n+\n@@ -178,0 +186,3 @@\n+    private final WeakInvalidationListener weakVisibleColumnListener =\n+            new WeakInvalidationListener(visibleColumnListener);\n+\n@@ -181,2 +192,0 @@\n-\n-\n@@ -583,3 +592,1 @@\n-            item.selectedProperty().unbindBidirectional(col.visibleProperty());\n-\n-            columnPopupMenu.getItems().remove(item);\n+            col.visibleProperty().removeListener(weakVisibleColumnListener);\n@@ -630,0 +637,14 @@\n+\n+            item.setSelected(col.isVisible());\n+\n+            final CheckMenuItem _item = item;\n+            \/\/ fake bidrectional binding (a real one was used here but resulted in JBS-8136468)\n+            item.selectedProperty().addListener(o -> {\n+                if (col.visibleProperty().isBound()) return;\n+                col.setVisible(_item.isSelected());\n+            });\n+\n+            col.textProperty().addListener(weakColumnTextListener);\n+            col.visibleProperty().addListener(weakVisibleColumnListener);\n+        } else {\n+            item.setSelected(col.isVisible());\n@@ -634,1 +655,0 @@\n-        col.textProperty().addListener(weakColumnTextListener);\n@@ -640,9 +660,0 @@\n-        \/\/ fake bidrectional binding (a real one was used here but resulted in JBS-8136468)\n-        item.setSelected(col.isVisible());\n-        final CheckMenuItem _item = item;\n-        item.selectedProperty().addListener(o -> {\n-            if (col.visibleProperty().isBound()) return;\n-            col.setVisible(_item.isSelected());\n-        });\n-        col.visibleProperty().addListener(o -> _item.setSelected(col.isVisible()));\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableHeaderRow.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import javafx.collections.FXCollections;\n@@ -43,0 +44,1 @@\n+import test.com.sun.javafx.binding.ExpressionHelperUtility;\n@@ -148,0 +150,1 @@\n+        firstMenuItem = (CheckMenuItem) columnPopupMenu.getItems().get(0);\n@@ -228,0 +231,64 @@\n+    \/**\n+     * Tests that re-setting the same columns does not cause memory leaks.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8341687\">JDK-8341687<\/a>.\n+     *\/\n+    @Test\n+    void testReSettingColumnsDoesNotLeakMemory() {\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(2, getVisibilityListenerCount(column));\n+        }\n+\n+        \/\/ Trigger the menu once so that it will start listening to column changes.\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        \/\/ Now the table menu is listening for changes as well.\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+\n+        tableView.getColumns().setAll(FXCollections.observableArrayList(tableView.getColumns()));\n+        tableView.getColumns().setAll(FXCollections.observableArrayList(tableView.getColumns()));\n+\n+        \/\/ The count should be the same still.\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+    }\n+\n+    \/**\n+     * Tests that toggling the column visibility does not cause memory leaks.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8341687\">JDK-8341687<\/a>.\n+     *\/\n+    @Test\n+    void testTogglingColumnVisibilityDoesNotLeakMemory() {\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(2, getVisibilityListenerCount(column));\n+        }\n+\n+        \/\/ Trigger the menu once so that it will start listening to column changes.\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        \/\/ Now the table menu logic is listening for changes as well.\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            column.setVisible(false);\n+            column.setVisible(true);\n+            column.setVisible(false);\n+            column.setVisible(true);\n+        }\n+\n+        \/\/ The count should be the same still.\n+        for (TableColumn<String, ?> column : tableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+    }\n+\n+    private int getVisibilityListenerCount(TableColumn<String, ?> column) {\n+        return ExpressionHelperUtility.getInvalidationListeners(column.visibleProperty()).size();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableViewTableHeaderRowTest.java","additions":68,"deletions":1,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import javafx.collections.FXCollections;\n@@ -43,0 +44,1 @@\n+import test.com.sun.javafx.binding.ExpressionHelperUtility;\n@@ -148,0 +150,1 @@\n+        firstMenuItem = (CheckMenuItem) columnPopupMenu.getItems().get(0);\n@@ -229,0 +232,64 @@\n+    \/**\n+     * Tests that re-setting the same columns does not cause memory leaks.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8341687\">JDK-8341687<\/a>.\n+     *\/\n+    @Test\n+    void testReSettingColumnsDoesNotLeakMemory() {\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(2, getVisibilityListenerCount(column));\n+        }\n+\n+        \/\/ Trigger the menu once so that it will start listening to column changes.\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        \/\/ Now the table menu is listening for changes as well.\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+\n+        treeTableView.getColumns().setAll(FXCollections.observableArrayList(treeTableView.getColumns()));\n+        treeTableView.getColumns().setAll(FXCollections.observableArrayList(treeTableView.getColumns()));\n+\n+        \/\/ The count should be the same still.\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+    }\n+\n+    \/**\n+     * Tests that toggling the column visibility does not cause memory leaks.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8341687\">JDK-8341687<\/a>.\n+     *\/\n+    @Test\n+    void testTogglingColumnVisibilityDoesNotLeakMemory() {\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(2, getVisibilityListenerCount(column));\n+        }\n+\n+        \/\/ Trigger the menu once so that it will start listening to column changes.\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        \/\/ Now the table menu logic is listening for changes as well.\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            column.setVisible(false);\n+            column.setVisible(true);\n+            column.setVisible(false);\n+            column.setVisible(true);\n+        }\n+\n+        \/\/ The count should be the same still.\n+        for (TreeTableColumn<String, ?> column : treeTableView.getColumns()) {\n+            assertEquals(3, getVisibilityListenerCount(column));\n+        }\n+    }\n+\n+    private int getVisibilityListenerCount(TreeTableColumn<String, ?> column) {\n+        return ExpressionHelperUtility.getInvalidationListeners(column.visibleProperty()).size();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableViewTableHeaderRowTest.java","additions":68,"deletions":1,"binary":false,"changes":69,"status":"modified"}]}