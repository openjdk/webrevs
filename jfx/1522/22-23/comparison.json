{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.tk.Toolkit;\n@@ -30,0 +34,2 @@\n+import javafx.scene.Node;\n+import java.util.Objects;\n@@ -67,3 +73,18 @@\n-    public void applyStyle(StyleOrigin origin, String v) {\n-        \/\/ call set here in case the set method is overriden\n-        set(v);\n+    public void applyStyle(StyleOrigin origin, String newValue) {\n+        \/\/ If this.origin == null, we're setting the value for the first time.\n+        \/\/ No transition should be started in this case.\n+        TransitionDefinition transition =\n+            this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition == null) {\n+            set(newValue);\n+        } else if (mediator == null || !Objects.equals(newValue, mediator.endValue)) {\n+            \/\/ We only start a new transition if the new target value is different from the target\n+            \/\/ value of the existing transition. This scenario can sometimes happen when a CSS value\n+            \/\/ is redundantly applied, which would cause unexpected animations if we allowed the new\n+            \/\/ transition to interrupt the existing transition.\n+            mediator = new TransitionMediatorImpl(get(), newValue); \/\/ needs to be set before calling run()\n+            mediator.run(transition, getCssMetaData().getProperty(), Toolkit.getToolkit().getPrimaryTimer().nanos());\n+        }\n+\n@@ -92,1 +113,18 @@\n-    private StyleOrigin origin = null;\n+    private StyleOrigin origin;\n+    private TransitionMediatorImpl mediator;\n+\n+    private final class TransitionMediatorImpl extends TransitionMediator {\n+        final String startValue;\n+        final String endValue;\n+        private String reversingAdjustedStartValue;\n+\n+        TransitionMediatorImpl(String startValue, String endValue) {\n+            this.startValue = startValue;\n+            this.endValue = endValue;\n+            this.reversingAdjustedStartValue = startValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress < 0.5 ? startValue : endValue);\n+        }\n@@ -94,0 +132,28 @@\n+        @Override\n+        public void onStop() {\n+            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n+            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n+            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n+            \/\/ clear references to this mediator.\n+            if (mediator == this) {\n+                mediator = null;\n+            }\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableStringProperty.this;\n+        }\n+\n+        @Override\n+        public boolean updateReversingAdjustedStartValue(TransitionMediator existingMediator) {\n+            var mediator = (TransitionMediatorImpl)existingMediator;\n+\n+            if (Objects.equals(mediator.reversingAdjustedStartValue, endValue)) {\n+                reversingAdjustedStartValue = mediator.endValue;\n+                return true;\n+            }\n+\n+            return false;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableStringProperty.java","additions":71,"deletions":5,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import javafx.css.SimpleStyleableStringProperty;\n@@ -49,0 +50,1 @@\n+import javafx.css.StyleableStringProperty;\n@@ -52,0 +54,1 @@\n+import javafx.css.converter.StringConverter;\n@@ -106,0 +109,6 @@\n+    static final CssMetaData<Styleable, String> stringPropertyMetadata = new CssMetaData<>(\n+            \"-fx-string-property\", StringConverter.getInstance(), null) {\n+        @Override public boolean isSettable(Styleable styleable) { return true; }\n+        @Override public StyleableProperty<String> getStyleableProperty(Styleable styleable) { return stringProperty; }\n+    };\n+\n@@ -133,0 +142,1 @@\n+                new TransitionDefinition(\"-fx-string-property\", ONE_SECOND, Duration.ZERO, Interpolator.LINEAR),\n@@ -144,0 +154,1 @@\n+    static StyleableStringProperty stringProperty;\n@@ -156,0 +167,1 @@\n+        stringProperty = new SimpleStyleableStringProperty(stringPropertyMetadata, testBean, null);\n@@ -167,0 +179,1 @@\n+            new TestRun(stringProperty, \"mediator\", \"foo\", \"bar\"),\n@@ -330,1 +343,1 @@\n-    void testBooleanTransitionsDiscretely() {\n+    void testBooleanTransitionsAsDiscrete() {\n@@ -347,1 +360,25 @@\n-    void testNonInterpolatableObjectTransitionsDiscretely() {\n+    void testStringTransitionsAsDiscrete() {\n+        ((Group)scene.getRoot()).getChildren().setAll(testBean);\n+        var property = new SimpleStyleableStringProperty(stringPropertyMetadata, testBean, null);\n+\n+        \/\/ Setting a value for the first time doesn't start a transition.\n+        setAnimationTime(0);\n+        property.applyStyle(StyleOrigin.USER, \"foo\");\n+\n+        \/\/ Start the transition and sample the outputs.\n+        property.applyStyle(StyleOrigin.USER, \"bar\");\n+        setAnimationTime(499);\n+        assertEquals(\"foo\", property.get());\n+        setAnimationTime(500);\n+        assertEquals(\"bar\", property.get());\n+\n+        \/\/ This is a reversing transition, so it only needs half the time to flip the value.\n+        property.applyStyle(StyleOrigin.USER, \"foo\");\n+        setAnimationTime(749);\n+        assertEquals(\"bar\", property.get());\n+        setAnimationTime(750);\n+        assertEquals(\"foo\", property.get());\n+    }\n+\n+    @Test\n+    void testNonInterpolatableObjectTransitionsAsDiscrete() {\n@@ -386,1 +423,1 @@\n-    void testNullObjectTransitionsDiscretely() {\n+    void testNullObjectTransitionsAsDiscrete() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleableProperty_transition_Test.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"}]}