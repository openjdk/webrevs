{"files":[{"patch":"@@ -689,2 +689,1 @@\n-        all primitive types, as well as for types that implement <code>javafx.animation.Interpolatable<\/code> or\n-        <code>javafx.css.ComponentTransitionable<\/code>.<\/p>\n+        all primitive types, as well as for types that implement <code>javafx.animation.Interpolatable<\/code>.<\/p>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javafx.css;\n-\n-import javafx.animation.Interpolatable;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.Border;\n-\n-\/**\n- * Identifies a class that supports component-wise CSS transitions.\n- * <p>\n- * Component-wise transitions offer more flexibility than {@link Interpolatable} transitions.\n- * While an {@code Interpolatable} object can only transition homogeneously from one value to another (i.e. using\n- * the same easing function, delay, and duration for all of its constituent values), a {@code ComponentTransitionable}\n- * object can use different easing functions, delays and durations for each of its constituent values.\n- * <p>\n- * All transitionable components must be exposed to the CSS subsystem using {@link CssMetaData} descriptors.\n- * Classes that support component-wise transitions must also implement the {@link StyleConverter#convertBack} method\n- * of their respective {@link StyleConverter}.\n- * <p>\n- * When the CSS subsystem encounters a {@code ComponentTransitionable} value for which transitions are defined, it\n- * first deconstructs the start value and the end value using the respective {@code StyleConverter}, and then applies\n- * individual transition animations for its components. For each frame, the instantaneous component values are\n- * reconstructed with the {@code StyleConverter} to form the combined value.\n- *\n- * @see Border\n- * @see Background\n- * @since 24\n- *\/\n-public interface ComponentTransitionable {\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/ComponentTransitionable.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -89,0 +89,7 @@\n+    \/**\n+     * Marker interface for style converters that implement the {@link #convertBack(Object)} method.\n+     *\n+     * @since 24\n+     *\/\n+    public interface SupportsDeconstruction {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleConverter.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+        CssMetaData<? extends Styleable, T> metadata = getCssMetaData();\n+        StyleConverter<?, T> converter = metadata.getConverter();\n@@ -89,2 +91,2 @@\n-        if (newValue instanceof ComponentTransitionable) {\n-            applyComponentTransition(oldValue, newValue);\n+        if (converter instanceof StyleConverter.SupportsDeconstruction) {\n+            applyComponentTransition(oldValue, newValue, metadata, converter);\n@@ -96,1 +98,1 @@\n-            applyInterpolatableTransition(oldValue, newValue);\n+            applyInterpolatableTransition(oldValue, newValue, metadata);\n@@ -111,1 +113,1 @@\n-    private void applyInterpolatableTransition(T oldValue, T newValue) {\n+    private void applyInterpolatableTransition(T oldValue, T newValue, CssMetaData<? extends Styleable, T> metadata) {\n@@ -116,1 +118,1 @@\n-            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+            NodeHelper.findTransitionDefinition(node, metadata) : null;\n@@ -127,1 +129,1 @@\n-            controller.run(transition, getCssMetaData().getProperty(), Toolkit.getToolkit().getPrimaryTimer().nanos());\n+            controller.run(transition, metadata.getProperty(), Toolkit.getToolkit().getPrimaryTimer().nanos());\n@@ -133,1 +135,1 @@\n-     * This method is used for {@link ComponentTransitionable} values.\n+     * This method is used for values that support component-wise transitions.\n@@ -138,3 +140,3 @@\n-    private void applyComponentTransition(T oldValue, T newValue) {\n-        CssMetaData<? extends Styleable, T> metadata = getCssMetaData();\n-\n+    private void applyComponentTransition(T oldValue, T newValue,\n+                                          CssMetaData<? extends Styleable, T> metadata,\n+                                          StyleConverter<?, T> converter) {\n@@ -152,1 +154,0 @@\n-            var converter = metadata.getConverter();\n@@ -276,1 +277,1 @@\n-     * Common interface for {@link Interpolatable} and {@link ComponentTransitionable} transitions.\n+     * Common interface for {@link Interpolatable} and component-wise transitions.\n@@ -342,2 +343,1 @@\n-     * Controller for transitions of {@link ComponentTransitionable} values that aggregates the effects\n-     * of its component transitions.\n+     * Controller for component-wise transitions that aggregates the effects of its component transitions.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javafx.css.ComponentTransitionable;\n@@ -77,1 +76,1 @@\n-public final class Background implements Interpolatable<Background>, ComponentTransitionable {\n+public final class Background implements Interpolatable<Background> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Background.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-class BackgroundConverter extends StyleConverter<ParsedValue[], Background> {\n+class BackgroundConverter extends StyleConverter<ParsedValue[], Background>\n+                          implements StyleConverter.SupportsDeconstruction {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import javafx.css.ComponentTransitionable;\n@@ -93,1 +92,1 @@\n-public final class Border implements Interpolatable<Border>, ComponentTransitionable {\n+public final class Border implements Interpolatable<Border> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Border.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-class BorderConverter extends StyleConverter<ParsedValue[], Border> {\n+class BorderConverter extends StyleConverter<ParsedValue[], Border>\n+                      implements StyleConverter.SupportsDeconstruction {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}