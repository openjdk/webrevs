{"files":[{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.util;\n+\n+import java.lang.reflect.Field;\n+import java.util.function.Function;\n+\n+public final class ReflectionUtils {\n+\n+    \/**\n+     * Returns the value of a potentially private field of the specified object.\n+     * The field can be declared on any of the object's inherited classes.\n+     *\/\n+    public static Object getFieldValue(Object object, String fieldName) {\n+        Function<Class<?>, Field> getField = cls -> {\n+            try {\n+                var field = cls.getDeclaredField(fieldName);\n+                field.setAccessible(true);\n+                return field;\n+            } catch (NoSuchFieldException e) {\n+                return null;\n+            }\n+        };\n+\n+        Class<?> cls = object.getClass();\n+        while (cls != null) {\n+            Field field = getField.apply(cls);\n+            if (field != null) {\n+                try {\n+                    return field.get(object);\n+                } catch (IllegalAccessException e) {\n+                    throw new AssertionError(e);\n+                }\n+            }\n+\n+            cls = cls.getSuperclass();\n+        }\n+\n+        throw new AssertionError(\"Field not found\");\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/util\/ReflectionUtils.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.tk.Toolkit;\n@@ -50,0 +51,1 @@\n+import javafx.geometry.Insets;\n@@ -53,0 +55,1 @@\n+import javafx.scene.layout.BackgroundFill;\n@@ -54,0 +57,1 @@\n+import javafx.scene.layout.CornerRadii;\n@@ -59,0 +63,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -61,2 +66,2 @@\n-import java.lang.reflect.Field;\n-import java.util.function.Function;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import java.util.List;\n@@ -66,0 +71,1 @@\n+import static test.util.ReflectionUtils.*;\n@@ -138,28 +144,0 @@\n-    static Object getFieldValue(StyleableProperty<?> property, String fieldName) {\n-        Function<Class<?>, Field> getField = cls -> {\n-            try {\n-                var field = cls.getDeclaredField(fieldName);\n-                field.setAccessible(true);\n-                return field;\n-            } catch (NoSuchFieldException e) {\n-                return null;\n-            }\n-        };\n-\n-        Class<?> cls = property.getClass();\n-        while (cls != null) {\n-            Field field = getField.apply(cls);\n-            if (field != null) {\n-                try {\n-                    return field.get(property);\n-                } catch (IllegalAccessException e) {\n-                    throw new AssertionError(e);\n-                }\n-            }\n-\n-            cls = cls.getSuperclass();\n-        }\n-\n-        throw new AssertionError();\n-    }\n-\n@@ -192,0 +170,1 @@\n+    StubToolkit toolkit;\n@@ -197,1 +176,2 @@\n-        scene = new Scene(new Group(testBean));\n+        toolkit = (StubToolkit)Toolkit.getToolkit();\n+        scene = new Scene(new Group());\n@@ -213,0 +193,2 @@\n+        ((Group)scene.getRoot()).getChildren().setAll(testBean);\n+\n@@ -234,0 +216,2 @@\n+        ((Group)scene.getRoot()).getChildren().setAll(testBean);\n+\n@@ -251,0 +235,40 @@\n+\n+    @Test\n+    void testExistingTransitionOfComponentTransitionableIsPreserved() {\n+        var bean = new Group();\n+        ((Group)scene.getRoot()).getChildren().setAll(bean);\n+        var border1 = new Background(new BackgroundFill(Color.RED, new CornerRadii(5), Insets.EMPTY));\n+        var border2 = new Background(new BackgroundFill(Color.GREEN, new CornerRadii(10), Insets.EMPTY));\n+        var border3 = new Background(new BackgroundFill(Color.BLUE, new CornerRadii(10), Insets.EMPTY));\n+        var property = new SimpleStyleableObjectProperty<>(componentTransitionableObjectPropertyMetadata, bean, null);\n+\n+        NodeHelper.getTransitionProperty(bean).setValue(new TransitionDefinition[] {\n+            new TransitionDefinition(\"-fx-background-color\", Duration.seconds(1), Duration.ZERO, Interpolator.LINEAR),\n+            new TransitionDefinition(\"-fx-background-radius\", Duration.seconds(1), Duration.ZERO, Interpolator.LINEAR)\n+        });\n+\n+        \/\/ Setting a value for the first time doesn't start a transition.\n+        toolkit.setCurrentTime(0);\n+        property.applyStyle(StyleOrigin.USER, border1);\n+\n+        \/\/ Start the transition and capture a copy of the sub-property mediator list.\n+        \/\/ -fx-background-color will transition from RED to GREEN\n+        \/\/ -fx-background-radius will transition rom 5 to 10\n+        property.applyStyle(StyleOrigin.USER, border2);\n+        var oldMediators = List.copyOf((List<?>)getFieldValue(getFieldValue(property, \"controller\"), \"mediators\"));\n+\n+        \/\/ Advance the animation time and start the second transition.\n+        \/\/ -fx-background-color will transition from (mix of RED\/GREEN) to BLUE\n+        \/\/ -fx-background-radius will pick up the previous transition, because its target value is the same (10)\n+        toolkit.setCurrentTime(500);\n+        toolkit.handleAnimation();\n+        property.applyStyle(StyleOrigin.USER, border3);\n+        var newMediators = (List<?>)getFieldValue(getFieldValue(property, \"controller\"), \"mediators\");\n+\n+        \/\/ The result is that now we have a new mediator for -fx-background-color, but the same\n+        \/\/ mediator as in the previous transition for -fx-background-radius.\n+        assertEquals(2, oldMediators.size());\n+        assertEquals(2, newMediators.size());\n+        assertNotSame(oldMediators.get(0), newMediators.get(0)); \/\/ -fx-background-color\n+        assertSame(oldMediators.get(1), newMediators.get(1));    \/\/ -fx-background-radius\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleableProperty_transition_Test.java","additions":55,"deletions":31,"binary":false,"changes":86,"status":"modified"}]}