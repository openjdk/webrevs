{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import javafx.scene.paint.Color;\n@@ -32,0 +31,1 @@\n+import javafx.scene.paint.Paint;\n@@ -36,0 +36,1 @@\n+import java.util.List;\n@@ -37,0 +38,1 @@\n+import static javafx.scene.paint.Color.*;\n@@ -41,0 +43,81 @@\n+    @Nested\n+    class PairwiseListInterpolationTest {\n+        @Test\n+        void differentValuesReturnsNewInstance() {\n+            var startValue = List.<Paint>of(RED, BLUE);\n+            var endValue = List.<Paint>of(GREEN, YELLOW);\n+            var expected = List.of(RED.interpolate(GREEN, 0.5), BLUE.interpolate(YELLOW, 0.5));\n+            var actual = InterpolationUtils.interpolateListsPairwise(startValue, endValue, 0.5);\n+            assertEquals(expected, actual);\n+            assertNotSame(expected, startValue);\n+            assertNotSame(expected, endValue);\n+            assertThrows(UnsupportedOperationException.class, () -> actual.add(RED));\n+        }\n+\n+        @Test\n+        void sameValuesReturnsStartInstance() {\n+            var startValue = List.<Paint>of(RED, BLUE);\n+            var endValue = List.<Paint>of(RED, BLUE);\n+            var actual = InterpolationUtils.interpolateListsPairwise(startValue, endValue, 0.5);\n+            assertSame(startValue, actual);\n+        }\n+\n+        @Test\n+        void secondListHasMoreElements() {\n+            var startValue = List.<Paint>of(RED, BLUE);\n+            var endValue = List.<Paint>of(GREEN, YELLOW, PURPLE);\n+            var expected = List.of(RED.interpolate(GREEN, 0.5), BLUE.interpolate(YELLOW, 0.5), PURPLE);\n+            var actual = InterpolationUtils.interpolateListsPairwise(startValue, endValue, 0.5);\n+            assertEquals(expected, actual);\n+        }\n+\n+        @Test\n+        void secondListHasLessElements() {\n+            var startValue = List.<Paint>of(RED, BLUE);\n+            var endValue = List.<Paint>of(GREEN);\n+            var expected = List.of(RED.interpolate(GREEN, 0.5));\n+            var actual = InterpolationUtils.interpolateListsPairwise(startValue, endValue, 0.5);\n+            assertEquals(expected, actual);\n+        }\n+    }\n+\n+    @Nested\n+    class PairwiseArrayInterpolationTest {\n+        @Test\n+        void differentValuesReturnsNewInstance() {\n+            var startValue = arrayOf(RED, BLUE);\n+            var endValue = arrayOf(GREEN, YELLOW);\n+            var expected = arrayOf(RED.interpolate(GREEN, 0.5), BLUE.interpolate(YELLOW, 0.5));\n+            var actual = InterpolationUtils.interpolateArraysPairwise(startValue, endValue, 0.5);\n+            assertArrayEquals(expected, actual);\n+            assertNotSame(expected, startValue);\n+            assertNotSame(expected, endValue);\n+        }\n+\n+        @Test\n+        void sameValuesReturnsStartInstance() {\n+            var startValue = arrayOf(RED, BLUE);\n+            var endValue = arrayOf(RED, BLUE);\n+            var actual = InterpolationUtils.interpolateArraysPairwise(startValue, endValue, 0.5);\n+            assertSame(startValue, actual);\n+        }\n+\n+        @Test\n+        void secondArrayHasMoreElements() {\n+            var startValue = arrayOf(RED, BLUE);\n+            var endValue = arrayOf(GREEN, YELLOW, PURPLE);\n+            var expected = arrayOf(RED.interpolate(GREEN, 0.5), BLUE.interpolate(YELLOW, 0.5), PURPLE);\n+            var actual = InterpolationUtils.interpolateArraysPairwise(startValue, endValue, 0.5);\n+            assertArrayEquals(expected, actual);\n+        }\n+\n+        @Test\n+        void secondArrayHasLessElements() {\n+            var startValue = arrayOf(RED, BLUE);\n+            var endValue = arrayOf(GREEN);\n+            var expected = arrayOf(RED.interpolate(GREEN, 0.5));\n+            var actual = InterpolationUtils.interpolateArraysPairwise(startValue, endValue, 0.5);\n+            assertArrayEquals(expected, actual);\n+        }\n+    }\n+\n@@ -46,1 +129,1 @@\n-                Color.BLUE,\n+                BLUE,\n@@ -48,1 +131,1 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n@@ -52,2 +135,2 @@\n-                                              new Stop(0, Color.BLUE.interpolate(Color.RED, 0.5)),\n-                                              new Stop(1, Color.BLUE.interpolate(Color.GREEN, 0.5)));\n+                                              new Stop(0, BLUE.interpolate(RED, 0.5)),\n+                                              new Stop(1, BLUE.interpolate(GREEN, 0.5)));\n@@ -61,1 +144,1 @@\n-                Color.BLUE,\n+                BLUE,\n@@ -63,1 +146,1 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n@@ -67,2 +150,2 @@\n-                                              new Stop(0, Color.BLUE.interpolate(Color.RED, 0.5)),\n-                                              new Stop(1, Color.BLUE.interpolate(Color.GREEN, 0.5)));\n+                                              new Stop(0, BLUE.interpolate(RED, 0.5)),\n+                                              new Stop(1, BLUE.interpolate(GREEN, 0.5)));\n@@ -80,2 +163,2 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n-                Color.BLUE,\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n+                BLUE,\n@@ -85,2 +168,2 @@\n-                                              new Stop(0, Color.RED.interpolate(Color.BLUE, 0.5)),\n-                                              new Stop(1, Color.GREEN.interpolate(Color.BLUE, 0.5)));\n+                                              new Stop(0, RED.interpolate(BLUE, 0.5)),\n+                                              new Stop(1, GREEN.interpolate(BLUE, 0.5)));\n@@ -94,1 +177,1 @@\n-                                             new Stop(0, Color.RED), new Stop(1, Color.GREEN));\n+                                             new Stop(0, RED), new Stop(1, GREEN));\n@@ -98,1 +181,1 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n@@ -112,2 +195,2 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n-                Color.BLUE,\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n+                BLUE,\n@@ -117,2 +200,2 @@\n-                                              new Stop(0, Color.RED.interpolate(Color.BLUE, 0.5)),\n-                                              new Stop(1, Color.GREEN.interpolate(Color.BLUE, 0.5)));\n+                                              new Stop(0, RED.interpolate(BLUE, 0.5)),\n+                                              new Stop(1, GREEN.interpolate(BLUE, 0.5)));\n@@ -126,1 +209,1 @@\n-                                             new Stop(0, Color.RED), new Stop(1, Color.GREEN));\n+                                             new Stop(0, RED), new Stop(1, GREEN));\n@@ -130,1 +213,1 @@\n-                                   new Stop(0, Color.RED), new Stop(1, Color.GREEN)),\n+                                   new Stop(0, RED), new Stop(1, GREEN)),\n@@ -137,0 +220,5 @@\n+\n+    @SafeVarargs\n+    private static <T> T[] arrayOf(T... values) {\n+        return values;\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/InterpolationUtilsTest.java","additions":109,"deletions":21,"binary":false,"changes":130,"status":"modified"}]}