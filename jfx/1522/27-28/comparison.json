{"files":[{"patch":"@@ -35,1 +35,1 @@\n-    private TransitionTimer timer;\n+    private TransitionTimer.CancellationToken cancellationToken;\n@@ -46,1 +46,1 @@\n-        timer = TransitionTimer.run(this, definition, targetPropertyName, nanoNow);\n+        cancellationToken = TransitionTimer.run(this, definition, targetPropertyName, nanoNow);\n@@ -49,1 +49,1 @@\n-        if (timer == null) {\n+        if (cancellationToken == null) {\n@@ -56,5 +56,1 @@\n-     * Cancels the transition timer.\n-     *\n-     * @param forceStop if {@code true}, the transition timer is stopped unconditionally\n-     * @return {@code true} if the timer was cancelled, {@code false} otherwise\n-     * @see TransitionTimer#cancel(boolean)\n+     * Cancels the transition timer if it is currently running.\n@@ -62,11 +58,4 @@\n-    public final boolean cancel(boolean forceStop) {\n-        return timer == null || timer.cancel(forceStop);\n-    }\n-\n-    \/**\n-     * Gets the running {@code TransitionTimer}.\n-     *\n-     * @return the {@code TransitionTimer}, or {@code null} if no timer is running\n-     *\/\n-    public final TransitionTimer getTimer() {\n-        return timer;\n+    public final void cancel() {\n+        if (cancellationToken != null) {\n+            cancellationToken.cancel();\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionMediator.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+    public interface CancellationToken {\n+        void cancel();\n+    }\n+\n@@ -53,1 +57,0 @@\n-    private boolean updating;\n@@ -84,4 +87,4 @@\n-    public static TransitionTimer run(TransitionMediator mediator,\n-                                      TransitionDefinition definition,\n-                                      String targetPropertyName,\n-                                      long nanoNow) {\n+    public static CancellationToken run(TransitionMediator mediator,\n+                                        TransitionDefinition definition,\n+                                        String targetPropertyName,\n+                                        long nanoNow) {\n@@ -100,1 +103,1 @@\n-        var existingTimer = (TransitionTimer)NodeHelper.findTransitionTimer(node, targetPropertyName);\n+        var existingTimer = NodeHelper.findTransitionTimer(node, targetPropertyName);\n@@ -111,1 +114,1 @@\n-                existingTimer.stop(TransitionEvent.CANCEL);\n+                existingTimer.interrupt();\n@@ -113,1 +116,1 @@\n-                return newTimer;\n+                return newTimer::stop;\n@@ -116,1 +119,1 @@\n-            existingTimer.stop(TransitionEvent.CANCEL);\n+            existingTimer.stop();\n@@ -124,1 +127,1 @@\n-            return timer;\n+            return timer::stop;\n@@ -130,17 +133,0 @@\n-    \/**\n-     * Cancels this timer if it is currently running. If {@code forceStop} is {@code false}, the timer\n-     * will only be stopped if this method was not called from the timer's {@link #update(double)} method;\n-     * i.e. a timer will not stop itself while trying to set the new value of a styleable property.\n-     *\n-     * @param forceStop if {@code true}, the timer is stopped unconditionally\n-     * @return {@code true} if the timer was cancelled, {@code false} otherwise\n-     *\/\n-    public boolean cancel(boolean forceStop) {\n-        if (forceStop || !pollUpdating()) {\n-            stop(TransitionEvent.CANCEL);\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n@@ -181,1 +167,1 @@\n-                stop(TransitionEvent.END);\n+                stopTimer(TransitionEvent.END);\n@@ -197,1 +183,3 @@\n-     * This method is unused, calling it will throw {@link UnsupportedOperationException}.\n+     * Stops this timer without updating the property to the target value.\n+     * This happens when the value of the styleable property is changed by the user, or when a\n+     * running timer is cancelled by a transition with zero duration.\n@@ -201,1 +189,1 @@\n-        throw new UnsupportedOperationException();\n+        stopTimer(TransitionEvent.CANCEL);\n@@ -205,5 +193,11 @@\n-     * Stops the running transition and fires the specified event.\n-     * This happens when the value of a CSS property targeted by a transition is changed by the user,\n-     * when the transition is interrupted by another transition, or when it ends normally.\n-     *\n-     * @param eventType the event type that is fired after the timer is stopped\n+     * Skips the rest of a running transition and updates the property to the target value.\n+     * This happens when the targeted node is removed from the scene graph or becomes invisible.\n+     *\/\n+    public void complete() {\n+        update(1);\n+        stopTimer(TransitionEvent.CANCEL);\n+    }\n+\n+    \/**\n+     * Stops this timer without invoking {@link TransitionMediator#onStop()}.\n+     * This form of completion only happens when a timer is interrupted by a reversing timer.\n@@ -211,1 +205,1 @@\n-    public void stop(EventType<TransitionEvent> eventType) {\n+    private void interrupt() {\n@@ -213,1 +207,0 @@\n-        mediator.onStop();\n@@ -215,1 +208,1 @@\n-        fireTransitionEvent(eventType);\n+        fireTransitionEvent(TransitionEvent.CANCEL);\n@@ -219,2 +212,3 @@\n-     * Skips the rest of a running transition and updates the property to the target value.\n-     * This happens when the targeted node is removed from the scene graph or becomes invisible.\n+     * Stops the running timer and fires the specified event.\n+     *\n+     * @param eventType the event type that is fired after the timer is stopped\n@@ -222,3 +216,5 @@\n-    public void complete() {\n-        update(1);\n-        stop(TransitionEvent.CANCEL);\n+    private void stopTimer(EventType<TransitionEvent> eventType) {\n+        super.stop();\n+        mediator.onStop();\n+        NodeHelper.removeTransitionTimer(targetNode, targetPropertyName);\n+        fireTransitionEvent(eventType);\n@@ -236,1 +232,0 @@\n-            updating = true;\n@@ -241,2 +236,0 @@\n-        } finally {\n-            updating = false;\n@@ -246,12 +239,0 @@\n-    \/**\n-     * Polls whether the timer is currently updating the value of the property.\n-     * After this method is called, the {@link #updating} flag is {@code false}.\n-     *\n-     * @return {@code true} if the timer is currently updating the property, {@code false} otherwise\n-     *\/\n-    private boolean pollUpdating() {\n-        boolean updating = this.updating;\n-        this.updating = false;\n-        return updating;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionTimer.java","additions":39,"deletions":58,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -96,6 +96,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition timer.\n-        if (mediator != null) {\n-            mediator.cancel(true);\n-        }\n+        onUserChange();\n@@ -108,4 +103,1 @@\n-\n-        if (mediator == null || mediator.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -118,0 +110,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -134,1 +134,1 @@\n-            set(progress < 0.5 ? startValue : endValue);\n+            StyleableBooleanProperty.super.set(progress < 0.5 ? startValue : endValue);\n@@ -139,7 +139,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableBooleanProperty.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -98,6 +98,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition timer.\n-        if (mediator != null) {\n-            mediator.cancel(true);\n-        }\n+        onUserChange();\n@@ -110,4 +105,1 @@\n-\n-        if (mediator == null || mediator.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -120,0 +112,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -136,1 +136,2 @@\n-            set(progress < 1 ? startValue + (endValue - startValue) * progress : endValue);\n+            StyleableDoubleProperty.super.set(\n+                progress < 1 ? startValue + (endValue - startValue) * progress : endValue);\n@@ -141,7 +142,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableDoubleProperty.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -96,6 +96,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition timer.\n-        if (mediator != null) {\n-            mediator.cancel(true);\n-        }\n+        onUserChange();\n@@ -108,4 +103,1 @@\n-\n-        if (mediator == null || mediator.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -118,0 +110,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -134,1 +134,2 @@\n-            set(progress < 1 ? startValue + (endValue - startValue) * (float)progress : endValue);\n+            StyleableFloatProperty.super.set(\n+                progress < 1 ? startValue + (endValue - startValue) * (float)progress : endValue);\n@@ -139,7 +140,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableFloatProperty.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -96,6 +96,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition timer.\n-        if (mediator != null) {\n-            mediator.cancel(true);\n-        }\n+        onUserChange();\n@@ -108,4 +103,1 @@\n-\n-        if (mediator == null || mediator.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -118,0 +110,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -135,1 +135,2 @@\n-            set(progress < 1 ? (int)Math.round(startValue + (endValue - startValue) * progress) : endValue);\n+            StyleableIntegerProperty.super.set(\n+                progress < 1 ? (int)Math.round(startValue + (endValue - startValue) * progress) : endValue);\n@@ -140,7 +141,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableIntegerProperty.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -99,6 +99,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition timer.\n-        if (mediator != null) {\n-            mediator.cancel(true);\n-        }\n+        onUserChange();\n@@ -111,4 +106,1 @@\n-\n-        if (mediator == null || mediator.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -121,0 +113,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -140,1 +140,1 @@\n-            set(progress < 1 ? Utils.clamp(startValue, result, endValue) : endValue);\n+            StyleableLongProperty.super.set(progress < 1 ? Utils.clamp(startValue, result, endValue) : endValue);\n@@ -145,7 +145,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableLongProperty.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-                    existingMediator.cancel(true);\n+                    existingMediator.cancel();\n@@ -250,6 +250,1 @@\n-        origin = StyleOrigin.USER;\n-\n-        \/\/ Calling the 'bind' method always cancels a transition.\n-        if (controller != null) {\n-            controller.cancel(true);\n-        }\n+        onUserChange();\n@@ -262,9 +257,1 @@\n-\n-        \/\/ Calling the 'set' method cancels the transition timer, but not if the 'set' method was\n-        \/\/ directly called by the timer itself (i.e. a timer will not accidentally cancel itself).\n-        \/\/ Note that indirect cancellation is still possible: a timer may fire a transition event,\n-        \/\/ which could cause user code to be executed that invokes this 'set' method. In that case,\n-        \/\/ the call will cancel the timer.\n-        if (controller == null || controller.cancel(false)) {\n-            origin = StyleOrigin.USER;\n-        }\n+        onUserChange();\n@@ -277,0 +264,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (controller != null) {\n+            controller.cancel();\n+        }\n+    }\n+\n@@ -292,1 +287,1 @@\n-        boolean cancel(boolean forceStop);\n+        void cancel();\n@@ -311,7 +306,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this controller.\n-            \/\/ However, when this controller was cancelled by a reversing transition, the 'controller' field\n-            \/\/ refers to the reversing controller, and not to this controller. We need to be careful to only\n-            \/\/ clear references to this controller.\n-            if (controller == this) {\n-                controller = null;\n-            }\n+            controller = null;\n@@ -354,1 +343,1 @@\n-            set(progress < 0.5 ? startValue : endValue);\n+            StyleableObjectProperty.super.set(progress < 0.5 ? startValue : endValue);\n@@ -369,1 +358,2 @@\n-            set(progress < 1 ? ((Interpolatable<T>)startValue).interpolate(endValue, progress) : endValue);\n+            StyleableObjectProperty.super.set(\n+                progress < 1 ? ((Interpolatable<T>)startValue).interpolate(endValue, progress) : endValue);\n@@ -384,1 +374,0 @@\n-        private boolean updating;\n@@ -398,9 +387,5 @@\n-        public boolean cancel(boolean forceStop) {\n-            if (forceStop || !pollUpdating()) {\n-                \/\/ Cancelling a mediator removes it from the 'mediators' list, so we need\n-                \/\/ to make a copy of the list before we iterate on it.\n-                for (var mediator : List.copyOf(mediators)) {\n-                    mediator.cancel(true);\n-                }\n-\n-                return true;\n+        public void cancel() {\n+            \/\/ Cancelling a mediator removes it from the 'mediators' list, so we need\n+            \/\/ to make a copy of the list before we iterate on it.\n+            for (var mediator : List.copyOf(mediators)) {\n+                mediator.cancel();\n@@ -408,2 +393,0 @@\n-\n-            return false;\n@@ -476,7 +459,0 @@\n-                try {\n-                    updating = true;\n-                    set(getCssMetaData().getConverter().convert(cssValues));\n-                } finally {\n-                    updating = false;\n-                }\n-\n@@ -484,0 +460,1 @@\n+                StyleableObjectProperty.super.set(getCssMetaData().getConverter().convert(cssValues));\n@@ -500,5 +477,1 @@\n-            \/\/ When all component transitions are cancelled or completed, we clear the reference to this\n-            \/\/ controller. However, when this controller was cancelled by a reversing transition, the 'controller'\n-            \/\/ field refers to the reversing controller, and not to this controller. We need to be careful to only\n-            \/\/ clear references to this controller.\n-            if (mediators.isEmpty() && StyleableObjectProperty.this.controller == this) {\n+            if (mediators.isEmpty()) {\n@@ -508,6 +481,0 @@\n-\n-        private boolean pollUpdating() {\n-            boolean updating = this.updating;\n-            this.updating = false;\n-            return updating;\n-        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":23,"deletions":56,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        origin = StyleOrigin.USER;\n+        onUserChange();\n@@ -105,1 +105,1 @@\n-        origin = StyleOrigin.USER;\n+        onUserChange();\n@@ -108,1 +108,0 @@\n-\n@@ -113,0 +112,8 @@\n+    private void onUserChange() {\n+        origin = StyleOrigin.USER;\n+\n+        if (mediator != null) {\n+            mediator.cancel();\n+        }\n+    }\n+\n@@ -129,1 +136,1 @@\n-            set(progress < 0.5 ? startValue : endValue);\n+            StyleableStringProperty.super.set(progress < 0.5 ? startValue : endValue);\n@@ -134,7 +141,1 @@\n-            \/\/ When the transition is cancelled or completed, we clear the reference to this mediator.\n-            \/\/ However, when this mediator was cancelled by a reversing transition, the 'mediator' field\n-            \/\/ refers to the reversing mediator, and not to this mediator. We need to be careful to only\n-            \/\/ clear references to this mediator.\n-            if (mediator == this) {\n-                mediator = null;\n-            }\n+            mediator = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableStringProperty.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javafx.scene.NodeHelper;\n@@ -35,0 +36,1 @@\n+import javafx.scene.Node;\n@@ -63,1 +65,1 @@\n-        void run(TransitionDefinition definition) {\n+        void run(TransitionDefinition definition, Node node) {\n@@ -66,1 +68,1 @@\n-            timer = mediator.getTimer();\n+            timer = NodeHelper.findTransitionTimer(node, definition.propertyName());\n@@ -117,1 +119,1 @@\n-        timer.run(transition);\n+        timer.run(transition, node);\n@@ -137,1 +139,1 @@\n-        timer.run(transition);\n+        timer.run(transition, node);\n@@ -149,1 +151,1 @@\n-        timer.run(transition);\n+        timer.run(transition, node);\n@@ -152,1 +154,1 @@\n-        assertTrue(timer.mediator.cancel(false));\n+        timer.mediator.cancel();\n@@ -156,15 +158,0 @@\n-    @Test\n-    public void testTimerDoesNotStopItselfWhenSettingValue() {\n-        var flag = new boolean[1];\n-        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n-        var timer = new TimerWrapper(new TestTransitionMediator() {\n-            @Override public void onUpdate(double progress) {\n-                flag[0] = cancel(false);\n-            }\n-        });\n-\n-        timer.run(transition);\n-        timer.fire(seconds(0.2));\n-        assertFalse(flag[0]);\n-    }\n-\n@@ -183,1 +170,1 @@\n-        timer.run(transition);\n+        timer.run(transition, node);\n@@ -205,1 +192,1 @@\n-        timer1.run(transition);\n+        timer1.run(transition, node);\n@@ -213,1 +200,1 @@\n-        timer2.run(transition);\n+        timer2.run(transition, node);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/TransitionTimerTest.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"}]}