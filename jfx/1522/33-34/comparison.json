{"files":[{"patch":"@@ -85,0 +85,1 @@\n+        T oldValue = get();\n@@ -86,2 +87,2 @@\n-        if (converter instanceof SubPropertyConverter c) {\n-            applyComponents(newValue, metadata, c);\n+        if (oldValue != null && newValue != null && converter instanceof SubPropertyConverter c) {\n+            applyComponents(oldValue, newValue, metadata, c);\n@@ -89,1 +90,1 @@\n-            applyValue(newValue, metadata);\n+            applyValue(oldValue, newValue, metadata);\n@@ -97,1 +98,2 @@\n-     * This method is used for values that don't support component-wise transitions.\n+     * This method is used for values that don't support component-wise transitions, and for cases\n+     * where one of the values is {@code null} and we fall back to a discrete transition.\n@@ -99,0 +101,1 @@\n+     * @param oldValue the old value\n@@ -102,1 +105,1 @@\n-    private void applyValue(T newValue, CssMetaData<? extends Styleable, T> metadata) {\n+    private void applyValue(T oldValue, T newValue, CssMetaData<? extends Styleable, T> metadata) {\n@@ -116,1 +119,0 @@\n-            T oldValue = get();\n@@ -144,1 +146,1 @@\n-    private void applyComponents(T newValue,\n+    private void applyComponents(T oldValue, T newValue,\n@@ -158,1 +160,1 @@\n-            var oldCssValues = converter.convertBack(get());\n+            var oldCssValues = converter.convertBack(oldValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-    void testNullObjectTransitionsAsDiscrete() {\n+    void testNullObjectTransitionsAsDiscrete_withInterpolatableValue() {\n@@ -445,0 +445,24 @@\n+\n+    @Test\n+    void testNullObjectTransitionsAsDiscrete_withComponentTransitionableValue() {\n+        ((Group)scene.getRoot()).getChildren().setAll(testBean);\n+        var property = new SimpleStyleableObjectProperty<>(componentTransitionableObjectPropertyMetadata, testBean, null);\n+\n+        \/\/ Setting a value for the first time doesn't start a transition.\n+        setAnimationTime(0);\n+        property.applyStyle(StyleOrigin.USER, Background.fill(Color.RED));\n+\n+        \/\/ Start the transition and sample the outputs.\n+        property.applyStyle(StyleOrigin.USER, null);\n+        setAnimationTime(499);\n+        assertEquals(Background.fill(Color.RED), property.get());\n+        setAnimationTime(500);\n+        assertNull(property.get());\n+\n+        \/\/ This is a reversing transition, so it only needs half the time to flip the value.\n+        property.applyStyle(StyleOrigin.USER, Background.fill(Color.RED));\n+        setAnimationTime(749);\n+        assertNull(property.get());\n+        setAnimationTime(750);\n+        assertEquals(Background.fill(Color.RED), property.get());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleableProperty_transition_Test.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}