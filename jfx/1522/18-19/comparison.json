{"files":[{"patch":"@@ -58,6 +58,0 @@\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Inherited;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n@@ -96,3 +90,3 @@\n-     * Indicates whether the style converter implements the {@link StyleConverter#convert(Map)}\n-     * and {@link #convertBack(Object)} methods to enable object deconstruction and reconstruction.\n-     * The following invariant must be satisfied: {@code convert(convertBack(value)).equals(value)}\n+     * Defines the {@code convert} and {@code convertBack} operations that enable object\n+     * decomposition and reconstruction. Note that the following invariant must always be\n+     * satisfied: {@code convert(convertBack(value)).equals(value)}\n@@ -100,0 +94,1 @@\n+     * @param <T> the target type\n@@ -102,5 +97,8 @@\n-    @Documented\n-    @Inherited\n-    @Target(ElementType.TYPE)\n-    @Retention(RetentionPolicy.RUNTIME)\n-    public @interface SupportsReconstruction {}\n+    public interface WithReconstructionSupport<T> {\n+        \/**\n+         * Converts a map of CSS values to the target type.\n+         *\n+         * @param values the constituent values\n+         * @return the converted object\n+         *\/\n+        T convert(Map<CssMetaData<? extends Styleable, ?>, Object> values);\n@@ -108,1 +106,9 @@\n-    final boolean supportsReconstruction;\n+        \/**\n+         * Converts an object back to a map of its constituent values (deconstruction).\n+         * The returned map can be passed into {@link #convert(Map)} to reconstruct the object.\n+         *\n+         * @param value the object\n+         * @return a {@code Map} of the constituent values\n+         *\/\n+        Map<CssMetaData<? extends Styleable, ?>, Object> convertBack(T value);\n+    }\n@@ -114,1 +120,0 @@\n-        supportsReconstruction = getClass().getAnnotation(SupportsReconstruction.class) != null;\n@@ -278,16 +283,0 @@\n-    \/**\n-     * Converts an object back to a map of its constituent values (deconstruction).\n-     * The returned map can be passed into {@link #convert(Map)} to reconstruct the object.\n-     *\n-     * @param value the object\n-     * @throws UnsupportedOperationException if this converter does not support deconstruction\n-     * @return a {@code Map} of the constituent values\n-     * @apiNote This is an optional operation. The default implementation of this\n-     *          method throws {@code UnsupportedOperationException}.\n-     * @implSpec The following invariant must be satisfied: {@code convert(convertBack(value)).equals(value)}\n-     * @since 24\n-     *\/\n-    public Map<CssMetaData<? extends Styleable, ?>, Object> convertBack(T value) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleConverter.java","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@@ -91,2 +92,2 @@\n-        if (converter.supportsReconstruction) {\n-            applyComponentTransition(oldValue, newValue, metadata, converter);\n+        if (converter instanceof StyleConverter.WithReconstructionSupport c) {\n+            applyComponentTransition(oldValue, newValue, metadata, c);\n@@ -142,1 +143,1 @@\n-                                          StyleConverter<?, T> converter) {\n+                                          StyleConverter.WithReconstructionSupport<T> converter) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-@StyleConverter.SupportsReconstruction\n-class BackgroundConverter extends StyleConverter<ParsedValue[], Background> {\n+class BackgroundConverter extends StyleConverter<ParsedValue[], Background>\n+                          implements StyleConverter.WithReconstructionSupport<Background> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-@StyleConverter.SupportsReconstruction\n-class BorderConverter extends StyleConverter<ParsedValue[], Border> {\n+class BorderConverter extends StyleConverter<ParsedValue[], Border>\n+                      implements StyleConverter.WithReconstructionSupport<Border> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,0 +87,2 @@\n+        @SuppressWarnings(\"unchecked\")\n+        var converter = (StyleConverter.WithReconstructionSupport<Background>)this.converter;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundConverterTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+        @SuppressWarnings(\"unchecked\")\n+        var converter = (StyleConverter.WithReconstructionSupport<Border>)this.converter;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderConverterTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}