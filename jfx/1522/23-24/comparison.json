{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import java.util.Map;\n+\n+\/**\n+ * Defines the {@code convert} and {@code convertBack} operations that enable object\n+ * decomposition and reconstruction. Note that the following invariant must always be\n+ * satisfied: {@code convert(convertBack(value)).equals(value)}\n+ *\n+ * @param <T> the target type\n+ *\/\n+public interface SubPropertyConverter<T> {\n+\n+    \/**\n+     * Converts a map of CSS values to the target type.\n+     *\n+     * @param values the constituent values\n+     * @return the converted object\n+     *\/\n+    T convert(Map<CssMetaData<? extends Styleable, ?>, Object> values);\n+\n+    \/**\n+     * Converts an object back to a map of its constituent values (deconstruction).\n+     * The returned map can be passed into {@link #convert(Map)} to reconstruct the object.\n+     *\n+     * @param value the object\n+     * @return a {@code Map} of the constituent values\n+     *\/\n+    Map<CssMetaData<? extends Styleable, ?>, Object> convertBack(T value);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/SubPropertyConverter.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,27 +89,0 @@\n-    \/**\n-     * Defines the {@code convert} and {@code convertBack} operations that enable object\n-     * decomposition and reconstruction. Note that the following invariant must always be\n-     * satisfied: {@code convert(convertBack(value)).equals(value)}\n-     *\n-     * @param <T> the target type\n-     * @since 24\n-     *\/\n-    public interface WithReconstructionSupport<T> {\n-        \/**\n-         * Converts a map of CSS values to the target type.\n-         *\n-         * @param values the constituent values\n-         * @return the converted object\n-         *\/\n-        T convert(Map<CssMetaData<? extends Styleable, ?>, Object> values);\n-\n-        \/**\n-         * Converts an object back to a map of its constituent values (deconstruction).\n-         * The returned map can be passed into {@link #convert(Map)} to reconstruct the object.\n-         *\n-         * @param value the object\n-         * @return a {@code Map} of the constituent values\n-         *\/\n-        Map<CssMetaData<? extends Styleable, ?>, Object> convertBack(T value);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleConverter.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.css.SubPropertyConverter;\n@@ -85,2 +86,2 @@\n-        if (converter instanceof StyleConverter.WithReconstructionSupport c) {\n-            applyValueComponents(newValue, metadata, c);\n+        if (converter instanceof SubPropertyConverter c) {\n+            applyComponents(newValue, metadata, c);\n@@ -143,3 +144,3 @@\n-    private void applyValueComponents(T newValue,\n-                                      CssMetaData<? extends Styleable, T> metadata,\n-                                      StyleConverter.WithReconstructionSupport<T> converter) {\n+    private void applyComponents(T newValue,\n+                                 CssMetaData<? extends Styleable, T> metadata,\n+                                 SubPropertyConverter<T> converter) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.css.SubPropertyConverter;\n@@ -44,1 +45,1 @@\n-                          implements StyleConverter.WithReconstructionSupport<Background> {\n+                          implements SubPropertyConverter<Background> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.css.SubPropertyConverter;\n@@ -47,1 +48,1 @@\n-                      implements StyleConverter.WithReconstructionSupport<Border> {\n+                      implements SubPropertyConverter<Border> {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.SubPropertyConverter;\n@@ -88,1 +89,1 @@\n-        var converter = (StyleConverter.WithReconstructionSupport<Background>)this.converter;\n+        var converter = (SubPropertyConverter<Background>)this.converter;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundConverterTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.SubPropertyConverter;\n@@ -93,1 +94,1 @@\n-        var converter = (StyleConverter.WithReconstructionSupport<Border>)this.converter;\n+        var converter = (SubPropertyConverter<Border>)this.converter;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderConverterTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}