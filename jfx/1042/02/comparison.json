{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -1130,4 +1129,0 @@\n-            if (new File(url).exists()) {\n-                return url;\n-            }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/Image.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n-    private static String getTestPolicyFile() {\n-        return SandboxAppTest.class.getResource(\"test.policy\").toExternalForm();\n+    private static String getTestPolicyFile(String policy) {\n+        return SandboxAppTest.class.getResource(policy).toExternalForm();\n@@ -57,0 +57,4 @@\n+        runSandboxedApp(appName, exitCode, \"test.policy\");\n+    }\n+\n+    private void runSandboxedApp(String appName, int exitCode, String policy) throws Exception {\n@@ -58,1 +62,1 @@\n-        final String testPolicy = getTestPolicyFile();\n+        final String testPolicy = getTestPolicyFile(policy);\n@@ -133,0 +137,4 @@\n+    @Test (timeout = 25000)\n+    public void testFXWebApp() throws Exception {\n+        runSandboxedApp(\"FXWebApp\", ERROR_NONE, \"empty.policy\");\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/SandboxAppTest.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.sandbox.app;\n+\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.application.Application;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.web.WebView;\n+import javafx.util.Duration;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+import com.sun.javafx.scene.control.CustomColorDialog;\n+\n+import java.util.Objects;\n+\n+import static test.sandbox.Constants.ERROR_NONE;\n+import static test.sandbox.Constants.ERROR_NO_SECURITY_EXCEPTION;\n+import static test.sandbox.Constants.ERROR_SECURITY_EXCEPTION;\n+import static test.sandbox.Constants.ERROR_UNEXPECTED_EXCEPTION;\n+import static test.sandbox.Constants.SHOWTIME;\n+\n+\/**\n+ * FX application to test running with a security manager installed. Note that\n+ * the toolkit will be initialized by the Java 8 launcher.\n+ *\/\n+public class FXWebApp extends Application {\n+\n+    \/**\n+     * @param args the command line arguments\n+     *\/\n+    public static void main(String[] args) {\n+        Util.setupTimeoutThread();\n+\n+        try {\n+            try {\n+                \/\/ Ensure that we are running with a restrictive\n+                \/\/ security manager\n+                System.getProperty(\"sun.something\");\n+                System.err.println(\"*** Did not get expected security exception\");\n+                System.exit(ERROR_NO_SECURITY_EXCEPTION);\n+            } catch (SecurityException ex) {\n+                \/\/ This is expected\n+            }\n+            Application.launch(args);\n+        } catch (SecurityException ex) {\n+            ex.printStackTrace(System.err);\n+            System.exit(ERROR_SECURITY_EXCEPTION);\n+        } catch (RuntimeException ex) {\n+            ex.printStackTrace(System.err);\n+            Throwable cause = ex.getCause();\n+            if (cause instanceof ExceptionInInitializerError) {\n+                cause = cause.getCause();\n+                if (cause instanceof SecurityException) {\n+                    System.exit(ERROR_SECURITY_EXCEPTION);\n+                }\n+            }\n+            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+        } catch (Error | Exception t) {\n+            t.printStackTrace(System.err);\n+            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+        }\n+    }\n+\n+    private String selectedColor;\n+\n+    @Override\n+    public void start(final Stage stage) {\n+        try {\n+            WebView webView = new WebView();\n+            webView.getEngine().setOnAlert(event -> selectedColor = event.getData());\n+            webView.getEngine().loadContent(\"<head>\" +\n+                    \"<script>\" +\n+                    \"   function logColor(event) {\" +\n+                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                    \"        alert(\\\"color: \\\" + color.value);\" +\n+                    \"   }\\n\" +\n+                    \"   setTimeout(\\n\" +\n+                    \"     () => {\\n\" +\n+                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                    \"        color.addEventListener(\\\"change\\\", logColor, false);\" +\n+                    \"        alert(\\\"color: \\\" + color.value);\" +\n+                    \"     }, 100);\" +\n+                    \"<\/script>\" +\n+                    \"<\/head><body><input id=\\\"color\\\" type=\\\"color\\\" value=\\\"#000000\\\"><\/body>\");\n+            Scene scene = new Scene(webView, 400, 300);\n+            stage.setScene(scene);\n+            stage.setX(0);\n+            stage.setY(0);\n+            stage.show();\n+\n+            \/\/ Simulate click to show the ColorChooser dialog after\n+            \/\/ the specified amount of time\n+            KeyFrame kf0 = new KeyFrame(Duration.millis(500), e -> {\n+\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 20,\n+                            20, (int) (stage.getX() + scene.getX() + 20),\n+                            (int) (stage.getY() + scene.getY() + 20), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, true, false, false, true, false, false, null));\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 20,\n+                            20, (int) (stage.getX() + scene.getX() + 20),\n+                            (int) (stage.getY() + scene.getY() + 20), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, false, false, false, true, false, false, null));\n+\n+            });\n+            \/\/ Interact with the ColorChooserDialog window\n+            KeyFrame kf1 = new KeyFrame(Duration.millis(1000), e -> {\n+                Window.getWindows().stream()\n+                        .filter(w -> w.getScene().getRoot() instanceof CustomColorDialog)\n+                        .findFirst()\n+                        .map(w -> (CustomColorDialog) w.getScene().getRoot())\n+                        .ifPresentOrElse(dialog -> {\n+                            if (Double.isNaN(dialog.getDialog().getMinWidth()) ||\n+                                    Double.isNaN(dialog.getDialog().getMinHeight())) {\n+                                \/\/ Unexpected, the ColorChooserDialog window should\n+                                \/\/ have valid dimensions\n+                                System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+                            }\n+                            dialog.setCustomColor(Color.web(\"#ff0000\"));\n+                            HBox box = (HBox) dialog.lookup(\"#buttons-hbox\");\n+                            Button ok = (Button) box.getChildren().get(0);\n+                            ok.fire();\n+                        }, () -> {\n+                            \/\/ Unexpected, there should be a ColorChooserDialog\n+                            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+                        });\n+            });\n+            \/\/ Hide the stage after the specified amount of time\n+            KeyFrame kf2 = new KeyFrame(Duration.millis(SHOWTIME), e -> stage.hide());\n+            Timeline timeline = new Timeline(kf0, kf1, kf2);\n+            timeline.play();\n+        } catch (SecurityException ex) {\n+            ex.printStackTrace(System.err);\n+            System.exit(ERROR_SECURITY_EXCEPTION);\n+        } catch (Error | Exception ex) {\n+            ex.printStackTrace(System.err);\n+            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+        }\n+    }\n+\n+    @Override public void stop() {\n+        if (Objects.equals(selectedColor, \"color: #ff0000\")) {\n+            System.exit(ERROR_NONE);\n+        }\n+        \/\/ Unexpected, the color wasn't changed\n+        System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/FXWebApp.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,0 +217,1 @@\n+        cmd.add(\"--add-exports=javafx.controls\/com.sun.javafx.scene.control=ALL-UNNAMED\");\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,9 @@\n+\/\/ Policy file for SandboxAppTest.testFXWebApp test\n+\/\/ Use as follows: -Djava.security.policy=empty.policy\n+\n+\/\/ No permissions to read resource files are granted\n+\/\/ FX permission to access the window list is only granted for\n+\/\/ the purpose of the test\n+grant {\n+    permission javafx.util.FXPermission \"accessWindowList\";\n+};\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/empty.policy","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"}]}