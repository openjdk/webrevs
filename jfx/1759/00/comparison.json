{"files":[{"patch":"@@ -31,4 +31,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -73,1 +73,1 @@\n-    public BidirectionalBindingTest(Factory<T> factory) {\n+    public void BidirectionalBindingTest_(Factory<T> factory) {\n@@ -77,1 +77,1 @@\n-    @Before\n+    \/\/@BeforeEach\n@@ -88,2 +88,5 @@\n-    @Test\n-    public void testBind() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -105,2 +108,5 @@\n-    @Test\n-    public void testUnbind() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -130,2 +136,5 @@\n-    @Test\n-    public void testChaining() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChaining(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -182,2 +191,5 @@\n-    @Test\n-    public void testWeakReferencing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testWeakReferencing(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -204,2 +216,5 @@\n-    @Test\n-    public void testHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testHashCode(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -212,2 +227,5 @@\n-    @Test\n-    public void testEquals() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEquals(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -227,2 +245,5 @@\n-    @Test\n-    public void testEqualsWithGCedProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testEqualsWithGCedProperty(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -245,3 +266,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testBind_Null_X() {\n-        Bindings.bindBidirectional(null, op2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind_Null_X(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> Bindings.bindBidirectional(null, op2));\n@@ -250,3 +274,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testBind_X_Null() {\n-        Bindings.bindBidirectional(op1, null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind_X_Null(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> Bindings.bindBidirectional(op1, null));\n@@ -255,3 +282,6 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testBind_X_Self() {\n-        Bindings.bindBidirectional(op1, op1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind_X_Self(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(IllegalArgumentException.class, () -> Bindings.bindBidirectional(op1, op1));\n@@ -260,3 +290,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testUnbind_Null_X() {\n-        Bindings.unbindBidirectional(null, op2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind_Null_X(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> Bindings.unbindBidirectional(null, op2));\n@@ -265,3 +298,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testUnbind_X_Null() {\n-        Bindings.unbindBidirectional(op1, null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind_X_Null(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> Bindings.unbindBidirectional(op1, null));\n@@ -270,3 +306,6 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testUnbind_X_Self() {\n-        Bindings.unbindBidirectional(op1, op1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind_X_Self(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n+        assertThrows(IllegalArgumentException.class, () -> Bindings.unbindBidirectional(op1, op1));\n@@ -275,2 +314,5 @@\n-    @Test\n-    public void testBrokenBind() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBrokenBind(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -287,2 +329,5 @@\n-    @Test\n-    public void testDoubleBrokenBind() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDoubleBrokenBind(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -305,2 +350,5 @@\n-    @Test\n-    public void testSetValueWithoutIntermediateValidation() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSetValueWithoutIntermediateValidation(Factory<T> factory) {\n+        BidirectionalBindingTest_(factory);\n+        setUp();\n@@ -314,1 +362,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalBindingTest.java","additions":94,"deletions":47,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -33,4 +33,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -44,0 +45,1 @@\n+import java.util.stream.Stream;\n@@ -45,1 +47,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +49,0 @@\n-@RunWith(Parameterized.class)\n@@ -60,3 +61,3 @@\n-    private final Functions<S, T> func;\n-    private final S[] v0;\n-    private final T[] v1;\n+    private  Functions<S, T> func;\n+    private  S[] v0;\n+    private  T[] v1;\n@@ -67,1 +68,1 @@\n-    public BidirectionalBindingWithConversionTest(Functions<S, T> func, S[] v0, T[] v1) {\n+    public void BidirectionalBindingWithConversionTest_(Functions<S, T> func, S[] v0, T[] v1) {\n@@ -75,2 +76,5 @@\n-    @Before\n-    public void setUp() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n@@ -79,4 +83,0 @@\n-    }\n-\n-    @Test\n-    public void testBind() {\n@@ -97,2 +97,6 @@\n-    @Test\n-    public void testUnbind() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n@@ -122,2 +126,6 @@\n-    @Test\n-    public void testWeakReferencing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testWeakReferencing(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n@@ -144,3 +152,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testBind_Null_X() {\n-        func.bind(null, op1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testBind_Null_X(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n+        assertThrows(NullPointerException.class, () -> func.bind(null, op1));\n@@ -149,3 +161,5 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testBind_X_Null() {\n-        func.bind(op0, null);\n+    public void testBind_X_Null(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n+        assertThrows(NullPointerException.class, () -> func.bind(op0, null));\n@@ -154,3 +168,5 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testUnbind_Null_X() {\n-        func.unbind(null, op1);\n+    public void testUnbind_Null_X(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n+        assertThrows(NullPointerException.class, () -> func.unbind(null, op1));\n@@ -159,3 +175,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testUnbind_X_Null() {\n-        func.unbind(op0, null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind_X_Null(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n+        assertThrows(NullPointerException.class, () ->  func.unbind(op0, null));\n@@ -164,3 +184,7 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testUnbind_X_Self() {\n-        func.unbind(op0, op0);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbind_X_Self(Functions<S, T> func, S[] v0, T[] v1) {\n+        BidirectionalBindingWithConversionTest_(func, v0, v1);\n+        op0.setValue(v0[0]);\n+        op1.setValue(v1[1]);\n+        assertThrows(IllegalArgumentException.class, () ->  func.unbind(op0, op0));\n@@ -169,1 +193,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalBindingWithConversionTest.java","additions":59,"deletions":36,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n@@ -35,5 +32,8 @@\n-import org.junit.Test;\n-import org.junit.Assert;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -41,1 +41,0 @@\n-@RunWith(Parameterized.class)\n@@ -44,2 +43,2 @@\n-        Operation.mul(3), Operation.add(5), Operation.mul(4), Operation.sub(2),\n-        Operation.div(6), Operation.add(9), Operation.div(2), Operation.sub(6)\n+            Operation.mul(3), Operation.add(5), Operation.mul(4), Operation.sub(2),\n+            Operation.div(6), Operation.add(9), Operation.div(2), Operation.sub(6)\n@@ -48,14 +47,5 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(\n-                new Object[][] {\n-                    { EventDispatchChainImpl.class },\n-                    { EventDispatchTreeImpl.class }\n-                });\n-    }\n-\n-    private EventDispatchChain eventDispatchChain;\n-\n-    public EventDispatchChainTest(final Class<EventDispatchChain> chainClass)\n-            throws Exception {\n-        eventDispatchChain = chainClass.getDeclaredConstructor().newInstance();\n+    private static Stream<Arguments> chainClasses() {\n+        return Stream.of(\n+                Arguments.of(EventDispatchChainImpl.class),\n+                Arguments.of(EventDispatchTreeImpl.class)\n+        );\n@@ -64,4 +54,6 @@\n-    @Test\n-    public void chainConstructionBeforeDispatchTest() {\n-        eventDispatchChain = initializeTestChain(eventDispatchChain);\n-        verifyChain(eventDispatchChain, 0, 702);\n+    @ParameterizedTest\n+    @MethodSource(\"chainClasses\")\n+    void chainConstructionBeforeDispatchTest(Class<? extends EventDispatchChain> chainClass) throws Exception {\n+        EventDispatchChain chain = chainClass.getDeclaredConstructor().newInstance();\n+        chain = initializeTestChain(chain);\n+        verifyChain(chain, 0, 702);\n@@ -70,4 +62,6 @@\n-    @Test\n-    public void chainModificationAfterDispatchTest() {\n-        eventDispatchChain = initializeTestChain(eventDispatchChain);\n-        eventDispatchChain.dispatchEvent(new ValueEvent());\n+    @ParameterizedTest\n+    @MethodSource(\"chainClasses\")\n+    void chainModificationAfterDispatchTest(Class<? extends EventDispatchChain> chainClass) throws Exception {\n+        EventDispatchChain chain = chainClass.getDeclaredConstructor().newInstance();\n+        chain = initializeTestChain(chain);\n+        chain.dispatchEvent(new ValueEvent());\n@@ -75,5 +69,2 @@\n-        eventDispatchChain = eventDispatchChain.append(\n-                                     new EventChangingDispatcher(\n-                                         Operation.sub(6),\n-                                         Operation.div(3)));\n-        verifyChain(eventDispatchChain, 0, 270);\n+        chain = chain.append(new EventChangingDispatcher(Operation.sub(6), Operation.div(3)));\n+        verifyChain(chain, 0, 270);\n@@ -81,2 +72,2 @@\n-        eventDispatchChain = prependIdentityChain(eventDispatchChain);\n-        verifyChain(eventDispatchChain, 0, 270);\n+        chain = prependIdentityChain(chain);\n+        verifyChain(chain, 0, 270);\n@@ -85,2 +76,5 @@\n-    @Test\n-    public void chainModificationDuringDispatchTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"chainClasses\")\n+    void chainModificationDuringDispatchTest(Class<? extends EventDispatchChain> chainClass) throws Exception {\n+        EventDispatchChain chain = chainClass.getDeclaredConstructor().newInstance();\n+\n@@ -88,9 +82,6 @@\n-        eventDispatchChain = prependSeriesChain(eventDispatchChain, 10);\n-        eventDispatchChain =\n-                eventDispatchChain.prepend(\n-                        new PathChangingDispatcher(\n-                            new EventChangingDispatcher(Operation.mul(3),\n-                                                        Operation.div(5)),\n-                            new EventChangingDispatcher(Operation.div(7),\n-                                                        Operation.mul(9)),\n-                            1));\n+        chain = prependSeriesChain(chain, 10);\n+        chain = chain.prepend(\n+                new PathChangingDispatcher(\n+                        new EventChangingDispatcher(Operation.mul(3), Operation.div(5)),\n+                        new EventChangingDispatcher(Operation.div(7), Operation.mul(9)),\n+                        1));\n@@ -98,1 +89,1 @@\n-        eventDispatchChain = prependSeriesChain(eventDispatchChain, 5);\n+        chain = prependSeriesChain(chain, 5);\n@@ -100,3 +91,1 @@\n-        eventDispatchChain =\n-                eventDispatchChain.prepend(\n-                        new PathChangingDispatcher(null, null, 2));\n+        chain = chain.prepend(new PathChangingDispatcher(null, null, 2));\n@@ -105,1 +94,1 @@\n-        eventDispatchChain = prependSeriesChain(eventDispatchChain, 3);\n+        chain = prependSeriesChain(chain, 3);\n@@ -108,1 +97,1 @@\n-            verifyChain(eventDispatchChain, 1225 * x - 86, 729 * x + 50);\n+            verifyChain(chain, 1225 * x - 86, 729 * x + 50);\n@@ -112,4 +101,7 @@\n-    @Test\n-    public void buildLongChainTest() {\n-        eventDispatchChain = prependSeriesChain(eventDispatchChain, 100);\n-        verifyChain(eventDispatchChain, 0, 10100);\n+    @ParameterizedTest\n+    @MethodSource(\"chainClasses\")\n+    void buildLongChainTest(Class<? extends EventDispatchChain> chainClass) throws Exception {\n+        EventDispatchChain chain = chainClass.getDeclaredConstructor().newInstance();\n+\n+        chain = prependSeriesChain(chain, 100);\n+        verifyChain(chain, 0, 10100);\n@@ -117,2 +109,2 @@\n-        eventDispatchChain = prependIdentityChain(eventDispatchChain);\n-        verifyChain(eventDispatchChain, 1, 10101);\n+        chain = prependIdentityChain(chain);\n+        verifyChain(chain, 1, 10101);\n@@ -120,2 +112,2 @@\n-        eventDispatchChain = prependSeriesChain(eventDispatchChain, 100);\n-        verifyChain(eventDispatchChain, 2, 20202);\n+        chain = prependSeriesChain(chain, 100);\n+        verifyChain(chain, 2, 20202);\n@@ -124,2 +116,1 @@\n-    private static EventDispatchChain prependIdentityChain(\n-            EventDispatchChain tailChain) {\n+    private static EventDispatchChain prependIdentityChain(EventDispatchChain tailChain) {\n@@ -129,2 +120,1 @@\n-                            IDENTITY_FUNCTION_OPS[\n-                                    IDENTITY_FUNCTION_OPS.length - i - 1],\n+                            IDENTITY_FUNCTION_OPS[IDENTITY_FUNCTION_OPS.length - i - 1],\n@@ -137,2 +127,1 @@\n-    private static EventDispatchChain prependSeriesChain(\n-            EventDispatchChain tailChain, final int count) {\n+    private static EventDispatchChain prependSeriesChain(EventDispatchChain tailChain, final int count) {\n@@ -141,2 +130,1 @@\n-                    new EventChangingDispatcher(Operation.add(i),\n-                                                Operation.add(i)));\n+                    new EventChangingDispatcher(Operation.add(i), Operation.add(i)));\n@@ -148,17 +136,6 @@\n-    private static EventDispatchChain initializeTestChain(\n-            final EventDispatchChain emptyChain) {\n-        return emptyChain.append(new EventChangingDispatcher(\n-                                     Operation.add(3),\n-                                     Operation.div(2)))\n-                         .append(new EventChangingDispatcher(\n-                                     Operation.mul(7),\n-                                     Operation.sub(6)))\n-                         .prepend(new EventChangingDispatcher(\n-                                      Operation.sub(4),\n-                                      Operation.mul(6)))\n-                         .append(new EventChangingDispatcher(\n-                                     Operation.div(3),\n-                                     Operation.add(11)))\n-                         .prepend(new EventChangingDispatcher(\n-                                      Operation.add(10),\n-                                      Operation.mul(9)));\n+    private static EventDispatchChain initializeTestChain(final EventDispatchChain emptyChain) {\n+        return emptyChain.append(new EventChangingDispatcher(Operation.add(3), Operation.div(2)))\n+                .append(new EventChangingDispatcher(Operation.mul(7), Operation.sub(6)))\n+                .prepend(new EventChangingDispatcher(Operation.sub(4), Operation.mul(6)))\n+                .append(new EventChangingDispatcher(Operation.div(3), Operation.add(11)))\n+                .prepend(new EventChangingDispatcher(Operation.add(10), Operation.mul(9)));\n@@ -170,3 +147,1 @@\n-        final ValueEvent valueEvent =\n-                (ValueEvent) testChain.dispatchEvent(\n-                                     new ValueEvent(initialValue));\n+        final ValueEvent valueEvent = (ValueEvent) testChain.dispatchEvent(new ValueEvent(initialValue));\n@@ -174,2 +149,2 @@\n-        Assert.assertNotNull(valueEvent);\n-        Assert.assertEquals(resultValue, valueEvent.getValue());\n+        assertNotNull(valueEvent);\n+        assertEquals(resultValue, valueEvent.getValue());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventDispatchChainTest.java","additions":70,"deletions":95,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -36,2 +36,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +39,1 @@\n-*\/\n+ *\/\n@@ -46,1 +45,1 @@\n-    @Before\n+    @BeforeEach\n@@ -59,1 +58,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -61,1 +60,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -64,3 +63,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -69,1 +66,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -71,1 +68,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -74,3 +71,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -79,1 +74,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -81,1 +76,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -84,3 +79,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -89,1 +82,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -91,1 +84,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -94,3 +87,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -99,1 +90,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -101,1 +92,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -104,9 +95,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardNames_WithGetterNameIsNull() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(null);\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n+        });\n@@ -115,10 +98,4 @@\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardNames_WithSetterNameIsNull() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.setterName(null);\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testSetup_WithNonStandardNames_WithNameIsEmpty() {\n-        try {\n-            helperPOJOBeanWithNonStandardNames.name(\"\");\n+    @Test\n+    public void testSetup_WithNonStandardNames_WithGetterNameIsNull() {\n+        assertThrows(NoSuchMethodException.class, () -> {\n+            helperPOJOBeanWithNonStandardNames.getterName(null);\n@@ -126,3 +103,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -131,57 +106,6 @@\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardNames_WithGetterNameIsEmpty() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(\"\");\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardNames_WithSetterNameIsEmpty() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.setterName(\"\");\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testSetup_WithNonStandardAccessors_WithNameIsNull() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(null);\n-        helperPOJOBeanWithNonStandardNames.setterName(null);\n-        try {\n-            final Method getter = POJOBeanWithNonStandardNames.class.getMethod(\"readX\");\n-            final Method setter = POJOBeanWithNonStandardNames.class.getMethod(\"writeX\", Object.class);\n-            helperPOJOBeanWithNonStandardNames.getter(getter);\n-            helperPOJOBeanWithNonStandardNames.setter(setter);\n-\n-            helperPOJOBeanWithNonStandardNames.name(null);\n-        } catch (NoSuchMethodException e) {\n-            fail(\"Error in test code. Should not happen.\");\n-        }\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardAccessors_WithGetterIsNull() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(null);\n-        helperPOJOBeanWithNonStandardNames.setterName(null);\n-        try {\n-            final Method setter = POJOBeanWithNonStandardNames.class.getMethod(\"writeX\", Object.class);\n-            helperPOJOBeanWithNonStandardNames.setter(setter);\n-\n-            helperPOJOBeanWithNonStandardNames.getter(null);\n-        } catch (NoSuchMethodException e) {\n-            fail(\"Error in test code. Should not happen.\");\n-        }\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n-    }\n-\n-    @Test(expected = NoSuchMethodException.class)\n-    public void testSetup_WithNonStandardAccessors_WithSetterIsNull() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(null);\n-        helperPOJOBeanWithNonStandardNames.setterName(null);\n-        try {\n-            final Method getter = POJOBeanWithNonStandardNames.class.getMethod(\"readX\");\n-            helperPOJOBeanWithNonStandardNames.getter(getter);\n-\n-            helperPOJOBeanWithNonStandardNames.setter(null);\n-        } catch (NoSuchMethodException e) {\n-            fail(\"Error in test code. Should not happen.\");\n-        }\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n+    @Test\n+    public void testSetup_WithNonStandardNames_WithSetterNameIsNull() {\n+        assertThrows(NoSuchMethodException.class, () -> {\n+            helperPOJOBeanWithNonStandardNames.setterName(null);\n+            helperPOJOBeanWithNonStandardNames.getDescriptor();\n+        });\n@@ -190,10 +114,3 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testSetup_WithNonStandardAccessors_WithNameIsEmpty() throws NoSuchMethodException {\n-        helperPOJOBeanWithNonStandardNames.getterName(null);\n-        helperPOJOBeanWithNonStandardNames.setterName(null);\n-        try {\n-            final Method getter = POJOBeanWithNonStandardNames.class.getMethod(\"readX\");\n-            final Method setter = POJOBeanWithNonStandardNames.class.getMethod(\"writeX\", Object.class);\n-            helperPOJOBeanWithNonStandardNames.getter(getter);\n-            helperPOJOBeanWithNonStandardNames.setter(setter);\n-\n+    @Test\n+    public void testSetup_WithNonStandardAccessors_WithNameIsEmpty() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -201,4 +118,2 @@\n-        } catch (NoSuchMethodException e) {\n-            fail(\"Error in test code. Should not happen.\");\n-        }\n-        helperPOJOBeanWithNonStandardNames.getDescriptor();\n+            helperPOJOBeanWithNonStandardNames.getDescriptor();\n+        });\n@@ -238,1 +153,0 @@\n-\n@@ -249,1 +163,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/property\/adapter\/JavaBeanPropertyBuilderHelperTest.java","additions":36,"deletions":123,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\n+\/\/test is disabled already\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/property\/adapter\/PropertyDescriptorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\n+\/\/test is disabled already\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/property\/adapter\/ReadOnlyPropertyDescriptorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.util.Arrays;\n-import java.util.List;\n@@ -42,5 +40,0 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -48,1 +41,8 @@\n-@RunWith(Parameterized.class)\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n@@ -53,1 +53,1 @@\n-        public Property<T> createProperty();\n+        Property<T> createProperty();\n@@ -57,4 +57,3 @@\n-\n-        private PropertyFactory<T> propertyFactory;\n-        private PropertyFactory<T> observableFactory;\n-        private T value;\n+        private final PropertyFactory<T> propertyFactory;\n+        private final PropertyFactory<T> observableFactory;\n+        private final T value;\n@@ -63,2 +62,1 @@\n-                PropertyFactory<T> observableFactory, T value)\n-        {\n+                       PropertyFactory<T> observableFactory, T value) {\n@@ -84,2 +82,1 @@\n-            implements ObservableNumberValue, Property<Number>\n-    {\n+            implements ObservableNumberValue, Property<Number> {\n@@ -108,28 +105,25 @@\n-    @Parameterized.Parameters\n-    public static List<Object[]> data() {\n-        return Arrays.asList(new Object[][] {\n-            \/\/ primitive binding\n-            \/\/ Property->Listener->Value\n-            { new Factory(() -> new SimpleBooleanProperty(), () -> new SimpleBooleanProperty(), true) },\n-            { new Factory(() -> new SimpleDoubleProperty(), () -> new SimpleDoubleProperty(), 1.0) },\n-            { new Factory(() -> new SimpleFloatProperty(), () -> new SimpleFloatProperty(), 1.0f) },\n-            { new Factory(() -> new SimpleIntegerProperty(), () -> new SimpleIntegerProperty(), 1) },\n-            { new Factory(() -> new SimpleLongProperty(), () -> new SimpleLongProperty(), 1L) },\n-            \/\/ generic with wrapper\n-            \/\/ Property->Listener->Binding->BindingHelperObserver->Value\n-            { new Factory(() -> new SimpleBooleanProperty(), () -> new SimpleObjectProperty<>(), true) },\n-            { new Factory(() -> new SimpleDoubleProperty(), () -> new SimpleObjectProperty<>(), 1.0) },\n-            { new Factory(() -> new SimpleDoubleProperty(), () -> new NumberPropertyMock(), 1.0) },\n-            { new Factory(() -> new SimpleFloatProperty(), () -> new SimpleObjectProperty<>(), 1.0f) },\n-            { new Factory(() -> new SimpleFloatProperty(), () -> new NumberPropertyMock(), 1.0f) },\n-            { new Factory(() -> new SimpleIntegerProperty(), () -> new SimpleObjectProperty<>(), 1) },\n-            { new Factory(() -> new SimpleIntegerProperty(), () -> new NumberPropertyMock(), 1) },\n-            { new Factory(() -> new SimpleLongProperty(), () -> new SimpleObjectProperty<>(), 1L) },\n-            { new Factory(() -> new SimpleLongProperty(), () -> new NumberPropertyMock(), 1L) },\n-            \/\/ generic\n-            \/\/ Property->Listener->Value\n-            { new Factory(() -> new SimpleObjectProperty(), () -> new SimpleObjectProperty<>(), new Object()) },\n-            { new Factory(() -> new SimpleStringProperty(), () -> new SimpleObjectProperty<>(), \"1\") },\n-            \/\/ the same as generic\n-            { new Factory(() -> new SimpleStringProperty(), () -> new SimpleStringProperty(), \"1\") },\n-        });\n+    static Stream<Factory<?>> data() {\n+        return Stream.of(\n+                \/\/ Primitive bindings\n+                new Factory<>(SimpleBooleanProperty::new, SimpleBooleanProperty::new, true),\n+                new Factory<>(SimpleDoubleProperty::new, SimpleDoubleProperty::new, 1.0),\n+                new Factory<>(SimpleFloatProperty::new, SimpleFloatProperty::new, 1.0f),\n+                new Factory<>(SimpleIntegerProperty::new, SimpleIntegerProperty::new, 1),\n+                new Factory<>(SimpleLongProperty::new, SimpleLongProperty::new, 1L),\n+\n+                \/\/ Generic with wrapper\n+                new Factory<>(SimpleBooleanProperty::new, () -> new SimpleObjectProperty<>(), true),\n+                new Factory<>(SimpleDoubleProperty::new, () -> new SimpleObjectProperty<>(), 1.0),\n+                new Factory<>(SimpleDoubleProperty::new, NumberPropertyMock::new, 1.0),\n+                new Factory<>(SimpleFloatProperty::new, () -> new SimpleObjectProperty<>(), 1.0f),\n+                new Factory<>(SimpleFloatProperty::new, NumberPropertyMock::new, 1.0f),\n+                new Factory<>(SimpleIntegerProperty::new, () -> new SimpleObjectProperty<>(), 1),\n+                new Factory<>(SimpleIntegerProperty::new, NumberPropertyMock::new, 1),\n+                new Factory<>(SimpleLongProperty::new, () -> new SimpleObjectProperty<>(), 1L),\n+                new Factory<>(SimpleLongProperty::new, NumberPropertyMock::new, 1L),\n+\n+                \/\/ Generic\n+                new Factory<>(SimpleObjectProperty::new, () -> new SimpleObjectProperty<>(), new Object()),\n+                new Factory<>(SimpleStringProperty::new, () -> new SimpleObjectProperty<>(), \"1\"),\n+                new Factory<>(SimpleStringProperty::new, SimpleStringProperty::new, \"1\")\n+        );\n@@ -138,15 +132,6 @@\n-    public PropertyBaseTest(Factory<T> factory) {\n-        this.factory = factory;\n-    }\n-\n-    @Before\n-    public void setUp() {\n-        property = factory.createProperty();\n-        observable = factory.createObservable();\n-        value = factory.getValue();\n-    }\n-\n-    private Factory<T> factory;\n-    private Property<T> property;\n-    private Property<T> observable;\n-    private T value;\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    void testUnbindAfterInvalidation(Factory<T> factory) {\n+        Property<T> property = factory.createProperty();\n+        Property<T> observable = factory.createObservable();\n+        T value = factory.getValue();\n@@ -154,2 +139,0 @@\n-    @Test\n-    public void testUnbindAfterInvalidation() {\n@@ -166,2 +149,7 @@\n-    @Test\n-    public void testTrimAfterGC() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    void testTrimAfterGC(Factory<T> factory) {\n+        Property<T> property = factory.createProperty();\n+        Property<T> observable = factory.createObservable();\n+        T value = factory.getValue();\n+\n@@ -170,2 +158,2 @@\n-        p1.bind(observable); \/\/ creates SingleInvalidation\n-        p2.bind(observable); \/\/ creates Generic with 2 listeners\n+        p1.bind(observable);\n+        p2.bind(observable);\n@@ -178,1 +166,1 @@\n-        property.bind(observable); \/\/ calls trim\n+        property.bind(observable);\n@@ -182,2 +170,6 @@\n-    @Test\n-    public void testUnbindGenericWrapper() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    void testUnbindGenericWrapper(Factory<T> factory) {\n+        Property<T> property = factory.createProperty();\n+        Property<T> observable = factory.createObservable();\n+\n@@ -187,1 +179,1 @@\n-        property.unbind(); \/\/ should unbind wrapper from observable\n+        property.unbind();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyBaseTest.java","additions":62,"deletions":70,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,2 +44,0 @@\n-\/**\n-*\/\n@@ -56,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n@@ -66,1 +64,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -68,1 +66,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -70,3 +68,1 @@\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        });\n@@ -97,1 +93,1 @@\n-    @Test(expected = UndeclaredThrowableException.class)\n+    @Test\n@@ -100,1 +96,1 @@\n-        property.getValue();\n+        assertThrows(UndeclaredThrowableException.class, () -> property.getValue());\n@@ -103,1 +99,1 @@\n-    @Test(expected = UndeclaredThrowableException.class)\n+    @Test\n@@ -106,1 +102,1 @@\n-        property.setValue(getValue(1));\n+        assertThrows(UndeclaredThrowableException.class, () -> property.setValue(getValue(1)));\n@@ -109,1 +105,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -113,1 +109,1 @@\n-        property.setValue(getValue(0));\n+        assertThrows(RuntimeException.class, () -> property.setValue(getValue(0)));\n@@ -205,1 +201,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -207,1 +203,1 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> property.bind(null));\n@@ -226,1 +222,1 @@\n-            listenerCount = Math.max(0, listenerCount-1);\n+            listenerCount = Math.max(0, listenerCount - 1);\n@@ -234,1 +230,1 @@\n-            listenerCount = Math.max(0, listenerCount-1);\n+            listenerCount = Math.max(0, listenerCount - 1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanPropertyTestBase.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -43,4 +43,0 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -48,1 +44,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -52,1 +53,0 @@\n-@RunWith(Parameterized.class)\n@@ -63,6 +63,6 @@\n-    private final Property<T> p0;\n-    private final Property<T> p1;\n-    private final Functions<T> f;\n-    private final T value0;\n-    private final T value1;\n-    private final T defaultValue;\n+    private  Property<T> p0;\n+    private  Property<T> p1;\n+    private  Functions<T> f;\n+    private  T value0;\n+    private  T value1;\n+    private  T defaultValue;\n@@ -70,1 +70,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -75,1 +75,1 @@\n-    public BindingsCreateBindingTest(Property<T> p0, Property<T> p1, Functions<T> f, T value0, T value1, T defaultValue) {\n+    public void BindingsCreateBindingTest_(Property<T> p0, Property<T> p1, Functions<T> f, T value0, T value1, T defaultValue) {\n@@ -84,2 +84,3 @@\n-    @Test\n-    public void testNoDependencies() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNoDependencies(Property<T> p0, Property<T> p1, Functions<T> f, T value0, T value1, T defaultValue) {\n@@ -87,0 +88,1 @@\n+        BindingsCreateBindingTest_(p0, p1, f, value0, value1, defaultValue);\n@@ -114,2 +116,4 @@\n-    @Test\n-    public void testOneDependency() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testOneDependency(Property<T> p0, Property<T> p1, Functions<T> f, T value0, T value1, T defaultValue) {\n+        BindingsCreateBindingTest_(p0, p1, f, value0, value1, defaultValue);\n@@ -126,2 +130,4 @@\n-    @Test\n-    public void testCreateBoolean_TwoDependencies() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCreateBoolean_TwoDependencies(Property<T> p0, Property<T> p1, Functions<T> f, T value0, T value1, T defaultValue) {\n+        BindingsCreateBindingTest_(p0, p1, f, value0, value1, defaultValue);\n@@ -138,1 +144,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsCreateBindingTest.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,4 +50,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;;\n@@ -55,1 +55,0 @@\n-@RunWith(Parameterized.class)\n@@ -70,4 +69,4 @@\n-    private final ObservableValue op1;\n-    private final ObservableValue op2;\n-    private final Functions<T> func;\n-    private final T[] v;\n+    private  ObservableValue op1;\n+    private  ObservableValue op2;\n+    private  Functions<T> func;\n+    private  T[] v;\n@@ -76,1 +75,1 @@\n-    public BindingsEqualsTest(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+    public void BindingsEqualsTest_(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n@@ -87,1 +86,1 @@\n-    @Before\n+\n@@ -94,2 +93,5 @@\n-    @Test\n-    public void test_Expression_Expression() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n@@ -121,2 +123,5 @@\n-    @Test\n-    public void test_Self() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Self(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n@@ -136,3 +141,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_null_Expression() {\n-        func.generateExpressionExpression(null, op1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_null_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionExpression(null, op1));\n@@ -141,3 +149,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_Expression_null() {\n-        func.generateExpressionExpression(op1, null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_null(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionExpression(op1, null));\n@@ -146,2 +157,5 @@\n-    @Test\n-    public void test_Expression_Primitive() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_Primitive(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n@@ -167,3 +181,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_null_Primitive() {\n-        func.generateExpressionPrimitive(null, v[0]);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_null_Primitive(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionPrimitive(null, v[0]));\n@@ -172,2 +189,5 @@\n-    @Test\n-    public void test_Primitive_Expression() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Primitive_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n@@ -193,3 +213,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_Primitive_null() {\n-        func.generatePrimitiveExpression(v[0], null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Primitive_null(ObservableValue op1, ObservableValue op2, Functions<T> func, T... v) {\n+        BindingsEqualsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generatePrimitiveExpression(v[0], null));\n@@ -198,1 +221,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsEqualsTest.java","additions":55,"deletions":33,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,4 +46,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -51,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -66,4 +65,4 @@\n-    private final ObservableValue op1;\n-    private final ObservableValue op2;\n-    private final Functions<T> func;\n-    private final T[] v;\n+    private  ObservableValue op1;\n+    private  ObservableValue op2;\n+    private  Functions<T> func;\n+    private  T[] v;\n@@ -72,1 +71,1 @@\n-    public BindingsNumberCalculationsTest(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+    public void BindingsNumberCalculationsTest_(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n@@ -79,1 +78,0 @@\n-    @Before\n@@ -86,2 +84,5 @@\n-    @Test\n-    public void test_Expression_Expression() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n@@ -113,2 +114,5 @@\n-    @Test\n-    public void test_Self() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Self(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n@@ -129,3 +133,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_null_Expression() {\n-        func.generateExpressionExpression(null, op1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_null_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionExpression(null, op1));\n@@ -134,3 +141,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_Expression_null() {\n-        func.generateExpressionExpression(op1, null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_null(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionExpression(op1, null));\n@@ -139,2 +149,5 @@\n-    @Test\n-    public void test_Expression_Primitive() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Expression_Primitive(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n@@ -155,3 +168,6 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_null_Primitive() {\n-        func.generateExpressionPrimitive(null, v[0]);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_null_Primitive(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> func.generateExpressionPrimitive(null, v[0]));\n@@ -160,2 +176,5 @@\n-    @Test\n-    public void test_Primitive_Expression() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test_Primitive_Expression(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n@@ -176,3 +195,4 @@\n-    @Test(expected=NullPointerException.class)\n-    public void test_Primitive_null() {\n-        func.generatePrimitiveExpression(v[0], null);\n+    public void test_Primitive_null(ObservableValue op1, ObservableValue op2, Functions<T> func, T[] v) {\n+        BindingsNumberCalculationsTest_(op1, op2, func, v);\n+        setUp();\n+        assertThrows(IllegalArgumentException.class, () -> func.generatePrimitiveExpression(v[0], null));\n@@ -181,1 +201,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsNumberCalculationsTest.java","additions":52,"deletions":33,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -28,6 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n@@ -51,0 +45,5 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -52,4 +51,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -57,1 +57,0 @@\n-@RunWith(Parameterized.class)\n@@ -60,1 +59,1 @@\n-    public static interface Functions {\n+    public interface Functions {\n@@ -62,0 +61,1 @@\n+\n@@ -67,1 +67,1 @@\n-    private final Functions func;\n+    private Functions func;\n@@ -79,5 +79,1 @@\n-    public BindingsNumberCastTest(Functions func) {\n-        this.func = func;\n-    }\n-\n-    @Before\n+    @BeforeEach\n@@ -96,2 +92,7 @@\n-    @Test\n-    public void testDouble() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    void testBindings(Functions func) {\n+        this.func = func;\n+        setUp(); \/\/ Call setup before each parameterized run\n+\n+        \/\/ Test Double\n@@ -113,1 +114,0 @@\n-    }\n@@ -115,3 +115,2 @@\n-    @Test\n-    public void testFloat() {\n-        Binding binding = func.generateExpression(float1, double1);\n+        \/\/ Test Float\n+        binding = func.generateExpression(float1, double1);\n@@ -132,1 +131,0 @@\n-    }\n@@ -134,3 +132,2 @@\n-    @Test\n-    public void testLong() {\n-        Binding binding = func.generateExpression(long1, double1);\n+        \/\/ Test Long\n+        binding = func.generateExpression(long1, double1);\n@@ -151,1 +148,0 @@\n-    }\n@@ -153,3 +149,2 @@\n-    @Test\n-    public void testInteger() {\n-        Binding binding = func.generateExpression(integer1, double1);\n+        \/\/ Test Integer\n+        binding = func.generateExpression(integer1, double1);\n@@ -172,4 +167,2 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> parameters() {\n-        return Arrays.asList(new Object[][] {\n-            {\n+    static Stream<Arguments> parameters() {\n+        return Arrays.asList(\n@@ -185,1 +178,1 @@\n-                        assertEquals(op1 + op2, ((NumberExpression)binding).doubleValue(), EPSILON);\n+                        assertEquals(op1 + op2, ((NumberExpression) binding).doubleValue(), EPSILON);\n@@ -187,4 +180,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -200,1 +190,1 @@\n-                        assertEquals(op1 * op2, ((NumberExpression)binding).doubleValue(), EPSILON);\n+                        assertEquals(op1 * op2, ((NumberExpression) binding).doubleValue(), EPSILON);\n@@ -202,4 +192,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -216,1 +203,1 @@\n-                            assertEquals(op1 \/ op2, ((NumberExpression)binding).doubleValue(), EPSILON);\n+                            assertEquals(op1 \/ op2, ((NumberExpression) binding).doubleValue(), EPSILON);\n@@ -218,1 +205,1 @@\n-                            assertEquals((long)op1 \/ (long)op2, ((NumberExpression)binding).longValue());\n+                            assertEquals((long) op1 \/ (long) op2, ((NumberExpression) binding).longValue());\n@@ -221,4 +208,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -234,1 +218,1 @@\n-                        assertEquals(Math.min(op1, op2), ((NumberExpression)binding).doubleValue(), EPSILON);\n+                        assertEquals(Math.min(op1, op2), ((NumberExpression) binding).doubleValue(), EPSILON);\n@@ -236,4 +220,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -249,1 +230,1 @@\n-                        assertEquals(Math.max(op1, op2), ((NumberExpression)binding).doubleValue(), EPSILON);\n+                        assertEquals(Math.max(op1, op2), ((NumberExpression) binding).doubleValue(), EPSILON);\n@@ -251,4 +232,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -264,1 +242,1 @@\n-                        assertEquals(Math.abs(op1 - op2) < EPSILON, ((BooleanExpression)binding).get());\n+                        assertEquals(Math.abs(op1 - op2) < EPSILON, ((BooleanExpression) binding).get());\n@@ -266,4 +244,1 @@\n-\n-                }\n-            },\n-            {\n+                },\n@@ -279,1 +254,1 @@\n-                        assertEquals(op1 > op2, ((BooleanExpression)binding).get());\n+                        assertEquals(op1 > op2, ((BooleanExpression) binding).get());\n@@ -281,1 +256,0 @@\n-\n@@ -283,2 +257,1 @@\n-            },\n-        });\n+        ).stream().map(Arguments::of);\n@@ -286,1 +259,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsNumberCastTest.java","additions":44,"deletions":72,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -35,5 +35,5 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -45,4 +45,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -50,1 +50,0 @@\n-@RunWith(Parameterized.class)\n@@ -55,5 +54,5 @@\n-    private final ObservableStub dependency1 = new ObservableStub();\n-    private final ObservableStub dependency2 = new ObservableStub();\n-    private final T value1;\n-    private final T value2;\n-    private final Constructor<BindingMock<T>> bindingMockClassConstructor;\n+    private  ObservableStub dependency1 = new ObservableStub();\n+    private  ObservableStub dependency2 = new ObservableStub();\n+    private  T value1;\n+    private  T value2;\n+    private  Constructor<BindingMock<T>> bindingMockClassConstructor;\n@@ -67,1 +66,1 @@\n-    public GenericBindingTest(\n+    public void GenericBindingTest_(\n@@ -75,1 +74,0 @@\n-    @Before\n@@ -89,1 +87,1 @@\n-    @After\n+    @AfterEach\n@@ -99,2 +97,5 @@\n-    @Test\n-    public void testNoDependencyLazy() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNoDependencyLazy(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -114,2 +115,5 @@\n-    @Test\n-    public void testNoDependencyEager() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNoDependencyEager(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -129,2 +133,5 @@\n-    @Test\n-    public void testSingleDependencyLazy() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingleDependencyLazy(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -191,2 +198,5 @@\n-    @Test\n-    public void testSingleDependencyEager() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingleDependencyEager(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -253,2 +263,5 @@\n-    @Test\n-    public void testTwoDependencies() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoDependencies(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -299,2 +312,5 @@\n-    @Test\n-    public void testUnbindDependencies() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testUnbindDependencies(T value1, T value2, Class<BindingMock<T>> bindingMockClass) throws Exception  {\n+        GenericBindingTest_(value1, value2, bindingMockClass);\n+        setUp();\n@@ -344,1 +360,0 @@\n-    @Parameterized.Parameters\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/GenericBindingTest.java","additions":46,"deletions":31,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/When_Double_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/When_Float_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/When_Integer_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/When_Long_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,4 +42,5 @@\n-import static org.junit.Assert.*;\n-import org.junit.Ignore;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -293,1 +293,1 @@\n-                assertEquals(\"expected float = \" + expected[j] + \", actual float = \" + actual[i],\n+                assertEquals(\n@@ -295,1 +295,3 @@\n-                        Float.floatToRawIntBits(actual[i]));\n+                        Float.floatToRawIntBits(actual[i]),\n+                        \"expected float = \" + expected[j] + \", actual float = \" + actual[i]\n+                );\n@@ -342,1 +344,1 @@\n-    final ArrayWrapper wrapper;\n+    ArrayWrapper wrapper;\n@@ -348,1 +350,1 @@\n-    public ObservableArrayTest(final ArrayWrapper arrayWrapper) {\n+    public void ObservableArrayTest_(ArrayWrapper arrayWrapper) {\n@@ -352,1 +354,0 @@\n-    @Parameterized.Parameters\n@@ -355,3 +356,3 @@\n-            { new FloatArrayWrapper() },\n-            { new IntegerArrayWrapper() },\n-         };\n+                { new FloatArrayWrapper() },\n+                { new IntegerArrayWrapper() },\n+        };\n@@ -361,1 +362,0 @@\n-    @Before\n@@ -387,1 +387,5 @@\n-    @Test public void testSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -392,1 +396,5 @@\n-    @Test public void testClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -398,1 +406,5 @@\n-    @Test public void testGet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testGet(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -407,1 +419,5 @@\n-    @Test public void testToArray() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArray(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -417,1 +433,5 @@\n-    @Test public void testAddRemoveListener() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddRemoveListener(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -426,1 +446,5 @@\n-    @Test public void testAddTwoListenersElementChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddTwoListenersElementChange(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -434,1 +458,5 @@\n-    @Test public void testAddTwoListenersSizeChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddTwoListenersSizeChange(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -442,1 +470,5 @@\n-    @Test public void testAddThreeListeners() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddThreeListeners(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -453,1 +485,5 @@\n-    @Test public void testAddThreeListenersSizeChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddThreeListenersSizeChange(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -464,1 +500,1 @@\n-    @Test @Ignore\n+    @Test @Disabled\n@@ -471,1 +507,7 @@\n-    @Test public void testRemoveListenerTwice() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveListenerTwice(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -478,3 +520,6 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddNullArrayChangeListener() {\n-        try {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddNullArrayChangeListener(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> {\n@@ -482,5 +527,6 @@\n-        } finally {\n-            mao.check0();\n-            array.resize(1);\n-            mao.check1();\n-        }\n+        });\n+\n+        \/\/ Finally block is outside assertThrows() to ensure it always executes\n+        mao.check0();\n+        array.resize(1);\n+        mao.check1();\n@@ -489,2 +535,7 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddNullInvalidationListener() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddNullInvalidationListener(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -492,1 +543,3 @@\n-            array.addListener((InvalidationListener) null);\n+            assertThrows(NullPointerException.class, () -> {\n+                array.addListener((ArrayChangeListener) null);\n+            });\n@@ -500,2 +553,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testRemoveNullArrayChangeListener() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveNullArrayChangeListener(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -503,1 +559,3 @@\n-            array.removeListener((ArrayChangeListener) null);\n+            assertThrows(NullPointerException.class, () -> {\n+                array.addListener((ArrayChangeListener) null);\n+            });\n@@ -511,2 +569,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testRemoveNullInvalidationListener() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveNullInvalidationListener(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -514,1 +575,3 @@\n-            array.removeListener((InvalidationListener) null);\n+            assertThrows(NullPointerException.class, () -> {\n+                array.addListener((ArrayChangeListener) null);\n+            });\n@@ -540,1 +603,5 @@\n-    @Test public void testResizeTo0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeTo0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -544,1 +611,5 @@\n-    @Test public void testResizeToSmaller() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeToSmaller(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -548,1 +619,5 @@\n-    @Test public void testResizeToSameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeToSameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -552,1 +627,5 @@\n-    @Test public void testResizeToBigger() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeToBigger(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -556,1 +635,5 @@\n-    @Test public void testResizeOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeOnEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -561,1 +644,5 @@\n-    @Test public void testResizeOnEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeOnEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -566,2 +653,5 @@\n-    @Test (expected = NegativeArraySizeException.class)\n-    public void testResizeToNegative() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testResizeToNegative(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -569,1 +659,3 @@\n-            array.resize(-5);\n+            assertThrows(NegativeArraySizeException.class, () -> {\n+                array.resize(-5);\n+            });\n@@ -589,1 +681,5 @@\n-    @Test public void testSetAllASmaller() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllASmaller(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -593,1 +689,5 @@\n-    @Test public void testSetAllABigger() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllABigger(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -597,1 +697,5 @@\n-    @Test public void testSetAllAOnSameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllAOnSameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -601,1 +705,5 @@\n-    @Test public void testSetAllAOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllAOnEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -606,1 +714,5 @@\n-    @Test public void testSetAllAOnEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllAOnEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -613,2 +725,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testSetAllAToNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllAToNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -616,1 +731,3 @@\n-            wrapper.setAllA(null);\n+            assertThrows(NullPointerException.class, () -> {\n+                wrapper.setAllA(null);\n+            });\n@@ -638,1 +755,5 @@\n-    @Test public void testSetAllTSmaller() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTSmaller(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -642,1 +763,5 @@\n-    @Test public void testSetAllTBigger() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTBigger(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -646,1 +771,5 @@\n-    @Test public void testSetAllTOnSameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTOnSameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -650,1 +779,5 @@\n-    @Test public void testSetAllTOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTOnEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -655,1 +788,5 @@\n-    @Test public void testSetAllTOnEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTOnEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -662,2 +799,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testSetAllTToNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTToNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -665,1 +805,3 @@\n-            wrapper.setAllT(null);\n+            assertThrows(NullPointerException.class, () -> {\n+                wrapper.setAllA(null);\n+            });\n@@ -671,2 +813,5 @@\n-    @Test public void testSetAllTSelf() {\n-\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -682,1 +827,5 @@\n-    @Test public void testSetAllTSelfEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTSelfEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -707,1 +856,5 @@\n-    @Test public void testSetAllARange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -711,1 +864,5 @@\n-    @Test public void testSetAllARange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -715,1 +872,5 @@\n-    @Test public void testSetAllARange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -719,1 +880,5 @@\n-    @Test public void testSetAllARange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -723,1 +888,5 @@\n-    @Test public void testSetAllARange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -727,1 +896,5 @@\n-    @Test public void testSetAllARange6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -731,1 +904,5 @@\n-    @Test public void testSetAllARange7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -735,1 +912,5 @@\n-    @Test public void testSetAllARange8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARange8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -739,1 +920,5 @@\n-    @Test public void testSetAllARangeOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeOnEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -744,1 +929,5 @@\n-    @Test public void testSetAllARangeOnEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeOnEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -750,2 +939,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testSetAllARangeToNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeToNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -753,1 +945,3 @@\n-            wrapper.setAllA(null, 0, 0);\n+            assertThrows(NullPointerException.class, () -> {\n+                wrapper.setAllA(null, 0, 0);\n+            });\n@@ -759,2 +953,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllARangeNegative1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeNegative1(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -762,1 +959,3 @@\n-            testSetAllARange(true, INITIAL_SIZE, -1, INITIAL_SIZE);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllARange(true, INITIAL_SIZE, -1, INITIAL_SIZE);\n+            });\n@@ -768,2 +967,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllARangeNegative2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeNegative2(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -771,1 +973,3 @@\n-            testSetAllARange(true, INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllARange(true, INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n+            });\n@@ -777,2 +981,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllARangeNegative3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeNegative3(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -780,1 +987,3 @@\n-            testSetAllARange(true, INITIAL_SIZE, 1, -1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllARange(true, INITIAL_SIZE, 1, -1);\n+            });\n@@ -786,2 +995,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllARangeNegative4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllARangeNegative4(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -789,1 +1001,3 @@\n-            testSetAllARange(true, INITIAL_SIZE, INITIAL_SIZE, 1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllARange(true, INITIAL_SIZE, INITIAL_SIZE, 1);\n+            });\n@@ -795,2 +1009,0 @@\n-    \/\/ ========== setAll(observable array, range) tests ==========\n-\n@@ -810,1 +1022,5 @@\n-    @Test public void testSetAllTRange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange1(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -814,1 +1030,5 @@\n-    @Test public void testSetAllTRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange2(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -818,1 +1038,5 @@\n-    @Test public void testSetAllTRange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange3(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -822,1 +1046,5 @@\n-    @Test public void testSetAllTRange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange4(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -826,1 +1054,5 @@\n-    @Test public void testSetAllTRange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange5(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -830,1 +1062,5 @@\n-    @Test public void testSetAllTRange6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange6(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -834,1 +1070,5 @@\n-    @Test public void testSetAllTRange7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange7(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -838,1 +1078,5 @@\n-    @Test public void testSetAllTRange8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRange8(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -842,1 +1086,5 @@\n-    @Test public void testSetAllTRangeOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeOnEmpty(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -847,1 +1095,5 @@\n-    @Test public void testSetAllTRangeOnEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeOnEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -853,2 +1105,5 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testSetAllTRangeToNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeToNull(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -856,1 +1111,3 @@\n-            wrapper.setAllT(null, 0, 0);\n+            assertThrows(NullPointerException.class, () -> {\n+                wrapper.setAllT(null, 0, 0);\n+            });\n@@ -862,2 +1119,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegative1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeNegative1(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -865,1 +1125,3 @@\n-            testSetAllTRange(true, INITIAL_SIZE, -1, INITIAL_SIZE);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllTRange(true, INITIAL_SIZE, -1, INITIAL_SIZE);\n+            });\n@@ -871,2 +1133,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegative2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeNegative2(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -874,1 +1139,3 @@\n-            testSetAllTRange(true, INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllTRange(true, INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n+            });\n@@ -880,2 +1147,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegative3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeNegative3(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -883,1 +1153,3 @@\n-            testSetAllTRange(true, INITIAL_SIZE, 1, -1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllTRange(true, INITIAL_SIZE, 1, -1);\n+            });\n@@ -889,2 +1161,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegative4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeNegative4(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -892,1 +1167,3 @@\n-            testSetAllTRange(true, INITIAL_SIZE, INITIAL_SIZE, 1);\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+                testSetAllTRange(true, INITIAL_SIZE, INITIAL_SIZE, 1);\n+            });\n@@ -898,2 +1175,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegativeAfterSrcEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeNegativeAfterSrcEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -903,1 +1183,2 @@\n-        try {\n+\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n@@ -905,3 +1186,3 @@\n-        } finally {\n-            assertUnchanged();\n-        }\n+        });\n+\n+        assertUnchanged();\n@@ -910,2 +1191,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeNegativeAfterSrcClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeNegativeAfterSrcClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -915,1 +1199,2 @@\n-        try {\n+\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n@@ -917,3 +1202,3 @@\n-        } finally {\n-            assertUnchanged();\n-        }\n+        });\n+\n+        assertUnchanged();\n@@ -922,0 +1207,1 @@\n+\n@@ -941,1 +1227,5 @@\n-    @Test public void testSetAllTRangeSelf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -945,1 +1235,5 @@\n-    @Test public void testSetAllTRangeSelfBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeSelfBeginning(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -949,1 +1243,5 @@\n-    @Test public void testSetAllTRangeSelfTrailing() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeSelfTrailing(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -953,1 +1251,5 @@\n-    @Test public void testSetAllTRangeSelfMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeSelfMiddle(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -957,1 +1259,5 @@\n-    @Test public void testSetAllTRangeSelfEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllTRangeSelfEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -962,7 +1268,11 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegative1() {\n-        try {\n-            wrapper.setAllT(array, -1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, -1, INITIAL_SIZE)\n+        );\n+        assertUnchanged();\n@@ -971,7 +1281,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegative2() {\n-        try {\n-            wrapper.setAllT(array, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, INITIAL_SIZE, 1)\n+        );\n+        assertUnchanged();\n@@ -980,7 +1292,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegative3() {\n-        try {\n-            wrapper.setAllT(array, 0, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, 0, -1)\n+        );\n+        assertUnchanged();\n@@ -989,7 +1303,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegative4() {\n-        try {\n-            wrapper.setAllT(array, 0, INITIAL_SIZE + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, 0, INITIAL_SIZE + 1)\n+        );\n+        assertUnchanged();\n@@ -998,2 +1314,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1001,5 +1320,4 @@\n-        try {\n-            wrapper.setAllT(array, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, INITIAL_SIZE, 1)\n+        );\n+        assertUnchanged();\n@@ -1008,2 +1326,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetAllTRangeSelfNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetAllTRangeSelfNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1011,5 +1332,4 @@\n-        try {\n-            wrapper.setAllT(array, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                wrapper.setAllT(array, 0, 1)\n+        );\n+        assertUnchanged();\n@@ -1036,1 +1356,5 @@\n-    @Test public void testAddAllA0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllA0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1041,1 +1365,5 @@\n-    @Test public void testAddAllA1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllA1(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1045,1 +1373,5 @@\n-    @Test public void testAddAllA3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllA3(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1049,1 +1381,5 @@\n-    @Test public void testAddAllABig() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllABig(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1053,1 +1389,5 @@\n-    @Test public void testAddAllASameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllASameSize(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1057,1 +1397,5 @@\n-    @Test public void testAddAllAOnEmpty1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllAOnEmpty1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1062,1 +1406,5 @@\n-    @Test public void testAddAllAOnEmptySameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllAOnEmptySameSize(ArrayWrapper arrayWrapper)  throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1067,1 +1415,5 @@\n-    @Test public void testAddAllAOnEmptyBig() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllAOnEmptyBig(ArrayWrapper arrayWrapper)  throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1072,1 +1424,5 @@\n-    @Test public void testAddAllAOnEmpty0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllAOnEmpty0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1078,7 +1434,9 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddAllANull() {\n-        try {\n-            wrapper.addAllA(null);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllANull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(NullPointerException.class, () ->\n+                wrapper.addAllA(null)\n+        );\n+        assertUnchanged();\n@@ -1087,1 +1445,5 @@\n-    @Test public void testAddAllAManyPoints() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllAManyPoints(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1111,1 +1473,5 @@\n-    @Test public void testAddAllT0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllT0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1116,1 +1482,5 @@\n-    @Test public void testAddAllT1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllT1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1120,1 +1490,5 @@\n-    @Test public void testAddAllT3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllT3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1124,1 +1498,5 @@\n-    @Test public void testAddAllTBig() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTBig(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1128,1 +1506,5 @@\n-    @Test public void testAddAllTSameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTSameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1132,1 +1514,5 @@\n-    @Test public void testAddAllTOnEmpty1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTOnEmpty1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1137,1 +1523,5 @@\n-    @Test public void testAddAllTOnEmptySameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTOnEmptySameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1142,1 +1532,5 @@\n-    @Test public void testAddAllTOnEmptyBig() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTOnEmptyBig(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1147,1 +1541,5 @@\n-    @Test public void testAddAllTOnEmpty0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTOnEmpty0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1153,7 +1551,9 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddAllTNull() {\n-        try {\n-            wrapper.addAllT(null);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(NullPointerException.class, () ->\n+                wrapper.addAllT(null)\n+        );\n+        assertUnchanged();\n@@ -1162,1 +1562,5 @@\n-    @Test public void testAddAllTSelf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1172,1 +1576,5 @@\n-    @Test public void testAddAllTSelfEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTSelfEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1183,1 +1591,5 @@\n-    @Test public void testAddAllTManyPoints() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTManyPoints(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1208,1 +1620,5 @@\n-    @Test public void testAddAllARange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1212,1 +1628,5 @@\n-    @Test public void testAddAllARange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1216,1 +1636,5 @@\n-    @Test public void testAddAllARange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1220,1 +1644,5 @@\n-    @Test public void testAddAllARange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1224,1 +1652,5 @@\n-    @Test public void testAddAllARange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1228,1 +1660,5 @@\n-    @Test public void testAddAllARange6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1232,1 +1668,5 @@\n-    @Test public void testAddAllARange7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1236,1 +1676,5 @@\n-    @Test public void testAddAllARange8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARange8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1240,1 +1684,5 @@\n-    @Test public void testAddAllARangeOnEmpty1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARangeOnEmpty1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1245,1 +1693,5 @@\n-    @Test public void testAddAllARangeOnEmpty2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARangeOnEmpty2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1250,1 +1702,5 @@\n-    @Test public void testAddAllARangeOnEmpty3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllARangeOnEmpty3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1256,7 +1712,9 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddAllARangeNull() {\n-        try {\n-            wrapper.addAllA(null, 0, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllARangeNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(NullPointerException.class, () ->\n+                wrapper.addAllA(null, 0, 0)\n+        );\n+        assertUnchanged();\n@@ -1265,7 +1723,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllARangeNegative1() {\n-        try {\n-            testAddAllARange(INITIAL_SIZE, -1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllARangeNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                testAddAllARange(INITIAL_SIZE, -1, INITIAL_SIZE)\n+        );\n+        assertUnchanged();\n@@ -1274,7 +1734,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllARangeNegative2() {\n-        try {\n-            testAddAllARange(INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllARangeNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                testAddAllARange(INITIAL_SIZE, 0, INITIAL_SIZE + 1)\n+        );\n+        assertUnchanged();\n@@ -1283,7 +1745,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllARangeNegative3() {\n-        try {\n-            testAddAllARange(INITIAL_SIZE, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllARangeNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                testAddAllARange(INITIAL_SIZE, 1, -1)\n+        );\n+        assertUnchanged();\n@@ -1292,7 +1756,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllARangeNegative4() {\n-        try {\n-            testAddAllARange(INITIAL_SIZE, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllARangeNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                testAddAllARange(INITIAL_SIZE, INITIAL_SIZE, 1)\n+        );\n+        assertUnchanged();\n@@ -1320,1 +1786,5 @@\n-    @Test public void testAddAllTRange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1324,1 +1794,5 @@\n-    @Test public void testAddAllTRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1328,1 +1802,5 @@\n-    @Test public void testAddAllTRange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1332,1 +1810,5 @@\n-    @Test public void testAddAllTRange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1336,1 +1818,5 @@\n-    @Test public void testAddAllTRange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1340,1 +1826,5 @@\n-    @Test public void testAddAllTRange6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1344,1 +1834,5 @@\n-    @Test public void testAddAllTRange7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1348,1 +1842,5 @@\n-    @Test public void testAddAllTRange8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRange8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1352,1 +1850,5 @@\n-    @Test public void testAddAllTRangeOnEmpty1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeOnEmpty1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1357,1 +1859,5 @@\n-    @Test public void testAddAllTRangeOnEmpty2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeOnEmpty2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1362,1 +1868,5 @@\n-    @Test public void testAddAllTRangeOnEmpty3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeOnEmpty3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1368,7 +1878,7 @@\n-    @Test (expected = NullPointerException.class)\n-    public void testAddAllTRangeNull() {\n-        try {\n-            wrapper.addAllT(null, 0, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNull(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(NullPointerException.class, () -> wrapper.addAllT(null, 0, 0));\n+        assertUnchanged();\n@@ -1377,7 +1887,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegative1() {\n-        try {\n-            testAddAllTRange(INITIAL_SIZE, -1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRange(INITIAL_SIZE, -1, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -1386,7 +1896,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegative2() {\n-        try {\n-            testAddAllTRange(INITIAL_SIZE, 0, INITIAL_SIZE + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRange(INITIAL_SIZE, 0, INITIAL_SIZE + 1));\n+        assertUnchanged();\n@@ -1395,7 +1905,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegative3() {\n-        try {\n-            testAddAllTRange(INITIAL_SIZE, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRange(INITIAL_SIZE, 1, -1));\n+        assertUnchanged();\n@@ -1404,7 +1914,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegative4() {\n-        try {\n-            testAddAllTRange(INITIAL_SIZE, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRange(INITIAL_SIZE, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1413,2 +1923,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegativeAfterSrcEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegativeAfterSrcEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1418,5 +1931,3 @@\n-        try {\n-            wrapper.addAllT(src, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.addAllT(src, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1425,2 +1936,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeNegativeAfterSrcClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeNegativeAfterSrcClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1430,5 +1944,3 @@\n-        try {\n-            wrapper.addAllT(src, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.addAllT(src, 0, 1));\n+        assertUnchanged();\n@@ -1449,1 +1961,5 @@\n-    @Test public void testAddAllTRangeSelf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1453,1 +1969,5 @@\n-    @Test public void testAddAllTRangeSelfBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeSelfBeginning(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1457,1 +1977,5 @@\n-    @Test public void testAddAllTRangeSelfTrailing() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeSelfTrailing(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1461,1 +1985,5 @@\n-    @Test public void testAddAllTRangeSelfMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAllTRangeSelfMiddle(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1465,7 +1993,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegative1() {\n-        try {\n-            testAddAllTRangeSelf(-1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRangeSelf(-1, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -1474,7 +2002,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegative2() {\n-        try {\n-            testAddAllTRangeSelf(0, INITIAL_SIZE + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRangeSelf(0, INITIAL_SIZE + 1));\n+        assertUnchanged();\n@@ -1483,7 +2011,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegative3() {\n-        try {\n-            testAddAllTRangeSelf(1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRangeSelf(1, -1));\n+        assertUnchanged();\n@@ -1492,7 +2020,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegative4() {\n-        try {\n-            testAddAllTRangeSelf(INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testAddAllTRangeSelf(INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1501,2 +2029,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1504,5 +2035,2 @@\n-        try {\n-            wrapper.addAllT(array, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.addAllT(array, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1511,2 +2039,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testAddAllTRangeSelfNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testAddAllTRangeSelfNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1514,5 +2045,2 @@\n-        try {\n-            wrapper.addAllT(array, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.addAllT(array, 0, 1));\n+        assertUnchanged();\n@@ -1537,1 +2065,5 @@\n-    @Test public void testSetARange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetARange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1541,1 +2073,5 @@\n-    @Test public void testSetARange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetARange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1545,1 +2081,5 @@\n-    @Test public void testSetARange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetARange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1549,1 +2089,5 @@\n-    @Test public void testSetARange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetARange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1553,1 +2097,5 @@\n-    @Test public void testSetARange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetARange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1557,7 +2105,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative1() {\n-        try {\n-            testSetARange(10, -1, 0, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, -1, 0, 3));\n+        assertUnchanged();\n@@ -1566,7 +2114,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative2() {\n-        try {\n-            testSetARange(10, 0, -1, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, 0, -1, 3));\n+        assertUnchanged();\n@@ -1575,7 +2123,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative3() {\n-        try {\n-            testSetARange(10, 1, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, 1, 1, -1));\n+        assertUnchanged();\n@@ -1584,7 +2132,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative4() {\n-        try {\n-            testSetARange(10, INITIAL_SIZE, 0, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, INITIAL_SIZE, 0, 3));\n+        assertUnchanged();\n@@ -1593,7 +2141,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative5() {\n-        try {\n-            testSetARange(10, 0, 10, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, 0, 10, 1));\n+        assertUnchanged();\n@@ -1602,7 +2150,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative6() {\n-        try {\n-            testSetARange(3, 0, 1, 4);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(3, 0, 1, 4));\n+        assertUnchanged();\n@@ -1611,7 +2159,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegative7() {\n-        try {\n-            testSetARange(10, INITIAL_SIZE - 3, 0, 4);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegative7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(10, INITIAL_SIZE - 3, 0, 4));\n+        assertUnchanged();\n@@ -1620,2 +2168,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1623,5 +2174,2 @@\n-        try {\n-            testSetARange(1, INITIAL_SIZE, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(1, INITIAL_SIZE, 0, 1));\n+        assertUnchanged();\n@@ -1630,2 +2178,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetARangeNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetARangeNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1633,5 +2184,2 @@\n-        try {\n-            testSetARange(1, 0, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetARange(1, 0, 0, 1));\n+        assertUnchanged();\n@@ -1657,1 +2205,5 @@\n-    @Test public void testSetTRange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1661,1 +2213,5 @@\n-    @Test public void testSetTRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1665,1 +2221,5 @@\n-    @Test public void testSetTRange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1669,1 +2229,5 @@\n-    @Test public void testSetTRange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1673,1 +2237,5 @@\n-    @Test public void testSetTRange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1677,7 +2245,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative1() {\n-        try {\n-            testSetTRange(10, -1, 0, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, -1, 0, 3));\n+        assertUnchanged();\n@@ -1686,7 +2254,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative2() {\n-        try {\n-            testSetTRange(10, 0, -1, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, 0, -1, 3));\n+        assertUnchanged();\n@@ -1695,7 +2263,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative3() {\n-        try {\n-            testSetTRange(10, 1, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, 1, 1, -1));\n+        assertUnchanged();\n@@ -1704,7 +2272,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative4() {\n-        try {\n-            testSetTRange(10, INITIAL_SIZE, 0, 3);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, INITIAL_SIZE, 0, 3));\n+        assertUnchanged();\n@@ -1713,7 +2281,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative5() {\n-        try {\n-            testSetTRange(10, 0, 10, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, 0, 10, 1));\n+        assertUnchanged();\n@@ -1722,7 +2290,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative6() {\n-        try {\n-            testSetTRange(3, 0, 1, 4);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(3, 0, 1, 4));\n+        assertUnchanged();\n@@ -1731,7 +2299,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegative7() {\n-        try {\n-            testSetTRange(10, INITIAL_SIZE - 3, 0, 4);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegative7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(10, INITIAL_SIZE - 3, 0, 4));\n+        assertUnchanged();\n@@ -1740,2 +2308,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1743,5 +2314,2 @@\n-        try {\n-            testSetTRange(1, INITIAL_SIZE, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(1, INITIAL_SIZE, 0, 1));\n+        assertUnchanged();\n@@ -1750,2 +2318,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1753,5 +2324,2 @@\n-        try {\n-            testSetTRange(1, 0, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testSetTRange(1, 0, 0, 1));\n+        assertUnchanged();\n@@ -1760,6 +2328,8 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegativeAfterSrcEnsureCapacity() {\n-        try {\n-            Object srcA = wrapper.createPrimitiveArray(1);\n-            ObservableArray src = wrapper.newInstance().createNotEmptyArray(srcA);\n-            src.ensureCapacity(2);\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegativeAfterSrcEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        Object srcA = wrapper.createPrimitiveArray(1);\n+        ObservableArray src = wrapper.newInstance().createNotEmptyArray(srcA);\n+        src.ensureCapacity(2);\n@@ -1767,4 +2337,2 @@\n-            wrapper.setT(0, src, 1, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, src, 1, 1));\n+        assertUnchanged();\n@@ -1773,6 +2341,8 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeNegativeAfterSrcClear() {\n-        try {\n-            Object srcA = wrapper.createPrimitiveArray(1);\n-            ObservableArray src = wrapper.newInstance().createNotEmptyArray(srcA);\n-            src.clear();\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeNegativeAfterSrcClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        Object srcA = wrapper.createPrimitiveArray(1);\n+        ObservableArray src = wrapper.newInstance().createNotEmptyArray(srcA);\n+        src.clear();\n@@ -1780,4 +2350,2 @@\n-            wrapper.setT(0, src, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, src, 0, 1));\n+        assertUnchanged();\n@@ -1799,1 +2367,5 @@\n-    @Test public void testSetTRangeSelf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRangeSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1803,1 +2375,5 @@\n-    @Test public void testSetTRangeSelfLeft() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRangeSelfLeft(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1807,1 +2383,5 @@\n-    @Test public void testSetTRangeSelfRight() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRangeSelfRight(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1811,1 +2391,5 @@\n-    @Test public void testSetTRangeSelfRightDifferentParts() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRangeSelfRightDifferentParts(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1815,1 +2399,5 @@\n-    @Test public void testSetTRangeSelfLeftDifferentParts() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTRangeSelfLeftDifferentParts(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1819,7 +2407,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative1() {\n-        try {\n-            wrapper.setT(-1, array, 0, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(-1, array, 0, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -1828,7 +2416,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative2() {\n-        try {\n-            wrapper.setT(0, array, -1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, -1, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -1837,7 +2425,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative3() {\n-        try {\n-            wrapper.setT(0, array, 0, INITIAL_SIZE + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, 0, INITIAL_SIZE + 1));\n+        assertUnchanged();\n@@ -1846,7 +2434,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative4() {\n-        try {\n-            wrapper.setT(0, array, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, 1, -1));\n+        assertUnchanged();\n@@ -1855,7 +2443,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative5() {\n-        try {\n-            wrapper.setT(INITIAL_SIZE, array, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(INITIAL_SIZE, array, 0, 1));\n+        assertUnchanged();\n@@ -1864,7 +2452,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegative6() {\n-        try {\n-            wrapper.setT(0, array, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1873,9 +2461,8 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegativeAfterEnsureCapacity() {\n-        try {\n-            array.ensureCapacity(INITIAL_SIZE * 2);\n-\n-            wrapper.setT(0, array, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        array.ensureCapacity(INITIAL_SIZE * 2);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -1884,2 +2471,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetTRangeSelfNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetTRangeSelfNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1887,5 +2477,2 @@\n-        try {\n-            wrapper.setT(0, array, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.setT(0, array, 0, 1));\n+        assertUnchanged();\n@@ -1895,9 +2482,7 @@\n-    \/\/ ========== negative get(index) tests ==========\n-\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testGetNegative() {\n-        try {\n-            wrapper.get(-1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testGetNegative(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.get(-1));\n+        assertUnchanged();\n@@ -1906,7 +2491,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testGetOutOfBounds() {\n-        try {\n-            wrapper.get(array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testGetOutOfBounds(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.get(array.size()));\n+        assertUnchanged();\n@@ -1915,8 +2500,8 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testGetAfterEnsureCapacity() {\n-        try {\n-            array.ensureCapacity(INITIAL_SIZE * 2);\n-            wrapper.get(INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testGetAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        array.ensureCapacity(INITIAL_SIZE * 2);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.get(INITIAL_SIZE));\n+        assertUnchanged();\n@@ -1925,2 +2510,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testGetAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testGetAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1928,5 +2516,2 @@\n-        try {\n-            wrapper.get(0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.get(0));\n+        assertUnchanged();\n@@ -1935,3 +2520,5 @@\n-    \/\/ ================== set(index) tests ===============\n-\n-    @Test public void testSetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetValue(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1950,7 +2537,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetValueNegative() {\n-        try {\n-            wrapper.set(-1, wrapper.getNextValue());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetValueNegative(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.set(-1, wrapper.getNextValue()));\n+        assertUnchanged();\n@@ -1959,7 +2546,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetValueOutOfBounds() {\n-        try {\n-            wrapper.set(INITIAL_SIZE, wrapper.getNextValue());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetValueOutOfBounds(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.set(INITIAL_SIZE, wrapper.getNextValue()));\n+        assertUnchanged();\n@@ -1968,2 +2555,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetValueNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetValueNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception  {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1971,5 +2561,2 @@\n-        try {\n-            wrapper.set(0, wrapper.getNextValue());\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.set(0, wrapper.getNextValue()));\n+        assertUnchanged();\n@@ -1978,2 +2565,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testSetValueNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testSetValueNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -1981,5 +2571,2 @@\n-        try {\n-            wrapper.set(INITIAL_SIZE, wrapper.getNextValue());\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.set(INITIAL_SIZE, wrapper.getNextValue()));\n+        assertUnchanged();\n@@ -2003,1 +2590,5 @@\n-    @Test public void testToArraySameSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArraySameSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2007,1 +2598,5 @@\n-    @Test public void testToArraySmaller() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArraySmaller(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2011,1 +2606,5 @@\n-    @Test public void testToArrayBigger() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayBigger(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2015,1 +2614,5 @@\n-    @Test public void testToArrayEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2020,1 +2623,5 @@\n-    @Test public void testToArrayEmptyToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayEmptyToEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2037,1 +2644,5 @@\n-    @Test public void testToArrayRange0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2041,1 +2652,5 @@\n-    @Test public void testToArrayRange1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2045,1 +2660,5 @@\n-    @Test public void testToArrayRange2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2049,1 +2668,5 @@\n-    @Test public void testToArrayRange3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2053,1 +2676,5 @@\n-    @Test public void testToArrayRange4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2057,1 +2684,5 @@\n-    @Test public void testToArrayRange5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2062,1 +2693,5 @@\n-    @Test public void testToArrayRange6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2066,1 +2701,5 @@\n-    @Test public void testToArrayRange7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2070,1 +2709,5 @@\n-    @Test public void testToArrayRange8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2074,1 +2717,5 @@\n-    @Test public void testToArrayRange9() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToArrayRange9(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2078,7 +2725,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegative1() {\n-        try {\n-            testToArrayRange(-1, array.size(), 2);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(-1, array.size(), 2));\n+        assertUnchanged();\n@@ -2087,7 +2734,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegative2() {\n-        try {\n-            testToArrayRange(array.size(), array.size(), 2);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(array.size(), array.size(), 2));\n+        assertUnchanged();\n@@ -2096,7 +2743,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegative3() {\n-        try {\n-            testToArrayRange(5, array.size(), array.size() + 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(5, array.size(), array.size() + 1));\n+        assertUnchanged();\n@@ -2105,2 +2752,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegative5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2108,5 +2758,2 @@\n-        try {\n-            testToArrayRange(2, 0, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(2, 0, 0));\n+        assertUnchanged();\n@@ -2115,2 +2762,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2118,5 +2768,2 @@\n-        try {\n-            testToArrayRange(INITIAL_SIZE, 1, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(INITIAL_SIZE, 1, 1));\n+        assertUnchanged();\n@@ -2125,2 +2772,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testToArrayRangeNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testToArrayRangeNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2128,5 +2778,2 @@\n-        try {\n-            testToArrayRange(0, 1, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testToArrayRange(0, 1, 1));\n+        assertUnchanged();\n@@ -2148,1 +2795,5 @@\n-    @Test public void testCopyToA0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2152,1 +2803,5 @@\n-    @Test public void testCopyToA1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2156,1 +2811,5 @@\n-    @Test public void testCopyToA2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2160,1 +2819,5 @@\n-    @Test public void testCopyToA3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2164,1 +2827,5 @@\n-    @Test public void testCopyToA4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2168,1 +2835,5 @@\n-    @Test public void testCopyToA5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2172,1 +2843,5 @@\n-    @Test public void testCopyToA6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2176,1 +2851,5 @@\n-    @Test public void testCopyToA7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2180,1 +2859,5 @@\n-    @Test public void testCopyToA8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2184,1 +2867,5 @@\n-    @Test public void testCopyToA9() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToA9(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2189,7 +2876,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative1() {\n-        try {\n-            testCopyToA(-1, array.size(), 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(-1, array.size(), 0, array.size()));\n+        assertUnchanged();\n@@ -2198,7 +2885,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative2() {\n-        try {\n-            testCopyToA(0, array.size() \/ 2, 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, array.size() \/ 2, 0, array.size()));\n+        assertUnchanged();\n@@ -2207,8 +2894,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative3() {\n-        try {\n-            testCopyToA(array.size(), array.size(), 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n-\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(array.size(), array.size(), 0, array.size()));\n+        assertUnchanged();\n@@ -2217,8 +2903,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative4() {\n-        try {\n-            testCopyToA(0, array.size(), -1, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n-\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, array.size(), -1, array.size()));\n+        assertUnchanged();\n@@ -2227,7 +2912,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative5() {\n-        try {\n-            testCopyToA(0, array.size(), array.size(), array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, array.size(), array.size(), array.size()));\n+        assertUnchanged();\n@@ -2236,7 +2921,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative6() {\n-        try {\n-            testCopyToA(0, array.size(), 0, array.size() * 2);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, array.size(), 0, array.size() * 2));\n+        assertUnchanged();\n@@ -2245,2 +2930,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2248,5 +2936,2 @@\n-        try {\n-            testCopyToA(1, 0, 0, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(1, 0, 0, 0));\n+        assertUnchanged();\n@@ -2255,7 +2940,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegative8() {\n-        try {\n-            testCopyToA(0, 0, 1, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegative8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, 0, 1, 0));\n+        assertUnchanged();\n@@ -2264,2 +2949,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2267,5 +2955,2 @@\n-        try {\n-            testCopyToA(INITIAL_SIZE, 1, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(INITIAL_SIZE, 1, 0, 1));\n+        assertUnchanged();\n@@ -2274,2 +2959,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToANegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToANegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2277,5 +2965,2 @@\n-        try {\n-            testCopyToA(0, 1, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToA(0, 1, 0, 1));\n+        assertUnchanged();\n@@ -2301,1 +2986,5 @@\n-    @Test public void testCopyToT0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2305,1 +2994,5 @@\n-    @Test public void testCopyToT1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2309,1 +3002,5 @@\n-    @Test public void testCopyToT2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2313,1 +3010,5 @@\n-    @Test public void testCopyToT3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2317,1 +3018,5 @@\n-    @Test public void testCopyToT4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2321,1 +3026,5 @@\n-    @Test public void testCopyToT5() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2325,1 +3034,5 @@\n-    @Test public void testCopyToT6() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2329,1 +3042,5 @@\n-    @Test public void testCopyToT7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2333,1 +3050,5 @@\n-    @Test public void testCopyToT8() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2337,1 +3058,5 @@\n-    @Test public void testCopyToT9() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToT9(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2342,7 +3067,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative1() {\n-        try {\n-            testCopyToT(-1, array.size(), 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(-1, array.size(), 0, array.size()));\n+        assertUnchanged();\n@@ -2351,7 +3076,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative2() {\n-        try {\n-            testCopyToT(0, array.size() \/ 2, 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, array.size() \/ 2, 0, array.size()));\n+        assertUnchanged();\n@@ -2360,8 +3085,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative3() {\n-        try {\n-            testCopyToT(array.size(), array.size(), 0, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n-\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(array.size(), array.size(), 0, array.size()));\n+        assertUnchanged();\n@@ -2370,8 +3094,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative4() {\n-        try {\n-            testCopyToT(0, array.size(), -1, array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n-\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, array.size(), -1, array.size()));\n+        assertUnchanged();\n@@ -2380,7 +3103,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative5() {\n-        try {\n-            testCopyToT(0, array.size(), array.size(), array.size());\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, array.size(), array.size(), array.size()));\n+        assertUnchanged();\n@@ -2389,7 +3112,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative6() {\n-        try {\n-            testCopyToT(0, array.size(), 0, array.size() * 2);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, array.size(), 0, array.size() * 2));\n+        assertUnchanged();\n@@ -2398,2 +3121,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative7() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2401,5 +3127,2 @@\n-        try {\n-            testCopyToT(1, 0, 0, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(1, 0, 0, 0));\n+        assertUnchanged();\n@@ -2408,7 +3131,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegative8() {\n-        try {\n-            testCopyToT(0, 0, 1, 0);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegative8(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, 0, 1, 0));\n+        assertUnchanged();\n@@ -2417,2 +3140,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2420,5 +3146,2 @@\n-        try {\n-            testCopyToT(INITIAL_SIZE, 1, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(INITIAL_SIZE, 1, 0, 1));\n+        assertUnchanged();\n@@ -2427,2 +3150,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2430,5 +3156,2 @@\n-        try {\n-            testCopyToT(0, 1, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToT(0, 1, 0, 1));\n+        assertUnchanged();\n@@ -2437,7 +3160,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegativeAfterDestEnsureCapacity() {\n-        try {\n-            ArrayWrapper wrapper2 = wrapper.newInstance();\n-            Object destA = wrapper2.createPrimitiveArray(1);\n-            ObservableArray dest = wrapper2.createNotEmptyArray(destA);\n-            dest.ensureCapacity(2);\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegativeAfterDestEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        ArrayWrapper wrapper2 = wrapper.newInstance();\n+        Object destA = wrapper2.createPrimitiveArray(1);\n+        ObservableArray dest = wrapper2.createNotEmptyArray(destA);\n+        dest.ensureCapacity(2);\n@@ -2445,4 +3170,2 @@\n-            wrapper.copyToT(0, dest, 1, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.copyToT(0, dest, 1, 1));\n+        assertUnchanged();\n@@ -2451,7 +3174,9 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTNegativeAfterDestClear() {\n-        try {\n-            ArrayWrapper wrapper2 = wrapper.newInstance();\n-            Object destA = wrapper2.createPrimitiveArray(1);\n-            ObservableArray dest = wrapper2.createNotEmptyArray(destA);\n-            dest.clear();\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTNegativeAfterDestClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        ArrayWrapper wrapper2 = wrapper.newInstance();\n+        Object destA = wrapper2.createPrimitiveArray(1);\n+        ObservableArray dest = wrapper2.createNotEmptyArray(destA);\n+        dest.clear();\n@@ -2459,4 +3184,2 @@\n-            wrapper.copyToT(0, dest, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> wrapper.copyToT(0, dest, 0, 1));\n+        assertUnchanged();\n@@ -2476,1 +3199,5 @@\n-    @Test public void testCopyToTSelf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToTSelf(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2480,1 +3207,5 @@\n-    @Test public void testCopyToTSelfRight() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToTSelfRight(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2484,1 +3215,5 @@\n-    @Test public void testCopyToTSelfLeft() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToTSelfLeft(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2488,1 +3223,5 @@\n-    @Test public void testCopyToTSelfRightDifferentParts() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToTSelfRightDifferentParts(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2492,1 +3231,5 @@\n-    @Test public void testCopyToTSelfLeftDifferentParts() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCopyToTSelfLeftDifferentParts(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2496,7 +3239,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative1() {\n-        try {\n-            testCopyToTSelf(-1, 0, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(-1, 0, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -2505,7 +3248,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative2() {\n-        try {\n-            testCopyToTSelf(INITIAL_SIZE, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative2(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(INITIAL_SIZE, 0, 1));\n+        assertUnchanged();\n@@ -2514,7 +3257,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative3() {\n-        try {\n-            testCopyToTSelf(0, -1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative3(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(0, -1, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -2523,7 +3266,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative4() {\n-        try {\n-            testCopyToTSelf(0, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative4(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(0, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -2532,7 +3275,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative5() {\n-        try {\n-            testCopyToTSelf(1, 1, -1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative5(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(1, 1, -1));\n+        assertUnchanged();\n@@ -2541,7 +3284,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative6() {\n-        try {\n-            testCopyToTSelf(0, 1, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative6(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(0, 1, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -2550,7 +3293,7 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegative7() {\n-        try {\n-            testCopyToTSelf(1, 0, INITIAL_SIZE);\n-        } finally {\n-            assertUnchanged();\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegative7(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(1, 0, INITIAL_SIZE));\n+        assertUnchanged();\n@@ -2559,2 +3302,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegativeAfterEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegativeAfterEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2562,5 +3308,2 @@\n-        try {\n-            testCopyToTSelf(0, INITIAL_SIZE, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(0, INITIAL_SIZE, 1));\n+        assertUnchanged();\n@@ -2569,2 +3312,5 @@\n-    @Test (expected = ArrayIndexOutOfBoundsException.class)\n-    public void testCopyToTSelfNegativeAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testCopyToTSelfNegativeAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2572,5 +3318,2 @@\n-        try {\n-            testCopyToTSelf(0, 0, 1);\n-        } finally {\n-            assertUnchanged();\n-        }\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> testCopyToTSelf(0, 0, 1));\n+        assertUnchanged();\n@@ -2581,1 +3324,5 @@\n-    @Test public void testTrimToSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testTrimToSize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2586,1 +3333,5 @@\n-    @Test public void testTrimToSizeEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testTrimToSizeEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2592,1 +3343,5 @@\n-    @Test public void testTrimToSizeResize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testTrimToSizeResize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2602,1 +3357,5 @@\n-    @Test public void testTrimToSizeAddRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testTrimToSizeAddRemove(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2612,1 +3371,5 @@\n-    @Test public void testEnsureCapacity0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacity0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2617,1 +3380,5 @@\n-    @Test public void testEnsureCapacityBy1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacityBy1(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2622,1 +3389,5 @@\n-    @Test public void testEnsureCapacity1000() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacity1000(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2627,1 +3398,5 @@\n-    @Test public void testEnsureCapacitySmaller() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacitySmaller(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2632,1 +3407,5 @@\n-    @Test public void testEnsureCapacityNegative() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacityNegative(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2637,1 +3416,5 @@\n-    @Test public void testEnsureCapacityOnEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacityOnEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2643,1 +3426,5 @@\n-    @Test public void testEnsureCapacityOnEmpty0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacityOnEmpty0(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2649,1 +3436,5 @@\n-    @Test public void testEnsureCapacityOnEmptyNegative() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEnsureCapacityOnEmptyNegative(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2655,1 +3446,5 @@\n-    @Test public void testTrimToSizeEnsureCapacity() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testTrimToSizeEnsureCapacity(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2663,1 +3458,5 @@\n-    @Test public void testClearEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClearEmpty(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2670,1 +3469,5 @@\n-    @Test public void testClear1000() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClear1000(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2682,1 +3485,5 @@\n-    @Test public void testToString() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToString(ArrayWrapper arrayWrapper) throws Exception{\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2687,2 +3494,2 @@\n-        assertTrue(\"toString() output matches to regex '\" + regex + \"'. Actual = '\" + actual + \"'\",\n-                actual.matches(regex));\n+        assertTrue(actual.matches(regex),\n+                () -> \"toString() output matches regex '\" + regex + \"'. Actual = '\" + actual + \"'\");\n@@ -2691,1 +3498,5 @@\n-    @Test public void testToStringAfterResize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToStringAfterResize(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n@@ -2697,2 +3508,2 @@\n-        assertTrue(\"toString() output matches to regex '\" + regex + \"'. Actual = '\" + actual + \"'\",\n-                actual.matches(regex));\n+        assertTrue(actual.matches(regex),\n+                () -> \"toString() output does not match regex '\" + regex + \"'. Actual = '\" + actual + \"'\");\n@@ -2701,1 +3512,5 @@\n-    @Test public void testToStringAfterClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToStringAfterClear(ArrayWrapper arrayWrapper) throws Exception {\n+        ObservableArrayTest_(arrayWrapper);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableArrayTest.java","additions":1800,"deletions":985,"binary":false,"changes":2785,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -37,2 +37,2 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -43,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,2 +45,2 @@\n-    static final List<String> EMPTY = Collections.emptyList();\n-    final Callable<ObservableList<String>> listFactory;\n+    static List<String> EMPTY = Collections.emptyList();\n+    Callable<ObservableList<String>> listFactory;\n@@ -52,1 +51,1 @@\n-    public ObservableListEmptyTest(final Callable<ObservableList<String>> listFactory) {\n+    public void ObservableListEmptyTest_(Callable<ObservableList<String>> listFactory) {\n@@ -56,1 +55,0 @@\n-    @Parameterized.Parameters\n@@ -68,1 +66,0 @@\n-    @Before\n@@ -75,2 +72,5 @@\n-    @Test\n-    public void testClearEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClearEmpty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListEmptyTest_(listFactory);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListEmptyTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Test;\n@@ -33,3 +34,5 @@\n-import static org.junit.Assert.*;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import java.util.stream.Stream;\n@@ -42,1 +45,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,1 +48,1 @@\n-    final Callable<? extends List<String>> listFactory;\n+    protected Callable<? extends List<String>> listFactory;\n@@ -50,3 +52,0 @@\n-    public ObservableListIteratorTest(final Callable<? extends List<String>> listFactory) {\n-        this.listFactory = listFactory;\n-    }\n@@ -54,10 +53,8 @@\n-    @Parameterized.Parameters\n-    public static Collection createParameters() {\n-        Object[][] data = new Object[][] {\n-            { TestedObservableLists.ARRAY_LIST },\n-            { TestedObservableLists.LINKED_LIST },\n-            { TestedObservableLists.VETOABLE_LIST },\n-            { TestedObservableLists.CHECKED_OBSERVABLE_ARRAY_LIST },\n-            { TestedObservableLists.SYNCHRONIZED_OBSERVABLE_ARRAY_LIST }\n-         };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> createParameters() {\n+        return Stream.of(\n+                Arguments.of(TestedObservableLists.ARRAY_LIST),\n+                Arguments.of(TestedObservableLists.LINKED_LIST),\n+                Arguments.of(TestedObservableLists.VETOABLE_LIST),\n+                Arguments.of(TestedObservableLists.CHECKED_OBSERVABLE_ARRAY_LIST),\n+                Arguments.of(TestedObservableLists.SYNCHRONIZED_OBSERVABLE_ARRAY_LIST)\n+        );\n@@ -66,2 +63,1 @@\n-    @Before\n-    public void setup() throws Exception {\n+    private void setup(Callable<? extends List<String>> listFactory) throws Exception {\n@@ -108,2 +104,4 @@\n-    @Test\n-    public void testCompleteIteration() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testCompleteIteration(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -113,2 +111,4 @@\n-    @Test\n-    public void testBeginningState() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testBeginningState(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -121,2 +121,4 @@\n-    @Test\n-    public void testMiddleState() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testMiddleState(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -130,2 +132,4 @@\n-    @Test\n-    public void testEndState() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEndState(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -139,2 +143,4 @@\n-    @Test\n-    public void testSwitchDirections() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSwitchDirections(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -149,3 +155,5 @@\n-    @Test(expected = NoSuchElementException.class)\n-    public void testBoundaryStart() {\n-        iter.previous();\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testBoundaryStart(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n+        assertThrows(NoSuchElementException.class, () -> iter.previous());\n@@ -154,2 +162,4 @@\n-    @Test(expected = NoSuchElementException.class)\n-    public void testBoundaryEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testBoundaryEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -157,1 +167,1 @@\n-        iter.next();\n+        assertThrows(NoSuchElementException.class, () -> iter.next());\n@@ -160,2 +170,4 @@\n-    @Test\n-    public void testForEachLoop() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testForEachLoop(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -171,2 +183,4 @@\n-    @Test\n-    public void testAddBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -181,2 +195,4 @@\n-    @Test\n-    public void testAddMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -192,2 +208,4 @@\n-    @Test\n-    public void testAddEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -203,2 +221,4 @@\n-    @Test\n-    public void testPreviousAfterAddBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPreviousAfterAddBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -212,2 +232,4 @@\n-    @Test\n-    public void testPreviousAfterAddMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPreviousAfterAddMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -222,2 +244,4 @@\n-    @Test\n-    public void testPreviousAfterAddEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPreviousAfterAddEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -232,2 +256,4 @@\n-    @Test\n-    public void testAddMultiple() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddMultiple(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -246,2 +272,4 @@\n-    @Test\n-    public void testAddAfterPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAfterPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -256,2 +284,4 @@\n-    @Test\n-    public void testAddAfterRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAfterRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -266,2 +296,4 @@\n-    @Test\n-    public void testAddAfterSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAfterSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -278,2 +310,4 @@\n-    @Test\n-    public void testRemoveBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -287,2 +321,4 @@\n-    @Test\n-    public void testRemoveMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -296,2 +332,4 @@\n-    @Test\n-    public void testRemoveEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -305,2 +343,4 @@\n-    @Test\n-    public void testRemoveAfterPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAfterPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -316,2 +356,4 @@\n-    @Test\n-    public void testRemoveAfterSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAfterSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -326,3 +368,5 @@\n-    @Test(expected = IllegalStateException.class)\n-    public void testRemoveInitialThrowsException() {\n-        iter.remove();\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveInitialThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n+        assertThrows(IllegalStateException.class, () -> iter.remove());\n@@ -331,2 +375,4 @@\n-    @Test\n-    public void testRemoveTwiceThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveTwiceThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -339,2 +385,4 @@\n-    @Test\n-    public void testRemoveAfterAddThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAfterAddThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -349,2 +397,4 @@\n-    @Test\n-    public void testSetBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -358,2 +408,4 @@\n-    @Test\n-    public void testSetMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -367,2 +419,4 @@\n-    @Test\n-    public void testSetEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -376,2 +430,4 @@\n-    @Test\n-    public void testSetTwice() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetTwice(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -389,2 +445,4 @@\n-    @Test\n-    public void testSetAfterPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAfterPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -400,2 +458,4 @@\n-    @Test\n-    public void testSetInitialThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetInitialThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -406,2 +466,4 @@\n-    @Test\n-    public void testSetAfterAddThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAfterAddThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -414,2 +476,4 @@\n-    @Test\n-    public void testSetAfterRemoveThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAfterRemoveThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -424,2 +488,4 @@\n-    @Test\n-    public void testPosBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -434,2 +500,4 @@\n-    @Test\n-    public void testPosMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -444,2 +512,4 @@\n-    @Test\n-    public void testPosEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -454,2 +524,4 @@\n-    @Test\n-    public void testPosAdd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosAdd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -463,2 +535,4 @@\n-    @Test\n-    public void testPosInitialRemoveThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosInitialRemoveThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -470,2 +544,4 @@\n-    @Test\n-    public void testPosInitialSetThrowsException() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPosInitialSetThrowsException(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -479,2 +555,4 @@\n-    @Test\n-    public void testConcurrencyAddIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -486,2 +564,5 @@\n-    @Test\n-    public void testConcurrencyAddIndexedIteratorNext() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIndexedIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -493,2 +574,5 @@\n-    @Test\n-    public void testConcurrencyRemoveIteratorNext() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -501,2 +585,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIndexedIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIndexedIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -508,2 +594,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIteratorNext() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -515,2 +604,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIndexedIteratorNext() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIndexedIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -523,2 +615,4 @@\n-    @Test\n-    public void testConcurrencyGetIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyGetIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -530,2 +624,4 @@\n-    @Test\n-    public void testConcurrencyRemoveAllIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveAllIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -538,2 +634,4 @@\n-    @Test\n-    public void testConcurrencyRetainAllIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainAllIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -546,2 +644,4 @@\n-    @Test\n-    public void testConcurrencyIteratorIteratorNext() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIteratorIteratorNext(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -555,2 +655,5 @@\n-    @Test\n-    public void testConcurrencyAddIteratorPrevious() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -562,2 +665,5 @@\n-    @Test\n-    public void testConcurrencyAddIndexedIteratorPrevious() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIndexedIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -569,2 +675,5 @@\n-    @Test\n-    public void testConcurrencyRemoveIteratorPrevious() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -577,2 +686,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIndexedIteratorPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIndexedIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -584,2 +695,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIteratorPrevious() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -591,2 +705,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIndexedIteratorPrevious() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIndexedIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -599,2 +716,4 @@\n-    @Test\n-    public void testConcurrencyGetIteratorPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyGetIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -606,2 +725,4 @@\n-    @Test\n-    public void testConcurrencyRemoveAllIteratorPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveAllIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception  {\n+        setup(listFactory);\n@@ -614,2 +735,4 @@\n-    @Test\n-    public void testConcurrencyRetainAllIteratorPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainAllIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -622,2 +745,4 @@\n-    @Test\n-    public void testConcurrencyIteratorIteratorPrevious() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIteratorIteratorPrevious(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -632,2 +757,4 @@\n-    @Test\n-    public void testConcurrencyAddIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -641,2 +768,4 @@\n-    @Test\n-    public void testConcurrencyAddIndexedIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIndexedIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -650,2 +779,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -659,2 +790,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIndexedIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIndexedIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -667,2 +800,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIteratorRemove() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -675,2 +811,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIndexedIteratorRemove() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIndexedIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -684,2 +823,4 @@\n-    @Test\n-    public void testConcurrencyGetIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyGetIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -692,2 +833,4 @@\n-    @Test\n-    public void testConcurrencyRemoveAllIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveAllIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -701,2 +844,4 @@\n-    @Test\n-    public void testConcurrencyRetainAllIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainAllIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -710,2 +855,4 @@\n-    @Test\n-    public void testConcurrencyIteratorIteratorRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIteratorIteratorRemove(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -721,2 +868,4 @@\n-    @Test\n-    public void testConcurrencyAddIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -730,2 +879,4 @@\n-    @Test\n-    public void testConcurrencyAddIndexedIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddIndexedIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -739,2 +890,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -748,2 +901,4 @@\n-    @Test\n-    public void testConcurrencyRemoveIndexedIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveIndexedIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -756,2 +911,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIteratorSet() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -764,2 +922,5 @@\n-    @Test\n-    public void testConcurrencyAddAllIndexedIteratorSet() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAllIndexedIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -773,2 +934,4 @@\n-    @Test\n-    public void testConcurrencyGetIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyGetIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -781,2 +944,4 @@\n-    @Test\n-    public void testConcurrencyRemoveAllIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveAllIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -790,2 +955,4 @@\n-    @Test\n-    public void testConcurrencyRetainAllIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainAllIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -799,2 +966,4 @@\n-    @Test\n-    public void testConcurrencyIteratorIteratorSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIteratorIteratorSet(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListIteratorTest.java","additions":354,"deletions":185,"binary":false,"changes":539,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,4 +39,4 @@\n-import static org.junit.Assert.*;\n-import org.junit.Ignore;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -48,1 +48,0 @@\n-@RunWith(Parameterized.class)\n@@ -52,1 +51,1 @@\n-    final Callable<ObservableList<String>> listFactory;\n+    Callable<ObservableList<String>> listFactory;\n@@ -57,1 +56,1 @@\n-    public ObservableListTest(final Callable<ObservableList<String>> listFactory) {\n+    public void ObservableListTest_(Callable<ObservableList<String>> listFactory) {\n@@ -61,1 +60,0 @@\n-    @Parameterized.Parameters\n@@ -74,1 +72,0 @@\n-    @Before\n@@ -98,2 +95,5 @@\n-    @Test\n-    public void testObserverAddRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObserverAddRemove(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -109,2 +109,4 @@\n-    @Ignore\n-    public void testObserverAddTwice() {\n+    @Disabled\n+    public void testObserverAddTwice(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -116,2 +118,5 @@\n-    @Test\n-    public void testObserverRemoveTwice() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObserverRemoveTwice(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -126,2 +131,5 @@\n-    @Test\n-    public void testAddToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddToEmpty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -133,2 +141,5 @@\n-    @Test\n-    public void testAddAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAtEnd(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -139,2 +150,5 @@\n-    @Test\n-    public void testAddInMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddInMiddle(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -145,2 +159,5 @@\n-    @Test\n-    public void testAddSeveralToEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddSeveralToEmpty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -152,2 +169,5 @@\n-    @Test\n-    public void testAddSeveralAtEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddSeveralAtEnd(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -158,2 +178,5 @@\n-    @Test\n-    public void testAddSeveralInMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddSeveralInMiddle(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -164,2 +187,5 @@\n-    @Test\n-    public void testClearNonempty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClearNonempty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -170,2 +196,5 @@\n-    @Test\n-    public void testRemoveByIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveByIndex(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -177,2 +206,5 @@\n-    @Test\n-    public void testRemoveObject() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveObject(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -185,2 +217,5 @@\n-    @Test\n-    public void testRemoveNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveNull(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -193,2 +228,5 @@\n-    @Test\n-    public void testRemoveAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -202,2 +240,5 @@\n-    @Test\n-    public void testRemoveAll_1() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll_1(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -212,2 +253,5 @@\n-    @Test\n-    public void testRemoveAll_2() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll_2(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -219,2 +263,5 @@\n-    @Test\n-    public void testRemoveAll_3() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll_3(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -227,2 +274,5 @@\n-    @Test\n-    public void testRemoveAll_4() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll_4(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -235,2 +285,5 @@\n-    @Test\n-    public void testRetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRetainAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -244,2 +297,5 @@\n-    @Test\n-    public void testRetainAllEmptySource() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRetainAllEmptySource(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -254,2 +310,5 @@\n-    @Test\n-    public void testRemoveNonexistent() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveNonexistent(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -262,2 +321,5 @@\n-    @Test\n-    public void testSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSet(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -269,2 +331,5 @@\n-    @Test\n-    public void testSetAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -285,2 +350,5 @@\n-    @Test\n-    public void testSetAllNoUpdate() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSetAllNoUpdate(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -292,2 +360,5 @@\n-    @Test\n-    public void testObserverCanRemoveObservers() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObserverCanRemoveObservers(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n@@ -313,2 +384,5 @@\n-    @Test\n-    public void testEqualsAndHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsAndHashCode(Callable<ObservableList<String>> listFactory) throws Exception {\n+        ObservableListTest_(listFactory);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListTest.java","additions":137,"deletions":63,"binary":false,"changes":200,"status":"modified"},{"patch":"@@ -39,8 +39,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -48,1 +46,1 @@\n-    private final Mode mode;\n+    private Mode mode;\n@@ -55,1 +53,0 @@\n-    @Parameters\n@@ -65,1 +62,1 @@\n-    public ObservableListWithExtractor(Mode mode) {\n+    public void ObservableListWithExtractor_(Mode mode) {\n@@ -74,1 +71,0 @@\n-    @Before\n@@ -90,2 +86,5 @@\n-    @Test\n-    public void testUpdate_add() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_add(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -96,2 +95,5 @@\n-    @Test\n-    public void testUpdate_add1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_add1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -105,2 +107,5 @@\n-    @Test\n-    public void testUpdate_addAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_addAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -114,2 +119,5 @@\n-    @Test\n-    public void testUpdate_addAll1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_addAll1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -123,2 +131,5 @@\n-    @Test\n-    public void testUpdate_addAll2() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_addAll2(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -132,2 +143,5 @@\n-    @Test\n-    public void testUpdate_set() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_set(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -143,2 +157,5 @@\n-    @Test\n-    public void testUpdate_setAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_setAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -154,2 +171,5 @@\n-    @Test\n-    public void testUpdate_remove() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_remove(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -162,2 +182,5 @@\n-    @Test\n-    public void testUpdate_remove1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_remove1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -170,2 +193,5 @@\n-    @Test\n-    public void testUpdate_removeAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_removeAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -178,2 +204,5 @@\n-    @Test\n-    public void testUpdate_retainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_retainAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -186,2 +215,5 @@\n-    @Test\n-    public void testUpdate_iterator_add() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_iterator_add(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -195,2 +227,5 @@\n-    @Test\n-    public void testUpdate_iterator_set() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_iterator_set(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -208,2 +243,5 @@\n-    @Test\n-    public void testUpdate_sublist_add() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_add(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -217,2 +255,5 @@\n-    @Test\n-    public void testUpdate_sublist_add1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_add1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -227,2 +268,5 @@\n-    @Test\n-    public void testUpdate_sublist_addAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_addAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -237,2 +281,5 @@\n-    @Test\n-    public void testUpdate_sublist_addAll1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_addAll1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -247,2 +294,5 @@\n-    @Test\n-    public void testUpdate_sublist_set() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_set(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -259,2 +309,5 @@\n-    @Test\n-    public void testUpdate_sublist_remove() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_remove(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -268,2 +321,5 @@\n-    @Test\n-    public void testUpdate_sublist_remove1() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_remove1(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -277,2 +333,5 @@\n-    @Test\n-    public void testUpdate_sublist_removeAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_removeAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -286,2 +345,5 @@\n-    @Test\n-    public void testUpdate_sublist_retainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_sublist_retainAll(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -295,2 +357,5 @@\n-    @Test\n-    public void testUpdate_iterator_sublist_add() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_iterator_sublist_add(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -305,2 +370,5 @@\n-    @Test\n-    public void testUpdate_iterator_sublist_set() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testUpdate_iterator_sublist_set(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -319,2 +387,5 @@\n-    @Test\n-    public void testMultipleUpdate() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testMultipleUpdate(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n@@ -335,2 +406,5 @@\n-    @Test\n-    public void testPreFilledList() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testPreFilledList(Mode mode) {\n+        ObservableListWithExtractor_(mode);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListWithExtractor.java","additions":138,"deletions":64,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,2 +41,1 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,2 +43,2 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -47,1 +46,0 @@\n-@RunWith(Parameterized.class)\n@@ -50,1 +48,1 @@\n-    final Callable<ObservableMap<String, String>> mapFactory;\n+    Callable<ObservableMap<String, String>> mapFactory;\n@@ -55,1 +53,1 @@\n-    public ObservableMapTest(final Callable<ObservableMap<String, String>> mapFactory) {\n+    public void ObservableMapTest_(Callable<ObservableMap<String, String>> mapFactory) {\n@@ -59,1 +57,0 @@\n-    @Parameterized.Parameters\n@@ -73,1 +70,0 @@\n-    @Before\n@@ -97,2 +93,5 @@\n-    @Test\n-    public void testPutRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPutRemove(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -119,2 +118,5 @@\n-    @Test\n-    public void testPutRemove_Null() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPutRemove_Null(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -151,2 +153,5 @@\n-    @Test\n-    public void testPutRemove_NullKey() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPutRemove_NullKey(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -172,1 +177,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -174,1 +180,3 @@\n-    public void testPutAll() {\n+    public void testPutAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -186,1 +194,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -188,1 +197,3 @@\n-    public void testClear() {\n+    public void testClear(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -196,2 +207,5 @@\n-    @Test\n-    public void testOther() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testOther(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -208,2 +222,5 @@\n-    @Test\n-    public void testKeySet_Remove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet_Remove(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -219,1 +236,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -221,1 +239,3 @@\n-    public void testKeySet_RemoveAll() {\n+    public void testKeySet_RemoveAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -228,2 +248,5 @@\n-    @Test\n-    public void testKeySet_RetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet_RetainAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -236,1 +259,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -238,1 +262,3 @@\n-    public void testKeySet_Clear() {\n+    public void testKeySet_Clear(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -244,2 +270,5 @@\n-    @Test\n-    public void testKeySet_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -257,2 +286,5 @@\n-    @Test\n-    public void testKeySet_Other() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet_Other(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -270,2 +302,5 @@\n-    @Test\n-    public void testValues_Remove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues_Remove(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -281,1 +316,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -283,1 +319,3 @@\n-    public void testValues_RemoveAll() {\n+    public void testValues_RemoveAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -290,2 +328,5 @@\n-    @Test\n-    public void testValues_RetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues_RetainAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -298,1 +339,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -300,1 +342,3 @@\n-    public void testValues_Clear() {\n+    public void testValues_Clear(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -306,2 +350,5 @@\n-    @Test\n-    public void testValues_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -320,2 +367,5 @@\n-    @Test\n-    public void testValues_Other() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues_Other(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -333,2 +383,5 @@\n-    @Test\n-    public void testEntrySet_Remove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet_Remove(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -344,1 +397,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -346,1 +400,3 @@\n-    public void testEntrySet_RemoveAll() {\n+    public void testEntrySet_RemoveAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -353,2 +409,5 @@\n-    @Test\n-    public void testEntrySet_RetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet_RetainAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -361,1 +420,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -363,1 +423,3 @@\n-    public void testEntrySet_Clear() {\n+    public void testEntrySet_Clear(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -369,2 +431,5 @@\n-    @Test\n-    public void testEntrySet_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -384,2 +449,5 @@\n-    @Test\n-    public void testEntrySet_Other() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet_Other(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -397,2 +465,5 @@\n-    @Test\n-    public void testObserverCanRemoveObservers() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObserverCanRemoveObservers(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n@@ -429,2 +500,5 @@\n-    @Test\n-    public void testEqualsAndHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsAndHashCode(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        ObservableMapTest_(mapFactory);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableMapTest.java","additions":137,"deletions":63,"binary":false,"changes":200,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,2 +40,3 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n@@ -43,4 +44,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-@RunWith(Parameterized.class)\n@@ -49,1 +46,1 @@\n-    final Callable<ObservableSet<String>> setFactory;\n+    Callable<ObservableSet<String>> setFactory;\n@@ -53,1 +50,1 @@\n-    public ObservableSetTest(final Callable<ObservableSet<String>> setFactory) {\n+    public void ObservableSetTest_(Callable<ObservableSet<String>> setFactory) {\n@@ -57,1 +54,0 @@\n-    @Parameterized.Parameters\n@@ -70,1 +66,0 @@\n-    @Before\n@@ -92,2 +87,5 @@\n-    @Test\n-    public void testAddRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddRemove(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -112,1 +110,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -114,1 +113,3 @@\n-    public void testAddAll() {\n+    public void testAddAll(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -126,1 +127,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -128,1 +130,3 @@\n-    public void testRemoveAll() {\n+    public void testRemoveAll(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -135,1 +139,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n@@ -137,1 +142,3 @@\n-    public void testClear() {\n+    public void testClear(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -145,2 +152,5 @@\n-    @Test\n-    public void testRetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRetainAll(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -153,2 +163,5 @@\n-    @Test\n-    public void testIterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testIterator(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -165,2 +178,5 @@\n-    @Test\n-    public void testOther() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testOther(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -174,2 +190,5 @@\n-    @Test\n-    public void testNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testNull(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -190,2 +209,5 @@\n-    @Test\n-    public void testObserverCanRemoveObservers() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObserverCanRemoveObservers(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n@@ -223,2 +245,5 @@\n-    @Test\n-    public void testEqualsAndHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsAndHashCode(Callable<ObservableSet<String>> setFactory) throws Exception {\n+        ObservableSetTest_(setFactory);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSetTest.java","additions":57,"deletions":32,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.Test;\n@@ -34,0 +35,1 @@\n+import java.util.ListIterator;\n@@ -36,2 +38,4 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import java.util.stream.Stream;\n@@ -49,1 +53,1 @@\n-@RunWith(Parameterized.class)\n+\n@@ -55,15 +59,12 @@\n-\n-    public ObservableSubListIteratorTest(final Callable<? extends List<String>> listFactory) {\n-        super(listFactory);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection createParameters() {\n-        Object[][] data = new Object[][] {\n-            { TestedObservableLists.ARRAY_LIST },\n-            { TestedObservableLists.LINKED_LIST },\n-            { TestedObservableLists.VETOABLE_LIST },\n-            { TestedObservableLists.CHECKED_OBSERVABLE_ARRAY_LIST },\n-            { TestedObservableLists.SYNCHRONIZED_OBSERVABLE_ARRAY_LIST }\n-         };\n-        return Arrays.asList(data);\n+    private Callable<? extends List<String>> listFactory;\n+    private List<String> list;\n+    private ListIterator<String> iter;\n+\n+    public static Stream<Arguments> createParameters() {\n+        return Stream.of(\n+                Arguments.of(TestedObservableLists.ARRAY_LIST),\n+                Arguments.of(TestedObservableLists.LINKED_LIST),\n+                Arguments.of(TestedObservableLists.VETOABLE_LIST),\n+                Arguments.of(TestedObservableLists.CHECKED_OBSERVABLE_ARRAY_LIST),\n+                Arguments.of(TestedObservableLists.SYNCHRONIZED_OBSERVABLE_ARRAY_LIST)\n+        );\n@@ -72,8 +73,7 @@\n-    @Before @Override\n-    public void setup() throws Exception {\n-        list = listFactory.call();\n-        list.addAll(\n-            Arrays.asList(\"P\", \"Q\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"R\", \"S\"));\n-        fullList = list;\n-        list = fullList.subList(2, 8);\n-        iter = list.listIterator();\n+    private void setup(Callable<? extends List<String>> listFactory) throws Exception {\n+        this.listFactory = listFactory;\n+        this.list = listFactory.call();\n+        this.list.addAll(Arrays.asList(\"P\", \"Q\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"R\", \"S\"));\n+        this.fullList = list;\n+        this.list = fullList.subList(2, 8);\n+        this.iter = list.listIterator();\n@@ -84,2 +84,4 @@\n-    @Test\n-    public void testSubAddBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubAddBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -90,2 +92,4 @@\n-    @Test\n-    public void testSubAddMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubAddMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -97,2 +101,4 @@\n-    @Test\n-    public void testSubAddEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubAddEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -104,2 +110,4 @@\n-    @Test\n-    public void testSubRemoveBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubRemoveBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -111,2 +119,4 @@\n-    @Test\n-    public void testSubRemoveMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubRemoveMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -118,2 +128,4 @@\n-    @Test\n-    public void testSubRemoveEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubRemoveEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -125,2 +137,4 @@\n-    @Test\n-    public void testSubSetBeginning() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSetBeginning(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -132,2 +146,4 @@\n-    @Test\n-    public void testSubSetMiddle() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSetMiddle(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -139,2 +155,4 @@\n-    @Test\n-    public void testSubSetEnd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSetEnd(Callable<? extends List<String>> listFactory) throws Exception {\n+        setup(listFactory);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSubListIteratorTest.java","additions":64,"deletions":46,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,3 +36,1 @@\n-import static org.junit.Assert.*;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -43,1 +42,0 @@\n-@RunWith(Parameterized.class)\n@@ -45,1 +43,1 @@\n-    final Callable<ObservableList<String>> listFactory;\n+    Callable<ObservableList<String>> listFactory;\n@@ -50,5 +48,0 @@\n-    public ObservableSubListTest(final Callable<ObservableList<String>> listFactory) {\n-        this.listFactory = listFactory;\n-    }\n-\n-    @Parameterized.Parameters\n@@ -66,2 +59,1 @@\n-    @Before\n-    public void setup() throws Exception {\n+    private void setup(Callable<ObservableList<String>> listFactory) throws Exception {\n@@ -88,3 +80,5 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testBadRange() {\n-        list.subList(3, 2);\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testBadRange(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n+        assertThrows(IllegalArgumentException.class, () -> list.subList(3, 2));\n@@ -93,3 +87,5 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n-    public void testRangeTooLow() {\n-        list.subList(-2, 4);\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testRangeTooLow(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.subList(-2, 4));\n@@ -98,3 +94,5 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n-    public void testRangeTooHigh() {\n-        list.subList(3, 7);\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    void testRangeTooHigh(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.subList(3, 7));\n@@ -103,2 +101,4 @@\n-    @Test\n-    public void testWidestRange() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testWidestRange(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -109,2 +109,4 @@\n-    @Test\n-    public void testAdd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAdd(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -118,2 +120,4 @@\n-    @Test\n-    public void testAddAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testAddAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -127,2 +131,4 @@\n-    @Test\n-    public void testClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClear(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -137,2 +143,4 @@\n-    @Test\n-    public void testContains() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testContains(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -145,2 +153,4 @@\n-    @Test\n-    public void testContainsAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testContainsAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -151,2 +161,4 @@\n-    @Test\n-    public void testContainsNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testContainsNull(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -159,2 +171,4 @@\n-    @Test\n-    public void testEqualsOnAnotherType() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsOnAnotherType(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -164,2 +178,4 @@\n-    @Test\n-    public void testEqualsOnLongerList() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsOnLongerList(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -171,2 +187,4 @@\n-    @Test\n-    public void testEqualsOnShorterList() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsOnShorterList(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -178,2 +196,4 @@\n-    @Test\n-    public void testEquals() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEquals(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -185,2 +205,4 @@\n-    @Test\n-    public void testEqualsWithNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsWithNull(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -193,2 +215,4 @@\n-    @Test\n-    public void testEqualsWithNullOnLongerList() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsWithNullOnLongerList(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -201,2 +225,4 @@\n-    @Test\n-    public void testEqualsWithNullOnShorterList() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEqualsWithNullOnShorterList(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -209,2 +235,4 @@\n-    @Test\n-    public void testIndexOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testIndexOf(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -215,2 +243,4 @@\n-    @Test\n-    public void testIndexOfWithNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testIndexOfWithNull(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -223,2 +253,4 @@\n-    @Test\n-    public void testIsEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testIsEmpty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -230,2 +262,4 @@\n-    @Test\n-    public void testLastIndexOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testLastIndexOf(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -240,2 +274,4 @@\n-    @Test\n-    public void testRemoveAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -254,2 +290,4 @@\n-    @Test\n-    public void testRemoveIndex() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveIndex(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -264,2 +302,4 @@\n-    @Test\n-    public void testRemoveNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveNull(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -273,2 +313,4 @@\n-    @Test\n-    public void testRemoveObjectExists() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveObjectExists(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -282,2 +324,4 @@\n-    @Test\n-    public void testRemoveObjectNotExists() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRemoveObjectNotExists(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -291,2 +335,4 @@\n-    @Test\n-    public void testRetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testRetainAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -305,2 +351,4 @@\n-    @Test\n-    public void testSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSet(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -314,2 +362,4 @@\n-    @Test\n-    public void testSize() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSize(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -321,2 +371,4 @@\n-    @Test\n-    public void testSubSubList() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSubList(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -328,2 +380,4 @@\n-    @Test\n-    public void testSubSubListAdd() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSubListAdd(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -337,2 +391,4 @@\n-    @Test\n-    public void testSubSubListRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSubListRemove(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -346,2 +402,4 @@\n-    @Test\n-    public void testSubSubListSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testSubSubListSet(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -356,2 +414,4 @@\n-    @Test\n-    public void testToString() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testToString(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -367,2 +427,4 @@\n-    @Test\n-    public void testConcurrencyGet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyGet(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -373,2 +435,5 @@\n-    @Test\n-    public void testConcurrencyAdd() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAdd(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -379,2 +444,5 @@\n-    @Test\n-    public void testConcurrencyAddAll() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyAddAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -385,2 +453,5 @@\n-    @Test\n-    public void testConcurrencyClear() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyClear(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -391,2 +462,5 @@\n-    @Test\n-    public void testConcurrencyContains() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyContains(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -397,2 +471,5 @@\n-    @Test\n-    public void testConcurrencyContainsAll() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyContainsAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -404,2 +481,4 @@\n-    @Test\n-    public void testConcurrencyIsEmpty() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIsEmpty(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -411,2 +490,4 @@\n-    @Test\n-    public void testConcurrencyIterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyIterator(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -418,2 +499,4 @@\n-    @Test\n-    public void testConcurrencyRemove() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemove(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -425,2 +508,4 @@\n-    @Test\n-    public void testConcurrencyRemove0() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemove0(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -432,2 +517,4 @@\n-    @Test\n-    public void testConcurrencySet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencySet(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -439,2 +526,4 @@\n-    @Test\n-    public void testConcurrencyRemoveAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRemoveAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -446,2 +535,4 @@\n-    @Test\n-    public void testConcurrencyRetainAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainAll(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n@@ -452,2 +543,5 @@\n-    @Test\n-    public void testConcurrencyRetainSize() {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testConcurrencyRetainSize(Callable<ObservableList<String>> listFactory) throws Exception {\n+        setup(listFactory);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSubListTest.java","additions":207,"deletions":113,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -36,4 +36,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,1 +41,0 @@\n-@RunWith(Parameterized.class)\n@@ -63,1 +62,0 @@\n-    @Parameterized.Parameters\n@@ -74,1 +72,1 @@\n-    final ListFactory listFactory;\n+    ListFactory listFactory;\n@@ -79,1 +77,1 @@\n-    public SourceAdapterChangeTest(ListFactory listFactory) {\n+    public void SourceAdapterChangeTest_(ListFactory listFactory) {\n@@ -83,1 +81,0 @@\n-    @Before\n@@ -95,2 +92,5 @@\n-    @Test\n-    public void testUpdate() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testUpdate(ListFactory listFactory) throws Exception {\n+        SourceAdapterChangeTest_(listFactory);\n+        setUp();\n@@ -104,2 +104,5 @@\n-    @Test\n-    public void testPermutation() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPermutation(ListFactory listFactory) throws Exception {\n+        SourceAdapterChangeTest_(listFactory);\n+        setUp();\n@@ -113,2 +116,5 @@\n-    @Test\n-    public void testPermutationUpdate() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPermutationUpdate(ListFactory listFactory) throws Exception {\n+        SourceAdapterChangeTest_(listFactory);\n+        setUp();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/SourceAdapterChangeTest.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,3 +40,3 @@\n-import static org.junit.Assert.*;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -44,1 +44,0 @@\n-@RunWith(Parameterized.class)\n@@ -47,1 +46,1 @@\n-    final Callable<ObservableMap<String, String>> mapFactory;\n+    Callable<ObservableMap<String, String>> mapFactory;\n@@ -53,1 +52,1 @@\n-    public UnmodifiableObservableMapTest(final Callable<ObservableMap<String, String>> mapFactory) {\n+    public void UnmodifiableObservableMapTest_(Callable<ObservableMap<String, String>> mapFactory) {\n@@ -57,1 +56,0 @@\n-    @Parameterized.Parameters\n@@ -70,1 +68,0 @@\n-    @Before\n@@ -95,2 +92,3 @@\n-    @Test\n-    public void testObservability() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testObservability(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n@@ -102,0 +100,2 @@\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -120,2 +120,5 @@\n-    @Test\n-    public void testPutAll() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testPutAll(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -133,2 +136,5 @@\n-    @Test\n-    public void testClear() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testClear(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -141,2 +147,5 @@\n-    @Test\n-    public void testKeySet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -161,2 +170,5 @@\n-    @Test\n-    public void testKeySet_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testKeySet_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -165,1 +177,1 @@\n-        assertTrue(\"Test error, underlying Map should not be empty!\", iterator.hasNext());\n+        assertTrue(iterator.hasNext(), () -> \"Test error, underlying Map should not be empty!\");\n@@ -172,2 +184,5 @@\n-    @Test\n-    public void testValues() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -192,2 +207,5 @@\n-    @Test\n-    public void testValues_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testValues_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -195,1 +213,1 @@\n-        assertTrue(\"Test error, underlying Map should not be empty!\", iterator.hasNext());\n+        assertTrue(iterator.hasNext(), () -> \"Test error, underlying Map should not be empty!\");\n@@ -202,2 +220,5 @@\n-    @Test\n-    public void testEntrySet() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -222,2 +243,5 @@\n-    @Test\n-    public void testEntrySet_Iterator() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void testEntrySet_Iterator(Callable<ObservableMap<String, String>> mapFactory) throws Exception {\n+        UnmodifiableObservableMapTest_(mapFactory);\n+        setUp();\n@@ -225,1 +249,1 @@\n-        assertTrue(\"Test error, underlying Map should not be empty!\", iterator.hasNext());\n+        assertTrue(iterator.hasNext(), () -> \"Test error, underlying Map should not be empty!\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/UnmodifiableObservableMapTest.java","additions":55,"deletions":31,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -31,0 +30,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -32,3 +34,2 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -36,5 +37,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -42,24 +38,0 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                {\"5ms\", Duration.millis(5)},\n-                {\"0ms\", Duration.ZERO},\n-                {\"25.5ms\", Duration.millis(25.5)},\n-                {\"-10ms\", Duration.millis(-10)},\n-                {\"5s\", Duration.seconds(5)},\n-                {\"0s\", Duration.ZERO},\n-                {\"25.5s\", Duration.seconds(25.5)},\n-                {\"-10s\", Duration.seconds(-10)},\n-                {\"5m\", Duration.minutes(5)},\n-                {\"0m\", Duration.ZERO},\n-                {\"25.5m\", Duration.minutes(25.5)},\n-                {\"-10m\", Duration.minutes(-10)},\n-                {\"5h\", Duration.hours(5)},\n-                {\"0h\", Duration.ZERO},\n-                {\"25.5h\", Duration.hours(25.5)},\n-                {\"-10h\", Duration.hours(-10)}\n-        });\n-    }\n-\n-    private String asString;\n-    private Duration expected;\n@@ -67,3 +39,19 @@\n-    public DurationValueOfTest(String asString, Duration expected) {\n-        this.asString = asString;\n-        this.expected = expected;\n+    static Stream<Arguments> provideTestCases() {\n+        return Stream.of(\n+                Arguments.of(\"5ms\", Duration.millis(5)),\n+                Arguments.of(\"0ms\", Duration.ZERO),\n+                Arguments.of(\"25.5ms\", Duration.millis(25.5)),\n+                Arguments.of(\"-10ms\", Duration.millis(-10)),\n+                Arguments.of(\"5s\", Duration.seconds(5)),\n+                Arguments.of(\"0s\", Duration.ZERO),\n+                Arguments.of(\"25.5s\", Duration.seconds(25.5)),\n+                Arguments.of(\"-10s\", Duration.seconds(-10)),\n+                Arguments.of(\"5m\", Duration.minutes(5)),\n+                Arguments.of(\"0m\", Duration.ZERO),\n+                Arguments.of(\"25.5m\", Duration.minutes(25.5)),\n+                Arguments.of(\"-10m\", Duration.minutes(-10)),\n+                Arguments.of(\"5h\", Duration.hours(5)),\n+                Arguments.of(\"0h\", Duration.ZERO),\n+                Arguments.of(\"25.5h\", Duration.hours(25.5)),\n+                Arguments.of(\"-10h\", Duration.hours(-10))\n+        );\n@@ -72,1 +60,3 @@\n-    @Test public void testValueOf() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestCases\")\n+    void testValueOf(String asString, Duration expected) {\n@@ -77,3 +67,4 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void leadingSpaceResultsInException() {\n-        Duration.valueOf(\" \" + asString);\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestCases\")\n+    void leadingSpaceResultsInException(String asString, Duration expected) {\n+        assertThrows(IllegalArgumentException.class, () -> Duration.valueOf(\" \" + asString));\n@@ -82,3 +73,4 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void trailingSpaceResultsInException() {\n-        Duration.valueOf(asString + \" \");\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestCases\")\n+    void trailingSpaceResultsInException(String asString, Duration expected) {\n+        assertThrows(IllegalArgumentException.class, () -> Duration.valueOf(asString + \" \"));\n@@ -87,4 +79,6 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void wrongCaseResultsInException() {\n-        String mangled = asString.substring(0, asString.length()-1) + Character.toUpperCase(asString.charAt(asString.length()-1));\n-        Duration.valueOf(mangled);\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestCases\")\n+    void wrongCaseResultsInException(String asString, Duration expected) {\n+        String mangled = asString.substring(0, asString.length() - 1)\n+                + Character.toUpperCase(asString.charAt(asString.length() - 1));\n+        assertThrows(IllegalArgumentException.class, () -> Duration.valueOf(mangled));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/DurationValueOfTest.java","additions":42,"deletions":48,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -33,1 +33,3 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,5 +37,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-\/**\n- *\/\n@@ -43,1 +40,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    void setup() {\n@@ -47,5 +45,2 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testDefaultConstructor() {\n+    @Test\n+    void testDefaultConstructor() {\n@@ -58,1 +53,2 @@\n-    @Test public void testConstructor_locale() {\n+    @Test\n+    void testConstructor_locale() {\n@@ -65,1 +61,2 @@\n-    @Test public void testConstructor_pattern() {\n+    @Test\n+    void testConstructor_pattern() {\n@@ -72,1 +69,2 @@\n-    @Test public void testConstructor_locale_pattern() {\n+    @Test\n+    void testConstructor_locale_pattern() {\n@@ -79,1 +77,2 @@\n-    @Test public void testConstructor_numberFormat() {\n+    @Test\n+    void testConstructor_numberFormat() {\n@@ -87,6 +86,2 @@\n-\n-    \/*********************************************************************\n-     * Test methods\n-     ********************************************************************\/\n-\n-    @Test public void getNumberFormat_default() {\n+    @Test\n+    void getNumberFormat_default() {\n@@ -96,1 +91,2 @@\n-    @Test public void getNumberFormat_nonNullPattern() {\n+    @Test\n+    void getNumberFormat_nonNullPattern() {\n@@ -98,3 +94,1 @@\n-        assertTrue(\n-                NumberStringConverterShim.getNumberFormat(converter)\n-                        instanceof DecimalFormat);\n+        assertTrue(NumberStringConverterShim.getNumberFormat(converter) instanceof DecimalFormat);\n@@ -103,1 +97,2 @@\n-    @Test public void getNumberFormat_nonNullNumberFormat() {\n+    @Test\n+    void getNumberFormat_nonNullNumberFormat() {\n@@ -109,6 +104,2 @@\n-\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void fromString_testValidStringInput() {\n+    @Test\n+    void fromString_testValidStringInput() {\n@@ -118,1 +109,2 @@\n-    @Test public void fromString_testValidStringInputWithWhiteSpace() {\n+    @Test\n+    void fromString_testValidStringInputWithWhiteSpace() {\n@@ -122,1 +114,2 @@\n-    @Test public void toString_validInput() {\n+    @Test\n+    void toString_validInput() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CurrencyStringConverterTest.java","additions":28,"deletions":35,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -30,6 +32,2 @@\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.Locale;\n-import java.util.TimeZone;\n+import java.util.*;\n+import java.util.stream.Stream;\n@@ -38,1 +36,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,4 +42,1 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+class DateStringConverterTest {\n@@ -45,4 +44,0 @@\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n-public class DateStringConverterTest {\n@@ -50,1 +45,0 @@\n-\n@@ -54,6 +48,1 @@\n-        c.set(Calendar.YEAR, 1985);\n-        c.set(Calendar.MONTH, Calendar.JANUARY);\n-        c.set(Calendar.DAY_OF_MONTH, 12);\n-        c.set(Calendar.HOUR_OF_DAY, 0);\n-        c.set(Calendar.MINUTE, 0);\n-        c.set(Calendar.SECOND, 0);\n+        c.set(1985, Calendar.JANUARY, 12, 0, 0, 0);\n@@ -64,28 +53,0 @@\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { new DateStringConverter(),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_DATE, null, null },\n-\n-            { new DateStringConverter(DateFormat.SHORT),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT,\n-              VALID_DATE, null, null },\n-\n-            { new DateStringConverter(Locale.UK),\n-              Locale.UK, DateFormat.DEFAULT,\n-              VALID_DATE, null, null },\n-\n-            { new DateStringConverter(Locale.UK, DateFormat.SHORT),\n-              Locale.UK, DateFormat.SHORT,\n-              VALID_DATE, null, null },\n-\n-            { new DateStringConverter(\"dd MM yyyy\"),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_DATE, \"dd MM yyyy\", null },\n-\n-            { new DateStringConverter(DateFormat.getDateInstance(DateFormat.LONG)),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_DATE, null, DateFormat.getDateInstance(DateFormat.LONG) },\n-        });\n-    }\n-\n@@ -93,5 +54,0 @@\n-    private Locale locale;\n-    private int dateStyle;\n-    private String pattern;\n-    private DateFormat dateFormat;\n-    private Date validDate;\n@@ -100,15 +56,12 @@\n-    public DateStringConverterTest(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n-        this.converter = converter;\n-        this.locale = locale;\n-        this.dateStyle = dateStyle;\n-        this.validDate = validDate;\n-        this.pattern = pattern;\n-        this.dateFormat = dateFormat;\n-\n-        if (dateFormat != null) {\n-            validFormatter = dateFormat;\n-        } else if (pattern != null) {\n-            validFormatter = new SimpleDateFormat(pattern);\n-        } else {\n-            validFormatter = DateFormat.getDateInstance(dateStyle, locale);\n-        }\n+    @BeforeEach\n+    void setup() {}\n+\n+    static Stream<Arguments> implementations() {\n+        return Stream.of(\n+                Arguments.of(new DateStringConverter(), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, null, null),\n+                Arguments.of(new DateStringConverter(DateFormat.SHORT), Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT, VALID_DATE, null, null),\n+                Arguments.of(new DateStringConverter(Locale.UK), Locale.UK, DateFormat.DEFAULT, VALID_DATE, null, null),\n+                Arguments.of(new DateStringConverter(Locale.UK, DateFormat.SHORT), Locale.UK, DateFormat.SHORT, VALID_DATE, null, null),\n+                Arguments.of(new DateStringConverter(\"dd MM yyyy\"), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, \"dd MM yyyy\", null),\n+                Arguments.of(new DateStringConverter(DateFormat.getDateInstance(DateFormat.LONG)), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, null, DateFormat.getDateInstance(DateFormat.LONG))\n+        );\n@@ -117,8 +70,3 @@\n-    @Before public void setup() {\n-    }\n-\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testConstructor() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void testConstructor(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n@@ -131,37 +79,3 @@\n-\n-    \/*********************************************************************\n-     * Test methods\n-     ********************************************************************\/\n-\n-    @Test public void getDateFormat() {\n-        assertNotNull(DateTimeStringConverterShim.getDateFormat(converter));\n-    }\n-\n-    @Test public void getDateFormat_nonNullPattern() {\n-        converter = new DateStringConverter(\"yyyy\");\n-        assertTrue(\n-                DateTimeStringConverterShim.getDateFormat(converter)\n-                        instanceof SimpleDateFormat);\n-    }\n-\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void fromString_testValidInput() {\n-        String input = validFormatter.format(validDate);\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(input));\n-    }\n-\n-    @Test public void fromString_testValidInputWithWhiteSpace() {\n-        String input = validFormatter.format(validDate);\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(\"      \" + input + \"      \"));\n-    }\n-\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n-    }\n-\n-    @Test public void toString_validOutput() {\n-        assertEquals(validFormatter.format(validDate), converter.toString(validDate));\n+    @Test\n+    void fromString_testInvalidInput() {\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n@@ -170,0 +84,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateStringConverterTest.java","additions":30,"deletions":115,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.util.Arrays;\n+import java.time.ZoneId;\n@@ -32,1 +32,0 @@\n-import java.util.Collection;\n@@ -36,0 +35,2 @@\n+import java.util.stream.Stream;\n+\n@@ -38,1 +39,0 @@\n-import static org.junit.Assert.*;\n@@ -40,4 +40,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -45,3 +47,0 @@\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -67,17 +66,70 @@\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { new DateTimeStringConverter(),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-              VALID_DATE_WITH_SECONDS, null, null },\n-\n-            { new DateTimeStringConverter(DateFormat.SHORT, DateFormat.SHORT),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT, DateFormat.SHORT,\n-              VALID_DATE_WITHOUT_SECONDS, null, null },\n-\n-            { new DateTimeStringConverter(Locale.UK),\n-              Locale.UK, DateFormat.DEFAULT, DateFormat.DEFAULT,\n-              VALID_DATE_WITH_SECONDS, null, null },\n-\n-            { new DateTimeStringConverter(Locale.UK, DateFormat.SHORT, DateFormat.SHORT),\n-              Locale.UK, DateFormat.SHORT, DateFormat.SHORT,\n-              VALID_DATE_WITHOUT_SECONDS, null, null },\n+    static Stream<Arguments> provideTestParameters() {\n+        return Stream.of(\n+                Arguments.of(\n+                        \"no-args\",\n+                        new Object[]{},\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS,\n+                        null,\n+                        null,\n+                        null\n+                ),\n+                Arguments.of(\n+                        \"styles\",\n+                        new Object[]{DateFormat.SHORT, DateFormat.SHORT},\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.SHORT,\n+                        DateFormat.SHORT,\n+                        VALID_DATE_WITHOUT_SECONDS,\n+                        null,\n+                        null,\n+                        null\n+                ),\n+                Arguments.of(\n+                        \"locale\",\n+                        new Object[]{Locale.UK},\n+                        Locale.UK,\n+                        DateFormat.DEFAULT,\n+                        DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS,\n+                        null,\n+                        null,\n+                        null\n+                ),\n+                Arguments.of(\n+                        \"localeStyles\",\n+                        new Object[]{Locale.UK, DateFormat.SHORT, DateFormat.SHORT},\n+                        Locale.UK,\n+                        DateFormat.SHORT,\n+                        DateFormat.SHORT,\n+                        VALID_DATE_WITHOUT_SECONDS,\n+                        null,\n+                        null,\n+                        null\n+                ),\n+                Arguments.of(\n+                        \"pattern\",\n+                        new Object[]{\"dd MM yyyy HH mm ss\"},\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS,\n+                        \"dd MM yyyy HH mm ss\",\n+                        null,\n+                        null\n+                ),\n+                Arguments.of(\n+                        \"dateFormatInstance\",\n+                        new Object[]{DateFormat.LONG, DateFormat.FULL},\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS,\n+                        null,\n+                        DateFormat.LONG,\n+                        DateFormat.FULL\n+                )\n+        );\n+    }\n@@ -85,3 +137,4 @@\n-            { new DateTimeStringConverter(\"dd MM yyyy HH mm ss\"),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-              VALID_DATE_WITH_SECONDS, \"dd MM yyyy HH mm ss\", null },\n+    @BeforeAll\n+    static void setup() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n+    }\n@@ -89,4 +142,29 @@\n-            { new DateTimeStringConverter(DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL)),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-              VALID_DATE_WITH_SECONDS, null, DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL) },\n-        });\n+    private DateTimeStringConverter createConverter(String constructorType, Object[] constructorArgs) {\n+        switch (constructorType) {\n+            case \"no-args\":\n+                return new DateTimeStringConverter();\n+            case \"styles\":\n+                return new DateTimeStringConverter(\n+                        (Integer) constructorArgs[0],\n+                        (Integer) constructorArgs[1]\n+                );\n+            case \"locale\":\n+                return new DateTimeStringConverter((Locale) constructorArgs[0]);\n+            case \"localeStyles\":\n+                return new DateTimeStringConverter(\n+                        (Locale) constructorArgs[0],\n+                        (Integer) constructorArgs[1],\n+                        (Integer) constructorArgs[2]\n+                );\n+            case \"pattern\":\n+                return new DateTimeStringConverter((String) constructorArgs[0]);\n+            case \"dateFormatInstance\":\n+                DateFormat dateFormat = DateFormat.getDateTimeInstance(\n+                        (Integer) constructorArgs[0],\n+                        (Integer) constructorArgs[1]\n+                );\n+                return new DateTimeStringConverter(dateFormat);\n+            default:\n+                fail(\"Unknown constructor type: \" + constructorType);\n+                return null;\n+        }\n@@ -95,20 +173,11 @@\n-    private DateTimeStringConverter converter;\n-    private Locale locale;\n-    private int dateStyle;\n-    private int timeStyle;\n-    private String pattern;\n-    private DateFormat dateFormat;\n-    private Date validDate;\n-    private DateFormat validFormatter;\n-\n-    public DateTimeStringConverterTest(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n-        this.converter = converter;\n-        this.locale = locale;\n-        this.dateStyle = dateStyle;\n-        this.timeStyle = timeStyle;\n-        this.validDate = validDate;\n-        this.pattern = pattern;\n-        this.dateFormat = dateFormat;\n-\n-        if (dateFormat != null) {\n-            validFormatter = dateFormat;\n+    private DateFormat createValidFormatter(\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle,\n+            String pattern,\n+            int dateStyle,\n+            int timeStyle,\n+            Locale locale\n+    ) {\n+        DateFormat formatter;\n+        if (dateFormatDateStyle != null && dateFormatTimeStyle != null) {\n+            formatter = DateFormat.getDateTimeInstance(dateFormatDateStyle, dateFormatTimeStyle, locale);\n@@ -116,1 +185,1 @@\n-            validFormatter = new SimpleDateFormat(pattern);\n+            formatter = new SimpleDateFormat(pattern);\n@@ -118,1 +187,1 @@\n-            validFormatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n+            formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n@@ -120,0 +189,2 @@\n+        formatter.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        return formatter;\n@@ -122,2 +193,14 @@\n-    @Before public void setup() {\n-    }\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void testConstructor(\n+            String constructorType,\n+            Object[] constructorArgs,\n+            Locale expectedLocale,\n+            int expectedDateStyle,\n+            int expectedTimeStyle,\n+            Date validDate,\n+            String expectedPattern,\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle\n+    ) {\n+        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n@@ -125,3 +208,4 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n+        assertEquals(expectedLocale, DateTimeStringConverterShim.getLocale(converter));\n+        assertEquals(expectedDateStyle, DateTimeStringConverterShim.getDateStyle(converter));\n+        assertEquals(expectedTimeStyle, DateTimeStringConverterShim.getTimeStyle(converter));\n+        assertEquals(expectedPattern, DateTimeStringConverterShim.getPattern(converter));\n@@ -129,6 +213,4 @@\n-    @Test public void testConstructor() {\n-        assertEquals(locale, DateTimeStringConverterShim.getLocale(converter));\n-        assertEquals(dateStyle, DateTimeStringConverterShim.getDateStyle(converter));\n-        assertEquals(pattern, DateTimeStringConverterShim.getPattern(converter));\n-        assertEquals(dateFormat, DateTimeStringConverterShim.getDateFormatVar(converter));\n-        assertEquals(timeStyle, DateTimeStringConverterShim.getTimeStyle(converter));\n+        if (dateFormatDateStyle != null) {\n+            DateFormat dateFormat = DateTimeStringConverterShim.getDateFormatVar(converter);\n+            assertNotNull(dateFormat);\n+        }\n@@ -137,5 +219,3 @@\n-    \/*********************************************************************\n-     * Test methods\n-     ********************************************************************\/\n-\n-    @Test public void getDateFormat_default() {\n+    @Test\n+    void getDateFormat_default() {\n+        DateTimeStringConverter converter = new DateTimeStringConverter();\n@@ -145,4 +225,4 @@\n-    @Test public void getDateFormat_nonNullPattern() {\n-        converter = new DateTimeStringConverter(\"yyyy\/MM\/dd HH:mm:ss\");\n-        assertTrue(DateTimeStringConverterShim.getDateFormat(converter)\n-                instanceof SimpleDateFormat);\n+    @Test\n+    void getDateFormat_nonNullPattern() {\n+        DateTimeStringConverter converter = new DateTimeStringConverter(\"yyyy\/MM\/dd HH:mm:ss\");\n+        assertTrue(DateTimeStringConverterShim.getDateFormat(converter) instanceof SimpleDateFormat);\n@@ -151,5 +231,22 @@\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void fromString_testValidInput() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void fromString_testValidInput(\n+            String constructorType,\n+            Object[] constructorArgs,\n+            Locale expectedLocale,\n+            int expectedDateStyle,\n+            int expectedTimeStyle,\n+            Date validDate,\n+            String expectedPattern,\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle\n+    ) {\n+        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n+        DateFormat validFormatter = createValidFormatter(\n+                dateFormatDateStyle,\n+                dateFormatTimeStyle,\n+                expectedPattern,\n+                expectedDateStyle,\n+                expectedTimeStyle,\n+                expectedLocale\n+        );\n@@ -157,1 +254,1 @@\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(input));\n+        assertEquals(validDate, converter.fromString(input), \"Input = \" + input);\n@@ -160,1 +257,22 @@\n-    @Test public void fromString_testValidInputWithWhiteSpace() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void fromString_testValidInputWithWhiteSpace(\n+            String constructorType,\n+            Object[] constructorArgs,\n+            Locale expectedLocale,\n+            int expectedDateStyle,\n+            int expectedTimeStyle,\n+            Date validDate,\n+            String expectedPattern,\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle\n+    ) {\n+        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n+        DateFormat validFormatter = createValidFormatter(\n+                dateFormatDateStyle,\n+                dateFormatTimeStyle,\n+                expectedPattern,\n+                expectedDateStyle,\n+                expectedTimeStyle,\n+                expectedLocale\n+        );\n@@ -162,1 +280,1 @@\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(\"      \" + input + \"      \"));\n+        assertEquals(validDate, converter.fromString(\"      \" + input + \"      \"), \"Input = \" + input);\n@@ -165,3 +283,15 @@\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void fromString_testInvalidInput(\n+            String constructorType,\n+            Object[] constructorArgs,\n+            Locale expectedLocale,\n+            int expectedDateStyle,\n+            int expectedTimeStyle,\n+            Date validDate,\n+            String expectedPattern,\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle\n+    ) {\n+        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n@@ -170,1 +300,22 @@\n-    @Test public void toString_validOutput() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void toString_validOutput(\n+            String constructorType,\n+            Object[] constructorArgs,\n+            Locale expectedLocale,\n+            int expectedDateStyle,\n+            int expectedTimeStyle,\n+            Date validDate,\n+            String expectedPattern,\n+            Integer dateFormatDateStyle,\n+            Integer dateFormatTimeStyle\n+    ) {\n+        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n+        DateFormat validFormatter = createValidFormatter(\n+                dateFormatDateStyle,\n+                dateFormatTimeStyle,\n+                expectedPattern,\n+                expectedDateStyle,\n+                expectedTimeStyle,\n+                expectedLocale\n+        );\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateTimeStringConverterTest.java","additions":239,"deletions":88,"binary":false,"changes":327,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Arrays;\n@@ -33,1 +32,0 @@\n-import java.util.Collection;\n@@ -35,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -39,1 +38,6 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,10 +45,0 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -58,5 +52,0 @@\n-    \/\/ We can only create LocalDateStringConverter object after Locale is set.\n-    \/\/ Unfortunately, due to unpredictability of @Parameterized.Parameters methods\n-    \/\/ in JUnit, we have to allocate it after @BeforeClass sets up Locale and\n-    \/\/ necessary static fields. Otherwise, the test may collide with other\n-    \/\/ Local*StringConverter tests and cause unpredictable results.\n@@ -67,13 +56,0 @@\n-    };\n-\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { LocalDateStringConverterVariant.NO_PARAM,\n-              FormatStyle.SHORT, VALID_DATE },\n-\n-            { LocalDateStringConverterVariant.WITH_FORMATTER_PARSER,\n-              null, VALID_DATE },\n-\n-            { LocalDateStringConverterVariant.WITH_FORMAT_STYLES,\n-              FormatStyle.SHORT, VALID_DATE },\n-        });\n@@ -82,18 +58,6 @@\n-    private LocalDateStringConverterVariant converterVariant;\n-    private FormatStyle dateStyle;\n-    private LocalDate validDate;\n-\n-    private LocalDateStringConverter converter;\n-    private Locale locale;\n-    private DateTimeFormatter formatter, parser;\n-\n-    public LocalDateStringConverterTest(LocalDateStringConverterVariant converterVariant, FormatStyle dateStyle, LocalDate validDate) {\n-        this.converterVariant = converterVariant;\n-        this.dateStyle = dateStyle;\n-        this.validDate = validDate;\n-\n-        \/\/ initialized after Locale is established\n-        this.converter = null;\n-        this.locale = null;\n-        this.formatter = null;\n-        this.parser = null;\n+    static Stream<Arguments> provideTestParameters() {\n+        return Stream.of(\n+                Arguments.of(LocalDateStringConverterVariant.NO_PARAM, FormatStyle.SHORT, VALID_DATE),\n+                Arguments.of(LocalDateStringConverterVariant.WITH_FORMATTER_PARSER, null, VALID_DATE),\n+                Arguments.of(LocalDateStringConverterVariant.WITH_FORMAT_STYLES, FormatStyle.SHORT, VALID_DATE)\n+        );\n@@ -102,1 +66,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -104,1 +68,0 @@\n-        \/\/ Tests require that default locale is en_US\n@@ -108,1 +71,0 @@\n-        \/\/ DateTimeFormatter uses default locale, so we can init this after updating locale\n@@ -113,1 +75,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -115,1 +77,0 @@\n-        \/\/ Restore VM's old locale\n@@ -119,25 +80,31 @@\n-    @Before\n-    public void setup() {\n-        \/\/ Locale is established now, so we can allocate objects depending on it\n-        switch (this.converterVariant) {\n-        case NO_PARAM:\n-            this.converter = new LocalDateStringConverter();\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        case WITH_FORMATTER_PARSER:\n-            this.converter = new LocalDateStringConverter(aFormatter, aParser);\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = aFormatter;\n-            this.parser = aParser;\n-            break;\n-        case WITH_FORMAT_STYLES:\n-            this.converter = new LocalDateStringConverter(FormatStyle.SHORT, Locale.UK, IsoChronology.INSTANCE);\n-            this.locale = Locale.UK;\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        default:\n-            fail(\"Invalid converter variant: \" + this.converterVariant.toString());\n-        }\n+    private record ConverterSetup(\n+            LocalDateStringConverter converter,\n+            Locale locale,\n+            DateTimeFormatter formatter,\n+            DateTimeFormatter parser\n+    ) {}\n+\n+    private ConverterSetup setupConverter(\n+            LocalDateStringConverterVariant converterVariant,\n+            FormatStyle dateStyle,\n+            LocalDate validDate\n+    ) {\n+        return switch (converterVariant) {\n+            case NO_PARAM -> {\n+                LocalDateStringConverter converter = new LocalDateStringConverter();\n+                Locale locale = Locale.getDefault(Locale.Category.FORMAT);\n+                yield new ConverterSetup(converter, locale, null, null);\n+            }\n+            case WITH_FORMATTER_PARSER -> {\n+                LocalDateStringConverter converter = new LocalDateStringConverter(aFormatter, aParser);\n+                Locale locale = Locale.getDefault(Locale.Category.FORMAT);\n+                yield new ConverterSetup(converter, locale, aFormatter, aParser);\n+            }\n+            case WITH_FORMAT_STYLES -> {\n+                LocalDateStringConverter converter = new LocalDateStringConverter(\n+                        FormatStyle.SHORT, Locale.UK, IsoChronology.INSTANCE\n+                );\n+                yield new ConverterSetup(converter, Locale.UK, null, null);\n+            }\n+            default -> throw new IllegalArgumentException(\"Invalid converter variant: \" + converterVariant);\n+        };\n@@ -146,3 +113,12 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void testConstructor(\n+            LocalDateStringConverterVariant converterVariant,\n+            FormatStyle dateStyle,\n+            LocalDate validDate\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, dateStyle, validDate);\n+        LocalDateStringConverter converter = setup.converter();\n+        Locale locale = setup.locale();\n+        DateTimeFormatter formatter = setup.formatter();\n+        DateTimeFormatter parser = setup.parser();\n@@ -150,1 +126,0 @@\n-    @Test public void testConstructor() {\n@@ -152,2 +127,4 @@\n-        assertEquals((dateStyle != null) ? dateStyle : FormatStyle.SHORT,\n-                LocalDateStringConverterShim.getldtConverterDateStyle(converter));\n+        assertEquals(\n+                (dateStyle != null) ? dateStyle : FormatStyle.SHORT,\n+                LocalDateStringConverterShim.getldtConverterDateStyle(converter)\n+        );\n@@ -156,2 +133,1 @@\n-            assertEquals(formatter,\n-                    LocalDateStringConverterShim.getldtConverterFormatter(converter));\n+            assertEquals(formatter, LocalDateStringConverterShim.getldtConverterFormatter(converter));\n@@ -160,2 +136,1 @@\n-            assertEquals(parser,\n-                    LocalDateStringConverterShim.getldtConverterParser(converter));\n+            assertEquals(parser, LocalDateStringConverterShim.getldtConverterParser(converter));\n@@ -163,2 +138,1 @@\n-            assertEquals(formatter,\n-                LocalDateStringConverterShim.getldtConverterParser(converter));\n+            assertEquals(formatter, LocalDateStringConverterShim.getldtConverterParser(converter));\n@@ -168,0 +142,10 @@\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void toString_to_fromString_testRoundtrip(\n+            LocalDateStringConverterVariant converterVariant,\n+            FormatStyle dateStyle,\n+            LocalDate validDate\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, dateStyle, validDate);\n+        LocalDateStringConverter converter = setup.converter();\n+        DateTimeFormatter formatter = setup.formatter();\n@@ -169,5 +153,0 @@\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void toString_to_fromString_testRoundtrip() {\n@@ -175,1 +154,0 @@\n-            \/\/ Only the default formatter\/parser can guarantee roundtrip symmetry\n@@ -180,3 +158,11 @@\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void fromString_testInvalidInput(\n+            LocalDateStringConverterVariant converterVariant,\n+            FormatStyle dateStyle,\n+            LocalDate validDate\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, dateStyle, validDate);\n+        LocalDateStringConverter converter = setup.converter();\n+\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateStringConverterTest.java","additions":86,"deletions":100,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+\/\/ Imports remain the same, except JUnit 4 imports are replaced with JUnit 5\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n@@ -34,2 +38,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -37,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import java.util.stream.Stream;\n@@ -43,6 +45,5 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,3 +51,0 @@\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -55,0 +53,1 @@\n+    \/\/ Constants and enums remain the same\n@@ -56,1 +55,1 @@\n-    private static final LocalDateTime VALID_LDT_WITH_SECONDS    = LocalDateTime.of(1985, 1, 12, 12, 34, 56);\n+    private static final LocalDateTime VALID_LDT_WITH_SECONDS = LocalDateTime.of(1985, 1, 12, 12, 34, 56);\n@@ -63,6 +62,1 @@\n-    \/\/ We can only create LocalDateTimeStringConverter object after Locale is set.\n-    \/\/ Unfortunately, due to unpredictability of @Parameterized.Parameters methods\n-    \/\/ in JUnit, we have to allocate it after @BeforeClass sets up Locale and\n-    \/\/ necessary static fields. Otherwise, the test may collide with other\n-    \/\/ Local*StringConverter tests and cause unpredictable results.\n-    private enum LocalDateTimeStringConverterVariant {\n+    public enum LocalDateTimeStringConverterVariant {\n@@ -72,13 +66,0 @@\n-    };\n-\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { LocalDateTimeStringConverterVariant.NO_PARAM,\n-              FormatStyle.SHORT, FormatStyle.SHORT, VALID_LDT_WITHOUT_SECONDS},\n-\n-            { LocalDateTimeStringConverterVariant.WITH_FORMATTER_PARSER,\n-              null, null, VALID_LDT_WITH_SECONDS},\n-\n-            { LocalDateTimeStringConverterVariant.WITH_FORMAT_STYLES,\n-              FormatStyle.SHORT, FormatStyle.SHORT, VALID_LDT_WITHOUT_SECONDS},\n-        });\n@@ -87,20 +68,10 @@\n-    private LocalDateTimeStringConverterVariant converterVariant;\n-    private FormatStyle dateStyle;\n-    private FormatStyle timeStyle;\n-    private LocalDateTime validDateTime;\n-\n-    private LocalDateTimeStringConverter converter;\n-    private Locale locale;\n-    private DateTimeFormatter formatter, parser;\n-\n-\n-    public LocalDateTimeStringConverterTest(LocalDateTimeStringConverterVariant converterVariant, FormatStyle dateStyle, FormatStyle timeStyle, LocalDateTime validDateTime) {\n-        this.converterVariant = converterVariant;\n-        this.dateStyle = dateStyle;\n-        this.timeStyle = timeStyle;\n-        this.validDateTime = validDateTime;\n-\n-        this.converter = null;\n-        this.locale = null;\n-        this.formatter = null;\n-        this.parser = null;\n+    \/\/ Parameter source method\n+    public static Stream<Arguments> implementations() {\n+        return Stream.of(\n+                arguments(LocalDateTimeStringConverterVariant.NO_PARAM,\n+                        FormatStyle.SHORT, FormatStyle.SHORT, VALID_LDT_WITHOUT_SECONDS),\n+                arguments(LocalDateTimeStringConverterVariant.WITH_FORMATTER_PARSER,\n+                        null, null, VALID_LDT_WITH_SECONDS),\n+                arguments(LocalDateTimeStringConverterVariant.WITH_FORMAT_STYLES,\n+                        FormatStyle.SHORT, FormatStyle.SHORT, VALID_LDT_WITHOUT_SECONDS)\n+        );\n@@ -109,1 +80,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -111,1 +82,0 @@\n-        \/\/ Tests require that default locale is en_US\n@@ -115,1 +85,0 @@\n-        \/\/ DateTimeFormatter uses default locale, so we can init this after updating locale\n@@ -121,2 +90,0 @@\n-            \/\/ TODO: This can be removed when the minimum version of boot jdk\n-            \/\/ for JFX build is updated to JDK20 or above.\n@@ -129,1 +96,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -131,1 +98,0 @@\n-        \/\/ Restore VM's old locale\n@@ -135,34 +101,13 @@\n-    @Before\n-    public void setup() {\n-        \/\/ Locale is established now, so we can allocate objects depending on it\n-        switch (this.converterVariant) {\n-        case NO_PARAM:\n-            this.converter = new LocalDateTimeStringConverter();\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        case WITH_FORMATTER_PARSER:\n-            this.converter = new LocalDateTimeStringConverter(aFormatter, aParser);\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = aFormatter;\n-            this.parser = aParser;\n-            break;\n-        case WITH_FORMAT_STYLES:\n-            this.converter = new LocalDateTimeStringConverter(FormatStyle.SHORT, FormatStyle.SHORT, Locale.UK, IsoChronology.INSTANCE);\n-            this.locale = Locale.UK;\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        default:\n-            fail(\"Invalid converter variant: \" + this.converterVariant.toString());\n-        }\n-    }\n-\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testConstructor() {\n-        assertEquals(locale,\n-                LocalDateTimeStringConverterShim.getldtConverterLocale(converter));\n+    \/\/ Parameterized test methods\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void testConstructor(LocalDateTimeStringConverterVariant converterVariant,\n+                         FormatStyle dateStyle,\n+                         FormatStyle timeStyle,\n+                         LocalDateTime validDateTime) {\n+        LocalDateTimeStringConverter converter = createConverter(converterVariant);\n+        Locale locale = getLocale(converterVariant);\n+        DateTimeFormatter formatter = getFormatter(converterVariant);\n+        DateTimeFormatter parser = getParser(converterVariant);\n+\n+        assertEquals(locale, LocalDateTimeStringConverterShim.getldtConverterLocale(converter));\n@@ -175,1 +120,1 @@\n-                LocalDateTimeStringConverterShim.getldtConverterFormatter(converter));\n+                    LocalDateTimeStringConverterShim.getldtConverterFormatter(converter));\n@@ -179,1 +124,1 @@\n-                LocalDateTimeStringConverterShim.getldtConverterParser(converter));\n+                    LocalDateTimeStringConverterShim.getldtConverterParser(converter));\n@@ -182,1 +127,1 @@\n-                LocalDateTimeStringConverterShim.getldtConverterFormatter(converter));\n+                    LocalDateTimeStringConverterShim.getldtConverterFormatter(converter));\n@@ -186,0 +131,8 @@\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void toString_to_fromString_testRoundtrip(LocalDateTimeStringConverterVariant converterVariant,\n+                                              FormatStyle dateStyle,\n+                                              FormatStyle timeStyle,\n+                                              LocalDateTime validDateTime) {\n+        LocalDateTimeStringConverter converter = createConverter(converterVariant);\n+        DateTimeFormatter formatter = getFormatter(converterVariant);\n@@ -187,5 +140,0 @@\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void toString_to_fromString_testRoundtrip() {\n@@ -193,1 +141,0 @@\n-            \/\/ Only the default formatter\/parser can guarantee roundtrip symmetry\n@@ -198,0 +145,25 @@\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void fromString_testInvalidInput(LocalDateTimeStringConverterVariant converterVariant,\n+                                     FormatStyle dateStyle,\n+                                     FormatStyle timeStyle,\n+                                     LocalDateTime validDateTime) {\n+        LocalDateTimeStringConverter converter = createConverter(converterVariant);\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n+    }\n+\n+    \/\/ Helper methods for setup\n+    private LocalDateTimeStringConverter createConverter(LocalDateTimeStringConverterVariant variant) {\n+        switch (variant) {\n+            case NO_PARAM:\n+                return new LocalDateTimeStringConverter();\n+            case WITH_FORMATTER_PARSER:\n+                return new LocalDateTimeStringConverter(aFormatter, aParser);\n+            case WITH_FORMAT_STYLES:\n+                return new LocalDateTimeStringConverter(FormatStyle.SHORT, FormatStyle.SHORT,\n+                        Locale.UK, IsoChronology.INSTANCE);\n+            default:\n+                fail(\"Invalid converter variant: \" + variant);\n+                return null;\n+        }\n+    }\n@@ -199,3 +171,9 @@\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n+    private Locale getLocale(LocalDateTimeStringConverterVariant variant) {\n+        return switch (variant) {\n+            case NO_PARAM, WITH_FORMATTER_PARSER -> Locale.getDefault(Locale.Category.FORMAT);\n+            case WITH_FORMAT_STYLES -> Locale.UK;\n+            default -> {\n+                fail(\"Invalid converter variant: \" + variant);\n+                yield null;\n+            }\n+        };\n@@ -204,1 +182,17 @@\n-    @Test public void converter_with_specified_formatter_and_parser() {\n+    private DateTimeFormatter getFormatter(LocalDateTimeStringConverterVariant variant) {\n+        return switch (variant) {\n+            case WITH_FORMATTER_PARSER -> aFormatter;\n+            default -> null;\n+        };\n+    }\n+\n+    private DateTimeFormatter getParser(LocalDateTimeStringConverterVariant variant) {\n+        return switch (variant) {\n+            case WITH_FORMATTER_PARSER -> aParser;\n+            default -> null;\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void converter_with_specified_formatter_and_parser() {\n@@ -214,1 +208,3 @@\n-    @Test public void converter_with_specified_formatter_and_null_parser() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void converter_with_specified_formatter_and_null_parser() {\n@@ -222,3 +218,5 @@\n-    @Test\n-    public void testChronologyConsistency() {\n-        var converter = new LocalDateTimeStringConverter(FormatStyle.FULL, FormatStyle.MEDIUM, null, JapaneseChronology.INSTANCE);\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    void testChronologyConsistency() {\n+        var converter = new LocalDateTimeStringConverter(FormatStyle.FULL, FormatStyle.MEDIUM,\n+                null, JapaneseChronology.INSTANCE);\n@@ -226,1 +224,0 @@\n-        \/\/ force a chronology change with an invalid Japanese date\n@@ -233,0 +230,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateTimeStringConverterTest.java","additions":109,"deletions":111,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -34,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -35,1 +34,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -37,0 +35,1 @@\n+import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -38,7 +37,6 @@\n-import static org.junit.Assert.*;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -46,3 +44,0 @@\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -62,5 +57,0 @@\n-    \/\/ We can only create LocalTimeStringConverter object after Locale is set.\n-    \/\/ Unfortunately, due to unpredictability of @Parameterized.Parameters methods\n-    \/\/ in JUnit, we have to allocate it after @BeforeClass sets up Locale and\n-    \/\/ necessary static fields. Otherwise, the test may collide with other\n-    \/\/ Local*StringConverter tests and cause unpredictable results.\n@@ -71,13 +61,0 @@\n-    };\n-\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { LocalTimeStringConverterVariant.NO_PARAM,\n-              FormatStyle.SHORT, VALID_TIME_WITHOUT_SECONDS },\n-\n-            { LocalTimeStringConverterVariant.WITH_FORMATTER_PARSER,\n-              null, VALID_TIME_WITH_SECONDS },\n-\n-            { LocalTimeStringConverterVariant.WITH_FORMAT_STYLES,\n-              FormatStyle.SHORT, VALID_TIME_WITHOUT_SECONDS },\n-        });\n@@ -86,16 +63,6 @@\n-    private LocalTimeStringConverterVariant converterVariant;\n-    private FormatStyle timeStyle;\n-    private LocalTime validTime;\n-\n-    private LocalTimeStringConverter converter;\n-    private Locale locale;\n-    private DateTimeFormatter formatter, parser;\n-\n-    public LocalTimeStringConverterTest(LocalTimeStringConverterVariant converterVariant, FormatStyle timeStyle, LocalTime validTime) {\n-        this.converterVariant = converterVariant;\n-        this.timeStyle = timeStyle;\n-        this.validTime = validTime;\n-\n-        this.locale = null;\n-        this.formatter = null;\n-        this.parser = null;\n+    static Stream<Arguments> provideTestParameters() {\n+        return Stream.of(\n+                Arguments.of(LocalTimeStringConverterVariant.NO_PARAM, FormatStyle.SHORT, VALID_TIME_WITHOUT_SECONDS),\n+                Arguments.of(LocalTimeStringConverterVariant.WITH_FORMATTER_PARSER, null, VALID_TIME_WITH_SECONDS),\n+                Arguments.of(LocalTimeStringConverterVariant.WITH_FORMAT_STYLES, FormatStyle.SHORT, VALID_TIME_WITHOUT_SECONDS)\n+        );\n@@ -104,1 +71,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -106,1 +73,0 @@\n-        \/\/ Tests require that default locale is en_US\n@@ -110,1 +76,0 @@\n-        \/\/ DateTimeFormatter uses default locale, so we can init this after updating locale\n@@ -115,1 +80,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -117,1 +82,0 @@\n-        \/\/ Restore VM's old locale\n@@ -121,25 +85,29 @@\n-    @Before\n-    public void setup() {\n-        \/\/ Locale is established now, so we can allocate objects depending on it\n-        switch (this.converterVariant) {\n-        case NO_PARAM:\n-            this.converter = new LocalTimeStringConverter();\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        case WITH_FORMATTER_PARSER:\n-            this.converter = new LocalTimeStringConverter(aFormatter, aParser);\n-            this.locale = Locale.getDefault(Locale.Category.FORMAT);\n-            this.formatter = aFormatter;\n-            this.parser = aParser;\n-            break;\n-        case WITH_FORMAT_STYLES:\n-            this.converter = new LocalTimeStringConverter(FormatStyle.SHORT, Locale.UK);\n-            this.locale = Locale.UK;\n-            this.formatter = null;\n-            this.parser = null;\n-            break;\n-        default:\n-            fail(\"Invalid converter variant: \" + this.converterVariant.toString());\n-        }\n+    private record ConverterSetup(\n+            LocalTimeStringConverter converter,\n+            Locale locale,\n+            DateTimeFormatter formatter,\n+            DateTimeFormatter parser\n+    ) {}\n+\n+    private ConverterSetup setupConverter(\n+            LocalTimeStringConverterVariant converterVariant,\n+            FormatStyle timeStyle,\n+            LocalTime validTime\n+    ) {\n+        return switch (converterVariant) {\n+            case NO_PARAM -> {\n+                LocalTimeStringConverter converter = new LocalTimeStringConverter();\n+                Locale locale = Locale.getDefault(Locale.Category.FORMAT);\n+                yield new ConverterSetup(converter, locale, null, null);\n+            }\n+            case WITH_FORMATTER_PARSER -> {\n+                LocalTimeStringConverter converter = new LocalTimeStringConverter(aFormatter, aParser);\n+                Locale locale = Locale.getDefault(Locale.Category.FORMAT);\n+                yield new ConverterSetup(converter, locale, aFormatter, aParser);\n+            }\n+            case WITH_FORMAT_STYLES -> {\n+                LocalTimeStringConverter converter = new LocalTimeStringConverter(FormatStyle.SHORT, Locale.UK);\n+                yield new ConverterSetup(converter, Locale.UK, null, null);\n+            }\n+            default -> throw new IllegalArgumentException(\"Invalid converter variant: \" + converterVariant);\n+        };\n@@ -148,7 +116,14 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testConstructor() {\n-        assertEquals(locale,\n-                LocalTimeStringConverterShim.getldtConverterLocale(converter));\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void testConstructor(\n+            LocalTimeStringConverterVariant converterVariant,\n+            FormatStyle timeStyle,\n+            LocalTime validTime\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, timeStyle, validTime);\n+        LocalTimeStringConverter converter = setup.converter();\n+        Locale locale = setup.locale();\n+        DateTimeFormatter formatter = setup.formatter();\n+        DateTimeFormatter parser = setup.parser();\n+\n+        assertEquals(locale, LocalTimeStringConverterShim.getldtConverterLocale(converter));\n@@ -156,2 +131,4 @@\n-        assertEquals((timeStyle != null) ? timeStyle : FormatStyle.SHORT,\n-                LocalTimeStringConverterShim.getldtConverterTimeStyle(converter));\n+        assertEquals(\n+                (timeStyle != null) ? timeStyle : FormatStyle.SHORT,\n+                LocalTimeStringConverterShim.getldtConverterTimeStyle(converter)\n+        );\n@@ -159,2 +136,1 @@\n-            assertEquals(formatter,\n-                LocalTimeStringConverterShim.getldtConverterFormatter(converter));\n+            assertEquals(formatter, LocalTimeStringConverterShim.getldtConverterFormatter(converter));\n@@ -163,2 +139,1 @@\n-            assertEquals(parser,\n-                LocalTimeStringConverterShim.getldtConverterParser(converter));\n+            assertEquals(parser, LocalTimeStringConverterShim.getldtConverterParser(converter));\n@@ -166,2 +141,1 @@\n-            assertEquals(formatter,\n-                LocalTimeStringConverterShim.getldtConverterFormatter(converter));\n+            assertEquals(formatter, LocalTimeStringConverterShim.getldtConverterFormatter(converter));\n@@ -171,0 +145,10 @@\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void toString_to_fromString_testRoundtrip(\n+            LocalTimeStringConverterVariant converterVariant,\n+            FormatStyle timeStyle,\n+            LocalTime validTime\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, timeStyle, validTime);\n+        LocalTimeStringConverter converter = setup.converter();\n+        DateTimeFormatter formatter = setup.formatter();\n@@ -172,6 +156,0 @@\n-\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void toString_to_fromString_testRoundtrip() {\n@@ -179,1 +157,0 @@\n-            \/\/ Only the default formatter\/parser can guarantee roundtrip symmetry\n@@ -184,3 +161,11 @@\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n+    @ParameterizedTest\n+    @MethodSource(\"provideTestParameters\")\n+    void fromString_testInvalidInput(\n+            LocalTimeStringConverterVariant converterVariant,\n+            FormatStyle timeStyle,\n+            LocalTime validTime\n+    ) {\n+        ConverterSetup setup = setupConverter(converterVariant, timeStyle, validTime);\n+        LocalTimeStringConverter converter = setup.converter();\n+\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalTimeStringConverterTest.java","additions":87,"deletions":102,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,2 +38,0 @@\n-\/**\n- *\/\n@@ -43,1 +41,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -47,5 +46,2 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testDefaultConstructor() {\n+    @Test\n+    public void testDefaultConstructor() {\n@@ -58,1 +54,2 @@\n-    @Test public void testConstructor_locale() {\n+    @Test\n+    public void testConstructor_locale() {\n@@ -65,1 +62,2 @@\n-    @Test public void testConstructor_pattern() {\n+    @Test\n+    public void testConstructor_pattern() {\n@@ -72,1 +70,2 @@\n-    @Test public void testConstructor_locale_pattern() {\n+    @Test\n+    public void testConstructor_locale_pattern() {\n@@ -79,1 +78,2 @@\n-    @Test public void testConstructor_numberFormat() {\n+    @Test\n+    public void testConstructor_numberFormat() {\n@@ -87,6 +87,2 @@\n-\n-    \/*********************************************************************\n-     * Test methods\n-     ********************************************************************\/\n-\n-    @Test public void getNumberFormat_default() {\n+    @Test\n+    public void getNumberFormat_default() {\n@@ -96,1 +92,2 @@\n-    @Test public void getNumberFormat_nonNullPattern() {\n+    @Test\n+    public void getNumberFormat_nonNullPattern() {\n@@ -98,3 +95,1 @@\n-        assertTrue(\n-                NumberStringConverterShim.getNumberFormat(converter)\n-                instanceof DecimalFormat);\n+        assertTrue(NumberStringConverterShim.getNumberFormat(converter) instanceof DecimalFormat);\n@@ -103,1 +98,2 @@\n-    @Test public void getNumberFormat_nonNullNumberFormat() {\n+    @Test\n+    public void getNumberFormat_nonNullNumberFormat() {\n@@ -109,6 +105,2 @@\n-\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void fromString_testValidInput() {\n+    @Test\n+    public void fromString_testValidInput() {\n@@ -118,1 +110,2 @@\n-    @Test public void fromString_testValidInputWithWhiteSpace() {\n+    @Test\n+    public void fromString_testValidInputWithWhiteSpace() {\n@@ -122,1 +115,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -124,1 +117,1 @@\n-        converter.fromString(\"abcdefg\");\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n@@ -127,1 +120,2 @@\n-    @Test public void toString_validInput() {\n+    @Test\n+    public void toString_validInput() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/NumberStringConverterTest.java","additions":30,"deletions":36,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -33,17 +29,4 @@\n-import javafx.util.converter.BigDecimalStringConverter;\n-import javafx.util.converter.BigIntegerStringConverter;\n-import javafx.util.converter.BooleanStringConverter;\n-import javafx.util.converter.ByteStringConverter;\n-import javafx.util.converter.CharacterStringConverter;\n-import javafx.util.converter.CurrencyStringConverter;\n-import javafx.util.converter.DateStringConverter;\n-import javafx.util.converter.DateTimeStringConverter;\n-import javafx.util.converter.DefaultStringConverter;\n-import javafx.util.converter.DoubleStringConverter;\n-import javafx.util.converter.FloatStringConverter;\n-import javafx.util.converter.IntegerStringConverter;\n-import javafx.util.converter.LongStringConverter;\n-import javafx.util.converter.NumberStringConverter;\n-import javafx.util.converter.PercentageStringConverter;\n-import javafx.util.converter.ShortStringConverter;\n-import javafx.util.converter.TimeStringConverter;\n+import javafx.util.converter.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -51,4 +34,1 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import java.util.stream.Stream;\n@@ -56,28 +36,1 @@\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n-public class ParameterizedConverterTest {\n-    private final Class<? extends StringConverter> converterClass;\n-    private StringConverter converter;\n-\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { BigDecimalStringConverter.class },\n-            { BigIntegerStringConverter.class },\n-            { BooleanStringConverter.class },\n-            { ByteStringConverter.class },\n-            { CharacterStringConverter.class },\n-            { CurrencyStringConverter.class },\n-            { DateStringConverter.class },\n-            { DateTimeStringConverter.class },\n-            { DefaultStringConverter.class },\n-            { DoubleStringConverter.class },\n-            { FloatStringConverter.class },\n-            { IntegerStringConverter.class },\n-            { LongStringConverter.class },\n-            { NumberStringConverter.class },\n-            { PercentageStringConverter.class },\n-            { ShortStringConverter.class },\n-            { TimeStringConverter.class },\n-        });\n-    }\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -85,3 +38,1 @@\n-    public ParameterizedConverterTest(Class<? extends StringConverter> converterClass) {\n-        this.converterClass = converterClass;\n-    }\n+public class ParameterizedConverterTest {\n@@ -89,6 +40,20 @@\n-    @Before public void setup() {\n-        try {\n-            converter = converterClass.getDeclaredConstructor().newInstance();\n-        } catch (Exception ex) {\n-            ex.printStackTrace();\n-        }\n+    static Stream<Arguments> converterClasses() {\n+        return Stream.of(\n+                Arguments.of(BigDecimalStringConverter.class),\n+                Arguments.of(BigIntegerStringConverter.class),\n+                Arguments.of(BooleanStringConverter.class),\n+                Arguments.of(ByteStringConverter.class),\n+                Arguments.of(CharacterStringConverter.class),\n+                Arguments.of(CurrencyStringConverter.class),\n+                Arguments.of(DateStringConverter.class),\n+                Arguments.of(DateTimeStringConverter.class),\n+                Arguments.of(DefaultStringConverter.class),\n+                Arguments.of(DoubleStringConverter.class),\n+                Arguments.of(FloatStringConverter.class),\n+                Arguments.of(IntegerStringConverter.class),\n+                Arguments.of(LongStringConverter.class),\n+                Arguments.of(NumberStringConverter.class),\n+                Arguments.of(PercentageStringConverter.class),\n+                Arguments.of(ShortStringConverter.class),\n+                Arguments.of(TimeStringConverter.class)\n+        );\n@@ -97,1 +62,4 @@\n-    @Test public void toString_testNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"converterClasses\")\n+    void toString_testNull(Class<? extends StringConverter<?>> converterClass) throws Exception {\n+        StringConverter<?> converter = converterClass.getDeclaredConstructor().newInstance();\n@@ -101,2 +69,5 @@\n-    @Test public void fromString_testEmptyStringWithWhiteSpace() {\n-        if (converterClass == DefaultStringConverter.class) {\n+    @ParameterizedTest\n+    @MethodSource(\"converterClasses\")\n+    void fromString_testEmptyStringWithWhiteSpace(Class<? extends StringConverter<?>> converterClass) throws Exception {\n+        StringConverter<?> converter = converterClass.getDeclaredConstructor().newInstance();\n+        if (converter instanceof DefaultStringConverter) {\n@@ -109,1 +80,4 @@\n-    @Test public void fromString_testNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"converterClasses\")\n+    void fromString_testNull(Class<? extends StringConverter<?>> converterClass) throws Exception {\n+        StringConverter<?> converter = converterClass.getDeclaredConstructor().newInstance();\n@@ -113,2 +87,5 @@\n-    @Test public void fromString_testEmptyString() {\n-        if (converterClass == DefaultStringConverter.class) {\n+    @ParameterizedTest\n+    @MethodSource(\"converterClasses\")\n+    void fromString_testEmptyString(Class<? extends StringConverter<?>> converterClass) throws Exception {\n+        StringConverter<?> converter = converterClass.getDeclaredConstructor().newInstance();\n+        if (converter instanceof DefaultStringConverter) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ParameterizedConverterTest.java","additions":45,"deletions":68,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Arrays;\n@@ -32,1 +31,0 @@\n-import java.util.Collection;\n@@ -36,0 +34,1 @@\n+import java.util.stream.Stream;\n@@ -38,1 +37,5 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,8 +43,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-\/**\n- *\/\n-@RunWith(Parameterized.class)\n@@ -64,26 +59,51 @@\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][] {\n-            { new TimeStringConverter(),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_TIME_WITH_SECONDS, null, null },\n-\n-            { new TimeStringConverter(DateFormat.SHORT),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT,\n-              VALID_TIME_WITHOUT_SECONDS, null, null },\n-\n-            { new TimeStringConverter(Locale.UK),\n-              Locale.UK, DateFormat.DEFAULT,\n-              VALID_TIME_WITH_SECONDS, null, null },\n-\n-            { new TimeStringConverter(Locale.UK, DateFormat.SHORT),\n-              Locale.UK, DateFormat.SHORT,\n-              VALID_TIME_WITHOUT_SECONDS, null, null },\n-\n-            { new TimeStringConverter(\"HH mm ss\"),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_TIME_WITH_SECONDS, \"HH mm ss\", null },\n-\n-            { new TimeStringConverter(DateFormat.getTimeInstance(DateFormat.FULL)),\n-              Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n-              VALID_TIME_WITH_SECONDS, null, DateFormat.getTimeInstance(DateFormat.FULL) },\n-        });\n+    private static Stream<Arguments> provideAllConverters() {\n+        return Stream.of(\n+                createTestCase(\n+                        new TimeStringConverter(),\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        VALID_TIME_WITH_SECONDS,\n+                        null,\n+                        null\n+                ),\n+                createTestCase(\n+                        new TimeStringConverter(DateFormat.SHORT),\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.SHORT,\n+                        VALID_TIME_WITHOUT_SECONDS,\n+                        null,\n+                        null\n+                ),\n+                createTestCase(\n+                        new TimeStringConverter(Locale.UK),\n+                        Locale.UK,\n+                        DateFormat.DEFAULT,\n+                        VALID_TIME_WITH_SECONDS,\n+                        null,\n+                        null\n+                ),\n+                createTestCase(\n+                        new TimeStringConverter(Locale.UK, DateFormat.SHORT),\n+                        Locale.UK,\n+                        DateFormat.SHORT,\n+                        VALID_TIME_WITHOUT_SECONDS,\n+                        null,\n+                        null\n+                ),\n+                createTestCase(\n+                        new TimeStringConverter(\"HH mm ss\"),\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        VALID_TIME_WITH_SECONDS,\n+                        \"HH mm ss\",\n+                        null\n+                ),\n+                createTestCase(\n+                        new TimeStringConverter(DateFormat.getTimeInstance(DateFormat.FULL)),\n+                        Locale.getDefault(Locale.Category.FORMAT),\n+                        DateFormat.DEFAULT,\n+                        VALID_TIME_WITH_SECONDS,\n+                        null,\n+                        DateFormat.getTimeInstance(DateFormat.FULL)\n+                )\n+        );\n@@ -92,15 +112,4 @@\n-    private TimeStringConverter converter;\n-    private Locale locale;\n-    private int timeStyle;\n-    private String pattern;\n-    private DateFormat dateFormat;\n-    private Date validDate;\n-    private DateFormat validFormatter;\n-\n-    public TimeStringConverterTest(TimeStringConverter converter, Locale locale, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n-        this.converter = converter;\n-        this.locale = locale;\n-        this.timeStyle = timeStyle;\n-        this.validDate = validDate;\n-        this.pattern = pattern;\n-        this.dateFormat = dateFormat;\n+    private static Arguments createTestCase(TimeStringConverter converter, Locale locale, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        DateFormat validFormatter = computeValidFormatter(pattern, dateFormat, timeStyle, locale);\n+        return Arguments.of(converter, locale, timeStyle, validDate, pattern, dateFormat, validFormatter);\n+    }\n@@ -108,0 +117,1 @@\n+    private static DateFormat computeValidFormatter(String pattern, DateFormat dateFormat, int timeStyle, Locale locale) {\n@@ -109,1 +119,1 @@\n-            validFormatter = dateFormat;\n+            return dateFormat;\n@@ -111,1 +121,1 @@\n-            validFormatter = new SimpleDateFormat(pattern);\n+            return new SimpleDateFormat(pattern);\n@@ -113,1 +123,1 @@\n-            validFormatter = DateFormat.getTimeInstance(timeStyle, locale);\n+            return DateFormat.getTimeInstance(timeStyle, locale);\n@@ -117,1 +127,3 @@\n-    @Before public void setup() {\n+    private static Stream<Arguments> provideConvertersForConstructor() {\n+        return provideAllConverters()\n+                .map(args -> Arguments.of(args.get()[0], args.get()[1], args.get()[2], args.get()[4], args.get()[5]));\n@@ -120,5 +132,3 @@\n-    \/*********************************************************************\n-     * Test constructors\n-     ********************************************************************\/\n-\n-    @Test public void testConstructor() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForConstructor\")\n+    void testConstructor(TimeStringConverter converter, Locale locale, int timeStyle, String pattern, DateFormat dateFormat) {\n@@ -131,0 +141,4 @@\n+    private static Stream<Arguments> provideConvertersForGetDateFormat() {\n+        return provideAllConverters()\n+                .map(args -> Arguments.of(args.get()[0]));\n+    }\n@@ -132,5 +146,3 @@\n-    \/*********************************************************************\n-     * Test methods\n-     ********************************************************************\/\n-\n-    @Test public void getDateFormat() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForGetDateFormat\")\n+    void getDateFormat(TimeStringConverter converter) {\n@@ -140,4 +152,4 @@\n-    @Test public void getDateFormat_nonNullPattern() {\n-        converter = new TimeStringConverter(\"HH\");\n-        assertTrue(DateTimeStringConverterShim.getDateFormat(converter)\n-                instanceof SimpleDateFormat);\n+    @Test\n+    void getDateFormat_nonNullPattern() {\n+        TimeStringConverter converter = new TimeStringConverter(\"HH\");\n+        assertTrue(DateTimeStringConverterShim.getDateFormat(converter) instanceof SimpleDateFormat);\n@@ -146,0 +158,4 @@\n+    private static Stream<Arguments> provideConvertersForFromString() {\n+        return provideAllConverters()\n+                .map(args -> Arguments.of(args.get()[0], args.get()[3], args.get()[6]));\n+    }\n@@ -147,5 +163,3 @@\n-    \/*********************************************************************\n-     * Test toString \/ fromString methods\n-     ********************************************************************\/\n-\n-    @Test public void fromString_testValidInput() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForFromString\")\n+    void fromString_testValidInput(TimeStringConverter converter, Date validDate, DateFormat validFormatter) {\n@@ -153,1 +167,1 @@\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(input));\n+        assertEquals(validDate, converter.fromString(input), \"Input = \" + input);\n@@ -156,1 +170,3 @@\n-    @Test public void fromString_testValidInputWithWhiteSpace() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForFromString\")\n+    void fromString_testValidInputWithWhiteSpace(TimeStringConverter converter, Date validDate, DateFormat validFormatter) {\n@@ -158,1 +174,12 @@\n-        assertEquals(\"Input = \"+input, validDate, converter.fromString(\"      \" + input + \"      \"));\n+        assertEquals(validDate, converter.fromString(\"      \" + input + \"      \"), \"Input = \" + input);\n+    }\n+\n+    private static Stream<Arguments> provideConvertersForException() {\n+        return provideAllConverters()\n+                .map(args -> Arguments.of(args.get()[0]));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForException\")\n+    void fromString_testInvalidInput(TimeStringConverter converter) {\n+        assertThrows(RuntimeException.class, () -> converter.fromString(\"abcdefg\"));\n@@ -161,3 +188,2 @@\n-    @Test(expected=RuntimeException.class)\n-    public void fromString_testInvalidInput() {\n-        converter.fromString(\"abcdefg\");\n+    private static Stream<Arguments> provideConvertersForToString() {\n+        return provideConvertersForFromString();\n@@ -166,1 +192,3 @@\n-    @Test public void toString_validOutput() {\n+    @ParameterizedTest\n+    @MethodSource(\"provideConvertersForToString\")\n+    void toString_validOutput(TimeStringConverter converter, Date validDate, DateFormat validFormatter) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/TimeStringConverterTest.java","additions":110,"deletions":82,"binary":false,"changes":192,"status":"modified"}]}