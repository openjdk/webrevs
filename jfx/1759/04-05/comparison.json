{"files":[{"patch":"@@ -45,1 +45,0 @@\n-import org.junit.jupiter.api.BeforeEach;\n@@ -79,2 +78,2 @@\n-    @BeforeEach\n-    public void setUp() {\n+    private void setUp(Functions func) {\n+        this.func = func;\n@@ -95,2 +94,1 @@\n-        this.func = func;\n-        setUp(); \/\/ Call setup before each parameterized run\n+        setUp(func);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsNumberCastTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    static List<String> EMPTY = Collections.emptyList();\n+    static final List<String> EMPTY = Collections.emptyList();\n@@ -60,2 +60,2 @@\n-    public void setUp(Callable<ObservableList<String>> listFactory) throws Exception {\n-        listFactory = listFactory;\n+    private void setUp(Callable<ObservableList<String>> listFactory) throws Exception {\n+        this.listFactory = listFactory;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListEmptyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        listFactory = listFactory;\n+        this.listFactory = listFactory;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        setFactory = setFactory;\n+        this.setFactory = setFactory;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-    private Callable<? extends List<String>> listFactory;\n-    private List<String> list;\n-    private ListIterator<String> iter;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSubListIteratorTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import static org.junit.jupiter.api.Assertions.*;\n-\n@@ -32,2 +30,6 @@\n-import java.util.*;\n-import java.util.stream.Stream;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n@@ -36,2 +38,2 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n+import static org.junit.Assert.*;\n+\n@@ -40,3 +42,1 @@\n-import org.junit.jupiter.params.provider.Arguments;\n-\n-class DateStringConverterTest {\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,0 +44,3 @@\n+\/**\n+ *\/\n+public class DateStringConverterTest {\n@@ -45,0 +48,1 @@\n+\n@@ -48,1 +52,6 @@\n-        c.set(1985, Calendar.JANUARY, 12, 0, 0, 0);\n+        c.set(Calendar.YEAR, 1985);\n+        c.set(Calendar.MONTH, Calendar.JANUARY);\n+        c.set(Calendar.DAY_OF_MONTH, 12);\n+        c.set(Calendar.HOUR_OF_DAY, 0);\n+        c.set(Calendar.MINUTE, 0);\n+        c.set(Calendar.SECOND, 0);\n@@ -53,0 +62,28 @@\n+    public static Collection implementations() {\n+        return Arrays.asList(new Object[][] {\n+                { new DateStringConverter(),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n+                        VALID_DATE, null, null },\n+\n+                { new DateStringConverter(DateFormat.SHORT),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT,\n+                        VALID_DATE, null, null },\n+\n+                { new DateStringConverter(Locale.UK),\n+                        Locale.UK, DateFormat.DEFAULT,\n+                        VALID_DATE, null, null },\n+\n+                { new DateStringConverter(Locale.UK, DateFormat.SHORT),\n+                        Locale.UK, DateFormat.SHORT,\n+                        VALID_DATE, null, null },\n+\n+                { new DateStringConverter(\"dd MM yyyy\"),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n+                        VALID_DATE, \"dd MM yyyy\", null },\n+\n+                { new DateStringConverter(DateFormat.getDateInstance(DateFormat.LONG)),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT,\n+                        VALID_DATE, null, DateFormat.getDateInstance(DateFormat.LONG) },\n+        });\n+    }\n+\n@@ -54,0 +91,5 @@\n+    private Locale locale;\n+    private int dateStyle;\n+    private String pattern;\n+    private DateFormat dateFormat;\n+    private Date validDate;\n@@ -56,12 +98,15 @@\n-    @BeforeEach\n-    void setup() {}\n-\n-    static Stream<Arguments> implementations() {\n-        return Stream.of(\n-                Arguments.of(new DateStringConverter(), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, null, null),\n-                Arguments.of(new DateStringConverter(DateFormat.SHORT), Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT, VALID_DATE, null, null),\n-                Arguments.of(new DateStringConverter(Locale.UK), Locale.UK, DateFormat.DEFAULT, VALID_DATE, null, null),\n-                Arguments.of(new DateStringConverter(Locale.UK, DateFormat.SHORT), Locale.UK, DateFormat.SHORT, VALID_DATE, null, null),\n-                Arguments.of(new DateStringConverter(\"dd MM yyyy\"), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, \"dd MM yyyy\", null),\n-                Arguments.of(new DateStringConverter(DateFormat.getDateInstance(DateFormat.LONG)), Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, VALID_DATE, null, DateFormat.getDateInstance(DateFormat.LONG))\n-        );\n+    private void setUp(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        this.converter = converter;\n+        this.locale = locale;\n+        this.dateStyle = dateStyle;\n+        this.validDate = validDate;\n+        this.pattern = pattern;\n+        this.dateFormat = dateFormat;\n+\n+        if (dateFormat != null) {\n+            validFormatter = dateFormat;\n+        } else if (pattern != null) {\n+            validFormatter = new SimpleDateFormat(pattern);\n+        } else {\n+            validFormatter = DateFormat.getDateInstance(dateStyle, locale);\n+        }\n@@ -70,0 +115,4 @@\n+    \/*********************************************************************\n+     * Test constructors\n+     ********************************************************************\/\n+\n@@ -72,1 +121,2 @@\n-    void testConstructor(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+    public void testConstructor(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n@@ -79,2 +129,46 @@\n-    @Test\n-    void fromString_testInvalidInput() {\n+\n+    \/*********************************************************************\n+     * Test methods\n+     ********************************************************************\/\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void getDateFormat(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n+        assertNotNull(DateTimeStringConverterShim.getDateFormat(converter));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void getDateFormat_nonNullPattern(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n+        converter = new DateStringConverter(\"yyyy\");\n+        assertTrue(\n+                DateTimeStringConverterShim.getDateFormat(converter)\n+                        instanceof SimpleDateFormat);\n+    }\n+\n+    \/*********************************************************************\n+     * Test toString \/ fromString methods\n+     ********************************************************************\/\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void fromString_testValidInput(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n+        String input = validFormatter.format(validDate);\n+        assertEquals(validDate, converter.fromString(input), \"Input = \" + input);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void fromString_testValidInputWithWhiteSpace(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n+        String input = validFormatter.format(validDate);\n+        assertEquals(validDate, converter.fromString(\"      \" + input + \"      \"), \"Input = \" + input);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void fromString_testInvalidInput(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n@@ -83,1 +177,0 @@\n-}\n@@ -85,0 +178,7 @@\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void toString_validOutput(DateStringConverter converter, Locale locale, int dateStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, validDate, pattern, dateFormat);\n+        assertEquals(validFormatter.format(validDate), converter.toString(validDate));\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateStringConverterTest.java","additions":126,"deletions":26,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -32,0 +32,1 @@\n+import java.util.Collection;\n@@ -35,2 +36,0 @@\n-import java.util.stream.Stream;\n-\n@@ -39,0 +38,1 @@\n+import static org.junit.Assert.*;\n@@ -40,2 +40,0 @@\n-import static org.junit.jupiter.api.Assertions.*;\n-import org.junit.jupiter.api.BeforeAll;\n@@ -44,1 +42,0 @@\n-import org.junit.jupiter.params.provider.Arguments;\n@@ -47,0 +44,2 @@\n+\/**\n+ *\/\n@@ -66,70 +65,5 @@\n-    static Stream<Arguments> provideTestParameters() {\n-        return Stream.of(\n-                Arguments.of(\n-                        \"no-args\",\n-                        new Object[]{},\n-                        Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.DEFAULT,\n-                        DateFormat.DEFAULT,\n-                        VALID_DATE_WITH_SECONDS,\n-                        null,\n-                        null,\n-                        null\n-                ),\n-                Arguments.of(\n-                        \"styles\",\n-                        new Object[]{DateFormat.SHORT, DateFormat.SHORT},\n-                        Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.SHORT,\n-                        DateFormat.SHORT,\n-                        VALID_DATE_WITHOUT_SECONDS,\n-                        null,\n-                        null,\n-                        null\n-                ),\n-                Arguments.of(\n-                        \"locale\",\n-                        new Object[]{Locale.UK},\n-                        Locale.UK,\n-                        DateFormat.DEFAULT,\n-                        DateFormat.DEFAULT,\n-                        VALID_DATE_WITH_SECONDS,\n-                        null,\n-                        null,\n-                        null\n-                ),\n-                Arguments.of(\n-                        \"localeStyles\",\n-                        new Object[]{Locale.UK, DateFormat.SHORT, DateFormat.SHORT},\n-                        Locale.UK,\n-                        DateFormat.SHORT,\n-                        DateFormat.SHORT,\n-                        VALID_DATE_WITHOUT_SECONDS,\n-                        null,\n-                        null,\n-                        null\n-                ),\n-                Arguments.of(\n-                        \"pattern\",\n-                        new Object[]{\"dd MM yyyy HH mm ss\"},\n-                        Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.DEFAULT,\n-                        DateFormat.DEFAULT,\n-                        VALID_DATE_WITH_SECONDS,\n-                        \"dd MM yyyy HH mm ss\",\n-                        null,\n-                        null\n-                ),\n-                Arguments.of(\n-                        \"dateFormatInstance\",\n-                        new Object[]{DateFormat.LONG, DateFormat.FULL},\n-                        Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.DEFAULT,\n-                        DateFormat.DEFAULT,\n-                        VALID_DATE_WITH_SECONDS,\n-                        null,\n-                        DateFormat.LONG,\n-                        DateFormat.FULL\n-                )\n-        );\n-    }\n+    public static Collection implementations() {\n+        return Arrays.asList(new Object[][] {\n+                { new DateTimeStringConverter(),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS, null, null },\n@@ -137,4 +71,3 @@\n-    @BeforeAll\n-    static void setup() {\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n-    }\n+                { new DateTimeStringConverter(DateFormat.SHORT, DateFormat.SHORT),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT, DateFormat.SHORT,\n+                        VALID_DATE_WITHOUT_SECONDS, null, null },\n@@ -142,29 +75,16 @@\n-    private DateTimeStringConverter createConverter(String constructorType, Object[] constructorArgs) {\n-        switch (constructorType) {\n-            case \"no-args\":\n-                return new DateTimeStringConverter();\n-            case \"styles\":\n-                return new DateTimeStringConverter(\n-                        (Integer) constructorArgs[0],\n-                        (Integer) constructorArgs[1]\n-                );\n-            case \"locale\":\n-                return new DateTimeStringConverter((Locale) constructorArgs[0]);\n-            case \"localeStyles\":\n-                return new DateTimeStringConverter(\n-                        (Locale) constructorArgs[0],\n-                        (Integer) constructorArgs[1],\n-                        (Integer) constructorArgs[2]\n-                );\n-            case \"pattern\":\n-                return new DateTimeStringConverter((String) constructorArgs[0]);\n-            case \"dateFormatInstance\":\n-                DateFormat dateFormat = DateFormat.getDateTimeInstance(\n-                        (Integer) constructorArgs[0],\n-                        (Integer) constructorArgs[1]\n-                );\n-                return new DateTimeStringConverter(dateFormat);\n-            default:\n-                fail(\"Unknown constructor type: \" + constructorType);\n-                return null;\n-        }\n+                { new DateTimeStringConverter(Locale.UK),\n+                        Locale.UK, DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS, null, null },\n+\n+                { new DateTimeStringConverter(Locale.UK, DateFormat.SHORT, DateFormat.SHORT),\n+                        Locale.UK, DateFormat.SHORT, DateFormat.SHORT,\n+                        VALID_DATE_WITHOUT_SECONDS, null, null },\n+\n+                { new DateTimeStringConverter(\"dd MM yyyy HH mm ss\"),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS, \"dd MM yyyy HH mm ss\", null },\n+\n+                { new DateTimeStringConverter(DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL)),\n+                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        VALID_DATE_WITH_SECONDS, null, DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL) },\n+        });\n@@ -173,11 +93,20 @@\n-    private DateFormat createValidFormatter(\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle,\n-            String pattern,\n-            int dateStyle,\n-            int timeStyle,\n-            Locale locale\n-    ) {\n-        DateFormat formatter;\n-        if (dateFormatDateStyle != null && dateFormatTimeStyle != null) {\n-            formatter = DateFormat.getDateTimeInstance(dateFormatDateStyle, dateFormatTimeStyle, locale);\n+    private DateTimeStringConverter converter;\n+    private Locale locale;\n+    private int dateStyle;\n+    private int timeStyle;\n+    private String pattern;\n+    private DateFormat dateFormat;\n+    private Date validDate;\n+    private DateFormat validFormatter;\n+\n+    private void setUp(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        this.converter = converter;\n+        this.locale = locale;\n+        this.dateStyle = dateStyle;\n+        this.timeStyle = timeStyle;\n+        this.validDate = validDate;\n+        this.pattern = pattern;\n+        this.dateFormat = dateFormat;\n+\n+        if (dateFormat != null) {\n+            validFormatter = dateFormat;\n@@ -185,1 +114,1 @@\n-            formatter = new SimpleDateFormat(pattern);\n+            validFormatter = new SimpleDateFormat(pattern);\n@@ -187,1 +116,1 @@\n-            formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n+            validFormatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n@@ -189,2 +118,0 @@\n-        formatter.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-        return formatter;\n@@ -193,19 +120,3 @@\n-    @ParameterizedTest\n-    @MethodSource(\"provideTestParameters\")\n-    void testConstructor(\n-            String constructorType,\n-            Object[] constructorArgs,\n-            Locale expectedLocale,\n-            int expectedDateStyle,\n-            int expectedTimeStyle,\n-            Date validDate,\n-            String expectedPattern,\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle\n-    ) {\n-        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n-\n-        assertEquals(expectedLocale, DateTimeStringConverterShim.getLocale(converter));\n-        assertEquals(expectedDateStyle, DateTimeStringConverterShim.getDateStyle(converter));\n-        assertEquals(expectedTimeStyle, DateTimeStringConverterShim.getTimeStyle(converter));\n-        assertEquals(expectedPattern, DateTimeStringConverterShim.getPattern(converter));\n+    \/*********************************************************************\n+     * Test constructors\n+     ********************************************************************\/\n@@ -213,4 +124,9 @@\n-        if (dateFormatDateStyle != null) {\n-            DateFormat dateFormat = DateTimeStringConverterShim.getDateFormatVar(converter);\n-            assertNotNull(dateFormat);\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void testConstructor(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n+        assertEquals(locale, DateTimeStringConverterShim.getLocale(converter));\n+        assertEquals(dateStyle, DateTimeStringConverterShim.getDateStyle(converter));\n+        assertEquals(pattern, DateTimeStringConverterShim.getPattern(converter));\n+        assertEquals(dateFormat, DateTimeStringConverterShim.getDateFormatVar(converter));\n+        assertEquals(timeStyle, DateTimeStringConverterShim.getTimeStyle(converter));\n@@ -219,3 +135,8 @@\n-    @Test\n-    void getDateFormat_default() {\n-        DateTimeStringConverter converter = new DateTimeStringConverter();\n+    \/*********************************************************************\n+     * Test methods\n+     ********************************************************************\/\n+\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void getDateFormat_default(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n@@ -225,4 +146,7 @@\n-    @Test\n-    void getDateFormat_nonNullPattern() {\n-        DateTimeStringConverter converter = new DateTimeStringConverter(\"yyyy\/MM\/dd HH:mm:ss\");\n-        assertTrue(DateTimeStringConverterShim.getDateFormat(converter) instanceof SimpleDateFormat);\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void getDateFormat_nonNullPattern(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n+        converter = new DateTimeStringConverter(\"yyyy\/MM\/dd HH:mm:ss\");\n+        assertTrue(DateTimeStringConverterShim.getDateFormat(converter)\n+                instanceof SimpleDateFormat);\n@@ -231,0 +155,4 @@\n+    \/*********************************************************************\n+     * Test toString \/ fromString methods\n+     ********************************************************************\/\n+\n@@ -232,21 +160,3 @@\n-    @MethodSource(\"provideTestParameters\")\n-    void fromString_testValidInput(\n-            String constructorType,\n-            Object[] constructorArgs,\n-            Locale expectedLocale,\n-            int expectedDateStyle,\n-            int expectedTimeStyle,\n-            Date validDate,\n-            String expectedPattern,\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle\n-    ) {\n-        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n-        DateFormat validFormatter = createValidFormatter(\n-                dateFormatDateStyle,\n-                dateFormatTimeStyle,\n-                expectedPattern,\n-                expectedDateStyle,\n-                expectedTimeStyle,\n-                expectedLocale\n-        );\n+    @MethodSource(\"implementations\")\n+    public void fromString_testValidInput(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n@@ -254,1 +164,1 @@\n-        assertEquals(validDate, converter.fromString(input), \"Input = \" + input);\n+        assertEquals(\"Input = \"+input, validDate, converter.fromString(input));\n@@ -258,21 +168,3 @@\n-    @MethodSource(\"provideTestParameters\")\n-    void fromString_testValidInputWithWhiteSpace(\n-            String constructorType,\n-            Object[] constructorArgs,\n-            Locale expectedLocale,\n-            int expectedDateStyle,\n-            int expectedTimeStyle,\n-            Date validDate,\n-            String expectedPattern,\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle\n-    ) {\n-        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n-        DateFormat validFormatter = createValidFormatter(\n-                dateFormatDateStyle,\n-                dateFormatTimeStyle,\n-                expectedPattern,\n-                expectedDateStyle,\n-                expectedTimeStyle,\n-                expectedLocale\n-        );\n+    @MethodSource(\"implementations\")\n+    public void fromString_testValidInputWithWhiteSpace(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n@@ -280,1 +172,1 @@\n-        assertEquals(validDate, converter.fromString(\"      \" + input + \"      \"), \"Input = \" + input);\n+        assertEquals(\"Input = \"+input, validDate, converter.fromString(\"      \" + input + \"      \"));\n@@ -284,13 +176,3 @@\n-    @MethodSource(\"provideTestParameters\")\n-    void fromString_testInvalidInput(\n-            String constructorType,\n-            Object[] constructorArgs,\n-            Locale expectedLocale,\n-            int expectedDateStyle,\n-            int expectedTimeStyle,\n-            Date validDate,\n-            String expectedPattern,\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle\n-    ) {\n-        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n+    @MethodSource(\"implementations\")\n+    public void fromString_testInvalidInput(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n@@ -301,21 +183,3 @@\n-    @MethodSource(\"provideTestParameters\")\n-    void toString_validOutput(\n-            String constructorType,\n-            Object[] constructorArgs,\n-            Locale expectedLocale,\n-            int expectedDateStyle,\n-            int expectedTimeStyle,\n-            Date validDate,\n-            String expectedPattern,\n-            Integer dateFormatDateStyle,\n-            Integer dateFormatTimeStyle\n-    ) {\n-        DateTimeStringConverter converter = createConverter(constructorType, constructorArgs);\n-        DateFormat validFormatter = createValidFormatter(\n-                dateFormatDateStyle,\n-                dateFormatTimeStyle,\n-                expectedPattern,\n-                expectedDateStyle,\n-                expectedTimeStyle,\n-                expectedLocale\n-        );\n+    @MethodSource(\"implementations\")\n+    public void toString_validOutput(DateTimeStringConverter converter, Locale locale, int dateStyle, int timeStyle, Date validDate, String pattern, DateFormat dateFormat) {\n+        setUp(converter, locale, dateStyle, timeStyle, validDate, pattern, dateFormat);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateTimeStringConverterTest.java","additions":96,"deletions":232,"binary":false,"changes":328,"status":"modified"}]}